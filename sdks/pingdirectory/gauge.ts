// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Gauge extends pulumi.CustomResource {
    /**
     * Get an existing Gauge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GaugeState, opts?: pulumi.CustomResourceOptions): Gauge {
        return new Gauge(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/gauge:Gauge';

    /**
     * Returns true if the given object is an instance of Gauge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gauge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gauge.__pulumiType;
    }

    /**
     * Specifies the level at which alerts are sent for alarms raised by this Gauge.
     */
    public readonly alertLevel!: pulumi.Output<string | undefined>;
    /**
     * A value that is used to determine whether the current monitored value indicates this gauge's severity should no longer
     * be 'critical'.
     */
    public readonly criticalExitValue!: pulumi.Output<number | undefined>;
    /**
     * When the `type` attribute is set to: - `indicator`: A regular expression pattern that is used to determine whether the
     * current monitored value indicates this gauge's severity should be critical. - `numeric`: A value that is used to
     * determine whether the current monitored value indicates this gauge's severity should be 'critical'.
     */
    public readonly criticalValue!: pulumi.Output<string | undefined>;
    /**
     * A description for this Gauge
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether this Gauge is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Specifies resources to exclude from being monitored.
     */
    public readonly excludeResources!: pulumi.Output<string[]>;
    /**
     * When the `type` attribute is set to: - `indicator`: Specifies the source of data to use in determining this Indicator
     * Gauge's severity and status. - `numeric`: Specifies the source of data to use in determining this gauge's current
     * severity.
     */
    public readonly gaugeDataSource!: pulumi.Output<string>;
    /**
     * Specifies set of resources to be monitored.
     */
    public readonly includeResources!: pulumi.Output<string[]>;
    /**
     * A value that is used to determine whether the current monitored value indicates this gauge's severity should no longer
     * be 'major'.
     */
    public readonly majorExitValue!: pulumi.Output<number | undefined>;
    /**
     * When the `type` attribute is set to: - `indicator`: A regular expression pattern that is used to determine whether the
     * current monitored value indicates this gauge's severity will be 'major'. - `numeric`: A value that is used to determine
     * whether the current monitored value indicates this gauge's severity should be 'major'.
     */
    public readonly majorValue!: pulumi.Output<string | undefined>;
    /**
     * A value that is used to determine whether the current monitored value indicates this gauge's severity should no longer
     * be 'minor'.
     */
    public readonly minorExitValue!: pulumi.Output<number | undefined>;
    /**
     * When the `type` attribute is set to: - `indicator`: A regular expression pattern that is used to determine whether the
     * current monitored value indicates this gauge's severity will be 'minor'. - `numeric`: A value that is used to determine
     * whether the current monitored value indicates this gauge's severity should be 'minor'.
     */
    public readonly minorValue!: pulumi.Output<string | undefined>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * When defined, causes this Gauge to assume the specified severity, overriding its computed severity. This is useful for
     * testing alarms generated by Gauges as well as suppressing alarms for known conditions.
     */
    public readonly overrideSeverity!: pulumi.Output<string | undefined>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.GaugeRequiredAction[]>;
    /**
     * Indicates the number of times the monitor data source value will be collected during the update interval.
     */
    public readonly samplesPerUpdateInterval!: pulumi.Output<number>;
    /**
     * Specifies the alarm severity level at or above which the server is considered degraded.
     */
    public readonly serverDegradedSeverityLevel!: pulumi.Output<string>;
    /**
     * Specifies the alarm severity level at or above which the server is considered unavailable.
     */
    public readonly serverUnavailableSeverityLevel!: pulumi.Output<string>;
    /**
     * The type of Gauge resource. Options are ['indicator', 'numeric']
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The frequency with which this Gauge is updated.
     */
    public readonly updateInterval!: pulumi.Output<string>;
    /**
     * A value that is used to determine whether the current monitored value indicates this gauge's severity should no longer
     * be 'warning'.
     */
    public readonly warningExitValue!: pulumi.Output<number | undefined>;
    /**
     * When the `type` attribute is set to: - `indicator`: A regular expression pattern that is used to determine whether the
     * current monitored value indicates this gauge's severity will be 'warning'. - `numeric`: A value that is used to
     * determine whether the current monitored value indicates this gauge's severity should be 'warning'.
     */
    public readonly warningValue!: pulumi.Output<string | undefined>;

    /**
     * Create a Gauge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GaugeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GaugeArgs | GaugeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GaugeState | undefined;
            resourceInputs["alertLevel"] = state ? state.alertLevel : undefined;
            resourceInputs["criticalExitValue"] = state ? state.criticalExitValue : undefined;
            resourceInputs["criticalValue"] = state ? state.criticalValue : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["excludeResources"] = state ? state.excludeResources : undefined;
            resourceInputs["gaugeDataSource"] = state ? state.gaugeDataSource : undefined;
            resourceInputs["includeResources"] = state ? state.includeResources : undefined;
            resourceInputs["majorExitValue"] = state ? state.majorExitValue : undefined;
            resourceInputs["majorValue"] = state ? state.majorValue : undefined;
            resourceInputs["minorExitValue"] = state ? state.minorExitValue : undefined;
            resourceInputs["minorValue"] = state ? state.minorValue : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["overrideSeverity"] = state ? state.overrideSeverity : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["samplesPerUpdateInterval"] = state ? state.samplesPerUpdateInterval : undefined;
            resourceInputs["serverDegradedSeverityLevel"] = state ? state.serverDegradedSeverityLevel : undefined;
            resourceInputs["serverUnavailableSeverityLevel"] = state ? state.serverUnavailableSeverityLevel : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updateInterval"] = state ? state.updateInterval : undefined;
            resourceInputs["warningExitValue"] = state ? state.warningExitValue : undefined;
            resourceInputs["warningValue"] = state ? state.warningValue : undefined;
        } else {
            const args = argsOrState as GaugeArgs | undefined;
            if ((!args || args.gaugeDataSource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gaugeDataSource'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["alertLevel"] = args ? args.alertLevel : undefined;
            resourceInputs["criticalExitValue"] = args ? args.criticalExitValue : undefined;
            resourceInputs["criticalValue"] = args ? args.criticalValue : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["excludeResources"] = args ? args.excludeResources : undefined;
            resourceInputs["gaugeDataSource"] = args ? args.gaugeDataSource : undefined;
            resourceInputs["includeResources"] = args ? args.includeResources : undefined;
            resourceInputs["majorExitValue"] = args ? args.majorExitValue : undefined;
            resourceInputs["majorValue"] = args ? args.majorValue : undefined;
            resourceInputs["minorExitValue"] = args ? args.minorExitValue : undefined;
            resourceInputs["minorValue"] = args ? args.minorValue : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overrideSeverity"] = args ? args.overrideSeverity : undefined;
            resourceInputs["samplesPerUpdateInterval"] = args ? args.samplesPerUpdateInterval : undefined;
            resourceInputs["serverDegradedSeverityLevel"] = args ? args.serverDegradedSeverityLevel : undefined;
            resourceInputs["serverUnavailableSeverityLevel"] = args ? args.serverUnavailableSeverityLevel : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["updateInterval"] = args ? args.updateInterval : undefined;
            resourceInputs["warningExitValue"] = args ? args.warningExitValue : undefined;
            resourceInputs["warningValue"] = args ? args.warningValue : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gauge.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Gauge resources.
 */
export interface GaugeState {
    /**
     * Specifies the level at which alerts are sent for alarms raised by this Gauge.
     */
    alertLevel?: pulumi.Input<string>;
    /**
     * A value that is used to determine whether the current monitored value indicates this gauge's severity should no longer
     * be 'critical'.
     */
    criticalExitValue?: pulumi.Input<number>;
    /**
     * When the `type` attribute is set to: - `indicator`: A regular expression pattern that is used to determine whether the
     * current monitored value indicates this gauge's severity should be critical. - `numeric`: A value that is used to
     * determine whether the current monitored value indicates this gauge's severity should be 'critical'.
     */
    criticalValue?: pulumi.Input<string>;
    /**
     * A description for this Gauge
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this Gauge is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies resources to exclude from being monitored.
     */
    excludeResources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - `indicator`: Specifies the source of data to use in determining this Indicator
     * Gauge's severity and status. - `numeric`: Specifies the source of data to use in determining this gauge's current
     * severity.
     */
    gaugeDataSource?: pulumi.Input<string>;
    /**
     * Specifies set of resources to be monitored.
     */
    includeResources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A value that is used to determine whether the current monitored value indicates this gauge's severity should no longer
     * be 'major'.
     */
    majorExitValue?: pulumi.Input<number>;
    /**
     * When the `type` attribute is set to: - `indicator`: A regular expression pattern that is used to determine whether the
     * current monitored value indicates this gauge's severity will be 'major'. - `numeric`: A value that is used to determine
     * whether the current monitored value indicates this gauge's severity should be 'major'.
     */
    majorValue?: pulumi.Input<string>;
    /**
     * A value that is used to determine whether the current monitored value indicates this gauge's severity should no longer
     * be 'minor'.
     */
    minorExitValue?: pulumi.Input<number>;
    /**
     * When the `type` attribute is set to: - `indicator`: A regular expression pattern that is used to determine whether the
     * current monitored value indicates this gauge's severity will be 'minor'. - `numeric`: A value that is used to determine
     * whether the current monitored value indicates this gauge's severity should be 'minor'.
     */
    minorValue?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When defined, causes this Gauge to assume the specified severity, overriding its computed severity. This is useful for
     * testing alarms generated by Gauges as well as suppressing alarms for known conditions.
     */
    overrideSeverity?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.GaugeRequiredAction>[]>;
    /**
     * Indicates the number of times the monitor data source value will be collected during the update interval.
     */
    samplesPerUpdateInterval?: pulumi.Input<number>;
    /**
     * Specifies the alarm severity level at or above which the server is considered degraded.
     */
    serverDegradedSeverityLevel?: pulumi.Input<string>;
    /**
     * Specifies the alarm severity level at or above which the server is considered unavailable.
     */
    serverUnavailableSeverityLevel?: pulumi.Input<string>;
    /**
     * The type of Gauge resource. Options are ['indicator', 'numeric']
     */
    type?: pulumi.Input<string>;
    /**
     * The frequency with which this Gauge is updated.
     */
    updateInterval?: pulumi.Input<string>;
    /**
     * A value that is used to determine whether the current monitored value indicates this gauge's severity should no longer
     * be 'warning'.
     */
    warningExitValue?: pulumi.Input<number>;
    /**
     * When the `type` attribute is set to: - `indicator`: A regular expression pattern that is used to determine whether the
     * current monitored value indicates this gauge's severity will be 'warning'. - `numeric`: A value that is used to
     * determine whether the current monitored value indicates this gauge's severity should be 'warning'.
     */
    warningValue?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gauge resource.
 */
export interface GaugeArgs {
    /**
     * Specifies the level at which alerts are sent for alarms raised by this Gauge.
     */
    alertLevel?: pulumi.Input<string>;
    /**
     * A value that is used to determine whether the current monitored value indicates this gauge's severity should no longer
     * be 'critical'.
     */
    criticalExitValue?: pulumi.Input<number>;
    /**
     * When the `type` attribute is set to: - `indicator`: A regular expression pattern that is used to determine whether the
     * current monitored value indicates this gauge's severity should be critical. - `numeric`: A value that is used to
     * determine whether the current monitored value indicates this gauge's severity should be 'critical'.
     */
    criticalValue?: pulumi.Input<string>;
    /**
     * A description for this Gauge
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this Gauge is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies resources to exclude from being monitored.
     */
    excludeResources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - `indicator`: Specifies the source of data to use in determining this Indicator
     * Gauge's severity and status. - `numeric`: Specifies the source of data to use in determining this gauge's current
     * severity.
     */
    gaugeDataSource: pulumi.Input<string>;
    /**
     * Specifies set of resources to be monitored.
     */
    includeResources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A value that is used to determine whether the current monitored value indicates this gauge's severity should no longer
     * be 'major'.
     */
    majorExitValue?: pulumi.Input<number>;
    /**
     * When the `type` attribute is set to: - `indicator`: A regular expression pattern that is used to determine whether the
     * current monitored value indicates this gauge's severity will be 'major'. - `numeric`: A value that is used to determine
     * whether the current monitored value indicates this gauge's severity should be 'major'.
     */
    majorValue?: pulumi.Input<string>;
    /**
     * A value that is used to determine whether the current monitored value indicates this gauge's severity should no longer
     * be 'minor'.
     */
    minorExitValue?: pulumi.Input<number>;
    /**
     * When the `type` attribute is set to: - `indicator`: A regular expression pattern that is used to determine whether the
     * current monitored value indicates this gauge's severity will be 'minor'. - `numeric`: A value that is used to determine
     * whether the current monitored value indicates this gauge's severity should be 'minor'.
     */
    minorValue?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * When defined, causes this Gauge to assume the specified severity, overriding its computed severity. This is useful for
     * testing alarms generated by Gauges as well as suppressing alarms for known conditions.
     */
    overrideSeverity?: pulumi.Input<string>;
    /**
     * Indicates the number of times the monitor data source value will be collected during the update interval.
     */
    samplesPerUpdateInterval?: pulumi.Input<number>;
    /**
     * Specifies the alarm severity level at or above which the server is considered degraded.
     */
    serverDegradedSeverityLevel?: pulumi.Input<string>;
    /**
     * Specifies the alarm severity level at or above which the server is considered unavailable.
     */
    serverUnavailableSeverityLevel?: pulumi.Input<string>;
    /**
     * The type of Gauge resource. Options are ['indicator', 'numeric']
     */
    type: pulumi.Input<string>;
    /**
     * The frequency with which this Gauge is updated.
     */
    updateInterval?: pulumi.Input<string>;
    /**
     * A value that is used to determine whether the current monitored value indicates this gauge's severity should no longer
     * be 'warning'.
     */
    warningExitValue?: pulumi.Input<number>;
    /**
     * When the `type` attribute is set to: - `indicator`: A regular expression pattern that is used to determine whether the
     * current monitored value indicates this gauge's severity will be 'warning'. - `numeric`: A value that is used to
     * determine whether the current monitored value indicates this gauge's severity should be 'warning'.
     */
    warningValue?: pulumi.Input<string>;
}
