// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HttpServletCrossOriginPolicy extends pulumi.CustomResource {
    /**
     * Get an existing HttpServletCrossOriginPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HttpServletCrossOriginPolicyState, opts?: pulumi.CustomResourceOptions): HttpServletCrossOriginPolicy {
        return new HttpServletCrossOriginPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/httpServletCrossOriginPolicy:HttpServletCrossOriginPolicy';

    /**
     * Returns true if the given object is an instance of HttpServletCrossOriginPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HttpServletCrossOriginPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HttpServletCrossOriginPolicy.__pulumiType;
    }

    /**
     * Indicates whether the servlet extension allows CORS requests with username/password credentials.
     */
    public readonly corsAllowCredentials!: pulumi.Output<boolean>;
    /**
     * A list of HTTP headers that are supported by the resource and can be specified in a cross-origin request.
     */
    public readonly corsAllowedHeaders!: pulumi.Output<string[]>;
    /**
     * A list of HTTP methods allowed for cross-origin access to resources. i.e. one or more of GET, POST, PUT, DELETE, etc.
     */
    public readonly corsAllowedMethods!: pulumi.Output<string[]>;
    /**
     * A list of origins that are allowed to execute cross-origin requests.
     */
    public readonly corsAllowedOrigins!: pulumi.Output<string[]>;
    /**
     * A list of HTTP headers other than the simple response headers that browsers are allowed to access.
     */
    public readonly corsExposedHeaders!: pulumi.Output<string[]>;
    /**
     * The maximum amount of time that a preflight request can be cached by a client.
     */
    public readonly corsPreflightMaxAge!: pulumi.Output<string>;
    /**
     * A description for this HTTP Servlet Cross Origin Policy
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.HttpServletCrossOriginPolicyRequiredAction[]>;
    /**
     * The type of HTTP Servlet Cross Origin Policy resource. Options are ['http-servlet-cross-origin-policy']
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a HttpServletCrossOriginPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HttpServletCrossOriginPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HttpServletCrossOriginPolicyArgs | HttpServletCrossOriginPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HttpServletCrossOriginPolicyState | undefined;
            resourceInputs["corsAllowCredentials"] = state ? state.corsAllowCredentials : undefined;
            resourceInputs["corsAllowedHeaders"] = state ? state.corsAllowedHeaders : undefined;
            resourceInputs["corsAllowedMethods"] = state ? state.corsAllowedMethods : undefined;
            resourceInputs["corsAllowedOrigins"] = state ? state.corsAllowedOrigins : undefined;
            resourceInputs["corsExposedHeaders"] = state ? state.corsExposedHeaders : undefined;
            resourceInputs["corsPreflightMaxAge"] = state ? state.corsPreflightMaxAge : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as HttpServletCrossOriginPolicyArgs | undefined;
            resourceInputs["corsAllowCredentials"] = args ? args.corsAllowCredentials : undefined;
            resourceInputs["corsAllowedHeaders"] = args ? args.corsAllowedHeaders : undefined;
            resourceInputs["corsAllowedMethods"] = args ? args.corsAllowedMethods : undefined;
            resourceInputs["corsAllowedOrigins"] = args ? args.corsAllowedOrigins : undefined;
            resourceInputs["corsExposedHeaders"] = args ? args.corsExposedHeaders : undefined;
            resourceInputs["corsPreflightMaxAge"] = args ? args.corsPreflightMaxAge : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HttpServletCrossOriginPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HttpServletCrossOriginPolicy resources.
 */
export interface HttpServletCrossOriginPolicyState {
    /**
     * Indicates whether the servlet extension allows CORS requests with username/password credentials.
     */
    corsAllowCredentials?: pulumi.Input<boolean>;
    /**
     * A list of HTTP headers that are supported by the resource and can be specified in a cross-origin request.
     */
    corsAllowedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of HTTP methods allowed for cross-origin access to resources. i.e. one or more of GET, POST, PUT, DELETE, etc.
     */
    corsAllowedMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of origins that are allowed to execute cross-origin requests.
     */
    corsAllowedOrigins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of HTTP headers other than the simple response headers that browsers are allowed to access.
     */
    corsExposedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum amount of time that a preflight request can be cached by a client.
     */
    corsPreflightMaxAge?: pulumi.Input<string>;
    /**
     * A description for this HTTP Servlet Cross Origin Policy
     */
    description?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.HttpServletCrossOriginPolicyRequiredAction>[]>;
    /**
     * The type of HTTP Servlet Cross Origin Policy resource. Options are ['http-servlet-cross-origin-policy']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HttpServletCrossOriginPolicy resource.
 */
export interface HttpServletCrossOriginPolicyArgs {
    /**
     * Indicates whether the servlet extension allows CORS requests with username/password credentials.
     */
    corsAllowCredentials?: pulumi.Input<boolean>;
    /**
     * A list of HTTP headers that are supported by the resource and can be specified in a cross-origin request.
     */
    corsAllowedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of HTTP methods allowed for cross-origin access to resources. i.e. one or more of GET, POST, PUT, DELETE, etc.
     */
    corsAllowedMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of origins that are allowed to execute cross-origin requests.
     */
    corsAllowedOrigins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of HTTP headers other than the simple response headers that browsers are allowed to access.
     */
    corsExposedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum amount of time that a preflight request can be cached by a client.
     */
    corsPreflightMaxAge?: pulumi.Input<string>;
    /**
     * A description for this HTTP Servlet Cross Origin Policy
     */
    description?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of HTTP Servlet Cross Origin Policy resource. Options are ['http-servlet-cross-origin-policy']
     */
    type?: pulumi.Input<string>;
}
