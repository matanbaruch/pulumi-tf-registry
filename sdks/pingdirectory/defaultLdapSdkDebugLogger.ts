// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultLdapSdkDebugLogger extends pulumi.CustomResource {
    /**
     * Get an existing DefaultLdapSdkDebugLogger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultLdapSdkDebugLoggerState, opts?: pulumi.CustomResourceOptions): DefaultLdapSdkDebugLogger {
        return new DefaultLdapSdkDebugLogger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultLdapSdkDebugLogger:DefaultLdapSdkDebugLogger';

    /**
     * Returns true if the given object is an instance of DefaultLdapSdkDebugLogger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultLdapSdkDebugLogger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultLdapSdkDebugLogger.__pulumiType;
    }

    /**
     * Specifies whether to append to existing log files.
     */
    public readonly append!: pulumi.Output<boolean>;
    /**
     * Indicates whether the LDAP SDK Debug Logger will publish records asynchronously.
     */
    public readonly asynchronous!: pulumi.Output<boolean>;
    /**
     * Specifies whether to flush the writer after every log record.
     */
    public readonly autoFlush!: pulumi.Output<boolean>;
    /**
     * Specifies the log file buffer size.
     */
    public readonly bufferSize!: pulumi.Output<string>;
    /**
     * Specifies the type of compression (if any) to use for log files that are written.
     */
    public readonly compressionMechanism!: pulumi.Output<string>;
    /**
     * The minimum debug level that should be used for messages to be logged.
     */
    public readonly debugLevel!: pulumi.Output<string>;
    /**
     * The types of debug messages that should be logged.
     */
    public readonly debugTypes!: pulumi.Output<string[]>;
    /**
     * A description for this LDAP SDK Debug Logger
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Indicates whether this LDAP SDK Debug Logger is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Indicates whether log files should be encrypted so that their content is not available to unauthorized users.
     */
    public readonly encryptLog!: pulumi.Output<boolean>;
    /**
     * Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided,
     * the server's preferred encryption settings definition will be used. The "encryption-settings list" command can be used
     * to obtain a list of the encryption settings definitions available in the server.
     */
    public readonly encryptionSettingsDefinitionId!: pulumi.Output<string>;
    /**
     * Indicates whether a stack trace of the thread which called the debug method should be included in debug log messages.
     */
    public readonly includeStackTrace!: pulumi.Output<boolean>;
    /**
     * The path and base name of the file to use for log files generated by this LDAP SDK Debug Logger. The path may be either
     * absolute or relative to the server root.
     */
    public readonly logFile!: pulumi.Output<string>;
    /**
     * The UNIX permissions of the log files created by this LDAP SDK Debug Logger.
     */
    public readonly logFilePermissions!: pulumi.Output<string>;
    /**
     * Specifies the behavior that the server should exhibit if an error occurs during logging processing.
     */
    public readonly loggingErrorBehavior!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * The maximum number of log records that can be stored in the asynchronous queue.
     */
    public readonly queueSize!: pulumi.Output<number>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultLdapSdkDebugLoggerRequiredAction[]>;
    /**
     * The retention policy to use for the LDAP SDK Debug Logger .
     */
    public readonly retentionPolicies!: pulumi.Output<string[]>;
    /**
     * A listener that should be notified whenever a log file is rotated out of service.
     */
    public readonly rotationListeners!: pulumi.Output<string[]>;
    /**
     * The rotation policy to use for the LDAP SDK Debug Logger .
     */
    public readonly rotationPolicies!: pulumi.Output<string[]>;
    /**
     * Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an
     * undetectable manner.
     */
    public readonly signLog!: pulumi.Output<boolean>;
    /**
     * Specifies the interval at which to check whether the log files need to be rotated.
     */
    public readonly timeInterval!: pulumi.Output<string>;
    /**
     * Specifies the smallest time unit to be included in timestamps.
     */
    public readonly timestampPrecision!: pulumi.Output<string>;
    /**
     * The type of LDAP SDK Debug Logger resource. Options are ['ldap-sdk-debug-logger']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultLdapSdkDebugLogger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultLdapSdkDebugLoggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultLdapSdkDebugLoggerArgs | DefaultLdapSdkDebugLoggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultLdapSdkDebugLoggerState | undefined;
            resourceInputs["append"] = state ? state.append : undefined;
            resourceInputs["asynchronous"] = state ? state.asynchronous : undefined;
            resourceInputs["autoFlush"] = state ? state.autoFlush : undefined;
            resourceInputs["bufferSize"] = state ? state.bufferSize : undefined;
            resourceInputs["compressionMechanism"] = state ? state.compressionMechanism : undefined;
            resourceInputs["debugLevel"] = state ? state.debugLevel : undefined;
            resourceInputs["debugTypes"] = state ? state.debugTypes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["encryptLog"] = state ? state.encryptLog : undefined;
            resourceInputs["encryptionSettingsDefinitionId"] = state ? state.encryptionSettingsDefinitionId : undefined;
            resourceInputs["includeStackTrace"] = state ? state.includeStackTrace : undefined;
            resourceInputs["logFile"] = state ? state.logFile : undefined;
            resourceInputs["logFilePermissions"] = state ? state.logFilePermissions : undefined;
            resourceInputs["loggingErrorBehavior"] = state ? state.loggingErrorBehavior : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["queueSize"] = state ? state.queueSize : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["retentionPolicies"] = state ? state.retentionPolicies : undefined;
            resourceInputs["rotationListeners"] = state ? state.rotationListeners : undefined;
            resourceInputs["rotationPolicies"] = state ? state.rotationPolicies : undefined;
            resourceInputs["signLog"] = state ? state.signLog : undefined;
            resourceInputs["timeInterval"] = state ? state.timeInterval : undefined;
            resourceInputs["timestampPrecision"] = state ? state.timestampPrecision : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultLdapSdkDebugLoggerArgs | undefined;
            resourceInputs["append"] = args ? args.append : undefined;
            resourceInputs["asynchronous"] = args ? args.asynchronous : undefined;
            resourceInputs["autoFlush"] = args ? args.autoFlush : undefined;
            resourceInputs["bufferSize"] = args ? args.bufferSize : undefined;
            resourceInputs["compressionMechanism"] = args ? args.compressionMechanism : undefined;
            resourceInputs["debugLevel"] = args ? args.debugLevel : undefined;
            resourceInputs["debugTypes"] = args ? args.debugTypes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["encryptLog"] = args ? args.encryptLog : undefined;
            resourceInputs["encryptionSettingsDefinitionId"] = args ? args.encryptionSettingsDefinitionId : undefined;
            resourceInputs["includeStackTrace"] = args ? args.includeStackTrace : undefined;
            resourceInputs["logFile"] = args ? args.logFile : undefined;
            resourceInputs["logFilePermissions"] = args ? args.logFilePermissions : undefined;
            resourceInputs["loggingErrorBehavior"] = args ? args.loggingErrorBehavior : undefined;
            resourceInputs["queueSize"] = args ? args.queueSize : undefined;
            resourceInputs["retentionPolicies"] = args ? args.retentionPolicies : undefined;
            resourceInputs["rotationListeners"] = args ? args.rotationListeners : undefined;
            resourceInputs["rotationPolicies"] = args ? args.rotationPolicies : undefined;
            resourceInputs["signLog"] = args ? args.signLog : undefined;
            resourceInputs["timeInterval"] = args ? args.timeInterval : undefined;
            resourceInputs["timestampPrecision"] = args ? args.timestampPrecision : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultLdapSdkDebugLogger.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultLdapSdkDebugLogger resources.
 */
export interface DefaultLdapSdkDebugLoggerState {
    /**
     * Specifies whether to append to existing log files.
     */
    append?: pulumi.Input<boolean>;
    /**
     * Indicates whether the LDAP SDK Debug Logger will publish records asynchronously.
     */
    asynchronous?: pulumi.Input<boolean>;
    /**
     * Specifies whether to flush the writer after every log record.
     */
    autoFlush?: pulumi.Input<boolean>;
    /**
     * Specifies the log file buffer size.
     */
    bufferSize?: pulumi.Input<string>;
    /**
     * Specifies the type of compression (if any) to use for log files that are written.
     */
    compressionMechanism?: pulumi.Input<string>;
    /**
     * The minimum debug level that should be used for messages to be logged.
     */
    debugLevel?: pulumi.Input<string>;
    /**
     * The types of debug messages that should be logged.
     */
    debugTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this LDAP SDK Debug Logger
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this LDAP SDK Debug Logger is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether log files should be encrypted so that their content is not available to unauthorized users.
     */
    encryptLog?: pulumi.Input<boolean>;
    /**
     * Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided,
     * the server's preferred encryption settings definition will be used. The "encryption-settings list" command can be used
     * to obtain a list of the encryption settings definitions available in the server.
     */
    encryptionSettingsDefinitionId?: pulumi.Input<string>;
    /**
     * Indicates whether a stack trace of the thread which called the debug method should be included in debug log messages.
     */
    includeStackTrace?: pulumi.Input<boolean>;
    /**
     * The path and base name of the file to use for log files generated by this LDAP SDK Debug Logger. The path may be either
     * absolute or relative to the server root.
     */
    logFile?: pulumi.Input<string>;
    /**
     * The UNIX permissions of the log files created by this LDAP SDK Debug Logger.
     */
    logFilePermissions?: pulumi.Input<string>;
    /**
     * Specifies the behavior that the server should exhibit if an error occurs during logging processing.
     */
    loggingErrorBehavior?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum number of log records that can be stored in the asynchronous queue.
     */
    queueSize?: pulumi.Input<number>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultLdapSdkDebugLoggerRequiredAction>[]>;
    /**
     * The retention policy to use for the LDAP SDK Debug Logger .
     */
    retentionPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A listener that should be notified whenever a log file is rotated out of service.
     */
    rotationListeners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The rotation policy to use for the LDAP SDK Debug Logger .
     */
    rotationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an
     * undetectable manner.
     */
    signLog?: pulumi.Input<boolean>;
    /**
     * Specifies the interval at which to check whether the log files need to be rotated.
     */
    timeInterval?: pulumi.Input<string>;
    /**
     * Specifies the smallest time unit to be included in timestamps.
     */
    timestampPrecision?: pulumi.Input<string>;
    /**
     * The type of LDAP SDK Debug Logger resource. Options are ['ldap-sdk-debug-logger']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultLdapSdkDebugLogger resource.
 */
export interface DefaultLdapSdkDebugLoggerArgs {
    /**
     * Specifies whether to append to existing log files.
     */
    append?: pulumi.Input<boolean>;
    /**
     * Indicates whether the LDAP SDK Debug Logger will publish records asynchronously.
     */
    asynchronous?: pulumi.Input<boolean>;
    /**
     * Specifies whether to flush the writer after every log record.
     */
    autoFlush?: pulumi.Input<boolean>;
    /**
     * Specifies the log file buffer size.
     */
    bufferSize?: pulumi.Input<string>;
    /**
     * Specifies the type of compression (if any) to use for log files that are written.
     */
    compressionMechanism?: pulumi.Input<string>;
    /**
     * The minimum debug level that should be used for messages to be logged.
     */
    debugLevel?: pulumi.Input<string>;
    /**
     * The types of debug messages that should be logged.
     */
    debugTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this LDAP SDK Debug Logger
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this LDAP SDK Debug Logger is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether log files should be encrypted so that their content is not available to unauthorized users.
     */
    encryptLog?: pulumi.Input<boolean>;
    /**
     * Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided,
     * the server's preferred encryption settings definition will be used. The "encryption-settings list" command can be used
     * to obtain a list of the encryption settings definitions available in the server.
     */
    encryptionSettingsDefinitionId?: pulumi.Input<string>;
    /**
     * Indicates whether a stack trace of the thread which called the debug method should be included in debug log messages.
     */
    includeStackTrace?: pulumi.Input<boolean>;
    /**
     * The path and base name of the file to use for log files generated by this LDAP SDK Debug Logger. The path may be either
     * absolute or relative to the server root.
     */
    logFile?: pulumi.Input<string>;
    /**
     * The UNIX permissions of the log files created by this LDAP SDK Debug Logger.
     */
    logFilePermissions?: pulumi.Input<string>;
    /**
     * Specifies the behavior that the server should exhibit if an error occurs during logging processing.
     */
    loggingErrorBehavior?: pulumi.Input<string>;
    /**
     * The maximum number of log records that can be stored in the asynchronous queue.
     */
    queueSize?: pulumi.Input<number>;
    /**
     * The retention policy to use for the LDAP SDK Debug Logger .
     */
    retentionPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A listener that should be notified whenever a log file is rotated out of service.
     */
    rotationListeners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The rotation policy to use for the LDAP SDK Debug Logger .
     */
    rotationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an
     * undetectable manner.
     */
    signLog?: pulumi.Input<boolean>;
    /**
     * Specifies the interval at which to check whether the log files need to be rotated.
     */
    timeInterval?: pulumi.Input<string>;
    /**
     * Specifies the smallest time unit to be included in timestamps.
     */
    timestampPrecision?: pulumi.Input<string>;
}
