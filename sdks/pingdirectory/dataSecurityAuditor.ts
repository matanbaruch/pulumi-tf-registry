// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataSecurityAuditor extends pulumi.CustomResource {
    /**
     * Get an existing DataSecurityAuditor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataSecurityAuditorState, opts?: pulumi.CustomResourceOptions): DataSecurityAuditor {
        return new DataSecurityAuditor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/dataSecurityAuditor:DataSecurityAuditor';

    /**
     * Returns true if the given object is an instance of DataSecurityAuditor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataSecurityAuditor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataSecurityAuditor.__pulumiType;
    }

    /**
     * If set, the auditor will report all users with account expiration times are in the future, but are within the specified
     * length of time away from the current time.
     */
    public readonly accountExpirationWarningInterval!: pulumi.Output<string | undefined>;
    /**
     * Specifies which backends the data security auditor may be applied to. By default, the data security auditors will audit
     * entries in all backend types that support data auditing (Local DB, LDIF, and Config File Handler).
     */
    public readonly auditBackends!: pulumi.Output<string[]>;
    /**
     * Specifies the severity of events to include in the report.
     */
    public readonly auditSeverity!: pulumi.Output<string>;
    /**
     * Indicates whether the Data Security Auditor is enabled for use.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Data Security Auditor. Each configuration
     * property should be given in the form 'name=value'.
     */
    public readonly extensionArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Data Security Auditor.
     */
    public readonly extensionClass!: pulumi.Output<string | undefined>;
    /**
     * The filter to use to identify entries that should be reported. Multiple filters may be configured, and each reported
     * entry will indicate which of these filter(s) matched that entry.
     */
    public readonly filters!: pulumi.Output<string[]>;
    /**
     * The length of time to use as the error interval for idle accounts. If the length of time since a user last authenticated
     * is greater than the error interval, then an error will be generated for that account. If no error interval is defined,
     * then only the warning interval will be used.
     */
    public readonly idleAccountErrorInterval!: pulumi.Output<string | undefined>;
    /**
     * The length of time to use as the warning interval for idle accounts. If the length of time since a user last
     * authenticated is greater than the warning interval but less than the error interval (or if it is greater than the
     * warning interval and no error interval is defined), then a warning will be generated for that account.
     */
    public readonly idleAccountWarningInterval!: pulumi.Output<string | undefined>;
    /**
     * Specifies the attributes from the audited entries that should be included detailed reports. By default, no attributes
     * are included.
     */
    public readonly includeAttributes!: pulumi.Output<string[]>;
    /**
     * If defined, only entries with the specified privileges will be reported. By default, entries with any privilege assigned
     * will be reported.
     */
    public readonly includePrivileges!: pulumi.Output<string[]>;
    /**
     * If set, users that have not authenticated for more than the specified time will be reported even if idle account lockout
     * is not configured. Note that users may only be reported if the last login time tracking is enabled.
     */
    public readonly maximumIdleTime!: pulumi.Output<string | undefined>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The length of time to use as the error interval for accounts that do not appear to have authenticated. If this is not
     * specified, then the never-logged-in warning interval will be used. The idle account warning and error intervals will be
     * used if no never-logged-in interval is configured.
     */
    public readonly neverLoggedInAccountErrorInterval!: pulumi.Output<string | undefined>;
    /**
     * The length of time to use as the warning interval for accounts that do not appear to have authenticated. If this is not
     * specified, then the idle account warning interval will be used.
     */
    public readonly neverLoggedInAccountWarningInterval!: pulumi.Output<string | undefined>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * If set, the auditor will report all users with passwords older than the specified value even if password expiration is
     * not enabled.
     */
    public readonly passwordEvaluationAge!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the detailed report file.
     */
    public readonly reportFile!: pulumi.Output<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DataSecurityAuditorRequiredAction[]>;
    /**
     * The type of Data Security Auditor resource. Options are ['expired-password', 'idle-account', 'disabled-account',
     * 'weakly-encoded-password', 'privilege', 'account-usability-issues', 'locked-account', 'filter',
     * 'account-validity-window', 'multiple-password', 'deprecated-password-storage-scheme', 'nonexistent-password-policy',
     * 'access-control', 'third-party']
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Reporting on users with passwords encoded using the Crypt Password Storage scheme may be further limited by selecting
     * one or more encoding mechanisms that are considered weak.
     */
    public readonly weakCryptEncodings!: pulumi.Output<string[]>;
    /**
     * The password storage schemes that are considered weak. Users with any of the specified password storage schemes will be
     * included in the report.
     */
    public readonly weakPasswordStorageSchemes!: pulumi.Output<string[]>;

    /**
     * Create a DataSecurityAuditor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataSecurityAuditorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataSecurityAuditorArgs | DataSecurityAuditorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataSecurityAuditorState | undefined;
            resourceInputs["accountExpirationWarningInterval"] = state ? state.accountExpirationWarningInterval : undefined;
            resourceInputs["auditBackends"] = state ? state.auditBackends : undefined;
            resourceInputs["auditSeverity"] = state ? state.auditSeverity : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["extensionArguments"] = state ? state.extensionArguments : undefined;
            resourceInputs["extensionClass"] = state ? state.extensionClass : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["idleAccountErrorInterval"] = state ? state.idleAccountErrorInterval : undefined;
            resourceInputs["idleAccountWarningInterval"] = state ? state.idleAccountWarningInterval : undefined;
            resourceInputs["includeAttributes"] = state ? state.includeAttributes : undefined;
            resourceInputs["includePrivileges"] = state ? state.includePrivileges : undefined;
            resourceInputs["maximumIdleTime"] = state ? state.maximumIdleTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["neverLoggedInAccountErrorInterval"] = state ? state.neverLoggedInAccountErrorInterval : undefined;
            resourceInputs["neverLoggedInAccountWarningInterval"] = state ? state.neverLoggedInAccountWarningInterval : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["passwordEvaluationAge"] = state ? state.passwordEvaluationAge : undefined;
            resourceInputs["reportFile"] = state ? state.reportFile : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["weakCryptEncodings"] = state ? state.weakCryptEncodings : undefined;
            resourceInputs["weakPasswordStorageSchemes"] = state ? state.weakPasswordStorageSchemes : undefined;
        } else {
            const args = argsOrState as DataSecurityAuditorArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accountExpirationWarningInterval"] = args ? args.accountExpirationWarningInterval : undefined;
            resourceInputs["auditBackends"] = args ? args.auditBackends : undefined;
            resourceInputs["auditSeverity"] = args ? args.auditSeverity : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["extensionArguments"] = args ? args.extensionArguments : undefined;
            resourceInputs["extensionClass"] = args ? args.extensionClass : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["idleAccountErrorInterval"] = args ? args.idleAccountErrorInterval : undefined;
            resourceInputs["idleAccountWarningInterval"] = args ? args.idleAccountWarningInterval : undefined;
            resourceInputs["includeAttributes"] = args ? args.includeAttributes : undefined;
            resourceInputs["includePrivileges"] = args ? args.includePrivileges : undefined;
            resourceInputs["maximumIdleTime"] = args ? args.maximumIdleTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["neverLoggedInAccountErrorInterval"] = args ? args.neverLoggedInAccountErrorInterval : undefined;
            resourceInputs["neverLoggedInAccountWarningInterval"] = args ? args.neverLoggedInAccountWarningInterval : undefined;
            resourceInputs["passwordEvaluationAge"] = args ? args.passwordEvaluationAge : undefined;
            resourceInputs["reportFile"] = args ? args.reportFile : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["weakCryptEncodings"] = args ? args.weakCryptEncodings : undefined;
            resourceInputs["weakPasswordStorageSchemes"] = args ? args.weakPasswordStorageSchemes : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataSecurityAuditor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataSecurityAuditor resources.
 */
export interface DataSecurityAuditorState {
    /**
     * If set, the auditor will report all users with account expiration times are in the future, but are within the specified
     * length of time away from the current time.
     */
    accountExpirationWarningInterval?: pulumi.Input<string>;
    /**
     * Specifies which backends the data security auditor may be applied to. By default, the data security auditors will audit
     * entries in all backend types that support data auditing (Local DB, LDIF, and Config File Handler).
     */
    auditBackends?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the severity of events to include in the report.
     */
    auditSeverity?: pulumi.Input<string>;
    /**
     * Indicates whether the Data Security Auditor is enabled for use.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Data Security Auditor. Each configuration
     * property should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Data Security Auditor.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * The filter to use to identify entries that should be reported. Multiple filters may be configured, and each reported
     * entry will indicate which of these filter(s) matched that entry.
     */
    filters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The length of time to use as the error interval for idle accounts. If the length of time since a user last authenticated
     * is greater than the error interval, then an error will be generated for that account. If no error interval is defined,
     * then only the warning interval will be used.
     */
    idleAccountErrorInterval?: pulumi.Input<string>;
    /**
     * The length of time to use as the warning interval for idle accounts. If the length of time since a user last
     * authenticated is greater than the warning interval but less than the error interval (or if it is greater than the
     * warning interval and no error interval is defined), then a warning will be generated for that account.
     */
    idleAccountWarningInterval?: pulumi.Input<string>;
    /**
     * Specifies the attributes from the audited entries that should be included detailed reports. By default, no attributes
     * are included.
     */
    includeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If defined, only entries with the specified privileges will be reported. By default, entries with any privilege assigned
     * will be reported.
     */
    includePrivileges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If set, users that have not authenticated for more than the specified time will be reported even if idle account lockout
     * is not configured. Note that users may only be reported if the last login time tracking is enabled.
     */
    maximumIdleTime?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * The length of time to use as the error interval for accounts that do not appear to have authenticated. If this is not
     * specified, then the never-logged-in warning interval will be used. The idle account warning and error intervals will be
     * used if no never-logged-in interval is configured.
     */
    neverLoggedInAccountErrorInterval?: pulumi.Input<string>;
    /**
     * The length of time to use as the warning interval for accounts that do not appear to have authenticated. If this is not
     * specified, then the idle account warning interval will be used.
     */
    neverLoggedInAccountWarningInterval?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If set, the auditor will report all users with passwords older than the specified value even if password expiration is
     * not enabled.
     */
    passwordEvaluationAge?: pulumi.Input<string>;
    /**
     * Specifies the name of the detailed report file.
     */
    reportFile?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DataSecurityAuditorRequiredAction>[]>;
    /**
     * The type of Data Security Auditor resource. Options are ['expired-password', 'idle-account', 'disabled-account',
     * 'weakly-encoded-password', 'privilege', 'account-usability-issues', 'locked-account', 'filter',
     * 'account-validity-window', 'multiple-password', 'deprecated-password-storage-scheme', 'nonexistent-password-policy',
     * 'access-control', 'third-party']
     */
    type?: pulumi.Input<string>;
    /**
     * Reporting on users with passwords encoded using the Crypt Password Storage scheme may be further limited by selecting
     * one or more encoding mechanisms that are considered weak.
     */
    weakCryptEncodings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The password storage schemes that are considered weak. Users with any of the specified password storage schemes will be
     * included in the report.
     */
    weakPasswordStorageSchemes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DataSecurityAuditor resource.
 */
export interface DataSecurityAuditorArgs {
    /**
     * If set, the auditor will report all users with account expiration times are in the future, but are within the specified
     * length of time away from the current time.
     */
    accountExpirationWarningInterval?: pulumi.Input<string>;
    /**
     * Specifies which backends the data security auditor may be applied to. By default, the data security auditors will audit
     * entries in all backend types that support data auditing (Local DB, LDIF, and Config File Handler).
     */
    auditBackends?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the severity of events to include in the report.
     */
    auditSeverity?: pulumi.Input<string>;
    /**
     * Indicates whether the Data Security Auditor is enabled for use.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Data Security Auditor. Each configuration
     * property should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Data Security Auditor.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * The filter to use to identify entries that should be reported. Multiple filters may be configured, and each reported
     * entry will indicate which of these filter(s) matched that entry.
     */
    filters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The length of time to use as the error interval for idle accounts. If the length of time since a user last authenticated
     * is greater than the error interval, then an error will be generated for that account. If no error interval is defined,
     * then only the warning interval will be used.
     */
    idleAccountErrorInterval?: pulumi.Input<string>;
    /**
     * The length of time to use as the warning interval for idle accounts. If the length of time since a user last
     * authenticated is greater than the warning interval but less than the error interval (or if it is greater than the
     * warning interval and no error interval is defined), then a warning will be generated for that account.
     */
    idleAccountWarningInterval?: pulumi.Input<string>;
    /**
     * Specifies the attributes from the audited entries that should be included detailed reports. By default, no attributes
     * are included.
     */
    includeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If defined, only entries with the specified privileges will be reported. By default, entries with any privilege assigned
     * will be reported.
     */
    includePrivileges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If set, users that have not authenticated for more than the specified time will be reported even if idle account lockout
     * is not configured. Note that users may only be reported if the last login time tracking is enabled.
     */
    maximumIdleTime?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * The length of time to use as the error interval for accounts that do not appear to have authenticated. If this is not
     * specified, then the never-logged-in warning interval will be used. The idle account warning and error intervals will be
     * used if no never-logged-in interval is configured.
     */
    neverLoggedInAccountErrorInterval?: pulumi.Input<string>;
    /**
     * The length of time to use as the warning interval for accounts that do not appear to have authenticated. If this is not
     * specified, then the idle account warning interval will be used.
     */
    neverLoggedInAccountWarningInterval?: pulumi.Input<string>;
    /**
     * If set, the auditor will report all users with passwords older than the specified value even if password expiration is
     * not enabled.
     */
    passwordEvaluationAge?: pulumi.Input<string>;
    /**
     * Specifies the name of the detailed report file.
     */
    reportFile?: pulumi.Input<string>;
    /**
     * The type of Data Security Auditor resource. Options are ['expired-password', 'idle-account', 'disabled-account',
     * 'weakly-encoded-password', 'privilege', 'account-usability-issues', 'locked-account', 'filter',
     * 'account-validity-window', 'multiple-password', 'deprecated-password-storage-scheme', 'nonexistent-password-policy',
     * 'access-control', 'third-party']
     */
    type: pulumi.Input<string>;
    /**
     * Reporting on users with passwords encoded using the Crypt Password Storage scheme may be further limited by selecting
     * one or more encoding mechanisms that are considered weak.
     */
    weakCryptEncodings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The password storage schemes that are considered weak. Users with any of the specified password storage schemes will be
     * included in the report.
     */
    weakPasswordStorageSchemes?: pulumi.Input<pulumi.Input<string>[]>;
}
