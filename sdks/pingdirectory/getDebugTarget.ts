// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDebugTarget(args: GetDebugTargetArgs, opts?: pulumi.InvokeOptions): Promise<GetDebugTargetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getDebugTarget:getDebugTarget", {
        "debugScope": args.debugScope,
        "logPublisherName": args.logPublisherName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDebugTarget.
 */
export interface GetDebugTargetArgs {
    debugScope: string;
    logPublisherName: string;
}

/**
 * A collection of values returned by getDebugTarget.
 */
export interface GetDebugTargetResult {
    readonly debugCategories: string[];
    readonly debugLevel: string;
    readonly debugScope: string;
    readonly description: string;
    readonly id: string;
    readonly includeThrowableCause: boolean;
    readonly logPublisherName: string;
    readonly omitMethodEntryArguments: boolean;
    readonly omitMethodReturnValue: boolean;
    readonly throwableStackFrames: number;
    readonly type: string;
}
export function getDebugTargetOutput(args: GetDebugTargetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDebugTargetResult> {
    return pulumi.output(args).apply((a: any) => getDebugTarget(a, opts))
}

/**
 * A collection of arguments for invoking getDebugTarget.
 */
export interface GetDebugTargetOutputArgs {
    debugScope: pulumi.Input<string>;
    logPublisherName: pulumi.Input<string>;
}
