// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLogPublisher(args: GetLogPublisherArgs, opts?: pulumi.InvokeOptions): Promise<GetLogPublisherResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getLogPublisher:getLogPublisher", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLogPublisher.
 */
export interface GetLogPublisherArgs {
    name: string;
}

/**
 * A collection of values returned by getLogPublisher.
 */
export interface GetLogPublisherResult {
    readonly accessTokenValidatorMessageTypes: string[];
    readonly append: boolean;
    readonly asynchronous: boolean;
    readonly autoFlush: boolean;
    readonly bufferSize: string;
    readonly compressionMechanism: string;
    readonly connectionCriteria: string;
    readonly consentMessageTypes: string[];
    readonly correlateRequestsAndResults: boolean;
    readonly debugAciEnabled: boolean;
    readonly debugMessageTypes: string[];
    readonly defaultDebugCategories: string[];
    readonly defaultDebugLevel: string;
    readonly defaultIncludeThrowableCause: boolean;
    readonly defaultOmitMethodEntryArguments: boolean;
    readonly defaultOmitMethodReturnValue: boolean;
    readonly defaultSeverities: string[];
    readonly defaultThrowableStackFrames: number;
    readonly description: string;
    readonly directoryRestApiMessageTypes: string[];
    readonly enabled: boolean;
    readonly encryptLog: boolean;
    readonly encryptionSettingsDefinitionId: string;
    readonly excludeAttributes: string[];
    readonly excludePathPatterns: string[];
    readonly extensionArguments: string[];
    readonly extensionClass: string;
    readonly extensionMessageTypes: string[];
    readonly generifyMessageStringsWhenPossible: boolean;
    readonly httpMessageTypes: string[];
    readonly id: string;
    readonly idTokenValidatorMessageTypes: string[];
    readonly includeAddAttributeNames: boolean;
    readonly includeConnectionDetailsInRequestMessages: boolean;
    readonly includeExtendedSearchRequestDetails: boolean;
    readonly includeInstanceName: boolean;
    readonly includeIntermediateClientRequestControl: boolean;
    readonly includeModifyAttributeNames: boolean;
    readonly includeOperationPurposeRequestControl: boolean;
    readonly includePathPatterns: string[];
    readonly includeProductName: boolean;
    readonly includeReplicationChangeId: boolean;
    readonly includeRequestControls: boolean;
    readonly includeRequestDetailsInIntermediateResponseMessages: boolean;
    readonly includeRequestDetailsInResultMessages: boolean;
    readonly includeRequestDetailsInSearchEntryMessages: boolean;
    readonly includeRequestDetailsInSearchReferenceMessages: boolean;
    readonly includeRequesterDn: boolean;
    readonly includeRequesterIpAddress: boolean;
    readonly includeResponseControls: boolean;
    readonly includeResultCodeNames: boolean;
    readonly includeSearchEntryAttributeNames: boolean;
    readonly includeStartupId: boolean;
    readonly includeThreadId: boolean;
    readonly logAssuranceCompleted: boolean;
    readonly logClientCertificates: boolean;
    readonly logConnects: boolean;
    readonly logDisconnects: boolean;
    readonly logFieldBehavior: string;
    readonly logFieldMapping: string;
    readonly logFile: string;
    readonly logFilePermissions: string;
    readonly logIntermediateResponses: boolean;
    readonly logMessageExclusionPolicies: string[];
    readonly logRedirectUri: boolean;
    readonly logRequestAuthorizationType: boolean;
    readonly logRequestCookieNames: boolean;
    readonly logRequestHeaders: string;
    readonly logRequestParameters: string;
    readonly logRequestProtocol: boolean;
    readonly logRequests: boolean;
    readonly logResponseCookieNames: boolean;
    readonly logResponseHeaders: string;
    readonly logResults: boolean;
    readonly logSearchEntries: boolean;
    readonly logSearchReferences: boolean;
    readonly logSecurityNegotiation: boolean;
    readonly logTableName: string;
    readonly loggingErrorBehavior: string;
    readonly maxStringLength: number;
    readonly minIncludedOperationProcessingTime: string;
    readonly minIncludedPhaseTimeNanos: number;
    readonly name: string;
    readonly obscureAttributes: string[];
    readonly obscureSensitiveContent: boolean;
    readonly outputLocation: string;
    readonly overrideSeverities: string[];
    readonly queueSize: number;
    readonly requestCriteria: string;
    readonly resultCriteria: string;
    readonly retentionPolicies: string[];
    readonly rotationListeners: string[];
    readonly rotationPolicies: string[];
    readonly scimMessageTypes: string[];
    readonly scriptArguments: string[];
    readonly scriptClass: string;
    readonly searchEntryCriteria: string;
    readonly searchReferenceCriteria: string;
    readonly server: string;
    readonly serverHostName: string;
    readonly serverPort: number;
    readonly signLog: boolean;
    readonly softDeleteEntryAuditBehavior: string;
    readonly suppressInternalOperations: boolean;
    readonly suppressReplicationOperations: boolean;
    readonly suppressedRequestHeaderNames: string[];
    readonly suppressedRequestParameterNames: string[];
    readonly suppressedResponseHeaderNames: string[];
    readonly syslogExternalServers: string[];
    readonly syslogFacility: string;
    readonly syslogMessageApplicationName: string;
    readonly syslogMessageHostName: string;
    readonly syslogSeverity: string;
    readonly timeInterval: string;
    readonly timestampPrecision: string;
    readonly type: string;
    readonly useReversibleForm: boolean;
    readonly writeMultiLineMessages: boolean;
}
export function getLogPublisherOutput(args: GetLogPublisherOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLogPublisherResult> {
    return pulumi.output(args).apply((a: any) => getLogPublisher(a, opts))
}

/**
 * A collection of arguments for invoking getLogPublisher.
 */
export interface GetLogPublisherOutputArgs {
    name: pulumi.Input<string>;
}
