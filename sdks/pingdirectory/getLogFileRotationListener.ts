// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLogFileRotationListener(args: GetLogFileRotationListenerArgs, opts?: pulumi.InvokeOptions): Promise<GetLogFileRotationListenerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getLogFileRotationListener:getLogFileRotationListener", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLogFileRotationListener.
 */
export interface GetLogFileRotationListenerArgs {
    name: string;
}

/**
 * A collection of values returned by getLogFileRotationListener.
 */
export interface GetLogFileRotationListenerResult {
    readonly awsExternalServer: string;
    readonly compressOnCopy: boolean;
    readonly copyToDirectory: string;
    readonly description: string;
    readonly enabled: boolean;
    readonly extensionArguments: string[];
    readonly extensionClass: string;
    readonly fileRetentionPattern: string;
    readonly id: string;
    readonly maximumConcurrentTransferConnections: number;
    readonly maximumFileAgeToRetain: string;
    readonly maximumFileCountToRetain: number;
    readonly name: string;
    readonly outputDirectory: string;
    readonly s3BucketName: string;
    readonly targetThroughputInMegabitsPerSecond: number;
    readonly type: string;
}
export function getLogFileRotationListenerOutput(args: GetLogFileRotationListenerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLogFileRotationListenerResult> {
    return pulumi.output(args).apply((a: any) => getLogFileRotationListener(a, opts))
}

/**
 * A collection of arguments for invoking getLogFileRotationListener.
 */
export interface GetLogFileRotationListenerOutputArgs {
    name: pulumi.Input<string>;
}
