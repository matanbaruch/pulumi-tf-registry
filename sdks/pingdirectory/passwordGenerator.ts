// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PasswordGenerator extends pulumi.CustomResource {
    /**
     * Get an existing PasswordGenerator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PasswordGeneratorState, opts?: pulumi.CustomResourceOptions): PasswordGenerator {
        return new PasswordGenerator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/passwordGenerator:PasswordGenerator';

    /**
     * Returns true if the given object is an instance of PasswordGenerator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PasswordGenerator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PasswordGenerator.__pulumiType;
    }

    /**
     * Indicates whether to capitalize each word used in the generated password.
     */
    public readonly capitalizeWords!: pulumi.Output<boolean>;
    /**
     * A description for this Password Generator
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The path to the dictionary file that will be used to obtain the words for use in generated passwords.
     */
    public readonly dictionaryFile!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the Password Generator is enabled for use.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Password Generator. Each configuration property
     * should be given in the form 'name=value'.
     */
    public readonly extensionArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Password Generator.
     */
    public readonly extensionClass!: pulumi.Output<string | undefined>;
    /**
     * The minimum number of characters that generated passwords will be required to have.
     */
    public readonly minimumPasswordCharacters!: pulumi.Output<number>;
    /**
     * The minimum number of words that must be concatenated in the course of generating a password.
     */
    public readonly minimumPasswordWords!: pulumi.Output<number>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies one or more named character sets.
     */
    public readonly passwordCharacterSets!: pulumi.Output<string[]>;
    /**
     * Specifies the format to use for the generated password.
     */
    public readonly passwordFormat!: pulumi.Output<string | undefined>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.PasswordGeneratorRequiredAction[]>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Password Generator. Each configuration property
     * should be given in the form 'name=value'.
     */
    public readonly scriptArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Password Generator.
     */
    public readonly scriptClass!: pulumi.Output<string | undefined>;
    /**
     * The type of Password Generator resource. Options are ['random', 'groovy-scripted', 'passphrase', 'third-party']
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a PasswordGenerator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PasswordGeneratorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PasswordGeneratorArgs | PasswordGeneratorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PasswordGeneratorState | undefined;
            resourceInputs["capitalizeWords"] = state ? state.capitalizeWords : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dictionaryFile"] = state ? state.dictionaryFile : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["extensionArguments"] = state ? state.extensionArguments : undefined;
            resourceInputs["extensionClass"] = state ? state.extensionClass : undefined;
            resourceInputs["minimumPasswordCharacters"] = state ? state.minimumPasswordCharacters : undefined;
            resourceInputs["minimumPasswordWords"] = state ? state.minimumPasswordWords : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["passwordCharacterSets"] = state ? state.passwordCharacterSets : undefined;
            resourceInputs["passwordFormat"] = state ? state.passwordFormat : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["scriptArguments"] = state ? state.scriptArguments : undefined;
            resourceInputs["scriptClass"] = state ? state.scriptClass : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as PasswordGeneratorArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["capitalizeWords"] = args ? args.capitalizeWords : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dictionaryFile"] = args ? args.dictionaryFile : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["extensionArguments"] = args ? args.extensionArguments : undefined;
            resourceInputs["extensionClass"] = args ? args.extensionClass : undefined;
            resourceInputs["minimumPasswordCharacters"] = args ? args.minimumPasswordCharacters : undefined;
            resourceInputs["minimumPasswordWords"] = args ? args.minimumPasswordWords : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passwordCharacterSets"] = args ? args.passwordCharacterSets : undefined;
            resourceInputs["passwordFormat"] = args ? args.passwordFormat : undefined;
            resourceInputs["scriptArguments"] = args ? args.scriptArguments : undefined;
            resourceInputs["scriptClass"] = args ? args.scriptClass : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PasswordGenerator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PasswordGenerator resources.
 */
export interface PasswordGeneratorState {
    /**
     * Indicates whether to capitalize each word used in the generated password.
     */
    capitalizeWords?: pulumi.Input<boolean>;
    /**
     * A description for this Password Generator
     */
    description?: pulumi.Input<string>;
    /**
     * The path to the dictionary file that will be used to obtain the words for use in generated passwords.
     */
    dictionaryFile?: pulumi.Input<string>;
    /**
     * Indicates whether the Password Generator is enabled for use.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Password Generator. Each configuration property
     * should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Password Generator.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * The minimum number of characters that generated passwords will be required to have.
     */
    minimumPasswordCharacters?: pulumi.Input<number>;
    /**
     * The minimum number of words that must be concatenated in the course of generating a password.
     */
    minimumPasswordWords?: pulumi.Input<number>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies one or more named character sets.
     */
    passwordCharacterSets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the format to use for the generated password.
     */
    passwordFormat?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.PasswordGeneratorRequiredAction>[]>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Password Generator. Each configuration property
     * should be given in the form 'name=value'.
     */
    scriptArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Password Generator.
     */
    scriptClass?: pulumi.Input<string>;
    /**
     * The type of Password Generator resource. Options are ['random', 'groovy-scripted', 'passphrase', 'third-party']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PasswordGenerator resource.
 */
export interface PasswordGeneratorArgs {
    /**
     * Indicates whether to capitalize each word used in the generated password.
     */
    capitalizeWords?: pulumi.Input<boolean>;
    /**
     * A description for this Password Generator
     */
    description?: pulumi.Input<string>;
    /**
     * The path to the dictionary file that will be used to obtain the words for use in generated passwords.
     */
    dictionaryFile?: pulumi.Input<string>;
    /**
     * Indicates whether the Password Generator is enabled for use.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Password Generator. Each configuration property
     * should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Password Generator.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * The minimum number of characters that generated passwords will be required to have.
     */
    minimumPasswordCharacters?: pulumi.Input<number>;
    /**
     * The minimum number of words that must be concatenated in the course of generating a password.
     */
    minimumPasswordWords?: pulumi.Input<number>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies one or more named character sets.
     */
    passwordCharacterSets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the format to use for the generated password.
     */
    passwordFormat?: pulumi.Input<string>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Password Generator. Each configuration property
     * should be given in the form 'name=value'.
     */
    scriptArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Password Generator.
     */
    scriptClass?: pulumi.Input<string>;
    /**
     * The type of Password Generator resource. Options are ['random', 'groovy-scripted', 'passphrase', 'third-party']
     */
    type: pulumi.Input<string>;
}
