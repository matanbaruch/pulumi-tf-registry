// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VelocityTemplateLoader extends pulumi.CustomResource {
    /**
     * Get an existing VelocityTemplateLoader resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VelocityTemplateLoaderState, opts?: pulumi.CustomResourceOptions): VelocityTemplateLoader {
        return new VelocityTemplateLoader(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/velocityTemplateLoader:VelocityTemplateLoader';

    /**
     * Returns true if the given object is an instance of VelocityTemplateLoader.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VelocityTemplateLoader {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VelocityTemplateLoader.__pulumiType;
    }

    /**
     * Indicates whether this Velocity Template Loader is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * This property determines the evaluation order for determining the correct Velocity Template Loader to load a template
     * for generating content for a particular request.
     */
    public readonly evaluationOrderIndex!: pulumi.Output<number>;
    /**
     * Name of the parent HTTP Servlet Extension
     */
    public readonly httpServletExtensionName!: pulumi.Output<string>;
    /**
     * Specifies a the value that will be used in the response's Content-Type header that indicates the type of content to
     * return.
     */
    public readonly mimeType!: pulumi.Output<string | undefined>;
    /**
     * Specifies a media type for matching Accept request-header values.
     */
    public readonly mimeTypeMatcher!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.VelocityTemplateLoaderRequiredAction[]>;
    /**
     * Specifies the directory in which to search for the template files.
     */
    public readonly templateDirectory!: pulumi.Output<string | undefined>;
    /**
     * Specifies the suffix to append to the requested resource name when searching for the template file with which to form a
     * response.
     */
    public readonly templateSuffix!: pulumi.Output<string | undefined>;
    /**
     * The type of Velocity Template Loader resource. Options are ['velocity-template-loader']
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a VelocityTemplateLoader resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VelocityTemplateLoaderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VelocityTemplateLoaderArgs | VelocityTemplateLoaderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VelocityTemplateLoaderState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["evaluationOrderIndex"] = state ? state.evaluationOrderIndex : undefined;
            resourceInputs["httpServletExtensionName"] = state ? state.httpServletExtensionName : undefined;
            resourceInputs["mimeType"] = state ? state.mimeType : undefined;
            resourceInputs["mimeTypeMatcher"] = state ? state.mimeTypeMatcher : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["templateDirectory"] = state ? state.templateDirectory : undefined;
            resourceInputs["templateSuffix"] = state ? state.templateSuffix : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as VelocityTemplateLoaderArgs | undefined;
            if ((!args || args.httpServletExtensionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpServletExtensionName'");
            }
            if ((!args || args.mimeTypeMatcher === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mimeTypeMatcher'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["evaluationOrderIndex"] = args ? args.evaluationOrderIndex : undefined;
            resourceInputs["httpServletExtensionName"] = args ? args.httpServletExtensionName : undefined;
            resourceInputs["mimeType"] = args ? args.mimeType : undefined;
            resourceInputs["mimeTypeMatcher"] = args ? args.mimeTypeMatcher : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["templateDirectory"] = args ? args.templateDirectory : undefined;
            resourceInputs["templateSuffix"] = args ? args.templateSuffix : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VelocityTemplateLoader.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VelocityTemplateLoader resources.
 */
export interface VelocityTemplateLoaderState {
    /**
     * Indicates whether this Velocity Template Loader is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * This property determines the evaluation order for determining the correct Velocity Template Loader to load a template
     * for generating content for a particular request.
     */
    evaluationOrderIndex?: pulumi.Input<number>;
    /**
     * Name of the parent HTTP Servlet Extension
     */
    httpServletExtensionName?: pulumi.Input<string>;
    /**
     * Specifies a the value that will be used in the response's Content-Type header that indicates the type of content to
     * return.
     */
    mimeType?: pulumi.Input<string>;
    /**
     * Specifies a media type for matching Accept request-header values.
     */
    mimeTypeMatcher?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.VelocityTemplateLoaderRequiredAction>[]>;
    /**
     * Specifies the directory in which to search for the template files.
     */
    templateDirectory?: pulumi.Input<string>;
    /**
     * Specifies the suffix to append to the requested resource name when searching for the template file with which to form a
     * response.
     */
    templateSuffix?: pulumi.Input<string>;
    /**
     * The type of Velocity Template Loader resource. Options are ['velocity-template-loader']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VelocityTemplateLoader resource.
 */
export interface VelocityTemplateLoaderArgs {
    /**
     * Indicates whether this Velocity Template Loader is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * This property determines the evaluation order for determining the correct Velocity Template Loader to load a template
     * for generating content for a particular request.
     */
    evaluationOrderIndex?: pulumi.Input<number>;
    /**
     * Name of the parent HTTP Servlet Extension
     */
    httpServletExtensionName: pulumi.Input<string>;
    /**
     * Specifies a the value that will be used in the response's Content-Type header that indicates the type of content to
     * return.
     */
    mimeType?: pulumi.Input<string>;
    /**
     * Specifies a media type for matching Accept request-header values.
     */
    mimeTypeMatcher: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the directory in which to search for the template files.
     */
    templateDirectory?: pulumi.Input<string>;
    /**
     * Specifies the suffix to append to the requested resource name when searching for the template file with which to form a
     * response.
     */
    templateSuffix?: pulumi.Input<string>;
    /**
     * The type of Velocity Template Loader resource. Options are ['velocity-template-loader']
     */
    type?: pulumi.Input<string>;
}
