// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ScimAttributeMapping extends pulumi.CustomResource {
    /**
     * Get an existing ScimAttributeMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScimAttributeMappingState, opts?: pulumi.CustomResourceOptions): ScimAttributeMapping {
        return new ScimAttributeMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/scimAttributeMapping:ScimAttributeMapping';

    /**
     * Returns true if the given object is an instance of ScimAttributeMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScimAttributeMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScimAttributeMapping.__pulumiType;
    }

    /**
     * Specifies that the mapping is authoritative over other mappings for the same SCIM Resource Type attribute (for read
     * operations).
     */
    public readonly authoritative!: pulumi.Output<boolean>;
    /**
     * The Correlated LDAP Data View that persists the mapped SCIM Resource Type attribute(s).
     */
    public readonly correlatedLdapDataView!: pulumi.Output<string | undefined>;
    /**
     * The LDAP attribute to be mapped, or the path to a specific field of an LDAP attribute with the JSON object attribute
     * syntax.
     */
    public readonly ldapAttribute!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies whether the mapping is used to map from LDAP attribute to SCIM Resource Type attribute in a read operation.
     */
    public readonly readable!: pulumi.Output<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.ScimAttributeMappingRequiredAction[]>;
    /**
     * The attribute path of SCIM Resource Type attributes to be mapped.
     */
    public readonly scimResourceTypeAttribute!: pulumi.Output<string>;
    /**
     * Name of the parent SCIM Resource Type
     */
    public readonly scimResourceTypeName!: pulumi.Output<string>;
    /**
     * Specifies that the mapping is used to map from SCIM Resource Type attribute to LDAP attribute in a search filter.
     */
    public readonly searchable!: pulumi.Output<boolean>;
    /**
     * The type of SCIM Attribute Mapping resource. Options are ['scim-attribute-mapping']
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Specifies that the mapping is used to map from SCIM Resource Type attribute to LDAP attribute in a write operation.
     */
    public readonly writable!: pulumi.Output<boolean>;

    /**
     * Create a ScimAttributeMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScimAttributeMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScimAttributeMappingArgs | ScimAttributeMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScimAttributeMappingState | undefined;
            resourceInputs["authoritative"] = state ? state.authoritative : undefined;
            resourceInputs["correlatedLdapDataView"] = state ? state.correlatedLdapDataView : undefined;
            resourceInputs["ldapAttribute"] = state ? state.ldapAttribute : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["readable"] = state ? state.readable : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["scimResourceTypeAttribute"] = state ? state.scimResourceTypeAttribute : undefined;
            resourceInputs["scimResourceTypeName"] = state ? state.scimResourceTypeName : undefined;
            resourceInputs["searchable"] = state ? state.searchable : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["writable"] = state ? state.writable : undefined;
        } else {
            const args = argsOrState as ScimAttributeMappingArgs | undefined;
            if ((!args || args.ldapAttribute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ldapAttribute'");
            }
            if ((!args || args.scimResourceTypeAttribute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scimResourceTypeAttribute'");
            }
            if ((!args || args.scimResourceTypeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scimResourceTypeName'");
            }
            resourceInputs["authoritative"] = args ? args.authoritative : undefined;
            resourceInputs["correlatedLdapDataView"] = args ? args.correlatedLdapDataView : undefined;
            resourceInputs["ldapAttribute"] = args ? args.ldapAttribute : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["readable"] = args ? args.readable : undefined;
            resourceInputs["scimResourceTypeAttribute"] = args ? args.scimResourceTypeAttribute : undefined;
            resourceInputs["scimResourceTypeName"] = args ? args.scimResourceTypeName : undefined;
            resourceInputs["searchable"] = args ? args.searchable : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["writable"] = args ? args.writable : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScimAttributeMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ScimAttributeMapping resources.
 */
export interface ScimAttributeMappingState {
    /**
     * Specifies that the mapping is authoritative over other mappings for the same SCIM Resource Type attribute (for read
     * operations).
     */
    authoritative?: pulumi.Input<boolean>;
    /**
     * The Correlated LDAP Data View that persists the mapped SCIM Resource Type attribute(s).
     */
    correlatedLdapDataView?: pulumi.Input<string>;
    /**
     * The LDAP attribute to be mapped, or the path to a specific field of an LDAP attribute with the JSON object attribute
     * syntax.
     */
    ldapAttribute?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether the mapping is used to map from LDAP attribute to SCIM Resource Type attribute in a read operation.
     */
    readable?: pulumi.Input<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.ScimAttributeMappingRequiredAction>[]>;
    /**
     * The attribute path of SCIM Resource Type attributes to be mapped.
     */
    scimResourceTypeAttribute?: pulumi.Input<string>;
    /**
     * Name of the parent SCIM Resource Type
     */
    scimResourceTypeName?: pulumi.Input<string>;
    /**
     * Specifies that the mapping is used to map from SCIM Resource Type attribute to LDAP attribute in a search filter.
     */
    searchable?: pulumi.Input<boolean>;
    /**
     * The type of SCIM Attribute Mapping resource. Options are ['scim-attribute-mapping']
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies that the mapping is used to map from SCIM Resource Type attribute to LDAP attribute in a write operation.
     */
    writable?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ScimAttributeMapping resource.
 */
export interface ScimAttributeMappingArgs {
    /**
     * Specifies that the mapping is authoritative over other mappings for the same SCIM Resource Type attribute (for read
     * operations).
     */
    authoritative?: pulumi.Input<boolean>;
    /**
     * The Correlated LDAP Data View that persists the mapped SCIM Resource Type attribute(s).
     */
    correlatedLdapDataView?: pulumi.Input<string>;
    /**
     * The LDAP attribute to be mapped, or the path to a specific field of an LDAP attribute with the JSON object attribute
     * syntax.
     */
    ldapAttribute: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether the mapping is used to map from LDAP attribute to SCIM Resource Type attribute in a read operation.
     */
    readable?: pulumi.Input<boolean>;
    /**
     * The attribute path of SCIM Resource Type attributes to be mapped.
     */
    scimResourceTypeAttribute: pulumi.Input<string>;
    /**
     * Name of the parent SCIM Resource Type
     */
    scimResourceTypeName: pulumi.Input<string>;
    /**
     * Specifies that the mapping is used to map from SCIM Resource Type attribute to LDAP attribute in a search filter.
     */
    searchable?: pulumi.Input<boolean>;
    /**
     * The type of SCIM Attribute Mapping resource. Options are ['scim-attribute-mapping']
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies that the mapping is used to map from SCIM Resource Type attribute to LDAP attribute in a write operation.
     */
    writable?: pulumi.Input<boolean>;
}
