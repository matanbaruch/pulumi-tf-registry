// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdentityMapper extends pulumi.CustomResource {
    /**
     * Get an existing IdentityMapper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityMapperState, opts?: pulumi.CustomResourceOptions): IdentityMapper {
        return new IdentityMapper(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/identityMapper:IdentityMapper';

    /**
     * Returns true if the given object is an instance of IdentityMapper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityMapper {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityMapper.__pulumiType;
    }

    /**
     * The set of identity mappers that must all match the target entry. Each identity mapper must uniquely match the same
     * target entry. If any of the identity mappers match multiple entries, if any of them match zero entries, or if any of
     * them match different entries, then the mapping will fail.
     */
    public readonly allIncludedIdentityMappers!: pulumi.Output<string[]>;
    /**
     * The set of identity mappers that will be used to identify the target entry. At least one identity mapper must uniquely
     * match an entry. If multiple identity mappers match entries, then they must all uniquely match the same entry. If none of
     * the identity mappers match any entries, if any of them match multiple entries, or if any of them match different
     * entries, then the mapping will fail.
     */
    public readonly anyIncludedIdentityMappers!: pulumi.Output<string[]>;
    /**
     * A description for this Identity Mapper
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the Identity Mapper is enabled for use.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Identity Mapper. Each configuration property
     * should be given in the form 'name=value'.
     */
    public readonly extensionArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Identity Mapper.
     */
    public readonly extensionClass!: pulumi.Output<string | undefined>;
    /**
     * When the `type` attribute is set to: - `exact-match`: Specifies the attribute whose value should exactly match the ID
     * string provided to this identity mapper. - `regular-expression`: Specifies the name or OID of the attribute whose value
     * should match the provided identifier string after it has been processed by the associated regular expression.
     */
    public readonly matchAttributes!: pulumi.Output<string[]>;
    /**
     * When the `type` attribute is set to: - `exact-match`: Specifies the set of base DNs below which to search for users. -
     * `regular-expression`: Specifies the base DN(s) that should be used when performing searches to map the provided ID
     * string to a user entry. If multiple values are given, searches are performed below all the specified base DNs.
     */
    public readonly matchBaseDns!: pulumi.Output<string[]>;
    /**
     * An optional filter that mapped users must match.
     */
    public readonly matchFilter!: pulumi.Output<string | undefined>;
    /**
     * Specifies the regular expression pattern that is used to identify portions of the ID string that will be replaced.
     */
    public readonly matchPattern!: pulumi.Output<string | undefined>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies the replacement pattern that should be used for substrings in the ID string that match the provided regular
     * expression pattern.
     */
    public readonly replacePattern!: pulumi.Output<string | undefined>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.IdentityMapperRequiredAction[]>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Identity Mapper. Each configuration property should
     * be given in the form 'name=value'.
     */
    public readonly scriptArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Identity Mapper.
     */
    public readonly scriptClass!: pulumi.Output<string | undefined>;
    /**
     * The type of Identity Mapper resource. Options are ['exact-match', 'groovy-scripted', 'dn', 'regular-expression',
     * 'aggregate', 'third-party']
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a IdentityMapper resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityMapperArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityMapperArgs | IdentityMapperState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityMapperState | undefined;
            resourceInputs["allIncludedIdentityMappers"] = state ? state.allIncludedIdentityMappers : undefined;
            resourceInputs["anyIncludedIdentityMappers"] = state ? state.anyIncludedIdentityMappers : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["extensionArguments"] = state ? state.extensionArguments : undefined;
            resourceInputs["extensionClass"] = state ? state.extensionClass : undefined;
            resourceInputs["matchAttributes"] = state ? state.matchAttributes : undefined;
            resourceInputs["matchBaseDns"] = state ? state.matchBaseDns : undefined;
            resourceInputs["matchFilter"] = state ? state.matchFilter : undefined;
            resourceInputs["matchPattern"] = state ? state.matchPattern : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["replacePattern"] = state ? state.replacePattern : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["scriptArguments"] = state ? state.scriptArguments : undefined;
            resourceInputs["scriptClass"] = state ? state.scriptClass : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as IdentityMapperArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allIncludedIdentityMappers"] = args ? args.allIncludedIdentityMappers : undefined;
            resourceInputs["anyIncludedIdentityMappers"] = args ? args.anyIncludedIdentityMappers : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["extensionArguments"] = args ? args.extensionArguments : undefined;
            resourceInputs["extensionClass"] = args ? args.extensionClass : undefined;
            resourceInputs["matchAttributes"] = args ? args.matchAttributes : undefined;
            resourceInputs["matchBaseDns"] = args ? args.matchBaseDns : undefined;
            resourceInputs["matchFilter"] = args ? args.matchFilter : undefined;
            resourceInputs["matchPattern"] = args ? args.matchPattern : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["replacePattern"] = args ? args.replacePattern : undefined;
            resourceInputs["scriptArguments"] = args ? args.scriptArguments : undefined;
            resourceInputs["scriptClass"] = args ? args.scriptClass : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityMapper.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityMapper resources.
 */
export interface IdentityMapperState {
    /**
     * The set of identity mappers that must all match the target entry. Each identity mapper must uniquely match the same
     * target entry. If any of the identity mappers match multiple entries, if any of them match zero entries, or if any of
     * them match different entries, then the mapping will fail.
     */
    allIncludedIdentityMappers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of identity mappers that will be used to identify the target entry. At least one identity mapper must uniquely
     * match an entry. If multiple identity mappers match entries, then they must all uniquely match the same entry. If none of
     * the identity mappers match any entries, if any of them match multiple entries, or if any of them match different
     * entries, then the mapping will fail.
     */
    anyIncludedIdentityMappers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this Identity Mapper
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the Identity Mapper is enabled for use.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Identity Mapper. Each configuration property
     * should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Identity Mapper.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `exact-match`: Specifies the attribute whose value should exactly match the ID
     * string provided to this identity mapper. - `regular-expression`: Specifies the name or OID of the attribute whose value
     * should match the provided identifier string after it has been processed by the associated regular expression.
     */
    matchAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - `exact-match`: Specifies the set of base DNs below which to search for users. -
     * `regular-expression`: Specifies the base DN(s) that should be used when performing searches to map the provided ID
     * string to a user entry. If multiple values are given, searches are performed below all the specified base DNs.
     */
    matchBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional filter that mapped users must match.
     */
    matchFilter?: pulumi.Input<string>;
    /**
     * Specifies the regular expression pattern that is used to identify portions of the ID string that will be replaced.
     */
    matchPattern?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the replacement pattern that should be used for substrings in the ID string that match the provided regular
     * expression pattern.
     */
    replacePattern?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.IdentityMapperRequiredAction>[]>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Identity Mapper. Each configuration property should
     * be given in the form 'name=value'.
     */
    scriptArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Identity Mapper.
     */
    scriptClass?: pulumi.Input<string>;
    /**
     * The type of Identity Mapper resource. Options are ['exact-match', 'groovy-scripted', 'dn', 'regular-expression',
     * 'aggregate', 'third-party']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdentityMapper resource.
 */
export interface IdentityMapperArgs {
    /**
     * The set of identity mappers that must all match the target entry. Each identity mapper must uniquely match the same
     * target entry. If any of the identity mappers match multiple entries, if any of them match zero entries, or if any of
     * them match different entries, then the mapping will fail.
     */
    allIncludedIdentityMappers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of identity mappers that will be used to identify the target entry. At least one identity mapper must uniquely
     * match an entry. If multiple identity mappers match entries, then they must all uniquely match the same entry. If none of
     * the identity mappers match any entries, if any of them match multiple entries, or if any of them match different
     * entries, then the mapping will fail.
     */
    anyIncludedIdentityMappers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this Identity Mapper
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the Identity Mapper is enabled for use.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Identity Mapper. Each configuration property
     * should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Identity Mapper.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `exact-match`: Specifies the attribute whose value should exactly match the ID
     * string provided to this identity mapper. - `regular-expression`: Specifies the name or OID of the attribute whose value
     * should match the provided identifier string after it has been processed by the associated regular expression.
     */
    matchAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - `exact-match`: Specifies the set of base DNs below which to search for users. -
     * `regular-expression`: Specifies the base DN(s) that should be used when performing searches to map the provided ID
     * string to a user entry. If multiple values are given, searches are performed below all the specified base DNs.
     */
    matchBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional filter that mapped users must match.
     */
    matchFilter?: pulumi.Input<string>;
    /**
     * Specifies the regular expression pattern that is used to identify portions of the ID string that will be replaced.
     */
    matchPattern?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the replacement pattern that should be used for substrings in the ID string that match the provided regular
     * expression pattern.
     */
    replacePattern?: pulumi.Input<string>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Identity Mapper. Each configuration property should
     * be given in the form 'name=value'.
     */
    scriptArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Identity Mapper.
     */
    scriptClass?: pulumi.Input<string>;
    /**
     * The type of Identity Mapper resource. Options are ['exact-match', 'groovy-scripted', 'dn', 'regular-expression',
     * 'aggregate', 'third-party']
     */
    type: pulumi.Input<string>;
}
