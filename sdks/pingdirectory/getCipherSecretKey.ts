// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCipherSecretKey(args: GetCipherSecretKeyArgs, opts?: pulumi.InvokeOptions): Promise<GetCipherSecretKeyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getCipherSecretKey:getCipherSecretKey", {
        "name": args.name,
        "serverInstanceName": args.serverInstanceName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCipherSecretKey.
 */
export interface GetCipherSecretKeyArgs {
    name: string;
    serverInstanceName: string;
}

/**
 * A collection of values returned by getCipherSecretKey.
 */
export interface GetCipherSecretKeyResult {
    readonly cipherTransformationName: string;
    readonly id: string;
    readonly initializationVectorLengthBits: number;
    readonly isCompromised: boolean;
    readonly keyId: string;
    readonly keyLengthBits: number;
    readonly name: string;
    readonly serverInstanceName: string;
    readonly symmetricKeys: string[];
    readonly type: string;
}
export function getCipherSecretKeyOutput(args: GetCipherSecretKeyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCipherSecretKeyResult> {
    return pulumi.output(args).apply((a: any) => getCipherSecretKey(a, opts))
}

/**
 * A collection of arguments for invoking getCipherSecretKey.
 */
export interface GetCipherSecretKeyOutputArgs {
    name: pulumi.Input<string>;
    serverInstanceName: pulumi.Input<string>;
}
