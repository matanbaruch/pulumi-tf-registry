// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultPassphraseProvider extends pulumi.CustomResource {
    /**
     * Get an existing DefaultPassphraseProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultPassphraseProviderState, opts?: pulumi.CustomResourceOptions): DefaultPassphraseProvider {
        return new DefaultPassphraseProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultPassphraseProvider:DefaultPassphraseProvider';

    /**
     * Returns true if the given object is an instance of DefaultPassphraseProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultPassphraseProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultPassphraseProvider.__pulumiType;
    }

    /**
     * The external server with information to use when interacting with the AWS Secrets Manager.
     */
    public readonly awsExternalServer!: pulumi.Output<string>;
    /**
     * The mechanism used to authenticate to the Azure service.
     */
    public readonly azureAuthenticationMethod!: pulumi.Output<string>;
    /**
     * An external server definition with information needed to connect and authenticate to the Conjur instance containing the
     * passphrase.
     */
    public readonly conjurExternalServer!: pulumi.Output<string>;
    /**
     * The portion of the path that follows the account name in the URI needed to obtain the desired secret. Any special
     * characters in the path must be URL-encoded.
     */
    public readonly conjurSecretRelativePath!: pulumi.Output<string>;
    /**
     * A description for this Passphrase Provider
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Indicates whether this Passphrase Provider is enabled for use in the server.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The name of the environment variable that is expected to hold the passphrase.
     */
    public readonly environmentVariable!: pulumi.Output<string>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Passphrase Provider. Each configuration property
     * should be given in the form 'name=value'.
     */
    public readonly extensionArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Passphrase Provider.
     */
    public readonly extensionClass!: pulumi.Output<string>;
    /**
     * Supported in PingDirectory product version 9.2.0.0+. A reference to an HTTP proxy server that should be used for
     * requests sent to the Azure service.
     */
    public readonly httpProxyExternalServer!: pulumi.Output<string>;
    /**
     * The URI that identifies the Azure Key Vault from which the secret is to be retrieved.
     */
    public readonly keyVaultUri!: pulumi.Output<string>;
    /**
     * When the `type` attribute is set to: - One of [`amazon-secrets-manager`, `vault`]: The maximum length of time that the
     * passphrase provider may cache the passphrase that has been read from Vault. A value of zero seconds indicates that the
     * provider should always attempt to read the passphrase from Vault. - `azure-key-vault`: The maximum length of time that
     * the passphrase provider may cache the passphrase that has been read from Azure Key Vault. A value of zero seconds
     * indicates that the provider should always attempt to read the passphrase from the Azure service. - `file-based`: The
     * maximum length of time that the passphrase provider may cache the passphrase that has been read from the target file. A
     * value of zero seconds indicates that the provider should always attempt to read the passphrase from the file. -
     * `conjur`: The maximum length of time that the passphrase provider may cache the passphrase that has been read from
     * Conjur. A value of zero seconds indicates that the provider should always attempt to read the passphrase from Conjur.
     */
    public readonly maxCacheDuration!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * The value to be stored in an obscured form.
     */
    public readonly obscuredValue!: pulumi.Output<string>;
    /**
     * The path to the file containing the passphrase.
     */
    public readonly passwordFile!: pulumi.Output<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultPassphraseProviderRequiredAction[]>;
    /**
     * The name of the JSON field whose value is the passphrase that will be retrieved.
     */
    public readonly secretFieldName!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) or the user-friendly name of the secret to be retrieved.
     */
    public readonly secretId!: pulumi.Output<string>;
    /**
     * The name of the secret to retrieve.
     */
    public readonly secretName!: pulumi.Output<string>;
    /**
     * The unique identifier for the version of the secret to be retrieved.
     */
    public readonly secretVersionId!: pulumi.Output<string>;
    /**
     * The staging label for the version of the secret to be retrieved.
     */
    public readonly secretVersionStage!: pulumi.Output<string>;
    /**
     * The type of Passphrase Provider resource. Options are ['environment-variable', 'amazon-secrets-manager',
     * 'obscured-value', 'azure-key-vault', 'file-based', 'conjur', 'vault', 'third-party']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * An external server definition with information needed to connect and authenticate to the Vault instance containing the
     * passphrase.
     */
    public readonly vaultExternalServer!: pulumi.Output<string>;
    /**
     * The name of the field in the Vault secret record that contains the passphrase to use to generate the encryption key.
     */
    public readonly vaultSecretFieldName!: pulumi.Output<string>;
    /**
     * The path to the desired secret in the Vault service. This will be appended to the value of the base-url property for the
     * associated Vault external server.
     */
    public readonly vaultSecretPath!: pulumi.Output<string>;

    /**
     * Create a DefaultPassphraseProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultPassphraseProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultPassphraseProviderArgs | DefaultPassphraseProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultPassphraseProviderState | undefined;
            resourceInputs["awsExternalServer"] = state ? state.awsExternalServer : undefined;
            resourceInputs["azureAuthenticationMethod"] = state ? state.azureAuthenticationMethod : undefined;
            resourceInputs["conjurExternalServer"] = state ? state.conjurExternalServer : undefined;
            resourceInputs["conjurSecretRelativePath"] = state ? state.conjurSecretRelativePath : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["environmentVariable"] = state ? state.environmentVariable : undefined;
            resourceInputs["extensionArguments"] = state ? state.extensionArguments : undefined;
            resourceInputs["extensionClass"] = state ? state.extensionClass : undefined;
            resourceInputs["httpProxyExternalServer"] = state ? state.httpProxyExternalServer : undefined;
            resourceInputs["keyVaultUri"] = state ? state.keyVaultUri : undefined;
            resourceInputs["maxCacheDuration"] = state ? state.maxCacheDuration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["obscuredValue"] = state ? state.obscuredValue : undefined;
            resourceInputs["passwordFile"] = state ? state.passwordFile : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["secretFieldName"] = state ? state.secretFieldName : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["secretName"] = state ? state.secretName : undefined;
            resourceInputs["secretVersionId"] = state ? state.secretVersionId : undefined;
            resourceInputs["secretVersionStage"] = state ? state.secretVersionStage : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vaultExternalServer"] = state ? state.vaultExternalServer : undefined;
            resourceInputs["vaultSecretFieldName"] = state ? state.vaultSecretFieldName : undefined;
            resourceInputs["vaultSecretPath"] = state ? state.vaultSecretPath : undefined;
        } else {
            const args = argsOrState as DefaultPassphraseProviderArgs | undefined;
            resourceInputs["awsExternalServer"] = args ? args.awsExternalServer : undefined;
            resourceInputs["azureAuthenticationMethod"] = args ? args.azureAuthenticationMethod : undefined;
            resourceInputs["conjurExternalServer"] = args ? args.conjurExternalServer : undefined;
            resourceInputs["conjurSecretRelativePath"] = args ? args.conjurSecretRelativePath : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["environmentVariable"] = args ? args.environmentVariable : undefined;
            resourceInputs["extensionArguments"] = args ? args.extensionArguments : undefined;
            resourceInputs["extensionClass"] = args ? args.extensionClass : undefined;
            resourceInputs["httpProxyExternalServer"] = args ? args.httpProxyExternalServer : undefined;
            resourceInputs["keyVaultUri"] = args ? args.keyVaultUri : undefined;
            resourceInputs["maxCacheDuration"] = args ? args.maxCacheDuration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["obscuredValue"] = args?.obscuredValue ? pulumi.secret(args.obscuredValue) : undefined;
            resourceInputs["passwordFile"] = args ? args.passwordFile : undefined;
            resourceInputs["secretFieldName"] = args ? args.secretFieldName : undefined;
            resourceInputs["secretId"] = args ? args.secretId : undefined;
            resourceInputs["secretName"] = args ? args.secretName : undefined;
            resourceInputs["secretVersionId"] = args ? args.secretVersionId : undefined;
            resourceInputs["secretVersionStage"] = args ? args.secretVersionStage : undefined;
            resourceInputs["vaultExternalServer"] = args ? args.vaultExternalServer : undefined;
            resourceInputs["vaultSecretFieldName"] = args ? args.vaultSecretFieldName : undefined;
            resourceInputs["vaultSecretPath"] = args ? args.vaultSecretPath : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["obscuredValue"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DefaultPassphraseProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultPassphraseProvider resources.
 */
export interface DefaultPassphraseProviderState {
    /**
     * The external server with information to use when interacting with the AWS Secrets Manager.
     */
    awsExternalServer?: pulumi.Input<string>;
    /**
     * The mechanism used to authenticate to the Azure service.
     */
    azureAuthenticationMethod?: pulumi.Input<string>;
    /**
     * An external server definition with information needed to connect and authenticate to the Conjur instance containing the
     * passphrase.
     */
    conjurExternalServer?: pulumi.Input<string>;
    /**
     * The portion of the path that follows the account name in the URI needed to obtain the desired secret. Any special
     * characters in the path must be URL-encoded.
     */
    conjurSecretRelativePath?: pulumi.Input<string>;
    /**
     * A description for this Passphrase Provider
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this Passphrase Provider is enabled for use in the server.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the environment variable that is expected to hold the passphrase.
     */
    environmentVariable?: pulumi.Input<string>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Passphrase Provider. Each configuration property
     * should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Passphrase Provider.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 9.2.0.0+. A reference to an HTTP proxy server that should be used for
     * requests sent to the Azure service.
     */
    httpProxyExternalServer?: pulumi.Input<string>;
    /**
     * The URI that identifies the Azure Key Vault from which the secret is to be retrieved.
     */
    keyVaultUri?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - One of [`amazon-secrets-manager`, `vault`]: The maximum length of time that the
     * passphrase provider may cache the passphrase that has been read from Vault. A value of zero seconds indicates that the
     * provider should always attempt to read the passphrase from Vault. - `azure-key-vault`: The maximum length of time that
     * the passphrase provider may cache the passphrase that has been read from Azure Key Vault. A value of zero seconds
     * indicates that the provider should always attempt to read the passphrase from the Azure service. - `file-based`: The
     * maximum length of time that the passphrase provider may cache the passphrase that has been read from the target file. A
     * value of zero seconds indicates that the provider should always attempt to read the passphrase from the file. -
     * `conjur`: The maximum length of time that the passphrase provider may cache the passphrase that has been read from
     * Conjur. A value of zero seconds indicates that the provider should always attempt to read the passphrase from Conjur.
     */
    maxCacheDuration?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The value to be stored in an obscured form.
     */
    obscuredValue?: pulumi.Input<string>;
    /**
     * The path to the file containing the passphrase.
     */
    passwordFile?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultPassphraseProviderRequiredAction>[]>;
    /**
     * The name of the JSON field whose value is the passphrase that will be retrieved.
     */
    secretFieldName?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) or the user-friendly name of the secret to be retrieved.
     */
    secretId?: pulumi.Input<string>;
    /**
     * The name of the secret to retrieve.
     */
    secretName?: pulumi.Input<string>;
    /**
     * The unique identifier for the version of the secret to be retrieved.
     */
    secretVersionId?: pulumi.Input<string>;
    /**
     * The staging label for the version of the secret to be retrieved.
     */
    secretVersionStage?: pulumi.Input<string>;
    /**
     * The type of Passphrase Provider resource. Options are ['environment-variable', 'amazon-secrets-manager',
     * 'obscured-value', 'azure-key-vault', 'file-based', 'conjur', 'vault', 'third-party']
     */
    type?: pulumi.Input<string>;
    /**
     * An external server definition with information needed to connect and authenticate to the Vault instance containing the
     * passphrase.
     */
    vaultExternalServer?: pulumi.Input<string>;
    /**
     * The name of the field in the Vault secret record that contains the passphrase to use to generate the encryption key.
     */
    vaultSecretFieldName?: pulumi.Input<string>;
    /**
     * The path to the desired secret in the Vault service. This will be appended to the value of the base-url property for the
     * associated Vault external server.
     */
    vaultSecretPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultPassphraseProvider resource.
 */
export interface DefaultPassphraseProviderArgs {
    /**
     * The external server with information to use when interacting with the AWS Secrets Manager.
     */
    awsExternalServer?: pulumi.Input<string>;
    /**
     * The mechanism used to authenticate to the Azure service.
     */
    azureAuthenticationMethod?: pulumi.Input<string>;
    /**
     * An external server definition with information needed to connect and authenticate to the Conjur instance containing the
     * passphrase.
     */
    conjurExternalServer?: pulumi.Input<string>;
    /**
     * The portion of the path that follows the account name in the URI needed to obtain the desired secret. Any special
     * characters in the path must be URL-encoded.
     */
    conjurSecretRelativePath?: pulumi.Input<string>;
    /**
     * A description for this Passphrase Provider
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this Passphrase Provider is enabled for use in the server.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the environment variable that is expected to hold the passphrase.
     */
    environmentVariable?: pulumi.Input<string>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Passphrase Provider. Each configuration property
     * should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Passphrase Provider.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 9.2.0.0+. A reference to an HTTP proxy server that should be used for
     * requests sent to the Azure service.
     */
    httpProxyExternalServer?: pulumi.Input<string>;
    /**
     * The URI that identifies the Azure Key Vault from which the secret is to be retrieved.
     */
    keyVaultUri?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - One of [`amazon-secrets-manager`, `vault`]: The maximum length of time that the
     * passphrase provider may cache the passphrase that has been read from Vault. A value of zero seconds indicates that the
     * provider should always attempt to read the passphrase from Vault. - `azure-key-vault`: The maximum length of time that
     * the passphrase provider may cache the passphrase that has been read from Azure Key Vault. A value of zero seconds
     * indicates that the provider should always attempt to read the passphrase from the Azure service. - `file-based`: The
     * maximum length of time that the passphrase provider may cache the passphrase that has been read from the target file. A
     * value of zero seconds indicates that the provider should always attempt to read the passphrase from the file. -
     * `conjur`: The maximum length of time that the passphrase provider may cache the passphrase that has been read from
     * Conjur. A value of zero seconds indicates that the provider should always attempt to read the passphrase from Conjur.
     */
    maxCacheDuration?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * The value to be stored in an obscured form.
     */
    obscuredValue?: pulumi.Input<string>;
    /**
     * The path to the file containing the passphrase.
     */
    passwordFile?: pulumi.Input<string>;
    /**
     * The name of the JSON field whose value is the passphrase that will be retrieved.
     */
    secretFieldName?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) or the user-friendly name of the secret to be retrieved.
     */
    secretId?: pulumi.Input<string>;
    /**
     * The name of the secret to retrieve.
     */
    secretName?: pulumi.Input<string>;
    /**
     * The unique identifier for the version of the secret to be retrieved.
     */
    secretVersionId?: pulumi.Input<string>;
    /**
     * The staging label for the version of the secret to be retrieved.
     */
    secretVersionStage?: pulumi.Input<string>;
    /**
     * An external server definition with information needed to connect and authenticate to the Vault instance containing the
     * passphrase.
     */
    vaultExternalServer?: pulumi.Input<string>;
    /**
     * The name of the field in the Vault secret record that contains the passphrase to use to generate the encryption key.
     */
    vaultSecretFieldName?: pulumi.Input<string>;
    /**
     * The path to the desired secret in the Vault service. This will be appended to the value of the base-url property for the
     * associated Vault external server.
     */
    vaultSecretPath?: pulumi.Input<string>;
}
