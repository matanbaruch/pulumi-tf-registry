// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultCryptoManager extends pulumi.CustomResource {
    /**
     * Get an existing DefaultCryptoManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultCryptoManagerState, opts?: pulumi.CustomResourceOptions): DefaultCryptoManager {
        return new DefaultCryptoManager(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultCryptoManager:DefaultCryptoManager';

    /**
     * Returns true if the given object is an instance of DefaultCryptoManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultCryptoManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultCryptoManager.__pulumiType;
    }

    /**
     * Specifies the key length in bits for the preferred cipher.
     */
    public readonly cipherKeyLength!: pulumi.Output<number>;
    /**
     * Specifies the cipher for the Directory Server using the syntax algorithm/mode/padding.
     */
    public readonly cipherTransformation!: pulumi.Output<string>;
    /**
     * Specifies the preferred message digest algorithm for the Directory Server.
     */
    public readonly digestAlgorithm!: pulumi.Output<string>;
    /**
     * Indicates whether to enable support for TLS cipher suites that use the RSA key exchange algorithm. Cipher suites that
     * rely on RSA key exchange are not recommended because they do not support forward secrecy, which means that if the
     * private key is compromised, then any communication negotiated using that private key should also be considered
     * compromised.
     */
    public readonly enableRsaKeyExchangeCipherSuites!: pulumi.Output<boolean>;
    /**
     * Indicates whether to enable support for TLS cipher suites that use the SHA-1 digest algorithm. The SHA-1 digest
     * algorithm is no longer considered secure and is not recommended for use.
     */
    public readonly enableSha1CipherSuites!: pulumi.Output<boolean>;
    /**
     * The preferred key wrapping transformation for the Directory Server. This value must be the same for all server instances
     * in a replication topology.
     */
    public readonly keyWrappingTransformation!: pulumi.Output<string>;
    /**
     * Specifies the preferred MAC algorithm for the Directory Server.
     */
    public readonly macAlgorithm!: pulumi.Output<string>;
    /**
     * Specifies the key length in bits for the preferred MAC algorithm.
     */
    public readonly macKeyLength!: pulumi.Output<number>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies the names of the TLS cipher suites that will be enabled for outbound connections initiated by the Directory
     * Server.
     */
    public readonly outboundSslCipherSuites!: pulumi.Output<string[]>;
    /**
     * Specifies the names of the TLS protocols that will be enabled for outbound connections initiated by the Directory
     * Server.
     */
    public readonly outboundSslProtocols!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultCryptoManagerRequiredAction[]>;
    /**
     * Supported in PingDirectory product version 9.2.0.0+. The ID of the encryption settings definition to use for generating
     * digital signatures. If this is not specified, then the server's preferred encryption settings definition will be used.
     */
    public readonly signingEncryptionSettingsId!: pulumi.Output<string>;
    /**
     * Specifies the nickname (also called the alias) of the certificate that the Crypto Manager should use when performing SSL
     * communication.
     */
    public readonly sslCertNickname!: pulumi.Output<string>;
    /**
     * Specifies the names of the TLS cipher suites that are allowed for use in secure communication.
     */
    public readonly sslCipherSuites!: pulumi.Output<string[]>;
    /**
     * Specifies the names of TLS protocols that are allowed for use in secure communication.
     */
    public readonly sslProtocols!: pulumi.Output<string[]>;
    /**
     * The type of Crypto Manager resource. Options are ['crypto-manager']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultCryptoManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultCryptoManagerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultCryptoManagerArgs | DefaultCryptoManagerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultCryptoManagerState | undefined;
            resourceInputs["cipherKeyLength"] = state ? state.cipherKeyLength : undefined;
            resourceInputs["cipherTransformation"] = state ? state.cipherTransformation : undefined;
            resourceInputs["digestAlgorithm"] = state ? state.digestAlgorithm : undefined;
            resourceInputs["enableRsaKeyExchangeCipherSuites"] = state ? state.enableRsaKeyExchangeCipherSuites : undefined;
            resourceInputs["enableSha1CipherSuites"] = state ? state.enableSha1CipherSuites : undefined;
            resourceInputs["keyWrappingTransformation"] = state ? state.keyWrappingTransformation : undefined;
            resourceInputs["macAlgorithm"] = state ? state.macAlgorithm : undefined;
            resourceInputs["macKeyLength"] = state ? state.macKeyLength : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["outboundSslCipherSuites"] = state ? state.outboundSslCipherSuites : undefined;
            resourceInputs["outboundSslProtocols"] = state ? state.outboundSslProtocols : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["signingEncryptionSettingsId"] = state ? state.signingEncryptionSettingsId : undefined;
            resourceInputs["sslCertNickname"] = state ? state.sslCertNickname : undefined;
            resourceInputs["sslCipherSuites"] = state ? state.sslCipherSuites : undefined;
            resourceInputs["sslProtocols"] = state ? state.sslProtocols : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultCryptoManagerArgs | undefined;
            resourceInputs["cipherKeyLength"] = args ? args.cipherKeyLength : undefined;
            resourceInputs["cipherTransformation"] = args ? args.cipherTransformation : undefined;
            resourceInputs["digestAlgorithm"] = args ? args.digestAlgorithm : undefined;
            resourceInputs["enableRsaKeyExchangeCipherSuites"] = args ? args.enableRsaKeyExchangeCipherSuites : undefined;
            resourceInputs["enableSha1CipherSuites"] = args ? args.enableSha1CipherSuites : undefined;
            resourceInputs["keyWrappingTransformation"] = args ? args.keyWrappingTransformation : undefined;
            resourceInputs["macAlgorithm"] = args ? args.macAlgorithm : undefined;
            resourceInputs["macKeyLength"] = args ? args.macKeyLength : undefined;
            resourceInputs["outboundSslCipherSuites"] = args ? args.outboundSslCipherSuites : undefined;
            resourceInputs["outboundSslProtocols"] = args ? args.outboundSslProtocols : undefined;
            resourceInputs["signingEncryptionSettingsId"] = args ? args.signingEncryptionSettingsId : undefined;
            resourceInputs["sslCertNickname"] = args ? args.sslCertNickname : undefined;
            resourceInputs["sslCipherSuites"] = args ? args.sslCipherSuites : undefined;
            resourceInputs["sslProtocols"] = args ? args.sslProtocols : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultCryptoManager.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultCryptoManager resources.
 */
export interface DefaultCryptoManagerState {
    /**
     * Specifies the key length in bits for the preferred cipher.
     */
    cipherKeyLength?: pulumi.Input<number>;
    /**
     * Specifies the cipher for the Directory Server using the syntax algorithm/mode/padding.
     */
    cipherTransformation?: pulumi.Input<string>;
    /**
     * Specifies the preferred message digest algorithm for the Directory Server.
     */
    digestAlgorithm?: pulumi.Input<string>;
    /**
     * Indicates whether to enable support for TLS cipher suites that use the RSA key exchange algorithm. Cipher suites that
     * rely on RSA key exchange are not recommended because they do not support forward secrecy, which means that if the
     * private key is compromised, then any communication negotiated using that private key should also be considered
     * compromised.
     */
    enableRsaKeyExchangeCipherSuites?: pulumi.Input<boolean>;
    /**
     * Indicates whether to enable support for TLS cipher suites that use the SHA-1 digest algorithm. The SHA-1 digest
     * algorithm is no longer considered secure and is not recommended for use.
     */
    enableSha1CipherSuites?: pulumi.Input<boolean>;
    /**
     * The preferred key wrapping transformation for the Directory Server. This value must be the same for all server instances
     * in a replication topology.
     */
    keyWrappingTransformation?: pulumi.Input<string>;
    /**
     * Specifies the preferred MAC algorithm for the Directory Server.
     */
    macAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies the key length in bits for the preferred MAC algorithm.
     */
    macKeyLength?: pulumi.Input<number>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the TLS cipher suites that will be enabled for outbound connections initiated by the Directory
     * Server.
     */
    outboundSslCipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the TLS protocols that will be enabled for outbound connections initiated by the Directory
     * Server.
     */
    outboundSslProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultCryptoManagerRequiredAction>[]>;
    /**
     * Supported in PingDirectory product version 9.2.0.0+. The ID of the encryption settings definition to use for generating
     * digital signatures. If this is not specified, then the server's preferred encryption settings definition will be used.
     */
    signingEncryptionSettingsId?: pulumi.Input<string>;
    /**
     * Specifies the nickname (also called the alias) of the certificate that the Crypto Manager should use when performing SSL
     * communication.
     */
    sslCertNickname?: pulumi.Input<string>;
    /**
     * Specifies the names of the TLS cipher suites that are allowed for use in secure communication.
     */
    sslCipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of TLS protocols that are allowed for use in secure communication.
     */
    sslProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of Crypto Manager resource. Options are ['crypto-manager']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultCryptoManager resource.
 */
export interface DefaultCryptoManagerArgs {
    /**
     * Specifies the key length in bits for the preferred cipher.
     */
    cipherKeyLength?: pulumi.Input<number>;
    /**
     * Specifies the cipher for the Directory Server using the syntax algorithm/mode/padding.
     */
    cipherTransformation?: pulumi.Input<string>;
    /**
     * Specifies the preferred message digest algorithm for the Directory Server.
     */
    digestAlgorithm?: pulumi.Input<string>;
    /**
     * Indicates whether to enable support for TLS cipher suites that use the RSA key exchange algorithm. Cipher suites that
     * rely on RSA key exchange are not recommended because they do not support forward secrecy, which means that if the
     * private key is compromised, then any communication negotiated using that private key should also be considered
     * compromised.
     */
    enableRsaKeyExchangeCipherSuites?: pulumi.Input<boolean>;
    /**
     * Indicates whether to enable support for TLS cipher suites that use the SHA-1 digest algorithm. The SHA-1 digest
     * algorithm is no longer considered secure and is not recommended for use.
     */
    enableSha1CipherSuites?: pulumi.Input<boolean>;
    /**
     * The preferred key wrapping transformation for the Directory Server. This value must be the same for all server instances
     * in a replication topology.
     */
    keyWrappingTransformation?: pulumi.Input<string>;
    /**
     * Specifies the preferred MAC algorithm for the Directory Server.
     */
    macAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies the key length in bits for the preferred MAC algorithm.
     */
    macKeyLength?: pulumi.Input<number>;
    /**
     * Specifies the names of the TLS cipher suites that will be enabled for outbound connections initiated by the Directory
     * Server.
     */
    outboundSslCipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the TLS protocols that will be enabled for outbound connections initiated by the Directory
     * Server.
     */
    outboundSslProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Supported in PingDirectory product version 9.2.0.0+. The ID of the encryption settings definition to use for generating
     * digital signatures. If this is not specified, then the server's preferred encryption settings definition will be used.
     */
    signingEncryptionSettingsId?: pulumi.Input<string>;
    /**
     * Specifies the nickname (also called the alias) of the certificate that the Crypto Manager should use when performing SSL
     * communication.
     */
    sslCertNickname?: pulumi.Input<string>;
    /**
     * Specifies the names of the TLS cipher suites that are allowed for use in secure communication.
     */
    sslCipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of TLS protocols that are allowed for use in secure communication.
     */
    sslProtocols?: pulumi.Input<pulumi.Input<string>[]>;
}
