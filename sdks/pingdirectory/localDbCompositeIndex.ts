// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LocalDbCompositeIndex extends pulumi.CustomResource {
    /**
     * Get an existing LocalDbCompositeIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocalDbCompositeIndexState, opts?: pulumi.CustomResourceOptions): LocalDbCompositeIndex {
        return new LocalDbCompositeIndex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/localDbCompositeIndex:LocalDbCompositeIndex';

    /**
     * Returns true if the given object is an instance of LocalDbCompositeIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocalDbCompositeIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocalDbCompositeIndex.__pulumiType;
    }

    /**
     * Name of the parent Backend
     */
    public readonly backendName!: pulumi.Output<string>;
    /**
     * The behavior that the server should exhibit when storing information from this index in the database cache.
     */
    public readonly cacheMode!: pulumi.Output<string | undefined>;
    /**
     * A description for this Local DB Composite Index
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An optional base DN pattern that identifies portions of the DIT in which entries to index may exist.
     */
    public readonly indexBaseDnPattern!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of entries that any single index key will be allowed to match before the server stops maintaining the
     * ID set for that index key.
     */
    public readonly indexEntryLimit!: pulumi.Output<number>;
    /**
     * A filter pattern that identifies which entries to include in the index.
     */
    public readonly indexFilterPattern!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Indicates whether the server should load the contents of this index into memory when the backend is being opened.
     */
    public readonly primeIndex!: pulumi.Output<boolean>;
    /**
     * Indicates whether to only prime the internal nodes of the index database, rather than priming both internal and leaf
     * nodes.
     */
    public readonly primeInternalNodesOnly!: pulumi.Output<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.LocalDbCompositeIndexRequiredAction[]>;
    /**
     * The type of Local DB Composite Index resource. Options are ['local-db-composite-index']
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a LocalDbCompositeIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocalDbCompositeIndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocalDbCompositeIndexArgs | LocalDbCompositeIndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocalDbCompositeIndexState | undefined;
            resourceInputs["backendName"] = state ? state.backendName : undefined;
            resourceInputs["cacheMode"] = state ? state.cacheMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["indexBaseDnPattern"] = state ? state.indexBaseDnPattern : undefined;
            resourceInputs["indexEntryLimit"] = state ? state.indexEntryLimit : undefined;
            resourceInputs["indexFilterPattern"] = state ? state.indexFilterPattern : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["primeIndex"] = state ? state.primeIndex : undefined;
            resourceInputs["primeInternalNodesOnly"] = state ? state.primeInternalNodesOnly : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as LocalDbCompositeIndexArgs | undefined;
            if ((!args || args.backendName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendName'");
            }
            if ((!args || args.indexFilterPattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexFilterPattern'");
            }
            resourceInputs["backendName"] = args ? args.backendName : undefined;
            resourceInputs["cacheMode"] = args ? args.cacheMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["indexBaseDnPattern"] = args ? args.indexBaseDnPattern : undefined;
            resourceInputs["indexEntryLimit"] = args ? args.indexEntryLimit : undefined;
            resourceInputs["indexFilterPattern"] = args ? args.indexFilterPattern : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primeIndex"] = args ? args.primeIndex : undefined;
            resourceInputs["primeInternalNodesOnly"] = args ? args.primeInternalNodesOnly : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocalDbCompositeIndex.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LocalDbCompositeIndex resources.
 */
export interface LocalDbCompositeIndexState {
    /**
     * Name of the parent Backend
     */
    backendName?: pulumi.Input<string>;
    /**
     * The behavior that the server should exhibit when storing information from this index in the database cache.
     */
    cacheMode?: pulumi.Input<string>;
    /**
     * A description for this Local DB Composite Index
     */
    description?: pulumi.Input<string>;
    /**
     * An optional base DN pattern that identifies portions of the DIT in which entries to index may exist.
     */
    indexBaseDnPattern?: pulumi.Input<string>;
    /**
     * The maximum number of entries that any single index key will be allowed to match before the server stops maintaining the
     * ID set for that index key.
     */
    indexEntryLimit?: pulumi.Input<number>;
    /**
     * A filter pattern that identifies which entries to include in the index.
     */
    indexFilterPattern?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the server should load the contents of this index into memory when the backend is being opened.
     */
    primeIndex?: pulumi.Input<boolean>;
    /**
     * Indicates whether to only prime the internal nodes of the index database, rather than priming both internal and leaf
     * nodes.
     */
    primeInternalNodesOnly?: pulumi.Input<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.LocalDbCompositeIndexRequiredAction>[]>;
    /**
     * The type of Local DB Composite Index resource. Options are ['local-db-composite-index']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LocalDbCompositeIndex resource.
 */
export interface LocalDbCompositeIndexArgs {
    /**
     * Name of the parent Backend
     */
    backendName: pulumi.Input<string>;
    /**
     * The behavior that the server should exhibit when storing information from this index in the database cache.
     */
    cacheMode?: pulumi.Input<string>;
    /**
     * A description for this Local DB Composite Index
     */
    description?: pulumi.Input<string>;
    /**
     * An optional base DN pattern that identifies portions of the DIT in which entries to index may exist.
     */
    indexBaseDnPattern?: pulumi.Input<string>;
    /**
     * The maximum number of entries that any single index key will be allowed to match before the server stops maintaining the
     * ID set for that index key.
     */
    indexEntryLimit?: pulumi.Input<number>;
    /**
     * A filter pattern that identifies which entries to include in the index.
     */
    indexFilterPattern: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether the server should load the contents of this index into memory when the backend is being opened.
     */
    primeIndex?: pulumi.Input<boolean>;
    /**
     * Indicates whether to only prime the internal nodes of the index database, rather than priming both internal and leaf
     * nodes.
     */
    primeInternalNodesOnly?: pulumi.Input<boolean>;
    /**
     * The type of Local DB Composite Index resource. Options are ['local-db-composite-index']
     */
    type?: pulumi.Input<string>;
}
