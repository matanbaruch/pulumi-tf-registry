// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getConnectionHandler(args: GetConnectionHandlerArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectionHandlerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getConnectionHandler:getConnectionHandler", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getConnectionHandler.
 */
export interface GetConnectionHandlerArgs {
    name: string;
}

/**
 * A collection of values returned by getConnectionHandler.
 */
export interface GetConnectionHandlerResult {
    readonly acceptBacklog: number;
    readonly allowLdapV2: boolean;
    readonly allowStartTls: boolean;
    readonly allowTcpReuseAddress: boolean;
    readonly allowedClients: string[];
    readonly autoAuthenticateUsingClientCertificate: boolean;
    readonly closeConnectionsOnExplicitGc: boolean;
    readonly closeConnectionsWhenUnavailable: boolean;
    readonly correlationIdRequestHeaders: string[];
    readonly correlationIdResponseHeader: string;
    readonly deniedClients: string[];
    readonly description: string;
    readonly enableMultipartMimeParameters: boolean;
    readonly enableSniHostnameChecks: boolean;
    readonly enabled: boolean;
    readonly failedBindResponseDelay: string;
    readonly httpOperationLogPublishers: string[];
    readonly httpRequestHeaderSize: number;
    readonly httpServletExtensions: string[];
    readonly id: string;
    readonly idleTimeLimit: string;
    readonly keepStats: boolean;
    readonly keyManagerProvider: string;
    readonly ldifDirectory: string;
    readonly listenAddresses: string[];
    readonly listenPort: number;
    readonly lowResourcesConnectionThreshold: number;
    readonly lowResourcesIdleTimeLimit: string;
    readonly maxBlockedWriteTimeLimit: string;
    readonly maxCancelHandlers: number;
    readonly maxRequestSize: string;
    readonly name: string;
    readonly numAcceptHandlers: number;
    readonly numRequestHandlers: number;
    readonly pollInterval: string;
    readonly requestHandlerPerConnection: boolean;
    readonly responseHeaders: string[];
    readonly sendRejectionNotice: boolean;
    readonly sslCertNickname: string;
    readonly sslCipherSuites: string[];
    readonly sslClientAuthPolicy: string;
    readonly sslProtocols: string[];
    readonly trustManagerProvider: string;
    readonly type: string;
    readonly useCorrelationIdHeader: boolean;
    readonly useForwardedHeaders: boolean;
    readonly useSsl: boolean;
    readonly useTcpKeepAlive: boolean;
    readonly webApplicationExtensions: string[];
}
export function getConnectionHandlerOutput(args: GetConnectionHandlerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConnectionHandlerResult> {
    return pulumi.output(args).apply((a: any) => getConnectionHandler(a, opts))
}

/**
 * A collection of arguments for invoking getConnectionHandler.
 */
export interface GetConnectionHandlerOutputArgs {
    name: pulumi.Input<string>;
}
