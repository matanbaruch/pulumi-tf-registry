// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultPasswordPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DefaultPasswordPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultPasswordPolicyState, opts?: pulumi.CustomResourceOptions): DefaultPasswordPolicy {
        return new DefaultPasswordPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultPasswordPolicy:DefaultPasswordPolicy';

    /**
     * Returns true if the given object is an instance of DefaultPasswordPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultPasswordPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultPasswordPolicy.__pulumiType;
    }

    /**
     * Specifies the names of the account status notification handlers that are used with the associated password storage
     * scheme.
     */
    public readonly accountStatusNotificationHandlers!: pulumi.Output<string[]>;
    /**
     * Indicates whether a user whose password is expired is still allowed to change that password using the password modify
     * extended operation.
     */
    public readonly allowExpiredPasswordChanges!: pulumi.Output<boolean>;
    /**
     * Indicates whether user entries can have multiple distinct values for the password attribute.
     */
    public readonly allowMultiplePasswordValues!: pulumi.Output<boolean>;
    /**
     * Indicates whether users can change their passwords by providing a pre-encoded value.
     */
    public readonly allowPreEncodedPasswords!: pulumi.Output<string>;
    /**
     * Indicates whether users can change their own passwords.
     */
    public readonly allowUserPasswordChanges!: pulumi.Output<boolean>;
    /**
     * The set of conditions under which a user governed by this Password Policy will be permitted to generate a password reset
     * token via the deliver password reset token extended operation, and to use that token in lieu of the current password via
     * the password modify extended operation.
     */
    public readonly allowedPasswordResetTokenUseConditions!: pulumi.Output<string[]>;
    /**
     * Specifies the behavior that the server should exhibit if a bind password fails validation by one or more of the
     * configured bind password validators.
     */
    public readonly bindPasswordValidationFailureAction!: pulumi.Output<string>;
    /**
     * Specifies the names of the password validators that should be invoked for bind operations.
     */
    public readonly bindPasswordValidators!: pulumi.Output<string[]>;
    /**
     * Specifies the names of the password storage schemes that are used to encode clear-text passwords for this password
     * policy.
     */
    public readonly defaultPasswordStorageSchemes!: pulumi.Output<string[]>;
    /**
     * Specifies the names of the password storage schemes that are considered deprecated for this password policy.
     */
    public readonly deprecatedPasswordStorageSchemes!: pulumi.Output<string[]>;
    /**
     * A description for this Password Policy
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Indicates whether to enable debugging for the password policy state.
     */
    public readonly enableDebug!: pulumi.Output<boolean>;
    /**
     * Indicates whether the Directory Server allows a user's password to expire even if that user has never seen an expiration
     * warning notification.
     */
    public readonly expirePasswordsWithoutWarning!: pulumi.Output<boolean>;
    /**
     * The action that the server should take for authentication attempts that target a user with more than the configured
     * number of outstanding authentication failures.
     */
    public readonly failureLockoutAction!: pulumi.Output<string>;
    /**
     * Indicates whether users are forced to change their passwords upon first authenticating to the Directory Server after
     * their account has been created.
     */
    public readonly forceChangeOnAdd!: pulumi.Output<boolean>;
    /**
     * Indicates whether users are forced to change their passwords if they are reset by an administrator. If a user's password
     * is changed by any other user, that is considered an administrative password reset.
     */
    public readonly forceChangeOnReset!: pulumi.Output<boolean>;
    /**
     * Specifies the number of grace logins that a user is allowed after the account has expired to allow that user to choose a
     * new password.
     */
    public readonly graceLoginCount!: pulumi.Output<number>;
    /**
     * Specifies the maximum length of time that an account may remain idle (that is, the associated user does not authenticate
     * to the server) before that user is locked out.
     */
    public readonly idleLockoutInterval!: pulumi.Output<string>;
    /**
     * Indicates whether to ignore subsequent authentication failures using the same password as an earlier failed
     * authentication attempt (within the time frame defined by the lockout failure expiration interval). If this option is
     * "true", then multiple failed attempts using the same password will be considered only a single failure. If this option
     * is "false", then any failure will be tracked regardless of whether it used the same password as an earlier attempt.
     */
    public readonly ignoreDuplicatePasswordFailures!: pulumi.Output<boolean>;
    /**
     * Specifies the name or OID of the attribute type that is used to hold the IP address of the client from which the user
     * last authenticated.
     */
    public readonly lastLoginIpAddressAttribute!: pulumi.Output<string>;
    /**
     * Specifies the name or OID of the attribute type that is used to hold the last login time for users with the associated
     * password policy.
     */
    public readonly lastLoginTimeAttribute!: pulumi.Output<string>;
    /**
     * Specifies the format string that is used to generate the last login time value for users with the associated password
     * policy. Last login time values will be written using the UTC (also known as GMT, or Greenwich Mean Time) time zone.
     */
    public readonly lastLoginTimeFormat!: pulumi.Output<string>;
    /**
     * Specifies the length of time that an account is locked after too many authentication failures.
     */
    public readonly lockoutDuration!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of authentication failures that a user is allowed before the account is locked out.
     */
    public readonly lockoutFailureCount!: pulumi.Output<number>;
    /**
     * Specifies the length of time before an authentication failure is no longer counted against a user for the purposes of
     * account lockout.
     */
    public readonly lockoutFailureExpirationInterval!: pulumi.Output<string>;
    /**
     * Specifies the maximum length of time that a user can continue using the same password before it must be changed (that
     * is, the password expiration interval).
     */
    public readonly maxPasswordAge!: pulumi.Output<string>;
    /**
     * Specifies the maximum length of time that users have to change passwords after they have been reset by an administrator
     * before they become locked.
     */
    public readonly maxPasswordResetAge!: pulumi.Output<string>;
    /**
     * Specifies the maximum length of time that a retired password should be considered valid and may be used to authenticate
     * to the server.
     */
    public readonly maxRetiredPasswordAge!: pulumi.Output<string>;
    /**
     * The maximum number of failed authentication attempts to include in the recent login history for each account.
     */
    public readonly maximumRecentLoginHistoryFailedAuthenticationCount!: pulumi.Output<number>;
    /**
     * The maximum age of failed authentication attempts to include in the recent login history for each account.
     */
    public readonly maximumRecentLoginHistoryFailedAuthenticationDuration!: pulumi.Output<string>;
    /**
     * The maximum number of successful authentication attempts to include in the recent login history for each account.
     */
    public readonly maximumRecentLoginHistorySuccessfulAuthenticationCount!: pulumi.Output<number>;
    /**
     * The maximum age of successful authentication attempts to include in the recent login history for each account.
     */
    public readonly maximumRecentLoginHistorySuccessfulAuthenticationDuration!: pulumi.Output<string>;
    /**
     * Specifies the minimum length of time after a password change before the user is allowed to change the password again.
     */
    public readonly minPasswordAge!: pulumi.Output<string>;
    /**
     * Indicates how frequently password validation should be performed during bind operations for each user to whom this
     * password policy is assigned.
     */
    public readonly minimumBindPasswordValidationFrequency!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies the attribute type used to hold user passwords.
     */
    public readonly passwordAttribute!: pulumi.Output<string>;
    /**
     * Indicates whether user password changes must use the password modify extended operation and must include the user's
     * current password before the change is allowed.
     */
    public readonly passwordChangeRequiresCurrentPassword!: pulumi.Output<boolean>;
    /**
     * Specifies the maximum length of time before a user's password actually expires that the server begins to include warning
     * notifications in bind responses for that user.
     */
    public readonly passwordExpirationWarningInterval!: pulumi.Output<string>;
    /**
     * Specifies the name of the password generator that is used with the associated password policy.
     */
    public readonly passwordGenerator!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of former passwords to maintain in the password history.
     */
    public readonly passwordHistoryCount!: pulumi.Output<number>;
    /**
     * Specifies the maximum length of time that passwords remain in the password history.
     */
    public readonly passwordHistoryDuration!: pulumi.Output<string>;
    /**
     * Specifies the conditions under which the server may retire a user's current password in the course of setting a new
     * password for that user (whether via a modify operation or a password modify extended operation).
     */
    public readonly passwordRetirementBehaviors!: pulumi.Output<string[]>;
    /**
     * Specifies the names of the password validators that are used with the associated password storage scheme.
     */
    public readonly passwordValidators!: pulumi.Output<string[]>;
    /**
     * Specifies the format string(s) that might have been used with the last login time at any point in the past for users
     * associated with the password policy.
     */
    public readonly previousLastLoginTimeFormats!: pulumi.Output<string[]>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. Indicates whether to re-encode passwords on authentication if the
     * configuration for the underlying password storage scheme has changed.
     */
    public readonly reEncodePasswordsOnSchemeConfigChange!: pulumi.Output<boolean>;
    /**
     * The behavior that the server will exhibit when multiple similar authentication attempts (with the same values for the
     * successful, authentication-method, client-ip-address, and failure-reason fields) are processed for an account.
     */
    public readonly recentLoginHistorySimilarAttemptBehavior!: pulumi.Output<string>;
    /**
     * Specifies the time by which all users with the associated password policy must change their passwords.
     */
    public readonly requireChangeByTime!: pulumi.Output<string>;
    /**
     * Indicates whether users with the associated password policy are required to authenticate in a secure manner.
     */
    public readonly requireSecureAuthentication!: pulumi.Output<boolean>;
    /**
     * Indicates whether users with the associated password policy are required to change their password in a secure manner
     * that does not expose the credentials.
     */
    public readonly requireSecurePasswordChanges!: pulumi.Output<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultPasswordPolicyRequiredAction[]>;
    /**
     * Indicates whether the server should return the password expiring and password expired response controls (as described in
     * draft-vchu-ldap-pwd-policy).
     */
    public readonly returnPasswordExpirationControls!: pulumi.Output<string>;
    /**
     * Indicates whether passwords set by administrators are allowed to bypass the password validation process that is required
     * for user password changes.
     */
    public readonly skipValidationForAdministrators!: pulumi.Output<boolean>;
    /**
     * Specifies how the server deals with the inability to update password policy state information during an authentication
     * attempt.
     */
    public readonly stateUpdateFailurePolicy!: pulumi.Output<string>;
    /**
     * The type of Password Policy resource. Options are ['password-policy']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultPasswordPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultPasswordPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultPasswordPolicyArgs | DefaultPasswordPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultPasswordPolicyState | undefined;
            resourceInputs["accountStatusNotificationHandlers"] = state ? state.accountStatusNotificationHandlers : undefined;
            resourceInputs["allowExpiredPasswordChanges"] = state ? state.allowExpiredPasswordChanges : undefined;
            resourceInputs["allowMultiplePasswordValues"] = state ? state.allowMultiplePasswordValues : undefined;
            resourceInputs["allowPreEncodedPasswords"] = state ? state.allowPreEncodedPasswords : undefined;
            resourceInputs["allowUserPasswordChanges"] = state ? state.allowUserPasswordChanges : undefined;
            resourceInputs["allowedPasswordResetTokenUseConditions"] = state ? state.allowedPasswordResetTokenUseConditions : undefined;
            resourceInputs["bindPasswordValidationFailureAction"] = state ? state.bindPasswordValidationFailureAction : undefined;
            resourceInputs["bindPasswordValidators"] = state ? state.bindPasswordValidators : undefined;
            resourceInputs["defaultPasswordStorageSchemes"] = state ? state.defaultPasswordStorageSchemes : undefined;
            resourceInputs["deprecatedPasswordStorageSchemes"] = state ? state.deprecatedPasswordStorageSchemes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableDebug"] = state ? state.enableDebug : undefined;
            resourceInputs["expirePasswordsWithoutWarning"] = state ? state.expirePasswordsWithoutWarning : undefined;
            resourceInputs["failureLockoutAction"] = state ? state.failureLockoutAction : undefined;
            resourceInputs["forceChangeOnAdd"] = state ? state.forceChangeOnAdd : undefined;
            resourceInputs["forceChangeOnReset"] = state ? state.forceChangeOnReset : undefined;
            resourceInputs["graceLoginCount"] = state ? state.graceLoginCount : undefined;
            resourceInputs["idleLockoutInterval"] = state ? state.idleLockoutInterval : undefined;
            resourceInputs["ignoreDuplicatePasswordFailures"] = state ? state.ignoreDuplicatePasswordFailures : undefined;
            resourceInputs["lastLoginIpAddressAttribute"] = state ? state.lastLoginIpAddressAttribute : undefined;
            resourceInputs["lastLoginTimeAttribute"] = state ? state.lastLoginTimeAttribute : undefined;
            resourceInputs["lastLoginTimeFormat"] = state ? state.lastLoginTimeFormat : undefined;
            resourceInputs["lockoutDuration"] = state ? state.lockoutDuration : undefined;
            resourceInputs["lockoutFailureCount"] = state ? state.lockoutFailureCount : undefined;
            resourceInputs["lockoutFailureExpirationInterval"] = state ? state.lockoutFailureExpirationInterval : undefined;
            resourceInputs["maxPasswordAge"] = state ? state.maxPasswordAge : undefined;
            resourceInputs["maxPasswordResetAge"] = state ? state.maxPasswordResetAge : undefined;
            resourceInputs["maxRetiredPasswordAge"] = state ? state.maxRetiredPasswordAge : undefined;
            resourceInputs["maximumRecentLoginHistoryFailedAuthenticationCount"] = state ? state.maximumRecentLoginHistoryFailedAuthenticationCount : undefined;
            resourceInputs["maximumRecentLoginHistoryFailedAuthenticationDuration"] = state ? state.maximumRecentLoginHistoryFailedAuthenticationDuration : undefined;
            resourceInputs["maximumRecentLoginHistorySuccessfulAuthenticationCount"] = state ? state.maximumRecentLoginHistorySuccessfulAuthenticationCount : undefined;
            resourceInputs["maximumRecentLoginHistorySuccessfulAuthenticationDuration"] = state ? state.maximumRecentLoginHistorySuccessfulAuthenticationDuration : undefined;
            resourceInputs["minPasswordAge"] = state ? state.minPasswordAge : undefined;
            resourceInputs["minimumBindPasswordValidationFrequency"] = state ? state.minimumBindPasswordValidationFrequency : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["passwordAttribute"] = state ? state.passwordAttribute : undefined;
            resourceInputs["passwordChangeRequiresCurrentPassword"] = state ? state.passwordChangeRequiresCurrentPassword : undefined;
            resourceInputs["passwordExpirationWarningInterval"] = state ? state.passwordExpirationWarningInterval : undefined;
            resourceInputs["passwordGenerator"] = state ? state.passwordGenerator : undefined;
            resourceInputs["passwordHistoryCount"] = state ? state.passwordHistoryCount : undefined;
            resourceInputs["passwordHistoryDuration"] = state ? state.passwordHistoryDuration : undefined;
            resourceInputs["passwordRetirementBehaviors"] = state ? state.passwordRetirementBehaviors : undefined;
            resourceInputs["passwordValidators"] = state ? state.passwordValidators : undefined;
            resourceInputs["previousLastLoginTimeFormats"] = state ? state.previousLastLoginTimeFormats : undefined;
            resourceInputs["reEncodePasswordsOnSchemeConfigChange"] = state ? state.reEncodePasswordsOnSchemeConfigChange : undefined;
            resourceInputs["recentLoginHistorySimilarAttemptBehavior"] = state ? state.recentLoginHistorySimilarAttemptBehavior : undefined;
            resourceInputs["requireChangeByTime"] = state ? state.requireChangeByTime : undefined;
            resourceInputs["requireSecureAuthentication"] = state ? state.requireSecureAuthentication : undefined;
            resourceInputs["requireSecurePasswordChanges"] = state ? state.requireSecurePasswordChanges : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["returnPasswordExpirationControls"] = state ? state.returnPasswordExpirationControls : undefined;
            resourceInputs["skipValidationForAdministrators"] = state ? state.skipValidationForAdministrators : undefined;
            resourceInputs["stateUpdateFailurePolicy"] = state ? state.stateUpdateFailurePolicy : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultPasswordPolicyArgs | undefined;
            resourceInputs["accountStatusNotificationHandlers"] = args ? args.accountStatusNotificationHandlers : undefined;
            resourceInputs["allowExpiredPasswordChanges"] = args ? args.allowExpiredPasswordChanges : undefined;
            resourceInputs["allowMultiplePasswordValues"] = args ? args.allowMultiplePasswordValues : undefined;
            resourceInputs["allowPreEncodedPasswords"] = args ? args.allowPreEncodedPasswords : undefined;
            resourceInputs["allowUserPasswordChanges"] = args ? args.allowUserPasswordChanges : undefined;
            resourceInputs["allowedPasswordResetTokenUseConditions"] = args ? args.allowedPasswordResetTokenUseConditions : undefined;
            resourceInputs["bindPasswordValidationFailureAction"] = args ? args.bindPasswordValidationFailureAction : undefined;
            resourceInputs["bindPasswordValidators"] = args ? args.bindPasswordValidators : undefined;
            resourceInputs["defaultPasswordStorageSchemes"] = args ? args.defaultPasswordStorageSchemes : undefined;
            resourceInputs["deprecatedPasswordStorageSchemes"] = args ? args.deprecatedPasswordStorageSchemes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableDebug"] = args ? args.enableDebug : undefined;
            resourceInputs["expirePasswordsWithoutWarning"] = args ? args.expirePasswordsWithoutWarning : undefined;
            resourceInputs["failureLockoutAction"] = args ? args.failureLockoutAction : undefined;
            resourceInputs["forceChangeOnAdd"] = args ? args.forceChangeOnAdd : undefined;
            resourceInputs["forceChangeOnReset"] = args ? args.forceChangeOnReset : undefined;
            resourceInputs["graceLoginCount"] = args ? args.graceLoginCount : undefined;
            resourceInputs["idleLockoutInterval"] = args ? args.idleLockoutInterval : undefined;
            resourceInputs["ignoreDuplicatePasswordFailures"] = args ? args.ignoreDuplicatePasswordFailures : undefined;
            resourceInputs["lastLoginIpAddressAttribute"] = args ? args.lastLoginIpAddressAttribute : undefined;
            resourceInputs["lastLoginTimeAttribute"] = args ? args.lastLoginTimeAttribute : undefined;
            resourceInputs["lastLoginTimeFormat"] = args ? args.lastLoginTimeFormat : undefined;
            resourceInputs["lockoutDuration"] = args ? args.lockoutDuration : undefined;
            resourceInputs["lockoutFailureCount"] = args ? args.lockoutFailureCount : undefined;
            resourceInputs["lockoutFailureExpirationInterval"] = args ? args.lockoutFailureExpirationInterval : undefined;
            resourceInputs["maxPasswordAge"] = args ? args.maxPasswordAge : undefined;
            resourceInputs["maxPasswordResetAge"] = args ? args.maxPasswordResetAge : undefined;
            resourceInputs["maxRetiredPasswordAge"] = args ? args.maxRetiredPasswordAge : undefined;
            resourceInputs["maximumRecentLoginHistoryFailedAuthenticationCount"] = args ? args.maximumRecentLoginHistoryFailedAuthenticationCount : undefined;
            resourceInputs["maximumRecentLoginHistoryFailedAuthenticationDuration"] = args ? args.maximumRecentLoginHistoryFailedAuthenticationDuration : undefined;
            resourceInputs["maximumRecentLoginHistorySuccessfulAuthenticationCount"] = args ? args.maximumRecentLoginHistorySuccessfulAuthenticationCount : undefined;
            resourceInputs["maximumRecentLoginHistorySuccessfulAuthenticationDuration"] = args ? args.maximumRecentLoginHistorySuccessfulAuthenticationDuration : undefined;
            resourceInputs["minPasswordAge"] = args ? args.minPasswordAge : undefined;
            resourceInputs["minimumBindPasswordValidationFrequency"] = args ? args.minimumBindPasswordValidationFrequency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passwordAttribute"] = args ? args.passwordAttribute : undefined;
            resourceInputs["passwordChangeRequiresCurrentPassword"] = args ? args.passwordChangeRequiresCurrentPassword : undefined;
            resourceInputs["passwordExpirationWarningInterval"] = args ? args.passwordExpirationWarningInterval : undefined;
            resourceInputs["passwordGenerator"] = args ? args.passwordGenerator : undefined;
            resourceInputs["passwordHistoryCount"] = args ? args.passwordHistoryCount : undefined;
            resourceInputs["passwordHistoryDuration"] = args ? args.passwordHistoryDuration : undefined;
            resourceInputs["passwordRetirementBehaviors"] = args ? args.passwordRetirementBehaviors : undefined;
            resourceInputs["passwordValidators"] = args ? args.passwordValidators : undefined;
            resourceInputs["previousLastLoginTimeFormats"] = args ? args.previousLastLoginTimeFormats : undefined;
            resourceInputs["reEncodePasswordsOnSchemeConfigChange"] = args ? args.reEncodePasswordsOnSchemeConfigChange : undefined;
            resourceInputs["recentLoginHistorySimilarAttemptBehavior"] = args ? args.recentLoginHistorySimilarAttemptBehavior : undefined;
            resourceInputs["requireChangeByTime"] = args ? args.requireChangeByTime : undefined;
            resourceInputs["requireSecureAuthentication"] = args ? args.requireSecureAuthentication : undefined;
            resourceInputs["requireSecurePasswordChanges"] = args ? args.requireSecurePasswordChanges : undefined;
            resourceInputs["returnPasswordExpirationControls"] = args ? args.returnPasswordExpirationControls : undefined;
            resourceInputs["skipValidationForAdministrators"] = args ? args.skipValidationForAdministrators : undefined;
            resourceInputs["stateUpdateFailurePolicy"] = args ? args.stateUpdateFailurePolicy : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultPasswordPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultPasswordPolicy resources.
 */
export interface DefaultPasswordPolicyState {
    /**
     * Specifies the names of the account status notification handlers that are used with the associated password storage
     * scheme.
     */
    accountStatusNotificationHandlers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether a user whose password is expired is still allowed to change that password using the password modify
     * extended operation.
     */
    allowExpiredPasswordChanges?: pulumi.Input<boolean>;
    /**
     * Indicates whether user entries can have multiple distinct values for the password attribute.
     */
    allowMultiplePasswordValues?: pulumi.Input<boolean>;
    /**
     * Indicates whether users can change their passwords by providing a pre-encoded value.
     */
    allowPreEncodedPasswords?: pulumi.Input<string>;
    /**
     * Indicates whether users can change their own passwords.
     */
    allowUserPasswordChanges?: pulumi.Input<boolean>;
    /**
     * The set of conditions under which a user governed by this Password Policy will be permitted to generate a password reset
     * token via the deliver password reset token extended operation, and to use that token in lieu of the current password via
     * the password modify extended operation.
     */
    allowedPasswordResetTokenUseConditions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the behavior that the server should exhibit if a bind password fails validation by one or more of the
     * configured bind password validators.
     */
    bindPasswordValidationFailureAction?: pulumi.Input<string>;
    /**
     * Specifies the names of the password validators that should be invoked for bind operations.
     */
    bindPasswordValidators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the password storage schemes that are used to encode clear-text passwords for this password
     * policy.
     */
    defaultPasswordStorageSchemes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the password storage schemes that are considered deprecated for this password policy.
     */
    deprecatedPasswordStorageSchemes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this Password Policy
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether to enable debugging for the password policy state.
     */
    enableDebug?: pulumi.Input<boolean>;
    /**
     * Indicates whether the Directory Server allows a user's password to expire even if that user has never seen an expiration
     * warning notification.
     */
    expirePasswordsWithoutWarning?: pulumi.Input<boolean>;
    /**
     * The action that the server should take for authentication attempts that target a user with more than the configured
     * number of outstanding authentication failures.
     */
    failureLockoutAction?: pulumi.Input<string>;
    /**
     * Indicates whether users are forced to change their passwords upon first authenticating to the Directory Server after
     * their account has been created.
     */
    forceChangeOnAdd?: pulumi.Input<boolean>;
    /**
     * Indicates whether users are forced to change their passwords if they are reset by an administrator. If a user's password
     * is changed by any other user, that is considered an administrative password reset.
     */
    forceChangeOnReset?: pulumi.Input<boolean>;
    /**
     * Specifies the number of grace logins that a user is allowed after the account has expired to allow that user to choose a
     * new password.
     */
    graceLoginCount?: pulumi.Input<number>;
    /**
     * Specifies the maximum length of time that an account may remain idle (that is, the associated user does not authenticate
     * to the server) before that user is locked out.
     */
    idleLockoutInterval?: pulumi.Input<string>;
    /**
     * Indicates whether to ignore subsequent authentication failures using the same password as an earlier failed
     * authentication attempt (within the time frame defined by the lockout failure expiration interval). If this option is
     * "true", then multiple failed attempts using the same password will be considered only a single failure. If this option
     * is "false", then any failure will be tracked regardless of whether it used the same password as an earlier attempt.
     */
    ignoreDuplicatePasswordFailures?: pulumi.Input<boolean>;
    /**
     * Specifies the name or OID of the attribute type that is used to hold the IP address of the client from which the user
     * last authenticated.
     */
    lastLoginIpAddressAttribute?: pulumi.Input<string>;
    /**
     * Specifies the name or OID of the attribute type that is used to hold the last login time for users with the associated
     * password policy.
     */
    lastLoginTimeAttribute?: pulumi.Input<string>;
    /**
     * Specifies the format string that is used to generate the last login time value for users with the associated password
     * policy. Last login time values will be written using the UTC (also known as GMT, or Greenwich Mean Time) time zone.
     */
    lastLoginTimeFormat?: pulumi.Input<string>;
    /**
     * Specifies the length of time that an account is locked after too many authentication failures.
     */
    lockoutDuration?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of authentication failures that a user is allowed before the account is locked out.
     */
    lockoutFailureCount?: pulumi.Input<number>;
    /**
     * Specifies the length of time before an authentication failure is no longer counted against a user for the purposes of
     * account lockout.
     */
    lockoutFailureExpirationInterval?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that a user can continue using the same password before it must be changed (that
     * is, the password expiration interval).
     */
    maxPasswordAge?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that users have to change passwords after they have been reset by an administrator
     * before they become locked.
     */
    maxPasswordResetAge?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that a retired password should be considered valid and may be used to authenticate
     * to the server.
     */
    maxRetiredPasswordAge?: pulumi.Input<string>;
    /**
     * The maximum number of failed authentication attempts to include in the recent login history for each account.
     */
    maximumRecentLoginHistoryFailedAuthenticationCount?: pulumi.Input<number>;
    /**
     * The maximum age of failed authentication attempts to include in the recent login history for each account.
     */
    maximumRecentLoginHistoryFailedAuthenticationDuration?: pulumi.Input<string>;
    /**
     * The maximum number of successful authentication attempts to include in the recent login history for each account.
     */
    maximumRecentLoginHistorySuccessfulAuthenticationCount?: pulumi.Input<number>;
    /**
     * The maximum age of successful authentication attempts to include in the recent login history for each account.
     */
    maximumRecentLoginHistorySuccessfulAuthenticationDuration?: pulumi.Input<string>;
    /**
     * Specifies the minimum length of time after a password change before the user is allowed to change the password again.
     */
    minPasswordAge?: pulumi.Input<string>;
    /**
     * Indicates how frequently password validation should be performed during bind operations for each user to whom this
     * password policy is assigned.
     */
    minimumBindPasswordValidationFrequency?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the attribute type used to hold user passwords.
     */
    passwordAttribute?: pulumi.Input<string>;
    /**
     * Indicates whether user password changes must use the password modify extended operation and must include the user's
     * current password before the change is allowed.
     */
    passwordChangeRequiresCurrentPassword?: pulumi.Input<boolean>;
    /**
     * Specifies the maximum length of time before a user's password actually expires that the server begins to include warning
     * notifications in bind responses for that user.
     */
    passwordExpirationWarningInterval?: pulumi.Input<string>;
    /**
     * Specifies the name of the password generator that is used with the associated password policy.
     */
    passwordGenerator?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of former passwords to maintain in the password history.
     */
    passwordHistoryCount?: pulumi.Input<number>;
    /**
     * Specifies the maximum length of time that passwords remain in the password history.
     */
    passwordHistoryDuration?: pulumi.Input<string>;
    /**
     * Specifies the conditions under which the server may retire a user's current password in the course of setting a new
     * password for that user (whether via a modify operation or a password modify extended operation).
     */
    passwordRetirementBehaviors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the password validators that are used with the associated password storage scheme.
     */
    passwordValidators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the format string(s) that might have been used with the last login time at any point in the past for users
     * associated with the password policy.
     */
    previousLastLoginTimeFormats?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. Indicates whether to re-encode passwords on authentication if the
     * configuration for the underlying password storage scheme has changed.
     */
    reEncodePasswordsOnSchemeConfigChange?: pulumi.Input<boolean>;
    /**
     * The behavior that the server will exhibit when multiple similar authentication attempts (with the same values for the
     * successful, authentication-method, client-ip-address, and failure-reason fields) are processed for an account.
     */
    recentLoginHistorySimilarAttemptBehavior?: pulumi.Input<string>;
    /**
     * Specifies the time by which all users with the associated password policy must change their passwords.
     */
    requireChangeByTime?: pulumi.Input<string>;
    /**
     * Indicates whether users with the associated password policy are required to authenticate in a secure manner.
     */
    requireSecureAuthentication?: pulumi.Input<boolean>;
    /**
     * Indicates whether users with the associated password policy are required to change their password in a secure manner
     * that does not expose the credentials.
     */
    requireSecurePasswordChanges?: pulumi.Input<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultPasswordPolicyRequiredAction>[]>;
    /**
     * Indicates whether the server should return the password expiring and password expired response controls (as described in
     * draft-vchu-ldap-pwd-policy).
     */
    returnPasswordExpirationControls?: pulumi.Input<string>;
    /**
     * Indicates whether passwords set by administrators are allowed to bypass the password validation process that is required
     * for user password changes.
     */
    skipValidationForAdministrators?: pulumi.Input<boolean>;
    /**
     * Specifies how the server deals with the inability to update password policy state information during an authentication
     * attempt.
     */
    stateUpdateFailurePolicy?: pulumi.Input<string>;
    /**
     * The type of Password Policy resource. Options are ['password-policy']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultPasswordPolicy resource.
 */
export interface DefaultPasswordPolicyArgs {
    /**
     * Specifies the names of the account status notification handlers that are used with the associated password storage
     * scheme.
     */
    accountStatusNotificationHandlers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether a user whose password is expired is still allowed to change that password using the password modify
     * extended operation.
     */
    allowExpiredPasswordChanges?: pulumi.Input<boolean>;
    /**
     * Indicates whether user entries can have multiple distinct values for the password attribute.
     */
    allowMultiplePasswordValues?: pulumi.Input<boolean>;
    /**
     * Indicates whether users can change their passwords by providing a pre-encoded value.
     */
    allowPreEncodedPasswords?: pulumi.Input<string>;
    /**
     * Indicates whether users can change their own passwords.
     */
    allowUserPasswordChanges?: pulumi.Input<boolean>;
    /**
     * The set of conditions under which a user governed by this Password Policy will be permitted to generate a password reset
     * token via the deliver password reset token extended operation, and to use that token in lieu of the current password via
     * the password modify extended operation.
     */
    allowedPasswordResetTokenUseConditions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the behavior that the server should exhibit if a bind password fails validation by one or more of the
     * configured bind password validators.
     */
    bindPasswordValidationFailureAction?: pulumi.Input<string>;
    /**
     * Specifies the names of the password validators that should be invoked for bind operations.
     */
    bindPasswordValidators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the password storage schemes that are used to encode clear-text passwords for this password
     * policy.
     */
    defaultPasswordStorageSchemes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the password storage schemes that are considered deprecated for this password policy.
     */
    deprecatedPasswordStorageSchemes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this Password Policy
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether to enable debugging for the password policy state.
     */
    enableDebug?: pulumi.Input<boolean>;
    /**
     * Indicates whether the Directory Server allows a user's password to expire even if that user has never seen an expiration
     * warning notification.
     */
    expirePasswordsWithoutWarning?: pulumi.Input<boolean>;
    /**
     * The action that the server should take for authentication attempts that target a user with more than the configured
     * number of outstanding authentication failures.
     */
    failureLockoutAction?: pulumi.Input<string>;
    /**
     * Indicates whether users are forced to change their passwords upon first authenticating to the Directory Server after
     * their account has been created.
     */
    forceChangeOnAdd?: pulumi.Input<boolean>;
    /**
     * Indicates whether users are forced to change their passwords if they are reset by an administrator. If a user's password
     * is changed by any other user, that is considered an administrative password reset.
     */
    forceChangeOnReset?: pulumi.Input<boolean>;
    /**
     * Specifies the number of grace logins that a user is allowed after the account has expired to allow that user to choose a
     * new password.
     */
    graceLoginCount?: pulumi.Input<number>;
    /**
     * Specifies the maximum length of time that an account may remain idle (that is, the associated user does not authenticate
     * to the server) before that user is locked out.
     */
    idleLockoutInterval?: pulumi.Input<string>;
    /**
     * Indicates whether to ignore subsequent authentication failures using the same password as an earlier failed
     * authentication attempt (within the time frame defined by the lockout failure expiration interval). If this option is
     * "true", then multiple failed attempts using the same password will be considered only a single failure. If this option
     * is "false", then any failure will be tracked regardless of whether it used the same password as an earlier attempt.
     */
    ignoreDuplicatePasswordFailures?: pulumi.Input<boolean>;
    /**
     * Specifies the name or OID of the attribute type that is used to hold the IP address of the client from which the user
     * last authenticated.
     */
    lastLoginIpAddressAttribute?: pulumi.Input<string>;
    /**
     * Specifies the name or OID of the attribute type that is used to hold the last login time for users with the associated
     * password policy.
     */
    lastLoginTimeAttribute?: pulumi.Input<string>;
    /**
     * Specifies the format string that is used to generate the last login time value for users with the associated password
     * policy. Last login time values will be written using the UTC (also known as GMT, or Greenwich Mean Time) time zone.
     */
    lastLoginTimeFormat?: pulumi.Input<string>;
    /**
     * Specifies the length of time that an account is locked after too many authentication failures.
     */
    lockoutDuration?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of authentication failures that a user is allowed before the account is locked out.
     */
    lockoutFailureCount?: pulumi.Input<number>;
    /**
     * Specifies the length of time before an authentication failure is no longer counted against a user for the purposes of
     * account lockout.
     */
    lockoutFailureExpirationInterval?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that a user can continue using the same password before it must be changed (that
     * is, the password expiration interval).
     */
    maxPasswordAge?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that users have to change passwords after they have been reset by an administrator
     * before they become locked.
     */
    maxPasswordResetAge?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that a retired password should be considered valid and may be used to authenticate
     * to the server.
     */
    maxRetiredPasswordAge?: pulumi.Input<string>;
    /**
     * The maximum number of failed authentication attempts to include in the recent login history for each account.
     */
    maximumRecentLoginHistoryFailedAuthenticationCount?: pulumi.Input<number>;
    /**
     * The maximum age of failed authentication attempts to include in the recent login history for each account.
     */
    maximumRecentLoginHistoryFailedAuthenticationDuration?: pulumi.Input<string>;
    /**
     * The maximum number of successful authentication attempts to include in the recent login history for each account.
     */
    maximumRecentLoginHistorySuccessfulAuthenticationCount?: pulumi.Input<number>;
    /**
     * The maximum age of successful authentication attempts to include in the recent login history for each account.
     */
    maximumRecentLoginHistorySuccessfulAuthenticationDuration?: pulumi.Input<string>;
    /**
     * Specifies the minimum length of time after a password change before the user is allowed to change the password again.
     */
    minPasswordAge?: pulumi.Input<string>;
    /**
     * Indicates how frequently password validation should be performed during bind operations for each user to whom this
     * password policy is assigned.
     */
    minimumBindPasswordValidationFrequency?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the attribute type used to hold user passwords.
     */
    passwordAttribute?: pulumi.Input<string>;
    /**
     * Indicates whether user password changes must use the password modify extended operation and must include the user's
     * current password before the change is allowed.
     */
    passwordChangeRequiresCurrentPassword?: pulumi.Input<boolean>;
    /**
     * Specifies the maximum length of time before a user's password actually expires that the server begins to include warning
     * notifications in bind responses for that user.
     */
    passwordExpirationWarningInterval?: pulumi.Input<string>;
    /**
     * Specifies the name of the password generator that is used with the associated password policy.
     */
    passwordGenerator?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of former passwords to maintain in the password history.
     */
    passwordHistoryCount?: pulumi.Input<number>;
    /**
     * Specifies the maximum length of time that passwords remain in the password history.
     */
    passwordHistoryDuration?: pulumi.Input<string>;
    /**
     * Specifies the conditions under which the server may retire a user's current password in the course of setting a new
     * password for that user (whether via a modify operation or a password modify extended operation).
     */
    passwordRetirementBehaviors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the password validators that are used with the associated password storage scheme.
     */
    passwordValidators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the format string(s) that might have been used with the last login time at any point in the past for users
     * associated with the password policy.
     */
    previousLastLoginTimeFormats?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. Indicates whether to re-encode passwords on authentication if the
     * configuration for the underlying password storage scheme has changed.
     */
    reEncodePasswordsOnSchemeConfigChange?: pulumi.Input<boolean>;
    /**
     * The behavior that the server will exhibit when multiple similar authentication attempts (with the same values for the
     * successful, authentication-method, client-ip-address, and failure-reason fields) are processed for an account.
     */
    recentLoginHistorySimilarAttemptBehavior?: pulumi.Input<string>;
    /**
     * Specifies the time by which all users with the associated password policy must change their passwords.
     */
    requireChangeByTime?: pulumi.Input<string>;
    /**
     * Indicates whether users with the associated password policy are required to authenticate in a secure manner.
     */
    requireSecureAuthentication?: pulumi.Input<boolean>;
    /**
     * Indicates whether users with the associated password policy are required to change their password in a secure manner
     * that does not expose the credentials.
     */
    requireSecurePasswordChanges?: pulumi.Input<boolean>;
    /**
     * Indicates whether the server should return the password expiring and password expired response controls (as described in
     * draft-vchu-ldap-pwd-policy).
     */
    returnPasswordExpirationControls?: pulumi.Input<string>;
    /**
     * Indicates whether passwords set by administrators are allowed to bypass the password validation process that is required
     * for user password changes.
     */
    skipValidationForAdministrators?: pulumi.Input<boolean>;
    /**
     * Specifies how the server deals with the inability to update password policy state information during an authentication
     * attempt.
     */
    stateUpdateFailurePolicy?: pulumi.Input<string>;
}
