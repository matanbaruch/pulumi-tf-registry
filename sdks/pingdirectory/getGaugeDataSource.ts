// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGaugeDataSource(args: GetGaugeDataSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetGaugeDataSourceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getGaugeDataSource:getGaugeDataSource", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGaugeDataSource.
 */
export interface GetGaugeDataSourceArgs {
    name: string;
}

/**
 * A collection of values returned by getGaugeDataSource.
 */
export interface GetGaugeDataSourceResult {
    readonly additionalText: string;
    readonly dataOrientation: string;
    readonly description: string;
    readonly divideValueBy: number;
    readonly divideValueByAttribute: string;
    readonly divideValueByCounterAttribute: string;
    readonly id: string;
    readonly includeFilter: string;
    readonly minimumUpdateInterval: string;
    readonly monitorAttribute: string;
    readonly monitorObjectclass: string;
    readonly name: string;
    readonly resourceAttribute: string;
    readonly resourceType: string;
    readonly statisticType: string;
    readonly type: string;
}
export function getGaugeDataSourceOutput(args: GetGaugeDataSourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGaugeDataSourceResult> {
    return pulumi.output(args).apply((a: any) => getGaugeDataSource(a, opts))
}

/**
 * A collection of arguments for invoking getGaugeDataSource.
 */
export interface GetGaugeDataSourceOutputArgs {
    name: pulumi.Input<string>;
}
