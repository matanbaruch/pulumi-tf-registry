// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultConsentService extends pulumi.CustomResource {
    /**
     * Get an existing DefaultConsentService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultConsentServiceState, opts?: pulumi.CustomResourceOptions): DefaultConsentService {
        return new DefaultConsentService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultConsentService:DefaultConsentService';

    /**
     * Returns true if the given object is an instance of DefaultConsentService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultConsentService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultConsentService.__pulumiType;
    }

    /**
     * A string or URI that identifies the Consent Service in the context of OAuth2 authorization.
     */
    public readonly audience!: pulumi.Output<string>;
    /**
     * The base DN under which consent records are stored.
     */
    public readonly baseDn!: pulumi.Output<string>;
    /**
     * The DN of an internal service account used by the Consent Service to make internal LDAP requests.
     */
    public readonly bindDn!: pulumi.Output<string>;
    /**
     * If specified, the Identity Mapper(s) that may be used to map consent record subject and actor values to DNs. This is
     * typically only needed if privileged API clients will be used.
     */
    public readonly consentRecordIdentityMappers!: pulumi.Output<string[]>;
    /**
     * Indicates whether the Consent Service is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * The name of a scope that must be present in an access token accepted by the Consent Service if the client is to be
     * considered privileged.
     */
    public readonly privilegedConsentScope!: pulumi.Output<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultConsentServiceRequiredAction[]>;
    /**
     * The maximum number of consent resources that may be returned from a search request.
     */
    public readonly searchSizeLimit!: pulumi.Output<number>;
    /**
     * The set of account DNs that the Consent Service will consider to be privileged.
     */
    public readonly serviceAccountDns!: pulumi.Output<string[]>;
    /**
     * The type of Consent Service resource. Options are ['consent-service']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The name of a scope that must be present in an access token accepted by the Consent Service for unprivileged clients.
     */
    public readonly unprivilegedConsentScope!: pulumi.Output<string>;

    /**
     * Create a DefaultConsentService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultConsentServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultConsentServiceArgs | DefaultConsentServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultConsentServiceState | undefined;
            resourceInputs["audience"] = state ? state.audience : undefined;
            resourceInputs["baseDn"] = state ? state.baseDn : undefined;
            resourceInputs["bindDn"] = state ? state.bindDn : undefined;
            resourceInputs["consentRecordIdentityMappers"] = state ? state.consentRecordIdentityMappers : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["privilegedConsentScope"] = state ? state.privilegedConsentScope : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["searchSizeLimit"] = state ? state.searchSizeLimit : undefined;
            resourceInputs["serviceAccountDns"] = state ? state.serviceAccountDns : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["unprivilegedConsentScope"] = state ? state.unprivilegedConsentScope : undefined;
        } else {
            const args = argsOrState as DefaultConsentServiceArgs | undefined;
            resourceInputs["audience"] = args ? args.audience : undefined;
            resourceInputs["baseDn"] = args ? args.baseDn : undefined;
            resourceInputs["bindDn"] = args ? args.bindDn : undefined;
            resourceInputs["consentRecordIdentityMappers"] = args ? args.consentRecordIdentityMappers : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["privilegedConsentScope"] = args ? args.privilegedConsentScope : undefined;
            resourceInputs["searchSizeLimit"] = args ? args.searchSizeLimit : undefined;
            resourceInputs["serviceAccountDns"] = args ? args.serviceAccountDns : undefined;
            resourceInputs["unprivilegedConsentScope"] = args ? args.unprivilegedConsentScope : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultConsentService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultConsentService resources.
 */
export interface DefaultConsentServiceState {
    /**
     * A string or URI that identifies the Consent Service in the context of OAuth2 authorization.
     */
    audience?: pulumi.Input<string>;
    /**
     * The base DN under which consent records are stored.
     */
    baseDn?: pulumi.Input<string>;
    /**
     * The DN of an internal service account used by the Consent Service to make internal LDAP requests.
     */
    bindDn?: pulumi.Input<string>;
    /**
     * If specified, the Identity Mapper(s) that may be used to map consent record subject and actor values to DNs. This is
     * typically only needed if privileged API clients will be used.
     */
    consentRecordIdentityMappers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the Consent Service is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of a scope that must be present in an access token accepted by the Consent Service if the client is to be
     * considered privileged.
     */
    privilegedConsentScope?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultConsentServiceRequiredAction>[]>;
    /**
     * The maximum number of consent resources that may be returned from a search request.
     */
    searchSizeLimit?: pulumi.Input<number>;
    /**
     * The set of account DNs that the Consent Service will consider to be privileged.
     */
    serviceAccountDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of Consent Service resource. Options are ['consent-service']
     */
    type?: pulumi.Input<string>;
    /**
     * The name of a scope that must be present in an access token accepted by the Consent Service for unprivileged clients.
     */
    unprivilegedConsentScope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultConsentService resource.
 */
export interface DefaultConsentServiceArgs {
    /**
     * A string or URI that identifies the Consent Service in the context of OAuth2 authorization.
     */
    audience?: pulumi.Input<string>;
    /**
     * The base DN under which consent records are stored.
     */
    baseDn?: pulumi.Input<string>;
    /**
     * The DN of an internal service account used by the Consent Service to make internal LDAP requests.
     */
    bindDn?: pulumi.Input<string>;
    /**
     * If specified, the Identity Mapper(s) that may be used to map consent record subject and actor values to DNs. This is
     * typically only needed if privileged API clients will be used.
     */
    consentRecordIdentityMappers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the Consent Service is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of a scope that must be present in an access token accepted by the Consent Service if the client is to be
     * considered privileged.
     */
    privilegedConsentScope?: pulumi.Input<string>;
    /**
     * The maximum number of consent resources that may be returned from a search request.
     */
    searchSizeLimit?: pulumi.Input<number>;
    /**
     * The set of account DNs that the Consent Service will consider to be privileged.
     */
    serviceAccountDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of a scope that must be present in an access token accepted by the Consent Service for unprivileged clients.
     */
    unprivilegedConsentScope?: pulumi.Input<string>;
}
