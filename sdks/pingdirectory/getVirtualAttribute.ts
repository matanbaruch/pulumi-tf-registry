// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getVirtualAttribute(args: GetVirtualAttributeArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualAttributeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getVirtualAttribute:getVirtualAttribute", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualAttribute.
 */
export interface GetVirtualAttributeArgs {
    name: string;
}

/**
 * A collection of values returned by getVirtualAttribute.
 */
export interface GetVirtualAttributeResult {
    readonly allowIndexConflicts: boolean;
    readonly allowRetrievingMembership: boolean;
    readonly attributeType: string;
    readonly baseDns: string[];
    readonly bypassAccessControlForSearches: boolean;
    readonly clientConnectionPolicies: string[];
    readonly conflictBehavior: string;
    readonly description: string;
    readonly directMembershipsOnly: boolean;
    readonly enabled: boolean;
    readonly excludeOperationalAttributes: boolean;
    readonly excludedAttributes: string[];
    readonly extensionArguments: string[];
    readonly extensionClass: string;
    readonly filters: string[];
    readonly groupDns: string[];
    readonly id: string;
    readonly includeMilliseconds: boolean;
    readonly includedGroupFilter: string;
    readonly joinAttributes: string[];
    readonly joinBaseDnType: string;
    readonly joinCustomBaseDn: string;
    readonly joinDnAttribute: string;
    readonly joinFilter: string;
    readonly joinMatchAll: boolean;
    readonly joinScope: string;
    readonly joinSizeLimit: number;
    readonly joinSourceAttribute: string;
    readonly joinTargetAttribute: string;
    readonly multipleVirtualAttributeEvaluationOrderIndex: number;
    readonly multipleVirtualAttributeMergeBehavior: string;
    readonly name: string;
    readonly referenceSearchBaseDns: string[];
    readonly referencedByAttributes: string[];
    readonly requireExplicitRequestByName: boolean;
    readonly returnUtcTime: boolean;
    readonly rewriteSearchFilters: string;
    readonly scriptArguments: string[];
    readonly scriptClass: string;
    readonly sequenceNumberAttribute: string;
    readonly sourceAttribute: string;
    readonly sourceEntryDnAttribute: string;
    readonly sourceEntryDnMap: string;
    readonly type: string;
    readonly valuePatterns: string[];
    readonly values: string[];
}
export function getVirtualAttributeOutput(args: GetVirtualAttributeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualAttributeResult> {
    return pulumi.output(args).apply((a: any) => getVirtualAttribute(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualAttribute.
 */
export interface GetVirtualAttributeOutputArgs {
    name: pulumi.Input<string>;
}
