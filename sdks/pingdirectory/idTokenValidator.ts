// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdTokenValidator extends pulumi.CustomResource {
    /**
     * Get an existing IdTokenValidator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdTokenValidatorState, opts?: pulumi.CustomResourceOptions): IdTokenValidator {
        return new IdTokenValidator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/idTokenValidator:IdTokenValidator';

    /**
     * Returns true if the given object is an instance of IdTokenValidator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdTokenValidator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdTokenValidator.__pulumiType;
    }

    /**
     * Specifies an allow list of JWT signing algorithms that will be accepted by the OpenID Connect ID Token Validator.
     */
    public readonly allowedSigningAlgorithms!: pulumi.Output<string[]>;
    /**
     * Specifies the amount of clock skew that is tolerated by the ID Token Validator when evaluating whether a token is within
     * its valid time interval. The duration specified by this parameter will be subtracted from the token's not-before (nbf)
     * time and added to the token's expiration (exp) time, if present, to allow for any time difference between the local
     * server's clock and the token issuer's clock.
     */
    public readonly clockSkewGracePeriod!: pulumi.Output<string>;
    /**
     * A description for this ID Token Validator
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether this ID Token Validator is enabled for use in the Directory Server.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * When multiple ID Token Validators are defined for a single Directory Server, this property determines the order in which
     * the ID Token Validators are consulted. Values of this property must be unique among all ID Token Validators defined
     * within Directory Server but not necessarily contiguous. ID Token Validators with lower values will be evaluated first to
     * determine if they are able to validate the ID token.
     */
    public readonly evaluationOrderIndex!: pulumi.Output<number>;
    /**
     * Specifies the name of the Identity Mapper that should be used to correlate an ID token subject value to a user entry.
     * The claim name from which to obtain the subject (i.e. the currently logged-in user) may be configured using the
     * subject-claim-name property.
     */
    public readonly identityMapper!: pulumi.Output<string>;
    /**
     * When the `type` attribute is set to: - `ping-one`: Specifies a PingOne base issuer URL. - `openid-connect`: Specifies
     * the OpenID Connect provider's issuer URL.
     */
    public readonly issuerUrl!: pulumi.Output<string>;
    /**
     * How often the ID Token Validator should refresh its cache of JWKS token signing keys.
     */
    public readonly jwksCacheDuration!: pulumi.Output<string>;
    /**
     * The relative path to the JWKS endpoint from which to retrieve one or more public signing keys that may be used to
     * validate the signature of an incoming ID token. This path is relative to the base_url property defined for the
     * validator's OpenID Connect provider. If jwks-endpoint-path is specified, the OpenID Connect ID Token Validator will not
     * consult locally stored certificates for validating token signatures.
     */
    public readonly jwksEndpointPath!: pulumi.Output<string | undefined>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * How often the PingOne ID Token Validator should refresh its stored cache of OpenID Connect-related metadata.
     */
    public readonly openidConnectMetadataCacheDuration!: pulumi.Output<string>;
    /**
     * When the `type` attribute is set to: - `ping-one`: Specifies HTTPS connection settings for the PingOne OpenID Connect
     * provider. - `openid-connect`: Specifies the OpenID Connect provider that issues ID tokens handled by this OpenID Connect
     * ID Token Validator. This property is used in conjunction with the jwks-endpoint-path property.
     */
    public readonly openidConnectProvider!: pulumi.Output<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.IdTokenValidatorRequiredAction[]>;
    /**
     * Specifies the locally stored certificates that may be used to validate the signature of an incoming ID token. This
     * property may be specified if a JWKS endpoint should not be used to retrieve public signing keys.
     */
    public readonly signingCertificates!: pulumi.Output<string[]>;
    /**
     * The name of the token claim that contains the subject; i.e., the authenticated user.
     */
    public readonly subjectClaimName!: pulumi.Output<string>;
    /**
     * The type of ID Token Validator resource. Options are ['ping-one', 'openid-connect']
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a IdTokenValidator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdTokenValidatorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdTokenValidatorArgs | IdTokenValidatorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdTokenValidatorState | undefined;
            resourceInputs["allowedSigningAlgorithms"] = state ? state.allowedSigningAlgorithms : undefined;
            resourceInputs["clockSkewGracePeriod"] = state ? state.clockSkewGracePeriod : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["evaluationOrderIndex"] = state ? state.evaluationOrderIndex : undefined;
            resourceInputs["identityMapper"] = state ? state.identityMapper : undefined;
            resourceInputs["issuerUrl"] = state ? state.issuerUrl : undefined;
            resourceInputs["jwksCacheDuration"] = state ? state.jwksCacheDuration : undefined;
            resourceInputs["jwksEndpointPath"] = state ? state.jwksEndpointPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["openidConnectMetadataCacheDuration"] = state ? state.openidConnectMetadataCacheDuration : undefined;
            resourceInputs["openidConnectProvider"] = state ? state.openidConnectProvider : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["signingCertificates"] = state ? state.signingCertificates : undefined;
            resourceInputs["subjectClaimName"] = state ? state.subjectClaimName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as IdTokenValidatorArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.evaluationOrderIndex === undefined) && !opts.urn) {
                throw new Error("Missing required property 'evaluationOrderIndex'");
            }
            if ((!args || args.identityMapper === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityMapper'");
            }
            if ((!args || args.issuerUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuerUrl'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allowedSigningAlgorithms"] = args ? args.allowedSigningAlgorithms : undefined;
            resourceInputs["clockSkewGracePeriod"] = args ? args.clockSkewGracePeriod : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["evaluationOrderIndex"] = args ? args.evaluationOrderIndex : undefined;
            resourceInputs["identityMapper"] = args ? args.identityMapper : undefined;
            resourceInputs["issuerUrl"] = args ? args.issuerUrl : undefined;
            resourceInputs["jwksCacheDuration"] = args ? args.jwksCacheDuration : undefined;
            resourceInputs["jwksEndpointPath"] = args ? args.jwksEndpointPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openidConnectMetadataCacheDuration"] = args ? args.openidConnectMetadataCacheDuration : undefined;
            resourceInputs["openidConnectProvider"] = args ? args.openidConnectProvider : undefined;
            resourceInputs["signingCertificates"] = args ? args.signingCertificates : undefined;
            resourceInputs["subjectClaimName"] = args ? args.subjectClaimName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdTokenValidator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdTokenValidator resources.
 */
export interface IdTokenValidatorState {
    /**
     * Specifies an allow list of JWT signing algorithms that will be accepted by the OpenID Connect ID Token Validator.
     */
    allowedSigningAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the amount of clock skew that is tolerated by the ID Token Validator when evaluating whether a token is within
     * its valid time interval. The duration specified by this parameter will be subtracted from the token's not-before (nbf)
     * time and added to the token's expiration (exp) time, if present, to allow for any time difference between the local
     * server's clock and the token issuer's clock.
     */
    clockSkewGracePeriod?: pulumi.Input<string>;
    /**
     * A description for this ID Token Validator
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this ID Token Validator is enabled for use in the Directory Server.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * When multiple ID Token Validators are defined for a single Directory Server, this property determines the order in which
     * the ID Token Validators are consulted. Values of this property must be unique among all ID Token Validators defined
     * within Directory Server but not necessarily contiguous. ID Token Validators with lower values will be evaluated first to
     * determine if they are able to validate the ID token.
     */
    evaluationOrderIndex?: pulumi.Input<number>;
    /**
     * Specifies the name of the Identity Mapper that should be used to correlate an ID token subject value to a user entry.
     * The claim name from which to obtain the subject (i.e. the currently logged-in user) may be configured using the
     * subject-claim-name property.
     */
    identityMapper?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `ping-one`: Specifies a PingOne base issuer URL. - `openid-connect`: Specifies
     * the OpenID Connect provider's issuer URL.
     */
    issuerUrl?: pulumi.Input<string>;
    /**
     * How often the ID Token Validator should refresh its cache of JWKS token signing keys.
     */
    jwksCacheDuration?: pulumi.Input<string>;
    /**
     * The relative path to the JWKS endpoint from which to retrieve one or more public signing keys that may be used to
     * validate the signature of an incoming ID token. This path is relative to the base_url property defined for the
     * validator's OpenID Connect provider. If jwks-endpoint-path is specified, the OpenID Connect ID Token Validator will not
     * consult locally stored certificates for validating token signatures.
     */
    jwksEndpointPath?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How often the PingOne ID Token Validator should refresh its stored cache of OpenID Connect-related metadata.
     */
    openidConnectMetadataCacheDuration?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `ping-one`: Specifies HTTPS connection settings for the PingOne OpenID Connect
     * provider. - `openid-connect`: Specifies the OpenID Connect provider that issues ID tokens handled by this OpenID Connect
     * ID Token Validator. This property is used in conjunction with the jwks-endpoint-path property.
     */
    openidConnectProvider?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.IdTokenValidatorRequiredAction>[]>;
    /**
     * Specifies the locally stored certificates that may be used to validate the signature of an incoming ID token. This
     * property may be specified if a JWKS endpoint should not be used to retrieve public signing keys.
     */
    signingCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the token claim that contains the subject; i.e., the authenticated user.
     */
    subjectClaimName?: pulumi.Input<string>;
    /**
     * The type of ID Token Validator resource. Options are ['ping-one', 'openid-connect']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdTokenValidator resource.
 */
export interface IdTokenValidatorArgs {
    /**
     * Specifies an allow list of JWT signing algorithms that will be accepted by the OpenID Connect ID Token Validator.
     */
    allowedSigningAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the amount of clock skew that is tolerated by the ID Token Validator when evaluating whether a token is within
     * its valid time interval. The duration specified by this parameter will be subtracted from the token's not-before (nbf)
     * time and added to the token's expiration (exp) time, if present, to allow for any time difference between the local
     * server's clock and the token issuer's clock.
     */
    clockSkewGracePeriod?: pulumi.Input<string>;
    /**
     * A description for this ID Token Validator
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this ID Token Validator is enabled for use in the Directory Server.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * When multiple ID Token Validators are defined for a single Directory Server, this property determines the order in which
     * the ID Token Validators are consulted. Values of this property must be unique among all ID Token Validators defined
     * within Directory Server but not necessarily contiguous. ID Token Validators with lower values will be evaluated first to
     * determine if they are able to validate the ID token.
     */
    evaluationOrderIndex: pulumi.Input<number>;
    /**
     * Specifies the name of the Identity Mapper that should be used to correlate an ID token subject value to a user entry.
     * The claim name from which to obtain the subject (i.e. the currently logged-in user) may be configured using the
     * subject-claim-name property.
     */
    identityMapper: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `ping-one`: Specifies a PingOne base issuer URL. - `openid-connect`: Specifies
     * the OpenID Connect provider's issuer URL.
     */
    issuerUrl: pulumi.Input<string>;
    /**
     * How often the ID Token Validator should refresh its cache of JWKS token signing keys.
     */
    jwksCacheDuration?: pulumi.Input<string>;
    /**
     * The relative path to the JWKS endpoint from which to retrieve one or more public signing keys that may be used to
     * validate the signature of an incoming ID token. This path is relative to the base_url property defined for the
     * validator's OpenID Connect provider. If jwks-endpoint-path is specified, the OpenID Connect ID Token Validator will not
     * consult locally stored certificates for validating token signatures.
     */
    jwksEndpointPath?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * How often the PingOne ID Token Validator should refresh its stored cache of OpenID Connect-related metadata.
     */
    openidConnectMetadataCacheDuration?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `ping-one`: Specifies HTTPS connection settings for the PingOne OpenID Connect
     * provider. - `openid-connect`: Specifies the OpenID Connect provider that issues ID tokens handled by this OpenID Connect
     * ID Token Validator. This property is used in conjunction with the jwks-endpoint-path property.
     */
    openidConnectProvider?: pulumi.Input<string>;
    /**
     * Specifies the locally stored certificates that may be used to validate the signature of an incoming ID token. This
     * property may be specified if a JWKS endpoint should not be used to retrieve public signing keys.
     */
    signingCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the token claim that contains the subject; i.e., the authenticated user.
     */
    subjectClaimName?: pulumi.Input<string>;
    /**
     * The type of ID Token Validator resource. Options are ['ping-one', 'openid-connect']
     */
    type: pulumi.Input<string>;
}
