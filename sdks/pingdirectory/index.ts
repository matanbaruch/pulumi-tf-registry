// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessTokenValidatorArgs, AccessTokenValidatorState } from "./accessTokenValidator";
export type AccessTokenValidator = import("./accessTokenValidator").AccessTokenValidator;
export const AccessTokenValidator: typeof import("./accessTokenValidator").AccessTokenValidator = null as any;
utilities.lazyLoad(exports, ["AccessTokenValidator"], () => require("./accessTokenValidator"));

export { AccountStatusNotificationHandlerArgs, AccountStatusNotificationHandlerState } from "./accountStatusNotificationHandler";
export type AccountStatusNotificationHandler = import("./accountStatusNotificationHandler").AccountStatusNotificationHandler;
export const AccountStatusNotificationHandler: typeof import("./accountStatusNotificationHandler").AccountStatusNotificationHandler = null as any;
utilities.lazyLoad(exports, ["AccountStatusNotificationHandler"], () => require("./accountStatusNotificationHandler"));

export { AlertHandlerArgs, AlertHandlerState } from "./alertHandler";
export type AlertHandler = import("./alertHandler").AlertHandler;
export const AlertHandler: typeof import("./alertHandler").AlertHandler = null as any;
utilities.lazyLoad(exports, ["AlertHandler"], () => require("./alertHandler"));

export { AzureAuthenticationMethodArgs, AzureAuthenticationMethodState } from "./azureAuthenticationMethod";
export type AzureAuthenticationMethod = import("./azureAuthenticationMethod").AzureAuthenticationMethod;
export const AzureAuthenticationMethod: typeof import("./azureAuthenticationMethod").AzureAuthenticationMethod = null as any;
utilities.lazyLoad(exports, ["AzureAuthenticationMethod"], () => require("./azureAuthenticationMethod"));

export { BackendArgs, BackendState } from "./backend";
export type Backend = import("./backend").Backend;
export const Backend: typeof import("./backend").Backend = null as any;
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));

export { CertificateMapperArgs, CertificateMapperState } from "./certificateMapper";
export type CertificateMapper = import("./certificateMapper").CertificateMapper;
export const CertificateMapper: typeof import("./certificateMapper").CertificateMapper = null as any;
utilities.lazyLoad(exports, ["CertificateMapper"], () => require("./certificateMapper"));

export { ChangeSubscriptionArgs, ChangeSubscriptionState } from "./changeSubscription";
export type ChangeSubscription = import("./changeSubscription").ChangeSubscription;
export const ChangeSubscription: typeof import("./changeSubscription").ChangeSubscription = null as any;
utilities.lazyLoad(exports, ["ChangeSubscription"], () => require("./changeSubscription"));

export { ChangeSubscriptionHandlerArgs, ChangeSubscriptionHandlerState } from "./changeSubscriptionHandler";
export type ChangeSubscriptionHandler = import("./changeSubscriptionHandler").ChangeSubscriptionHandler;
export const ChangeSubscriptionHandler: typeof import("./changeSubscriptionHandler").ChangeSubscriptionHandler = null as any;
utilities.lazyLoad(exports, ["ChangeSubscriptionHandler"], () => require("./changeSubscriptionHandler"));

export { CipherStreamProviderArgs, CipherStreamProviderState } from "./cipherStreamProvider";
export type CipherStreamProvider = import("./cipherStreamProvider").CipherStreamProvider;
export const CipherStreamProvider: typeof import("./cipherStreamProvider").CipherStreamProvider = null as any;
utilities.lazyLoad(exports, ["CipherStreamProvider"], () => require("./cipherStreamProvider"));

export { ClientConnectionPolicyArgs, ClientConnectionPolicyState } from "./clientConnectionPolicy";
export type ClientConnectionPolicy = import("./clientConnectionPolicy").ClientConnectionPolicy;
export const ClientConnectionPolicy: typeof import("./clientConnectionPolicy").ClientConnectionPolicy = null as any;
utilities.lazyLoad(exports, ["ClientConnectionPolicy"], () => require("./clientConnectionPolicy"));

export { ConjurAuthenticationMethodArgs, ConjurAuthenticationMethodState } from "./conjurAuthenticationMethod";
export type ConjurAuthenticationMethod = import("./conjurAuthenticationMethod").ConjurAuthenticationMethod;
export const ConjurAuthenticationMethod: typeof import("./conjurAuthenticationMethod").ConjurAuthenticationMethod = null as any;
utilities.lazyLoad(exports, ["ConjurAuthenticationMethod"], () => require("./conjurAuthenticationMethod"));

export { ConnectionCriteriaArgs, ConnectionCriteriaState } from "./connectionCriteria";
export type ConnectionCriteria = import("./connectionCriteria").ConnectionCriteria;
export const ConnectionCriteria: typeof import("./connectionCriteria").ConnectionCriteria = null as any;
utilities.lazyLoad(exports, ["ConnectionCriteria"], () => require("./connectionCriteria"));

export { ConnectionHandlerArgs, ConnectionHandlerState } from "./connectionHandler";
export type ConnectionHandler = import("./connectionHandler").ConnectionHandler;
export const ConnectionHandler: typeof import("./connectionHandler").ConnectionHandler = null as any;
utilities.lazyLoad(exports, ["ConnectionHandler"], () => require("./connectionHandler"));

export { ConsentDefinitionArgs, ConsentDefinitionState } from "./consentDefinition";
export type ConsentDefinition = import("./consentDefinition").ConsentDefinition;
export const ConsentDefinition: typeof import("./consentDefinition").ConsentDefinition = null as any;
utilities.lazyLoad(exports, ["ConsentDefinition"], () => require("./consentDefinition"));

export { ConsentDefinitionLocalizationArgs, ConsentDefinitionLocalizationState } from "./consentDefinitionLocalization";
export type ConsentDefinitionLocalization = import("./consentDefinitionLocalization").ConsentDefinitionLocalization;
export const ConsentDefinitionLocalization: typeof import("./consentDefinitionLocalization").ConsentDefinitionLocalization = null as any;
utilities.lazyLoad(exports, ["ConsentDefinitionLocalization"], () => require("./consentDefinitionLocalization"));

export { ConstructedAttributeArgs, ConstructedAttributeState } from "./constructedAttribute";
export type ConstructedAttribute = import("./constructedAttribute").ConstructedAttribute;
export const ConstructedAttribute: typeof import("./constructedAttribute").ConstructedAttribute = null as any;
utilities.lazyLoad(exports, ["ConstructedAttribute"], () => require("./constructedAttribute"));

export { CorrelatedLdapDataViewArgs, CorrelatedLdapDataViewState } from "./correlatedLdapDataView";
export type CorrelatedLdapDataView = import("./correlatedLdapDataView").CorrelatedLdapDataView;
export const CorrelatedLdapDataView: typeof import("./correlatedLdapDataView").CorrelatedLdapDataView = null as any;
utilities.lazyLoad(exports, ["CorrelatedLdapDataView"], () => require("./correlatedLdapDataView"));

export { CustomLoggedStatsArgs, CustomLoggedStatsState } from "./customLoggedStats";
export type CustomLoggedStats = import("./customLoggedStats").CustomLoggedStats;
export const CustomLoggedStats: typeof import("./customLoggedStats").CustomLoggedStats = null as any;
utilities.lazyLoad(exports, ["CustomLoggedStats"], () => require("./customLoggedStats"));

export { DataSecurityAuditorArgs, DataSecurityAuditorState } from "./dataSecurityAuditor";
export type DataSecurityAuditor = import("./dataSecurityAuditor").DataSecurityAuditor;
export const DataSecurityAuditor: typeof import("./dataSecurityAuditor").DataSecurityAuditor = null as any;
utilities.lazyLoad(exports, ["DataSecurityAuditor"], () => require("./dataSecurityAuditor"));

export { DebugTargetArgs, DebugTargetState } from "./debugTarget";
export type DebugTarget = import("./debugTarget").DebugTarget;
export const DebugTarget: typeof import("./debugTarget").DebugTarget = null as any;
utilities.lazyLoad(exports, ["DebugTarget"], () => require("./debugTarget"));

export { DefaultAccessControlHandlerArgs, DefaultAccessControlHandlerState } from "./defaultAccessControlHandler";
export type DefaultAccessControlHandler = import("./defaultAccessControlHandler").DefaultAccessControlHandler;
export const DefaultAccessControlHandler: typeof import("./defaultAccessControlHandler").DefaultAccessControlHandler = null as any;
utilities.lazyLoad(exports, ["DefaultAccessControlHandler"], () => require("./defaultAccessControlHandler"));

export { DefaultAccessTokenValidatorArgs, DefaultAccessTokenValidatorState } from "./defaultAccessTokenValidator";
export type DefaultAccessTokenValidator = import("./defaultAccessTokenValidator").DefaultAccessTokenValidator;
export const DefaultAccessTokenValidator: typeof import("./defaultAccessTokenValidator").DefaultAccessTokenValidator = null as any;
utilities.lazyLoad(exports, ["DefaultAccessTokenValidator"], () => require("./defaultAccessTokenValidator"));

export { DefaultAccountStatusNotificationHandlerArgs, DefaultAccountStatusNotificationHandlerState } from "./defaultAccountStatusNotificationHandler";
export type DefaultAccountStatusNotificationHandler = import("./defaultAccountStatusNotificationHandler").DefaultAccountStatusNotificationHandler;
export const DefaultAccountStatusNotificationHandler: typeof import("./defaultAccountStatusNotificationHandler").DefaultAccountStatusNotificationHandler = null as any;
utilities.lazyLoad(exports, ["DefaultAccountStatusNotificationHandler"], () => require("./defaultAccountStatusNotificationHandler"));

export { DefaultAlarmManagerArgs, DefaultAlarmManagerState } from "./defaultAlarmManager";
export type DefaultAlarmManager = import("./defaultAlarmManager").DefaultAlarmManager;
export const DefaultAlarmManager: typeof import("./defaultAlarmManager").DefaultAlarmManager = null as any;
utilities.lazyLoad(exports, ["DefaultAlarmManager"], () => require("./defaultAlarmManager"));

export { DefaultAlertHandlerArgs, DefaultAlertHandlerState } from "./defaultAlertHandler";
export type DefaultAlertHandler = import("./defaultAlertHandler").DefaultAlertHandler;
export const DefaultAlertHandler: typeof import("./defaultAlertHandler").DefaultAlertHandler = null as any;
utilities.lazyLoad(exports, ["DefaultAlertHandler"], () => require("./defaultAlertHandler"));

export { DefaultAttributeSyntaxArgs, DefaultAttributeSyntaxState } from "./defaultAttributeSyntax";
export type DefaultAttributeSyntax = import("./defaultAttributeSyntax").DefaultAttributeSyntax;
export const DefaultAttributeSyntax: typeof import("./defaultAttributeSyntax").DefaultAttributeSyntax = null as any;
utilities.lazyLoad(exports, ["DefaultAttributeSyntax"], () => require("./defaultAttributeSyntax"));

export { DefaultAzureAuthenticationMethodArgs, DefaultAzureAuthenticationMethodState } from "./defaultAzureAuthenticationMethod";
export type DefaultAzureAuthenticationMethod = import("./defaultAzureAuthenticationMethod").DefaultAzureAuthenticationMethod;
export const DefaultAzureAuthenticationMethod: typeof import("./defaultAzureAuthenticationMethod").DefaultAzureAuthenticationMethod = null as any;
utilities.lazyLoad(exports, ["DefaultAzureAuthenticationMethod"], () => require("./defaultAzureAuthenticationMethod"));

export { DefaultBackendArgs, DefaultBackendState } from "./defaultBackend";
export type DefaultBackend = import("./defaultBackend").DefaultBackend;
export const DefaultBackend: typeof import("./defaultBackend").DefaultBackend = null as any;
utilities.lazyLoad(exports, ["DefaultBackend"], () => require("./defaultBackend"));

export { DefaultCertificateMapperArgs, DefaultCertificateMapperState } from "./defaultCertificateMapper";
export type DefaultCertificateMapper = import("./defaultCertificateMapper").DefaultCertificateMapper;
export const DefaultCertificateMapper: typeof import("./defaultCertificateMapper").DefaultCertificateMapper = null as any;
utilities.lazyLoad(exports, ["DefaultCertificateMapper"], () => require("./defaultCertificateMapper"));

export { DefaultChangeSubscriptionArgs, DefaultChangeSubscriptionState } from "./defaultChangeSubscription";
export type DefaultChangeSubscription = import("./defaultChangeSubscription").DefaultChangeSubscription;
export const DefaultChangeSubscription: typeof import("./defaultChangeSubscription").DefaultChangeSubscription = null as any;
utilities.lazyLoad(exports, ["DefaultChangeSubscription"], () => require("./defaultChangeSubscription"));

export { DefaultChangeSubscriptionHandlerArgs, DefaultChangeSubscriptionHandlerState } from "./defaultChangeSubscriptionHandler";
export type DefaultChangeSubscriptionHandler = import("./defaultChangeSubscriptionHandler").DefaultChangeSubscriptionHandler;
export const DefaultChangeSubscriptionHandler: typeof import("./defaultChangeSubscriptionHandler").DefaultChangeSubscriptionHandler = null as any;
utilities.lazyLoad(exports, ["DefaultChangeSubscriptionHandler"], () => require("./defaultChangeSubscriptionHandler"));

export { DefaultCipherSecretKeyArgs, DefaultCipherSecretKeyState } from "./defaultCipherSecretKey";
export type DefaultCipherSecretKey = import("./defaultCipherSecretKey").DefaultCipherSecretKey;
export const DefaultCipherSecretKey: typeof import("./defaultCipherSecretKey").DefaultCipherSecretKey = null as any;
utilities.lazyLoad(exports, ["DefaultCipherSecretKey"], () => require("./defaultCipherSecretKey"));

export { DefaultCipherStreamProviderArgs, DefaultCipherStreamProviderState } from "./defaultCipherStreamProvider";
export type DefaultCipherStreamProvider = import("./defaultCipherStreamProvider").DefaultCipherStreamProvider;
export const DefaultCipherStreamProvider: typeof import("./defaultCipherStreamProvider").DefaultCipherStreamProvider = null as any;
utilities.lazyLoad(exports, ["DefaultCipherStreamProvider"], () => require("./defaultCipherStreamProvider"));

export { DefaultClientConnectionPolicyArgs, DefaultClientConnectionPolicyState } from "./defaultClientConnectionPolicy";
export type DefaultClientConnectionPolicy = import("./defaultClientConnectionPolicy").DefaultClientConnectionPolicy;
export const DefaultClientConnectionPolicy: typeof import("./defaultClientConnectionPolicy").DefaultClientConnectionPolicy = null as any;
utilities.lazyLoad(exports, ["DefaultClientConnectionPolicy"], () => require("./defaultClientConnectionPolicy"));

export { DefaultConjurAuthenticationMethodArgs, DefaultConjurAuthenticationMethodState } from "./defaultConjurAuthenticationMethod";
export type DefaultConjurAuthenticationMethod = import("./defaultConjurAuthenticationMethod").DefaultConjurAuthenticationMethod;
export const DefaultConjurAuthenticationMethod: typeof import("./defaultConjurAuthenticationMethod").DefaultConjurAuthenticationMethod = null as any;
utilities.lazyLoad(exports, ["DefaultConjurAuthenticationMethod"], () => require("./defaultConjurAuthenticationMethod"));

export { DefaultConnectionCriteriaArgs, DefaultConnectionCriteriaState } from "./defaultConnectionCriteria";
export type DefaultConnectionCriteria = import("./defaultConnectionCriteria").DefaultConnectionCriteria;
export const DefaultConnectionCriteria: typeof import("./defaultConnectionCriteria").DefaultConnectionCriteria = null as any;
utilities.lazyLoad(exports, ["DefaultConnectionCriteria"], () => require("./defaultConnectionCriteria"));

export { DefaultConnectionHandlerArgs, DefaultConnectionHandlerState } from "./defaultConnectionHandler";
export type DefaultConnectionHandler = import("./defaultConnectionHandler").DefaultConnectionHandler;
export const DefaultConnectionHandler: typeof import("./defaultConnectionHandler").DefaultConnectionHandler = null as any;
utilities.lazyLoad(exports, ["DefaultConnectionHandler"], () => require("./defaultConnectionHandler"));

export { DefaultConsentDefinitionArgs, DefaultConsentDefinitionState } from "./defaultConsentDefinition";
export type DefaultConsentDefinition = import("./defaultConsentDefinition").DefaultConsentDefinition;
export const DefaultConsentDefinition: typeof import("./defaultConsentDefinition").DefaultConsentDefinition = null as any;
utilities.lazyLoad(exports, ["DefaultConsentDefinition"], () => require("./defaultConsentDefinition"));

export { DefaultConsentDefinitionLocalizationArgs, DefaultConsentDefinitionLocalizationState } from "./defaultConsentDefinitionLocalization";
export type DefaultConsentDefinitionLocalization = import("./defaultConsentDefinitionLocalization").DefaultConsentDefinitionLocalization;
export const DefaultConsentDefinitionLocalization: typeof import("./defaultConsentDefinitionLocalization").DefaultConsentDefinitionLocalization = null as any;
utilities.lazyLoad(exports, ["DefaultConsentDefinitionLocalization"], () => require("./defaultConsentDefinitionLocalization"));

export { DefaultConsentServiceArgs, DefaultConsentServiceState } from "./defaultConsentService";
export type DefaultConsentService = import("./defaultConsentService").DefaultConsentService;
export const DefaultConsentService: typeof import("./defaultConsentService").DefaultConsentService = null as any;
utilities.lazyLoad(exports, ["DefaultConsentService"], () => require("./defaultConsentService"));

export { DefaultConstructedAttributeArgs, DefaultConstructedAttributeState } from "./defaultConstructedAttribute";
export type DefaultConstructedAttribute = import("./defaultConstructedAttribute").DefaultConstructedAttribute;
export const DefaultConstructedAttribute: typeof import("./defaultConstructedAttribute").DefaultConstructedAttribute = null as any;
utilities.lazyLoad(exports, ["DefaultConstructedAttribute"], () => require("./defaultConstructedAttribute"));

export { DefaultCorrelatedLdapDataViewArgs, DefaultCorrelatedLdapDataViewState } from "./defaultCorrelatedLdapDataView";
export type DefaultCorrelatedLdapDataView = import("./defaultCorrelatedLdapDataView").DefaultCorrelatedLdapDataView;
export const DefaultCorrelatedLdapDataView: typeof import("./defaultCorrelatedLdapDataView").DefaultCorrelatedLdapDataView = null as any;
utilities.lazyLoad(exports, ["DefaultCorrelatedLdapDataView"], () => require("./defaultCorrelatedLdapDataView"));

export { DefaultCryptoManagerArgs, DefaultCryptoManagerState } from "./defaultCryptoManager";
export type DefaultCryptoManager = import("./defaultCryptoManager").DefaultCryptoManager;
export const DefaultCryptoManager: typeof import("./defaultCryptoManager").DefaultCryptoManager = null as any;
utilities.lazyLoad(exports, ["DefaultCryptoManager"], () => require("./defaultCryptoManager"));

export { DefaultCustomLoggedStatsArgs, DefaultCustomLoggedStatsState } from "./defaultCustomLoggedStats";
export type DefaultCustomLoggedStats = import("./defaultCustomLoggedStats").DefaultCustomLoggedStats;
export const DefaultCustomLoggedStats: typeof import("./defaultCustomLoggedStats").DefaultCustomLoggedStats = null as any;
utilities.lazyLoad(exports, ["DefaultCustomLoggedStats"], () => require("./defaultCustomLoggedStats"));

export { DefaultDataSecurityAuditorArgs, DefaultDataSecurityAuditorState } from "./defaultDataSecurityAuditor";
export type DefaultDataSecurityAuditor = import("./defaultDataSecurityAuditor").DefaultDataSecurityAuditor;
export const DefaultDataSecurityAuditor: typeof import("./defaultDataSecurityAuditor").DefaultDataSecurityAuditor = null as any;
utilities.lazyLoad(exports, ["DefaultDataSecurityAuditor"], () => require("./defaultDataSecurityAuditor"));

export { DefaultDebugTargetArgs, DefaultDebugTargetState } from "./defaultDebugTarget";
export type DefaultDebugTarget = import("./defaultDebugTarget").DefaultDebugTarget;
export const DefaultDebugTarget: typeof import("./defaultDebugTarget").DefaultDebugTarget = null as any;
utilities.lazyLoad(exports, ["DefaultDebugTarget"], () => require("./defaultDebugTarget"));

export { DefaultDelegatedAdminAttributeArgs, DefaultDelegatedAdminAttributeState } from "./defaultDelegatedAdminAttribute";
export type DefaultDelegatedAdminAttribute = import("./defaultDelegatedAdminAttribute").DefaultDelegatedAdminAttribute;
export const DefaultDelegatedAdminAttribute: typeof import("./defaultDelegatedAdminAttribute").DefaultDelegatedAdminAttribute = null as any;
utilities.lazyLoad(exports, ["DefaultDelegatedAdminAttribute"], () => require("./defaultDelegatedAdminAttribute"));

export { DefaultDelegatedAdminAttributeCategoryArgs, DefaultDelegatedAdminAttributeCategoryState } from "./defaultDelegatedAdminAttributeCategory";
export type DefaultDelegatedAdminAttributeCategory = import("./defaultDelegatedAdminAttributeCategory").DefaultDelegatedAdminAttributeCategory;
export const DefaultDelegatedAdminAttributeCategory: typeof import("./defaultDelegatedAdminAttributeCategory").DefaultDelegatedAdminAttributeCategory = null as any;
utilities.lazyLoad(exports, ["DefaultDelegatedAdminAttributeCategory"], () => require("./defaultDelegatedAdminAttributeCategory"));

export { DefaultDelegatedAdminCorrelatedRestResourceArgs, DefaultDelegatedAdminCorrelatedRestResourceState } from "./defaultDelegatedAdminCorrelatedRestResource";
export type DefaultDelegatedAdminCorrelatedRestResource = import("./defaultDelegatedAdminCorrelatedRestResource").DefaultDelegatedAdminCorrelatedRestResource;
export const DefaultDelegatedAdminCorrelatedRestResource: typeof import("./defaultDelegatedAdminCorrelatedRestResource").DefaultDelegatedAdminCorrelatedRestResource = null as any;
utilities.lazyLoad(exports, ["DefaultDelegatedAdminCorrelatedRestResource"], () => require("./defaultDelegatedAdminCorrelatedRestResource"));

export { DefaultDelegatedAdminResourceRightsArgs, DefaultDelegatedAdminResourceRightsState } from "./defaultDelegatedAdminResourceRights";
export type DefaultDelegatedAdminResourceRights = import("./defaultDelegatedAdminResourceRights").DefaultDelegatedAdminResourceRights;
export const DefaultDelegatedAdminResourceRights: typeof import("./defaultDelegatedAdminResourceRights").DefaultDelegatedAdminResourceRights = null as any;
utilities.lazyLoad(exports, ["DefaultDelegatedAdminResourceRights"], () => require("./defaultDelegatedAdminResourceRights"));

export { DefaultDelegatedAdminRightsArgs, DefaultDelegatedAdminRightsState } from "./defaultDelegatedAdminRights";
export type DefaultDelegatedAdminRights = import("./defaultDelegatedAdminRights").DefaultDelegatedAdminRights;
export const DefaultDelegatedAdminRights: typeof import("./defaultDelegatedAdminRights").DefaultDelegatedAdminRights = null as any;
utilities.lazyLoad(exports, ["DefaultDelegatedAdminRights"], () => require("./defaultDelegatedAdminRights"));

export { DefaultDnMapArgs, DefaultDnMapState } from "./defaultDnMap";
export type DefaultDnMap = import("./defaultDnMap").DefaultDnMap;
export const DefaultDnMap: typeof import("./defaultDnMap").DefaultDnMap = null as any;
utilities.lazyLoad(exports, ["DefaultDnMap"], () => require("./defaultDnMap"));

export { DefaultEntryCacheArgs, DefaultEntryCacheState } from "./defaultEntryCache";
export type DefaultEntryCache = import("./defaultEntryCache").DefaultEntryCache;
export const DefaultEntryCache: typeof import("./defaultEntryCache").DefaultEntryCache = null as any;
utilities.lazyLoad(exports, ["DefaultEntryCache"], () => require("./defaultEntryCache"));

export { DefaultExtendedOperationHandlerArgs, DefaultExtendedOperationHandlerState } from "./defaultExtendedOperationHandler";
export type DefaultExtendedOperationHandler = import("./defaultExtendedOperationHandler").DefaultExtendedOperationHandler;
export const DefaultExtendedOperationHandler: typeof import("./defaultExtendedOperationHandler").DefaultExtendedOperationHandler = null as any;
utilities.lazyLoad(exports, ["DefaultExtendedOperationHandler"], () => require("./defaultExtendedOperationHandler"));

export { DefaultExternalServerArgs, DefaultExternalServerState } from "./defaultExternalServer";
export type DefaultExternalServer = import("./defaultExternalServer").DefaultExternalServer;
export const DefaultExternalServer: typeof import("./defaultExternalServer").DefaultExternalServer = null as any;
utilities.lazyLoad(exports, ["DefaultExternalServer"], () => require("./defaultExternalServer"));

export { DefaultFailureLockoutActionArgs, DefaultFailureLockoutActionState } from "./defaultFailureLockoutAction";
export type DefaultFailureLockoutAction = import("./defaultFailureLockoutAction").DefaultFailureLockoutAction;
export const DefaultFailureLockoutAction: typeof import("./defaultFailureLockoutAction").DefaultFailureLockoutAction = null as any;
utilities.lazyLoad(exports, ["DefaultFailureLockoutAction"], () => require("./defaultFailureLockoutAction"));

export { DefaultGaugeArgs, DefaultGaugeState } from "./defaultGauge";
export type DefaultGauge = import("./defaultGauge").DefaultGauge;
export const DefaultGauge: typeof import("./defaultGauge").DefaultGauge = null as any;
utilities.lazyLoad(exports, ["DefaultGauge"], () => require("./defaultGauge"));

export { DefaultGaugeDataSourceArgs, DefaultGaugeDataSourceState } from "./defaultGaugeDataSource";
export type DefaultGaugeDataSource = import("./defaultGaugeDataSource").DefaultGaugeDataSource;
export const DefaultGaugeDataSource: typeof import("./defaultGaugeDataSource").DefaultGaugeDataSource = null as any;
utilities.lazyLoad(exports, ["DefaultGaugeDataSource"], () => require("./defaultGaugeDataSource"));

export { DefaultGlobalConfigurationArgs, DefaultGlobalConfigurationState } from "./defaultGlobalConfiguration";
export type DefaultGlobalConfiguration = import("./defaultGlobalConfiguration").DefaultGlobalConfiguration;
export const DefaultGlobalConfiguration: typeof import("./defaultGlobalConfiguration").DefaultGlobalConfiguration = null as any;
utilities.lazyLoad(exports, ["DefaultGlobalConfiguration"], () => require("./defaultGlobalConfiguration"));

export { DefaultGroupImplementationArgs, DefaultGroupImplementationState } from "./defaultGroupImplementation";
export type DefaultGroupImplementation = import("./defaultGroupImplementation").DefaultGroupImplementation;
export const DefaultGroupImplementation: typeof import("./defaultGroupImplementation").DefaultGroupImplementation = null as any;
utilities.lazyLoad(exports, ["DefaultGroupImplementation"], () => require("./defaultGroupImplementation"));

export { DefaultHttpConfigurationArgs, DefaultHttpConfigurationState } from "./defaultHttpConfiguration";
export type DefaultHttpConfiguration = import("./defaultHttpConfiguration").DefaultHttpConfiguration;
export const DefaultHttpConfiguration: typeof import("./defaultHttpConfiguration").DefaultHttpConfiguration = null as any;
utilities.lazyLoad(exports, ["DefaultHttpConfiguration"], () => require("./defaultHttpConfiguration"));

export { DefaultHttpServletCrossOriginPolicyArgs, DefaultHttpServletCrossOriginPolicyState } from "./defaultHttpServletCrossOriginPolicy";
export type DefaultHttpServletCrossOriginPolicy = import("./defaultHttpServletCrossOriginPolicy").DefaultHttpServletCrossOriginPolicy;
export const DefaultHttpServletCrossOriginPolicy: typeof import("./defaultHttpServletCrossOriginPolicy").DefaultHttpServletCrossOriginPolicy = null as any;
utilities.lazyLoad(exports, ["DefaultHttpServletCrossOriginPolicy"], () => require("./defaultHttpServletCrossOriginPolicy"));

export { DefaultHttpServletExtensionArgs, DefaultHttpServletExtensionState } from "./defaultHttpServletExtension";
export type DefaultHttpServletExtension = import("./defaultHttpServletExtension").DefaultHttpServletExtension;
export const DefaultHttpServletExtension: typeof import("./defaultHttpServletExtension").DefaultHttpServletExtension = null as any;
utilities.lazyLoad(exports, ["DefaultHttpServletExtension"], () => require("./defaultHttpServletExtension"));

export { DefaultIdTokenValidatorArgs, DefaultIdTokenValidatorState } from "./defaultIdTokenValidator";
export type DefaultIdTokenValidator = import("./defaultIdTokenValidator").DefaultIdTokenValidator;
export const DefaultIdTokenValidator: typeof import("./defaultIdTokenValidator").DefaultIdTokenValidator = null as any;
utilities.lazyLoad(exports, ["DefaultIdTokenValidator"], () => require("./defaultIdTokenValidator"));

export { DefaultIdentityMapperArgs, DefaultIdentityMapperState } from "./defaultIdentityMapper";
export type DefaultIdentityMapper = import("./defaultIdentityMapper").DefaultIdentityMapper;
export const DefaultIdentityMapper: typeof import("./defaultIdentityMapper").DefaultIdentityMapper = null as any;
utilities.lazyLoad(exports, ["DefaultIdentityMapper"], () => require("./defaultIdentityMapper"));

export { DefaultInterServerAuthenticationInfoArgs, DefaultInterServerAuthenticationInfoState } from "./defaultInterServerAuthenticationInfo";
export type DefaultInterServerAuthenticationInfo = import("./defaultInterServerAuthenticationInfo").DefaultInterServerAuthenticationInfo;
export const DefaultInterServerAuthenticationInfo: typeof import("./defaultInterServerAuthenticationInfo").DefaultInterServerAuthenticationInfo = null as any;
utilities.lazyLoad(exports, ["DefaultInterServerAuthenticationInfo"], () => require("./defaultInterServerAuthenticationInfo"));

export { DefaultJsonAttributeConstraintsArgs, DefaultJsonAttributeConstraintsState } from "./defaultJsonAttributeConstraints";
export type DefaultJsonAttributeConstraints = import("./defaultJsonAttributeConstraints").DefaultJsonAttributeConstraints;
export const DefaultJsonAttributeConstraints: typeof import("./defaultJsonAttributeConstraints").DefaultJsonAttributeConstraints = null as any;
utilities.lazyLoad(exports, ["DefaultJsonAttributeConstraints"], () => require("./defaultJsonAttributeConstraints"));

export { DefaultJsonFieldConstraintsArgs, DefaultJsonFieldConstraintsState } from "./defaultJsonFieldConstraints";
export type DefaultJsonFieldConstraints = import("./defaultJsonFieldConstraints").DefaultJsonFieldConstraints;
export const DefaultJsonFieldConstraints: typeof import("./defaultJsonFieldConstraints").DefaultJsonFieldConstraints = null as any;
utilities.lazyLoad(exports, ["DefaultJsonFieldConstraints"], () => require("./defaultJsonFieldConstraints"));

export { DefaultKeyManagerProviderArgs, DefaultKeyManagerProviderState } from "./defaultKeyManagerProvider";
export type DefaultKeyManagerProvider = import("./defaultKeyManagerProvider").DefaultKeyManagerProvider;
export const DefaultKeyManagerProvider: typeof import("./defaultKeyManagerProvider").DefaultKeyManagerProvider = null as any;
utilities.lazyLoad(exports, ["DefaultKeyManagerProvider"], () => require("./defaultKeyManagerProvider"));

export { DefaultKeyPairArgs, DefaultKeyPairState } from "./defaultKeyPair";
export type DefaultKeyPair = import("./defaultKeyPair").DefaultKeyPair;
export const DefaultKeyPair: typeof import("./defaultKeyPair").DefaultKeyPair = null as any;
utilities.lazyLoad(exports, ["DefaultKeyPair"], () => require("./defaultKeyPair"));

export { DefaultLdapCorrelationAttributePairArgs, DefaultLdapCorrelationAttributePairState } from "./defaultLdapCorrelationAttributePair";
export type DefaultLdapCorrelationAttributePair = import("./defaultLdapCorrelationAttributePair").DefaultLdapCorrelationAttributePair;
export const DefaultLdapCorrelationAttributePair: typeof import("./defaultLdapCorrelationAttributePair").DefaultLdapCorrelationAttributePair = null as any;
utilities.lazyLoad(exports, ["DefaultLdapCorrelationAttributePair"], () => require("./defaultLdapCorrelationAttributePair"));

export { DefaultLdapSdkDebugLoggerArgs, DefaultLdapSdkDebugLoggerState } from "./defaultLdapSdkDebugLogger";
export type DefaultLdapSdkDebugLogger = import("./defaultLdapSdkDebugLogger").DefaultLdapSdkDebugLogger;
export const DefaultLdapSdkDebugLogger: typeof import("./defaultLdapSdkDebugLogger").DefaultLdapSdkDebugLogger = null as any;
utilities.lazyLoad(exports, ["DefaultLdapSdkDebugLogger"], () => require("./defaultLdapSdkDebugLogger"));

export { DefaultLicenseArgs, DefaultLicenseState } from "./defaultLicense";
export type DefaultLicense = import("./defaultLicense").DefaultLicense;
export const DefaultLicense: typeof import("./defaultLicense").DefaultLicense = null as any;
utilities.lazyLoad(exports, ["DefaultLicense"], () => require("./defaultLicense"));

export { DefaultLocalDbCompositeIndexArgs, DefaultLocalDbCompositeIndexState } from "./defaultLocalDbCompositeIndex";
export type DefaultLocalDbCompositeIndex = import("./defaultLocalDbCompositeIndex").DefaultLocalDbCompositeIndex;
export const DefaultLocalDbCompositeIndex: typeof import("./defaultLocalDbCompositeIndex").DefaultLocalDbCompositeIndex = null as any;
utilities.lazyLoad(exports, ["DefaultLocalDbCompositeIndex"], () => require("./defaultLocalDbCompositeIndex"));

export { DefaultLocalDbIndexArgs, DefaultLocalDbIndexState } from "./defaultLocalDbIndex";
export type DefaultLocalDbIndex = import("./defaultLocalDbIndex").DefaultLocalDbIndex;
export const DefaultLocalDbIndex: typeof import("./defaultLocalDbIndex").DefaultLocalDbIndex = null as any;
utilities.lazyLoad(exports, ["DefaultLocalDbIndex"], () => require("./defaultLocalDbIndex"));

export { DefaultLocalDbVlvIndexArgs, DefaultLocalDbVlvIndexState } from "./defaultLocalDbVlvIndex";
export type DefaultLocalDbVlvIndex = import("./defaultLocalDbVlvIndex").DefaultLocalDbVlvIndex;
export const DefaultLocalDbVlvIndex: typeof import("./defaultLocalDbVlvIndex").DefaultLocalDbVlvIndex = null as any;
utilities.lazyLoad(exports, ["DefaultLocalDbVlvIndex"], () => require("./defaultLocalDbVlvIndex"));

export { DefaultLocationArgs, DefaultLocationState } from "./defaultLocation";
export type DefaultLocation = import("./defaultLocation").DefaultLocation;
export const DefaultLocation: typeof import("./defaultLocation").DefaultLocation = null as any;
utilities.lazyLoad(exports, ["DefaultLocation"], () => require("./defaultLocation"));

export { DefaultLogFieldBehaviorArgs, DefaultLogFieldBehaviorState } from "./defaultLogFieldBehavior";
export type DefaultLogFieldBehavior = import("./defaultLogFieldBehavior").DefaultLogFieldBehavior;
export const DefaultLogFieldBehavior: typeof import("./defaultLogFieldBehavior").DefaultLogFieldBehavior = null as any;
utilities.lazyLoad(exports, ["DefaultLogFieldBehavior"], () => require("./defaultLogFieldBehavior"));

export { DefaultLogFieldMappingArgs, DefaultLogFieldMappingState } from "./defaultLogFieldMapping";
export type DefaultLogFieldMapping = import("./defaultLogFieldMapping").DefaultLogFieldMapping;
export const DefaultLogFieldMapping: typeof import("./defaultLogFieldMapping").DefaultLogFieldMapping = null as any;
utilities.lazyLoad(exports, ["DefaultLogFieldMapping"], () => require("./defaultLogFieldMapping"));

export { DefaultLogFieldSyntaxArgs, DefaultLogFieldSyntaxState } from "./defaultLogFieldSyntax";
export type DefaultLogFieldSyntax = import("./defaultLogFieldSyntax").DefaultLogFieldSyntax;
export const DefaultLogFieldSyntax: typeof import("./defaultLogFieldSyntax").DefaultLogFieldSyntax = null as any;
utilities.lazyLoad(exports, ["DefaultLogFieldSyntax"], () => require("./defaultLogFieldSyntax"));

export { DefaultLogFileRotationListenerArgs, DefaultLogFileRotationListenerState } from "./defaultLogFileRotationListener";
export type DefaultLogFileRotationListener = import("./defaultLogFileRotationListener").DefaultLogFileRotationListener;
export const DefaultLogFileRotationListener: typeof import("./defaultLogFileRotationListener").DefaultLogFileRotationListener = null as any;
utilities.lazyLoad(exports, ["DefaultLogFileRotationListener"], () => require("./defaultLogFileRotationListener"));

export { DefaultLogPublisherArgs, DefaultLogPublisherState } from "./defaultLogPublisher";
export type DefaultLogPublisher = import("./defaultLogPublisher").DefaultLogPublisher;
export const DefaultLogPublisher: typeof import("./defaultLogPublisher").DefaultLogPublisher = null as any;
utilities.lazyLoad(exports, ["DefaultLogPublisher"], () => require("./defaultLogPublisher"));

export { DefaultLogRetentionPolicyArgs, DefaultLogRetentionPolicyState } from "./defaultLogRetentionPolicy";
export type DefaultLogRetentionPolicy = import("./defaultLogRetentionPolicy").DefaultLogRetentionPolicy;
export const DefaultLogRetentionPolicy: typeof import("./defaultLogRetentionPolicy").DefaultLogRetentionPolicy = null as any;
utilities.lazyLoad(exports, ["DefaultLogRetentionPolicy"], () => require("./defaultLogRetentionPolicy"));

export { DefaultLogRotationPolicyArgs, DefaultLogRotationPolicyState } from "./defaultLogRotationPolicy";
export type DefaultLogRotationPolicy = import("./defaultLogRotationPolicy").DefaultLogRotationPolicy;
export const DefaultLogRotationPolicy: typeof import("./defaultLogRotationPolicy").DefaultLogRotationPolicy = null as any;
utilities.lazyLoad(exports, ["DefaultLogRotationPolicy"], () => require("./defaultLogRotationPolicy"));

export { DefaultMacSecretKeyArgs, DefaultMacSecretKeyState } from "./defaultMacSecretKey";
export type DefaultMacSecretKey = import("./defaultMacSecretKey").DefaultMacSecretKey;
export const DefaultMacSecretKey: typeof import("./defaultMacSecretKey").DefaultMacSecretKey = null as any;
utilities.lazyLoad(exports, ["DefaultMacSecretKey"], () => require("./defaultMacSecretKey"));

export { DefaultMatchingRuleArgs, DefaultMatchingRuleState } from "./defaultMatchingRule";
export type DefaultMatchingRule = import("./defaultMatchingRule").DefaultMatchingRule;
export const DefaultMatchingRule: typeof import("./defaultMatchingRule").DefaultMatchingRule = null as any;
utilities.lazyLoad(exports, ["DefaultMatchingRule"], () => require("./defaultMatchingRule"));

export { DefaultMonitorProviderArgs, DefaultMonitorProviderState } from "./defaultMonitorProvider";
export type DefaultMonitorProvider = import("./defaultMonitorProvider").DefaultMonitorProvider;
export const DefaultMonitorProvider: typeof import("./defaultMonitorProvider").DefaultMonitorProvider = null as any;
utilities.lazyLoad(exports, ["DefaultMonitorProvider"], () => require("./defaultMonitorProvider"));

export { DefaultMonitoringEndpointArgs, DefaultMonitoringEndpointState } from "./defaultMonitoringEndpoint";
export type DefaultMonitoringEndpoint = import("./defaultMonitoringEndpoint").DefaultMonitoringEndpoint;
export const DefaultMonitoringEndpoint: typeof import("./defaultMonitoringEndpoint").DefaultMonitoringEndpoint = null as any;
utilities.lazyLoad(exports, ["DefaultMonitoringEndpoint"], () => require("./defaultMonitoringEndpoint"));

export { DefaultNotificationManagerArgs, DefaultNotificationManagerState } from "./defaultNotificationManager";
export type DefaultNotificationManager = import("./defaultNotificationManager").DefaultNotificationManager;
export const DefaultNotificationManager: typeof import("./defaultNotificationManager").DefaultNotificationManager = null as any;
utilities.lazyLoad(exports, ["DefaultNotificationManager"], () => require("./defaultNotificationManager"));

export { DefaultOauthTokenHandlerArgs, DefaultOauthTokenHandlerState } from "./defaultOauthTokenHandler";
export type DefaultOauthTokenHandler = import("./defaultOauthTokenHandler").DefaultOauthTokenHandler;
export const DefaultOauthTokenHandler: typeof import("./defaultOauthTokenHandler").DefaultOauthTokenHandler = null as any;
utilities.lazyLoad(exports, ["DefaultOauthTokenHandler"], () => require("./defaultOauthTokenHandler"));

export { DefaultObscuredValueArgs, DefaultObscuredValueState } from "./defaultObscuredValue";
export type DefaultObscuredValue = import("./defaultObscuredValue").DefaultObscuredValue;
export const DefaultObscuredValue: typeof import("./defaultObscuredValue").DefaultObscuredValue = null as any;
utilities.lazyLoad(exports, ["DefaultObscuredValue"], () => require("./defaultObscuredValue"));

export { DefaultOtpDeliveryMechanismArgs, DefaultOtpDeliveryMechanismState } from "./defaultOtpDeliveryMechanism";
export type DefaultOtpDeliveryMechanism = import("./defaultOtpDeliveryMechanism").DefaultOtpDeliveryMechanism;
export const DefaultOtpDeliveryMechanism: typeof import("./defaultOtpDeliveryMechanism").DefaultOtpDeliveryMechanism = null as any;
utilities.lazyLoad(exports, ["DefaultOtpDeliveryMechanism"], () => require("./defaultOtpDeliveryMechanism"));

export { DefaultPassThroughAuthenticationHandlerArgs, DefaultPassThroughAuthenticationHandlerState } from "./defaultPassThroughAuthenticationHandler";
export type DefaultPassThroughAuthenticationHandler = import("./defaultPassThroughAuthenticationHandler").DefaultPassThroughAuthenticationHandler;
export const DefaultPassThroughAuthenticationHandler: typeof import("./defaultPassThroughAuthenticationHandler").DefaultPassThroughAuthenticationHandler = null as any;
utilities.lazyLoad(exports, ["DefaultPassThroughAuthenticationHandler"], () => require("./defaultPassThroughAuthenticationHandler"));

export { DefaultPassphraseProviderArgs, DefaultPassphraseProviderState } from "./defaultPassphraseProvider";
export type DefaultPassphraseProvider = import("./defaultPassphraseProvider").DefaultPassphraseProvider;
export const DefaultPassphraseProvider: typeof import("./defaultPassphraseProvider").DefaultPassphraseProvider = null as any;
utilities.lazyLoad(exports, ["DefaultPassphraseProvider"], () => require("./defaultPassphraseProvider"));

export { DefaultPasswordGeneratorArgs, DefaultPasswordGeneratorState } from "./defaultPasswordGenerator";
export type DefaultPasswordGenerator = import("./defaultPasswordGenerator").DefaultPasswordGenerator;
export const DefaultPasswordGenerator: typeof import("./defaultPasswordGenerator").DefaultPasswordGenerator = null as any;
utilities.lazyLoad(exports, ["DefaultPasswordGenerator"], () => require("./defaultPasswordGenerator"));

export { DefaultPasswordPolicyArgs, DefaultPasswordPolicyState } from "./defaultPasswordPolicy";
export type DefaultPasswordPolicy = import("./defaultPasswordPolicy").DefaultPasswordPolicy;
export const DefaultPasswordPolicy: typeof import("./defaultPasswordPolicy").DefaultPasswordPolicy = null as any;
utilities.lazyLoad(exports, ["DefaultPasswordPolicy"], () => require("./defaultPasswordPolicy"));

export { DefaultPasswordStorageSchemeArgs, DefaultPasswordStorageSchemeState } from "./defaultPasswordStorageScheme";
export type DefaultPasswordStorageScheme = import("./defaultPasswordStorageScheme").DefaultPasswordStorageScheme;
export const DefaultPasswordStorageScheme: typeof import("./defaultPasswordStorageScheme").DefaultPasswordStorageScheme = null as any;
utilities.lazyLoad(exports, ["DefaultPasswordStorageScheme"], () => require("./defaultPasswordStorageScheme"));

export { DefaultPasswordValidatorArgs, DefaultPasswordValidatorState } from "./defaultPasswordValidator";
export type DefaultPasswordValidator = import("./defaultPasswordValidator").DefaultPasswordValidator;
export const DefaultPasswordValidator: typeof import("./defaultPasswordValidator").DefaultPasswordValidator = null as any;
utilities.lazyLoad(exports, ["DefaultPasswordValidator"], () => require("./defaultPasswordValidator"));

export { DefaultPluginArgs, DefaultPluginState } from "./defaultPlugin";
export type DefaultPlugin = import("./defaultPlugin").DefaultPlugin;
export const DefaultPlugin: typeof import("./defaultPlugin").DefaultPlugin = null as any;
utilities.lazyLoad(exports, ["DefaultPlugin"], () => require("./defaultPlugin"));

export { DefaultPluginRootArgs, DefaultPluginRootState } from "./defaultPluginRoot";
export type DefaultPluginRoot = import("./defaultPluginRoot").DefaultPluginRoot;
export const DefaultPluginRoot: typeof import("./defaultPluginRoot").DefaultPluginRoot = null as any;
utilities.lazyLoad(exports, ["DefaultPluginRoot"], () => require("./defaultPluginRoot"));

export { DefaultPostLdifExportTaskProcessorArgs, DefaultPostLdifExportTaskProcessorState } from "./defaultPostLdifExportTaskProcessor";
export type DefaultPostLdifExportTaskProcessor = import("./defaultPostLdifExportTaskProcessor").DefaultPostLdifExportTaskProcessor;
export const DefaultPostLdifExportTaskProcessor: typeof import("./defaultPostLdifExportTaskProcessor").DefaultPostLdifExportTaskProcessor = null as any;
utilities.lazyLoad(exports, ["DefaultPostLdifExportTaskProcessor"], () => require("./defaultPostLdifExportTaskProcessor"));

export { DefaultPrometheusMonitorAttributeMetricArgs, DefaultPrometheusMonitorAttributeMetricState } from "./defaultPrometheusMonitorAttributeMetric";
export type DefaultPrometheusMonitorAttributeMetric = import("./defaultPrometheusMonitorAttributeMetric").DefaultPrometheusMonitorAttributeMetric;
export const DefaultPrometheusMonitorAttributeMetric: typeof import("./defaultPrometheusMonitorAttributeMetric").DefaultPrometheusMonitorAttributeMetric = null as any;
utilities.lazyLoad(exports, ["DefaultPrometheusMonitorAttributeMetric"], () => require("./defaultPrometheusMonitorAttributeMetric"));

export { DefaultRecurringTaskArgs, DefaultRecurringTaskState } from "./defaultRecurringTask";
export type DefaultRecurringTask = import("./defaultRecurringTask").DefaultRecurringTask;
export const DefaultRecurringTask: typeof import("./defaultRecurringTask").DefaultRecurringTask = null as any;
utilities.lazyLoad(exports, ["DefaultRecurringTask"], () => require("./defaultRecurringTask"));

export { DefaultRecurringTaskChainArgs, DefaultRecurringTaskChainState } from "./defaultRecurringTaskChain";
export type DefaultRecurringTaskChain = import("./defaultRecurringTaskChain").DefaultRecurringTaskChain;
export const DefaultRecurringTaskChain: typeof import("./defaultRecurringTaskChain").DefaultRecurringTaskChain = null as any;
utilities.lazyLoad(exports, ["DefaultRecurringTaskChain"], () => require("./defaultRecurringTaskChain"));

export { DefaultReplicationAssurancePolicyArgs, DefaultReplicationAssurancePolicyState } from "./defaultReplicationAssurancePolicy";
export type DefaultReplicationAssurancePolicy = import("./defaultReplicationAssurancePolicy").DefaultReplicationAssurancePolicy;
export const DefaultReplicationAssurancePolicy: typeof import("./defaultReplicationAssurancePolicy").DefaultReplicationAssurancePolicy = null as any;
utilities.lazyLoad(exports, ["DefaultReplicationAssurancePolicy"], () => require("./defaultReplicationAssurancePolicy"));

export { DefaultReplicationDomainArgs, DefaultReplicationDomainState } from "./defaultReplicationDomain";
export type DefaultReplicationDomain = import("./defaultReplicationDomain").DefaultReplicationDomain;
export const DefaultReplicationDomain: typeof import("./defaultReplicationDomain").DefaultReplicationDomain = null as any;
utilities.lazyLoad(exports, ["DefaultReplicationDomain"], () => require("./defaultReplicationDomain"));

export { DefaultReplicationServerArgs, DefaultReplicationServerState } from "./defaultReplicationServer";
export type DefaultReplicationServer = import("./defaultReplicationServer").DefaultReplicationServer;
export const DefaultReplicationServer: typeof import("./defaultReplicationServer").DefaultReplicationServer = null as any;
utilities.lazyLoad(exports, ["DefaultReplicationServer"], () => require("./defaultReplicationServer"));

export { DefaultRequestCriteriaArgs, DefaultRequestCriteriaState } from "./defaultRequestCriteria";
export type DefaultRequestCriteria = import("./defaultRequestCriteria").DefaultRequestCriteria;
export const DefaultRequestCriteria: typeof import("./defaultRequestCriteria").DefaultRequestCriteria = null as any;
utilities.lazyLoad(exports, ["DefaultRequestCriteria"], () => require("./defaultRequestCriteria"));

export { DefaultRestResourceTypeArgs, DefaultRestResourceTypeState } from "./defaultRestResourceType";
export type DefaultRestResourceType = import("./defaultRestResourceType").DefaultRestResourceType;
export const DefaultRestResourceType: typeof import("./defaultRestResourceType").DefaultRestResourceType = null as any;
utilities.lazyLoad(exports, ["DefaultRestResourceType"], () => require("./defaultRestResourceType"));

export { DefaultResultCodeMapArgs, DefaultResultCodeMapState } from "./defaultResultCodeMap";
export type DefaultResultCodeMap = import("./defaultResultCodeMap").DefaultResultCodeMap;
export const DefaultResultCodeMap: typeof import("./defaultResultCodeMap").DefaultResultCodeMap = null as any;
utilities.lazyLoad(exports, ["DefaultResultCodeMap"], () => require("./defaultResultCodeMap"));

export { DefaultResultCriteriaArgs, DefaultResultCriteriaState } from "./defaultResultCriteria";
export type DefaultResultCriteria = import("./defaultResultCriteria").DefaultResultCriteria;
export const DefaultResultCriteria: typeof import("./defaultResultCriteria").DefaultResultCriteria = null as any;
utilities.lazyLoad(exports, ["DefaultResultCriteria"], () => require("./defaultResultCriteria"));

export { DefaultRootDnArgs, DefaultRootDnState } from "./defaultRootDn";
export type DefaultRootDn = import("./defaultRootDn").DefaultRootDn;
export const DefaultRootDn: typeof import("./defaultRootDn").DefaultRootDn = null as any;
utilities.lazyLoad(exports, ["DefaultRootDn"], () => require("./defaultRootDn"));

export { DefaultRootDnUserArgs, DefaultRootDnUserState } from "./defaultRootDnUser";
export type DefaultRootDnUser = import("./defaultRootDnUser").DefaultRootDnUser;
export const DefaultRootDnUser: typeof import("./defaultRootDnUser").DefaultRootDnUser = null as any;
utilities.lazyLoad(exports, ["DefaultRootDnUser"], () => require("./defaultRootDnUser"));

export { DefaultRootDseBackendArgs, DefaultRootDseBackendState } from "./defaultRootDseBackend";
export type DefaultRootDseBackend = import("./defaultRootDseBackend").DefaultRootDseBackend;
export const DefaultRootDseBackend: typeof import("./defaultRootDseBackend").DefaultRootDseBackend = null as any;
utilities.lazyLoad(exports, ["DefaultRootDseBackend"], () => require("./defaultRootDseBackend"));

export { DefaultSaslMechanismHandlerArgs, DefaultSaslMechanismHandlerState } from "./defaultSaslMechanismHandler";
export type DefaultSaslMechanismHandler = import("./defaultSaslMechanismHandler").DefaultSaslMechanismHandler;
export const DefaultSaslMechanismHandler: typeof import("./defaultSaslMechanismHandler").DefaultSaslMechanismHandler = null as any;
utilities.lazyLoad(exports, ["DefaultSaslMechanismHandler"], () => require("./defaultSaslMechanismHandler"));

export { DefaultScimAttributeArgs, DefaultScimAttributeState } from "./defaultScimAttribute";
export type DefaultScimAttribute = import("./defaultScimAttribute").DefaultScimAttribute;
export const DefaultScimAttribute: typeof import("./defaultScimAttribute").DefaultScimAttribute = null as any;
utilities.lazyLoad(exports, ["DefaultScimAttribute"], () => require("./defaultScimAttribute"));

export { DefaultScimAttributeMappingArgs, DefaultScimAttributeMappingState } from "./defaultScimAttributeMapping";
export type DefaultScimAttributeMapping = import("./defaultScimAttributeMapping").DefaultScimAttributeMapping;
export const DefaultScimAttributeMapping: typeof import("./defaultScimAttributeMapping").DefaultScimAttributeMapping = null as any;
utilities.lazyLoad(exports, ["DefaultScimAttributeMapping"], () => require("./defaultScimAttributeMapping"));

export { DefaultScimResourceTypeArgs, DefaultScimResourceTypeState } from "./defaultScimResourceType";
export type DefaultScimResourceType = import("./defaultScimResourceType").DefaultScimResourceType;
export const DefaultScimResourceType: typeof import("./defaultScimResourceType").DefaultScimResourceType = null as any;
utilities.lazyLoad(exports, ["DefaultScimResourceType"], () => require("./defaultScimResourceType"));

export { DefaultScimSchemaArgs, DefaultScimSchemaState } from "./defaultScimSchema";
export type DefaultScimSchema = import("./defaultScimSchema").DefaultScimSchema;
export const DefaultScimSchema: typeof import("./defaultScimSchema").DefaultScimSchema = null as any;
utilities.lazyLoad(exports, ["DefaultScimSchema"], () => require("./defaultScimSchema"));

export { DefaultScimSubattributeArgs, DefaultScimSubattributeState } from "./defaultScimSubattribute";
export type DefaultScimSubattribute = import("./defaultScimSubattribute").DefaultScimSubattribute;
export const DefaultScimSubattribute: typeof import("./defaultScimSubattribute").DefaultScimSubattribute = null as any;
utilities.lazyLoad(exports, ["DefaultScimSubattribute"], () => require("./defaultScimSubattribute"));

export { DefaultSearchEntryCriteriaArgs, DefaultSearchEntryCriteriaState } from "./defaultSearchEntryCriteria";
export type DefaultSearchEntryCriteria = import("./defaultSearchEntryCriteria").DefaultSearchEntryCriteria;
export const DefaultSearchEntryCriteria: typeof import("./defaultSearchEntryCriteria").DefaultSearchEntryCriteria = null as any;
utilities.lazyLoad(exports, ["DefaultSearchEntryCriteria"], () => require("./defaultSearchEntryCriteria"));

export { DefaultSearchReferenceCriteriaArgs, DefaultSearchReferenceCriteriaState } from "./defaultSearchReferenceCriteria";
export type DefaultSearchReferenceCriteria = import("./defaultSearchReferenceCriteria").DefaultSearchReferenceCriteria;
export const DefaultSearchReferenceCriteria: typeof import("./defaultSearchReferenceCriteria").DefaultSearchReferenceCriteria = null as any;
utilities.lazyLoad(exports, ["DefaultSearchReferenceCriteria"], () => require("./defaultSearchReferenceCriteria"));

export { DefaultSensitiveAttributeArgs, DefaultSensitiveAttributeState } from "./defaultSensitiveAttribute";
export type DefaultSensitiveAttribute = import("./defaultSensitiveAttribute").DefaultSensitiveAttribute;
export const DefaultSensitiveAttribute: typeof import("./defaultSensitiveAttribute").DefaultSensitiveAttribute = null as any;
utilities.lazyLoad(exports, ["DefaultSensitiveAttribute"], () => require("./defaultSensitiveAttribute"));

export { DefaultServerGroupArgs, DefaultServerGroupState } from "./defaultServerGroup";
export type DefaultServerGroup = import("./defaultServerGroup").DefaultServerGroup;
export const DefaultServerGroup: typeof import("./defaultServerGroup").DefaultServerGroup = null as any;
utilities.lazyLoad(exports, ["DefaultServerGroup"], () => require("./defaultServerGroup"));

export { DefaultServerInstanceArgs, DefaultServerInstanceState } from "./defaultServerInstance";
export type DefaultServerInstance = import("./defaultServerInstance").DefaultServerInstance;
export const DefaultServerInstance: typeof import("./defaultServerInstance").DefaultServerInstance = null as any;
utilities.lazyLoad(exports, ["DefaultServerInstance"], () => require("./defaultServerInstance"));

export { DefaultServerInstanceListenerArgs, DefaultServerInstanceListenerState } from "./defaultServerInstanceListener";
export type DefaultServerInstanceListener = import("./defaultServerInstanceListener").DefaultServerInstanceListener;
export const DefaultServerInstanceListener: typeof import("./defaultServerInstanceListener").DefaultServerInstanceListener = null as any;
utilities.lazyLoad(exports, ["DefaultServerInstanceListener"], () => require("./defaultServerInstanceListener"));

export { DefaultSoftDeletePolicyArgs, DefaultSoftDeletePolicyState } from "./defaultSoftDeletePolicy";
export type DefaultSoftDeletePolicy = import("./defaultSoftDeletePolicy").DefaultSoftDeletePolicy;
export const DefaultSoftDeletePolicy: typeof import("./defaultSoftDeletePolicy").DefaultSoftDeletePolicy = null as any;
utilities.lazyLoad(exports, ["DefaultSoftDeletePolicy"], () => require("./defaultSoftDeletePolicy"));

export { DefaultSynchronizationProviderArgs, DefaultSynchronizationProviderState } from "./defaultSynchronizationProvider";
export type DefaultSynchronizationProvider = import("./defaultSynchronizationProvider").DefaultSynchronizationProvider;
export const DefaultSynchronizationProvider: typeof import("./defaultSynchronizationProvider").DefaultSynchronizationProvider = null as any;
utilities.lazyLoad(exports, ["DefaultSynchronizationProvider"], () => require("./defaultSynchronizationProvider"));

export { DefaultTokenClaimValidationArgs, DefaultTokenClaimValidationState } from "./defaultTokenClaimValidation";
export type DefaultTokenClaimValidation = import("./defaultTokenClaimValidation").DefaultTokenClaimValidation;
export const DefaultTokenClaimValidation: typeof import("./defaultTokenClaimValidation").DefaultTokenClaimValidation = null as any;
utilities.lazyLoad(exports, ["DefaultTokenClaimValidation"], () => require("./defaultTokenClaimValidation"));

export { DefaultTopologyAdminUserArgs, DefaultTopologyAdminUserState } from "./defaultTopologyAdminUser";
export type DefaultTopologyAdminUser = import("./defaultTopologyAdminUser").DefaultTopologyAdminUser;
export const DefaultTopologyAdminUser: typeof import("./defaultTopologyAdminUser").DefaultTopologyAdminUser = null as any;
utilities.lazyLoad(exports, ["DefaultTopologyAdminUser"], () => require("./defaultTopologyAdminUser"));

export { DefaultTrustManagerProviderArgs, DefaultTrustManagerProviderState } from "./defaultTrustManagerProvider";
export type DefaultTrustManagerProvider = import("./defaultTrustManagerProvider").DefaultTrustManagerProvider;
export const DefaultTrustManagerProvider: typeof import("./defaultTrustManagerProvider").DefaultTrustManagerProvider = null as any;
utilities.lazyLoad(exports, ["DefaultTrustManagerProvider"], () => require("./defaultTrustManagerProvider"));

export { DefaultTrustedCertificateArgs, DefaultTrustedCertificateState } from "./defaultTrustedCertificate";
export type DefaultTrustedCertificate = import("./defaultTrustedCertificate").DefaultTrustedCertificate;
export const DefaultTrustedCertificate: typeof import("./defaultTrustedCertificate").DefaultTrustedCertificate = null as any;
utilities.lazyLoad(exports, ["DefaultTrustedCertificate"], () => require("./defaultTrustedCertificate"));

export { DefaultUncachedAttributeCriteriaArgs, DefaultUncachedAttributeCriteriaState } from "./defaultUncachedAttributeCriteria";
export type DefaultUncachedAttributeCriteria = import("./defaultUncachedAttributeCriteria").DefaultUncachedAttributeCriteria;
export const DefaultUncachedAttributeCriteria: typeof import("./defaultUncachedAttributeCriteria").DefaultUncachedAttributeCriteria = null as any;
utilities.lazyLoad(exports, ["DefaultUncachedAttributeCriteria"], () => require("./defaultUncachedAttributeCriteria"));

export { DefaultUncachedEntryCriteriaArgs, DefaultUncachedEntryCriteriaState } from "./defaultUncachedEntryCriteria";
export type DefaultUncachedEntryCriteria = import("./defaultUncachedEntryCriteria").DefaultUncachedEntryCriteria;
export const DefaultUncachedEntryCriteria: typeof import("./defaultUncachedEntryCriteria").DefaultUncachedEntryCriteria = null as any;
utilities.lazyLoad(exports, ["DefaultUncachedEntryCriteria"], () => require("./defaultUncachedEntryCriteria"));

export { DefaultVaultAuthenticationMethodArgs, DefaultVaultAuthenticationMethodState } from "./defaultVaultAuthenticationMethod";
export type DefaultVaultAuthenticationMethod = import("./defaultVaultAuthenticationMethod").DefaultVaultAuthenticationMethod;
export const DefaultVaultAuthenticationMethod: typeof import("./defaultVaultAuthenticationMethod").DefaultVaultAuthenticationMethod = null as any;
utilities.lazyLoad(exports, ["DefaultVaultAuthenticationMethod"], () => require("./defaultVaultAuthenticationMethod"));

export { DefaultVelocityContextProviderArgs, DefaultVelocityContextProviderState } from "./defaultVelocityContextProvider";
export type DefaultVelocityContextProvider = import("./defaultVelocityContextProvider").DefaultVelocityContextProvider;
export const DefaultVelocityContextProvider: typeof import("./defaultVelocityContextProvider").DefaultVelocityContextProvider = null as any;
utilities.lazyLoad(exports, ["DefaultVelocityContextProvider"], () => require("./defaultVelocityContextProvider"));

export { DefaultVelocityTemplateLoaderArgs, DefaultVelocityTemplateLoaderState } from "./defaultVelocityTemplateLoader";
export type DefaultVelocityTemplateLoader = import("./defaultVelocityTemplateLoader").DefaultVelocityTemplateLoader;
export const DefaultVelocityTemplateLoader: typeof import("./defaultVelocityTemplateLoader").DefaultVelocityTemplateLoader = null as any;
utilities.lazyLoad(exports, ["DefaultVelocityTemplateLoader"], () => require("./defaultVelocityTemplateLoader"));

export { DefaultVirtualAttributeArgs, DefaultVirtualAttributeState } from "./defaultVirtualAttribute";
export type DefaultVirtualAttribute = import("./defaultVirtualAttribute").DefaultVirtualAttribute;
export const DefaultVirtualAttribute: typeof import("./defaultVirtualAttribute").DefaultVirtualAttribute = null as any;
utilities.lazyLoad(exports, ["DefaultVirtualAttribute"], () => require("./defaultVirtualAttribute"));

export { DefaultWebApplicationExtensionArgs, DefaultWebApplicationExtensionState } from "./defaultWebApplicationExtension";
export type DefaultWebApplicationExtension = import("./defaultWebApplicationExtension").DefaultWebApplicationExtension;
export const DefaultWebApplicationExtension: typeof import("./defaultWebApplicationExtension").DefaultWebApplicationExtension = null as any;
utilities.lazyLoad(exports, ["DefaultWebApplicationExtension"], () => require("./defaultWebApplicationExtension"));

export { DefaultWorkQueueArgs, DefaultWorkQueueState } from "./defaultWorkQueue";
export type DefaultWorkQueue = import("./defaultWorkQueue").DefaultWorkQueue;
export const DefaultWorkQueue: typeof import("./defaultWorkQueue").DefaultWorkQueue = null as any;
utilities.lazyLoad(exports, ["DefaultWorkQueue"], () => require("./defaultWorkQueue"));

export { DelegatedAdminAttributeArgs, DelegatedAdminAttributeState } from "./delegatedAdminAttribute";
export type DelegatedAdminAttribute = import("./delegatedAdminAttribute").DelegatedAdminAttribute;
export const DelegatedAdminAttribute: typeof import("./delegatedAdminAttribute").DelegatedAdminAttribute = null as any;
utilities.lazyLoad(exports, ["DelegatedAdminAttribute"], () => require("./delegatedAdminAttribute"));

export { DelegatedAdminAttributeCategoryArgs, DelegatedAdminAttributeCategoryState } from "./delegatedAdminAttributeCategory";
export type DelegatedAdminAttributeCategory = import("./delegatedAdminAttributeCategory").DelegatedAdminAttributeCategory;
export const DelegatedAdminAttributeCategory: typeof import("./delegatedAdminAttributeCategory").DelegatedAdminAttributeCategory = null as any;
utilities.lazyLoad(exports, ["DelegatedAdminAttributeCategory"], () => require("./delegatedAdminAttributeCategory"));

export { DelegatedAdminCorrelatedRestResourceArgs, DelegatedAdminCorrelatedRestResourceState } from "./delegatedAdminCorrelatedRestResource";
export type DelegatedAdminCorrelatedRestResource = import("./delegatedAdminCorrelatedRestResource").DelegatedAdminCorrelatedRestResource;
export const DelegatedAdminCorrelatedRestResource: typeof import("./delegatedAdminCorrelatedRestResource").DelegatedAdminCorrelatedRestResource = null as any;
utilities.lazyLoad(exports, ["DelegatedAdminCorrelatedRestResource"], () => require("./delegatedAdminCorrelatedRestResource"));

export { DelegatedAdminResourceRightsArgs, DelegatedAdminResourceRightsState } from "./delegatedAdminResourceRights";
export type DelegatedAdminResourceRights = import("./delegatedAdminResourceRights").DelegatedAdminResourceRights;
export const DelegatedAdminResourceRights: typeof import("./delegatedAdminResourceRights").DelegatedAdminResourceRights = null as any;
utilities.lazyLoad(exports, ["DelegatedAdminResourceRights"], () => require("./delegatedAdminResourceRights"));

export { DelegatedAdminRightsArgs, DelegatedAdminRightsState } from "./delegatedAdminRights";
export type DelegatedAdminRights = import("./delegatedAdminRights").DelegatedAdminRights;
export const DelegatedAdminRights: typeof import("./delegatedAdminRights").DelegatedAdminRights = null as any;
utilities.lazyLoad(exports, ["DelegatedAdminRights"], () => require("./delegatedAdminRights"));

export { DnMapArgs, DnMapState } from "./dnMap";
export type DnMap = import("./dnMap").DnMap;
export const DnMap: typeof import("./dnMap").DnMap = null as any;
utilities.lazyLoad(exports, ["DnMap"], () => require("./dnMap"));

export { EntryCacheArgs, EntryCacheState } from "./entryCache";
export type EntryCache = import("./entryCache").EntryCache;
export const EntryCache: typeof import("./entryCache").EntryCache = null as any;
utilities.lazyLoad(exports, ["EntryCache"], () => require("./entryCache"));

export { ExtendedOperationHandlerArgs, ExtendedOperationHandlerState } from "./extendedOperationHandler";
export type ExtendedOperationHandler = import("./extendedOperationHandler").ExtendedOperationHandler;
export const ExtendedOperationHandler: typeof import("./extendedOperationHandler").ExtendedOperationHandler = null as any;
utilities.lazyLoad(exports, ["ExtendedOperationHandler"], () => require("./extendedOperationHandler"));

export { ExternalServerArgs, ExternalServerState } from "./externalServer";
export type ExternalServer = import("./externalServer").ExternalServer;
export const ExternalServer: typeof import("./externalServer").ExternalServer = null as any;
utilities.lazyLoad(exports, ["ExternalServer"], () => require("./externalServer"));

export { FailureLockoutActionArgs, FailureLockoutActionState } from "./failureLockoutAction";
export type FailureLockoutAction = import("./failureLockoutAction").FailureLockoutAction;
export const FailureLockoutAction: typeof import("./failureLockoutAction").FailureLockoutAction = null as any;
utilities.lazyLoad(exports, ["FailureLockoutAction"], () => require("./failureLockoutAction"));

export { GaugeArgs, GaugeState } from "./gauge";
export type Gauge = import("./gauge").Gauge;
export const Gauge: typeof import("./gauge").Gauge = null as any;
utilities.lazyLoad(exports, ["Gauge"], () => require("./gauge"));

export { GaugeDataSourceArgs, GaugeDataSourceState } from "./gaugeDataSource";
export type GaugeDataSource = import("./gaugeDataSource").GaugeDataSource;
export const GaugeDataSource: typeof import("./gaugeDataSource").GaugeDataSource = null as any;
utilities.lazyLoad(exports, ["GaugeDataSource"], () => require("./gaugeDataSource"));

export { GetAccessControlHandlerResult } from "./getAccessControlHandler";
export const getAccessControlHandler: typeof import("./getAccessControlHandler").getAccessControlHandler = null as any;
export const getAccessControlHandlerOutput: typeof import("./getAccessControlHandler").getAccessControlHandlerOutput = null as any;
utilities.lazyLoad(exports, ["getAccessControlHandler","getAccessControlHandlerOutput"], () => require("./getAccessControlHandler"));

export { GetAccessTokenValidatorArgs, GetAccessTokenValidatorResult, GetAccessTokenValidatorOutputArgs } from "./getAccessTokenValidator";
export const getAccessTokenValidator: typeof import("./getAccessTokenValidator").getAccessTokenValidator = null as any;
export const getAccessTokenValidatorOutput: typeof import("./getAccessTokenValidator").getAccessTokenValidatorOutput = null as any;
utilities.lazyLoad(exports, ["getAccessTokenValidator","getAccessTokenValidatorOutput"], () => require("./getAccessTokenValidator"));

export { GetAccessTokenValidatorsArgs, GetAccessTokenValidatorsResult, GetAccessTokenValidatorsOutputArgs } from "./getAccessTokenValidators";
export const getAccessTokenValidators: typeof import("./getAccessTokenValidators").getAccessTokenValidators = null as any;
export const getAccessTokenValidatorsOutput: typeof import("./getAccessTokenValidators").getAccessTokenValidatorsOutput = null as any;
utilities.lazyLoad(exports, ["getAccessTokenValidators","getAccessTokenValidatorsOutput"], () => require("./getAccessTokenValidators"));

export { GetAccountStatusNotificationHandlerArgs, GetAccountStatusNotificationHandlerResult, GetAccountStatusNotificationHandlerOutputArgs } from "./getAccountStatusNotificationHandler";
export const getAccountStatusNotificationHandler: typeof import("./getAccountStatusNotificationHandler").getAccountStatusNotificationHandler = null as any;
export const getAccountStatusNotificationHandlerOutput: typeof import("./getAccountStatusNotificationHandler").getAccountStatusNotificationHandlerOutput = null as any;
utilities.lazyLoad(exports, ["getAccountStatusNotificationHandler","getAccountStatusNotificationHandlerOutput"], () => require("./getAccountStatusNotificationHandler"));

export { GetAccountStatusNotificationHandlersArgs, GetAccountStatusNotificationHandlersResult, GetAccountStatusNotificationHandlersOutputArgs } from "./getAccountStatusNotificationHandlers";
export const getAccountStatusNotificationHandlers: typeof import("./getAccountStatusNotificationHandlers").getAccountStatusNotificationHandlers = null as any;
export const getAccountStatusNotificationHandlersOutput: typeof import("./getAccountStatusNotificationHandlers").getAccountStatusNotificationHandlersOutput = null as any;
utilities.lazyLoad(exports, ["getAccountStatusNotificationHandlers","getAccountStatusNotificationHandlersOutput"], () => require("./getAccountStatusNotificationHandlers"));

export { GetAlarmManagerResult } from "./getAlarmManager";
export const getAlarmManager: typeof import("./getAlarmManager").getAlarmManager = null as any;
export const getAlarmManagerOutput: typeof import("./getAlarmManager").getAlarmManagerOutput = null as any;
utilities.lazyLoad(exports, ["getAlarmManager","getAlarmManagerOutput"], () => require("./getAlarmManager"));

export { GetAlertHandlerArgs, GetAlertHandlerResult, GetAlertHandlerOutputArgs } from "./getAlertHandler";
export const getAlertHandler: typeof import("./getAlertHandler").getAlertHandler = null as any;
export const getAlertHandlerOutput: typeof import("./getAlertHandler").getAlertHandlerOutput = null as any;
utilities.lazyLoad(exports, ["getAlertHandler","getAlertHandlerOutput"], () => require("./getAlertHandler"));

export { GetAlertHandlersArgs, GetAlertHandlersResult, GetAlertHandlersOutputArgs } from "./getAlertHandlers";
export const getAlertHandlers: typeof import("./getAlertHandlers").getAlertHandlers = null as any;
export const getAlertHandlersOutput: typeof import("./getAlertHandlers").getAlertHandlersOutput = null as any;
utilities.lazyLoad(exports, ["getAlertHandlers","getAlertHandlersOutput"], () => require("./getAlertHandlers"));

export { GetAttributeSyntaxArgs, GetAttributeSyntaxResult, GetAttributeSyntaxOutputArgs } from "./getAttributeSyntax";
export const getAttributeSyntax: typeof import("./getAttributeSyntax").getAttributeSyntax = null as any;
export const getAttributeSyntaxOutput: typeof import("./getAttributeSyntax").getAttributeSyntaxOutput = null as any;
utilities.lazyLoad(exports, ["getAttributeSyntax","getAttributeSyntaxOutput"], () => require("./getAttributeSyntax"));

export { GetAttributeSyntaxesArgs, GetAttributeSyntaxesResult, GetAttributeSyntaxesOutputArgs } from "./getAttributeSyntaxes";
export const getAttributeSyntaxes: typeof import("./getAttributeSyntaxes").getAttributeSyntaxes = null as any;
export const getAttributeSyntaxesOutput: typeof import("./getAttributeSyntaxes").getAttributeSyntaxesOutput = null as any;
utilities.lazyLoad(exports, ["getAttributeSyntaxes","getAttributeSyntaxesOutput"], () => require("./getAttributeSyntaxes"));

export { GetAzureAuthenticationMethodArgs, GetAzureAuthenticationMethodResult, GetAzureAuthenticationMethodOutputArgs } from "./getAzureAuthenticationMethod";
export const getAzureAuthenticationMethod: typeof import("./getAzureAuthenticationMethod").getAzureAuthenticationMethod = null as any;
export const getAzureAuthenticationMethodOutput: typeof import("./getAzureAuthenticationMethod").getAzureAuthenticationMethodOutput = null as any;
utilities.lazyLoad(exports, ["getAzureAuthenticationMethod","getAzureAuthenticationMethodOutput"], () => require("./getAzureAuthenticationMethod"));

export { GetAzureAuthenticationMethodsArgs, GetAzureAuthenticationMethodsResult, GetAzureAuthenticationMethodsOutputArgs } from "./getAzureAuthenticationMethods";
export const getAzureAuthenticationMethods: typeof import("./getAzureAuthenticationMethods").getAzureAuthenticationMethods = null as any;
export const getAzureAuthenticationMethodsOutput: typeof import("./getAzureAuthenticationMethods").getAzureAuthenticationMethodsOutput = null as any;
utilities.lazyLoad(exports, ["getAzureAuthenticationMethods","getAzureAuthenticationMethodsOutput"], () => require("./getAzureAuthenticationMethods"));

export { GetBackendArgs, GetBackendResult, GetBackendOutputArgs } from "./getBackend";
export const getBackend: typeof import("./getBackend").getBackend = null as any;
export const getBackendOutput: typeof import("./getBackend").getBackendOutput = null as any;
utilities.lazyLoad(exports, ["getBackend","getBackendOutput"], () => require("./getBackend"));

export { GetBackendsArgs, GetBackendsResult, GetBackendsOutputArgs } from "./getBackends";
export const getBackends: typeof import("./getBackends").getBackends = null as any;
export const getBackendsOutput: typeof import("./getBackends").getBackendsOutput = null as any;
utilities.lazyLoad(exports, ["getBackends","getBackendsOutput"], () => require("./getBackends"));

export { GetCertificateMapperArgs, GetCertificateMapperResult, GetCertificateMapperOutputArgs } from "./getCertificateMapper";
export const getCertificateMapper: typeof import("./getCertificateMapper").getCertificateMapper = null as any;
export const getCertificateMapperOutput: typeof import("./getCertificateMapper").getCertificateMapperOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateMapper","getCertificateMapperOutput"], () => require("./getCertificateMapper"));

export { GetCertificateMappersArgs, GetCertificateMappersResult, GetCertificateMappersOutputArgs } from "./getCertificateMappers";
export const getCertificateMappers: typeof import("./getCertificateMappers").getCertificateMappers = null as any;
export const getCertificateMappersOutput: typeof import("./getCertificateMappers").getCertificateMappersOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateMappers","getCertificateMappersOutput"], () => require("./getCertificateMappers"));

export { GetChangeSubscriptionArgs, GetChangeSubscriptionResult, GetChangeSubscriptionOutputArgs } from "./getChangeSubscription";
export const getChangeSubscription: typeof import("./getChangeSubscription").getChangeSubscription = null as any;
export const getChangeSubscriptionOutput: typeof import("./getChangeSubscription").getChangeSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getChangeSubscription","getChangeSubscriptionOutput"], () => require("./getChangeSubscription"));

export { GetChangeSubscriptionHandlerArgs, GetChangeSubscriptionHandlerResult, GetChangeSubscriptionHandlerOutputArgs } from "./getChangeSubscriptionHandler";
export const getChangeSubscriptionHandler: typeof import("./getChangeSubscriptionHandler").getChangeSubscriptionHandler = null as any;
export const getChangeSubscriptionHandlerOutput: typeof import("./getChangeSubscriptionHandler").getChangeSubscriptionHandlerOutput = null as any;
utilities.lazyLoad(exports, ["getChangeSubscriptionHandler","getChangeSubscriptionHandlerOutput"], () => require("./getChangeSubscriptionHandler"));

export { GetChangeSubscriptionHandlersArgs, GetChangeSubscriptionHandlersResult, GetChangeSubscriptionHandlersOutputArgs } from "./getChangeSubscriptionHandlers";
export const getChangeSubscriptionHandlers: typeof import("./getChangeSubscriptionHandlers").getChangeSubscriptionHandlers = null as any;
export const getChangeSubscriptionHandlersOutput: typeof import("./getChangeSubscriptionHandlers").getChangeSubscriptionHandlersOutput = null as any;
utilities.lazyLoad(exports, ["getChangeSubscriptionHandlers","getChangeSubscriptionHandlersOutput"], () => require("./getChangeSubscriptionHandlers"));

export { GetChangeSubscriptionsArgs, GetChangeSubscriptionsResult, GetChangeSubscriptionsOutputArgs } from "./getChangeSubscriptions";
export const getChangeSubscriptions: typeof import("./getChangeSubscriptions").getChangeSubscriptions = null as any;
export const getChangeSubscriptionsOutput: typeof import("./getChangeSubscriptions").getChangeSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getChangeSubscriptions","getChangeSubscriptionsOutput"], () => require("./getChangeSubscriptions"));

export { GetCipherSecretKeyArgs, GetCipherSecretKeyResult, GetCipherSecretKeyOutputArgs } from "./getCipherSecretKey";
export const getCipherSecretKey: typeof import("./getCipherSecretKey").getCipherSecretKey = null as any;
export const getCipherSecretKeyOutput: typeof import("./getCipherSecretKey").getCipherSecretKeyOutput = null as any;
utilities.lazyLoad(exports, ["getCipherSecretKey","getCipherSecretKeyOutput"], () => require("./getCipherSecretKey"));

export { GetCipherSecretKeysArgs, GetCipherSecretKeysResult, GetCipherSecretKeysOutputArgs } from "./getCipherSecretKeys";
export const getCipherSecretKeys: typeof import("./getCipherSecretKeys").getCipherSecretKeys = null as any;
export const getCipherSecretKeysOutput: typeof import("./getCipherSecretKeys").getCipherSecretKeysOutput = null as any;
utilities.lazyLoad(exports, ["getCipherSecretKeys","getCipherSecretKeysOutput"], () => require("./getCipherSecretKeys"));

export { GetCipherStreamProviderArgs, GetCipherStreamProviderResult, GetCipherStreamProviderOutputArgs } from "./getCipherStreamProvider";
export const getCipherStreamProvider: typeof import("./getCipherStreamProvider").getCipherStreamProvider = null as any;
export const getCipherStreamProviderOutput: typeof import("./getCipherStreamProvider").getCipherStreamProviderOutput = null as any;
utilities.lazyLoad(exports, ["getCipherStreamProvider","getCipherStreamProviderOutput"], () => require("./getCipherStreamProvider"));

export { GetCipherStreamProvidersArgs, GetCipherStreamProvidersResult, GetCipherStreamProvidersOutputArgs } from "./getCipherStreamProviders";
export const getCipherStreamProviders: typeof import("./getCipherStreamProviders").getCipherStreamProviders = null as any;
export const getCipherStreamProvidersOutput: typeof import("./getCipherStreamProviders").getCipherStreamProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getCipherStreamProviders","getCipherStreamProvidersOutput"], () => require("./getCipherStreamProviders"));

export { GetClientConnectionPoliciesArgs, GetClientConnectionPoliciesResult, GetClientConnectionPoliciesOutputArgs } from "./getClientConnectionPolicies";
export const getClientConnectionPolicies: typeof import("./getClientConnectionPolicies").getClientConnectionPolicies = null as any;
export const getClientConnectionPoliciesOutput: typeof import("./getClientConnectionPolicies").getClientConnectionPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getClientConnectionPolicies","getClientConnectionPoliciesOutput"], () => require("./getClientConnectionPolicies"));

export { GetClientConnectionPolicyArgs, GetClientConnectionPolicyResult, GetClientConnectionPolicyOutputArgs } from "./getClientConnectionPolicy";
export const getClientConnectionPolicy: typeof import("./getClientConnectionPolicy").getClientConnectionPolicy = null as any;
export const getClientConnectionPolicyOutput: typeof import("./getClientConnectionPolicy").getClientConnectionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getClientConnectionPolicy","getClientConnectionPolicyOutput"], () => require("./getClientConnectionPolicy"));

export { GetConjurAuthenticationMethodArgs, GetConjurAuthenticationMethodResult, GetConjurAuthenticationMethodOutputArgs } from "./getConjurAuthenticationMethod";
export const getConjurAuthenticationMethod: typeof import("./getConjurAuthenticationMethod").getConjurAuthenticationMethod = null as any;
export const getConjurAuthenticationMethodOutput: typeof import("./getConjurAuthenticationMethod").getConjurAuthenticationMethodOutput = null as any;
utilities.lazyLoad(exports, ["getConjurAuthenticationMethod","getConjurAuthenticationMethodOutput"], () => require("./getConjurAuthenticationMethod"));

export { GetConjurAuthenticationMethodsArgs, GetConjurAuthenticationMethodsResult, GetConjurAuthenticationMethodsOutputArgs } from "./getConjurAuthenticationMethods";
export const getConjurAuthenticationMethods: typeof import("./getConjurAuthenticationMethods").getConjurAuthenticationMethods = null as any;
export const getConjurAuthenticationMethodsOutput: typeof import("./getConjurAuthenticationMethods").getConjurAuthenticationMethodsOutput = null as any;
utilities.lazyLoad(exports, ["getConjurAuthenticationMethods","getConjurAuthenticationMethodsOutput"], () => require("./getConjurAuthenticationMethods"));

export { GetConnectionCriteriaArgs, GetConnectionCriteriaResult, GetConnectionCriteriaOutputArgs } from "./getConnectionCriteria";
export const getConnectionCriteria: typeof import("./getConnectionCriteria").getConnectionCriteria = null as any;
export const getConnectionCriteriaOutput: typeof import("./getConnectionCriteria").getConnectionCriteriaOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionCriteria","getConnectionCriteriaOutput"], () => require("./getConnectionCriteria"));

export { GetConnectionCriteriaListArgs, GetConnectionCriteriaListResult, GetConnectionCriteriaListOutputArgs } from "./getConnectionCriteriaList";
export const getConnectionCriteriaList: typeof import("./getConnectionCriteriaList").getConnectionCriteriaList = null as any;
export const getConnectionCriteriaListOutput: typeof import("./getConnectionCriteriaList").getConnectionCriteriaListOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionCriteriaList","getConnectionCriteriaListOutput"], () => require("./getConnectionCriteriaList"));

export { GetConnectionHandlerArgs, GetConnectionHandlerResult, GetConnectionHandlerOutputArgs } from "./getConnectionHandler";
export const getConnectionHandler: typeof import("./getConnectionHandler").getConnectionHandler = null as any;
export const getConnectionHandlerOutput: typeof import("./getConnectionHandler").getConnectionHandlerOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionHandler","getConnectionHandlerOutput"], () => require("./getConnectionHandler"));

export { GetConnectionHandlersArgs, GetConnectionHandlersResult, GetConnectionHandlersOutputArgs } from "./getConnectionHandlers";
export const getConnectionHandlers: typeof import("./getConnectionHandlers").getConnectionHandlers = null as any;
export const getConnectionHandlersOutput: typeof import("./getConnectionHandlers").getConnectionHandlersOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionHandlers","getConnectionHandlersOutput"], () => require("./getConnectionHandlers"));

export { GetConsentDefinitionArgs, GetConsentDefinitionResult, GetConsentDefinitionOutputArgs } from "./getConsentDefinition";
export const getConsentDefinition: typeof import("./getConsentDefinition").getConsentDefinition = null as any;
export const getConsentDefinitionOutput: typeof import("./getConsentDefinition").getConsentDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getConsentDefinition","getConsentDefinitionOutput"], () => require("./getConsentDefinition"));

export { GetConsentDefinitionLocalizationArgs, GetConsentDefinitionLocalizationResult, GetConsentDefinitionLocalizationOutputArgs } from "./getConsentDefinitionLocalization";
export const getConsentDefinitionLocalization: typeof import("./getConsentDefinitionLocalization").getConsentDefinitionLocalization = null as any;
export const getConsentDefinitionLocalizationOutput: typeof import("./getConsentDefinitionLocalization").getConsentDefinitionLocalizationOutput = null as any;
utilities.lazyLoad(exports, ["getConsentDefinitionLocalization","getConsentDefinitionLocalizationOutput"], () => require("./getConsentDefinitionLocalization"));

export { GetConsentDefinitionLocalizationsArgs, GetConsentDefinitionLocalizationsResult, GetConsentDefinitionLocalizationsOutputArgs } from "./getConsentDefinitionLocalizations";
export const getConsentDefinitionLocalizations: typeof import("./getConsentDefinitionLocalizations").getConsentDefinitionLocalizations = null as any;
export const getConsentDefinitionLocalizationsOutput: typeof import("./getConsentDefinitionLocalizations").getConsentDefinitionLocalizationsOutput = null as any;
utilities.lazyLoad(exports, ["getConsentDefinitionLocalizations","getConsentDefinitionLocalizationsOutput"], () => require("./getConsentDefinitionLocalizations"));

export { GetConsentDefinitionsArgs, GetConsentDefinitionsResult, GetConsentDefinitionsOutputArgs } from "./getConsentDefinitions";
export const getConsentDefinitions: typeof import("./getConsentDefinitions").getConsentDefinitions = null as any;
export const getConsentDefinitionsOutput: typeof import("./getConsentDefinitions").getConsentDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getConsentDefinitions","getConsentDefinitionsOutput"], () => require("./getConsentDefinitions"));

export { GetConsentServiceResult } from "./getConsentService";
export const getConsentService: typeof import("./getConsentService").getConsentService = null as any;
export const getConsentServiceOutput: typeof import("./getConsentService").getConsentServiceOutput = null as any;
utilities.lazyLoad(exports, ["getConsentService","getConsentServiceOutput"], () => require("./getConsentService"));

export { GetConstructedAttributeArgs, GetConstructedAttributeResult, GetConstructedAttributeOutputArgs } from "./getConstructedAttribute";
export const getConstructedAttribute: typeof import("./getConstructedAttribute").getConstructedAttribute = null as any;
export const getConstructedAttributeOutput: typeof import("./getConstructedAttribute").getConstructedAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getConstructedAttribute","getConstructedAttributeOutput"], () => require("./getConstructedAttribute"));

export { GetConstructedAttributesArgs, GetConstructedAttributesResult, GetConstructedAttributesOutputArgs } from "./getConstructedAttributes";
export const getConstructedAttributes: typeof import("./getConstructedAttributes").getConstructedAttributes = null as any;
export const getConstructedAttributesOutput: typeof import("./getConstructedAttributes").getConstructedAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getConstructedAttributes","getConstructedAttributesOutput"], () => require("./getConstructedAttributes"));

export { GetCorrelatedLdapDataViewArgs, GetCorrelatedLdapDataViewResult, GetCorrelatedLdapDataViewOutputArgs } from "./getCorrelatedLdapDataView";
export const getCorrelatedLdapDataView: typeof import("./getCorrelatedLdapDataView").getCorrelatedLdapDataView = null as any;
export const getCorrelatedLdapDataViewOutput: typeof import("./getCorrelatedLdapDataView").getCorrelatedLdapDataViewOutput = null as any;
utilities.lazyLoad(exports, ["getCorrelatedLdapDataView","getCorrelatedLdapDataViewOutput"], () => require("./getCorrelatedLdapDataView"));

export { GetCorrelatedLdapDataViewsArgs, GetCorrelatedLdapDataViewsResult, GetCorrelatedLdapDataViewsOutputArgs } from "./getCorrelatedLdapDataViews";
export const getCorrelatedLdapDataViews: typeof import("./getCorrelatedLdapDataViews").getCorrelatedLdapDataViews = null as any;
export const getCorrelatedLdapDataViewsOutput: typeof import("./getCorrelatedLdapDataViews").getCorrelatedLdapDataViewsOutput = null as any;
utilities.lazyLoad(exports, ["getCorrelatedLdapDataViews","getCorrelatedLdapDataViewsOutput"], () => require("./getCorrelatedLdapDataViews"));

export { GetCryptoManagerResult } from "./getCryptoManager";
export const getCryptoManager: typeof import("./getCryptoManager").getCryptoManager = null as any;
export const getCryptoManagerOutput: typeof import("./getCryptoManager").getCryptoManagerOutput = null as any;
utilities.lazyLoad(exports, ["getCryptoManager","getCryptoManagerOutput"], () => require("./getCryptoManager"));

export { GetCustomLoggedStatsArgs, GetCustomLoggedStatsResult, GetCustomLoggedStatsOutputArgs } from "./getCustomLoggedStats";
export const getCustomLoggedStats: typeof import("./getCustomLoggedStats").getCustomLoggedStats = null as any;
export const getCustomLoggedStatsOutput: typeof import("./getCustomLoggedStats").getCustomLoggedStatsOutput = null as any;
utilities.lazyLoad(exports, ["getCustomLoggedStats","getCustomLoggedStatsOutput"], () => require("./getCustomLoggedStats"));

export { GetCustomLoggedStatsListArgs, GetCustomLoggedStatsListResult, GetCustomLoggedStatsListOutputArgs } from "./getCustomLoggedStatsList";
export const getCustomLoggedStatsList: typeof import("./getCustomLoggedStatsList").getCustomLoggedStatsList = null as any;
export const getCustomLoggedStatsListOutput: typeof import("./getCustomLoggedStatsList").getCustomLoggedStatsListOutput = null as any;
utilities.lazyLoad(exports, ["getCustomLoggedStatsList","getCustomLoggedStatsListOutput"], () => require("./getCustomLoggedStatsList"));

export { GetDataSecurityAuditorArgs, GetDataSecurityAuditorResult, GetDataSecurityAuditorOutputArgs } from "./getDataSecurityAuditor";
export const getDataSecurityAuditor: typeof import("./getDataSecurityAuditor").getDataSecurityAuditor = null as any;
export const getDataSecurityAuditorOutput: typeof import("./getDataSecurityAuditor").getDataSecurityAuditorOutput = null as any;
utilities.lazyLoad(exports, ["getDataSecurityAuditor","getDataSecurityAuditorOutput"], () => require("./getDataSecurityAuditor"));

export { GetDataSecurityAuditorsArgs, GetDataSecurityAuditorsResult, GetDataSecurityAuditorsOutputArgs } from "./getDataSecurityAuditors";
export const getDataSecurityAuditors: typeof import("./getDataSecurityAuditors").getDataSecurityAuditors = null as any;
export const getDataSecurityAuditorsOutput: typeof import("./getDataSecurityAuditors").getDataSecurityAuditorsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSecurityAuditors","getDataSecurityAuditorsOutput"], () => require("./getDataSecurityAuditors"));

export { GetDebugTargetArgs, GetDebugTargetResult, GetDebugTargetOutputArgs } from "./getDebugTarget";
export const getDebugTarget: typeof import("./getDebugTarget").getDebugTarget = null as any;
export const getDebugTargetOutput: typeof import("./getDebugTarget").getDebugTargetOutput = null as any;
utilities.lazyLoad(exports, ["getDebugTarget","getDebugTargetOutput"], () => require("./getDebugTarget"));

export { GetDebugTargetsArgs, GetDebugTargetsResult, GetDebugTargetsOutputArgs } from "./getDebugTargets";
export const getDebugTargets: typeof import("./getDebugTargets").getDebugTargets = null as any;
export const getDebugTargetsOutput: typeof import("./getDebugTargets").getDebugTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getDebugTargets","getDebugTargetsOutput"], () => require("./getDebugTargets"));

export { GetDelegatedAdminAttributeArgs, GetDelegatedAdminAttributeResult, GetDelegatedAdminAttributeOutputArgs } from "./getDelegatedAdminAttribute";
export const getDelegatedAdminAttribute: typeof import("./getDelegatedAdminAttribute").getDelegatedAdminAttribute = null as any;
export const getDelegatedAdminAttributeOutput: typeof import("./getDelegatedAdminAttribute").getDelegatedAdminAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getDelegatedAdminAttribute","getDelegatedAdminAttributeOutput"], () => require("./getDelegatedAdminAttribute"));

export { GetDelegatedAdminAttributeCategoriesArgs, GetDelegatedAdminAttributeCategoriesResult, GetDelegatedAdminAttributeCategoriesOutputArgs } from "./getDelegatedAdminAttributeCategories";
export const getDelegatedAdminAttributeCategories: typeof import("./getDelegatedAdminAttributeCategories").getDelegatedAdminAttributeCategories = null as any;
export const getDelegatedAdminAttributeCategoriesOutput: typeof import("./getDelegatedAdminAttributeCategories").getDelegatedAdminAttributeCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getDelegatedAdminAttributeCategories","getDelegatedAdminAttributeCategoriesOutput"], () => require("./getDelegatedAdminAttributeCategories"));

export { GetDelegatedAdminAttributeCategoryArgs, GetDelegatedAdminAttributeCategoryResult, GetDelegatedAdminAttributeCategoryOutputArgs } from "./getDelegatedAdminAttributeCategory";
export const getDelegatedAdminAttributeCategory: typeof import("./getDelegatedAdminAttributeCategory").getDelegatedAdminAttributeCategory = null as any;
export const getDelegatedAdminAttributeCategoryOutput: typeof import("./getDelegatedAdminAttributeCategory").getDelegatedAdminAttributeCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getDelegatedAdminAttributeCategory","getDelegatedAdminAttributeCategoryOutput"], () => require("./getDelegatedAdminAttributeCategory"));

export { GetDelegatedAdminAttributesArgs, GetDelegatedAdminAttributesResult, GetDelegatedAdminAttributesOutputArgs } from "./getDelegatedAdminAttributes";
export const getDelegatedAdminAttributes: typeof import("./getDelegatedAdminAttributes").getDelegatedAdminAttributes = null as any;
export const getDelegatedAdminAttributesOutput: typeof import("./getDelegatedAdminAttributes").getDelegatedAdminAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getDelegatedAdminAttributes","getDelegatedAdminAttributesOutput"], () => require("./getDelegatedAdminAttributes"));

export { GetDelegatedAdminCorrelatedRestResourceArgs, GetDelegatedAdminCorrelatedRestResourceResult, GetDelegatedAdminCorrelatedRestResourceOutputArgs } from "./getDelegatedAdminCorrelatedRestResource";
export const getDelegatedAdminCorrelatedRestResource: typeof import("./getDelegatedAdminCorrelatedRestResource").getDelegatedAdminCorrelatedRestResource = null as any;
export const getDelegatedAdminCorrelatedRestResourceOutput: typeof import("./getDelegatedAdminCorrelatedRestResource").getDelegatedAdminCorrelatedRestResourceOutput = null as any;
utilities.lazyLoad(exports, ["getDelegatedAdminCorrelatedRestResource","getDelegatedAdminCorrelatedRestResourceOutput"], () => require("./getDelegatedAdminCorrelatedRestResource"));

export { GetDelegatedAdminCorrelatedRestResourcesArgs, GetDelegatedAdminCorrelatedRestResourcesResult, GetDelegatedAdminCorrelatedRestResourcesOutputArgs } from "./getDelegatedAdminCorrelatedRestResources";
export const getDelegatedAdminCorrelatedRestResources: typeof import("./getDelegatedAdminCorrelatedRestResources").getDelegatedAdminCorrelatedRestResources = null as any;
export const getDelegatedAdminCorrelatedRestResourcesOutput: typeof import("./getDelegatedAdminCorrelatedRestResources").getDelegatedAdminCorrelatedRestResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getDelegatedAdminCorrelatedRestResources","getDelegatedAdminCorrelatedRestResourcesOutput"], () => require("./getDelegatedAdminCorrelatedRestResources"));

export { GetDelegatedAdminResourceRightsArgs, GetDelegatedAdminResourceRightsResult, GetDelegatedAdminResourceRightsOutputArgs } from "./getDelegatedAdminResourceRights";
export const getDelegatedAdminResourceRights: typeof import("./getDelegatedAdminResourceRights").getDelegatedAdminResourceRights = null as any;
export const getDelegatedAdminResourceRightsOutput: typeof import("./getDelegatedAdminResourceRights").getDelegatedAdminResourceRightsOutput = null as any;
utilities.lazyLoad(exports, ["getDelegatedAdminResourceRights","getDelegatedAdminResourceRightsOutput"], () => require("./getDelegatedAdminResourceRights"));

export { GetDelegatedAdminResourceRightsListArgs, GetDelegatedAdminResourceRightsListResult, GetDelegatedAdminResourceRightsListOutputArgs } from "./getDelegatedAdminResourceRightsList";
export const getDelegatedAdminResourceRightsList: typeof import("./getDelegatedAdminResourceRightsList").getDelegatedAdminResourceRightsList = null as any;
export const getDelegatedAdminResourceRightsListOutput: typeof import("./getDelegatedAdminResourceRightsList").getDelegatedAdminResourceRightsListOutput = null as any;
utilities.lazyLoad(exports, ["getDelegatedAdminResourceRightsList","getDelegatedAdminResourceRightsListOutput"], () => require("./getDelegatedAdminResourceRightsList"));

export { GetDelegatedAdminRightsArgs, GetDelegatedAdminRightsResult, GetDelegatedAdminRightsOutputArgs } from "./getDelegatedAdminRights";
export const getDelegatedAdminRights: typeof import("./getDelegatedAdminRights").getDelegatedAdminRights = null as any;
export const getDelegatedAdminRightsOutput: typeof import("./getDelegatedAdminRights").getDelegatedAdminRightsOutput = null as any;
utilities.lazyLoad(exports, ["getDelegatedAdminRights","getDelegatedAdminRightsOutput"], () => require("./getDelegatedAdminRights"));

export { GetDelegatedAdminRightsListArgs, GetDelegatedAdminRightsListResult, GetDelegatedAdminRightsListOutputArgs } from "./getDelegatedAdminRightsList";
export const getDelegatedAdminRightsList: typeof import("./getDelegatedAdminRightsList").getDelegatedAdminRightsList = null as any;
export const getDelegatedAdminRightsListOutput: typeof import("./getDelegatedAdminRightsList").getDelegatedAdminRightsListOutput = null as any;
utilities.lazyLoad(exports, ["getDelegatedAdminRightsList","getDelegatedAdminRightsListOutput"], () => require("./getDelegatedAdminRightsList"));

export { GetDnMapArgs, GetDnMapResult, GetDnMapOutputArgs } from "./getDnMap";
export const getDnMap: typeof import("./getDnMap").getDnMap = null as any;
export const getDnMapOutput: typeof import("./getDnMap").getDnMapOutput = null as any;
utilities.lazyLoad(exports, ["getDnMap","getDnMapOutput"], () => require("./getDnMap"));

export { GetDnMapsArgs, GetDnMapsResult, GetDnMapsOutputArgs } from "./getDnMaps";
export const getDnMaps: typeof import("./getDnMaps").getDnMaps = null as any;
export const getDnMapsOutput: typeof import("./getDnMaps").getDnMapsOutput = null as any;
utilities.lazyLoad(exports, ["getDnMaps","getDnMapsOutput"], () => require("./getDnMaps"));

export { GetEntryCacheArgs, GetEntryCacheResult, GetEntryCacheOutputArgs } from "./getEntryCache";
export const getEntryCache: typeof import("./getEntryCache").getEntryCache = null as any;
export const getEntryCacheOutput: typeof import("./getEntryCache").getEntryCacheOutput = null as any;
utilities.lazyLoad(exports, ["getEntryCache","getEntryCacheOutput"], () => require("./getEntryCache"));

export { GetEntryCachesArgs, GetEntryCachesResult, GetEntryCachesOutputArgs } from "./getEntryCaches";
export const getEntryCaches: typeof import("./getEntryCaches").getEntryCaches = null as any;
export const getEntryCachesOutput: typeof import("./getEntryCaches").getEntryCachesOutput = null as any;
utilities.lazyLoad(exports, ["getEntryCaches","getEntryCachesOutput"], () => require("./getEntryCaches"));

export { GetExtendedOperationHandlerArgs, GetExtendedOperationHandlerResult, GetExtendedOperationHandlerOutputArgs } from "./getExtendedOperationHandler";
export const getExtendedOperationHandler: typeof import("./getExtendedOperationHandler").getExtendedOperationHandler = null as any;
export const getExtendedOperationHandlerOutput: typeof import("./getExtendedOperationHandler").getExtendedOperationHandlerOutput = null as any;
utilities.lazyLoad(exports, ["getExtendedOperationHandler","getExtendedOperationHandlerOutput"], () => require("./getExtendedOperationHandler"));

export { GetExtendedOperationHandlersArgs, GetExtendedOperationHandlersResult, GetExtendedOperationHandlersOutputArgs } from "./getExtendedOperationHandlers";
export const getExtendedOperationHandlers: typeof import("./getExtendedOperationHandlers").getExtendedOperationHandlers = null as any;
export const getExtendedOperationHandlersOutput: typeof import("./getExtendedOperationHandlers").getExtendedOperationHandlersOutput = null as any;
utilities.lazyLoad(exports, ["getExtendedOperationHandlers","getExtendedOperationHandlersOutput"], () => require("./getExtendedOperationHandlers"));

export { GetExternalServerArgs, GetExternalServerResult, GetExternalServerOutputArgs } from "./getExternalServer";
export const getExternalServer: typeof import("./getExternalServer").getExternalServer = null as any;
export const getExternalServerOutput: typeof import("./getExternalServer").getExternalServerOutput = null as any;
utilities.lazyLoad(exports, ["getExternalServer","getExternalServerOutput"], () => require("./getExternalServer"));

export { GetExternalServersArgs, GetExternalServersResult, GetExternalServersOutputArgs } from "./getExternalServers";
export const getExternalServers: typeof import("./getExternalServers").getExternalServers = null as any;
export const getExternalServersOutput: typeof import("./getExternalServers").getExternalServersOutput = null as any;
utilities.lazyLoad(exports, ["getExternalServers","getExternalServersOutput"], () => require("./getExternalServers"));

export { GetFailureLockoutActionArgs, GetFailureLockoutActionResult, GetFailureLockoutActionOutputArgs } from "./getFailureLockoutAction";
export const getFailureLockoutAction: typeof import("./getFailureLockoutAction").getFailureLockoutAction = null as any;
export const getFailureLockoutActionOutput: typeof import("./getFailureLockoutAction").getFailureLockoutActionOutput = null as any;
utilities.lazyLoad(exports, ["getFailureLockoutAction","getFailureLockoutActionOutput"], () => require("./getFailureLockoutAction"));

export { GetFailureLockoutActionsArgs, GetFailureLockoutActionsResult, GetFailureLockoutActionsOutputArgs } from "./getFailureLockoutActions";
export const getFailureLockoutActions: typeof import("./getFailureLockoutActions").getFailureLockoutActions = null as any;
export const getFailureLockoutActionsOutput: typeof import("./getFailureLockoutActions").getFailureLockoutActionsOutput = null as any;
utilities.lazyLoad(exports, ["getFailureLockoutActions","getFailureLockoutActionsOutput"], () => require("./getFailureLockoutActions"));

export { GetGaugeArgs, GetGaugeResult, GetGaugeOutputArgs } from "./getGauge";
export const getGauge: typeof import("./getGauge").getGauge = null as any;
export const getGaugeOutput: typeof import("./getGauge").getGaugeOutput = null as any;
utilities.lazyLoad(exports, ["getGauge","getGaugeOutput"], () => require("./getGauge"));

export { GetGaugeDataSourceArgs, GetGaugeDataSourceResult, GetGaugeDataSourceOutputArgs } from "./getGaugeDataSource";
export const getGaugeDataSource: typeof import("./getGaugeDataSource").getGaugeDataSource = null as any;
export const getGaugeDataSourceOutput: typeof import("./getGaugeDataSource").getGaugeDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getGaugeDataSource","getGaugeDataSourceOutput"], () => require("./getGaugeDataSource"));

export { GetGaugeDataSourcesArgs, GetGaugeDataSourcesResult, GetGaugeDataSourcesOutputArgs } from "./getGaugeDataSources";
export const getGaugeDataSources: typeof import("./getGaugeDataSources").getGaugeDataSources = null as any;
export const getGaugeDataSourcesOutput: typeof import("./getGaugeDataSources").getGaugeDataSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getGaugeDataSources","getGaugeDataSourcesOutput"], () => require("./getGaugeDataSources"));

export { GetGaugesArgs, GetGaugesResult, GetGaugesOutputArgs } from "./getGauges";
export const getGauges: typeof import("./getGauges").getGauges = null as any;
export const getGaugesOutput: typeof import("./getGauges").getGaugesOutput = null as any;
utilities.lazyLoad(exports, ["getGauges","getGaugesOutput"], () => require("./getGauges"));

export { GetGlobalConfigurationResult } from "./getGlobalConfiguration";
export const getGlobalConfiguration: typeof import("./getGlobalConfiguration").getGlobalConfiguration = null as any;
export const getGlobalConfigurationOutput: typeof import("./getGlobalConfiguration").getGlobalConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalConfiguration","getGlobalConfigurationOutput"], () => require("./getGlobalConfiguration"));

export { GetGroupImplementationArgs, GetGroupImplementationResult, GetGroupImplementationOutputArgs } from "./getGroupImplementation";
export const getGroupImplementation: typeof import("./getGroupImplementation").getGroupImplementation = null as any;
export const getGroupImplementationOutput: typeof import("./getGroupImplementation").getGroupImplementationOutput = null as any;
utilities.lazyLoad(exports, ["getGroupImplementation","getGroupImplementationOutput"], () => require("./getGroupImplementation"));

export { GetGroupImplementationsArgs, GetGroupImplementationsResult, GetGroupImplementationsOutputArgs } from "./getGroupImplementations";
export const getGroupImplementations: typeof import("./getGroupImplementations").getGroupImplementations = null as any;
export const getGroupImplementationsOutput: typeof import("./getGroupImplementations").getGroupImplementationsOutput = null as any;
utilities.lazyLoad(exports, ["getGroupImplementations","getGroupImplementationsOutput"], () => require("./getGroupImplementations"));

export { GetHttpConfigurationResult } from "./getHttpConfiguration";
export const getHttpConfiguration: typeof import("./getHttpConfiguration").getHttpConfiguration = null as any;
export const getHttpConfigurationOutput: typeof import("./getHttpConfiguration").getHttpConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getHttpConfiguration","getHttpConfigurationOutput"], () => require("./getHttpConfiguration"));

export { GetHttpServletCrossOriginPoliciesArgs, GetHttpServletCrossOriginPoliciesResult, GetHttpServletCrossOriginPoliciesOutputArgs } from "./getHttpServletCrossOriginPolicies";
export const getHttpServletCrossOriginPolicies: typeof import("./getHttpServletCrossOriginPolicies").getHttpServletCrossOriginPolicies = null as any;
export const getHttpServletCrossOriginPoliciesOutput: typeof import("./getHttpServletCrossOriginPolicies").getHttpServletCrossOriginPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getHttpServletCrossOriginPolicies","getHttpServletCrossOriginPoliciesOutput"], () => require("./getHttpServletCrossOriginPolicies"));

export { GetHttpServletCrossOriginPolicyArgs, GetHttpServletCrossOriginPolicyResult, GetHttpServletCrossOriginPolicyOutputArgs } from "./getHttpServletCrossOriginPolicy";
export const getHttpServletCrossOriginPolicy: typeof import("./getHttpServletCrossOriginPolicy").getHttpServletCrossOriginPolicy = null as any;
export const getHttpServletCrossOriginPolicyOutput: typeof import("./getHttpServletCrossOriginPolicy").getHttpServletCrossOriginPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHttpServletCrossOriginPolicy","getHttpServletCrossOriginPolicyOutput"], () => require("./getHttpServletCrossOriginPolicy"));

export { GetHttpServletExtensionArgs, GetHttpServletExtensionResult, GetHttpServletExtensionOutputArgs } from "./getHttpServletExtension";
export const getHttpServletExtension: typeof import("./getHttpServletExtension").getHttpServletExtension = null as any;
export const getHttpServletExtensionOutput: typeof import("./getHttpServletExtension").getHttpServletExtensionOutput = null as any;
utilities.lazyLoad(exports, ["getHttpServletExtension","getHttpServletExtensionOutput"], () => require("./getHttpServletExtension"));

export { GetHttpServletExtensionsArgs, GetHttpServletExtensionsResult, GetHttpServletExtensionsOutputArgs } from "./getHttpServletExtensions";
export const getHttpServletExtensions: typeof import("./getHttpServletExtensions").getHttpServletExtensions = null as any;
export const getHttpServletExtensionsOutput: typeof import("./getHttpServletExtensions").getHttpServletExtensionsOutput = null as any;
utilities.lazyLoad(exports, ["getHttpServletExtensions","getHttpServletExtensionsOutput"], () => require("./getHttpServletExtensions"));

export { GetIdTokenValidatorArgs, GetIdTokenValidatorResult, GetIdTokenValidatorOutputArgs } from "./getIdTokenValidator";
export const getIdTokenValidator: typeof import("./getIdTokenValidator").getIdTokenValidator = null as any;
export const getIdTokenValidatorOutput: typeof import("./getIdTokenValidator").getIdTokenValidatorOutput = null as any;
utilities.lazyLoad(exports, ["getIdTokenValidator","getIdTokenValidatorOutput"], () => require("./getIdTokenValidator"));

export { GetIdTokenValidatorsArgs, GetIdTokenValidatorsResult, GetIdTokenValidatorsOutputArgs } from "./getIdTokenValidators";
export const getIdTokenValidators: typeof import("./getIdTokenValidators").getIdTokenValidators = null as any;
export const getIdTokenValidatorsOutput: typeof import("./getIdTokenValidators").getIdTokenValidatorsOutput = null as any;
utilities.lazyLoad(exports, ["getIdTokenValidators","getIdTokenValidatorsOutput"], () => require("./getIdTokenValidators"));

export { GetIdentityMapperArgs, GetIdentityMapperResult, GetIdentityMapperOutputArgs } from "./getIdentityMapper";
export const getIdentityMapper: typeof import("./getIdentityMapper").getIdentityMapper = null as any;
export const getIdentityMapperOutput: typeof import("./getIdentityMapper").getIdentityMapperOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityMapper","getIdentityMapperOutput"], () => require("./getIdentityMapper"));

export { GetIdentityMappersArgs, GetIdentityMappersResult, GetIdentityMappersOutputArgs } from "./getIdentityMappers";
export const getIdentityMappers: typeof import("./getIdentityMappers").getIdentityMappers = null as any;
export const getIdentityMappersOutput: typeof import("./getIdentityMappers").getIdentityMappersOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityMappers","getIdentityMappersOutput"], () => require("./getIdentityMappers"));

export { GetInterServerAuthenticationInfoArgs, GetInterServerAuthenticationInfoResult, GetInterServerAuthenticationInfoOutputArgs } from "./getInterServerAuthenticationInfo";
export const getInterServerAuthenticationInfo: typeof import("./getInterServerAuthenticationInfo").getInterServerAuthenticationInfo = null as any;
export const getInterServerAuthenticationInfoOutput: typeof import("./getInterServerAuthenticationInfo").getInterServerAuthenticationInfoOutput = null as any;
utilities.lazyLoad(exports, ["getInterServerAuthenticationInfo","getInterServerAuthenticationInfoOutput"], () => require("./getInterServerAuthenticationInfo"));

export { GetInterServerAuthenticationInfoListArgs, GetInterServerAuthenticationInfoListResult, GetInterServerAuthenticationInfoListOutputArgs } from "./getInterServerAuthenticationInfoList";
export const getInterServerAuthenticationInfoList: typeof import("./getInterServerAuthenticationInfoList").getInterServerAuthenticationInfoList = null as any;
export const getInterServerAuthenticationInfoListOutput: typeof import("./getInterServerAuthenticationInfoList").getInterServerAuthenticationInfoListOutput = null as any;
utilities.lazyLoad(exports, ["getInterServerAuthenticationInfoList","getInterServerAuthenticationInfoListOutput"], () => require("./getInterServerAuthenticationInfoList"));

export { GetJsonAttributeConstraintsArgs, GetJsonAttributeConstraintsResult, GetJsonAttributeConstraintsOutputArgs } from "./getJsonAttributeConstraints";
export const getJsonAttributeConstraints: typeof import("./getJsonAttributeConstraints").getJsonAttributeConstraints = null as any;
export const getJsonAttributeConstraintsOutput: typeof import("./getJsonAttributeConstraints").getJsonAttributeConstraintsOutput = null as any;
utilities.lazyLoad(exports, ["getJsonAttributeConstraints","getJsonAttributeConstraintsOutput"], () => require("./getJsonAttributeConstraints"));

export { GetJsonAttributeConstraintsListArgs, GetJsonAttributeConstraintsListResult, GetJsonAttributeConstraintsListOutputArgs } from "./getJsonAttributeConstraintsList";
export const getJsonAttributeConstraintsList: typeof import("./getJsonAttributeConstraintsList").getJsonAttributeConstraintsList = null as any;
export const getJsonAttributeConstraintsListOutput: typeof import("./getJsonAttributeConstraintsList").getJsonAttributeConstraintsListOutput = null as any;
utilities.lazyLoad(exports, ["getJsonAttributeConstraintsList","getJsonAttributeConstraintsListOutput"], () => require("./getJsonAttributeConstraintsList"));

export { GetJsonFieldConstraintsArgs, GetJsonFieldConstraintsResult, GetJsonFieldConstraintsOutputArgs } from "./getJsonFieldConstraints";
export const getJsonFieldConstraints: typeof import("./getJsonFieldConstraints").getJsonFieldConstraints = null as any;
export const getJsonFieldConstraintsOutput: typeof import("./getJsonFieldConstraints").getJsonFieldConstraintsOutput = null as any;
utilities.lazyLoad(exports, ["getJsonFieldConstraints","getJsonFieldConstraintsOutput"], () => require("./getJsonFieldConstraints"));

export { GetJsonFieldConstraintsListArgs, GetJsonFieldConstraintsListResult, GetJsonFieldConstraintsListOutputArgs } from "./getJsonFieldConstraintsList";
export const getJsonFieldConstraintsList: typeof import("./getJsonFieldConstraintsList").getJsonFieldConstraintsList = null as any;
export const getJsonFieldConstraintsListOutput: typeof import("./getJsonFieldConstraintsList").getJsonFieldConstraintsListOutput = null as any;
utilities.lazyLoad(exports, ["getJsonFieldConstraintsList","getJsonFieldConstraintsListOutput"], () => require("./getJsonFieldConstraintsList"));

export { GetKeyManagerProviderArgs, GetKeyManagerProviderResult, GetKeyManagerProviderOutputArgs } from "./getKeyManagerProvider";
export const getKeyManagerProvider: typeof import("./getKeyManagerProvider").getKeyManagerProvider = null as any;
export const getKeyManagerProviderOutput: typeof import("./getKeyManagerProvider").getKeyManagerProviderOutput = null as any;
utilities.lazyLoad(exports, ["getKeyManagerProvider","getKeyManagerProviderOutput"], () => require("./getKeyManagerProvider"));

export { GetKeyManagerProvidersArgs, GetKeyManagerProvidersResult, GetKeyManagerProvidersOutputArgs } from "./getKeyManagerProviders";
export const getKeyManagerProviders: typeof import("./getKeyManagerProviders").getKeyManagerProviders = null as any;
export const getKeyManagerProvidersOutput: typeof import("./getKeyManagerProviders").getKeyManagerProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getKeyManagerProviders","getKeyManagerProvidersOutput"], () => require("./getKeyManagerProviders"));

export { GetKeyPairArgs, GetKeyPairResult, GetKeyPairOutputArgs } from "./getKeyPair";
export const getKeyPair: typeof import("./getKeyPair").getKeyPair = null as any;
export const getKeyPairOutput: typeof import("./getKeyPair").getKeyPairOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPair","getKeyPairOutput"], () => require("./getKeyPair"));

export { GetKeyPairsArgs, GetKeyPairsResult, GetKeyPairsOutputArgs } from "./getKeyPairs";
export const getKeyPairs: typeof import("./getKeyPairs").getKeyPairs = null as any;
export const getKeyPairsOutput: typeof import("./getKeyPairs").getKeyPairsOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPairs","getKeyPairsOutput"], () => require("./getKeyPairs"));

export { GetLdapCorrelationAttributePairArgs, GetLdapCorrelationAttributePairResult, GetLdapCorrelationAttributePairOutputArgs } from "./getLdapCorrelationAttributePair";
export const getLdapCorrelationAttributePair: typeof import("./getLdapCorrelationAttributePair").getLdapCorrelationAttributePair = null as any;
export const getLdapCorrelationAttributePairOutput: typeof import("./getLdapCorrelationAttributePair").getLdapCorrelationAttributePairOutput = null as any;
utilities.lazyLoad(exports, ["getLdapCorrelationAttributePair","getLdapCorrelationAttributePairOutput"], () => require("./getLdapCorrelationAttributePair"));

export { GetLdapCorrelationAttributePairsArgs, GetLdapCorrelationAttributePairsResult, GetLdapCorrelationAttributePairsOutputArgs } from "./getLdapCorrelationAttributePairs";
export const getLdapCorrelationAttributePairs: typeof import("./getLdapCorrelationAttributePairs").getLdapCorrelationAttributePairs = null as any;
export const getLdapCorrelationAttributePairsOutput: typeof import("./getLdapCorrelationAttributePairs").getLdapCorrelationAttributePairsOutput = null as any;
utilities.lazyLoad(exports, ["getLdapCorrelationAttributePairs","getLdapCorrelationAttributePairsOutput"], () => require("./getLdapCorrelationAttributePairs"));

export { GetLdapSdkDebugLoggerResult } from "./getLdapSdkDebugLogger";
export const getLdapSdkDebugLogger: typeof import("./getLdapSdkDebugLogger").getLdapSdkDebugLogger = null as any;
export const getLdapSdkDebugLoggerOutput: typeof import("./getLdapSdkDebugLogger").getLdapSdkDebugLoggerOutput = null as any;
utilities.lazyLoad(exports, ["getLdapSdkDebugLogger","getLdapSdkDebugLoggerOutput"], () => require("./getLdapSdkDebugLogger"));

export { GetLicenseResult } from "./getLicense";
export const getLicense: typeof import("./getLicense").getLicense = null as any;
export const getLicenseOutput: typeof import("./getLicense").getLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getLicense","getLicenseOutput"], () => require("./getLicense"));

export { GetLocalDbCompositeIndexArgs, GetLocalDbCompositeIndexResult, GetLocalDbCompositeIndexOutputArgs } from "./getLocalDbCompositeIndex";
export const getLocalDbCompositeIndex: typeof import("./getLocalDbCompositeIndex").getLocalDbCompositeIndex = null as any;
export const getLocalDbCompositeIndexOutput: typeof import("./getLocalDbCompositeIndex").getLocalDbCompositeIndexOutput = null as any;
utilities.lazyLoad(exports, ["getLocalDbCompositeIndex","getLocalDbCompositeIndexOutput"], () => require("./getLocalDbCompositeIndex"));

export { GetLocalDbCompositeIndexesArgs, GetLocalDbCompositeIndexesResult, GetLocalDbCompositeIndexesOutputArgs } from "./getLocalDbCompositeIndexes";
export const getLocalDbCompositeIndexes: typeof import("./getLocalDbCompositeIndexes").getLocalDbCompositeIndexes = null as any;
export const getLocalDbCompositeIndexesOutput: typeof import("./getLocalDbCompositeIndexes").getLocalDbCompositeIndexesOutput = null as any;
utilities.lazyLoad(exports, ["getLocalDbCompositeIndexes","getLocalDbCompositeIndexesOutput"], () => require("./getLocalDbCompositeIndexes"));

export { GetLocalDbIndexArgs, GetLocalDbIndexResult, GetLocalDbIndexOutputArgs } from "./getLocalDbIndex";
export const getLocalDbIndex: typeof import("./getLocalDbIndex").getLocalDbIndex = null as any;
export const getLocalDbIndexOutput: typeof import("./getLocalDbIndex").getLocalDbIndexOutput = null as any;
utilities.lazyLoad(exports, ["getLocalDbIndex","getLocalDbIndexOutput"], () => require("./getLocalDbIndex"));

export { GetLocalDbIndexesArgs, GetLocalDbIndexesResult, GetLocalDbIndexesOutputArgs } from "./getLocalDbIndexes";
export const getLocalDbIndexes: typeof import("./getLocalDbIndexes").getLocalDbIndexes = null as any;
export const getLocalDbIndexesOutput: typeof import("./getLocalDbIndexes").getLocalDbIndexesOutput = null as any;
utilities.lazyLoad(exports, ["getLocalDbIndexes","getLocalDbIndexesOutput"], () => require("./getLocalDbIndexes"));

export { GetLocalDbVlvIndexArgs, GetLocalDbVlvIndexResult, GetLocalDbVlvIndexOutputArgs } from "./getLocalDbVlvIndex";
export const getLocalDbVlvIndex: typeof import("./getLocalDbVlvIndex").getLocalDbVlvIndex = null as any;
export const getLocalDbVlvIndexOutput: typeof import("./getLocalDbVlvIndex").getLocalDbVlvIndexOutput = null as any;
utilities.lazyLoad(exports, ["getLocalDbVlvIndex","getLocalDbVlvIndexOutput"], () => require("./getLocalDbVlvIndex"));

export { GetLocalDbVlvIndexesArgs, GetLocalDbVlvIndexesResult, GetLocalDbVlvIndexesOutputArgs } from "./getLocalDbVlvIndexes";
export const getLocalDbVlvIndexes: typeof import("./getLocalDbVlvIndexes").getLocalDbVlvIndexes = null as any;
export const getLocalDbVlvIndexesOutput: typeof import("./getLocalDbVlvIndexes").getLocalDbVlvIndexesOutput = null as any;
utilities.lazyLoad(exports, ["getLocalDbVlvIndexes","getLocalDbVlvIndexesOutput"], () => require("./getLocalDbVlvIndexes"));

export { GetLocationArgs, GetLocationResult, GetLocationOutputArgs } from "./getLocation";
export const getLocation: typeof import("./getLocation").getLocation = null as any;
export const getLocationOutput: typeof import("./getLocation").getLocationOutput = null as any;
utilities.lazyLoad(exports, ["getLocation","getLocationOutput"], () => require("./getLocation"));

export { GetLocationsArgs, GetLocationsResult, GetLocationsOutputArgs } from "./getLocations";
export const getLocations: typeof import("./getLocations").getLocations = null as any;
export const getLocationsOutput: typeof import("./getLocations").getLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getLocations","getLocationsOutput"], () => require("./getLocations"));

export { GetLogFieldBehaviorArgs, GetLogFieldBehaviorResult, GetLogFieldBehaviorOutputArgs } from "./getLogFieldBehavior";
export const getLogFieldBehavior: typeof import("./getLogFieldBehavior").getLogFieldBehavior = null as any;
export const getLogFieldBehaviorOutput: typeof import("./getLogFieldBehavior").getLogFieldBehaviorOutput = null as any;
utilities.lazyLoad(exports, ["getLogFieldBehavior","getLogFieldBehaviorOutput"], () => require("./getLogFieldBehavior"));

export { GetLogFieldBehaviorsArgs, GetLogFieldBehaviorsResult, GetLogFieldBehaviorsOutputArgs } from "./getLogFieldBehaviors";
export const getLogFieldBehaviors: typeof import("./getLogFieldBehaviors").getLogFieldBehaviors = null as any;
export const getLogFieldBehaviorsOutput: typeof import("./getLogFieldBehaviors").getLogFieldBehaviorsOutput = null as any;
utilities.lazyLoad(exports, ["getLogFieldBehaviors","getLogFieldBehaviorsOutput"], () => require("./getLogFieldBehaviors"));

export { GetLogFieldMappingArgs, GetLogFieldMappingResult, GetLogFieldMappingOutputArgs } from "./getLogFieldMapping";
export const getLogFieldMapping: typeof import("./getLogFieldMapping").getLogFieldMapping = null as any;
export const getLogFieldMappingOutput: typeof import("./getLogFieldMapping").getLogFieldMappingOutput = null as any;
utilities.lazyLoad(exports, ["getLogFieldMapping","getLogFieldMappingOutput"], () => require("./getLogFieldMapping"));

export { GetLogFieldMappingsArgs, GetLogFieldMappingsResult, GetLogFieldMappingsOutputArgs } from "./getLogFieldMappings";
export const getLogFieldMappings: typeof import("./getLogFieldMappings").getLogFieldMappings = null as any;
export const getLogFieldMappingsOutput: typeof import("./getLogFieldMappings").getLogFieldMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getLogFieldMappings","getLogFieldMappingsOutput"], () => require("./getLogFieldMappings"));

export { GetLogFieldSyntaxArgs, GetLogFieldSyntaxResult, GetLogFieldSyntaxOutputArgs } from "./getLogFieldSyntax";
export const getLogFieldSyntax: typeof import("./getLogFieldSyntax").getLogFieldSyntax = null as any;
export const getLogFieldSyntaxOutput: typeof import("./getLogFieldSyntax").getLogFieldSyntaxOutput = null as any;
utilities.lazyLoad(exports, ["getLogFieldSyntax","getLogFieldSyntaxOutput"], () => require("./getLogFieldSyntax"));

export { GetLogFieldSyntaxesArgs, GetLogFieldSyntaxesResult, GetLogFieldSyntaxesOutputArgs } from "./getLogFieldSyntaxes";
export const getLogFieldSyntaxes: typeof import("./getLogFieldSyntaxes").getLogFieldSyntaxes = null as any;
export const getLogFieldSyntaxesOutput: typeof import("./getLogFieldSyntaxes").getLogFieldSyntaxesOutput = null as any;
utilities.lazyLoad(exports, ["getLogFieldSyntaxes","getLogFieldSyntaxesOutput"], () => require("./getLogFieldSyntaxes"));

export { GetLogFileRotationListenerArgs, GetLogFileRotationListenerResult, GetLogFileRotationListenerOutputArgs } from "./getLogFileRotationListener";
export const getLogFileRotationListener: typeof import("./getLogFileRotationListener").getLogFileRotationListener = null as any;
export const getLogFileRotationListenerOutput: typeof import("./getLogFileRotationListener").getLogFileRotationListenerOutput = null as any;
utilities.lazyLoad(exports, ["getLogFileRotationListener","getLogFileRotationListenerOutput"], () => require("./getLogFileRotationListener"));

export { GetLogFileRotationListenersArgs, GetLogFileRotationListenersResult, GetLogFileRotationListenersOutputArgs } from "./getLogFileRotationListeners";
export const getLogFileRotationListeners: typeof import("./getLogFileRotationListeners").getLogFileRotationListeners = null as any;
export const getLogFileRotationListenersOutput: typeof import("./getLogFileRotationListeners").getLogFileRotationListenersOutput = null as any;
utilities.lazyLoad(exports, ["getLogFileRotationListeners","getLogFileRotationListenersOutput"], () => require("./getLogFileRotationListeners"));

export { GetLogPublisherArgs, GetLogPublisherResult, GetLogPublisherOutputArgs } from "./getLogPublisher";
export const getLogPublisher: typeof import("./getLogPublisher").getLogPublisher = null as any;
export const getLogPublisherOutput: typeof import("./getLogPublisher").getLogPublisherOutput = null as any;
utilities.lazyLoad(exports, ["getLogPublisher","getLogPublisherOutput"], () => require("./getLogPublisher"));

export { GetLogPublishersArgs, GetLogPublishersResult, GetLogPublishersOutputArgs } from "./getLogPublishers";
export const getLogPublishers: typeof import("./getLogPublishers").getLogPublishers = null as any;
export const getLogPublishersOutput: typeof import("./getLogPublishers").getLogPublishersOutput = null as any;
utilities.lazyLoad(exports, ["getLogPublishers","getLogPublishersOutput"], () => require("./getLogPublishers"));

export { GetLogRetentionPoliciesArgs, GetLogRetentionPoliciesResult, GetLogRetentionPoliciesOutputArgs } from "./getLogRetentionPolicies";
export const getLogRetentionPolicies: typeof import("./getLogRetentionPolicies").getLogRetentionPolicies = null as any;
export const getLogRetentionPoliciesOutput: typeof import("./getLogRetentionPolicies").getLogRetentionPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getLogRetentionPolicies","getLogRetentionPoliciesOutput"], () => require("./getLogRetentionPolicies"));

export { GetLogRetentionPolicyArgs, GetLogRetentionPolicyResult, GetLogRetentionPolicyOutputArgs } from "./getLogRetentionPolicy";
export const getLogRetentionPolicy: typeof import("./getLogRetentionPolicy").getLogRetentionPolicy = null as any;
export const getLogRetentionPolicyOutput: typeof import("./getLogRetentionPolicy").getLogRetentionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLogRetentionPolicy","getLogRetentionPolicyOutput"], () => require("./getLogRetentionPolicy"));

export { GetLogRotationPoliciesArgs, GetLogRotationPoliciesResult, GetLogRotationPoliciesOutputArgs } from "./getLogRotationPolicies";
export const getLogRotationPolicies: typeof import("./getLogRotationPolicies").getLogRotationPolicies = null as any;
export const getLogRotationPoliciesOutput: typeof import("./getLogRotationPolicies").getLogRotationPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getLogRotationPolicies","getLogRotationPoliciesOutput"], () => require("./getLogRotationPolicies"));

export { GetLogRotationPolicyArgs, GetLogRotationPolicyResult, GetLogRotationPolicyOutputArgs } from "./getLogRotationPolicy";
export const getLogRotationPolicy: typeof import("./getLogRotationPolicy").getLogRotationPolicy = null as any;
export const getLogRotationPolicyOutput: typeof import("./getLogRotationPolicy").getLogRotationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLogRotationPolicy","getLogRotationPolicyOutput"], () => require("./getLogRotationPolicy"));

export { GetMacSecretKeyArgs, GetMacSecretKeyResult, GetMacSecretKeyOutputArgs } from "./getMacSecretKey";
export const getMacSecretKey: typeof import("./getMacSecretKey").getMacSecretKey = null as any;
export const getMacSecretKeyOutput: typeof import("./getMacSecretKey").getMacSecretKeyOutput = null as any;
utilities.lazyLoad(exports, ["getMacSecretKey","getMacSecretKeyOutput"], () => require("./getMacSecretKey"));

export { GetMacSecretKeysArgs, GetMacSecretKeysResult, GetMacSecretKeysOutputArgs } from "./getMacSecretKeys";
export const getMacSecretKeys: typeof import("./getMacSecretKeys").getMacSecretKeys = null as any;
export const getMacSecretKeysOutput: typeof import("./getMacSecretKeys").getMacSecretKeysOutput = null as any;
utilities.lazyLoad(exports, ["getMacSecretKeys","getMacSecretKeysOutput"], () => require("./getMacSecretKeys"));

export { GetMatchingRuleArgs, GetMatchingRuleResult, GetMatchingRuleOutputArgs } from "./getMatchingRule";
export const getMatchingRule: typeof import("./getMatchingRule").getMatchingRule = null as any;
export const getMatchingRuleOutput: typeof import("./getMatchingRule").getMatchingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getMatchingRule","getMatchingRuleOutput"], () => require("./getMatchingRule"));

export { GetMatchingRulesArgs, GetMatchingRulesResult, GetMatchingRulesOutputArgs } from "./getMatchingRules";
export const getMatchingRules: typeof import("./getMatchingRules").getMatchingRules = null as any;
export const getMatchingRulesOutput: typeof import("./getMatchingRules").getMatchingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getMatchingRules","getMatchingRulesOutput"], () => require("./getMatchingRules"));

export { GetMonitorProviderArgs, GetMonitorProviderResult, GetMonitorProviderOutputArgs } from "./getMonitorProvider";
export const getMonitorProvider: typeof import("./getMonitorProvider").getMonitorProvider = null as any;
export const getMonitorProviderOutput: typeof import("./getMonitorProvider").getMonitorProviderOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorProvider","getMonitorProviderOutput"], () => require("./getMonitorProvider"));

export { GetMonitorProvidersArgs, GetMonitorProvidersResult, GetMonitorProvidersOutputArgs } from "./getMonitorProviders";
export const getMonitorProviders: typeof import("./getMonitorProviders").getMonitorProviders = null as any;
export const getMonitorProvidersOutput: typeof import("./getMonitorProviders").getMonitorProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorProviders","getMonitorProvidersOutput"], () => require("./getMonitorProviders"));

export { GetMonitoringEndpointArgs, GetMonitoringEndpointResult, GetMonitoringEndpointOutputArgs } from "./getMonitoringEndpoint";
export const getMonitoringEndpoint: typeof import("./getMonitoringEndpoint").getMonitoringEndpoint = null as any;
export const getMonitoringEndpointOutput: typeof import("./getMonitoringEndpoint").getMonitoringEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringEndpoint","getMonitoringEndpointOutput"], () => require("./getMonitoringEndpoint"));

export { GetMonitoringEndpointsArgs, GetMonitoringEndpointsResult, GetMonitoringEndpointsOutputArgs } from "./getMonitoringEndpoints";
export const getMonitoringEndpoints: typeof import("./getMonitoringEndpoints").getMonitoringEndpoints = null as any;
export const getMonitoringEndpointsOutput: typeof import("./getMonitoringEndpoints").getMonitoringEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringEndpoints","getMonitoringEndpointsOutput"], () => require("./getMonitoringEndpoints"));

export { GetNotificationManagerArgs, GetNotificationManagerResult, GetNotificationManagerOutputArgs } from "./getNotificationManager";
export const getNotificationManager: typeof import("./getNotificationManager").getNotificationManager = null as any;
export const getNotificationManagerOutput: typeof import("./getNotificationManager").getNotificationManagerOutput = null as any;
utilities.lazyLoad(exports, ["getNotificationManager","getNotificationManagerOutput"], () => require("./getNotificationManager"));

export { GetNotificationManagersArgs, GetNotificationManagersResult, GetNotificationManagersOutputArgs } from "./getNotificationManagers";
export const getNotificationManagers: typeof import("./getNotificationManagers").getNotificationManagers = null as any;
export const getNotificationManagersOutput: typeof import("./getNotificationManagers").getNotificationManagersOutput = null as any;
utilities.lazyLoad(exports, ["getNotificationManagers","getNotificationManagersOutput"], () => require("./getNotificationManagers"));

export { GetOauthTokenHandlerArgs, GetOauthTokenHandlerResult, GetOauthTokenHandlerOutputArgs } from "./getOauthTokenHandler";
export const getOauthTokenHandler: typeof import("./getOauthTokenHandler").getOauthTokenHandler = null as any;
export const getOauthTokenHandlerOutput: typeof import("./getOauthTokenHandler").getOauthTokenHandlerOutput = null as any;
utilities.lazyLoad(exports, ["getOauthTokenHandler","getOauthTokenHandlerOutput"], () => require("./getOauthTokenHandler"));

export { GetOauthTokenHandlersArgs, GetOauthTokenHandlersResult, GetOauthTokenHandlersOutputArgs } from "./getOauthTokenHandlers";
export const getOauthTokenHandlers: typeof import("./getOauthTokenHandlers").getOauthTokenHandlers = null as any;
export const getOauthTokenHandlersOutput: typeof import("./getOauthTokenHandlers").getOauthTokenHandlersOutput = null as any;
utilities.lazyLoad(exports, ["getOauthTokenHandlers","getOauthTokenHandlersOutput"], () => require("./getOauthTokenHandlers"));

export { GetObscuredValueArgs, GetObscuredValueResult, GetObscuredValueOutputArgs } from "./getObscuredValue";
export const getObscuredValue: typeof import("./getObscuredValue").getObscuredValue = null as any;
export const getObscuredValueOutput: typeof import("./getObscuredValue").getObscuredValueOutput = null as any;
utilities.lazyLoad(exports, ["getObscuredValue","getObscuredValueOutput"], () => require("./getObscuredValue"));

export { GetObscuredValuesArgs, GetObscuredValuesResult, GetObscuredValuesOutputArgs } from "./getObscuredValues";
export const getObscuredValues: typeof import("./getObscuredValues").getObscuredValues = null as any;
export const getObscuredValuesOutput: typeof import("./getObscuredValues").getObscuredValuesOutput = null as any;
utilities.lazyLoad(exports, ["getObscuredValues","getObscuredValuesOutput"], () => require("./getObscuredValues"));

export { GetOtpDeliveryMechanismArgs, GetOtpDeliveryMechanismResult, GetOtpDeliveryMechanismOutputArgs } from "./getOtpDeliveryMechanism";
export const getOtpDeliveryMechanism: typeof import("./getOtpDeliveryMechanism").getOtpDeliveryMechanism = null as any;
export const getOtpDeliveryMechanismOutput: typeof import("./getOtpDeliveryMechanism").getOtpDeliveryMechanismOutput = null as any;
utilities.lazyLoad(exports, ["getOtpDeliveryMechanism","getOtpDeliveryMechanismOutput"], () => require("./getOtpDeliveryMechanism"));

export { GetOtpDeliveryMechanismsArgs, GetOtpDeliveryMechanismsResult, GetOtpDeliveryMechanismsOutputArgs } from "./getOtpDeliveryMechanisms";
export const getOtpDeliveryMechanisms: typeof import("./getOtpDeliveryMechanisms").getOtpDeliveryMechanisms = null as any;
export const getOtpDeliveryMechanismsOutput: typeof import("./getOtpDeliveryMechanisms").getOtpDeliveryMechanismsOutput = null as any;
utilities.lazyLoad(exports, ["getOtpDeliveryMechanisms","getOtpDeliveryMechanismsOutput"], () => require("./getOtpDeliveryMechanisms"));

export { GetPassThroughAuthenticationHandlerArgs, GetPassThroughAuthenticationHandlerResult, GetPassThroughAuthenticationHandlerOutputArgs } from "./getPassThroughAuthenticationHandler";
export const getPassThroughAuthenticationHandler: typeof import("./getPassThroughAuthenticationHandler").getPassThroughAuthenticationHandler = null as any;
export const getPassThroughAuthenticationHandlerOutput: typeof import("./getPassThroughAuthenticationHandler").getPassThroughAuthenticationHandlerOutput = null as any;
utilities.lazyLoad(exports, ["getPassThroughAuthenticationHandler","getPassThroughAuthenticationHandlerOutput"], () => require("./getPassThroughAuthenticationHandler"));

export { GetPassThroughAuthenticationHandlersArgs, GetPassThroughAuthenticationHandlersResult, GetPassThroughAuthenticationHandlersOutputArgs } from "./getPassThroughAuthenticationHandlers";
export const getPassThroughAuthenticationHandlers: typeof import("./getPassThroughAuthenticationHandlers").getPassThroughAuthenticationHandlers = null as any;
export const getPassThroughAuthenticationHandlersOutput: typeof import("./getPassThroughAuthenticationHandlers").getPassThroughAuthenticationHandlersOutput = null as any;
utilities.lazyLoad(exports, ["getPassThroughAuthenticationHandlers","getPassThroughAuthenticationHandlersOutput"], () => require("./getPassThroughAuthenticationHandlers"));

export { GetPassphraseProviderArgs, GetPassphraseProviderResult, GetPassphraseProviderOutputArgs } from "./getPassphraseProvider";
export const getPassphraseProvider: typeof import("./getPassphraseProvider").getPassphraseProvider = null as any;
export const getPassphraseProviderOutput: typeof import("./getPassphraseProvider").getPassphraseProviderOutput = null as any;
utilities.lazyLoad(exports, ["getPassphraseProvider","getPassphraseProviderOutput"], () => require("./getPassphraseProvider"));

export { GetPassphraseProvidersArgs, GetPassphraseProvidersResult, GetPassphraseProvidersOutputArgs } from "./getPassphraseProviders";
export const getPassphraseProviders: typeof import("./getPassphraseProviders").getPassphraseProviders = null as any;
export const getPassphraseProvidersOutput: typeof import("./getPassphraseProviders").getPassphraseProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getPassphraseProviders","getPassphraseProvidersOutput"], () => require("./getPassphraseProviders"));

export { GetPasswordGeneratorArgs, GetPasswordGeneratorResult, GetPasswordGeneratorOutputArgs } from "./getPasswordGenerator";
export const getPasswordGenerator: typeof import("./getPasswordGenerator").getPasswordGenerator = null as any;
export const getPasswordGeneratorOutput: typeof import("./getPasswordGenerator").getPasswordGeneratorOutput = null as any;
utilities.lazyLoad(exports, ["getPasswordGenerator","getPasswordGeneratorOutput"], () => require("./getPasswordGenerator"));

export { GetPasswordGeneratorsArgs, GetPasswordGeneratorsResult, GetPasswordGeneratorsOutputArgs } from "./getPasswordGenerators";
export const getPasswordGenerators: typeof import("./getPasswordGenerators").getPasswordGenerators = null as any;
export const getPasswordGeneratorsOutput: typeof import("./getPasswordGenerators").getPasswordGeneratorsOutput = null as any;
utilities.lazyLoad(exports, ["getPasswordGenerators","getPasswordGeneratorsOutput"], () => require("./getPasswordGenerators"));

export { GetPasswordPoliciesArgs, GetPasswordPoliciesResult, GetPasswordPoliciesOutputArgs } from "./getPasswordPolicies";
export const getPasswordPolicies: typeof import("./getPasswordPolicies").getPasswordPolicies = null as any;
export const getPasswordPoliciesOutput: typeof import("./getPasswordPolicies").getPasswordPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getPasswordPolicies","getPasswordPoliciesOutput"], () => require("./getPasswordPolicies"));

export { GetPasswordPolicyArgs, GetPasswordPolicyResult, GetPasswordPolicyOutputArgs } from "./getPasswordPolicy";
export const getPasswordPolicy: typeof import("./getPasswordPolicy").getPasswordPolicy = null as any;
export const getPasswordPolicyOutput: typeof import("./getPasswordPolicy").getPasswordPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPasswordPolicy","getPasswordPolicyOutput"], () => require("./getPasswordPolicy"));

export { GetPasswordStorageSchemeArgs, GetPasswordStorageSchemeResult, GetPasswordStorageSchemeOutputArgs } from "./getPasswordStorageScheme";
export const getPasswordStorageScheme: typeof import("./getPasswordStorageScheme").getPasswordStorageScheme = null as any;
export const getPasswordStorageSchemeOutput: typeof import("./getPasswordStorageScheme").getPasswordStorageSchemeOutput = null as any;
utilities.lazyLoad(exports, ["getPasswordStorageScheme","getPasswordStorageSchemeOutput"], () => require("./getPasswordStorageScheme"));

export { GetPasswordStorageSchemesArgs, GetPasswordStorageSchemesResult, GetPasswordStorageSchemesOutputArgs } from "./getPasswordStorageSchemes";
export const getPasswordStorageSchemes: typeof import("./getPasswordStorageSchemes").getPasswordStorageSchemes = null as any;
export const getPasswordStorageSchemesOutput: typeof import("./getPasswordStorageSchemes").getPasswordStorageSchemesOutput = null as any;
utilities.lazyLoad(exports, ["getPasswordStorageSchemes","getPasswordStorageSchemesOutput"], () => require("./getPasswordStorageSchemes"));

export { GetPasswordValidatorArgs, GetPasswordValidatorResult, GetPasswordValidatorOutputArgs } from "./getPasswordValidator";
export const getPasswordValidator: typeof import("./getPasswordValidator").getPasswordValidator = null as any;
export const getPasswordValidatorOutput: typeof import("./getPasswordValidator").getPasswordValidatorOutput = null as any;
utilities.lazyLoad(exports, ["getPasswordValidator","getPasswordValidatorOutput"], () => require("./getPasswordValidator"));

export { GetPasswordValidatorsArgs, GetPasswordValidatorsResult, GetPasswordValidatorsOutputArgs } from "./getPasswordValidators";
export const getPasswordValidators: typeof import("./getPasswordValidators").getPasswordValidators = null as any;
export const getPasswordValidatorsOutput: typeof import("./getPasswordValidators").getPasswordValidatorsOutput = null as any;
utilities.lazyLoad(exports, ["getPasswordValidators","getPasswordValidatorsOutput"], () => require("./getPasswordValidators"));

export { GetPluginArgs, GetPluginResult, GetPluginOutputArgs } from "./getPlugin";
export const getPlugin: typeof import("./getPlugin").getPlugin = null as any;
export const getPluginOutput: typeof import("./getPlugin").getPluginOutput = null as any;
utilities.lazyLoad(exports, ["getPlugin","getPluginOutput"], () => require("./getPlugin"));

export { GetPluginRootResult } from "./getPluginRoot";
export const getPluginRoot: typeof import("./getPluginRoot").getPluginRoot = null as any;
export const getPluginRootOutput: typeof import("./getPluginRoot").getPluginRootOutput = null as any;
utilities.lazyLoad(exports, ["getPluginRoot","getPluginRootOutput"], () => require("./getPluginRoot"));

export { GetPluginsArgs, GetPluginsResult, GetPluginsOutputArgs } from "./getPlugins";
export const getPlugins: typeof import("./getPlugins").getPlugins = null as any;
export const getPluginsOutput: typeof import("./getPlugins").getPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getPlugins","getPluginsOutput"], () => require("./getPlugins"));

export { GetPostLdifExportTaskProcessorArgs, GetPostLdifExportTaskProcessorResult, GetPostLdifExportTaskProcessorOutputArgs } from "./getPostLdifExportTaskProcessor";
export const getPostLdifExportTaskProcessor: typeof import("./getPostLdifExportTaskProcessor").getPostLdifExportTaskProcessor = null as any;
export const getPostLdifExportTaskProcessorOutput: typeof import("./getPostLdifExportTaskProcessor").getPostLdifExportTaskProcessorOutput = null as any;
utilities.lazyLoad(exports, ["getPostLdifExportTaskProcessor","getPostLdifExportTaskProcessorOutput"], () => require("./getPostLdifExportTaskProcessor"));

export { GetPostLdifExportTaskProcessorsArgs, GetPostLdifExportTaskProcessorsResult, GetPostLdifExportTaskProcessorsOutputArgs } from "./getPostLdifExportTaskProcessors";
export const getPostLdifExportTaskProcessors: typeof import("./getPostLdifExportTaskProcessors").getPostLdifExportTaskProcessors = null as any;
export const getPostLdifExportTaskProcessorsOutput: typeof import("./getPostLdifExportTaskProcessors").getPostLdifExportTaskProcessorsOutput = null as any;
utilities.lazyLoad(exports, ["getPostLdifExportTaskProcessors","getPostLdifExportTaskProcessorsOutput"], () => require("./getPostLdifExportTaskProcessors"));

export { GetPrometheusMonitorAttributeMetricArgs, GetPrometheusMonitorAttributeMetricResult, GetPrometheusMonitorAttributeMetricOutputArgs } from "./getPrometheusMonitorAttributeMetric";
export const getPrometheusMonitorAttributeMetric: typeof import("./getPrometheusMonitorAttributeMetric").getPrometheusMonitorAttributeMetric = null as any;
export const getPrometheusMonitorAttributeMetricOutput: typeof import("./getPrometheusMonitorAttributeMetric").getPrometheusMonitorAttributeMetricOutput = null as any;
utilities.lazyLoad(exports, ["getPrometheusMonitorAttributeMetric","getPrometheusMonitorAttributeMetricOutput"], () => require("./getPrometheusMonitorAttributeMetric"));

export { GetPrometheusMonitorAttributeMetricsArgs, GetPrometheusMonitorAttributeMetricsResult, GetPrometheusMonitorAttributeMetricsOutputArgs } from "./getPrometheusMonitorAttributeMetrics";
export const getPrometheusMonitorAttributeMetrics: typeof import("./getPrometheusMonitorAttributeMetrics").getPrometheusMonitorAttributeMetrics = null as any;
export const getPrometheusMonitorAttributeMetricsOutput: typeof import("./getPrometheusMonitorAttributeMetrics").getPrometheusMonitorAttributeMetricsOutput = null as any;
utilities.lazyLoad(exports, ["getPrometheusMonitorAttributeMetrics","getPrometheusMonitorAttributeMetricsOutput"], () => require("./getPrometheusMonitorAttributeMetrics"));

export { GetRecurringTaskArgs, GetRecurringTaskResult, GetRecurringTaskOutputArgs } from "./getRecurringTask";
export const getRecurringTask: typeof import("./getRecurringTask").getRecurringTask = null as any;
export const getRecurringTaskOutput: typeof import("./getRecurringTask").getRecurringTaskOutput = null as any;
utilities.lazyLoad(exports, ["getRecurringTask","getRecurringTaskOutput"], () => require("./getRecurringTask"));

export { GetRecurringTaskChainArgs, GetRecurringTaskChainResult, GetRecurringTaskChainOutputArgs } from "./getRecurringTaskChain";
export const getRecurringTaskChain: typeof import("./getRecurringTaskChain").getRecurringTaskChain = null as any;
export const getRecurringTaskChainOutput: typeof import("./getRecurringTaskChain").getRecurringTaskChainOutput = null as any;
utilities.lazyLoad(exports, ["getRecurringTaskChain","getRecurringTaskChainOutput"], () => require("./getRecurringTaskChain"));

export { GetRecurringTaskChainsArgs, GetRecurringTaskChainsResult, GetRecurringTaskChainsOutputArgs } from "./getRecurringTaskChains";
export const getRecurringTaskChains: typeof import("./getRecurringTaskChains").getRecurringTaskChains = null as any;
export const getRecurringTaskChainsOutput: typeof import("./getRecurringTaskChains").getRecurringTaskChainsOutput = null as any;
utilities.lazyLoad(exports, ["getRecurringTaskChains","getRecurringTaskChainsOutput"], () => require("./getRecurringTaskChains"));

export { GetRecurringTasksArgs, GetRecurringTasksResult, GetRecurringTasksOutputArgs } from "./getRecurringTasks";
export const getRecurringTasks: typeof import("./getRecurringTasks").getRecurringTasks = null as any;
export const getRecurringTasksOutput: typeof import("./getRecurringTasks").getRecurringTasksOutput = null as any;
utilities.lazyLoad(exports, ["getRecurringTasks","getRecurringTasksOutput"], () => require("./getRecurringTasks"));

export { GetReplicationAssurancePoliciesArgs, GetReplicationAssurancePoliciesResult, GetReplicationAssurancePoliciesOutputArgs } from "./getReplicationAssurancePolicies";
export const getReplicationAssurancePolicies: typeof import("./getReplicationAssurancePolicies").getReplicationAssurancePolicies = null as any;
export const getReplicationAssurancePoliciesOutput: typeof import("./getReplicationAssurancePolicies").getReplicationAssurancePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationAssurancePolicies","getReplicationAssurancePoliciesOutput"], () => require("./getReplicationAssurancePolicies"));

export { GetReplicationAssurancePolicyArgs, GetReplicationAssurancePolicyResult, GetReplicationAssurancePolicyOutputArgs } from "./getReplicationAssurancePolicy";
export const getReplicationAssurancePolicy: typeof import("./getReplicationAssurancePolicy").getReplicationAssurancePolicy = null as any;
export const getReplicationAssurancePolicyOutput: typeof import("./getReplicationAssurancePolicy").getReplicationAssurancePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationAssurancePolicy","getReplicationAssurancePolicyOutput"], () => require("./getReplicationAssurancePolicy"));

export { GetReplicationDomainArgs, GetReplicationDomainResult, GetReplicationDomainOutputArgs } from "./getReplicationDomain";
export const getReplicationDomain: typeof import("./getReplicationDomain").getReplicationDomain = null as any;
export const getReplicationDomainOutput: typeof import("./getReplicationDomain").getReplicationDomainOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationDomain","getReplicationDomainOutput"], () => require("./getReplicationDomain"));

export { GetReplicationDomainsArgs, GetReplicationDomainsResult, GetReplicationDomainsOutputArgs } from "./getReplicationDomains";
export const getReplicationDomains: typeof import("./getReplicationDomains").getReplicationDomains = null as any;
export const getReplicationDomainsOutput: typeof import("./getReplicationDomains").getReplicationDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationDomains","getReplicationDomainsOutput"], () => require("./getReplicationDomains"));

export { GetReplicationServerArgs, GetReplicationServerResult, GetReplicationServerOutputArgs } from "./getReplicationServer";
export const getReplicationServer: typeof import("./getReplicationServer").getReplicationServer = null as any;
export const getReplicationServerOutput: typeof import("./getReplicationServer").getReplicationServerOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationServer","getReplicationServerOutput"], () => require("./getReplicationServer"));

export { GetRequestCriteriaArgs, GetRequestCriteriaResult, GetRequestCriteriaOutputArgs } from "./getRequestCriteria";
export const getRequestCriteria: typeof import("./getRequestCriteria").getRequestCriteria = null as any;
export const getRequestCriteriaOutput: typeof import("./getRequestCriteria").getRequestCriteriaOutput = null as any;
utilities.lazyLoad(exports, ["getRequestCriteria","getRequestCriteriaOutput"], () => require("./getRequestCriteria"));

export { GetRequestCriteriaListArgs, GetRequestCriteriaListResult, GetRequestCriteriaListOutputArgs } from "./getRequestCriteriaList";
export const getRequestCriteriaList: typeof import("./getRequestCriteriaList").getRequestCriteriaList = null as any;
export const getRequestCriteriaListOutput: typeof import("./getRequestCriteriaList").getRequestCriteriaListOutput = null as any;
utilities.lazyLoad(exports, ["getRequestCriteriaList","getRequestCriteriaListOutput"], () => require("./getRequestCriteriaList"));

export { GetRestResourceTypeArgs, GetRestResourceTypeResult, GetRestResourceTypeOutputArgs } from "./getRestResourceType";
export const getRestResourceType: typeof import("./getRestResourceType").getRestResourceType = null as any;
export const getRestResourceTypeOutput: typeof import("./getRestResourceType").getRestResourceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getRestResourceType","getRestResourceTypeOutput"], () => require("./getRestResourceType"));

export { GetRestResourceTypesArgs, GetRestResourceTypesResult, GetRestResourceTypesOutputArgs } from "./getRestResourceTypes";
export const getRestResourceTypes: typeof import("./getRestResourceTypes").getRestResourceTypes = null as any;
export const getRestResourceTypesOutput: typeof import("./getRestResourceTypes").getRestResourceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getRestResourceTypes","getRestResourceTypesOutput"], () => require("./getRestResourceTypes"));

export { GetResultCodeMapArgs, GetResultCodeMapResult, GetResultCodeMapOutputArgs } from "./getResultCodeMap";
export const getResultCodeMap: typeof import("./getResultCodeMap").getResultCodeMap = null as any;
export const getResultCodeMapOutput: typeof import("./getResultCodeMap").getResultCodeMapOutput = null as any;
utilities.lazyLoad(exports, ["getResultCodeMap","getResultCodeMapOutput"], () => require("./getResultCodeMap"));

export { GetResultCodeMapsArgs, GetResultCodeMapsResult, GetResultCodeMapsOutputArgs } from "./getResultCodeMaps";
export const getResultCodeMaps: typeof import("./getResultCodeMaps").getResultCodeMaps = null as any;
export const getResultCodeMapsOutput: typeof import("./getResultCodeMaps").getResultCodeMapsOutput = null as any;
utilities.lazyLoad(exports, ["getResultCodeMaps","getResultCodeMapsOutput"], () => require("./getResultCodeMaps"));

export { GetResultCriteriaArgs, GetResultCriteriaResult, GetResultCriteriaOutputArgs } from "./getResultCriteria";
export const getResultCriteria: typeof import("./getResultCriteria").getResultCriteria = null as any;
export const getResultCriteriaOutput: typeof import("./getResultCriteria").getResultCriteriaOutput = null as any;
utilities.lazyLoad(exports, ["getResultCriteria","getResultCriteriaOutput"], () => require("./getResultCriteria"));

export { GetResultCriteriaListArgs, GetResultCriteriaListResult, GetResultCriteriaListOutputArgs } from "./getResultCriteriaList";
export const getResultCriteriaList: typeof import("./getResultCriteriaList").getResultCriteriaList = null as any;
export const getResultCriteriaListOutput: typeof import("./getResultCriteriaList").getResultCriteriaListOutput = null as any;
utilities.lazyLoad(exports, ["getResultCriteriaList","getResultCriteriaListOutput"], () => require("./getResultCriteriaList"));

export { GetRootDnResult } from "./getRootDn";
export const getRootDn: typeof import("./getRootDn").getRootDn = null as any;
export const getRootDnOutput: typeof import("./getRootDn").getRootDnOutput = null as any;
utilities.lazyLoad(exports, ["getRootDn","getRootDnOutput"], () => require("./getRootDn"));

export { GetRootDnUserArgs, GetRootDnUserResult, GetRootDnUserOutputArgs } from "./getRootDnUser";
export const getRootDnUser: typeof import("./getRootDnUser").getRootDnUser = null as any;
export const getRootDnUserOutput: typeof import("./getRootDnUser").getRootDnUserOutput = null as any;
utilities.lazyLoad(exports, ["getRootDnUser","getRootDnUserOutput"], () => require("./getRootDnUser"));

export { GetRootDnUsersArgs, GetRootDnUsersResult, GetRootDnUsersOutputArgs } from "./getRootDnUsers";
export const getRootDnUsers: typeof import("./getRootDnUsers").getRootDnUsers = null as any;
export const getRootDnUsersOutput: typeof import("./getRootDnUsers").getRootDnUsersOutput = null as any;
utilities.lazyLoad(exports, ["getRootDnUsers","getRootDnUsersOutput"], () => require("./getRootDnUsers"));

export { GetRootDseBackendResult } from "./getRootDseBackend";
export const getRootDseBackend: typeof import("./getRootDseBackend").getRootDseBackend = null as any;
export const getRootDseBackendOutput: typeof import("./getRootDseBackend").getRootDseBackendOutput = null as any;
utilities.lazyLoad(exports, ["getRootDseBackend","getRootDseBackendOutput"], () => require("./getRootDseBackend"));

export { GetSaslMechanismHandlerArgs, GetSaslMechanismHandlerResult, GetSaslMechanismHandlerOutputArgs } from "./getSaslMechanismHandler";
export const getSaslMechanismHandler: typeof import("./getSaslMechanismHandler").getSaslMechanismHandler = null as any;
export const getSaslMechanismHandlerOutput: typeof import("./getSaslMechanismHandler").getSaslMechanismHandlerOutput = null as any;
utilities.lazyLoad(exports, ["getSaslMechanismHandler","getSaslMechanismHandlerOutput"], () => require("./getSaslMechanismHandler"));

export { GetSaslMechanismHandlersArgs, GetSaslMechanismHandlersResult, GetSaslMechanismHandlersOutputArgs } from "./getSaslMechanismHandlers";
export const getSaslMechanismHandlers: typeof import("./getSaslMechanismHandlers").getSaslMechanismHandlers = null as any;
export const getSaslMechanismHandlersOutput: typeof import("./getSaslMechanismHandlers").getSaslMechanismHandlersOutput = null as any;
utilities.lazyLoad(exports, ["getSaslMechanismHandlers","getSaslMechanismHandlersOutput"], () => require("./getSaslMechanismHandlers"));

export { GetScimAttributeArgs, GetScimAttributeResult, GetScimAttributeOutputArgs } from "./getScimAttribute";
export const getScimAttribute: typeof import("./getScimAttribute").getScimAttribute = null as any;
export const getScimAttributeOutput: typeof import("./getScimAttribute").getScimAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getScimAttribute","getScimAttributeOutput"], () => require("./getScimAttribute"));

export { GetScimAttributeMappingArgs, GetScimAttributeMappingResult, GetScimAttributeMappingOutputArgs } from "./getScimAttributeMapping";
export const getScimAttributeMapping: typeof import("./getScimAttributeMapping").getScimAttributeMapping = null as any;
export const getScimAttributeMappingOutput: typeof import("./getScimAttributeMapping").getScimAttributeMappingOutput = null as any;
utilities.lazyLoad(exports, ["getScimAttributeMapping","getScimAttributeMappingOutput"], () => require("./getScimAttributeMapping"));

export { GetScimAttributeMappingsArgs, GetScimAttributeMappingsResult, GetScimAttributeMappingsOutputArgs } from "./getScimAttributeMappings";
export const getScimAttributeMappings: typeof import("./getScimAttributeMappings").getScimAttributeMappings = null as any;
export const getScimAttributeMappingsOutput: typeof import("./getScimAttributeMappings").getScimAttributeMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getScimAttributeMappings","getScimAttributeMappingsOutput"], () => require("./getScimAttributeMappings"));

export { GetScimAttributesArgs, GetScimAttributesResult, GetScimAttributesOutputArgs } from "./getScimAttributes";
export const getScimAttributes: typeof import("./getScimAttributes").getScimAttributes = null as any;
export const getScimAttributesOutput: typeof import("./getScimAttributes").getScimAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getScimAttributes","getScimAttributesOutput"], () => require("./getScimAttributes"));

export { GetScimResourceTypeArgs, GetScimResourceTypeResult, GetScimResourceTypeOutputArgs } from "./getScimResourceType";
export const getScimResourceType: typeof import("./getScimResourceType").getScimResourceType = null as any;
export const getScimResourceTypeOutput: typeof import("./getScimResourceType").getScimResourceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getScimResourceType","getScimResourceTypeOutput"], () => require("./getScimResourceType"));

export { GetScimResourceTypesArgs, GetScimResourceTypesResult, GetScimResourceTypesOutputArgs } from "./getScimResourceTypes";
export const getScimResourceTypes: typeof import("./getScimResourceTypes").getScimResourceTypes = null as any;
export const getScimResourceTypesOutput: typeof import("./getScimResourceTypes").getScimResourceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getScimResourceTypes","getScimResourceTypesOutput"], () => require("./getScimResourceTypes"));

export { GetScimSchemaArgs, GetScimSchemaResult, GetScimSchemaOutputArgs } from "./getScimSchema";
export const getScimSchema: typeof import("./getScimSchema").getScimSchema = null as any;
export const getScimSchemaOutput: typeof import("./getScimSchema").getScimSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getScimSchema","getScimSchemaOutput"], () => require("./getScimSchema"));

export { GetScimSchemasArgs, GetScimSchemasResult, GetScimSchemasOutputArgs } from "./getScimSchemas";
export const getScimSchemas: typeof import("./getScimSchemas").getScimSchemas = null as any;
export const getScimSchemasOutput: typeof import("./getScimSchemas").getScimSchemasOutput = null as any;
utilities.lazyLoad(exports, ["getScimSchemas","getScimSchemasOutput"], () => require("./getScimSchemas"));

export { GetScimSubattributeArgs, GetScimSubattributeResult, GetScimSubattributeOutputArgs } from "./getScimSubattribute";
export const getScimSubattribute: typeof import("./getScimSubattribute").getScimSubattribute = null as any;
export const getScimSubattributeOutput: typeof import("./getScimSubattribute").getScimSubattributeOutput = null as any;
utilities.lazyLoad(exports, ["getScimSubattribute","getScimSubattributeOutput"], () => require("./getScimSubattribute"));

export { GetScimSubattributesArgs, GetScimSubattributesResult, GetScimSubattributesOutputArgs } from "./getScimSubattributes";
export const getScimSubattributes: typeof import("./getScimSubattributes").getScimSubattributes = null as any;
export const getScimSubattributesOutput: typeof import("./getScimSubattributes").getScimSubattributesOutput = null as any;
utilities.lazyLoad(exports, ["getScimSubattributes","getScimSubattributesOutput"], () => require("./getScimSubattributes"));

export { GetSearchEntryCriteriaArgs, GetSearchEntryCriteriaResult, GetSearchEntryCriteriaOutputArgs } from "./getSearchEntryCriteria";
export const getSearchEntryCriteria: typeof import("./getSearchEntryCriteria").getSearchEntryCriteria = null as any;
export const getSearchEntryCriteriaOutput: typeof import("./getSearchEntryCriteria").getSearchEntryCriteriaOutput = null as any;
utilities.lazyLoad(exports, ["getSearchEntryCriteria","getSearchEntryCriteriaOutput"], () => require("./getSearchEntryCriteria"));

export { GetSearchEntryCriteriaListArgs, GetSearchEntryCriteriaListResult, GetSearchEntryCriteriaListOutputArgs } from "./getSearchEntryCriteriaList";
export const getSearchEntryCriteriaList: typeof import("./getSearchEntryCriteriaList").getSearchEntryCriteriaList = null as any;
export const getSearchEntryCriteriaListOutput: typeof import("./getSearchEntryCriteriaList").getSearchEntryCriteriaListOutput = null as any;
utilities.lazyLoad(exports, ["getSearchEntryCriteriaList","getSearchEntryCriteriaListOutput"], () => require("./getSearchEntryCriteriaList"));

export { GetSearchReferenceCriteriaArgs, GetSearchReferenceCriteriaResult, GetSearchReferenceCriteriaOutputArgs } from "./getSearchReferenceCriteria";
export const getSearchReferenceCriteria: typeof import("./getSearchReferenceCriteria").getSearchReferenceCriteria = null as any;
export const getSearchReferenceCriteriaOutput: typeof import("./getSearchReferenceCriteria").getSearchReferenceCriteriaOutput = null as any;
utilities.lazyLoad(exports, ["getSearchReferenceCriteria","getSearchReferenceCriteriaOutput"], () => require("./getSearchReferenceCriteria"));

export { GetSearchReferenceCriteriaListArgs, GetSearchReferenceCriteriaListResult, GetSearchReferenceCriteriaListOutputArgs } from "./getSearchReferenceCriteriaList";
export const getSearchReferenceCriteriaList: typeof import("./getSearchReferenceCriteriaList").getSearchReferenceCriteriaList = null as any;
export const getSearchReferenceCriteriaListOutput: typeof import("./getSearchReferenceCriteriaList").getSearchReferenceCriteriaListOutput = null as any;
utilities.lazyLoad(exports, ["getSearchReferenceCriteriaList","getSearchReferenceCriteriaListOutput"], () => require("./getSearchReferenceCriteriaList"));

export { GetSensitiveAttributeArgs, GetSensitiveAttributeResult, GetSensitiveAttributeOutputArgs } from "./getSensitiveAttribute";
export const getSensitiveAttribute: typeof import("./getSensitiveAttribute").getSensitiveAttribute = null as any;
export const getSensitiveAttributeOutput: typeof import("./getSensitiveAttribute").getSensitiveAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getSensitiveAttribute","getSensitiveAttributeOutput"], () => require("./getSensitiveAttribute"));

export { GetSensitiveAttributesArgs, GetSensitiveAttributesResult, GetSensitiveAttributesOutputArgs } from "./getSensitiveAttributes";
export const getSensitiveAttributes: typeof import("./getSensitiveAttributes").getSensitiveAttributes = null as any;
export const getSensitiveAttributesOutput: typeof import("./getSensitiveAttributes").getSensitiveAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getSensitiveAttributes","getSensitiveAttributesOutput"], () => require("./getSensitiveAttributes"));

export { GetServerGroupArgs, GetServerGroupResult, GetServerGroupOutputArgs } from "./getServerGroup";
export const getServerGroup: typeof import("./getServerGroup").getServerGroup = null as any;
export const getServerGroupOutput: typeof import("./getServerGroup").getServerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getServerGroup","getServerGroupOutput"], () => require("./getServerGroup"));

export { GetServerGroupsArgs, GetServerGroupsResult, GetServerGroupsOutputArgs } from "./getServerGroups";
export const getServerGroups: typeof import("./getServerGroups").getServerGroups = null as any;
export const getServerGroupsOutput: typeof import("./getServerGroups").getServerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getServerGroups","getServerGroupsOutput"], () => require("./getServerGroups"));

export { GetServerInstanceArgs, GetServerInstanceResult, GetServerInstanceOutputArgs } from "./getServerInstance";
export const getServerInstance: typeof import("./getServerInstance").getServerInstance = null as any;
export const getServerInstanceOutput: typeof import("./getServerInstance").getServerInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getServerInstance","getServerInstanceOutput"], () => require("./getServerInstance"));

export { GetServerInstanceListenerArgs, GetServerInstanceListenerResult, GetServerInstanceListenerOutputArgs } from "./getServerInstanceListener";
export const getServerInstanceListener: typeof import("./getServerInstanceListener").getServerInstanceListener = null as any;
export const getServerInstanceListenerOutput: typeof import("./getServerInstanceListener").getServerInstanceListenerOutput = null as any;
utilities.lazyLoad(exports, ["getServerInstanceListener","getServerInstanceListenerOutput"], () => require("./getServerInstanceListener"));

export { GetServerInstanceListenersArgs, GetServerInstanceListenersResult, GetServerInstanceListenersOutputArgs } from "./getServerInstanceListeners";
export const getServerInstanceListeners: typeof import("./getServerInstanceListeners").getServerInstanceListeners = null as any;
export const getServerInstanceListenersOutput: typeof import("./getServerInstanceListeners").getServerInstanceListenersOutput = null as any;
utilities.lazyLoad(exports, ["getServerInstanceListeners","getServerInstanceListenersOutput"], () => require("./getServerInstanceListeners"));

export { GetServerInstancesArgs, GetServerInstancesResult, GetServerInstancesOutputArgs } from "./getServerInstances";
export const getServerInstances: typeof import("./getServerInstances").getServerInstances = null as any;
export const getServerInstancesOutput: typeof import("./getServerInstances").getServerInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getServerInstances","getServerInstancesOutput"], () => require("./getServerInstances"));

export { GetSoftDeletePoliciesArgs, GetSoftDeletePoliciesResult, GetSoftDeletePoliciesOutputArgs } from "./getSoftDeletePolicies";
export const getSoftDeletePolicies: typeof import("./getSoftDeletePolicies").getSoftDeletePolicies = null as any;
export const getSoftDeletePoliciesOutput: typeof import("./getSoftDeletePolicies").getSoftDeletePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getSoftDeletePolicies","getSoftDeletePoliciesOutput"], () => require("./getSoftDeletePolicies"));

export { GetSoftDeletePolicyArgs, GetSoftDeletePolicyResult, GetSoftDeletePolicyOutputArgs } from "./getSoftDeletePolicy";
export const getSoftDeletePolicy: typeof import("./getSoftDeletePolicy").getSoftDeletePolicy = null as any;
export const getSoftDeletePolicyOutput: typeof import("./getSoftDeletePolicy").getSoftDeletePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSoftDeletePolicy","getSoftDeletePolicyOutput"], () => require("./getSoftDeletePolicy"));

export { GetSynchronizationProviderArgs, GetSynchronizationProviderResult, GetSynchronizationProviderOutputArgs } from "./getSynchronizationProvider";
export const getSynchronizationProvider: typeof import("./getSynchronizationProvider").getSynchronizationProvider = null as any;
export const getSynchronizationProviderOutput: typeof import("./getSynchronizationProvider").getSynchronizationProviderOutput = null as any;
utilities.lazyLoad(exports, ["getSynchronizationProvider","getSynchronizationProviderOutput"], () => require("./getSynchronizationProvider"));

export { GetSynchronizationProvidersArgs, GetSynchronizationProvidersResult, GetSynchronizationProvidersOutputArgs } from "./getSynchronizationProviders";
export const getSynchronizationProviders: typeof import("./getSynchronizationProviders").getSynchronizationProviders = null as any;
export const getSynchronizationProvidersOutput: typeof import("./getSynchronizationProviders").getSynchronizationProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getSynchronizationProviders","getSynchronizationProvidersOutput"], () => require("./getSynchronizationProviders"));

export { GetTokenClaimValidationArgs, GetTokenClaimValidationResult, GetTokenClaimValidationOutputArgs } from "./getTokenClaimValidation";
export const getTokenClaimValidation: typeof import("./getTokenClaimValidation").getTokenClaimValidation = null as any;
export const getTokenClaimValidationOutput: typeof import("./getTokenClaimValidation").getTokenClaimValidationOutput = null as any;
utilities.lazyLoad(exports, ["getTokenClaimValidation","getTokenClaimValidationOutput"], () => require("./getTokenClaimValidation"));

export { GetTokenClaimValidationsArgs, GetTokenClaimValidationsResult, GetTokenClaimValidationsOutputArgs } from "./getTokenClaimValidations";
export const getTokenClaimValidations: typeof import("./getTokenClaimValidations").getTokenClaimValidations = null as any;
export const getTokenClaimValidationsOutput: typeof import("./getTokenClaimValidations").getTokenClaimValidationsOutput = null as any;
utilities.lazyLoad(exports, ["getTokenClaimValidations","getTokenClaimValidationsOutput"], () => require("./getTokenClaimValidations"));

export { GetTopologyAdminUserArgs, GetTopologyAdminUserResult, GetTopologyAdminUserOutputArgs } from "./getTopologyAdminUser";
export const getTopologyAdminUser: typeof import("./getTopologyAdminUser").getTopologyAdminUser = null as any;
export const getTopologyAdminUserOutput: typeof import("./getTopologyAdminUser").getTopologyAdminUserOutput = null as any;
utilities.lazyLoad(exports, ["getTopologyAdminUser","getTopologyAdminUserOutput"], () => require("./getTopologyAdminUser"));

export { GetTopologyAdminUsersArgs, GetTopologyAdminUsersResult, GetTopologyAdminUsersOutputArgs } from "./getTopologyAdminUsers";
export const getTopologyAdminUsers: typeof import("./getTopologyAdminUsers").getTopologyAdminUsers = null as any;
export const getTopologyAdminUsersOutput: typeof import("./getTopologyAdminUsers").getTopologyAdminUsersOutput = null as any;
utilities.lazyLoad(exports, ["getTopologyAdminUsers","getTopologyAdminUsersOutput"], () => require("./getTopologyAdminUsers"));

export { GetTrustManagerProviderArgs, GetTrustManagerProviderResult, GetTrustManagerProviderOutputArgs } from "./getTrustManagerProvider";
export const getTrustManagerProvider: typeof import("./getTrustManagerProvider").getTrustManagerProvider = null as any;
export const getTrustManagerProviderOutput: typeof import("./getTrustManagerProvider").getTrustManagerProviderOutput = null as any;
utilities.lazyLoad(exports, ["getTrustManagerProvider","getTrustManagerProviderOutput"], () => require("./getTrustManagerProvider"));

export { GetTrustManagerProvidersArgs, GetTrustManagerProvidersResult, GetTrustManagerProvidersOutputArgs } from "./getTrustManagerProviders";
export const getTrustManagerProviders: typeof import("./getTrustManagerProviders").getTrustManagerProviders = null as any;
export const getTrustManagerProvidersOutput: typeof import("./getTrustManagerProviders").getTrustManagerProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getTrustManagerProviders","getTrustManagerProvidersOutput"], () => require("./getTrustManagerProviders"));

export { GetTrustedCertificateArgs, GetTrustedCertificateResult, GetTrustedCertificateOutputArgs } from "./getTrustedCertificate";
export const getTrustedCertificate: typeof import("./getTrustedCertificate").getTrustedCertificate = null as any;
export const getTrustedCertificateOutput: typeof import("./getTrustedCertificate").getTrustedCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedCertificate","getTrustedCertificateOutput"], () => require("./getTrustedCertificate"));

export { GetTrustedCertificatesArgs, GetTrustedCertificatesResult, GetTrustedCertificatesOutputArgs } from "./getTrustedCertificates";
export const getTrustedCertificates: typeof import("./getTrustedCertificates").getTrustedCertificates = null as any;
export const getTrustedCertificatesOutput: typeof import("./getTrustedCertificates").getTrustedCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedCertificates","getTrustedCertificatesOutput"], () => require("./getTrustedCertificates"));

export { GetUncachedAttributeCriteriaArgs, GetUncachedAttributeCriteriaResult, GetUncachedAttributeCriteriaOutputArgs } from "./getUncachedAttributeCriteria";
export const getUncachedAttributeCriteria: typeof import("./getUncachedAttributeCriteria").getUncachedAttributeCriteria = null as any;
export const getUncachedAttributeCriteriaOutput: typeof import("./getUncachedAttributeCriteria").getUncachedAttributeCriteriaOutput = null as any;
utilities.lazyLoad(exports, ["getUncachedAttributeCriteria","getUncachedAttributeCriteriaOutput"], () => require("./getUncachedAttributeCriteria"));

export { GetUncachedAttributeCriteriaListArgs, GetUncachedAttributeCriteriaListResult, GetUncachedAttributeCriteriaListOutputArgs } from "./getUncachedAttributeCriteriaList";
export const getUncachedAttributeCriteriaList: typeof import("./getUncachedAttributeCriteriaList").getUncachedAttributeCriteriaList = null as any;
export const getUncachedAttributeCriteriaListOutput: typeof import("./getUncachedAttributeCriteriaList").getUncachedAttributeCriteriaListOutput = null as any;
utilities.lazyLoad(exports, ["getUncachedAttributeCriteriaList","getUncachedAttributeCriteriaListOutput"], () => require("./getUncachedAttributeCriteriaList"));

export { GetUncachedEntryCriteriaArgs, GetUncachedEntryCriteriaResult, GetUncachedEntryCriteriaOutputArgs } from "./getUncachedEntryCriteria";
export const getUncachedEntryCriteria: typeof import("./getUncachedEntryCriteria").getUncachedEntryCriteria = null as any;
export const getUncachedEntryCriteriaOutput: typeof import("./getUncachedEntryCriteria").getUncachedEntryCriteriaOutput = null as any;
utilities.lazyLoad(exports, ["getUncachedEntryCriteria","getUncachedEntryCriteriaOutput"], () => require("./getUncachedEntryCriteria"));

export { GetUncachedEntryCriteriaListArgs, GetUncachedEntryCriteriaListResult, GetUncachedEntryCriteriaListOutputArgs } from "./getUncachedEntryCriteriaList";
export const getUncachedEntryCriteriaList: typeof import("./getUncachedEntryCriteriaList").getUncachedEntryCriteriaList = null as any;
export const getUncachedEntryCriteriaListOutput: typeof import("./getUncachedEntryCriteriaList").getUncachedEntryCriteriaListOutput = null as any;
utilities.lazyLoad(exports, ["getUncachedEntryCriteriaList","getUncachedEntryCriteriaListOutput"], () => require("./getUncachedEntryCriteriaList"));

export { GetVaultAuthenticationMethodArgs, GetVaultAuthenticationMethodResult, GetVaultAuthenticationMethodOutputArgs } from "./getVaultAuthenticationMethod";
export const getVaultAuthenticationMethod: typeof import("./getVaultAuthenticationMethod").getVaultAuthenticationMethod = null as any;
export const getVaultAuthenticationMethodOutput: typeof import("./getVaultAuthenticationMethod").getVaultAuthenticationMethodOutput = null as any;
utilities.lazyLoad(exports, ["getVaultAuthenticationMethod","getVaultAuthenticationMethodOutput"], () => require("./getVaultAuthenticationMethod"));

export { GetVaultAuthenticationMethodsArgs, GetVaultAuthenticationMethodsResult, GetVaultAuthenticationMethodsOutputArgs } from "./getVaultAuthenticationMethods";
export const getVaultAuthenticationMethods: typeof import("./getVaultAuthenticationMethods").getVaultAuthenticationMethods = null as any;
export const getVaultAuthenticationMethodsOutput: typeof import("./getVaultAuthenticationMethods").getVaultAuthenticationMethodsOutput = null as any;
utilities.lazyLoad(exports, ["getVaultAuthenticationMethods","getVaultAuthenticationMethodsOutput"], () => require("./getVaultAuthenticationMethods"));

export { GetVelocityContextProviderArgs, GetVelocityContextProviderResult, GetVelocityContextProviderOutputArgs } from "./getVelocityContextProvider";
export const getVelocityContextProvider: typeof import("./getVelocityContextProvider").getVelocityContextProvider = null as any;
export const getVelocityContextProviderOutput: typeof import("./getVelocityContextProvider").getVelocityContextProviderOutput = null as any;
utilities.lazyLoad(exports, ["getVelocityContextProvider","getVelocityContextProviderOutput"], () => require("./getVelocityContextProvider"));

export { GetVelocityContextProvidersArgs, GetVelocityContextProvidersResult, GetVelocityContextProvidersOutputArgs } from "./getVelocityContextProviders";
export const getVelocityContextProviders: typeof import("./getVelocityContextProviders").getVelocityContextProviders = null as any;
export const getVelocityContextProvidersOutput: typeof import("./getVelocityContextProviders").getVelocityContextProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getVelocityContextProviders","getVelocityContextProvidersOutput"], () => require("./getVelocityContextProviders"));

export { GetVelocityTemplateLoaderArgs, GetVelocityTemplateLoaderResult, GetVelocityTemplateLoaderOutputArgs } from "./getVelocityTemplateLoader";
export const getVelocityTemplateLoader: typeof import("./getVelocityTemplateLoader").getVelocityTemplateLoader = null as any;
export const getVelocityTemplateLoaderOutput: typeof import("./getVelocityTemplateLoader").getVelocityTemplateLoaderOutput = null as any;
utilities.lazyLoad(exports, ["getVelocityTemplateLoader","getVelocityTemplateLoaderOutput"], () => require("./getVelocityTemplateLoader"));

export { GetVelocityTemplateLoadersArgs, GetVelocityTemplateLoadersResult, GetVelocityTemplateLoadersOutputArgs } from "./getVelocityTemplateLoaders";
export const getVelocityTemplateLoaders: typeof import("./getVelocityTemplateLoaders").getVelocityTemplateLoaders = null as any;
export const getVelocityTemplateLoadersOutput: typeof import("./getVelocityTemplateLoaders").getVelocityTemplateLoadersOutput = null as any;
utilities.lazyLoad(exports, ["getVelocityTemplateLoaders","getVelocityTemplateLoadersOutput"], () => require("./getVelocityTemplateLoaders"));

export { GetVirtualAttributeArgs, GetVirtualAttributeResult, GetVirtualAttributeOutputArgs } from "./getVirtualAttribute";
export const getVirtualAttribute: typeof import("./getVirtualAttribute").getVirtualAttribute = null as any;
export const getVirtualAttributeOutput: typeof import("./getVirtualAttribute").getVirtualAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualAttribute","getVirtualAttributeOutput"], () => require("./getVirtualAttribute"));

export { GetVirtualAttributesArgs, GetVirtualAttributesResult, GetVirtualAttributesOutputArgs } from "./getVirtualAttributes";
export const getVirtualAttributes: typeof import("./getVirtualAttributes").getVirtualAttributes = null as any;
export const getVirtualAttributesOutput: typeof import("./getVirtualAttributes").getVirtualAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualAttributes","getVirtualAttributesOutput"], () => require("./getVirtualAttributes"));

export { GetWebApplicationExtensionArgs, GetWebApplicationExtensionResult, GetWebApplicationExtensionOutputArgs } from "./getWebApplicationExtension";
export const getWebApplicationExtension: typeof import("./getWebApplicationExtension").getWebApplicationExtension = null as any;
export const getWebApplicationExtensionOutput: typeof import("./getWebApplicationExtension").getWebApplicationExtensionOutput = null as any;
utilities.lazyLoad(exports, ["getWebApplicationExtension","getWebApplicationExtensionOutput"], () => require("./getWebApplicationExtension"));

export { GetWebApplicationExtensionsArgs, GetWebApplicationExtensionsResult, GetWebApplicationExtensionsOutputArgs } from "./getWebApplicationExtensions";
export const getWebApplicationExtensions: typeof import("./getWebApplicationExtensions").getWebApplicationExtensions = null as any;
export const getWebApplicationExtensionsOutput: typeof import("./getWebApplicationExtensions").getWebApplicationExtensionsOutput = null as any;
utilities.lazyLoad(exports, ["getWebApplicationExtensions","getWebApplicationExtensionsOutput"], () => require("./getWebApplicationExtensions"));

export { GetWorkQueueResult } from "./getWorkQueue";
export const getWorkQueue: typeof import("./getWorkQueue").getWorkQueue = null as any;
export const getWorkQueueOutput: typeof import("./getWorkQueue").getWorkQueueOutput = null as any;
utilities.lazyLoad(exports, ["getWorkQueue","getWorkQueueOutput"], () => require("./getWorkQueue"));

export { HttpServletCrossOriginPolicyArgs, HttpServletCrossOriginPolicyState } from "./httpServletCrossOriginPolicy";
export type HttpServletCrossOriginPolicy = import("./httpServletCrossOriginPolicy").HttpServletCrossOriginPolicy;
export const HttpServletCrossOriginPolicy: typeof import("./httpServletCrossOriginPolicy").HttpServletCrossOriginPolicy = null as any;
utilities.lazyLoad(exports, ["HttpServletCrossOriginPolicy"], () => require("./httpServletCrossOriginPolicy"));

export { HttpServletExtensionArgs, HttpServletExtensionState } from "./httpServletExtension";
export type HttpServletExtension = import("./httpServletExtension").HttpServletExtension;
export const HttpServletExtension: typeof import("./httpServletExtension").HttpServletExtension = null as any;
utilities.lazyLoad(exports, ["HttpServletExtension"], () => require("./httpServletExtension"));

export { IdTokenValidatorArgs, IdTokenValidatorState } from "./idTokenValidator";
export type IdTokenValidator = import("./idTokenValidator").IdTokenValidator;
export const IdTokenValidator: typeof import("./idTokenValidator").IdTokenValidator = null as any;
utilities.lazyLoad(exports, ["IdTokenValidator"], () => require("./idTokenValidator"));

export { IdentityMapperArgs, IdentityMapperState } from "./identityMapper";
export type IdentityMapper = import("./identityMapper").IdentityMapper;
export const IdentityMapper: typeof import("./identityMapper").IdentityMapper = null as any;
utilities.lazyLoad(exports, ["IdentityMapper"], () => require("./identityMapper"));

export { JsonAttributeConstraintsArgs, JsonAttributeConstraintsState } from "./jsonAttributeConstraints";
export type JsonAttributeConstraints = import("./jsonAttributeConstraints").JsonAttributeConstraints;
export const JsonAttributeConstraints: typeof import("./jsonAttributeConstraints").JsonAttributeConstraints = null as any;
utilities.lazyLoad(exports, ["JsonAttributeConstraints"], () => require("./jsonAttributeConstraints"));

export { JsonFieldConstraintsArgs, JsonFieldConstraintsState } from "./jsonFieldConstraints";
export type JsonFieldConstraints = import("./jsonFieldConstraints").JsonFieldConstraints;
export const JsonFieldConstraints: typeof import("./jsonFieldConstraints").JsonFieldConstraints = null as any;
utilities.lazyLoad(exports, ["JsonFieldConstraints"], () => require("./jsonFieldConstraints"));

export { KeyManagerProviderArgs, KeyManagerProviderState } from "./keyManagerProvider";
export type KeyManagerProvider = import("./keyManagerProvider").KeyManagerProvider;
export const KeyManagerProvider: typeof import("./keyManagerProvider").KeyManagerProvider = null as any;
utilities.lazyLoad(exports, ["KeyManagerProvider"], () => require("./keyManagerProvider"));

export { KeyPairArgs, KeyPairState } from "./keyPair";
export type KeyPair = import("./keyPair").KeyPair;
export const KeyPair: typeof import("./keyPair").KeyPair = null as any;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));

export { LdapCorrelationAttributePairArgs, LdapCorrelationAttributePairState } from "./ldapCorrelationAttributePair";
export type LdapCorrelationAttributePair = import("./ldapCorrelationAttributePair").LdapCorrelationAttributePair;
export const LdapCorrelationAttributePair: typeof import("./ldapCorrelationAttributePair").LdapCorrelationAttributePair = null as any;
utilities.lazyLoad(exports, ["LdapCorrelationAttributePair"], () => require("./ldapCorrelationAttributePair"));

export { LocalDbCompositeIndexArgs, LocalDbCompositeIndexState } from "./localDbCompositeIndex";
export type LocalDbCompositeIndex = import("./localDbCompositeIndex").LocalDbCompositeIndex;
export const LocalDbCompositeIndex: typeof import("./localDbCompositeIndex").LocalDbCompositeIndex = null as any;
utilities.lazyLoad(exports, ["LocalDbCompositeIndex"], () => require("./localDbCompositeIndex"));

export { LocalDbIndexArgs, LocalDbIndexState } from "./localDbIndex";
export type LocalDbIndex = import("./localDbIndex").LocalDbIndex;
export const LocalDbIndex: typeof import("./localDbIndex").LocalDbIndex = null as any;
utilities.lazyLoad(exports, ["LocalDbIndex"], () => require("./localDbIndex"));

export { LocalDbVlvIndexArgs, LocalDbVlvIndexState } from "./localDbVlvIndex";
export type LocalDbVlvIndex = import("./localDbVlvIndex").LocalDbVlvIndex;
export const LocalDbVlvIndex: typeof import("./localDbVlvIndex").LocalDbVlvIndex = null as any;
utilities.lazyLoad(exports, ["LocalDbVlvIndex"], () => require("./localDbVlvIndex"));

export { LocationArgs, LocationState } from "./location";
export type Location = import("./location").Location;
export const Location: typeof import("./location").Location = null as any;
utilities.lazyLoad(exports, ["Location"], () => require("./location"));

export { LogFieldBehaviorArgs, LogFieldBehaviorState } from "./logFieldBehavior";
export type LogFieldBehavior = import("./logFieldBehavior").LogFieldBehavior;
export const LogFieldBehavior: typeof import("./logFieldBehavior").LogFieldBehavior = null as any;
utilities.lazyLoad(exports, ["LogFieldBehavior"], () => require("./logFieldBehavior"));

export { LogFieldMappingArgs, LogFieldMappingState } from "./logFieldMapping";
export type LogFieldMapping = import("./logFieldMapping").LogFieldMapping;
export const LogFieldMapping: typeof import("./logFieldMapping").LogFieldMapping = null as any;
utilities.lazyLoad(exports, ["LogFieldMapping"], () => require("./logFieldMapping"));

export { LogFileRotationListenerArgs, LogFileRotationListenerState } from "./logFileRotationListener";
export type LogFileRotationListener = import("./logFileRotationListener").LogFileRotationListener;
export const LogFileRotationListener: typeof import("./logFileRotationListener").LogFileRotationListener = null as any;
utilities.lazyLoad(exports, ["LogFileRotationListener"], () => require("./logFileRotationListener"));

export { LogPublisherArgs, LogPublisherState } from "./logPublisher";
export type LogPublisher = import("./logPublisher").LogPublisher;
export const LogPublisher: typeof import("./logPublisher").LogPublisher = null as any;
utilities.lazyLoad(exports, ["LogPublisher"], () => require("./logPublisher"));

export { LogRetentionPolicyArgs, LogRetentionPolicyState } from "./logRetentionPolicy";
export type LogRetentionPolicy = import("./logRetentionPolicy").LogRetentionPolicy;
export const LogRetentionPolicy: typeof import("./logRetentionPolicy").LogRetentionPolicy = null as any;
utilities.lazyLoad(exports, ["LogRetentionPolicy"], () => require("./logRetentionPolicy"));

export { LogRotationPolicyArgs, LogRotationPolicyState } from "./logRotationPolicy";
export type LogRotationPolicy = import("./logRotationPolicy").LogRotationPolicy;
export const LogRotationPolicy: typeof import("./logRotationPolicy").LogRotationPolicy = null as any;
utilities.lazyLoad(exports, ["LogRotationPolicy"], () => require("./logRotationPolicy"));

export { MonitorProviderArgs, MonitorProviderState } from "./monitorProvider";
export type MonitorProvider = import("./monitorProvider").MonitorProvider;
export const MonitorProvider: typeof import("./monitorProvider").MonitorProvider = null as any;
utilities.lazyLoad(exports, ["MonitorProvider"], () => require("./monitorProvider"));

export { MonitoringEndpointArgs, MonitoringEndpointState } from "./monitoringEndpoint";
export type MonitoringEndpoint = import("./monitoringEndpoint").MonitoringEndpoint;
export const MonitoringEndpoint: typeof import("./monitoringEndpoint").MonitoringEndpoint = null as any;
utilities.lazyLoad(exports, ["MonitoringEndpoint"], () => require("./monitoringEndpoint"));

export { NotificationManagerArgs, NotificationManagerState } from "./notificationManager";
export type NotificationManager = import("./notificationManager").NotificationManager;
export const NotificationManager: typeof import("./notificationManager").NotificationManager = null as any;
utilities.lazyLoad(exports, ["NotificationManager"], () => require("./notificationManager"));

export { OauthTokenHandlerArgs, OauthTokenHandlerState } from "./oauthTokenHandler";
export type OauthTokenHandler = import("./oauthTokenHandler").OauthTokenHandler;
export const OauthTokenHandler: typeof import("./oauthTokenHandler").OauthTokenHandler = null as any;
utilities.lazyLoad(exports, ["OauthTokenHandler"], () => require("./oauthTokenHandler"));

export { ObscuredValueArgs, ObscuredValueState } from "./obscuredValue";
export type ObscuredValue = import("./obscuredValue").ObscuredValue;
export const ObscuredValue: typeof import("./obscuredValue").ObscuredValue = null as any;
utilities.lazyLoad(exports, ["ObscuredValue"], () => require("./obscuredValue"));

export { OtpDeliveryMechanismArgs, OtpDeliveryMechanismState } from "./otpDeliveryMechanism";
export type OtpDeliveryMechanism = import("./otpDeliveryMechanism").OtpDeliveryMechanism;
export const OtpDeliveryMechanism: typeof import("./otpDeliveryMechanism").OtpDeliveryMechanism = null as any;
utilities.lazyLoad(exports, ["OtpDeliveryMechanism"], () => require("./otpDeliveryMechanism"));

export { PassThroughAuthenticationHandlerArgs, PassThroughAuthenticationHandlerState } from "./passThroughAuthenticationHandler";
export type PassThroughAuthenticationHandler = import("./passThroughAuthenticationHandler").PassThroughAuthenticationHandler;
export const PassThroughAuthenticationHandler: typeof import("./passThroughAuthenticationHandler").PassThroughAuthenticationHandler = null as any;
utilities.lazyLoad(exports, ["PassThroughAuthenticationHandler"], () => require("./passThroughAuthenticationHandler"));

export { PassphraseProviderArgs, PassphraseProviderState } from "./passphraseProvider";
export type PassphraseProvider = import("./passphraseProvider").PassphraseProvider;
export const PassphraseProvider: typeof import("./passphraseProvider").PassphraseProvider = null as any;
utilities.lazyLoad(exports, ["PassphraseProvider"], () => require("./passphraseProvider"));

export { PasswordGeneratorArgs, PasswordGeneratorState } from "./passwordGenerator";
export type PasswordGenerator = import("./passwordGenerator").PasswordGenerator;
export const PasswordGenerator: typeof import("./passwordGenerator").PasswordGenerator = null as any;
utilities.lazyLoad(exports, ["PasswordGenerator"], () => require("./passwordGenerator"));

export { PasswordPolicyArgs, PasswordPolicyState } from "./passwordPolicy";
export type PasswordPolicy = import("./passwordPolicy").PasswordPolicy;
export const PasswordPolicy: typeof import("./passwordPolicy").PasswordPolicy = null as any;
utilities.lazyLoad(exports, ["PasswordPolicy"], () => require("./passwordPolicy"));

export { PasswordStorageSchemeArgs, PasswordStorageSchemeState } from "./passwordStorageScheme";
export type PasswordStorageScheme = import("./passwordStorageScheme").PasswordStorageScheme;
export const PasswordStorageScheme: typeof import("./passwordStorageScheme").PasswordStorageScheme = null as any;
utilities.lazyLoad(exports, ["PasswordStorageScheme"], () => require("./passwordStorageScheme"));

export { PasswordValidatorArgs, PasswordValidatorState } from "./passwordValidator";
export type PasswordValidator = import("./passwordValidator").PasswordValidator;
export const PasswordValidator: typeof import("./passwordValidator").PasswordValidator = null as any;
utilities.lazyLoad(exports, ["PasswordValidator"], () => require("./passwordValidator"));

export { PluginArgs, PluginState } from "./plugin";
export type Plugin = import("./plugin").Plugin;
export const Plugin: typeof import("./plugin").Plugin = null as any;
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));

export { PostLdifExportTaskProcessorArgs, PostLdifExportTaskProcessorState } from "./postLdifExportTaskProcessor";
export type PostLdifExportTaskProcessor = import("./postLdifExportTaskProcessor").PostLdifExportTaskProcessor;
export const PostLdifExportTaskProcessor: typeof import("./postLdifExportTaskProcessor").PostLdifExportTaskProcessor = null as any;
utilities.lazyLoad(exports, ["PostLdifExportTaskProcessor"], () => require("./postLdifExportTaskProcessor"));

export { PrometheusMonitorAttributeMetricArgs, PrometheusMonitorAttributeMetricState } from "./prometheusMonitorAttributeMetric";
export type PrometheusMonitorAttributeMetric = import("./prometheusMonitorAttributeMetric").PrometheusMonitorAttributeMetric;
export const PrometheusMonitorAttributeMetric: typeof import("./prometheusMonitorAttributeMetric").PrometheusMonitorAttributeMetric = null as any;
utilities.lazyLoad(exports, ["PrometheusMonitorAttributeMetric"], () => require("./prometheusMonitorAttributeMetric"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RecurringTaskArgs, RecurringTaskState } from "./recurringTask";
export type RecurringTask = import("./recurringTask").RecurringTask;
export const RecurringTask: typeof import("./recurringTask").RecurringTask = null as any;
utilities.lazyLoad(exports, ["RecurringTask"], () => require("./recurringTask"));

export { RecurringTaskChainArgs, RecurringTaskChainState } from "./recurringTaskChain";
export type RecurringTaskChain = import("./recurringTaskChain").RecurringTaskChain;
export const RecurringTaskChain: typeof import("./recurringTaskChain").RecurringTaskChain = null as any;
utilities.lazyLoad(exports, ["RecurringTaskChain"], () => require("./recurringTaskChain"));

export { ReplicationAssurancePolicyArgs, ReplicationAssurancePolicyState } from "./replicationAssurancePolicy";
export type ReplicationAssurancePolicy = import("./replicationAssurancePolicy").ReplicationAssurancePolicy;
export const ReplicationAssurancePolicy: typeof import("./replicationAssurancePolicy").ReplicationAssurancePolicy = null as any;
utilities.lazyLoad(exports, ["ReplicationAssurancePolicy"], () => require("./replicationAssurancePolicy"));

export { RequestCriteriaArgs, RequestCriteriaState } from "./requestCriteria";
export type RequestCriteria = import("./requestCriteria").RequestCriteria;
export const RequestCriteria: typeof import("./requestCriteria").RequestCriteria = null as any;
utilities.lazyLoad(exports, ["RequestCriteria"], () => require("./requestCriteria"));

export { RestResourceTypeArgs, RestResourceTypeState } from "./restResourceType";
export type RestResourceType = import("./restResourceType").RestResourceType;
export const RestResourceType: typeof import("./restResourceType").RestResourceType = null as any;
utilities.lazyLoad(exports, ["RestResourceType"], () => require("./restResourceType"));

export { ResultCodeMapArgs, ResultCodeMapState } from "./resultCodeMap";
export type ResultCodeMap = import("./resultCodeMap").ResultCodeMap;
export const ResultCodeMap: typeof import("./resultCodeMap").ResultCodeMap = null as any;
utilities.lazyLoad(exports, ["ResultCodeMap"], () => require("./resultCodeMap"));

export { ResultCriteriaArgs, ResultCriteriaState } from "./resultCriteria";
export type ResultCriteria = import("./resultCriteria").ResultCriteria;
export const ResultCriteria: typeof import("./resultCriteria").ResultCriteria = null as any;
utilities.lazyLoad(exports, ["ResultCriteria"], () => require("./resultCriteria"));

export { RootDnUserArgs, RootDnUserState } from "./rootDnUser";
export type RootDnUser = import("./rootDnUser").RootDnUser;
export const RootDnUser: typeof import("./rootDnUser").RootDnUser = null as any;
utilities.lazyLoad(exports, ["RootDnUser"], () => require("./rootDnUser"));

export { SaslMechanismHandlerArgs, SaslMechanismHandlerState } from "./saslMechanismHandler";
export type SaslMechanismHandler = import("./saslMechanismHandler").SaslMechanismHandler;
export const SaslMechanismHandler: typeof import("./saslMechanismHandler").SaslMechanismHandler = null as any;
utilities.lazyLoad(exports, ["SaslMechanismHandler"], () => require("./saslMechanismHandler"));

export { ScimAttributeArgs, ScimAttributeState } from "./scimAttribute";
export type ScimAttribute = import("./scimAttribute").ScimAttribute;
export const ScimAttribute: typeof import("./scimAttribute").ScimAttribute = null as any;
utilities.lazyLoad(exports, ["ScimAttribute"], () => require("./scimAttribute"));

export { ScimAttributeMappingArgs, ScimAttributeMappingState } from "./scimAttributeMapping";
export type ScimAttributeMapping = import("./scimAttributeMapping").ScimAttributeMapping;
export const ScimAttributeMapping: typeof import("./scimAttributeMapping").ScimAttributeMapping = null as any;
utilities.lazyLoad(exports, ["ScimAttributeMapping"], () => require("./scimAttributeMapping"));

export { ScimResourceTypeArgs, ScimResourceTypeState } from "./scimResourceType";
export type ScimResourceType = import("./scimResourceType").ScimResourceType;
export const ScimResourceType: typeof import("./scimResourceType").ScimResourceType = null as any;
utilities.lazyLoad(exports, ["ScimResourceType"], () => require("./scimResourceType"));

export { ScimSchemaArgs, ScimSchemaState } from "./scimSchema";
export type ScimSchema = import("./scimSchema").ScimSchema;
export const ScimSchema: typeof import("./scimSchema").ScimSchema = null as any;
utilities.lazyLoad(exports, ["ScimSchema"], () => require("./scimSchema"));

export { ScimSubattributeArgs, ScimSubattributeState } from "./scimSubattribute";
export type ScimSubattribute = import("./scimSubattribute").ScimSubattribute;
export const ScimSubattribute: typeof import("./scimSubattribute").ScimSubattribute = null as any;
utilities.lazyLoad(exports, ["ScimSubattribute"], () => require("./scimSubattribute"));

export { SearchEntryCriteriaArgs, SearchEntryCriteriaState } from "./searchEntryCriteria";
export type SearchEntryCriteria = import("./searchEntryCriteria").SearchEntryCriteria;
export const SearchEntryCriteria: typeof import("./searchEntryCriteria").SearchEntryCriteria = null as any;
utilities.lazyLoad(exports, ["SearchEntryCriteria"], () => require("./searchEntryCriteria"));

export { SearchReferenceCriteriaArgs, SearchReferenceCriteriaState } from "./searchReferenceCriteria";
export type SearchReferenceCriteria = import("./searchReferenceCriteria").SearchReferenceCriteria;
export const SearchReferenceCriteria: typeof import("./searchReferenceCriteria").SearchReferenceCriteria = null as any;
utilities.lazyLoad(exports, ["SearchReferenceCriteria"], () => require("./searchReferenceCriteria"));

export { SensitiveAttributeArgs, SensitiveAttributeState } from "./sensitiveAttribute";
export type SensitiveAttribute = import("./sensitiveAttribute").SensitiveAttribute;
export const SensitiveAttribute: typeof import("./sensitiveAttribute").SensitiveAttribute = null as any;
utilities.lazyLoad(exports, ["SensitiveAttribute"], () => require("./sensitiveAttribute"));

export { ServerGroupArgs, ServerGroupState } from "./serverGroup";
export type ServerGroup = import("./serverGroup").ServerGroup;
export const ServerGroup: typeof import("./serverGroup").ServerGroup = null as any;
utilities.lazyLoad(exports, ["ServerGroup"], () => require("./serverGroup"));

export { SoftDeletePolicyArgs, SoftDeletePolicyState } from "./softDeletePolicy";
export type SoftDeletePolicy = import("./softDeletePolicy").SoftDeletePolicy;
export const SoftDeletePolicy: typeof import("./softDeletePolicy").SoftDeletePolicy = null as any;
utilities.lazyLoad(exports, ["SoftDeletePolicy"], () => require("./softDeletePolicy"));

export { TokenClaimValidationArgs, TokenClaimValidationState } from "./tokenClaimValidation";
export type TokenClaimValidation = import("./tokenClaimValidation").TokenClaimValidation;
export const TokenClaimValidation: typeof import("./tokenClaimValidation").TokenClaimValidation = null as any;
utilities.lazyLoad(exports, ["TokenClaimValidation"], () => require("./tokenClaimValidation"));

export { TopologyAdminUserArgs, TopologyAdminUserState } from "./topologyAdminUser";
export type TopologyAdminUser = import("./topologyAdminUser").TopologyAdminUser;
export const TopologyAdminUser: typeof import("./topologyAdminUser").TopologyAdminUser = null as any;
utilities.lazyLoad(exports, ["TopologyAdminUser"], () => require("./topologyAdminUser"));

export { TrustManagerProviderArgs, TrustManagerProviderState } from "./trustManagerProvider";
export type TrustManagerProvider = import("./trustManagerProvider").TrustManagerProvider;
export const TrustManagerProvider: typeof import("./trustManagerProvider").TrustManagerProvider = null as any;
utilities.lazyLoad(exports, ["TrustManagerProvider"], () => require("./trustManagerProvider"));

export { TrustedCertificateArgs, TrustedCertificateState } from "./trustedCertificate";
export type TrustedCertificate = import("./trustedCertificate").TrustedCertificate;
export const TrustedCertificate: typeof import("./trustedCertificate").TrustedCertificate = null as any;
utilities.lazyLoad(exports, ["TrustedCertificate"], () => require("./trustedCertificate"));

export { UncachedAttributeCriteriaArgs, UncachedAttributeCriteriaState } from "./uncachedAttributeCriteria";
export type UncachedAttributeCriteria = import("./uncachedAttributeCriteria").UncachedAttributeCriteria;
export const UncachedAttributeCriteria: typeof import("./uncachedAttributeCriteria").UncachedAttributeCriteria = null as any;
utilities.lazyLoad(exports, ["UncachedAttributeCriteria"], () => require("./uncachedAttributeCriteria"));

export { UncachedEntryCriteriaArgs, UncachedEntryCriteriaState } from "./uncachedEntryCriteria";
export type UncachedEntryCriteria = import("./uncachedEntryCriteria").UncachedEntryCriteria;
export const UncachedEntryCriteria: typeof import("./uncachedEntryCriteria").UncachedEntryCriteria = null as any;
utilities.lazyLoad(exports, ["UncachedEntryCriteria"], () => require("./uncachedEntryCriteria"));

export { VaultAuthenticationMethodArgs, VaultAuthenticationMethodState } from "./vaultAuthenticationMethod";
export type VaultAuthenticationMethod = import("./vaultAuthenticationMethod").VaultAuthenticationMethod;
export const VaultAuthenticationMethod: typeof import("./vaultAuthenticationMethod").VaultAuthenticationMethod = null as any;
utilities.lazyLoad(exports, ["VaultAuthenticationMethod"], () => require("./vaultAuthenticationMethod"));

export { VelocityContextProviderArgs, VelocityContextProviderState } from "./velocityContextProvider";
export type VelocityContextProvider = import("./velocityContextProvider").VelocityContextProvider;
export const VelocityContextProvider: typeof import("./velocityContextProvider").VelocityContextProvider = null as any;
utilities.lazyLoad(exports, ["VelocityContextProvider"], () => require("./velocityContextProvider"));

export { VelocityTemplateLoaderArgs, VelocityTemplateLoaderState } from "./velocityTemplateLoader";
export type VelocityTemplateLoader = import("./velocityTemplateLoader").VelocityTemplateLoader;
export const VelocityTemplateLoader: typeof import("./velocityTemplateLoader").VelocityTemplateLoader = null as any;
utilities.lazyLoad(exports, ["VelocityTemplateLoader"], () => require("./velocityTemplateLoader"));

export { VirtualAttributeArgs, VirtualAttributeState } from "./virtualAttribute";
export type VirtualAttribute = import("./virtualAttribute").VirtualAttribute;
export const VirtualAttribute: typeof import("./virtualAttribute").VirtualAttribute = null as any;
utilities.lazyLoad(exports, ["VirtualAttribute"], () => require("./virtualAttribute"));

export { WebApplicationExtensionArgs, WebApplicationExtensionState } from "./webApplicationExtension";
export type WebApplicationExtension = import("./webApplicationExtension").WebApplicationExtension;
export const WebApplicationExtension: typeof import("./webApplicationExtension").WebApplicationExtension = null as any;
utilities.lazyLoad(exports, ["WebApplicationExtension"], () => require("./webApplicationExtension"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pingdirectory:index/accessTokenValidator:AccessTokenValidator":
                return new AccessTokenValidator(name, <any>undefined, { urn })
            case "pingdirectory:index/accountStatusNotificationHandler:AccountStatusNotificationHandler":
                return new AccountStatusNotificationHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/alertHandler:AlertHandler":
                return new AlertHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/azureAuthenticationMethod:AzureAuthenticationMethod":
                return new AzureAuthenticationMethod(name, <any>undefined, { urn })
            case "pingdirectory:index/backend:Backend":
                return new Backend(name, <any>undefined, { urn })
            case "pingdirectory:index/certificateMapper:CertificateMapper":
                return new CertificateMapper(name, <any>undefined, { urn })
            case "pingdirectory:index/changeSubscription:ChangeSubscription":
                return new ChangeSubscription(name, <any>undefined, { urn })
            case "pingdirectory:index/changeSubscriptionHandler:ChangeSubscriptionHandler":
                return new ChangeSubscriptionHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/cipherStreamProvider:CipherStreamProvider":
                return new CipherStreamProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/clientConnectionPolicy:ClientConnectionPolicy":
                return new ClientConnectionPolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/conjurAuthenticationMethod:ConjurAuthenticationMethod":
                return new ConjurAuthenticationMethod(name, <any>undefined, { urn })
            case "pingdirectory:index/connectionCriteria:ConnectionCriteria":
                return new ConnectionCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/connectionHandler:ConnectionHandler":
                return new ConnectionHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/consentDefinition:ConsentDefinition":
                return new ConsentDefinition(name, <any>undefined, { urn })
            case "pingdirectory:index/consentDefinitionLocalization:ConsentDefinitionLocalization":
                return new ConsentDefinitionLocalization(name, <any>undefined, { urn })
            case "pingdirectory:index/constructedAttribute:ConstructedAttribute":
                return new ConstructedAttribute(name, <any>undefined, { urn })
            case "pingdirectory:index/correlatedLdapDataView:CorrelatedLdapDataView":
                return new CorrelatedLdapDataView(name, <any>undefined, { urn })
            case "pingdirectory:index/customLoggedStats:CustomLoggedStats":
                return new CustomLoggedStats(name, <any>undefined, { urn })
            case "pingdirectory:index/dataSecurityAuditor:DataSecurityAuditor":
                return new DataSecurityAuditor(name, <any>undefined, { urn })
            case "pingdirectory:index/debugTarget:DebugTarget":
                return new DebugTarget(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultAccessControlHandler:DefaultAccessControlHandler":
                return new DefaultAccessControlHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultAccessTokenValidator:DefaultAccessTokenValidator":
                return new DefaultAccessTokenValidator(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultAccountStatusNotificationHandler:DefaultAccountStatusNotificationHandler":
                return new DefaultAccountStatusNotificationHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultAlarmManager:DefaultAlarmManager":
                return new DefaultAlarmManager(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultAlertHandler:DefaultAlertHandler":
                return new DefaultAlertHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultAttributeSyntax:DefaultAttributeSyntax":
                return new DefaultAttributeSyntax(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultAzureAuthenticationMethod:DefaultAzureAuthenticationMethod":
                return new DefaultAzureAuthenticationMethod(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultBackend:DefaultBackend":
                return new DefaultBackend(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultCertificateMapper:DefaultCertificateMapper":
                return new DefaultCertificateMapper(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultChangeSubscription:DefaultChangeSubscription":
                return new DefaultChangeSubscription(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultChangeSubscriptionHandler:DefaultChangeSubscriptionHandler":
                return new DefaultChangeSubscriptionHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultCipherSecretKey:DefaultCipherSecretKey":
                return new DefaultCipherSecretKey(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultCipherStreamProvider:DefaultCipherStreamProvider":
                return new DefaultCipherStreamProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultClientConnectionPolicy:DefaultClientConnectionPolicy":
                return new DefaultClientConnectionPolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultConjurAuthenticationMethod:DefaultConjurAuthenticationMethod":
                return new DefaultConjurAuthenticationMethod(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultConnectionCriteria:DefaultConnectionCriteria":
                return new DefaultConnectionCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultConnectionHandler:DefaultConnectionHandler":
                return new DefaultConnectionHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultConsentDefinition:DefaultConsentDefinition":
                return new DefaultConsentDefinition(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultConsentDefinitionLocalization:DefaultConsentDefinitionLocalization":
                return new DefaultConsentDefinitionLocalization(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultConsentService:DefaultConsentService":
                return new DefaultConsentService(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultConstructedAttribute:DefaultConstructedAttribute":
                return new DefaultConstructedAttribute(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultCorrelatedLdapDataView:DefaultCorrelatedLdapDataView":
                return new DefaultCorrelatedLdapDataView(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultCryptoManager:DefaultCryptoManager":
                return new DefaultCryptoManager(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultCustomLoggedStats:DefaultCustomLoggedStats":
                return new DefaultCustomLoggedStats(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultDataSecurityAuditor:DefaultDataSecurityAuditor":
                return new DefaultDataSecurityAuditor(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultDebugTarget:DefaultDebugTarget":
                return new DefaultDebugTarget(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultDelegatedAdminAttribute:DefaultDelegatedAdminAttribute":
                return new DefaultDelegatedAdminAttribute(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultDelegatedAdminAttributeCategory:DefaultDelegatedAdminAttributeCategory":
                return new DefaultDelegatedAdminAttributeCategory(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultDelegatedAdminCorrelatedRestResource:DefaultDelegatedAdminCorrelatedRestResource":
                return new DefaultDelegatedAdminCorrelatedRestResource(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultDelegatedAdminResourceRights:DefaultDelegatedAdminResourceRights":
                return new DefaultDelegatedAdminResourceRights(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultDelegatedAdminRights:DefaultDelegatedAdminRights":
                return new DefaultDelegatedAdminRights(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultDnMap:DefaultDnMap":
                return new DefaultDnMap(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultEntryCache:DefaultEntryCache":
                return new DefaultEntryCache(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultExtendedOperationHandler:DefaultExtendedOperationHandler":
                return new DefaultExtendedOperationHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultExternalServer:DefaultExternalServer":
                return new DefaultExternalServer(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultFailureLockoutAction:DefaultFailureLockoutAction":
                return new DefaultFailureLockoutAction(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultGauge:DefaultGauge":
                return new DefaultGauge(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultGaugeDataSource:DefaultGaugeDataSource":
                return new DefaultGaugeDataSource(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultGlobalConfiguration:DefaultGlobalConfiguration":
                return new DefaultGlobalConfiguration(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultGroupImplementation:DefaultGroupImplementation":
                return new DefaultGroupImplementation(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultHttpConfiguration:DefaultHttpConfiguration":
                return new DefaultHttpConfiguration(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultHttpServletCrossOriginPolicy:DefaultHttpServletCrossOriginPolicy":
                return new DefaultHttpServletCrossOriginPolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultHttpServletExtension:DefaultHttpServletExtension":
                return new DefaultHttpServletExtension(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultIdTokenValidator:DefaultIdTokenValidator":
                return new DefaultIdTokenValidator(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultIdentityMapper:DefaultIdentityMapper":
                return new DefaultIdentityMapper(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultInterServerAuthenticationInfo:DefaultInterServerAuthenticationInfo":
                return new DefaultInterServerAuthenticationInfo(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultJsonAttributeConstraints:DefaultJsonAttributeConstraints":
                return new DefaultJsonAttributeConstraints(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultJsonFieldConstraints:DefaultJsonFieldConstraints":
                return new DefaultJsonFieldConstraints(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultKeyManagerProvider:DefaultKeyManagerProvider":
                return new DefaultKeyManagerProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultKeyPair:DefaultKeyPair":
                return new DefaultKeyPair(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLdapCorrelationAttributePair:DefaultLdapCorrelationAttributePair":
                return new DefaultLdapCorrelationAttributePair(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLdapSdkDebugLogger:DefaultLdapSdkDebugLogger":
                return new DefaultLdapSdkDebugLogger(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLicense:DefaultLicense":
                return new DefaultLicense(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLocalDbCompositeIndex:DefaultLocalDbCompositeIndex":
                return new DefaultLocalDbCompositeIndex(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLocalDbIndex:DefaultLocalDbIndex":
                return new DefaultLocalDbIndex(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLocalDbVlvIndex:DefaultLocalDbVlvIndex":
                return new DefaultLocalDbVlvIndex(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLocation:DefaultLocation":
                return new DefaultLocation(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLogFieldBehavior:DefaultLogFieldBehavior":
                return new DefaultLogFieldBehavior(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLogFieldMapping:DefaultLogFieldMapping":
                return new DefaultLogFieldMapping(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLogFieldSyntax:DefaultLogFieldSyntax":
                return new DefaultLogFieldSyntax(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLogFileRotationListener:DefaultLogFileRotationListener":
                return new DefaultLogFileRotationListener(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLogPublisher:DefaultLogPublisher":
                return new DefaultLogPublisher(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLogRetentionPolicy:DefaultLogRetentionPolicy":
                return new DefaultLogRetentionPolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultLogRotationPolicy:DefaultLogRotationPolicy":
                return new DefaultLogRotationPolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultMacSecretKey:DefaultMacSecretKey":
                return new DefaultMacSecretKey(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultMatchingRule:DefaultMatchingRule":
                return new DefaultMatchingRule(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultMonitorProvider:DefaultMonitorProvider":
                return new DefaultMonitorProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultMonitoringEndpoint:DefaultMonitoringEndpoint":
                return new DefaultMonitoringEndpoint(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultNotificationManager:DefaultNotificationManager":
                return new DefaultNotificationManager(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultOauthTokenHandler:DefaultOauthTokenHandler":
                return new DefaultOauthTokenHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultObscuredValue:DefaultObscuredValue":
                return new DefaultObscuredValue(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultOtpDeliveryMechanism:DefaultOtpDeliveryMechanism":
                return new DefaultOtpDeliveryMechanism(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultPassThroughAuthenticationHandler:DefaultPassThroughAuthenticationHandler":
                return new DefaultPassThroughAuthenticationHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultPassphraseProvider:DefaultPassphraseProvider":
                return new DefaultPassphraseProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultPasswordGenerator:DefaultPasswordGenerator":
                return new DefaultPasswordGenerator(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultPasswordPolicy:DefaultPasswordPolicy":
                return new DefaultPasswordPolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultPasswordStorageScheme:DefaultPasswordStorageScheme":
                return new DefaultPasswordStorageScheme(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultPasswordValidator:DefaultPasswordValidator":
                return new DefaultPasswordValidator(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultPlugin:DefaultPlugin":
                return new DefaultPlugin(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultPluginRoot:DefaultPluginRoot":
                return new DefaultPluginRoot(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultPostLdifExportTaskProcessor:DefaultPostLdifExportTaskProcessor":
                return new DefaultPostLdifExportTaskProcessor(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultPrometheusMonitorAttributeMetric:DefaultPrometheusMonitorAttributeMetric":
                return new DefaultPrometheusMonitorAttributeMetric(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultRecurringTask:DefaultRecurringTask":
                return new DefaultRecurringTask(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultRecurringTaskChain:DefaultRecurringTaskChain":
                return new DefaultRecurringTaskChain(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultReplicationAssurancePolicy:DefaultReplicationAssurancePolicy":
                return new DefaultReplicationAssurancePolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultReplicationDomain:DefaultReplicationDomain":
                return new DefaultReplicationDomain(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultReplicationServer:DefaultReplicationServer":
                return new DefaultReplicationServer(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultRequestCriteria:DefaultRequestCriteria":
                return new DefaultRequestCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultRestResourceType:DefaultRestResourceType":
                return new DefaultRestResourceType(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultResultCodeMap:DefaultResultCodeMap":
                return new DefaultResultCodeMap(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultResultCriteria:DefaultResultCriteria":
                return new DefaultResultCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultRootDn:DefaultRootDn":
                return new DefaultRootDn(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultRootDnUser:DefaultRootDnUser":
                return new DefaultRootDnUser(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultRootDseBackend:DefaultRootDseBackend":
                return new DefaultRootDseBackend(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultSaslMechanismHandler:DefaultSaslMechanismHandler":
                return new DefaultSaslMechanismHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultScimAttribute:DefaultScimAttribute":
                return new DefaultScimAttribute(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultScimAttributeMapping:DefaultScimAttributeMapping":
                return new DefaultScimAttributeMapping(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultScimResourceType:DefaultScimResourceType":
                return new DefaultScimResourceType(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultScimSchema:DefaultScimSchema":
                return new DefaultScimSchema(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultScimSubattribute:DefaultScimSubattribute":
                return new DefaultScimSubattribute(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultSearchEntryCriteria:DefaultSearchEntryCriteria":
                return new DefaultSearchEntryCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultSearchReferenceCriteria:DefaultSearchReferenceCriteria":
                return new DefaultSearchReferenceCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultSensitiveAttribute:DefaultSensitiveAttribute":
                return new DefaultSensitiveAttribute(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultServerGroup:DefaultServerGroup":
                return new DefaultServerGroup(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultServerInstance:DefaultServerInstance":
                return new DefaultServerInstance(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultServerInstanceListener:DefaultServerInstanceListener":
                return new DefaultServerInstanceListener(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultSoftDeletePolicy:DefaultSoftDeletePolicy":
                return new DefaultSoftDeletePolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultSynchronizationProvider:DefaultSynchronizationProvider":
                return new DefaultSynchronizationProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultTokenClaimValidation:DefaultTokenClaimValidation":
                return new DefaultTokenClaimValidation(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultTopologyAdminUser:DefaultTopologyAdminUser":
                return new DefaultTopologyAdminUser(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultTrustManagerProvider:DefaultTrustManagerProvider":
                return new DefaultTrustManagerProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultTrustedCertificate:DefaultTrustedCertificate":
                return new DefaultTrustedCertificate(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultUncachedAttributeCriteria:DefaultUncachedAttributeCriteria":
                return new DefaultUncachedAttributeCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultUncachedEntryCriteria:DefaultUncachedEntryCriteria":
                return new DefaultUncachedEntryCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultVaultAuthenticationMethod:DefaultVaultAuthenticationMethod":
                return new DefaultVaultAuthenticationMethod(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultVelocityContextProvider:DefaultVelocityContextProvider":
                return new DefaultVelocityContextProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultVelocityTemplateLoader:DefaultVelocityTemplateLoader":
                return new DefaultVelocityTemplateLoader(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultVirtualAttribute:DefaultVirtualAttribute":
                return new DefaultVirtualAttribute(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultWebApplicationExtension:DefaultWebApplicationExtension":
                return new DefaultWebApplicationExtension(name, <any>undefined, { urn })
            case "pingdirectory:index/defaultWorkQueue:DefaultWorkQueue":
                return new DefaultWorkQueue(name, <any>undefined, { urn })
            case "pingdirectory:index/delegatedAdminAttribute:DelegatedAdminAttribute":
                return new DelegatedAdminAttribute(name, <any>undefined, { urn })
            case "pingdirectory:index/delegatedAdminAttributeCategory:DelegatedAdminAttributeCategory":
                return new DelegatedAdminAttributeCategory(name, <any>undefined, { urn })
            case "pingdirectory:index/delegatedAdminCorrelatedRestResource:DelegatedAdminCorrelatedRestResource":
                return new DelegatedAdminCorrelatedRestResource(name, <any>undefined, { urn })
            case "pingdirectory:index/delegatedAdminResourceRights:DelegatedAdminResourceRights":
                return new DelegatedAdminResourceRights(name, <any>undefined, { urn })
            case "pingdirectory:index/delegatedAdminRights:DelegatedAdminRights":
                return new DelegatedAdminRights(name, <any>undefined, { urn })
            case "pingdirectory:index/dnMap:DnMap":
                return new DnMap(name, <any>undefined, { urn })
            case "pingdirectory:index/entryCache:EntryCache":
                return new EntryCache(name, <any>undefined, { urn })
            case "pingdirectory:index/extendedOperationHandler:ExtendedOperationHandler":
                return new ExtendedOperationHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/externalServer:ExternalServer":
                return new ExternalServer(name, <any>undefined, { urn })
            case "pingdirectory:index/failureLockoutAction:FailureLockoutAction":
                return new FailureLockoutAction(name, <any>undefined, { urn })
            case "pingdirectory:index/gauge:Gauge":
                return new Gauge(name, <any>undefined, { urn })
            case "pingdirectory:index/gaugeDataSource:GaugeDataSource":
                return new GaugeDataSource(name, <any>undefined, { urn })
            case "pingdirectory:index/httpServletCrossOriginPolicy:HttpServletCrossOriginPolicy":
                return new HttpServletCrossOriginPolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/httpServletExtension:HttpServletExtension":
                return new HttpServletExtension(name, <any>undefined, { urn })
            case "pingdirectory:index/idTokenValidator:IdTokenValidator":
                return new IdTokenValidator(name, <any>undefined, { urn })
            case "pingdirectory:index/identityMapper:IdentityMapper":
                return new IdentityMapper(name, <any>undefined, { urn })
            case "pingdirectory:index/jsonAttributeConstraints:JsonAttributeConstraints":
                return new JsonAttributeConstraints(name, <any>undefined, { urn })
            case "pingdirectory:index/jsonFieldConstraints:JsonFieldConstraints":
                return new JsonFieldConstraints(name, <any>undefined, { urn })
            case "pingdirectory:index/keyManagerProvider:KeyManagerProvider":
                return new KeyManagerProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/keyPair:KeyPair":
                return new KeyPair(name, <any>undefined, { urn })
            case "pingdirectory:index/ldapCorrelationAttributePair:LdapCorrelationAttributePair":
                return new LdapCorrelationAttributePair(name, <any>undefined, { urn })
            case "pingdirectory:index/localDbCompositeIndex:LocalDbCompositeIndex":
                return new LocalDbCompositeIndex(name, <any>undefined, { urn })
            case "pingdirectory:index/localDbIndex:LocalDbIndex":
                return new LocalDbIndex(name, <any>undefined, { urn })
            case "pingdirectory:index/localDbVlvIndex:LocalDbVlvIndex":
                return new LocalDbVlvIndex(name, <any>undefined, { urn })
            case "pingdirectory:index/location:Location":
                return new Location(name, <any>undefined, { urn })
            case "pingdirectory:index/logFieldBehavior:LogFieldBehavior":
                return new LogFieldBehavior(name, <any>undefined, { urn })
            case "pingdirectory:index/logFieldMapping:LogFieldMapping":
                return new LogFieldMapping(name, <any>undefined, { urn })
            case "pingdirectory:index/logFileRotationListener:LogFileRotationListener":
                return new LogFileRotationListener(name, <any>undefined, { urn })
            case "pingdirectory:index/logPublisher:LogPublisher":
                return new LogPublisher(name, <any>undefined, { urn })
            case "pingdirectory:index/logRetentionPolicy:LogRetentionPolicy":
                return new LogRetentionPolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/logRotationPolicy:LogRotationPolicy":
                return new LogRotationPolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/monitorProvider:MonitorProvider":
                return new MonitorProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/monitoringEndpoint:MonitoringEndpoint":
                return new MonitoringEndpoint(name, <any>undefined, { urn })
            case "pingdirectory:index/notificationManager:NotificationManager":
                return new NotificationManager(name, <any>undefined, { urn })
            case "pingdirectory:index/oauthTokenHandler:OauthTokenHandler":
                return new OauthTokenHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/obscuredValue:ObscuredValue":
                return new ObscuredValue(name, <any>undefined, { urn })
            case "pingdirectory:index/otpDeliveryMechanism:OtpDeliveryMechanism":
                return new OtpDeliveryMechanism(name, <any>undefined, { urn })
            case "pingdirectory:index/passThroughAuthenticationHandler:PassThroughAuthenticationHandler":
                return new PassThroughAuthenticationHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/passphraseProvider:PassphraseProvider":
                return new PassphraseProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/passwordGenerator:PasswordGenerator":
                return new PasswordGenerator(name, <any>undefined, { urn })
            case "pingdirectory:index/passwordPolicy:PasswordPolicy":
                return new PasswordPolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/passwordStorageScheme:PasswordStorageScheme":
                return new PasswordStorageScheme(name, <any>undefined, { urn })
            case "pingdirectory:index/passwordValidator:PasswordValidator":
                return new PasswordValidator(name, <any>undefined, { urn })
            case "pingdirectory:index/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "pingdirectory:index/postLdifExportTaskProcessor:PostLdifExportTaskProcessor":
                return new PostLdifExportTaskProcessor(name, <any>undefined, { urn })
            case "pingdirectory:index/prometheusMonitorAttributeMetric:PrometheusMonitorAttributeMetric":
                return new PrometheusMonitorAttributeMetric(name, <any>undefined, { urn })
            case "pingdirectory:index/recurringTask:RecurringTask":
                return new RecurringTask(name, <any>undefined, { urn })
            case "pingdirectory:index/recurringTaskChain:RecurringTaskChain":
                return new RecurringTaskChain(name, <any>undefined, { urn })
            case "pingdirectory:index/replicationAssurancePolicy:ReplicationAssurancePolicy":
                return new ReplicationAssurancePolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/requestCriteria:RequestCriteria":
                return new RequestCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/restResourceType:RestResourceType":
                return new RestResourceType(name, <any>undefined, { urn })
            case "pingdirectory:index/resultCodeMap:ResultCodeMap":
                return new ResultCodeMap(name, <any>undefined, { urn })
            case "pingdirectory:index/resultCriteria:ResultCriteria":
                return new ResultCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/rootDnUser:RootDnUser":
                return new RootDnUser(name, <any>undefined, { urn })
            case "pingdirectory:index/saslMechanismHandler:SaslMechanismHandler":
                return new SaslMechanismHandler(name, <any>undefined, { urn })
            case "pingdirectory:index/scimAttribute:ScimAttribute":
                return new ScimAttribute(name, <any>undefined, { urn })
            case "pingdirectory:index/scimAttributeMapping:ScimAttributeMapping":
                return new ScimAttributeMapping(name, <any>undefined, { urn })
            case "pingdirectory:index/scimResourceType:ScimResourceType":
                return new ScimResourceType(name, <any>undefined, { urn })
            case "pingdirectory:index/scimSchema:ScimSchema":
                return new ScimSchema(name, <any>undefined, { urn })
            case "pingdirectory:index/scimSubattribute:ScimSubattribute":
                return new ScimSubattribute(name, <any>undefined, { urn })
            case "pingdirectory:index/searchEntryCriteria:SearchEntryCriteria":
                return new SearchEntryCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/searchReferenceCriteria:SearchReferenceCriteria":
                return new SearchReferenceCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/sensitiveAttribute:SensitiveAttribute":
                return new SensitiveAttribute(name, <any>undefined, { urn })
            case "pingdirectory:index/serverGroup:ServerGroup":
                return new ServerGroup(name, <any>undefined, { urn })
            case "pingdirectory:index/softDeletePolicy:SoftDeletePolicy":
                return new SoftDeletePolicy(name, <any>undefined, { urn })
            case "pingdirectory:index/tokenClaimValidation:TokenClaimValidation":
                return new TokenClaimValidation(name, <any>undefined, { urn })
            case "pingdirectory:index/topologyAdminUser:TopologyAdminUser":
                return new TopologyAdminUser(name, <any>undefined, { urn })
            case "pingdirectory:index/trustManagerProvider:TrustManagerProvider":
                return new TrustManagerProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/trustedCertificate:TrustedCertificate":
                return new TrustedCertificate(name, <any>undefined, { urn })
            case "pingdirectory:index/uncachedAttributeCriteria:UncachedAttributeCriteria":
                return new UncachedAttributeCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/uncachedEntryCriteria:UncachedEntryCriteria":
                return new UncachedEntryCriteria(name, <any>undefined, { urn })
            case "pingdirectory:index/vaultAuthenticationMethod:VaultAuthenticationMethod":
                return new VaultAuthenticationMethod(name, <any>undefined, { urn })
            case "pingdirectory:index/velocityContextProvider:VelocityContextProvider":
                return new VelocityContextProvider(name, <any>undefined, { urn })
            case "pingdirectory:index/velocityTemplateLoader:VelocityTemplateLoader":
                return new VelocityTemplateLoader(name, <any>undefined, { urn })
            case "pingdirectory:index/virtualAttribute:VirtualAttribute":
                return new VirtualAttribute(name, <any>undefined, { urn })
            case "pingdirectory:index/webApplicationExtension:WebApplicationExtension":
                return new WebApplicationExtension(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pingdirectory", "index/accessTokenValidator", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/accountStatusNotificationHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/alertHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/azureAuthenticationMethod", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/backend", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/certificateMapper", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/changeSubscription", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/changeSubscriptionHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/cipherStreamProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/clientConnectionPolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/conjurAuthenticationMethod", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/connectionCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/connectionHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/consentDefinition", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/consentDefinitionLocalization", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/constructedAttribute", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/correlatedLdapDataView", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/customLoggedStats", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/dataSecurityAuditor", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/debugTarget", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultAccessControlHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultAccessTokenValidator", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultAccountStatusNotificationHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultAlarmManager", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultAlertHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultAttributeSyntax", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultAzureAuthenticationMethod", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultBackend", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultCertificateMapper", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultChangeSubscription", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultChangeSubscriptionHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultCipherSecretKey", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultCipherStreamProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultClientConnectionPolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultConjurAuthenticationMethod", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultConnectionCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultConnectionHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultConsentDefinition", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultConsentDefinitionLocalization", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultConsentService", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultConstructedAttribute", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultCorrelatedLdapDataView", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultCryptoManager", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultCustomLoggedStats", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultDataSecurityAuditor", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultDebugTarget", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultDelegatedAdminAttribute", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultDelegatedAdminAttributeCategory", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultDelegatedAdminCorrelatedRestResource", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultDelegatedAdminResourceRights", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultDelegatedAdminRights", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultDnMap", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultEntryCache", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultExtendedOperationHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultExternalServer", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultFailureLockoutAction", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultGauge", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultGaugeDataSource", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultGlobalConfiguration", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultGroupImplementation", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultHttpConfiguration", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultHttpServletCrossOriginPolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultHttpServletExtension", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultIdTokenValidator", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultIdentityMapper", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultInterServerAuthenticationInfo", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultJsonAttributeConstraints", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultJsonFieldConstraints", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultKeyManagerProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultKeyPair", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLdapCorrelationAttributePair", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLdapSdkDebugLogger", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLicense", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLocalDbCompositeIndex", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLocalDbIndex", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLocalDbVlvIndex", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLocation", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLogFieldBehavior", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLogFieldMapping", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLogFieldSyntax", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLogFileRotationListener", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLogPublisher", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLogRetentionPolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultLogRotationPolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultMacSecretKey", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultMatchingRule", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultMonitorProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultMonitoringEndpoint", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultNotificationManager", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultOauthTokenHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultObscuredValue", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultOtpDeliveryMechanism", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultPassThroughAuthenticationHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultPassphraseProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultPasswordGenerator", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultPasswordPolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultPasswordStorageScheme", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultPasswordValidator", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultPlugin", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultPluginRoot", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultPostLdifExportTaskProcessor", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultPrometheusMonitorAttributeMetric", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultRecurringTask", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultRecurringTaskChain", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultReplicationAssurancePolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultReplicationDomain", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultReplicationServer", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultRequestCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultRestResourceType", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultResultCodeMap", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultResultCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultRootDn", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultRootDnUser", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultRootDseBackend", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultSaslMechanismHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultScimAttribute", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultScimAttributeMapping", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultScimResourceType", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultScimSchema", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultScimSubattribute", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultSearchEntryCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultSearchReferenceCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultSensitiveAttribute", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultServerGroup", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultServerInstance", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultServerInstanceListener", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultSoftDeletePolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultSynchronizationProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultTokenClaimValidation", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultTopologyAdminUser", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultTrustManagerProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultTrustedCertificate", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultUncachedAttributeCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultUncachedEntryCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultVaultAuthenticationMethod", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultVelocityContextProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultVelocityTemplateLoader", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultVirtualAttribute", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultWebApplicationExtension", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/defaultWorkQueue", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/delegatedAdminAttribute", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/delegatedAdminAttributeCategory", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/delegatedAdminCorrelatedRestResource", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/delegatedAdminResourceRights", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/delegatedAdminRights", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/dnMap", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/entryCache", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/extendedOperationHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/externalServer", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/failureLockoutAction", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/gauge", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/gaugeDataSource", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/httpServletCrossOriginPolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/httpServletExtension", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/idTokenValidator", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/identityMapper", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/jsonAttributeConstraints", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/jsonFieldConstraints", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/keyManagerProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/keyPair", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/ldapCorrelationAttributePair", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/localDbCompositeIndex", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/localDbIndex", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/localDbVlvIndex", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/location", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/logFieldBehavior", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/logFieldMapping", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/logFileRotationListener", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/logPublisher", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/logRetentionPolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/logRotationPolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/monitorProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/monitoringEndpoint", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/notificationManager", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/oauthTokenHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/obscuredValue", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/otpDeliveryMechanism", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/passThroughAuthenticationHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/passphraseProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/passwordGenerator", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/passwordPolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/passwordStorageScheme", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/passwordValidator", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/plugin", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/postLdifExportTaskProcessor", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/prometheusMonitorAttributeMetric", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/recurringTask", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/recurringTaskChain", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/replicationAssurancePolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/requestCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/restResourceType", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/resultCodeMap", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/resultCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/rootDnUser", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/saslMechanismHandler", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/scimAttribute", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/scimAttributeMapping", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/scimResourceType", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/scimSchema", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/scimSubattribute", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/searchEntryCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/searchReferenceCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/sensitiveAttribute", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/serverGroup", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/softDeletePolicy", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/tokenClaimValidation", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/topologyAdminUser", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/trustManagerProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/trustedCertificate", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/uncachedAttributeCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/uncachedEntryCriteria", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/vaultAuthenticationMethod", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/velocityContextProvider", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/velocityTemplateLoader", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/virtualAttribute", _module)
pulumi.runtime.registerResourceModule("pingdirectory", "index/webApplicationExtension", _module)
pulumi.runtime.registerResourcePackage("pingdirectory", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pingdirectory") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
