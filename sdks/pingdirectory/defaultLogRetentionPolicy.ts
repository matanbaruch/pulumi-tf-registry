// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultLogRetentionPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DefaultLogRetentionPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultLogRetentionPolicyState, opts?: pulumi.CustomResourceOptions): DefaultLogRetentionPolicy {
        return new DefaultLogRetentionPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultLogRetentionPolicy:DefaultLogRetentionPolicy';

    /**
     * Returns true if the given object is an instance of DefaultLogRetentionPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultLogRetentionPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultLogRetentionPolicy.__pulumiType;
    }

    /**
     * A description for this Log Retention Policy
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies the maximum total disk space used by the log files.
     */
    public readonly diskSpaceUsed!: pulumi.Output<string>;
    /**
     * Specifies the minimum amount of free disk space that should be available on the file system on which the archived log
     * files are stored.
     */
    public readonly freeDiskSpace!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies the number of archived log files to retain before the oldest ones are cleaned.
     */
    public readonly numberOfFiles!: pulumi.Output<number>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultLogRetentionPolicyRequiredAction[]>;
    /**
     * Specifies the desired minimum length of time that each log file should be retained.
     */
    public readonly retainDuration!: pulumi.Output<string>;
    /**
     * The type of Log Retention Policy resource. Options are ['time-limit', 'never-delete', 'file-count', 'free-disk-space',
     * 'size-limit']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultLogRetentionPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultLogRetentionPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultLogRetentionPolicyArgs | DefaultLogRetentionPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultLogRetentionPolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskSpaceUsed"] = state ? state.diskSpaceUsed : undefined;
            resourceInputs["freeDiskSpace"] = state ? state.freeDiskSpace : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["numberOfFiles"] = state ? state.numberOfFiles : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["retainDuration"] = state ? state.retainDuration : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultLogRetentionPolicyArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskSpaceUsed"] = args ? args.diskSpaceUsed : undefined;
            resourceInputs["freeDiskSpace"] = args ? args.freeDiskSpace : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfFiles"] = args ? args.numberOfFiles : undefined;
            resourceInputs["retainDuration"] = args ? args.retainDuration : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultLogRetentionPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultLogRetentionPolicy resources.
 */
export interface DefaultLogRetentionPolicyState {
    /**
     * A description for this Log Retention Policy
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the maximum total disk space used by the log files.
     */
    diskSpaceUsed?: pulumi.Input<string>;
    /**
     * Specifies the minimum amount of free disk space that should be available on the file system on which the archived log
     * files are stored.
     */
    freeDiskSpace?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the number of archived log files to retain before the oldest ones are cleaned.
     */
    numberOfFiles?: pulumi.Input<number>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultLogRetentionPolicyRequiredAction>[]>;
    /**
     * Specifies the desired minimum length of time that each log file should be retained.
     */
    retainDuration?: pulumi.Input<string>;
    /**
     * The type of Log Retention Policy resource. Options are ['time-limit', 'never-delete', 'file-count', 'free-disk-space',
     * 'size-limit']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultLogRetentionPolicy resource.
 */
export interface DefaultLogRetentionPolicyArgs {
    /**
     * A description for this Log Retention Policy
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the maximum total disk space used by the log files.
     */
    diskSpaceUsed?: pulumi.Input<string>;
    /**
     * Specifies the minimum amount of free disk space that should be available on the file system on which the archived log
     * files are stored.
     */
    freeDiskSpace?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the number of archived log files to retain before the oldest ones are cleaned.
     */
    numberOfFiles?: pulumi.Input<number>;
    /**
     * Specifies the desired minimum length of time that each log file should be retained.
     */
    retainDuration?: pulumi.Input<string>;
}
