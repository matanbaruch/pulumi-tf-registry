// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultWebApplicationExtension extends pulumi.CustomResource {
    /**
     * Get an existing DefaultWebApplicationExtension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultWebApplicationExtensionState, opts?: pulumi.CustomResourceOptions): DefaultWebApplicationExtension {
        return new DefaultWebApplicationExtension(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultWebApplicationExtension:DefaultWebApplicationExtension';

    /**
     * Returns true if the given object is an instance of DefaultWebApplicationExtension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultWebApplicationExtension {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultWebApplicationExtension.__pulumiType;
    }

    /**
     * Specifies the base context path that should be used by HTTP clients to reference content. The value must start with a
     * forward slash and at least one additional character and must represent a valid HTTP context path.
     */
    public readonly baseContextPath!: pulumi.Output<string>;
    /**
     * Specifies the maximum complexity level for managed configuration elements.
     */
    public readonly complexity!: pulumi.Output<string>;
    /**
     * Specifies the path to the deployment descriptor file when used with document-root-directory.
     */
    public readonly deploymentDescriptorFile!: pulumi.Output<string>;
    /**
     * A description for this Web Application Extension
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies the path to the directory on the local filesystem containing the files to be served by this Web Application
     * Extension. The path must exist, and it must be a directory.
     */
    public readonly documentRootDirectory!: pulumi.Output<string>;
    /**
     * Specifies an initialization parameter to pass into the web application during startup.
     */
    public readonly initParameters!: pulumi.Output<string[]>;
    /**
     * The LDAP URL used to connect to the managed server.
     */
    public readonly ldapServer!: pulumi.Output<string>;
    /**
     * The path to the log file for the web application.
     */
    public readonly logFile!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * The client ID to use when authenticating to the OpenID Connect provider.
     */
    public readonly oidcClientId!: pulumi.Output<string>;
    /**
     * The client secret to use when authenticating to the OpenID Connect provider.
     */
    public readonly oidcClientSecret!: pulumi.Output<string>;
    /**
     * A passphrase provider that may be used to obtain the client secret to use when authenticating to the OpenID Connect
     * provider.
     */
    public readonly oidcClientSecretPassphraseProvider!: pulumi.Output<string>;
    /**
     * The issuer URL of the OpenID Connect provider.
     */
    public readonly oidcIssuerUrl!: pulumi.Output<string>;
    /**
     * Controls whether or not hostname verification is performed, which checks if the hostname of the OIDC provider matches
     * the name(s) stored inside the certificate it provides. This property should only be set to false for testing purposes.
     */
    public readonly oidcStrictHostnameVerification!: pulumi.Output<boolean>;
    /**
     * Controls whether or not this application will always trust any certificate that is presented to it, regardless of its
     * contents. This property should only be set to true for testing purposes.
     */
    public readonly oidcTrustAll!: pulumi.Output<boolean>;
    /**
     * Specifies the path to the truststore file used by this application to evaluate OIDC provider certificates. If this field
     * is left blank, the default JVM trust store will be used.
     */
    public readonly oidcTrustStoreFile!: pulumi.Output<string>;
    /**
     * The passphrase provider that may be used to obtain the PIN for the trust store used with OIDC providers. This is only
     * required if a trust store file is required, and if that trust store requires a PIN to access its contents.
     */
    public readonly oidcTrustStorePinPassphraseProvider!: pulumi.Output<string>;
    /**
     * Specifies the format for the data in the OIDC trust store file.
     */
    public readonly oidcTrustStoreType!: pulumi.Output<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultWebApplicationExtensionRequiredAction[]>;
    /**
     * Indicates that SSO login into the Administrative Console is enabled.
     */
    public readonly ssoEnabled!: pulumi.Output<boolean>;
    /**
     * Specifies the path to the directory that may be used to store temporary files such as extracted WAR files and compiled
     * JSP files.
     */
    public readonly temporaryDirectory!: pulumi.Output<string>;
    /**
     * Specifies the path to the truststore file, which is used by this application to establish trust of managed servers.
     */
    public readonly trustStoreFile!: pulumi.Output<string>;
    /**
     * The passphrase provider that may be used to obtain the PIN for the trust store used with managed LDAP servers. This is
     * only required if a trust store file is required, and if that trust store requires a PIN to access its contents.
     */
    public readonly trustStorePinPassphraseProvider!: pulumi.Output<string>;
    /**
     * Specifies the format for the data in the trust store file.
     */
    public readonly trustStoreType!: pulumi.Output<string>;
    /**
     * The type of Web Application Extension resource. Options are ['console', 'generic']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Specifies the path to a standard web application archive (WAR) file.
     */
    public readonly warFile!: pulumi.Output<string>;

    /**
     * Create a DefaultWebApplicationExtension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultWebApplicationExtensionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultWebApplicationExtensionArgs | DefaultWebApplicationExtensionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultWebApplicationExtensionState | undefined;
            resourceInputs["baseContextPath"] = state ? state.baseContextPath : undefined;
            resourceInputs["complexity"] = state ? state.complexity : undefined;
            resourceInputs["deploymentDescriptorFile"] = state ? state.deploymentDescriptorFile : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["documentRootDirectory"] = state ? state.documentRootDirectory : undefined;
            resourceInputs["initParameters"] = state ? state.initParameters : undefined;
            resourceInputs["ldapServer"] = state ? state.ldapServer : undefined;
            resourceInputs["logFile"] = state ? state.logFile : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["oidcClientId"] = state ? state.oidcClientId : undefined;
            resourceInputs["oidcClientSecret"] = state ? state.oidcClientSecret : undefined;
            resourceInputs["oidcClientSecretPassphraseProvider"] = state ? state.oidcClientSecretPassphraseProvider : undefined;
            resourceInputs["oidcIssuerUrl"] = state ? state.oidcIssuerUrl : undefined;
            resourceInputs["oidcStrictHostnameVerification"] = state ? state.oidcStrictHostnameVerification : undefined;
            resourceInputs["oidcTrustAll"] = state ? state.oidcTrustAll : undefined;
            resourceInputs["oidcTrustStoreFile"] = state ? state.oidcTrustStoreFile : undefined;
            resourceInputs["oidcTrustStorePinPassphraseProvider"] = state ? state.oidcTrustStorePinPassphraseProvider : undefined;
            resourceInputs["oidcTrustStoreType"] = state ? state.oidcTrustStoreType : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["ssoEnabled"] = state ? state.ssoEnabled : undefined;
            resourceInputs["temporaryDirectory"] = state ? state.temporaryDirectory : undefined;
            resourceInputs["trustStoreFile"] = state ? state.trustStoreFile : undefined;
            resourceInputs["trustStorePinPassphraseProvider"] = state ? state.trustStorePinPassphraseProvider : undefined;
            resourceInputs["trustStoreType"] = state ? state.trustStoreType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["warFile"] = state ? state.warFile : undefined;
        } else {
            const args = argsOrState as DefaultWebApplicationExtensionArgs | undefined;
            resourceInputs["baseContextPath"] = args ? args.baseContextPath : undefined;
            resourceInputs["complexity"] = args ? args.complexity : undefined;
            resourceInputs["deploymentDescriptorFile"] = args ? args.deploymentDescriptorFile : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["documentRootDirectory"] = args ? args.documentRootDirectory : undefined;
            resourceInputs["initParameters"] = args ? args.initParameters : undefined;
            resourceInputs["ldapServer"] = args ? args.ldapServer : undefined;
            resourceInputs["logFile"] = args ? args.logFile : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oidcClientId"] = args ? args.oidcClientId : undefined;
            resourceInputs["oidcClientSecret"] = args?.oidcClientSecret ? pulumi.secret(args.oidcClientSecret) : undefined;
            resourceInputs["oidcClientSecretPassphraseProvider"] = args ? args.oidcClientSecretPassphraseProvider : undefined;
            resourceInputs["oidcIssuerUrl"] = args ? args.oidcIssuerUrl : undefined;
            resourceInputs["oidcStrictHostnameVerification"] = args ? args.oidcStrictHostnameVerification : undefined;
            resourceInputs["oidcTrustAll"] = args ? args.oidcTrustAll : undefined;
            resourceInputs["oidcTrustStoreFile"] = args ? args.oidcTrustStoreFile : undefined;
            resourceInputs["oidcTrustStorePinPassphraseProvider"] = args ? args.oidcTrustStorePinPassphraseProvider : undefined;
            resourceInputs["oidcTrustStoreType"] = args ? args.oidcTrustStoreType : undefined;
            resourceInputs["ssoEnabled"] = args ? args.ssoEnabled : undefined;
            resourceInputs["temporaryDirectory"] = args ? args.temporaryDirectory : undefined;
            resourceInputs["trustStoreFile"] = args ? args.trustStoreFile : undefined;
            resourceInputs["trustStorePinPassphraseProvider"] = args ? args.trustStorePinPassphraseProvider : undefined;
            resourceInputs["trustStoreType"] = args ? args.trustStoreType : undefined;
            resourceInputs["warFile"] = args ? args.warFile : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["oidcClientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DefaultWebApplicationExtension.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultWebApplicationExtension resources.
 */
export interface DefaultWebApplicationExtensionState {
    /**
     * Specifies the base context path that should be used by HTTP clients to reference content. The value must start with a
     * forward slash and at least one additional character and must represent a valid HTTP context path.
     */
    baseContextPath?: pulumi.Input<string>;
    /**
     * Specifies the maximum complexity level for managed configuration elements.
     */
    complexity?: pulumi.Input<string>;
    /**
     * Specifies the path to the deployment descriptor file when used with document-root-directory.
     */
    deploymentDescriptorFile?: pulumi.Input<string>;
    /**
     * A description for this Web Application Extension
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the path to the directory on the local filesystem containing the files to be served by this Web Application
     * Extension. The path must exist, and it must be a directory.
     */
    documentRootDirectory?: pulumi.Input<string>;
    /**
     * Specifies an initialization parameter to pass into the web application during startup.
     */
    initParameters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The LDAP URL used to connect to the managed server.
     */
    ldapServer?: pulumi.Input<string>;
    /**
     * The path to the log file for the web application.
     */
    logFile?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The client ID to use when authenticating to the OpenID Connect provider.
     */
    oidcClientId?: pulumi.Input<string>;
    /**
     * The client secret to use when authenticating to the OpenID Connect provider.
     */
    oidcClientSecret?: pulumi.Input<string>;
    /**
     * A passphrase provider that may be used to obtain the client secret to use when authenticating to the OpenID Connect
     * provider.
     */
    oidcClientSecretPassphraseProvider?: pulumi.Input<string>;
    /**
     * The issuer URL of the OpenID Connect provider.
     */
    oidcIssuerUrl?: pulumi.Input<string>;
    /**
     * Controls whether or not hostname verification is performed, which checks if the hostname of the OIDC provider matches
     * the name(s) stored inside the certificate it provides. This property should only be set to false for testing purposes.
     */
    oidcStrictHostnameVerification?: pulumi.Input<boolean>;
    /**
     * Controls whether or not this application will always trust any certificate that is presented to it, regardless of its
     * contents. This property should only be set to true for testing purposes.
     */
    oidcTrustAll?: pulumi.Input<boolean>;
    /**
     * Specifies the path to the truststore file used by this application to evaluate OIDC provider certificates. If this field
     * is left blank, the default JVM trust store will be used.
     */
    oidcTrustStoreFile?: pulumi.Input<string>;
    /**
     * The passphrase provider that may be used to obtain the PIN for the trust store used with OIDC providers. This is only
     * required if a trust store file is required, and if that trust store requires a PIN to access its contents.
     */
    oidcTrustStorePinPassphraseProvider?: pulumi.Input<string>;
    /**
     * Specifies the format for the data in the OIDC trust store file.
     */
    oidcTrustStoreType?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultWebApplicationExtensionRequiredAction>[]>;
    /**
     * Indicates that SSO login into the Administrative Console is enabled.
     */
    ssoEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the path to the directory that may be used to store temporary files such as extracted WAR files and compiled
     * JSP files.
     */
    temporaryDirectory?: pulumi.Input<string>;
    /**
     * Specifies the path to the truststore file, which is used by this application to establish trust of managed servers.
     */
    trustStoreFile?: pulumi.Input<string>;
    /**
     * The passphrase provider that may be used to obtain the PIN for the trust store used with managed LDAP servers. This is
     * only required if a trust store file is required, and if that trust store requires a PIN to access its contents.
     */
    trustStorePinPassphraseProvider?: pulumi.Input<string>;
    /**
     * Specifies the format for the data in the trust store file.
     */
    trustStoreType?: pulumi.Input<string>;
    /**
     * The type of Web Application Extension resource. Options are ['console', 'generic']
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the path to a standard web application archive (WAR) file.
     */
    warFile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultWebApplicationExtension resource.
 */
export interface DefaultWebApplicationExtensionArgs {
    /**
     * Specifies the base context path that should be used by HTTP clients to reference content. The value must start with a
     * forward slash and at least one additional character and must represent a valid HTTP context path.
     */
    baseContextPath?: pulumi.Input<string>;
    /**
     * Specifies the maximum complexity level for managed configuration elements.
     */
    complexity?: pulumi.Input<string>;
    /**
     * Specifies the path to the deployment descriptor file when used with document-root-directory.
     */
    deploymentDescriptorFile?: pulumi.Input<string>;
    /**
     * A description for this Web Application Extension
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the path to the directory on the local filesystem containing the files to be served by this Web Application
     * Extension. The path must exist, and it must be a directory.
     */
    documentRootDirectory?: pulumi.Input<string>;
    /**
     * Specifies an initialization parameter to pass into the web application during startup.
     */
    initParameters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The LDAP URL used to connect to the managed server.
     */
    ldapServer?: pulumi.Input<string>;
    /**
     * The path to the log file for the web application.
     */
    logFile?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * The client ID to use when authenticating to the OpenID Connect provider.
     */
    oidcClientId?: pulumi.Input<string>;
    /**
     * The client secret to use when authenticating to the OpenID Connect provider.
     */
    oidcClientSecret?: pulumi.Input<string>;
    /**
     * A passphrase provider that may be used to obtain the client secret to use when authenticating to the OpenID Connect
     * provider.
     */
    oidcClientSecretPassphraseProvider?: pulumi.Input<string>;
    /**
     * The issuer URL of the OpenID Connect provider.
     */
    oidcIssuerUrl?: pulumi.Input<string>;
    /**
     * Controls whether or not hostname verification is performed, which checks if the hostname of the OIDC provider matches
     * the name(s) stored inside the certificate it provides. This property should only be set to false for testing purposes.
     */
    oidcStrictHostnameVerification?: pulumi.Input<boolean>;
    /**
     * Controls whether or not this application will always trust any certificate that is presented to it, regardless of its
     * contents. This property should only be set to true for testing purposes.
     */
    oidcTrustAll?: pulumi.Input<boolean>;
    /**
     * Specifies the path to the truststore file used by this application to evaluate OIDC provider certificates. If this field
     * is left blank, the default JVM trust store will be used.
     */
    oidcTrustStoreFile?: pulumi.Input<string>;
    /**
     * The passphrase provider that may be used to obtain the PIN for the trust store used with OIDC providers. This is only
     * required if a trust store file is required, and if that trust store requires a PIN to access its contents.
     */
    oidcTrustStorePinPassphraseProvider?: pulumi.Input<string>;
    /**
     * Specifies the format for the data in the OIDC trust store file.
     */
    oidcTrustStoreType?: pulumi.Input<string>;
    /**
     * Indicates that SSO login into the Administrative Console is enabled.
     */
    ssoEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the path to the directory that may be used to store temporary files such as extracted WAR files and compiled
     * JSP files.
     */
    temporaryDirectory?: pulumi.Input<string>;
    /**
     * Specifies the path to the truststore file, which is used by this application to establish trust of managed servers.
     */
    trustStoreFile?: pulumi.Input<string>;
    /**
     * The passphrase provider that may be used to obtain the PIN for the trust store used with managed LDAP servers. This is
     * only required if a trust store file is required, and if that trust store requires a PIN to access its contents.
     */
    trustStorePinPassphraseProvider?: pulumi.Input<string>;
    /**
     * Specifies the format for the data in the trust store file.
     */
    trustStoreType?: pulumi.Input<string>;
    /**
     * Specifies the path to a standard web application archive (WAR) file.
     */
    warFile?: pulumi.Input<string>;
}
