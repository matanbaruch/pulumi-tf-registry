// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getExternalServer(args: GetExternalServerArgs, opts?: pulumi.InvokeOptions): Promise<GetExternalServerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getExternalServer:getExternalServer", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getExternalServer.
 */
export interface GetExternalServerArgs {
    name: string;
}

/**
 * A collection of values returned by getExternalServer.
 */
export interface GetExternalServerResult {
    readonly abandonOnTimeout: boolean;
    readonly authenticationMethod: string;
    readonly awsAccessKeyId: string;
    readonly awsRegionName: string;
    readonly awsSecretAccessKey: string;
    readonly baseUrl: string;
    readonly basicAuthenticationPassphraseProvider: string;
    readonly basicAuthenticationUsername: string;
    readonly bindDn: string;
    readonly conjurAccountName: string;
    readonly conjurAuthenticationMethod: string;
    readonly conjurServerBaseUris: string[];
    readonly connectTimeout: string;
    readonly connectionSecurity: string;
    readonly databaseName: string;
    readonly defunctConnectionResultCodes: string[];
    readonly description: string;
    readonly healthCheckConnectTimeout: string;
    readonly hostnameVerificationMethod: string;
    readonly httpConnectTimeout: string;
    readonly httpProxyExternalServer: string;
    readonly httpResponseTimeout: string;
    readonly id: string;
    readonly initialConnections: number;
    readonly jdbcConnectionProperties: string[];
    readonly jdbcDriverType: string;
    readonly jdbcDriverUrl: string;
    readonly keyManagerProvider: string;
    readonly location: string;
    readonly maxConnectionAge: string;
    readonly maxConnections: number;
    readonly maxResponseSize: string;
    readonly minExpiredConnectionDisconnectInterval: string;
    readonly name: string;
    readonly passphraseProvider: string;
    readonly password: string;
    readonly responseTimeout: string;
    readonly serverHostName: string;
    readonly serverPort: number;
    readonly smtpConnectionProperties: string[];
    readonly smtpSecurity: string;
    readonly smtpTimeout: string;
    readonly sslCertNickname: string;
    readonly transactionIsolationLevel: string;
    readonly transportMechanism: string;
    readonly trustManagerProvider: string;
    readonly trustStoreFile: string;
    readonly trustStorePin: string;
    readonly trustStoreType: string;
    readonly type: string;
    readonly useAdministrativeOperationControl: boolean;
    readonly userName: string;
    readonly validationQuery: string;
    readonly validationQueryTimeout: string;
    readonly vaultAuthenticationMethod: string;
    readonly vaultServerBaseUris: string[];
    readonly verifyCredentialsMethod: string;
}
export function getExternalServerOutput(args: GetExternalServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetExternalServerResult> {
    return pulumi.output(args).apply((a: any) => getExternalServer(a, opts))
}

/**
 * A collection of arguments for invoking getExternalServer.
 */
export interface GetExternalServerOutputArgs {
    name: pulumi.Input<string>;
}
