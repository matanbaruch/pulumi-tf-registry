// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultDelegatedAdminRights extends pulumi.CustomResource {
    /**
     * Get an existing DefaultDelegatedAdminRights resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultDelegatedAdminRightsState, opts?: pulumi.CustomResourceOptions): DefaultDelegatedAdminRights {
        return new DefaultDelegatedAdminRights(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultDelegatedAdminRights:DefaultDelegatedAdminRights';

    /**
     * Returns true if the given object is an instance of DefaultDelegatedAdminRights.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultDelegatedAdminRights {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultDelegatedAdminRights.__pulumiType;
    }

    /**
     * Specifies the DN of a group of administrative users who have authority to manage resources. Either admin-user-dn or
     * admin-group-dn must be specified, but not both.
     */
    public readonly adminGroupDn!: pulumi.Output<string>;
    /**
     * Specifies the DN of an administrative user who has authority to manage resources. Either admin-user-dn or admin-group-dn
     * must be specified, but not both.
     */
    public readonly adminUserDn!: pulumi.Output<string>;
    /**
     * A description for this Delegated Admin Rights
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Indicates whether the Delegated Admin Rights is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultDelegatedAdminRightsRequiredAction[]>;
    /**
     * The type of Delegated Admin Rights resource. Options are ['delegated-admin-rights']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultDelegatedAdminRights resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultDelegatedAdminRightsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultDelegatedAdminRightsArgs | DefaultDelegatedAdminRightsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultDelegatedAdminRightsState | undefined;
            resourceInputs["adminGroupDn"] = state ? state.adminGroupDn : undefined;
            resourceInputs["adminUserDn"] = state ? state.adminUserDn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultDelegatedAdminRightsArgs | undefined;
            resourceInputs["adminGroupDn"] = args ? args.adminGroupDn : undefined;
            resourceInputs["adminUserDn"] = args ? args.adminUserDn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultDelegatedAdminRights.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultDelegatedAdminRights resources.
 */
export interface DefaultDelegatedAdminRightsState {
    /**
     * Specifies the DN of a group of administrative users who have authority to manage resources. Either admin-user-dn or
     * admin-group-dn must be specified, but not both.
     */
    adminGroupDn?: pulumi.Input<string>;
    /**
     * Specifies the DN of an administrative user who has authority to manage resources. Either admin-user-dn or admin-group-dn
     * must be specified, but not both.
     */
    adminUserDn?: pulumi.Input<string>;
    /**
     * A description for this Delegated Admin Rights
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the Delegated Admin Rights is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultDelegatedAdminRightsRequiredAction>[]>;
    /**
     * The type of Delegated Admin Rights resource. Options are ['delegated-admin-rights']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultDelegatedAdminRights resource.
 */
export interface DefaultDelegatedAdminRightsArgs {
    /**
     * Specifies the DN of a group of administrative users who have authority to manage resources. Either admin-user-dn or
     * admin-group-dn must be specified, but not both.
     */
    adminGroupDn?: pulumi.Input<string>;
    /**
     * Specifies the DN of an administrative user who has authority to manage resources. Either admin-user-dn or admin-group-dn
     * must be specified, but not both.
     */
    adminUserDn?: pulumi.Input<string>;
    /**
     * A description for this Delegated Admin Rights
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the Delegated Admin Rights is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
}
