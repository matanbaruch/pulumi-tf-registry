// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultRootDseBackend extends pulumi.CustomResource {
    /**
     * Get an existing DefaultRootDseBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultRootDseBackendState, opts?: pulumi.CustomResourceOptions): DefaultRootDseBackend {
        return new DefaultRootDseBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultRootDseBackend:DefaultRootDseBackend';

    /**
     * Returns true if the given object is an instance of DefaultRootDseBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultRootDseBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultRootDseBackend.__pulumiType;
    }

    /**
     * Specifies an additional OID that should appear in the list of supportedControl values in the server's root DSE.
     */
    public readonly additionalSupportedControlOids!: pulumi.Output<string[]>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultRootDseBackendRequiredAction[]>;
    /**
     * Indicates whether all attributes in the root DSE are to be treated like user attributes (and therefore returned to
     * clients by default) regardless of the Directory Server schema configuration.
     */
    public readonly showAllAttributes!: pulumi.Output<boolean>;
    /**
     * Specifies the set of base DNs used for singleLevel, wholeSubtree, and subordinateSubtree searches based at the root DSE.
     */
    public readonly subordinateBaseDns!: pulumi.Output<string[]>;
    /**
     * The type of Root DSE Backend resource. Options are ['root-dse-backend']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Indicates whether the server's root DSE should reflect current or legacy values for the vendorName and vendorVersion
     * attributes.
     */
    public readonly useLegacyVendorVersion!: pulumi.Output<boolean>;

    /**
     * Create a DefaultRootDseBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultRootDseBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultRootDseBackendArgs | DefaultRootDseBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultRootDseBackendState | undefined;
            resourceInputs["additionalSupportedControlOids"] = state ? state.additionalSupportedControlOids : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["showAllAttributes"] = state ? state.showAllAttributes : undefined;
            resourceInputs["subordinateBaseDns"] = state ? state.subordinateBaseDns : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["useLegacyVendorVersion"] = state ? state.useLegacyVendorVersion : undefined;
        } else {
            const args = argsOrState as DefaultRootDseBackendArgs | undefined;
            resourceInputs["additionalSupportedControlOids"] = args ? args.additionalSupportedControlOids : undefined;
            resourceInputs["showAllAttributes"] = args ? args.showAllAttributes : undefined;
            resourceInputs["subordinateBaseDns"] = args ? args.subordinateBaseDns : undefined;
            resourceInputs["useLegacyVendorVersion"] = args ? args.useLegacyVendorVersion : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultRootDseBackend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultRootDseBackend resources.
 */
export interface DefaultRootDseBackendState {
    /**
     * Specifies an additional OID that should appear in the list of supportedControl values in the server's root DSE.
     */
    additionalSupportedControlOids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultRootDseBackendRequiredAction>[]>;
    /**
     * Indicates whether all attributes in the root DSE are to be treated like user attributes (and therefore returned to
     * clients by default) regardless of the Directory Server schema configuration.
     */
    showAllAttributes?: pulumi.Input<boolean>;
    /**
     * Specifies the set of base DNs used for singleLevel, wholeSubtree, and subordinateSubtree searches based at the root DSE.
     */
    subordinateBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of Root DSE Backend resource. Options are ['root-dse-backend']
     */
    type?: pulumi.Input<string>;
    /**
     * Indicates whether the server's root DSE should reflect current or legacy values for the vendorName and vendorVersion
     * attributes.
     */
    useLegacyVendorVersion?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DefaultRootDseBackend resource.
 */
export interface DefaultRootDseBackendArgs {
    /**
     * Specifies an additional OID that should appear in the list of supportedControl values in the server's root DSE.
     */
    additionalSupportedControlOids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether all attributes in the root DSE are to be treated like user attributes (and therefore returned to
     * clients by default) regardless of the Directory Server schema configuration.
     */
    showAllAttributes?: pulumi.Input<boolean>;
    /**
     * Specifies the set of base DNs used for singleLevel, wholeSubtree, and subordinateSubtree searches based at the root DSE.
     */
    subordinateBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the server's root DSE should reflect current or legacy values for the vendorName and vendorVersion
     * attributes.
     */
    useLegacyVendorVersion?: pulumi.Input<boolean>;
}
