// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultVirtualAttribute extends pulumi.CustomResource {
    /**
     * Get an existing DefaultVirtualAttribute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultVirtualAttributeState, opts?: pulumi.CustomResourceOptions): DefaultVirtualAttribute {
        return new DefaultVirtualAttribute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultVirtualAttribute:DefaultVirtualAttribute';

    /**
     * Returns true if the given object is an instance of DefaultVirtualAttribute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultVirtualAttribute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultVirtualAttribute.__pulumiType;
    }

    /**
     * Indicates whether the server should allow creating or altering this virtual attribute definition even if it conflicts
     * with one or more indexes defined in the server.
     */
    public readonly allowIndexConflicts!: pulumi.Output<boolean>;
    /**
     * Indicates whether to handle requests that request all values for the virtual attribute.
     */
    public readonly allowRetrievingMembership!: pulumi.Output<boolean>;
    /**
     * Specifies the attribute type for the attribute whose values are to be dynamically assigned by the virtual attribute.
     */
    public readonly attributeType!: pulumi.Output<string>;
    /**
     * Specifies the base DNs for the branches containing entries that are eligible to use this virtual attribute.
     */
    public readonly baseDns!: pulumi.Output<string[]>;
    /**
     * Indicates whether searches performed by this virtual attribute provider should be exempted from access control
     * restrictions.
     */
    public readonly bypassAccessControlForSearches!: pulumi.Output<boolean>;
    /**
     * Specifies a set of client connection policies for which this Virtual Attribute should be generated. If this is
     * undefined, then this Virtual Attribute will always be generated. If it is associated with one or more client connection
     * policies, then this Virtual Attribute will be generated only for operations requested by clients assigned to one of
     * those client connection policies.
     */
    public readonly clientConnectionPolicies!: pulumi.Output<string[]>;
    /**
     * Specifies the behavior that the server is to exhibit for entries that already contain one or more real values for the
     * associated attribute.
     */
    public readonly conflictBehavior!: pulumi.Output<string>;
    /**
     * A description for this Virtual Attribute
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies whether to only include groups in which the user is directly associated with and the membership maybe modified
     * via the group entry. Groups in which the user's membership is derived dynamically or through nested groups will not be
     * included.
     */
    public readonly directMembershipsOnly!: pulumi.Output<boolean>;
    /**
     * Indicates whether the Virtual Attribute is enabled for use.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Indicates whether all operational attributes should be excluded from the generated checksum.
     */
    public readonly excludeOperationalAttributes!: pulumi.Output<boolean>;
    /**
     * Specifies the attributes that should be excluded from the checksum calculation.
     */
    public readonly excludedAttributes!: pulumi.Output<string[]>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Virtual Attribute. Each configuration property
     * should be given in the form 'name=value'.
     */
    public readonly extensionArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Virtual Attribute.
     */
    public readonly extensionClass!: pulumi.Output<string>;
    /**
     * Specifies the search filters to be applied against entries to determine if the virtual attribute is to be generated for
     * those entries.
     */
    public readonly filters!: pulumi.Output<string[]>;
    /**
     * Specifies the DNs of the groups whose members can be eligible to use this virtual attribute.
     */
    public readonly groupDns!: pulumi.Output<string[]>;
    /**
     * Indicates whether the current time includes millisecond precision.
     */
    public readonly includeMilliseconds!: pulumi.Output<boolean>;
    /**
     * A search filter that will be used to identify which groups should be included in the values of the virtual attribute.
     * With no value defined (which is the default behavior), all groups that contain the target user will be included.
     */
    public readonly includedGroupFilter!: pulumi.Output<string>;
    /**
     * An optional set of the names of the attributes to include with joined entries.
     */
    public readonly joinAttributes!: pulumi.Output<string[]>;
    /**
     * Specifies how server should determine the base DN for the internal searches used to identify joined entries.
     */
    public readonly joinBaseDnType!: pulumi.Output<string>;
    /**
     * The fixed, administrator-specified base DN for the internal searches used to identify joined entries.
     */
    public readonly joinCustomBaseDn!: pulumi.Output<string>;
    /**
     * When the `type` attribute is set to: - `reverse-dn-join`: The attribute in related entries whose set of values must
     * contain the DN of the search result entry to be joined with that entry. - `dn-join`: The attribute whose values are the
     * DNs of the entries to be joined with the search result entry.
     */
    public readonly joinDnAttribute!: pulumi.Output<string>;
    /**
     * An optional filter that specifies additional criteria for identifying joined entries. If a join-filter value is
     * specified, then only entries matching that filter (in addition to satisfying the other join criteria) will be joined
     * with the search result entry.
     */
    public readonly joinFilter!: pulumi.Output<string>;
    /**
     * Indicates whether joined entries will be required to have all values for the source attribute, or only at least one of
     * its values.
     */
    public readonly joinMatchAll!: pulumi.Output<boolean>;
    /**
     * The scope for searches used to identify joined entries.
     */
    public readonly joinScope!: pulumi.Output<string>;
    /**
     * The maximum number of entries that may be joined with the source entry, which also corresponds to the maximum number of
     * values that the virtual attribute provider will generate for an entry.
     */
    public readonly joinSizeLimit!: pulumi.Output<number>;
    /**
     * The attribute containing the value(s) in the source entry to use to identify related entries.
     */
    public readonly joinSourceAttribute!: pulumi.Output<string>;
    /**
     * The attribute in target entries whose value(s) match values of the source attribute in the source entry.
     */
    public readonly joinTargetAttribute!: pulumi.Output<string>;
    /**
     * Specifies the order in which virtual attribute definitions for the same attribute type will be evaluated when generating
     * values for an entry.
     */
    public readonly multipleVirtualAttributeEvaluationOrderIndex!: pulumi.Output<number>;
    /**
     * Specifies the behavior that will be exhibited for cases in which multiple virtual attribute definitions apply to the
     * same multivalued attribute type. This will be ignored for single-valued attribute types.
     */
    public readonly multipleVirtualAttributeMergeBehavior!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * The base DN that will be used when searching for references to the target entry. If no reference search base DN is
     * specified, the default behavior will be to search below all public naming contexts configured in the server.
     */
    public readonly referenceSearchBaseDns!: pulumi.Output<string[]>;
    /**
     * The name or OID of an attribute type whose values will be searched for references to the target entry. The attribute
     * type must be defined in the server schema, must have a syntax of either "distinguished name" or "name and optional UID",
     * and must be indexed for equality.
     */
    public readonly referencedByAttributes!: pulumi.Output<string[]>;
    /**
     * Indicates whether attributes of this type must be explicitly included by name in the list of requested attributes. Note
     * that this will only apply to virtual attributes which are associated with an attribute type that is operational. It will
     * be ignored for virtual attributes associated with a non-operational attribute type.
     */
    public readonly requireExplicitRequestByName!: pulumi.Output<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultVirtualAttributeRequiredAction[]>;
    /**
     * Indicates whether to return current time in UTC.
     */
    public readonly returnUtcTime!: pulumi.Output<boolean>;
    /**
     * Search filters that include Is Member Of Virtual Attribute searches on dynamic groups can be updated to include the
     * dynamic group filter in the search filter itself. This can allow the backend to more efficiently process the search
     * filter by using attribute indexes sooner in the search processing.
     */
    public readonly rewriteSearchFilters!: pulumi.Output<string>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Virtual Attribute. Each configuration property
     * should be given in the form 'name=value'.
     */
    public readonly scriptArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Virtual Attribute.
     */
    public readonly scriptClass!: pulumi.Output<string>;
    /**
     * Specifies the name or OID of the attribute which contains the sequence number from which unique identifiers are
     * generated. The attribute should have Integer syntax or a String syntax permitting integer values. If this property is
     * modified then the filter property should be updated accordingly so that only entries containing the sequence number
     * attribute are eligible to have a value generated for this virtual attribute.
     */
    public readonly sequenceNumberAttribute!: pulumi.Output<string>;
    /**
     * Specifies the source attribute containing the values to use for this virtual attribute.
     */
    public readonly sourceAttribute!: pulumi.Output<string>;
    /**
     * Specifies the attribute containing the DN of another entry from which to obtain the source attribute providing the
     * values for this virtual attribute.
     */
    public readonly sourceEntryDnAttribute!: pulumi.Output<string>;
    /**
     * Specifies a DN map that will be used to identify the entry from which to obtain the source attribute providing the
     * values for this virtual attribute.
     */
    public readonly sourceEntryDnMap!: pulumi.Output<string>;
    /**
     * The type of Virtual Attribute resource. Options are ['mirror', 'entry-checksum', 'member-of-server-group',
     * 'constructed', 'is-member-of', 'custom', 'num-subordinates', 'reverse-dn-join', 'identify-references', 'user-defined',
     * 'current-time', 'short-unique-id', 'entry-dn', 'has-subordinates', 'equality-join', 'groovy-scripted', 'instance-name',
     * 'replication-state-detail', 'member', 'password-policy-state-json', 'subschema-subentry', 'dn-join', 'third-party']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Specifies a pattern for constructing the virtual attribute value using fixed text and attribute values from the entry.
     */
    public readonly valuePatterns!: pulumi.Output<string[]>;
    /**
     * Specifies the values to be included in the virtual attribute.
     */
    public readonly values!: pulumi.Output<string[]>;

    /**
     * Create a DefaultVirtualAttribute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultVirtualAttributeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultVirtualAttributeArgs | DefaultVirtualAttributeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultVirtualAttributeState | undefined;
            resourceInputs["allowIndexConflicts"] = state ? state.allowIndexConflicts : undefined;
            resourceInputs["allowRetrievingMembership"] = state ? state.allowRetrievingMembership : undefined;
            resourceInputs["attributeType"] = state ? state.attributeType : undefined;
            resourceInputs["baseDns"] = state ? state.baseDns : undefined;
            resourceInputs["bypassAccessControlForSearches"] = state ? state.bypassAccessControlForSearches : undefined;
            resourceInputs["clientConnectionPolicies"] = state ? state.clientConnectionPolicies : undefined;
            resourceInputs["conflictBehavior"] = state ? state.conflictBehavior : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["directMembershipsOnly"] = state ? state.directMembershipsOnly : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["excludeOperationalAttributes"] = state ? state.excludeOperationalAttributes : undefined;
            resourceInputs["excludedAttributes"] = state ? state.excludedAttributes : undefined;
            resourceInputs["extensionArguments"] = state ? state.extensionArguments : undefined;
            resourceInputs["extensionClass"] = state ? state.extensionClass : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["groupDns"] = state ? state.groupDns : undefined;
            resourceInputs["includeMilliseconds"] = state ? state.includeMilliseconds : undefined;
            resourceInputs["includedGroupFilter"] = state ? state.includedGroupFilter : undefined;
            resourceInputs["joinAttributes"] = state ? state.joinAttributes : undefined;
            resourceInputs["joinBaseDnType"] = state ? state.joinBaseDnType : undefined;
            resourceInputs["joinCustomBaseDn"] = state ? state.joinCustomBaseDn : undefined;
            resourceInputs["joinDnAttribute"] = state ? state.joinDnAttribute : undefined;
            resourceInputs["joinFilter"] = state ? state.joinFilter : undefined;
            resourceInputs["joinMatchAll"] = state ? state.joinMatchAll : undefined;
            resourceInputs["joinScope"] = state ? state.joinScope : undefined;
            resourceInputs["joinSizeLimit"] = state ? state.joinSizeLimit : undefined;
            resourceInputs["joinSourceAttribute"] = state ? state.joinSourceAttribute : undefined;
            resourceInputs["joinTargetAttribute"] = state ? state.joinTargetAttribute : undefined;
            resourceInputs["multipleVirtualAttributeEvaluationOrderIndex"] = state ? state.multipleVirtualAttributeEvaluationOrderIndex : undefined;
            resourceInputs["multipleVirtualAttributeMergeBehavior"] = state ? state.multipleVirtualAttributeMergeBehavior : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["referenceSearchBaseDns"] = state ? state.referenceSearchBaseDns : undefined;
            resourceInputs["referencedByAttributes"] = state ? state.referencedByAttributes : undefined;
            resourceInputs["requireExplicitRequestByName"] = state ? state.requireExplicitRequestByName : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["returnUtcTime"] = state ? state.returnUtcTime : undefined;
            resourceInputs["rewriteSearchFilters"] = state ? state.rewriteSearchFilters : undefined;
            resourceInputs["scriptArguments"] = state ? state.scriptArguments : undefined;
            resourceInputs["scriptClass"] = state ? state.scriptClass : undefined;
            resourceInputs["sequenceNumberAttribute"] = state ? state.sequenceNumberAttribute : undefined;
            resourceInputs["sourceAttribute"] = state ? state.sourceAttribute : undefined;
            resourceInputs["sourceEntryDnAttribute"] = state ? state.sourceEntryDnAttribute : undefined;
            resourceInputs["sourceEntryDnMap"] = state ? state.sourceEntryDnMap : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["valuePatterns"] = state ? state.valuePatterns : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        } else {
            const args = argsOrState as DefaultVirtualAttributeArgs | undefined;
            resourceInputs["allowIndexConflicts"] = args ? args.allowIndexConflicts : undefined;
            resourceInputs["allowRetrievingMembership"] = args ? args.allowRetrievingMembership : undefined;
            resourceInputs["attributeType"] = args ? args.attributeType : undefined;
            resourceInputs["baseDns"] = args ? args.baseDns : undefined;
            resourceInputs["bypassAccessControlForSearches"] = args ? args.bypassAccessControlForSearches : undefined;
            resourceInputs["clientConnectionPolicies"] = args ? args.clientConnectionPolicies : undefined;
            resourceInputs["conflictBehavior"] = args ? args.conflictBehavior : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["directMembershipsOnly"] = args ? args.directMembershipsOnly : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["excludeOperationalAttributes"] = args ? args.excludeOperationalAttributes : undefined;
            resourceInputs["excludedAttributes"] = args ? args.excludedAttributes : undefined;
            resourceInputs["extensionArguments"] = args ? args.extensionArguments : undefined;
            resourceInputs["extensionClass"] = args ? args.extensionClass : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["groupDns"] = args ? args.groupDns : undefined;
            resourceInputs["includeMilliseconds"] = args ? args.includeMilliseconds : undefined;
            resourceInputs["includedGroupFilter"] = args ? args.includedGroupFilter : undefined;
            resourceInputs["joinAttributes"] = args ? args.joinAttributes : undefined;
            resourceInputs["joinBaseDnType"] = args ? args.joinBaseDnType : undefined;
            resourceInputs["joinCustomBaseDn"] = args ? args.joinCustomBaseDn : undefined;
            resourceInputs["joinDnAttribute"] = args ? args.joinDnAttribute : undefined;
            resourceInputs["joinFilter"] = args ? args.joinFilter : undefined;
            resourceInputs["joinMatchAll"] = args ? args.joinMatchAll : undefined;
            resourceInputs["joinScope"] = args ? args.joinScope : undefined;
            resourceInputs["joinSizeLimit"] = args ? args.joinSizeLimit : undefined;
            resourceInputs["joinSourceAttribute"] = args ? args.joinSourceAttribute : undefined;
            resourceInputs["joinTargetAttribute"] = args ? args.joinTargetAttribute : undefined;
            resourceInputs["multipleVirtualAttributeEvaluationOrderIndex"] = args ? args.multipleVirtualAttributeEvaluationOrderIndex : undefined;
            resourceInputs["multipleVirtualAttributeMergeBehavior"] = args ? args.multipleVirtualAttributeMergeBehavior : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["referenceSearchBaseDns"] = args ? args.referenceSearchBaseDns : undefined;
            resourceInputs["referencedByAttributes"] = args ? args.referencedByAttributes : undefined;
            resourceInputs["requireExplicitRequestByName"] = args ? args.requireExplicitRequestByName : undefined;
            resourceInputs["returnUtcTime"] = args ? args.returnUtcTime : undefined;
            resourceInputs["rewriteSearchFilters"] = args ? args.rewriteSearchFilters : undefined;
            resourceInputs["scriptArguments"] = args ? args.scriptArguments : undefined;
            resourceInputs["scriptClass"] = args ? args.scriptClass : undefined;
            resourceInputs["sequenceNumberAttribute"] = args ? args.sequenceNumberAttribute : undefined;
            resourceInputs["sourceAttribute"] = args ? args.sourceAttribute : undefined;
            resourceInputs["sourceEntryDnAttribute"] = args ? args.sourceEntryDnAttribute : undefined;
            resourceInputs["sourceEntryDnMap"] = args ? args.sourceEntryDnMap : undefined;
            resourceInputs["valuePatterns"] = args ? args.valuePatterns : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultVirtualAttribute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultVirtualAttribute resources.
 */
export interface DefaultVirtualAttributeState {
    /**
     * Indicates whether the server should allow creating or altering this virtual attribute definition even if it conflicts
     * with one or more indexes defined in the server.
     */
    allowIndexConflicts?: pulumi.Input<boolean>;
    /**
     * Indicates whether to handle requests that request all values for the virtual attribute.
     */
    allowRetrievingMembership?: pulumi.Input<boolean>;
    /**
     * Specifies the attribute type for the attribute whose values are to be dynamically assigned by the virtual attribute.
     */
    attributeType?: pulumi.Input<string>;
    /**
     * Specifies the base DNs for the branches containing entries that are eligible to use this virtual attribute.
     */
    baseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether searches performed by this virtual attribute provider should be exempted from access control
     * restrictions.
     */
    bypassAccessControlForSearches?: pulumi.Input<boolean>;
    /**
     * Specifies a set of client connection policies for which this Virtual Attribute should be generated. If this is
     * undefined, then this Virtual Attribute will always be generated. If it is associated with one or more client connection
     * policies, then this Virtual Attribute will be generated only for operations requested by clients assigned to one of
     * those client connection policies.
     */
    clientConnectionPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the behavior that the server is to exhibit for entries that already contain one or more real values for the
     * associated attribute.
     */
    conflictBehavior?: pulumi.Input<string>;
    /**
     * A description for this Virtual Attribute
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to only include groups in which the user is directly associated with and the membership maybe modified
     * via the group entry. Groups in which the user's membership is derived dynamically or through nested groups will not be
     * included.
     */
    directMembershipsOnly?: pulumi.Input<boolean>;
    /**
     * Indicates whether the Virtual Attribute is enabled for use.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether all operational attributes should be excluded from the generated checksum.
     */
    excludeOperationalAttributes?: pulumi.Input<boolean>;
    /**
     * Specifies the attributes that should be excluded from the checksum calculation.
     */
    excludedAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Virtual Attribute. Each configuration property
     * should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Virtual Attribute.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * Specifies the search filters to be applied against entries to determine if the virtual attribute is to be generated for
     * those entries.
     */
    filters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the DNs of the groups whose members can be eligible to use this virtual attribute.
     */
    groupDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the current time includes millisecond precision.
     */
    includeMilliseconds?: pulumi.Input<boolean>;
    /**
     * A search filter that will be used to identify which groups should be included in the values of the virtual attribute.
     * With no value defined (which is the default behavior), all groups that contain the target user will be included.
     */
    includedGroupFilter?: pulumi.Input<string>;
    /**
     * An optional set of the names of the attributes to include with joined entries.
     */
    joinAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies how server should determine the base DN for the internal searches used to identify joined entries.
     */
    joinBaseDnType?: pulumi.Input<string>;
    /**
     * The fixed, administrator-specified base DN for the internal searches used to identify joined entries.
     */
    joinCustomBaseDn?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `reverse-dn-join`: The attribute in related entries whose set of values must
     * contain the DN of the search result entry to be joined with that entry. - `dn-join`: The attribute whose values are the
     * DNs of the entries to be joined with the search result entry.
     */
    joinDnAttribute?: pulumi.Input<string>;
    /**
     * An optional filter that specifies additional criteria for identifying joined entries. If a join-filter value is
     * specified, then only entries matching that filter (in addition to satisfying the other join criteria) will be joined
     * with the search result entry.
     */
    joinFilter?: pulumi.Input<string>;
    /**
     * Indicates whether joined entries will be required to have all values for the source attribute, or only at least one of
     * its values.
     */
    joinMatchAll?: pulumi.Input<boolean>;
    /**
     * The scope for searches used to identify joined entries.
     */
    joinScope?: pulumi.Input<string>;
    /**
     * The maximum number of entries that may be joined with the source entry, which also corresponds to the maximum number of
     * values that the virtual attribute provider will generate for an entry.
     */
    joinSizeLimit?: pulumi.Input<number>;
    /**
     * The attribute containing the value(s) in the source entry to use to identify related entries.
     */
    joinSourceAttribute?: pulumi.Input<string>;
    /**
     * The attribute in target entries whose value(s) match values of the source attribute in the source entry.
     */
    joinTargetAttribute?: pulumi.Input<string>;
    /**
     * Specifies the order in which virtual attribute definitions for the same attribute type will be evaluated when generating
     * values for an entry.
     */
    multipleVirtualAttributeEvaluationOrderIndex?: pulumi.Input<number>;
    /**
     * Specifies the behavior that will be exhibited for cases in which multiple virtual attribute definitions apply to the
     * same multivalued attribute type. This will be ignored for single-valued attribute types.
     */
    multipleVirtualAttributeMergeBehavior?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The base DN that will be used when searching for references to the target entry. If no reference search base DN is
     * specified, the default behavior will be to search below all public naming contexts configured in the server.
     */
    referenceSearchBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name or OID of an attribute type whose values will be searched for references to the target entry. The attribute
     * type must be defined in the server schema, must have a syntax of either "distinguished name" or "name and optional UID",
     * and must be indexed for equality.
     */
    referencedByAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether attributes of this type must be explicitly included by name in the list of requested attributes. Note
     * that this will only apply to virtual attributes which are associated with an attribute type that is operational. It will
     * be ignored for virtual attributes associated with a non-operational attribute type.
     */
    requireExplicitRequestByName?: pulumi.Input<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultVirtualAttributeRequiredAction>[]>;
    /**
     * Indicates whether to return current time in UTC.
     */
    returnUtcTime?: pulumi.Input<boolean>;
    /**
     * Search filters that include Is Member Of Virtual Attribute searches on dynamic groups can be updated to include the
     * dynamic group filter in the search filter itself. This can allow the backend to more efficiently process the search
     * filter by using attribute indexes sooner in the search processing.
     */
    rewriteSearchFilters?: pulumi.Input<string>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Virtual Attribute. Each configuration property
     * should be given in the form 'name=value'.
     */
    scriptArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Virtual Attribute.
     */
    scriptClass?: pulumi.Input<string>;
    /**
     * Specifies the name or OID of the attribute which contains the sequence number from which unique identifiers are
     * generated. The attribute should have Integer syntax or a String syntax permitting integer values. If this property is
     * modified then the filter property should be updated accordingly so that only entries containing the sequence number
     * attribute are eligible to have a value generated for this virtual attribute.
     */
    sequenceNumberAttribute?: pulumi.Input<string>;
    /**
     * Specifies the source attribute containing the values to use for this virtual attribute.
     */
    sourceAttribute?: pulumi.Input<string>;
    /**
     * Specifies the attribute containing the DN of another entry from which to obtain the source attribute providing the
     * values for this virtual attribute.
     */
    sourceEntryDnAttribute?: pulumi.Input<string>;
    /**
     * Specifies a DN map that will be used to identify the entry from which to obtain the source attribute providing the
     * values for this virtual attribute.
     */
    sourceEntryDnMap?: pulumi.Input<string>;
    /**
     * The type of Virtual Attribute resource. Options are ['mirror', 'entry-checksum', 'member-of-server-group',
     * 'constructed', 'is-member-of', 'custom', 'num-subordinates', 'reverse-dn-join', 'identify-references', 'user-defined',
     * 'current-time', 'short-unique-id', 'entry-dn', 'has-subordinates', 'equality-join', 'groovy-scripted', 'instance-name',
     * 'replication-state-detail', 'member', 'password-policy-state-json', 'subschema-subentry', 'dn-join', 'third-party']
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies a pattern for constructing the virtual attribute value using fixed text and attribute values from the entry.
     */
    valuePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the values to be included in the virtual attribute.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DefaultVirtualAttribute resource.
 */
export interface DefaultVirtualAttributeArgs {
    /**
     * Indicates whether the server should allow creating or altering this virtual attribute definition even if it conflicts
     * with one or more indexes defined in the server.
     */
    allowIndexConflicts?: pulumi.Input<boolean>;
    /**
     * Indicates whether to handle requests that request all values for the virtual attribute.
     */
    allowRetrievingMembership?: pulumi.Input<boolean>;
    /**
     * Specifies the attribute type for the attribute whose values are to be dynamically assigned by the virtual attribute.
     */
    attributeType?: pulumi.Input<string>;
    /**
     * Specifies the base DNs for the branches containing entries that are eligible to use this virtual attribute.
     */
    baseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether searches performed by this virtual attribute provider should be exempted from access control
     * restrictions.
     */
    bypassAccessControlForSearches?: pulumi.Input<boolean>;
    /**
     * Specifies a set of client connection policies for which this Virtual Attribute should be generated. If this is
     * undefined, then this Virtual Attribute will always be generated. If it is associated with one or more client connection
     * policies, then this Virtual Attribute will be generated only for operations requested by clients assigned to one of
     * those client connection policies.
     */
    clientConnectionPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the behavior that the server is to exhibit for entries that already contain one or more real values for the
     * associated attribute.
     */
    conflictBehavior?: pulumi.Input<string>;
    /**
     * A description for this Virtual Attribute
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to only include groups in which the user is directly associated with and the membership maybe modified
     * via the group entry. Groups in which the user's membership is derived dynamically or through nested groups will not be
     * included.
     */
    directMembershipsOnly?: pulumi.Input<boolean>;
    /**
     * Indicates whether the Virtual Attribute is enabled for use.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether all operational attributes should be excluded from the generated checksum.
     */
    excludeOperationalAttributes?: pulumi.Input<boolean>;
    /**
     * Specifies the attributes that should be excluded from the checksum calculation.
     */
    excludedAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Virtual Attribute. Each configuration property
     * should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Virtual Attribute.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * Specifies the search filters to be applied against entries to determine if the virtual attribute is to be generated for
     * those entries.
     */
    filters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the DNs of the groups whose members can be eligible to use this virtual attribute.
     */
    groupDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the current time includes millisecond precision.
     */
    includeMilliseconds?: pulumi.Input<boolean>;
    /**
     * A search filter that will be used to identify which groups should be included in the values of the virtual attribute.
     * With no value defined (which is the default behavior), all groups that contain the target user will be included.
     */
    includedGroupFilter?: pulumi.Input<string>;
    /**
     * An optional set of the names of the attributes to include with joined entries.
     */
    joinAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies how server should determine the base DN for the internal searches used to identify joined entries.
     */
    joinBaseDnType?: pulumi.Input<string>;
    /**
     * The fixed, administrator-specified base DN for the internal searches used to identify joined entries.
     */
    joinCustomBaseDn?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `reverse-dn-join`: The attribute in related entries whose set of values must
     * contain the DN of the search result entry to be joined with that entry. - `dn-join`: The attribute whose values are the
     * DNs of the entries to be joined with the search result entry.
     */
    joinDnAttribute?: pulumi.Input<string>;
    /**
     * An optional filter that specifies additional criteria for identifying joined entries. If a join-filter value is
     * specified, then only entries matching that filter (in addition to satisfying the other join criteria) will be joined
     * with the search result entry.
     */
    joinFilter?: pulumi.Input<string>;
    /**
     * Indicates whether joined entries will be required to have all values for the source attribute, or only at least one of
     * its values.
     */
    joinMatchAll?: pulumi.Input<boolean>;
    /**
     * The scope for searches used to identify joined entries.
     */
    joinScope?: pulumi.Input<string>;
    /**
     * The maximum number of entries that may be joined with the source entry, which also corresponds to the maximum number of
     * values that the virtual attribute provider will generate for an entry.
     */
    joinSizeLimit?: pulumi.Input<number>;
    /**
     * The attribute containing the value(s) in the source entry to use to identify related entries.
     */
    joinSourceAttribute?: pulumi.Input<string>;
    /**
     * The attribute in target entries whose value(s) match values of the source attribute in the source entry.
     */
    joinTargetAttribute?: pulumi.Input<string>;
    /**
     * Specifies the order in which virtual attribute definitions for the same attribute type will be evaluated when generating
     * values for an entry.
     */
    multipleVirtualAttributeEvaluationOrderIndex?: pulumi.Input<number>;
    /**
     * Specifies the behavior that will be exhibited for cases in which multiple virtual attribute definitions apply to the
     * same multivalued attribute type. This will be ignored for single-valued attribute types.
     */
    multipleVirtualAttributeMergeBehavior?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * The base DN that will be used when searching for references to the target entry. If no reference search base DN is
     * specified, the default behavior will be to search below all public naming contexts configured in the server.
     */
    referenceSearchBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name or OID of an attribute type whose values will be searched for references to the target entry. The attribute
     * type must be defined in the server schema, must have a syntax of either "distinguished name" or "name and optional UID",
     * and must be indexed for equality.
     */
    referencedByAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether attributes of this type must be explicitly included by name in the list of requested attributes. Note
     * that this will only apply to virtual attributes which are associated with an attribute type that is operational. It will
     * be ignored for virtual attributes associated with a non-operational attribute type.
     */
    requireExplicitRequestByName?: pulumi.Input<boolean>;
    /**
     * Indicates whether to return current time in UTC.
     */
    returnUtcTime?: pulumi.Input<boolean>;
    /**
     * Search filters that include Is Member Of Virtual Attribute searches on dynamic groups can be updated to include the
     * dynamic group filter in the search filter itself. This can allow the backend to more efficiently process the search
     * filter by using attribute indexes sooner in the search processing.
     */
    rewriteSearchFilters?: pulumi.Input<string>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Virtual Attribute. Each configuration property
     * should be given in the form 'name=value'.
     */
    scriptArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Virtual Attribute.
     */
    scriptClass?: pulumi.Input<string>;
    /**
     * Specifies the name or OID of the attribute which contains the sequence number from which unique identifiers are
     * generated. The attribute should have Integer syntax or a String syntax permitting integer values. If this property is
     * modified then the filter property should be updated accordingly so that only entries containing the sequence number
     * attribute are eligible to have a value generated for this virtual attribute.
     */
    sequenceNumberAttribute?: pulumi.Input<string>;
    /**
     * Specifies the source attribute containing the values to use for this virtual attribute.
     */
    sourceAttribute?: pulumi.Input<string>;
    /**
     * Specifies the attribute containing the DN of another entry from which to obtain the source attribute providing the
     * values for this virtual attribute.
     */
    sourceEntryDnAttribute?: pulumi.Input<string>;
    /**
     * Specifies a DN map that will be used to identify the entry from which to obtain the source attribute providing the
     * values for this virtual attribute.
     */
    sourceEntryDnMap?: pulumi.Input<string>;
    /**
     * Specifies a pattern for constructing the virtual attribute value using fixed text and attribute values from the entry.
     */
    valuePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the values to be included in the virtual attribute.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}
