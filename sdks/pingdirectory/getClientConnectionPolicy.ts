// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getClientConnectionPolicy(args: GetClientConnectionPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetClientConnectionPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getClientConnectionPolicy:getClientConnectionPolicy", {
        "policyId": args.policyId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getClientConnectionPolicy.
 */
export interface GetClientConnectionPolicyArgs {
    policyId: string;
}

/**
 * A collection of values returned by getClientConnectionPolicy.
 */
export interface GetClientConnectionPolicyResult {
    readonly allowUnindexedSearches: boolean;
    readonly allowUnindexedSearchesWithControl: boolean;
    readonly allowedAuthTypes: string[];
    readonly allowedExtendedOperations: string[];
    readonly allowedFilterTypes: string[];
    readonly allowedOperations: string[];
    readonly allowedRequestControls: string[];
    readonly allowedSaslMechanisms: string[];
    readonly connectionCriteria: string;
    readonly connectionOperationRateExceededBehavior: string;
    readonly deniedExtendedOperations: string[];
    readonly deniedRequestControls: string[];
    readonly deniedSaslMechanisms: string[];
    readonly description: string;
    readonly enabled: boolean;
    readonly evaluationOrderIndex: number;
    readonly excludeGlobalSensitiveAttributes: string[];
    readonly excludedBackendBaseDns: string[];
    readonly id: string;
    readonly includedBackendBaseDns: string[];
    readonly maximumConcurrentConnections: number;
    readonly maximumConcurrentOperationWaitTimeBeforeRejecting: string;
    readonly maximumConcurrentOperationsPerConnection: number;
    readonly maximumConcurrentOperationsPerConnectionExceededBehavior: string;
    readonly maximumConnectionDuration: string;
    readonly maximumConnectionOperationRates: string[];
    readonly maximumIdleConnectionDuration: string;
    readonly maximumLdapJoinSizeLimit: number;
    readonly maximumOperationCountPerConnection: number;
    readonly maximumPolicyOperationRates: string[];
    readonly maximumSearchLookthroughLimit: number;
    readonly maximumSearchSizeLimit: number;
    readonly maximumSearchTimeLimit: string;
    readonly maximumSortSizeLimitWithoutVlvIndex: number;
    readonly minimumSubstringLength: number;
    readonly policyId: string;
    readonly policyOperationRateExceededBehavior: string;
    readonly prohibitedOperationRequestCriteria: string;
    readonly requiredOperationRequestCriteria: string;
    readonly resultCodeMap: string;
    readonly sensitiveAttributes: string[];
    readonly terminateConnection: boolean;
    readonly type: string;
}
export function getClientConnectionPolicyOutput(args: GetClientConnectionPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClientConnectionPolicyResult> {
    return pulumi.output(args).apply((a: any) => getClientConnectionPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getClientConnectionPolicy.
 */
export interface GetClientConnectionPolicyOutputArgs {
    policyId: pulumi.Input<string>;
}
