// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGlobalConfiguration(opts?: pulumi.InvokeOptions): Promise<GetGlobalConfigurationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getGlobalConfiguration:getGlobalConfiguration", {
    }, opts, utilities.getPackage());
}

/**
 * A collection of values returned by getGlobalConfiguration.
 */
export interface GetGlobalConfigurationResult {
    readonly allowAttributeNameExceptions: boolean;
    readonly allowInheritedReplicationOfSubordinateBackends: boolean;
    readonly allowInsecureLocalJmxConnections: boolean;
    readonly allowedInsecureRequestCriteria: string;
    readonly allowedInsecureTlsProtocols: string[];
    readonly allowedTasks: string[];
    readonly allowedUnauthenticatedRequestCriteria: string;
    readonly attributesModifiableWithIgnoreNoUserModificationRequestControls: string[];
    readonly autoNameWithEntryUuidConnectionCriteria: string;
    readonly autoNameWithEntryUuidRequestCriteria: string;
    readonly automaticallyCompressEncryptedLdifExports: boolean;
    readonly backgroundThreadForEachPersistentSearch: boolean;
    readonly backupEncryptionSettingsDefinitionId: string;
    readonly bindWithDnRequiresPassword: boolean;
    readonly configurationServerGroup: string;
    readonly databaseOnVirtualizedOrNetworkStorage: boolean;
    readonly defaultInternalOperationClientConnectionPolicy: string;
    readonly defaultPasswordPolicy: string;
    readonly disabledPrivileges: string[];
    readonly duplicateAlertLimit: number;
    readonly duplicateAlertTimeLimit: string;
    readonly duplicateErrorLogLimit: number;
    readonly duplicateErrorLogTimeLimit: string;
    readonly enableSubOperationTimer: boolean;
    readonly encryptBackupsByDefault: boolean;
    readonly encryptData: boolean;
    readonly encryptLdifExportsByDefault: boolean;
    readonly encryptionSettingsCipherStreamProvider: string;
    readonly exitOnJvmError: boolean;
    readonly forceAsMasterForMirroredData: boolean;
    readonly forcedGcPrimeDuration: string;
    readonly id: string;
    readonly idleTimeLimit: string;
    readonly instanceName: string;
    readonly invalidAttributeSyntaxBehavior: string;
    readonly jmxUseLegacyMbeanNames: boolean;
    readonly jmxValueBehavior: string;
    readonly ldapJoinSizeLimit: number;
    readonly ldifExportEncryptionSettingsDefinitionId: string;
    readonly location: string;
    readonly lookthroughLimit: number;
    readonly maxSmtpConnectionAge: string;
    readonly maxSmtpConnectionCount: number;
    readonly maximumAttributesPerAddRequest: number;
    readonly maximumConcurrentConnections: number;
    readonly maximumConcurrentConnectionsPerBindDn: number;
    readonly maximumConcurrentConnectionsPerIpAddress: number;
    readonly maximumConcurrentUnindexedSearches: number;
    readonly maximumModificationsPerModifyRequest: number;
    readonly maximumServerOutLogFileCount: number;
    readonly maximumServerOutLogFileSize: string;
    readonly maximumShutdownTime: string;
    readonly maximumUserDataPasswordPoliciesToCache: number;
    readonly networkAddressCacheTtl: string;
    readonly networkAddressOutageCacheEnabled: boolean;
    readonly notifyAbandonedOperations: boolean;
    readonly permitSyntaxViolationsForAttributes: string[];
    readonly proxiedAuthorizationIdentityMapper: string;
    readonly redactSensitiveValuesInConfigLogs: boolean;
    readonly rejectInsecureRequests: boolean;
    readonly rejectUnauthenticatedRequests: boolean;
    readonly replicationAssuranceSourceBacklogFastStartThreshold: number;
    readonly replicationAssuranceSourceTimeoutSuspendDuration: string;
    readonly replicationBacklogCountAlertThreshold: number;
    readonly replicationBacklogDurationAlertThreshold: string;
    readonly replicationHistoryLimit: number;
    readonly replicationPurgeObsoleteReplicas: boolean;
    readonly replicationSetName: string;
    readonly resultCodeMap: string;
    readonly returnBindErrorMessages: boolean;
    readonly sensitiveAttributes: string[];
    readonly serverErrorResultCode: number;
    readonly sharedLocalDbBackendDatabaseCachePercent: number;
    readonly singleStructuralObjectclassBehavior: string;
    readonly sizeLimit: number;
    readonly smtpConnectionHealthCheckInterval: string;
    readonly smtpServers: string[];
    readonly softDeletePolicy: string;
    readonly startupErrorLoggerOutputLocation: string;
    readonly startupMinReplicationBacklogCount: number;
    readonly subtreeAccessibilityAlertTimeLimit: string;
    readonly timeLimit: string;
    readonly trackedApplications: string[];
    readonly type: string;
    readonly unauthenticatedIdleTimeLimit: string;
    readonly unauthenticatedLookthroughLimit: number;
    readonly unauthenticatedSizeLimit: number;
    readonly unauthenticatedTimeLimit: string;
    readonly unrecoverableDatabaseErrorMode: string;
    readonly useSharedDatabaseCacheAcrossAllLocalDbBackends: boolean;
    readonly verifyEntryDigests: boolean;
    readonly warnForBackendsWithMultipleBaseDns: boolean;
    readonly writabilityMode: string;
}
export function getGlobalConfigurationOutput(opts?: pulumi.InvokeOptions): pulumi.Output<GetGlobalConfigurationResult> {
    return pulumi.output(getGlobalConfiguration(opts))
}
