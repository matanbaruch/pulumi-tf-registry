// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultServerInstanceListener extends pulumi.CustomResource {
    /**
     * Get an existing DefaultServerInstanceListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultServerInstanceListenerState, opts?: pulumi.CustomResourceOptions): DefaultServerInstanceListener {
        return new DefaultServerInstanceListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultServerInstanceListener:DefaultServerInstanceListener';

    /**
     * Returns true if the given object is an instance of DefaultServerInstanceListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultServerInstanceListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultServerInstanceListener.__pulumiType;
    }

    /**
     * Specifies the mechanism to use for securing connections to the server.
     */
    public readonly connectionSecurity!: pulumi.Output<string>;
    /**
     * If the server is listening on a particular address different from the hostname, then this property may be used to
     * specify the address on which to listen for connections from HTTP clients.
     */
    public readonly listenAddress!: pulumi.Output<string>;
    /**
     * The public component of the certificate that the listener is expected to present to clients. When establishing a
     * connection to this server, only the certificate(s) listed here will be trusted.
     */
    public readonly listenerCertificate!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Identifies the purpose of this Server Instance Listener.
     */
    public readonly purposes!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultServerInstanceListenerRequiredAction[]>;
    /**
     * The TCP port number on which the HTTP server is listening.
     */
    public readonly serverHttpPort!: pulumi.Output<number>;
    /**
     * Name of the parent Server Instance
     */
    public readonly serverInstanceName!: pulumi.Output<string>;
    /**
     * The TCP port number on which the LDAP server is listening.
     */
    public readonly serverLdapPort!: pulumi.Output<number>;
    /**
     * The type of Server Instance Listener resource. Options are ['ldap', 'http']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultServerInstanceListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultServerInstanceListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultServerInstanceListenerArgs | DefaultServerInstanceListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultServerInstanceListenerState | undefined;
            resourceInputs["connectionSecurity"] = state ? state.connectionSecurity : undefined;
            resourceInputs["listenAddress"] = state ? state.listenAddress : undefined;
            resourceInputs["listenerCertificate"] = state ? state.listenerCertificate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["purposes"] = state ? state.purposes : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["serverHttpPort"] = state ? state.serverHttpPort : undefined;
            resourceInputs["serverInstanceName"] = state ? state.serverInstanceName : undefined;
            resourceInputs["serverLdapPort"] = state ? state.serverLdapPort : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultServerInstanceListenerArgs | undefined;
            if ((!args || args.serverInstanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverInstanceName'");
            }
            resourceInputs["connectionSecurity"] = args ? args.connectionSecurity : undefined;
            resourceInputs["listenAddress"] = args ? args.listenAddress : undefined;
            resourceInputs["listenerCertificate"] = args ? args.listenerCertificate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["purposes"] = args ? args.purposes : undefined;
            resourceInputs["serverHttpPort"] = args ? args.serverHttpPort : undefined;
            resourceInputs["serverInstanceName"] = args ? args.serverInstanceName : undefined;
            resourceInputs["serverLdapPort"] = args ? args.serverLdapPort : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultServerInstanceListener.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultServerInstanceListener resources.
 */
export interface DefaultServerInstanceListenerState {
    /**
     * Specifies the mechanism to use for securing connections to the server.
     */
    connectionSecurity?: pulumi.Input<string>;
    /**
     * If the server is listening on a particular address different from the hostname, then this property may be used to
     * specify the address on which to listen for connections from HTTP clients.
     */
    listenAddress?: pulumi.Input<string>;
    /**
     * The public component of the certificate that the listener is expected to present to clients. When establishing a
     * connection to this server, only the certificate(s) listed here will be trusted.
     */
    listenerCertificate?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifies the purpose of this Server Instance Listener.
     */
    purposes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultServerInstanceListenerRequiredAction>[]>;
    /**
     * The TCP port number on which the HTTP server is listening.
     */
    serverHttpPort?: pulumi.Input<number>;
    /**
     * Name of the parent Server Instance
     */
    serverInstanceName?: pulumi.Input<string>;
    /**
     * The TCP port number on which the LDAP server is listening.
     */
    serverLdapPort?: pulumi.Input<number>;
    /**
     * The type of Server Instance Listener resource. Options are ['ldap', 'http']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultServerInstanceListener resource.
 */
export interface DefaultServerInstanceListenerArgs {
    /**
     * Specifies the mechanism to use for securing connections to the server.
     */
    connectionSecurity?: pulumi.Input<string>;
    /**
     * If the server is listening on a particular address different from the hostname, then this property may be used to
     * specify the address on which to listen for connections from HTTP clients.
     */
    listenAddress?: pulumi.Input<string>;
    /**
     * The public component of the certificate that the listener is expected to present to clients. When establishing a
     * connection to this server, only the certificate(s) listed here will be trusted.
     */
    listenerCertificate?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Identifies the purpose of this Server Instance Listener.
     */
    purposes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The TCP port number on which the HTTP server is listening.
     */
    serverHttpPort?: pulumi.Input<number>;
    /**
     * Name of the parent Server Instance
     */
    serverInstanceName: pulumi.Input<string>;
    /**
     * The TCP port number on which the LDAP server is listening.
     */
    serverLdapPort?: pulumi.Input<number>;
}
