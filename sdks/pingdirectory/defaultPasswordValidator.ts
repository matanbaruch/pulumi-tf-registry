// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultPasswordValidator extends pulumi.CustomResource {
    /**
     * Get an existing DefaultPasswordValidator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultPasswordValidatorState, opts?: pulumi.CustomResourceOptions): DefaultPasswordValidator {
        return new DefaultPasswordValidator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultPasswordValidator:DefaultPasswordValidator';

    /**
     * Returns true if the given object is an instance of DefaultPasswordValidator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultPasswordValidator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultPasswordValidator.__pulumiType;
    }

    /**
     * Indicates whether to accept the proposed password if an error occurs while attempting to interact with the Pwned
     * Passwords service.
     */
    public readonly acceptPasswordOnServiceError!: pulumi.Output<boolean>;
    /**
     * Indicates whether passwords will be allowed to include characters from outside the ASCII character set.
     */
    public readonly allowNonAsciiCharacters!: pulumi.Output<boolean>;
    /**
     * Indicates whether this password validator allows passwords to contain characters outside of any of the user-defined
     * character sets.
     */
    public readonly allowUnclassifiedCharacters!: pulumi.Output<boolean>;
    /**
     * Indicates whether passwords will be allowed to include characters that are not recognized by the JVM's Unicode support.
     */
    public readonly allowUnknownCharacters!: pulumi.Output<boolean>;
    /**
     * Specifies the set of character types that are allowed to be present in passwords.
     */
    public readonly allowedCharacterTypes!: pulumi.Output<string[]>;
    /**
     * Provides a set of character substitutions that can be applied to the proposed password when checking to see if it is in
     * the provided dictionary. Each mapping should consist of a single character followed by a colon and a list of the
     * alternative characters that may be used in place of that character.
     */
    public readonly alternativePasswordCharacterMappings!: pulumi.Output<string[]>;
    /**
     * The number of password guesses per second that a potential attacker may be expected to make.
     */
    public readonly assumedPasswordGuessesPerSecond!: pulumi.Output<string>;
    /**
     * When the `type` attribute is set to: - One of [`repeated-characters`, `unique-characters`]: Indicates whether this
     * password validator should treat password characters in a case-sensitive manner. - `dictionary`: Indicates whether this
     * password validator is to treat password characters in a case-sensitive manner.
     */
    public readonly caseSensitiveValidation!: pulumi.Output<boolean>;
    /**
     * When the `type` attribute is set to: - `character-set`: Specifies a character set containing characters that a password
     * may contain and a value indicating the minimum number of characters required from that set. - `repeated-characters`:
     * Specifies a set of characters that should be considered equivalent for the purpose of this password validator. This can
     * be used, for example, to ensure that passwords contain no more than three consecutive digits.
     */
    public readonly characterSets!: pulumi.Output<string[]>;
    /**
     * A description for this Password Validator
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies the path to the file containing a list of words that cannot be used as passwords.
     */
    public readonly dictionaryFile!: pulumi.Output<string>;
    /**
     * A set of characters that will not be allowed anywhere in a password.
     */
    public readonly disallowedCharacters!: pulumi.Output<string>;
    /**
     * A set of characters that will not be allowed as the first character of the password.
     */
    public readonly disallowedLeadingCharacters!: pulumi.Output<string>;
    /**
     * A set of characters that will not be allowed as the last character of the password.
     */
    public readonly disallowedTrailingCharacters!: pulumi.Output<string>;
    /**
     * Indicates whether the password validator is enabled for use.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Password Validator. Each configuration property
     * should be given in the form 'name=value'.
     */
    public readonly extensionArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Password Validator.
     */
    public readonly extensionClass!: pulumi.Output<string>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. The maximum length of time to wait to obtain an HTTP connection.
     */
    public readonly httpConnectTimeout!: pulumi.Output<string>;
    /**
     * Supported in PingDirectory product version 9.2.0.0+. A reference to an HTTP proxy server that should be used for
     * requests sent to the Pwned Passwords service.
     */
    public readonly httpProxyExternalServer!: pulumi.Output<string>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. The maximum length of time to wait for a response to an HTTP
     * request.
     */
    public readonly httpResponseTimeout!: pulumi.Output<string>;
    /**
     * Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the beginning of
     * a proposed password.
     */
    public readonly ignoreLeadingNonAlphabeticCharacters!: pulumi.Output<boolean>;
    /**
     * Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the end of a
     * proposed password.
     */
    public readonly ignoreTrailingNonAlphabeticCharacters!: pulumi.Output<boolean>;
    /**
     * Indicates whether this password validator should be used to validate clear-text passwords provided in LDAP add requests.
     */
    public readonly invokeForAdd!: pulumi.Output<boolean>;
    /**
     * Indicates whether this password validator should be used to validate clear-text passwords provided by administrators
     * when changing the password for another user.
     */
    public readonly invokeForAdminReset!: pulumi.Output<boolean>;
    /**
     * Indicates whether this password validator should be used to validate clear-text passwords provided by an end user in the
     * course of changing their own password.
     */
    public readonly invokeForSelfChange!: pulumi.Output<boolean>;
    /**
     * Specifies which key manager provider should be used to obtain a client certificate to present to the validation server
     * when performing HTTPS communication. This may be left undefined if communication will not be secured with HTTPS, or if
     * there is no need to present a client certificate to the validation service.
     */
    public readonly keyManagerProvider!: pulumi.Output<string>;
    /**
     * Specifies the name(s) of the attribute(s) whose values should be checked to determine whether they match the provided
     * password. If no values are provided, then the server checks if the proposed password matches the value of any user
     * attribute in the target user's entry.
     */
    public readonly matchAttributes!: pulumi.Output<string[]>;
    /**
     * The behavior to exhibit if a user's proposed password matches the regular expression defined in the match-pattern
     * property.
     */
    public readonly matchBehavior!: pulumi.Output<string>;
    /**
     * The regular expression to use for this password validator.
     */
    public readonly matchPattern!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of times that any character can appear consecutively in a password value.
     */
    public readonly maxConsecutiveLength!: pulumi.Output<number>;
    /**
     * Specifies the maximum number of characters that can be included in a proposed password.
     */
    public readonly maxPasswordLength!: pulumi.Output<number>;
    /**
     * The maximum allowed percent of a proposed password that any single dictionary word is allowed to comprise. A value of
     * 100 indicates that a proposed password will only be rejected if the dictionary contains the entire proposed password
     * (after any configured transformations have been applied).
     */
    public readonly maximumAllowedPercentOfPassword!: pulumi.Output<number>;
    /**
     * Specifies the minimum difference of new and old password.
     */
    public readonly minPasswordDifference!: pulumi.Output<number>;
    /**
     * Specifies the minimum number of characters that must be included in a proposed password.
     */
    public readonly minPasswordLength!: pulumi.Output<number>;
    /**
     * Specifies the minimum number of unique characters that a password will be allowed to contain.
     */
    public readonly minUniqueCharacters!: pulumi.Output<number>;
    /**
     * The minimum length of time (using the configured number of password guesses per second) required to exhaust the entire
     * search space for a proposed password in order for that password to be considered acceptable.
     */
    public readonly minimumAcceptableTimeToExhaustSearchSpace!: pulumi.Output<string>;
    /**
     * The minimum length that an attribute value must have for it to be considered when rejecting passwords that contain the
     * value of another attribute as a substring.
     */
    public readonly minimumAttributeValueLengthForSubstringMatches!: pulumi.Output<number>;
    /**
     * Specifies the minimum number of character sets that must be represented in a proposed password.
     */
    public readonly minimumRequiredCharacterSets!: pulumi.Output<number>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * The base URL for requests used to interact with the Pwned Passwords service. The first five characters of the
     * hexadecimal representation of the unsalted SHA-1 digest of a proposed password will be appended to this base URL to
     * construct the HTTP GET request used to obtain information about potential matches.
     */
    public readonly pwnedPasswordsBaseUrl!: pulumi.Output<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultPasswordValidatorRequiredAction[]>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Password Validator. Each configuration property
     * should be given in the form 'name=value'.
     */
    public readonly scriptArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Password Validator.
     */
    public readonly scriptClass!: pulumi.Output<string>;
    /**
     * Indicates whether to strip characters of any diacritical marks (like accents, cedillas, circumflexes, diaereses, tildes,
     * and umlauts) they may contain. Any characters with a diacritical mark would be replaced with a base version
     */
    public readonly stripDiacriticalMarks!: pulumi.Output<boolean>;
    /**
     * Indicates whether to reject any proposed password in which a value in one of the match attributes in the target user's
     * entry is a substring of that password.
     */
    public readonly testAttributeValueSubstringOfPassword!: pulumi.Output<boolean>;
    /**
     * Indicates whether to reject any proposed password that is a substring of a value in one of the match attributes in the
     * target user's entry.
     */
    public readonly testPasswordSubstringOfAttributeValue!: pulumi.Output<boolean>;
    /**
     * When the `type` attribute is set to: - `attribute-value`: Indicates whether to perform matching against the reversed
     * value of the provided password in addition to the order in which it was given. - `dictionary`: Indicates whether this
     * password validator is to test the reversed value of the provided password as well as the order in which it was given.
     */
    public readonly testReversedPassword!: pulumi.Output<boolean>;
    /**
     * Specifies which trust manager provider should be used to determine whether to trust the certificate presented by the
     * server when performing HTTPS communication. This may be left undefined if HTTPS communication is not needed, or if the
     * validation service presents a certificate that is trusted by the default JVM configuration (which should be the case for
     * the Pwned Password servers).
     */
    public readonly trustManagerProvider!: pulumi.Output<string>;
    /**
     * The type of Password Validator resource. Options are ['character-set', 'similarity-based', 'attribute-value', 'custom',
     * 'repeated-characters', 'dictionary', 'haystack', 'utf-8', 'groovy-scripted', 'pwned-passwords', 'disallowed-characters',
     * 'length-based', 'regular-expression', 'unique-characters', 'third-party']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this
     * validator. If a value is provided for this property, then it will override any failure message that may have otherwise
     * been generated by the validator.
     */
    public readonly validatorFailureMessage!: pulumi.Output<string>;
    /**
     * Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a
     * value is provided for this property, then it will override any description that may have otherwise been generated by the
     * validator.
     */
    public readonly validatorRequirementDescription!: pulumi.Output<string>;

    /**
     * Create a DefaultPasswordValidator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultPasswordValidatorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultPasswordValidatorArgs | DefaultPasswordValidatorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultPasswordValidatorState | undefined;
            resourceInputs["acceptPasswordOnServiceError"] = state ? state.acceptPasswordOnServiceError : undefined;
            resourceInputs["allowNonAsciiCharacters"] = state ? state.allowNonAsciiCharacters : undefined;
            resourceInputs["allowUnclassifiedCharacters"] = state ? state.allowUnclassifiedCharacters : undefined;
            resourceInputs["allowUnknownCharacters"] = state ? state.allowUnknownCharacters : undefined;
            resourceInputs["allowedCharacterTypes"] = state ? state.allowedCharacterTypes : undefined;
            resourceInputs["alternativePasswordCharacterMappings"] = state ? state.alternativePasswordCharacterMappings : undefined;
            resourceInputs["assumedPasswordGuessesPerSecond"] = state ? state.assumedPasswordGuessesPerSecond : undefined;
            resourceInputs["caseSensitiveValidation"] = state ? state.caseSensitiveValidation : undefined;
            resourceInputs["characterSets"] = state ? state.characterSets : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dictionaryFile"] = state ? state.dictionaryFile : undefined;
            resourceInputs["disallowedCharacters"] = state ? state.disallowedCharacters : undefined;
            resourceInputs["disallowedLeadingCharacters"] = state ? state.disallowedLeadingCharacters : undefined;
            resourceInputs["disallowedTrailingCharacters"] = state ? state.disallowedTrailingCharacters : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["extensionArguments"] = state ? state.extensionArguments : undefined;
            resourceInputs["extensionClass"] = state ? state.extensionClass : undefined;
            resourceInputs["httpConnectTimeout"] = state ? state.httpConnectTimeout : undefined;
            resourceInputs["httpProxyExternalServer"] = state ? state.httpProxyExternalServer : undefined;
            resourceInputs["httpResponseTimeout"] = state ? state.httpResponseTimeout : undefined;
            resourceInputs["ignoreLeadingNonAlphabeticCharacters"] = state ? state.ignoreLeadingNonAlphabeticCharacters : undefined;
            resourceInputs["ignoreTrailingNonAlphabeticCharacters"] = state ? state.ignoreTrailingNonAlphabeticCharacters : undefined;
            resourceInputs["invokeForAdd"] = state ? state.invokeForAdd : undefined;
            resourceInputs["invokeForAdminReset"] = state ? state.invokeForAdminReset : undefined;
            resourceInputs["invokeForSelfChange"] = state ? state.invokeForSelfChange : undefined;
            resourceInputs["keyManagerProvider"] = state ? state.keyManagerProvider : undefined;
            resourceInputs["matchAttributes"] = state ? state.matchAttributes : undefined;
            resourceInputs["matchBehavior"] = state ? state.matchBehavior : undefined;
            resourceInputs["matchPattern"] = state ? state.matchPattern : undefined;
            resourceInputs["maxConsecutiveLength"] = state ? state.maxConsecutiveLength : undefined;
            resourceInputs["maxPasswordLength"] = state ? state.maxPasswordLength : undefined;
            resourceInputs["maximumAllowedPercentOfPassword"] = state ? state.maximumAllowedPercentOfPassword : undefined;
            resourceInputs["minPasswordDifference"] = state ? state.minPasswordDifference : undefined;
            resourceInputs["minPasswordLength"] = state ? state.minPasswordLength : undefined;
            resourceInputs["minUniqueCharacters"] = state ? state.minUniqueCharacters : undefined;
            resourceInputs["minimumAcceptableTimeToExhaustSearchSpace"] = state ? state.minimumAcceptableTimeToExhaustSearchSpace : undefined;
            resourceInputs["minimumAttributeValueLengthForSubstringMatches"] = state ? state.minimumAttributeValueLengthForSubstringMatches : undefined;
            resourceInputs["minimumRequiredCharacterSets"] = state ? state.minimumRequiredCharacterSets : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["pwnedPasswordsBaseUrl"] = state ? state.pwnedPasswordsBaseUrl : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["scriptArguments"] = state ? state.scriptArguments : undefined;
            resourceInputs["scriptClass"] = state ? state.scriptClass : undefined;
            resourceInputs["stripDiacriticalMarks"] = state ? state.stripDiacriticalMarks : undefined;
            resourceInputs["testAttributeValueSubstringOfPassword"] = state ? state.testAttributeValueSubstringOfPassword : undefined;
            resourceInputs["testPasswordSubstringOfAttributeValue"] = state ? state.testPasswordSubstringOfAttributeValue : undefined;
            resourceInputs["testReversedPassword"] = state ? state.testReversedPassword : undefined;
            resourceInputs["trustManagerProvider"] = state ? state.trustManagerProvider : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validatorFailureMessage"] = state ? state.validatorFailureMessage : undefined;
            resourceInputs["validatorRequirementDescription"] = state ? state.validatorRequirementDescription : undefined;
        } else {
            const args = argsOrState as DefaultPasswordValidatorArgs | undefined;
            resourceInputs["acceptPasswordOnServiceError"] = args ? args.acceptPasswordOnServiceError : undefined;
            resourceInputs["allowNonAsciiCharacters"] = args ? args.allowNonAsciiCharacters : undefined;
            resourceInputs["allowUnclassifiedCharacters"] = args ? args.allowUnclassifiedCharacters : undefined;
            resourceInputs["allowUnknownCharacters"] = args ? args.allowUnknownCharacters : undefined;
            resourceInputs["allowedCharacterTypes"] = args ? args.allowedCharacterTypes : undefined;
            resourceInputs["alternativePasswordCharacterMappings"] = args ? args.alternativePasswordCharacterMappings : undefined;
            resourceInputs["assumedPasswordGuessesPerSecond"] = args ? args.assumedPasswordGuessesPerSecond : undefined;
            resourceInputs["caseSensitiveValidation"] = args ? args.caseSensitiveValidation : undefined;
            resourceInputs["characterSets"] = args ? args.characterSets : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dictionaryFile"] = args ? args.dictionaryFile : undefined;
            resourceInputs["disallowedCharacters"] = args ? args.disallowedCharacters : undefined;
            resourceInputs["disallowedLeadingCharacters"] = args ? args.disallowedLeadingCharacters : undefined;
            resourceInputs["disallowedTrailingCharacters"] = args ? args.disallowedTrailingCharacters : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["extensionArguments"] = args ? args.extensionArguments : undefined;
            resourceInputs["extensionClass"] = args ? args.extensionClass : undefined;
            resourceInputs["httpConnectTimeout"] = args ? args.httpConnectTimeout : undefined;
            resourceInputs["httpProxyExternalServer"] = args ? args.httpProxyExternalServer : undefined;
            resourceInputs["httpResponseTimeout"] = args ? args.httpResponseTimeout : undefined;
            resourceInputs["ignoreLeadingNonAlphabeticCharacters"] = args ? args.ignoreLeadingNonAlphabeticCharacters : undefined;
            resourceInputs["ignoreTrailingNonAlphabeticCharacters"] = args ? args.ignoreTrailingNonAlphabeticCharacters : undefined;
            resourceInputs["invokeForAdd"] = args ? args.invokeForAdd : undefined;
            resourceInputs["invokeForAdminReset"] = args ? args.invokeForAdminReset : undefined;
            resourceInputs["invokeForSelfChange"] = args ? args.invokeForSelfChange : undefined;
            resourceInputs["keyManagerProvider"] = args ? args.keyManagerProvider : undefined;
            resourceInputs["matchAttributes"] = args ? args.matchAttributes : undefined;
            resourceInputs["matchBehavior"] = args ? args.matchBehavior : undefined;
            resourceInputs["matchPattern"] = args ? args.matchPattern : undefined;
            resourceInputs["maxConsecutiveLength"] = args ? args.maxConsecutiveLength : undefined;
            resourceInputs["maxPasswordLength"] = args ? args.maxPasswordLength : undefined;
            resourceInputs["maximumAllowedPercentOfPassword"] = args ? args.maximumAllowedPercentOfPassword : undefined;
            resourceInputs["minPasswordDifference"] = args ? args.minPasswordDifference : undefined;
            resourceInputs["minPasswordLength"] = args ? args.minPasswordLength : undefined;
            resourceInputs["minUniqueCharacters"] = args ? args.minUniqueCharacters : undefined;
            resourceInputs["minimumAcceptableTimeToExhaustSearchSpace"] = args ? args.minimumAcceptableTimeToExhaustSearchSpace : undefined;
            resourceInputs["minimumAttributeValueLengthForSubstringMatches"] = args ? args.minimumAttributeValueLengthForSubstringMatches : undefined;
            resourceInputs["minimumRequiredCharacterSets"] = args ? args.minimumRequiredCharacterSets : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pwnedPasswordsBaseUrl"] = args ? args.pwnedPasswordsBaseUrl : undefined;
            resourceInputs["scriptArguments"] = args ? args.scriptArguments : undefined;
            resourceInputs["scriptClass"] = args ? args.scriptClass : undefined;
            resourceInputs["stripDiacriticalMarks"] = args ? args.stripDiacriticalMarks : undefined;
            resourceInputs["testAttributeValueSubstringOfPassword"] = args ? args.testAttributeValueSubstringOfPassword : undefined;
            resourceInputs["testPasswordSubstringOfAttributeValue"] = args ? args.testPasswordSubstringOfAttributeValue : undefined;
            resourceInputs["testReversedPassword"] = args ? args.testReversedPassword : undefined;
            resourceInputs["trustManagerProvider"] = args ? args.trustManagerProvider : undefined;
            resourceInputs["validatorFailureMessage"] = args ? args.validatorFailureMessage : undefined;
            resourceInputs["validatorRequirementDescription"] = args ? args.validatorRequirementDescription : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultPasswordValidator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultPasswordValidator resources.
 */
export interface DefaultPasswordValidatorState {
    /**
     * Indicates whether to accept the proposed password if an error occurs while attempting to interact with the Pwned
     * Passwords service.
     */
    acceptPasswordOnServiceError?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords will be allowed to include characters from outside the ASCII character set.
     */
    allowNonAsciiCharacters?: pulumi.Input<boolean>;
    /**
     * Indicates whether this password validator allows passwords to contain characters outside of any of the user-defined
     * character sets.
     */
    allowUnclassifiedCharacters?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords will be allowed to include characters that are not recognized by the JVM's Unicode support.
     */
    allowUnknownCharacters?: pulumi.Input<boolean>;
    /**
     * Specifies the set of character types that are allowed to be present in passwords.
     */
    allowedCharacterTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Provides a set of character substitutions that can be applied to the proposed password when checking to see if it is in
     * the provided dictionary. Each mapping should consist of a single character followed by a colon and a list of the
     * alternative characters that may be used in place of that character.
     */
    alternativePasswordCharacterMappings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of password guesses per second that a potential attacker may be expected to make.
     */
    assumedPasswordGuessesPerSecond?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - One of [`repeated-characters`, `unique-characters`]: Indicates whether this
     * password validator should treat password characters in a case-sensitive manner. - `dictionary`: Indicates whether this
     * password validator is to treat password characters in a case-sensitive manner.
     */
    caseSensitiveValidation?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `character-set`: Specifies a character set containing characters that a password
     * may contain and a value indicating the minimum number of characters required from that set. - `repeated-characters`:
     * Specifies a set of characters that should be considered equivalent for the purpose of this password validator. This can
     * be used, for example, to ensure that passwords contain no more than three consecutive digits.
     */
    characterSets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this Password Validator
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the path to the file containing a list of words that cannot be used as passwords.
     */
    dictionaryFile?: pulumi.Input<string>;
    /**
     * A set of characters that will not be allowed anywhere in a password.
     */
    disallowedCharacters?: pulumi.Input<string>;
    /**
     * A set of characters that will not be allowed as the first character of the password.
     */
    disallowedLeadingCharacters?: pulumi.Input<string>;
    /**
     * A set of characters that will not be allowed as the last character of the password.
     */
    disallowedTrailingCharacters?: pulumi.Input<string>;
    /**
     * Indicates whether the password validator is enabled for use.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Password Validator. Each configuration property
     * should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Password Validator.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. The maximum length of time to wait to obtain an HTTP connection.
     */
    httpConnectTimeout?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 9.2.0.0+. A reference to an HTTP proxy server that should be used for
     * requests sent to the Pwned Passwords service.
     */
    httpProxyExternalServer?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. The maximum length of time to wait for a response to an HTTP
     * request.
     */
    httpResponseTimeout?: pulumi.Input<string>;
    /**
     * Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the beginning of
     * a proposed password.
     */
    ignoreLeadingNonAlphabeticCharacters?: pulumi.Input<boolean>;
    /**
     * Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the end of a
     * proposed password.
     */
    ignoreTrailingNonAlphabeticCharacters?: pulumi.Input<boolean>;
    /**
     * Indicates whether this password validator should be used to validate clear-text passwords provided in LDAP add requests.
     */
    invokeForAdd?: pulumi.Input<boolean>;
    /**
     * Indicates whether this password validator should be used to validate clear-text passwords provided by administrators
     * when changing the password for another user.
     */
    invokeForAdminReset?: pulumi.Input<boolean>;
    /**
     * Indicates whether this password validator should be used to validate clear-text passwords provided by an end user in the
     * course of changing their own password.
     */
    invokeForSelfChange?: pulumi.Input<boolean>;
    /**
     * Specifies which key manager provider should be used to obtain a client certificate to present to the validation server
     * when performing HTTPS communication. This may be left undefined if communication will not be secured with HTTPS, or if
     * there is no need to present a client certificate to the validation service.
     */
    keyManagerProvider?: pulumi.Input<string>;
    /**
     * Specifies the name(s) of the attribute(s) whose values should be checked to determine whether they match the provided
     * password. If no values are provided, then the server checks if the proposed password matches the value of any user
     * attribute in the target user's entry.
     */
    matchAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The behavior to exhibit if a user's proposed password matches the regular expression defined in the match-pattern
     * property.
     */
    matchBehavior?: pulumi.Input<string>;
    /**
     * The regular expression to use for this password validator.
     */
    matchPattern?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of times that any character can appear consecutively in a password value.
     */
    maxConsecutiveLength?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of characters that can be included in a proposed password.
     */
    maxPasswordLength?: pulumi.Input<number>;
    /**
     * The maximum allowed percent of a proposed password that any single dictionary word is allowed to comprise. A value of
     * 100 indicates that a proposed password will only be rejected if the dictionary contains the entire proposed password
     * (after any configured transformations have been applied).
     */
    maximumAllowedPercentOfPassword?: pulumi.Input<number>;
    /**
     * Specifies the minimum difference of new and old password.
     */
    minPasswordDifference?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of characters that must be included in a proposed password.
     */
    minPasswordLength?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of unique characters that a password will be allowed to contain.
     */
    minUniqueCharacters?: pulumi.Input<number>;
    /**
     * The minimum length of time (using the configured number of password guesses per second) required to exhaust the entire
     * search space for a proposed password in order for that password to be considered acceptable.
     */
    minimumAcceptableTimeToExhaustSearchSpace?: pulumi.Input<string>;
    /**
     * The minimum length that an attribute value must have for it to be considered when rejecting passwords that contain the
     * value of another attribute as a substring.
     */
    minimumAttributeValueLengthForSubstringMatches?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of character sets that must be represented in a proposed password.
     */
    minimumRequiredCharacterSets?: pulumi.Input<number>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The base URL for requests used to interact with the Pwned Passwords service. The first five characters of the
     * hexadecimal representation of the unsalted SHA-1 digest of a proposed password will be appended to this base URL to
     * construct the HTTP GET request used to obtain information about potential matches.
     */
    pwnedPasswordsBaseUrl?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultPasswordValidatorRequiredAction>[]>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Password Validator. Each configuration property
     * should be given in the form 'name=value'.
     */
    scriptArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Password Validator.
     */
    scriptClass?: pulumi.Input<string>;
    /**
     * Indicates whether to strip characters of any diacritical marks (like accents, cedillas, circumflexes, diaereses, tildes,
     * and umlauts) they may contain. Any characters with a diacritical mark would be replaced with a base version
     */
    stripDiacriticalMarks?: pulumi.Input<boolean>;
    /**
     * Indicates whether to reject any proposed password in which a value in one of the match attributes in the target user's
     * entry is a substring of that password.
     */
    testAttributeValueSubstringOfPassword?: pulumi.Input<boolean>;
    /**
     * Indicates whether to reject any proposed password that is a substring of a value in one of the match attributes in the
     * target user's entry.
     */
    testPasswordSubstringOfAttributeValue?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `attribute-value`: Indicates whether to perform matching against the reversed
     * value of the provided password in addition to the order in which it was given. - `dictionary`: Indicates whether this
     * password validator is to test the reversed value of the provided password as well as the order in which it was given.
     */
    testReversedPassword?: pulumi.Input<boolean>;
    /**
     * Specifies which trust manager provider should be used to determine whether to trust the certificate presented by the
     * server when performing HTTPS communication. This may be left undefined if HTTPS communication is not needed, or if the
     * validation service presents a certificate that is trusted by the default JVM configuration (which should be the case for
     * the Pwned Password servers).
     */
    trustManagerProvider?: pulumi.Input<string>;
    /**
     * The type of Password Validator resource. Options are ['character-set', 'similarity-based', 'attribute-value', 'custom',
     * 'repeated-characters', 'dictionary', 'haystack', 'utf-8', 'groovy-scripted', 'pwned-passwords', 'disallowed-characters',
     * 'length-based', 'regular-expression', 'unique-characters', 'third-party']
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this
     * validator. If a value is provided for this property, then it will override any failure message that may have otherwise
     * been generated by the validator.
     */
    validatorFailureMessage?: pulumi.Input<string>;
    /**
     * Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a
     * value is provided for this property, then it will override any description that may have otherwise been generated by the
     * validator.
     */
    validatorRequirementDescription?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultPasswordValidator resource.
 */
export interface DefaultPasswordValidatorArgs {
    /**
     * Indicates whether to accept the proposed password if an error occurs while attempting to interact with the Pwned
     * Passwords service.
     */
    acceptPasswordOnServiceError?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords will be allowed to include characters from outside the ASCII character set.
     */
    allowNonAsciiCharacters?: pulumi.Input<boolean>;
    /**
     * Indicates whether this password validator allows passwords to contain characters outside of any of the user-defined
     * character sets.
     */
    allowUnclassifiedCharacters?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords will be allowed to include characters that are not recognized by the JVM's Unicode support.
     */
    allowUnknownCharacters?: pulumi.Input<boolean>;
    /**
     * Specifies the set of character types that are allowed to be present in passwords.
     */
    allowedCharacterTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Provides a set of character substitutions that can be applied to the proposed password when checking to see if it is in
     * the provided dictionary. Each mapping should consist of a single character followed by a colon and a list of the
     * alternative characters that may be used in place of that character.
     */
    alternativePasswordCharacterMappings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of password guesses per second that a potential attacker may be expected to make.
     */
    assumedPasswordGuessesPerSecond?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - One of [`repeated-characters`, `unique-characters`]: Indicates whether this
     * password validator should treat password characters in a case-sensitive manner. - `dictionary`: Indicates whether this
     * password validator is to treat password characters in a case-sensitive manner.
     */
    caseSensitiveValidation?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `character-set`: Specifies a character set containing characters that a password
     * may contain and a value indicating the minimum number of characters required from that set. - `repeated-characters`:
     * Specifies a set of characters that should be considered equivalent for the purpose of this password validator. This can
     * be used, for example, to ensure that passwords contain no more than three consecutive digits.
     */
    characterSets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this Password Validator
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the path to the file containing a list of words that cannot be used as passwords.
     */
    dictionaryFile?: pulumi.Input<string>;
    /**
     * A set of characters that will not be allowed anywhere in a password.
     */
    disallowedCharacters?: pulumi.Input<string>;
    /**
     * A set of characters that will not be allowed as the first character of the password.
     */
    disallowedLeadingCharacters?: pulumi.Input<string>;
    /**
     * A set of characters that will not be allowed as the last character of the password.
     */
    disallowedTrailingCharacters?: pulumi.Input<string>;
    /**
     * Indicates whether the password validator is enabled for use.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Password Validator. Each configuration property
     * should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Password Validator.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. The maximum length of time to wait to obtain an HTTP connection.
     */
    httpConnectTimeout?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 9.2.0.0+. A reference to an HTTP proxy server that should be used for
     * requests sent to the Pwned Passwords service.
     */
    httpProxyExternalServer?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. The maximum length of time to wait for a response to an HTTP
     * request.
     */
    httpResponseTimeout?: pulumi.Input<string>;
    /**
     * Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the beginning of
     * a proposed password.
     */
    ignoreLeadingNonAlphabeticCharacters?: pulumi.Input<boolean>;
    /**
     * Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the end of a
     * proposed password.
     */
    ignoreTrailingNonAlphabeticCharacters?: pulumi.Input<boolean>;
    /**
     * Indicates whether this password validator should be used to validate clear-text passwords provided in LDAP add requests.
     */
    invokeForAdd?: pulumi.Input<boolean>;
    /**
     * Indicates whether this password validator should be used to validate clear-text passwords provided by administrators
     * when changing the password for another user.
     */
    invokeForAdminReset?: pulumi.Input<boolean>;
    /**
     * Indicates whether this password validator should be used to validate clear-text passwords provided by an end user in the
     * course of changing their own password.
     */
    invokeForSelfChange?: pulumi.Input<boolean>;
    /**
     * Specifies which key manager provider should be used to obtain a client certificate to present to the validation server
     * when performing HTTPS communication. This may be left undefined if communication will not be secured with HTTPS, or if
     * there is no need to present a client certificate to the validation service.
     */
    keyManagerProvider?: pulumi.Input<string>;
    /**
     * Specifies the name(s) of the attribute(s) whose values should be checked to determine whether they match the provided
     * password. If no values are provided, then the server checks if the proposed password matches the value of any user
     * attribute in the target user's entry.
     */
    matchAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The behavior to exhibit if a user's proposed password matches the regular expression defined in the match-pattern
     * property.
     */
    matchBehavior?: pulumi.Input<string>;
    /**
     * The regular expression to use for this password validator.
     */
    matchPattern?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of times that any character can appear consecutively in a password value.
     */
    maxConsecutiveLength?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of characters that can be included in a proposed password.
     */
    maxPasswordLength?: pulumi.Input<number>;
    /**
     * The maximum allowed percent of a proposed password that any single dictionary word is allowed to comprise. A value of
     * 100 indicates that a proposed password will only be rejected if the dictionary contains the entire proposed password
     * (after any configured transformations have been applied).
     */
    maximumAllowedPercentOfPassword?: pulumi.Input<number>;
    /**
     * Specifies the minimum difference of new and old password.
     */
    minPasswordDifference?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of characters that must be included in a proposed password.
     */
    minPasswordLength?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of unique characters that a password will be allowed to contain.
     */
    minUniqueCharacters?: pulumi.Input<number>;
    /**
     * The minimum length of time (using the configured number of password guesses per second) required to exhaust the entire
     * search space for a proposed password in order for that password to be considered acceptable.
     */
    minimumAcceptableTimeToExhaustSearchSpace?: pulumi.Input<string>;
    /**
     * The minimum length that an attribute value must have for it to be considered when rejecting passwords that contain the
     * value of another attribute as a substring.
     */
    minimumAttributeValueLengthForSubstringMatches?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of character sets that must be represented in a proposed password.
     */
    minimumRequiredCharacterSets?: pulumi.Input<number>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * The base URL for requests used to interact with the Pwned Passwords service. The first five characters of the
     * hexadecimal representation of the unsalted SHA-1 digest of a proposed password will be appended to this base URL to
     * construct the HTTP GET request used to obtain information about potential matches.
     */
    pwnedPasswordsBaseUrl?: pulumi.Input<string>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Password Validator. Each configuration property
     * should be given in the form 'name=value'.
     */
    scriptArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Password Validator.
     */
    scriptClass?: pulumi.Input<string>;
    /**
     * Indicates whether to strip characters of any diacritical marks (like accents, cedillas, circumflexes, diaereses, tildes,
     * and umlauts) they may contain. Any characters with a diacritical mark would be replaced with a base version
     */
    stripDiacriticalMarks?: pulumi.Input<boolean>;
    /**
     * Indicates whether to reject any proposed password in which a value in one of the match attributes in the target user's
     * entry is a substring of that password.
     */
    testAttributeValueSubstringOfPassword?: pulumi.Input<boolean>;
    /**
     * Indicates whether to reject any proposed password that is a substring of a value in one of the match attributes in the
     * target user's entry.
     */
    testPasswordSubstringOfAttributeValue?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `attribute-value`: Indicates whether to perform matching against the reversed
     * value of the provided password in addition to the order in which it was given. - `dictionary`: Indicates whether this
     * password validator is to test the reversed value of the provided password as well as the order in which it was given.
     */
    testReversedPassword?: pulumi.Input<boolean>;
    /**
     * Specifies which trust manager provider should be used to determine whether to trust the certificate presented by the
     * server when performing HTTPS communication. This may be left undefined if HTTPS communication is not needed, or if the
     * validation service presents a certificate that is trusted by the default JVM configuration (which should be the case for
     * the Pwned Password servers).
     */
    trustManagerProvider?: pulumi.Input<string>;
    /**
     * Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this
     * validator. If a value is provided for this property, then it will override any failure message that may have otherwise
     * been generated by the validator.
     */
    validatorFailureMessage?: pulumi.Input<string>;
    /**
     * Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a
     * value is provided for this property, then it will override any description that may have otherwise been generated by the
     * validator.
     */
    validatorRequirementDescription?: pulumi.Input<string>;
}
