// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultAccessTokenValidator extends pulumi.CustomResource {
    /**
     * Get an existing DefaultAccessTokenValidator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultAccessTokenValidatorState, opts?: pulumi.CustomResourceOptions): DefaultAccessTokenValidator {
        return new DefaultAccessTokenValidator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultAccessTokenValidator:DefaultAccessTokenValidator';

    /**
     * Returns true if the given object is an instance of DefaultAccessTokenValidator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultAccessTokenValidator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultAccessTokenValidator.__pulumiType;
    }

    /**
     * The Access Token Manager instance ID to specify when calling the PingFederate introspection endpoint. If this property
     * is set the include-aud-parameter property is ignored.
     */
    public readonly accessTokenManagerId!: pulumi.Output<string>;
    /**
     * Specifies the authentication types for bind operations that may be used to generate access tokens, and for which
     * generated access tokens will be accepted.
     */
    public readonly allowedAuthenticationTypes!: pulumi.Output<string[]>;
    /**
     * Specifies an allow list of JWT content encryption algorithms that will be accepted by the JWT Access Token Validator.
     */
    public readonly allowedContentEncryptionAlgorithms!: pulumi.Output<string[]>;
    /**
     * Specifies an allow list of JWT key encryption algorithms that will be accepted by the JWT Access Token Validator. This
     * setting is only used if encryption-key-pair is set.
     */
    public readonly allowedKeyEncryptionAlgorithms!: pulumi.Output<string[]>;
    /**
     * Specifies the names of the SASL mechanisms for which access tokens may be generated, and for which generated access
     * tokens will be accepted.
     */
    public readonly allowedSaslMechanisms!: pulumi.Output<string[]>;
    /**
     * Specifies an allow list of JWT signing algorithms that will be accepted by the JWT Access Token Validator.
     */
    public readonly allowedSigningAlgorithms!: pulumi.Output<string[]>;
    /**
     * Specifies the external server that will be used to aid in validating access tokens. In most cases this will be the
     * Authorization Server that minted the token.
     */
    public readonly authorizationServer!: pulumi.Output<string>;
    /**
     * The client identifier to use when authenticating to the PingFederate authorization server.
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * The name of the token claim that contains the OAuth2 client Id.
     */
    public readonly clientIdClaimName!: pulumi.Output<string>;
    /**
     * The client secret to use when authenticating to the PingFederate authorization server.
     */
    public readonly clientSecret!: pulumi.Output<string>;
    /**
     * The passphrase provider for obtaining the client secret to use when authenticating to the PingFederate authorization
     * server.
     */
    public readonly clientSecretPassphraseProvider!: pulumi.Output<string>;
    /**
     * Specifies the amount of clock skew that is tolerated by the JWT Access Token Validator when evaluating whether a token
     * is within its valid time interval. The duration specified by this parameter will be subtracted from the token's
     * not-before (nbf) time and added to the token's expiration (exp) time, if present, to allow for any time difference
     * between the local server's clock and the token issuer's clock.
     */
    public readonly clockSkewGracePeriod!: pulumi.Output<string>;
    /**
     * A description for this Access Token Validator
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * When the `type` attribute is set to: - One of [`ping-federate`, `jwt`, `mock`, `third-party`]: Indicates whether this
     * Access Token Validator is enabled for use in Directory Server. - `bind`: Indicates whether this Bind Access Token
     * Validator is enabled for use in Directory Server.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The public-private key pair that is used to encrypt the JWT payload. If specified, the JWT Access Token Validator will
     * use the private key to decrypt the JWT payload, and the public key must be exported to the Authorization Server that is
     * issuing access tokens.
     */
    public readonly encryptionKeyPair!: pulumi.Output<string>;
    /**
     * How often the Access Token Validator should refresh its stored value of the PingFederate server's token introspection
     * endpoint.
     */
    public readonly endpointCacheRefresh!: pulumi.Output<string>;
    /**
     * When the `type` attribute is set to: - One of [`bind`, `third-party`]: When multiple Access Token Validators are defined
     * for a single Directory Server, this property determines the evaluation order for determining the correct validator class
     * for an access token received by the Directory Server. Values of this property must be unique among all Access Token
     * Validators defined within Directory Server but not necessarily contiguous. Access Token Validators with a smaller value
     * will be evaluated first to determine if they are able to validate the access token. - `ping-federate`: When multiple
     * Ping Federate Access Token Validators are defined for a single Directory Server, this property determines the evaluation
     * order for determining the correct validator class for an access token received by the Directory Server. Values of this
     * property must be unique among all Ping Federate Access Token Validators defined within Directory Server but not
     * necessarily contiguous. Ping Federate Access Token Validators with a smaller value will be evaluated first to determine
     * if they are able to validate the access token. - `jwt`: When multiple JWT Access Token Validators are defined for a
     * single Directory Server, this property determines the evaluation order for determining the correct validator class for
     * an access token received by the Directory Server. Values of this property must be unique among all JWT Access Token
     * Validators defined within Directory Server but not necessarily contiguous. JWT Access Token Validators with a smaller
     * value will be evaluated first to determine if they are able to validate the access token. - `mock`: When multiple Mock
     * Access Token Validators are defined for a single Directory Server, this property determines the evaluation order for
     * determining the correct validator class for an access token received by the Directory Server. Values of this property
     * must be unique among all Mock Access Token Validators defined within Directory Server but not necessarily contiguous.
     * Mock Access Token Validators with a smaller value will be evaluated first to determine if they are able to validate the
     * access token.
     */
    public readonly evaluationOrderIndex!: pulumi.Output<number>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Access Token Validator. Each configuration
     * property should be given in the form 'name=value'.
     */
    public readonly extensionArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Access Token Validator.
     */
    public readonly extensionClass!: pulumi.Output<string>;
    /**
     * A reference to a request criteria object that may be used to identify the types of bind operations for which access
     * tokens may be generated. If no criteria is specified, then access tokens may be generated for any bind operations that
     * satisfy the other requirements configured in this validator.
     */
    public readonly generateTokenResultCriteria!: pulumi.Output<string>;
    /**
     * Specifies the name of the Identity Mapper that should be used for associating user entries with Bearer token subject
     * names. The claim name from which to obtain the subject (i.e. the currently logged-in user) may be configured using the
     * subject-claim-name property.
     */
    public readonly identityMapper!: pulumi.Output<string>;
    /**
     * Whether to include the incoming request URL as the "aud" parameter when calling the PingFederate introspection endpoint.
     * This property is ignored if the access-token-manager-id property is set.
     */
    public readonly includeAudParameter!: pulumi.Output<boolean>;
    /**
     * Specifies the names of any scopes that should be granted to a client that authenticates with a bind access token. By
     * default, no scopes will be granted.
     */
    public readonly includedScopes!: pulumi.Output<string[]>;
    /**
     * The relative path to JWKS endpoint from which to retrieve one or more public signing keys that may be used to validate
     * the signature of an incoming JWT access token. This path is relative to the base_url property defined for the
     * validator's external authorization server. If jwks-endpoint-path is specified, the JWT Access Token Validator will not
     * consult locally stored certificates for validating token signatures.
     */
    public readonly jwksEndpointPath!: pulumi.Output<string>;
    /**
     * Specifies the maximum length of time that a generated token should be considered valid. If this is not specified, then
     * generated access tokens will not expire.
     */
    public readonly maximumTokenLifetime!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Indicates whether access tokens should be persisted in user entries.
     */
    public readonly persistAccessTokens!: pulumi.Output<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultAccessTokenValidatorRequiredAction[]>;
    /**
     * The name of the token claim that contains the scopes granted by the token.
     */
    public readonly scopeClaimName!: pulumi.Output<string>;
    /**
     * Specifies the locally stored certificates that may be used to validate the signature of an incoming JWT access token. If
     * this property is specified, the JWT Access Token Validator will not use a JWKS endpoint to retrieve public keys.
     */
    public readonly signingCertificates!: pulumi.Output<string[]>;
    /**
     * The name of the token claim that contains the subject, i.e. the logged-in user in an access token. This property goes
     * hand-in-hand with the identity-mapper property and tells the Identity Mapper which field to use to look up the user
     * entry on the server.
     */
    public readonly subjectClaimName!: pulumi.Output<string>;
    /**
     * The type of Access Token Validator resource. Options are ['bind', 'ping-federate', 'jwt', 'mock', 'third-party']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultAccessTokenValidator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultAccessTokenValidatorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultAccessTokenValidatorArgs | DefaultAccessTokenValidatorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultAccessTokenValidatorState | undefined;
            resourceInputs["accessTokenManagerId"] = state ? state.accessTokenManagerId : undefined;
            resourceInputs["allowedAuthenticationTypes"] = state ? state.allowedAuthenticationTypes : undefined;
            resourceInputs["allowedContentEncryptionAlgorithms"] = state ? state.allowedContentEncryptionAlgorithms : undefined;
            resourceInputs["allowedKeyEncryptionAlgorithms"] = state ? state.allowedKeyEncryptionAlgorithms : undefined;
            resourceInputs["allowedSaslMechanisms"] = state ? state.allowedSaslMechanisms : undefined;
            resourceInputs["allowedSigningAlgorithms"] = state ? state.allowedSigningAlgorithms : undefined;
            resourceInputs["authorizationServer"] = state ? state.authorizationServer : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientIdClaimName"] = state ? state.clientIdClaimName : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["clientSecretPassphraseProvider"] = state ? state.clientSecretPassphraseProvider : undefined;
            resourceInputs["clockSkewGracePeriod"] = state ? state.clockSkewGracePeriod : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["encryptionKeyPair"] = state ? state.encryptionKeyPair : undefined;
            resourceInputs["endpointCacheRefresh"] = state ? state.endpointCacheRefresh : undefined;
            resourceInputs["evaluationOrderIndex"] = state ? state.evaluationOrderIndex : undefined;
            resourceInputs["extensionArguments"] = state ? state.extensionArguments : undefined;
            resourceInputs["extensionClass"] = state ? state.extensionClass : undefined;
            resourceInputs["generateTokenResultCriteria"] = state ? state.generateTokenResultCriteria : undefined;
            resourceInputs["identityMapper"] = state ? state.identityMapper : undefined;
            resourceInputs["includeAudParameter"] = state ? state.includeAudParameter : undefined;
            resourceInputs["includedScopes"] = state ? state.includedScopes : undefined;
            resourceInputs["jwksEndpointPath"] = state ? state.jwksEndpointPath : undefined;
            resourceInputs["maximumTokenLifetime"] = state ? state.maximumTokenLifetime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["persistAccessTokens"] = state ? state.persistAccessTokens : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["scopeClaimName"] = state ? state.scopeClaimName : undefined;
            resourceInputs["signingCertificates"] = state ? state.signingCertificates : undefined;
            resourceInputs["subjectClaimName"] = state ? state.subjectClaimName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultAccessTokenValidatorArgs | undefined;
            resourceInputs["accessTokenManagerId"] = args ? args.accessTokenManagerId : undefined;
            resourceInputs["allowedAuthenticationTypes"] = args ? args.allowedAuthenticationTypes : undefined;
            resourceInputs["allowedContentEncryptionAlgorithms"] = args ? args.allowedContentEncryptionAlgorithms : undefined;
            resourceInputs["allowedKeyEncryptionAlgorithms"] = args ? args.allowedKeyEncryptionAlgorithms : undefined;
            resourceInputs["allowedSaslMechanisms"] = args ? args.allowedSaslMechanisms : undefined;
            resourceInputs["allowedSigningAlgorithms"] = args ? args.allowedSigningAlgorithms : undefined;
            resourceInputs["authorizationServer"] = args ? args.authorizationServer : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientIdClaimName"] = args ? args.clientIdClaimName : undefined;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["clientSecretPassphraseProvider"] = args ? args.clientSecretPassphraseProvider : undefined;
            resourceInputs["clockSkewGracePeriod"] = args ? args.clockSkewGracePeriod : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["encryptionKeyPair"] = args ? args.encryptionKeyPair : undefined;
            resourceInputs["endpointCacheRefresh"] = args ? args.endpointCacheRefresh : undefined;
            resourceInputs["evaluationOrderIndex"] = args ? args.evaluationOrderIndex : undefined;
            resourceInputs["extensionArguments"] = args ? args.extensionArguments : undefined;
            resourceInputs["extensionClass"] = args ? args.extensionClass : undefined;
            resourceInputs["generateTokenResultCriteria"] = args ? args.generateTokenResultCriteria : undefined;
            resourceInputs["identityMapper"] = args ? args.identityMapper : undefined;
            resourceInputs["includeAudParameter"] = args ? args.includeAudParameter : undefined;
            resourceInputs["includedScopes"] = args ? args.includedScopes : undefined;
            resourceInputs["jwksEndpointPath"] = args ? args.jwksEndpointPath : undefined;
            resourceInputs["maximumTokenLifetime"] = args ? args.maximumTokenLifetime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["persistAccessTokens"] = args ? args.persistAccessTokens : undefined;
            resourceInputs["scopeClaimName"] = args ? args.scopeClaimName : undefined;
            resourceInputs["signingCertificates"] = args ? args.signingCertificates : undefined;
            resourceInputs["subjectClaimName"] = args ? args.subjectClaimName : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DefaultAccessTokenValidator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultAccessTokenValidator resources.
 */
export interface DefaultAccessTokenValidatorState {
    /**
     * The Access Token Manager instance ID to specify when calling the PingFederate introspection endpoint. If this property
     * is set the include-aud-parameter property is ignored.
     */
    accessTokenManagerId?: pulumi.Input<string>;
    /**
     * Specifies the authentication types for bind operations that may be used to generate access tokens, and for which
     * generated access tokens will be accepted.
     */
    allowedAuthenticationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies an allow list of JWT content encryption algorithms that will be accepted by the JWT Access Token Validator.
     */
    allowedContentEncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies an allow list of JWT key encryption algorithms that will be accepted by the JWT Access Token Validator. This
     * setting is only used if encryption-key-pair is set.
     */
    allowedKeyEncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the SASL mechanisms for which access tokens may be generated, and for which generated access
     * tokens will be accepted.
     */
    allowedSaslMechanisms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies an allow list of JWT signing algorithms that will be accepted by the JWT Access Token Validator.
     */
    allowedSigningAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the external server that will be used to aid in validating access tokens. In most cases this will be the
     * Authorization Server that minted the token.
     */
    authorizationServer?: pulumi.Input<string>;
    /**
     * The client identifier to use when authenticating to the PingFederate authorization server.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The name of the token claim that contains the OAuth2 client Id.
     */
    clientIdClaimName?: pulumi.Input<string>;
    /**
     * The client secret to use when authenticating to the PingFederate authorization server.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The passphrase provider for obtaining the client secret to use when authenticating to the PingFederate authorization
     * server.
     */
    clientSecretPassphraseProvider?: pulumi.Input<string>;
    /**
     * Specifies the amount of clock skew that is tolerated by the JWT Access Token Validator when evaluating whether a token
     * is within its valid time interval. The duration specified by this parameter will be subtracted from the token's
     * not-before (nbf) time and added to the token's expiration (exp) time, if present, to allow for any time difference
     * between the local server's clock and the token issuer's clock.
     */
    clockSkewGracePeriod?: pulumi.Input<string>;
    /**
     * A description for this Access Token Validator
     */
    description?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - One of [`ping-federate`, `jwt`, `mock`, `third-party`]: Indicates whether this
     * Access Token Validator is enabled for use in Directory Server. - `bind`: Indicates whether this Bind Access Token
     * Validator is enabled for use in Directory Server.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The public-private key pair that is used to encrypt the JWT payload. If specified, the JWT Access Token Validator will
     * use the private key to decrypt the JWT payload, and the public key must be exported to the Authorization Server that is
     * issuing access tokens.
     */
    encryptionKeyPair?: pulumi.Input<string>;
    /**
     * How often the Access Token Validator should refresh its stored value of the PingFederate server's token introspection
     * endpoint.
     */
    endpointCacheRefresh?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - One of [`bind`, `third-party`]: When multiple Access Token Validators are defined
     * for a single Directory Server, this property determines the evaluation order for determining the correct validator class
     * for an access token received by the Directory Server. Values of this property must be unique among all Access Token
     * Validators defined within Directory Server but not necessarily contiguous. Access Token Validators with a smaller value
     * will be evaluated first to determine if they are able to validate the access token. - `ping-federate`: When multiple
     * Ping Federate Access Token Validators are defined for a single Directory Server, this property determines the evaluation
     * order for determining the correct validator class for an access token received by the Directory Server. Values of this
     * property must be unique among all Ping Federate Access Token Validators defined within Directory Server but not
     * necessarily contiguous. Ping Federate Access Token Validators with a smaller value will be evaluated first to determine
     * if they are able to validate the access token. - `jwt`: When multiple JWT Access Token Validators are defined for a
     * single Directory Server, this property determines the evaluation order for determining the correct validator class for
     * an access token received by the Directory Server. Values of this property must be unique among all JWT Access Token
     * Validators defined within Directory Server but not necessarily contiguous. JWT Access Token Validators with a smaller
     * value will be evaluated first to determine if they are able to validate the access token. - `mock`: When multiple Mock
     * Access Token Validators are defined for a single Directory Server, this property determines the evaluation order for
     * determining the correct validator class for an access token received by the Directory Server. Values of this property
     * must be unique among all Mock Access Token Validators defined within Directory Server but not necessarily contiguous.
     * Mock Access Token Validators with a smaller value will be evaluated first to determine if they are able to validate the
     * access token.
     */
    evaluationOrderIndex?: pulumi.Input<number>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Access Token Validator. Each configuration
     * property should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Access Token Validator.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * A reference to a request criteria object that may be used to identify the types of bind operations for which access
     * tokens may be generated. If no criteria is specified, then access tokens may be generated for any bind operations that
     * satisfy the other requirements configured in this validator.
     */
    generateTokenResultCriteria?: pulumi.Input<string>;
    /**
     * Specifies the name of the Identity Mapper that should be used for associating user entries with Bearer token subject
     * names. The claim name from which to obtain the subject (i.e. the currently logged-in user) may be configured using the
     * subject-claim-name property.
     */
    identityMapper?: pulumi.Input<string>;
    /**
     * Whether to include the incoming request URL as the "aud" parameter when calling the PingFederate introspection endpoint.
     * This property is ignored if the access-token-manager-id property is set.
     */
    includeAudParameter?: pulumi.Input<boolean>;
    /**
     * Specifies the names of any scopes that should be granted to a client that authenticates with a bind access token. By
     * default, no scopes will be granted.
     */
    includedScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The relative path to JWKS endpoint from which to retrieve one or more public signing keys that may be used to validate
     * the signature of an incoming JWT access token. This path is relative to the base_url property defined for the
     * validator's external authorization server. If jwks-endpoint-path is specified, the JWT Access Token Validator will not
     * consult locally stored certificates for validating token signatures.
     */
    jwksEndpointPath?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that a generated token should be considered valid. If this is not specified, then
     * generated access tokens will not expire.
     */
    maximumTokenLifetime?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether access tokens should be persisted in user entries.
     */
    persistAccessTokens?: pulumi.Input<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultAccessTokenValidatorRequiredAction>[]>;
    /**
     * The name of the token claim that contains the scopes granted by the token.
     */
    scopeClaimName?: pulumi.Input<string>;
    /**
     * Specifies the locally stored certificates that may be used to validate the signature of an incoming JWT access token. If
     * this property is specified, the JWT Access Token Validator will not use a JWKS endpoint to retrieve public keys.
     */
    signingCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the token claim that contains the subject, i.e. the logged-in user in an access token. This property goes
     * hand-in-hand with the identity-mapper property and tells the Identity Mapper which field to use to look up the user
     * entry on the server.
     */
    subjectClaimName?: pulumi.Input<string>;
    /**
     * The type of Access Token Validator resource. Options are ['bind', 'ping-federate', 'jwt', 'mock', 'third-party']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultAccessTokenValidator resource.
 */
export interface DefaultAccessTokenValidatorArgs {
    /**
     * The Access Token Manager instance ID to specify when calling the PingFederate introspection endpoint. If this property
     * is set the include-aud-parameter property is ignored.
     */
    accessTokenManagerId?: pulumi.Input<string>;
    /**
     * Specifies the authentication types for bind operations that may be used to generate access tokens, and for which
     * generated access tokens will be accepted.
     */
    allowedAuthenticationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies an allow list of JWT content encryption algorithms that will be accepted by the JWT Access Token Validator.
     */
    allowedContentEncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies an allow list of JWT key encryption algorithms that will be accepted by the JWT Access Token Validator. This
     * setting is only used if encryption-key-pair is set.
     */
    allowedKeyEncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the SASL mechanisms for which access tokens may be generated, and for which generated access
     * tokens will be accepted.
     */
    allowedSaslMechanisms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies an allow list of JWT signing algorithms that will be accepted by the JWT Access Token Validator.
     */
    allowedSigningAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the external server that will be used to aid in validating access tokens. In most cases this will be the
     * Authorization Server that minted the token.
     */
    authorizationServer?: pulumi.Input<string>;
    /**
     * The client identifier to use when authenticating to the PingFederate authorization server.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The name of the token claim that contains the OAuth2 client Id.
     */
    clientIdClaimName?: pulumi.Input<string>;
    /**
     * The client secret to use when authenticating to the PingFederate authorization server.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The passphrase provider for obtaining the client secret to use when authenticating to the PingFederate authorization
     * server.
     */
    clientSecretPassphraseProvider?: pulumi.Input<string>;
    /**
     * Specifies the amount of clock skew that is tolerated by the JWT Access Token Validator when evaluating whether a token
     * is within its valid time interval. The duration specified by this parameter will be subtracted from the token's
     * not-before (nbf) time and added to the token's expiration (exp) time, if present, to allow for any time difference
     * between the local server's clock and the token issuer's clock.
     */
    clockSkewGracePeriod?: pulumi.Input<string>;
    /**
     * A description for this Access Token Validator
     */
    description?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - One of [`ping-federate`, `jwt`, `mock`, `third-party`]: Indicates whether this
     * Access Token Validator is enabled for use in Directory Server. - `bind`: Indicates whether this Bind Access Token
     * Validator is enabled for use in Directory Server.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The public-private key pair that is used to encrypt the JWT payload. If specified, the JWT Access Token Validator will
     * use the private key to decrypt the JWT payload, and the public key must be exported to the Authorization Server that is
     * issuing access tokens.
     */
    encryptionKeyPair?: pulumi.Input<string>;
    /**
     * How often the Access Token Validator should refresh its stored value of the PingFederate server's token introspection
     * endpoint.
     */
    endpointCacheRefresh?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - One of [`bind`, `third-party`]: When multiple Access Token Validators are defined
     * for a single Directory Server, this property determines the evaluation order for determining the correct validator class
     * for an access token received by the Directory Server. Values of this property must be unique among all Access Token
     * Validators defined within Directory Server but not necessarily contiguous. Access Token Validators with a smaller value
     * will be evaluated first to determine if they are able to validate the access token. - `ping-federate`: When multiple
     * Ping Federate Access Token Validators are defined for a single Directory Server, this property determines the evaluation
     * order for determining the correct validator class for an access token received by the Directory Server. Values of this
     * property must be unique among all Ping Federate Access Token Validators defined within Directory Server but not
     * necessarily contiguous. Ping Federate Access Token Validators with a smaller value will be evaluated first to determine
     * if they are able to validate the access token. - `jwt`: When multiple JWT Access Token Validators are defined for a
     * single Directory Server, this property determines the evaluation order for determining the correct validator class for
     * an access token received by the Directory Server. Values of this property must be unique among all JWT Access Token
     * Validators defined within Directory Server but not necessarily contiguous. JWT Access Token Validators with a smaller
     * value will be evaluated first to determine if they are able to validate the access token. - `mock`: When multiple Mock
     * Access Token Validators are defined for a single Directory Server, this property determines the evaluation order for
     * determining the correct validator class for an access token received by the Directory Server. Values of this property
     * must be unique among all Mock Access Token Validators defined within Directory Server but not necessarily contiguous.
     * Mock Access Token Validators with a smaller value will be evaluated first to determine if they are able to validate the
     * access token.
     */
    evaluationOrderIndex?: pulumi.Input<number>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Access Token Validator. Each configuration
     * property should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Access Token Validator.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * A reference to a request criteria object that may be used to identify the types of bind operations for which access
     * tokens may be generated. If no criteria is specified, then access tokens may be generated for any bind operations that
     * satisfy the other requirements configured in this validator.
     */
    generateTokenResultCriteria?: pulumi.Input<string>;
    /**
     * Specifies the name of the Identity Mapper that should be used for associating user entries with Bearer token subject
     * names. The claim name from which to obtain the subject (i.e. the currently logged-in user) may be configured using the
     * subject-claim-name property.
     */
    identityMapper?: pulumi.Input<string>;
    /**
     * Whether to include the incoming request URL as the "aud" parameter when calling the PingFederate introspection endpoint.
     * This property is ignored if the access-token-manager-id property is set.
     */
    includeAudParameter?: pulumi.Input<boolean>;
    /**
     * Specifies the names of any scopes that should be granted to a client that authenticates with a bind access token. By
     * default, no scopes will be granted.
     */
    includedScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The relative path to JWKS endpoint from which to retrieve one or more public signing keys that may be used to validate
     * the signature of an incoming JWT access token. This path is relative to the base_url property defined for the
     * validator's external authorization server. If jwks-endpoint-path is specified, the JWT Access Token Validator will not
     * consult locally stored certificates for validating token signatures.
     */
    jwksEndpointPath?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that a generated token should be considered valid. If this is not specified, then
     * generated access tokens will not expire.
     */
    maximumTokenLifetime?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether access tokens should be persisted in user entries.
     */
    persistAccessTokens?: pulumi.Input<boolean>;
    /**
     * The name of the token claim that contains the scopes granted by the token.
     */
    scopeClaimName?: pulumi.Input<string>;
    /**
     * Specifies the locally stored certificates that may be used to validate the signature of an incoming JWT access token. If
     * this property is specified, the JWT Access Token Validator will not use a JWKS endpoint to retrieve public keys.
     */
    signingCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the token claim that contains the subject, i.e. the logged-in user in an access token. This property goes
     * hand-in-hand with the identity-mapper property and tells the Identity Mapper which field to use to look up the user
     * entry on the server.
     */
    subjectClaimName?: pulumi.Input<string>;
}
