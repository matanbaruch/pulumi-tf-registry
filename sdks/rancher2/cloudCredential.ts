// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudCredential extends pulumi.CustomResource {
    /**
     * Get an existing CloudCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudCredentialState, opts?: pulumi.CustomResourceOptions): CloudCredential {
        return new CloudCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/cloudCredential:CloudCredential';

    /**
     * Returns true if the given object is an instance of CloudCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudCredential.__pulumiType;
    }

    public readonly amazonec2CredentialConfig!: pulumi.Output<outputs.CloudCredentialAmazonec2CredentialConfig | undefined>;
    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    public readonly azureCredentialConfig!: pulumi.Output<outputs.CloudCredentialAzureCredentialConfig | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly digitaloceanCredentialConfig!: pulumi.Output<outputs.CloudCredentialDigitaloceanCredentialConfig | undefined>;
    public /*out*/ readonly driver!: pulumi.Output<string>;
    public readonly googleCredentialConfig!: pulumi.Output<outputs.CloudCredentialGoogleCredentialConfig | undefined>;
    public readonly harvesterCredentialConfig!: pulumi.Output<outputs.CloudCredentialHarvesterCredentialConfig | undefined>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly linodeCredentialConfig!: pulumi.Output<outputs.CloudCredentialLinodeCredentialConfig | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly openstackCredentialConfig!: pulumi.Output<outputs.CloudCredentialOpenstackCredentialConfig | undefined>;
    public readonly s3CredentialConfig!: pulumi.Output<outputs.CloudCredentialS3CredentialConfig | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CloudCredentialTimeouts | undefined>;
    public readonly vsphereCredentialConfig!: pulumi.Output<outputs.CloudCredentialVsphereCredentialConfig | undefined>;

    /**
     * Create a CloudCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CloudCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudCredentialArgs | CloudCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudCredentialState | undefined;
            resourceInputs["amazonec2CredentialConfig"] = state ? state.amazonec2CredentialConfig : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["azureCredentialConfig"] = state ? state.azureCredentialConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["digitaloceanCredentialConfig"] = state ? state.digitaloceanCredentialConfig : undefined;
            resourceInputs["driver"] = state ? state.driver : undefined;
            resourceInputs["googleCredentialConfig"] = state ? state.googleCredentialConfig : undefined;
            resourceInputs["harvesterCredentialConfig"] = state ? state.harvesterCredentialConfig : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["linodeCredentialConfig"] = state ? state.linodeCredentialConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openstackCredentialConfig"] = state ? state.openstackCredentialConfig : undefined;
            resourceInputs["s3CredentialConfig"] = state ? state.s3CredentialConfig : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vsphereCredentialConfig"] = state ? state.vsphereCredentialConfig : undefined;
        } else {
            const args = argsOrState as CloudCredentialArgs | undefined;
            resourceInputs["amazonec2CredentialConfig"] = args ? args.amazonec2CredentialConfig : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["azureCredentialConfig"] = args ? args.azureCredentialConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["digitaloceanCredentialConfig"] = args ? args.digitaloceanCredentialConfig : undefined;
            resourceInputs["googleCredentialConfig"] = args ? args.googleCredentialConfig : undefined;
            resourceInputs["harvesterCredentialConfig"] = args ? args.harvesterCredentialConfig : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["linodeCredentialConfig"] = args ? args.linodeCredentialConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openstackCredentialConfig"] = args ? args.openstackCredentialConfig : undefined;
            resourceInputs["s3CredentialConfig"] = args ? args.s3CredentialConfig : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vsphereCredentialConfig"] = args ? args.vsphereCredentialConfig : undefined;
            resourceInputs["driver"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudCredential.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudCredential resources.
 */
export interface CloudCredentialState {
    amazonec2CredentialConfig?: pulumi.Input<inputs.CloudCredentialAmazonec2CredentialConfig>;
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    azureCredentialConfig?: pulumi.Input<inputs.CloudCredentialAzureCredentialConfig>;
    description?: pulumi.Input<string>;
    digitaloceanCredentialConfig?: pulumi.Input<inputs.CloudCredentialDigitaloceanCredentialConfig>;
    driver?: pulumi.Input<string>;
    googleCredentialConfig?: pulumi.Input<inputs.CloudCredentialGoogleCredentialConfig>;
    harvesterCredentialConfig?: pulumi.Input<inputs.CloudCredentialHarvesterCredentialConfig>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    linodeCredentialConfig?: pulumi.Input<inputs.CloudCredentialLinodeCredentialConfig>;
    name?: pulumi.Input<string>;
    openstackCredentialConfig?: pulumi.Input<inputs.CloudCredentialOpenstackCredentialConfig>;
    s3CredentialConfig?: pulumi.Input<inputs.CloudCredentialS3CredentialConfig>;
    timeouts?: pulumi.Input<inputs.CloudCredentialTimeouts>;
    vsphereCredentialConfig?: pulumi.Input<inputs.CloudCredentialVsphereCredentialConfig>;
}

/**
 * The set of arguments for constructing a CloudCredential resource.
 */
export interface CloudCredentialArgs {
    amazonec2CredentialConfig?: pulumi.Input<inputs.CloudCredentialAmazonec2CredentialConfig>;
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    azureCredentialConfig?: pulumi.Input<inputs.CloudCredentialAzureCredentialConfig>;
    description?: pulumi.Input<string>;
    digitaloceanCredentialConfig?: pulumi.Input<inputs.CloudCredentialDigitaloceanCredentialConfig>;
    googleCredentialConfig?: pulumi.Input<inputs.CloudCredentialGoogleCredentialConfig>;
    harvesterCredentialConfig?: pulumi.Input<inputs.CloudCredentialHarvesterCredentialConfig>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    linodeCredentialConfig?: pulumi.Input<inputs.CloudCredentialLinodeCredentialConfig>;
    name?: pulumi.Input<string>;
    openstackCredentialConfig?: pulumi.Input<inputs.CloudCredentialOpenstackCredentialConfig>;
    s3CredentialConfig?: pulumi.Input<inputs.CloudCredentialS3CredentialConfig>;
    timeouts?: pulumi.Input<inputs.CloudCredentialTimeouts>;
    vsphereCredentialConfig?: pulumi.Input<inputs.CloudCredentialVsphereCredentialConfig>;
}
