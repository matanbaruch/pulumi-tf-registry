// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppV2 extends pulumi.CustomResource {
    /**
     * Get an existing AppV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppV2State, opts?: pulumi.CustomResourceOptions): AppV2 {
        return new AppV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/appV2:AppV2';

    /**
     * Returns true if the given object is an instance of AppV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppV2.__pulumiType;
    }

    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * Chart name
     */
    public readonly chartName!: pulumi.Output<string>;
    /**
     * Chart version
     */
    public readonly chartVersion!: pulumi.Output<string>;
    /**
     * Cleanup app V2 on failed chart upgrade
     */
    public readonly cleanupOnFail!: pulumi.Output<boolean | undefined>;
    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly clusterName!: pulumi.Output<string>;
    public /*out*/ readonly deploymentValues!: pulumi.Output<string>;
    /**
     * Disable app V2 chart hooks
     */
    public readonly disableHooks!: pulumi.Output<boolean | undefined>;
    /**
     * Disable app V2 Open API Validation
     */
    public readonly disableOpenApiValidation!: pulumi.Output<boolean | undefined>;
    /**
     * Force app V2 chart upgrade
     */
    public readonly forceUpgrade!: pulumi.Output<boolean | undefined>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * App v2 name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * App v2 namespace
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Deploy app within project ID
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Repo name
     */
    public readonly repoName!: pulumi.Output<string>;
    /**
     * System default registry providing images for app deployment.
     */
    public readonly systemDefaultRegistry!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.AppV2Timeouts | undefined>;
    /**
     * App v2 custom values yaml
     */
    public readonly values!: pulumi.Output<string | undefined>;
    /**
     * Wait until app is deployed
     */
    public readonly wait!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AppV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppV2Args | AppV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppV2State | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["chartName"] = state ? state.chartName : undefined;
            resourceInputs["chartVersion"] = state ? state.chartVersion : undefined;
            resourceInputs["cleanupOnFail"] = state ? state.cleanupOnFail : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["deploymentValues"] = state ? state.deploymentValues : undefined;
            resourceInputs["disableHooks"] = state ? state.disableHooks : undefined;
            resourceInputs["disableOpenApiValidation"] = state ? state.disableOpenApiValidation : undefined;
            resourceInputs["forceUpgrade"] = state ? state.forceUpgrade : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["repoName"] = state ? state.repoName : undefined;
            resourceInputs["systemDefaultRegistry"] = state ? state.systemDefaultRegistry : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
            resourceInputs["wait"] = state ? state.wait : undefined;
        } else {
            const args = argsOrState as AppV2Args | undefined;
            if ((!args || args.chartName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chartName'");
            }
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.repoName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoName'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["chartName"] = args ? args.chartName : undefined;
            resourceInputs["chartVersion"] = args ? args.chartVersion : undefined;
            resourceInputs["cleanupOnFail"] = args ? args.cleanupOnFail : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["disableHooks"] = args ? args.disableHooks : undefined;
            resourceInputs["disableOpenApiValidation"] = args ? args.disableOpenApiValidation : undefined;
            resourceInputs["forceUpgrade"] = args ? args.forceUpgrade : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["repoName"] = args ? args.repoName : undefined;
            resourceInputs["systemDefaultRegistry"] = args ? args.systemDefaultRegistry : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
            resourceInputs["wait"] = args ? args.wait : undefined;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["deploymentValues"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppV2 resources.
 */
export interface AppV2State {
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Chart name
     */
    chartName?: pulumi.Input<string>;
    /**
     * Chart version
     */
    chartVersion?: pulumi.Input<string>;
    /**
     * Cleanup app V2 on failed chart upgrade
     */
    cleanupOnFail?: pulumi.Input<boolean>;
    clusterId?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    deploymentValues?: pulumi.Input<string>;
    /**
     * Disable app V2 chart hooks
     */
    disableHooks?: pulumi.Input<boolean>;
    /**
     * Disable app V2 Open API Validation
     */
    disableOpenApiValidation?: pulumi.Input<boolean>;
    /**
     * Force app V2 chart upgrade
     */
    forceUpgrade?: pulumi.Input<boolean>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * App v2 name
     */
    name?: pulumi.Input<string>;
    /**
     * App v2 namespace
     */
    namespace?: pulumi.Input<string>;
    /**
     * Deploy app within project ID
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repo name
     */
    repoName?: pulumi.Input<string>;
    /**
     * System default registry providing images for app deployment.
     */
    systemDefaultRegistry?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AppV2Timeouts>;
    /**
     * App v2 custom values yaml
     */
    values?: pulumi.Input<string>;
    /**
     * Wait until app is deployed
     */
    wait?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AppV2 resource.
 */
export interface AppV2Args {
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Chart name
     */
    chartName: pulumi.Input<string>;
    /**
     * Chart version
     */
    chartVersion?: pulumi.Input<string>;
    /**
     * Cleanup app V2 on failed chart upgrade
     */
    cleanupOnFail?: pulumi.Input<boolean>;
    clusterId: pulumi.Input<string>;
    /**
     * Disable app V2 chart hooks
     */
    disableHooks?: pulumi.Input<boolean>;
    /**
     * Disable app V2 Open API Validation
     */
    disableOpenApiValidation?: pulumi.Input<boolean>;
    /**
     * Force app V2 chart upgrade
     */
    forceUpgrade?: pulumi.Input<boolean>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * App v2 name
     */
    name?: pulumi.Input<string>;
    /**
     * App v2 namespace
     */
    namespace: pulumi.Input<string>;
    /**
     * Deploy app within project ID
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repo name
     */
    repoName: pulumi.Input<string>;
    /**
     * System default registry providing images for app deployment.
     */
    systemDefaultRegistry?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AppV2Timeouts>;
    /**
     * App v2 custom values yaml
     */
    values?: pulumi.Input<string>;
    /**
     * Wait until app is deployed
     */
    wait?: pulumi.Input<boolean>;
}
