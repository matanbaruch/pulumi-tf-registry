// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RoleTemplate extends pulumi.CustomResource {
    /**
     * Get an existing RoleTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleTemplateState, opts?: pulumi.CustomResourceOptions): RoleTemplate {
        return new RoleTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/roleTemplate:RoleTemplate';

    /**
     * Returns true if the given object is an instance of RoleTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoleTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleTemplate.__pulumiType;
    }

    /**
     * Administrative role template
     */
    public readonly administrative!: pulumi.Output<boolean | undefined>;
    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * Builtin role template
     */
    public /*out*/ readonly builtin!: pulumi.Output<boolean>;
    /**
     * Context role template
     */
    public readonly context!: pulumi.Output<string | undefined>;
    /**
     * Default role template for new created cluster or project
     */
    public readonly defaultRole!: pulumi.Output<boolean | undefined>;
    /**
     * Role template policy description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * External role template
     */
    public readonly external!: pulumi.Output<boolean | undefined>;
    /**
     * External policy rules used for authorization
     */
    public readonly externalRules!: pulumi.Output<outputs.RoleTemplateExternalRule[] | undefined>;
    /**
     * Hidden role template
     */
    public readonly hidden!: pulumi.Output<boolean | undefined>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Locked role template
     */
    public readonly locked!: pulumi.Output<boolean | undefined>;
    /**
     * Role template policy name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Inherit role template IDs
     */
    public readonly roleTemplateIds!: pulumi.Output<string[]>;
    /**
     * Role template policy rules
     */
    public readonly rules!: pulumi.Output<outputs.RoleTemplateRule[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.RoleTemplateTimeouts | undefined>;

    /**
     * Create a RoleTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RoleTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleTemplateArgs | RoleTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleTemplateState | undefined;
            resourceInputs["administrative"] = state ? state.administrative : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["builtin"] = state ? state.builtin : undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["defaultRole"] = state ? state.defaultRole : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["external"] = state ? state.external : undefined;
            resourceInputs["externalRules"] = state ? state.externalRules : undefined;
            resourceInputs["hidden"] = state ? state.hidden : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleTemplateIds"] = state ? state.roleTemplateIds : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as RoleTemplateArgs | undefined;
            resourceInputs["administrative"] = args ? args.administrative : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["defaultRole"] = args ? args.defaultRole : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["external"] = args ? args.external : undefined;
            resourceInputs["externalRules"] = args ? args.externalRules : undefined;
            resourceInputs["hidden"] = args ? args.hidden : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleTemplateIds"] = args ? args.roleTemplateIds : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["builtin"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoleTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RoleTemplate resources.
 */
export interface RoleTemplateState {
    /**
     * Administrative role template
     */
    administrative?: pulumi.Input<boolean>;
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Builtin role template
     */
    builtin?: pulumi.Input<boolean>;
    /**
     * Context role template
     */
    context?: pulumi.Input<string>;
    /**
     * Default role template for new created cluster or project
     */
    defaultRole?: pulumi.Input<boolean>;
    /**
     * Role template policy description
     */
    description?: pulumi.Input<string>;
    /**
     * External role template
     */
    external?: pulumi.Input<boolean>;
    /**
     * External policy rules used for authorization
     */
    externalRules?: pulumi.Input<pulumi.Input<inputs.RoleTemplateExternalRule>[]>;
    /**
     * Hidden role template
     */
    hidden?: pulumi.Input<boolean>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Locked role template
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Role template policy name
     */
    name?: pulumi.Input<string>;
    /**
     * Inherit role template IDs
     */
    roleTemplateIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Role template policy rules
     */
    rules?: pulumi.Input<pulumi.Input<inputs.RoleTemplateRule>[]>;
    timeouts?: pulumi.Input<inputs.RoleTemplateTimeouts>;
}

/**
 * The set of arguments for constructing a RoleTemplate resource.
 */
export interface RoleTemplateArgs {
    /**
     * Administrative role template
     */
    administrative?: pulumi.Input<boolean>;
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Context role template
     */
    context?: pulumi.Input<string>;
    /**
     * Default role template for new created cluster or project
     */
    defaultRole?: pulumi.Input<boolean>;
    /**
     * Role template policy description
     */
    description?: pulumi.Input<string>;
    /**
     * External role template
     */
    external?: pulumi.Input<boolean>;
    /**
     * External policy rules used for authorization
     */
    externalRules?: pulumi.Input<pulumi.Input<inputs.RoleTemplateExternalRule>[]>;
    /**
     * Hidden role template
     */
    hidden?: pulumi.Input<boolean>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Locked role template
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Role template policy name
     */
    name?: pulumi.Input<string>;
    /**
     * Inherit role template IDs
     */
    roleTemplateIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Role template policy rules
     */
    rules?: pulumi.Input<pulumi.Input<inputs.RoleTemplateRule>[]>;
    timeouts?: pulumi.Input<inputs.RoleTemplateTimeouts>;
}
