// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Notifier extends pulumi.CustomResource {
    /**
     * Get an existing Notifier resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotifierState, opts?: pulumi.CustomResourceOptions): Notifier {
        return new Notifier(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/notifier:Notifier';

    /**
     * Returns true if the given object is an instance of Notifier.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Notifier {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Notifier.__pulumiType;
    }

    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * Notifier cluster ID
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Notifier description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dingtalkConfig!: pulumi.Output<outputs.NotifierDingtalkConfig | undefined>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly msteamsConfig!: pulumi.Output<outputs.NotifierMsteamsConfig | undefined>;
    /**
     * Notifier name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly pagerdutyConfig!: pulumi.Output<outputs.NotifierPagerdutyConfig | undefined>;
    /**
     * Notifier send resolved
     */
    public readonly sendResolved!: pulumi.Output<boolean | undefined>;
    public readonly slackConfig!: pulumi.Output<outputs.NotifierSlackConfig | undefined>;
    public readonly smtpConfig!: pulumi.Output<outputs.NotifierSmtpConfig | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NotifierTimeouts | undefined>;
    public readonly webhookConfig!: pulumi.Output<outputs.NotifierWebhookConfig | undefined>;
    public readonly wechatConfig!: pulumi.Output<outputs.NotifierWechatConfig | undefined>;

    /**
     * Create a Notifier resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotifierArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotifierArgs | NotifierState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotifierState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dingtalkConfig"] = state ? state.dingtalkConfig : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["msteamsConfig"] = state ? state.msteamsConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pagerdutyConfig"] = state ? state.pagerdutyConfig : undefined;
            resourceInputs["sendResolved"] = state ? state.sendResolved : undefined;
            resourceInputs["slackConfig"] = state ? state.slackConfig : undefined;
            resourceInputs["smtpConfig"] = state ? state.smtpConfig : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["webhookConfig"] = state ? state.webhookConfig : undefined;
            resourceInputs["wechatConfig"] = state ? state.wechatConfig : undefined;
        } else {
            const args = argsOrState as NotifierArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dingtalkConfig"] = args ? args.dingtalkConfig : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["msteamsConfig"] = args ? args.msteamsConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pagerdutyConfig"] = args ? args.pagerdutyConfig : undefined;
            resourceInputs["sendResolved"] = args ? args.sendResolved : undefined;
            resourceInputs["slackConfig"] = args ? args.slackConfig : undefined;
            resourceInputs["smtpConfig"] = args ? args.smtpConfig : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["webhookConfig"] = args ? args.webhookConfig : undefined;
            resourceInputs["wechatConfig"] = args ? args.wechatConfig : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Notifier.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Notifier resources.
 */
export interface NotifierState {
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Notifier cluster ID
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Notifier description
     */
    description?: pulumi.Input<string>;
    dingtalkConfig?: pulumi.Input<inputs.NotifierDingtalkConfig>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    msteamsConfig?: pulumi.Input<inputs.NotifierMsteamsConfig>;
    /**
     * Notifier name
     */
    name?: pulumi.Input<string>;
    pagerdutyConfig?: pulumi.Input<inputs.NotifierPagerdutyConfig>;
    /**
     * Notifier send resolved
     */
    sendResolved?: pulumi.Input<boolean>;
    slackConfig?: pulumi.Input<inputs.NotifierSlackConfig>;
    smtpConfig?: pulumi.Input<inputs.NotifierSmtpConfig>;
    timeouts?: pulumi.Input<inputs.NotifierTimeouts>;
    webhookConfig?: pulumi.Input<inputs.NotifierWebhookConfig>;
    wechatConfig?: pulumi.Input<inputs.NotifierWechatConfig>;
}

/**
 * The set of arguments for constructing a Notifier resource.
 */
export interface NotifierArgs {
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Notifier cluster ID
     */
    clusterId: pulumi.Input<string>;
    /**
     * Notifier description
     */
    description?: pulumi.Input<string>;
    dingtalkConfig?: pulumi.Input<inputs.NotifierDingtalkConfig>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    msteamsConfig?: pulumi.Input<inputs.NotifierMsteamsConfig>;
    /**
     * Notifier name
     */
    name?: pulumi.Input<string>;
    pagerdutyConfig?: pulumi.Input<inputs.NotifierPagerdutyConfig>;
    /**
     * Notifier send resolved
     */
    sendResolved?: pulumi.Input<boolean>;
    slackConfig?: pulumi.Input<inputs.NotifierSlackConfig>;
    smtpConfig?: pulumi.Input<inputs.NotifierSmtpConfig>;
    timeouts?: pulumi.Input<inputs.NotifierTimeouts>;
    webhookConfig?: pulumi.Input<inputs.NotifierWebhookConfig>;
    wechatConfig?: pulumi.Input<inputs.NotifierWechatConfig>;
}
