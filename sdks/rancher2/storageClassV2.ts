// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageClassV2 extends pulumi.CustomResource {
    /**
     * Get an existing StorageClassV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageClassV2State, opts?: pulumi.CustomResourceOptions): StorageClassV2 {
        return new StorageClassV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/storageClassV2:StorageClassV2';

    /**
     * Returns true if the given object is an instance of StorageClassV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageClassV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageClassV2.__pulumiType;
    }

    /**
     * StorageClass allow_volume_expansion
     */
    public readonly allowVolumeExpansion!: pulumi.Output<boolean>;
    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * K8s cluster ID
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * StorageClass provisioner
     */
    public readonly k8sProvisioner!: pulumi.Output<string>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * StorageClass mount options
     */
    public readonly mountOptions!: pulumi.Output<string[]>;
    /**
     * StorageClass name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * StorageClass provisioner paramaters
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * StorageClass provisioner reclaim policy
     */
    public readonly reclaimPolicy!: pulumi.Output<string | undefined>;
    public /*out*/ readonly resourceVersion!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StorageClassV2Timeouts | undefined>;
    /**
     * StorageClass provisioner volume binding mode
     */
    public readonly volumeBindingMode!: pulumi.Output<string | undefined>;

    /**
     * Create a StorageClassV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageClassV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageClassV2Args | StorageClassV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageClassV2State | undefined;
            resourceInputs["allowVolumeExpansion"] = state ? state.allowVolumeExpansion : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["k8sProvisioner"] = state ? state.k8sProvisioner : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["mountOptions"] = state ? state.mountOptions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["reclaimPolicy"] = state ? state.reclaimPolicy : undefined;
            resourceInputs["resourceVersion"] = state ? state.resourceVersion : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeBindingMode"] = state ? state.volumeBindingMode : undefined;
        } else {
            const args = argsOrState as StorageClassV2Args | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.k8sProvisioner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'k8sProvisioner'");
            }
            resourceInputs["allowVolumeExpansion"] = args ? args.allowVolumeExpansion : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["k8sProvisioner"] = args ? args.k8sProvisioner : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["mountOptions"] = args ? args.mountOptions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["reclaimPolicy"] = args ? args.reclaimPolicy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumeBindingMode"] = args ? args.volumeBindingMode : undefined;
            resourceInputs["resourceVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageClassV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageClassV2 resources.
 */
export interface StorageClassV2State {
    /**
     * StorageClass allow_volume_expansion
     */
    allowVolumeExpansion?: pulumi.Input<boolean>;
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * K8s cluster ID
     */
    clusterId?: pulumi.Input<string>;
    /**
     * StorageClass provisioner
     */
    k8sProvisioner?: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * StorageClass mount options
     */
    mountOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * StorageClass name
     */
    name?: pulumi.Input<string>;
    /**
     * StorageClass provisioner paramaters
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * StorageClass provisioner reclaim policy
     */
    reclaimPolicy?: pulumi.Input<string>;
    resourceVersion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageClassV2Timeouts>;
    /**
     * StorageClass provisioner volume binding mode
     */
    volumeBindingMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageClassV2 resource.
 */
export interface StorageClassV2Args {
    /**
     * StorageClass allow_volume_expansion
     */
    allowVolumeExpansion?: pulumi.Input<boolean>;
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * K8s cluster ID
     */
    clusterId: pulumi.Input<string>;
    /**
     * StorageClass provisioner
     */
    k8sProvisioner: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * StorageClass mount options
     */
    mountOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * StorageClass name
     */
    name?: pulumi.Input<string>;
    /**
     * StorageClass provisioner paramaters
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * StorageClass provisioner reclaim policy
     */
    reclaimPolicy?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageClassV2Timeouts>;
    /**
     * StorageClass provisioner volume binding mode
     */
    volumeBindingMode?: pulumi.Input<string>;
}
