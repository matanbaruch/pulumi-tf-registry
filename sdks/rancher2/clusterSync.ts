// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClusterSync extends pulumi.CustomResource {
    /**
     * Get an existing ClusterSync resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterSyncState, opts?: pulumi.CustomResourceOptions): ClusterSync {
        return new ClusterSync(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/clusterSync:ClusterSync';

    /**
     * Returns true if the given object is an instance of ClusterSync.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterSync {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterSync.__pulumiType;
    }

    /**
     * Cluster id to sync
     */
    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly defaultProjectId!: pulumi.Output<string>;
    public /*out*/ readonly kubeConfig!: pulumi.Output<string>;
    /**
     * Cluster node pool ids
     */
    public readonly nodePoolIds!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly nodes!: pulumi.Output<outputs.ClusterSyncNode[]>;
    /**
     * Wait until active status is confirmed a number of times (wait interval of 5s)
     */
    public readonly stateConfirm!: pulumi.Output<number | undefined>;
    public readonly synced!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly systemProjectId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ClusterSyncTimeouts | undefined>;
    /**
     * Wait until alerting is up and running
     */
    public readonly waitAlerting!: pulumi.Output<boolean | undefined>;
    /**
     * Wait until all catalogs are downloaded and active
     */
    public readonly waitCatalogs!: pulumi.Output<boolean | undefined>;
    /**
     * Wait until monitoring is up and running
     */
    public readonly waitMonitoring!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ClusterSync resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterSyncArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterSyncArgs | ClusterSyncState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterSyncState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["defaultProjectId"] = state ? state.defaultProjectId : undefined;
            resourceInputs["kubeConfig"] = state ? state.kubeConfig : undefined;
            resourceInputs["nodePoolIds"] = state ? state.nodePoolIds : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["stateConfirm"] = state ? state.stateConfirm : undefined;
            resourceInputs["synced"] = state ? state.synced : undefined;
            resourceInputs["systemProjectId"] = state ? state.systemProjectId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["waitAlerting"] = state ? state.waitAlerting : undefined;
            resourceInputs["waitCatalogs"] = state ? state.waitCatalogs : undefined;
            resourceInputs["waitMonitoring"] = state ? state.waitMonitoring : undefined;
        } else {
            const args = argsOrState as ClusterSyncArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["nodePoolIds"] = args ? args.nodePoolIds : undefined;
            resourceInputs["stateConfirm"] = args ? args.stateConfirm : undefined;
            resourceInputs["synced"] = args ? args.synced : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["waitAlerting"] = args ? args.waitAlerting : undefined;
            resourceInputs["waitCatalogs"] = args ? args.waitCatalogs : undefined;
            resourceInputs["waitMonitoring"] = args ? args.waitMonitoring : undefined;
            resourceInputs["defaultProjectId"] = undefined /*out*/;
            resourceInputs["kubeConfig"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["systemProjectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubeConfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ClusterSync.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClusterSync resources.
 */
export interface ClusterSyncState {
    /**
     * Cluster id to sync
     */
    clusterId?: pulumi.Input<string>;
    defaultProjectId?: pulumi.Input<string>;
    kubeConfig?: pulumi.Input<string>;
    /**
     * Cluster node pool ids
     */
    nodePoolIds?: pulumi.Input<pulumi.Input<string>[]>;
    nodes?: pulumi.Input<pulumi.Input<inputs.ClusterSyncNode>[]>;
    /**
     * Wait until active status is confirmed a number of times (wait interval of 5s)
     */
    stateConfirm?: pulumi.Input<number>;
    synced?: pulumi.Input<boolean>;
    systemProjectId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClusterSyncTimeouts>;
    /**
     * Wait until alerting is up and running
     */
    waitAlerting?: pulumi.Input<boolean>;
    /**
     * Wait until all catalogs are downloaded and active
     */
    waitCatalogs?: pulumi.Input<boolean>;
    /**
     * Wait until monitoring is up and running
     */
    waitMonitoring?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ClusterSync resource.
 */
export interface ClusterSyncArgs {
    /**
     * Cluster id to sync
     */
    clusterId: pulumi.Input<string>;
    /**
     * Cluster node pool ids
     */
    nodePoolIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Wait until active status is confirmed a number of times (wait interval of 5s)
     */
    stateConfirm?: pulumi.Input<number>;
    synced?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.ClusterSyncTimeouts>;
    /**
     * Wait until alerting is up and running
     */
    waitAlerting?: pulumi.Input<boolean>;
    /**
     * Wait until all catalogs are downloaded and active
     */
    waitCatalogs?: pulumi.Input<boolean>;
    /**
     * Wait until monitoring is up and running
     */
    waitMonitoring?: pulumi.Input<boolean>;
}
