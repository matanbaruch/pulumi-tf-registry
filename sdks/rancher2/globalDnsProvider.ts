// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GlobalDnsProvider extends pulumi.CustomResource {
    /**
     * Get an existing GlobalDnsProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalDnsProviderState, opts?: pulumi.CustomResourceOptions): GlobalDnsProvider {
        return new GlobalDnsProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/globalDnsProvider:GlobalDnsProvider';

    /**
     * Returns true if the given object is an instance of GlobalDnsProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalDnsProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalDnsProvider.__pulumiType;
    }

    public readonly alidnsConfig!: pulumi.Output<outputs.GlobalDnsProviderAlidnsConfig | undefined>;
    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    public readonly cloudflareConfig!: pulumi.Output<outputs.GlobalDnsProviderCloudflareConfig | undefined>;
    public /*out*/ readonly dnsProvider!: pulumi.Output<string>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly name!: pulumi.Output<string>;
    public readonly rootDomain!: pulumi.Output<string>;
    public readonly route53Config!: pulumi.Output<outputs.GlobalDnsProviderRoute53Config | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.GlobalDnsProviderTimeouts | undefined>;

    /**
     * Create a GlobalDnsProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalDnsProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalDnsProviderArgs | GlobalDnsProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalDnsProviderState | undefined;
            resourceInputs["alidnsConfig"] = state ? state.alidnsConfig : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["cloudflareConfig"] = state ? state.cloudflareConfig : undefined;
            resourceInputs["dnsProvider"] = state ? state.dnsProvider : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rootDomain"] = state ? state.rootDomain : undefined;
            resourceInputs["route53Config"] = state ? state.route53Config : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GlobalDnsProviderArgs | undefined;
            if ((!args || args.rootDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootDomain'");
            }
            resourceInputs["alidnsConfig"] = args ? args.alidnsConfig : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["cloudflareConfig"] = args ? args.cloudflareConfig : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rootDomain"] = args ? args.rootDomain : undefined;
            resourceInputs["route53Config"] = args ? args.route53Config : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["dnsProvider"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalDnsProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlobalDnsProvider resources.
 */
export interface GlobalDnsProviderState {
    alidnsConfig?: pulumi.Input<inputs.GlobalDnsProviderAlidnsConfig>;
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    cloudflareConfig?: pulumi.Input<inputs.GlobalDnsProviderCloudflareConfig>;
    dnsProvider?: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    rootDomain?: pulumi.Input<string>;
    route53Config?: pulumi.Input<inputs.GlobalDnsProviderRoute53Config>;
    timeouts?: pulumi.Input<inputs.GlobalDnsProviderTimeouts>;
}

/**
 * The set of arguments for constructing a GlobalDnsProvider resource.
 */
export interface GlobalDnsProviderArgs {
    alidnsConfig?: pulumi.Input<inputs.GlobalDnsProviderAlidnsConfig>;
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    cloudflareConfig?: pulumi.Input<inputs.GlobalDnsProviderCloudflareConfig>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    rootDomain: pulumi.Input<string>;
    route53Config?: pulumi.Input<inputs.GlobalDnsProviderRoute53Config>;
    timeouts?: pulumi.Input<inputs.GlobalDnsProviderTimeouts>;
}
