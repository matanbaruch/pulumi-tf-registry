// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rancher2:index/getCluster:getCluster", {
        "defaultPodSecurityAdmissionConfigurationTemplateName": args.defaultPodSecurityAdmissionConfigurationTemplateName,
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    defaultPodSecurityAdmissionConfigurationTemplateName?: string;
    id?: string;
    name: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    readonly agentEnvVars: string[];
    readonly aksConfigV2s: outputs.GetClusterAksConfigV2[];
    readonly aksConfigs: outputs.GetClusterAksConfig[];
    readonly annotations: {[key: string]: string};
    readonly caCert: string;
    readonly clusterAuthEndpoints: outputs.GetClusterClusterAuthEndpoint[];
    readonly clusterMonitoringInputs: outputs.GetClusterClusterMonitoringInput[];
    readonly clusterRegistrationTokens: outputs.GetClusterClusterRegistrationToken[];
    readonly clusterTemplateAnswers: outputs.GetClusterClusterTemplateAnswer[];
    readonly clusterTemplateId: string;
    readonly clusterTemplateQuestions: outputs.GetClusterClusterTemplateQuestion[];
    readonly clusterTemplateRevisionId: string;
    readonly defaultPodSecurityAdmissionConfigurationTemplateName: string;
    readonly defaultPodSecurityPolicyTemplateId: string;
    readonly defaultProjectId: string;
    readonly description: string;
    readonly driver: string;
    readonly eksConfigV2s: outputs.GetClusterEksConfigV2[];
    readonly eksConfigs: outputs.GetClusterEksConfig[];
    readonly enableClusterAlerting: boolean;
    readonly enableClusterMonitoring: boolean;
    readonly enableNetworkPolicy: boolean;
    readonly fleetWorkspaceName: string;
    readonly gkeConfigV2s: outputs.GetClusterGkeConfigV2[];
    readonly gkeConfigs: outputs.GetClusterGkeConfig[];
    readonly id: string;
    readonly k3sConfigs: outputs.GetClusterK3sConfig[];
    readonly kubeConfig: string;
    readonly labels: {[key: string]: string};
    readonly name: string;
    readonly okeConfigs: outputs.GetClusterOkeConfig[];
    readonly rke2Configs: outputs.GetClusterRke2Config[];
    readonly rkeConfigs: outputs.GetClusterRkeConfig[];
    readonly systemProjectId: string;
}
export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    return pulumi.output(args).apply((a: any) => getCluster(a, opts))
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    defaultPodSecurityAdmissionConfigurationTemplateName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
