// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getClusterTemplate(args: GetClusterTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterTemplateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rancher2:index/getClusterTemplate:getClusterTemplate", {
        "annotations": args.annotations,
        "description": args.description,
        "id": args.id,
        "labels": args.labels,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getClusterTemplate.
 */
export interface GetClusterTemplateArgs {
    annotations?: {[key: string]: string};
    description?: string;
    id?: string;
    labels?: {[key: string]: string};
    name: string;
}

/**
 * A collection of values returned by getClusterTemplate.
 */
export interface GetClusterTemplateResult {
    readonly annotations: {[key: string]: string};
    readonly defaultRevisionId: string;
    readonly description: string;
    readonly id: string;
    readonly labels: {[key: string]: string};
    readonly members: outputs.GetClusterTemplateMember[];
    readonly name: string;
    readonly templateRevisions: outputs.GetClusterTemplateTemplateRevision[];
}
export function getClusterTemplateOutput(args: GetClusterTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterTemplateResult> {
    return pulumi.output(args).apply((a: any) => getClusterTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getClusterTemplate.
 */
export interface GetClusterTemplateOutputArgs {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
}
