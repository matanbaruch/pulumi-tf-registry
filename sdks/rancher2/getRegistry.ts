// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRegistry(args: GetRegistryArgs, opts?: pulumi.InvokeOptions): Promise<GetRegistryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rancher2:index/getRegistry:getRegistry", {
        "id": args.id,
        "name": args.name,
        "namespaceId": args.namespaceId,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRegistry.
 */
export interface GetRegistryArgs {
    id?: string;
    name: string;
    namespaceId?: string;
    projectId: string;
}

/**
 * A collection of values returned by getRegistry.
 */
export interface GetRegistryResult {
    readonly annotations: {[key: string]: string};
    readonly description: string;
    readonly id: string;
    readonly labels: {[key: string]: string};
    readonly name: string;
    readonly namespaceId?: string;
    readonly projectId: string;
    readonly registries: outputs.GetRegistryRegistry[];
}
export function getRegistryOutput(args: GetRegistryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRegistryResult> {
    return pulumi.output(args).apply((a: any) => getRegistry(a, opts))
}

/**
 * A collection of arguments for invoking getRegistry.
 */
export interface GetRegistryOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    namespaceId?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}
