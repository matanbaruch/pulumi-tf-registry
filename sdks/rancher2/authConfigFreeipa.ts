// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AuthConfigFreeipa extends pulumi.CustomResource {
    /**
     * Get an existing AuthConfigFreeipa resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthConfigFreeipaState, opts?: pulumi.CustomResourceOptions): AuthConfigFreeipa {
        return new AuthConfigFreeipa(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/authConfigFreeipa:AuthConfigFreeipa';

    /**
     * Returns true if the given object is an instance of AuthConfigFreeipa.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthConfigFreeipa {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthConfigFreeipa.__pulumiType;
    }

    public readonly accessMode!: pulumi.Output<string | undefined>;
    public readonly allowedPrincipalIds!: pulumi.Output<string[] | undefined>;
    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    public readonly certificate!: pulumi.Output<string | undefined>;
    public readonly connectionTimeout!: pulumi.Output<number | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly groupDnAttribute!: pulumi.Output<string>;
    public readonly groupMemberMappingAttribute!: pulumi.Output<string>;
    public readonly groupMemberUserAttribute!: pulumi.Output<string>;
    public readonly groupNameAttribute!: pulumi.Output<string>;
    public readonly groupObjectClass!: pulumi.Output<string>;
    public readonly groupSearchAttribute!: pulumi.Output<string>;
    public readonly groupSearchBase!: pulumi.Output<string>;
    public readonly groupSearchFilter!: pulumi.Output<string | undefined>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly nestedGroupMembershipEnabled!: pulumi.Output<boolean>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly servers!: pulumi.Output<string[]>;
    public readonly serviceAccountDistinguishedName!: pulumi.Output<string>;
    public readonly serviceAccountPassword!: pulumi.Output<string>;
    public readonly startTls!: pulumi.Output<boolean>;
    public readonly testPassword!: pulumi.Output<string>;
    public readonly testUsername!: pulumi.Output<string>;
    public readonly tls!: pulumi.Output<boolean>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly userDisabledBitMask!: pulumi.Output<number>;
    public readonly userEnabledAttribute!: pulumi.Output<string>;
    public readonly userLoginAttribute!: pulumi.Output<string>;
    public readonly userMemberAttribute!: pulumi.Output<string>;
    public readonly userNameAttribute!: pulumi.Output<string>;
    public readonly userObjectClass!: pulumi.Output<string>;
    public readonly userSearchAttribute!: pulumi.Output<string>;
    public readonly userSearchBase!: pulumi.Output<string>;
    public readonly userSearchFilter!: pulumi.Output<string | undefined>;

    /**
     * Create a AuthConfigFreeipa resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthConfigFreeipaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthConfigFreeipaArgs | AuthConfigFreeipaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthConfigFreeipaState | undefined;
            resourceInputs["accessMode"] = state ? state.accessMode : undefined;
            resourceInputs["allowedPrincipalIds"] = state ? state.allowedPrincipalIds : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["connectionTimeout"] = state ? state.connectionTimeout : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groupDnAttribute"] = state ? state.groupDnAttribute : undefined;
            resourceInputs["groupMemberMappingAttribute"] = state ? state.groupMemberMappingAttribute : undefined;
            resourceInputs["groupMemberUserAttribute"] = state ? state.groupMemberUserAttribute : undefined;
            resourceInputs["groupNameAttribute"] = state ? state.groupNameAttribute : undefined;
            resourceInputs["groupObjectClass"] = state ? state.groupObjectClass : undefined;
            resourceInputs["groupSearchAttribute"] = state ? state.groupSearchAttribute : undefined;
            resourceInputs["groupSearchBase"] = state ? state.groupSearchBase : undefined;
            resourceInputs["groupSearchFilter"] = state ? state.groupSearchFilter : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nestedGroupMembershipEnabled"] = state ? state.nestedGroupMembershipEnabled : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["serviceAccountDistinguishedName"] = state ? state.serviceAccountDistinguishedName : undefined;
            resourceInputs["serviceAccountPassword"] = state ? state.serviceAccountPassword : undefined;
            resourceInputs["startTls"] = state ? state.startTls : undefined;
            resourceInputs["testPassword"] = state ? state.testPassword : undefined;
            resourceInputs["testUsername"] = state ? state.testUsername : undefined;
            resourceInputs["tls"] = state ? state.tls : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userDisabledBitMask"] = state ? state.userDisabledBitMask : undefined;
            resourceInputs["userEnabledAttribute"] = state ? state.userEnabledAttribute : undefined;
            resourceInputs["userLoginAttribute"] = state ? state.userLoginAttribute : undefined;
            resourceInputs["userMemberAttribute"] = state ? state.userMemberAttribute : undefined;
            resourceInputs["userNameAttribute"] = state ? state.userNameAttribute : undefined;
            resourceInputs["userObjectClass"] = state ? state.userObjectClass : undefined;
            resourceInputs["userSearchAttribute"] = state ? state.userSearchAttribute : undefined;
            resourceInputs["userSearchBase"] = state ? state.userSearchBase : undefined;
            resourceInputs["userSearchFilter"] = state ? state.userSearchFilter : undefined;
        } else {
            const args = argsOrState as AuthConfigFreeipaArgs | undefined;
            if ((!args || args.servers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            if ((!args || args.serviceAccountDistinguishedName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountDistinguishedName'");
            }
            if ((!args || args.serviceAccountPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountPassword'");
            }
            if ((!args || args.testPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'testPassword'");
            }
            if ((!args || args.testUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'testUsername'");
            }
            if ((!args || args.userSearchBase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userSearchBase'");
            }
            resourceInputs["accessMode"] = args ? args.accessMode : undefined;
            resourceInputs["allowedPrincipalIds"] = args ? args.allowedPrincipalIds : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["certificate"] = args?.certificate ? pulumi.secret(args.certificate) : undefined;
            resourceInputs["connectionTimeout"] = args ? args.connectionTimeout : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["groupDnAttribute"] = args ? args.groupDnAttribute : undefined;
            resourceInputs["groupMemberMappingAttribute"] = args ? args.groupMemberMappingAttribute : undefined;
            resourceInputs["groupMemberUserAttribute"] = args ? args.groupMemberUserAttribute : undefined;
            resourceInputs["groupNameAttribute"] = args ? args.groupNameAttribute : undefined;
            resourceInputs["groupObjectClass"] = args ? args.groupObjectClass : undefined;
            resourceInputs["groupSearchAttribute"] = args ? args.groupSearchAttribute : undefined;
            resourceInputs["groupSearchBase"] = args ? args.groupSearchBase : undefined;
            resourceInputs["groupSearchFilter"] = args ? args.groupSearchFilter : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["nestedGroupMembershipEnabled"] = args ? args.nestedGroupMembershipEnabled : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["serviceAccountDistinguishedName"] = args?.serviceAccountDistinguishedName ? pulumi.secret(args.serviceAccountDistinguishedName) : undefined;
            resourceInputs["serviceAccountPassword"] = args?.serviceAccountPassword ? pulumi.secret(args.serviceAccountPassword) : undefined;
            resourceInputs["startTls"] = args ? args.startTls : undefined;
            resourceInputs["testPassword"] = args?.testPassword ? pulumi.secret(args.testPassword) : undefined;
            resourceInputs["testUsername"] = args ? args.testUsername : undefined;
            resourceInputs["tls"] = args ? args.tls : undefined;
            resourceInputs["userDisabledBitMask"] = args ? args.userDisabledBitMask : undefined;
            resourceInputs["userEnabledAttribute"] = args ? args.userEnabledAttribute : undefined;
            resourceInputs["userLoginAttribute"] = args ? args.userLoginAttribute : undefined;
            resourceInputs["userMemberAttribute"] = args ? args.userMemberAttribute : undefined;
            resourceInputs["userNameAttribute"] = args ? args.userNameAttribute : undefined;
            resourceInputs["userObjectClass"] = args ? args.userObjectClass : undefined;
            resourceInputs["userSearchAttribute"] = args ? args.userSearchAttribute : undefined;
            resourceInputs["userSearchBase"] = args ? args.userSearchBase : undefined;
            resourceInputs["userSearchFilter"] = args ? args.userSearchFilter : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["certificate", "serviceAccountDistinguishedName", "serviceAccountPassword", "testPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AuthConfigFreeipa.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuthConfigFreeipa resources.
 */
export interface AuthConfigFreeipaState {
    accessMode?: pulumi.Input<string>;
    allowedPrincipalIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    certificate?: pulumi.Input<string>;
    connectionTimeout?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    groupDnAttribute?: pulumi.Input<string>;
    groupMemberMappingAttribute?: pulumi.Input<string>;
    groupMemberUserAttribute?: pulumi.Input<string>;
    groupNameAttribute?: pulumi.Input<string>;
    groupObjectClass?: pulumi.Input<string>;
    groupSearchAttribute?: pulumi.Input<string>;
    groupSearchBase?: pulumi.Input<string>;
    groupSearchFilter?: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    nestedGroupMembershipEnabled?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    serviceAccountDistinguishedName?: pulumi.Input<string>;
    serviceAccountPassword?: pulumi.Input<string>;
    startTls?: pulumi.Input<boolean>;
    testPassword?: pulumi.Input<string>;
    testUsername?: pulumi.Input<string>;
    tls?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
    userDisabledBitMask?: pulumi.Input<number>;
    userEnabledAttribute?: pulumi.Input<string>;
    userLoginAttribute?: pulumi.Input<string>;
    userMemberAttribute?: pulumi.Input<string>;
    userNameAttribute?: pulumi.Input<string>;
    userObjectClass?: pulumi.Input<string>;
    userSearchAttribute?: pulumi.Input<string>;
    userSearchBase?: pulumi.Input<string>;
    userSearchFilter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthConfigFreeipa resource.
 */
export interface AuthConfigFreeipaArgs {
    accessMode?: pulumi.Input<string>;
    allowedPrincipalIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Annotations of the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    certificate?: pulumi.Input<string>;
    connectionTimeout?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    groupDnAttribute?: pulumi.Input<string>;
    groupMemberMappingAttribute?: pulumi.Input<string>;
    groupMemberUserAttribute?: pulumi.Input<string>;
    groupNameAttribute?: pulumi.Input<string>;
    groupObjectClass?: pulumi.Input<string>;
    groupSearchAttribute?: pulumi.Input<string>;
    groupSearchBase?: pulumi.Input<string>;
    groupSearchFilter?: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nestedGroupMembershipEnabled?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
    servers: pulumi.Input<pulumi.Input<string>[]>;
    serviceAccountDistinguishedName: pulumi.Input<string>;
    serviceAccountPassword: pulumi.Input<string>;
    startTls?: pulumi.Input<boolean>;
    testPassword: pulumi.Input<string>;
    testUsername: pulumi.Input<string>;
    tls?: pulumi.Input<boolean>;
    userDisabledBitMask?: pulumi.Input<number>;
    userEnabledAttribute?: pulumi.Input<string>;
    userLoginAttribute?: pulumi.Input<string>;
    userMemberAttribute?: pulumi.Input<string>;
    userNameAttribute?: pulumi.Input<string>;
    userObjectClass?: pulumi.Input<string>;
    userSearchAttribute?: pulumi.Input<string>;
    userSearchBase: pulumi.Input<string>;
    userSearchFilter?: pulumi.Input<string>;
}
