// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetTypeArgs, GetTypeResult, GetTypeOutputArgs } from "./getType";
export const getType: typeof import("./getType").getType = null as any;
export const getTypeOutput: typeof import("./getType").getTypeOutput = null as any;
utilities.lazyLoad(exports, ["getType","getTypeOutput"], () => require("./getType"));

export { ObjectArgs, ObjectState } from "./object";
export type Object = import("./object").Object;
export const Object: typeof import("./object").Object = null as any;
utilities.lazyLoad(exports, ["Object"], () => require("./object"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "observability:index/object:Object":
                return new Object(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("observability", "index/object", _module)
pulumi.runtime.registerResourcePackage("observability", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:observability") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
