// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the observability package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'observability';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * Authentication type selected for observability API requests. Possible values(oauth, headless, service-principal)
     */
    public readonly authMethod!: pulumi.Output<string>;
    /**
     * Password to authenticate using headless
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Path to secrets file to authenticate using service-principal
     */
    public readonly secretsFile!: pulumi.Output<string | undefined>;
    /**
     * Tenant ID used to make requests to API
     */
    public readonly tenant!: pulumi.Output<string>;
    /**
     * URL used when authentication eg. <https://mytenant.com>
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * Username to authenticate using headless
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.authMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authMethod'");
            }
            if ((!args || args.tenant === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenant'");
            }
            resourceInputs["authMethod"] = args ? args.authMethod : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["secretsFile"] = args ? args.secretsFile : undefined;
            resourceInputs["tenant"] = args ? args.tenant : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Authentication type selected for observability API requests. Possible values(oauth, headless, service-principal)
     */
    authMethod: pulumi.Input<string>;
    /**
     * Password to authenticate using headless
     */
    password?: pulumi.Input<string>;
    /**
     * Path to secrets file to authenticate using service-principal
     */
    secretsFile?: pulumi.Input<string>;
    /**
     * Tenant ID used to make requests to API
     */
    tenant: pulumi.Input<string>;
    /**
     * URL used when authentication eg. <https://mytenant.com>
     */
    url?: pulumi.Input<string>;
    /**
     * Username to authenticate using headless
     */
    username?: pulumi.Input<string>;
}
