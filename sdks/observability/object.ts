// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Object extends pulumi.CustomResource {
    /**
     * Get an existing Object resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectState, opts?: pulumi.CustomResourceOptions): Object {
        return new Object(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'observability:index/object:Object';

    /**
     * Returns true if the given object is an instance of Object.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Object {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Object.__pulumiType;
    }

    /**
     * JSON schema of the returned object
     */
    public readonly data!: pulumi.Output<string | undefined>;
    /**
     * ID used when doing import operation on an object
     */
    public readonly importId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the layer ID where the object resides
     */
    public readonly layerId!: pulumi.Output<string>;
    /**
     * Specifies the layer type where the object resides
     */
    public readonly layerType!: pulumi.Output<string>;
    /**
     * Spepcified the object ID for the particular object to get
     */
    public readonly objectId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the fully qualified type name used to get the type
     */
    public readonly typeName!: pulumi.Output<string>;

    /**
     * Create a Object resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectArgs | ObjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectState | undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["importId"] = state ? state.importId : undefined;
            resourceInputs["layerId"] = state ? state.layerId : undefined;
            resourceInputs["layerType"] = state ? state.layerType : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["typeName"] = state ? state.typeName : undefined;
        } else {
            const args = argsOrState as ObjectArgs | undefined;
            if ((!args || args.layerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layerId'");
            }
            if ((!args || args.layerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layerType'");
            }
            if ((!args || args.typeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'typeName'");
            }
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["importId"] = args ? args.importId : undefined;
            resourceInputs["layerId"] = args ? args.layerId : undefined;
            resourceInputs["layerType"] = args ? args.layerType : undefined;
            resourceInputs["objectId"] = args ? args.objectId : undefined;
            resourceInputs["typeName"] = args ? args.typeName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Object.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Object resources.
 */
export interface ObjectState {
    /**
     * JSON schema of the returned object
     */
    data?: pulumi.Input<string>;
    /**
     * ID used when doing import operation on an object
     */
    importId?: pulumi.Input<string>;
    /**
     * Specifies the layer ID where the object resides
     */
    layerId?: pulumi.Input<string>;
    /**
     * Specifies the layer type where the object resides
     */
    layerType?: pulumi.Input<string>;
    /**
     * Spepcified the object ID for the particular object to get
     */
    objectId?: pulumi.Input<string>;
    /**
     * Specifies the fully qualified type name used to get the type
     */
    typeName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Object resource.
 */
export interface ObjectArgs {
    /**
     * JSON schema of the returned object
     */
    data?: pulumi.Input<string>;
    /**
     * ID used when doing import operation on an object
     */
    importId?: pulumi.Input<string>;
    /**
     * Specifies the layer ID where the object resides
     */
    layerId: pulumi.Input<string>;
    /**
     * Specifies the layer type where the object resides
     */
    layerType: pulumi.Input<string>;
    /**
     * Spepcified the object ID for the particular object to get
     */
    objectId?: pulumi.Input<string>;
    /**
     * Specifies the fully qualified type name used to get the type
     */
    typeName: pulumi.Input<string>;
}
