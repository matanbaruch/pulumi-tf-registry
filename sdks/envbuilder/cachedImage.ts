// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CachedImage extends pulumi.CustomResource {
    /**
     * Get an existing CachedImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CachedImageState, opts?: pulumi.CustomResourceOptions): CachedImage {
        return new CachedImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'envbuilder:index/cachedImage:CachedImage';

    /**
     * Returns true if the given object is an instance of CachedImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CachedImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CachedImage.__pulumiType;
    }

    /**
     * (Envbuilder option) The path to a directory where the base image can be found. This should be a read-only directory
     * solely mounted for the purpose of caching the base image.
     */
    public readonly baseImageCacheDir!: pulumi.Output<string | undefined>;
    /**
     * (Envbuilder option) Can be specified when a DockerfilePath is specified outside the base WorkspaceFolder. This path MUST
     * be relative to the WorkspaceFolder path into which the repo is cloned.
     */
    public readonly buildContextPath!: pulumi.Output<string | undefined>;
    /**
     * The envbuilder image to use if the cached version is not found.
     */
    public readonly builderImage!: pulumi.Output<string>;
    /**
     * (Envbuilder option) The name of the container registry to fetch the cache image from.
     */
    public readonly cacheRepo!: pulumi.Output<string>;
    /**
     * (Envbuilder option) The number of days to use cached layers before expiring them. Defaults to 7 days.
     */
    public readonly cacheTtlDays!: pulumi.Output<number | undefined>;
    /**
     * (Envbuilder option) The path to the folder containing the devcontainer.json file that will be used to build the
     * workspace and can either be an absolute path or a path relative to the workspace folder. If not provided, defaults to
     * `.devcontainer`.
     */
    public readonly devcontainerDir!: pulumi.Output<string | undefined>;
    /**
     * (Envbuilder option) The path to a devcontainer.json file that is either an absolute path or a path relative to
     * DevcontainerDir. This can be used in cases where one wants to substitute an edited devcontainer.json file for the one
     * that exists in the repo.
     */
    public readonly devcontainerJsonPath!: pulumi.Output<string | undefined>;
    /**
     * (Envbuilder option) The base64 encoded Docker config file that will be used to pull images from private container
     * registries.
     */
    public readonly dockerConfigBase64!: pulumi.Output<string | undefined>;
    /**
     * (Envbuilder option) The relative path to the Dockerfile that will be used to build the workspace. This is an alternative
     * to using a devcontainer that some might find simpler.
     */
    public readonly dockerfilePath!: pulumi.Output<string | undefined>;
    /**
     * Computed envbuilder configuration to be set for the container in the form of a key-value map. May contain secrets.
     */
    public /*out*/ readonly envMap!: pulumi.Output<{[key: string]: string}>;
    /**
     * Computed envbuilder configuration to be set for the container in the form of a list of strings of `key=value`. May
     * contain secrets.
     */
    public /*out*/ readonly envs!: pulumi.Output<string[]>;
    /**
     * Whether the cached image was exists or not for the given config.
     */
    public /*out*/ readonly exists!: pulumi.Output<boolean>;
    /**
     * (Envbuilder option) Terminates upon a build failure. This is handy when preferring the FALLBACK_IMAGE in cases where no
     * devcontainer.json or image is provided. However, it ensures that the container stops if the build process encounters an
     * error.
     */
    public readonly exitOnBuildFailure!: pulumi.Output<boolean | undefined>;
    /**
     * Extra environment variables to set for the container. This may include envbuilder options.
     */
    public readonly extraEnv!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * (Envbuilder option) Specifies an alternative image to use when neither an image is declared in the devcontainer.json
     * file nor a Dockerfile is present. If there's a build failure (from a faulty Dockerfile) or a misconfiguration, this
     * image will be the substitute. Set ExitOnBuildFailure to true to halt the container if the build faces an issue.
     */
    public readonly fallbackImage!: pulumi.Output<string | undefined>;
    /**
     * (Envbuilder option) The depth to use when cloning the Git repository.
     */
    public readonly gitCloneDepth!: pulumi.Output<number | undefined>;
    /**
     * (Envbuilder option) Clone only a single branch of the Git repository.
     */
    public readonly gitCloneSingleBranch!: pulumi.Output<boolean | undefined>;
    /**
     * (Envbuilder option) The URL for the HTTP proxy. This is optional.
     */
    public readonly gitHttpProxyUrl!: pulumi.Output<string | undefined>;
    /**
     * (Envbuilder option) The password to use for Git authentication. This is optional.
     */
    public readonly gitPassword!: pulumi.Output<string | undefined>;
    /**
     * (Envbuilder option) Path to an SSH private key to be used for Git authentication.
     */
    public readonly gitSshPrivateKeyPath!: pulumi.Output<string | undefined>;
    /**
     * (Envbuilder option) The URL of a Git repository containing a Devcontainer or Docker image to clone.
     */
    public readonly gitUrl!: pulumi.Output<string>;
    /**
     * (Envbuilder option) The username to use for Git authentication. This is optional.
     */
    public readonly gitUsername!: pulumi.Output<string | undefined>;
    /**
     * (Envbuilder option) The comma separated list of paths to ignore when building the workspace.
     */
    public readonly ignorePaths!: pulumi.Output<string[] | undefined>;
    /**
     * Outputs the cached image repo@digest if it exists, and builder image otherwise.
     */
    public /*out*/ readonly image!: pulumi.Output<string>;
    /**
     * (Envbuilder option) Bypass TLS verification when cloning and pulling from container registries.
     */
    public readonly insecure!: pulumi.Output<boolean | undefined>;
    public readonly remoteRepoBuildMode!: pulumi.Output<boolean | undefined>;
    /**
     * (Envbuilder option) The content of an SSL cert file. This is useful for self-signed certificates.
     */
    public readonly sslCertBase64!: pulumi.Output<string | undefined>;
    /**
     * (Envbuilder option) Enable verbose output.
     */
    public readonly verbose!: pulumi.Output<boolean | undefined>;
    /**
     * (Envbuilder option) path to the workspace folder that will be built. This is optional.
     */
    public readonly workspaceFolder!: pulumi.Output<string | undefined>;

    /**
     * Create a CachedImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CachedImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CachedImageArgs | CachedImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CachedImageState | undefined;
            resourceInputs["baseImageCacheDir"] = state ? state.baseImageCacheDir : undefined;
            resourceInputs["buildContextPath"] = state ? state.buildContextPath : undefined;
            resourceInputs["builderImage"] = state ? state.builderImage : undefined;
            resourceInputs["cacheRepo"] = state ? state.cacheRepo : undefined;
            resourceInputs["cacheTtlDays"] = state ? state.cacheTtlDays : undefined;
            resourceInputs["devcontainerDir"] = state ? state.devcontainerDir : undefined;
            resourceInputs["devcontainerJsonPath"] = state ? state.devcontainerJsonPath : undefined;
            resourceInputs["dockerConfigBase64"] = state ? state.dockerConfigBase64 : undefined;
            resourceInputs["dockerfilePath"] = state ? state.dockerfilePath : undefined;
            resourceInputs["envMap"] = state ? state.envMap : undefined;
            resourceInputs["envs"] = state ? state.envs : undefined;
            resourceInputs["exists"] = state ? state.exists : undefined;
            resourceInputs["exitOnBuildFailure"] = state ? state.exitOnBuildFailure : undefined;
            resourceInputs["extraEnv"] = state ? state.extraEnv : undefined;
            resourceInputs["fallbackImage"] = state ? state.fallbackImage : undefined;
            resourceInputs["gitCloneDepth"] = state ? state.gitCloneDepth : undefined;
            resourceInputs["gitCloneSingleBranch"] = state ? state.gitCloneSingleBranch : undefined;
            resourceInputs["gitHttpProxyUrl"] = state ? state.gitHttpProxyUrl : undefined;
            resourceInputs["gitPassword"] = state ? state.gitPassword : undefined;
            resourceInputs["gitSshPrivateKeyPath"] = state ? state.gitSshPrivateKeyPath : undefined;
            resourceInputs["gitUrl"] = state ? state.gitUrl : undefined;
            resourceInputs["gitUsername"] = state ? state.gitUsername : undefined;
            resourceInputs["ignorePaths"] = state ? state.ignorePaths : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["insecure"] = state ? state.insecure : undefined;
            resourceInputs["remoteRepoBuildMode"] = state ? state.remoteRepoBuildMode : undefined;
            resourceInputs["sslCertBase64"] = state ? state.sslCertBase64 : undefined;
            resourceInputs["verbose"] = state ? state.verbose : undefined;
            resourceInputs["workspaceFolder"] = state ? state.workspaceFolder : undefined;
        } else {
            const args = argsOrState as CachedImageArgs | undefined;
            if ((!args || args.builderImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'builderImage'");
            }
            if ((!args || args.cacheRepo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cacheRepo'");
            }
            if ((!args || args.gitUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gitUrl'");
            }
            resourceInputs["baseImageCacheDir"] = args ? args.baseImageCacheDir : undefined;
            resourceInputs["buildContextPath"] = args ? args.buildContextPath : undefined;
            resourceInputs["builderImage"] = args ? args.builderImage : undefined;
            resourceInputs["cacheRepo"] = args ? args.cacheRepo : undefined;
            resourceInputs["cacheTtlDays"] = args ? args.cacheTtlDays : undefined;
            resourceInputs["devcontainerDir"] = args ? args.devcontainerDir : undefined;
            resourceInputs["devcontainerJsonPath"] = args ? args.devcontainerJsonPath : undefined;
            resourceInputs["dockerConfigBase64"] = args ? args.dockerConfigBase64 : undefined;
            resourceInputs["dockerfilePath"] = args ? args.dockerfilePath : undefined;
            resourceInputs["exitOnBuildFailure"] = args ? args.exitOnBuildFailure : undefined;
            resourceInputs["extraEnv"] = args ? args.extraEnv : undefined;
            resourceInputs["fallbackImage"] = args ? args.fallbackImage : undefined;
            resourceInputs["gitCloneDepth"] = args ? args.gitCloneDepth : undefined;
            resourceInputs["gitCloneSingleBranch"] = args ? args.gitCloneSingleBranch : undefined;
            resourceInputs["gitHttpProxyUrl"] = args ? args.gitHttpProxyUrl : undefined;
            resourceInputs["gitPassword"] = args?.gitPassword ? pulumi.secret(args.gitPassword) : undefined;
            resourceInputs["gitSshPrivateKeyPath"] = args ? args.gitSshPrivateKeyPath : undefined;
            resourceInputs["gitUrl"] = args ? args.gitUrl : undefined;
            resourceInputs["gitUsername"] = args ? args.gitUsername : undefined;
            resourceInputs["ignorePaths"] = args ? args.ignorePaths : undefined;
            resourceInputs["insecure"] = args ? args.insecure : undefined;
            resourceInputs["remoteRepoBuildMode"] = args ? args.remoteRepoBuildMode : undefined;
            resourceInputs["sslCertBase64"] = args ? args.sslCertBase64 : undefined;
            resourceInputs["verbose"] = args ? args.verbose : undefined;
            resourceInputs["workspaceFolder"] = args ? args.workspaceFolder : undefined;
            resourceInputs["envMap"] = undefined /*out*/;
            resourceInputs["envs"] = undefined /*out*/;
            resourceInputs["exists"] = undefined /*out*/;
            resourceInputs["image"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["envMap", "envs", "gitPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CachedImage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CachedImage resources.
 */
export interface CachedImageState {
    /**
     * (Envbuilder option) The path to a directory where the base image can be found. This should be a read-only directory
     * solely mounted for the purpose of caching the base image.
     */
    baseImageCacheDir?: pulumi.Input<string>;
    /**
     * (Envbuilder option) Can be specified when a DockerfilePath is specified outside the base WorkspaceFolder. This path MUST
     * be relative to the WorkspaceFolder path into which the repo is cloned.
     */
    buildContextPath?: pulumi.Input<string>;
    /**
     * The envbuilder image to use if the cached version is not found.
     */
    builderImage?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The name of the container registry to fetch the cache image from.
     */
    cacheRepo?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The number of days to use cached layers before expiring them. Defaults to 7 days.
     */
    cacheTtlDays?: pulumi.Input<number>;
    /**
     * (Envbuilder option) The path to the folder containing the devcontainer.json file that will be used to build the
     * workspace and can either be an absolute path or a path relative to the workspace folder. If not provided, defaults to
     * `.devcontainer`.
     */
    devcontainerDir?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The path to a devcontainer.json file that is either an absolute path or a path relative to
     * DevcontainerDir. This can be used in cases where one wants to substitute an edited devcontainer.json file for the one
     * that exists in the repo.
     */
    devcontainerJsonPath?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The base64 encoded Docker config file that will be used to pull images from private container
     * registries.
     */
    dockerConfigBase64?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The relative path to the Dockerfile that will be used to build the workspace. This is an alternative
     * to using a devcontainer that some might find simpler.
     */
    dockerfilePath?: pulumi.Input<string>;
    /**
     * Computed envbuilder configuration to be set for the container in the form of a key-value map. May contain secrets.
     */
    envMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Computed envbuilder configuration to be set for the container in the form of a list of strings of `key=value`. May
     * contain secrets.
     */
    envs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the cached image was exists or not for the given config.
     */
    exists?: pulumi.Input<boolean>;
    /**
     * (Envbuilder option) Terminates upon a build failure. This is handy when preferring the FALLBACK_IMAGE in cases where no
     * devcontainer.json or image is provided. However, it ensures that the container stops if the build process encounters an
     * error.
     */
    exitOnBuildFailure?: pulumi.Input<boolean>;
    /**
     * Extra environment variables to set for the container. This may include envbuilder options.
     */
    extraEnv?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Envbuilder option) Specifies an alternative image to use when neither an image is declared in the devcontainer.json
     * file nor a Dockerfile is present. If there's a build failure (from a faulty Dockerfile) or a misconfiguration, this
     * image will be the substitute. Set ExitOnBuildFailure to true to halt the container if the build faces an issue.
     */
    fallbackImage?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The depth to use when cloning the Git repository.
     */
    gitCloneDepth?: pulumi.Input<number>;
    /**
     * (Envbuilder option) Clone only a single branch of the Git repository.
     */
    gitCloneSingleBranch?: pulumi.Input<boolean>;
    /**
     * (Envbuilder option) The URL for the HTTP proxy. This is optional.
     */
    gitHttpProxyUrl?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The password to use for Git authentication. This is optional.
     */
    gitPassword?: pulumi.Input<string>;
    /**
     * (Envbuilder option) Path to an SSH private key to be used for Git authentication.
     */
    gitSshPrivateKeyPath?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The URL of a Git repository containing a Devcontainer or Docker image to clone.
     */
    gitUrl?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The username to use for Git authentication. This is optional.
     */
    gitUsername?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The comma separated list of paths to ignore when building the workspace.
     */
    ignorePaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Outputs the cached image repo@digest if it exists, and builder image otherwise.
     */
    image?: pulumi.Input<string>;
    /**
     * (Envbuilder option) Bypass TLS verification when cloning and pulling from container registries.
     */
    insecure?: pulumi.Input<boolean>;
    remoteRepoBuildMode?: pulumi.Input<boolean>;
    /**
     * (Envbuilder option) The content of an SSL cert file. This is useful for self-signed certificates.
     */
    sslCertBase64?: pulumi.Input<string>;
    /**
     * (Envbuilder option) Enable verbose output.
     */
    verbose?: pulumi.Input<boolean>;
    /**
     * (Envbuilder option) path to the workspace folder that will be built. This is optional.
     */
    workspaceFolder?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CachedImage resource.
 */
export interface CachedImageArgs {
    /**
     * (Envbuilder option) The path to a directory where the base image can be found. This should be a read-only directory
     * solely mounted for the purpose of caching the base image.
     */
    baseImageCacheDir?: pulumi.Input<string>;
    /**
     * (Envbuilder option) Can be specified when a DockerfilePath is specified outside the base WorkspaceFolder. This path MUST
     * be relative to the WorkspaceFolder path into which the repo is cloned.
     */
    buildContextPath?: pulumi.Input<string>;
    /**
     * The envbuilder image to use if the cached version is not found.
     */
    builderImage: pulumi.Input<string>;
    /**
     * (Envbuilder option) The name of the container registry to fetch the cache image from.
     */
    cacheRepo: pulumi.Input<string>;
    /**
     * (Envbuilder option) The number of days to use cached layers before expiring them. Defaults to 7 days.
     */
    cacheTtlDays?: pulumi.Input<number>;
    /**
     * (Envbuilder option) The path to the folder containing the devcontainer.json file that will be used to build the
     * workspace and can either be an absolute path or a path relative to the workspace folder. If not provided, defaults to
     * `.devcontainer`.
     */
    devcontainerDir?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The path to a devcontainer.json file that is either an absolute path or a path relative to
     * DevcontainerDir. This can be used in cases where one wants to substitute an edited devcontainer.json file for the one
     * that exists in the repo.
     */
    devcontainerJsonPath?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The base64 encoded Docker config file that will be used to pull images from private container
     * registries.
     */
    dockerConfigBase64?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The relative path to the Dockerfile that will be used to build the workspace. This is an alternative
     * to using a devcontainer that some might find simpler.
     */
    dockerfilePath?: pulumi.Input<string>;
    /**
     * (Envbuilder option) Terminates upon a build failure. This is handy when preferring the FALLBACK_IMAGE in cases where no
     * devcontainer.json or image is provided. However, it ensures that the container stops if the build process encounters an
     * error.
     */
    exitOnBuildFailure?: pulumi.Input<boolean>;
    /**
     * Extra environment variables to set for the container. This may include envbuilder options.
     */
    extraEnv?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Envbuilder option) Specifies an alternative image to use when neither an image is declared in the devcontainer.json
     * file nor a Dockerfile is present. If there's a build failure (from a faulty Dockerfile) or a misconfiguration, this
     * image will be the substitute. Set ExitOnBuildFailure to true to halt the container if the build faces an issue.
     */
    fallbackImage?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The depth to use when cloning the Git repository.
     */
    gitCloneDepth?: pulumi.Input<number>;
    /**
     * (Envbuilder option) Clone only a single branch of the Git repository.
     */
    gitCloneSingleBranch?: pulumi.Input<boolean>;
    /**
     * (Envbuilder option) The URL for the HTTP proxy. This is optional.
     */
    gitHttpProxyUrl?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The password to use for Git authentication. This is optional.
     */
    gitPassword?: pulumi.Input<string>;
    /**
     * (Envbuilder option) Path to an SSH private key to be used for Git authentication.
     */
    gitSshPrivateKeyPath?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The URL of a Git repository containing a Devcontainer or Docker image to clone.
     */
    gitUrl: pulumi.Input<string>;
    /**
     * (Envbuilder option) The username to use for Git authentication. This is optional.
     */
    gitUsername?: pulumi.Input<string>;
    /**
     * (Envbuilder option) The comma separated list of paths to ignore when building the workspace.
     */
    ignorePaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Envbuilder option) Bypass TLS verification when cloning and pulling from container registries.
     */
    insecure?: pulumi.Input<boolean>;
    remoteRepoBuildMode?: pulumi.Input<boolean>;
    /**
     * (Envbuilder option) The content of an SSL cert file. This is useful for self-signed certificates.
     */
    sslCertBase64?: pulumi.Input<string>;
    /**
     * (Envbuilder option) Enable verbose output.
     */
    verbose?: pulumi.Input<boolean>;
    /**
     * (Envbuilder option) path to the workspace folder that will be built. This is optional.
     */
    workspaceFolder?: pulumi.Input<string>;
}
