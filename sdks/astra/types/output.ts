// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessListAddress {
    /**
     * IP Address/CIDR group that should have access
     */
    address: string;
    /**
     * Description for the IP Address/CIDR group
     */
    description?: string;
    /**
     * Enable/disable this IP Address/CIDR group's access
     */
    enabled: boolean;
}

export interface DatabaseTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface GetAccessListAddress {
    address: string;
    description: string;
    enabled: boolean;
}

export interface GetAvailableRegionsResult {
    cloudProvider: string;
    displayName: string;
    enabled: boolean;
    region: string;
    regionType: string;
    reservedForQualifiedUsers: boolean;
    zone: string;
}

export interface GetCloudAccountsResult {
    organizationId: string;
    provider: string;
    providerId: string;
}

export interface GetCustomerKeysResult {
    cloudProvider: string;
    keyId: string;
    organizationId: string;
    region: string;
}

export interface GetDatabasesResult {
    additionalKeyspaces: string[];
    cloudProvider: string;
    cqlshUrl: string;
    dataEndpointUrl: string;
    datacenters: {[key: string]: string};
    grafanaUrl: string;
    graphqlUrl: string;
    id: string;
    keyspace: string;
    name: string;
    nodeCount: number;
    organizationId: string;
    ownerId: string;
    regions: string[];
    replicationFactor: number;
    status: string;
    totalStorage: number;
}

export interface GetKeyspacesResult {
    name: string;
}

export interface GetPrivateLinkEndpointsResult {
    createTime: string;
    description: string;
    endpointId: string;
    status: string;
}

export interface GetPrivateLinksResult {
    allowedPrincipals: string[];
    datacenterId: string;
    endpoints: string[];
    serviceName: string;
}

export interface GetRolesResult {
    description: string;
    effect: string;
    policies: string[];
    resources: string[];
    roleId: string;
    roleName: string;
}

export interface GetSecureConnectBundleUrlSecureBundle {
    customDomainBundles: outputs.GetSecureConnectBundleUrlSecureBundleCustomDomainBundle[];
    datacenterId: string;
    internalMigrationProxyUrl: string;
    internalUrl: string;
    migrationProxyUrl: string;
    url: string;
}

export interface GetSecureConnectBundleUrlSecureBundleCustomDomainBundle {
    apiFqdn: string;
    cqlFqdn: string;
    dashboardFqdn: string;
    domain: string;
    url: string;
}

export interface GetStreamingTenantTokensToken {
    iat: number;
    iss: string;
    sub: string;
    token: string;
    tokenId: string;
}

export interface GetUsersUser {
    email: string;
    roles: outputs.GetUsersUserRole[];
    status: string;
    userId: string;
}

export interface GetUsersUserRole {
    roleId: string;
}

export interface StreamingNamespacePolicies {
    autoTopicCreationOverride: outputs.StreamingNamespacePoliciesAutoTopicCreationOverride;
    backlogQuotaMap: {[key: string]: outputs.StreamingNamespacePoliciesBacklogQuotaMap};
    inactiveTopicPolicies: outputs.StreamingNamespacePoliciesInactiveTopicPolicies;
    isAllowAutoUpdateSchema: boolean;
    messageTtlInSeconds: number;
    offloadThreshold: number;
    retentionPolicies: outputs.StreamingNamespacePoliciesRetentionPolicies;
    schemaAutoUpdateCompatibilityStrategy: string;
    schemaCompatibilityStrategy: string;
    schemaValidationEnforced: boolean;
    subscriptionExpirationTimeMinutes: number;
}

export interface StreamingNamespacePoliciesAutoTopicCreationOverride {
    allowAutoTopicCreation: boolean;
    defaultNumPartitions: number;
    topicType: string;
}

export interface StreamingNamespacePoliciesBacklogQuotaMap {
    limit: number;
    limitSize: number;
    limitTime: number;
    policy: string;
}

export interface StreamingNamespacePoliciesInactiveTopicPolicies {
    deleteMode: string;
    deleteWhileInactive: boolean;
    maxInactiveDurationSeconds: number;
}

export interface StreamingNamespacePoliciesRetentionPolicies {
    retentionSizeInMb: number;
    retentionTimeInMinutes: number;
}

export interface StreamingTopicSchema {
    /**
     * Additional properties
     */
    properties?: {[key: string]: string};
    /**
     * Schema definition
     */
    schema: string;
    /**
     * Type of the schema, e.g. JSON
     */
    type: string;
}

