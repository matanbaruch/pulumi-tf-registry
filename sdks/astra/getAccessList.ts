// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAccessList(args: GetAccessListArgs, opts?: pulumi.InvokeOptions): Promise<GetAccessListResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("astra:index/getAccessList:getAccessList", {
        "databaseId": args.databaseId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAccessList.
 */
export interface GetAccessListArgs {
    databaseId: string;
    id?: string;
}

/**
 * A collection of values returned by getAccessList.
 */
export interface GetAccessListResult {
    readonly addresses: outputs.GetAccessListAddress[];
    readonly databaseId: string;
    readonly enabled: boolean;
    readonly id: string;
}
export function getAccessListOutput(args: GetAccessListOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAccessListResult> {
    return pulumi.output(args).apply((a: any) => getAccessList(a, opts))
}

/**
 * A collection of arguments for invoking getAccessList.
 */
export interface GetAccessListOutputArgs {
    databaseId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
