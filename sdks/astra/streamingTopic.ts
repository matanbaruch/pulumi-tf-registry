// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StreamingTopic extends pulumi.CustomResource {
    /**
     * Get an existing StreamingTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamingTopicState, opts?: pulumi.CustomResourceOptions): StreamingTopic {
        return new StreamingTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'astra:index/streamingTopic:StreamingTopic';

    /**
     * Returns true if the given object is an instance of StreamingTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamingTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamingTopic.__pulumiType;
    }

    /**
     * **Deprecated** Cloud provider where the Astra Streaming tenant is located.
     *
     * @deprecated Deprecated
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * Cluster where the Astra Streaming tenant is located.
     */
    public readonly cluster!: pulumi.Output<string>;
    public readonly deletionProtection!: pulumi.Output<boolean>;
    /**
     * Pulsar namespace of the topic.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Number of partitions for a partitioned topic. This field must not be set for a non-partitioned topic.
     */
    public readonly numPartitions!: pulumi.Output<number | undefined>;
    /**
     * Partitioned or non-partitioned topic
     */
    public readonly partitioned!: pulumi.Output<boolean>;
    /**
     * Persistent or non-persistent topic
     */
    public readonly persistent!: pulumi.Output<boolean>;
    /**
     * **Deprecated** Region where the Astra Streaming tenant is located.
     *
     * @deprecated Deprecated
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Pulsar topic schema.
     */
    public readonly schema!: pulumi.Output<outputs.StreamingTopicSchema | undefined>;
    /**
     * Name of the streaming tenant.
     */
    public readonly tenant!: pulumi.Output<string | undefined>;
    /**
     * **Deprecated** Name of the streaming tenant.
     *
     * @deprecated Deprecated
     */
    public readonly tenantName!: pulumi.Output<string | undefined>;
    /**
     * Name of the topic
     */
    public readonly topic!: pulumi.Output<string | undefined>;
    /**
     * Fully qualified name of the topic, for example 'persistent://mytenant/namespace1/mytopic'
     */
    public /*out*/ readonly topicFqn!: pulumi.Output<string>;

    /**
     * Create a StreamingTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamingTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamingTopicArgs | StreamingTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamingTopicState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["numPartitions"] = state ? state.numPartitions : undefined;
            resourceInputs["partitioned"] = state ? state.partitioned : undefined;
            resourceInputs["persistent"] = state ? state.persistent : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["tenant"] = state ? state.tenant : undefined;
            resourceInputs["tenantName"] = state ? state.tenantName : undefined;
            resourceInputs["topic"] = state ? state.topic : undefined;
            resourceInputs["topicFqn"] = state ? state.topicFqn : undefined;
        } else {
            const args = argsOrState as StreamingTopicArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["numPartitions"] = args ? args.numPartitions : undefined;
            resourceInputs["partitioned"] = args ? args.partitioned : undefined;
            resourceInputs["persistent"] = args ? args.persistent : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["tenant"] = args ? args.tenant : undefined;
            resourceInputs["tenantName"] = args ? args.tenantName : undefined;
            resourceInputs["topic"] = args ? args.topic : undefined;
            resourceInputs["topicFqn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamingTopic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StreamingTopic resources.
 */
export interface StreamingTopicState {
    /**
     * **Deprecated** Cloud provider where the Astra Streaming tenant is located.
     *
     * @deprecated Deprecated
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Cluster where the Astra Streaming tenant is located.
     */
    cluster?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Pulsar namespace of the topic.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Number of partitions for a partitioned topic. This field must not be set for a non-partitioned topic.
     */
    numPartitions?: pulumi.Input<number>;
    /**
     * Partitioned or non-partitioned topic
     */
    partitioned?: pulumi.Input<boolean>;
    /**
     * Persistent or non-persistent topic
     */
    persistent?: pulumi.Input<boolean>;
    /**
     * **Deprecated** Region where the Astra Streaming tenant is located.
     *
     * @deprecated Deprecated
     */
    region?: pulumi.Input<string>;
    /**
     * Pulsar topic schema.
     */
    schema?: pulumi.Input<inputs.StreamingTopicSchema>;
    /**
     * Name of the streaming tenant.
     */
    tenant?: pulumi.Input<string>;
    /**
     * **Deprecated** Name of the streaming tenant.
     *
     * @deprecated Deprecated
     */
    tenantName?: pulumi.Input<string>;
    /**
     * Name of the topic
     */
    topic?: pulumi.Input<string>;
    /**
     * Fully qualified name of the topic, for example 'persistent://mytenant/namespace1/mytopic'
     */
    topicFqn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StreamingTopic resource.
 */
export interface StreamingTopicArgs {
    /**
     * **Deprecated** Cloud provider where the Astra Streaming tenant is located.
     *
     * @deprecated Deprecated
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Cluster where the Astra Streaming tenant is located.
     */
    cluster?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Pulsar namespace of the topic.
     */
    namespace: pulumi.Input<string>;
    /**
     * Number of partitions for a partitioned topic. This field must not be set for a non-partitioned topic.
     */
    numPartitions?: pulumi.Input<number>;
    /**
     * Partitioned or non-partitioned topic
     */
    partitioned?: pulumi.Input<boolean>;
    /**
     * Persistent or non-persistent topic
     */
    persistent?: pulumi.Input<boolean>;
    /**
     * **Deprecated** Region where the Astra Streaming tenant is located.
     *
     * @deprecated Deprecated
     */
    region?: pulumi.Input<string>;
    /**
     * Pulsar topic schema.
     */
    schema?: pulumi.Input<inputs.StreamingTopicSchema>;
    /**
     * Name of the streaming tenant.
     */
    tenant?: pulumi.Input<string>;
    /**
     * **Deprecated** Name of the streaming tenant.
     *
     * @deprecated Deprecated
     */
    tenantName?: pulumi.Input<string>;
    /**
     * Name of the topic
     */
    topic?: pulumi.Input<string>;
}
