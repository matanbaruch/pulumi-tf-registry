// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAvailableRegions(args?: GetAvailableRegionsArgs, opts?: pulumi.InvokeOptions): Promise<GetAvailableRegionsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("astra:index/getAvailableRegions:getAvailableRegions", {
        "cloudProvider": args.cloudProvider,
        "id": args.id,
        "onlyEnabled": args.onlyEnabled,
        "regionType": args.regionType,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAvailableRegions.
 */
export interface GetAvailableRegionsArgs {
    cloudProvider?: string;
    id?: string;
    onlyEnabled?: boolean;
    regionType?: string;
}

/**
 * A collection of values returned by getAvailableRegions.
 */
export interface GetAvailableRegionsResult {
    readonly cloudProvider?: string;
    readonly id: string;
    readonly onlyEnabled?: boolean;
    readonly regionType?: string;
    readonly results: outputs.GetAvailableRegionsResult[];
}
export function getAvailableRegionsOutput(args?: GetAvailableRegionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAvailableRegionsResult> {
    return pulumi.output(args).apply((a: any) => getAvailableRegions(a, opts))
}

/**
 * A collection of arguments for invoking getAvailableRegions.
 */
export interface GetAvailableRegionsOutputArgs {
    cloudProvider?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    onlyEnabled?: pulumi.Input<boolean>;
    regionType?: pulumi.Input<string>;
}
