// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Cdc extends pulumi.CustomResource {
    /**
     * Get an existing Cdc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdcState, opts?: pulumi.CustomResourceOptions): Cdc {
        return new Cdc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'astra:index/cdc:Cdc';

    /**
     * Returns true if the given object is an instance of Cdc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cdc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cdc.__pulumiType;
    }

    /**
     * Connector Status
     */
    public /*out*/ readonly connectorStatus!: pulumi.Output<string>;
    /**
     * Data topic name
     */
    public /*out*/ readonly dataTopic!: pulumi.Output<string>;
    /**
     * Astra database to create the keyspace.
     */
    public readonly databaseId!: pulumi.Output<string>;
    /**
     * Astra database name.
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * Initial keyspace name. For additional keyspaces, use the astra.Keyspace resource.
     */
    public readonly keyspace!: pulumi.Output<string>;
    /**
     * Astra database table.
     */
    public readonly table!: pulumi.Output<string>;
    /**
     * Streaming tenant name
     */
    public readonly tenantName!: pulumi.Output<string>;
    /**
     * Number of partitions in cdc topic.
     */
    public readonly topicPartitions!: pulumi.Output<number>;

    /**
     * Create a Cdc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CdcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdcArgs | CdcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdcState | undefined;
            resourceInputs["connectorStatus"] = state ? state.connectorStatus : undefined;
            resourceInputs["dataTopic"] = state ? state.dataTopic : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["keyspace"] = state ? state.keyspace : undefined;
            resourceInputs["table"] = state ? state.table : undefined;
            resourceInputs["tenantName"] = state ? state.tenantName : undefined;
            resourceInputs["topicPartitions"] = state ? state.topicPartitions : undefined;
        } else {
            const args = argsOrState as CdcArgs | undefined;
            if ((!args || args.databaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseId'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.keyspace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyspace'");
            }
            if ((!args || args.table === undefined) && !opts.urn) {
                throw new Error("Missing required property 'table'");
            }
            if ((!args || args.tenantName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantName'");
            }
            if ((!args || args.topicPartitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicPartitions'");
            }
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["keyspace"] = args ? args.keyspace : undefined;
            resourceInputs["table"] = args ? args.table : undefined;
            resourceInputs["tenantName"] = args ? args.tenantName : undefined;
            resourceInputs["topicPartitions"] = args ? args.topicPartitions : undefined;
            resourceInputs["connectorStatus"] = undefined /*out*/;
            resourceInputs["dataTopic"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cdc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cdc resources.
 */
export interface CdcState {
    /**
     * Connector Status
     */
    connectorStatus?: pulumi.Input<string>;
    /**
     * Data topic name
     */
    dataTopic?: pulumi.Input<string>;
    /**
     * Astra database to create the keyspace.
     */
    databaseId?: pulumi.Input<string>;
    /**
     * Astra database name.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Initial keyspace name. For additional keyspaces, use the astra.Keyspace resource.
     */
    keyspace?: pulumi.Input<string>;
    /**
     * Astra database table.
     */
    table?: pulumi.Input<string>;
    /**
     * Streaming tenant name
     */
    tenantName?: pulumi.Input<string>;
    /**
     * Number of partitions in cdc topic.
     */
    topicPartitions?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Cdc resource.
 */
export interface CdcArgs {
    /**
     * Astra database to create the keyspace.
     */
    databaseId: pulumi.Input<string>;
    /**
     * Astra database name.
     */
    databaseName: pulumi.Input<string>;
    /**
     * Initial keyspace name. For additional keyspaces, use the astra.Keyspace resource.
     */
    keyspace: pulumi.Input<string>;
    /**
     * Astra database table.
     */
    table: pulumi.Input<string>;
    /**
     * Streaming tenant name
     */
    tenantName: pulumi.Input<string>;
    /**
     * Number of partitions in cdc topic.
     */
    topicPartitions: pulumi.Input<number>;
}
