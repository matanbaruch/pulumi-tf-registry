// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseState, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'astra:index/database:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * Additional keyspaces
     */
    public /*out*/ readonly additionalKeyspaces!: pulumi.Output<string[]>;
    /**
     * The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * The cqlsh_url
     */
    public /*out*/ readonly cqlshUrl!: pulumi.Output<string>;
    /**
     * The data_endpoint_url
     */
    public /*out*/ readonly dataEndpointUrl!: pulumi.Output<string>;
    /**
     * Map of Datacenter IDs. The map key is "cloud_provider.region". Example: "GCP.us-east4".
     */
    public /*out*/ readonly datacenters!: pulumi.Output<{[key: string]: string}>;
    /**
     * Database type. Currently only `vector` is supported. Omit this optional field if you want a regular serverless database.
     */
    public readonly dbType!: pulumi.Output<string | undefined>;
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    /**
     * The grafana_url
     */
    public /*out*/ readonly grafanaUrl!: pulumi.Output<string>;
    /**
     * The graphql_url
     */
    public /*out*/ readonly graphqlUrl!: pulumi.Output<string>;
    /**
     * Initial keyspace name. For additional keyspaces, use the astra.Keyspace resource. If omitted, Astra will use its
     * default, currently `default_keyspace`
     */
    public readonly keyspace!: pulumi.Output<string | undefined>;
    /**
     * Astra database name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The node_count
     */
    public /*out*/ readonly nodeCount!: pulumi.Output<number>;
    /**
     * The org id.
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * The owner id.
     */
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    /**
     * Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported
     * regions)
     */
    public readonly regions!: pulumi.Output<string[]>;
    /**
     * The replication_factor
     */
    public /*out*/ readonly replicationFactor!: pulumi.Output<number>;
    /**
     * The status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseTimeouts | undefined>;
    /**
     * The total_storage
     */
    public /*out*/ readonly totalStorage!: pulumi.Output<number>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseArgs | DatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseState | undefined;
            resourceInputs["additionalKeyspaces"] = state ? state.additionalKeyspaces : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["cqlshUrl"] = state ? state.cqlshUrl : undefined;
            resourceInputs["dataEndpointUrl"] = state ? state.dataEndpointUrl : undefined;
            resourceInputs["datacenters"] = state ? state.datacenters : undefined;
            resourceInputs["dbType"] = state ? state.dbType : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["grafanaUrl"] = state ? state.grafanaUrl : undefined;
            resourceInputs["graphqlUrl"] = state ? state.graphqlUrl : undefined;
            resourceInputs["keyspace"] = state ? state.keyspace : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["replicationFactor"] = state ? state.replicationFactor : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["totalStorage"] = state ? state.totalStorage : undefined;
        } else {
            const args = argsOrState as DatabaseArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.regions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regions'");
            }
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["dbType"] = args ? args.dbType : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["keyspace"] = args ? args.keyspace : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["additionalKeyspaces"] = undefined /*out*/;
            resourceInputs["cqlshUrl"] = undefined /*out*/;
            resourceInputs["dataEndpointUrl"] = undefined /*out*/;
            resourceInputs["datacenters"] = undefined /*out*/;
            resourceInputs["grafanaUrl"] = undefined /*out*/;
            resourceInputs["graphqlUrl"] = undefined /*out*/;
            resourceInputs["nodeCount"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["replicationFactor"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["totalStorage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Database.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Database resources.
 */
export interface DatabaseState {
    /**
     * Additional keyspaces
     */
    additionalKeyspaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * The cqlsh_url
     */
    cqlshUrl?: pulumi.Input<string>;
    /**
     * The data_endpoint_url
     */
    dataEndpointUrl?: pulumi.Input<string>;
    /**
     * Map of Datacenter IDs. The map key is "cloud_provider.region". Example: "GCP.us-east4".
     */
    datacenters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Database type. Currently only `vector` is supported. Omit this optional field if you want a regular serverless database.
     */
    dbType?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The grafana_url
     */
    grafanaUrl?: pulumi.Input<string>;
    /**
     * The graphql_url
     */
    graphqlUrl?: pulumi.Input<string>;
    /**
     * Initial keyspace name. For additional keyspaces, use the astra.Keyspace resource. If omitted, Astra will use its
     * default, currently `default_keyspace`
     */
    keyspace?: pulumi.Input<string>;
    /**
     * Astra database name.
     */
    name?: pulumi.Input<string>;
    /**
     * The node_count
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * The org id.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The owner id.
     */
    ownerId?: pulumi.Input<string>;
    /**
     * Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported
     * regions)
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The replication_factor
     */
    replicationFactor?: pulumi.Input<number>;
    /**
     * The status
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseTimeouts>;
    /**
     * The total_storage
     */
    totalStorage?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Database type. Currently only `vector` is supported. Omit this optional field if you want a regular serverless database.
     */
    dbType?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Initial keyspace name. For additional keyspaces, use the astra.Keyspace resource. If omitted, Astra will use its
     * default, currently `default_keyspace`
     */
    keyspace?: pulumi.Input<string>;
    /**
     * Astra database name.
     */
    name?: pulumi.Input<string>;
    /**
     * Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported
     * regions)
     */
    regions: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.DatabaseTimeouts>;
}
