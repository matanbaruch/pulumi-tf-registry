// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CustomerKey extends pulumi.CustomResource {
    /**
     * Get an existing CustomerKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomerKeyState, opts?: pulumi.CustomResourceOptions): CustomerKey {
        return new CustomerKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'astra:index/customerKey:CustomerKey';

    /**
     * Returns true if the given object is an instance of CustomerKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomerKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomerKey.__pulumiType;
    }

    /**
     * The cloud provider where the Customer Key exists (Currently supported: aws, gcp)
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * Customer Key ID. This is cloud provider specific.
     */
    public readonly keyId!: pulumi.Output<string>;
    /**
     * The Astra organization ID (this is derived from the token used to create the Customer Key).
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * Region in which the Customer Key exists.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a CustomerKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomerKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomerKeyArgs | CustomerKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomerKeyState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as CustomerKeyArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.keyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["organizationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomerKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CustomerKey resources.
 */
export interface CustomerKeyState {
    /**
     * The cloud provider where the Customer Key exists (Currently supported: aws, gcp)
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Customer Key ID. This is cloud provider specific.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The Astra organization ID (this is derived from the token used to create the Customer Key).
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Region in which the Customer Key exists.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomerKey resource.
 */
export interface CustomerKeyArgs {
    /**
     * The cloud provider where the Customer Key exists (Currently supported: aws, gcp)
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Customer Key ID. This is cloud provider specific.
     */
    keyId: pulumi.Input<string>;
    /**
     * Region in which the Customer Key exists.
     */
    region: pulumi.Input<string>;
}
