// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessListArgs, AccessListState } from "./accessList";
export type AccessList = import("./accessList").AccessList;
export const AccessList: typeof import("./accessList").AccessList = null as any;
utilities.lazyLoad(exports, ["AccessList"], () => require("./accessList"));

export { CdcArgs, CdcState } from "./cdc";
export type Cdc = import("./cdc").Cdc;
export const Cdc: typeof import("./cdc").Cdc = null as any;
utilities.lazyLoad(exports, ["Cdc"], () => require("./cdc"));

export { CustomerKeyArgs, CustomerKeyState } from "./customerKey";
export type CustomerKey = import("./customerKey").CustomerKey;
export const CustomerKey: typeof import("./customerKey").CustomerKey = null as any;
utilities.lazyLoad(exports, ["CustomerKey"], () => require("./customerKey"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { EnterpriseOrgArgs, EnterpriseOrgState } from "./enterpriseOrg";
export type EnterpriseOrg = import("./enterpriseOrg").EnterpriseOrg;
export const EnterpriseOrg: typeof import("./enterpriseOrg").EnterpriseOrg = null as any;
utilities.lazyLoad(exports, ["EnterpriseOrg"], () => require("./enterpriseOrg"));

export { GetAccessListArgs, GetAccessListResult, GetAccessListOutputArgs } from "./getAccessList";
export const getAccessList: typeof import("./getAccessList").getAccessList = null as any;
export const getAccessListOutput: typeof import("./getAccessList").getAccessListOutput = null as any;
utilities.lazyLoad(exports, ["getAccessList","getAccessListOutput"], () => require("./getAccessList"));

export { GetAvailableRegionsArgs, GetAvailableRegionsResult, GetAvailableRegionsOutputArgs } from "./getAvailableRegions";
export const getAvailableRegions: typeof import("./getAvailableRegions").getAvailableRegions = null as any;
export const getAvailableRegionsOutput: typeof import("./getAvailableRegions").getAvailableRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getAvailableRegions","getAvailableRegionsOutput"], () => require("./getAvailableRegions"));

export { GetCloudAccountsArgs, GetCloudAccountsResult, GetCloudAccountsOutputArgs } from "./getCloudAccounts";
export const getCloudAccounts: typeof import("./getCloudAccounts").getCloudAccounts = null as any;
export const getCloudAccountsOutput: typeof import("./getCloudAccounts").getCloudAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccounts","getCloudAccountsOutput"], () => require("./getCloudAccounts"));

export { GetCustomerKeyArgs, GetCustomerKeyResult, GetCustomerKeyOutputArgs } from "./getCustomerKey";
export const getCustomerKey: typeof import("./getCustomerKey").getCustomerKey = null as any;
export const getCustomerKeyOutput: typeof import("./getCustomerKey").getCustomerKeyOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerKey","getCustomerKeyOutput"], () => require("./getCustomerKey"));

export { GetCustomerKeysArgs, GetCustomerKeysResult, GetCustomerKeysOutputArgs } from "./getCustomerKeys";
export const getCustomerKeys: typeof import("./getCustomerKeys").getCustomerKeys = null as any;
export const getCustomerKeysOutput: typeof import("./getCustomerKeys").getCustomerKeysOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerKeys","getCustomerKeysOutput"], () => require("./getCustomerKeys"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDatabasesArgs, GetDatabasesResult, GetDatabasesOutputArgs } from "./getDatabases";
export const getDatabases: typeof import("./getDatabases").getDatabases = null as any;
export const getDatabasesOutput: typeof import("./getDatabases").getDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabases","getDatabasesOutput"], () => require("./getDatabases"));

export { GetKeyspaceArgs, GetKeyspaceResult, GetKeyspaceOutputArgs } from "./getKeyspace";
export const getKeyspace: typeof import("./getKeyspace").getKeyspace = null as any;
export const getKeyspaceOutput: typeof import("./getKeyspace").getKeyspaceOutput = null as any;
utilities.lazyLoad(exports, ["getKeyspace","getKeyspaceOutput"], () => require("./getKeyspace"));

export { GetKeyspacesArgs, GetKeyspacesResult, GetKeyspacesOutputArgs } from "./getKeyspaces";
export const getKeyspaces: typeof import("./getKeyspaces").getKeyspaces = null as any;
export const getKeyspacesOutput: typeof import("./getKeyspaces").getKeyspacesOutput = null as any;
utilities.lazyLoad(exports, ["getKeyspaces","getKeyspacesOutput"], () => require("./getKeyspaces"));

export { GetPrivateLinkEndpointsArgs, GetPrivateLinkEndpointsResult, GetPrivateLinkEndpointsOutputArgs } from "./getPrivateLinkEndpoints";
export const getPrivateLinkEndpoints: typeof import("./getPrivateLinkEndpoints").getPrivateLinkEndpoints = null as any;
export const getPrivateLinkEndpointsOutput: typeof import("./getPrivateLinkEndpoints").getPrivateLinkEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateLinkEndpoints","getPrivateLinkEndpointsOutput"], () => require("./getPrivateLinkEndpoints"));

export { GetPrivateLinksArgs, GetPrivateLinksResult, GetPrivateLinksOutputArgs } from "./getPrivateLinks";
export const getPrivateLinks: typeof import("./getPrivateLinks").getPrivateLinks = null as any;
export const getPrivateLinksOutput: typeof import("./getPrivateLinks").getPrivateLinksOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateLinks","getPrivateLinksOutput"], () => require("./getPrivateLinks"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetRolesArgs, GetRolesResult, GetRolesOutputArgs } from "./getRoles";
export const getRoles: typeof import("./getRoles").getRoles = null as any;
export const getRolesOutput: typeof import("./getRoles").getRolesOutput = null as any;
utilities.lazyLoad(exports, ["getRoles","getRolesOutput"], () => require("./getRoles"));

export { GetSecureConnectBundleUrlArgs, GetSecureConnectBundleUrlResult, GetSecureConnectBundleUrlOutputArgs } from "./getSecureConnectBundleUrl";
export const getSecureConnectBundleUrl: typeof import("./getSecureConnectBundleUrl").getSecureConnectBundleUrl = null as any;
export const getSecureConnectBundleUrlOutput: typeof import("./getSecureConnectBundleUrl").getSecureConnectBundleUrlOutput = null as any;
utilities.lazyLoad(exports, ["getSecureConnectBundleUrl","getSecureConnectBundleUrlOutput"], () => require("./getSecureConnectBundleUrl"));

export { GetStreamingTenantTokensArgs, GetStreamingTenantTokensResult, GetStreamingTenantTokensOutputArgs } from "./getStreamingTenantTokens";
export const getStreamingTenantTokens: typeof import("./getStreamingTenantTokens").getStreamingTenantTokens = null as any;
export const getStreamingTenantTokensOutput: typeof import("./getStreamingTenantTokens").getStreamingTenantTokensOutput = null as any;
utilities.lazyLoad(exports, ["getStreamingTenantTokens","getStreamingTenantTokensOutput"], () => require("./getStreamingTenantTokens"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { KeyspaceArgs, KeyspaceState } from "./keyspace";
export type Keyspace = import("./keyspace").Keyspace;
export const Keyspace: typeof import("./keyspace").Keyspace = null as any;
utilities.lazyLoad(exports, ["Keyspace"], () => require("./keyspace"));

export { PrivateLinkArgs, PrivateLinkState } from "./privateLink";
export type PrivateLink = import("./privateLink").PrivateLink;
export const PrivateLink: typeof import("./privateLink").PrivateLink = null as any;
utilities.lazyLoad(exports, ["PrivateLink"], () => require("./privateLink"));

export { PrivateLinkEndpointArgs, PrivateLinkEndpointState } from "./privateLinkEndpoint";
export type PrivateLinkEndpoint = import("./privateLinkEndpoint").PrivateLinkEndpoint;
export const PrivateLinkEndpoint: typeof import("./privateLinkEndpoint").PrivateLinkEndpoint = null as any;
utilities.lazyLoad(exports, ["PrivateLinkEndpoint"], () => require("./privateLinkEndpoint"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { StreamingNamespaceArgs, StreamingNamespaceState } from "./streamingNamespace";
export type StreamingNamespace = import("./streamingNamespace").StreamingNamespace;
export const StreamingNamespace: typeof import("./streamingNamespace").StreamingNamespace = null as any;
utilities.lazyLoad(exports, ["StreamingNamespace"], () => require("./streamingNamespace"));

export { StreamingPulsarTokenArgs, StreamingPulsarTokenState } from "./streamingPulsarToken";
export type StreamingPulsarToken = import("./streamingPulsarToken").StreamingPulsarToken;
export const StreamingPulsarToken: typeof import("./streamingPulsarToken").StreamingPulsarToken = null as any;
utilities.lazyLoad(exports, ["StreamingPulsarToken"], () => require("./streamingPulsarToken"));

export { StreamingSinkArgs, StreamingSinkState } from "./streamingSink";
export type StreamingSink = import("./streamingSink").StreamingSink;
export const StreamingSink: typeof import("./streamingSink").StreamingSink = null as any;
utilities.lazyLoad(exports, ["StreamingSink"], () => require("./streamingSink"));

export { StreamingTenantArgs, StreamingTenantState } from "./streamingTenant";
export type StreamingTenant = import("./streamingTenant").StreamingTenant;
export const StreamingTenant: typeof import("./streamingTenant").StreamingTenant = null as any;
utilities.lazyLoad(exports, ["StreamingTenant"], () => require("./streamingTenant"));

export { StreamingTopicArgs, StreamingTopicState } from "./streamingTopic";
export type StreamingTopic = import("./streamingTopic").StreamingTopic;
export const StreamingTopic: typeof import("./streamingTopic").StreamingTopic = null as any;
utilities.lazyLoad(exports, ["StreamingTopic"], () => require("./streamingTopic"));

export { TableArgs, TableState } from "./table";
export type Table = import("./table").Table;
export const Table: typeof import("./table").Table = null as any;
utilities.lazyLoad(exports, ["Table"], () => require("./table"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "astra:index/accessList:AccessList":
                return new AccessList(name, <any>undefined, { urn })
            case "astra:index/cdc:Cdc":
                return new Cdc(name, <any>undefined, { urn })
            case "astra:index/customerKey:CustomerKey":
                return new CustomerKey(name, <any>undefined, { urn })
            case "astra:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "astra:index/enterpriseOrg:EnterpriseOrg":
                return new EnterpriseOrg(name, <any>undefined, { urn })
            case "astra:index/keyspace:Keyspace":
                return new Keyspace(name, <any>undefined, { urn })
            case "astra:index/privateLink:PrivateLink":
                return new PrivateLink(name, <any>undefined, { urn })
            case "astra:index/privateLinkEndpoint:PrivateLinkEndpoint":
                return new PrivateLinkEndpoint(name, <any>undefined, { urn })
            case "astra:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "astra:index/streamingNamespace:StreamingNamespace":
                return new StreamingNamespace(name, <any>undefined, { urn })
            case "astra:index/streamingPulsarToken:StreamingPulsarToken":
                return new StreamingPulsarToken(name, <any>undefined, { urn })
            case "astra:index/streamingSink:StreamingSink":
                return new StreamingSink(name, <any>undefined, { urn })
            case "astra:index/streamingTenant:StreamingTenant":
                return new StreamingTenant(name, <any>undefined, { urn })
            case "astra:index/streamingTopic:StreamingTopic":
                return new StreamingTopic(name, <any>undefined, { urn })
            case "astra:index/table:Table":
                return new Table(name, <any>undefined, { urn })
            case "astra:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("astra", "index/accessList", _module)
pulumi.runtime.registerResourceModule("astra", "index/cdc", _module)
pulumi.runtime.registerResourceModule("astra", "index/customerKey", _module)
pulumi.runtime.registerResourceModule("astra", "index/database", _module)
pulumi.runtime.registerResourceModule("astra", "index/enterpriseOrg", _module)
pulumi.runtime.registerResourceModule("astra", "index/keyspace", _module)
pulumi.runtime.registerResourceModule("astra", "index/privateLink", _module)
pulumi.runtime.registerResourceModule("astra", "index/privateLinkEndpoint", _module)
pulumi.runtime.registerResourceModule("astra", "index/role", _module)
pulumi.runtime.registerResourceModule("astra", "index/streamingNamespace", _module)
pulumi.runtime.registerResourceModule("astra", "index/streamingPulsarToken", _module)
pulumi.runtime.registerResourceModule("astra", "index/streamingSink", _module)
pulumi.runtime.registerResourceModule("astra", "index/streamingTenant", _module)
pulumi.runtime.registerResourceModule("astra", "index/streamingTopic", _module)
pulumi.runtime.registerResourceModule("astra", "index/table", _module)
pulumi.runtime.registerResourceModule("astra", "index/token", _module)
pulumi.runtime.registerResourcePackage("astra", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:astra") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
