// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zerotier:index/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * IPv4 Assignment RuleSets
     */
    public readonly assignIpv4s!: pulumi.Output<outputs.NetworkAssignIpv4[] | undefined>;
    /**
     * IPv6 Assignment RuleSets
     */
    public readonly assignIpv6s!: pulumi.Output<outputs.NetworkAssignIpv6[] | undefined>;
    public readonly assignmentPools!: pulumi.Output<outputs.NetworkAssignmentPool[] | undefined>;
    /**
     * The time at which this network was created, in epoch seconds
     */
    public /*out*/ readonly creationTime!: pulumi.Output<number>;
    /**
     * The description of the network
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * DNS settings for network members
     */
    public readonly dns!: pulumi.Output<outputs.NetworkDn[] | undefined>;
    /**
     * Enable broadcast packets on the network
     */
    public readonly enableBroadcast!: pulumi.Output<boolean | undefined>;
    /**
     * The layer 2 flow rules to apply to packets traveling across this network. Please see
     * https://www.zerotier.com/manual/#3_4_1 for more information.
     */
    public readonly flowRules!: pulumi.Output<string | undefined>;
    /**
     * Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on
     * your network!
     */
    public readonly multicastLimit!: pulumi.Output<number | undefined>;
    /**
     * The name of the network
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether or not the network is private. If false, members will *NOT* need to be authorized to join.
     */
    public readonly private!: pulumi.Output<boolean | undefined>;
    public readonly routes!: pulumi.Output<outputs.NetworkRoute[] | undefined>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["assignIpv4s"] = state ? state.assignIpv4s : undefined;
            resourceInputs["assignIpv6s"] = state ? state.assignIpv6s : undefined;
            resourceInputs["assignmentPools"] = state ? state.assignmentPools : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["enableBroadcast"] = state ? state.enableBroadcast : undefined;
            resourceInputs["flowRules"] = state ? state.flowRules : undefined;
            resourceInputs["multicastLimit"] = state ? state.multicastLimit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["private"] = state ? state.private : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            resourceInputs["assignIpv4s"] = args ? args.assignIpv4s : undefined;
            resourceInputs["assignIpv6s"] = args ? args.assignIpv6s : undefined;
            resourceInputs["assignmentPools"] = args ? args.assignmentPools : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["enableBroadcast"] = args ? args.enableBroadcast : undefined;
            resourceInputs["flowRules"] = args ? args.flowRules : undefined;
            resourceInputs["multicastLimit"] = args ? args.multicastLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["private"] = args ? args.private : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * IPv4 Assignment RuleSets
     */
    assignIpv4s?: pulumi.Input<pulumi.Input<inputs.NetworkAssignIpv4>[]>;
    /**
     * IPv6 Assignment RuleSets
     */
    assignIpv6s?: pulumi.Input<pulumi.Input<inputs.NetworkAssignIpv6>[]>;
    assignmentPools?: pulumi.Input<pulumi.Input<inputs.NetworkAssignmentPool>[]>;
    /**
     * The time at which this network was created, in epoch seconds
     */
    creationTime?: pulumi.Input<number>;
    /**
     * The description of the network
     */
    description?: pulumi.Input<string>;
    /**
     * DNS settings for network members
     */
    dns?: pulumi.Input<pulumi.Input<inputs.NetworkDn>[]>;
    /**
     * Enable broadcast packets on the network
     */
    enableBroadcast?: pulumi.Input<boolean>;
    /**
     * The layer 2 flow rules to apply to packets traveling across this network. Please see
     * https://www.zerotier.com/manual/#3_4_1 for more information.
     */
    flowRules?: pulumi.Input<string>;
    /**
     * Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on
     * your network!
     */
    multicastLimit?: pulumi.Input<number>;
    /**
     * The name of the network
     */
    name?: pulumi.Input<string>;
    /**
     * Whether or not the network is private. If false, members will *NOT* need to be authorized to join.
     */
    private?: pulumi.Input<boolean>;
    routes?: pulumi.Input<pulumi.Input<inputs.NetworkRoute>[]>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * IPv4 Assignment RuleSets
     */
    assignIpv4s?: pulumi.Input<pulumi.Input<inputs.NetworkAssignIpv4>[]>;
    /**
     * IPv6 Assignment RuleSets
     */
    assignIpv6s?: pulumi.Input<pulumi.Input<inputs.NetworkAssignIpv6>[]>;
    assignmentPools?: pulumi.Input<pulumi.Input<inputs.NetworkAssignmentPool>[]>;
    /**
     * The description of the network
     */
    description?: pulumi.Input<string>;
    /**
     * DNS settings for network members
     */
    dns?: pulumi.Input<pulumi.Input<inputs.NetworkDn>[]>;
    /**
     * Enable broadcast packets on the network
     */
    enableBroadcast?: pulumi.Input<boolean>;
    /**
     * The layer 2 flow rules to apply to packets traveling across this network. Please see
     * https://www.zerotier.com/manual/#3_4_1 for more information.
     */
    flowRules?: pulumi.Input<string>;
    /**
     * Maximum number of recipients per multicast or broadcast. Warning - Setting this to 0 will disable IPv4 communication on
     * your network!
     */
    multicastLimit?: pulumi.Input<number>;
    /**
     * The name of the network
     */
    name?: pulumi.Input<string>;
    /**
     * Whether or not the network is private. If false, members will *NOT* need to be authorized to join.
     */
    private?: pulumi.Input<boolean>;
    routes?: pulumi.Input<pulumi.Input<inputs.NetworkRoute>[]>;
}
