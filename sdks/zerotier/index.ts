// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetMembersArgs, GetMembersResult, GetMembersOutputArgs } from "./getMembers";
export const getMembers: typeof import("./getMembers").getMembers = null as any;
export const getMembersOutput: typeof import("./getMembers").getMembersOutput = null as any;
utilities.lazyLoad(exports, ["getMembers","getMembersOutput"], () => require("./getMembers"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { IdentityArgs, IdentityState } from "./identity";
export type Identity = import("./identity").Identity;
export const Identity: typeof import("./identity").Identity = null as any;
utilities.lazyLoad(exports, ["Identity"], () => require("./identity"));

export { MemberArgs, MemberState } from "./member";
export type Member = import("./member").Member;
export const Member: typeof import("./member").Member = null as any;
utilities.lazyLoad(exports, ["Member"], () => require("./member"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "zerotier:index/identity:Identity":
                return new Identity(name, <any>undefined, { urn })
            case "zerotier:index/member:Member":
                return new Member(name, <any>undefined, { urn })
            case "zerotier:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "zerotier:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("zerotier", "index/identity", _module)
pulumi.runtime.registerResourceModule("zerotier", "index/member", _module)
pulumi.runtime.registerResourceModule("zerotier", "index/network", _module)
pulumi.runtime.registerResourceModule("zerotier", "index/token", _module)
pulumi.runtime.registerResourcePackage("zerotier", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:zerotier") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
