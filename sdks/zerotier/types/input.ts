// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetNetworkAssignIpv4 {
    /**
     * Use zerotier ipv4 addressing
     */
    zerotier?: boolean;
}

export interface GetNetworkAssignIpv4Args {
    /**
     * Use zerotier ipv4 addressing
     */
    zerotier?: pulumi.Input<boolean>;
}

export interface GetNetworkAssignIpv6 {
    /**
     * RFC4193 addressing method
     */
    rfc4193?: boolean;
    /**
     * 6PLANE addressing method
     */
    sixplane?: boolean;
    /**
     * Use zerotier ipv6 manual addressing
     */
    zerotier?: boolean;
}

export interface GetNetworkAssignIpv6Args {
    /**
     * RFC4193 addressing method
     */
    rfc4193?: pulumi.Input<boolean>;
    /**
     * 6PLANE addressing method
     */
    sixplane?: pulumi.Input<boolean>;
    /**
     * Use zerotier ipv6 manual addressing
     */
    zerotier?: pulumi.Input<boolean>;
}

export interface GetNetworkAssignmentPool {
    /**
     * The last address in the assignment rule. This must be the highest number in the pool. end must also be accompanied by start.
     */
    end?: string;
    /**
     * The first address in the assignment rule. This must be the lowest number in the pool. `start` must also be accompanied by `end`.
     */
    start?: string;
}

export interface GetNetworkAssignmentPoolArgs {
    /**
     * The last address in the assignment rule. This must be the highest number in the pool. end must also be accompanied by start.
     */
    end?: pulumi.Input<string>;
    /**
     * The first address in the assignment rule. This must be the lowest number in the pool. `start` must also be accompanied by `end`.
     */
    start?: pulumi.Input<string>;
}

export interface GetNetworkDn {
    /**
     * Domain suffix for DNS searches
     */
    domain: string;
    /**
     * Nameservers to send DNS requests to
     */
    servers: string[];
}

export interface GetNetworkDnArgs {
    /**
     * Domain suffix for DNS searches
     */
    domain: pulumi.Input<string>;
    /**
     * Nameservers to send DNS requests to
     */
    servers: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetNetworkRoute {
    /**
     * Network to route for
     */
    target: string;
    /**
     * Gateway address
     */
    via?: string;
}

export interface GetNetworkRouteArgs {
    /**
     * Network to route for
     */
    target: pulumi.Input<string>;
    /**
     * Gateway address
     */
    via?: pulumi.Input<string>;
}

export interface NetworkAssignIpv4 {
    /**
     * Use zerotier ipv4 addressing
     */
    zerotier?: pulumi.Input<boolean>;
}

export interface NetworkAssignIpv6 {
    /**
     * RFC4193 addressing method
     */
    rfc4193?: pulumi.Input<boolean>;
    /**
     * 6PLANE addressing method
     */
    sixplane?: pulumi.Input<boolean>;
    /**
     * Use zerotier ipv6 manual addressing
     */
    zerotier?: pulumi.Input<boolean>;
}

export interface NetworkAssignmentPool {
    /**
     * The last address in the assignment rule. This must be the highest number in the pool. end must also be accompanied by start.
     */
    end?: pulumi.Input<string>;
    /**
     * The first address in the assignment rule. This must be the lowest number in the pool. `start` must also be accompanied by `end`.
     */
    start?: pulumi.Input<string>;
}

export interface NetworkDn {
    /**
     * Domain suffix for DNS searches
     */
    domain: pulumi.Input<string>;
    /**
     * Nameservers to send DNS requests to
     */
    servers: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkRoute {
    /**
     * Network to route for
     */
    target: pulumi.Input<string>;
    /**
     * Gateway address
     */
    via?: pulumi.Input<string>;
}
