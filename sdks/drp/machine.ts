// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Machine extends pulumi.CustomResource {
    /**
     * Get an existing Machine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MachineState, opts?: pulumi.CustomResourceOptions): Machine {
        return new Machine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'drp:index/machine:Machine';

    /**
     * Returns true if the given object is an instance of Machine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Machine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Machine.__pulumiType;
    }

    /**
     * List of parameters to add to the machine when allocating. Parameters are removed on release.
     */
    public readonly addParameters!: pulumi.Output<string[] | undefined>;
    /**
     * List of profiles to add to the machine when allocating. Profiles are removed on release.
     */
    public readonly addProfiles!: pulumi.Output<string[] | undefined>;
    /**
     * Returns the IP address on the machine, Machine.Address field
     */
    public /*out*/ readonly address!: pulumi.Output<string>;
    /**
     * Workflow to run when the machine is allocated in the pool
     */
    public readonly allocateWorkflow!: pulumi.Output<string | undefined>;
    /**
     * List of ssh public keys that should be added to the access-keys parameter on the machine.
     */
    public readonly authorizedKeys!: pulumi.Output<string[] | undefined>;
    /**
     * List of parameters to add to the machine when deallocating.
     */
    public readonly deallocateParameters!: pulumi.Output<string[] | undefined>;
    /**
     * List of profiles to add to the machine when deallocating.
     */
    public readonly deallocateProfiles!: pulumi.Output<string[] | undefined>;
    /**
     * Workflow to run when the machine is released to the pool
     */
    public readonly deallocateWorkflow!: pulumi.Output<string | undefined>;
    /**
     * List of filters to restrict the search for a machie (usee Digital Rebar format e.g. FilterVar=Fn(value))
     */
    public readonly filters!: pulumi.Output<string[] | undefined>;
    /**
     * Returns the Name of the machine, Machine.Name field
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Pool to operate against for machine actions
     */
    public readonly pool!: pulumi.Output<string>;
    /**
     * Returns the Pool status of the machine, Machine.PoolStatus field
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Maximum time to wait for the machine to complete transition. Time string format.
     */
    public readonly timeout!: pulumi.Output<string>;

    /**
     * Create a Machine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MachineArgs | MachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MachineState | undefined;
            resourceInputs["addParameters"] = state ? state.addParameters : undefined;
            resourceInputs["addProfiles"] = state ? state.addProfiles : undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["allocateWorkflow"] = state ? state.allocateWorkflow : undefined;
            resourceInputs["authorizedKeys"] = state ? state.authorizedKeys : undefined;
            resourceInputs["deallocateParameters"] = state ? state.deallocateParameters : undefined;
            resourceInputs["deallocateProfiles"] = state ? state.deallocateProfiles : undefined;
            resourceInputs["deallocateWorkflow"] = state ? state.deallocateWorkflow : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as MachineArgs | undefined;
            resourceInputs["addParameters"] = args ? args.addParameters : undefined;
            resourceInputs["addProfiles"] = args ? args.addProfiles : undefined;
            resourceInputs["allocateWorkflow"] = args ? args.allocateWorkflow : undefined;
            resourceInputs["authorizedKeys"] = args ? args.authorizedKeys : undefined;
            resourceInputs["deallocateParameters"] = args ? args.deallocateParameters : undefined;
            resourceInputs["deallocateProfiles"] = args ? args.deallocateProfiles : undefined;
            resourceInputs["deallocateWorkflow"] = args ? args.deallocateWorkflow : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Machine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Machine resources.
 */
export interface MachineState {
    /**
     * List of parameters to add to the machine when allocating. Parameters are removed on release.
     */
    addParameters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of profiles to add to the machine when allocating. Profiles are removed on release.
     */
    addProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Returns the IP address on the machine, Machine.Address field
     */
    address?: pulumi.Input<string>;
    /**
     * Workflow to run when the machine is allocated in the pool
     */
    allocateWorkflow?: pulumi.Input<string>;
    /**
     * List of ssh public keys that should be added to the access-keys parameter on the machine.
     */
    authorizedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of parameters to add to the machine when deallocating.
     */
    deallocateParameters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of profiles to add to the machine when deallocating.
     */
    deallocateProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Workflow to run when the machine is released to the pool
     */
    deallocateWorkflow?: pulumi.Input<string>;
    /**
     * List of filters to restrict the search for a machie (usee Digital Rebar format e.g. FilterVar=Fn(value))
     */
    filters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Returns the Name of the machine, Machine.Name field
     */
    name?: pulumi.Input<string>;
    /**
     * Pool to operate against for machine actions
     */
    pool?: pulumi.Input<string>;
    /**
     * Returns the Pool status of the machine, Machine.PoolStatus field
     */
    status?: pulumi.Input<string>;
    /**
     * Maximum time to wait for the machine to complete transition. Time string format.
     */
    timeout?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Machine resource.
 */
export interface MachineArgs {
    /**
     * List of parameters to add to the machine when allocating. Parameters are removed on release.
     */
    addParameters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of profiles to add to the machine when allocating. Profiles are removed on release.
     */
    addProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Workflow to run when the machine is allocated in the pool
     */
    allocateWorkflow?: pulumi.Input<string>;
    /**
     * List of ssh public keys that should be added to the access-keys parameter on the machine.
     */
    authorizedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of parameters to add to the machine when deallocating.
     */
    deallocateParameters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of profiles to add to the machine when deallocating.
     */
    deallocateProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Workflow to run when the machine is released to the pool
     */
    deallocateWorkflow?: pulumi.Input<string>;
    /**
     * List of filters to restrict the search for a machie (usee Digital Rebar format e.g. FilterVar=Fn(value))
     */
    filters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Pool to operate against for machine actions
     */
    pool?: pulumi.Input<string>;
    /**
     * Maximum time to wait for the machine to complete transition. Time string format.
     */
    timeout?: pulumi.Input<string>;
}
