// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AssignGroupArgs, AssignGroupState } from "./assignGroup";
export type AssignGroup = import("./assignGroup").AssignGroup;
export const AssignGroup: typeof import("./assignGroup").AssignGroup = null as any;
utilities.lazyLoad(exports, ["AssignGroup"], () => require("./assignGroup"));

export { CreateGroupArgs, CreateGroupState } from "./createGroup";
export type CreateGroup = import("./createGroup").CreateGroup;
export const CreateGroup: typeof import("./createGroup").CreateGroup = null as any;
utilities.lazyLoad(exports, ["CreateGroup"], () => require("./createGroup"));

export { EnrollmentTokenArgs, EnrollmentTokenState } from "./enrollmentToken";
export type EnrollmentToken = import("./enrollmentToken").EnrollmentToken;
export const EnrollmentToken: typeof import("./enrollmentToken").EnrollmentToken = null as any;
utilities.lazyLoad(exports, ["EnrollmentToken"], () => require("./enrollmentToken"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oktaasa:index/assignGroup:AssignGroup":
                return new AssignGroup(name, <any>undefined, { urn })
            case "oktaasa:index/createGroup:CreateGroup":
                return new CreateGroup(name, <any>undefined, { urn })
            case "oktaasa:index/enrollmentToken:EnrollmentToken":
                return new EnrollmentToken(name, <any>undefined, { urn })
            case "oktaasa:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oktaasa", "index/assignGroup", _module)
pulumi.runtime.registerResourceModule("oktaasa", "index/createGroup", _module)
pulumi.runtime.registerResourceModule("oktaasa", "index/enrollmentToken", _module)
pulumi.runtime.registerResourceModule("oktaasa", "index/project", _module)
pulumi.runtime.registerResourcePackage("oktaasa", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:oktaasa") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
