// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Source extends pulumi.CustomResource {
    /**
     * Get an existing Source resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceState, opts?: pulumi.CustomResourceOptions): Source {
        return new Source(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pipeline:index/source:Source';

    /**
     * Returns true if the given object is an instance of Source.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Source {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Source.__pulumiType;
    }

    /**
     * For single branch pipeline sources. Name of branch that has the pipeline definition.
     */
    public readonly branch!: pulumi.Output<string | undefined>;
    /**
     * For multi-branch pipeline sources, a regular expression of the branches to exclude.
     */
    public readonly branchExcludePattern!: pulumi.Output<string | undefined>;
    /**
     * For multi-branch pipeline sources, a regular expression of the branches to include.
     */
    public readonly branchIncludePattern!: pulumi.Output<string | undefined>;
    /**
     * In a project, an array of environment names in which this pipeline source will be.
     */
    public readonly environments!: pulumi.Output<string[] | undefined>;
    /**
     * A regular expression to determine which files to include in pipeline sync (the YML files), with default pipelines.yml.
     * If a templateId was provided, it must be values.yml.
     */
    public readonly fileFilter!: pulumi.Output<string>;
    /**
     * True if the pipeline source is to be a multi-branch pipeline source. Otherwise, it will be a single-branch pipeline
     * source.
     */
    public readonly isMultiBranch!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the pipeline source. Should be prefixed with the project key
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Id of the project where the pipeline source will live.
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * Id of the project Github integration to use to create the pipeline source.
     */
    public readonly projectIntegrationId!: pulumi.Output<number>;
    /**
     * The full name of the Git repository including the user/organization as it appears in a Git clone command. For example,
     * myOrg/myProject.
     */
    public readonly repositoryFullName!: pulumi.Output<string | undefined>;
    /**
     * The id of a template to use for this pipeline source, in which case the fileFilter will only specify the values.yml
     */
    public readonly templateId!: pulumi.Output<number | undefined>;

    /**
     * Create a Source resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceArgs | SourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceState | undefined;
            resourceInputs["branch"] = state ? state.branch : undefined;
            resourceInputs["branchExcludePattern"] = state ? state.branchExcludePattern : undefined;
            resourceInputs["branchIncludePattern"] = state ? state.branchIncludePattern : undefined;
            resourceInputs["environments"] = state ? state.environments : undefined;
            resourceInputs["fileFilter"] = state ? state.fileFilter : undefined;
            resourceInputs["isMultiBranch"] = state ? state.isMultiBranch : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectIntegrationId"] = state ? state.projectIntegrationId : undefined;
            resourceInputs["repositoryFullName"] = state ? state.repositoryFullName : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
        } else {
            const args = argsOrState as SourceArgs | undefined;
            if ((!args || args.fileFilter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileFilter'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.projectIntegrationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectIntegrationId'");
            }
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["branchExcludePattern"] = args ? args.branchExcludePattern : undefined;
            resourceInputs["branchIncludePattern"] = args ? args.branchIncludePattern : undefined;
            resourceInputs["environments"] = args ? args.environments : undefined;
            resourceInputs["fileFilter"] = args ? args.fileFilter : undefined;
            resourceInputs["isMultiBranch"] = args ? args.isMultiBranch : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectIntegrationId"] = args ? args.projectIntegrationId : undefined;
            resourceInputs["repositoryFullName"] = args ? args.repositoryFullName : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Source.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Source resources.
 */
export interface SourceState {
    /**
     * For single branch pipeline sources. Name of branch that has the pipeline definition.
     */
    branch?: pulumi.Input<string>;
    /**
     * For multi-branch pipeline sources, a regular expression of the branches to exclude.
     */
    branchExcludePattern?: pulumi.Input<string>;
    /**
     * For multi-branch pipeline sources, a regular expression of the branches to include.
     */
    branchIncludePattern?: pulumi.Input<string>;
    /**
     * In a project, an array of environment names in which this pipeline source will be.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A regular expression to determine which files to include in pipeline sync (the YML files), with default pipelines.yml.
     * If a templateId was provided, it must be values.yml.
     */
    fileFilter?: pulumi.Input<string>;
    /**
     * True if the pipeline source is to be a multi-branch pipeline source. Otherwise, it will be a single-branch pipeline
     * source.
     */
    isMultiBranch?: pulumi.Input<boolean>;
    /**
     * The name of the pipeline source. Should be prefixed with the project key
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the project where the pipeline source will live.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Id of the project Github integration to use to create the pipeline source.
     */
    projectIntegrationId?: pulumi.Input<number>;
    /**
     * The full name of the Git repository including the user/organization as it appears in a Git clone command. For example,
     * myOrg/myProject.
     */
    repositoryFullName?: pulumi.Input<string>;
    /**
     * The id of a template to use for this pipeline source, in which case the fileFilter will only specify the values.yml
     */
    templateId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Source resource.
 */
export interface SourceArgs {
    /**
     * For single branch pipeline sources. Name of branch that has the pipeline definition.
     */
    branch?: pulumi.Input<string>;
    /**
     * For multi-branch pipeline sources, a regular expression of the branches to exclude.
     */
    branchExcludePattern?: pulumi.Input<string>;
    /**
     * For multi-branch pipeline sources, a regular expression of the branches to include.
     */
    branchIncludePattern?: pulumi.Input<string>;
    /**
     * In a project, an array of environment names in which this pipeline source will be.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A regular expression to determine which files to include in pipeline sync (the YML files), with default pipelines.yml.
     * If a templateId was provided, it must be values.yml.
     */
    fileFilter: pulumi.Input<string>;
    /**
     * True if the pipeline source is to be a multi-branch pipeline source. Otherwise, it will be a single-branch pipeline
     * source.
     */
    isMultiBranch?: pulumi.Input<boolean>;
    /**
     * The name of the pipeline source. Should be prefixed with the project key
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the project where the pipeline source will live.
     */
    projectId: pulumi.Input<number>;
    /**
     * Id of the project Github integration to use to create the pipeline source.
     */
    projectIntegrationId: pulumi.Input<number>;
    /**
     * The full name of the Git repository including the user/organization as it appears in a Git clone command. For example,
     * myOrg/myProject.
     */
    repositoryFullName?: pulumi.Input<string>;
    /**
     * The id of a template to use for this pipeline source, in which case the fileFilter will only specify the values.yml
     */
    templateId?: pulumi.Input<number>;
}
