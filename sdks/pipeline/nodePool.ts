// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NodePool extends pulumi.CustomResource {
    /**
     * Get an existing NodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodePoolState, opts?: pulumi.CustomResourceOptions): NodePool {
        return new NodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pipeline:index/nodePool:NodePool';

    /**
     * Returns true if the given object is an instance of NodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodePool.__pulumiType;
    }

    /**
     * Set the architecture. This is currently limited to x86_64.
     */
    public readonly architecture!: pulumi.Output<string>;
    /**
     * In a project, an array of environment names in which this pipeline source will be.
     */
    public readonly environments!: pulumi.Output<string[] | undefined>;
    /**
     * Set to true for dynamic node pool. Set to false for static node pool.
     */
    public readonly isOnDemand!: pulumi.Output<boolean>;
    /**
     * The name of the node pool. Should be prefixed with the project key
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of minutes a node can be idle before it is destroyed.
     */
    public readonly nodeIdleIntervalInMins!: pulumi.Output<number | undefined>;
    /**
     * Max number of nodes available in the pool.
     */
    public readonly numberOfNodes!: pulumi.Output<number | undefined>;
    /**
     * Operating systems supported for the selected architecture.
     */
    public readonly operatingSystem!: pulumi.Output<string>;
    /**
     * Id of the project where the node pool will live.
     */
    public readonly projectId!: pulumi.Output<number>;

    /**
     * Create a NodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodePoolArgs | NodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodePoolState | undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["environments"] = state ? state.environments : undefined;
            resourceInputs["isOnDemand"] = state ? state.isOnDemand : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeIdleIntervalInMins"] = state ? state.nodeIdleIntervalInMins : undefined;
            resourceInputs["numberOfNodes"] = state ? state.numberOfNodes : undefined;
            resourceInputs["operatingSystem"] = state ? state.operatingSystem : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as NodePoolArgs | undefined;
            if ((!args || args.architecture === undefined) && !opts.urn) {
                throw new Error("Missing required property 'architecture'");
            }
            if ((!args || args.isOnDemand === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isOnDemand'");
            }
            if ((!args || args.operatingSystem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operatingSystem'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["environments"] = args ? args.environments : undefined;
            resourceInputs["isOnDemand"] = args ? args.isOnDemand : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeIdleIntervalInMins"] = args ? args.nodeIdleIntervalInMins : undefined;
            resourceInputs["numberOfNodes"] = args ? args.numberOfNodes : undefined;
            resourceInputs["operatingSystem"] = args ? args.operatingSystem : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NodePool resources.
 */
export interface NodePoolState {
    /**
     * Set the architecture. This is currently limited to x86_64.
     */
    architecture?: pulumi.Input<string>;
    /**
     * In a project, an array of environment names in which this pipeline source will be.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to true for dynamic node pool. Set to false for static node pool.
     */
    isOnDemand?: pulumi.Input<boolean>;
    /**
     * The name of the node pool. Should be prefixed with the project key
     */
    name?: pulumi.Input<string>;
    /**
     * Number of minutes a node can be idle before it is destroyed.
     */
    nodeIdleIntervalInMins?: pulumi.Input<number>;
    /**
     * Max number of nodes available in the pool.
     */
    numberOfNodes?: pulumi.Input<number>;
    /**
     * Operating systems supported for the selected architecture.
     */
    operatingSystem?: pulumi.Input<string>;
    /**
     * Id of the project where the node pool will live.
     */
    projectId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NodePool resource.
 */
export interface NodePoolArgs {
    /**
     * Set the architecture. This is currently limited to x86_64.
     */
    architecture: pulumi.Input<string>;
    /**
     * In a project, an array of environment names in which this pipeline source will be.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to true for dynamic node pool. Set to false for static node pool.
     */
    isOnDemand: pulumi.Input<boolean>;
    /**
     * The name of the node pool. Should be prefixed with the project key
     */
    name?: pulumi.Input<string>;
    /**
     * Number of minutes a node can be idle before it is destroyed.
     */
    nodeIdleIntervalInMins?: pulumi.Input<number>;
    /**
     * Max number of nodes available in the pool.
     */
    numberOfNodes?: pulumi.Input<number>;
    /**
     * Operating systems supported for the selected architecture.
     */
    operatingSystem: pulumi.Input<string>;
    /**
     * Id of the project where the node pool will live.
     */
    projectId: pulumi.Input<number>;
}
