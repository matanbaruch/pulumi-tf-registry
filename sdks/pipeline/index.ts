// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { NodeArgs, NodeState } from "./node";
export type Node = import("./node").Node;
export const Node: typeof import("./node").Node = null as any;
utilities.lazyLoad(exports, ["Node"], () => require("./node"));

export { NodePoolArgs, NodePoolState } from "./nodePool";
export type NodePool = import("./nodePool").NodePool;
export const NodePool: typeof import("./nodePool").NodePool = null as any;
utilities.lazyLoad(exports, ["NodePool"], () => require("./nodePool"));

export { ProjectIntegrationArgs, ProjectIntegrationState } from "./projectIntegration";
export type ProjectIntegration = import("./projectIntegration").ProjectIntegration;
export const ProjectIntegration: typeof import("./projectIntegration").ProjectIntegration = null as any;
utilities.lazyLoad(exports, ["ProjectIntegration"], () => require("./projectIntegration"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SourceArgs, SourceState } from "./source";
export type Source = import("./source").Source;
export const Source: typeof import("./source").Source = null as any;
utilities.lazyLoad(exports, ["Source"], () => require("./source"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pipeline:index/node:Node":
                return new Node(name, <any>undefined, { urn })
            case "pipeline:index/nodePool:NodePool":
                return new NodePool(name, <any>undefined, { urn })
            case "pipeline:index/projectIntegration:ProjectIntegration":
                return new ProjectIntegration(name, <any>undefined, { urn })
            case "pipeline:index/source:Source":
                return new Source(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pipeline", "index/node", _module)
pulumi.runtime.registerResourceModule("pipeline", "index/nodePool", _module)
pulumi.runtime.registerResourceModule("pipeline", "index/projectIntegration", _module)
pulumi.runtime.registerResourceModule("pipeline", "index/source", _module)
pulumi.runtime.registerResourcePackage("pipeline", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pipeline") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
