// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProjectIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ProjectIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectIntegrationState, opts?: pulumi.CustomResourceOptions): ProjectIntegration {
        return new ProjectIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pipeline:index/projectIntegration:ProjectIntegration';

    /**
     * Returns true if the given object is an instance of ProjectIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectIntegration.__pulumiType;
    }

    /**
     * In a project, an array of environment names in which this pipeline source will be.
     */
    public readonly environments!: pulumi.Output<string[] | undefined>;
    /**
     * Multiple objects with the values for the integration.
     */
    public readonly formJsonValues!: pulumi.Output<outputs.ProjectIntegrationFormJsonValue[]>;
    /**
     * Set this as false to create a Pipelines integration.
     */
    public readonly isInternal!: pulumi.Output<boolean | undefined>;
    /**
     * The Id of the master integration.
     */
    public readonly masterIntegrationId!: pulumi.Output<number>;
    /**
     * The name of the master integration.
     */
    public readonly masterIntegrationName!: pulumi.Output<string | undefined>;
    /**
     * The name of the project integration. Should be prefixed with the project key
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An object containing a project name as an alternative to projectId.
     */
    public readonly project!: pulumi.Output<outputs.ProjectIntegrationProject | undefined>;
    /**
     * Id of the project.
     */
    public readonly projectId!: pulumi.Output<number>;

    /**
     * Create a ProjectIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectIntegrationArgs | ProjectIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectIntegrationState | undefined;
            resourceInputs["environments"] = state ? state.environments : undefined;
            resourceInputs["formJsonValues"] = state ? state.formJsonValues : undefined;
            resourceInputs["isInternal"] = state ? state.isInternal : undefined;
            resourceInputs["masterIntegrationId"] = state ? state.masterIntegrationId : undefined;
            resourceInputs["masterIntegrationName"] = state ? state.masterIntegrationName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as ProjectIntegrationArgs | undefined;
            if ((!args || args.formJsonValues === undefined) && !opts.urn) {
                throw new Error("Missing required property 'formJsonValues'");
            }
            if ((!args || args.masterIntegrationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterIntegrationId'");
            }
            resourceInputs["environments"] = args ? args.environments : undefined;
            resourceInputs["formJsonValues"] = args ? args.formJsonValues : undefined;
            resourceInputs["isInternal"] = args ? args.isInternal : undefined;
            resourceInputs["masterIntegrationId"] = args ? args.masterIntegrationId : undefined;
            resourceInputs["masterIntegrationName"] = args ? args.masterIntegrationName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProjectIntegration resources.
 */
export interface ProjectIntegrationState {
    /**
     * In a project, an array of environment names in which this pipeline source will be.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Multiple objects with the values for the integration.
     */
    formJsonValues?: pulumi.Input<pulumi.Input<inputs.ProjectIntegrationFormJsonValue>[]>;
    /**
     * Set this as false to create a Pipelines integration.
     */
    isInternal?: pulumi.Input<boolean>;
    /**
     * The Id of the master integration.
     */
    masterIntegrationId?: pulumi.Input<number>;
    /**
     * The name of the master integration.
     */
    masterIntegrationName?: pulumi.Input<string>;
    /**
     * The name of the project integration. Should be prefixed with the project key
     */
    name?: pulumi.Input<string>;
    /**
     * An object containing a project name as an alternative to projectId.
     */
    project?: pulumi.Input<inputs.ProjectIntegrationProject>;
    /**
     * Id of the project.
     */
    projectId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ProjectIntegration resource.
 */
export interface ProjectIntegrationArgs {
    /**
     * In a project, an array of environment names in which this pipeline source will be.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Multiple objects with the values for the integration.
     */
    formJsonValues: pulumi.Input<pulumi.Input<inputs.ProjectIntegrationFormJsonValue>[]>;
    /**
     * Set this as false to create a Pipelines integration.
     */
    isInternal?: pulumi.Input<boolean>;
    /**
     * The Id of the master integration.
     */
    masterIntegrationId: pulumi.Input<number>;
    /**
     * The name of the master integration.
     */
    masterIntegrationName?: pulumi.Input<string>;
    /**
     * The name of the project integration. Should be prefixed with the project key
     */
    name?: pulumi.Input<string>;
    /**
     * An object containing a project name as an alternative to projectId.
     */
    project?: pulumi.Input<inputs.ProjectIntegrationProject>;
    /**
     * Id of the project.
     */
    projectId?: pulumi.Input<number>;
}
