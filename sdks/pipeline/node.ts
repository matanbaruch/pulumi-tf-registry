// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Node extends pulumi.CustomResource {
    /**
     * Get an existing Node resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeState, opts?: pulumi.CustomResourceOptions): Node {
        return new Node(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pipeline:index/node:Node';

    /**
     * Returns true if the given object is an instance of Node.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Node {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Node.__pulumiType;
    }

    /**
     * The name of the node. Should be prefixed with the project key
     */
    public readonly friendlyName!: pulumi.Output<string>;
    /**
     * Node address for auto-initialization.
     */
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    /**
     * Determine auto or manual initialization.
     */
    public readonly isAutoInitialized!: pulumi.Output<boolean>;
    /**
     * Set to true for dynamic node pool. Set to false for static node pool.
     */
    public readonly isOnDemand!: pulumi.Output<boolean>;
    /**
     * Enable/disable the use of swap space to increase the amount of virtual memory available to the node. Not available to
     * Windows node pools.
     */
    public readonly isSwapEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Id of the node pool where the node will live.
     */
    public readonly nodePoolId!: pulumi.Output<number>;
    /**
     * Id of the project where the node will live.
     */
    public readonly projectId!: pulumi.Output<number>;
    public /*out*/ readonly token!: pulumi.Output<string>;

    /**
     * Create a Node resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeArgs | NodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeState | undefined;
            resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["isAutoInitialized"] = state ? state.isAutoInitialized : undefined;
            resourceInputs["isOnDemand"] = state ? state.isOnDemand : undefined;
            resourceInputs["isSwapEnabled"] = state ? state.isSwapEnabled : undefined;
            resourceInputs["nodePoolId"] = state ? state.nodePoolId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as NodeArgs | undefined;
            if ((!args || args.friendlyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'friendlyName'");
            }
            if ((!args || args.isAutoInitialized === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isAutoInitialized'");
            }
            if ((!args || args.isOnDemand === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isOnDemand'");
            }
            if ((!args || args.nodePoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodePoolId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["isAutoInitialized"] = args ? args.isAutoInitialized : undefined;
            resourceInputs["isOnDemand"] = args ? args.isOnDemand : undefined;
            resourceInputs["isSwapEnabled"] = args ? args.isSwapEnabled : undefined;
            resourceInputs["nodePoolId"] = args ? args.nodePoolId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Node.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Node resources.
 */
export interface NodeState {
    /**
     * The name of the node. Should be prefixed with the project key
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * Node address for auto-initialization.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Determine auto or manual initialization.
     */
    isAutoInitialized?: pulumi.Input<boolean>;
    /**
     * Set to true for dynamic node pool. Set to false for static node pool.
     */
    isOnDemand?: pulumi.Input<boolean>;
    /**
     * Enable/disable the use of swap space to increase the amount of virtual memory available to the node. Not available to
     * Windows node pools.
     */
    isSwapEnabled?: pulumi.Input<boolean>;
    /**
     * Id of the node pool where the node will live.
     */
    nodePoolId?: pulumi.Input<number>;
    /**
     * Id of the project where the node will live.
     */
    projectId?: pulumi.Input<number>;
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Node resource.
 */
export interface NodeArgs {
    /**
     * The name of the node. Should be prefixed with the project key
     */
    friendlyName: pulumi.Input<string>;
    /**
     * Node address for auto-initialization.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Determine auto or manual initialization.
     */
    isAutoInitialized: pulumi.Input<boolean>;
    /**
     * Set to true for dynamic node pool. Set to false for static node pool.
     */
    isOnDemand: pulumi.Input<boolean>;
    /**
     * Enable/disable the use of swap space to increase the amount of virtual memory available to the node. Not available to
     * Windows node pools.
     */
    isSwapEnabled?: pulumi.Input<boolean>;
    /**
     * Id of the node pool where the node will live.
     */
    nodePoolId: pulumi.Input<number>;
    /**
     * Id of the project where the node will live.
     */
    projectId: pulumi.Input<number>;
}
