// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getQueryElasticsearch(args: GetQueryElasticsearchArgs, opts?: pulumi.InvokeOptions): Promise<GetQueryElasticsearchResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("schemas:index/getQueryElasticsearch:getQueryElasticsearch", {
        "alias": args.alias,
        "bucketAggs": args.bucketAggs,
        "hide": args.hide,
        "metrics": args.metrics,
        "query": args.query,
        "queryType": args.queryType,
        "refId": args.refId,
        "timeField": args.timeField,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getQueryElasticsearch.
 */
export interface GetQueryElasticsearchArgs {
    alias?: string;
    bucketAggs?: inputs.GetQueryElasticsearchBucketAgg[];
    hide?: boolean;
    metrics?: inputs.GetQueryElasticsearchMetric[];
    query?: string;
    queryType?: string;
    refId: string;
    timeField?: string;
}

/**
 * A collection of values returned by getQueryElasticsearch.
 */
export interface GetQueryElasticsearchResult {
    readonly alias?: string;
    readonly bucketAggs?: outputs.GetQueryElasticsearchBucketAgg[];
    readonly hide?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly metrics?: outputs.GetQueryElasticsearchMetric[];
    readonly query?: string;
    readonly queryType?: string;
    readonly refId: string;
    readonly renderedJson: string;
    readonly timeField?: string;
}
export function getQueryElasticsearchOutput(args: GetQueryElasticsearchOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetQueryElasticsearchResult> {
    return pulumi.output(args).apply((a: any) => getQueryElasticsearch(a, opts))
}

/**
 * A collection of arguments for invoking getQueryElasticsearch.
 */
export interface GetQueryElasticsearchOutputArgs {
    alias?: pulumi.Input<string>;
    bucketAggs?: pulumi.Input<pulumi.Input<inputs.GetQueryElasticsearchBucketAggArgs>[]>;
    hide?: pulumi.Input<boolean>;
    metrics?: pulumi.Input<pulumi.Input<inputs.GetQueryElasticsearchMetricArgs>[]>;
    query?: pulumi.Input<string>;
    queryType?: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    timeField?: pulumi.Input<string>;
}
