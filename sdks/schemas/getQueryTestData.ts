// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getQueryTestData(args: GetQueryTestDataArgs, opts?: pulumi.InvokeOptions): Promise<GetQueryTestDataResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("schemas:index/getQueryTestData:getQueryTestData", {
        "alias": args.alias,
        "channel": args.channel,
        "csvContent": args.csvContent,
        "csvFileName": args.csvFileName,
        "csvWaves": args.csvWaves,
        "dropPercent": args.dropPercent,
        "errorType": args.errorType,
        "hide": args.hide,
        "labels": args.labels,
        "levelColumn": args.levelColumn,
        "lines": args.lines,
        "nodes": args.nodes,
        "pulseWave": args.pulseWave,
        "queryType": args.queryType,
        "rawFrameContent": args.rawFrameContent,
        "refId": args.refId,
        "scenarioId": args.scenarioId,
        "seriesCount": args.seriesCount,
        "sim": args.sim,
        "spanCount": args.spanCount,
        "stream": args.stream,
        "stringInput": args.stringInput,
        "usa": args.usa,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getQueryTestData.
 */
export interface GetQueryTestDataArgs {
    alias?: string;
    channel?: string;
    csvContent?: string;
    csvFileName?: string;
    csvWaves?: inputs.GetQueryTestDataCsvWafe[];
    dropPercent?: number;
    errorType?: string;
    hide?: boolean;
    labels?: string;
    levelColumn?: boolean;
    lines?: number;
    nodes?: inputs.GetQueryTestDataNodes;
    pulseWave?: inputs.GetQueryTestDataPulseWave;
    queryType?: string;
    rawFrameContent?: string;
    refId: string;
    scenarioId?: string;
    seriesCount?: number;
    sim?: inputs.GetQueryTestDataSim;
    spanCount?: number;
    stream?: inputs.GetQueryTestDataStream;
    stringInput?: string;
    usa?: inputs.GetQueryTestDataUsa;
}

/**
 * A collection of values returned by getQueryTestData.
 */
export interface GetQueryTestDataResult {
    readonly alias?: string;
    readonly channel?: string;
    readonly csvContent?: string;
    readonly csvFileName?: string;
    readonly csvWaves?: outputs.GetQueryTestDataCsvWafe[];
    readonly dropPercent?: number;
    readonly errorType?: string;
    readonly hide?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly labels?: string;
    readonly levelColumn?: boolean;
    readonly lines?: number;
    readonly nodes: outputs.GetQueryTestDataNodes;
    readonly pulseWave: outputs.GetQueryTestDataPulseWave;
    readonly queryType?: string;
    readonly rawFrameContent?: string;
    readonly refId: string;
    readonly renderedJson: string;
    readonly scenarioId: string;
    readonly seriesCount?: number;
    readonly sim: outputs.GetQueryTestDataSim;
    readonly spanCount?: number;
    readonly stream: outputs.GetQueryTestDataStream;
    readonly stringInput?: string;
    readonly usa: outputs.GetQueryTestDataUsa;
}
export function getQueryTestDataOutput(args: GetQueryTestDataOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetQueryTestDataResult> {
    return pulumi.output(args).apply((a: any) => getQueryTestData(a, opts))
}

/**
 * A collection of arguments for invoking getQueryTestData.
 */
export interface GetQueryTestDataOutputArgs {
    alias?: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    csvContent?: pulumi.Input<string>;
    csvFileName?: pulumi.Input<string>;
    csvWaves?: pulumi.Input<pulumi.Input<inputs.GetQueryTestDataCsvWafeArgs>[]>;
    dropPercent?: pulumi.Input<number>;
    errorType?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    labels?: pulumi.Input<string>;
    levelColumn?: pulumi.Input<boolean>;
    lines?: pulumi.Input<number>;
    nodes?: pulumi.Input<inputs.GetQueryTestDataNodesArgs>;
    pulseWave?: pulumi.Input<inputs.GetQueryTestDataPulseWaveArgs>;
    queryType?: pulumi.Input<string>;
    rawFrameContent?: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    scenarioId?: pulumi.Input<string>;
    seriesCount?: pulumi.Input<number>;
    sim?: pulumi.Input<inputs.GetQueryTestDataSimArgs>;
    spanCount?: pulumi.Input<number>;
    stream?: pulumi.Input<inputs.GetQueryTestDataStreamArgs>;
    stringInput?: pulumi.Input<string>;
    usa?: pulumi.Input<inputs.GetQueryTestDataUsaArgs>;
}
