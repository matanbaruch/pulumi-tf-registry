// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPanelCandlestick(args?: GetPanelCandlestickArgs, opts?: pulumi.InvokeOptions): Promise<GetPanelCandlestickResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("schemas:index/getPanelCandlestick:getPanelCandlestick", {
        "datasource": args.datasource,
        "description": args.description,
        "fieldConfig": args.fieldConfig,
        "gridPos": args.gridPos,
        "interval": args.interval,
        "libraryPanel": args.libraryPanel,
        "links": args.links,
        "maxDataPoints": args.maxDataPoints,
        "options": args.options,
        "pluginVersion": args.pluginVersion,
        "repeat": args.repeat,
        "repeatDirection": args.repeatDirection,
        "repeatPanelId": args.repeatPanelId,
        "tags": args.tags,
        "targets": args.targets,
        "timeFrom": args.timeFrom,
        "timeShift": args.timeShift,
        "title": args.title,
        "transformations": args.transformations,
        "transparent": args.transparent,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPanelCandlestick.
 */
export interface GetPanelCandlestickArgs {
    datasource?: inputs.GetPanelCandlestickDatasource;
    description?: string;
    fieldConfig?: inputs.GetPanelCandlestickFieldConfig;
    gridPos?: inputs.GetPanelCandlestickGridPos;
    interval?: string;
    libraryPanel?: inputs.GetPanelCandlestickLibraryPanel;
    links?: inputs.GetPanelCandlestickLink[];
    maxDataPoints?: number;
    options?: inputs.GetPanelCandlestickOptions;
    pluginVersion?: string;
    repeat?: string;
    repeatDirection?: string;
    repeatPanelId?: number;
    tags?: string[];
    targets?: string[];
    timeFrom?: string;
    timeShift?: string;
    title?: string;
    transformations?: inputs.GetPanelCandlestickTransformation[];
    transparent?: boolean;
    type?: string;
}

/**
 * A collection of values returned by getPanelCandlestick.
 */
export interface GetPanelCandlestickResult {
    readonly datasource: outputs.GetPanelCandlestickDatasource;
    readonly description?: string;
    readonly fieldConfig: outputs.GetPanelCandlestickFieldConfig;
    readonly gridPos: outputs.GetPanelCandlestickGridPos;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly interval?: string;
    readonly libraryPanel: outputs.GetPanelCandlestickLibraryPanel;
    readonly links?: outputs.GetPanelCandlestickLink[];
    readonly maxDataPoints?: number;
    readonly options: outputs.GetPanelCandlestickOptions;
    readonly pluginVersion?: string;
    readonly renderedJson: string;
    readonly repeat?: string;
    readonly repeatDirection: string;
    readonly repeatPanelId?: number;
    readonly tags?: string[];
    readonly targets?: string[];
    readonly timeFrom?: string;
    readonly timeShift?: string;
    readonly title?: string;
    readonly transformations?: outputs.GetPanelCandlestickTransformation[];
    readonly transparent: boolean;
    readonly type: string;
}
export function getPanelCandlestickOutput(args?: GetPanelCandlestickOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPanelCandlestickResult> {
    return pulumi.output(args).apply((a: any) => getPanelCandlestick(a, opts))
}

/**
 * A collection of arguments for invoking getPanelCandlestick.
 */
export interface GetPanelCandlestickOutputArgs {
    datasource?: pulumi.Input<inputs.GetPanelCandlestickDatasourceArgs>;
    description?: pulumi.Input<string>;
    fieldConfig?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigArgs>;
    gridPos?: pulumi.Input<inputs.GetPanelCandlestickGridPosArgs>;
    interval?: pulumi.Input<string>;
    libraryPanel?: pulumi.Input<inputs.GetPanelCandlestickLibraryPanelArgs>;
    links?: pulumi.Input<pulumi.Input<inputs.GetPanelCandlestickLinkArgs>[]>;
    maxDataPoints?: pulumi.Input<number>;
    options?: pulumi.Input<inputs.GetPanelCandlestickOptionsArgs>;
    pluginVersion?: pulumi.Input<string>;
    repeat?: pulumi.Input<string>;
    repeatDirection?: pulumi.Input<string>;
    repeatPanelId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    timeFrom?: pulumi.Input<string>;
    timeShift?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    transformations?: pulumi.Input<pulumi.Input<inputs.GetPanelCandlestickTransformationArgs>[]>;
    transparent?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
}
