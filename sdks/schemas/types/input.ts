// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetCoreDashboardAnnotations {
    /**
     * List of annotations
     */
    lists?: inputs.GetCoreDashboardAnnotationsList[];
}

export interface GetCoreDashboardAnnotationsArgs {
    /**
     * List of annotations
     */
    lists?: pulumi.Input<pulumi.Input<inputs.GetCoreDashboardAnnotationsListArgs>[]>;
}

export interface GetCoreDashboardAnnotationsList {
    /**
     * Datasource where the annotations data is
     */
    datasource?: inputs.GetCoreDashboardAnnotationsListDatasource;
    /**
     * When enabled the annotation query is issued with every dashboard refresh. Defaults to true.
     */
    enable?: boolean;
    /**
     * Filters to apply when fetching annotations
     */
    filter?: inputs.GetCoreDashboardAnnotationsListFilter;
    /**
     * Annotation queries can be toggled on or off at the top of the dashboard.
     * When hide is true, the toggle is not shown in the dashboard. Defaults to false.
     */
    hide?: boolean;
    /**
     * Color to use for the annotation event markers
     */
    iconColor: string;
    /**
     * Name of annotation.
     */
    name: string;
    /**
     * TODO.. this should just be a normal query target
     */
    target?: inputs.GetCoreDashboardAnnotationsListTarget;
    /**
     * TODO -- this should not exist here, it is based on the --grafana-- datasource
     */
    type?: string;
}

export interface GetCoreDashboardAnnotationsListArgs {
    /**
     * Datasource where the annotations data is
     */
    datasource?: pulumi.Input<inputs.GetCoreDashboardAnnotationsListDatasourceArgs>;
    /**
     * When enabled the annotation query is issued with every dashboard refresh. Defaults to true.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Filters to apply when fetching annotations
     */
    filter?: pulumi.Input<inputs.GetCoreDashboardAnnotationsListFilterArgs>;
    /**
     * Annotation queries can be toggled on or off at the top of the dashboard.
     * When hide is true, the toggle is not shown in the dashboard. Defaults to false.
     */
    hide?: pulumi.Input<boolean>;
    /**
     * Color to use for the annotation event markers
     */
    iconColor: pulumi.Input<string>;
    /**
     * Name of annotation.
     */
    name: pulumi.Input<string>;
    /**
     * TODO.. this should just be a normal query target
     */
    target?: pulumi.Input<inputs.GetCoreDashboardAnnotationsListTargetArgs>;
    /**
     * TODO -- this should not exist here, it is based on the --grafana-- datasource
     */
    type?: pulumi.Input<string>;
}

export interface GetCoreDashboardAnnotationsListDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetCoreDashboardAnnotationsListDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetCoreDashboardAnnotationsListFilter {
    /**
     * Should the specified panels be included or excluded. Defaults to false.
     */
    exclude?: boolean;
    /**
     * Panel IDs that should be included or excluded
     */
    ids?: number[];
}

export interface GetCoreDashboardAnnotationsListFilterArgs {
    /**
     * Should the specified panels be included or excluded. Defaults to false.
     */
    exclude?: pulumi.Input<boolean>;
    /**
     * Panel IDs that should be included or excluded
     */
    ids?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface GetCoreDashboardAnnotationsListTarget {
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     */
    limit: number;
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     */
    matchAny: boolean;
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     */
    tags?: string[];
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     */
    type: string;
}

export interface GetCoreDashboardAnnotationsListTargetArgs {
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     */
    limit: pulumi.Input<number>;
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     */
    matchAny: pulumi.Input<boolean>;
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     */
    type: pulumi.Input<string>;
}

export interface GetCoreDashboardLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetCoreDashboardLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetCoreDashboardSnapshot {
    /**
     * Time when the snapshot was created
     */
    created: string;
    /**
     * Time when the snapshot expires, default is never to expire
     */
    expires: string;
    /**
     * Is the snapshot saved in an external grafana instance
     */
    external: boolean;
    /**
     * external url, if snapshot was shared in external grafana instance
     */
    externalUrl: string;
    /**
     * Optional, defined the unique key of the snapshot, required if external is true
     */
    key: string;
    /**
     * Optional, name of the snapshot
     */
    name: string;
    /**
     * org id of the snapshot
     */
    orgId: number;
    /**
     * last time when the snapshot was updated
     */
    updated: string;
    /**
     * url of the snapshot, if snapshot was shared internally
     */
    url?: string;
    /**
     * user id of the snapshot creator
     */
    userId: number;
}

export interface GetCoreDashboardSnapshotArgs {
    /**
     * Time when the snapshot was created
     */
    created: pulumi.Input<string>;
    /**
     * Time when the snapshot expires, default is never to expire
     */
    expires: pulumi.Input<string>;
    /**
     * Is the snapshot saved in an external grafana instance
     */
    external: pulumi.Input<boolean>;
    /**
     * external url, if snapshot was shared in external grafana instance
     */
    externalUrl: pulumi.Input<string>;
    /**
     * Optional, defined the unique key of the snapshot, required if external is true
     */
    key: pulumi.Input<string>;
    /**
     * Optional, name of the snapshot
     */
    name: pulumi.Input<string>;
    /**
     * org id of the snapshot
     */
    orgId: pulumi.Input<number>;
    /**
     * last time when the snapshot was updated
     */
    updated: pulumi.Input<string>;
    /**
     * url of the snapshot, if snapshot was shared internally
     */
    url?: pulumi.Input<string>;
    /**
     * user id of the snapshot creator
     */
    userId: pulumi.Input<number>;
}

export interface GetCoreDashboardTemplating {
    /**
     * List of configured template variables with their saved values along with some other metadata
     */
    lists?: inputs.GetCoreDashboardTemplatingList[];
}

export interface GetCoreDashboardTemplatingArgs {
    /**
     * List of configured template variables with their saved values along with some other metadata
     */
    lists?: pulumi.Input<pulumi.Input<inputs.GetCoreDashboardTemplatingListArgs>[]>;
}

export interface GetCoreDashboardTemplatingList {
    /**
     * Format to use while fetching all values from data source, eg: wildcard, glob, regex, pipe, etc.
     */
    allFormat?: string;
    /**
     * Shows current selected variable text/value on the dashboard
     */
    current?: inputs.GetCoreDashboardTemplatingListCurrent;
    /**
     * Data source used to fetch values for a variable. It can be defined but null.
     */
    datasource?: inputs.GetCoreDashboardTemplatingListDatasource;
    /**
     * Description of variable. It can be defined but null.
     */
    description?: string;
    /**
     * Visibility configuration for the variable
     */
    hide: number;
    /**
     * Optional display name
     */
    label?: string;
    /**
     * Whether multiple values can be selected or not from variable value list. Defaults to false.
     */
    multi?: boolean;
    /**
     * Name of variable
     */
    name: string;
    /**
     * Options that can be selected for a variable.
     */
    options?: inputs.GetCoreDashboardTemplatingListOption[];
    /**
     * JSON-encoded string. Query used to fetch values for a variable
     */
    query?: string;
    refresh?: number;
    /**
     * Whether the variable value should be managed by URL query params or not. Defaults to false.
     */
    skipUrlSync?: boolean;
    /**
     * Type of variable
     */
    type: string;
}

export interface GetCoreDashboardTemplatingListArgs {
    /**
     * Format to use while fetching all values from data source, eg: wildcard, glob, regex, pipe, etc.
     */
    allFormat?: pulumi.Input<string>;
    /**
     * Shows current selected variable text/value on the dashboard
     */
    current?: pulumi.Input<inputs.GetCoreDashboardTemplatingListCurrentArgs>;
    /**
     * Data source used to fetch values for a variable. It can be defined but null.
     */
    datasource?: pulumi.Input<inputs.GetCoreDashboardTemplatingListDatasourceArgs>;
    /**
     * Description of variable. It can be defined but null.
     */
    description?: pulumi.Input<string>;
    /**
     * Visibility configuration for the variable
     */
    hide: pulumi.Input<number>;
    /**
     * Optional display name
     */
    label?: pulumi.Input<string>;
    /**
     * Whether multiple values can be selected or not from variable value list. Defaults to false.
     */
    multi?: pulumi.Input<boolean>;
    /**
     * Name of variable
     */
    name: pulumi.Input<string>;
    /**
     * Options that can be selected for a variable.
     */
    options?: pulumi.Input<pulumi.Input<inputs.GetCoreDashboardTemplatingListOptionArgs>[]>;
    /**
     * JSON-encoded string. Query used to fetch values for a variable
     */
    query?: pulumi.Input<string>;
    refresh?: pulumi.Input<number>;
    /**
     * Whether the variable value should be managed by URL query params or not. Defaults to false.
     */
    skipUrlSync?: pulumi.Input<boolean>;
    /**
     * Type of variable
     */
    type: pulumi.Input<string>;
}

export interface GetCoreDashboardTemplatingListCurrent {
    /**
     * Whether the option is selected or not
     */
    selected?: boolean;
    /**
     * JSON-encoded string. Text to be displayed for the option
     */
    text: string;
    /**
     * JSON-encoded string. Value of the option
     */
    value: string;
}

export interface GetCoreDashboardTemplatingListCurrentArgs {
    /**
     * Whether the option is selected or not
     */
    selected?: pulumi.Input<boolean>;
    /**
     * JSON-encoded string. Text to be displayed for the option
     */
    text: pulumi.Input<string>;
    /**
     * JSON-encoded string. Value of the option
     */
    value: pulumi.Input<string>;
}

export interface GetCoreDashboardTemplatingListDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetCoreDashboardTemplatingListDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetCoreDashboardTemplatingListOption {
    /**
     * Whether the option is selected or not
     */
    selected?: boolean;
    /**
     * JSON-encoded string. Text to be displayed for the option
     */
    text: string;
    /**
     * JSON-encoded string. Value of the option
     */
    value: string;
}

export interface GetCoreDashboardTemplatingListOptionArgs {
    /**
     * Whether the option is selected or not
     */
    selected?: pulumi.Input<boolean>;
    /**
     * JSON-encoded string. Text to be displayed for the option
     */
    text: pulumi.Input<string>;
    /**
     * JSON-encoded string. Value of the option
     */
    value: pulumi.Input<string>;
}

export interface GetCoreDashboardTime {
    /**
     * Defaults to "now-6h".
     */
    from?: string;
    /**
     * Defaults to "now".
     */
    to?: string;
}

export interface GetCoreDashboardTimeArgs {
    /**
     * Defaults to "now-6h".
     */
    from?: pulumi.Input<string>;
    /**
     * Defaults to "now".
     */
    to?: pulumi.Input<string>;
}

export interface GetCoreDashboardTimepicker {
    /**
     * Whether timepicker is collapsed or not. Has no effect on provisioned dashboard. Defaults to false.
     */
    collapse?: boolean;
    /**
     * Whether timepicker is enabled or not. Has no effect on provisioned dashboard. Defaults to true.
     */
    enable?: boolean;
    /**
     * Whether timepicker is visible or not. Defaults to false.
     */
    hidden?: boolean;
    /**
     * Interval options available in the refresh picker dropdown.
     */
    refreshIntervals?: string[];
    /**
     * Selectable options available in the time picker dropdown. Has no effect on provisioned dashboard.
     */
    timeOptions?: string[];
}

export interface GetCoreDashboardTimepickerArgs {
    /**
     * Whether timepicker is collapsed or not. Has no effect on provisioned dashboard. Defaults to false.
     */
    collapse?: pulumi.Input<boolean>;
    /**
     * Whether timepicker is enabled or not. Has no effect on provisioned dashboard. Defaults to true.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Whether timepicker is visible or not. Defaults to false.
     */
    hidden?: pulumi.Input<boolean>;
    /**
     * Interval options available in the refresh picker dropdown.
     */
    refreshIntervals?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Selectable options available in the time picker dropdown. Has no effect on provisioned dashboard.
     */
    timeOptions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetPanelAlertGroupsDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelAlertGroupsDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelAlertGroupsFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelAlertGroupsFieldConfigOverride[];
}

export interface GetPanelAlertGroupsFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigOverrideArgs>[]>;
}

export interface GetPanelAlertGroupsFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelAlertGroupsFieldConfigDefaultsColor;
    /**
     * custom is specified by the FieldConfig field
     * in panel plugin schemas.
     */
    custom?: inputs.GetPanelAlertGroupsFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelAlertGroupsFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelAlertGroupsFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsColorArgs>;
    /**
     * custom is specified by the FieldConfig field
     * in panel plugin schemas.
     */
    custom?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsCustom {
}

export interface GetPanelAlertGroupsFieldConfigDefaultsCustomArgs {
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelAlertGroupsFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelAlertGroupsFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsFieldConfigOverride {
    matcher?: inputs.GetPanelAlertGroupsFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelAlertGroupsFieldConfigOverrideProperty[];
}

export interface GetPanelAlertGroupsFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelAlertGroupsFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelAlertGroupsFieldConfigOverrideMatcher {
}

export interface GetPanelAlertGroupsFieldConfigOverrideMatcherArgs {
}

export interface GetPanelAlertGroupsFieldConfigOverrideProperty {
}

export interface GetPanelAlertGroupsFieldConfigOverridePropertyArgs {
}

export interface GetPanelAlertGroupsGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelAlertGroupsGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelAlertGroupsLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelAlertGroupsLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelAlertGroupsLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsOptions {
    /**
     * Name of the alertmanager used as a source for alerts
     */
    alertmanager: string;
    /**
     * Expand all alert groups by default
     */
    expandAll: boolean;
    /**
     * Comma-separated list of values used to filter alert results
     */
    labels: string;
}

export interface GetPanelAlertGroupsOptionsArgs {
    /**
     * Name of the alertmanager used as a source for alerts
     */
    alertmanager: pulumi.Input<string>;
    /**
     * Expand all alert groups by default
     */
    expandAll: pulumi.Input<boolean>;
    /**
     * Comma-separated list of values used to filter alert results
     */
    labels: pulumi.Input<string>;
}

export interface GetPanelAlertGroupsTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelAlertGroupsTransformationFilter;
}

export interface GetPanelAlertGroupsTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelAlertGroupsTransformationFilterArgs>;
}

export interface GetPanelAlertGroupsTransformationFilter {
}

export interface GetPanelAlertGroupsTransformationFilterArgs {
}

export interface GetPanelAnnotationsListDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelAnnotationsListDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelAnnotationsListFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelAnnotationsListFieldConfigOverride[];
}

export interface GetPanelAnnotationsListFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigOverrideArgs>[]>;
}

export interface GetPanelAnnotationsListFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelAnnotationsListFieldConfigDefaultsColor;
    /**
     * custom is specified by the FieldConfig field
     * in panel plugin schemas.
     */
    custom?: inputs.GetPanelAnnotationsListFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelAnnotationsListFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelAnnotationsListFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsColorArgs>;
    /**
     * custom is specified by the FieldConfig field
     * in panel plugin schemas.
     */
    custom?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsCustom {
}

export interface GetPanelAnnotationsListFieldConfigDefaultsCustomArgs {
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelAnnotationsListFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelAnnotationsListFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListFieldConfigOverride {
    matcher?: inputs.GetPanelAnnotationsListFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelAnnotationsListFieldConfigOverrideProperty[];
}

export interface GetPanelAnnotationsListFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelAnnotationsListFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelAnnotationsListFieldConfigOverrideMatcher {
}

export interface GetPanelAnnotationsListFieldConfigOverrideMatcherArgs {
}

export interface GetPanelAnnotationsListFieldConfigOverrideProperty {
}

export interface GetPanelAnnotationsListFieldConfigOverridePropertyArgs {
}

export interface GetPanelAnnotationsListGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelAnnotationsListGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelAnnotationsListLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelAnnotationsListLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelAnnotationsListLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelAnnotationsListOptions {
    /**
     * Defaults to 10.
     */
    limit?: number;
    /**
     * Defaults to "10m".
     */
    navigateAfter?: string;
    /**
     * Defaults to "10m".
     */
    navigateBefore?: string;
    /**
     * Defaults to true.
     */
    navigateToPanel?: boolean;
    /**
     * Defaults to false.
     */
    onlyFromThisDashboard?: boolean;
    /**
     * Defaults to false.
     */
    onlyInTimeRange?: boolean;
    /**
     * Defaults to true.
     */
    showTags?: boolean;
    /**
     * Defaults to true.
     */
    showTime?: boolean;
    /**
     * Defaults to true.
     */
    showUser?: boolean;
    tags?: string[];
}

export interface GetPanelAnnotationsListOptionsArgs {
    /**
     * Defaults to 10.
     */
    limit?: pulumi.Input<number>;
    /**
     * Defaults to "10m".
     */
    navigateAfter?: pulumi.Input<string>;
    /**
     * Defaults to "10m".
     */
    navigateBefore?: pulumi.Input<string>;
    /**
     * Defaults to true.
     */
    navigateToPanel?: pulumi.Input<boolean>;
    /**
     * Defaults to false.
     */
    onlyFromThisDashboard?: pulumi.Input<boolean>;
    /**
     * Defaults to false.
     */
    onlyInTimeRange?: pulumi.Input<boolean>;
    /**
     * Defaults to true.
     */
    showTags?: pulumi.Input<boolean>;
    /**
     * Defaults to true.
     */
    showTime?: pulumi.Input<boolean>;
    /**
     * Defaults to true.
     */
    showUser?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetPanelAnnotationsListTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelAnnotationsListTransformationFilter;
}

export interface GetPanelAnnotationsListTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelAnnotationsListTransformationFilterArgs>;
}

export interface GetPanelAnnotationsListTransformationFilter {
}

export interface GetPanelAnnotationsListTransformationFilterArgs {
}

export interface GetPanelBarChartDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelBarChartDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelBarChartFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelBarChartFieldConfigOverride[];
}

export interface GetPanelBarChartFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelBarChartFieldConfigOverrideArgs>[]>;
}

export interface GetPanelBarChartFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelBarChartFieldConfigDefaultsColor;
    custom?: inputs.GetPanelBarChartFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelBarChartFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelBarChartFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelBarChartFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelBarChartFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelBarChartFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity?: number;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode?: string;
    hideFrom?: inputs.GetPanelBarChartFieldConfigDefaultsCustomHideFrom;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth?: number;
    scaleDistribution?: inputs.GetPanelBarChartFieldConfigDefaultsCustomScaleDistribution;
    /**
     * Threshold rendering
     */
    thresholdsStyle?: inputs.GetPanelBarChartFieldConfigDefaultsCustomThresholdsStyle;
}

export interface GetPanelBarChartFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity?: pulumi.Input<number>;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsCustomHideFromArgs>;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth?: pulumi.Input<number>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsCustomScaleDistributionArgs>;
    /**
     * Threshold rendering
     */
    thresholdsStyle?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsCustomThresholdsStyleArgs>;
}

export interface GetPanelBarChartFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelBarChartFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelBarChartFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelBarChartFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelBarChartFieldConfigDefaultsCustomThresholdsStyleArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelBarChartFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelBarChartFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelBarChartFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelBarChartFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelBarChartFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelBarChartFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelBarChartFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelBarChartFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelBarChartFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelBarChartFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelBarChartFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelBarChartFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelBarChartFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelBarChartFieldConfigOverride {
    matcher?: inputs.GetPanelBarChartFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelBarChartFieldConfigOverrideProperty[];
}

export interface GetPanelBarChartFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelBarChartFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelBarChartFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelBarChartFieldConfigOverrideMatcher {
}

export interface GetPanelBarChartFieldConfigOverrideMatcherArgs {
}

export interface GetPanelBarChartFieldConfigOverrideProperty {
}

export interface GetPanelBarChartFieldConfigOverridePropertyArgs {
}

export interface GetPanelBarChartGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelBarChartGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelBarChartLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelBarChartLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelBarChartLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelBarChartLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelBarChartOptions {
    /**
     * Controls the radius of each bar.
     */
    barRadius?: number;
    /**
     * Controls the width of bars. 1 = Max width, 0 = Min width. Defaults to 0.970000.
     */
    barWidth?: number;
    /**
     * Use the color value for a sibling field to color each bar value.
     */
    colorByField?: string;
    /**
     * Enables mode which highlights the entire bar area and shows tooltip when cursor
     * hovers over highlighted area. Defaults to false.
     */
    fullHighlight?: boolean;
    /**
     * Controls the width of groups. 1 = max with, 0 = min width. Defaults to 0.700000.
     */
    groupWidth?: number;
    legend?: inputs.GetPanelBarChartOptionsLegend;
    /**
     * Controls the orientation of the bar chart, either vertical or horizontal. Defaults to "auto".
     */
    orientation?: string;
    /**
     * This controls whether values are shown on top or to the left of bars. Defaults to "auto".
     */
    showValue?: string;
    /**
     * Controls whether bars are stacked or not, either normally or in percent mode. Defaults to "none".
     */
    stacking?: string;
    text?: inputs.GetPanelBarChartOptionsText;
    tooltip?: inputs.GetPanelBarChartOptionsTooltip;
    /**
     * Manually select which field from the dataset to represent the x field.
     */
    xField?: string;
    /**
     * Sets the max length that a label can have before it is truncated.
     */
    xTickLabelMaxLength: number;
    /**
     * Controls the rotation of the x axis labels. Defaults to 0.
     */
    xTickLabelRotation?: number;
    /**
     * Controls the spacing between x axis labels.
     * negative values indicate backwards skipping behavior. Defaults to 0.
     */
    xTickLabelSpacing?: number;
}

export interface GetPanelBarChartOptionsArgs {
    /**
     * Controls the radius of each bar.
     */
    barRadius?: pulumi.Input<number>;
    /**
     * Controls the width of bars. 1 = Max width, 0 = Min width. Defaults to 0.970000.
     */
    barWidth?: pulumi.Input<number>;
    /**
     * Use the color value for a sibling field to color each bar value.
     */
    colorByField?: pulumi.Input<string>;
    /**
     * Enables mode which highlights the entire bar area and shows tooltip when cursor
     * hovers over highlighted area. Defaults to false.
     */
    fullHighlight?: pulumi.Input<boolean>;
    /**
     * Controls the width of groups. 1 = max with, 0 = min width. Defaults to 0.700000.
     */
    groupWidth?: pulumi.Input<number>;
    legend?: pulumi.Input<inputs.GetPanelBarChartOptionsLegendArgs>;
    /**
     * Controls the orientation of the bar chart, either vertical or horizontal. Defaults to "auto".
     */
    orientation?: pulumi.Input<string>;
    /**
     * This controls whether values are shown on top or to the left of bars. Defaults to "auto".
     */
    showValue?: pulumi.Input<string>;
    /**
     * Controls whether bars are stacked or not, either normally or in percent mode. Defaults to "none".
     */
    stacking?: pulumi.Input<string>;
    text?: pulumi.Input<inputs.GetPanelBarChartOptionsTextArgs>;
    tooltip?: pulumi.Input<inputs.GetPanelBarChartOptionsTooltipArgs>;
    /**
     * Manually select which field from the dataset to represent the x field.
     */
    xField?: pulumi.Input<string>;
    /**
     * Sets the max length that a label can have before it is truncated.
     */
    xTickLabelMaxLength: pulumi.Input<number>;
    /**
     * Controls the rotation of the x axis labels. Defaults to 0.
     */
    xTickLabelRotation?: pulumi.Input<number>;
    /**
     * Controls the spacing between x axis labels.
     * negative values indicate backwards skipping behavior. Defaults to 0.
     */
    xTickLabelSpacing?: pulumi.Input<number>;
}

export interface GetPanelBarChartOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelBarChartOptionsLegendArgs {
    asTable?: pulumi.Input<boolean>;
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    displayMode: pulumi.Input<string>;
    isVisible?: pulumi.Input<boolean>;
    placement: pulumi.Input<string>;
    showLegend: pulumi.Input<boolean>;
    sortBy?: pulumi.Input<string>;
    sortDesc?: pulumi.Input<boolean>;
    width?: pulumi.Input<number>;
}

export interface GetPanelBarChartOptionsText {
    /**
     * Explicit title text size
     */
    titleSize?: number;
    /**
     * Explicit value text size
     */
    valueSize?: number;
}

export interface GetPanelBarChartOptionsTextArgs {
    /**
     * Explicit title text size
     */
    titleSize?: pulumi.Input<number>;
    /**
     * Explicit value text size
     */
    valueSize?: pulumi.Input<number>;
}

export interface GetPanelBarChartOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelBarChartOptionsTooltipArgs {
    mode: pulumi.Input<string>;
    sort: pulumi.Input<string>;
}

export interface GetPanelBarChartTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelBarChartTransformationFilter;
}

export interface GetPanelBarChartTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelBarChartTransformationFilterArgs>;
}

export interface GetPanelBarChartTransformationFilter {
}

export interface GetPanelBarChartTransformationFilterArgs {
}

export interface GetPanelBarGaugeDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelBarGaugeDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelBarGaugeFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelBarGaugeFieldConfigOverride[];
}

export interface GetPanelBarGaugeFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelBarGaugeFieldConfigOverrideArgs>[]>;
}

export interface GetPanelBarGaugeFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelBarGaugeFieldConfigDefaultsColor;
    custom?: inputs.GetPanelBarGaugeFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelBarGaugeFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelBarGaugeFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelBarGaugeFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity?: number;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode?: string;
    hideFrom?: inputs.GetPanelBarGaugeFieldConfigDefaultsCustomHideFrom;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth?: number;
    scaleDistribution?: inputs.GetPanelBarGaugeFieldConfigDefaultsCustomScaleDistribution;
    /**
     * Threshold rendering
     */
    thresholdsStyle?: inputs.GetPanelBarGaugeFieldConfigDefaultsCustomThresholdsStyle;
}

export interface GetPanelBarGaugeFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity?: pulumi.Input<number>;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsCustomHideFromArgs>;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth?: pulumi.Input<number>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsCustomScaleDistributionArgs>;
    /**
     * Threshold rendering
     */
    thresholdsStyle?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsCustomThresholdsStyleArgs>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelBarGaugeFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsCustomThresholdsStyleArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelBarGaugeFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelBarGaugeFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelBarGaugeFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelBarGaugeFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelBarGaugeFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelBarGaugeFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelBarGaugeFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelBarGaugeFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelBarGaugeFieldConfigOverride {
    matcher?: inputs.GetPanelBarGaugeFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelBarGaugeFieldConfigOverrideProperty[];
}

export interface GetPanelBarGaugeFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelBarGaugeFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelBarGaugeFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelBarGaugeFieldConfigOverrideMatcher {
}

export interface GetPanelBarGaugeFieldConfigOverrideMatcherArgs {
}

export interface GetPanelBarGaugeFieldConfigOverrideProperty {
}

export interface GetPanelBarGaugeFieldConfigOverridePropertyArgs {
}

export interface GetPanelBarGaugeGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelBarGaugeGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelBarGaugeLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelBarGaugeLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelBarGaugeLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelBarGaugeLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelBarGaugeOptions {
    /**
     * Defaults to "gradient".
     */
    displayMode?: string;
    /**
     * Defaults to 10.
     */
    minVizHeight?: number;
    /**
     * Defaults to 0.
     */
    minVizWidth?: number;
    orientation: string;
    reduceOptions?: inputs.GetPanelBarGaugeOptionsReduceOptions;
    /**
     * Defaults to true.
     */
    showUnfilled?: boolean;
    text?: inputs.GetPanelBarGaugeOptionsText;
    /**
     * Defaults to "color".
     */
    valueMode?: string;
}

export interface GetPanelBarGaugeOptionsArgs {
    /**
     * Defaults to "gradient".
     */
    displayMode?: pulumi.Input<string>;
    /**
     * Defaults to 10.
     */
    minVizHeight?: pulumi.Input<number>;
    /**
     * Defaults to 0.
     */
    minVizWidth?: pulumi.Input<number>;
    orientation: pulumi.Input<string>;
    reduceOptions?: pulumi.Input<inputs.GetPanelBarGaugeOptionsReduceOptionsArgs>;
    /**
     * Defaults to true.
     */
    showUnfilled?: pulumi.Input<boolean>;
    text?: pulumi.Input<inputs.GetPanelBarGaugeOptionsTextArgs>;
    /**
     * Defaults to "color".
     */
    valueMode?: pulumi.Input<string>;
}

export interface GetPanelBarGaugeOptionsReduceOptions {
    /**
     * When !values, pick one value for the whole field
     */
    calcs?: string[];
    /**
     * Which fields to show.  By default this is only numeric fields
     */
    fields?: string;
    /**
     * if showing all values limit
     */
    limit?: number;
    /**
     * If true show each row value
     */
    values?: boolean;
}

export interface GetPanelBarGaugeOptionsReduceOptionsArgs {
    /**
     * When !values, pick one value for the whole field
     */
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Which fields to show.  By default this is only numeric fields
     */
    fields?: pulumi.Input<string>;
    /**
     * if showing all values limit
     */
    limit?: pulumi.Input<number>;
    /**
     * If true show each row value
     */
    values?: pulumi.Input<boolean>;
}

export interface GetPanelBarGaugeOptionsText {
    /**
     * Explicit title text size
     */
    titleSize?: number;
    /**
     * Explicit value text size
     */
    valueSize?: number;
}

export interface GetPanelBarGaugeOptionsTextArgs {
    /**
     * Explicit title text size
     */
    titleSize?: pulumi.Input<number>;
    /**
     * Explicit value text size
     */
    valueSize?: pulumi.Input<number>;
}

export interface GetPanelBarGaugeTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelBarGaugeTransformationFilter;
}

export interface GetPanelBarGaugeTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelBarGaugeTransformationFilterArgs>;
}

export interface GetPanelBarGaugeTransformationFilter {
}

export interface GetPanelBarGaugeTransformationFilterArgs {
}

export interface GetPanelCandlestickDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelCandlestickDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelCandlestickFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelCandlestickFieldConfigOverride[];
}

export interface GetPanelCandlestickFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelCandlestickFieldConfigOverrideArgs>[]>;
}

export interface GetPanelCandlestickFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelCandlestickFieldConfigDefaultsColor;
    custom?: inputs.GetPanelCandlestickFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelCandlestickFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelCandlestickFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelCandlestickFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelCandlestickFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom?: inputs.GetPanelCandlestickFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle?: inputs.GetPanelCandlestickFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution?: inputs.GetPanelCandlestickFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking?: inputs.GetPanelCandlestickFieldConfigDefaultsCustomStacking;
    thresholdsStyle?: inputs.GetPanelCandlestickFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    barAlignment?: pulumi.Input<number>;
    barMaxWidth?: pulumi.Input<number>;
    barWidthFactor?: pulumi.Input<number>;
    drawStyle?: pulumi.Input<string>;
    fillBelowTo?: pulumi.Input<string>;
    fillColor?: pulumi.Input<string>;
    fillOpacity?: pulumi.Input<number>;
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsCustomHideFromArgs>;
    lineColor?: pulumi.Input<string>;
    lineInterpolation?: pulumi.Input<string>;
    lineStyle?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsCustomLineStyleArgs>;
    lineWidth?: pulumi.Input<number>;
    pointColor?: pulumi.Input<string>;
    pointSize?: pulumi.Input<number>;
    pointSymbol?: pulumi.Input<string>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsCustomScaleDistributionArgs>;
    showPoints?: pulumi.Input<string>;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: pulumi.Input<string>;
    stacking?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsCustomStackingArgs>;
    thresholdsStyle?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsCustomThresholdsStyleArgs>;
    transform?: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomLineStyleArgs {
    dashes?: pulumi.Input<pulumi.Input<number>[]>;
    fill?: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomStackingArgs {
    group?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomThresholdsStyleArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelCandlestickFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelCandlestickFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelCandlestickFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelCandlestickFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelCandlestickFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelCandlestickFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelCandlestickFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelCandlestickFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelCandlestickFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelCandlestickFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelCandlestickFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelCandlestickFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelCandlestickFieldConfigOverride {
    matcher?: inputs.GetPanelCandlestickFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelCandlestickFieldConfigOverrideProperty[];
}

export interface GetPanelCandlestickFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelCandlestickFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelCandlestickFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelCandlestickFieldConfigOverrideMatcher {
}

export interface GetPanelCandlestickFieldConfigOverrideMatcherArgs {
}

export interface GetPanelCandlestickFieldConfigOverrideProperty {
}

export interface GetPanelCandlestickFieldConfigOverridePropertyArgs {
}

export interface GetPanelCandlestickGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelCandlestickGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelCandlestickLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelCandlestickLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelCandlestickLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelCandlestickLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelCandlestickOptions {
    /**
     * Sets the style of the candlesticks. Defaults to "candles".
     */
    candleStyle?: string;
    /**
     * Sets the color strategy for the candlesticks. Defaults to "open-close".
     */
    colorStrategy?: string;
    /**
     * Set which colors are used when the price movement is up or down
     */
    colors?: inputs.GetPanelCandlestickOptionsColors;
    /**
     * Map fields to appropriate dimension
     */
    fields?: inputs.GetPanelCandlestickOptionsFields;
    /**
     * When enabled, all fields will be sent to the graph. Defaults to false.
     */
    includeAllFields?: boolean;
    legend?: inputs.GetPanelCandlestickOptionsLegend;
    /**
     * Sets which dimensions are used for the visualization. Defaults to "candles+volume".
     */
    mode?: string;
}

export interface GetPanelCandlestickOptionsArgs {
    /**
     * Sets the style of the candlesticks. Defaults to "candles".
     */
    candleStyle?: pulumi.Input<string>;
    /**
     * Sets the color strategy for the candlesticks. Defaults to "open-close".
     */
    colorStrategy?: pulumi.Input<string>;
    /**
     * Set which colors are used when the price movement is up or down
     */
    colors?: pulumi.Input<inputs.GetPanelCandlestickOptionsColorsArgs>;
    /**
     * Map fields to appropriate dimension
     */
    fields?: pulumi.Input<inputs.GetPanelCandlestickOptionsFieldsArgs>;
    /**
     * When enabled, all fields will be sent to the graph. Defaults to false.
     */
    includeAllFields?: pulumi.Input<boolean>;
    legend?: pulumi.Input<inputs.GetPanelCandlestickOptionsLegendArgs>;
    /**
     * Sets which dimensions are used for the visualization. Defaults to "candles+volume".
     */
    mode?: pulumi.Input<string>;
}

export interface GetPanelCandlestickOptionsColors {
    down: string;
    flat: string;
    up: string;
}

export interface GetPanelCandlestickOptionsColorsArgs {
    down: pulumi.Input<string>;
    flat: pulumi.Input<string>;
    up: pulumi.Input<string>;
}

export interface GetPanelCandlestickOptionsFields {
    candlestickFieldMap?: inputs.GetPanelCandlestickOptionsFieldsCandlestickFieldMap;
}

export interface GetPanelCandlestickOptionsFieldsArgs {
    candlestickFieldMap?: pulumi.Input<inputs.GetPanelCandlestickOptionsFieldsCandlestickFieldMapArgs>;
}

export interface GetPanelCandlestickOptionsFieldsCandlestickFieldMap {
    /**
     * Corresponds to the final (end) value of the given period
     */
    close?: string;
    /**
     * Corresponds to the highest value of the given period
     */
    high?: string;
    /**
     * Corresponds to the lowest value of the given period
     */
    low?: string;
    /**
     * Corresponds to the starting value of the given period
     */
    open?: string;
    /**
     * Corresponds to the sample count in the given period. (e.g. number of trades)
     */
    volume?: string;
}

export interface GetPanelCandlestickOptionsFieldsCandlestickFieldMapArgs {
    /**
     * Corresponds to the final (end) value of the given period
     */
    close?: pulumi.Input<string>;
    /**
     * Corresponds to the highest value of the given period
     */
    high?: pulumi.Input<string>;
    /**
     * Corresponds to the lowest value of the given period
     */
    low?: pulumi.Input<string>;
    /**
     * Corresponds to the starting value of the given period
     */
    open?: pulumi.Input<string>;
    /**
     * Corresponds to the sample count in the given period. (e.g. number of trades)
     */
    volume?: pulumi.Input<string>;
}

export interface GetPanelCandlestickOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelCandlestickOptionsLegendArgs {
    asTable?: pulumi.Input<boolean>;
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    displayMode: pulumi.Input<string>;
    isVisible?: pulumi.Input<boolean>;
    placement: pulumi.Input<string>;
    showLegend: pulumi.Input<boolean>;
    sortBy?: pulumi.Input<string>;
    sortDesc?: pulumi.Input<boolean>;
    width?: pulumi.Input<number>;
}

export interface GetPanelCandlestickTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelCandlestickTransformationFilter;
}

export interface GetPanelCandlestickTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelCandlestickTransformationFilterArgs>;
}

export interface GetPanelCandlestickTransformationFilter {
}

export interface GetPanelCandlestickTransformationFilterArgs {
}

export interface GetPanelCanvasDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelCanvasDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelCanvasFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelCanvasFieldConfigOverride[];
}

export interface GetPanelCanvasFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelCanvasFieldConfigOverrideArgs>[]>;
}

export interface GetPanelCanvasFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelCanvasFieldConfigDefaultsColor;
    custom?: inputs.GetPanelCanvasFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelCanvasFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelCanvasFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelCanvasFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelCanvasFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom?: inputs.GetPanelCanvasFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle?: inputs.GetPanelCanvasFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution?: inputs.GetPanelCanvasFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking?: inputs.GetPanelCanvasFieldConfigDefaultsCustomStacking;
    thresholdsStyle?: inputs.GetPanelCanvasFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    barAlignment?: pulumi.Input<number>;
    barMaxWidth?: pulumi.Input<number>;
    barWidthFactor?: pulumi.Input<number>;
    drawStyle?: pulumi.Input<string>;
    fillBelowTo?: pulumi.Input<string>;
    fillColor?: pulumi.Input<string>;
    fillOpacity?: pulumi.Input<number>;
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsCustomHideFromArgs>;
    lineColor?: pulumi.Input<string>;
    lineInterpolation?: pulumi.Input<string>;
    lineStyle?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsCustomLineStyleArgs>;
    lineWidth?: pulumi.Input<number>;
    pointColor?: pulumi.Input<string>;
    pointSize?: pulumi.Input<number>;
    pointSymbol?: pulumi.Input<string>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsCustomScaleDistributionArgs>;
    showPoints?: pulumi.Input<string>;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: pulumi.Input<string>;
    stacking?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsCustomStackingArgs>;
    thresholdsStyle?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsCustomThresholdsStyleArgs>;
    transform?: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomLineStyleArgs {
    dashes?: pulumi.Input<pulumi.Input<number>[]>;
    fill?: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomStackingArgs {
    group?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomThresholdsStyleArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelCanvasFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelCanvasFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelCanvasFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelCanvasFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelCanvasFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelCanvasFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelCanvasFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelCanvasFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelCanvasFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelCanvasFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelCanvasFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelCanvasFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelCanvasFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelCanvasFieldConfigOverride {
    matcher?: inputs.GetPanelCanvasFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelCanvasFieldConfigOverrideProperty[];
}

export interface GetPanelCanvasFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelCanvasFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelCanvasFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelCanvasFieldConfigOverrideMatcher {
}

export interface GetPanelCanvasFieldConfigOverrideMatcherArgs {
}

export interface GetPanelCanvasFieldConfigOverrideProperty {
}

export interface GetPanelCanvasFieldConfigOverridePropertyArgs {
}

export interface GetPanelCanvasGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelCanvasGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelCanvasLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelCanvasLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelCanvasLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelCanvasLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelCanvasOptions {
    /**
     * Enable inline editing. Defaults to true.
     */
    inlineEditing?: boolean;
    /**
     * The root element of canvas (frame), where all canvas elements are nested
     * TODO: Figure out how to define a default value for this
     */
    root?: inputs.GetPanelCanvasOptionsRoot;
    /**
     * Show all available element types. Defaults to true.
     */
    showAdvancedTypes?: boolean;
}

export interface GetPanelCanvasOptionsArgs {
    /**
     * Enable inline editing. Defaults to true.
     */
    inlineEditing?: pulumi.Input<boolean>;
    /**
     * The root element of canvas (frame), where all canvas elements are nested
     * TODO: Figure out how to define a default value for this
     */
    root?: pulumi.Input<inputs.GetPanelCanvasOptionsRootArgs>;
    /**
     * Show all available element types. Defaults to true.
     */
    showAdvancedTypes?: pulumi.Input<boolean>;
}

export interface GetPanelCanvasOptionsRoot {
    /**
     * The list of canvas elements attached to the root element
     */
    elements?: inputs.GetPanelCanvasOptionsRootElement[];
    /**
     * Name of the root element
     */
    name: string;
    /**
     * Type of root element (frame)
     */
    type: string;
}

export interface GetPanelCanvasOptionsRootArgs {
    /**
     * The list of canvas elements attached to the root element
     */
    elements?: pulumi.Input<pulumi.Input<inputs.GetPanelCanvasOptionsRootElementArgs>[]>;
    /**
     * Name of the root element
     */
    name: pulumi.Input<string>;
    /**
     * Type of root element (frame)
     */
    type: pulumi.Input<string>;
}

export interface GetPanelCanvasOptionsRootElement {
    background?: inputs.GetPanelCanvasOptionsRootElementBackground;
    border?: inputs.GetPanelCanvasOptionsRootElementBorder;
    connections?: inputs.GetPanelCanvasOptionsRootElementConnection[];
    constraint?: inputs.GetPanelCanvasOptionsRootElementConstraint;
    name: string;
    placement?: inputs.GetPanelCanvasOptionsRootElementPlacement;
    type: string;
}

export interface GetPanelCanvasOptionsRootElementArgs {
    background?: pulumi.Input<inputs.GetPanelCanvasOptionsRootElementBackgroundArgs>;
    border?: pulumi.Input<inputs.GetPanelCanvasOptionsRootElementBorderArgs>;
    connections?: pulumi.Input<pulumi.Input<inputs.GetPanelCanvasOptionsRootElementConnectionArgs>[]>;
    constraint?: pulumi.Input<inputs.GetPanelCanvasOptionsRootElementConstraintArgs>;
    name: pulumi.Input<string>;
    placement?: pulumi.Input<inputs.GetPanelCanvasOptionsRootElementPlacementArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelCanvasOptionsRootElementBackground {
    color?: inputs.GetPanelCanvasOptionsRootElementBackgroundColor;
    image?: inputs.GetPanelCanvasOptionsRootElementBackgroundImage;
    size?: string;
}

export interface GetPanelCanvasOptionsRootElementBackgroundArgs {
    color?: pulumi.Input<inputs.GetPanelCanvasOptionsRootElementBackgroundColorArgs>;
    image?: pulumi.Input<inputs.GetPanelCanvasOptionsRootElementBackgroundImageArgs>;
    size?: pulumi.Input<string>;
}

export interface GetPanelCanvasOptionsRootElementBackgroundColor {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
}

export interface GetPanelCanvasOptionsRootElementBackgroundColorArgs {
    /**
     * fixed: T -- will be added by each element
     */
    field?: pulumi.Input<string>;
    fixed?: pulumi.Input<string>;
}

export interface GetPanelCanvasOptionsRootElementBackgroundImage {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
    mode: string;
}

export interface GetPanelCanvasOptionsRootElementBackgroundImageArgs {
    /**
     * fixed: T -- will be added by each element
     */
    field?: pulumi.Input<string>;
    fixed?: pulumi.Input<string>;
    mode: pulumi.Input<string>;
}

export interface GetPanelCanvasOptionsRootElementBorder {
    color?: inputs.GetPanelCanvasOptionsRootElementBorderColor;
    width?: number;
}

export interface GetPanelCanvasOptionsRootElementBorderArgs {
    color?: pulumi.Input<inputs.GetPanelCanvasOptionsRootElementBorderColorArgs>;
    width?: pulumi.Input<number>;
}

export interface GetPanelCanvasOptionsRootElementBorderColor {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
}

export interface GetPanelCanvasOptionsRootElementBorderColorArgs {
    /**
     * fixed: T -- will be added by each element
     */
    field?: pulumi.Input<string>;
    fixed?: pulumi.Input<string>;
}

export interface GetPanelCanvasOptionsRootElementConnection {
    color?: inputs.GetPanelCanvasOptionsRootElementConnectionColor;
    path: string;
    size?: inputs.GetPanelCanvasOptionsRootElementConnectionSize;
    source?: inputs.GetPanelCanvasOptionsRootElementConnectionSource;
    target?: inputs.GetPanelCanvasOptionsRootElementConnectionTarget;
    targetName?: string;
}

export interface GetPanelCanvasOptionsRootElementConnectionArgs {
    color?: pulumi.Input<inputs.GetPanelCanvasOptionsRootElementConnectionColorArgs>;
    path: pulumi.Input<string>;
    size?: pulumi.Input<inputs.GetPanelCanvasOptionsRootElementConnectionSizeArgs>;
    source?: pulumi.Input<inputs.GetPanelCanvasOptionsRootElementConnectionSourceArgs>;
    target?: pulumi.Input<inputs.GetPanelCanvasOptionsRootElementConnectionTargetArgs>;
    targetName?: pulumi.Input<string>;
}

export interface GetPanelCanvasOptionsRootElementConnectionColor {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
}

export interface GetPanelCanvasOptionsRootElementConnectionColorArgs {
    /**
     * fixed: T -- will be added by each element
     */
    field?: pulumi.Input<string>;
    fixed?: pulumi.Input<string>;
}

export interface GetPanelCanvasOptionsRootElementConnectionSize {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: number;
    max: number;
    min: number;
    mode?: string;
}

export interface GetPanelCanvasOptionsRootElementConnectionSizeArgs {
    /**
     * fixed: T -- will be added by each element
     */
    field?: pulumi.Input<string>;
    fixed?: pulumi.Input<number>;
    max: pulumi.Input<number>;
    min: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface GetPanelCanvasOptionsRootElementConnectionSource {
    x: number;
    y: number;
}

export interface GetPanelCanvasOptionsRootElementConnectionSourceArgs {
    x: pulumi.Input<number>;
    y: pulumi.Input<number>;
}

export interface GetPanelCanvasOptionsRootElementConnectionTarget {
    x: number;
    y: number;
}

export interface GetPanelCanvasOptionsRootElementConnectionTargetArgs {
    x: pulumi.Input<number>;
    y: pulumi.Input<number>;
}

export interface GetPanelCanvasOptionsRootElementConstraint {
    horizontal?: string;
    vertical?: string;
}

export interface GetPanelCanvasOptionsRootElementConstraintArgs {
    horizontal?: pulumi.Input<string>;
    vertical?: pulumi.Input<string>;
}

export interface GetPanelCanvasOptionsRootElementPlacement {
    bottom?: number;
    height?: number;
    left?: number;
    right?: number;
    top?: number;
    width?: number;
}

export interface GetPanelCanvasOptionsRootElementPlacementArgs {
    bottom?: pulumi.Input<number>;
    height?: pulumi.Input<number>;
    left?: pulumi.Input<number>;
    right?: pulumi.Input<number>;
    top?: pulumi.Input<number>;
    width?: pulumi.Input<number>;
}

export interface GetPanelCanvasTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelCanvasTransformationFilter;
}

export interface GetPanelCanvasTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelCanvasTransformationFilterArgs>;
}

export interface GetPanelCanvasTransformationFilter {
}

export interface GetPanelCanvasTransformationFilterArgs {
}

export interface GetPanelDashboardListDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelDashboardListDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelDashboardListFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelDashboardListFieldConfigOverride[];
}

export interface GetPanelDashboardListFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelDashboardListFieldConfigOverrideArgs>[]>;
}

export interface GetPanelDashboardListFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelDashboardListFieldConfigDefaultsColor;
    custom?: inputs.GetPanelDashboardListFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelDashboardListFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelDashboardListFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelDashboardListFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelDashboardListFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom?: inputs.GetPanelDashboardListFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle?: inputs.GetPanelDashboardListFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution?: inputs.GetPanelDashboardListFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking?: inputs.GetPanelDashboardListFieldConfigDefaultsCustomStacking;
    thresholdsStyle?: inputs.GetPanelDashboardListFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    barAlignment?: pulumi.Input<number>;
    barMaxWidth?: pulumi.Input<number>;
    barWidthFactor?: pulumi.Input<number>;
    drawStyle?: pulumi.Input<string>;
    fillBelowTo?: pulumi.Input<string>;
    fillColor?: pulumi.Input<string>;
    fillOpacity?: pulumi.Input<number>;
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsCustomHideFromArgs>;
    lineColor?: pulumi.Input<string>;
    lineInterpolation?: pulumi.Input<string>;
    lineStyle?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsCustomLineStyleArgs>;
    lineWidth?: pulumi.Input<number>;
    pointColor?: pulumi.Input<string>;
    pointSize?: pulumi.Input<number>;
    pointSymbol?: pulumi.Input<string>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsCustomScaleDistributionArgs>;
    showPoints?: pulumi.Input<string>;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: pulumi.Input<string>;
    stacking?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsCustomStackingArgs>;
    thresholdsStyle?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsCustomThresholdsStyleArgs>;
    transform?: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomLineStyleArgs {
    dashes?: pulumi.Input<pulumi.Input<number>[]>;
    fill?: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomStackingArgs {
    group?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomThresholdsStyleArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelDashboardListFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelDashboardListFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelDashboardListFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelDashboardListFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelDashboardListFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelDashboardListFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelDashboardListFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelDashboardListFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelDashboardListFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelDashboardListFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelDashboardListFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelDashboardListFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelDashboardListFieldConfigOverride {
    matcher?: inputs.GetPanelDashboardListFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelDashboardListFieldConfigOverrideProperty[];
}

export interface GetPanelDashboardListFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelDashboardListFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelDashboardListFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelDashboardListFieldConfigOverrideMatcher {
}

export interface GetPanelDashboardListFieldConfigOverrideMatcherArgs {
}

export interface GetPanelDashboardListFieldConfigOverrideProperty {
}

export interface GetPanelDashboardListFieldConfigOverridePropertyArgs {
}

export interface GetPanelDashboardListGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelDashboardListGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelDashboardListLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelDashboardListLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelDashboardListLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelDashboardListLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelDashboardListOptions {
    folderId?: number;
    /**
     * Defaults to false.
     */
    includeVars?: boolean;
    /**
     * Defaults to false.
     */
    keepTime?: boolean;
    /**
     * Defaults to 10.
     */
    maxItems?: number;
    /**
     * Defaults to "".
     */
    query?: string;
    /**
     * Defaults to true.
     */
    showHeadings?: boolean;
    /**
     * Defaults to false.
     */
    showRecentlyViewed?: boolean;
    /**
     * Defaults to false.
     */
    showSearch?: boolean;
    /**
     * Defaults to true.
     */
    showStarred?: boolean;
    tags?: string[];
}

export interface GetPanelDashboardListOptionsArgs {
    folderId?: pulumi.Input<number>;
    /**
     * Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * Defaults to 10.
     */
    maxItems?: pulumi.Input<number>;
    /**
     * Defaults to "".
     */
    query?: pulumi.Input<string>;
    /**
     * Defaults to true.
     */
    showHeadings?: pulumi.Input<boolean>;
    /**
     * Defaults to false.
     */
    showRecentlyViewed?: pulumi.Input<boolean>;
    /**
     * Defaults to false.
     */
    showSearch?: pulumi.Input<boolean>;
    /**
     * Defaults to true.
     */
    showStarred?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetPanelDashboardListTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelDashboardListTransformationFilter;
}

export interface GetPanelDashboardListTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelDashboardListTransformationFilterArgs>;
}

export interface GetPanelDashboardListTransformationFilter {
}

export interface GetPanelDashboardListTransformationFilterArgs {
}

export interface GetPanelDatagridDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelDatagridDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelDatagridFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelDatagridFieldConfigOverride[];
}

export interface GetPanelDatagridFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelDatagridFieldConfigOverrideArgs>[]>;
}

export interface GetPanelDatagridFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelDatagridFieldConfigDefaultsColor;
    custom?: inputs.GetPanelDatagridFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelDatagridFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelDatagridFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelDatagridFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelDatagridFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom?: inputs.GetPanelDatagridFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle?: inputs.GetPanelDatagridFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution?: inputs.GetPanelDatagridFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking?: inputs.GetPanelDatagridFieldConfigDefaultsCustomStacking;
    thresholdsStyle?: inputs.GetPanelDatagridFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    barAlignment?: pulumi.Input<number>;
    barMaxWidth?: pulumi.Input<number>;
    barWidthFactor?: pulumi.Input<number>;
    drawStyle?: pulumi.Input<string>;
    fillBelowTo?: pulumi.Input<string>;
    fillColor?: pulumi.Input<string>;
    fillOpacity?: pulumi.Input<number>;
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsCustomHideFromArgs>;
    lineColor?: pulumi.Input<string>;
    lineInterpolation?: pulumi.Input<string>;
    lineStyle?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsCustomLineStyleArgs>;
    lineWidth?: pulumi.Input<number>;
    pointColor?: pulumi.Input<string>;
    pointSize?: pulumi.Input<number>;
    pointSymbol?: pulumi.Input<string>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsCustomScaleDistributionArgs>;
    showPoints?: pulumi.Input<string>;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: pulumi.Input<string>;
    stacking?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsCustomStackingArgs>;
    thresholdsStyle?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsCustomThresholdsStyleArgs>;
    transform?: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomLineStyleArgs {
    dashes?: pulumi.Input<pulumi.Input<number>[]>;
    fill?: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomStackingArgs {
    group?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomThresholdsStyleArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelDatagridFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelDatagridFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelDatagridFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelDatagridFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelDatagridFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelDatagridFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelDatagridFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelDatagridFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelDatagridFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelDatagridFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelDatagridFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelDatagridFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelDatagridFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelDatagridFieldConfigOverride {
    matcher?: inputs.GetPanelDatagridFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelDatagridFieldConfigOverrideProperty[];
}

export interface GetPanelDatagridFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelDatagridFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelDatagridFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelDatagridFieldConfigOverrideMatcher {
}

export interface GetPanelDatagridFieldConfigOverrideMatcherArgs {
}

export interface GetPanelDatagridFieldConfigOverrideProperty {
}

export interface GetPanelDatagridFieldConfigOverridePropertyArgs {
}

export interface GetPanelDatagridGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelDatagridGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelDatagridLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelDatagridLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelDatagridLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelDatagridLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelDatagridOptions {
    /**
     * Defaults to 0.
     */
    selectedSeries?: number;
}

export interface GetPanelDatagridOptionsArgs {
    /**
     * Defaults to 0.
     */
    selectedSeries?: pulumi.Input<number>;
}

export interface GetPanelDatagridTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelDatagridTransformationFilter;
}

export interface GetPanelDatagridTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelDatagridTransformationFilterArgs>;
}

export interface GetPanelDatagridTransformationFilter {
}

export interface GetPanelDatagridTransformationFilterArgs {
}

export interface GetPanelDebugDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelDebugDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelDebugFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelDebugFieldConfigOverride[];
}

export interface GetPanelDebugFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelDebugFieldConfigOverrideArgs>[]>;
}

export interface GetPanelDebugFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelDebugFieldConfigDefaultsColor;
    custom?: inputs.GetPanelDebugFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelDebugFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelDebugFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelDebugFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelDebugFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelDebugFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom?: inputs.GetPanelDebugFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle?: inputs.GetPanelDebugFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution?: inputs.GetPanelDebugFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking?: inputs.GetPanelDebugFieldConfigDefaultsCustomStacking;
    thresholdsStyle?: inputs.GetPanelDebugFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelDebugFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    barAlignment?: pulumi.Input<number>;
    barMaxWidth?: pulumi.Input<number>;
    barWidthFactor?: pulumi.Input<number>;
    drawStyle?: pulumi.Input<string>;
    fillBelowTo?: pulumi.Input<string>;
    fillColor?: pulumi.Input<string>;
    fillOpacity?: pulumi.Input<number>;
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsCustomHideFromArgs>;
    lineColor?: pulumi.Input<string>;
    lineInterpolation?: pulumi.Input<string>;
    lineStyle?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsCustomLineStyleArgs>;
    lineWidth?: pulumi.Input<number>;
    pointColor?: pulumi.Input<string>;
    pointSize?: pulumi.Input<number>;
    pointSymbol?: pulumi.Input<string>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsCustomScaleDistributionArgs>;
    showPoints?: pulumi.Input<string>;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: pulumi.Input<string>;
    stacking?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsCustomStackingArgs>;
    thresholdsStyle?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsCustomThresholdsStyleArgs>;
    transform?: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelDebugFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelDebugFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelDebugFieldConfigDefaultsCustomLineStyleArgs {
    dashes?: pulumi.Input<pulumi.Input<number>[]>;
    fill?: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelDebugFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelDebugFieldConfigDefaultsCustomStackingArgs {
    group?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelDebugFieldConfigDefaultsCustomThresholdsStyleArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelDebugFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelDebugFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelDebugFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelDebugFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelDebugFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelDebugFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelDebugFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelDebugFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelDebugFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelDebugFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelDebugFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelDebugFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelDebugFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelDebugFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelDebugFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelDebugFieldConfigOverride {
    matcher?: inputs.GetPanelDebugFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelDebugFieldConfigOverrideProperty[];
}

export interface GetPanelDebugFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelDebugFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelDebugFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelDebugFieldConfigOverrideMatcher {
}

export interface GetPanelDebugFieldConfigOverrideMatcherArgs {
}

export interface GetPanelDebugFieldConfigOverrideProperty {
}

export interface GetPanelDebugFieldConfigOverridePropertyArgs {
}

export interface GetPanelDebugGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelDebugGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelDebugLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelDebugLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelDebugLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelDebugLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelDebugOptions {
    counters?: inputs.GetPanelDebugOptionsCounters;
    mode: string;
}

export interface GetPanelDebugOptionsArgs {
    counters?: pulumi.Input<inputs.GetPanelDebugOptionsCountersArgs>;
    mode: pulumi.Input<string>;
}

export interface GetPanelDebugOptionsCounters {
    dataChanged: boolean;
    render: boolean;
    schemaChanged: boolean;
}

export interface GetPanelDebugOptionsCountersArgs {
    dataChanged: pulumi.Input<boolean>;
    render: pulumi.Input<boolean>;
    schemaChanged: pulumi.Input<boolean>;
}

export interface GetPanelDebugTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelDebugTransformationFilter;
}

export interface GetPanelDebugTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelDebugTransformationFilterArgs>;
}

export interface GetPanelDebugTransformationFilter {
}

export interface GetPanelDebugTransformationFilterArgs {
}

export interface GetPanelGaugeDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelGaugeDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelGaugeFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelGaugeFieldConfigOverride[];
}

export interface GetPanelGaugeFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelGaugeFieldConfigOverrideArgs>[]>;
}

export interface GetPanelGaugeFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelGaugeFieldConfigDefaultsColor;
    custom?: inputs.GetPanelGaugeFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelGaugeFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelGaugeFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelGaugeFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelGaugeFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom?: inputs.GetPanelGaugeFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle?: inputs.GetPanelGaugeFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution?: inputs.GetPanelGaugeFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking?: inputs.GetPanelGaugeFieldConfigDefaultsCustomStacking;
    thresholdsStyle?: inputs.GetPanelGaugeFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    barAlignment?: pulumi.Input<number>;
    barMaxWidth?: pulumi.Input<number>;
    barWidthFactor?: pulumi.Input<number>;
    drawStyle?: pulumi.Input<string>;
    fillBelowTo?: pulumi.Input<string>;
    fillColor?: pulumi.Input<string>;
    fillOpacity?: pulumi.Input<number>;
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsCustomHideFromArgs>;
    lineColor?: pulumi.Input<string>;
    lineInterpolation?: pulumi.Input<string>;
    lineStyle?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsCustomLineStyleArgs>;
    lineWidth?: pulumi.Input<number>;
    pointColor?: pulumi.Input<string>;
    pointSize?: pulumi.Input<number>;
    pointSymbol?: pulumi.Input<string>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsCustomScaleDistributionArgs>;
    showPoints?: pulumi.Input<string>;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: pulumi.Input<string>;
    stacking?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsCustomStackingArgs>;
    thresholdsStyle?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsCustomThresholdsStyleArgs>;
    transform?: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomLineStyleArgs {
    dashes?: pulumi.Input<pulumi.Input<number>[]>;
    fill?: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomStackingArgs {
    group?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomThresholdsStyleArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelGaugeFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelGaugeFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelGaugeFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelGaugeFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelGaugeFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelGaugeFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelGaugeFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelGaugeFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelGaugeFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelGaugeFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelGaugeFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelGaugeFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelGaugeFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelGaugeFieldConfigOverride {
    matcher?: inputs.GetPanelGaugeFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelGaugeFieldConfigOverrideProperty[];
}

export interface GetPanelGaugeFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelGaugeFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelGaugeFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelGaugeFieldConfigOverrideMatcher {
}

export interface GetPanelGaugeFieldConfigOverrideMatcherArgs {
}

export interface GetPanelGaugeFieldConfigOverrideProperty {
}

export interface GetPanelGaugeFieldConfigOverridePropertyArgs {
}

export interface GetPanelGaugeGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelGaugeGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelGaugeLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelGaugeLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelGaugeLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelGaugeLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelGaugeOptions {
    orientation: string;
    reduceOptions?: inputs.GetPanelGaugeOptionsReduceOptions;
    /**
     * Defaults to false.
     */
    showThresholdLabels?: boolean;
    /**
     * Defaults to true.
     */
    showThresholdMarkers?: boolean;
    text?: inputs.GetPanelGaugeOptionsText;
}

export interface GetPanelGaugeOptionsArgs {
    orientation: pulumi.Input<string>;
    reduceOptions?: pulumi.Input<inputs.GetPanelGaugeOptionsReduceOptionsArgs>;
    /**
     * Defaults to false.
     */
    showThresholdLabels?: pulumi.Input<boolean>;
    /**
     * Defaults to true.
     */
    showThresholdMarkers?: pulumi.Input<boolean>;
    text?: pulumi.Input<inputs.GetPanelGaugeOptionsTextArgs>;
}

export interface GetPanelGaugeOptionsReduceOptions {
    /**
     * When !values, pick one value for the whole field
     */
    calcs?: string[];
    /**
     * Which fields to show.  By default this is only numeric fields
     */
    fields?: string;
    /**
     * if showing all values limit
     */
    limit?: number;
    /**
     * If true show each row value
     */
    values?: boolean;
}

export interface GetPanelGaugeOptionsReduceOptionsArgs {
    /**
     * When !values, pick one value for the whole field
     */
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Which fields to show.  By default this is only numeric fields
     */
    fields?: pulumi.Input<string>;
    /**
     * if showing all values limit
     */
    limit?: pulumi.Input<number>;
    /**
     * If true show each row value
     */
    values?: pulumi.Input<boolean>;
}

export interface GetPanelGaugeOptionsText {
    /**
     * Explicit title text size
     */
    titleSize?: number;
    /**
     * Explicit value text size
     */
    valueSize?: number;
}

export interface GetPanelGaugeOptionsTextArgs {
    /**
     * Explicit title text size
     */
    titleSize?: pulumi.Input<number>;
    /**
     * Explicit value text size
     */
    valueSize?: pulumi.Input<number>;
}

export interface GetPanelGaugeTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelGaugeTransformationFilter;
}

export interface GetPanelGaugeTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelGaugeTransformationFilterArgs>;
}

export interface GetPanelGaugeTransformationFilter {
}

export interface GetPanelGaugeTransformationFilterArgs {
}

export interface GetPanelGeomapDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelGeomapDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelGeomapFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelGeomapFieldConfigOverride[];
}

export interface GetPanelGeomapFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelGeomapFieldConfigOverrideArgs>[]>;
}

export interface GetPanelGeomapFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelGeomapFieldConfigDefaultsColor;
    custom?: inputs.GetPanelGeomapFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelGeomapFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelGeomapFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelGeomapFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelGeomapFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom?: inputs.GetPanelGeomapFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle?: inputs.GetPanelGeomapFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution?: inputs.GetPanelGeomapFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking?: inputs.GetPanelGeomapFieldConfigDefaultsCustomStacking;
    thresholdsStyle?: inputs.GetPanelGeomapFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    barAlignment?: pulumi.Input<number>;
    barMaxWidth?: pulumi.Input<number>;
    barWidthFactor?: pulumi.Input<number>;
    drawStyle?: pulumi.Input<string>;
    fillBelowTo?: pulumi.Input<string>;
    fillColor?: pulumi.Input<string>;
    fillOpacity?: pulumi.Input<number>;
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsCustomHideFromArgs>;
    lineColor?: pulumi.Input<string>;
    lineInterpolation?: pulumi.Input<string>;
    lineStyle?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsCustomLineStyleArgs>;
    lineWidth?: pulumi.Input<number>;
    pointColor?: pulumi.Input<string>;
    pointSize?: pulumi.Input<number>;
    pointSymbol?: pulumi.Input<string>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsCustomScaleDistributionArgs>;
    showPoints?: pulumi.Input<string>;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: pulumi.Input<string>;
    stacking?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsCustomStackingArgs>;
    thresholdsStyle?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsCustomThresholdsStyleArgs>;
    transform?: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomLineStyleArgs {
    dashes?: pulumi.Input<pulumi.Input<number>[]>;
    fill?: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomStackingArgs {
    group?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomThresholdsStyleArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelGeomapFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelGeomapFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelGeomapFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelGeomapFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelGeomapFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelGeomapFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelGeomapFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelGeomapFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelGeomapFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelGeomapFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelGeomapFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelGeomapFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelGeomapFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelGeomapFieldConfigOverride {
    matcher?: inputs.GetPanelGeomapFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelGeomapFieldConfigOverrideProperty[];
}

export interface GetPanelGeomapFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelGeomapFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelGeomapFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelGeomapFieldConfigOverrideMatcher {
}

export interface GetPanelGeomapFieldConfigOverrideMatcherArgs {
}

export interface GetPanelGeomapFieldConfigOverrideProperty {
}

export interface GetPanelGeomapFieldConfigOverridePropertyArgs {
}

export interface GetPanelGeomapGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelGeomapGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelGeomapLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelGeomapLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelGeomapLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelGeomapLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelGeomapOptions {
    basemap?: inputs.GetPanelGeomapOptionsBasemap;
    controls?: inputs.GetPanelGeomapOptionsControls;
    layers?: inputs.GetPanelGeomapOptionsLayer[];
    tooltip?: inputs.GetPanelGeomapOptionsTooltip;
    view?: inputs.GetPanelGeomapOptionsView;
}

export interface GetPanelGeomapOptionsArgs {
    basemap?: pulumi.Input<inputs.GetPanelGeomapOptionsBasemapArgs>;
    controls?: pulumi.Input<inputs.GetPanelGeomapOptionsControlsArgs>;
    layers?: pulumi.Input<pulumi.Input<inputs.GetPanelGeomapOptionsLayerArgs>[]>;
    tooltip?: pulumi.Input<inputs.GetPanelGeomapOptionsTooltipArgs>;
    view?: pulumi.Input<inputs.GetPanelGeomapOptionsViewArgs>;
}

export interface GetPanelGeomapOptionsBasemap {
    /**
     * Common method to define geometry fields
     */
    location?: inputs.GetPanelGeomapOptionsBasemapLocation;
    /**
     * configured unique display name
     */
    name: string;
    /**
     * Common properties:
     * https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html
     * Layer opacity (0-1)
     */
    opacity?: number;
    /**
     * Check tooltip (defaults to true)
     */
    tooltip?: boolean;
    type: string;
}

export interface GetPanelGeomapOptionsBasemapArgs {
    /**
     * Common method to define geometry fields
     */
    location?: pulumi.Input<inputs.GetPanelGeomapOptionsBasemapLocationArgs>;
    /**
     * configured unique display name
     */
    name: pulumi.Input<string>;
    /**
     * Common properties:
     * https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html
     * Layer opacity (0-1)
     */
    opacity?: pulumi.Input<number>;
    /**
     * Check tooltip (defaults to true)
     */
    tooltip?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface GetPanelGeomapOptionsBasemapLocation {
    /**
     * Path to Gazetteer
     */
    gazetteer?: string;
    /**
     * Field mappings
     */
    geohash?: string;
    latitude?: string;
    longitude?: string;
    lookup?: string;
    mode: string;
    wkt?: string;
}

export interface GetPanelGeomapOptionsBasemapLocationArgs {
    /**
     * Path to Gazetteer
     */
    gazetteer?: pulumi.Input<string>;
    /**
     * Field mappings
     */
    geohash?: pulumi.Input<string>;
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    lookup?: pulumi.Input<string>;
    mode: pulumi.Input<string>;
    wkt?: pulumi.Input<string>;
}

export interface GetPanelGeomapOptionsControls {
    /**
     * let the mouse wheel zoom
     */
    mouseWheelZoom?: boolean;
    /**
     * Lower right
     */
    showAttribution?: boolean;
    /**
     * Show debug
     */
    showDebug?: boolean;
    /**
     * Show measure
     */
    showMeasure?: boolean;
    /**
     * Scale options
     */
    showScale?: boolean;
    /**
     * Zoom (upper left)
     */
    showZoom?: boolean;
}

export interface GetPanelGeomapOptionsControlsArgs {
    /**
     * let the mouse wheel zoom
     */
    mouseWheelZoom?: pulumi.Input<boolean>;
    /**
     * Lower right
     */
    showAttribution?: pulumi.Input<boolean>;
    /**
     * Show debug
     */
    showDebug?: pulumi.Input<boolean>;
    /**
     * Show measure
     */
    showMeasure?: pulumi.Input<boolean>;
    /**
     * Scale options
     */
    showScale?: pulumi.Input<boolean>;
    /**
     * Zoom (upper left)
     */
    showZoom?: pulumi.Input<boolean>;
}

export interface GetPanelGeomapOptionsLayer {
    /**
     * Common method to define geometry fields
     */
    location?: inputs.GetPanelGeomapOptionsLayerLocation;
    /**
     * configured unique display name
     */
    name: string;
    /**
     * Common properties:
     * https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html
     * Layer opacity (0-1)
     */
    opacity?: number;
    /**
     * Check tooltip (defaults to true)
     */
    tooltip?: boolean;
    type: string;
}

export interface GetPanelGeomapOptionsLayerArgs {
    /**
     * Common method to define geometry fields
     */
    location?: pulumi.Input<inputs.GetPanelGeomapOptionsLayerLocationArgs>;
    /**
     * configured unique display name
     */
    name: pulumi.Input<string>;
    /**
     * Common properties:
     * https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html
     * Layer opacity (0-1)
     */
    opacity?: pulumi.Input<number>;
    /**
     * Check tooltip (defaults to true)
     */
    tooltip?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface GetPanelGeomapOptionsLayerLocation {
    /**
     * Path to Gazetteer
     */
    gazetteer?: string;
    /**
     * Field mappings
     */
    geohash?: string;
    latitude?: string;
    longitude?: string;
    lookup?: string;
    mode: string;
    wkt?: string;
}

export interface GetPanelGeomapOptionsLayerLocationArgs {
    /**
     * Path to Gazetteer
     */
    gazetteer?: pulumi.Input<string>;
    /**
     * Field mappings
     */
    geohash?: pulumi.Input<string>;
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    lookup?: pulumi.Input<string>;
    mode: pulumi.Input<string>;
    wkt?: pulumi.Input<string>;
}

export interface GetPanelGeomapOptionsTooltip {
    mode: string;
}

export interface GetPanelGeomapOptionsTooltipArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelGeomapOptionsView {
    /**
     * Defaults to true.
     */
    allLayers?: boolean;
    lastOnly?: boolean;
    /**
     * Defaults to 0.
     */
    lat?: number;
    layer?: string;
    /**
     * Defaults to 0.
     */
    lon?: number;
    maxZoom?: number;
    minZoom?: number;
    padding?: number;
    shared?: boolean;
    /**
     * Defaults to 1.
     */
    zoom?: number;
}

export interface GetPanelGeomapOptionsViewArgs {
    /**
     * Defaults to true.
     */
    allLayers?: pulumi.Input<boolean>;
    lastOnly?: pulumi.Input<boolean>;
    /**
     * Defaults to 0.
     */
    lat?: pulumi.Input<number>;
    layer?: pulumi.Input<string>;
    /**
     * Defaults to 0.
     */
    lon?: pulumi.Input<number>;
    maxZoom?: pulumi.Input<number>;
    minZoom?: pulumi.Input<number>;
    padding?: pulumi.Input<number>;
    shared?: pulumi.Input<boolean>;
    /**
     * Defaults to 1.
     */
    zoom?: pulumi.Input<number>;
}

export interface GetPanelGeomapTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelGeomapTransformationFilter;
}

export interface GetPanelGeomapTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelGeomapTransformationFilterArgs>;
}

export interface GetPanelGeomapTransformationFilter {
}

export interface GetPanelGeomapTransformationFilterArgs {
}

export interface GetPanelHeatmapDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelHeatmapDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelHeatmapFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelHeatmapFieldConfigOverride[];
}

export interface GetPanelHeatmapFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelHeatmapFieldConfigOverrideArgs>[]>;
}

export interface GetPanelHeatmapFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelHeatmapFieldConfigDefaultsColor;
    custom?: inputs.GetPanelHeatmapFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelHeatmapFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelHeatmapFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelHeatmapFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelHeatmapFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfigDefaultsCustom {
    hideFrom?: inputs.GetPanelHeatmapFieldConfigDefaultsCustomHideFrom;
    scaleDistribution?: inputs.GetPanelHeatmapFieldConfigDefaultsCustomScaleDistribution;
}

export interface GetPanelHeatmapFieldConfigDefaultsCustomArgs {
    hideFrom?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsCustomHideFromArgs>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsCustomScaleDistributionArgs>;
}

export interface GetPanelHeatmapFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelHeatmapFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelHeatmapFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelHeatmapFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelHeatmapFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelHeatmapFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelHeatmapFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelHeatmapFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelHeatmapFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelHeatmapFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelHeatmapFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelHeatmapFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelHeatmapFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelHeatmapFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelHeatmapFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelHeatmapFieldConfigOverride {
    matcher?: inputs.GetPanelHeatmapFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelHeatmapFieldConfigOverrideProperty[];
}

export interface GetPanelHeatmapFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelHeatmapFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelHeatmapFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelHeatmapFieldConfigOverrideMatcher {
}

export interface GetPanelHeatmapFieldConfigOverrideMatcherArgs {
}

export interface GetPanelHeatmapFieldConfigOverrideProperty {
}

export interface GetPanelHeatmapFieldConfigOverridePropertyArgs {
}

export interface GetPanelHeatmapGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelHeatmapGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelHeatmapLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelHeatmapLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelHeatmapLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelHeatmapLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelHeatmapOptions {
    /**
     * Controls if the heatmap should be calculated from data. Defaults to false.
     */
    calculate?: boolean;
    /**
     * Calculation options for the heatmap
     */
    calculation?: inputs.GetPanelHeatmapOptionsCalculation;
    /**
     * Controls gap between cells. Defaults to 1.
     */
    cellGap?: number;
    /**
     * Controls cell radius
     */
    cellRadius?: number;
    /**
     * Controls cell value unit
     */
    cellValues?: inputs.GetPanelHeatmapOptionsCellValues;
    /**
     * Controls the color options
     */
    color?: inputs.GetPanelHeatmapOptionsColor;
    /**
     * Controls exemplar options
     */
    exemplars?: inputs.GetPanelHeatmapOptionsExemplars;
    /**
     * Filters values between a given range
     */
    filterValues?: inputs.GetPanelHeatmapOptionsFilterValues;
    /**
     * | *{
     * 	axisPlacement: ui.AxisPlacement & "left" // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed
     * }
     * Controls legend options
     */
    legend?: inputs.GetPanelHeatmapOptionsLegend;
    /**
     * Controls tick alignment and value name when not calculating from data
     */
    rowsFrame?: inputs.GetPanelHeatmapOptionsRowsFrame;
    /**
     * | *{
     * 	layout: ui.HeatmapCellLayout & "auto" // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed
     * }
     * Controls the display of the value in the cell. Defaults to "auto".
     */
    showValue?: string;
    /**
     * Controls tooltip options
     */
    tooltip?: inputs.GetPanelHeatmapOptionsTooltip;
    /**
     * Controls yAxis placement
     */
    yAxis?: inputs.GetPanelHeatmapOptionsYAxis;
}

export interface GetPanelHeatmapOptionsArgs {
    /**
     * Controls if the heatmap should be calculated from data. Defaults to false.
     */
    calculate?: pulumi.Input<boolean>;
    /**
     * Calculation options for the heatmap
     */
    calculation?: pulumi.Input<inputs.GetPanelHeatmapOptionsCalculationArgs>;
    /**
     * Controls gap between cells. Defaults to 1.
     */
    cellGap?: pulumi.Input<number>;
    /**
     * Controls cell radius
     */
    cellRadius?: pulumi.Input<number>;
    /**
     * Controls cell value unit
     */
    cellValues?: pulumi.Input<inputs.GetPanelHeatmapOptionsCellValuesArgs>;
    /**
     * Controls the color options
     */
    color?: pulumi.Input<inputs.GetPanelHeatmapOptionsColorArgs>;
    /**
     * Controls exemplar options
     */
    exemplars?: pulumi.Input<inputs.GetPanelHeatmapOptionsExemplarsArgs>;
    /**
     * Filters values between a given range
     */
    filterValues?: pulumi.Input<inputs.GetPanelHeatmapOptionsFilterValuesArgs>;
    /**
     * | *{
     * 	axisPlacement: ui.AxisPlacement & "left" // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed
     * }
     * Controls legend options
     */
    legend?: pulumi.Input<inputs.GetPanelHeatmapOptionsLegendArgs>;
    /**
     * Controls tick alignment and value name when not calculating from data
     */
    rowsFrame?: pulumi.Input<inputs.GetPanelHeatmapOptionsRowsFrameArgs>;
    /**
     * | *{
     * 	layout: ui.HeatmapCellLayout & "auto" // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed
     * }
     * Controls the display of the value in the cell. Defaults to "auto".
     */
    showValue?: pulumi.Input<string>;
    /**
     * Controls tooltip options
     */
    tooltip?: pulumi.Input<inputs.GetPanelHeatmapOptionsTooltipArgs>;
    /**
     * Controls yAxis placement
     */
    yAxis?: pulumi.Input<inputs.GetPanelHeatmapOptionsYAxisArgs>;
}

export interface GetPanelHeatmapOptionsCalculation {
    /**
     * The number of buckets to use for the xAxis in the heatmap
     */
    xBuckets?: inputs.GetPanelHeatmapOptionsCalculationXBuckets;
    /**
     * The number of buckets to use for the yAxis in the heatmap
     */
    yBuckets?: inputs.GetPanelHeatmapOptionsCalculationYBuckets;
}

export interface GetPanelHeatmapOptionsCalculationArgs {
    /**
     * The number of buckets to use for the xAxis in the heatmap
     */
    xBuckets?: pulumi.Input<inputs.GetPanelHeatmapOptionsCalculationXBucketsArgs>;
    /**
     * The number of buckets to use for the yAxis in the heatmap
     */
    yBuckets?: pulumi.Input<inputs.GetPanelHeatmapOptionsCalculationYBucketsArgs>;
}

export interface GetPanelHeatmapOptionsCalculationXBuckets {
    /**
     * Sets the bucket calculation mode
     */
    mode?: string;
    /**
     * Controls the scale of the buckets
     */
    scale?: inputs.GetPanelHeatmapOptionsCalculationXBucketsScale;
    /**
     * The number of buckets to use for the axis in the heatmap
     */
    value?: string;
}

export interface GetPanelHeatmapOptionsCalculationXBucketsArgs {
    /**
     * Sets the bucket calculation mode
     */
    mode?: pulumi.Input<string>;
    /**
     * Controls the scale of the buckets
     */
    scale?: pulumi.Input<inputs.GetPanelHeatmapOptionsCalculationXBucketsScaleArgs>;
    /**
     * The number of buckets to use for the axis in the heatmap
     */
    value?: pulumi.Input<string>;
}

export interface GetPanelHeatmapOptionsCalculationXBucketsScale {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelHeatmapOptionsCalculationXBucketsScaleArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelHeatmapOptionsCalculationYBuckets {
    /**
     * Sets the bucket calculation mode
     */
    mode?: string;
    /**
     * Controls the scale of the buckets
     */
    scale?: inputs.GetPanelHeatmapOptionsCalculationYBucketsScale;
    /**
     * The number of buckets to use for the axis in the heatmap
     */
    value?: string;
}

export interface GetPanelHeatmapOptionsCalculationYBucketsArgs {
    /**
     * Sets the bucket calculation mode
     */
    mode?: pulumi.Input<string>;
    /**
     * Controls the scale of the buckets
     */
    scale?: pulumi.Input<inputs.GetPanelHeatmapOptionsCalculationYBucketsScaleArgs>;
    /**
     * The number of buckets to use for the axis in the heatmap
     */
    value?: pulumi.Input<string>;
}

export interface GetPanelHeatmapOptionsCalculationYBucketsScale {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelHeatmapOptionsCalculationYBucketsScaleArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelHeatmapOptionsCellValues {
    cellValues?: inputs.GetPanelHeatmapOptionsCellValuesCellValues;
}

export interface GetPanelHeatmapOptionsCellValuesArgs {
    cellValues?: pulumi.Input<inputs.GetPanelHeatmapOptionsCellValuesCellValuesArgs>;
}

export interface GetPanelHeatmapOptionsCellValuesCellValues {
    /**
     * Controls the number of decimals for cell values
     */
    decimals?: number;
    /**
     * Controls the cell value unit
     */
    unit?: string;
}

export interface GetPanelHeatmapOptionsCellValuesCellValuesArgs {
    /**
     * Controls the number of decimals for cell values
     */
    decimals?: pulumi.Input<number>;
    /**
     * Controls the cell value unit
     */
    unit?: pulumi.Input<string>;
}

export interface GetPanelHeatmapOptionsColor {
    heatmapColorOptions?: inputs.GetPanelHeatmapOptionsColorHeatmapColorOptions;
}

export interface GetPanelHeatmapOptionsColorArgs {
    heatmapColorOptions?: pulumi.Input<inputs.GetPanelHeatmapOptionsColorHeatmapColorOptionsArgs>;
}

export interface GetPanelHeatmapOptionsColorHeatmapColorOptions {
    /**
     * Controls the exponent when scale is set to exponential
     */
    exponent: number;
    /**
     * Controls the color fill when in opacity mode
     */
    fill: string;
    /**
     * Sets the maximum value for the color scale
     */
    max?: number;
    /**
     * Sets the minimum value for the color scale
     */
    min?: number;
    /**
     * Sets the color mode
     */
    mode?: string;
    /**
     * Reverses the color scheme
     */
    reverse: boolean;
    /**
     * Controls the color scale
     */
    scale?: string;
    /**
     * Controls the color scheme used
     */
    scheme: string;
    /**
     * Controls the number of color steps
     */
    steps: number;
}

export interface GetPanelHeatmapOptionsColorHeatmapColorOptionsArgs {
    /**
     * Controls the exponent when scale is set to exponential
     */
    exponent: pulumi.Input<number>;
    /**
     * Controls the color fill when in opacity mode
     */
    fill: pulumi.Input<string>;
    /**
     * Sets the maximum value for the color scale
     */
    max?: pulumi.Input<number>;
    /**
     * Sets the minimum value for the color scale
     */
    min?: pulumi.Input<number>;
    /**
     * Sets the color mode
     */
    mode?: pulumi.Input<string>;
    /**
     * Reverses the color scheme
     */
    reverse: pulumi.Input<boolean>;
    /**
     * Controls the color scale
     */
    scale?: pulumi.Input<string>;
    /**
     * Controls the color scheme used
     */
    scheme: pulumi.Input<string>;
    /**
     * Controls the number of color steps
     */
    steps: pulumi.Input<number>;
}

export interface GetPanelHeatmapOptionsExemplars {
    color: string;
}

export interface GetPanelHeatmapOptionsExemplarsArgs {
    color: pulumi.Input<string>;
}

export interface GetPanelHeatmapOptionsFilterValues {
    filterValueRange?: inputs.GetPanelHeatmapOptionsFilterValuesFilterValueRange;
}

export interface GetPanelHeatmapOptionsFilterValuesArgs {
    filterValueRange?: pulumi.Input<inputs.GetPanelHeatmapOptionsFilterValuesFilterValueRangeArgs>;
}

export interface GetPanelHeatmapOptionsFilterValuesFilterValueRange {
    /**
     * Sets the filter range to values greater than or equal to the given value
     */
    ge?: number;
    /**
     * Sets the filter range to values less than or equal to the given value
     */
    le?: number;
}

export interface GetPanelHeatmapOptionsFilterValuesFilterValueRangeArgs {
    /**
     * Sets the filter range to values greater than or equal to the given value
     */
    ge?: pulumi.Input<number>;
    /**
     * Sets the filter range to values less than or equal to the given value
     */
    le?: pulumi.Input<number>;
}

export interface GetPanelHeatmapOptionsLegend {
    show: boolean;
}

export interface GetPanelHeatmapOptionsLegendArgs {
    show: pulumi.Input<boolean>;
}

export interface GetPanelHeatmapOptionsRowsFrame {
    /**
     * Controls tick alignment when not calculating from data
     */
    layout?: string;
    /**
     * Sets the name of the cell when not calculating from data
     */
    value?: string;
}

export interface GetPanelHeatmapOptionsRowsFrameArgs {
    /**
     * Controls tick alignment when not calculating from data
     */
    layout?: pulumi.Input<string>;
    /**
     * Sets the name of the cell when not calculating from data
     */
    value?: pulumi.Input<string>;
}

export interface GetPanelHeatmapOptionsTooltip {
    show: boolean;
    yHistogram: boolean;
}

export interface GetPanelHeatmapOptionsTooltipArgs {
    show: pulumi.Input<boolean>;
    yHistogram: pulumi.Input<boolean>;
}

export interface GetPanelHeatmapOptionsYAxis {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the number of decimals for yAxis values
     */
    decimals?: number;
    /**
     * Sets the maximum value for the yAxis
     */
    max?: number;
    /**
     * Sets the minimum value for the yAxis
     */
    min?: number;
    /**
     * Reverses the yAxis
     */
    reverse?: boolean;
    scaleDistribution?: inputs.GetPanelHeatmapOptionsYAxisScaleDistribution;
    /**
     * Sets the yAxis unit
     */
    unit?: string;
}

export interface GetPanelHeatmapOptionsYAxisArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    /**
     * Controls the number of decimals for yAxis values
     */
    decimals?: pulumi.Input<number>;
    /**
     * Sets the maximum value for the yAxis
     */
    max?: pulumi.Input<number>;
    /**
     * Sets the minimum value for the yAxis
     */
    min?: pulumi.Input<number>;
    /**
     * Reverses the yAxis
     */
    reverse?: pulumi.Input<boolean>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelHeatmapOptionsYAxisScaleDistributionArgs>;
    /**
     * Sets the yAxis unit
     */
    unit?: pulumi.Input<string>;
}

export interface GetPanelHeatmapOptionsYAxisScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelHeatmapOptionsYAxisScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelHeatmapTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelHeatmapTransformationFilter;
}

export interface GetPanelHeatmapTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelHeatmapTransformationFilterArgs>;
}

export interface GetPanelHeatmapTransformationFilter {
}

export interface GetPanelHeatmapTransformationFilterArgs {
}

export interface GetPanelHistogramDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelHistogramDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelHistogramFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelHistogramFieldConfigOverride[];
}

export interface GetPanelHistogramFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelHistogramFieldConfigOverrideArgs>[]>;
}

export interface GetPanelHistogramFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelHistogramFieldConfigDefaultsColor;
    custom?: inputs.GetPanelHistogramFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelHistogramFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelHistogramFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelHistogramFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelHistogramFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelHistogramFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity?: number;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode?: string;
    hideFrom?: inputs.GetPanelHistogramFieldConfigDefaultsCustomHideFrom;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth?: number;
    scaleDistribution?: inputs.GetPanelHistogramFieldConfigDefaultsCustomScaleDistribution;
}

export interface GetPanelHistogramFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity?: pulumi.Input<number>;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsCustomHideFromArgs>;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth?: pulumi.Input<number>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsCustomScaleDistributionArgs>;
}

export interface GetPanelHistogramFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelHistogramFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelHistogramFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelHistogramFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelHistogramFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelHistogramFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelHistogramFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelHistogramFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelHistogramFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelHistogramFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelHistogramFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelHistogramFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelHistogramFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelHistogramFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelHistogramFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelHistogramFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelHistogramFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelHistogramFieldConfigOverride {
    matcher?: inputs.GetPanelHistogramFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelHistogramFieldConfigOverrideProperty[];
}

export interface GetPanelHistogramFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelHistogramFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelHistogramFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelHistogramFieldConfigOverrideMatcher {
}

export interface GetPanelHistogramFieldConfigOverrideMatcherArgs {
}

export interface GetPanelHistogramFieldConfigOverrideProperty {
}

export interface GetPanelHistogramFieldConfigOverridePropertyArgs {
}

export interface GetPanelHistogramGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelHistogramGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelHistogramLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelHistogramLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelHistogramLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelHistogramLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelHistogramOptions {
    /**
     * Offset buckets by this amount. Defaults to 0.
     */
    bucketOffset?: number;
    /**
     * Size of each bucket
     */
    bucketSize?: number;
    /**
     * Combines multiple series into a single histogram
     */
    combine?: boolean;
    legend?: inputs.GetPanelHistogramOptionsLegend;
    tooltip?: inputs.GetPanelHistogramOptionsTooltip;
}

export interface GetPanelHistogramOptionsArgs {
    /**
     * Offset buckets by this amount. Defaults to 0.
     */
    bucketOffset?: pulumi.Input<number>;
    /**
     * Size of each bucket
     */
    bucketSize?: pulumi.Input<number>;
    /**
     * Combines multiple series into a single histogram
     */
    combine?: pulumi.Input<boolean>;
    legend?: pulumi.Input<inputs.GetPanelHistogramOptionsLegendArgs>;
    tooltip?: pulumi.Input<inputs.GetPanelHistogramOptionsTooltipArgs>;
}

export interface GetPanelHistogramOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelHistogramOptionsLegendArgs {
    asTable?: pulumi.Input<boolean>;
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    displayMode: pulumi.Input<string>;
    isVisible?: pulumi.Input<boolean>;
    placement: pulumi.Input<string>;
    showLegend: pulumi.Input<boolean>;
    sortBy?: pulumi.Input<string>;
    sortDesc?: pulumi.Input<boolean>;
    width?: pulumi.Input<number>;
}

export interface GetPanelHistogramOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelHistogramOptionsTooltipArgs {
    mode: pulumi.Input<string>;
    sort: pulumi.Input<string>;
}

export interface GetPanelHistogramTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelHistogramTransformationFilter;
}

export interface GetPanelHistogramTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelHistogramTransformationFilterArgs>;
}

export interface GetPanelHistogramTransformationFilter {
}

export interface GetPanelHistogramTransformationFilterArgs {
}

export interface GetPanelLogsDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelLogsDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelLogsFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelLogsFieldConfigOverride[];
}

export interface GetPanelLogsFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelLogsFieldConfigOverrideArgs>[]>;
}

export interface GetPanelLogsFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelLogsFieldConfigDefaultsColor;
    custom?: inputs.GetPanelLogsFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelLogsFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelLogsFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelLogsFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelLogsFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelLogsFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity?: number;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode?: string;
    hideFrom?: inputs.GetPanelLogsFieldConfigDefaultsCustomHideFrom;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth?: number;
    scaleDistribution?: inputs.GetPanelLogsFieldConfigDefaultsCustomScaleDistribution;
}

export interface GetPanelLogsFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity?: pulumi.Input<number>;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsCustomHideFromArgs>;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth?: pulumi.Input<number>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsCustomScaleDistributionArgs>;
}

export interface GetPanelLogsFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelLogsFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelLogsFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelLogsFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelLogsFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelLogsFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelLogsFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelLogsFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelLogsFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelLogsFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelLogsFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelLogsFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelLogsFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelLogsFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelLogsFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelLogsFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelLogsFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelLogsFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelLogsFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelLogsFieldConfigOverride {
    matcher?: inputs.GetPanelLogsFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelLogsFieldConfigOverrideProperty[];
}

export interface GetPanelLogsFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelLogsFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelLogsFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelLogsFieldConfigOverrideMatcher {
}

export interface GetPanelLogsFieldConfigOverrideMatcherArgs {
}

export interface GetPanelLogsFieldConfigOverrideProperty {
}

export interface GetPanelLogsFieldConfigOverridePropertyArgs {
}

export interface GetPanelLogsGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelLogsGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelLogsLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelLogsLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelLogsLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelLogsLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelLogsOptions {
    dedupStrategy: string;
    enableLogDetails: boolean;
    prettifyLogMessage: boolean;
    showCommonLabels: boolean;
    showLabels: boolean;
    showTime: boolean;
    sortOrder: string;
    wrapLogMessage: boolean;
}

export interface GetPanelLogsOptionsArgs {
    dedupStrategy: pulumi.Input<string>;
    enableLogDetails: pulumi.Input<boolean>;
    prettifyLogMessage: pulumi.Input<boolean>;
    showCommonLabels: pulumi.Input<boolean>;
    showLabels: pulumi.Input<boolean>;
    showTime: pulumi.Input<boolean>;
    sortOrder: pulumi.Input<string>;
    wrapLogMessage: pulumi.Input<boolean>;
}

export interface GetPanelLogsTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelLogsTransformationFilter;
}

export interface GetPanelLogsTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelLogsTransformationFilterArgs>;
}

export interface GetPanelLogsTransformationFilter {
}

export interface GetPanelLogsTransformationFilterArgs {
}

export interface GetPanelNewsDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelNewsDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelNewsFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelNewsFieldConfigOverride[];
}

export interface GetPanelNewsFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelNewsFieldConfigOverrideArgs>[]>;
}

export interface GetPanelNewsFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelNewsFieldConfigDefaultsColor;
    custom?: inputs.GetPanelNewsFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelNewsFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelNewsFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelNewsFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelNewsFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelNewsFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity?: number;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode?: string;
    hideFrom?: inputs.GetPanelNewsFieldConfigDefaultsCustomHideFrom;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth?: number;
    scaleDistribution?: inputs.GetPanelNewsFieldConfigDefaultsCustomScaleDistribution;
}

export interface GetPanelNewsFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity?: pulumi.Input<number>;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsCustomHideFromArgs>;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth?: pulumi.Input<number>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsCustomScaleDistributionArgs>;
}

export interface GetPanelNewsFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelNewsFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelNewsFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelNewsFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelNewsFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelNewsFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelNewsFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelNewsFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelNewsFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelNewsFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelNewsFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelNewsFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelNewsFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelNewsFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelNewsFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelNewsFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelNewsFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelNewsFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelNewsFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelNewsFieldConfigOverride {
    matcher?: inputs.GetPanelNewsFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelNewsFieldConfigOverrideProperty[];
}

export interface GetPanelNewsFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelNewsFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelNewsFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelNewsFieldConfigOverrideMatcher {
}

export interface GetPanelNewsFieldConfigOverrideMatcherArgs {
}

export interface GetPanelNewsFieldConfigOverrideProperty {
}

export interface GetPanelNewsFieldConfigOverridePropertyArgs {
}

export interface GetPanelNewsGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelNewsGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelNewsLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelNewsLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelNewsLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelNewsLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelNewsOptions {
    /**
     * empty/missing will default to grafana blog
     */
    feedUrl?: string;
    /**
     * Defaults to true.
     */
    showImage?: boolean;
}

export interface GetPanelNewsOptionsArgs {
    /**
     * empty/missing will default to grafana blog
     */
    feedUrl?: pulumi.Input<string>;
    /**
     * Defaults to true.
     */
    showImage?: pulumi.Input<boolean>;
}

export interface GetPanelNewsTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelNewsTransformationFilter;
}

export interface GetPanelNewsTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelNewsTransformationFilterArgs>;
}

export interface GetPanelNewsTransformationFilter {
}

export interface GetPanelNewsTransformationFilterArgs {
}

export interface GetPanelNodeGraphDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelNodeGraphDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelNodeGraphFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelNodeGraphFieldConfigOverride[];
}

export interface GetPanelNodeGraphFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelNodeGraphFieldConfigOverrideArgs>[]>;
}

export interface GetPanelNodeGraphFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelNodeGraphFieldConfigDefaultsColor;
    custom?: inputs.GetPanelNodeGraphFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelNodeGraphFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelNodeGraphFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelNodeGraphFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity?: number;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode?: string;
    hideFrom?: inputs.GetPanelNodeGraphFieldConfigDefaultsCustomHideFrom;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth?: number;
    scaleDistribution?: inputs.GetPanelNodeGraphFieldConfigDefaultsCustomScaleDistribution;
}

export interface GetPanelNodeGraphFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity?: pulumi.Input<number>;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsCustomHideFromArgs>;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth?: pulumi.Input<number>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsCustomScaleDistributionArgs>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelNodeGraphFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelNodeGraphFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelNodeGraphFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelNodeGraphFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelNodeGraphFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelNodeGraphFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelNodeGraphFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelNodeGraphFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelNodeGraphFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelNodeGraphFieldConfigOverride {
    matcher?: inputs.GetPanelNodeGraphFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelNodeGraphFieldConfigOverrideProperty[];
}

export interface GetPanelNodeGraphFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelNodeGraphFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelNodeGraphFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelNodeGraphFieldConfigOverrideMatcher {
}

export interface GetPanelNodeGraphFieldConfigOverrideMatcherArgs {
}

export interface GetPanelNodeGraphFieldConfigOverrideProperty {
}

export interface GetPanelNodeGraphFieldConfigOverridePropertyArgs {
}

export interface GetPanelNodeGraphGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelNodeGraphGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelNodeGraphLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelNodeGraphLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelNodeGraphLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelNodeGraphLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelNodeGraphOptions {
    edges?: inputs.GetPanelNodeGraphOptionsEdges;
    nodes?: inputs.GetPanelNodeGraphOptionsNodes;
}

export interface GetPanelNodeGraphOptionsArgs {
    edges?: pulumi.Input<inputs.GetPanelNodeGraphOptionsEdgesArgs>;
    nodes?: pulumi.Input<inputs.GetPanelNodeGraphOptionsNodesArgs>;
}

export interface GetPanelNodeGraphOptionsEdges {
    /**
     * Unit for the main stat to override what ever is set in the data frame.
     */
    mainStatUnit?: string;
    /**
     * Unit for the secondary stat to override what ever is set in the data frame.
     */
    secondaryStatUnit?: string;
}

export interface GetPanelNodeGraphOptionsEdgesArgs {
    /**
     * Unit for the main stat to override what ever is set in the data frame.
     */
    mainStatUnit?: pulumi.Input<string>;
    /**
     * Unit for the secondary stat to override what ever is set in the data frame.
     */
    secondaryStatUnit?: pulumi.Input<string>;
}

export interface GetPanelNodeGraphOptionsNodes {
    /**
     * Define which fields are shown as part of the node arc (colored circle around the node).
     */
    arcs?: inputs.GetPanelNodeGraphOptionsNodesArc[];
    /**
     * Unit for the main stat to override what ever is set in the data frame.
     */
    mainStatUnit?: string;
    /**
     * Unit for the secondary stat to override what ever is set in the data frame.
     */
    secondaryStatUnit?: string;
}

export interface GetPanelNodeGraphOptionsNodesArgs {
    /**
     * Define which fields are shown as part of the node arc (colored circle around the node).
     */
    arcs?: pulumi.Input<pulumi.Input<inputs.GetPanelNodeGraphOptionsNodesArcArgs>[]>;
    /**
     * Unit for the main stat to override what ever is set in the data frame.
     */
    mainStatUnit?: pulumi.Input<string>;
    /**
     * Unit for the secondary stat to override what ever is set in the data frame.
     */
    secondaryStatUnit?: pulumi.Input<string>;
}

export interface GetPanelNodeGraphOptionsNodesArc {
    /**
     * The color of the arc.
     */
    color?: string;
    /**
     * Field from which to get the value. Values should be less than 1, representing fraction of a circle.
     */
    field?: string;
}

export interface GetPanelNodeGraphOptionsNodesArcArgs {
    /**
     * The color of the arc.
     */
    color?: pulumi.Input<string>;
    /**
     * Field from which to get the value. Values should be less than 1, representing fraction of a circle.
     */
    field?: pulumi.Input<string>;
}

export interface GetPanelNodeGraphTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelNodeGraphTransformationFilter;
}

export interface GetPanelNodeGraphTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelNodeGraphTransformationFilterArgs>;
}

export interface GetPanelNodeGraphTransformationFilter {
}

export interface GetPanelNodeGraphTransformationFilterArgs {
}

export interface GetPanelPieChartDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelPieChartDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelPieChartFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelPieChartFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelPieChartFieldConfigOverride[];
}

export interface GetPanelPieChartFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelPieChartFieldConfigOverrideArgs>[]>;
}

export interface GetPanelPieChartFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelPieChartFieldConfigDefaultsColor;
    custom?: inputs.GetPanelPieChartFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelPieChartFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelPieChartFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelPieChartFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelPieChartFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelPieChartFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelPieChartFieldConfigDefaultsCustom {
    hideFrom?: inputs.GetPanelPieChartFieldConfigDefaultsCustomHideFrom;
}

export interface GetPanelPieChartFieldConfigDefaultsCustomArgs {
    hideFrom?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsCustomHideFromArgs>;
}

export interface GetPanelPieChartFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelPieChartFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelPieChartFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelPieChartFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelPieChartFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelPieChartFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelPieChartFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelPieChartFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelPieChartFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelPieChartFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelPieChartFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelPieChartFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelPieChartFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelPieChartFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelPieChartFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelPieChartFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelPieChartFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelPieChartFieldConfigOverride {
    matcher?: inputs.GetPanelPieChartFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelPieChartFieldConfigOverrideProperty[];
}

export interface GetPanelPieChartFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelPieChartFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelPieChartFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelPieChartFieldConfigOverrideMatcher {
}

export interface GetPanelPieChartFieldConfigOverrideMatcherArgs {
}

export interface GetPanelPieChartFieldConfigOverrideProperty {
}

export interface GetPanelPieChartFieldConfigOverridePropertyArgs {
}

export interface GetPanelPieChartGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelPieChartGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelPieChartLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelPieChartLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelPieChartLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelPieChartLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelPieChartOptions {
    legend?: inputs.GetPanelPieChartOptionsLegend;
    orientation: string;
    pieType: string;
    reduceOptions?: inputs.GetPanelPieChartOptionsReduceOptions;
    text?: inputs.GetPanelPieChartOptionsText;
    tooltip?: inputs.GetPanelPieChartOptionsTooltip;
}

export interface GetPanelPieChartOptionsArgs {
    legend?: pulumi.Input<inputs.GetPanelPieChartOptionsLegendArgs>;
    orientation: pulumi.Input<string>;
    pieType: pulumi.Input<string>;
    reduceOptions?: pulumi.Input<inputs.GetPanelPieChartOptionsReduceOptionsArgs>;
    text?: pulumi.Input<inputs.GetPanelPieChartOptionsTextArgs>;
    tooltip?: pulumi.Input<inputs.GetPanelPieChartOptionsTooltipArgs>;
}

export interface GetPanelPieChartOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelPieChartOptionsLegendArgs {
    asTable?: pulumi.Input<boolean>;
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    displayMode: pulumi.Input<string>;
    isVisible?: pulumi.Input<boolean>;
    placement: pulumi.Input<string>;
    showLegend: pulumi.Input<boolean>;
    sortBy?: pulumi.Input<string>;
    sortDesc?: pulumi.Input<boolean>;
    width?: pulumi.Input<number>;
}

export interface GetPanelPieChartOptionsReduceOptions {
    /**
     * When !values, pick one value for the whole field
     */
    calcs?: string[];
    /**
     * Which fields to show.  By default this is only numeric fields
     */
    fields?: string;
    /**
     * if showing all values limit
     */
    limit?: number;
    /**
     * If true show each row value
     */
    values?: boolean;
}

export interface GetPanelPieChartOptionsReduceOptionsArgs {
    /**
     * When !values, pick one value for the whole field
     */
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Which fields to show.  By default this is only numeric fields
     */
    fields?: pulumi.Input<string>;
    /**
     * if showing all values limit
     */
    limit?: pulumi.Input<number>;
    /**
     * If true show each row value
     */
    values?: pulumi.Input<boolean>;
}

export interface GetPanelPieChartOptionsText {
    /**
     * Explicit title text size
     */
    titleSize?: number;
    /**
     * Explicit value text size
     */
    valueSize?: number;
}

export interface GetPanelPieChartOptionsTextArgs {
    /**
     * Explicit title text size
     */
    titleSize?: pulumi.Input<number>;
    /**
     * Explicit value text size
     */
    valueSize?: pulumi.Input<number>;
}

export interface GetPanelPieChartOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelPieChartOptionsTooltipArgs {
    mode: pulumi.Input<string>;
    sort: pulumi.Input<string>;
}

export interface GetPanelPieChartTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelPieChartTransformationFilter;
}

export interface GetPanelPieChartTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelPieChartTransformationFilterArgs>;
}

export interface GetPanelPieChartTransformationFilter {
}

export interface GetPanelPieChartTransformationFilterArgs {
}

export interface GetPanelStatDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelStatDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelStatFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelStatFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelStatFieldConfigOverride[];
}

export interface GetPanelStatFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelStatFieldConfigOverrideArgs>[]>;
}

export interface GetPanelStatFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelStatFieldConfigDefaultsColor;
    custom?: inputs.GetPanelStatFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelStatFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelStatFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelStatFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelStatFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelStatFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelStatFieldConfigDefaultsCustom {
    hideFrom?: inputs.GetPanelStatFieldConfigDefaultsCustomHideFrom;
}

export interface GetPanelStatFieldConfigDefaultsCustomArgs {
    hideFrom?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsCustomHideFromArgs>;
}

export interface GetPanelStatFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelStatFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelStatFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelStatFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelStatFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelStatFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelStatFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelStatFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelStatFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelStatFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelStatFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelStatFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelStatFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelStatFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelStatFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelStatFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelStatFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelStatFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelStatFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelStatFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelStatFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelStatFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelStatFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelStatFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelStatFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelStatFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelStatFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelStatFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelStatFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelStatFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelStatFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelStatFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelStatFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelStatFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelStatFieldConfigOverride {
    matcher?: inputs.GetPanelStatFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelStatFieldConfigOverrideProperty[];
}

export interface GetPanelStatFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelStatFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelStatFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelStatFieldConfigOverrideMatcher {
}

export interface GetPanelStatFieldConfigOverrideMatcherArgs {
}

export interface GetPanelStatFieldConfigOverrideProperty {
}

export interface GetPanelStatFieldConfigOverridePropertyArgs {
}

export interface GetPanelStatGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelStatGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelStatLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelStatLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelStatLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelStatLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelStatOptions {
    /**
     * Defaults to "value".
     */
    colorMode?: string;
    /**
     * Defaults to "area".
     */
    graphMode?: string;
    /**
     * Defaults to "auto".
     */
    justifyMode?: string;
    orientation: string;
    reduceOptions?: inputs.GetPanelStatOptionsReduceOptions;
    text?: inputs.GetPanelStatOptionsText;
    /**
     * Defaults to "auto".
     */
    textMode?: string;
}

export interface GetPanelStatOptionsArgs {
    /**
     * Defaults to "value".
     */
    colorMode?: pulumi.Input<string>;
    /**
     * Defaults to "area".
     */
    graphMode?: pulumi.Input<string>;
    /**
     * Defaults to "auto".
     */
    justifyMode?: pulumi.Input<string>;
    orientation: pulumi.Input<string>;
    reduceOptions?: pulumi.Input<inputs.GetPanelStatOptionsReduceOptionsArgs>;
    text?: pulumi.Input<inputs.GetPanelStatOptionsTextArgs>;
    /**
     * Defaults to "auto".
     */
    textMode?: pulumi.Input<string>;
}

export interface GetPanelStatOptionsReduceOptions {
    /**
     * When !values, pick one value for the whole field
     */
    calcs?: string[];
    /**
     * Which fields to show.  By default this is only numeric fields
     */
    fields?: string;
    /**
     * if showing all values limit
     */
    limit?: number;
    /**
     * If true show each row value
     */
    values?: boolean;
}

export interface GetPanelStatOptionsReduceOptionsArgs {
    /**
     * When !values, pick one value for the whole field
     */
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Which fields to show.  By default this is only numeric fields
     */
    fields?: pulumi.Input<string>;
    /**
     * if showing all values limit
     */
    limit?: pulumi.Input<number>;
    /**
     * If true show each row value
     */
    values?: pulumi.Input<boolean>;
}

export interface GetPanelStatOptionsText {
    /**
     * Explicit title text size
     */
    titleSize?: number;
    /**
     * Explicit value text size
     */
    valueSize?: number;
}

export interface GetPanelStatOptionsTextArgs {
    /**
     * Explicit title text size
     */
    titleSize?: pulumi.Input<number>;
    /**
     * Explicit value text size
     */
    valueSize?: pulumi.Input<number>;
}

export interface GetPanelStatTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelStatTransformationFilter;
}

export interface GetPanelStatTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelStatTransformationFilterArgs>;
}

export interface GetPanelStatTransformationFilter {
}

export interface GetPanelStatTransformationFilterArgs {
}

export interface GetPanelStateTimelineDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelStateTimelineDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelStateTimelineFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelStateTimelineFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelStateTimelineFieldConfigOverride[];
}

export interface GetPanelStateTimelineFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelStateTimelineFieldConfigOverrideArgs>[]>;
}

export interface GetPanelStateTimelineFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelStateTimelineFieldConfigDefaultsColor;
    custom?: inputs.GetPanelStateTimelineFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelStateTimelineFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelStateTimelineFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelStateTimelineFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsCustom {
    /**
     * Defaults to 70.
     */
    fillOpacity?: number;
    hideFrom?: inputs.GetPanelStateTimelineFieldConfigDefaultsCustomHideFrom;
    /**
     * Defaults to 0.
     */
    lineWidth?: number;
}

export interface GetPanelStateTimelineFieldConfigDefaultsCustomArgs {
    /**
     * Defaults to 70.
     */
    fillOpacity?: pulumi.Input<number>;
    hideFrom?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsCustomHideFromArgs>;
    /**
     * Defaults to 0.
     */
    lineWidth?: pulumi.Input<number>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelStateTimelineFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelStateTimelineFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelStateTimelineFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelStateTimelineFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelStateTimelineFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelStateTimelineFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelStateTimelineFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelStateTimelineFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelStateTimelineFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelStateTimelineFieldConfigOverride {
    matcher?: inputs.GetPanelStateTimelineFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelStateTimelineFieldConfigOverrideProperty[];
}

export interface GetPanelStateTimelineFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelStateTimelineFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelStateTimelineFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelStateTimelineFieldConfigOverrideMatcher {
}

export interface GetPanelStateTimelineFieldConfigOverrideMatcherArgs {
}

export interface GetPanelStateTimelineFieldConfigOverrideProperty {
}

export interface GetPanelStateTimelineFieldConfigOverridePropertyArgs {
}

export interface GetPanelStateTimelineGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelStateTimelineGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelStateTimelineLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelStateTimelineLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelStateTimelineLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelStateTimelineLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelStateTimelineOptions {
    /**
     * Controls value alignment on the timelines. Defaults to "left".
     */
    alignValue?: string;
    legend?: inputs.GetPanelStateTimelineOptionsLegend;
    /**
     * Merge equal consecutive values. Defaults to true.
     */
    mergeValues?: boolean;
    /**
     * Controls the row height. Defaults to 0.900000.
     */
    rowHeight?: number;
    /**
     * Show timeline values on chart. Defaults to "auto".
     */
    showValue?: string;
    tooltip?: inputs.GetPanelStateTimelineOptionsTooltip;
}

export interface GetPanelStateTimelineOptionsArgs {
    /**
     * Controls value alignment on the timelines. Defaults to "left".
     */
    alignValue?: pulumi.Input<string>;
    legend?: pulumi.Input<inputs.GetPanelStateTimelineOptionsLegendArgs>;
    /**
     * Merge equal consecutive values. Defaults to true.
     */
    mergeValues?: pulumi.Input<boolean>;
    /**
     * Controls the row height. Defaults to 0.900000.
     */
    rowHeight?: pulumi.Input<number>;
    /**
     * Show timeline values on chart. Defaults to "auto".
     */
    showValue?: pulumi.Input<string>;
    tooltip?: pulumi.Input<inputs.GetPanelStateTimelineOptionsTooltipArgs>;
}

export interface GetPanelStateTimelineOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelStateTimelineOptionsLegendArgs {
    asTable?: pulumi.Input<boolean>;
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    displayMode: pulumi.Input<string>;
    isVisible?: pulumi.Input<boolean>;
    placement: pulumi.Input<string>;
    showLegend: pulumi.Input<boolean>;
    sortBy?: pulumi.Input<string>;
    sortDesc?: pulumi.Input<boolean>;
    width?: pulumi.Input<number>;
}

export interface GetPanelStateTimelineOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelStateTimelineOptionsTooltipArgs {
    mode: pulumi.Input<string>;
    sort: pulumi.Input<string>;
}

export interface GetPanelStateTimelineTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelStateTimelineTransformationFilter;
}

export interface GetPanelStateTimelineTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelStateTimelineTransformationFilterArgs>;
}

export interface GetPanelStateTimelineTransformationFilter {
}

export interface GetPanelStateTimelineTransformationFilterArgs {
}

export interface GetPanelStatusHistoryDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelStatusHistoryDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelStatusHistoryFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelStatusHistoryFieldConfigOverride[];
}

export interface GetPanelStatusHistoryFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigOverrideArgs>[]>;
}

export interface GetPanelStatusHistoryFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelStatusHistoryFieldConfigDefaultsColor;
    custom?: inputs.GetPanelStatusHistoryFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelStatusHistoryFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelStatusHistoryFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsCustom {
    /**
     * Defaults to 70.
     */
    fillOpacity?: number;
    hideFrom?: inputs.GetPanelStatusHistoryFieldConfigDefaultsCustomHideFrom;
    /**
     * Defaults to 1.
     */
    lineWidth?: number;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsCustomArgs {
    /**
     * Defaults to 70.
     */
    fillOpacity?: pulumi.Input<number>;
    hideFrom?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsCustomHideFromArgs>;
    /**
     * Defaults to 1.
     */
    lineWidth?: pulumi.Input<number>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelStatusHistoryFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelStatusHistoryFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryFieldConfigOverride {
    matcher?: inputs.GetPanelStatusHistoryFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelStatusHistoryFieldConfigOverrideProperty[];
}

export interface GetPanelStatusHistoryFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelStatusHistoryFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelStatusHistoryFieldConfigOverrideMatcher {
}

export interface GetPanelStatusHistoryFieldConfigOverrideMatcherArgs {
}

export interface GetPanelStatusHistoryFieldConfigOverrideProperty {
}

export interface GetPanelStatusHistoryFieldConfigOverridePropertyArgs {
}

export interface GetPanelStatusHistoryGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelStatusHistoryGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelStatusHistoryLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelStatusHistoryLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelStatusHistoryLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryOptions {
    /**
     * Controls the column width. Defaults to 0.900000.
     */
    colWidth?: number;
    legend?: inputs.GetPanelStatusHistoryOptionsLegend;
    /**
     * Set the height of the rows. Defaults to 0.900000.
     */
    rowHeight?: number;
    /**
     * Show values on the columns. Defaults to "auto".
     */
    showValue?: string;
    tooltip?: inputs.GetPanelStatusHistoryOptionsTooltip;
}

export interface GetPanelStatusHistoryOptionsArgs {
    /**
     * Controls the column width. Defaults to 0.900000.
     */
    colWidth?: pulumi.Input<number>;
    legend?: pulumi.Input<inputs.GetPanelStatusHistoryOptionsLegendArgs>;
    /**
     * Set the height of the rows. Defaults to 0.900000.
     */
    rowHeight?: pulumi.Input<number>;
    /**
     * Show values on the columns. Defaults to "auto".
     */
    showValue?: pulumi.Input<string>;
    tooltip?: pulumi.Input<inputs.GetPanelStatusHistoryOptionsTooltipArgs>;
}

export interface GetPanelStatusHistoryOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelStatusHistoryOptionsLegendArgs {
    asTable?: pulumi.Input<boolean>;
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    displayMode: pulumi.Input<string>;
    isVisible?: pulumi.Input<boolean>;
    placement: pulumi.Input<string>;
    showLegend: pulumi.Input<boolean>;
    sortBy?: pulumi.Input<string>;
    sortDesc?: pulumi.Input<boolean>;
    width?: pulumi.Input<number>;
}

export interface GetPanelStatusHistoryOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelStatusHistoryOptionsTooltipArgs {
    mode: pulumi.Input<string>;
    sort: pulumi.Input<string>;
}

export interface GetPanelStatusHistoryTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelStatusHistoryTransformationFilter;
}

export interface GetPanelStatusHistoryTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelStatusHistoryTransformationFilterArgs>;
}

export interface GetPanelStatusHistoryTransformationFilter {
}

export interface GetPanelStatusHistoryTransformationFilterArgs {
}

export interface GetPanelTableDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelTableDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelTableFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelTableFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelTableFieldConfigOverride[];
}

export interface GetPanelTableFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelTableFieldConfigOverrideArgs>[]>;
}

export interface GetPanelTableFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelTableFieldConfigDefaultsColor;
    custom?: inputs.GetPanelTableFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelTableFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelTableFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelTableFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelTableFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelTableFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelTableFieldConfigDefaultsCustom {
    /**
     * Defaults to 70.
     */
    fillOpacity?: number;
    hideFrom?: inputs.GetPanelTableFieldConfigDefaultsCustomHideFrom;
    /**
     * Defaults to 1.
     */
    lineWidth?: number;
}

export interface GetPanelTableFieldConfigDefaultsCustomArgs {
    /**
     * Defaults to 70.
     */
    fillOpacity?: pulumi.Input<number>;
    hideFrom?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsCustomHideFromArgs>;
    /**
     * Defaults to 1.
     */
    lineWidth?: pulumi.Input<number>;
}

export interface GetPanelTableFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelTableFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelTableFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelTableFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelTableFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelTableFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelTableFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelTableFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelTableFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelTableFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelTableFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelTableFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelTableFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTableFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelTableFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelTableFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelTableFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelTableFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelTableFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTableFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelTableFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelTableFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelTableFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelTableFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelTableFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTableFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelTableFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelTableFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTableFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelTableFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelTableFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelTableFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelTableFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelTableFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelTableFieldConfigOverride {
    matcher?: inputs.GetPanelTableFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelTableFieldConfigOverrideProperty[];
}

export interface GetPanelTableFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelTableFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelTableFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelTableFieldConfigOverrideMatcher {
}

export interface GetPanelTableFieldConfigOverrideMatcherArgs {
}

export interface GetPanelTableFieldConfigOverrideProperty {
}

export interface GetPanelTableFieldConfigOverridePropertyArgs {
}

export interface GetPanelTableGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelTableGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelTableLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelTableLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelTableLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelTableLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelTableOptions {
    /**
     * Controls the height of the rows. Defaults to "sm".
     */
    cellHeight?: string;
    /**
     * Controls footer options
     */
    footer?: inputs.GetPanelTableOptionsFooter;
    /**
     * Represents the index of the selected frame
     */
    frameIndex: number;
    /**
     * Controls whether the panel should show the header. Defaults to true.
     */
    showHeader?: boolean;
    /**
     * Controls whether the header should show icons for the column types. Defaults to false.
     */
    showTypeIcons?: boolean;
    /**
     * Used to control row sorting
     */
    sortBies?: inputs.GetPanelTableOptionsSortBy[];
}

export interface GetPanelTableOptionsArgs {
    /**
     * Controls the height of the rows. Defaults to "sm".
     */
    cellHeight?: pulumi.Input<string>;
    /**
     * Controls footer options
     */
    footer?: pulumi.Input<inputs.GetPanelTableOptionsFooterArgs>;
    /**
     * Represents the index of the selected frame
     */
    frameIndex: pulumi.Input<number>;
    /**
     * Controls whether the panel should show the header. Defaults to true.
     */
    showHeader?: pulumi.Input<boolean>;
    /**
     * Controls whether the header should show icons for the column types. Defaults to false.
     */
    showTypeIcons?: pulumi.Input<boolean>;
    /**
     * Used to control row sorting
     */
    sortBies?: pulumi.Input<pulumi.Input<inputs.GetPanelTableOptionsSortByArgs>[]>;
}

export interface GetPanelTableOptionsFooter {
    tableFooterOptions?: inputs.GetPanelTableOptionsFooterTableFooterOptions;
}

export interface GetPanelTableOptionsFooterArgs {
    tableFooterOptions?: pulumi.Input<inputs.GetPanelTableOptionsFooterTableFooterOptionsArgs>;
}

export interface GetPanelTableOptionsFooterTableFooterOptions {
    countRows?: boolean;
    enablePagination?: boolean;
    fields?: string[];
    show: boolean;
}

export interface GetPanelTableOptionsFooterTableFooterOptionsArgs {
    countRows?: pulumi.Input<boolean>;
    enablePagination?: pulumi.Input<boolean>;
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    show: pulumi.Input<boolean>;
}

export interface GetPanelTableOptionsSortBy {
    /**
     * Flag used to indicate descending sort order
     */
    desc?: boolean;
    /**
     * Sets the display name of the field to sort by
     */
    displayName: string;
}

export interface GetPanelTableOptionsSortByArgs {
    /**
     * Flag used to indicate descending sort order
     */
    desc?: pulumi.Input<boolean>;
    /**
     * Sets the display name of the field to sort by
     */
    displayName: pulumi.Input<string>;
}

export interface GetPanelTableTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelTableTransformationFilter;
}

export interface GetPanelTableTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelTableTransformationFilterArgs>;
}

export interface GetPanelTableTransformationFilter {
}

export interface GetPanelTableTransformationFilterArgs {
}

export interface GetPanelTextDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelTextDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelTextFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelTextFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelTextFieldConfigOverride[];
}

export interface GetPanelTextFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelTextFieldConfigOverrideArgs>[]>;
}

export interface GetPanelTextFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelTextFieldConfigDefaultsColor;
    custom?: inputs.GetPanelTextFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelTextFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelTextFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelTextFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelTextFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelTextFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelTextFieldConfigDefaultsCustom {
    /**
     * Defaults to 70.
     */
    fillOpacity?: number;
    hideFrom?: inputs.GetPanelTextFieldConfigDefaultsCustomHideFrom;
    /**
     * Defaults to 1.
     */
    lineWidth?: number;
}

export interface GetPanelTextFieldConfigDefaultsCustomArgs {
    /**
     * Defaults to 70.
     */
    fillOpacity?: pulumi.Input<number>;
    hideFrom?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsCustomHideFromArgs>;
    /**
     * Defaults to 1.
     */
    lineWidth?: pulumi.Input<number>;
}

export interface GetPanelTextFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelTextFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelTextFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelTextFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelTextFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelTextFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelTextFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelTextFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelTextFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelTextFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelTextFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelTextFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelTextFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTextFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelTextFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelTextFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelTextFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelTextFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelTextFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTextFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelTextFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelTextFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelTextFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelTextFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelTextFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTextFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelTextFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelTextFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTextFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelTextFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelTextFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelTextFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelTextFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelTextFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelTextFieldConfigOverride {
    matcher?: inputs.GetPanelTextFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelTextFieldConfigOverrideProperty[];
}

export interface GetPanelTextFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelTextFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelTextFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelTextFieldConfigOverrideMatcher {
}

export interface GetPanelTextFieldConfigOverrideMatcherArgs {
}

export interface GetPanelTextFieldConfigOverrideProperty {
}

export interface GetPanelTextFieldConfigOverridePropertyArgs {
}

export interface GetPanelTextGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelTextGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelTextLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelTextLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelTextLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelTextLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelTextOptions {
    code?: inputs.GetPanelTextOptionsCode;
    /**
     * Defaults to "# Title
     *
     * For markdown syntax help: [commonmark.org/help](https://commonmark.org/help/)".
     */
    content?: string;
    /**
     * Defaults to "markdown".
     */
    mode?: string;
}

export interface GetPanelTextOptionsArgs {
    code?: pulumi.Input<inputs.GetPanelTextOptionsCodeArgs>;
    /**
     * Defaults to "# Title
     *
     * For markdown syntax help: [commonmark.org/help](https://commonmark.org/help/)".
     */
    content?: pulumi.Input<string>;
    /**
     * Defaults to "markdown".
     */
    mode?: pulumi.Input<string>;
}

export interface GetPanelTextOptionsCode {
    /**
     * The language passed to monaco code editor. Defaults to "plaintext".
     */
    language?: string;
    /**
     * Defaults to false.
     */
    showLineNumbers?: boolean;
    /**
     * Defaults to false.
     */
    showMiniMap?: boolean;
}

export interface GetPanelTextOptionsCodeArgs {
    /**
     * The language passed to monaco code editor. Defaults to "plaintext".
     */
    language?: pulumi.Input<string>;
    /**
     * Defaults to false.
     */
    showLineNumbers?: pulumi.Input<boolean>;
    /**
     * Defaults to false.
     */
    showMiniMap?: pulumi.Input<boolean>;
}

export interface GetPanelTextTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelTextTransformationFilter;
}

export interface GetPanelTextTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelTextTransformationFilterArgs>;
}

export interface GetPanelTextTransformationFilter {
}

export interface GetPanelTextTransformationFilterArgs {
}

export interface GetPanelTimeSeriesDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelTimeSeriesDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelTimeSeriesFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelTimeSeriesFieldConfigOverride[];
}

export interface GetPanelTimeSeriesFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigOverrideArgs>[]>;
}

export interface GetPanelTimeSeriesFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelTimeSeriesFieldConfigDefaultsColor;
    custom?: inputs.GetPanelTimeSeriesFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelTimeSeriesFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelTimeSeriesFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom?: inputs.GetPanelTimeSeriesFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle?: inputs.GetPanelTimeSeriesFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution?: inputs.GetPanelTimeSeriesFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking?: inputs.GetPanelTimeSeriesFieldConfigDefaultsCustomStacking;
    thresholdsStyle?: inputs.GetPanelTimeSeriesFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    barAlignment?: pulumi.Input<number>;
    barMaxWidth?: pulumi.Input<number>;
    barWidthFactor?: pulumi.Input<number>;
    drawStyle?: pulumi.Input<string>;
    fillBelowTo?: pulumi.Input<string>;
    fillColor?: pulumi.Input<string>;
    fillOpacity?: pulumi.Input<number>;
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsCustomHideFromArgs>;
    lineColor?: pulumi.Input<string>;
    lineInterpolation?: pulumi.Input<string>;
    lineStyle?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsCustomLineStyleArgs>;
    lineWidth?: pulumi.Input<number>;
    pointColor?: pulumi.Input<string>;
    pointSize?: pulumi.Input<number>;
    pointSymbol?: pulumi.Input<string>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsCustomScaleDistributionArgs>;
    showPoints?: pulumi.Input<string>;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: pulumi.Input<string>;
    stacking?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsCustomStackingArgs>;
    thresholdsStyle?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsCustomThresholdsStyleArgs>;
    transform?: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomLineStyleArgs {
    dashes?: pulumi.Input<pulumi.Input<number>[]>;
    fill?: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomStackingArgs {
    group?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomThresholdsStyleArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelTimeSeriesFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelTimeSeriesFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesFieldConfigOverride {
    matcher?: inputs.GetPanelTimeSeriesFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelTimeSeriesFieldConfigOverrideProperty[];
}

export interface GetPanelTimeSeriesFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelTimeSeriesFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelTimeSeriesFieldConfigOverrideMatcher {
}

export interface GetPanelTimeSeriesFieldConfigOverrideMatcherArgs {
}

export interface GetPanelTimeSeriesFieldConfigOverrideProperty {
}

export interface GetPanelTimeSeriesFieldConfigOverridePropertyArgs {
}

export interface GetPanelTimeSeriesGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelTimeSeriesGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelTimeSeriesLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelTimeSeriesLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelTimeSeriesLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesOptions {
    legend?: inputs.GetPanelTimeSeriesOptionsLegend;
    tooltip?: inputs.GetPanelTimeSeriesOptionsTooltip;
}

export interface GetPanelTimeSeriesOptionsArgs {
    legend?: pulumi.Input<inputs.GetPanelTimeSeriesOptionsLegendArgs>;
    tooltip?: pulumi.Input<inputs.GetPanelTimeSeriesOptionsTooltipArgs>;
}

export interface GetPanelTimeSeriesOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelTimeSeriesOptionsLegendArgs {
    asTable?: pulumi.Input<boolean>;
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    displayMode: pulumi.Input<string>;
    isVisible?: pulumi.Input<boolean>;
    placement: pulumi.Input<string>;
    showLegend: pulumi.Input<boolean>;
    sortBy?: pulumi.Input<string>;
    sortDesc?: pulumi.Input<boolean>;
    width?: pulumi.Input<number>;
}

export interface GetPanelTimeSeriesOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelTimeSeriesOptionsTooltipArgs {
    mode: pulumi.Input<string>;
    sort: pulumi.Input<string>;
}

export interface GetPanelTimeSeriesTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelTimeSeriesTransformationFilter;
}

export interface GetPanelTimeSeriesTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelTimeSeriesTransformationFilterArgs>;
}

export interface GetPanelTimeSeriesTransformationFilter {
}

export interface GetPanelTimeSeriesTransformationFilterArgs {
}

export interface GetPanelTrendDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelTrendDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelTrendFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelTrendFieldConfigOverride[];
}

export interface GetPanelTrendFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelTrendFieldConfigOverrideArgs>[]>;
}

export interface GetPanelTrendFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelTrendFieldConfigDefaultsColor;
    custom?: inputs.GetPanelTrendFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelTrendFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelTrendFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelTrendFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelTrendFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelTrendFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom?: inputs.GetPanelTrendFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle?: inputs.GetPanelTrendFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution?: inputs.GetPanelTrendFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking?: inputs.GetPanelTrendFieldConfigDefaultsCustomStacking;
    thresholdsStyle?: inputs.GetPanelTrendFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelTrendFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    barAlignment?: pulumi.Input<number>;
    barMaxWidth?: pulumi.Input<number>;
    barWidthFactor?: pulumi.Input<number>;
    drawStyle?: pulumi.Input<string>;
    fillBelowTo?: pulumi.Input<string>;
    fillColor?: pulumi.Input<string>;
    fillOpacity?: pulumi.Input<number>;
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsCustomHideFromArgs>;
    lineColor?: pulumi.Input<string>;
    lineInterpolation?: pulumi.Input<string>;
    lineStyle?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsCustomLineStyleArgs>;
    lineWidth?: pulumi.Input<number>;
    pointColor?: pulumi.Input<string>;
    pointSize?: pulumi.Input<number>;
    pointSymbol?: pulumi.Input<string>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsCustomScaleDistributionArgs>;
    showPoints?: pulumi.Input<string>;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: pulumi.Input<string>;
    stacking?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsCustomStackingArgs>;
    thresholdsStyle?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsCustomThresholdsStyleArgs>;
    transform?: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelTrendFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelTrendFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelTrendFieldConfigDefaultsCustomLineStyleArgs {
    dashes?: pulumi.Input<pulumi.Input<number>[]>;
    fill?: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelTrendFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelTrendFieldConfigDefaultsCustomStackingArgs {
    group?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelTrendFieldConfigDefaultsCustomThresholdsStyleArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelTrendFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelTrendFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelTrendFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelTrendFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelTrendFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelTrendFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelTrendFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelTrendFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelTrendFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelTrendFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelTrendFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelTrendFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelTrendFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelTrendFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelTrendFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelTrendFieldConfigOverride {
    matcher?: inputs.GetPanelTrendFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelTrendFieldConfigOverrideProperty[];
}

export interface GetPanelTrendFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelTrendFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelTrendFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelTrendFieldConfigOverrideMatcher {
}

export interface GetPanelTrendFieldConfigOverrideMatcherArgs {
}

export interface GetPanelTrendFieldConfigOverrideProperty {
}

export interface GetPanelTrendFieldConfigOverridePropertyArgs {
}

export interface GetPanelTrendGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelTrendGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelTrendLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelTrendLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelTrendLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelTrendLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelTrendOptions {
    legend?: inputs.GetPanelTrendOptionsLegend;
    tooltip?: inputs.GetPanelTrendOptionsTooltip;
    /**
     * Name of the x field to use (defaults to first number)
     */
    xField?: string;
}

export interface GetPanelTrendOptionsArgs {
    legend?: pulumi.Input<inputs.GetPanelTrendOptionsLegendArgs>;
    tooltip?: pulumi.Input<inputs.GetPanelTrendOptionsTooltipArgs>;
    /**
     * Name of the x field to use (defaults to first number)
     */
    xField?: pulumi.Input<string>;
}

export interface GetPanelTrendOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelTrendOptionsLegendArgs {
    asTable?: pulumi.Input<boolean>;
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    displayMode: pulumi.Input<string>;
    isVisible?: pulumi.Input<boolean>;
    placement: pulumi.Input<string>;
    showLegend: pulumi.Input<boolean>;
    sortBy?: pulumi.Input<string>;
    sortDesc?: pulumi.Input<boolean>;
    width?: pulumi.Input<number>;
}

export interface GetPanelTrendOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelTrendOptionsTooltipArgs {
    mode: pulumi.Input<string>;
    sort: pulumi.Input<string>;
}

export interface GetPanelTrendTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelTrendTransformationFilter;
}

export interface GetPanelTrendTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelTrendTransformationFilterArgs>;
}

export interface GetPanelTrendTransformationFilter {
}

export interface GetPanelTrendTransformationFilterArgs {
}

export interface GetPanelXyChartDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelXyChartDatasourceArgs {
    /**
     * The plugin type-id
     */
    type?: pulumi.Input<string>;
    /**
     * Specific datasource instance
     */
    uid?: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: inputs.GetPanelXyChartFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: inputs.GetPanelXyChartFieldConfigOverride[];
}

export interface GetPanelXyChartFieldConfigArgs {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsArgs>;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.GetPanelXyChartFieldConfigOverrideArgs>[]>;
}

export interface GetPanelXyChartFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color?: inputs.GetPanelXyChartFieldConfigDefaultsColor;
    custom?: inputs.GetPanelXyChartFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: inputs.GetPanelXyChartFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds?: inputs.GetPanelXyChartFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelXyChartFieldConfigDefaultsArgs {
    /**
     * Panel color configuration
     */
    color?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsColorArgs>;
    custom?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsCustomArgs>;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: pulumi.Input<number>;
    /**
     * Human readable field metadata
     */
    description?: pulumi.Input<string>;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: pulumi.Input<string>;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: pulumi.Input<string>;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: pulumi.Input<boolean>;
    /**
     * Convert input values into a display string
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsMappingArgs>[]>;
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: pulumi.Input<number>;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: pulumi.Input<number>;
    /**
     * Alternative to empty string
     */
    noValue?: pulumi.Input<string>;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: pulumi.Input<string>;
    /**
     * Map numeric values to states
     */
    thresholds?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsThresholdsArgs>;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: pulumi.Input<string>;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: pulumi.Input<boolean>;
}

export interface GetPanelXyChartFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsColorArgs {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: pulumi.Input<string>;
    /**
     * The main color scheme mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom?: inputs.GetPanelXyChartFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle?: inputs.GetPanelXyChartFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution?: inputs.GetPanelXyChartFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking?: inputs.GetPanelXyChartFieldConfigDefaultsCustomStacking;
    thresholdsStyle?: inputs.GetPanelXyChartFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    barAlignment?: pulumi.Input<number>;
    barMaxWidth?: pulumi.Input<number>;
    barWidthFactor?: pulumi.Input<number>;
    drawStyle?: pulumi.Input<string>;
    fillBelowTo?: pulumi.Input<string>;
    fillColor?: pulumi.Input<string>;
    fillOpacity?: pulumi.Input<number>;
    gradientMode?: pulumi.Input<string>;
    hideFrom?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsCustomHideFromArgs>;
    lineColor?: pulumi.Input<string>;
    lineInterpolation?: pulumi.Input<string>;
    lineStyle?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsCustomLineStyleArgs>;
    lineWidth?: pulumi.Input<number>;
    pointColor?: pulumi.Input<string>;
    pointSize?: pulumi.Input<number>;
    pointSymbol?: pulumi.Input<string>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsCustomScaleDistributionArgs>;
    showPoints?: pulumi.Input<string>;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: pulumi.Input<string>;
    stacking?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsCustomStackingArgs>;
    thresholdsStyle?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsCustomThresholdsStyleArgs>;
    transform?: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomLineStyleArgs {
    dashes?: pulumi.Input<pulumi.Input<number>[]>;
    fill?: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomStackingArgs {
    group?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomThresholdsStyleArgs {
    mode: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsMapping {
    rangeMap?: inputs.GetPanelXyChartFieldConfigDefaultsMappingRangeMap;
    regexMap?: inputs.GetPanelXyChartFieldConfigDefaultsMappingRegexMap;
    specialValueMap?: inputs.GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMap;
    valueMap?: inputs.GetPanelXyChartFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingArgs {
    rangeMap?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsMappingRangeMapArgs>;
    regexMap?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsMappingRegexMapArgs>;
    specialValueMap?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapArgs>;
    valueMap?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsMappingValueMapArgs>;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: inputs.GetPanelXyChartFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRangeMapArgs {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsMappingRangeMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result?: inputs.GetPanelXyChartFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRangeMapOptionsArgs {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: pulumi.Input<string>;
    /**
     * Config to apply when the value is within the range
     */
    result?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsMappingRangeMapOptionsResultArgs>;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRangeMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: inputs.GetPanelXyChartFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRegexMapArgs {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsMappingRegexMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result?: inputs.GetPanelXyChartFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRegexMapOptionsArgs {
    /**
     * Regular expression to match against
     */
    pattern: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the regex
     */
    result?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsMappingRegexMapOptionsResultArgs>;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRegexMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMap {
    options?: inputs.GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapArgs {
    options?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapOptionsArgs>;
    type: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result?: inputs.GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapOptionsArgs {
    /**
     * Special value to match against
     */
    match: pulumi.Input<string>;
    /**
     * Config to apply when the value matches the special value
     */
    result?: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs>;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapOptionsResultArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: inputs.GetPanelXyChartFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingValueMapArgs {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsMappingValueMapOptionsArgs>}>;
    type: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingValueMapOptionsArgs {
    /**
     * Text to use when the value matches
     */
    color?: pulumi.Input<string>;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: pulumi.Input<string>;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: pulumi.Input<number>;
    /**
     * Text to display when the value matches
     */
    text?: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: inputs.GetPanelXyChartFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelXyChartFieldConfigDefaultsThresholdsArgs {
    /**
     * Thresholds mode.
     */
    mode: pulumi.Input<string>;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: pulumi.Input<pulumi.Input<inputs.GetPanelXyChartFieldConfigDefaultsThresholdsStepArgs>[]>;
}

export interface GetPanelXyChartFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelXyChartFieldConfigDefaultsThresholdsStepArgs {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: pulumi.Input<string>;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: pulumi.Input<string>;
}

export interface GetPanelXyChartFieldConfigOverride {
    matcher?: inputs.GetPanelXyChartFieldConfigOverrideMatcher;
    properties?: inputs.GetPanelXyChartFieldConfigOverrideProperty[];
}

export interface GetPanelXyChartFieldConfigOverrideArgs {
    matcher?: pulumi.Input<inputs.GetPanelXyChartFieldConfigOverrideMatcherArgs>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetPanelXyChartFieldConfigOverridePropertyArgs>[]>;
}

export interface GetPanelXyChartFieldConfigOverrideMatcher {
}

export interface GetPanelXyChartFieldConfigOverrideMatcherArgs {
}

export interface GetPanelXyChartFieldConfigOverrideProperty {
}

export interface GetPanelXyChartFieldConfigOverridePropertyArgs {
}

export interface GetPanelXyChartGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: number;
}

export interface GetPanelXyChartGridPosArgs {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h?: pulumi.Input<number>;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: pulumi.Input<boolean>;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w?: pulumi.Input<number>;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x?: pulumi.Input<number>;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y?: pulumi.Input<number>;
}

export interface GetPanelXyChartLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelXyChartLibraryPanelArgs {
    /**
     * Library panel name
     */
    name: pulumi.Input<string>;
    /**
     * Library panel uid
     */
    uid: pulumi.Input<string>;
}

export interface GetPanelXyChartLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelXyChartLinkArgs {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown?: pulumi.Input<boolean>;
    /**
     * Icon name to be displayed with the link
     */
    icon: pulumi.Input<string>;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars?: pulumi.Input<boolean>;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime?: pulumi.Input<boolean>;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank?: pulumi.Input<boolean>;
    /**
     * Title to display with the link
     */
    title: pulumi.Input<string>;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: pulumi.Input<string>;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: pulumi.Input<string>;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: pulumi.Input<string>;
}

export interface GetPanelXyChartOptions {
    dims?: inputs.GetPanelXyChartOptionsDims;
    legend?: inputs.GetPanelXyChartOptionsLegend;
    series?: inputs.GetPanelXyChartOptionsSeries[];
    seriesMapping?: string;
    tooltip?: inputs.GetPanelXyChartOptionsTooltip;
}

export interface GetPanelXyChartOptionsArgs {
    dims?: pulumi.Input<inputs.GetPanelXyChartOptionsDimsArgs>;
    legend?: pulumi.Input<inputs.GetPanelXyChartOptionsLegendArgs>;
    series?: pulumi.Input<pulumi.Input<inputs.GetPanelXyChartOptionsSeriesArgs>[]>;
    seriesMapping?: pulumi.Input<string>;
    tooltip?: pulumi.Input<inputs.GetPanelXyChartOptionsTooltipArgs>;
}

export interface GetPanelXyChartOptionsDims {
    excludes?: string[];
    frame: number;
    x?: string;
}

export interface GetPanelXyChartOptionsDimsArgs {
    excludes?: pulumi.Input<pulumi.Input<string>[]>;
    frame: pulumi.Input<number>;
    x?: pulumi.Input<string>;
}

export interface GetPanelXyChartOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelXyChartOptionsLegendArgs {
    asTable?: pulumi.Input<boolean>;
    calcs?: pulumi.Input<pulumi.Input<string>[]>;
    displayMode: pulumi.Input<string>;
    isVisible?: pulumi.Input<boolean>;
    placement: pulumi.Input<string>;
    showLegend: pulumi.Input<boolean>;
    sortBy?: pulumi.Input<string>;
    sortDesc?: pulumi.Input<boolean>;
    width?: pulumi.Input<number>;
}

export interface GetPanelXyChartOptionsSeries {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    hideFrom?: inputs.GetPanelXyChartOptionsSeriesHideFrom;
    /**
     * Defaults to "auto".
     */
    label?: string;
    labelValue?: inputs.GetPanelXyChartOptionsSeriesLabelValue;
    lineColor?: inputs.GetPanelXyChartOptionsSeriesLineColor;
    lineStyle?: inputs.GetPanelXyChartOptionsSeriesLineStyle;
    lineWidth?: number;
    name?: string;
    pointColor?: inputs.GetPanelXyChartOptionsSeriesPointColor;
    pointSize?: inputs.GetPanelXyChartOptionsSeriesPointSize;
    scaleDistribution?: inputs.GetPanelXyChartOptionsSeriesScaleDistribution;
    /**
     * Defaults to "points".
     */
    show?: string;
    x?: string;
    y?: string;
}

export interface GetPanelXyChartOptionsSeriesArgs {
    axisCenteredZero?: pulumi.Input<boolean>;
    axisColorMode?: pulumi.Input<string>;
    axisGridShow?: pulumi.Input<boolean>;
    axisLabel?: pulumi.Input<string>;
    axisPlacement?: pulumi.Input<string>;
    axisSoftMax?: pulumi.Input<number>;
    axisSoftMin?: pulumi.Input<number>;
    axisWidth?: pulumi.Input<number>;
    hideFrom?: pulumi.Input<inputs.GetPanelXyChartOptionsSeriesHideFromArgs>;
    /**
     * Defaults to "auto".
     */
    label?: pulumi.Input<string>;
    labelValue?: pulumi.Input<inputs.GetPanelXyChartOptionsSeriesLabelValueArgs>;
    lineColor?: pulumi.Input<inputs.GetPanelXyChartOptionsSeriesLineColorArgs>;
    lineStyle?: pulumi.Input<inputs.GetPanelXyChartOptionsSeriesLineStyleArgs>;
    lineWidth?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    pointColor?: pulumi.Input<inputs.GetPanelXyChartOptionsSeriesPointColorArgs>;
    pointSize?: pulumi.Input<inputs.GetPanelXyChartOptionsSeriesPointSizeArgs>;
    scaleDistribution?: pulumi.Input<inputs.GetPanelXyChartOptionsSeriesScaleDistributionArgs>;
    /**
     * Defaults to "points".
     */
    show?: pulumi.Input<string>;
    x?: pulumi.Input<string>;
    y?: pulumi.Input<string>;
}

export interface GetPanelXyChartOptionsSeriesHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelXyChartOptionsSeriesHideFromArgs {
    legend: pulumi.Input<boolean>;
    tooltip: pulumi.Input<boolean>;
    viz: pulumi.Input<boolean>;
}

export interface GetPanelXyChartOptionsSeriesLabelValue {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
    mode: string;
}

export interface GetPanelXyChartOptionsSeriesLabelValueArgs {
    /**
     * fixed: T -- will be added by each element
     */
    field?: pulumi.Input<string>;
    fixed?: pulumi.Input<string>;
    mode: pulumi.Input<string>;
}

export interface GetPanelXyChartOptionsSeriesLineColor {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
}

export interface GetPanelXyChartOptionsSeriesLineColorArgs {
    /**
     * fixed: T -- will be added by each element
     */
    field?: pulumi.Input<string>;
    fixed?: pulumi.Input<string>;
}

export interface GetPanelXyChartOptionsSeriesLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelXyChartOptionsSeriesLineStyleArgs {
    dashes?: pulumi.Input<pulumi.Input<number>[]>;
    fill?: pulumi.Input<string>;
}

export interface GetPanelXyChartOptionsSeriesPointColor {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
}

export interface GetPanelXyChartOptionsSeriesPointColorArgs {
    /**
     * fixed: T -- will be added by each element
     */
    field?: pulumi.Input<string>;
    fixed?: pulumi.Input<string>;
}

export interface GetPanelXyChartOptionsSeriesPointSize {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: number;
    max: number;
    min: number;
    mode?: string;
}

export interface GetPanelXyChartOptionsSeriesPointSizeArgs {
    /**
     * fixed: T -- will be added by each element
     */
    field?: pulumi.Input<string>;
    fixed?: pulumi.Input<number>;
    max: pulumi.Input<number>;
    min: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface GetPanelXyChartOptionsSeriesScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelXyChartOptionsSeriesScaleDistributionArgs {
    linearThreshold?: pulumi.Input<number>;
    log?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface GetPanelXyChartOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelXyChartOptionsTooltipArgs {
    mode: pulumi.Input<string>;
    sort: pulumi.Input<string>;
}

export interface GetPanelXyChartTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: inputs.GetPanelXyChartTransformationFilter;
}

export interface GetPanelXyChartTransformationArgs {
    /**
     * Disabled transformations are skipped
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter?: pulumi.Input<inputs.GetPanelXyChartTransformationFilterArgs>;
}

export interface GetPanelXyChartTransformationFilter {
}

export interface GetPanelXyChartTransformationFilterArgs {
}

export interface GetQueryElasticsearchBucketAgg {
    dateHistogram?: inputs.GetQueryElasticsearchBucketAggDateHistogram;
    filters?: inputs.GetQueryElasticsearchBucketAggFilters;
    geoHashGrid?: inputs.GetQueryElasticsearchBucketAggGeoHashGrid;
    histogram?: inputs.GetQueryElasticsearchBucketAggHistogram;
    nested?: inputs.GetQueryElasticsearchBucketAggNested;
    terms?: inputs.GetQueryElasticsearchBucketAggTerms;
}

export interface GetQueryElasticsearchBucketAggArgs {
    dateHistogram?: pulumi.Input<inputs.GetQueryElasticsearchBucketAggDateHistogramArgs>;
    filters?: pulumi.Input<inputs.GetQueryElasticsearchBucketAggFiltersArgs>;
    geoHashGrid?: pulumi.Input<inputs.GetQueryElasticsearchBucketAggGeoHashGridArgs>;
    histogram?: pulumi.Input<inputs.GetQueryElasticsearchBucketAggHistogramArgs>;
    nested?: pulumi.Input<inputs.GetQueryElasticsearchBucketAggNestedArgs>;
    terms?: pulumi.Input<inputs.GetQueryElasticsearchBucketAggTermsArgs>;
}

export interface GetQueryElasticsearchBucketAggDateHistogram {
    field?: string;
    settings?: inputs.GetQueryElasticsearchBucketAggDateHistogramSettings;
    type: string;
}

export interface GetQueryElasticsearchBucketAggDateHistogramArgs {
    field?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchBucketAggDateHistogramSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchBucketAggDateHistogramSettings {
    interval?: string;
    minDocCount?: string;
    offset?: string;
    timeZone?: string;
    trimEdges?: string;
}

export interface GetQueryElasticsearchBucketAggDateHistogramSettingsArgs {
    interval?: pulumi.Input<string>;
    minDocCount?: pulumi.Input<string>;
    offset?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
    trimEdges?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchBucketAggFilters {
    settings?: inputs.GetQueryElasticsearchBucketAggFiltersSettings;
    type: string;
}

export interface GetQueryElasticsearchBucketAggFiltersArgs {
    settings?: pulumi.Input<inputs.GetQueryElasticsearchBucketAggFiltersSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchBucketAggFiltersSettings {
    filters?: inputs.GetQueryElasticsearchBucketAggFiltersSettingsFilter[];
}

export interface GetQueryElasticsearchBucketAggFiltersSettingsArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetQueryElasticsearchBucketAggFiltersSettingsFilterArgs>[]>;
}

export interface GetQueryElasticsearchBucketAggFiltersSettingsFilter {
    label: string;
    query: string;
}

export interface GetQueryElasticsearchBucketAggFiltersSettingsFilterArgs {
    label: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface GetQueryElasticsearchBucketAggGeoHashGrid {
    field?: string;
    settings?: inputs.GetQueryElasticsearchBucketAggGeoHashGridSettings;
    type: string;
}

export interface GetQueryElasticsearchBucketAggGeoHashGridArgs {
    field?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchBucketAggGeoHashGridSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchBucketAggGeoHashGridSettings {
    precision?: string;
}

export interface GetQueryElasticsearchBucketAggGeoHashGridSettingsArgs {
    precision?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchBucketAggHistogram {
    field?: string;
    settings?: inputs.GetQueryElasticsearchBucketAggHistogramSettings;
    type: string;
}

export interface GetQueryElasticsearchBucketAggHistogramArgs {
    field?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchBucketAggHistogramSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchBucketAggHistogramSettings {
    interval?: string;
    minDocCount?: string;
}

export interface GetQueryElasticsearchBucketAggHistogramSettingsArgs {
    interval?: pulumi.Input<string>;
    minDocCount?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchBucketAggNested {
    field?: string;
    settings?: inputs.GetQueryElasticsearchBucketAggNestedSettings;
    type: string;
}

export interface GetQueryElasticsearchBucketAggNestedArgs {
    field?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchBucketAggNestedSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchBucketAggNestedSettings {
}

export interface GetQueryElasticsearchBucketAggNestedSettingsArgs {
}

export interface GetQueryElasticsearchBucketAggTerms {
    field?: string;
    settings?: inputs.GetQueryElasticsearchBucketAggTermsSettings;
    type: string;
}

export interface GetQueryElasticsearchBucketAggTermsArgs {
    field?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchBucketAggTermsSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchBucketAggTermsSettings {
    minDocCount?: string;
    missing?: string;
    order?: string;
    orderBy?: string;
    size?: string;
}

export interface GetQueryElasticsearchBucketAggTermsSettingsArgs {
    minDocCount?: pulumi.Input<string>;
    missing?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
    orderBy?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetric {
    count?: inputs.GetQueryElasticsearchMetricCount;
    metricAggregationWithSettings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettings;
    pipelineMetricAggregation?: inputs.GetQueryElasticsearchMetricPipelineMetricAggregation;
}

export interface GetQueryElasticsearchMetricArgs {
    count?: pulumi.Input<inputs.GetQueryElasticsearchMetricCountArgs>;
    metricAggregationWithSettings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsArgs>;
    pipelineMetricAggregation?: pulumi.Input<inputs.GetQueryElasticsearchMetricPipelineMetricAggregationArgs>;
}

export interface GetQueryElasticsearchMetricCount {
    hide?: boolean;
    type: string;
}

export interface GetQueryElasticsearchMetricCountArgs {
    hide?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettings {
    average?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsAverage;
    bucketScript?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScript;
    cumulativeSum?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsCumulativeSum;
    derivative?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsDerivative;
    extendedStats?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStats;
    logs?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsLogs;
    max?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMax;
    min?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMin;
    movingAverage?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingAverage;
    movingFunction?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingFunction;
    percentiles?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsPercentiles;
    rate?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRate;
    rawData?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRawData;
    rawDocument?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDocument;
    serialDiff?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsSerialDiff;
    sum?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsSum;
    topMetrics?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsTopMetrics;
    uniqueCount?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsUniqueCount;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsArgs {
    average?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsAverageArgs>;
    bucketScript?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptArgs>;
    cumulativeSum?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsCumulativeSumArgs>;
    derivative?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsDerivativeArgs>;
    extendedStats?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsArgs>;
    logs?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsLogsArgs>;
    max?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMaxArgs>;
    min?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMinArgs>;
    movingAverage?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingAverageArgs>;
    movingFunction?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingFunctionArgs>;
    percentiles?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsPercentilesArgs>;
    rate?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRateArgs>;
    rawData?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDataArgs>;
    rawDocument?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDocumentArgs>;
    serialDiff?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsSerialDiffArgs>;
    sum?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsSumArgs>;
    topMetrics?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsTopMetricsArgs>;
    uniqueCount?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsUniqueCountArgs>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsAverage {
    field?: string;
    hide?: boolean;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsAverageSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsAverageArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsAverageSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsAverageSettings {
    missing?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsAverageSettingsArgs {
    missing?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScript {
    hide?: boolean;
    pipelineVariables?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptPipelineVariable[];
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptArgs {
    hide?: pulumi.Input<boolean>;
    pipelineVariables?: pulumi.Input<pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptPipelineVariableArgs>[]>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptPipelineVariable {
    name: string;
    pipelineAgg: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptPipelineVariableArgs {
    name: pulumi.Input<string>;
    pipelineAgg: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptSettings {
    /**
     * JSON-encoded string.
     */
    script?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptSettingsArgs {
    /**
     * JSON-encoded string.
     */
    script?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsCumulativeSum {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsCumulativeSumSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsCumulativeSumArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    pipelineAgg?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsCumulativeSumSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsCumulativeSumSettings {
    format?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsCumulativeSumSettingsArgs {
    format?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsDerivative {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsDerivativeSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsDerivativeArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    pipelineAgg?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsDerivativeSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsDerivativeSettings {
    unit?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsDerivativeSettingsArgs {
    unit?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStats {
    field?: string;
    hide?: boolean;
    meta?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsMeta;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    meta?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsMetaArgs>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsMeta {
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsMetaArgs {
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsSettings {
    missing?: string;
    sigma?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsSettingsArgs {
    missing?: pulumi.Input<string>;
    sigma?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsLogs {
    hide?: boolean;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsLogsSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsLogsArgs {
    hide?: pulumi.Input<boolean>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsLogsSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsLogsSettings {
    limit?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsLogsSettingsArgs {
    limit?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMax {
    field?: string;
    hide?: boolean;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMaxSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMaxArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMaxSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMaxSettings {
    missing?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMaxSettingsArgs {
    missing?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMin {
    field?: string;
    hide?: boolean;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMinSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMinArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMinSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMinSettings {
    missing?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMinSettingsArgs {
    missing?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingAverage {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingAverageSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingAverageArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    pipelineAgg?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingAverageSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingAverageSettings {
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingAverageSettingsArgs {
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingFunction {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingFunctionSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingFunctionArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    pipelineAgg?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingFunctionSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingFunctionSettings {
    /**
     * JSON-encoded string.
     */
    script?: string;
    shift?: string;
    window?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingFunctionSettingsArgs {
    /**
     * JSON-encoded string.
     */
    script?: pulumi.Input<string>;
    shift?: pulumi.Input<string>;
    window?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsPercentiles {
    field?: string;
    hide?: boolean;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsPercentilesSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsPercentilesArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsPercentilesSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsPercentilesSettings {
    missing?: string;
    percents?: string[];
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsPercentilesSettingsArgs {
    missing?: pulumi.Input<string>;
    percents?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRate {
    field?: string;
    hide?: boolean;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRateSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRateArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRateSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRateSettings {
    mode?: string;
    unit?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRateSettingsArgs {
    mode?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRawData {
    hide?: boolean;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDataSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDataArgs {
    hide?: pulumi.Input<boolean>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDataSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDataSettings {
    size?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDataSettingsArgs {
    size?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDocument {
    hide?: boolean;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDocumentSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDocumentArgs {
    hide?: pulumi.Input<boolean>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDocumentSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDocumentSettings {
    size?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDocumentSettingsArgs {
    size?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsSerialDiff {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsSerialDiffSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsSerialDiffArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    pipelineAgg?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsSerialDiffSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsSerialDiffSettings {
    lag?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsSerialDiffSettingsArgs {
    lag?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsSum {
    field?: string;
    hide?: boolean;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsSumSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsSumArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsSumSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsSumSettings {
    missing?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsSumSettingsArgs {
    missing?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsTopMetrics {
    hide?: boolean;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsTopMetricsSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsTopMetricsArgs {
    hide?: pulumi.Input<boolean>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsTopMetricsSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsTopMetricsSettings {
    metrics?: string[];
    order?: string;
    orderBy?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsTopMetricsSettingsArgs {
    metrics?: pulumi.Input<pulumi.Input<string>[]>;
    order?: pulumi.Input<string>;
    orderBy?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsUniqueCount {
    field?: string;
    hide?: boolean;
    settings?: inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsUniqueCountSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsUniqueCountArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsUniqueCountSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsUniqueCountSettings {
    missing?: string;
    precisionThreshold?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsUniqueCountSettingsArgs {
    missing?: pulumi.Input<string>;
    precisionThreshold?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregation {
    bucketScript?: inputs.GetQueryElasticsearchMetricPipelineMetricAggregationBucketScript;
    cumulativeSum?: inputs.GetQueryElasticsearchMetricPipelineMetricAggregationCumulativeSum;
    derivative?: inputs.GetQueryElasticsearchMetricPipelineMetricAggregationDerivative;
    movingAverage?: inputs.GetQueryElasticsearchMetricPipelineMetricAggregationMovingAverage;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationArgs {
    bucketScript?: pulumi.Input<inputs.GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptArgs>;
    cumulativeSum?: pulumi.Input<inputs.GetQueryElasticsearchMetricPipelineMetricAggregationCumulativeSumArgs>;
    derivative?: pulumi.Input<inputs.GetQueryElasticsearchMetricPipelineMetricAggregationDerivativeArgs>;
    movingAverage?: pulumi.Input<inputs.GetQueryElasticsearchMetricPipelineMetricAggregationMovingAverageArgs>;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationBucketScript {
    hide?: boolean;
    pipelineVariables?: inputs.GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptPipelineVariable[];
    settings?: inputs.GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptArgs {
    hide?: pulumi.Input<boolean>;
    pipelineVariables?: pulumi.Input<pulumi.Input<inputs.GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptPipelineVariableArgs>[]>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptPipelineVariable {
    name: string;
    pipelineAgg: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptPipelineVariableArgs {
    name: pulumi.Input<string>;
    pipelineAgg: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptSettings {
    /**
     * JSON-encoded string.
     */
    script?: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptSettingsArgs {
    /**
     * JSON-encoded string.
     */
    script?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationCumulativeSum {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings?: inputs.GetQueryElasticsearchMetricPipelineMetricAggregationCumulativeSumSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationCumulativeSumArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    pipelineAgg?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricPipelineMetricAggregationCumulativeSumSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationCumulativeSumSettings {
    format?: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationCumulativeSumSettingsArgs {
    format?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationDerivative {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings?: inputs.GetQueryElasticsearchMetricPipelineMetricAggregationDerivativeSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationDerivativeArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    pipelineAgg?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricPipelineMetricAggregationDerivativeSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationDerivativeSettings {
    unit?: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationDerivativeSettingsArgs {
    unit?: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationMovingAverage {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings?: inputs.GetQueryElasticsearchMetricPipelineMetricAggregationMovingAverageSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationMovingAverageArgs {
    field?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    pipelineAgg?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetQueryElasticsearchMetricPipelineMetricAggregationMovingAverageSettingsArgs>;
    type: pulumi.Input<string>;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationMovingAverageSettings {
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationMovingAverageSettingsArgs {
}

export interface GetQueryTestDataCsvWafe {
    labels?: string;
    name?: string;
    timeStep?: number;
    valuesCsv?: string;
}

export interface GetQueryTestDataCsvWafeArgs {
    labels?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    timeStep?: pulumi.Input<number>;
    valuesCsv?: pulumi.Input<string>;
}

export interface GetQueryTestDataNodes {
    count?: number;
    type?: string;
}

export interface GetQueryTestDataNodesArgs {
    count?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface GetQueryTestDataPulseWave {
    offCount?: number;
    offValue?: number;
    onCount?: number;
    onValue?: number;
    timeStep?: number;
}

export interface GetQueryTestDataPulseWaveArgs {
    offCount?: pulumi.Input<number>;
    offValue?: pulumi.Input<number>;
    onCount?: pulumi.Input<number>;
    onValue?: pulumi.Input<number>;
    timeStep?: pulumi.Input<number>;
}

export interface GetQueryTestDataSim {
    config?: inputs.GetQueryTestDataSimConfig;
    key?: inputs.GetQueryTestDataSimKey;
    last?: boolean;
    stream?: boolean;
}

export interface GetQueryTestDataSimArgs {
    config?: pulumi.Input<inputs.GetQueryTestDataSimConfigArgs>;
    key?: pulumi.Input<inputs.GetQueryTestDataSimKeyArgs>;
    last?: pulumi.Input<boolean>;
    stream?: pulumi.Input<boolean>;
}

export interface GetQueryTestDataSimConfig {
}

export interface GetQueryTestDataSimConfigArgs {
}

export interface GetQueryTestDataSimKey {
    tick: number;
    type: string;
    uid?: string;
}

export interface GetQueryTestDataSimKeyArgs {
    tick: pulumi.Input<number>;
    type: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
}

export interface GetQueryTestDataStream {
    bands?: number;
    noise: number;
    speed: number;
    spread: number;
    type: string;
    url?: string;
}

export interface GetQueryTestDataStreamArgs {
    bands?: pulumi.Input<number>;
    noise: pulumi.Input<number>;
    speed: pulumi.Input<number>;
    spread: pulumi.Input<number>;
    type: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface GetQueryTestDataUsa {
    fields?: string[];
    mode?: string;
    period?: string;
    states?: string[];
}

export interface GetQueryTestDataUsaArgs {
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    mode?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    states?: pulumi.Input<pulumi.Input<string>[]>;
}
