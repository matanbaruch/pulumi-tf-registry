// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetCoreDashboardAnnotations {
    /**
     * List of annotations
     */
    lists?: outputs.GetCoreDashboardAnnotationsList[];
}

export interface GetCoreDashboardAnnotationsList {
    /**
     * Datasource where the annotations data is
     */
    datasource: outputs.GetCoreDashboardAnnotationsListDatasource;
    /**
     * When enabled the annotation query is issued with every dashboard refresh. Defaults to true.
     */
    enable: boolean;
    /**
     * Filters to apply when fetching annotations
     */
    filter: outputs.GetCoreDashboardAnnotationsListFilter;
    /**
     * Annotation queries can be toggled on or off at the top of the dashboard.
     * When hide is true, the toggle is not shown in the dashboard. Defaults to false.
     */
    hide: boolean;
    /**
     * Color to use for the annotation event markers
     */
    iconColor: string;
    /**
     * Name of annotation.
     */
    name: string;
    /**
     * TODO.. this should just be a normal query target
     */
    target: outputs.GetCoreDashboardAnnotationsListTarget;
    /**
     * TODO -- this should not exist here, it is based on the --grafana-- datasource
     */
    type?: string;
}

export interface GetCoreDashboardAnnotationsListDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetCoreDashboardAnnotationsListFilter {
    /**
     * Should the specified panels be included or excluded. Defaults to false.
     */
    exclude: boolean;
    /**
     * Panel IDs that should be included or excluded
     */
    ids?: number[];
}

export interface GetCoreDashboardAnnotationsListTarget {
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     */
    limit: number;
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     */
    matchAny: boolean;
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     */
    tags?: string[];
    /**
     * Only required/valid for the grafana datasource...
     * but code+tests is already depending on it so hard to change
     */
    type: string;
}

export interface GetCoreDashboardLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetCoreDashboardSnapshot {
    /**
     * Time when the snapshot was created
     */
    created: string;
    /**
     * Time when the snapshot expires, default is never to expire
     */
    expires: string;
    /**
     * Is the snapshot saved in an external grafana instance
     */
    external: boolean;
    /**
     * external url, if snapshot was shared in external grafana instance
     */
    externalUrl: string;
    /**
     * Optional, defined the unique key of the snapshot, required if external is true
     */
    key: string;
    /**
     * Optional, name of the snapshot
     */
    name: string;
    /**
     * org id of the snapshot
     */
    orgId: number;
    /**
     * last time when the snapshot was updated
     */
    updated: string;
    /**
     * url of the snapshot, if snapshot was shared internally
     */
    url?: string;
    /**
     * user id of the snapshot creator
     */
    userId: number;
}

export interface GetCoreDashboardTemplating {
    /**
     * List of configured template variables with their saved values along with some other metadata
     */
    lists?: outputs.GetCoreDashboardTemplatingList[];
}

export interface GetCoreDashboardTemplatingList {
    /**
     * Format to use while fetching all values from data source, eg: wildcard, glob, regex, pipe, etc.
     */
    allFormat?: string;
    /**
     * Shows current selected variable text/value on the dashboard
     */
    current: outputs.GetCoreDashboardTemplatingListCurrent;
    /**
     * Data source used to fetch values for a variable. It can be defined but null.
     */
    datasource: outputs.GetCoreDashboardTemplatingListDatasource;
    /**
     * Description of variable. It can be defined but null.
     */
    description?: string;
    /**
     * Visibility configuration for the variable
     */
    hide: number;
    /**
     * Optional display name
     */
    label?: string;
    /**
     * Whether multiple values can be selected or not from variable value list. Defaults to false.
     */
    multi: boolean;
    /**
     * Name of variable
     */
    name: string;
    /**
     * Options that can be selected for a variable.
     */
    options?: outputs.GetCoreDashboardTemplatingListOption[];
    /**
     * JSON-encoded string. Query used to fetch values for a variable
     */
    query?: string;
    refresh?: number;
    /**
     * Whether the variable value should be managed by URL query params or not. Defaults to false.
     */
    skipUrlSync: boolean;
    /**
     * Type of variable
     */
    type: string;
}

export interface GetCoreDashboardTemplatingListCurrent {
    /**
     * Whether the option is selected or not
     */
    selected?: boolean;
    /**
     * JSON-encoded string. Text to be displayed for the option
     */
    text: string;
    /**
     * JSON-encoded string. Value of the option
     */
    value: string;
}

export interface GetCoreDashboardTemplatingListDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetCoreDashboardTemplatingListOption {
    /**
     * Whether the option is selected or not
     */
    selected?: boolean;
    /**
     * JSON-encoded string. Text to be displayed for the option
     */
    text: string;
    /**
     * JSON-encoded string. Value of the option
     */
    value: string;
}

export interface GetCoreDashboardTime {
    /**
     * Defaults to "now-6h".
     */
    from: string;
    /**
     * Defaults to "now".
     */
    to: string;
}

export interface GetCoreDashboardTimepicker {
    /**
     * Whether timepicker is collapsed or not. Has no effect on provisioned dashboard. Defaults to false.
     */
    collapse: boolean;
    /**
     * Whether timepicker is enabled or not. Has no effect on provisioned dashboard. Defaults to true.
     */
    enable: boolean;
    /**
     * Whether timepicker is visible or not. Defaults to false.
     */
    hidden: boolean;
    /**
     * Interval options available in the refresh picker dropdown.
     */
    refreshIntervals?: string[];
    /**
     * Selectable options available in the time picker dropdown. Has no effect on provisioned dashboard.
     */
    timeOptions?: string[];
}

export interface GetPanelAlertGroupsDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelAlertGroupsFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelAlertGroupsFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelAlertGroupsFieldConfigOverride[];
}

export interface GetPanelAlertGroupsFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelAlertGroupsFieldConfigDefaultsColor;
    /**
     * custom is specified by the FieldConfig field
     * in panel plugin schemas.
     */
    custom: outputs.GetPanelAlertGroupsFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelAlertGroupsFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelAlertGroupsFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsCustom {
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelAlertGroupsFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelAlertGroupsFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAlertGroupsFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelAlertGroupsFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelAlertGroupsFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelAlertGroupsFieldConfigOverride {
    matcher: outputs.GetPanelAlertGroupsFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelAlertGroupsFieldConfigOverrideProperty[];
}

export interface GetPanelAlertGroupsFieldConfigOverrideMatcher {
}

export interface GetPanelAlertGroupsFieldConfigOverrideProperty {
}

export interface GetPanelAlertGroupsGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelAlertGroupsLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelAlertGroupsLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelAlertGroupsOptions {
    /**
     * Name of the alertmanager used as a source for alerts
     */
    alertmanager: string;
    /**
     * Expand all alert groups by default
     */
    expandAll: boolean;
    /**
     * Comma-separated list of values used to filter alert results
     */
    labels: string;
}

export interface GetPanelAlertGroupsTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelAlertGroupsTransformationFilter;
}

export interface GetPanelAlertGroupsTransformationFilter {
}

export interface GetPanelAnnotationsListDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelAnnotationsListFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelAnnotationsListFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelAnnotationsListFieldConfigOverride[];
}

export interface GetPanelAnnotationsListFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelAnnotationsListFieldConfigDefaultsColor;
    /**
     * custom is specified by the FieldConfig field
     * in panel plugin schemas.
     */
    custom: outputs.GetPanelAnnotationsListFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelAnnotationsListFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelAnnotationsListFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsCustom {
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelAnnotationsListFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelAnnotationsListFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelAnnotationsListFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelAnnotationsListFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelAnnotationsListFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelAnnotationsListFieldConfigOverride {
    matcher: outputs.GetPanelAnnotationsListFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelAnnotationsListFieldConfigOverrideProperty[];
}

export interface GetPanelAnnotationsListFieldConfigOverrideMatcher {
}

export interface GetPanelAnnotationsListFieldConfigOverrideProperty {
}

export interface GetPanelAnnotationsListGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelAnnotationsListLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelAnnotationsListLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelAnnotationsListOptions {
    /**
     * Defaults to 10.
     */
    limit: number;
    /**
     * Defaults to "10m".
     */
    navigateAfter: string;
    /**
     * Defaults to "10m".
     */
    navigateBefore: string;
    /**
     * Defaults to true.
     */
    navigateToPanel: boolean;
    /**
     * Defaults to false.
     */
    onlyFromThisDashboard: boolean;
    /**
     * Defaults to false.
     */
    onlyInTimeRange: boolean;
    /**
     * Defaults to true.
     */
    showTags: boolean;
    /**
     * Defaults to true.
     */
    showTime: boolean;
    /**
     * Defaults to true.
     */
    showUser: boolean;
    tags?: string[];
}

export interface GetPanelAnnotationsListTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelAnnotationsListTransformationFilter;
}

export interface GetPanelAnnotationsListTransformationFilter {
}

export interface GetPanelBarChartDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelBarChartFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelBarChartFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelBarChartFieldConfigOverride[];
}

export interface GetPanelBarChartFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelBarChartFieldConfigDefaultsColor;
    custom: outputs.GetPanelBarChartFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelBarChartFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelBarChartFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelBarChartFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelBarChartFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity: number;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode: string;
    hideFrom: outputs.GetPanelBarChartFieldConfigDefaultsCustomHideFrom;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth: number;
    scaleDistribution: outputs.GetPanelBarChartFieldConfigDefaultsCustomScaleDistribution;
    /**
     * Threshold rendering
     */
    thresholdsStyle: outputs.GetPanelBarChartFieldConfigDefaultsCustomThresholdsStyle;
}

export interface GetPanelBarChartFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelBarChartFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelBarChartFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelBarChartFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelBarChartFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelBarChartFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelBarChartFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelBarChartFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelBarChartFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelBarChartFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelBarChartFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelBarChartFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarChartFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelBarChartFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelBarChartFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelBarChartFieldConfigOverride {
    matcher: outputs.GetPanelBarChartFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelBarChartFieldConfigOverrideProperty[];
}

export interface GetPanelBarChartFieldConfigOverrideMatcher {
}

export interface GetPanelBarChartFieldConfigOverrideProperty {
}

export interface GetPanelBarChartGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelBarChartLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelBarChartLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelBarChartOptions {
    /**
     * Controls the radius of each bar.
     */
    barRadius?: number;
    /**
     * Controls the width of bars. 1 = Max width, 0 = Min width. Defaults to 0.970000.
     */
    barWidth: number;
    /**
     * Use the color value for a sibling field to color each bar value.
     */
    colorByField?: string;
    /**
     * Enables mode which highlights the entire bar area and shows tooltip when cursor
     * hovers over highlighted area. Defaults to false.
     */
    fullHighlight: boolean;
    /**
     * Controls the width of groups. 1 = max with, 0 = min width. Defaults to 0.700000.
     */
    groupWidth: number;
    legend: outputs.GetPanelBarChartOptionsLegend;
    /**
     * Controls the orientation of the bar chart, either vertical or horizontal. Defaults to "auto".
     */
    orientation: string;
    /**
     * This controls whether values are shown on top or to the left of bars. Defaults to "auto".
     */
    showValue: string;
    /**
     * Controls whether bars are stacked or not, either normally or in percent mode. Defaults to "none".
     */
    stacking: string;
    text: outputs.GetPanelBarChartOptionsText;
    tooltip: outputs.GetPanelBarChartOptionsTooltip;
    /**
     * Manually select which field from the dataset to represent the x field.
     */
    xField?: string;
    /**
     * Sets the max length that a label can have before it is truncated.
     */
    xTickLabelMaxLength: number;
    /**
     * Controls the rotation of the x axis labels. Defaults to 0.
     */
    xTickLabelRotation: number;
    /**
     * Controls the spacing between x axis labels.
     * negative values indicate backwards skipping behavior. Defaults to 0.
     */
    xTickLabelSpacing: number;
}

export interface GetPanelBarChartOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelBarChartOptionsText {
    /**
     * Explicit title text size
     */
    titleSize?: number;
    /**
     * Explicit value text size
     */
    valueSize?: number;
}

export interface GetPanelBarChartOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelBarChartTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelBarChartTransformationFilter;
}

export interface GetPanelBarChartTransformationFilter {
}

export interface GetPanelBarGaugeDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelBarGaugeFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelBarGaugeFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelBarGaugeFieldConfigOverride[];
}

export interface GetPanelBarGaugeFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelBarGaugeFieldConfigDefaultsColor;
    custom: outputs.GetPanelBarGaugeFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelBarGaugeFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelBarGaugeFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelBarGaugeFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity: number;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode: string;
    hideFrom: outputs.GetPanelBarGaugeFieldConfigDefaultsCustomHideFrom;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth: number;
    scaleDistribution: outputs.GetPanelBarGaugeFieldConfigDefaultsCustomScaleDistribution;
    /**
     * Threshold rendering
     */
    thresholdsStyle: outputs.GetPanelBarGaugeFieldConfigDefaultsCustomThresholdsStyle;
}

export interface GetPanelBarGaugeFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelBarGaugeFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelBarGaugeFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelBarGaugeFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelBarGaugeFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelBarGaugeFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelBarGaugeFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelBarGaugeFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelBarGaugeFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelBarGaugeFieldConfigOverride {
    matcher: outputs.GetPanelBarGaugeFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelBarGaugeFieldConfigOverrideProperty[];
}

export interface GetPanelBarGaugeFieldConfigOverrideMatcher {
}

export interface GetPanelBarGaugeFieldConfigOverrideProperty {
}

export interface GetPanelBarGaugeGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelBarGaugeLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelBarGaugeLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelBarGaugeOptions {
    /**
     * Defaults to "gradient".
     */
    displayMode: string;
    /**
     * Defaults to 10.
     */
    minVizHeight: number;
    /**
     * Defaults to 0.
     */
    minVizWidth: number;
    orientation: string;
    reduceOptions: outputs.GetPanelBarGaugeOptionsReduceOptions;
    /**
     * Defaults to true.
     */
    showUnfilled: boolean;
    text: outputs.GetPanelBarGaugeOptionsText;
    /**
     * Defaults to "color".
     */
    valueMode: string;
}

export interface GetPanelBarGaugeOptionsReduceOptions {
    /**
     * When !values, pick one value for the whole field
     */
    calcs?: string[];
    /**
     * Which fields to show.  By default this is only numeric fields
     */
    fields?: string;
    /**
     * if showing all values limit
     */
    limit?: number;
    /**
     * If true show each row value
     */
    values?: boolean;
}

export interface GetPanelBarGaugeOptionsText {
    /**
     * Explicit title text size
     */
    titleSize?: number;
    /**
     * Explicit value text size
     */
    valueSize?: number;
}

export interface GetPanelBarGaugeTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelBarGaugeTransformationFilter;
}

export interface GetPanelBarGaugeTransformationFilter {
}

export interface GetPanelCandlestickDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelCandlestickFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelCandlestickFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelCandlestickFieldConfigOverride[];
}

export interface GetPanelCandlestickFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelCandlestickFieldConfigDefaultsColor;
    custom: outputs.GetPanelCandlestickFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelCandlestickFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelCandlestickFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelCandlestickFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom: outputs.GetPanelCandlestickFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle: outputs.GetPanelCandlestickFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution: outputs.GetPanelCandlestickFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking: outputs.GetPanelCandlestickFieldConfigDefaultsCustomStacking;
    thresholdsStyle: outputs.GetPanelCandlestickFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelCandlestickFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelCandlestickFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelCandlestickFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelCandlestickFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelCandlestickFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelCandlestickFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelCandlestickFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelCandlestickFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCandlestickFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelCandlestickFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelCandlestickFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelCandlestickFieldConfigOverride {
    matcher: outputs.GetPanelCandlestickFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelCandlestickFieldConfigOverrideProperty[];
}

export interface GetPanelCandlestickFieldConfigOverrideMatcher {
}

export interface GetPanelCandlestickFieldConfigOverrideProperty {
}

export interface GetPanelCandlestickGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelCandlestickLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelCandlestickLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelCandlestickOptions {
    /**
     * Sets the style of the candlesticks. Defaults to "candles".
     */
    candleStyle: string;
    /**
     * Sets the color strategy for the candlesticks. Defaults to "open-close".
     */
    colorStrategy: string;
    /**
     * Set which colors are used when the price movement is up or down
     */
    colors: outputs.GetPanelCandlestickOptionsColors;
    /**
     * Map fields to appropriate dimension
     */
    fields: outputs.GetPanelCandlestickOptionsFields;
    /**
     * When enabled, all fields will be sent to the graph. Defaults to false.
     */
    includeAllFields: boolean;
    legend: outputs.GetPanelCandlestickOptionsLegend;
    /**
     * Sets which dimensions are used for the visualization. Defaults to "candles+volume".
     */
    mode: string;
}

export interface GetPanelCandlestickOptionsColors {
    down: string;
    flat: string;
    up: string;
}

export interface GetPanelCandlestickOptionsFields {
    candlestickFieldMap: outputs.GetPanelCandlestickOptionsFieldsCandlestickFieldMap;
}

export interface GetPanelCandlestickOptionsFieldsCandlestickFieldMap {
    /**
     * Corresponds to the final (end) value of the given period
     */
    close?: string;
    /**
     * Corresponds to the highest value of the given period
     */
    high?: string;
    /**
     * Corresponds to the lowest value of the given period
     */
    low?: string;
    /**
     * Corresponds to the starting value of the given period
     */
    open?: string;
    /**
     * Corresponds to the sample count in the given period. (e.g. number of trades)
     */
    volume?: string;
}

export interface GetPanelCandlestickOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelCandlestickTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelCandlestickTransformationFilter;
}

export interface GetPanelCandlestickTransformationFilter {
}

export interface GetPanelCanvasDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelCanvasFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelCanvasFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelCanvasFieldConfigOverride[];
}

export interface GetPanelCanvasFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelCanvasFieldConfigDefaultsColor;
    custom: outputs.GetPanelCanvasFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelCanvasFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelCanvasFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelCanvasFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom: outputs.GetPanelCanvasFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle: outputs.GetPanelCanvasFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution: outputs.GetPanelCanvasFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking: outputs.GetPanelCanvasFieldConfigDefaultsCustomStacking;
    thresholdsStyle: outputs.GetPanelCanvasFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelCanvasFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelCanvasFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelCanvasFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelCanvasFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelCanvasFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelCanvasFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelCanvasFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelCanvasFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelCanvasFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelCanvasFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelCanvasFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelCanvasFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelCanvasFieldConfigOverride {
    matcher: outputs.GetPanelCanvasFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelCanvasFieldConfigOverrideProperty[];
}

export interface GetPanelCanvasFieldConfigOverrideMatcher {
}

export interface GetPanelCanvasFieldConfigOverrideProperty {
}

export interface GetPanelCanvasGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelCanvasLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelCanvasLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelCanvasOptions {
    /**
     * Enable inline editing. Defaults to true.
     */
    inlineEditing: boolean;
    /**
     * The root element of canvas (frame), where all canvas elements are nested
     * TODO: Figure out how to define a default value for this
     */
    root: outputs.GetPanelCanvasOptionsRoot;
    /**
     * Show all available element types. Defaults to true.
     */
    showAdvancedTypes: boolean;
}

export interface GetPanelCanvasOptionsRoot {
    /**
     * The list of canvas elements attached to the root element
     */
    elements?: outputs.GetPanelCanvasOptionsRootElement[];
    /**
     * Name of the root element
     */
    name: string;
    /**
     * Type of root element (frame)
     */
    type: string;
}

export interface GetPanelCanvasOptionsRootElement {
    background: outputs.GetPanelCanvasOptionsRootElementBackground;
    border: outputs.GetPanelCanvasOptionsRootElementBorder;
    connections?: outputs.GetPanelCanvasOptionsRootElementConnection[];
    constraint: outputs.GetPanelCanvasOptionsRootElementConstraint;
    name: string;
    placement: outputs.GetPanelCanvasOptionsRootElementPlacement;
    type: string;
}

export interface GetPanelCanvasOptionsRootElementBackground {
    color: outputs.GetPanelCanvasOptionsRootElementBackgroundColor;
    image: outputs.GetPanelCanvasOptionsRootElementBackgroundImage;
    size?: string;
}

export interface GetPanelCanvasOptionsRootElementBackgroundColor {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
}

export interface GetPanelCanvasOptionsRootElementBackgroundImage {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
    mode: string;
}

export interface GetPanelCanvasOptionsRootElementBorder {
    color: outputs.GetPanelCanvasOptionsRootElementBorderColor;
    width?: number;
}

export interface GetPanelCanvasOptionsRootElementBorderColor {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
}

export interface GetPanelCanvasOptionsRootElementConnection {
    color: outputs.GetPanelCanvasOptionsRootElementConnectionColor;
    path: string;
    size: outputs.GetPanelCanvasOptionsRootElementConnectionSize;
    source: outputs.GetPanelCanvasOptionsRootElementConnectionSource;
    target: outputs.GetPanelCanvasOptionsRootElementConnectionTarget;
    targetName?: string;
}

export interface GetPanelCanvasOptionsRootElementConnectionColor {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
}

export interface GetPanelCanvasOptionsRootElementConnectionSize {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: number;
    max: number;
    min: number;
    mode?: string;
}

export interface GetPanelCanvasOptionsRootElementConnectionSource {
    x: number;
    y: number;
}

export interface GetPanelCanvasOptionsRootElementConnectionTarget {
    x: number;
    y: number;
}

export interface GetPanelCanvasOptionsRootElementConstraint {
    horizontal?: string;
    vertical?: string;
}

export interface GetPanelCanvasOptionsRootElementPlacement {
    bottom?: number;
    height?: number;
    left?: number;
    right?: number;
    top?: number;
    width?: number;
}

export interface GetPanelCanvasTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelCanvasTransformationFilter;
}

export interface GetPanelCanvasTransformationFilter {
}

export interface GetPanelDashboardListDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelDashboardListFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelDashboardListFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelDashboardListFieldConfigOverride[];
}

export interface GetPanelDashboardListFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelDashboardListFieldConfigDefaultsColor;
    custom: outputs.GetPanelDashboardListFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelDashboardListFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelDashboardListFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelDashboardListFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom: outputs.GetPanelDashboardListFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle: outputs.GetPanelDashboardListFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution: outputs.GetPanelDashboardListFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking: outputs.GetPanelDashboardListFieldConfigDefaultsCustomStacking;
    thresholdsStyle: outputs.GetPanelDashboardListFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelDashboardListFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelDashboardListFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelDashboardListFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelDashboardListFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelDashboardListFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelDashboardListFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelDashboardListFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelDashboardListFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDashboardListFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelDashboardListFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelDashboardListFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelDashboardListFieldConfigOverride {
    matcher: outputs.GetPanelDashboardListFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelDashboardListFieldConfigOverrideProperty[];
}

export interface GetPanelDashboardListFieldConfigOverrideMatcher {
}

export interface GetPanelDashboardListFieldConfigOverrideProperty {
}

export interface GetPanelDashboardListGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelDashboardListLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelDashboardListLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelDashboardListOptions {
    folderId?: number;
    /**
     * Defaults to false.
     */
    includeVars: boolean;
    /**
     * Defaults to false.
     */
    keepTime: boolean;
    /**
     * Defaults to 10.
     */
    maxItems: number;
    /**
     * Defaults to "".
     */
    query: string;
    /**
     * Defaults to true.
     */
    showHeadings: boolean;
    /**
     * Defaults to false.
     */
    showRecentlyViewed: boolean;
    /**
     * Defaults to false.
     */
    showSearch: boolean;
    /**
     * Defaults to true.
     */
    showStarred: boolean;
    tags?: string[];
}

export interface GetPanelDashboardListTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelDashboardListTransformationFilter;
}

export interface GetPanelDashboardListTransformationFilter {
}

export interface GetPanelDatagridDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelDatagridFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelDatagridFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelDatagridFieldConfigOverride[];
}

export interface GetPanelDatagridFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelDatagridFieldConfigDefaultsColor;
    custom: outputs.GetPanelDatagridFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelDatagridFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelDatagridFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelDatagridFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom: outputs.GetPanelDatagridFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle: outputs.GetPanelDatagridFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution: outputs.GetPanelDatagridFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking: outputs.GetPanelDatagridFieldConfigDefaultsCustomStacking;
    thresholdsStyle: outputs.GetPanelDatagridFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelDatagridFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelDatagridFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelDatagridFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelDatagridFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelDatagridFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelDatagridFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelDatagridFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelDatagridFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelDatagridFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDatagridFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelDatagridFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelDatagridFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelDatagridFieldConfigOverride {
    matcher: outputs.GetPanelDatagridFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelDatagridFieldConfigOverrideProperty[];
}

export interface GetPanelDatagridFieldConfigOverrideMatcher {
}

export interface GetPanelDatagridFieldConfigOverrideProperty {
}

export interface GetPanelDatagridGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelDatagridLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelDatagridLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelDatagridOptions {
    /**
     * Defaults to 0.
     */
    selectedSeries: number;
}

export interface GetPanelDatagridTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelDatagridTransformationFilter;
}

export interface GetPanelDatagridTransformationFilter {
}

export interface GetPanelDebugDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelDebugFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelDebugFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelDebugFieldConfigOverride[];
}

export interface GetPanelDebugFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelDebugFieldConfigDefaultsColor;
    custom: outputs.GetPanelDebugFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelDebugFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelDebugFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelDebugFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelDebugFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom: outputs.GetPanelDebugFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle: outputs.GetPanelDebugFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution: outputs.GetPanelDebugFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking: outputs.GetPanelDebugFieldConfigDefaultsCustomStacking;
    thresholdsStyle: outputs.GetPanelDebugFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelDebugFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelDebugFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelDebugFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelDebugFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelDebugFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelDebugFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelDebugFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelDebugFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelDebugFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelDebugFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelDebugFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelDebugFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelDebugFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelDebugFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelDebugFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelDebugFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelDebugFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelDebugFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelDebugFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelDebugFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelDebugFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelDebugFieldConfigOverride {
    matcher: outputs.GetPanelDebugFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelDebugFieldConfigOverrideProperty[];
}

export interface GetPanelDebugFieldConfigOverrideMatcher {
}

export interface GetPanelDebugFieldConfigOverrideProperty {
}

export interface GetPanelDebugGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelDebugLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelDebugLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelDebugOptions {
    counters: outputs.GetPanelDebugOptionsCounters;
    mode: string;
}

export interface GetPanelDebugOptionsCounters {
    dataChanged: boolean;
    render: boolean;
    schemaChanged: boolean;
}

export interface GetPanelDebugTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelDebugTransformationFilter;
}

export interface GetPanelDebugTransformationFilter {
}

export interface GetPanelGaugeDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelGaugeFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelGaugeFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelGaugeFieldConfigOverride[];
}

export interface GetPanelGaugeFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelGaugeFieldConfigDefaultsColor;
    custom: outputs.GetPanelGaugeFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelGaugeFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelGaugeFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelGaugeFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom: outputs.GetPanelGaugeFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle: outputs.GetPanelGaugeFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution: outputs.GetPanelGaugeFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking: outputs.GetPanelGaugeFieldConfigDefaultsCustomStacking;
    thresholdsStyle: outputs.GetPanelGaugeFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelGaugeFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelGaugeFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelGaugeFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelGaugeFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelGaugeFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelGaugeFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelGaugeFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelGaugeFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelGaugeFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGaugeFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelGaugeFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelGaugeFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelGaugeFieldConfigOverride {
    matcher: outputs.GetPanelGaugeFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelGaugeFieldConfigOverrideProperty[];
}

export interface GetPanelGaugeFieldConfigOverrideMatcher {
}

export interface GetPanelGaugeFieldConfigOverrideProperty {
}

export interface GetPanelGaugeGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelGaugeLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelGaugeLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelGaugeOptions {
    orientation: string;
    reduceOptions: outputs.GetPanelGaugeOptionsReduceOptions;
    /**
     * Defaults to false.
     */
    showThresholdLabels: boolean;
    /**
     * Defaults to true.
     */
    showThresholdMarkers: boolean;
    text: outputs.GetPanelGaugeOptionsText;
}

export interface GetPanelGaugeOptionsReduceOptions {
    /**
     * When !values, pick one value for the whole field
     */
    calcs?: string[];
    /**
     * Which fields to show.  By default this is only numeric fields
     */
    fields?: string;
    /**
     * if showing all values limit
     */
    limit?: number;
    /**
     * If true show each row value
     */
    values?: boolean;
}

export interface GetPanelGaugeOptionsText {
    /**
     * Explicit title text size
     */
    titleSize?: number;
    /**
     * Explicit value text size
     */
    valueSize?: number;
}

export interface GetPanelGaugeTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelGaugeTransformationFilter;
}

export interface GetPanelGaugeTransformationFilter {
}

export interface GetPanelGeomapDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelGeomapFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelGeomapFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelGeomapFieldConfigOverride[];
}

export interface GetPanelGeomapFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelGeomapFieldConfigDefaultsColor;
    custom: outputs.GetPanelGeomapFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelGeomapFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelGeomapFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelGeomapFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom: outputs.GetPanelGeomapFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle: outputs.GetPanelGeomapFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution: outputs.GetPanelGeomapFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking: outputs.GetPanelGeomapFieldConfigDefaultsCustomStacking;
    thresholdsStyle: outputs.GetPanelGeomapFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelGeomapFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelGeomapFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelGeomapFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelGeomapFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelGeomapFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelGeomapFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelGeomapFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelGeomapFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelGeomapFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelGeomapFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelGeomapFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelGeomapFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelGeomapFieldConfigOverride {
    matcher: outputs.GetPanelGeomapFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelGeomapFieldConfigOverrideProperty[];
}

export interface GetPanelGeomapFieldConfigOverrideMatcher {
}

export interface GetPanelGeomapFieldConfigOverrideProperty {
}

export interface GetPanelGeomapGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelGeomapLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelGeomapLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelGeomapOptions {
    basemap: outputs.GetPanelGeomapOptionsBasemap;
    controls: outputs.GetPanelGeomapOptionsControls;
    layers?: outputs.GetPanelGeomapOptionsLayer[];
    tooltip: outputs.GetPanelGeomapOptionsTooltip;
    view: outputs.GetPanelGeomapOptionsView;
}

export interface GetPanelGeomapOptionsBasemap {
    /**
     * Common method to define geometry fields
     */
    location: outputs.GetPanelGeomapOptionsBasemapLocation;
    /**
     * configured unique display name
     */
    name: string;
    /**
     * Common properties:
     * https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html
     * Layer opacity (0-1)
     */
    opacity?: number;
    /**
     * Check tooltip (defaults to true)
     */
    tooltip?: boolean;
    type: string;
}

export interface GetPanelGeomapOptionsBasemapLocation {
    /**
     * Path to Gazetteer
     */
    gazetteer?: string;
    /**
     * Field mappings
     */
    geohash?: string;
    latitude?: string;
    longitude?: string;
    lookup?: string;
    mode: string;
    wkt?: string;
}

export interface GetPanelGeomapOptionsControls {
    /**
     * let the mouse wheel zoom
     */
    mouseWheelZoom?: boolean;
    /**
     * Lower right
     */
    showAttribution?: boolean;
    /**
     * Show debug
     */
    showDebug?: boolean;
    /**
     * Show measure
     */
    showMeasure?: boolean;
    /**
     * Scale options
     */
    showScale?: boolean;
    /**
     * Zoom (upper left)
     */
    showZoom?: boolean;
}

export interface GetPanelGeomapOptionsLayer {
    /**
     * Common method to define geometry fields
     */
    location: outputs.GetPanelGeomapOptionsLayerLocation;
    /**
     * configured unique display name
     */
    name: string;
    /**
     * Common properties:
     * https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html
     * Layer opacity (0-1)
     */
    opacity?: number;
    /**
     * Check tooltip (defaults to true)
     */
    tooltip?: boolean;
    type: string;
}

export interface GetPanelGeomapOptionsLayerLocation {
    /**
     * Path to Gazetteer
     */
    gazetteer?: string;
    /**
     * Field mappings
     */
    geohash?: string;
    latitude?: string;
    longitude?: string;
    lookup?: string;
    mode: string;
    wkt?: string;
}

export interface GetPanelGeomapOptionsTooltip {
    mode: string;
}

export interface GetPanelGeomapOptionsView {
    /**
     * Defaults to true.
     */
    allLayers: boolean;
    lastOnly?: boolean;
    /**
     * Defaults to 0.
     */
    lat: number;
    layer?: string;
    /**
     * Defaults to 0.
     */
    lon: number;
    maxZoom?: number;
    minZoom?: number;
    padding?: number;
    shared?: boolean;
    /**
     * Defaults to 1.
     */
    zoom: number;
}

export interface GetPanelGeomapTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelGeomapTransformationFilter;
}

export interface GetPanelGeomapTransformationFilter {
}

export interface GetPanelHeatmapDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelHeatmapFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelHeatmapFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelHeatmapFieldConfigOverride[];
}

export interface GetPanelHeatmapFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelHeatmapFieldConfigDefaultsColor;
    custom: outputs.GetPanelHeatmapFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelHeatmapFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelHeatmapFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelHeatmapFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsCustom {
    hideFrom: outputs.GetPanelHeatmapFieldConfigDefaultsCustomHideFrom;
    scaleDistribution: outputs.GetPanelHeatmapFieldConfigDefaultsCustomScaleDistribution;
}

export interface GetPanelHeatmapFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelHeatmapFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelHeatmapFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelHeatmapFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelHeatmapFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelHeatmapFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelHeatmapFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelHeatmapFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelHeatmapFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelHeatmapFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHeatmapFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelHeatmapFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelHeatmapFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelHeatmapFieldConfigOverride {
    matcher: outputs.GetPanelHeatmapFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelHeatmapFieldConfigOverrideProperty[];
}

export interface GetPanelHeatmapFieldConfigOverrideMatcher {
}

export interface GetPanelHeatmapFieldConfigOverrideProperty {
}

export interface GetPanelHeatmapGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelHeatmapLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelHeatmapLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelHeatmapOptions {
    /**
     * Controls if the heatmap should be calculated from data. Defaults to false.
     */
    calculate: boolean;
    /**
     * Calculation options for the heatmap
     */
    calculation: outputs.GetPanelHeatmapOptionsCalculation;
    /**
     * Controls gap between cells. Defaults to 1.
     */
    cellGap: number;
    /**
     * Controls cell radius
     */
    cellRadius?: number;
    /**
     * Controls cell value unit
     */
    cellValues: outputs.GetPanelHeatmapOptionsCellValues;
    /**
     * Controls the color options
     */
    color: outputs.GetPanelHeatmapOptionsColor;
    /**
     * Controls exemplar options
     */
    exemplars: outputs.GetPanelHeatmapOptionsExemplars;
    /**
     * Filters values between a given range
     */
    filterValues: outputs.GetPanelHeatmapOptionsFilterValues;
    /**
     * | *{
     * 	axisPlacement: ui.AxisPlacement & "left" // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed
     * }
     * Controls legend options
     */
    legend: outputs.GetPanelHeatmapOptionsLegend;
    /**
     * Controls tick alignment and value name when not calculating from data
     */
    rowsFrame: outputs.GetPanelHeatmapOptionsRowsFrame;
    /**
     * | *{
     * 	layout: ui.HeatmapCellLayout & "auto" // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed
     * }
     * Controls the display of the value in the cell. Defaults to "auto".
     */
    showValue: string;
    /**
     * Controls tooltip options
     */
    tooltip: outputs.GetPanelHeatmapOptionsTooltip;
    /**
     * Controls yAxis placement
     */
    yAxis: outputs.GetPanelHeatmapOptionsYAxis;
}

export interface GetPanelHeatmapOptionsCalculation {
    /**
     * The number of buckets to use for the xAxis in the heatmap
     */
    xBuckets: outputs.GetPanelHeatmapOptionsCalculationXBuckets;
    /**
     * The number of buckets to use for the yAxis in the heatmap
     */
    yBuckets: outputs.GetPanelHeatmapOptionsCalculationYBuckets;
}

export interface GetPanelHeatmapOptionsCalculationXBuckets {
    /**
     * Sets the bucket calculation mode
     */
    mode?: string;
    /**
     * Controls the scale of the buckets
     */
    scale: outputs.GetPanelHeatmapOptionsCalculationXBucketsScale;
    /**
     * The number of buckets to use for the axis in the heatmap
     */
    value?: string;
}

export interface GetPanelHeatmapOptionsCalculationXBucketsScale {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelHeatmapOptionsCalculationYBuckets {
    /**
     * Sets the bucket calculation mode
     */
    mode?: string;
    /**
     * Controls the scale of the buckets
     */
    scale: outputs.GetPanelHeatmapOptionsCalculationYBucketsScale;
    /**
     * The number of buckets to use for the axis in the heatmap
     */
    value?: string;
}

export interface GetPanelHeatmapOptionsCalculationYBucketsScale {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelHeatmapOptionsCellValues {
    cellValues: outputs.GetPanelHeatmapOptionsCellValuesCellValues;
}

export interface GetPanelHeatmapOptionsCellValuesCellValues {
    /**
     * Controls the number of decimals for cell values
     */
    decimals?: number;
    /**
     * Controls the cell value unit
     */
    unit?: string;
}

export interface GetPanelHeatmapOptionsColor {
    heatmapColorOptions: outputs.GetPanelHeatmapOptionsColorHeatmapColorOptions;
}

export interface GetPanelHeatmapOptionsColorHeatmapColorOptions {
    /**
     * Controls the exponent when scale is set to exponential
     */
    exponent: number;
    /**
     * Controls the color fill when in opacity mode
     */
    fill: string;
    /**
     * Sets the maximum value for the color scale
     */
    max?: number;
    /**
     * Sets the minimum value for the color scale
     */
    min?: number;
    /**
     * Sets the color mode
     */
    mode?: string;
    /**
     * Reverses the color scheme
     */
    reverse: boolean;
    /**
     * Controls the color scale
     */
    scale?: string;
    /**
     * Controls the color scheme used
     */
    scheme: string;
    /**
     * Controls the number of color steps
     */
    steps: number;
}

export interface GetPanelHeatmapOptionsExemplars {
    color: string;
}

export interface GetPanelHeatmapOptionsFilterValues {
    filterValueRange: outputs.GetPanelHeatmapOptionsFilterValuesFilterValueRange;
}

export interface GetPanelHeatmapOptionsFilterValuesFilterValueRange {
    /**
     * Sets the filter range to values greater than or equal to the given value
     */
    ge?: number;
    /**
     * Sets the filter range to values less than or equal to the given value
     */
    le?: number;
}

export interface GetPanelHeatmapOptionsLegend {
    show: boolean;
}

export interface GetPanelHeatmapOptionsRowsFrame {
    /**
     * Controls tick alignment when not calculating from data
     */
    layout?: string;
    /**
     * Sets the name of the cell when not calculating from data
     */
    value?: string;
}

export interface GetPanelHeatmapOptionsTooltip {
    show: boolean;
    yHistogram: boolean;
}

export interface GetPanelHeatmapOptionsYAxis {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the number of decimals for yAxis values
     */
    decimals?: number;
    /**
     * Sets the maximum value for the yAxis
     */
    max?: number;
    /**
     * Sets the minimum value for the yAxis
     */
    min?: number;
    /**
     * Reverses the yAxis
     */
    reverse?: boolean;
    scaleDistribution: outputs.GetPanelHeatmapOptionsYAxisScaleDistribution;
    /**
     * Sets the yAxis unit
     */
    unit?: string;
}

export interface GetPanelHeatmapOptionsYAxisScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelHeatmapTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelHeatmapTransformationFilter;
}

export interface GetPanelHeatmapTransformationFilter {
}

export interface GetPanelHistogramDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelHistogramFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelHistogramFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelHistogramFieldConfigOverride[];
}

export interface GetPanelHistogramFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelHistogramFieldConfigDefaultsColor;
    custom: outputs.GetPanelHistogramFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelHistogramFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelHistogramFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelHistogramFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelHistogramFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity: number;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode: string;
    hideFrom: outputs.GetPanelHistogramFieldConfigDefaultsCustomHideFrom;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth: number;
    scaleDistribution: outputs.GetPanelHistogramFieldConfigDefaultsCustomScaleDistribution;
}

export interface GetPanelHistogramFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelHistogramFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelHistogramFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelHistogramFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelHistogramFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelHistogramFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelHistogramFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelHistogramFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelHistogramFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelHistogramFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelHistogramFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelHistogramFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelHistogramFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelHistogramFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelHistogramFieldConfigOverride {
    matcher: outputs.GetPanelHistogramFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelHistogramFieldConfigOverrideProperty[];
}

export interface GetPanelHistogramFieldConfigOverrideMatcher {
}

export interface GetPanelHistogramFieldConfigOverrideProperty {
}

export interface GetPanelHistogramGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelHistogramLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelHistogramLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelHistogramOptions {
    /**
     * Offset buckets by this amount. Defaults to 0.
     */
    bucketOffset: number;
    /**
     * Size of each bucket
     */
    bucketSize?: number;
    /**
     * Combines multiple series into a single histogram
     */
    combine?: boolean;
    legend: outputs.GetPanelHistogramOptionsLegend;
    tooltip: outputs.GetPanelHistogramOptionsTooltip;
}

export interface GetPanelHistogramOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelHistogramOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelHistogramTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelHistogramTransformationFilter;
}

export interface GetPanelHistogramTransformationFilter {
}

export interface GetPanelLogsDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelLogsFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelLogsFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelLogsFieldConfigOverride[];
}

export interface GetPanelLogsFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelLogsFieldConfigDefaultsColor;
    custom: outputs.GetPanelLogsFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelLogsFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelLogsFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelLogsFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelLogsFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity: number;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode: string;
    hideFrom: outputs.GetPanelLogsFieldConfigDefaultsCustomHideFrom;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth: number;
    scaleDistribution: outputs.GetPanelLogsFieldConfigDefaultsCustomScaleDistribution;
}

export interface GetPanelLogsFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelLogsFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelLogsFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelLogsFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelLogsFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelLogsFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelLogsFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelLogsFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelLogsFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelLogsFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelLogsFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelLogsFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelLogsFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelLogsFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelLogsFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelLogsFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelLogsFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelLogsFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelLogsFieldConfigOverride {
    matcher: outputs.GetPanelLogsFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelLogsFieldConfigOverrideProperty[];
}

export interface GetPanelLogsFieldConfigOverrideMatcher {
}

export interface GetPanelLogsFieldConfigOverrideProperty {
}

export interface GetPanelLogsGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelLogsLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelLogsLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelLogsOptions {
    dedupStrategy: string;
    enableLogDetails: boolean;
    prettifyLogMessage: boolean;
    showCommonLabels: boolean;
    showLabels: boolean;
    showTime: boolean;
    sortOrder: string;
    wrapLogMessage: boolean;
}

export interface GetPanelLogsTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelLogsTransformationFilter;
}

export interface GetPanelLogsTransformationFilter {
}

export interface GetPanelNewsDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelNewsFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelNewsFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelNewsFieldConfigOverride[];
}

export interface GetPanelNewsFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelNewsFieldConfigDefaultsColor;
    custom: outputs.GetPanelNewsFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelNewsFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelNewsFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelNewsFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelNewsFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity: number;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode: string;
    hideFrom: outputs.GetPanelNewsFieldConfigDefaultsCustomHideFrom;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth: number;
    scaleDistribution: outputs.GetPanelNewsFieldConfigDefaultsCustomScaleDistribution;
}

export interface GetPanelNewsFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelNewsFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelNewsFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelNewsFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelNewsFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelNewsFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelNewsFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelNewsFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelNewsFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelNewsFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelNewsFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelNewsFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelNewsFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelNewsFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelNewsFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNewsFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelNewsFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelNewsFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelNewsFieldConfigOverride {
    matcher: outputs.GetPanelNewsFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelNewsFieldConfigOverrideProperty[];
}

export interface GetPanelNewsFieldConfigOverrideMatcher {
}

export interface GetPanelNewsFieldConfigOverrideProperty {
}

export interface GetPanelNewsGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelNewsLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelNewsLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelNewsOptions {
    /**
     * empty/missing will default to grafana blog
     */
    feedUrl?: string;
    /**
     * Defaults to true.
     */
    showImage: boolean;
}

export interface GetPanelNewsTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelNewsTransformationFilter;
}

export interface GetPanelNewsTransformationFilter {
}

export interface GetPanelNodeGraphDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelNodeGraphFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelNodeGraphFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelNodeGraphFieldConfigOverride[];
}

export interface GetPanelNodeGraphFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelNodeGraphFieldConfigDefaultsColor;
    custom: outputs.GetPanelNodeGraphFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelNodeGraphFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelNodeGraphFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelNodeGraphFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    /**
     * Controls the fill opacity of the bars. Defaults to 80.
     */
    fillOpacity: number;
    /**
     * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
     * Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".
     */
    gradientMode: string;
    hideFrom: outputs.GetPanelNodeGraphFieldConfigDefaultsCustomHideFrom;
    /**
     * Controls line width of the bars. Defaults to 1.
     */
    lineWidth: number;
    scaleDistribution: outputs.GetPanelNodeGraphFieldConfigDefaultsCustomScaleDistribution;
}

export interface GetPanelNodeGraphFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelNodeGraphFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelNodeGraphFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelNodeGraphFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelNodeGraphFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelNodeGraphFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelNodeGraphFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelNodeGraphFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelNodeGraphFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelNodeGraphFieldConfigOverride {
    matcher: outputs.GetPanelNodeGraphFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelNodeGraphFieldConfigOverrideProperty[];
}

export interface GetPanelNodeGraphFieldConfigOverrideMatcher {
}

export interface GetPanelNodeGraphFieldConfigOverrideProperty {
}

export interface GetPanelNodeGraphGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelNodeGraphLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelNodeGraphLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelNodeGraphOptions {
    edges: outputs.GetPanelNodeGraphOptionsEdges;
    nodes: outputs.GetPanelNodeGraphOptionsNodes;
}

export interface GetPanelNodeGraphOptionsEdges {
    /**
     * Unit for the main stat to override what ever is set in the data frame.
     */
    mainStatUnit?: string;
    /**
     * Unit for the secondary stat to override what ever is set in the data frame.
     */
    secondaryStatUnit?: string;
}

export interface GetPanelNodeGraphOptionsNodes {
    /**
     * Define which fields are shown as part of the node arc (colored circle around the node).
     */
    arcs?: outputs.GetPanelNodeGraphOptionsNodesArc[];
    /**
     * Unit for the main stat to override what ever is set in the data frame.
     */
    mainStatUnit?: string;
    /**
     * Unit for the secondary stat to override what ever is set in the data frame.
     */
    secondaryStatUnit?: string;
}

export interface GetPanelNodeGraphOptionsNodesArc {
    /**
     * The color of the arc.
     */
    color?: string;
    /**
     * Field from which to get the value. Values should be less than 1, representing fraction of a circle.
     */
    field?: string;
}

export interface GetPanelNodeGraphTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelNodeGraphTransformationFilter;
}

export interface GetPanelNodeGraphTransformationFilter {
}

export interface GetPanelPieChartDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelPieChartFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelPieChartFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelPieChartFieldConfigOverride[];
}

export interface GetPanelPieChartFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelPieChartFieldConfigDefaultsColor;
    custom: outputs.GetPanelPieChartFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelPieChartFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelPieChartFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelPieChartFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelPieChartFieldConfigDefaultsCustom {
    hideFrom: outputs.GetPanelPieChartFieldConfigDefaultsCustomHideFrom;
}

export interface GetPanelPieChartFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelPieChartFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelPieChartFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelPieChartFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelPieChartFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelPieChartFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelPieChartFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelPieChartFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelPieChartFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelPieChartFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelPieChartFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelPieChartFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelPieChartFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelPieChartFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelPieChartFieldConfigOverride {
    matcher: outputs.GetPanelPieChartFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelPieChartFieldConfigOverrideProperty[];
}

export interface GetPanelPieChartFieldConfigOverrideMatcher {
}

export interface GetPanelPieChartFieldConfigOverrideProperty {
}

export interface GetPanelPieChartGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelPieChartLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelPieChartLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelPieChartOptions {
    legend: outputs.GetPanelPieChartOptionsLegend;
    orientation: string;
    pieType: string;
    reduceOptions: outputs.GetPanelPieChartOptionsReduceOptions;
    text: outputs.GetPanelPieChartOptionsText;
    tooltip: outputs.GetPanelPieChartOptionsTooltip;
}

export interface GetPanelPieChartOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelPieChartOptionsReduceOptions {
    /**
     * When !values, pick one value for the whole field
     */
    calcs?: string[];
    /**
     * Which fields to show.  By default this is only numeric fields
     */
    fields?: string;
    /**
     * if showing all values limit
     */
    limit?: number;
    /**
     * If true show each row value
     */
    values?: boolean;
}

export interface GetPanelPieChartOptionsText {
    /**
     * Explicit title text size
     */
    titleSize?: number;
    /**
     * Explicit value text size
     */
    valueSize?: number;
}

export interface GetPanelPieChartOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelPieChartTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelPieChartTransformationFilter;
}

export interface GetPanelPieChartTransformationFilter {
}

export interface GetPanelStatDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelStatFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelStatFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelStatFieldConfigOverride[];
}

export interface GetPanelStatFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelStatFieldConfigDefaultsColor;
    custom: outputs.GetPanelStatFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelStatFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelStatFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelStatFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelStatFieldConfigDefaultsCustom {
    hideFrom: outputs.GetPanelStatFieldConfigDefaultsCustomHideFrom;
}

export interface GetPanelStatFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelStatFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelStatFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelStatFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelStatFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelStatFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelStatFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelStatFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelStatFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelStatFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelStatFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelStatFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelStatFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelStatFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelStatFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelStatFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelStatFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelStatFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelStatFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelStatFieldConfigOverride {
    matcher: outputs.GetPanelStatFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelStatFieldConfigOverrideProperty[];
}

export interface GetPanelStatFieldConfigOverrideMatcher {
}

export interface GetPanelStatFieldConfigOverrideProperty {
}

export interface GetPanelStatGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelStatLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelStatLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelStatOptions {
    /**
     * Defaults to "value".
     */
    colorMode: string;
    /**
     * Defaults to "area".
     */
    graphMode: string;
    /**
     * Defaults to "auto".
     */
    justifyMode: string;
    orientation: string;
    reduceOptions: outputs.GetPanelStatOptionsReduceOptions;
    text: outputs.GetPanelStatOptionsText;
    /**
     * Defaults to "auto".
     */
    textMode: string;
}

export interface GetPanelStatOptionsReduceOptions {
    /**
     * When !values, pick one value for the whole field
     */
    calcs?: string[];
    /**
     * Which fields to show.  By default this is only numeric fields
     */
    fields?: string;
    /**
     * if showing all values limit
     */
    limit?: number;
    /**
     * If true show each row value
     */
    values?: boolean;
}

export interface GetPanelStatOptionsText {
    /**
     * Explicit title text size
     */
    titleSize?: number;
    /**
     * Explicit value text size
     */
    valueSize?: number;
}

export interface GetPanelStatTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelStatTransformationFilter;
}

export interface GetPanelStatTransformationFilter {
}

export interface GetPanelStateTimelineDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelStateTimelineFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelStateTimelineFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelStateTimelineFieldConfigOverride[];
}

export interface GetPanelStateTimelineFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelStateTimelineFieldConfigDefaultsColor;
    custom: outputs.GetPanelStateTimelineFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelStateTimelineFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelStateTimelineFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelStateTimelineFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsCustom {
    /**
     * Defaults to 70.
     */
    fillOpacity: number;
    hideFrom: outputs.GetPanelStateTimelineFieldConfigDefaultsCustomHideFrom;
    /**
     * Defaults to 0.
     */
    lineWidth: number;
}

export interface GetPanelStateTimelineFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelStateTimelineFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelStateTimelineFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelStateTimelineFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelStateTimelineFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStateTimelineFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelStateTimelineFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelStateTimelineFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelStateTimelineFieldConfigOverride {
    matcher: outputs.GetPanelStateTimelineFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelStateTimelineFieldConfigOverrideProperty[];
}

export interface GetPanelStateTimelineFieldConfigOverrideMatcher {
}

export interface GetPanelStateTimelineFieldConfigOverrideProperty {
}

export interface GetPanelStateTimelineGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelStateTimelineLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelStateTimelineLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelStateTimelineOptions {
    /**
     * Controls value alignment on the timelines. Defaults to "left".
     */
    alignValue: string;
    legend: outputs.GetPanelStateTimelineOptionsLegend;
    /**
     * Merge equal consecutive values. Defaults to true.
     */
    mergeValues: boolean;
    /**
     * Controls the row height. Defaults to 0.900000.
     */
    rowHeight: number;
    /**
     * Show timeline values on chart. Defaults to "auto".
     */
    showValue: string;
    tooltip: outputs.GetPanelStateTimelineOptionsTooltip;
}

export interface GetPanelStateTimelineOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelStateTimelineOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelStateTimelineTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelStateTimelineTransformationFilter;
}

export interface GetPanelStateTimelineTransformationFilter {
}

export interface GetPanelStatusHistoryDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelStatusHistoryFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelStatusHistoryFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelStatusHistoryFieldConfigOverride[];
}

export interface GetPanelStatusHistoryFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelStatusHistoryFieldConfigDefaultsColor;
    custom: outputs.GetPanelStatusHistoryFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelStatusHistoryFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelStatusHistoryFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsCustom {
    /**
     * Defaults to 70.
     */
    fillOpacity: number;
    hideFrom: outputs.GetPanelStatusHistoryFieldConfigDefaultsCustomHideFrom;
    /**
     * Defaults to 1.
     */
    lineWidth: number;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelStatusHistoryFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelStatusHistoryFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelStatusHistoryFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelStatusHistoryFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelStatusHistoryFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelStatusHistoryFieldConfigOverride {
    matcher: outputs.GetPanelStatusHistoryFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelStatusHistoryFieldConfigOverrideProperty[];
}

export interface GetPanelStatusHistoryFieldConfigOverrideMatcher {
}

export interface GetPanelStatusHistoryFieldConfigOverrideProperty {
}

export interface GetPanelStatusHistoryGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelStatusHistoryLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelStatusHistoryLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelStatusHistoryOptions {
    /**
     * Controls the column width. Defaults to 0.900000.
     */
    colWidth: number;
    legend: outputs.GetPanelStatusHistoryOptionsLegend;
    /**
     * Set the height of the rows. Defaults to 0.900000.
     */
    rowHeight: number;
    /**
     * Show values on the columns. Defaults to "auto".
     */
    showValue: string;
    tooltip: outputs.GetPanelStatusHistoryOptionsTooltip;
}

export interface GetPanelStatusHistoryOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelStatusHistoryOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelStatusHistoryTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelStatusHistoryTransformationFilter;
}

export interface GetPanelStatusHistoryTransformationFilter {
}

export interface GetPanelTableDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelTableFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelTableFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelTableFieldConfigOverride[];
}

export interface GetPanelTableFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelTableFieldConfigDefaultsColor;
    custom: outputs.GetPanelTableFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelTableFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelTableFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelTableFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelTableFieldConfigDefaultsCustom {
    /**
     * Defaults to 70.
     */
    fillOpacity: number;
    hideFrom: outputs.GetPanelTableFieldConfigDefaultsCustomHideFrom;
    /**
     * Defaults to 1.
     */
    lineWidth: number;
}

export interface GetPanelTableFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelTableFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelTableFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelTableFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelTableFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelTableFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelTableFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelTableFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelTableFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelTableFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelTableFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelTableFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelTableFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelTableFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelTableFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelTableFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelTableFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTableFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelTableFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelTableFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelTableFieldConfigOverride {
    matcher: outputs.GetPanelTableFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelTableFieldConfigOverrideProperty[];
}

export interface GetPanelTableFieldConfigOverrideMatcher {
}

export interface GetPanelTableFieldConfigOverrideProperty {
}

export interface GetPanelTableGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelTableLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelTableLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelTableOptions {
    /**
     * Controls the height of the rows. Defaults to "sm".
     */
    cellHeight: string;
    /**
     * Controls footer options
     */
    footer: outputs.GetPanelTableOptionsFooter;
    /**
     * Represents the index of the selected frame
     */
    frameIndex: number;
    /**
     * Controls whether the panel should show the header. Defaults to true.
     */
    showHeader: boolean;
    /**
     * Controls whether the header should show icons for the column types. Defaults to false.
     */
    showTypeIcons: boolean;
    /**
     * Used to control row sorting
     */
    sortBies?: outputs.GetPanelTableOptionsSortBy[];
}

export interface GetPanelTableOptionsFooter {
    tableFooterOptions: outputs.GetPanelTableOptionsFooterTableFooterOptions;
}

export interface GetPanelTableOptionsFooterTableFooterOptions {
    countRows?: boolean;
    enablePagination?: boolean;
    fields?: string[];
    show: boolean;
}

export interface GetPanelTableOptionsSortBy {
    /**
     * Flag used to indicate descending sort order
     */
    desc?: boolean;
    /**
     * Sets the display name of the field to sort by
     */
    displayName: string;
}

export interface GetPanelTableTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelTableTransformationFilter;
}

export interface GetPanelTableTransformationFilter {
}

export interface GetPanelTextDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelTextFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelTextFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelTextFieldConfigOverride[];
}

export interface GetPanelTextFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelTextFieldConfigDefaultsColor;
    custom: outputs.GetPanelTextFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelTextFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelTextFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelTextFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelTextFieldConfigDefaultsCustom {
    /**
     * Defaults to 70.
     */
    fillOpacity: number;
    hideFrom: outputs.GetPanelTextFieldConfigDefaultsCustomHideFrom;
    /**
     * Defaults to 1.
     */
    lineWidth: number;
}

export interface GetPanelTextFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelTextFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelTextFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelTextFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelTextFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelTextFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelTextFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelTextFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelTextFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelTextFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelTextFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelTextFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelTextFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelTextFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelTextFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelTextFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelTextFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTextFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelTextFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelTextFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelTextFieldConfigOverride {
    matcher: outputs.GetPanelTextFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelTextFieldConfigOverrideProperty[];
}

export interface GetPanelTextFieldConfigOverrideMatcher {
}

export interface GetPanelTextFieldConfigOverrideProperty {
}

export interface GetPanelTextGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelTextLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelTextLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelTextOptions {
    code: outputs.GetPanelTextOptionsCode;
    /**
     * Defaults to "# Title
     *
     * For markdown syntax help: [commonmark.org/help](https://commonmark.org/help/)".
     */
    content: string;
    /**
     * Defaults to "markdown".
     */
    mode: string;
}

export interface GetPanelTextOptionsCode {
    /**
     * The language passed to monaco code editor. Defaults to "plaintext".
     */
    language: string;
    /**
     * Defaults to false.
     */
    showLineNumbers: boolean;
    /**
     * Defaults to false.
     */
    showMiniMap: boolean;
}

export interface GetPanelTextTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelTextTransformationFilter;
}

export interface GetPanelTextTransformationFilter {
}

export interface GetPanelTimeSeriesDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelTimeSeriesFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelTimeSeriesFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelTimeSeriesFieldConfigOverride[];
}

export interface GetPanelTimeSeriesFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelTimeSeriesFieldConfigDefaultsColor;
    custom: outputs.GetPanelTimeSeriesFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelTimeSeriesFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelTimeSeriesFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom: outputs.GetPanelTimeSeriesFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle: outputs.GetPanelTimeSeriesFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution: outputs.GetPanelTimeSeriesFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking: outputs.GetPanelTimeSeriesFieldConfigDefaultsCustomStacking;
    thresholdsStyle: outputs.GetPanelTimeSeriesFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelTimeSeriesFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelTimeSeriesFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTimeSeriesFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelTimeSeriesFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelTimeSeriesFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelTimeSeriesFieldConfigOverride {
    matcher: outputs.GetPanelTimeSeriesFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelTimeSeriesFieldConfigOverrideProperty[];
}

export interface GetPanelTimeSeriesFieldConfigOverrideMatcher {
}

export interface GetPanelTimeSeriesFieldConfigOverrideProperty {
}

export interface GetPanelTimeSeriesGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelTimeSeriesLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelTimeSeriesLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelTimeSeriesOptions {
    legend: outputs.GetPanelTimeSeriesOptionsLegend;
    tooltip: outputs.GetPanelTimeSeriesOptionsTooltip;
}

export interface GetPanelTimeSeriesOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelTimeSeriesOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelTimeSeriesTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelTimeSeriesTransformationFilter;
}

export interface GetPanelTimeSeriesTransformationFilter {
}

export interface GetPanelTrendDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelTrendFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelTrendFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelTrendFieldConfigOverride[];
}

export interface GetPanelTrendFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelTrendFieldConfigDefaultsColor;
    custom: outputs.GetPanelTrendFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelTrendFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelTrendFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelTrendFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelTrendFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom: outputs.GetPanelTrendFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle: outputs.GetPanelTrendFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution: outputs.GetPanelTrendFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking: outputs.GetPanelTrendFieldConfigDefaultsCustomStacking;
    thresholdsStyle: outputs.GetPanelTrendFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelTrendFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelTrendFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelTrendFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelTrendFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelTrendFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelTrendFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelTrendFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelTrendFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelTrendFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelTrendFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelTrendFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelTrendFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelTrendFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelTrendFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelTrendFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelTrendFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelTrendFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelTrendFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelTrendFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelTrendFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelTrendFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelTrendFieldConfigOverride {
    matcher: outputs.GetPanelTrendFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelTrendFieldConfigOverrideProperty[];
}

export interface GetPanelTrendFieldConfigOverrideMatcher {
}

export interface GetPanelTrendFieldConfigOverrideProperty {
}

export interface GetPanelTrendGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelTrendLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelTrendLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelTrendOptions {
    legend: outputs.GetPanelTrendOptionsLegend;
    tooltip: outputs.GetPanelTrendOptionsTooltip;
    /**
     * Name of the x field to use (defaults to first number)
     */
    xField?: string;
}

export interface GetPanelTrendOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelTrendOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelTrendTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelTrendTransformationFilter;
}

export interface GetPanelTrendTransformationFilter {
}

export interface GetPanelXyChartDatasource {
    /**
     * The plugin type-id
     */
    type?: string;
    /**
     * Specific datasource instance
     */
    uid?: string;
}

export interface GetPanelXyChartFieldConfig {
    /**
     * Defaults are the options applied to all fields.
     */
    defaults: outputs.GetPanelXyChartFieldConfigDefaults;
    /**
     * Overrides are the options applied to specific fields overriding the defaults.
     */
    overrides?: outputs.GetPanelXyChartFieldConfigOverride[];
}

export interface GetPanelXyChartFieldConfigDefaults {
    /**
     * Panel color configuration
     */
    color: outputs.GetPanelXyChartFieldConfigDefaultsColor;
    custom: outputs.GetPanelXyChartFieldConfigDefaultsCustom;
    /**
     * Specify the number of decimals Grafana includes in the rendered value.
     * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
     * For example 1.1234 will display as 1.12 and 100.456 will display as 100.
     * To display all decimals, set the unit to String.
     */
    decimals?: number;
    /**
     * Human readable field metadata
     */
    description?: string;
    /**
     * The display value for this field.  This supports template variables blank is auto
     */
    displayName?: string;
    /**
     * This can be used by data sources that return and explicit naming structure for values and labels
     * When this property is configured, this value is used rather than the default naming strategy.
     */
    displayNameFromDs?: string;
    /**
     * True if data source field supports ad-hoc filters
     */
    filterable?: boolean;
    /**
     * Convert input values into a display string
     */
    mappings?: outputs.GetPanelXyChartFieldConfigDefaultsMapping[];
    /**
     * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    max?: number;
    /**
     * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
     */
    min?: number;
    /**
     * Alternative to empty string
     */
    noValue?: string;
    /**
     * An explicit path to the field in the datasource.  When the frame meta includes a path,
     * This will default to ${frame.meta.path}/${field.name}
     *
     * When defined, this value can be used as an identifier within the datasource scope, and
     * may be used to update the results
     */
    path?: string;
    /**
     * Map numeric values to states
     */
    thresholds: outputs.GetPanelXyChartFieldConfigDefaultsThresholds;
    /**
     * Unit a field should use. The unit you select is applied to all fields except time.
     * You can use the units ID availables in Grafana or a custom unit.
     * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
     * As custom unit, you can use the following formats:
     * suffix:<suffix> for custom unit that should go after value.
     * prefix:<prefix> for custom unit that should go before value.
     * time:<format> For custom date time formats type for example time:YYYY-MM-DD.
     * si:<base scale><unit characters> for custom SI units. For example: si: mF. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
     * count:<unit> for a custom count unit.
     * currency:<unit> for custom a currency unit.
     */
    unit?: string;
    /**
     * True if data source can write a value to the path. Auth/authz are supported separately
     */
    writeable?: boolean;
}

export interface GetPanelXyChartFieldConfigDefaultsColor {
    /**
     * The fixed color value for fixed or shades color modes.
     */
    fixedColor?: string;
    /**
     * The main color scheme mode.
     */
    mode: string;
    /**
     * Some visualizations need to know how to assign a series color from by value color schemes.
     */
    seriesBy?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsCustom {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    barAlignment?: number;
    barMaxWidth?: number;
    barWidthFactor?: number;
    drawStyle?: string;
    fillBelowTo?: string;
    fillColor?: string;
    fillOpacity?: number;
    gradientMode?: string;
    hideFrom: outputs.GetPanelXyChartFieldConfigDefaultsCustomHideFrom;
    lineColor?: string;
    lineInterpolation?: string;
    lineStyle: outputs.GetPanelXyChartFieldConfigDefaultsCustomLineStyle;
    lineWidth?: number;
    pointColor?: string;
    pointSize?: number;
    pointSymbol?: string;
    scaleDistribution: outputs.GetPanelXyChartFieldConfigDefaultsCustomScaleDistribution;
    showPoints?: string;
    /**
     * Indicate if null values should be treated as gaps or connected.
     * When the value is a number, it represents the maximum delta in the
     * X axis that should be considered connected.  For timeseries, this is milliseconds
     */
    spanNulls?: string;
    stacking: outputs.GetPanelXyChartFieldConfigDefaultsCustomStacking;
    thresholdsStyle: outputs.GetPanelXyChartFieldConfigDefaultsCustomThresholdsStyle;
    transform?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomStacking {
    group?: string;
    mode?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsCustomThresholdsStyle {
    mode: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMapping {
    rangeMap: outputs.GetPanelXyChartFieldConfigDefaultsMappingRangeMap;
    regexMap: outputs.GetPanelXyChartFieldConfigDefaultsMappingRegexMap;
    specialValueMap: outputs.GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMap;
    valueMap: outputs.GetPanelXyChartFieldConfigDefaultsMappingValueMap;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRangeMap {
    /**
     * Range to match against and the result to apply when the value is within the range
     */
    options: outputs.GetPanelXyChartFieldConfigDefaultsMappingRangeMapOptions;
    type: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRangeMapOptions {
    /**
     * Min value of the range. It can be null which means -Infinity
     */
    from: string;
    /**
     * Config to apply when the value is within the range
     */
    result: outputs.GetPanelXyChartFieldConfigDefaultsMappingRangeMapOptionsResult;
    /**
     * Max value of the range. It can be null which means +Infinity
     */
    to: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRangeMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRegexMap {
    /**
     * Regular expression to match against and the result to apply when the value matches the regex
     */
    options: outputs.GetPanelXyChartFieldConfigDefaultsMappingRegexMapOptions;
    type: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRegexMapOptions {
    /**
     * Regular expression to match against
     */
    pattern: string;
    /**
     * Config to apply when the value matches the regex
     */
    result: outputs.GetPanelXyChartFieldConfigDefaultsMappingRegexMapOptionsResult;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingRegexMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMap {
    options: outputs.GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapOptions;
    type: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapOptions {
    /**
     * Special value to match against
     */
    match: string;
    /**
     * Config to apply when the value matches the special value
     */
    result: outputs.GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapOptionsResult;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingSpecialValueMapOptionsResult {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingValueMap {
    /**
     * Map with <value_to_match>: ValueMappingResult. For example: { "10": { text: "Perfection!", color: "green" } }
     */
    options?: {[key: string]: outputs.GetPanelXyChartFieldConfigDefaultsMappingValueMapOptions};
    type: string;
}

export interface GetPanelXyChartFieldConfigDefaultsMappingValueMapOptions {
    /**
     * Text to use when the value matches
     */
    color?: string;
    /**
     * Icon to display when the value matches. Only specific visualizations.
     */
    icon?: string;
    /**
     * Position in the mapping array. Only used internally.
     */
    index?: number;
    /**
     * Text to display when the value matches
     */
    text?: string;
}

export interface GetPanelXyChartFieldConfigDefaultsThresholds {
    /**
     * Thresholds mode.
     */
    mode: string;
    /**
     * Must be sorted by 'value', first value is always -Infinity
     */
    steps?: outputs.GetPanelXyChartFieldConfigDefaultsThresholdsStep[];
}

export interface GetPanelXyChartFieldConfigDefaultsThresholdsStep {
    /**
     * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.
     */
    color: string;
    /**
     * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
     * Nulls currently appear here when serializing -Infinity to JSON.
     */
    value: string;
}

export interface GetPanelXyChartFieldConfigOverride {
    matcher: outputs.GetPanelXyChartFieldConfigOverrideMatcher;
    properties?: outputs.GetPanelXyChartFieldConfigOverrideProperty[];
}

export interface GetPanelXyChartFieldConfigOverrideMatcher {
}

export interface GetPanelXyChartFieldConfigOverrideProperty {
}

export interface GetPanelXyChartGridPos {
    /**
     * Panel height. The height is the number of rows from the top edge of the panel. Defaults to 9.
     */
    h: number;
    /**
     * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions
     */
    static?: boolean;
    /**
     * Panel width. The width is the number of columns from the left edge of the panel. Defaults to 12.
     */
    w: number;
    /**
     * Panel x. The x coordinate is the number of columns from the left edge of the grid. Defaults to 0.
     */
    x: number;
    /**
     * Panel y. The y coordinate is the number of rows from the top edge of the grid. Defaults to 0.
     */
    y: number;
}

export interface GetPanelXyChartLibraryPanel {
    /**
     * Library panel name
     */
    name: string;
    /**
     * Library panel uid
     */
    uid: string;
}

export interface GetPanelXyChartLink {
    /**
     * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.
     */
    asDropdown: boolean;
    /**
     * Icon name to be displayed with the link
     */
    icon: string;
    /**
     * If true, includes current template variables values in the link as query params. Defaults to false.
     */
    includeVars: boolean;
    /**
     * If true, includes current time range in the link as query params. Defaults to false.
     */
    keepTime: boolean;
    /**
     * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards
     */
    tags?: string[];
    /**
     * If true, the link will be opened in a new tab. Defaults to false.
     */
    targetBlank: boolean;
    /**
     * Title to display with the link
     */
    title: string;
    /**
     * Tooltip to display when the user hovers their mouse over it
     */
    tooltip: string;
    /**
     * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)
     */
    type: string;
    /**
     * Link URL. Only required/valid if the type is link
     */
    url: string;
}

export interface GetPanelXyChartOptions {
    dims: outputs.GetPanelXyChartOptionsDims;
    legend: outputs.GetPanelXyChartOptionsLegend;
    series?: outputs.GetPanelXyChartOptionsSeries[];
    seriesMapping?: string;
    tooltip: outputs.GetPanelXyChartOptionsTooltip;
}

export interface GetPanelXyChartOptionsDims {
    excludes?: string[];
    frame: number;
    x?: string;
}

export interface GetPanelXyChartOptionsLegend {
    asTable?: boolean;
    calcs?: string[];
    displayMode: string;
    isVisible?: boolean;
    placement: string;
    showLegend: boolean;
    sortBy?: string;
    sortDesc?: boolean;
    width?: number;
}

export interface GetPanelXyChartOptionsSeries {
    axisCenteredZero?: boolean;
    axisColorMode?: string;
    axisGridShow?: boolean;
    axisLabel?: string;
    axisPlacement?: string;
    axisSoftMax?: number;
    axisSoftMin?: number;
    axisWidth?: number;
    hideFrom: outputs.GetPanelXyChartOptionsSeriesHideFrom;
    /**
     * Defaults to "auto".
     */
    label: string;
    labelValue: outputs.GetPanelXyChartOptionsSeriesLabelValue;
    lineColor: outputs.GetPanelXyChartOptionsSeriesLineColor;
    lineStyle: outputs.GetPanelXyChartOptionsSeriesLineStyle;
    lineWidth?: number;
    name?: string;
    pointColor: outputs.GetPanelXyChartOptionsSeriesPointColor;
    pointSize: outputs.GetPanelXyChartOptionsSeriesPointSize;
    scaleDistribution: outputs.GetPanelXyChartOptionsSeriesScaleDistribution;
    /**
     * Defaults to "points".
     */
    show: string;
    x?: string;
    y?: string;
}

export interface GetPanelXyChartOptionsSeriesHideFrom {
    legend: boolean;
    tooltip: boolean;
    viz: boolean;
}

export interface GetPanelXyChartOptionsSeriesLabelValue {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
    mode: string;
}

export interface GetPanelXyChartOptionsSeriesLineColor {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
}

export interface GetPanelXyChartOptionsSeriesLineStyle {
    dashes?: number[];
    fill?: string;
}

export interface GetPanelXyChartOptionsSeriesPointColor {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: string;
}

export interface GetPanelXyChartOptionsSeriesPointSize {
    /**
     * fixed: T -- will be added by each element
     */
    field?: string;
    fixed?: number;
    max: number;
    min: number;
    mode?: string;
}

export interface GetPanelXyChartOptionsSeriesScaleDistribution {
    linearThreshold?: number;
    log?: number;
    type: string;
}

export interface GetPanelXyChartOptionsTooltip {
    mode: string;
    sort: string;
}

export interface GetPanelXyChartTransformation {
    /**
     * Disabled transformations are skipped
     */
    disabled?: boolean;
    /**
     * Optional frame matcher. When missing it will be applied to all results
     */
    filter: outputs.GetPanelXyChartTransformationFilter;
}

export interface GetPanelXyChartTransformationFilter {
}

export interface GetQueryElasticsearchBucketAgg {
    dateHistogram: outputs.GetQueryElasticsearchBucketAggDateHistogram;
    filters: outputs.GetQueryElasticsearchBucketAggFilters;
    geoHashGrid: outputs.GetQueryElasticsearchBucketAggGeoHashGrid;
    histogram: outputs.GetQueryElasticsearchBucketAggHistogram;
    nested: outputs.GetQueryElasticsearchBucketAggNested;
    terms: outputs.GetQueryElasticsearchBucketAggTerms;
}

export interface GetQueryElasticsearchBucketAggDateHistogram {
    field?: string;
    settings: outputs.GetQueryElasticsearchBucketAggDateHistogramSettings;
    type: string;
}

export interface GetQueryElasticsearchBucketAggDateHistogramSettings {
    interval?: string;
    minDocCount?: string;
    offset?: string;
    timeZone?: string;
    trimEdges?: string;
}

export interface GetQueryElasticsearchBucketAggFilters {
    settings: outputs.GetQueryElasticsearchBucketAggFiltersSettings;
    type: string;
}

export interface GetQueryElasticsearchBucketAggFiltersSettings {
    filters?: outputs.GetQueryElasticsearchBucketAggFiltersSettingsFilter[];
}

export interface GetQueryElasticsearchBucketAggFiltersSettingsFilter {
    label: string;
    query: string;
}

export interface GetQueryElasticsearchBucketAggGeoHashGrid {
    field?: string;
    settings: outputs.GetQueryElasticsearchBucketAggGeoHashGridSettings;
    type: string;
}

export interface GetQueryElasticsearchBucketAggGeoHashGridSettings {
    precision?: string;
}

export interface GetQueryElasticsearchBucketAggHistogram {
    field?: string;
    settings: outputs.GetQueryElasticsearchBucketAggHistogramSettings;
    type: string;
}

export interface GetQueryElasticsearchBucketAggHistogramSettings {
    interval?: string;
    minDocCount?: string;
}

export interface GetQueryElasticsearchBucketAggNested {
    field?: string;
    settings: outputs.GetQueryElasticsearchBucketAggNestedSettings;
    type: string;
}

export interface GetQueryElasticsearchBucketAggNestedSettings {
}

export interface GetQueryElasticsearchBucketAggTerms {
    field?: string;
    settings: outputs.GetQueryElasticsearchBucketAggTermsSettings;
    type: string;
}

export interface GetQueryElasticsearchBucketAggTermsSettings {
    minDocCount?: string;
    missing?: string;
    order?: string;
    orderBy?: string;
    size?: string;
}

export interface GetQueryElasticsearchMetric {
    count: outputs.GetQueryElasticsearchMetricCount;
    metricAggregationWithSettings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettings;
    pipelineMetricAggregation: outputs.GetQueryElasticsearchMetricPipelineMetricAggregation;
}

export interface GetQueryElasticsearchMetricCount {
    hide?: boolean;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettings {
    average: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsAverage;
    bucketScript: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScript;
    cumulativeSum: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsCumulativeSum;
    derivative: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsDerivative;
    extendedStats: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStats;
    logs: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsLogs;
    max: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMax;
    min: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMin;
    movingAverage: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingAverage;
    movingFunction: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingFunction;
    percentiles: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsPercentiles;
    rate: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRate;
    rawData: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRawData;
    rawDocument: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDocument;
    serialDiff: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsSerialDiff;
    sum: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsSum;
    topMetrics: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsTopMetrics;
    uniqueCount: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsUniqueCount;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsAverage {
    field?: string;
    hide?: boolean;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsAverageSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsAverageSettings {
    missing?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScript {
    hide?: boolean;
    pipelineVariables?: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptPipelineVariable[];
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptPipelineVariable {
    name: string;
    pipelineAgg: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsBucketScriptSettings {
    /**
     * JSON-encoded string.
     */
    script?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsCumulativeSum {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsCumulativeSumSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsCumulativeSumSettings {
    format?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsDerivative {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsDerivativeSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsDerivativeSettings {
    unit?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStats {
    field?: string;
    hide?: boolean;
    meta: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsMeta;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsMeta {
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsExtendedStatsSettings {
    missing?: string;
    sigma?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsLogs {
    hide?: boolean;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsLogsSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsLogsSettings {
    limit?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMax {
    field?: string;
    hide?: boolean;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMaxSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMaxSettings {
    missing?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMin {
    field?: string;
    hide?: boolean;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMinSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMinSettings {
    missing?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingAverage {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingAverageSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingAverageSettings {
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingFunction {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingFunctionSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsMovingFunctionSettings {
    /**
     * JSON-encoded string.
     */
    script?: string;
    shift?: string;
    window?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsPercentiles {
    field?: string;
    hide?: boolean;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsPercentilesSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsPercentilesSettings {
    missing?: string;
    percents?: string[];
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRate {
    field?: string;
    hide?: boolean;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRateSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRateSettings {
    mode?: string;
    unit?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRawData {
    hide?: boolean;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDataSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDataSettings {
    size?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDocument {
    hide?: boolean;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDocumentSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsRawDocumentSettings {
    size?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsSerialDiff {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsSerialDiffSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsSerialDiffSettings {
    lag?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsSum {
    field?: string;
    hide?: boolean;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsSumSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsSumSettings {
    missing?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsTopMetrics {
    hide?: boolean;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsTopMetricsSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsTopMetricsSettings {
    metrics?: string[];
    order?: string;
    orderBy?: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsUniqueCount {
    field?: string;
    hide?: boolean;
    settings: outputs.GetQueryElasticsearchMetricMetricAggregationWithSettingsUniqueCountSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricMetricAggregationWithSettingsUniqueCountSettings {
    missing?: string;
    precisionThreshold?: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregation {
    bucketScript: outputs.GetQueryElasticsearchMetricPipelineMetricAggregationBucketScript;
    cumulativeSum: outputs.GetQueryElasticsearchMetricPipelineMetricAggregationCumulativeSum;
    derivative: outputs.GetQueryElasticsearchMetricPipelineMetricAggregationDerivative;
    movingAverage: outputs.GetQueryElasticsearchMetricPipelineMetricAggregationMovingAverage;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationBucketScript {
    hide?: boolean;
    pipelineVariables?: outputs.GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptPipelineVariable[];
    settings: outputs.GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptPipelineVariable {
    name: string;
    pipelineAgg: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationBucketScriptSettings {
    /**
     * JSON-encoded string.
     */
    script?: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationCumulativeSum {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings: outputs.GetQueryElasticsearchMetricPipelineMetricAggregationCumulativeSumSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationCumulativeSumSettings {
    format?: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationDerivative {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings: outputs.GetQueryElasticsearchMetricPipelineMetricAggregationDerivativeSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationDerivativeSettings {
    unit?: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationMovingAverage {
    field?: string;
    hide?: boolean;
    pipelineAgg?: string;
    settings: outputs.GetQueryElasticsearchMetricPipelineMetricAggregationMovingAverageSettings;
    type: string;
}

export interface GetQueryElasticsearchMetricPipelineMetricAggregationMovingAverageSettings {
}

export interface GetQueryTestDataCsvWafe {
    labels?: string;
    name?: string;
    timeStep?: number;
    valuesCsv?: string;
}

export interface GetQueryTestDataNodes {
    count?: number;
    type?: string;
}

export interface GetQueryTestDataPulseWave {
    offCount?: number;
    offValue?: number;
    onCount?: number;
    onValue?: number;
    timeStep?: number;
}

export interface GetQueryTestDataSim {
    config: outputs.GetQueryTestDataSimConfig;
    key: outputs.GetQueryTestDataSimKey;
    last?: boolean;
    stream?: boolean;
}

export interface GetQueryTestDataSimConfig {
}

export interface GetQueryTestDataSimKey {
    tick: number;
    type: string;
    uid?: string;
}

export interface GetQueryTestDataStream {
    bands?: number;
    noise: number;
    speed: number;
    spread: number;
    type: string;
    url?: string;
}

export interface GetQueryTestDataUsa {
    fields?: string[];
    mode?: string;
    period?: string;
    states?: string[];
}

