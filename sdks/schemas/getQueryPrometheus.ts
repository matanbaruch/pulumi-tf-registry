// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getQueryPrometheus(args: GetQueryPrometheusArgs, opts?: pulumi.InvokeOptions): Promise<GetQueryPrometheusResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("schemas:index/getQueryPrometheus:getQueryPrometheus", {
        "editorMode": args.editorMode,
        "exemplar": args.exemplar,
        "expr": args.expr,
        "format": args.format,
        "hide": args.hide,
        "instant": args.instant,
        "intervalFactor": args.intervalFactor,
        "legendFormat": args.legendFormat,
        "queryType": args.queryType,
        "range": args.range,
        "refId": args.refId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getQueryPrometheus.
 */
export interface GetQueryPrometheusArgs {
    editorMode?: string;
    exemplar?: boolean;
    expr: string;
    format?: string;
    hide?: boolean;
    instant?: boolean;
    /**
     * @deprecated Deprecated
     */
    intervalFactor?: number;
    legendFormat?: string;
    queryType?: string;
    range?: boolean;
    refId: string;
}

/**
 * A collection of values returned by getQueryPrometheus.
 */
export interface GetQueryPrometheusResult {
    readonly editorMode?: string;
    readonly exemplar?: boolean;
    readonly expr: string;
    readonly format?: string;
    readonly hide?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instant?: boolean;
    /**
     * @deprecated Deprecated
     */
    readonly intervalFactor?: number;
    readonly legendFormat?: string;
    readonly queryType?: string;
    readonly range?: boolean;
    readonly refId: string;
    readonly renderedJson: string;
}
export function getQueryPrometheusOutput(args: GetQueryPrometheusOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetQueryPrometheusResult> {
    return pulumi.output(args).apply((a: any) => getQueryPrometheus(a, opts))
}

/**
 * A collection of arguments for invoking getQueryPrometheus.
 */
export interface GetQueryPrometheusOutputArgs {
    editorMode?: pulumi.Input<string>;
    exemplar?: pulumi.Input<boolean>;
    expr: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    hide?: pulumi.Input<boolean>;
    instant?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    intervalFactor?: pulumi.Input<number>;
    legendFormat?: pulumi.Input<string>;
    queryType?: pulumi.Input<string>;
    range?: pulumi.Input<boolean>;
    refId: pulumi.Input<string>;
}
