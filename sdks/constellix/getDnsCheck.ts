// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDnsCheck(args: GetDnsCheckArgs, opts?: pulumi.InvokeOptions): Promise<GetDnsCheckResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("constellix:index/getDnsCheck:getDnsCheck", {
        "checkSites": args.checkSites,
        "expectedResponse": args.expectedResponse,
        "fqdn": args.fqdn,
        "id": args.id,
        "interval": args.interval,
        "intervalPolicy": args.intervalPolicy,
        "name": args.name,
        "notificationGroups": args.notificationGroups,
        "notificationReportTimeout": args.notificationReportTimeout,
        "resolver": args.resolver,
        "verificationPolicy": args.verificationPolicy,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDnsCheck.
 */
export interface GetDnsCheckArgs {
    checkSites?: number[];
    expectedResponse?: string;
    fqdn?: string;
    id?: string;
    interval?: string;
    intervalPolicy?: string;
    name: string;
    notificationGroups?: number[];
    notificationReportTimeout?: number;
    resolver?: string;
    verificationPolicy?: string;
}

/**
 * A collection of values returned by getDnsCheck.
 */
export interface GetDnsCheckResult {
    readonly checkSites: number[];
    readonly expectedResponse: string;
    readonly fqdn: string;
    readonly id: string;
    readonly interval: string;
    readonly intervalPolicy: string;
    readonly name: string;
    readonly notificationGroups: number[];
    readonly notificationReportTimeout: number;
    readonly resolver: string;
    readonly verificationPolicy: string;
}
export function getDnsCheckOutput(args: GetDnsCheckOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDnsCheckResult> {
    return pulumi.output(args).apply((a: any) => getDnsCheck(a, opts))
}

/**
 * A collection of arguments for invoking getDnsCheck.
 */
export interface GetDnsCheckOutputArgs {
    checkSites?: pulumi.Input<pulumi.Input<number>[]>;
    expectedResponse?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    intervalPolicy?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    notificationGroups?: pulumi.Input<pulumi.Input<number>[]>;
    notificationReportTimeout?: pulumi.Input<number>;
    resolver?: pulumi.Input<string>;
    verificationPolicy?: pulumi.Input<string>;
}
