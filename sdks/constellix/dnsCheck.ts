// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DnsCheck extends pulumi.CustomResource {
    /**
     * Get an existing DnsCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsCheckState, opts?: pulumi.CustomResourceOptions): DnsCheck {
        return new DnsCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'constellix:index/dnsCheck:DnsCheck';

    /**
     * Returns true if the given object is an instance of DnsCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsCheck.__pulumiType;
    }

    public readonly checkSites!: pulumi.Output<number[]>;
    public readonly expectedResponse!: pulumi.Output<string>;
    public readonly fqdn!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<string>;
    public readonly intervalPolicy!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationGroups!: pulumi.Output<number[]>;
    public readonly notificationReportTimeout!: pulumi.Output<number>;
    public readonly resolver!: pulumi.Output<string>;
    public readonly verificationPolicy!: pulumi.Output<string>;

    /**
     * Create a DnsCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsCheckArgs | DnsCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsCheckState | undefined;
            resourceInputs["checkSites"] = state ? state.checkSites : undefined;
            resourceInputs["expectedResponse"] = state ? state.expectedResponse : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["intervalPolicy"] = state ? state.intervalPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationGroups"] = state ? state.notificationGroups : undefined;
            resourceInputs["notificationReportTimeout"] = state ? state.notificationReportTimeout : undefined;
            resourceInputs["resolver"] = state ? state.resolver : undefined;
            resourceInputs["verificationPolicy"] = state ? state.verificationPolicy : undefined;
        } else {
            const args = argsOrState as DnsCheckArgs | undefined;
            if ((!args || args.checkSites === undefined) && !opts.urn) {
                throw new Error("Missing required property 'checkSites'");
            }
            if ((!args || args.fqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdn'");
            }
            if ((!args || args.resolver === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resolver'");
            }
            resourceInputs["checkSites"] = args ? args.checkSites : undefined;
            resourceInputs["expectedResponse"] = args ? args.expectedResponse : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["intervalPolicy"] = args ? args.intervalPolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationGroups"] = args ? args.notificationGroups : undefined;
            resourceInputs["notificationReportTimeout"] = args ? args.notificationReportTimeout : undefined;
            resourceInputs["resolver"] = args ? args.resolver : undefined;
            resourceInputs["verificationPolicy"] = args ? args.verificationPolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsCheck.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsCheck resources.
 */
export interface DnsCheckState {
    checkSites?: pulumi.Input<pulumi.Input<number>[]>;
    expectedResponse?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    intervalPolicy?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationGroups?: pulumi.Input<pulumi.Input<number>[]>;
    notificationReportTimeout?: pulumi.Input<number>;
    resolver?: pulumi.Input<string>;
    verificationPolicy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsCheck resource.
 */
export interface DnsCheckArgs {
    checkSites: pulumi.Input<pulumi.Input<number>[]>;
    expectedResponse?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    intervalPolicy?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationGroups?: pulumi.Input<pulumi.Input<number>[]>;
    notificationReportTimeout?: pulumi.Input<number>;
    resolver: pulumi.Input<string>;
    verificationPolicy?: pulumi.Input<string>;
}
