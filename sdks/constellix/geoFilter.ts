// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GeoFilter extends pulumi.CustomResource {
    /**
     * Get an existing GeoFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GeoFilterState, opts?: pulumi.CustomResourceOptions): GeoFilter {
        return new GeoFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'constellix:index/geoFilter:GeoFilter';

    /**
     * Returns true if the given object is an instance of GeoFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GeoFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GeoFilter.__pulumiType;
    }

    public readonly asns!: pulumi.Output<number[]>;
    public readonly filterRulesLimit!: pulumi.Output<number>;
    public readonly geoipContinents!: pulumi.Output<string[] | undefined>;
    public readonly geoipCountries!: pulumi.Output<string[]>;
    public readonly geoipRegions!: pulumi.Output<string[]>;
    public readonly ipv4s!: pulumi.Output<string[]>;
    public readonly ipv6s!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a GeoFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GeoFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GeoFilterArgs | GeoFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GeoFilterState | undefined;
            resourceInputs["asns"] = state ? state.asns : undefined;
            resourceInputs["filterRulesLimit"] = state ? state.filterRulesLimit : undefined;
            resourceInputs["geoipContinents"] = state ? state.geoipContinents : undefined;
            resourceInputs["geoipCountries"] = state ? state.geoipCountries : undefined;
            resourceInputs["geoipRegions"] = state ? state.geoipRegions : undefined;
            resourceInputs["ipv4s"] = state ? state.ipv4s : undefined;
            resourceInputs["ipv6s"] = state ? state.ipv6s : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as GeoFilterArgs | undefined;
            resourceInputs["asns"] = args ? args.asns : undefined;
            resourceInputs["filterRulesLimit"] = args ? args.filterRulesLimit : undefined;
            resourceInputs["geoipContinents"] = args ? args.geoipContinents : undefined;
            resourceInputs["geoipCountries"] = args ? args.geoipCountries : undefined;
            resourceInputs["geoipRegions"] = args ? args.geoipRegions : undefined;
            resourceInputs["ipv4s"] = args ? args.ipv4s : undefined;
            resourceInputs["ipv6s"] = args ? args.ipv6s : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GeoFilter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GeoFilter resources.
 */
export interface GeoFilterState {
    asns?: pulumi.Input<pulumi.Input<number>[]>;
    filterRulesLimit?: pulumi.Input<number>;
    geoipContinents?: pulumi.Input<pulumi.Input<string>[]>;
    geoipCountries?: pulumi.Input<pulumi.Input<string>[]>;
    geoipRegions?: pulumi.Input<pulumi.Input<string>[]>;
    ipv4s?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6s?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GeoFilter resource.
 */
export interface GeoFilterArgs {
    asns?: pulumi.Input<pulumi.Input<number>[]>;
    filterRulesLimit?: pulumi.Input<number>;
    geoipContinents?: pulumi.Input<pulumi.Input<string>[]>;
    geoipCountries?: pulumi.Input<pulumi.Input<string>[]>;
    geoipRegions?: pulumi.Input<pulumi.Input<string>[]>;
    ipv4s?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6s?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
}
