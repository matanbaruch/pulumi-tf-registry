// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getHttpCheck(args: GetHttpCheckArgs, opts?: pulumi.InvokeOptions): Promise<GetHttpCheckResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("constellix:index/getHttpCheck:getHttpCheck", {
        "checkSites": args.checkSites,
        "expectedStatusCode": args.expectedStatusCode,
        "fqdn": args.fqdn,
        "host": args.host,
        "id": args.id,
        "interval": args.interval,
        "intervalPolicy": args.intervalPolicy,
        "ipVersion": args.ipVersion,
        "name": args.name,
        "notificationGroups": args.notificationGroups,
        "notificationReportTimeout": args.notificationReportTimeout,
        "path": args.path,
        "port": args.port,
        "protocolType": args.protocolType,
        "searchString": args.searchString,
        "verificationPolicy": args.verificationPolicy,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHttpCheck.
 */
export interface GetHttpCheckArgs {
    checkSites?: number[];
    expectedStatusCode?: number;
    fqdn?: string;
    host?: string;
    id?: string;
    interval?: string;
    intervalPolicy?: string;
    ipVersion?: string;
    name: string;
    notificationGroups?: number[];
    notificationReportTimeout?: number;
    path?: string;
    port?: number;
    protocolType?: string;
    searchString?: string;
    verificationPolicy?: string;
}

/**
 * A collection of values returned by getHttpCheck.
 */
export interface GetHttpCheckResult {
    readonly checkSites: number[];
    readonly expectedStatusCode: number;
    readonly fqdn: string;
    readonly host: string;
    readonly id: string;
    readonly interval: string;
    readonly intervalPolicy: string;
    readonly ipVersion: string;
    readonly name: string;
    readonly notificationGroups: number[];
    readonly notificationReportTimeout: number;
    readonly path: string;
    readonly port: number;
    readonly protocolType: string;
    readonly searchString: string;
    readonly verificationPolicy: string;
}
export function getHttpCheckOutput(args: GetHttpCheckOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHttpCheckResult> {
    return pulumi.output(args).apply((a: any) => getHttpCheck(a, opts))
}

/**
 * A collection of arguments for invoking getHttpCheck.
 */
export interface GetHttpCheckOutputArgs {
    checkSites?: pulumi.Input<pulumi.Input<number>[]>;
    expectedStatusCode?: pulumi.Input<number>;
    fqdn?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    intervalPolicy?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    notificationGroups?: pulumi.Input<pulumi.Input<number>[]>;
    notificationReportTimeout?: pulumi.Input<number>;
    path?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocolType?: pulumi.Input<string>;
    searchString?: pulumi.Input<string>;
    verificationPolicy?: pulumi.Input<string>;
}
