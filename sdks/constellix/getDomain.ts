// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDomain(args: GetDomainArgs, opts?: pulumi.InvokeOptions): Promise<GetDomainResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("constellix:index/getDomain:getDomain", {
        "disabled": args.disabled,
        "hasGeoip": args.hasGeoip,
        "hasGtdRegions": args.hasGtdRegions,
        "id": args.id,
        "name": args.name,
        "nameserverGroup": args.nameserverGroup,
        "note": args.note,
        "soa": args.soa,
        "tags": args.tags,
        "vanityNameserver": args.vanityNameserver,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDomain.
 */
export interface GetDomainArgs {
    disabled?: boolean;
    hasGeoip?: boolean;
    hasGtdRegions?: boolean;
    id?: string;
    name: string;
    nameserverGroup?: string;
    note?: string;
    soa?: {[key: string]: string};
    tags?: string[];
    vanityNameserver?: string;
}

/**
 * A collection of values returned by getDomain.
 */
export interface GetDomainResult {
    readonly disabled: boolean;
    readonly hasGeoip: boolean;
    readonly hasGtdRegions: boolean;
    readonly id: string;
    readonly name: string;
    readonly nameserverGroup: string;
    readonly note: string;
    readonly soa: {[key: string]: string};
    readonly tags?: string[];
    readonly vanityNameserver: string;
}
export function getDomainOutput(args: GetDomainOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDomainResult> {
    return pulumi.output(args).apply((a: any) => getDomain(a, opts))
}

/**
 * A collection of arguments for invoking getDomain.
 */
export interface GetDomainOutputArgs {
    disabled?: pulumi.Input<boolean>;
    hasGeoip?: pulumi.Input<boolean>;
    hasGtdRegions?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameserverGroup?: pulumi.Input<string>;
    note?: pulumi.Input<string>;
    soa?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    vanityNameserver?: pulumi.Input<string>;
}
