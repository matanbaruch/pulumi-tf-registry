// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AaaaRecordArgs, AaaaRecordState } from "./aaaaRecord";
export type AaaaRecord = import("./aaaaRecord").AaaaRecord;
export const AaaaRecord: typeof import("./aaaaRecord").AaaaRecord = null as any;
utilities.lazyLoad(exports, ["AaaaRecord"], () => require("./aaaaRecord"));

export { AaaaRecordPoolArgs, AaaaRecordPoolState } from "./aaaaRecordPool";
export type AaaaRecordPool = import("./aaaaRecordPool").AaaaRecordPool;
export const AaaaRecordPool: typeof import("./aaaaRecordPool").AaaaRecordPool = null as any;
utilities.lazyLoad(exports, ["AaaaRecordPool"], () => require("./aaaaRecordPool"));

export { AnameRecordArgs, AnameRecordState } from "./anameRecord";
export type AnameRecord = import("./anameRecord").AnameRecord;
export const AnameRecord: typeof import("./anameRecord").AnameRecord = null as any;
utilities.lazyLoad(exports, ["AnameRecord"], () => require("./anameRecord"));

export { ARecordArgs, ARecordState } from "./arecord";
export type ARecord = import("./arecord").ARecord;
export const ARecord: typeof import("./arecord").ARecord = null as any;
utilities.lazyLoad(exports, ["ARecord"], () => require("./arecord"));

export { ARecordPoolArgs, ARecordPoolState } from "./arecordPool";
export type ARecordPool = import("./arecordPool").ARecordPool;
export const ARecordPool: typeof import("./arecordPool").ARecordPool = null as any;
utilities.lazyLoad(exports, ["ARecordPool"], () => require("./arecordPool"));

export { CaaRecordArgs, CaaRecordState } from "./caaRecord";
export type CaaRecord = import("./caaRecord").CaaRecord;
export const CaaRecord: typeof import("./caaRecord").CaaRecord = null as any;
utilities.lazyLoad(exports, ["CaaRecord"], () => require("./caaRecord"));

export { CertRecordArgs, CertRecordState } from "./certRecord";
export type CertRecord = import("./certRecord").CertRecord;
export const CertRecord: typeof import("./certRecord").CertRecord = null as any;
utilities.lazyLoad(exports, ["CertRecord"], () => require("./certRecord"));

export { CnameRecordArgs, CnameRecordState } from "./cnameRecord";
export type CnameRecord = import("./cnameRecord").CnameRecord;
export const CnameRecord: typeof import("./cnameRecord").CnameRecord = null as any;
utilities.lazyLoad(exports, ["CnameRecord"], () => require("./cnameRecord"));

export { CnameRecordPoolArgs, CnameRecordPoolState } from "./cnameRecordPool";
export type CnameRecordPool = import("./cnameRecordPool").CnameRecordPool;
export const CnameRecordPool: typeof import("./cnameRecordPool").CnameRecordPool = null as any;
utilities.lazyLoad(exports, ["CnameRecordPool"], () => require("./cnameRecordPool"));

export { ContactListsArgs, ContactListsState } from "./contactLists";
export type ContactLists = import("./contactLists").ContactLists;
export const ContactLists: typeof import("./contactLists").ContactLists = null as any;
utilities.lazyLoad(exports, ["ContactLists"], () => require("./contactLists"));

export { DnsCheckArgs, DnsCheckState } from "./dnsCheck";
export type DnsCheck = import("./dnsCheck").DnsCheck;
export const DnsCheck: typeof import("./dnsCheck").DnsCheck = null as any;
utilities.lazyLoad(exports, ["DnsCheck"], () => require("./dnsCheck"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { GeoFilterArgs, GeoFilterState } from "./geoFilter";
export type GeoFilter = import("./geoFilter").GeoFilter;
export const GeoFilter: typeof import("./geoFilter").GeoFilter = null as any;
utilities.lazyLoad(exports, ["GeoFilter"], () => require("./geoFilter"));

export { GeoProximityArgs, GeoProximityState } from "./geoProximity";
export type GeoProximity = import("./geoProximity").GeoProximity;
export const GeoProximity: typeof import("./geoProximity").GeoProximity = null as any;
utilities.lazyLoad(exports, ["GeoProximity"], () => require("./geoProximity"));

export { GetARecordArgs, GetARecordResult, GetARecordOutputArgs } from "./getARecord";
export const getARecord: typeof import("./getARecord").getARecord = null as any;
export const getARecordOutput: typeof import("./getARecord").getARecordOutput = null as any;
utilities.lazyLoad(exports, ["getARecord","getARecordOutput"], () => require("./getARecord"));

export { GetARecordPoolArgs, GetARecordPoolResult, GetARecordPoolOutputArgs } from "./getARecordPool";
export const getARecordPool: typeof import("./getARecordPool").getARecordPool = null as any;
export const getARecordPoolOutput: typeof import("./getARecordPool").getARecordPoolOutput = null as any;
utilities.lazyLoad(exports, ["getARecordPool","getARecordPoolOutput"], () => require("./getARecordPool"));

export { GetAaaaRecordArgs, GetAaaaRecordResult, GetAaaaRecordOutputArgs } from "./getAaaaRecord";
export const getAaaaRecord: typeof import("./getAaaaRecord").getAaaaRecord = null as any;
export const getAaaaRecordOutput: typeof import("./getAaaaRecord").getAaaaRecordOutput = null as any;
utilities.lazyLoad(exports, ["getAaaaRecord","getAaaaRecordOutput"], () => require("./getAaaaRecord"));

export { GetAaaaRecordPoolArgs, GetAaaaRecordPoolResult, GetAaaaRecordPoolOutputArgs } from "./getAaaaRecordPool";
export const getAaaaRecordPool: typeof import("./getAaaaRecordPool").getAaaaRecordPool = null as any;
export const getAaaaRecordPoolOutput: typeof import("./getAaaaRecordPool").getAaaaRecordPoolOutput = null as any;
utilities.lazyLoad(exports, ["getAaaaRecordPool","getAaaaRecordPoolOutput"], () => require("./getAaaaRecordPool"));

export { GetAnameRecordArgs, GetAnameRecordResult, GetAnameRecordOutputArgs } from "./getAnameRecord";
export const getAnameRecord: typeof import("./getAnameRecord").getAnameRecord = null as any;
export const getAnameRecordOutput: typeof import("./getAnameRecord").getAnameRecordOutput = null as any;
utilities.lazyLoad(exports, ["getAnameRecord","getAnameRecordOutput"], () => require("./getAnameRecord"));

export { GetCaaRecordArgs, GetCaaRecordResult, GetCaaRecordOutputArgs } from "./getCaaRecord";
export const getCaaRecord: typeof import("./getCaaRecord").getCaaRecord = null as any;
export const getCaaRecordOutput: typeof import("./getCaaRecord").getCaaRecordOutput = null as any;
utilities.lazyLoad(exports, ["getCaaRecord","getCaaRecordOutput"], () => require("./getCaaRecord"));

export { GetCertRecordArgs, GetCertRecordResult, GetCertRecordOutputArgs } from "./getCertRecord";
export const getCertRecord: typeof import("./getCertRecord").getCertRecord = null as any;
export const getCertRecordOutput: typeof import("./getCertRecord").getCertRecordOutput = null as any;
utilities.lazyLoad(exports, ["getCertRecord","getCertRecordOutput"], () => require("./getCertRecord"));

export { GetCnameRecordArgs, GetCnameRecordResult, GetCnameRecordOutputArgs } from "./getCnameRecord";
export const getCnameRecord: typeof import("./getCnameRecord").getCnameRecord = null as any;
export const getCnameRecordOutput: typeof import("./getCnameRecord").getCnameRecordOutput = null as any;
utilities.lazyLoad(exports, ["getCnameRecord","getCnameRecordOutput"], () => require("./getCnameRecord"));

export { GetCnameRecordPoolArgs, GetCnameRecordPoolResult, GetCnameRecordPoolOutputArgs } from "./getCnameRecordPool";
export const getCnameRecordPool: typeof import("./getCnameRecordPool").getCnameRecordPool = null as any;
export const getCnameRecordPoolOutput: typeof import("./getCnameRecordPool").getCnameRecordPoolOutput = null as any;
utilities.lazyLoad(exports, ["getCnameRecordPool","getCnameRecordPoolOutput"], () => require("./getCnameRecordPool"));

export { GetContactListsArgs, GetContactListsResult, GetContactListsOutputArgs } from "./getContactLists";
export const getContactLists: typeof import("./getContactLists").getContactLists = null as any;
export const getContactListsOutput: typeof import("./getContactLists").getContactListsOutput = null as any;
utilities.lazyLoad(exports, ["getContactLists","getContactListsOutput"], () => require("./getContactLists"));

export { GetDnsCheckArgs, GetDnsCheckResult, GetDnsCheckOutputArgs } from "./getDnsCheck";
export const getDnsCheck: typeof import("./getDnsCheck").getDnsCheck = null as any;
export const getDnsCheckOutput: typeof import("./getDnsCheck").getDnsCheckOutput = null as any;
utilities.lazyLoad(exports, ["getDnsCheck","getDnsCheckOutput"], () => require("./getDnsCheck"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { GetGeoFilterArgs, GetGeoFilterResult, GetGeoFilterOutputArgs } from "./getGeoFilter";
export const getGeoFilter: typeof import("./getGeoFilter").getGeoFilter = null as any;
export const getGeoFilterOutput: typeof import("./getGeoFilter").getGeoFilterOutput = null as any;
utilities.lazyLoad(exports, ["getGeoFilter","getGeoFilterOutput"], () => require("./getGeoFilter"));

export { GetGeoProximityArgs, GetGeoProximityResult, GetGeoProximityOutputArgs } from "./getGeoProximity";
export const getGeoProximity: typeof import("./getGeoProximity").getGeoProximity = null as any;
export const getGeoProximityOutput: typeof import("./getGeoProximity").getGeoProximityOutput = null as any;
utilities.lazyLoad(exports, ["getGeoProximity","getGeoProximityOutput"], () => require("./getGeoProximity"));

export { GetHinfoRecordArgs, GetHinfoRecordResult, GetHinfoRecordOutputArgs } from "./getHinfoRecord";
export const getHinfoRecord: typeof import("./getHinfoRecord").getHinfoRecord = null as any;
export const getHinfoRecordOutput: typeof import("./getHinfoRecord").getHinfoRecordOutput = null as any;
utilities.lazyLoad(exports, ["getHinfoRecord","getHinfoRecordOutput"], () => require("./getHinfoRecord"));

export { GetHttpCheckArgs, GetHttpCheckResult, GetHttpCheckOutputArgs } from "./getHttpCheck";
export const getHttpCheck: typeof import("./getHttpCheck").getHttpCheck = null as any;
export const getHttpCheckOutput: typeof import("./getHttpCheck").getHttpCheckOutput = null as any;
utilities.lazyLoad(exports, ["getHttpCheck","getHttpCheckOutput"], () => require("./getHttpCheck"));

export { GetHttpRedirectionRecordArgs, GetHttpRedirectionRecordResult, GetHttpRedirectionRecordOutputArgs } from "./getHttpRedirectionRecord";
export const getHttpRedirectionRecord: typeof import("./getHttpRedirectionRecord").getHttpRedirectionRecord = null as any;
export const getHttpRedirectionRecordOutput: typeof import("./getHttpRedirectionRecord").getHttpRedirectionRecordOutput = null as any;
utilities.lazyLoad(exports, ["getHttpRedirectionRecord","getHttpRedirectionRecordOutput"], () => require("./getHttpRedirectionRecord"));

export { GetMxRecordArgs, GetMxRecordResult, GetMxRecordOutputArgs } from "./getMxRecord";
export const getMxRecord: typeof import("./getMxRecord").getMxRecord = null as any;
export const getMxRecordOutput: typeof import("./getMxRecord").getMxRecordOutput = null as any;
utilities.lazyLoad(exports, ["getMxRecord","getMxRecordOutput"], () => require("./getMxRecord"));

export { GetNaptrRecordArgs, GetNaptrRecordResult, GetNaptrRecordOutputArgs } from "./getNaptrRecord";
export const getNaptrRecord: typeof import("./getNaptrRecord").getNaptrRecord = null as any;
export const getNaptrRecordOutput: typeof import("./getNaptrRecord").getNaptrRecordOutput = null as any;
utilities.lazyLoad(exports, ["getNaptrRecord","getNaptrRecordOutput"], () => require("./getNaptrRecord"));

export { GetNsRecordArgs, GetNsRecordResult, GetNsRecordOutputArgs } from "./getNsRecord";
export const getNsRecord: typeof import("./getNsRecord").getNsRecord = null as any;
export const getNsRecordOutput: typeof import("./getNsRecord").getNsRecordOutput = null as any;
utilities.lazyLoad(exports, ["getNsRecord","getNsRecordOutput"], () => require("./getNsRecord"));

export { GetPtrRecordArgs, GetPtrRecordResult, GetPtrRecordOutputArgs } from "./getPtrRecord";
export const getPtrRecord: typeof import("./getPtrRecord").getPtrRecord = null as any;
export const getPtrRecordOutput: typeof import("./getPtrRecord").getPtrRecordOutput = null as any;
utilities.lazyLoad(exports, ["getPtrRecord","getPtrRecordOutput"], () => require("./getPtrRecord"));

export { GetRpRecordArgs, GetRpRecordResult, GetRpRecordOutputArgs } from "./getRpRecord";
export const getRpRecord: typeof import("./getRpRecord").getRpRecord = null as any;
export const getRpRecordOutput: typeof import("./getRpRecord").getRpRecordOutput = null as any;
utilities.lazyLoad(exports, ["getRpRecord","getRpRecordOutput"], () => require("./getRpRecord"));

export { GetSpfRecordArgs, GetSpfRecordResult, GetSpfRecordOutputArgs } from "./getSpfRecord";
export const getSpfRecord: typeof import("./getSpfRecord").getSpfRecord = null as any;
export const getSpfRecordOutput: typeof import("./getSpfRecord").getSpfRecordOutput = null as any;
utilities.lazyLoad(exports, ["getSpfRecord","getSpfRecordOutput"], () => require("./getSpfRecord"));

export { GetSrvRecordArgs, GetSrvRecordResult, GetSrvRecordOutputArgs } from "./getSrvRecord";
export const getSrvRecord: typeof import("./getSrvRecord").getSrvRecord = null as any;
export const getSrvRecordOutput: typeof import("./getSrvRecord").getSrvRecordOutput = null as any;
utilities.lazyLoad(exports, ["getSrvRecord","getSrvRecordOutput"], () => require("./getSrvRecord"));

export { GetTagsArgs, GetTagsResult, GetTagsOutputArgs } from "./getTags";
export const getTags: typeof import("./getTags").getTags = null as any;
export const getTagsOutput: typeof import("./getTags").getTagsOutput = null as any;
utilities.lazyLoad(exports, ["getTags","getTagsOutput"], () => require("./getTags"));

export { GetTcpCheckArgs, GetTcpCheckResult, GetTcpCheckOutputArgs } from "./getTcpCheck";
export const getTcpCheck: typeof import("./getTcpCheck").getTcpCheck = null as any;
export const getTcpCheckOutput: typeof import("./getTcpCheck").getTcpCheckOutput = null as any;
utilities.lazyLoad(exports, ["getTcpCheck","getTcpCheckOutput"], () => require("./getTcpCheck"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GetTxtRecordArgs, GetTxtRecordResult, GetTxtRecordOutputArgs } from "./getTxtRecord";
export const getTxtRecord: typeof import("./getTxtRecord").getTxtRecord = null as any;
export const getTxtRecordOutput: typeof import("./getTxtRecord").getTxtRecordOutput = null as any;
utilities.lazyLoad(exports, ["getTxtRecord","getTxtRecordOutput"], () => require("./getTxtRecord"));

export { GetVanityNameserverArgs, GetVanityNameserverResult, GetVanityNameserverOutputArgs } from "./getVanityNameserver";
export const getVanityNameserver: typeof import("./getVanityNameserver").getVanityNameserver = null as any;
export const getVanityNameserverOutput: typeof import("./getVanityNameserver").getVanityNameserverOutput = null as any;
utilities.lazyLoad(exports, ["getVanityNameserver","getVanityNameserverOutput"], () => require("./getVanityNameserver"));

export { HinfoRecordArgs, HinfoRecordState } from "./hinfoRecord";
export type HinfoRecord = import("./hinfoRecord").HinfoRecord;
export const HinfoRecord: typeof import("./hinfoRecord").HinfoRecord = null as any;
utilities.lazyLoad(exports, ["HinfoRecord"], () => require("./hinfoRecord"));

export { HttpCheckArgs, HttpCheckState } from "./httpCheck";
export type HttpCheck = import("./httpCheck").HttpCheck;
export const HttpCheck: typeof import("./httpCheck").HttpCheck = null as any;
utilities.lazyLoad(exports, ["HttpCheck"], () => require("./httpCheck"));

export { HttpRedirectionRecordArgs, HttpRedirectionRecordState } from "./httpRedirectionRecord";
export type HttpRedirectionRecord = import("./httpRedirectionRecord").HttpRedirectionRecord;
export const HttpRedirectionRecord: typeof import("./httpRedirectionRecord").HttpRedirectionRecord = null as any;
utilities.lazyLoad(exports, ["HttpRedirectionRecord"], () => require("./httpRedirectionRecord"));

export { MxRecordArgs, MxRecordState } from "./mxRecord";
export type MxRecord = import("./mxRecord").MxRecord;
export const MxRecord: typeof import("./mxRecord").MxRecord = null as any;
utilities.lazyLoad(exports, ["MxRecord"], () => require("./mxRecord"));

export { NaptrRecordArgs, NaptrRecordState } from "./naptrRecord";
export type NaptrRecord = import("./naptrRecord").NaptrRecord;
export const NaptrRecord: typeof import("./naptrRecord").NaptrRecord = null as any;
utilities.lazyLoad(exports, ["NaptrRecord"], () => require("./naptrRecord"));

export { NsRecordArgs, NsRecordState } from "./nsRecord";
export type NsRecord = import("./nsRecord").NsRecord;
export const NsRecord: typeof import("./nsRecord").NsRecord = null as any;
utilities.lazyLoad(exports, ["NsRecord"], () => require("./nsRecord"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PtrRecordArgs, PtrRecordState } from "./ptrRecord";
export type PtrRecord = import("./ptrRecord").PtrRecord;
export const PtrRecord: typeof import("./ptrRecord").PtrRecord = null as any;
utilities.lazyLoad(exports, ["PtrRecord"], () => require("./ptrRecord"));

export { RpRecordArgs, RpRecordState } from "./rpRecord";
export type RpRecord = import("./rpRecord").RpRecord;
export const RpRecord: typeof import("./rpRecord").RpRecord = null as any;
utilities.lazyLoad(exports, ["RpRecord"], () => require("./rpRecord"));

export { SpfRecordArgs, SpfRecordState } from "./spfRecord";
export type SpfRecord = import("./spfRecord").SpfRecord;
export const SpfRecord: typeof import("./spfRecord").SpfRecord = null as any;
utilities.lazyLoad(exports, ["SpfRecord"], () => require("./spfRecord"));

export { SrvRecordArgs, SrvRecordState } from "./srvRecord";
export type SrvRecord = import("./srvRecord").SrvRecord;
export const SrvRecord: typeof import("./srvRecord").SrvRecord = null as any;
utilities.lazyLoad(exports, ["SrvRecord"], () => require("./srvRecord"));

export { TagsArgs, TagsState } from "./tags";
export type Tags = import("./tags").Tags;
export const Tags: typeof import("./tags").Tags = null as any;
utilities.lazyLoad(exports, ["Tags"], () => require("./tags"));

export { TcpCheckArgs, TcpCheckState } from "./tcpCheck";
export type TcpCheck = import("./tcpCheck").TcpCheck;
export const TcpCheck: typeof import("./tcpCheck").TcpCheck = null as any;
utilities.lazyLoad(exports, ["TcpCheck"], () => require("./tcpCheck"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));

export { TxtRecordArgs, TxtRecordState } from "./txtRecord";
export type TxtRecord = import("./txtRecord").TxtRecord;
export const TxtRecord: typeof import("./txtRecord").TxtRecord = null as any;
utilities.lazyLoad(exports, ["TxtRecord"], () => require("./txtRecord"));

export { VanityNameserverArgs, VanityNameserverState } from "./vanityNameserver";
export type VanityNameserver = import("./vanityNameserver").VanityNameserver;
export const VanityNameserver: typeof import("./vanityNameserver").VanityNameserver = null as any;
utilities.lazyLoad(exports, ["VanityNameserver"], () => require("./vanityNameserver"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "constellix:index/aRecord:ARecord":
                return new ARecord(name, <any>undefined, { urn })
            case "constellix:index/aRecordPool:ARecordPool":
                return new ARecordPool(name, <any>undefined, { urn })
            case "constellix:index/aaaaRecord:AaaaRecord":
                return new AaaaRecord(name, <any>undefined, { urn })
            case "constellix:index/aaaaRecordPool:AaaaRecordPool":
                return new AaaaRecordPool(name, <any>undefined, { urn })
            case "constellix:index/anameRecord:AnameRecord":
                return new AnameRecord(name, <any>undefined, { urn })
            case "constellix:index/caaRecord:CaaRecord":
                return new CaaRecord(name, <any>undefined, { urn })
            case "constellix:index/certRecord:CertRecord":
                return new CertRecord(name, <any>undefined, { urn })
            case "constellix:index/cnameRecord:CnameRecord":
                return new CnameRecord(name, <any>undefined, { urn })
            case "constellix:index/cnameRecordPool:CnameRecordPool":
                return new CnameRecordPool(name, <any>undefined, { urn })
            case "constellix:index/contactLists:ContactLists":
                return new ContactLists(name, <any>undefined, { urn })
            case "constellix:index/dnsCheck:DnsCheck":
                return new DnsCheck(name, <any>undefined, { urn })
            case "constellix:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "constellix:index/geoFilter:GeoFilter":
                return new GeoFilter(name, <any>undefined, { urn })
            case "constellix:index/geoProximity:GeoProximity":
                return new GeoProximity(name, <any>undefined, { urn })
            case "constellix:index/hinfoRecord:HinfoRecord":
                return new HinfoRecord(name, <any>undefined, { urn })
            case "constellix:index/httpCheck:HttpCheck":
                return new HttpCheck(name, <any>undefined, { urn })
            case "constellix:index/httpRedirectionRecord:HttpRedirectionRecord":
                return new HttpRedirectionRecord(name, <any>undefined, { urn })
            case "constellix:index/mxRecord:MxRecord":
                return new MxRecord(name, <any>undefined, { urn })
            case "constellix:index/naptrRecord:NaptrRecord":
                return new NaptrRecord(name, <any>undefined, { urn })
            case "constellix:index/nsRecord:NsRecord":
                return new NsRecord(name, <any>undefined, { urn })
            case "constellix:index/ptrRecord:PtrRecord":
                return new PtrRecord(name, <any>undefined, { urn })
            case "constellix:index/rpRecord:RpRecord":
                return new RpRecord(name, <any>undefined, { urn })
            case "constellix:index/spfRecord:SpfRecord":
                return new SpfRecord(name, <any>undefined, { urn })
            case "constellix:index/srvRecord:SrvRecord":
                return new SrvRecord(name, <any>undefined, { urn })
            case "constellix:index/tags:Tags":
                return new Tags(name, <any>undefined, { urn })
            case "constellix:index/tcpCheck:TcpCheck":
                return new TcpCheck(name, <any>undefined, { urn })
            case "constellix:index/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "constellix:index/txtRecord:TxtRecord":
                return new TxtRecord(name, <any>undefined, { urn })
            case "constellix:index/vanityNameserver:VanityNameserver":
                return new VanityNameserver(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("constellix", "index/aRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/aRecordPool", _module)
pulumi.runtime.registerResourceModule("constellix", "index/aaaaRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/aaaaRecordPool", _module)
pulumi.runtime.registerResourceModule("constellix", "index/anameRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/caaRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/certRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/cnameRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/cnameRecordPool", _module)
pulumi.runtime.registerResourceModule("constellix", "index/contactLists", _module)
pulumi.runtime.registerResourceModule("constellix", "index/dnsCheck", _module)
pulumi.runtime.registerResourceModule("constellix", "index/domain", _module)
pulumi.runtime.registerResourceModule("constellix", "index/geoFilter", _module)
pulumi.runtime.registerResourceModule("constellix", "index/geoProximity", _module)
pulumi.runtime.registerResourceModule("constellix", "index/hinfoRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/httpCheck", _module)
pulumi.runtime.registerResourceModule("constellix", "index/httpRedirectionRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/mxRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/naptrRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/nsRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/ptrRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/rpRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/spfRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/srvRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/tags", _module)
pulumi.runtime.registerResourceModule("constellix", "index/tcpCheck", _module)
pulumi.runtime.registerResourceModule("constellix", "index/template", _module)
pulumi.runtime.registerResourceModule("constellix", "index/txtRecord", _module)
pulumi.runtime.registerResourceModule("constellix", "index/vanityNameserver", _module)
pulumi.runtime.registerResourcePackage("constellix", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:constellix") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
