// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AaaaRecordPool extends pulumi.CustomResource {
    /**
     * Get an existing AaaaRecordPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AaaaRecordPoolState, opts?: pulumi.CustomResourceOptions): AaaaRecordPool {
        return new AaaaRecordPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'constellix:index/aaaaRecordPool:AaaaRecordPool';

    /**
     * Returns true if the given object is an instance of AaaaRecordPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AaaaRecordPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AaaaRecordPool.__pulumiType;
    }

    public readonly disableFlag!: pulumi.Output<boolean>;
    public readonly failedFlag!: pulumi.Output<boolean>;
    public readonly minAvailableFailover!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly note!: pulumi.Output<string>;
    public readonly numReturn!: pulumi.Output<number>;
    public readonly values!: pulumi.Output<outputs.AaaaRecordPoolValue[]>;

    /**
     * Create a AaaaRecordPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AaaaRecordPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AaaaRecordPoolArgs | AaaaRecordPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AaaaRecordPoolState | undefined;
            resourceInputs["disableFlag"] = state ? state.disableFlag : undefined;
            resourceInputs["failedFlag"] = state ? state.failedFlag : undefined;
            resourceInputs["minAvailableFailover"] = state ? state.minAvailableFailover : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["note"] = state ? state.note : undefined;
            resourceInputs["numReturn"] = state ? state.numReturn : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        } else {
            const args = argsOrState as AaaaRecordPoolArgs | undefined;
            if ((!args || args.minAvailableFailover === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minAvailableFailover'");
            }
            if ((!args || args.numReturn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numReturn'");
            }
            if ((!args || args.values === undefined) && !opts.urn) {
                throw new Error("Missing required property 'values'");
            }
            resourceInputs["disableFlag"] = args ? args.disableFlag : undefined;
            resourceInputs["failedFlag"] = args ? args.failedFlag : undefined;
            resourceInputs["minAvailableFailover"] = args ? args.minAvailableFailover : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["note"] = args ? args.note : undefined;
            resourceInputs["numReturn"] = args ? args.numReturn : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AaaaRecordPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AaaaRecordPool resources.
 */
export interface AaaaRecordPoolState {
    disableFlag?: pulumi.Input<boolean>;
    failedFlag?: pulumi.Input<boolean>;
    minAvailableFailover?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    note?: pulumi.Input<string>;
    numReturn?: pulumi.Input<number>;
    values?: pulumi.Input<pulumi.Input<inputs.AaaaRecordPoolValue>[]>;
}

/**
 * The set of arguments for constructing a AaaaRecordPool resource.
 */
export interface AaaaRecordPoolArgs {
    disableFlag?: pulumi.Input<boolean>;
    failedFlag?: pulumi.Input<boolean>;
    minAvailableFailover: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    note?: pulumi.Input<string>;
    numReturn: pulumi.Input<number>;
    values: pulumi.Input<pulumi.Input<inputs.AaaaRecordPoolValue>[]>;
}
