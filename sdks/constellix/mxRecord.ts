// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MxRecord extends pulumi.CustomResource {
    /**
     * Get an existing MxRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MxRecordState, opts?: pulumi.CustomResourceOptions): MxRecord {
        return new MxRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'constellix:index/mxRecord:MxRecord';

    /**
     * Returns true if the given object is an instance of MxRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MxRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MxRecord.__pulumiType;
    }

    public readonly domainId!: pulumi.Output<string>;
    public readonly gtdRegion!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly noanswer!: pulumi.Output<boolean>;
    public readonly note!: pulumi.Output<string>;
    public readonly roundrobins!: pulumi.Output<outputs.MxRecordRoundrobin[]>;
    public readonly sourceType!: pulumi.Output<string>;
    public readonly ttl!: pulumi.Output<number>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a MxRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MxRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MxRecordArgs | MxRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MxRecordState | undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["gtdRegion"] = state ? state.gtdRegion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noanswer"] = state ? state.noanswer : undefined;
            resourceInputs["note"] = state ? state.note : undefined;
            resourceInputs["roundrobins"] = state ? state.roundrobins : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as MxRecordArgs | undefined;
            if ((!args || args.domainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainId'");
            }
            if ((!args || args.roundrobins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roundrobins'");
            }
            if ((!args || args.sourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            resourceInputs["domainId"] = args ? args.domainId : undefined;
            resourceInputs["gtdRegion"] = args ? args.gtdRegion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noanswer"] = args ? args.noanswer : undefined;
            resourceInputs["note"] = args ? args.note : undefined;
            resourceInputs["roundrobins"] = args ? args.roundrobins : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MxRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MxRecord resources.
 */
export interface MxRecordState {
    domainId?: pulumi.Input<string>;
    gtdRegion?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    noanswer?: pulumi.Input<boolean>;
    note?: pulumi.Input<string>;
    roundrobins?: pulumi.Input<pulumi.Input<inputs.MxRecordRoundrobin>[]>;
    sourceType?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MxRecord resource.
 */
export interface MxRecordArgs {
    domainId: pulumi.Input<string>;
    gtdRegion?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    noanswer?: pulumi.Input<boolean>;
    note?: pulumi.Input<string>;
    roundrobins: pulumi.Input<pulumi.Input<inputs.MxRecordRoundrobin>[]>;
    sourceType: pulumi.Input<string>;
    ttl: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}
