// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class HttpCheck extends pulumi.CustomResource {
    /**
     * Get an existing HttpCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HttpCheckState, opts?: pulumi.CustomResourceOptions): HttpCheck {
        return new HttpCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'constellix:index/httpCheck:HttpCheck';

    /**
     * Returns true if the given object is an instance of HttpCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HttpCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HttpCheck.__pulumiType;
    }

    public readonly checkSites!: pulumi.Output<number[]>;
    public readonly expectedStatusCode!: pulumi.Output<number>;
    public readonly fqdn!: pulumi.Output<string>;
    public readonly host!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<string>;
    public readonly intervalPolicy!: pulumi.Output<string>;
    public readonly ipVersion!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationGroups!: pulumi.Output<number[]>;
    public readonly notificationReportTimeout!: pulumi.Output<number>;
    public readonly path!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly protocolType!: pulumi.Output<string>;
    public readonly searchString!: pulumi.Output<string>;
    public readonly verificationPolicy!: pulumi.Output<string>;

    /**
     * Create a HttpCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HttpCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HttpCheckArgs | HttpCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HttpCheckState | undefined;
            resourceInputs["checkSites"] = state ? state.checkSites : undefined;
            resourceInputs["expectedStatusCode"] = state ? state.expectedStatusCode : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["intervalPolicy"] = state ? state.intervalPolicy : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationGroups"] = state ? state.notificationGroups : undefined;
            resourceInputs["notificationReportTimeout"] = state ? state.notificationReportTimeout : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocolType"] = state ? state.protocolType : undefined;
            resourceInputs["searchString"] = state ? state.searchString : undefined;
            resourceInputs["verificationPolicy"] = state ? state.verificationPolicy : undefined;
        } else {
            const args = argsOrState as HttpCheckArgs | undefined;
            if ((!args || args.checkSites === undefined) && !opts.urn) {
                throw new Error("Missing required property 'checkSites'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.ipVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipVersion'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocolType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolType'");
            }
            resourceInputs["checkSites"] = args ? args.checkSites : undefined;
            resourceInputs["expectedStatusCode"] = args ? args.expectedStatusCode : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["intervalPolicy"] = args ? args.intervalPolicy : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationGroups"] = args ? args.notificationGroups : undefined;
            resourceInputs["notificationReportTimeout"] = args ? args.notificationReportTimeout : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocolType"] = args ? args.protocolType : undefined;
            resourceInputs["searchString"] = args ? args.searchString : undefined;
            resourceInputs["verificationPolicy"] = args ? args.verificationPolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HttpCheck.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HttpCheck resources.
 */
export interface HttpCheckState {
    checkSites?: pulumi.Input<pulumi.Input<number>[]>;
    expectedStatusCode?: pulumi.Input<number>;
    fqdn?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    intervalPolicy?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationGroups?: pulumi.Input<pulumi.Input<number>[]>;
    notificationReportTimeout?: pulumi.Input<number>;
    path?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocolType?: pulumi.Input<string>;
    searchString?: pulumi.Input<string>;
    verificationPolicy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HttpCheck resource.
 */
export interface HttpCheckArgs {
    checkSites: pulumi.Input<pulumi.Input<number>[]>;
    expectedStatusCode?: pulumi.Input<number>;
    fqdn?: pulumi.Input<string>;
    host: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    intervalPolicy?: pulumi.Input<string>;
    ipVersion: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationGroups?: pulumi.Input<pulumi.Input<number>[]>;
    notificationReportTimeout?: pulumi.Input<number>;
    path?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    protocolType: pulumi.Input<string>;
    searchString?: pulumi.Input<string>;
    verificationPolicy?: pulumi.Input<string>;
}
