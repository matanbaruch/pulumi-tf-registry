// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertV2SubComponent {
    accountIdsToQueryOns?: number[];
    columns?: outputs.AlertV2SubComponentColumn[];
    filterMust?: string;
    filterMustNot?: string;
    groupByAggregationFields?: string[];
    operation?: string;
    queryString: string;
    severityThresholdTiers: outputs.AlertV2SubComponentSeverityThresholdTier[];
    shouldQueryOnAllAccounts?: boolean;
    valueAggregationField?: string;
    valueAggregationType: string;
}

export interface AlertV2SubComponentColumn {
    fieldName?: string;
    regex?: string;
    sort?: string;
}

export interface AlertV2SubComponentSeverityThresholdTier {
    severity: string;
    threshold: number;
}

export interface AuthenticationGroupsAuthenticationGroup {
    group: string;
    userRole: string;
}

export interface DropFilterFieldCondition {
    fieldName: string;
    value: string;
}

export interface EndpointBigpanda {
    apiToken: string;
    appKey: string;
}

export interface EndpointCustom {
    bodyTemplate?: string;
    headers?: string;
    method: string;
    url: string;
}

export interface EndpointDatadog {
    apiKey: string;
}

export interface EndpointMicrosoftteams {
    url: string;
}

export interface EndpointOpsgenie {
    apiKey: string;
}

export interface EndpointPagerduty {
    serviceKey: string;
}

export interface EndpointServicenow {
    password: string;
    url: string;
    username: string;
}

export interface EndpointSlack {
    url: string;
}

export interface EndpointVictorops {
    messageType: string;
    routingKey: string;
    serviceApiKey: string;
}

export interface GetAlertV2SubComponent {
    accountIdsToQueryOns: number[];
    columns: outputs.GetAlertV2SubComponentColumn[];
    filterMust: string;
    filterMustNot: string;
    groupByAggregationFields: string[];
    operation: string;
    queryString: string;
    severityThresholdTiers: outputs.GetAlertV2SubComponentSeverityThresholdTier[];
    shouldQueryOnAllAccounts: boolean;
    valueAggregationField: string;
    valueAggregationType: string;
}

export interface GetAlertV2SubComponentColumn {
    fieldName: string;
    regex: string;
    sort: string;
}

export interface GetAlertV2SubComponentSeverityThresholdTier {
    severity: string;
    threshold: number;
}

export interface GetAuthenticationGroupsAuthenticationGroup {
    group: string;
    userRole: string;
}

export interface GetDropFilterFieldCondition {
    fieldName: string;
    value: string;
}

export interface GetKibanaObjectTimeouts {
    read?: string;
}

export interface GetMetricsAccountTimeouts {
    read?: string;
}

export interface GetRestoreLogsTimeouts {
    read?: string;
}

export interface GetSubaccountTimeouts {
    read?: string;
}

export interface GrafanaAlertRuleData {
    datasourceUid: string;
    model: string;
    queryType?: string;
    refId: string;
    relativeTimeRange: outputs.GrafanaAlertRuleDataRelativeTimeRange;
}

export interface GrafanaAlertRuleDataRelativeTimeRange {
    from: number;
    to: number;
}

export interface GrafanaContactPointEmail {
    addresses: string[];
    disableResolveMessage?: boolean;
    message?: string;
    settings?: {[key: string]: string};
    singleEmail?: boolean;
    uid: string;
}

export interface GrafanaContactPointGooglechat {
    disableResolveMessage?: boolean;
    message?: string;
    settings?: {[key: string]: string};
    uid: string;
    url: string;
}

export interface GrafanaContactPointOpsgeny {
    apiKey: string;
    apiUrl?: string;
    autoClose?: boolean;
    disableResolveMessage?: boolean;
    overridePriority?: boolean;
    sendTagsAs?: string;
    settings?: {[key: string]: string};
    uid: string;
}

export interface GrafanaContactPointPagerduty {
    class?: string;
    component?: string;
    disableResolveMessage?: boolean;
    group?: string;
    integrationKey: string;
    settings?: {[key: string]: string};
    severity?: string;
    summary?: string;
    uid: string;
}

export interface GrafanaContactPointSlack {
    disableResolveMessage?: boolean;
    endpointUrl?: string;
    mentionChannel?: string;
    mentionGroups?: string;
    mentionUsers?: string;
    recipient: string;
    settings?: {[key: string]: string};
    text?: string;
    title?: string;
    token?: string;
    uid: string;
    url?: string;
    username?: string;
}

export interface GrafanaContactPointTeam {
    disableResolveMessage?: boolean;
    message?: string;
    settings?: {[key: string]: string};
    uid: string;
    url: string;
}

export interface GrafanaContactPointVictorop {
    disableResolveMessage?: boolean;
    messageType?: string;
    settings?: {[key: string]: string};
    uid: string;
    url: string;
}

export interface GrafanaContactPointWebhook {
    disableResolveMessage?: boolean;
    httpMethod?: string;
    maxAlerts?: number;
    password?: string;
    settings?: {[key: string]: string};
    uid: string;
    url: string;
    username?: string;
}

export interface GrafanaNotificationPolicyPolicy {
    contactPoint: string;
    continue?: boolean;
    groupBies?: string[];
    groupInterval?: string;
    groupWait?: string;
    matchers?: outputs.GrafanaNotificationPolicyPolicyMatcher[];
    muteTimings?: string[];
    policies?: outputs.GrafanaNotificationPolicyPolicyPolicy[];
    repeatInterval?: string;
}

export interface GrafanaNotificationPolicyPolicyMatcher {
    label: string;
    match: string;
    value: string;
}

export interface GrafanaNotificationPolicyPolicyPolicy {
    contactPoint: string;
    continue?: boolean;
    groupBies?: string[];
    groupInterval?: string;
    groupWait?: string;
    matchers?: outputs.GrafanaNotificationPolicyPolicyPolicyMatcher[];
    muteTimings?: string[];
    policies?: outputs.GrafanaNotificationPolicyPolicyPolicyPolicy[];
    repeatInterval?: string;
}

export interface GrafanaNotificationPolicyPolicyPolicyMatcher {
    label: string;
    match: string;
    value: string;
}

export interface GrafanaNotificationPolicyPolicyPolicyPolicy {
    contactPoint: string;
    continue?: boolean;
    groupBies?: string[];
    groupInterval?: string;
    groupWait?: string;
    matchers?: outputs.GrafanaNotificationPolicyPolicyPolicyPolicyMatcher[];
    muteTimings?: string[];
    policies?: outputs.GrafanaNotificationPolicyPolicyPolicyPolicyPolicy[];
    repeatInterval?: string;
}

export interface GrafanaNotificationPolicyPolicyPolicyPolicyMatcher {
    label: string;
    match: string;
    value: string;
}

export interface GrafanaNotificationPolicyPolicyPolicyPolicyPolicy {
    contactPoint: string;
    continue?: boolean;
    groupBies: string[];
    groupInterval?: string;
    groupWait?: string;
    matchers?: outputs.GrafanaNotificationPolicyPolicyPolicyPolicyPolicyMatcher[];
    muteTimings?: string[];
    repeatInterval?: string;
}

export interface GrafanaNotificationPolicyPolicyPolicyPolicyPolicyMatcher {
    label: string;
    match: string;
    value: string;
}

