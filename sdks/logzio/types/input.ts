// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertV2SubComponent {
    accountIdsToQueryOns?: pulumi.Input<pulumi.Input<number>[]>;
    columns?: pulumi.Input<pulumi.Input<inputs.AlertV2SubComponentColumn>[]>;
    filterMust?: pulumi.Input<string>;
    filterMustNot?: pulumi.Input<string>;
    groupByAggregationFields?: pulumi.Input<pulumi.Input<string>[]>;
    operation?: pulumi.Input<string>;
    queryString: pulumi.Input<string>;
    severityThresholdTiers: pulumi.Input<pulumi.Input<inputs.AlertV2SubComponentSeverityThresholdTier>[]>;
    shouldQueryOnAllAccounts?: pulumi.Input<boolean>;
    valueAggregationField?: pulumi.Input<string>;
    valueAggregationType: pulumi.Input<string>;
}

export interface AlertV2SubComponentColumn {
    fieldName?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
    sort?: pulumi.Input<string>;
}

export interface AlertV2SubComponentSeverityThresholdTier {
    severity: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
}

export interface AuthenticationGroupsAuthenticationGroup {
    group: pulumi.Input<string>;
    userRole: pulumi.Input<string>;
}

export interface DropFilterFieldCondition {
    fieldName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EndpointBigpanda {
    apiToken: pulumi.Input<string>;
    appKey: pulumi.Input<string>;
}

export interface EndpointCustom {
    bodyTemplate?: pulumi.Input<string>;
    headers?: pulumi.Input<string>;
    method: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface EndpointDatadog {
    apiKey: pulumi.Input<string>;
}

export interface EndpointMicrosoftteams {
    url: pulumi.Input<string>;
}

export interface EndpointOpsgenie {
    apiKey: pulumi.Input<string>;
}

export interface EndpointPagerduty {
    serviceKey: pulumi.Input<string>;
}

export interface EndpointServicenow {
    password: pulumi.Input<string>;
    url: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface EndpointSlack {
    url: pulumi.Input<string>;
}

export interface EndpointVictorops {
    messageType: pulumi.Input<string>;
    routingKey: pulumi.Input<string>;
    serviceApiKey: pulumi.Input<string>;
}

export interface GetDropFilterFieldCondition {
    fieldName?: string;
    value?: string;
}

export interface GetDropFilterFieldConditionArgs {
    fieldName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetKibanaObjectTimeouts {
    read?: string;
}

export interface GetKibanaObjectTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetMetricsAccountTimeouts {
    read?: string;
}

export interface GetMetricsAccountTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetRestoreLogsTimeouts {
    read?: string;
}

export interface GetRestoreLogsTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetSubaccountTimeouts {
    read?: string;
}

export interface GetSubaccountTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GrafanaAlertRuleData {
    datasourceUid: pulumi.Input<string>;
    model: pulumi.Input<string>;
    queryType?: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    relativeTimeRange: pulumi.Input<inputs.GrafanaAlertRuleDataRelativeTimeRange>;
}

export interface GrafanaAlertRuleDataRelativeTimeRange {
    from: pulumi.Input<number>;
    to: pulumi.Input<number>;
}

export interface GrafanaContactPointEmail {
    addresses: pulumi.Input<pulumi.Input<string>[]>;
    disableResolveMessage?: pulumi.Input<boolean>;
    message?: pulumi.Input<string>;
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    singleEmail?: pulumi.Input<boolean>;
    uid?: pulumi.Input<string>;
}

export interface GrafanaContactPointGooglechat {
    disableResolveMessage?: pulumi.Input<boolean>;
    message?: pulumi.Input<string>;
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    uid?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface GrafanaContactPointOpsgeny {
    apiKey: pulumi.Input<string>;
    apiUrl?: pulumi.Input<string>;
    autoClose?: pulumi.Input<boolean>;
    disableResolveMessage?: pulumi.Input<boolean>;
    overridePriority?: pulumi.Input<boolean>;
    sendTagsAs?: pulumi.Input<string>;
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    uid?: pulumi.Input<string>;
}

export interface GrafanaContactPointPagerduty {
    class?: pulumi.Input<string>;
    component?: pulumi.Input<string>;
    disableResolveMessage?: pulumi.Input<boolean>;
    group?: pulumi.Input<string>;
    integrationKey: pulumi.Input<string>;
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    severity?: pulumi.Input<string>;
    summary?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
}

export interface GrafanaContactPointSlack {
    disableResolveMessage?: pulumi.Input<boolean>;
    endpointUrl?: pulumi.Input<string>;
    mentionChannel?: pulumi.Input<string>;
    mentionGroups?: pulumi.Input<string>;
    mentionUsers?: pulumi.Input<string>;
    recipient: pulumi.Input<string>;
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    text?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface GrafanaContactPointTeam {
    disableResolveMessage?: pulumi.Input<boolean>;
    message?: pulumi.Input<string>;
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    uid?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface GrafanaContactPointVictorop {
    disableResolveMessage?: pulumi.Input<boolean>;
    messageType?: pulumi.Input<string>;
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    uid?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface GrafanaContactPointWebhook {
    disableResolveMessage?: pulumi.Input<boolean>;
    httpMethod?: pulumi.Input<string>;
    maxAlerts?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    uid?: pulumi.Input<string>;
    url: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface GrafanaNotificationPolicyPolicy {
    contactPoint: pulumi.Input<string>;
    continue?: pulumi.Input<boolean>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    groupInterval?: pulumi.Input<string>;
    groupWait?: pulumi.Input<string>;
    matchers?: pulumi.Input<pulumi.Input<inputs.GrafanaNotificationPolicyPolicyMatcher>[]>;
    muteTimings?: pulumi.Input<pulumi.Input<string>[]>;
    policies?: pulumi.Input<pulumi.Input<inputs.GrafanaNotificationPolicyPolicyPolicy>[]>;
    repeatInterval?: pulumi.Input<string>;
}

export interface GrafanaNotificationPolicyPolicyMatcher {
    label: pulumi.Input<string>;
    match: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface GrafanaNotificationPolicyPolicyPolicy {
    contactPoint: pulumi.Input<string>;
    continue?: pulumi.Input<boolean>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    groupInterval?: pulumi.Input<string>;
    groupWait?: pulumi.Input<string>;
    matchers?: pulumi.Input<pulumi.Input<inputs.GrafanaNotificationPolicyPolicyPolicyMatcher>[]>;
    muteTimings?: pulumi.Input<pulumi.Input<string>[]>;
    policies?: pulumi.Input<pulumi.Input<inputs.GrafanaNotificationPolicyPolicyPolicyPolicy>[]>;
    repeatInterval?: pulumi.Input<string>;
}

export interface GrafanaNotificationPolicyPolicyPolicyMatcher {
    label: pulumi.Input<string>;
    match: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface GrafanaNotificationPolicyPolicyPolicyPolicy {
    contactPoint: pulumi.Input<string>;
    continue?: pulumi.Input<boolean>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    groupInterval?: pulumi.Input<string>;
    groupWait?: pulumi.Input<string>;
    matchers?: pulumi.Input<pulumi.Input<inputs.GrafanaNotificationPolicyPolicyPolicyPolicyMatcher>[]>;
    muteTimings?: pulumi.Input<pulumi.Input<string>[]>;
    policies?: pulumi.Input<pulumi.Input<inputs.GrafanaNotificationPolicyPolicyPolicyPolicyPolicy>[]>;
    repeatInterval?: pulumi.Input<string>;
}

export interface GrafanaNotificationPolicyPolicyPolicyPolicyMatcher {
    label: pulumi.Input<string>;
    match: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface GrafanaNotificationPolicyPolicyPolicyPolicyPolicy {
    contactPoint: pulumi.Input<string>;
    continue?: pulumi.Input<boolean>;
    groupBies: pulumi.Input<pulumi.Input<string>[]>;
    groupInterval?: pulumi.Input<string>;
    groupWait?: pulumi.Input<string>;
    matchers?: pulumi.Input<pulumi.Input<inputs.GrafanaNotificationPolicyPolicyPolicyPolicyPolicyMatcher>[]>;
    muteTimings?: pulumi.Input<pulumi.Input<string>[]>;
    repeatInterval?: pulumi.Input<string>;
}

export interface GrafanaNotificationPolicyPolicyPolicyPolicyPolicyMatcher {
    label: pulumi.Input<string>;
    match: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
