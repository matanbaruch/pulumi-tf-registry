// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MetricsAccount extends pulumi.CustomResource {
    /**
     * Get an existing MetricsAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricsAccountState, opts?: pulumi.CustomResourceOptions): MetricsAccount {
        return new MetricsAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logzio:index/metricsAccount:MetricsAccount';

    /**
     * Returns true if the given object is an instance of MetricsAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricsAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricsAccount.__pulumiType;
    }

    public /*out*/ readonly accountId!: pulumi.Output<number>;
    public readonly accountName!: pulumi.Output<string>;
    public /*out*/ readonly accountToken!: pulumi.Output<string>;
    public readonly authorizedAccounts!: pulumi.Output<number[]>;
    public readonly email!: pulumi.Output<string>;
    public readonly planUts!: pulumi.Output<number | undefined>;

    /**
     * Create a MetricsAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricsAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricsAccountArgs | MetricsAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricsAccountState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["accountToken"] = state ? state.accountToken : undefined;
            resourceInputs["authorizedAccounts"] = state ? state.authorizedAccounts : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["planUts"] = state ? state.planUts : undefined;
        } else {
            const args = argsOrState as MetricsAccountArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["authorizedAccounts"] = args ? args.authorizedAccounts : undefined;
            resourceInputs["email"] = args?.email ? pulumi.secret(args.email) : undefined;
            resourceInputs["planUts"] = args ? args.planUts : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["accountToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accountToken", "email"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MetricsAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MetricsAccount resources.
 */
export interface MetricsAccountState {
    accountId?: pulumi.Input<number>;
    accountName?: pulumi.Input<string>;
    accountToken?: pulumi.Input<string>;
    authorizedAccounts?: pulumi.Input<pulumi.Input<number>[]>;
    email?: pulumi.Input<string>;
    planUts?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MetricsAccount resource.
 */
export interface MetricsAccountArgs {
    accountName?: pulumi.Input<string>;
    authorizedAccounts?: pulumi.Input<pulumi.Input<number>[]>;
    email: pulumi.Input<string>;
    planUts?: pulumi.Input<number>;
}
