// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class S3Fetcher extends pulumi.CustomResource {
    /**
     * Get an existing S3Fetcher resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3FetcherState, opts?: pulumi.CustomResourceOptions): S3Fetcher {
        return new S3Fetcher(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logzio:index/s3Fetcher:S3Fetcher';

    /**
     * Returns true if the given object is an instance of S3Fetcher.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3Fetcher {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3Fetcher.__pulumiType;
    }

    public readonly active!: pulumi.Output<boolean>;
    public readonly addS3ObjectKeyAsLogField!: pulumi.Output<boolean | undefined>;
    public readonly awsAccessKey!: pulumi.Output<string | undefined>;
    public readonly awsArn!: pulumi.Output<string | undefined>;
    public readonly awsRegion!: pulumi.Output<string>;
    public readonly awsSecretKey!: pulumi.Output<string | undefined>;
    public readonly bucketName!: pulumi.Output<string>;
    public /*out*/ readonly fetcherId!: pulumi.Output<number>;
    public readonly logsType!: pulumi.Output<string>;
    public readonly prefix!: pulumi.Output<string>;

    /**
     * Create a S3Fetcher resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3FetcherArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3FetcherArgs | S3FetcherState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3FetcherState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["addS3ObjectKeyAsLogField"] = state ? state.addS3ObjectKeyAsLogField : undefined;
            resourceInputs["awsAccessKey"] = state ? state.awsAccessKey : undefined;
            resourceInputs["awsArn"] = state ? state.awsArn : undefined;
            resourceInputs["awsRegion"] = state ? state.awsRegion : undefined;
            resourceInputs["awsSecretKey"] = state ? state.awsSecretKey : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["fetcherId"] = state ? state.fetcherId : undefined;
            resourceInputs["logsType"] = state ? state.logsType : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
        } else {
            const args = argsOrState as S3FetcherArgs | undefined;
            if ((!args || args.active === undefined) && !opts.urn) {
                throw new Error("Missing required property 'active'");
            }
            if ((!args || args.awsRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsRegion'");
            }
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.logsType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logsType'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["addS3ObjectKeyAsLogField"] = args ? args.addS3ObjectKeyAsLogField : undefined;
            resourceInputs["awsAccessKey"] = args?.awsAccessKey ? pulumi.secret(args.awsAccessKey) : undefined;
            resourceInputs["awsArn"] = args?.awsArn ? pulumi.secret(args.awsArn) : undefined;
            resourceInputs["awsRegion"] = args ? args.awsRegion : undefined;
            resourceInputs["awsSecretKey"] = args?.awsSecretKey ? pulumi.secret(args.awsSecretKey) : undefined;
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["logsType"] = args ? args.logsType : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["fetcherId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["awsAccessKey", "awsArn", "awsSecretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(S3Fetcher.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3Fetcher resources.
 */
export interface S3FetcherState {
    active?: pulumi.Input<boolean>;
    addS3ObjectKeyAsLogField?: pulumi.Input<boolean>;
    awsAccessKey?: pulumi.Input<string>;
    awsArn?: pulumi.Input<string>;
    awsRegion?: pulumi.Input<string>;
    awsSecretKey?: pulumi.Input<string>;
    bucketName?: pulumi.Input<string>;
    fetcherId?: pulumi.Input<number>;
    logsType?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a S3Fetcher resource.
 */
export interface S3FetcherArgs {
    active: pulumi.Input<boolean>;
    addS3ObjectKeyAsLogField?: pulumi.Input<boolean>;
    awsAccessKey?: pulumi.Input<string>;
    awsArn?: pulumi.Input<string>;
    awsRegion: pulumi.Input<string>;
    awsSecretKey?: pulumi.Input<string>;
    bucketName: pulumi.Input<string>;
    logsType: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}
