// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GrafanaNotificationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing GrafanaNotificationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GrafanaNotificationPolicyState, opts?: pulumi.CustomResourceOptions): GrafanaNotificationPolicy {
        return new GrafanaNotificationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logzio:index/grafanaNotificationPolicy:GrafanaNotificationPolicy';

    /**
     * Returns true if the given object is an instance of GrafanaNotificationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GrafanaNotificationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GrafanaNotificationPolicy.__pulumiType;
    }

    public readonly contactPoint!: pulumi.Output<string>;
    public readonly groupBies!: pulumi.Output<string[]>;
    public readonly groupInterval!: pulumi.Output<string | undefined>;
    public readonly groupWait!: pulumi.Output<string | undefined>;
    public readonly policies!: pulumi.Output<outputs.GrafanaNotificationPolicyPolicy[] | undefined>;
    public readonly repeatInterval!: pulumi.Output<string | undefined>;

    /**
     * Create a GrafanaNotificationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GrafanaNotificationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GrafanaNotificationPolicyArgs | GrafanaNotificationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GrafanaNotificationPolicyState | undefined;
            resourceInputs["contactPoint"] = state ? state.contactPoint : undefined;
            resourceInputs["groupBies"] = state ? state.groupBies : undefined;
            resourceInputs["groupInterval"] = state ? state.groupInterval : undefined;
            resourceInputs["groupWait"] = state ? state.groupWait : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["repeatInterval"] = state ? state.repeatInterval : undefined;
        } else {
            const args = argsOrState as GrafanaNotificationPolicyArgs | undefined;
            if ((!args || args.contactPoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contactPoint'");
            }
            if ((!args || args.groupBies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupBies'");
            }
            resourceInputs["contactPoint"] = args ? args.contactPoint : undefined;
            resourceInputs["groupBies"] = args ? args.groupBies : undefined;
            resourceInputs["groupInterval"] = args ? args.groupInterval : undefined;
            resourceInputs["groupWait"] = args ? args.groupWait : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["repeatInterval"] = args ? args.repeatInterval : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GrafanaNotificationPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GrafanaNotificationPolicy resources.
 */
export interface GrafanaNotificationPolicyState {
    contactPoint?: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    groupInterval?: pulumi.Input<string>;
    groupWait?: pulumi.Input<string>;
    policies?: pulumi.Input<pulumi.Input<inputs.GrafanaNotificationPolicyPolicy>[]>;
    repeatInterval?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GrafanaNotificationPolicy resource.
 */
export interface GrafanaNotificationPolicyArgs {
    contactPoint: pulumi.Input<string>;
    groupBies: pulumi.Input<pulumi.Input<string>[]>;
    groupInterval?: pulumi.Input<string>;
    groupWait?: pulumi.Input<string>;
    policies?: pulumi.Input<pulumi.Input<inputs.GrafanaNotificationPolicyPolicy>[]>;
    repeatInterval?: pulumi.Input<string>;
}
