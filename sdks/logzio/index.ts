// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertV2Args, AlertV2State } from "./alertV2";
export type AlertV2 = import("./alertV2").AlertV2;
export const AlertV2: typeof import("./alertV2").AlertV2 = null as any;
utilities.lazyLoad(exports, ["AlertV2"], () => require("./alertV2"));

export { ArchiveLogsArgs, ArchiveLogsState } from "./archiveLogs";
export type ArchiveLogs = import("./archiveLogs").ArchiveLogs;
export const ArchiveLogs: typeof import("./archiveLogs").ArchiveLogs = null as any;
utilities.lazyLoad(exports, ["ArchiveLogs"], () => require("./archiveLogs"));

export { AuthenticationGroupsArgs, AuthenticationGroupsState } from "./authenticationGroups";
export type AuthenticationGroups = import("./authenticationGroups").AuthenticationGroups;
export const AuthenticationGroups: typeof import("./authenticationGroups").AuthenticationGroups = null as any;
utilities.lazyLoad(exports, ["AuthenticationGroups"], () => require("./authenticationGroups"));

export { DropFilterArgs, DropFilterState } from "./dropFilter";
export type DropFilter = import("./dropFilter").DropFilter;
export const DropFilter: typeof import("./dropFilter").DropFilter = null as any;
utilities.lazyLoad(exports, ["DropFilter"], () => require("./dropFilter"));

export { EndpointArgs, EndpointState } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));

export { GetAlertV2Args, GetAlertV2Result, GetAlertV2OutputArgs } from "./getAlertV2";
export const getAlertV2: typeof import("./getAlertV2").getAlertV2 = null as any;
export const getAlertV2Output: typeof import("./getAlertV2").getAlertV2Output = null as any;
utilities.lazyLoad(exports, ["getAlertV2","getAlertV2Output"], () => require("./getAlertV2"));

export { GetArchiveLogsArgs, GetArchiveLogsResult, GetArchiveLogsOutputArgs } from "./getArchiveLogs";
export const getArchiveLogs: typeof import("./getArchiveLogs").getArchiveLogs = null as any;
export const getArchiveLogsOutput: typeof import("./getArchiveLogs").getArchiveLogsOutput = null as any;
utilities.lazyLoad(exports, ["getArchiveLogs","getArchiveLogsOutput"], () => require("./getArchiveLogs"));

export { GetAuthenticationGroupsArgs, GetAuthenticationGroupsResult, GetAuthenticationGroupsOutputArgs } from "./getAuthenticationGroups";
export const getAuthenticationGroups: typeof import("./getAuthenticationGroups").getAuthenticationGroups = null as any;
export const getAuthenticationGroupsOutput: typeof import("./getAuthenticationGroups").getAuthenticationGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationGroups","getAuthenticationGroupsOutput"], () => require("./getAuthenticationGroups"));

export { GetDropFilterArgs, GetDropFilterResult, GetDropFilterOutputArgs } from "./getDropFilter";
export const getDropFilter: typeof import("./getDropFilter").getDropFilter = null as any;
export const getDropFilterOutput: typeof import("./getDropFilter").getDropFilterOutput = null as any;
utilities.lazyLoad(exports, ["getDropFilter","getDropFilterOutput"], () => require("./getDropFilter"));

export { GetEndpointArgs, GetEndpointResult, GetEndpointOutputArgs } from "./getEndpoint";
export const getEndpoint: typeof import("./getEndpoint").getEndpoint = null as any;
export const getEndpointOutput: typeof import("./getEndpoint").getEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEndpoint","getEndpointOutput"], () => require("./getEndpoint"));

export { GetGrafanaDashboardArgs, GetGrafanaDashboardResult, GetGrafanaDashboardOutputArgs } from "./getGrafanaDashboard";
export const getGrafanaDashboard: typeof import("./getGrafanaDashboard").getGrafanaDashboard = null as any;
export const getGrafanaDashboardOutput: typeof import("./getGrafanaDashboard").getGrafanaDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getGrafanaDashboard","getGrafanaDashboardOutput"], () => require("./getGrafanaDashboard"));

export { GetGrafanaFolderArgs, GetGrafanaFolderResult, GetGrafanaFolderOutputArgs } from "./getGrafanaFolder";
export const getGrafanaFolder: typeof import("./getGrafanaFolder").getGrafanaFolder = null as any;
export const getGrafanaFolderOutput: typeof import("./getGrafanaFolder").getGrafanaFolderOutput = null as any;
utilities.lazyLoad(exports, ["getGrafanaFolder","getGrafanaFolderOutput"], () => require("./getGrafanaFolder"));

export { GetKibanaObjectArgs, GetKibanaObjectResult, GetKibanaObjectOutputArgs } from "./getKibanaObject";
export const getKibanaObject: typeof import("./getKibanaObject").getKibanaObject = null as any;
export const getKibanaObjectOutput: typeof import("./getKibanaObject").getKibanaObjectOutput = null as any;
utilities.lazyLoad(exports, ["getKibanaObject","getKibanaObjectOutput"], () => require("./getKibanaObject"));

export { GetLogShippingTokenArgs, GetLogShippingTokenResult, GetLogShippingTokenOutputArgs } from "./getLogShippingToken";
export const getLogShippingToken: typeof import("./getLogShippingToken").getLogShippingToken = null as any;
export const getLogShippingTokenOutput: typeof import("./getLogShippingToken").getLogShippingTokenOutput = null as any;
utilities.lazyLoad(exports, ["getLogShippingToken","getLogShippingTokenOutput"], () => require("./getLogShippingToken"));

export { GetMetricsAccountArgs, GetMetricsAccountResult, GetMetricsAccountOutputArgs } from "./getMetricsAccount";
export const getMetricsAccount: typeof import("./getMetricsAccount").getMetricsAccount = null as any;
export const getMetricsAccountOutput: typeof import("./getMetricsAccount").getMetricsAccountOutput = null as any;
utilities.lazyLoad(exports, ["getMetricsAccount","getMetricsAccountOutput"], () => require("./getMetricsAccount"));

export { GetRestoreLogsArgs, GetRestoreLogsResult, GetRestoreLogsOutputArgs } from "./getRestoreLogs";
export const getRestoreLogs: typeof import("./getRestoreLogs").getRestoreLogs = null as any;
export const getRestoreLogsOutput: typeof import("./getRestoreLogs").getRestoreLogsOutput = null as any;
utilities.lazyLoad(exports, ["getRestoreLogs","getRestoreLogsOutput"], () => require("./getRestoreLogs"));

export { GetS3FetcherArgs, GetS3FetcherResult, GetS3FetcherOutputArgs } from "./getS3Fetcher";
export const getS3Fetcher: typeof import("./getS3Fetcher").getS3Fetcher = null as any;
export const getS3FetcherOutput: typeof import("./getS3Fetcher").getS3FetcherOutput = null as any;
utilities.lazyLoad(exports, ["getS3Fetcher","getS3FetcherOutput"], () => require("./getS3Fetcher"));

export { GetSubaccountArgs, GetSubaccountResult, GetSubaccountOutputArgs } from "./getSubaccount";
export const getSubaccount: typeof import("./getSubaccount").getSubaccount = null as any;
export const getSubaccountOutput: typeof import("./getSubaccount").getSubaccountOutput = null as any;
utilities.lazyLoad(exports, ["getSubaccount","getSubaccountOutput"], () => require("./getSubaccount"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GrafanaAlertRuleArgs, GrafanaAlertRuleState } from "./grafanaAlertRule";
export type GrafanaAlertRule = import("./grafanaAlertRule").GrafanaAlertRule;
export const GrafanaAlertRule: typeof import("./grafanaAlertRule").GrafanaAlertRule = null as any;
utilities.lazyLoad(exports, ["GrafanaAlertRule"], () => require("./grafanaAlertRule"));

export { GrafanaContactPointArgs, GrafanaContactPointState } from "./grafanaContactPoint";
export type GrafanaContactPoint = import("./grafanaContactPoint").GrafanaContactPoint;
export const GrafanaContactPoint: typeof import("./grafanaContactPoint").GrafanaContactPoint = null as any;
utilities.lazyLoad(exports, ["GrafanaContactPoint"], () => require("./grafanaContactPoint"));

export { GrafanaDashboardArgs, GrafanaDashboardState } from "./grafanaDashboard";
export type GrafanaDashboard = import("./grafanaDashboard").GrafanaDashboard;
export const GrafanaDashboard: typeof import("./grafanaDashboard").GrafanaDashboard = null as any;
utilities.lazyLoad(exports, ["GrafanaDashboard"], () => require("./grafanaDashboard"));

export { GrafanaFolderArgs, GrafanaFolderState } from "./grafanaFolder";
export type GrafanaFolder = import("./grafanaFolder").GrafanaFolder;
export const GrafanaFolder: typeof import("./grafanaFolder").GrafanaFolder = null as any;
utilities.lazyLoad(exports, ["GrafanaFolder"], () => require("./grafanaFolder"));

export { GrafanaNotificationPolicyArgs, GrafanaNotificationPolicyState } from "./grafanaNotificationPolicy";
export type GrafanaNotificationPolicy = import("./grafanaNotificationPolicy").GrafanaNotificationPolicy;
export const GrafanaNotificationPolicy: typeof import("./grafanaNotificationPolicy").GrafanaNotificationPolicy = null as any;
utilities.lazyLoad(exports, ["GrafanaNotificationPolicy"], () => require("./grafanaNotificationPolicy"));

export { KibanaObjectArgs, KibanaObjectState } from "./kibanaObject";
export type KibanaObject = import("./kibanaObject").KibanaObject;
export const KibanaObject: typeof import("./kibanaObject").KibanaObject = null as any;
utilities.lazyLoad(exports, ["KibanaObject"], () => require("./kibanaObject"));

export { LogShippingTokenArgs, LogShippingTokenState } from "./logShippingToken";
export type LogShippingToken = import("./logShippingToken").LogShippingToken;
export const LogShippingToken: typeof import("./logShippingToken").LogShippingToken = null as any;
utilities.lazyLoad(exports, ["LogShippingToken"], () => require("./logShippingToken"));

export { MetricsAccountArgs, MetricsAccountState } from "./metricsAccount";
export type MetricsAccount = import("./metricsAccount").MetricsAccount;
export const MetricsAccount: typeof import("./metricsAccount").MetricsAccount = null as any;
utilities.lazyLoad(exports, ["MetricsAccount"], () => require("./metricsAccount"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RestoreLogsArgs, RestoreLogsState } from "./restoreLogs";
export type RestoreLogs = import("./restoreLogs").RestoreLogs;
export const RestoreLogs: typeof import("./restoreLogs").RestoreLogs = null as any;
utilities.lazyLoad(exports, ["RestoreLogs"], () => require("./restoreLogs"));

export { S3FetcherArgs, S3FetcherState } from "./s3fetcher";
export type S3Fetcher = import("./s3fetcher").S3Fetcher;
export const S3Fetcher: typeof import("./s3fetcher").S3Fetcher = null as any;
utilities.lazyLoad(exports, ["S3Fetcher"], () => require("./s3fetcher"));

export { SubaccountArgs, SubaccountState } from "./subaccount";
export type Subaccount = import("./subaccount").Subaccount;
export const Subaccount: typeof import("./subaccount").Subaccount = null as any;
utilities.lazyLoad(exports, ["Subaccount"], () => require("./subaccount"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "logzio:index/alertV2:AlertV2":
                return new AlertV2(name, <any>undefined, { urn })
            case "logzio:index/archiveLogs:ArchiveLogs":
                return new ArchiveLogs(name, <any>undefined, { urn })
            case "logzio:index/authenticationGroups:AuthenticationGroups":
                return new AuthenticationGroups(name, <any>undefined, { urn })
            case "logzio:index/dropFilter:DropFilter":
                return new DropFilter(name, <any>undefined, { urn })
            case "logzio:index/endpoint:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "logzio:index/grafanaAlertRule:GrafanaAlertRule":
                return new GrafanaAlertRule(name, <any>undefined, { urn })
            case "logzio:index/grafanaContactPoint:GrafanaContactPoint":
                return new GrafanaContactPoint(name, <any>undefined, { urn })
            case "logzio:index/grafanaDashboard:GrafanaDashboard":
                return new GrafanaDashboard(name, <any>undefined, { urn })
            case "logzio:index/grafanaFolder:GrafanaFolder":
                return new GrafanaFolder(name, <any>undefined, { urn })
            case "logzio:index/grafanaNotificationPolicy:GrafanaNotificationPolicy":
                return new GrafanaNotificationPolicy(name, <any>undefined, { urn })
            case "logzio:index/kibanaObject:KibanaObject":
                return new KibanaObject(name, <any>undefined, { urn })
            case "logzio:index/logShippingToken:LogShippingToken":
                return new LogShippingToken(name, <any>undefined, { urn })
            case "logzio:index/metricsAccount:MetricsAccount":
                return new MetricsAccount(name, <any>undefined, { urn })
            case "logzio:index/restoreLogs:RestoreLogs":
                return new RestoreLogs(name, <any>undefined, { urn })
            case "logzio:index/s3Fetcher:S3Fetcher":
                return new S3Fetcher(name, <any>undefined, { urn })
            case "logzio:index/subaccount:Subaccount":
                return new Subaccount(name, <any>undefined, { urn })
            case "logzio:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("logzio", "index/alertV2", _module)
pulumi.runtime.registerResourceModule("logzio", "index/archiveLogs", _module)
pulumi.runtime.registerResourceModule("logzio", "index/authenticationGroups", _module)
pulumi.runtime.registerResourceModule("logzio", "index/dropFilter", _module)
pulumi.runtime.registerResourceModule("logzio", "index/endpoint", _module)
pulumi.runtime.registerResourceModule("logzio", "index/grafanaAlertRule", _module)
pulumi.runtime.registerResourceModule("logzio", "index/grafanaContactPoint", _module)
pulumi.runtime.registerResourceModule("logzio", "index/grafanaDashboard", _module)
pulumi.runtime.registerResourceModule("logzio", "index/grafanaFolder", _module)
pulumi.runtime.registerResourceModule("logzio", "index/grafanaNotificationPolicy", _module)
pulumi.runtime.registerResourceModule("logzio", "index/kibanaObject", _module)
pulumi.runtime.registerResourceModule("logzio", "index/logShippingToken", _module)
pulumi.runtime.registerResourceModule("logzio", "index/metricsAccount", _module)
pulumi.runtime.registerResourceModule("logzio", "index/restoreLogs", _module)
pulumi.runtime.registerResourceModule("logzio", "index/s3Fetcher", _module)
pulumi.runtime.registerResourceModule("logzio", "index/subaccount", _module)
pulumi.runtime.registerResourceModule("logzio", "index/user", _module)
pulumi.runtime.registerResourcePackage("logzio", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:logzio") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
