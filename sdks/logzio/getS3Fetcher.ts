// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getS3Fetcher(args: GetS3FetcherArgs, opts?: pulumi.InvokeOptions): Promise<GetS3FetcherResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("logzio:index/getS3Fetcher:getS3Fetcher", {
        "awsAccessKey": args.awsAccessKey,
        "awsArn": args.awsArn,
        "fetcherId": args.fetcherId,
        "id": args.id,
        "prefix": args.prefix,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getS3Fetcher.
 */
export interface GetS3FetcherArgs {
    awsAccessKey?: string;
    awsArn?: string;
    fetcherId: number;
    id?: string;
    prefix?: string;
}

/**
 * A collection of values returned by getS3Fetcher.
 */
export interface GetS3FetcherResult {
    readonly active: boolean;
    readonly addS3ObjectKeyAsLogField: boolean;
    readonly awsAccessKey: string;
    readonly awsArn: string;
    readonly awsRegion: string;
    readonly bucketName: string;
    readonly fetcherId: number;
    readonly id: string;
    readonly logsType: string;
    readonly prefix: string;
}
export function getS3FetcherOutput(args: GetS3FetcherOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetS3FetcherResult> {
    return pulumi.output(args).apply((a: any) => getS3Fetcher(a, opts))
}

/**
 * A collection of arguments for invoking getS3Fetcher.
 */
export interface GetS3FetcherOutputArgs {
    awsAccessKey?: pulumi.Input<string>;
    awsArn?: pulumi.Input<string>;
    fetcherId: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}
