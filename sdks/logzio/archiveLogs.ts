// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ArchiveLogs extends pulumi.CustomResource {
    /**
     * Get an existing ArchiveLogs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArchiveLogsState, opts?: pulumi.CustomResourceOptions): ArchiveLogs {
        return new ArchiveLogs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logzio:index/archiveLogs:ArchiveLogs';

    /**
     * Returns true if the given object is an instance of ArchiveLogs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArchiveLogs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArchiveLogs.__pulumiType;
    }

    public /*out*/ readonly archiveId!: pulumi.Output<number>;
    public readonly awsAccessKey!: pulumi.Output<string | undefined>;
    public readonly awsCredentialsType!: pulumi.Output<string | undefined>;
    public readonly awsS3IamCredentialsArn!: pulumi.Output<string | undefined>;
    public readonly awsS3Path!: pulumi.Output<string | undefined>;
    public readonly awsSecretKey!: pulumi.Output<string | undefined>;
    public readonly azureAccountName!: pulumi.Output<string | undefined>;
    public readonly azureBlobPath!: pulumi.Output<string | undefined>;
    public readonly azureClientId!: pulumi.Output<string | undefined>;
    public readonly azureClientSecret!: pulumi.Output<string | undefined>;
    public readonly azureContainerName!: pulumi.Output<string | undefined>;
    public readonly azureTenantId!: pulumi.Output<string | undefined>;
    public readonly compressed!: pulumi.Output<boolean | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly storageType!: pulumi.Output<string>;

    /**
     * Create a ArchiveLogs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArchiveLogsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArchiveLogsArgs | ArchiveLogsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArchiveLogsState | undefined;
            resourceInputs["archiveId"] = state ? state.archiveId : undefined;
            resourceInputs["awsAccessKey"] = state ? state.awsAccessKey : undefined;
            resourceInputs["awsCredentialsType"] = state ? state.awsCredentialsType : undefined;
            resourceInputs["awsS3IamCredentialsArn"] = state ? state.awsS3IamCredentialsArn : undefined;
            resourceInputs["awsS3Path"] = state ? state.awsS3Path : undefined;
            resourceInputs["awsSecretKey"] = state ? state.awsSecretKey : undefined;
            resourceInputs["azureAccountName"] = state ? state.azureAccountName : undefined;
            resourceInputs["azureBlobPath"] = state ? state.azureBlobPath : undefined;
            resourceInputs["azureClientId"] = state ? state.azureClientId : undefined;
            resourceInputs["azureClientSecret"] = state ? state.azureClientSecret : undefined;
            resourceInputs["azureContainerName"] = state ? state.azureContainerName : undefined;
            resourceInputs["azureTenantId"] = state ? state.azureTenantId : undefined;
            resourceInputs["compressed"] = state ? state.compressed : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
        } else {
            const args = argsOrState as ArchiveLogsArgs | undefined;
            if ((!args || args.storageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            resourceInputs["awsAccessKey"] = args?.awsAccessKey ? pulumi.secret(args.awsAccessKey) : undefined;
            resourceInputs["awsCredentialsType"] = args?.awsCredentialsType ? pulumi.secret(args.awsCredentialsType) : undefined;
            resourceInputs["awsS3IamCredentialsArn"] = args?.awsS3IamCredentialsArn ? pulumi.secret(args.awsS3IamCredentialsArn) : undefined;
            resourceInputs["awsS3Path"] = args?.awsS3Path ? pulumi.secret(args.awsS3Path) : undefined;
            resourceInputs["awsSecretKey"] = args?.awsSecretKey ? pulumi.secret(args.awsSecretKey) : undefined;
            resourceInputs["azureAccountName"] = args?.azureAccountName ? pulumi.secret(args.azureAccountName) : undefined;
            resourceInputs["azureBlobPath"] = args?.azureBlobPath ? pulumi.secret(args.azureBlobPath) : undefined;
            resourceInputs["azureClientId"] = args?.azureClientId ? pulumi.secret(args.azureClientId) : undefined;
            resourceInputs["azureClientSecret"] = args?.azureClientSecret ? pulumi.secret(args.azureClientSecret) : undefined;
            resourceInputs["azureContainerName"] = args?.azureContainerName ? pulumi.secret(args.azureContainerName) : undefined;
            resourceInputs["azureTenantId"] = args?.azureTenantId ? pulumi.secret(args.azureTenantId) : undefined;
            resourceInputs["compressed"] = args ? args.compressed : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["archiveId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["awsAccessKey", "awsCredentialsType", "awsS3IamCredentialsArn", "awsS3Path", "awsSecretKey", "azureAccountName", "azureBlobPath", "azureClientId", "azureClientSecret", "azureContainerName", "azureTenantId"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ArchiveLogs.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ArchiveLogs resources.
 */
export interface ArchiveLogsState {
    archiveId?: pulumi.Input<number>;
    awsAccessKey?: pulumi.Input<string>;
    awsCredentialsType?: pulumi.Input<string>;
    awsS3IamCredentialsArn?: pulumi.Input<string>;
    awsS3Path?: pulumi.Input<string>;
    awsSecretKey?: pulumi.Input<string>;
    azureAccountName?: pulumi.Input<string>;
    azureBlobPath?: pulumi.Input<string>;
    azureClientId?: pulumi.Input<string>;
    azureClientSecret?: pulumi.Input<string>;
    azureContainerName?: pulumi.Input<string>;
    azureTenantId?: pulumi.Input<string>;
    compressed?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    storageType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ArchiveLogs resource.
 */
export interface ArchiveLogsArgs {
    awsAccessKey?: pulumi.Input<string>;
    awsCredentialsType?: pulumi.Input<string>;
    awsS3IamCredentialsArn?: pulumi.Input<string>;
    awsS3Path?: pulumi.Input<string>;
    awsSecretKey?: pulumi.Input<string>;
    azureAccountName?: pulumi.Input<string>;
    azureBlobPath?: pulumi.Input<string>;
    azureClientId?: pulumi.Input<string>;
    azureClientSecret?: pulumi.Input<string>;
    azureContainerName?: pulumi.Input<string>;
    azureTenantId?: pulumi.Input<string>;
    compressed?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    storageType: pulumi.Input<string>;
}
