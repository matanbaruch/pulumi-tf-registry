// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GrafanaAlertRule extends pulumi.CustomResource {
    /**
     * Get an existing GrafanaAlertRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GrafanaAlertRuleState, opts?: pulumi.CustomResourceOptions): GrafanaAlertRule {
        return new GrafanaAlertRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logzio:index/grafanaAlertRule:GrafanaAlertRule';

    /**
     * Returns true if the given object is an instance of GrafanaAlertRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GrafanaAlertRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GrafanaAlertRule.__pulumiType;
    }

    public /*out*/ readonly alertRuleId!: pulumi.Output<number>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly condition!: pulumi.Output<string>;
    public readonly datas!: pulumi.Output<outputs.GrafanaAlertRuleData[]>;
    public readonly execErrState!: pulumi.Output<string | undefined>;
    public readonly folderUid!: pulumi.Output<string>;
    public readonly for!: pulumi.Output<string>;
    public readonly isPaused!: pulumi.Output<boolean | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly noDataState!: pulumi.Output<string | undefined>;
    public readonly ruleGroup!: pulumi.Output<string>;
    public readonly title!: pulumi.Output<string>;
    public /*out*/ readonly uid!: pulumi.Output<string>;

    /**
     * Create a GrafanaAlertRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GrafanaAlertRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GrafanaAlertRuleArgs | GrafanaAlertRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GrafanaAlertRuleState | undefined;
            resourceInputs["alertRuleId"] = state ? state.alertRuleId : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["datas"] = state ? state.datas : undefined;
            resourceInputs["execErrState"] = state ? state.execErrState : undefined;
            resourceInputs["folderUid"] = state ? state.folderUid : undefined;
            resourceInputs["for"] = state ? state.for : undefined;
            resourceInputs["isPaused"] = state ? state.isPaused : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["noDataState"] = state ? state.noDataState : undefined;
            resourceInputs["ruleGroup"] = state ? state.ruleGroup : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
        } else {
            const args = argsOrState as GrafanaAlertRuleArgs | undefined;
            if ((!args || args.condition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            if ((!args || args.datas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datas'");
            }
            if ((!args || args.folderUid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'folderUid'");
            }
            if ((!args || args.for === undefined) && !opts.urn) {
                throw new Error("Missing required property 'for'");
            }
            if ((!args || args.ruleGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleGroup'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["datas"] = args ? args.datas : undefined;
            resourceInputs["execErrState"] = args ? args.execErrState : undefined;
            resourceInputs["folderUid"] = args ? args.folderUid : undefined;
            resourceInputs["for"] = args ? args.for : undefined;
            resourceInputs["isPaused"] = args ? args.isPaused : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["noDataState"] = args ? args.noDataState : undefined;
            resourceInputs["ruleGroup"] = args ? args.ruleGroup : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["alertRuleId"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GrafanaAlertRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GrafanaAlertRule resources.
 */
export interface GrafanaAlertRuleState {
    alertRuleId?: pulumi.Input<number>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    condition?: pulumi.Input<string>;
    datas?: pulumi.Input<pulumi.Input<inputs.GrafanaAlertRuleData>[]>;
    execErrState?: pulumi.Input<string>;
    folderUid?: pulumi.Input<string>;
    for?: pulumi.Input<string>;
    isPaused?: pulumi.Input<boolean>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    noDataState?: pulumi.Input<string>;
    ruleGroup?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GrafanaAlertRule resource.
 */
export interface GrafanaAlertRuleArgs {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    condition: pulumi.Input<string>;
    datas: pulumi.Input<pulumi.Input<inputs.GrafanaAlertRuleData>[]>;
    execErrState?: pulumi.Input<string>;
    folderUid: pulumi.Input<string>;
    for: pulumi.Input<string>;
    isPaused?: pulumi.Input<boolean>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    noDataState?: pulumi.Input<string>;
    ruleGroup: pulumi.Input<string>;
    title: pulumi.Input<string>;
}
