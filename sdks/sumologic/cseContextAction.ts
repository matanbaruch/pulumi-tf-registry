// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CseContextAction extends pulumi.CustomResource {
    /**
     * Get an existing CseContextAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CseContextActionState, opts?: pulumi.CustomResourceOptions): CseContextAction {
        return new CseContextAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/cseContextAction:CseContextAction';

    /**
     * Returns true if the given object is an instance of CseContextAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CseContextAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CseContextAction.__pulumiType;
    }

    public readonly allRecordFields!: pulumi.Output<boolean | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly entityTypes!: pulumi.Output<string[] | undefined>;
    public readonly iocTypes!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly recordFields!: pulumi.Output<string[] | undefined>;
    public readonly template!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a CseContextAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CseContextActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CseContextActionArgs | CseContextActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CseContextActionState | undefined;
            resourceInputs["allRecordFields"] = state ? state.allRecordFields : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["entityTypes"] = state ? state.entityTypes : undefined;
            resourceInputs["iocTypes"] = state ? state.iocTypes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recordFields"] = state ? state.recordFields : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CseContextActionArgs | undefined;
            if ((!args || args.iocTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iocTypes'");
            }
            resourceInputs["allRecordFields"] = args ? args.allRecordFields : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["entityTypes"] = args ? args.entityTypes : undefined;
            resourceInputs["iocTypes"] = args ? args.iocTypes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recordFields"] = args ? args.recordFields : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CseContextAction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CseContextAction resources.
 */
export interface CseContextActionState {
    allRecordFields?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    entityTypes?: pulumi.Input<pulumi.Input<string>[]>;
    iocTypes?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    recordFields?: pulumi.Input<pulumi.Input<string>[]>;
    template?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CseContextAction resource.
 */
export interface CseContextActionArgs {
    allRecordFields?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    entityTypes?: pulumi.Input<pulumi.Input<string>[]>;
    iocTypes: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    recordFields?: pulumi.Input<pulumi.Input<string>[]>;
    template?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
