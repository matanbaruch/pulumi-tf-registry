// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CseMatchRule extends pulumi.CustomResource {
    /**
     * Get an existing CseMatchRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CseMatchRuleState, opts?: pulumi.CustomResourceOptions): CseMatchRule {
        return new CseMatchRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/cseMatchRule:CseMatchRule';

    /**
     * Returns true if the given object is an instance of CseMatchRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CseMatchRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CseMatchRule.__pulumiType;
    }

    public readonly descriptionExpression!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly entitySelectors!: pulumi.Output<outputs.CseMatchRuleEntitySelector[]>;
    public readonly expression!: pulumi.Output<string>;
    public readonly isPrototype!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameExpression!: pulumi.Output<string>;
    public readonly severityMapping!: pulumi.Output<outputs.CseMatchRuleSeverityMapping>;
    public readonly summaryExpression!: pulumi.Output<string | undefined>;
    public readonly suppressionWindowSize!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a CseMatchRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CseMatchRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CseMatchRuleArgs | CseMatchRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CseMatchRuleState | undefined;
            resourceInputs["descriptionExpression"] = state ? state.descriptionExpression : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["entitySelectors"] = state ? state.entitySelectors : undefined;
            resourceInputs["expression"] = state ? state.expression : undefined;
            resourceInputs["isPrototype"] = state ? state.isPrototype : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameExpression"] = state ? state.nameExpression : undefined;
            resourceInputs["severityMapping"] = state ? state.severityMapping : undefined;
            resourceInputs["summaryExpression"] = state ? state.summaryExpression : undefined;
            resourceInputs["suppressionWindowSize"] = state ? state.suppressionWindowSize : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CseMatchRuleArgs | undefined;
            if ((!args || args.descriptionExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'descriptionExpression'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.entitySelectors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entitySelectors'");
            }
            if ((!args || args.expression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expression'");
            }
            if ((!args || args.nameExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nameExpression'");
            }
            if ((!args || args.severityMapping === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severityMapping'");
            }
            resourceInputs["descriptionExpression"] = args ? args.descriptionExpression : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["entitySelectors"] = args ? args.entitySelectors : undefined;
            resourceInputs["expression"] = args ? args.expression : undefined;
            resourceInputs["isPrototype"] = args ? args.isPrototype : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameExpression"] = args ? args.nameExpression : undefined;
            resourceInputs["severityMapping"] = args ? args.severityMapping : undefined;
            resourceInputs["summaryExpression"] = args ? args.summaryExpression : undefined;
            resourceInputs["suppressionWindowSize"] = args ? args.suppressionWindowSize : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CseMatchRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CseMatchRule resources.
 */
export interface CseMatchRuleState {
    descriptionExpression?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    entitySelectors?: pulumi.Input<pulumi.Input<inputs.CseMatchRuleEntitySelector>[]>;
    expression?: pulumi.Input<string>;
    isPrototype?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nameExpression?: pulumi.Input<string>;
    severityMapping?: pulumi.Input<inputs.CseMatchRuleSeverityMapping>;
    summaryExpression?: pulumi.Input<string>;
    suppressionWindowSize?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CseMatchRule resource.
 */
export interface CseMatchRuleArgs {
    descriptionExpression: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
    entitySelectors: pulumi.Input<pulumi.Input<inputs.CseMatchRuleEntitySelector>[]>;
    expression: pulumi.Input<string>;
    isPrototype?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nameExpression: pulumi.Input<string>;
    severityMapping: pulumi.Input<inputs.CseMatchRuleSeverityMapping>;
    summaryExpression?: pulumi.Input<string>;
    suppressionWindowSize?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
