// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogSearch extends pulumi.CustomResource {
    /**
     * Get an existing LogSearch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogSearchState, opts?: pulumi.CustomResourceOptions): LogSearch {
        return new LogSearch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/logSearch:LogSearch';

    /**
     * Returns true if the given object is an instance of LogSearch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogSearch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogSearch.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly parentId!: pulumi.Output<string>;
    public readonly parsingMode!: pulumi.Output<string | undefined>;
    public readonly queryParameters!: pulumi.Output<outputs.LogSearchQueryParameter[] | undefined>;
    public readonly queryString!: pulumi.Output<string>;
    public readonly runByReceiptTime!: pulumi.Output<boolean | undefined>;
    public readonly schedule!: pulumi.Output<outputs.LogSearchSchedule | undefined>;
    public readonly timeRange!: pulumi.Output<outputs.LogSearchTimeRange>;

    /**
     * Create a LogSearch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogSearchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogSearchArgs | LogSearchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogSearchState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["parsingMode"] = state ? state.parsingMode : undefined;
            resourceInputs["queryParameters"] = state ? state.queryParameters : undefined;
            resourceInputs["queryString"] = state ? state.queryString : undefined;
            resourceInputs["runByReceiptTime"] = state ? state.runByReceiptTime : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["timeRange"] = state ? state.timeRange : undefined;
        } else {
            const args = argsOrState as LogSearchArgs | undefined;
            if ((!args || args.parentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentId'");
            }
            if ((!args || args.queryString === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryString'");
            }
            if ((!args || args.timeRange === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeRange'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["parsingMode"] = args ? args.parsingMode : undefined;
            resourceInputs["queryParameters"] = args ? args.queryParameters : undefined;
            resourceInputs["queryString"] = args ? args.queryString : undefined;
            resourceInputs["runByReceiptTime"] = args ? args.runByReceiptTime : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["timeRange"] = args ? args.timeRange : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogSearch.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogSearch resources.
 */
export interface LogSearchState {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parentId?: pulumi.Input<string>;
    parsingMode?: pulumi.Input<string>;
    queryParameters?: pulumi.Input<pulumi.Input<inputs.LogSearchQueryParameter>[]>;
    queryString?: pulumi.Input<string>;
    runByReceiptTime?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<inputs.LogSearchSchedule>;
    timeRange?: pulumi.Input<inputs.LogSearchTimeRange>;
}

/**
 * The set of arguments for constructing a LogSearch resource.
 */
export interface LogSearchArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parentId: pulumi.Input<string>;
    parsingMode?: pulumi.Input<string>;
    queryParameters?: pulumi.Input<pulumi.Input<inputs.LogSearchQueryParameter>[]>;
    queryString: pulumi.Input<string>;
    runByReceiptTime?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<inputs.LogSearchSchedule>;
    timeRange: pulumi.Input<inputs.LogSearchTimeRange>;
}
