// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SamlConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing SamlConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlConfigurationState, opts?: pulumi.CustomResourceOptions): SamlConfiguration {
        return new SamlConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/samlConfiguration:SamlConfiguration';

    /**
     * Returns true if the given object is an instance of SamlConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamlConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamlConfiguration.__pulumiType;
    }

    public /*out*/ readonly assertionConsumerUrl!: pulumi.Output<string>;
    public readonly authnRequestUrl!: pulumi.Output<string | undefined>;
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    public readonly configurationName!: pulumi.Output<string>;
    public readonly debugMode!: pulumi.Output<boolean | undefined>;
    public readonly disableRequestedAuthnContext!: pulumi.Output<boolean | undefined>;
    public readonly emailAttribute!: pulumi.Output<string | undefined>;
    public /*out*/ readonly entityId!: pulumi.Output<string>;
    public readonly isRedirectBinding!: pulumi.Output<boolean | undefined>;
    public readonly issuer!: pulumi.Output<string>;
    public readonly logoutEnabled!: pulumi.Output<boolean | undefined>;
    public readonly logoutUrl!: pulumi.Output<string | undefined>;
    public readonly onDemandProvisioningEnabled!: pulumi.Output<outputs.SamlConfigurationOnDemandProvisioningEnabled | undefined>;
    public readonly rolesAttribute!: pulumi.Output<string | undefined>;
    public readonly signAuthnRequest!: pulumi.Output<boolean | undefined>;
    public readonly spInitiatedLoginEnabled!: pulumi.Output<boolean | undefined>;
    public readonly spInitiatedLoginPath!: pulumi.Output<string | undefined>;
    public readonly x509cert1!: pulumi.Output<string>;
    public readonly x509cert2!: pulumi.Output<string | undefined>;
    public readonly x509cert3!: pulumi.Output<string | undefined>;

    /**
     * Create a SamlConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlConfigurationArgs | SamlConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlConfigurationState | undefined;
            resourceInputs["assertionConsumerUrl"] = state ? state.assertionConsumerUrl : undefined;
            resourceInputs["authnRequestUrl"] = state ? state.authnRequestUrl : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["configurationName"] = state ? state.configurationName : undefined;
            resourceInputs["debugMode"] = state ? state.debugMode : undefined;
            resourceInputs["disableRequestedAuthnContext"] = state ? state.disableRequestedAuthnContext : undefined;
            resourceInputs["emailAttribute"] = state ? state.emailAttribute : undefined;
            resourceInputs["entityId"] = state ? state.entityId : undefined;
            resourceInputs["isRedirectBinding"] = state ? state.isRedirectBinding : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["logoutEnabled"] = state ? state.logoutEnabled : undefined;
            resourceInputs["logoutUrl"] = state ? state.logoutUrl : undefined;
            resourceInputs["onDemandProvisioningEnabled"] = state ? state.onDemandProvisioningEnabled : undefined;
            resourceInputs["rolesAttribute"] = state ? state.rolesAttribute : undefined;
            resourceInputs["signAuthnRequest"] = state ? state.signAuthnRequest : undefined;
            resourceInputs["spInitiatedLoginEnabled"] = state ? state.spInitiatedLoginEnabled : undefined;
            resourceInputs["spInitiatedLoginPath"] = state ? state.spInitiatedLoginPath : undefined;
            resourceInputs["x509cert1"] = state ? state.x509cert1 : undefined;
            resourceInputs["x509cert2"] = state ? state.x509cert2 : undefined;
            resourceInputs["x509cert3"] = state ? state.x509cert3 : undefined;
        } else {
            const args = argsOrState as SamlConfigurationArgs | undefined;
            if ((!args || args.configurationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationName'");
            }
            if ((!args || args.issuer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            if ((!args || args.x509cert1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'x509cert1'");
            }
            resourceInputs["authnRequestUrl"] = args ? args.authnRequestUrl : undefined;
            resourceInputs["configurationName"] = args ? args.configurationName : undefined;
            resourceInputs["debugMode"] = args ? args.debugMode : undefined;
            resourceInputs["disableRequestedAuthnContext"] = args ? args.disableRequestedAuthnContext : undefined;
            resourceInputs["emailAttribute"] = args ? args.emailAttribute : undefined;
            resourceInputs["isRedirectBinding"] = args ? args.isRedirectBinding : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["logoutEnabled"] = args ? args.logoutEnabled : undefined;
            resourceInputs["logoutUrl"] = args ? args.logoutUrl : undefined;
            resourceInputs["onDemandProvisioningEnabled"] = args ? args.onDemandProvisioningEnabled : undefined;
            resourceInputs["rolesAttribute"] = args ? args.rolesAttribute : undefined;
            resourceInputs["signAuthnRequest"] = args ? args.signAuthnRequest : undefined;
            resourceInputs["spInitiatedLoginEnabled"] = args ? args.spInitiatedLoginEnabled : undefined;
            resourceInputs["spInitiatedLoginPath"] = args ? args.spInitiatedLoginPath : undefined;
            resourceInputs["x509cert1"] = args ? args.x509cert1 : undefined;
            resourceInputs["x509cert2"] = args ? args.x509cert2 : undefined;
            resourceInputs["x509cert3"] = args ? args.x509cert3 : undefined;
            resourceInputs["assertionConsumerUrl"] = undefined /*out*/;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["entityId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SamlConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SamlConfiguration resources.
 */
export interface SamlConfigurationState {
    assertionConsumerUrl?: pulumi.Input<string>;
    authnRequestUrl?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    configurationName?: pulumi.Input<string>;
    debugMode?: pulumi.Input<boolean>;
    disableRequestedAuthnContext?: pulumi.Input<boolean>;
    emailAttribute?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    isRedirectBinding?: pulumi.Input<boolean>;
    issuer?: pulumi.Input<string>;
    logoutEnabled?: pulumi.Input<boolean>;
    logoutUrl?: pulumi.Input<string>;
    onDemandProvisioningEnabled?: pulumi.Input<inputs.SamlConfigurationOnDemandProvisioningEnabled>;
    rolesAttribute?: pulumi.Input<string>;
    signAuthnRequest?: pulumi.Input<boolean>;
    spInitiatedLoginEnabled?: pulumi.Input<boolean>;
    spInitiatedLoginPath?: pulumi.Input<string>;
    x509cert1?: pulumi.Input<string>;
    x509cert2?: pulumi.Input<string>;
    x509cert3?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SamlConfiguration resource.
 */
export interface SamlConfigurationArgs {
    authnRequestUrl?: pulumi.Input<string>;
    configurationName: pulumi.Input<string>;
    debugMode?: pulumi.Input<boolean>;
    disableRequestedAuthnContext?: pulumi.Input<boolean>;
    emailAttribute?: pulumi.Input<string>;
    isRedirectBinding?: pulumi.Input<boolean>;
    issuer: pulumi.Input<string>;
    logoutEnabled?: pulumi.Input<boolean>;
    logoutUrl?: pulumi.Input<string>;
    onDemandProvisioningEnabled?: pulumi.Input<inputs.SamlConfigurationOnDemandProvisioningEnabled>;
    rolesAttribute?: pulumi.Input<string>;
    signAuthnRequest?: pulumi.Input<boolean>;
    spInitiatedLoginEnabled?: pulumi.Input<boolean>;
    spInitiatedLoginPath?: pulumi.Input<string>;
    x509cert1: pulumi.Input<string>;
    x509cert2?: pulumi.Input<string>;
    x509cert3?: pulumi.Input<string>;
}
