// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudToCloudSource extends pulumi.CustomResource {
    /**
     * Get an existing CloudToCloudSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudToCloudSourceState, opts?: pulumi.CustomResourceOptions): CloudToCloudSource {
        return new CloudToCloudSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/cloudToCloudSource:CloudToCloudSource';

    /**
     * Returns true if the given object is an instance of CloudToCloudSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudToCloudSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudToCloudSource.__pulumiType;
    }

    public readonly collectorId!: pulumi.Output<number>;
    public readonly config!: pulumi.Output<string>;
    public readonly schemaRef!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a CloudToCloudSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudToCloudSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudToCloudSourceArgs | CloudToCloudSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudToCloudSourceState | undefined;
            resourceInputs["collectorId"] = state ? state.collectorId : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["schemaRef"] = state ? state.schemaRef : undefined;
        } else {
            const args = argsOrState as CloudToCloudSourceArgs | undefined;
            if ((!args || args.collectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectorId'");
            }
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.schemaRef === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaRef'");
            }
            resourceInputs["collectorId"] = args ? args.collectorId : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["schemaRef"] = args ? args.schemaRef : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudToCloudSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudToCloudSource resources.
 */
export interface CloudToCloudSourceState {
    collectorId?: pulumi.Input<number>;
    config?: pulumi.Input<string>;
    schemaRef?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a CloudToCloudSource resource.
 */
export interface CloudToCloudSourceArgs {
    collectorId: pulumi.Input<number>;
    config: pulumi.Input<string>;
    schemaRef: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
