// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LookupTable extends pulumi.CustomResource {
    /**
     * Get an existing LookupTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LookupTableState, opts?: pulumi.CustomResourceOptions): LookupTable {
        return new LookupTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/lookupTable:LookupTable';

    /**
     * Returns true if the given object is an instance of LookupTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LookupTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LookupTable.__pulumiType;
    }

    public readonly description!: pulumi.Output<string>;
    /**
     * The list of fields in the lookup table.
     */
    public readonly fields!: pulumi.Output<outputs.LookupTableField[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly parentFolderId!: pulumi.Output<string | undefined>;
    /**
     * The primary key field names.
     */
    public readonly primaryKeys!: pulumi.Output<string[] | undefined>;
    public readonly sizeLimitAction!: pulumi.Output<string | undefined>;
    public readonly ttl!: pulumi.Output<number | undefined>;

    /**
     * Create a LookupTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LookupTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LookupTableArgs | LookupTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LookupTableState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fields"] = state ? state.fields : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentFolderId"] = state ? state.parentFolderId : undefined;
            resourceInputs["primaryKeys"] = state ? state.primaryKeys : undefined;
            resourceInputs["sizeLimitAction"] = state ? state.sizeLimitAction : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as LookupTableArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fields"] = args ? args.fields : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentFolderId"] = args ? args.parentFolderId : undefined;
            resourceInputs["primaryKeys"] = args ? args.primaryKeys : undefined;
            resourceInputs["sizeLimitAction"] = args ? args.sizeLimitAction : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LookupTable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LookupTable resources.
 */
export interface LookupTableState {
    description?: pulumi.Input<string>;
    /**
     * The list of fields in the lookup table.
     */
    fields?: pulumi.Input<pulumi.Input<inputs.LookupTableField>[]>;
    name?: pulumi.Input<string>;
    parentFolderId?: pulumi.Input<string>;
    /**
     * The primary key field names.
     */
    primaryKeys?: pulumi.Input<pulumi.Input<string>[]>;
    sizeLimitAction?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LookupTable resource.
 */
export interface LookupTableArgs {
    description: pulumi.Input<string>;
    /**
     * The list of fields in the lookup table.
     */
    fields?: pulumi.Input<pulumi.Input<inputs.LookupTableField>[]>;
    name?: pulumi.Input<string>;
    parentFolderId?: pulumi.Input<string>;
    /**
     * The primary key field names.
     */
    primaryKeys?: pulumi.Input<pulumi.Input<string>[]>;
    sizeLimitAction?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
}
