// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CseLogMapping extends pulumi.CustomResource {
    /**
     * Get an existing CseLogMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CseLogMappingState, opts?: pulumi.CustomResourceOptions): CseLogMapping {
        return new CseLogMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/cseLogMapping:CseLogMapping';

    /**
     * Returns true if the given object is an instance of CseLogMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CseLogMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CseLogMapping.__pulumiType;
    }

    public readonly enabled!: pulumi.Output<boolean>;
    public readonly fields!: pulumi.Output<outputs.CseLogMappingField[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly parentId!: pulumi.Output<string | undefined>;
    public readonly productGuid!: pulumi.Output<string>;
    public readonly recordType!: pulumi.Output<string>;
    public readonly relatesEntities!: pulumi.Output<boolean | undefined>;
    public readonly skippedValues!: pulumi.Output<string[] | undefined>;
    public readonly structuredInputs!: pulumi.Output<outputs.CseLogMappingStructuredInput[] | undefined>;
    public readonly unstructuredFields!: pulumi.Output<outputs.CseLogMappingUnstructuredFields | undefined>;

    /**
     * Create a CseLogMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CseLogMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CseLogMappingArgs | CseLogMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CseLogMappingState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fields"] = state ? state.fields : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["productGuid"] = state ? state.productGuid : undefined;
            resourceInputs["recordType"] = state ? state.recordType : undefined;
            resourceInputs["relatesEntities"] = state ? state.relatesEntities : undefined;
            resourceInputs["skippedValues"] = state ? state.skippedValues : undefined;
            resourceInputs["structuredInputs"] = state ? state.structuredInputs : undefined;
            resourceInputs["unstructuredFields"] = state ? state.unstructuredFields : undefined;
        } else {
            const args = argsOrState as CseLogMappingArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.fields === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fields'");
            }
            if ((!args || args.productGuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productGuid'");
            }
            if ((!args || args.recordType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordType'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["fields"] = args ? args.fields : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["productGuid"] = args ? args.productGuid : undefined;
            resourceInputs["recordType"] = args ? args.recordType : undefined;
            resourceInputs["relatesEntities"] = args ? args.relatesEntities : undefined;
            resourceInputs["skippedValues"] = args ? args.skippedValues : undefined;
            resourceInputs["structuredInputs"] = args ? args.structuredInputs : undefined;
            resourceInputs["unstructuredFields"] = args ? args.unstructuredFields : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CseLogMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CseLogMapping resources.
 */
export interface CseLogMappingState {
    enabled?: pulumi.Input<boolean>;
    fields?: pulumi.Input<pulumi.Input<inputs.CseLogMappingField>[]>;
    name?: pulumi.Input<string>;
    parentId?: pulumi.Input<string>;
    productGuid?: pulumi.Input<string>;
    recordType?: pulumi.Input<string>;
    relatesEntities?: pulumi.Input<boolean>;
    skippedValues?: pulumi.Input<pulumi.Input<string>[]>;
    structuredInputs?: pulumi.Input<pulumi.Input<inputs.CseLogMappingStructuredInput>[]>;
    unstructuredFields?: pulumi.Input<inputs.CseLogMappingUnstructuredFields>;
}

/**
 * The set of arguments for constructing a CseLogMapping resource.
 */
export interface CseLogMappingArgs {
    enabled: pulumi.Input<boolean>;
    fields: pulumi.Input<pulumi.Input<inputs.CseLogMappingField>[]>;
    name?: pulumi.Input<string>;
    parentId?: pulumi.Input<string>;
    productGuid: pulumi.Input<string>;
    recordType: pulumi.Input<string>;
    relatesEntities?: pulumi.Input<boolean>;
    skippedValues?: pulumi.Input<pulumi.Input<string>[]>;
    structuredInputs?: pulumi.Input<pulumi.Input<inputs.CseLogMappingStructuredInput>[]>;
    unstructuredFields?: pulumi.Input<inputs.CseLogMappingUnstructuredFields>;
}
