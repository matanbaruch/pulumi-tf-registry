// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/monitor:Monitor';

    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }

    public readonly alertName!: pulumi.Output<string | undefined>;
    public readonly contentType!: pulumi.Output<string | undefined>;
    public readonly createdAt!: pulumi.Output<string>;
    public readonly createdBy!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly evaluationDelay!: pulumi.Output<string>;
    public readonly groupNotifications!: pulumi.Output<boolean | undefined>;
    public readonly isDisabled!: pulumi.Output<boolean | undefined>;
    public readonly isLocked!: pulumi.Output<boolean>;
    public readonly isMutable!: pulumi.Output<boolean>;
    public readonly isSystem!: pulumi.Output<boolean>;
    public readonly modifiedAt!: pulumi.Output<string>;
    public readonly modifiedBy!: pulumi.Output<string>;
    public readonly monitorType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationGroupFields!: pulumi.Output<string[] | undefined>;
    public readonly notifications!: pulumi.Output<outputs.MonitorNotification[] | undefined>;
    public readonly objPermissions!: pulumi.Output<outputs.MonitorObjPermission[] | undefined>;
    public readonly parentId!: pulumi.Output<string>;
    public readonly playbook!: pulumi.Output<string | undefined>;
    public readonly postRequestMap!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly queries!: pulumi.Output<outputs.MonitorQuery[] | undefined>;
    public readonly sloId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly statuses!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeZone!: pulumi.Output<string | undefined>;
    public readonly triggerConditions!: pulumi.Output<outputs.MonitorTriggerConditions | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly triggers!: pulumi.Output<outputs.MonitorTrigger[] | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly version!: pulumi.Output<number>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorState | undefined;
            resourceInputs["alertName"] = state ? state.alertName : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["evaluationDelay"] = state ? state.evaluationDelay : undefined;
            resourceInputs["groupNotifications"] = state ? state.groupNotifications : undefined;
            resourceInputs["isDisabled"] = state ? state.isDisabled : undefined;
            resourceInputs["isLocked"] = state ? state.isLocked : undefined;
            resourceInputs["isMutable"] = state ? state.isMutable : undefined;
            resourceInputs["isSystem"] = state ? state.isSystem : undefined;
            resourceInputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            resourceInputs["modifiedBy"] = state ? state.modifiedBy : undefined;
            resourceInputs["monitorType"] = state ? state.monitorType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationGroupFields"] = state ? state.notificationGroupFields : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["objPermissions"] = state ? state.objPermissions : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["playbook"] = state ? state.playbook : undefined;
            resourceInputs["postRequestMap"] = state ? state.postRequestMap : undefined;
            resourceInputs["queries"] = state ? state.queries : undefined;
            resourceInputs["sloId"] = state ? state.sloId : undefined;
            resourceInputs["statuses"] = state ? state.statuses : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["triggerConditions"] = state ? state.triggerConditions : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            if ((!args || args.monitorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorType'");
            }
            resourceInputs["alertName"] = args ? args.alertName : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["createdAt"] = args ? args.createdAt : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["evaluationDelay"] = args ? args.evaluationDelay : undefined;
            resourceInputs["groupNotifications"] = args ? args.groupNotifications : undefined;
            resourceInputs["isDisabled"] = args ? args.isDisabled : undefined;
            resourceInputs["isLocked"] = args ? args.isLocked : undefined;
            resourceInputs["isMutable"] = args ? args.isMutable : undefined;
            resourceInputs["isSystem"] = args ? args.isSystem : undefined;
            resourceInputs["modifiedAt"] = args ? args.modifiedAt : undefined;
            resourceInputs["modifiedBy"] = args ? args.modifiedBy : undefined;
            resourceInputs["monitorType"] = args ? args.monitorType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationGroupFields"] = args ? args.notificationGroupFields : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["objPermissions"] = args ? args.objPermissions : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["playbook"] = args ? args.playbook : undefined;
            resourceInputs["postRequestMap"] = args ? args.postRequestMap : undefined;
            resourceInputs["queries"] = args ? args.queries : undefined;
            resourceInputs["sloId"] = args ? args.sloId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["triggerConditions"] = args ? args.triggerConditions : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["statuses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Monitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    alertName?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    evaluationDelay?: pulumi.Input<string>;
    groupNotifications?: pulumi.Input<boolean>;
    isDisabled?: pulumi.Input<boolean>;
    isLocked?: pulumi.Input<boolean>;
    isMutable?: pulumi.Input<boolean>;
    isSystem?: pulumi.Input<boolean>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    monitorType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationGroupFields?: pulumi.Input<pulumi.Input<string>[]>;
    notifications?: pulumi.Input<pulumi.Input<inputs.MonitorNotification>[]>;
    objPermissions?: pulumi.Input<pulumi.Input<inputs.MonitorObjPermission>[]>;
    parentId?: pulumi.Input<string>;
    playbook?: pulumi.Input<string>;
    postRequestMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    queries?: pulumi.Input<pulumi.Input<inputs.MonitorQuery>[]>;
    sloId?: pulumi.Input<string>;
    statuses?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeZone?: pulumi.Input<string>;
    triggerConditions?: pulumi.Input<inputs.MonitorTriggerConditions>;
    /**
     * @deprecated Deprecated
     */
    triggers?: pulumi.Input<pulumi.Input<inputs.MonitorTrigger>[]>;
    type?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    alertName?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    evaluationDelay?: pulumi.Input<string>;
    groupNotifications?: pulumi.Input<boolean>;
    isDisabled?: pulumi.Input<boolean>;
    isLocked?: pulumi.Input<boolean>;
    isMutable?: pulumi.Input<boolean>;
    isSystem?: pulumi.Input<boolean>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    monitorType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationGroupFields?: pulumi.Input<pulumi.Input<string>[]>;
    notifications?: pulumi.Input<pulumi.Input<inputs.MonitorNotification>[]>;
    objPermissions?: pulumi.Input<pulumi.Input<inputs.MonitorObjPermission>[]>;
    parentId?: pulumi.Input<string>;
    playbook?: pulumi.Input<string>;
    postRequestMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    queries?: pulumi.Input<pulumi.Input<inputs.MonitorQuery>[]>;
    sloId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeZone?: pulumi.Input<string>;
    triggerConditions?: pulumi.Input<inputs.MonitorTriggerConditions>;
    /**
     * @deprecated Deprecated
     */
    triggers?: pulumi.Input<pulumi.Input<inputs.MonitorTrigger>[]>;
    type?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}
