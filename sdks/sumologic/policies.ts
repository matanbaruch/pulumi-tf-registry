// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Policies extends pulumi.CustomResource {
    /**
     * Get an existing Policies resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PoliciesState, opts?: pulumi.CustomResourceOptions): Policies {
        return new Policies(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/policies:Policies';

    /**
     * Returns true if the given object is an instance of Policies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policies.__pulumiType;
    }

    public readonly audit!: pulumi.Output<boolean>;
    public readonly dataAccessLevel!: pulumi.Output<boolean>;
    public readonly maxUserSessionTimeout!: pulumi.Output<string>;
    public readonly searchAudit!: pulumi.Output<boolean>;
    public readonly shareDashboardsOutsideOrganization!: pulumi.Output<boolean>;
    public readonly userConcurrentSessionsLimit!: pulumi.Output<outputs.PoliciesUserConcurrentSessionsLimit>;

    /**
     * Create a Policies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PoliciesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PoliciesArgs | PoliciesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PoliciesState | undefined;
            resourceInputs["audit"] = state ? state.audit : undefined;
            resourceInputs["dataAccessLevel"] = state ? state.dataAccessLevel : undefined;
            resourceInputs["maxUserSessionTimeout"] = state ? state.maxUserSessionTimeout : undefined;
            resourceInputs["searchAudit"] = state ? state.searchAudit : undefined;
            resourceInputs["shareDashboardsOutsideOrganization"] = state ? state.shareDashboardsOutsideOrganization : undefined;
            resourceInputs["userConcurrentSessionsLimit"] = state ? state.userConcurrentSessionsLimit : undefined;
        } else {
            const args = argsOrState as PoliciesArgs | undefined;
            if ((!args || args.audit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'audit'");
            }
            if ((!args || args.dataAccessLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataAccessLevel'");
            }
            if ((!args || args.maxUserSessionTimeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxUserSessionTimeout'");
            }
            if ((!args || args.searchAudit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'searchAudit'");
            }
            if ((!args || args.shareDashboardsOutsideOrganization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareDashboardsOutsideOrganization'");
            }
            if ((!args || args.userConcurrentSessionsLimit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userConcurrentSessionsLimit'");
            }
            resourceInputs["audit"] = args ? args.audit : undefined;
            resourceInputs["dataAccessLevel"] = args ? args.dataAccessLevel : undefined;
            resourceInputs["maxUserSessionTimeout"] = args ? args.maxUserSessionTimeout : undefined;
            resourceInputs["searchAudit"] = args ? args.searchAudit : undefined;
            resourceInputs["shareDashboardsOutsideOrganization"] = args ? args.shareDashboardsOutsideOrganization : undefined;
            resourceInputs["userConcurrentSessionsLimit"] = args ? args.userConcurrentSessionsLimit : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policies.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Policies resources.
 */
export interface PoliciesState {
    audit?: pulumi.Input<boolean>;
    dataAccessLevel?: pulumi.Input<boolean>;
    maxUserSessionTimeout?: pulumi.Input<string>;
    searchAudit?: pulumi.Input<boolean>;
    shareDashboardsOutsideOrganization?: pulumi.Input<boolean>;
    userConcurrentSessionsLimit?: pulumi.Input<inputs.PoliciesUserConcurrentSessionsLimit>;
}

/**
 * The set of arguments for constructing a Policies resource.
 */
export interface PoliciesArgs {
    audit: pulumi.Input<boolean>;
    dataAccessLevel: pulumi.Input<boolean>;
    maxUserSessionTimeout: pulumi.Input<string>;
    searchAudit: pulumi.Input<boolean>;
    shareDashboardsOutsideOrganization: pulumi.Input<boolean>;
    userConcurrentSessionsLimit: pulumi.Input<inputs.PoliciesUserConcurrentSessionsLimit>;
}
