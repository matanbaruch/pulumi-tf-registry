// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSourceRetently(args: GetSourceRetentlyArgs, opts?: pulumi.InvokeOptions): Promise<GetSourceRetentlyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("airbyte:index/getSourceRetently:getSourceRetently", {
        "sourceId": args.sourceId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSourceRetently.
 */
export interface GetSourceRetentlyArgs {
    sourceId: string;
}

/**
 * A collection of values returned by getSourceRetently.
 */
export interface GetSourceRetentlyResult {
    readonly configuration: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly sourceId: string;
    readonly sourceType: string;
    readonly workspaceId: string;
}
export function getSourceRetentlyOutput(args: GetSourceRetentlyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSourceRetentlyResult> {
    return pulumi.output(args).apply((a: any) => getSourceRetently(a, opts))
}

/**
 * A collection of arguments for invoking getSourceRetently.
 */
export interface GetSourceRetentlyOutputArgs {
    sourceId: pulumi.Input<string>;
}
