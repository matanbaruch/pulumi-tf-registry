// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AggregateInterface extends pulumi.CustomResource {
    /**
     * Get an existing AggregateInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AggregateInterfaceState, opts?: pulumi.CustomResourceOptions): AggregateInterface {
        return new AggregateInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/aggregateInterface:AggregateInterface';

    /**
     * Returns true if the given object is an instance of AggregateInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AggregateInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AggregateInterface.__pulumiType;
    }

    public readonly adjustTcpMss!: pulumi.Output<boolean | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly createDhcpDefaultRoute!: pulumi.Output<boolean | undefined>;
    public readonly decryptForward!: pulumi.Output<boolean | undefined>;
    public readonly dhcpDefaultRouteMetric!: pulumi.Output<number | undefined>;
    public readonly dhcpSendHostnameEnable!: pulumi.Output<boolean | undefined>;
    public readonly dhcpSendHostnameValue!: pulumi.Output<string | undefined>;
    public readonly enableDhcp!: pulumi.Output<boolean | undefined>;
    public readonly enableUntaggedSubinterface!: pulumi.Output<boolean | undefined>;
    public readonly ipv4MssAdjust!: pulumi.Output<number | undefined>;
    public readonly ipv6Enabled!: pulumi.Output<boolean | undefined>;
    public readonly ipv6InterfaceId!: pulumi.Output<string | undefined>;
    public readonly ipv6MssAdjust!: pulumi.Output<number | undefined>;
    public readonly lacpEnable!: pulumi.Output<boolean | undefined>;
    public readonly lacpFastFailover!: pulumi.Output<boolean | undefined>;
    public readonly lacpHaEnableSameSystemMac!: pulumi.Output<boolean | undefined>;
    public readonly lacpHaPassivePreNegotiation!: pulumi.Output<boolean | undefined>;
    public readonly lacpHaSameSystemMacAddress!: pulumi.Output<string | undefined>;
    public readonly lacpMaxPorts!: pulumi.Output<number | undefined>;
    public readonly lacpMode!: pulumi.Output<string | undefined>;
    public readonly lacpSystemPriority!: pulumi.Output<number | undefined>;
    public readonly lacpTransmissionRate!: pulumi.Output<string | undefined>;
    public readonly lldpEnable!: pulumi.Output<boolean | undefined>;
    public readonly lldpHaPassivePreNegotiation!: pulumi.Output<boolean | undefined>;
    public readonly lldpProfile!: pulumi.Output<string | undefined>;
    public readonly managementProfile!: pulumi.Output<string | undefined>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly mtu!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly netflowProfile!: pulumi.Output<string | undefined>;
    /**
     * List of static IP addresses
     */
    public readonly staticIps!: pulumi.Output<string[] | undefined>;
    public readonly vsys!: pulumi.Output<string | undefined>;

    /**
     * Create a AggregateInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AggregateInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AggregateInterfaceArgs | AggregateInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AggregateInterfaceState | undefined;
            resourceInputs["adjustTcpMss"] = state ? state.adjustTcpMss : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["createDhcpDefaultRoute"] = state ? state.createDhcpDefaultRoute : undefined;
            resourceInputs["decryptForward"] = state ? state.decryptForward : undefined;
            resourceInputs["dhcpDefaultRouteMetric"] = state ? state.dhcpDefaultRouteMetric : undefined;
            resourceInputs["dhcpSendHostnameEnable"] = state ? state.dhcpSendHostnameEnable : undefined;
            resourceInputs["dhcpSendHostnameValue"] = state ? state.dhcpSendHostnameValue : undefined;
            resourceInputs["enableDhcp"] = state ? state.enableDhcp : undefined;
            resourceInputs["enableUntaggedSubinterface"] = state ? state.enableUntaggedSubinterface : undefined;
            resourceInputs["ipv4MssAdjust"] = state ? state.ipv4MssAdjust : undefined;
            resourceInputs["ipv6Enabled"] = state ? state.ipv6Enabled : undefined;
            resourceInputs["ipv6InterfaceId"] = state ? state.ipv6InterfaceId : undefined;
            resourceInputs["ipv6MssAdjust"] = state ? state.ipv6MssAdjust : undefined;
            resourceInputs["lacpEnable"] = state ? state.lacpEnable : undefined;
            resourceInputs["lacpFastFailover"] = state ? state.lacpFastFailover : undefined;
            resourceInputs["lacpHaEnableSameSystemMac"] = state ? state.lacpHaEnableSameSystemMac : undefined;
            resourceInputs["lacpHaPassivePreNegotiation"] = state ? state.lacpHaPassivePreNegotiation : undefined;
            resourceInputs["lacpHaSameSystemMacAddress"] = state ? state.lacpHaSameSystemMacAddress : undefined;
            resourceInputs["lacpMaxPorts"] = state ? state.lacpMaxPorts : undefined;
            resourceInputs["lacpMode"] = state ? state.lacpMode : undefined;
            resourceInputs["lacpSystemPriority"] = state ? state.lacpSystemPriority : undefined;
            resourceInputs["lacpTransmissionRate"] = state ? state.lacpTransmissionRate : undefined;
            resourceInputs["lldpEnable"] = state ? state.lldpEnable : undefined;
            resourceInputs["lldpHaPassivePreNegotiation"] = state ? state.lldpHaPassivePreNegotiation : undefined;
            resourceInputs["lldpProfile"] = state ? state.lldpProfile : undefined;
            resourceInputs["managementProfile"] = state ? state.managementProfile : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netflowProfile"] = state ? state.netflowProfile : undefined;
            resourceInputs["staticIps"] = state ? state.staticIps : undefined;
            resourceInputs["vsys"] = state ? state.vsys : undefined;
        } else {
            const args = argsOrState as AggregateInterfaceArgs | undefined;
            resourceInputs["adjustTcpMss"] = args ? args.adjustTcpMss : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["createDhcpDefaultRoute"] = args ? args.createDhcpDefaultRoute : undefined;
            resourceInputs["decryptForward"] = args ? args.decryptForward : undefined;
            resourceInputs["dhcpDefaultRouteMetric"] = args ? args.dhcpDefaultRouteMetric : undefined;
            resourceInputs["dhcpSendHostnameEnable"] = args ? args.dhcpSendHostnameEnable : undefined;
            resourceInputs["dhcpSendHostnameValue"] = args ? args.dhcpSendHostnameValue : undefined;
            resourceInputs["enableDhcp"] = args ? args.enableDhcp : undefined;
            resourceInputs["enableUntaggedSubinterface"] = args ? args.enableUntaggedSubinterface : undefined;
            resourceInputs["ipv4MssAdjust"] = args ? args.ipv4MssAdjust : undefined;
            resourceInputs["ipv6Enabled"] = args ? args.ipv6Enabled : undefined;
            resourceInputs["ipv6InterfaceId"] = args ? args.ipv6InterfaceId : undefined;
            resourceInputs["ipv6MssAdjust"] = args ? args.ipv6MssAdjust : undefined;
            resourceInputs["lacpEnable"] = args ? args.lacpEnable : undefined;
            resourceInputs["lacpFastFailover"] = args ? args.lacpFastFailover : undefined;
            resourceInputs["lacpHaEnableSameSystemMac"] = args ? args.lacpHaEnableSameSystemMac : undefined;
            resourceInputs["lacpHaPassivePreNegotiation"] = args ? args.lacpHaPassivePreNegotiation : undefined;
            resourceInputs["lacpHaSameSystemMacAddress"] = args ? args.lacpHaSameSystemMacAddress : undefined;
            resourceInputs["lacpMaxPorts"] = args ? args.lacpMaxPorts : undefined;
            resourceInputs["lacpMode"] = args ? args.lacpMode : undefined;
            resourceInputs["lacpSystemPriority"] = args ? args.lacpSystemPriority : undefined;
            resourceInputs["lacpTransmissionRate"] = args ? args.lacpTransmissionRate : undefined;
            resourceInputs["lldpEnable"] = args ? args.lldpEnable : undefined;
            resourceInputs["lldpHaPassivePreNegotiation"] = args ? args.lldpHaPassivePreNegotiation : undefined;
            resourceInputs["lldpProfile"] = args ? args.lldpProfile : undefined;
            resourceInputs["managementProfile"] = args ? args.managementProfile : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netflowProfile"] = args ? args.netflowProfile : undefined;
            resourceInputs["staticIps"] = args ? args.staticIps : undefined;
            resourceInputs["vsys"] = args ? args.vsys : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AggregateInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AggregateInterface resources.
 */
export interface AggregateInterfaceState {
    adjustTcpMss?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    createDhcpDefaultRoute?: pulumi.Input<boolean>;
    decryptForward?: pulumi.Input<boolean>;
    dhcpDefaultRouteMetric?: pulumi.Input<number>;
    dhcpSendHostnameEnable?: pulumi.Input<boolean>;
    dhcpSendHostnameValue?: pulumi.Input<string>;
    enableDhcp?: pulumi.Input<boolean>;
    enableUntaggedSubinterface?: pulumi.Input<boolean>;
    ipv4MssAdjust?: pulumi.Input<number>;
    ipv6Enabled?: pulumi.Input<boolean>;
    ipv6InterfaceId?: pulumi.Input<string>;
    ipv6MssAdjust?: pulumi.Input<number>;
    lacpEnable?: pulumi.Input<boolean>;
    lacpFastFailover?: pulumi.Input<boolean>;
    lacpHaEnableSameSystemMac?: pulumi.Input<boolean>;
    lacpHaPassivePreNegotiation?: pulumi.Input<boolean>;
    lacpHaSameSystemMacAddress?: pulumi.Input<string>;
    lacpMaxPorts?: pulumi.Input<number>;
    lacpMode?: pulumi.Input<string>;
    lacpSystemPriority?: pulumi.Input<number>;
    lacpTransmissionRate?: pulumi.Input<string>;
    lldpEnable?: pulumi.Input<boolean>;
    lldpHaPassivePreNegotiation?: pulumi.Input<boolean>;
    lldpProfile?: pulumi.Input<string>;
    managementProfile?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    netflowProfile?: pulumi.Input<string>;
    /**
     * List of static IP addresses
     */
    staticIps?: pulumi.Input<pulumi.Input<string>[]>;
    vsys?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AggregateInterface resource.
 */
export interface AggregateInterfaceArgs {
    adjustTcpMss?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    createDhcpDefaultRoute?: pulumi.Input<boolean>;
    decryptForward?: pulumi.Input<boolean>;
    dhcpDefaultRouteMetric?: pulumi.Input<number>;
    dhcpSendHostnameEnable?: pulumi.Input<boolean>;
    dhcpSendHostnameValue?: pulumi.Input<string>;
    enableDhcp?: pulumi.Input<boolean>;
    enableUntaggedSubinterface?: pulumi.Input<boolean>;
    ipv4MssAdjust?: pulumi.Input<number>;
    ipv6Enabled?: pulumi.Input<boolean>;
    ipv6InterfaceId?: pulumi.Input<string>;
    ipv6MssAdjust?: pulumi.Input<number>;
    lacpEnable?: pulumi.Input<boolean>;
    lacpFastFailover?: pulumi.Input<boolean>;
    lacpHaEnableSameSystemMac?: pulumi.Input<boolean>;
    lacpHaPassivePreNegotiation?: pulumi.Input<boolean>;
    lacpHaSameSystemMacAddress?: pulumi.Input<string>;
    lacpMaxPorts?: pulumi.Input<number>;
    lacpMode?: pulumi.Input<string>;
    lacpSystemPriority?: pulumi.Input<number>;
    lacpTransmissionRate?: pulumi.Input<string>;
    lldpEnable?: pulumi.Input<boolean>;
    lldpHaPassivePreNegotiation?: pulumi.Input<boolean>;
    lldpProfile?: pulumi.Input<string>;
    managementProfile?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    netflowProfile?: pulumi.Input<string>;
    /**
     * List of static IP addresses
     */
    staticIps?: pulumi.Input<pulumi.Input<string>[]>;
    vsys?: pulumi.Input<string>;
}
