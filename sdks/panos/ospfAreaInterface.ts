// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OspfAreaInterface extends pulumi.CustomResource {
    /**
     * Get an existing OspfAreaInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OspfAreaInterfaceState, opts?: pulumi.CustomResourceOptions): OspfAreaInterface {
        return new OspfAreaInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/ospfAreaInterface:OspfAreaInterface';

    /**
     * Returns true if the given object is an instance of OspfAreaInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OspfAreaInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OspfAreaInterface.__pulumiType;
    }

    /**
     * Auth profile
     */
    public readonly authProfile!: pulumi.Output<string | undefined>;
    /**
     * BFD profile
     */
    public readonly bfdProfile!: pulumi.Output<string | undefined>;
    /**
     * Dead counts
     */
    public readonly deadCounts!: pulumi.Output<number | undefined>;
    /**
     * Enable
     */
    public readonly enable!: pulumi.Output<boolean | undefined>;
    /**
     * Graceful restart hello delay in seconds
     */
    public readonly graceRestartDelay!: pulumi.Output<number | undefined>;
    /**
     * Hello interval in seconds
     */
    public readonly helloInterval!: pulumi.Output<number | undefined>;
    /**
     * Link type
     */
    public readonly linkType!: pulumi.Output<string | undefined>;
    /**
     * Metric
     */
    public readonly metric!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (p2mp) List of neighbors
     */
    public readonly neighbors!: pulumi.Output<string[] | undefined>;
    /**
     * The OSPF area name
     */
    public readonly ospfArea!: pulumi.Output<string>;
    /**
     * Passive
     */
    public readonly passive!: pulumi.Output<boolean | undefined>;
    /**
     * Priority
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * Retransmit interval in seconds
     */
    public readonly retransmitInterval!: pulumi.Output<number | undefined>;
    /**
     * The template.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * The template stack.
     */
    public readonly templateStack!: pulumi.Output<string | undefined>;
    /**
     * Transit delay in seconds
     */
    public readonly transitDelay!: pulumi.Output<number | undefined>;
    /**
     * The virtual router
     */
    public readonly virtualRouter!: pulumi.Output<string>;

    /**
     * Create a OspfAreaInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OspfAreaInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OspfAreaInterfaceArgs | OspfAreaInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OspfAreaInterfaceState | undefined;
            resourceInputs["authProfile"] = state ? state.authProfile : undefined;
            resourceInputs["bfdProfile"] = state ? state.bfdProfile : undefined;
            resourceInputs["deadCounts"] = state ? state.deadCounts : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["graceRestartDelay"] = state ? state.graceRestartDelay : undefined;
            resourceInputs["helloInterval"] = state ? state.helloInterval : undefined;
            resourceInputs["linkType"] = state ? state.linkType : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["neighbors"] = state ? state.neighbors : undefined;
            resourceInputs["ospfArea"] = state ? state.ospfArea : undefined;
            resourceInputs["passive"] = state ? state.passive : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["retransmitInterval"] = state ? state.retransmitInterval : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
            resourceInputs["transitDelay"] = state ? state.transitDelay : undefined;
            resourceInputs["virtualRouter"] = state ? state.virtualRouter : undefined;
        } else {
            const args = argsOrState as OspfAreaInterfaceArgs | undefined;
            if ((!args || args.ospfArea === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ospfArea'");
            }
            if ((!args || args.virtualRouter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualRouter'");
            }
            resourceInputs["authProfile"] = args ? args.authProfile : undefined;
            resourceInputs["bfdProfile"] = args ? args.bfdProfile : undefined;
            resourceInputs["deadCounts"] = args ? args.deadCounts : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["graceRestartDelay"] = args ? args.graceRestartDelay : undefined;
            resourceInputs["helloInterval"] = args ? args.helloInterval : undefined;
            resourceInputs["linkType"] = args ? args.linkType : undefined;
            resourceInputs["metric"] = args ? args.metric : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["neighbors"] = args ? args.neighbors : undefined;
            resourceInputs["ospfArea"] = args ? args.ospfArea : undefined;
            resourceInputs["passive"] = args ? args.passive : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["retransmitInterval"] = args ? args.retransmitInterval : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
            resourceInputs["transitDelay"] = args ? args.transitDelay : undefined;
            resourceInputs["virtualRouter"] = args ? args.virtualRouter : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OspfAreaInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OspfAreaInterface resources.
 */
export interface OspfAreaInterfaceState {
    /**
     * Auth profile
     */
    authProfile?: pulumi.Input<string>;
    /**
     * BFD profile
     */
    bfdProfile?: pulumi.Input<string>;
    /**
     * Dead counts
     */
    deadCounts?: pulumi.Input<number>;
    /**
     * Enable
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Graceful restart hello delay in seconds
     */
    graceRestartDelay?: pulumi.Input<number>;
    /**
     * Hello interval in seconds
     */
    helloInterval?: pulumi.Input<number>;
    /**
     * Link type
     */
    linkType?: pulumi.Input<string>;
    /**
     * Metric
     */
    metric?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * (p2mp) List of neighbors
     */
    neighbors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The OSPF area name
     */
    ospfArea?: pulumi.Input<string>;
    /**
     * Passive
     */
    passive?: pulumi.Input<boolean>;
    /**
     * Priority
     */
    priority?: pulumi.Input<number>;
    /**
     * Retransmit interval in seconds
     */
    retransmitInterval?: pulumi.Input<number>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * Transit delay in seconds
     */
    transitDelay?: pulumi.Input<number>;
    /**
     * The virtual router
     */
    virtualRouter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OspfAreaInterface resource.
 */
export interface OspfAreaInterfaceArgs {
    /**
     * Auth profile
     */
    authProfile?: pulumi.Input<string>;
    /**
     * BFD profile
     */
    bfdProfile?: pulumi.Input<string>;
    /**
     * Dead counts
     */
    deadCounts?: pulumi.Input<number>;
    /**
     * Enable
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Graceful restart hello delay in seconds
     */
    graceRestartDelay?: pulumi.Input<number>;
    /**
     * Hello interval in seconds
     */
    helloInterval?: pulumi.Input<number>;
    /**
     * Link type
     */
    linkType?: pulumi.Input<string>;
    /**
     * Metric
     */
    metric?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * (p2mp) List of neighbors
     */
    neighbors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The OSPF area name
     */
    ospfArea: pulumi.Input<string>;
    /**
     * Passive
     */
    passive?: pulumi.Input<boolean>;
    /**
     * Priority
     */
    priority?: pulumi.Input<number>;
    /**
     * Retransmit interval in seconds
     */
    retransmitInterval?: pulumi.Input<number>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * Transit delay in seconds
     */
    transitDelay?: pulumi.Input<number>;
    /**
     * The virtual router
     */
    virtualRouter: pulumi.Input<string>;
}
