// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PanoramaGkeCluster extends pulumi.CustomResource {
    /**
     * Get an existing PanoramaGkeCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PanoramaGkeClusterState, opts?: pulumi.CustomResourceOptions): PanoramaGkeCluster {
        return new PanoramaGkeCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/panoramaGkeCluster:PanoramaGkeCluster';

    /**
     * Returns true if the given object is an instance of PanoramaGkeCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PanoramaGkeCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PanoramaGkeCluster.__pulumiType;
    }

    public readonly clusterCredential!: pulumi.Output<string>;
    public readonly gcpZone!: pulumi.Output<string>;
    public readonly gkeClusterGroup!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a PanoramaGkeCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PanoramaGkeClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PanoramaGkeClusterArgs | PanoramaGkeClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PanoramaGkeClusterState | undefined;
            resourceInputs["clusterCredential"] = state ? state.clusterCredential : undefined;
            resourceInputs["gcpZone"] = state ? state.gcpZone : undefined;
            resourceInputs["gkeClusterGroup"] = state ? state.gkeClusterGroup : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as PanoramaGkeClusterArgs | undefined;
            if ((!args || args.clusterCredential === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterCredential'");
            }
            if ((!args || args.gcpZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gcpZone'");
            }
            if ((!args || args.gkeClusterGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gkeClusterGroup'");
            }
            resourceInputs["clusterCredential"] = args ? args.clusterCredential : undefined;
            resourceInputs["gcpZone"] = args ? args.gcpZone : undefined;
            resourceInputs["gkeClusterGroup"] = args ? args.gkeClusterGroup : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PanoramaGkeCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PanoramaGkeCluster resources.
 */
export interface PanoramaGkeClusterState {
    clusterCredential?: pulumi.Input<string>;
    gcpZone?: pulumi.Input<string>;
    gkeClusterGroup?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PanoramaGkeCluster resource.
 */
export interface PanoramaGkeClusterArgs {
    clusterCredential: pulumi.Input<string>;
    gcpZone: pulumi.Input<string>;
    gkeClusterGroup: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
