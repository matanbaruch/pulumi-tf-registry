// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SnmptrapServerProfile extends pulumi.CustomResource {
    /**
     * Get an existing SnmptrapServerProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmptrapServerProfileState, opts?: pulumi.CustomResourceOptions): SnmptrapServerProfile {
        return new SnmptrapServerProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/snmptrapServerProfile:SnmptrapServerProfile';

    /**
     * Returns true if the given object is an instance of SnmptrapServerProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmptrapServerProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmptrapServerProfile.__pulumiType;
    }

    public /*out*/ readonly authPasswordEnc!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly authPasswordRaw!: pulumi.Output<{[key: string]: string}>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly privPasswordEnc!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly privPasswordRaw!: pulumi.Output<{[key: string]: string}>;
    public readonly v2cServers!: pulumi.Output<outputs.SnmptrapServerProfileV2cServer[] | undefined>;
    public readonly v3Servers!: pulumi.Output<outputs.SnmptrapServerProfileV3Server[] | undefined>;
    /**
     * The vsys this object belongs in.
     */
    public readonly vsys!: pulumi.Output<string | undefined>;

    /**
     * Create a SnmptrapServerProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnmptrapServerProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmptrapServerProfileArgs | SnmptrapServerProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmptrapServerProfileState | undefined;
            resourceInputs["authPasswordEnc"] = state ? state.authPasswordEnc : undefined;
            resourceInputs["authPasswordRaw"] = state ? state.authPasswordRaw : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privPasswordEnc"] = state ? state.privPasswordEnc : undefined;
            resourceInputs["privPasswordRaw"] = state ? state.privPasswordRaw : undefined;
            resourceInputs["v2cServers"] = state ? state.v2cServers : undefined;
            resourceInputs["v3Servers"] = state ? state.v3Servers : undefined;
            resourceInputs["vsys"] = state ? state.vsys : undefined;
        } else {
            const args = argsOrState as SnmptrapServerProfileArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["v2cServers"] = args ? args.v2cServers : undefined;
            resourceInputs["v3Servers"] = args ? args.v3Servers : undefined;
            resourceInputs["vsys"] = args ? args.vsys : undefined;
            resourceInputs["authPasswordEnc"] = undefined /*out*/;
            resourceInputs["authPasswordRaw"] = undefined /*out*/;
            resourceInputs["privPasswordEnc"] = undefined /*out*/;
            resourceInputs["privPasswordRaw"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authPasswordEnc", "authPasswordRaw", "privPasswordEnc", "privPasswordRaw"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SnmptrapServerProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmptrapServerProfile resources.
 */
export interface SnmptrapServerProfileState {
    authPasswordEnc?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    authPasswordRaw?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    privPasswordEnc?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    privPasswordRaw?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    v2cServers?: pulumi.Input<pulumi.Input<inputs.SnmptrapServerProfileV2cServer>[]>;
    v3Servers?: pulumi.Input<pulumi.Input<inputs.SnmptrapServerProfileV3Server>[]>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnmptrapServerProfile resource.
 */
export interface SnmptrapServerProfileArgs {
    name?: pulumi.Input<string>;
    v2cServers?: pulumi.Input<pulumi.Input<inputs.SnmptrapServerProfileV2cServer>[]>;
    v3Servers?: pulumi.Input<pulumi.Input<inputs.SnmptrapServerProfileV3Server>[]>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}
