// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    /**
     * Boolean to enable user identification.
     */
    public readonly enableUserId!: pulumi.Output<boolean | undefined>;
    /**
     * Users from these addresses/subnets will not be identified.
     */
    public readonly excludeAcls!: pulumi.Output<string[] | undefined>;
    /**
     * Users from these addresses/subnets will be identified.
     */
    public readonly includeAcls!: pulumi.Output<string[] | undefined>;
    /**
     * List of interfaces associated with this zone. Leave this undefined if you want to use `panos.ZoneEntry` resources.
     */
    public readonly interfaces!: pulumi.Output<string[]>;
    /**
     * Log setting.
     */
    public readonly logSetting!: pulumi.Output<string | undefined>;
    /**
     * The zone mode.
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The template.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * The template stack.
     */
    public readonly templateStack!: pulumi.Output<string | undefined>;
    /**
     * The vsys this object belongs in.
     */
    public readonly vsys!: pulumi.Output<string | undefined>;
    /**
     * The zone protection profile.
     */
    public readonly zoneProfile!: pulumi.Output<string | undefined>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["enableUserId"] = state ? state.enableUserId : undefined;
            resourceInputs["excludeAcls"] = state ? state.excludeAcls : undefined;
            resourceInputs["includeAcls"] = state ? state.includeAcls : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["logSetting"] = state ? state.logSetting : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
            resourceInputs["vsys"] = state ? state.vsys : undefined;
            resourceInputs["zoneProfile"] = state ? state.zoneProfile : undefined;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            resourceInputs["enableUserId"] = args ? args.enableUserId : undefined;
            resourceInputs["excludeAcls"] = args ? args.excludeAcls : undefined;
            resourceInputs["includeAcls"] = args ? args.includeAcls : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["logSetting"] = args ? args.logSetting : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
            resourceInputs["vsys"] = args ? args.vsys : undefined;
            resourceInputs["zoneProfile"] = args ? args.zoneProfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    /**
     * Boolean to enable user identification.
     */
    enableUserId?: pulumi.Input<boolean>;
    /**
     * Users from these addresses/subnets will not be identified.
     */
    excludeAcls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Users from these addresses/subnets will be identified.
     */
    includeAcls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of interfaces associated with this zone. Leave this undefined if you want to use `panos.ZoneEntry` resources.
     */
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Log setting.
     */
    logSetting?: pulumi.Input<string>;
    /**
     * The zone mode.
     */
    mode?: pulumi.Input<string>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
    /**
     * The zone protection profile.
     */
    zoneProfile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    /**
     * Boolean to enable user identification.
     */
    enableUserId?: pulumi.Input<boolean>;
    /**
     * Users from these addresses/subnets will not be identified.
     */
    excludeAcls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Users from these addresses/subnets will be identified.
     */
    includeAcls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of interfaces associated with this zone. Leave this undefined if you want to use `panos.ZoneEntry` resources.
     */
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Log setting.
     */
    logSetting?: pulumi.Input<string>;
    /**
     * The zone mode.
     */
    mode?: pulumi.Input<string>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
    /**
     * The zone protection profile.
     */
    zoneProfile?: pulumi.Input<string>;
}
