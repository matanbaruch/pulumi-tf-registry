// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PanoramaIkeCryptoProfile extends pulumi.CustomResource {
    /**
     * Get an existing PanoramaIkeCryptoProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PanoramaIkeCryptoProfileState, opts?: pulumi.CustomResourceOptions): PanoramaIkeCryptoProfile {
        return new PanoramaIkeCryptoProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/panoramaIkeCryptoProfile:PanoramaIkeCryptoProfile';

    /**
     * Returns true if the given object is an instance of PanoramaIkeCryptoProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PanoramaIkeCryptoProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PanoramaIkeCryptoProfile.__pulumiType;
    }

    public readonly authenticationMultiple!: pulumi.Output<number | undefined>;
    public readonly authentications!: pulumi.Output<string[]>;
    public readonly dhGroups!: pulumi.Output<string[]>;
    public readonly encryptions!: pulumi.Output<string[]>;
    public readonly lifetimeType!: pulumi.Output<string | undefined>;
    public readonly lifetimeValue!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * The template.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * The template stack.
     */
    public readonly templateStack!: pulumi.Output<string | undefined>;

    /**
     * Create a PanoramaIkeCryptoProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PanoramaIkeCryptoProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PanoramaIkeCryptoProfileArgs | PanoramaIkeCryptoProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PanoramaIkeCryptoProfileState | undefined;
            resourceInputs["authenticationMultiple"] = state ? state.authenticationMultiple : undefined;
            resourceInputs["authentications"] = state ? state.authentications : undefined;
            resourceInputs["dhGroups"] = state ? state.dhGroups : undefined;
            resourceInputs["encryptions"] = state ? state.encryptions : undefined;
            resourceInputs["lifetimeType"] = state ? state.lifetimeType : undefined;
            resourceInputs["lifetimeValue"] = state ? state.lifetimeValue : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
        } else {
            const args = argsOrState as PanoramaIkeCryptoProfileArgs | undefined;
            if ((!args || args.authentications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authentications'");
            }
            if ((!args || args.dhGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dhGroups'");
            }
            if ((!args || args.encryptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryptions'");
            }
            resourceInputs["authenticationMultiple"] = args ? args.authenticationMultiple : undefined;
            resourceInputs["authentications"] = args ? args.authentications : undefined;
            resourceInputs["dhGroups"] = args ? args.dhGroups : undefined;
            resourceInputs["encryptions"] = args ? args.encryptions : undefined;
            resourceInputs["lifetimeType"] = args ? args.lifetimeType : undefined;
            resourceInputs["lifetimeValue"] = args ? args.lifetimeValue : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PanoramaIkeCryptoProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PanoramaIkeCryptoProfile resources.
 */
export interface PanoramaIkeCryptoProfileState {
    authenticationMultiple?: pulumi.Input<number>;
    authentications?: pulumi.Input<pulumi.Input<string>[]>;
    dhGroups?: pulumi.Input<pulumi.Input<string>[]>;
    encryptions?: pulumi.Input<pulumi.Input<string>[]>;
    lifetimeType?: pulumi.Input<string>;
    lifetimeValue?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PanoramaIkeCryptoProfile resource.
 */
export interface PanoramaIkeCryptoProfileArgs {
    authenticationMultiple?: pulumi.Input<number>;
    authentications: pulumi.Input<pulumi.Input<string>[]>;
    dhGroups: pulumi.Input<pulumi.Input<string>[]>;
    encryptions: pulumi.Input<pulumi.Input<string>[]>;
    lifetimeType?: pulumi.Input<string>;
    lifetimeValue?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
}
