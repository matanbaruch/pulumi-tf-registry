// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AddressGroupArgs, AddressGroupState } from "./addressGroup";
export type AddressGroup = import("./addressGroup").AddressGroup;
export const AddressGroup: typeof import("./addressGroup").AddressGroup = null as any;
utilities.lazyLoad(exports, ["AddressGroup"], () => require("./addressGroup"));

export { AddressObjectArgs, AddressObjectState } from "./addressObject";
export type AddressObject = import("./addressObject").AddressObject;
export const AddressObject: typeof import("./addressObject").AddressObject = null as any;
utilities.lazyLoad(exports, ["AddressObject"], () => require("./addressObject"));

export { AddressObjectsArgs, AddressObjectsState } from "./addressObjects";
export type AddressObjects = import("./addressObjects").AddressObjects;
export const AddressObjects: typeof import("./addressObjects").AddressObjects = null as any;
utilities.lazyLoad(exports, ["AddressObjects"], () => require("./addressObjects"));

export { AdministrativeTagArgs, AdministrativeTagState } from "./administrativeTag";
export type AdministrativeTag = import("./administrativeTag").AdministrativeTag;
export const AdministrativeTag: typeof import("./administrativeTag").AdministrativeTag = null as any;
utilities.lazyLoad(exports, ["AdministrativeTag"], () => require("./administrativeTag"));

export { AggregateInterfaceArgs, AggregateInterfaceState } from "./aggregateInterface";
export type AggregateInterface = import("./aggregateInterface").AggregateInterface;
export const AggregateInterface: typeof import("./aggregateInterface").AggregateInterface = null as any;
utilities.lazyLoad(exports, ["AggregateInterface"], () => require("./aggregateInterface"));

export { AntiSpywareSecurityProfileArgs, AntiSpywareSecurityProfileState } from "./antiSpywareSecurityProfile";
export type AntiSpywareSecurityProfile = import("./antiSpywareSecurityProfile").AntiSpywareSecurityProfile;
export const AntiSpywareSecurityProfile: typeof import("./antiSpywareSecurityProfile").AntiSpywareSecurityProfile = null as any;
utilities.lazyLoad(exports, ["AntiSpywareSecurityProfile"], () => require("./antiSpywareSecurityProfile"));

export { AntivirusSecurityProfileArgs, AntivirusSecurityProfileState } from "./antivirusSecurityProfile";
export type AntivirusSecurityProfile = import("./antivirusSecurityProfile").AntivirusSecurityProfile;
export const AntivirusSecurityProfile: typeof import("./antivirusSecurityProfile").AntivirusSecurityProfile = null as any;
utilities.lazyLoad(exports, ["AntivirusSecurityProfile"], () => require("./antivirusSecurityProfile"));

export { ApplicationGroupArgs, ApplicationGroupState } from "./applicationGroup";
export type ApplicationGroup = import("./applicationGroup").ApplicationGroup;
export const ApplicationGroup: typeof import("./applicationGroup").ApplicationGroup = null as any;
utilities.lazyLoad(exports, ["ApplicationGroup"], () => require("./applicationGroup"));

export { ApplicationObjectArgs, ApplicationObjectState } from "./applicationObject";
export type ApplicationObject = import("./applicationObject").ApplicationObject;
export const ApplicationObject: typeof import("./applicationObject").ApplicationObject = null as any;
utilities.lazyLoad(exports, ["ApplicationObject"], () => require("./applicationObject"));

export { ApplicationSignatureArgs, ApplicationSignatureState } from "./applicationSignature";
export type ApplicationSignature = import("./applicationSignature").ApplicationSignature;
export const ApplicationSignature: typeof import("./applicationSignature").ApplicationSignature = null as any;
utilities.lazyLoad(exports, ["ApplicationSignature"], () => require("./applicationSignature"));

export { ArpArgs, ArpState } from "./arp";
export type Arp = import("./arp").Arp;
export const Arp: typeof import("./arp").Arp = null as any;
utilities.lazyLoad(exports, ["Arp"], () => require("./arp"));

export { AuthenticationProfileArgs, AuthenticationProfileState } from "./authenticationProfile";
export type AuthenticationProfile = import("./authenticationProfile").AuthenticationProfile;
export const AuthenticationProfile: typeof import("./authenticationProfile").AuthenticationProfile = null as any;
utilities.lazyLoad(exports, ["AuthenticationProfile"], () => require("./authenticationProfile"));

export { AwsCloudWatchArgs, AwsCloudWatchState } from "./awsCloudWatch";
export type AwsCloudWatch = import("./awsCloudWatch").AwsCloudWatch;
export const AwsCloudWatch: typeof import("./awsCloudWatch").AwsCloudWatch = null as any;
utilities.lazyLoad(exports, ["AwsCloudWatch"], () => require("./awsCloudWatch"));

export { BfdProfileArgs, BfdProfileState } from "./bfdProfile";
export type BfdProfile = import("./bfdProfile").BfdProfile;
export const BfdProfile: typeof import("./bfdProfile").BfdProfile = null as any;
utilities.lazyLoad(exports, ["BfdProfile"], () => require("./bfdProfile"));

export { BgpArgs, BgpState } from "./bgp";
export type Bgp = import("./bgp").Bgp;
export const Bgp: typeof import("./bgp").Bgp = null as any;
utilities.lazyLoad(exports, ["Bgp"], () => require("./bgp"));

export { BgpAggregateArgs, BgpAggregateState } from "./bgpAggregate";
export type BgpAggregate = import("./bgpAggregate").BgpAggregate;
export const BgpAggregate: typeof import("./bgpAggregate").BgpAggregate = null as any;
utilities.lazyLoad(exports, ["BgpAggregate"], () => require("./bgpAggregate"));

export { BgpAggregateAdvertiseFilterArgs, BgpAggregateAdvertiseFilterState } from "./bgpAggregateAdvertiseFilter";
export type BgpAggregateAdvertiseFilter = import("./bgpAggregateAdvertiseFilter").BgpAggregateAdvertiseFilter;
export const BgpAggregateAdvertiseFilter: typeof import("./bgpAggregateAdvertiseFilter").BgpAggregateAdvertiseFilter = null as any;
utilities.lazyLoad(exports, ["BgpAggregateAdvertiseFilter"], () => require("./bgpAggregateAdvertiseFilter"));

export { BgpAggregateSuppressFilterArgs, BgpAggregateSuppressFilterState } from "./bgpAggregateSuppressFilter";
export type BgpAggregateSuppressFilter = import("./bgpAggregateSuppressFilter").BgpAggregateSuppressFilter;
export const BgpAggregateSuppressFilter: typeof import("./bgpAggregateSuppressFilter").BgpAggregateSuppressFilter = null as any;
utilities.lazyLoad(exports, ["BgpAggregateSuppressFilter"], () => require("./bgpAggregateSuppressFilter"));

export { BgpAuthProfileArgs, BgpAuthProfileState } from "./bgpAuthProfile";
export type BgpAuthProfile = import("./bgpAuthProfile").BgpAuthProfile;
export const BgpAuthProfile: typeof import("./bgpAuthProfile").BgpAuthProfile = null as any;
utilities.lazyLoad(exports, ["BgpAuthProfile"], () => require("./bgpAuthProfile"));

export { BgpConditionalAdvArgs, BgpConditionalAdvState } from "./bgpConditionalAdv";
export type BgpConditionalAdv = import("./bgpConditionalAdv").BgpConditionalAdv;
export const BgpConditionalAdv: typeof import("./bgpConditionalAdv").BgpConditionalAdv = null as any;
utilities.lazyLoad(exports, ["BgpConditionalAdv"], () => require("./bgpConditionalAdv"));

export { BgpConditionalAdvAdvertiseFilterArgs, BgpConditionalAdvAdvertiseFilterState } from "./bgpConditionalAdvAdvertiseFilter";
export type BgpConditionalAdvAdvertiseFilter = import("./bgpConditionalAdvAdvertiseFilter").BgpConditionalAdvAdvertiseFilter;
export const BgpConditionalAdvAdvertiseFilter: typeof import("./bgpConditionalAdvAdvertiseFilter").BgpConditionalAdvAdvertiseFilter = null as any;
utilities.lazyLoad(exports, ["BgpConditionalAdvAdvertiseFilter"], () => require("./bgpConditionalAdvAdvertiseFilter"));

export { BgpConditionalAdvNonExistFilterArgs, BgpConditionalAdvNonExistFilterState } from "./bgpConditionalAdvNonExistFilter";
export type BgpConditionalAdvNonExistFilter = import("./bgpConditionalAdvNonExistFilter").BgpConditionalAdvNonExistFilter;
export const BgpConditionalAdvNonExistFilter: typeof import("./bgpConditionalAdvNonExistFilter").BgpConditionalAdvNonExistFilter = null as any;
utilities.lazyLoad(exports, ["BgpConditionalAdvNonExistFilter"], () => require("./bgpConditionalAdvNonExistFilter"));

export { BgpDampeningProfileArgs, BgpDampeningProfileState } from "./bgpDampeningProfile";
export type BgpDampeningProfile = import("./bgpDampeningProfile").BgpDampeningProfile;
export const BgpDampeningProfile: typeof import("./bgpDampeningProfile").BgpDampeningProfile = null as any;
utilities.lazyLoad(exports, ["BgpDampeningProfile"], () => require("./bgpDampeningProfile"));

export { BgpExportRuleGroupArgs, BgpExportRuleGroupState } from "./bgpExportRuleGroup";
export type BgpExportRuleGroup = import("./bgpExportRuleGroup").BgpExportRuleGroup;
export const BgpExportRuleGroup: typeof import("./bgpExportRuleGroup").BgpExportRuleGroup = null as any;
utilities.lazyLoad(exports, ["BgpExportRuleGroup"], () => require("./bgpExportRuleGroup"));

export { BgpImportRuleGroupArgs, BgpImportRuleGroupState } from "./bgpImportRuleGroup";
export type BgpImportRuleGroup = import("./bgpImportRuleGroup").BgpImportRuleGroup;
export const BgpImportRuleGroup: typeof import("./bgpImportRuleGroup").BgpImportRuleGroup = null as any;
utilities.lazyLoad(exports, ["BgpImportRuleGroup"], () => require("./bgpImportRuleGroup"));

export { BgpPeerArgs, BgpPeerState } from "./bgpPeer";
export type BgpPeer = import("./bgpPeer").BgpPeer;
export const BgpPeer: typeof import("./bgpPeer").BgpPeer = null as any;
utilities.lazyLoad(exports, ["BgpPeer"], () => require("./bgpPeer"));

export { BgpPeerGroupArgs, BgpPeerGroupState } from "./bgpPeerGroup";
export type BgpPeerGroup = import("./bgpPeerGroup").BgpPeerGroup;
export const BgpPeerGroup: typeof import("./bgpPeerGroup").BgpPeerGroup = null as any;
utilities.lazyLoad(exports, ["BgpPeerGroup"], () => require("./bgpPeerGroup"));

export { BgpRedistRuleArgs, BgpRedistRuleState } from "./bgpRedistRule";
export type BgpRedistRule = import("./bgpRedistRule").BgpRedistRule;
export const BgpRedistRule: typeof import("./bgpRedistRule").BgpRedistRule = null as any;
utilities.lazyLoad(exports, ["BgpRedistRule"], () => require("./bgpRedistRule"));

export { CertificateImportArgs, CertificateImportState } from "./certificateImport";
export type CertificateImport = import("./certificateImport").CertificateImport;
export const CertificateImport: typeof import("./certificateImport").CertificateImport = null as any;
utilities.lazyLoad(exports, ["CertificateImport"], () => require("./certificateImport"));

export { CertificateProfileArgs, CertificateProfileState } from "./certificateProfile";
export type CertificateProfile = import("./certificateProfile").CertificateProfile;
export const CertificateProfile: typeof import("./certificateProfile").CertificateProfile = null as any;
utilities.lazyLoad(exports, ["CertificateProfile"], () => require("./certificateProfile"));

export { CustomDataPatternObjectArgs, CustomDataPatternObjectState } from "./customDataPatternObject";
export type CustomDataPatternObject = import("./customDataPatternObject").CustomDataPatternObject;
export const CustomDataPatternObject: typeof import("./customDataPatternObject").CustomDataPatternObject = null as any;
utilities.lazyLoad(exports, ["CustomDataPatternObject"], () => require("./customDataPatternObject"));

export { CustomUrlCategoryArgs, CustomUrlCategoryState } from "./customUrlCategory";
export type CustomUrlCategory = import("./customUrlCategory").CustomUrlCategory;
export const CustomUrlCategory: typeof import("./customUrlCategory").CustomUrlCategory = null as any;
utilities.lazyLoad(exports, ["CustomUrlCategory"], () => require("./customUrlCategory"));

export { CustomUrlCategoryEntryArgs, CustomUrlCategoryEntryState } from "./customUrlCategoryEntry";
export type CustomUrlCategoryEntry = import("./customUrlCategoryEntry").CustomUrlCategoryEntry;
export const CustomUrlCategoryEntry: typeof import("./customUrlCategoryEntry").CustomUrlCategoryEntry = null as any;
utilities.lazyLoad(exports, ["CustomUrlCategoryEntry"], () => require("./customUrlCategoryEntry"));

export { DagTagsArgs, DagTagsState } from "./dagTags";
export type DagTags = import("./dagTags").DagTags;
export const DagTags: typeof import("./dagTags").DagTags = null as any;
utilities.lazyLoad(exports, ["DagTags"], () => require("./dagTags"));

export { DataFilteringSecurityProfileArgs, DataFilteringSecurityProfileState } from "./dataFilteringSecurityProfile";
export type DataFilteringSecurityProfile = import("./dataFilteringSecurityProfile").DataFilteringSecurityProfile;
export const DataFilteringSecurityProfile: typeof import("./dataFilteringSecurityProfile").DataFilteringSecurityProfile = null as any;
utilities.lazyLoad(exports, ["DataFilteringSecurityProfile"], () => require("./dataFilteringSecurityProfile"));

export { DecryptionRuleGroupArgs, DecryptionRuleGroupState } from "./decryptionRuleGroup";
export type DecryptionRuleGroup = import("./decryptionRuleGroup").DecryptionRuleGroup;
export const DecryptionRuleGroup: typeof import("./decryptionRuleGroup").DecryptionRuleGroup = null as any;
utilities.lazyLoad(exports, ["DecryptionRuleGroup"], () => require("./decryptionRuleGroup"));

export { DeviceGroupArgs, DeviceGroupState } from "./deviceGroup";
export type DeviceGroup = import("./deviceGroup").DeviceGroup;
export const DeviceGroup: typeof import("./deviceGroup").DeviceGroup = null as any;
utilities.lazyLoad(exports, ["DeviceGroup"], () => require("./deviceGroup"));

export { DeviceGroupEntryArgs, DeviceGroupEntryState } from "./deviceGroupEntry";
export type DeviceGroupEntry = import("./deviceGroupEntry").DeviceGroupEntry;
export const DeviceGroupEntry: typeof import("./deviceGroupEntry").DeviceGroupEntry = null as any;
utilities.lazyLoad(exports, ["DeviceGroupEntry"], () => require("./deviceGroupEntry"));

export { DeviceGroupParentArgs, DeviceGroupParentState } from "./deviceGroupParent";
export type DeviceGroupParent = import("./deviceGroupParent").DeviceGroupParent;
export const DeviceGroupParent: typeof import("./deviceGroupParent").DeviceGroupParent = null as any;
utilities.lazyLoad(exports, ["DeviceGroupParent"], () => require("./deviceGroupParent"));

export { DosProtectionProfileArgs, DosProtectionProfileState } from "./dosProtectionProfile";
export type DosProtectionProfile = import("./dosProtectionProfile").DosProtectionProfile;
export const DosProtectionProfile: typeof import("./dosProtectionProfile").DosProtectionProfile = null as any;
utilities.lazyLoad(exports, ["DosProtectionProfile"], () => require("./dosProtectionProfile"));

export { DynamicUserGroupArgs, DynamicUserGroupState } from "./dynamicUserGroup";
export type DynamicUserGroup = import("./dynamicUserGroup").DynamicUserGroup;
export const DynamicUserGroup: typeof import("./dynamicUserGroup").DynamicUserGroup = null as any;
utilities.lazyLoad(exports, ["DynamicUserGroup"], () => require("./dynamicUserGroup"));

export { EdlArgs, EdlState } from "./edl";
export type Edl = import("./edl").Edl;
export const Edl: typeof import("./edl").Edl = null as any;
utilities.lazyLoad(exports, ["Edl"], () => require("./edl"));

export { EmailServerProfileArgs, EmailServerProfileState } from "./emailServerProfile";
export type EmailServerProfile = import("./emailServerProfile").EmailServerProfile;
export const EmailServerProfile: typeof import("./emailServerProfile").EmailServerProfile = null as any;
utilities.lazyLoad(exports, ["EmailServerProfile"], () => require("./emailServerProfile"));

export { EthernetInterfaceArgs, EthernetInterfaceState } from "./ethernetInterface";
export type EthernetInterface = import("./ethernetInterface").EthernetInterface;
export const EthernetInterface: typeof import("./ethernetInterface").EthernetInterface = null as any;
utilities.lazyLoad(exports, ["EthernetInterface"], () => require("./ethernetInterface"));

export { FileBlockingSecurityProfileArgs, FileBlockingSecurityProfileState } from "./fileBlockingSecurityProfile";
export type FileBlockingSecurityProfile = import("./fileBlockingSecurityProfile").FileBlockingSecurityProfile;
export const FileBlockingSecurityProfile: typeof import("./fileBlockingSecurityProfile").FileBlockingSecurityProfile = null as any;
utilities.lazyLoad(exports, ["FileBlockingSecurityProfile"], () => require("./fileBlockingSecurityProfile"));

export { GeneralSettingsArgs, GeneralSettingsState } from "./generalSettings";
export type GeneralSettings = import("./generalSettings").GeneralSettings;
export const GeneralSettings: typeof import("./generalSettings").GeneralSettings = null as any;
utilities.lazyLoad(exports, ["GeneralSettings"], () => require("./generalSettings"));

export { GetAddressObjectArgs, GetAddressObjectResult, GetAddressObjectOutputArgs } from "./getAddressObject";
export const getAddressObject: typeof import("./getAddressObject").getAddressObject = null as any;
export const getAddressObjectOutput: typeof import("./getAddressObject").getAddressObjectOutput = null as any;
utilities.lazyLoad(exports, ["getAddressObject","getAddressObjectOutput"], () => require("./getAddressObject"));

export { GetAddressObjectsArgs, GetAddressObjectsResult, GetAddressObjectsOutputArgs } from "./getAddressObjects";
export const getAddressObjects: typeof import("./getAddressObjects").getAddressObjects = null as any;
export const getAddressObjectsOutput: typeof import("./getAddressObjects").getAddressObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getAddressObjects","getAddressObjectsOutput"], () => require("./getAddressObjects"));

export { GetAntiSpywareSecurityProfileArgs, GetAntiSpywareSecurityProfileResult, GetAntiSpywareSecurityProfileOutputArgs } from "./getAntiSpywareSecurityProfile";
export const getAntiSpywareSecurityProfile: typeof import("./getAntiSpywareSecurityProfile").getAntiSpywareSecurityProfile = null as any;
export const getAntiSpywareSecurityProfileOutput: typeof import("./getAntiSpywareSecurityProfile").getAntiSpywareSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAntiSpywareSecurityProfile","getAntiSpywareSecurityProfileOutput"], () => require("./getAntiSpywareSecurityProfile"));

export { GetAntiSpywareSecurityProfilesArgs, GetAntiSpywareSecurityProfilesResult, GetAntiSpywareSecurityProfilesOutputArgs } from "./getAntiSpywareSecurityProfiles";
export const getAntiSpywareSecurityProfiles: typeof import("./getAntiSpywareSecurityProfiles").getAntiSpywareSecurityProfiles = null as any;
export const getAntiSpywareSecurityProfilesOutput: typeof import("./getAntiSpywareSecurityProfiles").getAntiSpywareSecurityProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getAntiSpywareSecurityProfiles","getAntiSpywareSecurityProfilesOutput"], () => require("./getAntiSpywareSecurityProfiles"));

export { GetAntivirusSecurityProfileArgs, GetAntivirusSecurityProfileResult, GetAntivirusSecurityProfileOutputArgs } from "./getAntivirusSecurityProfile";
export const getAntivirusSecurityProfile: typeof import("./getAntivirusSecurityProfile").getAntivirusSecurityProfile = null as any;
export const getAntivirusSecurityProfileOutput: typeof import("./getAntivirusSecurityProfile").getAntivirusSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAntivirusSecurityProfile","getAntivirusSecurityProfileOutput"], () => require("./getAntivirusSecurityProfile"));

export { GetAntivirusSecurityProfilesArgs, GetAntivirusSecurityProfilesResult, GetAntivirusSecurityProfilesOutputArgs } from "./getAntivirusSecurityProfiles";
export const getAntivirusSecurityProfiles: typeof import("./getAntivirusSecurityProfiles").getAntivirusSecurityProfiles = null as any;
export const getAntivirusSecurityProfilesOutput: typeof import("./getAntivirusSecurityProfiles").getAntivirusSecurityProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getAntivirusSecurityProfiles","getAntivirusSecurityProfilesOutput"], () => require("./getAntivirusSecurityProfiles"));

export { GetApiKeyArgs, GetApiKeyResult, GetApiKeyOutputArgs } from "./getApiKey";
export const getApiKey: typeof import("./getApiKey").getApiKey = null as any;
export const getApiKeyOutput: typeof import("./getApiKey").getApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getApiKey","getApiKeyOutput"], () => require("./getApiKey"));

export { GetApplicationObjectArgs, GetApplicationObjectResult, GetApplicationObjectOutputArgs } from "./getApplicationObject";
export const getApplicationObject: typeof import("./getApplicationObject").getApplicationObject = null as any;
export const getApplicationObjectOutput: typeof import("./getApplicationObject").getApplicationObjectOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationObject","getApplicationObjectOutput"], () => require("./getApplicationObject"));

export { GetApplicationObjectsArgs, GetApplicationObjectsResult, GetApplicationObjectsOutputArgs } from "./getApplicationObjects";
export const getApplicationObjects: typeof import("./getApplicationObjects").getApplicationObjects = null as any;
export const getApplicationObjectsOutput: typeof import("./getApplicationObjects").getApplicationObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationObjects","getApplicationObjectsOutput"], () => require("./getApplicationObjects"));

export { GetArpArgs, GetArpResult, GetArpOutputArgs } from "./getArp";
export const getArp: typeof import("./getArp").getArp = null as any;
export const getArpOutput: typeof import("./getArp").getArpOutput = null as any;
utilities.lazyLoad(exports, ["getArp","getArpOutput"], () => require("./getArp"));

export { GetArpsArgs, GetArpsResult, GetArpsOutputArgs } from "./getArps";
export const getArps: typeof import("./getArps").getArps = null as any;
export const getArpsOutput: typeof import("./getArps").getArpsOutput = null as any;
utilities.lazyLoad(exports, ["getArps","getArpsOutput"], () => require("./getArps"));

export { GetAuditCommentHistoryArgs, GetAuditCommentHistoryResult, GetAuditCommentHistoryOutputArgs } from "./getAuditCommentHistory";
export const getAuditCommentHistory: typeof import("./getAuditCommentHistory").getAuditCommentHistory = null as any;
export const getAuditCommentHistoryOutput: typeof import("./getAuditCommentHistory").getAuditCommentHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getAuditCommentHistory","getAuditCommentHistoryOutput"], () => require("./getAuditCommentHistory"));

export { GetAuthenticationProfilesArgs, GetAuthenticationProfilesResult, GetAuthenticationProfilesOutputArgs } from "./getAuthenticationProfiles";
export const getAuthenticationProfiles: typeof import("./getAuthenticationProfiles").getAuthenticationProfiles = null as any;
export const getAuthenticationProfilesOutput: typeof import("./getAuthenticationProfiles").getAuthenticationProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationProfiles","getAuthenticationProfilesOutput"], () => require("./getAuthenticationProfiles"));

export { GetCertificateProfileArgs, GetCertificateProfileResult, GetCertificateProfileOutputArgs } from "./getCertificateProfile";
export const getCertificateProfile: typeof import("./getCertificateProfile").getCertificateProfile = null as any;
export const getCertificateProfileOutput: typeof import("./getCertificateProfile").getCertificateProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateProfile","getCertificateProfileOutput"], () => require("./getCertificateProfile"));

export { GetCertificateProfilesArgs, GetCertificateProfilesResult, GetCertificateProfilesOutputArgs } from "./getCertificateProfiles";
export const getCertificateProfiles: typeof import("./getCertificateProfiles").getCertificateProfiles = null as any;
export const getCertificateProfilesOutput: typeof import("./getCertificateProfiles").getCertificateProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateProfiles","getCertificateProfilesOutput"], () => require("./getCertificateProfiles"));

export { GetCustomDataPatternObjectArgs, GetCustomDataPatternObjectResult, GetCustomDataPatternObjectOutputArgs } from "./getCustomDataPatternObject";
export const getCustomDataPatternObject: typeof import("./getCustomDataPatternObject").getCustomDataPatternObject = null as any;
export const getCustomDataPatternObjectOutput: typeof import("./getCustomDataPatternObject").getCustomDataPatternObjectOutput = null as any;
utilities.lazyLoad(exports, ["getCustomDataPatternObject","getCustomDataPatternObjectOutput"], () => require("./getCustomDataPatternObject"));

export { GetCustomDataPatternObjectsArgs, GetCustomDataPatternObjectsResult, GetCustomDataPatternObjectsOutputArgs } from "./getCustomDataPatternObjects";
export const getCustomDataPatternObjects: typeof import("./getCustomDataPatternObjects").getCustomDataPatternObjects = null as any;
export const getCustomDataPatternObjectsOutput: typeof import("./getCustomDataPatternObjects").getCustomDataPatternObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getCustomDataPatternObjects","getCustomDataPatternObjectsOutput"], () => require("./getCustomDataPatternObjects"));

export { GetCustomUrlCategoriesArgs, GetCustomUrlCategoriesResult, GetCustomUrlCategoriesOutputArgs } from "./getCustomUrlCategories";
export const getCustomUrlCategories: typeof import("./getCustomUrlCategories").getCustomUrlCategories = null as any;
export const getCustomUrlCategoriesOutput: typeof import("./getCustomUrlCategories").getCustomUrlCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getCustomUrlCategories","getCustomUrlCategoriesOutput"], () => require("./getCustomUrlCategories"));

export { GetCustomUrlCategoryArgs, GetCustomUrlCategoryResult, GetCustomUrlCategoryOutputArgs } from "./getCustomUrlCategory";
export const getCustomUrlCategory: typeof import("./getCustomUrlCategory").getCustomUrlCategory = null as any;
export const getCustomUrlCategoryOutput: typeof import("./getCustomUrlCategory").getCustomUrlCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getCustomUrlCategory","getCustomUrlCategoryOutput"], () => require("./getCustomUrlCategory"));

export { GetDataFilteringSecurityProfileArgs, GetDataFilteringSecurityProfileResult, GetDataFilteringSecurityProfileOutputArgs } from "./getDataFilteringSecurityProfile";
export const getDataFilteringSecurityProfile: typeof import("./getDataFilteringSecurityProfile").getDataFilteringSecurityProfile = null as any;
export const getDataFilteringSecurityProfileOutput: typeof import("./getDataFilteringSecurityProfile").getDataFilteringSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDataFilteringSecurityProfile","getDataFilteringSecurityProfileOutput"], () => require("./getDataFilteringSecurityProfile"));

export { GetDataFilteringSecurityProfilesArgs, GetDataFilteringSecurityProfilesResult, GetDataFilteringSecurityProfilesOutputArgs } from "./getDataFilteringSecurityProfiles";
export const getDataFilteringSecurityProfiles: typeof import("./getDataFilteringSecurityProfiles").getDataFilteringSecurityProfiles = null as any;
export const getDataFilteringSecurityProfilesOutput: typeof import("./getDataFilteringSecurityProfiles").getDataFilteringSecurityProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getDataFilteringSecurityProfiles","getDataFilteringSecurityProfilesOutput"], () => require("./getDataFilteringSecurityProfiles"));

export { GetDecryptionRuleArgs, GetDecryptionRuleResult, GetDecryptionRuleOutputArgs } from "./getDecryptionRule";
export const getDecryptionRule: typeof import("./getDecryptionRule").getDecryptionRule = null as any;
export const getDecryptionRuleOutput: typeof import("./getDecryptionRule").getDecryptionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getDecryptionRule","getDecryptionRuleOutput"], () => require("./getDecryptionRule"));

export { GetDecryptionRulesArgs, GetDecryptionRulesResult, GetDecryptionRulesOutputArgs } from "./getDecryptionRules";
export const getDecryptionRules: typeof import("./getDecryptionRules").getDecryptionRules = null as any;
export const getDecryptionRulesOutput: typeof import("./getDecryptionRules").getDecryptionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getDecryptionRules","getDecryptionRulesOutput"], () => require("./getDecryptionRules"));

export { GetDeviceGroupArgs, GetDeviceGroupResult, GetDeviceGroupOutputArgs } from "./getDeviceGroup";
export const getDeviceGroup: typeof import("./getDeviceGroup").getDeviceGroup = null as any;
export const getDeviceGroupOutput: typeof import("./getDeviceGroup").getDeviceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceGroup","getDeviceGroupOutput"], () => require("./getDeviceGroup"));

export { GetDeviceGroupParentArgs, GetDeviceGroupParentResult, GetDeviceGroupParentOutputArgs } from "./getDeviceGroupParent";
export const getDeviceGroupParent: typeof import("./getDeviceGroupParent").getDeviceGroupParent = null as any;
export const getDeviceGroupParentOutput: typeof import("./getDeviceGroupParent").getDeviceGroupParentOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceGroupParent","getDeviceGroupParentOutput"], () => require("./getDeviceGroupParent"));

export { GetDeviceGroupsArgs, GetDeviceGroupsResult, GetDeviceGroupsOutputArgs } from "./getDeviceGroups";
export const getDeviceGroups: typeof import("./getDeviceGroups").getDeviceGroups = null as any;
export const getDeviceGroupsOutput: typeof import("./getDeviceGroups").getDeviceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceGroups","getDeviceGroupsOutput"], () => require("./getDeviceGroups"));

export { GetDhcpInterfaceInfoArgs, GetDhcpInterfaceInfoResult, GetDhcpInterfaceInfoOutputArgs } from "./getDhcpInterfaceInfo";
export const getDhcpInterfaceInfo: typeof import("./getDhcpInterfaceInfo").getDhcpInterfaceInfo = null as any;
export const getDhcpInterfaceInfoOutput: typeof import("./getDhcpInterfaceInfo").getDhcpInterfaceInfoOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpInterfaceInfo","getDhcpInterfaceInfoOutput"], () => require("./getDhcpInterfaceInfo"));

export { GetDosProtectionProfileArgs, GetDosProtectionProfileResult, GetDosProtectionProfileOutputArgs } from "./getDosProtectionProfile";
export const getDosProtectionProfile: typeof import("./getDosProtectionProfile").getDosProtectionProfile = null as any;
export const getDosProtectionProfileOutput: typeof import("./getDosProtectionProfile").getDosProtectionProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDosProtectionProfile","getDosProtectionProfileOutput"], () => require("./getDosProtectionProfile"));

export { GetDosProtectionProfilesArgs, GetDosProtectionProfilesResult, GetDosProtectionProfilesOutputArgs } from "./getDosProtectionProfiles";
export const getDosProtectionProfiles: typeof import("./getDosProtectionProfiles").getDosProtectionProfiles = null as any;
export const getDosProtectionProfilesOutput: typeof import("./getDosProtectionProfiles").getDosProtectionProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getDosProtectionProfiles","getDosProtectionProfilesOutput"], () => require("./getDosProtectionProfiles"));

export { GetDynamicUserGroupArgs, GetDynamicUserGroupResult, GetDynamicUserGroupOutputArgs } from "./getDynamicUserGroup";
export const getDynamicUserGroup: typeof import("./getDynamicUserGroup").getDynamicUserGroup = null as any;
export const getDynamicUserGroupOutput: typeof import("./getDynamicUserGroup").getDynamicUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicUserGroup","getDynamicUserGroupOutput"], () => require("./getDynamicUserGroup"));

export { GetDynamicUserGroupsArgs, GetDynamicUserGroupsResult, GetDynamicUserGroupsOutputArgs } from "./getDynamicUserGroups";
export const getDynamicUserGroups: typeof import("./getDynamicUserGroups").getDynamicUserGroups = null as any;
export const getDynamicUserGroupsOutput: typeof import("./getDynamicUserGroups").getDynamicUserGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicUserGroups","getDynamicUserGroupsOutput"], () => require("./getDynamicUserGroups"));

export { GetEdlArgs, GetEdlResult, GetEdlOutputArgs } from "./getEdl";
export const getEdl: typeof import("./getEdl").getEdl = null as any;
export const getEdlOutput: typeof import("./getEdl").getEdlOutput = null as any;
utilities.lazyLoad(exports, ["getEdl","getEdlOutput"], () => require("./getEdl"));

export { GetEdlsArgs, GetEdlsResult, GetEdlsOutputArgs } from "./getEdls";
export const getEdls: typeof import("./getEdls").getEdls = null as any;
export const getEdlsOutput: typeof import("./getEdls").getEdlsOutput = null as any;
utilities.lazyLoad(exports, ["getEdls","getEdlsOutput"], () => require("./getEdls"));

export { GetEmailServerProfileArgs, GetEmailServerProfileResult, GetEmailServerProfileOutputArgs } from "./getEmailServerProfile";
export const getEmailServerProfile: typeof import("./getEmailServerProfile").getEmailServerProfile = null as any;
export const getEmailServerProfileOutput: typeof import("./getEmailServerProfile").getEmailServerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getEmailServerProfile","getEmailServerProfileOutput"], () => require("./getEmailServerProfile"));

export { GetEmailServerProfilesArgs, GetEmailServerProfilesResult, GetEmailServerProfilesOutputArgs } from "./getEmailServerProfiles";
export const getEmailServerProfiles: typeof import("./getEmailServerProfiles").getEmailServerProfiles = null as any;
export const getEmailServerProfilesOutput: typeof import("./getEmailServerProfiles").getEmailServerProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getEmailServerProfiles","getEmailServerProfilesOutput"], () => require("./getEmailServerProfiles"));

export { GetFileBlockingSecurityProfileArgs, GetFileBlockingSecurityProfileResult, GetFileBlockingSecurityProfileOutputArgs } from "./getFileBlockingSecurityProfile";
export const getFileBlockingSecurityProfile: typeof import("./getFileBlockingSecurityProfile").getFileBlockingSecurityProfile = null as any;
export const getFileBlockingSecurityProfileOutput: typeof import("./getFileBlockingSecurityProfile").getFileBlockingSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getFileBlockingSecurityProfile","getFileBlockingSecurityProfileOutput"], () => require("./getFileBlockingSecurityProfile"));

export { GetFileBlockingSecurityProfilesArgs, GetFileBlockingSecurityProfilesResult, GetFileBlockingSecurityProfilesOutputArgs } from "./getFileBlockingSecurityProfiles";
export const getFileBlockingSecurityProfiles: typeof import("./getFileBlockingSecurityProfiles").getFileBlockingSecurityProfiles = null as any;
export const getFileBlockingSecurityProfilesOutput: typeof import("./getFileBlockingSecurityProfiles").getFileBlockingSecurityProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getFileBlockingSecurityProfiles","getFileBlockingSecurityProfilesOutput"], () => require("./getFileBlockingSecurityProfiles"));

export { GetGlobalprotectIpsecCryptoProfileArgs, GetGlobalprotectIpsecCryptoProfileResult, GetGlobalprotectIpsecCryptoProfileOutputArgs } from "./getGlobalprotectIpsecCryptoProfile";
export const getGlobalprotectIpsecCryptoProfile: typeof import("./getGlobalprotectIpsecCryptoProfile").getGlobalprotectIpsecCryptoProfile = null as any;
export const getGlobalprotectIpsecCryptoProfileOutput: typeof import("./getGlobalprotectIpsecCryptoProfile").getGlobalprotectIpsecCryptoProfileOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalprotectIpsecCryptoProfile","getGlobalprotectIpsecCryptoProfileOutput"], () => require("./getGlobalprotectIpsecCryptoProfile"));

export { GetGlobalprotectIpsecCryptoProfilesArgs, GetGlobalprotectIpsecCryptoProfilesResult, GetGlobalprotectIpsecCryptoProfilesOutputArgs } from "./getGlobalprotectIpsecCryptoProfiles";
export const getGlobalprotectIpsecCryptoProfiles: typeof import("./getGlobalprotectIpsecCryptoProfiles").getGlobalprotectIpsecCryptoProfiles = null as any;
export const getGlobalprotectIpsecCryptoProfilesOutput: typeof import("./getGlobalprotectIpsecCryptoProfiles").getGlobalprotectIpsecCryptoProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalprotectIpsecCryptoProfiles","getGlobalprotectIpsecCryptoProfilesOutput"], () => require("./getGlobalprotectIpsecCryptoProfiles"));

export { GetIpTagArgs, GetIpTagResult, GetIpTagOutputArgs } from "./getIpTag";
export const getIpTag: typeof import("./getIpTag").getIpTag = null as any;
export const getIpTagOutput: typeof import("./getIpTag").getIpTagOutput = null as any;
utilities.lazyLoad(exports, ["getIpTag","getIpTagOutput"], () => require("./getIpTag"));

export { GetKerberosProfileArgs, GetKerberosProfileResult, GetKerberosProfileOutputArgs } from "./getKerberosProfile";
export const getKerberosProfile: typeof import("./getKerberosProfile").getKerberosProfile = null as any;
export const getKerberosProfileOutput: typeof import("./getKerberosProfile").getKerberosProfileOutput = null as any;
utilities.lazyLoad(exports, ["getKerberosProfile","getKerberosProfileOutput"], () => require("./getKerberosProfile"));

export { GetKerberosProfilesArgs, GetKerberosProfilesResult, GetKerberosProfilesOutputArgs } from "./getKerberosProfiles";
export const getKerberosProfiles: typeof import("./getKerberosProfiles").getKerberosProfiles = null as any;
export const getKerberosProfilesOutput: typeof import("./getKerberosProfiles").getKerberosProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getKerberosProfiles","getKerberosProfilesOutput"], () => require("./getKerberosProfiles"));

export { GetLdapProfilesArgs, GetLdapProfilesResult, GetLdapProfilesOutputArgs } from "./getLdapProfiles";
export const getLdapProfiles: typeof import("./getLdapProfiles").getLdapProfiles = null as any;
export const getLdapProfilesOutput: typeof import("./getLdapProfiles").getLdapProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getLdapProfiles","getLdapProfilesOutput"], () => require("./getLdapProfiles"));

export { GetLocalUserDbGroupArgs, GetLocalUserDbGroupResult, GetLocalUserDbGroupOutputArgs } from "./getLocalUserDbGroup";
export const getLocalUserDbGroup: typeof import("./getLocalUserDbGroup").getLocalUserDbGroup = null as any;
export const getLocalUserDbGroupOutput: typeof import("./getLocalUserDbGroup").getLocalUserDbGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLocalUserDbGroup","getLocalUserDbGroupOutput"], () => require("./getLocalUserDbGroup"));

export { GetLocalUserDbGroupsArgs, GetLocalUserDbGroupsResult, GetLocalUserDbGroupsOutputArgs } from "./getLocalUserDbGroups";
export const getLocalUserDbGroups: typeof import("./getLocalUserDbGroups").getLocalUserDbGroups = null as any;
export const getLocalUserDbGroupsOutput: typeof import("./getLocalUserDbGroups").getLocalUserDbGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getLocalUserDbGroups","getLocalUserDbGroupsOutput"], () => require("./getLocalUserDbGroups"));

export { GetNatRuleArgs, GetNatRuleResult, GetNatRuleOutputArgs } from "./getNatRule";
export const getNatRule: typeof import("./getNatRule").getNatRule = null as any;
export const getNatRuleOutput: typeof import("./getNatRule").getNatRuleOutput = null as any;
utilities.lazyLoad(exports, ["getNatRule","getNatRuleOutput"], () => require("./getNatRule"));

export { GetNatRulesArgs, GetNatRulesResult, GetNatRulesOutputArgs } from "./getNatRules";
export const getNatRules: typeof import("./getNatRules").getNatRules = null as any;
export const getNatRulesOutput: typeof import("./getNatRules").getNatRulesOutput = null as any;
utilities.lazyLoad(exports, ["getNatRules","getNatRulesOutput"], () => require("./getNatRules"));

export { GetOspfArgs, GetOspfResult, GetOspfOutputArgs } from "./getOspf";
export const getOspf: typeof import("./getOspf").getOspf = null as any;
export const getOspfOutput: typeof import("./getOspf").getOspfOutput = null as any;
utilities.lazyLoad(exports, ["getOspf","getOspfOutput"], () => require("./getOspf"));

export { GetOspfAreaArgs, GetOspfAreaResult, GetOspfAreaOutputArgs } from "./getOspfArea";
export const getOspfArea: typeof import("./getOspfArea").getOspfArea = null as any;
export const getOspfAreaOutput: typeof import("./getOspfArea").getOspfAreaOutput = null as any;
utilities.lazyLoad(exports, ["getOspfArea","getOspfAreaOutput"], () => require("./getOspfArea"));

export { GetOspfAreaInterfaceArgs, GetOspfAreaInterfaceResult, GetOspfAreaInterfaceOutputArgs } from "./getOspfAreaInterface";
export const getOspfAreaInterface: typeof import("./getOspfAreaInterface").getOspfAreaInterface = null as any;
export const getOspfAreaInterfaceOutput: typeof import("./getOspfAreaInterface").getOspfAreaInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getOspfAreaInterface","getOspfAreaInterfaceOutput"], () => require("./getOspfAreaInterface"));

export { GetOspfAreaInterfacesArgs, GetOspfAreaInterfacesResult, GetOspfAreaInterfacesOutputArgs } from "./getOspfAreaInterfaces";
export const getOspfAreaInterfaces: typeof import("./getOspfAreaInterfaces").getOspfAreaInterfaces = null as any;
export const getOspfAreaInterfacesOutput: typeof import("./getOspfAreaInterfaces").getOspfAreaInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getOspfAreaInterfaces","getOspfAreaInterfacesOutput"], () => require("./getOspfAreaInterfaces"));

export { GetOspfAreaVirtualLinkArgs, GetOspfAreaVirtualLinkResult, GetOspfAreaVirtualLinkOutputArgs } from "./getOspfAreaVirtualLink";
export const getOspfAreaVirtualLink: typeof import("./getOspfAreaVirtualLink").getOspfAreaVirtualLink = null as any;
export const getOspfAreaVirtualLinkOutput: typeof import("./getOspfAreaVirtualLink").getOspfAreaVirtualLinkOutput = null as any;
utilities.lazyLoad(exports, ["getOspfAreaVirtualLink","getOspfAreaVirtualLinkOutput"], () => require("./getOspfAreaVirtualLink"));

export { GetOspfAreaVirtualLinksArgs, GetOspfAreaVirtualLinksResult, GetOspfAreaVirtualLinksOutputArgs } from "./getOspfAreaVirtualLinks";
export const getOspfAreaVirtualLinks: typeof import("./getOspfAreaVirtualLinks").getOspfAreaVirtualLinks = null as any;
export const getOspfAreaVirtualLinksOutput: typeof import("./getOspfAreaVirtualLinks").getOspfAreaVirtualLinksOutput = null as any;
utilities.lazyLoad(exports, ["getOspfAreaVirtualLinks","getOspfAreaVirtualLinksOutput"], () => require("./getOspfAreaVirtualLinks"));

export { GetOspfAreasArgs, GetOspfAreasResult, GetOspfAreasOutputArgs } from "./getOspfAreas";
export const getOspfAreas: typeof import("./getOspfAreas").getOspfAreas = null as any;
export const getOspfAreasOutput: typeof import("./getOspfAreas").getOspfAreasOutput = null as any;
utilities.lazyLoad(exports, ["getOspfAreas","getOspfAreasOutput"], () => require("./getOspfAreas"));

export { GetOspfAuthProfilesArgs, GetOspfAuthProfilesResult, GetOspfAuthProfilesOutputArgs } from "./getOspfAuthProfiles";
export const getOspfAuthProfiles: typeof import("./getOspfAuthProfiles").getOspfAuthProfiles = null as any;
export const getOspfAuthProfilesOutput: typeof import("./getOspfAuthProfiles").getOspfAuthProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getOspfAuthProfiles","getOspfAuthProfilesOutput"], () => require("./getOspfAuthProfiles"));

export { GetOspfExportArgs, GetOspfExportResult, GetOspfExportOutputArgs } from "./getOspfExport";
export const getOspfExport: typeof import("./getOspfExport").getOspfExport = null as any;
export const getOspfExportOutput: typeof import("./getOspfExport").getOspfExportOutput = null as any;
utilities.lazyLoad(exports, ["getOspfExport","getOspfExportOutput"], () => require("./getOspfExport"));

export { GetOspfExportsArgs, GetOspfExportsResult, GetOspfExportsOutputArgs } from "./getOspfExports";
export const getOspfExports: typeof import("./getOspfExports").getOspfExports = null as any;
export const getOspfExportsOutput: typeof import("./getOspfExports").getOspfExportsOutput = null as any;
utilities.lazyLoad(exports, ["getOspfExports","getOspfExportsOutput"], () => require("./getOspfExports"));

export { GetPanoramaPluginArgs, GetPanoramaPluginResult, GetPanoramaPluginOutputArgs } from "./getPanoramaPlugin";
export const getPanoramaPlugin: typeof import("./getPanoramaPlugin").getPanoramaPlugin = null as any;
export const getPanoramaPluginOutput: typeof import("./getPanoramaPlugin").getPanoramaPluginOutput = null as any;
utilities.lazyLoad(exports, ["getPanoramaPlugin","getPanoramaPluginOutput"], () => require("./getPanoramaPlugin"));

export { GetPbfRuleArgs, GetPbfRuleResult, GetPbfRuleOutputArgs } from "./getPbfRule";
export const getPbfRule: typeof import("./getPbfRule").getPbfRule = null as any;
export const getPbfRuleOutput: typeof import("./getPbfRule").getPbfRuleOutput = null as any;
utilities.lazyLoad(exports, ["getPbfRule","getPbfRuleOutput"], () => require("./getPbfRule"));

export { GetPbfRulesArgs, GetPbfRulesResult, GetPbfRulesOutputArgs } from "./getPbfRules";
export const getPbfRules: typeof import("./getPbfRules").getPbfRules = null as any;
export const getPbfRulesOutput: typeof import("./getPbfRules").getPbfRulesOutput = null as any;
utilities.lazyLoad(exports, ["getPbfRules","getPbfRulesOutput"], () => require("./getPbfRules"));

export { GetPluginArgs, GetPluginResult, GetPluginOutputArgs } from "./getPlugin";
export const getPlugin: typeof import("./getPlugin").getPlugin = null as any;
export const getPluginOutput: typeof import("./getPlugin").getPluginOutput = null as any;
utilities.lazyLoad(exports, ["getPlugin","getPluginOutput"], () => require("./getPlugin"));

export { GetPredefinedDlpFileTypeArgs, GetPredefinedDlpFileTypeResult, GetPredefinedDlpFileTypeOutputArgs } from "./getPredefinedDlpFileType";
export const getPredefinedDlpFileType: typeof import("./getPredefinedDlpFileType").getPredefinedDlpFileType = null as any;
export const getPredefinedDlpFileTypeOutput: typeof import("./getPredefinedDlpFileType").getPredefinedDlpFileTypeOutput = null as any;
utilities.lazyLoad(exports, ["getPredefinedDlpFileType","getPredefinedDlpFileTypeOutput"], () => require("./getPredefinedDlpFileType"));

export { GetPredefinedTdbFileTypeArgs, GetPredefinedTdbFileTypeResult, GetPredefinedTdbFileTypeOutputArgs } from "./getPredefinedTdbFileType";
export const getPredefinedTdbFileType: typeof import("./getPredefinedTdbFileType").getPredefinedTdbFileType = null as any;
export const getPredefinedTdbFileTypeOutput: typeof import("./getPredefinedTdbFileType").getPredefinedTdbFileTypeOutput = null as any;
utilities.lazyLoad(exports, ["getPredefinedTdbFileType","getPredefinedTdbFileTypeOutput"], () => require("./getPredefinedTdbFileType"));

export { GetPredefinedThreatArgs, GetPredefinedThreatResult, GetPredefinedThreatOutputArgs } from "./getPredefinedThreat";
export const getPredefinedThreat: typeof import("./getPredefinedThreat").getPredefinedThreat = null as any;
export const getPredefinedThreatOutput: typeof import("./getPredefinedThreat").getPredefinedThreatOutput = null as any;
utilities.lazyLoad(exports, ["getPredefinedThreat","getPredefinedThreatOutput"], () => require("./getPredefinedThreat"));

export { GetRadiusProfilesArgs, GetRadiusProfilesResult, GetRadiusProfilesOutputArgs } from "./getRadiusProfiles";
export const getRadiusProfiles: typeof import("./getRadiusProfiles").getRadiusProfiles = null as any;
export const getRadiusProfilesOutput: typeof import("./getRadiusProfiles").getRadiusProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getRadiusProfiles","getRadiusProfilesOutput"], () => require("./getRadiusProfiles"));

export { GetSamlProfileArgs, GetSamlProfileResult, GetSamlProfileOutputArgs } from "./getSamlProfile";
export const getSamlProfile: typeof import("./getSamlProfile").getSamlProfile = null as any;
export const getSamlProfileOutput: typeof import("./getSamlProfile").getSamlProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSamlProfile","getSamlProfileOutput"], () => require("./getSamlProfile"));

export { GetSamlProfilesArgs, GetSamlProfilesResult, GetSamlProfilesOutputArgs } from "./getSamlProfiles";
export const getSamlProfiles: typeof import("./getSamlProfiles").getSamlProfiles = null as any;
export const getSamlProfilesOutput: typeof import("./getSamlProfiles").getSamlProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getSamlProfiles","getSamlProfilesOutput"], () => require("./getSamlProfiles"));

export { GetSecurityProfileGroupArgs, GetSecurityProfileGroupResult, GetSecurityProfileGroupOutputArgs } from "./getSecurityProfileGroup";
export const getSecurityProfileGroup: typeof import("./getSecurityProfileGroup").getSecurityProfileGroup = null as any;
export const getSecurityProfileGroupOutput: typeof import("./getSecurityProfileGroup").getSecurityProfileGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityProfileGroup","getSecurityProfileGroupOutput"], () => require("./getSecurityProfileGroup"));

export { GetSecurityProfileGroupsArgs, GetSecurityProfileGroupsResult, GetSecurityProfileGroupsOutputArgs } from "./getSecurityProfileGroups";
export const getSecurityProfileGroups: typeof import("./getSecurityProfileGroups").getSecurityProfileGroups = null as any;
export const getSecurityProfileGroupsOutput: typeof import("./getSecurityProfileGroups").getSecurityProfileGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityProfileGroups","getSecurityProfileGroupsOutput"], () => require("./getSecurityProfileGroups"));

export { GetSecurityRuleArgs, GetSecurityRuleResult, GetSecurityRuleOutputArgs } from "./getSecurityRule";
export const getSecurityRule: typeof import("./getSecurityRule").getSecurityRule = null as any;
export const getSecurityRuleOutput: typeof import("./getSecurityRule").getSecurityRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRule","getSecurityRuleOutput"], () => require("./getSecurityRule"));

export { GetSecurityRulesArgs, GetSecurityRulesResult, GetSecurityRulesOutputArgs } from "./getSecurityRules";
export const getSecurityRules: typeof import("./getSecurityRules").getSecurityRules = null as any;
export const getSecurityRulesOutput: typeof import("./getSecurityRules").getSecurityRulesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRules","getSecurityRulesOutput"], () => require("./getSecurityRules"));

export { GetSslDecryptArgs, GetSslDecryptResult, GetSslDecryptOutputArgs } from "./getSslDecrypt";
export const getSslDecrypt: typeof import("./getSslDecrypt").getSslDecrypt = null as any;
export const getSslDecryptOutput: typeof import("./getSslDecrypt").getSslDecryptOutput = null as any;
utilities.lazyLoad(exports, ["getSslDecrypt","getSslDecryptOutput"], () => require("./getSslDecrypt"));

export { GetSslTlsServiceProfileArgs, GetSslTlsServiceProfileResult, GetSslTlsServiceProfileOutputArgs } from "./getSslTlsServiceProfile";
export const getSslTlsServiceProfile: typeof import("./getSslTlsServiceProfile").getSslTlsServiceProfile = null as any;
export const getSslTlsServiceProfileOutput: typeof import("./getSslTlsServiceProfile").getSslTlsServiceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSslTlsServiceProfile","getSslTlsServiceProfileOutput"], () => require("./getSslTlsServiceProfile"));

export { GetSslTlsServiceProfilesArgs, GetSslTlsServiceProfilesResult, GetSslTlsServiceProfilesOutputArgs } from "./getSslTlsServiceProfiles";
export const getSslTlsServiceProfiles: typeof import("./getSslTlsServiceProfiles").getSslTlsServiceProfiles = null as any;
export const getSslTlsServiceProfilesOutput: typeof import("./getSslTlsServiceProfiles").getSslTlsServiceProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getSslTlsServiceProfiles","getSslTlsServiceProfilesOutput"], () => require("./getSslTlsServiceProfiles"));

export { GetSyslogServerProfileArgs, GetSyslogServerProfileResult, GetSyslogServerProfileOutputArgs } from "./getSyslogServerProfile";
export const getSyslogServerProfile: typeof import("./getSyslogServerProfile").getSyslogServerProfile = null as any;
export const getSyslogServerProfileOutput: typeof import("./getSyslogServerProfile").getSyslogServerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSyslogServerProfile","getSyslogServerProfileOutput"], () => require("./getSyslogServerProfile"));

export { GetSyslogServerProfilesArgs, GetSyslogServerProfilesResult, GetSyslogServerProfilesOutputArgs } from "./getSyslogServerProfiles";
export const getSyslogServerProfiles: typeof import("./getSyslogServerProfiles").getSyslogServerProfiles = null as any;
export const getSyslogServerProfilesOutput: typeof import("./getSyslogServerProfiles").getSyslogServerProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getSyslogServerProfiles","getSyslogServerProfilesOutput"], () => require("./getSyslogServerProfiles"));

export { GetSystemInfoArgs, GetSystemInfoResult, GetSystemInfoOutputArgs } from "./getSystemInfo";
export const getSystemInfo: typeof import("./getSystemInfo").getSystemInfo = null as any;
export const getSystemInfoOutput: typeof import("./getSystemInfo").getSystemInfoOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInfo","getSystemInfoOutput"], () => require("./getSystemInfo"));

export { GetTacacsPlusProfilesArgs, GetTacacsPlusProfilesResult, GetTacacsPlusProfilesOutputArgs } from "./getTacacsPlusProfiles";
export const getTacacsPlusProfiles: typeof import("./getTacacsPlusProfiles").getTacacsPlusProfiles = null as any;
export const getTacacsPlusProfilesOutput: typeof import("./getTacacsPlusProfiles").getTacacsPlusProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsPlusProfiles","getTacacsPlusProfilesOutput"], () => require("./getTacacsPlusProfiles"));

export { GetTechSupportFileArgs, GetTechSupportFileResult, GetTechSupportFileOutputArgs } from "./getTechSupportFile";
export const getTechSupportFile: typeof import("./getTechSupportFile").getTechSupportFile = null as any;
export const getTechSupportFileOutput: typeof import("./getTechSupportFile").getTechSupportFileOutput = null as any;
utilities.lazyLoad(exports, ["getTechSupportFile","getTechSupportFileOutput"], () => require("./getTechSupportFile"));

export { GetUrlFilteringSecurityProfileArgs, GetUrlFilteringSecurityProfileResult, GetUrlFilteringSecurityProfileOutputArgs } from "./getUrlFilteringSecurityProfile";
export const getUrlFilteringSecurityProfile: typeof import("./getUrlFilteringSecurityProfile").getUrlFilteringSecurityProfile = null as any;
export const getUrlFilteringSecurityProfileOutput: typeof import("./getUrlFilteringSecurityProfile").getUrlFilteringSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getUrlFilteringSecurityProfile","getUrlFilteringSecurityProfileOutput"], () => require("./getUrlFilteringSecurityProfile"));

export { GetUrlFilteringSecurityProfilesArgs, GetUrlFilteringSecurityProfilesResult, GetUrlFilteringSecurityProfilesOutputArgs } from "./getUrlFilteringSecurityProfiles";
export const getUrlFilteringSecurityProfiles: typeof import("./getUrlFilteringSecurityProfiles").getUrlFilteringSecurityProfiles = null as any;
export const getUrlFilteringSecurityProfilesOutput: typeof import("./getUrlFilteringSecurityProfiles").getUrlFilteringSecurityProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getUrlFilteringSecurityProfiles","getUrlFilteringSecurityProfilesOutput"], () => require("./getUrlFilteringSecurityProfiles"));

export { GetUserTagArgs, GetUserTagResult, GetUserTagOutputArgs } from "./getUserTag";
export const getUserTag: typeof import("./getUserTag").getUserTag = null as any;
export const getUserTagOutput: typeof import("./getUserTag").getUserTagOutput = null as any;
utilities.lazyLoad(exports, ["getUserTag","getUserTagOutput"], () => require("./getUserTag"));

export { GetVirtualRouterArgs, GetVirtualRouterResult, GetVirtualRouterOutputArgs } from "./getVirtualRouter";
export const getVirtualRouter: typeof import("./getVirtualRouter").getVirtualRouter = null as any;
export const getVirtualRouterOutput: typeof import("./getVirtualRouter").getVirtualRouterOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualRouter","getVirtualRouterOutput"], () => require("./getVirtualRouter"));

export { GetVirtualRoutersArgs, GetVirtualRoutersResult, GetVirtualRoutersOutputArgs } from "./getVirtualRouters";
export const getVirtualRouters: typeof import("./getVirtualRouters").getVirtualRouters = null as any;
export const getVirtualRoutersOutput: typeof import("./getVirtualRouters").getVirtualRoutersOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualRouters","getVirtualRoutersOutput"], () => require("./getVirtualRouters"));

export { GetVmAuthKeyArgs, GetVmAuthKeyResult, GetVmAuthKeyOutputArgs } from "./getVmAuthKey";
export const getVmAuthKey: typeof import("./getVmAuthKey").getVmAuthKey = null as any;
export const getVmAuthKeyOutput: typeof import("./getVmAuthKey").getVmAuthKeyOutput = null as any;
utilities.lazyLoad(exports, ["getVmAuthKey","getVmAuthKeyOutput"], () => require("./getVmAuthKey"));

export { GetVulnerabilitySecurityProfileArgs, GetVulnerabilitySecurityProfileResult, GetVulnerabilitySecurityProfileOutputArgs } from "./getVulnerabilitySecurityProfile";
export const getVulnerabilitySecurityProfile: typeof import("./getVulnerabilitySecurityProfile").getVulnerabilitySecurityProfile = null as any;
export const getVulnerabilitySecurityProfileOutput: typeof import("./getVulnerabilitySecurityProfile").getVulnerabilitySecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilitySecurityProfile","getVulnerabilitySecurityProfileOutput"], () => require("./getVulnerabilitySecurityProfile"));

export { GetVulnerabilitySecurityProfilesArgs, GetVulnerabilitySecurityProfilesResult, GetVulnerabilitySecurityProfilesOutputArgs } from "./getVulnerabilitySecurityProfiles";
export const getVulnerabilitySecurityProfiles: typeof import("./getVulnerabilitySecurityProfiles").getVulnerabilitySecurityProfiles = null as any;
export const getVulnerabilitySecurityProfilesOutput: typeof import("./getVulnerabilitySecurityProfiles").getVulnerabilitySecurityProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilitySecurityProfiles","getVulnerabilitySecurityProfilesOutput"], () => require("./getVulnerabilitySecurityProfiles"));

export { GetWildfireAnalysisSecurityProfileArgs, GetWildfireAnalysisSecurityProfileResult, GetWildfireAnalysisSecurityProfileOutputArgs } from "./getWildfireAnalysisSecurityProfile";
export const getWildfireAnalysisSecurityProfile: typeof import("./getWildfireAnalysisSecurityProfile").getWildfireAnalysisSecurityProfile = null as any;
export const getWildfireAnalysisSecurityProfileOutput: typeof import("./getWildfireAnalysisSecurityProfile").getWildfireAnalysisSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getWildfireAnalysisSecurityProfile","getWildfireAnalysisSecurityProfileOutput"], () => require("./getWildfireAnalysisSecurityProfile"));

export { GetWildfireAnalysisSecurityProfilesArgs, GetWildfireAnalysisSecurityProfilesResult, GetWildfireAnalysisSecurityProfilesOutputArgs } from "./getWildfireAnalysisSecurityProfiles";
export const getWildfireAnalysisSecurityProfiles: typeof import("./getWildfireAnalysisSecurityProfiles").getWildfireAnalysisSecurityProfiles = null as any;
export const getWildfireAnalysisSecurityProfilesOutput: typeof import("./getWildfireAnalysisSecurityProfiles").getWildfireAnalysisSecurityProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getWildfireAnalysisSecurityProfiles","getWildfireAnalysisSecurityProfilesOutput"], () => require("./getWildfireAnalysisSecurityProfiles"));

export { GetZoneArgs, GetZoneResult, GetZoneOutputArgs } from "./getZone";
export const getZone: typeof import("./getZone").getZone = null as any;
export const getZoneOutput: typeof import("./getZone").getZoneOutput = null as any;
utilities.lazyLoad(exports, ["getZone","getZoneOutput"], () => require("./getZone"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { GlobalprotectIpsecCryptoProfileArgs, GlobalprotectIpsecCryptoProfileState } from "./globalprotectIpsecCryptoProfile";
export type GlobalprotectIpsecCryptoProfile = import("./globalprotectIpsecCryptoProfile").GlobalprotectIpsecCryptoProfile;
export const GlobalprotectIpsecCryptoProfile: typeof import("./globalprotectIpsecCryptoProfile").GlobalprotectIpsecCryptoProfile = null as any;
utilities.lazyLoad(exports, ["GlobalprotectIpsecCryptoProfile"], () => require("./globalprotectIpsecCryptoProfile"));

export { GreTunnelArgs, GreTunnelState } from "./greTunnel";
export type GreTunnel = import("./greTunnel").GreTunnel;
export const GreTunnel: typeof import("./greTunnel").GreTunnel = null as any;
utilities.lazyLoad(exports, ["GreTunnel"], () => require("./greTunnel"));

export { HttpServerProfileArgs, HttpServerProfileState } from "./httpServerProfile";
export type HttpServerProfile = import("./httpServerProfile").HttpServerProfile;
export const HttpServerProfile: typeof import("./httpServerProfile").HttpServerProfile = null as any;
utilities.lazyLoad(exports, ["HttpServerProfile"], () => require("./httpServerProfile"));

export { IkeCryptoProfileArgs, IkeCryptoProfileState } from "./ikeCryptoProfile";
export type IkeCryptoProfile = import("./ikeCryptoProfile").IkeCryptoProfile;
export const IkeCryptoProfile: typeof import("./ikeCryptoProfile").IkeCryptoProfile = null as any;
utilities.lazyLoad(exports, ["IkeCryptoProfile"], () => require("./ikeCryptoProfile"));

export { IkeGatewayArgs, IkeGatewayState } from "./ikeGateway";
export type IkeGateway = import("./ikeGateway").IkeGateway;
export const IkeGateway: typeof import("./ikeGateway").IkeGateway = null as any;
utilities.lazyLoad(exports, ["IkeGateway"], () => require("./ikeGateway"));

export { IpTagArgs, IpTagState } from "./ipTag";
export type IpTag = import("./ipTag").IpTag;
export const IpTag: typeof import("./ipTag").IpTag = null as any;
utilities.lazyLoad(exports, ["IpTag"], () => require("./ipTag"));

export { IpsecCryptoProfileArgs, IpsecCryptoProfileState } from "./ipsecCryptoProfile";
export type IpsecCryptoProfile = import("./ipsecCryptoProfile").IpsecCryptoProfile;
export const IpsecCryptoProfile: typeof import("./ipsecCryptoProfile").IpsecCryptoProfile = null as any;
utilities.lazyLoad(exports, ["IpsecCryptoProfile"], () => require("./ipsecCryptoProfile"));

export { IpsecTunnelArgs, IpsecTunnelState } from "./ipsecTunnel";
export type IpsecTunnel = import("./ipsecTunnel").IpsecTunnel;
export const IpsecTunnel: typeof import("./ipsecTunnel").IpsecTunnel = null as any;
utilities.lazyLoad(exports, ["IpsecTunnel"], () => require("./ipsecTunnel"));

export { IpsecTunnelProxyIdIpv4Args, IpsecTunnelProxyIdIpv4State } from "./ipsecTunnelProxyIdIpv4";
export type IpsecTunnelProxyIdIpv4 = import("./ipsecTunnelProxyIdIpv4").IpsecTunnelProxyIdIpv4;
export const IpsecTunnelProxyIdIpv4: typeof import("./ipsecTunnelProxyIdIpv4").IpsecTunnelProxyIdIpv4 = null as any;
utilities.lazyLoad(exports, ["IpsecTunnelProxyIdIpv4"], () => require("./ipsecTunnelProxyIdIpv4"));

export { KerberosProfileArgs, KerberosProfileState } from "./kerberosProfile";
export type KerberosProfile = import("./kerberosProfile").KerberosProfile;
export const KerberosProfile: typeof import("./kerberosProfile").KerberosProfile = null as any;
utilities.lazyLoad(exports, ["KerberosProfile"], () => require("./kerberosProfile"));

export { Layer2SubinterfaceArgs, Layer2SubinterfaceState } from "./layer2Subinterface";
export type Layer2Subinterface = import("./layer2Subinterface").Layer2Subinterface;
export const Layer2Subinterface: typeof import("./layer2Subinterface").Layer2Subinterface = null as any;
utilities.lazyLoad(exports, ["Layer2Subinterface"], () => require("./layer2Subinterface"));

export { Layer3SubinterfaceArgs, Layer3SubinterfaceState } from "./layer3Subinterface";
export type Layer3Subinterface = import("./layer3Subinterface").Layer3Subinterface;
export const Layer3Subinterface: typeof import("./layer3Subinterface").Layer3Subinterface = null as any;
utilities.lazyLoad(exports, ["Layer3Subinterface"], () => require("./layer3Subinterface"));

export { LdapProfileArgs, LdapProfileState } from "./ldapProfile";
export type LdapProfile = import("./ldapProfile").LdapProfile;
export const LdapProfile: typeof import("./ldapProfile").LdapProfile = null as any;
utilities.lazyLoad(exports, ["LdapProfile"], () => require("./ldapProfile"));

export { LicenseApiKeyArgs, LicenseApiKeyState } from "./licenseApiKey";
export type LicenseApiKey = import("./licenseApiKey").LicenseApiKey;
export const LicenseApiKey: typeof import("./licenseApiKey").LicenseApiKey = null as any;
utilities.lazyLoad(exports, ["LicenseApiKey"], () => require("./licenseApiKey"));

export { LicensingArgs, LicensingState } from "./licensing";
export type Licensing = import("./licensing").Licensing;
export const Licensing: typeof import("./licensing").Licensing = null as any;
utilities.lazyLoad(exports, ["Licensing"], () => require("./licensing"));

export { LocalUserDbGroupArgs, LocalUserDbGroupState } from "./localUserDbGroup";
export type LocalUserDbGroup = import("./localUserDbGroup").LocalUserDbGroup;
export const LocalUserDbGroup: typeof import("./localUserDbGroup").LocalUserDbGroup = null as any;
utilities.lazyLoad(exports, ["LocalUserDbGroup"], () => require("./localUserDbGroup"));

export { LocalUserDbUserArgs, LocalUserDbUserState } from "./localUserDbUser";
export type LocalUserDbUser = import("./localUserDbUser").LocalUserDbUser;
export const LocalUserDbUser: typeof import("./localUserDbUser").LocalUserDbUser = null as any;
utilities.lazyLoad(exports, ["LocalUserDbUser"], () => require("./localUserDbUser"));

export { LogForwardingProfileArgs, LogForwardingProfileState } from "./logForwardingProfile";
export type LogForwardingProfile = import("./logForwardingProfile").LogForwardingProfile;
export const LogForwardingProfile: typeof import("./logForwardingProfile").LogForwardingProfile = null as any;
utilities.lazyLoad(exports, ["LogForwardingProfile"], () => require("./logForwardingProfile"));

export { LoopbackInterfaceArgs, LoopbackInterfaceState } from "./loopbackInterface";
export type LoopbackInterface = import("./loopbackInterface").LoopbackInterface;
export const LoopbackInterface: typeof import("./loopbackInterface").LoopbackInterface = null as any;
utilities.lazyLoad(exports, ["LoopbackInterface"], () => require("./loopbackInterface"));

export { ManagementProfileArgs, ManagementProfileState } from "./managementProfile";
export type ManagementProfile = import("./managementProfile").ManagementProfile;
export const ManagementProfile: typeof import("./managementProfile").ManagementProfile = null as any;
utilities.lazyLoad(exports, ["ManagementProfile"], () => require("./managementProfile"));

export { MonitorProfileArgs, MonitorProfileState } from "./monitorProfile";
export type MonitorProfile = import("./monitorProfile").MonitorProfile;
export const MonitorProfile: typeof import("./monitorProfile").MonitorProfile = null as any;
utilities.lazyLoad(exports, ["MonitorProfile"], () => require("./monitorProfile"));

export { NatPolicyArgs, NatPolicyState } from "./natPolicy";
export type NatPolicy = import("./natPolicy").NatPolicy;
export const NatPolicy: typeof import("./natPolicy").NatPolicy = null as any;
utilities.lazyLoad(exports, ["NatPolicy"], () => require("./natPolicy"));

export { NatRuleArgs, NatRuleState } from "./natRule";
export type NatRule = import("./natRule").NatRule;
export const NatRule: typeof import("./natRule").NatRule = null as any;
utilities.lazyLoad(exports, ["NatRule"], () => require("./natRule"));

export { NatRuleGroupArgs, NatRuleGroupState } from "./natRuleGroup";
export type NatRuleGroup = import("./natRuleGroup").NatRuleGroup;
export const NatRuleGroup: typeof import("./natRuleGroup").NatRuleGroup = null as any;
utilities.lazyLoad(exports, ["NatRuleGroup"], () => require("./natRuleGroup"));

export { OspfArgs, OspfState } from "./ospf";
export type Ospf = import("./ospf").Ospf;
export const Ospf: typeof import("./ospf").Ospf = null as any;
utilities.lazyLoad(exports, ["Ospf"], () => require("./ospf"));

export { OspfAreaArgs, OspfAreaState } from "./ospfArea";
export type OspfArea = import("./ospfArea").OspfArea;
export const OspfArea: typeof import("./ospfArea").OspfArea = null as any;
utilities.lazyLoad(exports, ["OspfArea"], () => require("./ospfArea"));

export { OspfAreaInterfaceArgs, OspfAreaInterfaceState } from "./ospfAreaInterface";
export type OspfAreaInterface = import("./ospfAreaInterface").OspfAreaInterface;
export const OspfAreaInterface: typeof import("./ospfAreaInterface").OspfAreaInterface = null as any;
utilities.lazyLoad(exports, ["OspfAreaInterface"], () => require("./ospfAreaInterface"));

export { OspfAreaVirtualLinkArgs, OspfAreaVirtualLinkState } from "./ospfAreaVirtualLink";
export type OspfAreaVirtualLink = import("./ospfAreaVirtualLink").OspfAreaVirtualLink;
export const OspfAreaVirtualLink: typeof import("./ospfAreaVirtualLink").OspfAreaVirtualLink = null as any;
utilities.lazyLoad(exports, ["OspfAreaVirtualLink"], () => require("./ospfAreaVirtualLink"));

export { OspfAuthProfileArgs, OspfAuthProfileState } from "./ospfAuthProfile";
export type OspfAuthProfile = import("./ospfAuthProfile").OspfAuthProfile;
export const OspfAuthProfile: typeof import("./ospfAuthProfile").OspfAuthProfile = null as any;
utilities.lazyLoad(exports, ["OspfAuthProfile"], () => require("./ospfAuthProfile"));

export { OspfExportArgs, OspfExportState } from "./ospfExport";
export type OspfExport = import("./ospfExport").OspfExport;
export const OspfExport: typeof import("./ospfExport").OspfExport = null as any;
utilities.lazyLoad(exports, ["OspfExport"], () => require("./ospfExport"));

export { PanoramaAddressGroupArgs, PanoramaAddressGroupState } from "./panoramaAddressGroup";
export type PanoramaAddressGroup = import("./panoramaAddressGroup").PanoramaAddressGroup;
export const PanoramaAddressGroup: typeof import("./panoramaAddressGroup").PanoramaAddressGroup = null as any;
utilities.lazyLoad(exports, ["PanoramaAddressGroup"], () => require("./panoramaAddressGroup"));

export { PanoramaAddressObjectArgs, PanoramaAddressObjectState } from "./panoramaAddressObject";
export type PanoramaAddressObject = import("./panoramaAddressObject").PanoramaAddressObject;
export const PanoramaAddressObject: typeof import("./panoramaAddressObject").PanoramaAddressObject = null as any;
utilities.lazyLoad(exports, ["PanoramaAddressObject"], () => require("./panoramaAddressObject"));

export { PanoramaAdministrativeTagArgs, PanoramaAdministrativeTagState } from "./panoramaAdministrativeTag";
export type PanoramaAdministrativeTag = import("./panoramaAdministrativeTag").PanoramaAdministrativeTag;
export const PanoramaAdministrativeTag: typeof import("./panoramaAdministrativeTag").PanoramaAdministrativeTag = null as any;
utilities.lazyLoad(exports, ["PanoramaAdministrativeTag"], () => require("./panoramaAdministrativeTag"));

export { PanoramaAggregateInterfaceArgs, PanoramaAggregateInterfaceState } from "./panoramaAggregateInterface";
export type PanoramaAggregateInterface = import("./panoramaAggregateInterface").PanoramaAggregateInterface;
export const PanoramaAggregateInterface: typeof import("./panoramaAggregateInterface").PanoramaAggregateInterface = null as any;
utilities.lazyLoad(exports, ["PanoramaAggregateInterface"], () => require("./panoramaAggregateInterface"));

export { PanoramaApplicationGroupArgs, PanoramaApplicationGroupState } from "./panoramaApplicationGroup";
export type PanoramaApplicationGroup = import("./panoramaApplicationGroup").PanoramaApplicationGroup;
export const PanoramaApplicationGroup: typeof import("./panoramaApplicationGroup").PanoramaApplicationGroup = null as any;
utilities.lazyLoad(exports, ["PanoramaApplicationGroup"], () => require("./panoramaApplicationGroup"));

export { PanoramaApplicationObjectArgs, PanoramaApplicationObjectState } from "./panoramaApplicationObject";
export type PanoramaApplicationObject = import("./panoramaApplicationObject").PanoramaApplicationObject;
export const PanoramaApplicationObject: typeof import("./panoramaApplicationObject").PanoramaApplicationObject = null as any;
utilities.lazyLoad(exports, ["PanoramaApplicationObject"], () => require("./panoramaApplicationObject"));

export { PanoramaApplicationSignatureArgs, PanoramaApplicationSignatureState } from "./panoramaApplicationSignature";
export type PanoramaApplicationSignature = import("./panoramaApplicationSignature").PanoramaApplicationSignature;
export const PanoramaApplicationSignature: typeof import("./panoramaApplicationSignature").PanoramaApplicationSignature = null as any;
utilities.lazyLoad(exports, ["PanoramaApplicationSignature"], () => require("./panoramaApplicationSignature"));

export { PanoramaBfdProfileArgs, PanoramaBfdProfileState } from "./panoramaBfdProfile";
export type PanoramaBfdProfile = import("./panoramaBfdProfile").PanoramaBfdProfile;
export const PanoramaBfdProfile: typeof import("./panoramaBfdProfile").PanoramaBfdProfile = null as any;
utilities.lazyLoad(exports, ["PanoramaBfdProfile"], () => require("./panoramaBfdProfile"));

export { PanoramaBgpArgs, PanoramaBgpState } from "./panoramaBgp";
export type PanoramaBgp = import("./panoramaBgp").PanoramaBgp;
export const PanoramaBgp: typeof import("./panoramaBgp").PanoramaBgp = null as any;
utilities.lazyLoad(exports, ["PanoramaBgp"], () => require("./panoramaBgp"));

export { PanoramaBgpAggregateArgs, PanoramaBgpAggregateState } from "./panoramaBgpAggregate";
export type PanoramaBgpAggregate = import("./panoramaBgpAggregate").PanoramaBgpAggregate;
export const PanoramaBgpAggregate: typeof import("./panoramaBgpAggregate").PanoramaBgpAggregate = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpAggregate"], () => require("./panoramaBgpAggregate"));

export { PanoramaBgpAggregateAdvertiseFilterArgs, PanoramaBgpAggregateAdvertiseFilterState } from "./panoramaBgpAggregateAdvertiseFilter";
export type PanoramaBgpAggregateAdvertiseFilter = import("./panoramaBgpAggregateAdvertiseFilter").PanoramaBgpAggregateAdvertiseFilter;
export const PanoramaBgpAggregateAdvertiseFilter: typeof import("./panoramaBgpAggregateAdvertiseFilter").PanoramaBgpAggregateAdvertiseFilter = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpAggregateAdvertiseFilter"], () => require("./panoramaBgpAggregateAdvertiseFilter"));

export { PanoramaBgpAggregateSuppressFilterArgs, PanoramaBgpAggregateSuppressFilterState } from "./panoramaBgpAggregateSuppressFilter";
export type PanoramaBgpAggregateSuppressFilter = import("./panoramaBgpAggregateSuppressFilter").PanoramaBgpAggregateSuppressFilter;
export const PanoramaBgpAggregateSuppressFilter: typeof import("./panoramaBgpAggregateSuppressFilter").PanoramaBgpAggregateSuppressFilter = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpAggregateSuppressFilter"], () => require("./panoramaBgpAggregateSuppressFilter"));

export { PanoramaBgpAuthProfileArgs, PanoramaBgpAuthProfileState } from "./panoramaBgpAuthProfile";
export type PanoramaBgpAuthProfile = import("./panoramaBgpAuthProfile").PanoramaBgpAuthProfile;
export const PanoramaBgpAuthProfile: typeof import("./panoramaBgpAuthProfile").PanoramaBgpAuthProfile = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpAuthProfile"], () => require("./panoramaBgpAuthProfile"));

export { PanoramaBgpConditionalAdvArgs, PanoramaBgpConditionalAdvState } from "./panoramaBgpConditionalAdv";
export type PanoramaBgpConditionalAdv = import("./panoramaBgpConditionalAdv").PanoramaBgpConditionalAdv;
export const PanoramaBgpConditionalAdv: typeof import("./panoramaBgpConditionalAdv").PanoramaBgpConditionalAdv = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpConditionalAdv"], () => require("./panoramaBgpConditionalAdv"));

export { PanoramaBgpConditionalAdvAdvertiseFilterArgs, PanoramaBgpConditionalAdvAdvertiseFilterState } from "./panoramaBgpConditionalAdvAdvertiseFilter";
export type PanoramaBgpConditionalAdvAdvertiseFilter = import("./panoramaBgpConditionalAdvAdvertiseFilter").PanoramaBgpConditionalAdvAdvertiseFilter;
export const PanoramaBgpConditionalAdvAdvertiseFilter: typeof import("./panoramaBgpConditionalAdvAdvertiseFilter").PanoramaBgpConditionalAdvAdvertiseFilter = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpConditionalAdvAdvertiseFilter"], () => require("./panoramaBgpConditionalAdvAdvertiseFilter"));

export { PanoramaBgpConditionalAdvNonExistFilterArgs, PanoramaBgpConditionalAdvNonExistFilterState } from "./panoramaBgpConditionalAdvNonExistFilter";
export type PanoramaBgpConditionalAdvNonExistFilter = import("./panoramaBgpConditionalAdvNonExistFilter").PanoramaBgpConditionalAdvNonExistFilter;
export const PanoramaBgpConditionalAdvNonExistFilter: typeof import("./panoramaBgpConditionalAdvNonExistFilter").PanoramaBgpConditionalAdvNonExistFilter = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpConditionalAdvNonExistFilter"], () => require("./panoramaBgpConditionalAdvNonExistFilter"));

export { PanoramaBgpDampeningProfileArgs, PanoramaBgpDampeningProfileState } from "./panoramaBgpDampeningProfile";
export type PanoramaBgpDampeningProfile = import("./panoramaBgpDampeningProfile").PanoramaBgpDampeningProfile;
export const PanoramaBgpDampeningProfile: typeof import("./panoramaBgpDampeningProfile").PanoramaBgpDampeningProfile = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpDampeningProfile"], () => require("./panoramaBgpDampeningProfile"));

export { PanoramaBgpExportRuleGroupArgs, PanoramaBgpExportRuleGroupState } from "./panoramaBgpExportRuleGroup";
export type PanoramaBgpExportRuleGroup = import("./panoramaBgpExportRuleGroup").PanoramaBgpExportRuleGroup;
export const PanoramaBgpExportRuleGroup: typeof import("./panoramaBgpExportRuleGroup").PanoramaBgpExportRuleGroup = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpExportRuleGroup"], () => require("./panoramaBgpExportRuleGroup"));

export { PanoramaBgpImportRuleGroupArgs, PanoramaBgpImportRuleGroupState } from "./panoramaBgpImportRuleGroup";
export type PanoramaBgpImportRuleGroup = import("./panoramaBgpImportRuleGroup").PanoramaBgpImportRuleGroup;
export const PanoramaBgpImportRuleGroup: typeof import("./panoramaBgpImportRuleGroup").PanoramaBgpImportRuleGroup = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpImportRuleGroup"], () => require("./panoramaBgpImportRuleGroup"));

export { PanoramaBgpPeerArgs, PanoramaBgpPeerState } from "./panoramaBgpPeer";
export type PanoramaBgpPeer = import("./panoramaBgpPeer").PanoramaBgpPeer;
export const PanoramaBgpPeer: typeof import("./panoramaBgpPeer").PanoramaBgpPeer = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpPeer"], () => require("./panoramaBgpPeer"));

export { PanoramaBgpPeerGroupArgs, PanoramaBgpPeerGroupState } from "./panoramaBgpPeerGroup";
export type PanoramaBgpPeerGroup = import("./panoramaBgpPeerGroup").PanoramaBgpPeerGroup;
export const PanoramaBgpPeerGroup: typeof import("./panoramaBgpPeerGroup").PanoramaBgpPeerGroup = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpPeerGroup"], () => require("./panoramaBgpPeerGroup"));

export { PanoramaBgpRedistRuleArgs, PanoramaBgpRedistRuleState } from "./panoramaBgpRedistRule";
export type PanoramaBgpRedistRule = import("./panoramaBgpRedistRule").PanoramaBgpRedistRule;
export const PanoramaBgpRedistRule: typeof import("./panoramaBgpRedistRule").PanoramaBgpRedistRule = null as any;
utilities.lazyLoad(exports, ["PanoramaBgpRedistRule"], () => require("./panoramaBgpRedistRule"));

export { PanoramaDeviceGroupArgs, PanoramaDeviceGroupState } from "./panoramaDeviceGroup";
export type PanoramaDeviceGroup = import("./panoramaDeviceGroup").PanoramaDeviceGroup;
export const PanoramaDeviceGroup: typeof import("./panoramaDeviceGroup").PanoramaDeviceGroup = null as any;
utilities.lazyLoad(exports, ["PanoramaDeviceGroup"], () => require("./panoramaDeviceGroup"));

export { PanoramaDeviceGroupEntryArgs, PanoramaDeviceGroupEntryState } from "./panoramaDeviceGroupEntry";
export type PanoramaDeviceGroupEntry = import("./panoramaDeviceGroupEntry").PanoramaDeviceGroupEntry;
export const PanoramaDeviceGroupEntry: typeof import("./panoramaDeviceGroupEntry").PanoramaDeviceGroupEntry = null as any;
utilities.lazyLoad(exports, ["PanoramaDeviceGroupEntry"], () => require("./panoramaDeviceGroupEntry"));

export { PanoramaEdlArgs, PanoramaEdlState } from "./panoramaEdl";
export type PanoramaEdl = import("./panoramaEdl").PanoramaEdl;
export const PanoramaEdl: typeof import("./panoramaEdl").PanoramaEdl = null as any;
utilities.lazyLoad(exports, ["PanoramaEdl"], () => require("./panoramaEdl"));

export { PanoramaEmailServerProfileArgs, PanoramaEmailServerProfileState } from "./panoramaEmailServerProfile";
export type PanoramaEmailServerProfile = import("./panoramaEmailServerProfile").PanoramaEmailServerProfile;
export const PanoramaEmailServerProfile: typeof import("./panoramaEmailServerProfile").PanoramaEmailServerProfile = null as any;
utilities.lazyLoad(exports, ["PanoramaEmailServerProfile"], () => require("./panoramaEmailServerProfile"));

export { PanoramaEthernetInterfaceArgs, PanoramaEthernetInterfaceState } from "./panoramaEthernetInterface";
export type PanoramaEthernetInterface = import("./panoramaEthernetInterface").PanoramaEthernetInterface;
export const PanoramaEthernetInterface: typeof import("./panoramaEthernetInterface").PanoramaEthernetInterface = null as any;
utilities.lazyLoad(exports, ["PanoramaEthernetInterface"], () => require("./panoramaEthernetInterface"));

export { PanoramaGcpAccountArgs, PanoramaGcpAccountState } from "./panoramaGcpAccount";
export type PanoramaGcpAccount = import("./panoramaGcpAccount").PanoramaGcpAccount;
export const PanoramaGcpAccount: typeof import("./panoramaGcpAccount").PanoramaGcpAccount = null as any;
utilities.lazyLoad(exports, ["PanoramaGcpAccount"], () => require("./panoramaGcpAccount"));

export { PanoramaGkeClusterArgs, PanoramaGkeClusterState } from "./panoramaGkeCluster";
export type PanoramaGkeCluster = import("./panoramaGkeCluster").PanoramaGkeCluster;
export const PanoramaGkeCluster: typeof import("./panoramaGkeCluster").PanoramaGkeCluster = null as any;
utilities.lazyLoad(exports, ["PanoramaGkeCluster"], () => require("./panoramaGkeCluster"));

export { PanoramaGkeClusterGroupArgs, PanoramaGkeClusterGroupState } from "./panoramaGkeClusterGroup";
export type PanoramaGkeClusterGroup = import("./panoramaGkeClusterGroup").PanoramaGkeClusterGroup;
export const PanoramaGkeClusterGroup: typeof import("./panoramaGkeClusterGroup").PanoramaGkeClusterGroup = null as any;
utilities.lazyLoad(exports, ["PanoramaGkeClusterGroup"], () => require("./panoramaGkeClusterGroup"));

export { PanoramaGreTunnelArgs, PanoramaGreTunnelState } from "./panoramaGreTunnel";
export type PanoramaGreTunnel = import("./panoramaGreTunnel").PanoramaGreTunnel;
export const PanoramaGreTunnel: typeof import("./panoramaGreTunnel").PanoramaGreTunnel = null as any;
utilities.lazyLoad(exports, ["PanoramaGreTunnel"], () => require("./panoramaGreTunnel"));

export { PanoramaHttpServerProfileArgs, PanoramaHttpServerProfileState } from "./panoramaHttpServerProfile";
export type PanoramaHttpServerProfile = import("./panoramaHttpServerProfile").PanoramaHttpServerProfile;
export const PanoramaHttpServerProfile: typeof import("./panoramaHttpServerProfile").PanoramaHttpServerProfile = null as any;
utilities.lazyLoad(exports, ["PanoramaHttpServerProfile"], () => require("./panoramaHttpServerProfile"));

export { PanoramaIkeCryptoProfileArgs, PanoramaIkeCryptoProfileState } from "./panoramaIkeCryptoProfile";
export type PanoramaIkeCryptoProfile = import("./panoramaIkeCryptoProfile").PanoramaIkeCryptoProfile;
export const PanoramaIkeCryptoProfile: typeof import("./panoramaIkeCryptoProfile").PanoramaIkeCryptoProfile = null as any;
utilities.lazyLoad(exports, ["PanoramaIkeCryptoProfile"], () => require("./panoramaIkeCryptoProfile"));

export { PanoramaIkeGatewayArgs, PanoramaIkeGatewayState } from "./panoramaIkeGateway";
export type PanoramaIkeGateway = import("./panoramaIkeGateway").PanoramaIkeGateway;
export const PanoramaIkeGateway: typeof import("./panoramaIkeGateway").PanoramaIkeGateway = null as any;
utilities.lazyLoad(exports, ["PanoramaIkeGateway"], () => require("./panoramaIkeGateway"));

export { PanoramaIpsecCryptoProfileArgs, PanoramaIpsecCryptoProfileState } from "./panoramaIpsecCryptoProfile";
export type PanoramaIpsecCryptoProfile = import("./panoramaIpsecCryptoProfile").PanoramaIpsecCryptoProfile;
export const PanoramaIpsecCryptoProfile: typeof import("./panoramaIpsecCryptoProfile").PanoramaIpsecCryptoProfile = null as any;
utilities.lazyLoad(exports, ["PanoramaIpsecCryptoProfile"], () => require("./panoramaIpsecCryptoProfile"));

export { PanoramaIpsecTunnelArgs, PanoramaIpsecTunnelState } from "./panoramaIpsecTunnel";
export type PanoramaIpsecTunnel = import("./panoramaIpsecTunnel").PanoramaIpsecTunnel;
export const PanoramaIpsecTunnel: typeof import("./panoramaIpsecTunnel").PanoramaIpsecTunnel = null as any;
utilities.lazyLoad(exports, ["PanoramaIpsecTunnel"], () => require("./panoramaIpsecTunnel"));

export { PanoramaIpsecTunnelProxyIdIpv4Args, PanoramaIpsecTunnelProxyIdIpv4State } from "./panoramaIpsecTunnelProxyIdIpv4";
export type PanoramaIpsecTunnelProxyIdIpv4 = import("./panoramaIpsecTunnelProxyIdIpv4").PanoramaIpsecTunnelProxyIdIpv4;
export const PanoramaIpsecTunnelProxyIdIpv4: typeof import("./panoramaIpsecTunnelProxyIdIpv4").PanoramaIpsecTunnelProxyIdIpv4 = null as any;
utilities.lazyLoad(exports, ["PanoramaIpsecTunnelProxyIdIpv4"], () => require("./panoramaIpsecTunnelProxyIdIpv4"));

export { PanoramaLayer2SubinterfaceArgs, PanoramaLayer2SubinterfaceState } from "./panoramaLayer2Subinterface";
export type PanoramaLayer2Subinterface = import("./panoramaLayer2Subinterface").PanoramaLayer2Subinterface;
export const PanoramaLayer2Subinterface: typeof import("./panoramaLayer2Subinterface").PanoramaLayer2Subinterface = null as any;
utilities.lazyLoad(exports, ["PanoramaLayer2Subinterface"], () => require("./panoramaLayer2Subinterface"));

export { PanoramaLayer3SubinterfaceArgs, PanoramaLayer3SubinterfaceState } from "./panoramaLayer3Subinterface";
export type PanoramaLayer3Subinterface = import("./panoramaLayer3Subinterface").PanoramaLayer3Subinterface;
export const PanoramaLayer3Subinterface: typeof import("./panoramaLayer3Subinterface").PanoramaLayer3Subinterface = null as any;
utilities.lazyLoad(exports, ["PanoramaLayer3Subinterface"], () => require("./panoramaLayer3Subinterface"));

export { PanoramaLogForwardingProfileArgs, PanoramaLogForwardingProfileState } from "./panoramaLogForwardingProfile";
export type PanoramaLogForwardingProfile = import("./panoramaLogForwardingProfile").PanoramaLogForwardingProfile;
export const PanoramaLogForwardingProfile: typeof import("./panoramaLogForwardingProfile").PanoramaLogForwardingProfile = null as any;
utilities.lazyLoad(exports, ["PanoramaLogForwardingProfile"], () => require("./panoramaLogForwardingProfile"));

export { PanoramaLoopbackInterfaceArgs, PanoramaLoopbackInterfaceState } from "./panoramaLoopbackInterface";
export type PanoramaLoopbackInterface = import("./panoramaLoopbackInterface").PanoramaLoopbackInterface;
export const PanoramaLoopbackInterface: typeof import("./panoramaLoopbackInterface").PanoramaLoopbackInterface = null as any;
utilities.lazyLoad(exports, ["PanoramaLoopbackInterface"], () => require("./panoramaLoopbackInterface"));

export { PanoramaManagementProfileArgs, PanoramaManagementProfileState } from "./panoramaManagementProfile";
export type PanoramaManagementProfile = import("./panoramaManagementProfile").PanoramaManagementProfile;
export const PanoramaManagementProfile: typeof import("./panoramaManagementProfile").PanoramaManagementProfile = null as any;
utilities.lazyLoad(exports, ["PanoramaManagementProfile"], () => require("./panoramaManagementProfile"));

export { PanoramaMonitorProfileArgs, PanoramaMonitorProfileState } from "./panoramaMonitorProfile";
export type PanoramaMonitorProfile = import("./panoramaMonitorProfile").PanoramaMonitorProfile;
export const PanoramaMonitorProfile: typeof import("./panoramaMonitorProfile").PanoramaMonitorProfile = null as any;
utilities.lazyLoad(exports, ["PanoramaMonitorProfile"], () => require("./panoramaMonitorProfile"));

export { PanoramaNatPolicyArgs, PanoramaNatPolicyState } from "./panoramaNatPolicy";
export type PanoramaNatPolicy = import("./panoramaNatPolicy").PanoramaNatPolicy;
export const PanoramaNatPolicy: typeof import("./panoramaNatPolicy").PanoramaNatPolicy = null as any;
utilities.lazyLoad(exports, ["PanoramaNatPolicy"], () => require("./panoramaNatPolicy"));

export { PanoramaNatRuleArgs, PanoramaNatRuleState } from "./panoramaNatRule";
export type PanoramaNatRule = import("./panoramaNatRule").PanoramaNatRule;
export const PanoramaNatRule: typeof import("./panoramaNatRule").PanoramaNatRule = null as any;
utilities.lazyLoad(exports, ["PanoramaNatRule"], () => require("./panoramaNatRule"));

export { PanoramaNatRuleGroupArgs, PanoramaNatRuleGroupState } from "./panoramaNatRuleGroup";
export type PanoramaNatRuleGroup = import("./panoramaNatRuleGroup").PanoramaNatRuleGroup;
export const PanoramaNatRuleGroup: typeof import("./panoramaNatRuleGroup").PanoramaNatRuleGroup = null as any;
utilities.lazyLoad(exports, ["PanoramaNatRuleGroup"], () => require("./panoramaNatRuleGroup"));

export { PanoramaPbfRuleGroupArgs, PanoramaPbfRuleGroupState } from "./panoramaPbfRuleGroup";
export type PanoramaPbfRuleGroup = import("./panoramaPbfRuleGroup").PanoramaPbfRuleGroup;
export const PanoramaPbfRuleGroup: typeof import("./panoramaPbfRuleGroup").PanoramaPbfRuleGroup = null as any;
utilities.lazyLoad(exports, ["PanoramaPbfRuleGroup"], () => require("./panoramaPbfRuleGroup"));

export { PanoramaRedistributionProfileIpv4Args, PanoramaRedistributionProfileIpv4State } from "./panoramaRedistributionProfileIpv4";
export type PanoramaRedistributionProfileIpv4 = import("./panoramaRedistributionProfileIpv4").PanoramaRedistributionProfileIpv4;
export const PanoramaRedistributionProfileIpv4: typeof import("./panoramaRedistributionProfileIpv4").PanoramaRedistributionProfileIpv4 = null as any;
utilities.lazyLoad(exports, ["PanoramaRedistributionProfileIpv4"], () => require("./panoramaRedistributionProfileIpv4"));

export { PanoramaSecurityPoliciesArgs, PanoramaSecurityPoliciesState } from "./panoramaSecurityPolicies";
export type PanoramaSecurityPolicies = import("./panoramaSecurityPolicies").PanoramaSecurityPolicies;
export const PanoramaSecurityPolicies: typeof import("./panoramaSecurityPolicies").PanoramaSecurityPolicies = null as any;
utilities.lazyLoad(exports, ["PanoramaSecurityPolicies"], () => require("./panoramaSecurityPolicies"));

export { PanoramaSecurityPolicyArgs, PanoramaSecurityPolicyState } from "./panoramaSecurityPolicy";
export type PanoramaSecurityPolicy = import("./panoramaSecurityPolicy").PanoramaSecurityPolicy;
export const PanoramaSecurityPolicy: typeof import("./panoramaSecurityPolicy").PanoramaSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["PanoramaSecurityPolicy"], () => require("./panoramaSecurityPolicy"));

export { PanoramaSecurityPolicyGroupArgs, PanoramaSecurityPolicyGroupState } from "./panoramaSecurityPolicyGroup";
export type PanoramaSecurityPolicyGroup = import("./panoramaSecurityPolicyGroup").PanoramaSecurityPolicyGroup;
export const PanoramaSecurityPolicyGroup: typeof import("./panoramaSecurityPolicyGroup").PanoramaSecurityPolicyGroup = null as any;
utilities.lazyLoad(exports, ["PanoramaSecurityPolicyGroup"], () => require("./panoramaSecurityPolicyGroup"));

export { PanoramaSecurityRuleGroupArgs, PanoramaSecurityRuleGroupState } from "./panoramaSecurityRuleGroup";
export type PanoramaSecurityRuleGroup = import("./panoramaSecurityRuleGroup").PanoramaSecurityRuleGroup;
export const PanoramaSecurityRuleGroup: typeof import("./panoramaSecurityRuleGroup").PanoramaSecurityRuleGroup = null as any;
utilities.lazyLoad(exports, ["PanoramaSecurityRuleGroup"], () => require("./panoramaSecurityRuleGroup"));

export { PanoramaServiceGroupArgs, PanoramaServiceGroupState } from "./panoramaServiceGroup";
export type PanoramaServiceGroup = import("./panoramaServiceGroup").PanoramaServiceGroup;
export const PanoramaServiceGroup: typeof import("./panoramaServiceGroup").PanoramaServiceGroup = null as any;
utilities.lazyLoad(exports, ["PanoramaServiceGroup"], () => require("./panoramaServiceGroup"));

export { PanoramaServiceObjectArgs, PanoramaServiceObjectState } from "./panoramaServiceObject";
export type PanoramaServiceObject = import("./panoramaServiceObject").PanoramaServiceObject;
export const PanoramaServiceObject: typeof import("./panoramaServiceObject").PanoramaServiceObject = null as any;
utilities.lazyLoad(exports, ["PanoramaServiceObject"], () => require("./panoramaServiceObject"));

export { PanoramaSnmptrapServerProfileArgs, PanoramaSnmptrapServerProfileState } from "./panoramaSnmptrapServerProfile";
export type PanoramaSnmptrapServerProfile = import("./panoramaSnmptrapServerProfile").PanoramaSnmptrapServerProfile;
export const PanoramaSnmptrapServerProfile: typeof import("./panoramaSnmptrapServerProfile").PanoramaSnmptrapServerProfile = null as any;
utilities.lazyLoad(exports, ["PanoramaSnmptrapServerProfile"], () => require("./panoramaSnmptrapServerProfile"));

export { PanoramaStaticRouteIpv4Args, PanoramaStaticRouteIpv4State } from "./panoramaStaticRouteIpv4";
export type PanoramaStaticRouteIpv4 = import("./panoramaStaticRouteIpv4").PanoramaStaticRouteIpv4;
export const PanoramaStaticRouteIpv4: typeof import("./panoramaStaticRouteIpv4").PanoramaStaticRouteIpv4 = null as any;
utilities.lazyLoad(exports, ["PanoramaStaticRouteIpv4"], () => require("./panoramaStaticRouteIpv4"));

export { PanoramaSyslogServerProfileArgs, PanoramaSyslogServerProfileState } from "./panoramaSyslogServerProfile";
export type PanoramaSyslogServerProfile = import("./panoramaSyslogServerProfile").PanoramaSyslogServerProfile;
export const PanoramaSyslogServerProfile: typeof import("./panoramaSyslogServerProfile").PanoramaSyslogServerProfile = null as any;
utilities.lazyLoad(exports, ["PanoramaSyslogServerProfile"], () => require("./panoramaSyslogServerProfile"));

export { PanoramaTemplateArgs, PanoramaTemplateState } from "./panoramaTemplate";
export type PanoramaTemplate = import("./panoramaTemplate").PanoramaTemplate;
export const PanoramaTemplate: typeof import("./panoramaTemplate").PanoramaTemplate = null as any;
utilities.lazyLoad(exports, ["PanoramaTemplate"], () => require("./panoramaTemplate"));

export { PanoramaTemplateEntryArgs, PanoramaTemplateEntryState } from "./panoramaTemplateEntry";
export type PanoramaTemplateEntry = import("./panoramaTemplateEntry").PanoramaTemplateEntry;
export const PanoramaTemplateEntry: typeof import("./panoramaTemplateEntry").PanoramaTemplateEntry = null as any;
utilities.lazyLoad(exports, ["PanoramaTemplateEntry"], () => require("./panoramaTemplateEntry"));

export { PanoramaTemplateStackArgs, PanoramaTemplateStackState } from "./panoramaTemplateStack";
export type PanoramaTemplateStack = import("./panoramaTemplateStack").PanoramaTemplateStack;
export const PanoramaTemplateStack: typeof import("./panoramaTemplateStack").PanoramaTemplateStack = null as any;
utilities.lazyLoad(exports, ["PanoramaTemplateStack"], () => require("./panoramaTemplateStack"));

export { PanoramaTemplateStackEntryArgs, PanoramaTemplateStackEntryState } from "./panoramaTemplateStackEntry";
export type PanoramaTemplateStackEntry = import("./panoramaTemplateStackEntry").PanoramaTemplateStackEntry;
export const PanoramaTemplateStackEntry: typeof import("./panoramaTemplateStackEntry").PanoramaTemplateStackEntry = null as any;
utilities.lazyLoad(exports, ["PanoramaTemplateStackEntry"], () => require("./panoramaTemplateStackEntry"));

export { PanoramaTemplateVariableArgs, PanoramaTemplateVariableState } from "./panoramaTemplateVariable";
export type PanoramaTemplateVariable = import("./panoramaTemplateVariable").PanoramaTemplateVariable;
export const PanoramaTemplateVariable: typeof import("./panoramaTemplateVariable").PanoramaTemplateVariable = null as any;
utilities.lazyLoad(exports, ["PanoramaTemplateVariable"], () => require("./panoramaTemplateVariable"));

export { PanoramaTunnelInterfaceArgs, PanoramaTunnelInterfaceState } from "./panoramaTunnelInterface";
export type PanoramaTunnelInterface = import("./panoramaTunnelInterface").PanoramaTunnelInterface;
export const PanoramaTunnelInterface: typeof import("./panoramaTunnelInterface").PanoramaTunnelInterface = null as any;
utilities.lazyLoad(exports, ["PanoramaTunnelInterface"], () => require("./panoramaTunnelInterface"));

export { PanoramaVirtualRouterArgs, PanoramaVirtualRouterState } from "./panoramaVirtualRouter";
export type PanoramaVirtualRouter = import("./panoramaVirtualRouter").PanoramaVirtualRouter;
export const PanoramaVirtualRouter: typeof import("./panoramaVirtualRouter").PanoramaVirtualRouter = null as any;
utilities.lazyLoad(exports, ["PanoramaVirtualRouter"], () => require("./panoramaVirtualRouter"));

export { PanoramaVirtualRouterEntryArgs, PanoramaVirtualRouterEntryState } from "./panoramaVirtualRouterEntry";
export type PanoramaVirtualRouterEntry = import("./panoramaVirtualRouterEntry").PanoramaVirtualRouterEntry;
export const PanoramaVirtualRouterEntry: typeof import("./panoramaVirtualRouterEntry").PanoramaVirtualRouterEntry = null as any;
utilities.lazyLoad(exports, ["PanoramaVirtualRouterEntry"], () => require("./panoramaVirtualRouterEntry"));

export { PanoramaVlanArgs, PanoramaVlanState } from "./panoramaVlan";
export type PanoramaVlan = import("./panoramaVlan").PanoramaVlan;
export const PanoramaVlan: typeof import("./panoramaVlan").PanoramaVlan = null as any;
utilities.lazyLoad(exports, ["PanoramaVlan"], () => require("./panoramaVlan"));

export { PanoramaVlanEntryArgs, PanoramaVlanEntryState } from "./panoramaVlanEntry";
export type PanoramaVlanEntry = import("./panoramaVlanEntry").PanoramaVlanEntry;
export const PanoramaVlanEntry: typeof import("./panoramaVlanEntry").PanoramaVlanEntry = null as any;
utilities.lazyLoad(exports, ["PanoramaVlanEntry"], () => require("./panoramaVlanEntry"));

export { PanoramaVlanInterfaceArgs, PanoramaVlanInterfaceState } from "./panoramaVlanInterface";
export type PanoramaVlanInterface = import("./panoramaVlanInterface").PanoramaVlanInterface;
export const PanoramaVlanInterface: typeof import("./panoramaVlanInterface").PanoramaVlanInterface = null as any;
utilities.lazyLoad(exports, ["PanoramaVlanInterface"], () => require("./panoramaVlanInterface"));

export { PanoramaZoneArgs, PanoramaZoneState } from "./panoramaZone";
export type PanoramaZone = import("./panoramaZone").PanoramaZone;
export const PanoramaZone: typeof import("./panoramaZone").PanoramaZone = null as any;
utilities.lazyLoad(exports, ["PanoramaZone"], () => require("./panoramaZone"));

export { PanoramaZoneEntryArgs, PanoramaZoneEntryState } from "./panoramaZoneEntry";
export type PanoramaZoneEntry = import("./panoramaZoneEntry").PanoramaZoneEntry;
export const PanoramaZoneEntry: typeof import("./panoramaZoneEntry").PanoramaZoneEntry = null as any;
utilities.lazyLoad(exports, ["PanoramaZoneEntry"], () => require("./panoramaZoneEntry"));

export { PbfRuleGroupArgs, PbfRuleGroupState } from "./pbfRuleGroup";
export type PbfRuleGroup = import("./pbfRuleGroup").PbfRuleGroup;
export const PbfRuleGroup: typeof import("./pbfRuleGroup").PbfRuleGroup = null as any;
utilities.lazyLoad(exports, ["PbfRuleGroup"], () => require("./pbfRuleGroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RadiusProfileArgs, RadiusProfileState } from "./radiusProfile";
export type RadiusProfile = import("./radiusProfile").RadiusProfile;
export const RadiusProfile: typeof import("./radiusProfile").RadiusProfile = null as any;
utilities.lazyLoad(exports, ["RadiusProfile"], () => require("./radiusProfile"));

export { RedistributionProfileIpv4Args, RedistributionProfileIpv4State } from "./redistributionProfileIpv4";
export type RedistributionProfileIpv4 = import("./redistributionProfileIpv4").RedistributionProfileIpv4;
export const RedistributionProfileIpv4: typeof import("./redistributionProfileIpv4").RedistributionProfileIpv4 = null as any;
utilities.lazyLoad(exports, ["RedistributionProfileIpv4"], () => require("./redistributionProfileIpv4"));

export { SamlProfileArgs, SamlProfileState } from "./samlProfile";
export type SamlProfile = import("./samlProfile").SamlProfile;
export const SamlProfile: typeof import("./samlProfile").SamlProfile = null as any;
utilities.lazyLoad(exports, ["SamlProfile"], () => require("./samlProfile"));

export { SecurityPoliciesArgs, SecurityPoliciesState } from "./securityPolicies";
export type SecurityPolicies = import("./securityPolicies").SecurityPolicies;
export const SecurityPolicies: typeof import("./securityPolicies").SecurityPolicies = null as any;
utilities.lazyLoad(exports, ["SecurityPolicies"], () => require("./securityPolicies"));

export { SecurityPolicyArgs, SecurityPolicyState } from "./securityPolicy";
export type SecurityPolicy = import("./securityPolicy").SecurityPolicy;
export const SecurityPolicy: typeof import("./securityPolicy").SecurityPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityPolicy"], () => require("./securityPolicy"));

export { SecurityPolicyGroupArgs, SecurityPolicyGroupState } from "./securityPolicyGroup";
export type SecurityPolicyGroup = import("./securityPolicyGroup").SecurityPolicyGroup;
export const SecurityPolicyGroup: typeof import("./securityPolicyGroup").SecurityPolicyGroup = null as any;
utilities.lazyLoad(exports, ["SecurityPolicyGroup"], () => require("./securityPolicyGroup"));

export { SecurityProfileGroupArgs, SecurityProfileGroupState } from "./securityProfileGroup";
export type SecurityProfileGroup = import("./securityProfileGroup").SecurityProfileGroup;
export const SecurityProfileGroup: typeof import("./securityProfileGroup").SecurityProfileGroup = null as any;
utilities.lazyLoad(exports, ["SecurityProfileGroup"], () => require("./securityProfileGroup"));

export { SecurityRuleGroupArgs, SecurityRuleGroupState } from "./securityRuleGroup";
export type SecurityRuleGroup = import("./securityRuleGroup").SecurityRuleGroup;
export const SecurityRuleGroup: typeof import("./securityRuleGroup").SecurityRuleGroup = null as any;
utilities.lazyLoad(exports, ["SecurityRuleGroup"], () => require("./securityRuleGroup"));

export { ServiceGroupArgs, ServiceGroupState } from "./serviceGroup";
export type ServiceGroup = import("./serviceGroup").ServiceGroup;
export const ServiceGroup: typeof import("./serviceGroup").ServiceGroup = null as any;
utilities.lazyLoad(exports, ["ServiceGroup"], () => require("./serviceGroup"));

export { ServiceObjectArgs, ServiceObjectState } from "./serviceObject";
export type ServiceObject = import("./serviceObject").ServiceObject;
export const ServiceObject: typeof import("./serviceObject").ServiceObject = null as any;
utilities.lazyLoad(exports, ["ServiceObject"], () => require("./serviceObject"));

export { SnmptrapServerProfileArgs, SnmptrapServerProfileState } from "./snmptrapServerProfile";
export type SnmptrapServerProfile = import("./snmptrapServerProfile").SnmptrapServerProfile;
export const SnmptrapServerProfile: typeof import("./snmptrapServerProfile").SnmptrapServerProfile = null as any;
utilities.lazyLoad(exports, ["SnmptrapServerProfile"], () => require("./snmptrapServerProfile"));

export { SslDecryptArgs, SslDecryptState } from "./sslDecrypt";
export type SslDecrypt = import("./sslDecrypt").SslDecrypt;
export const SslDecrypt: typeof import("./sslDecrypt").SslDecrypt = null as any;
utilities.lazyLoad(exports, ["SslDecrypt"], () => require("./sslDecrypt"));

export { SslDecryptExcludeCertificateEntryArgs, SslDecryptExcludeCertificateEntryState } from "./sslDecryptExcludeCertificateEntry";
export type SslDecryptExcludeCertificateEntry = import("./sslDecryptExcludeCertificateEntry").SslDecryptExcludeCertificateEntry;
export const SslDecryptExcludeCertificateEntry: typeof import("./sslDecryptExcludeCertificateEntry").SslDecryptExcludeCertificateEntry = null as any;
utilities.lazyLoad(exports, ["SslDecryptExcludeCertificateEntry"], () => require("./sslDecryptExcludeCertificateEntry"));

export { SslDecryptTrustedRootCaEntryArgs, SslDecryptTrustedRootCaEntryState } from "./sslDecryptTrustedRootCaEntry";
export type SslDecryptTrustedRootCaEntry = import("./sslDecryptTrustedRootCaEntry").SslDecryptTrustedRootCaEntry;
export const SslDecryptTrustedRootCaEntry: typeof import("./sslDecryptTrustedRootCaEntry").SslDecryptTrustedRootCaEntry = null as any;
utilities.lazyLoad(exports, ["SslDecryptTrustedRootCaEntry"], () => require("./sslDecryptTrustedRootCaEntry"));

export { SslTlsServiceProfileArgs, SslTlsServiceProfileState } from "./sslTlsServiceProfile";
export type SslTlsServiceProfile = import("./sslTlsServiceProfile").SslTlsServiceProfile;
export const SslTlsServiceProfile: typeof import("./sslTlsServiceProfile").SslTlsServiceProfile = null as any;
utilities.lazyLoad(exports, ["SslTlsServiceProfile"], () => require("./sslTlsServiceProfile"));

export { StaticRouteIpv4Args, StaticRouteIpv4State } from "./staticRouteIpv4";
export type StaticRouteIpv4 = import("./staticRouteIpv4").StaticRouteIpv4;
export const StaticRouteIpv4: typeof import("./staticRouteIpv4").StaticRouteIpv4 = null as any;
utilities.lazyLoad(exports, ["StaticRouteIpv4"], () => require("./staticRouteIpv4"));

export { SyslogServerProfileArgs, SyslogServerProfileState } from "./syslogServerProfile";
export type SyslogServerProfile = import("./syslogServerProfile").SyslogServerProfile;
export const SyslogServerProfile: typeof import("./syslogServerProfile").SyslogServerProfile = null as any;
utilities.lazyLoad(exports, ["SyslogServerProfile"], () => require("./syslogServerProfile"));

export { TacacsPlusProfileArgs, TacacsPlusProfileState } from "./tacacsPlusProfile";
export type TacacsPlusProfile = import("./tacacsPlusProfile").TacacsPlusProfile;
export const TacacsPlusProfile: typeof import("./tacacsPlusProfile").TacacsPlusProfile = null as any;
utilities.lazyLoad(exports, ["TacacsPlusProfile"], () => require("./tacacsPlusProfile"));

export { TelemetryArgs, TelemetryState } from "./telemetry";
export type Telemetry = import("./telemetry").Telemetry;
export const Telemetry: typeof import("./telemetry").Telemetry = null as any;
utilities.lazyLoad(exports, ["Telemetry"], () => require("./telemetry"));

export { TunnelInterfaceArgs, TunnelInterfaceState } from "./tunnelInterface";
export type TunnelInterface = import("./tunnelInterface").TunnelInterface;
export const TunnelInterface: typeof import("./tunnelInterface").TunnelInterface = null as any;
utilities.lazyLoad(exports, ["TunnelInterface"], () => require("./tunnelInterface"));

export { UrlFilteringSecurityProfileArgs, UrlFilteringSecurityProfileState } from "./urlFilteringSecurityProfile";
export type UrlFilteringSecurityProfile = import("./urlFilteringSecurityProfile").UrlFilteringSecurityProfile;
export const UrlFilteringSecurityProfile: typeof import("./urlFilteringSecurityProfile").UrlFilteringSecurityProfile = null as any;
utilities.lazyLoad(exports, ["UrlFilteringSecurityProfile"], () => require("./urlFilteringSecurityProfile"));

export { UserTagArgs, UserTagState } from "./userTag";
export type UserTag = import("./userTag").UserTag;
export const UserTag: typeof import("./userTag").UserTag = null as any;
utilities.lazyLoad(exports, ["UserTag"], () => require("./userTag"));

export { UseridLoginArgs, UseridLoginState } from "./useridLogin";
export type UseridLogin = import("./useridLogin").UseridLogin;
export const UseridLogin: typeof import("./useridLogin").UseridLogin = null as any;
utilities.lazyLoad(exports, ["UseridLogin"], () => require("./useridLogin"));

export { VirtualRouterArgs, VirtualRouterState } from "./virtualRouter";
export type VirtualRouter = import("./virtualRouter").VirtualRouter;
export const VirtualRouter: typeof import("./virtualRouter").VirtualRouter = null as any;
utilities.lazyLoad(exports, ["VirtualRouter"], () => require("./virtualRouter"));

export { VirtualRouterEntryArgs, VirtualRouterEntryState } from "./virtualRouterEntry";
export type VirtualRouterEntry = import("./virtualRouterEntry").VirtualRouterEntry;
export const VirtualRouterEntry: typeof import("./virtualRouterEntry").VirtualRouterEntry = null as any;
utilities.lazyLoad(exports, ["VirtualRouterEntry"], () => require("./virtualRouterEntry"));

export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export const Vlan: typeof import("./vlan").Vlan = null as any;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));

export { VlanEntryArgs, VlanEntryState } from "./vlanEntry";
export type VlanEntry = import("./vlanEntry").VlanEntry;
export const VlanEntry: typeof import("./vlanEntry").VlanEntry = null as any;
utilities.lazyLoad(exports, ["VlanEntry"], () => require("./vlanEntry"));

export { VlanInterfaceArgs, VlanInterfaceState } from "./vlanInterface";
export type VlanInterface = import("./vlanInterface").VlanInterface;
export const VlanInterface: typeof import("./vlanInterface").VlanInterface = null as any;
utilities.lazyLoad(exports, ["VlanInterface"], () => require("./vlanInterface"));

export { VmAuthKeyArgs, VmAuthKeyState } from "./vmAuthKey";
export type VmAuthKey = import("./vmAuthKey").VmAuthKey;
export const VmAuthKey: typeof import("./vmAuthKey").VmAuthKey = null as any;
utilities.lazyLoad(exports, ["VmAuthKey"], () => require("./vmAuthKey"));

export { VmInformationSourceArgs, VmInformationSourceState } from "./vmInformationSource";
export type VmInformationSource = import("./vmInformationSource").VmInformationSource;
export const VmInformationSource: typeof import("./vmInformationSource").VmInformationSource = null as any;
utilities.lazyLoad(exports, ["VmInformationSource"], () => require("./vmInformationSource"));

export { VulnerabilitySecurityProfileArgs, VulnerabilitySecurityProfileState } from "./vulnerabilitySecurityProfile";
export type VulnerabilitySecurityProfile = import("./vulnerabilitySecurityProfile").VulnerabilitySecurityProfile;
export const VulnerabilitySecurityProfile: typeof import("./vulnerabilitySecurityProfile").VulnerabilitySecurityProfile = null as any;
utilities.lazyLoad(exports, ["VulnerabilitySecurityProfile"], () => require("./vulnerabilitySecurityProfile"));

export { WildfireAnalysisSecurityProfileArgs, WildfireAnalysisSecurityProfileState } from "./wildfireAnalysisSecurityProfile";
export type WildfireAnalysisSecurityProfile = import("./wildfireAnalysisSecurityProfile").WildfireAnalysisSecurityProfile;
export const WildfireAnalysisSecurityProfile: typeof import("./wildfireAnalysisSecurityProfile").WildfireAnalysisSecurityProfile = null as any;
utilities.lazyLoad(exports, ["WildfireAnalysisSecurityProfile"], () => require("./wildfireAnalysisSecurityProfile"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));

export { ZoneEntryArgs, ZoneEntryState } from "./zoneEntry";
export type ZoneEntry = import("./zoneEntry").ZoneEntry;
export const ZoneEntry: typeof import("./zoneEntry").ZoneEntry = null as any;
utilities.lazyLoad(exports, ["ZoneEntry"], () => require("./zoneEntry"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "panos:index/addressGroup:AddressGroup":
                return new AddressGroup(name, <any>undefined, { urn })
            case "panos:index/addressObject:AddressObject":
                return new AddressObject(name, <any>undefined, { urn })
            case "panos:index/addressObjects:AddressObjects":
                return new AddressObjects(name, <any>undefined, { urn })
            case "panos:index/administrativeTag:AdministrativeTag":
                return new AdministrativeTag(name, <any>undefined, { urn })
            case "panos:index/aggregateInterface:AggregateInterface":
                return new AggregateInterface(name, <any>undefined, { urn })
            case "panos:index/antiSpywareSecurityProfile:AntiSpywareSecurityProfile":
                return new AntiSpywareSecurityProfile(name, <any>undefined, { urn })
            case "panos:index/antivirusSecurityProfile:AntivirusSecurityProfile":
                return new AntivirusSecurityProfile(name, <any>undefined, { urn })
            case "panos:index/applicationGroup:ApplicationGroup":
                return new ApplicationGroup(name, <any>undefined, { urn })
            case "panos:index/applicationObject:ApplicationObject":
                return new ApplicationObject(name, <any>undefined, { urn })
            case "panos:index/applicationSignature:ApplicationSignature":
                return new ApplicationSignature(name, <any>undefined, { urn })
            case "panos:index/arp:Arp":
                return new Arp(name, <any>undefined, { urn })
            case "panos:index/authenticationProfile:AuthenticationProfile":
                return new AuthenticationProfile(name, <any>undefined, { urn })
            case "panos:index/awsCloudWatch:AwsCloudWatch":
                return new AwsCloudWatch(name, <any>undefined, { urn })
            case "panos:index/bfdProfile:BfdProfile":
                return new BfdProfile(name, <any>undefined, { urn })
            case "panos:index/bgp:Bgp":
                return new Bgp(name, <any>undefined, { urn })
            case "panos:index/bgpAggregate:BgpAggregate":
                return new BgpAggregate(name, <any>undefined, { urn })
            case "panos:index/bgpAggregateAdvertiseFilter:BgpAggregateAdvertiseFilter":
                return new BgpAggregateAdvertiseFilter(name, <any>undefined, { urn })
            case "panos:index/bgpAggregateSuppressFilter:BgpAggregateSuppressFilter":
                return new BgpAggregateSuppressFilter(name, <any>undefined, { urn })
            case "panos:index/bgpAuthProfile:BgpAuthProfile":
                return new BgpAuthProfile(name, <any>undefined, { urn })
            case "panos:index/bgpConditionalAdv:BgpConditionalAdv":
                return new BgpConditionalAdv(name, <any>undefined, { urn })
            case "panos:index/bgpConditionalAdvAdvertiseFilter:BgpConditionalAdvAdvertiseFilter":
                return new BgpConditionalAdvAdvertiseFilter(name, <any>undefined, { urn })
            case "panos:index/bgpConditionalAdvNonExistFilter:BgpConditionalAdvNonExistFilter":
                return new BgpConditionalAdvNonExistFilter(name, <any>undefined, { urn })
            case "panos:index/bgpDampeningProfile:BgpDampeningProfile":
                return new BgpDampeningProfile(name, <any>undefined, { urn })
            case "panos:index/bgpExportRuleGroup:BgpExportRuleGroup":
                return new BgpExportRuleGroup(name, <any>undefined, { urn })
            case "panos:index/bgpImportRuleGroup:BgpImportRuleGroup":
                return new BgpImportRuleGroup(name, <any>undefined, { urn })
            case "panos:index/bgpPeer:BgpPeer":
                return new BgpPeer(name, <any>undefined, { urn })
            case "panos:index/bgpPeerGroup:BgpPeerGroup":
                return new BgpPeerGroup(name, <any>undefined, { urn })
            case "panos:index/bgpRedistRule:BgpRedistRule":
                return new BgpRedistRule(name, <any>undefined, { urn })
            case "panos:index/certificateImport:CertificateImport":
                return new CertificateImport(name, <any>undefined, { urn })
            case "panos:index/certificateProfile:CertificateProfile":
                return new CertificateProfile(name, <any>undefined, { urn })
            case "panos:index/customDataPatternObject:CustomDataPatternObject":
                return new CustomDataPatternObject(name, <any>undefined, { urn })
            case "panos:index/customUrlCategory:CustomUrlCategory":
                return new CustomUrlCategory(name, <any>undefined, { urn })
            case "panos:index/customUrlCategoryEntry:CustomUrlCategoryEntry":
                return new CustomUrlCategoryEntry(name, <any>undefined, { urn })
            case "panos:index/dagTags:DagTags":
                return new DagTags(name, <any>undefined, { urn })
            case "panos:index/dataFilteringSecurityProfile:DataFilteringSecurityProfile":
                return new DataFilteringSecurityProfile(name, <any>undefined, { urn })
            case "panos:index/decryptionRuleGroup:DecryptionRuleGroup":
                return new DecryptionRuleGroup(name, <any>undefined, { urn })
            case "panos:index/deviceGroup:DeviceGroup":
                return new DeviceGroup(name, <any>undefined, { urn })
            case "panos:index/deviceGroupEntry:DeviceGroupEntry":
                return new DeviceGroupEntry(name, <any>undefined, { urn })
            case "panos:index/deviceGroupParent:DeviceGroupParent":
                return new DeviceGroupParent(name, <any>undefined, { urn })
            case "panos:index/dosProtectionProfile:DosProtectionProfile":
                return new DosProtectionProfile(name, <any>undefined, { urn })
            case "panos:index/dynamicUserGroup:DynamicUserGroup":
                return new DynamicUserGroup(name, <any>undefined, { urn })
            case "panos:index/edl:Edl":
                return new Edl(name, <any>undefined, { urn })
            case "panos:index/emailServerProfile:EmailServerProfile":
                return new EmailServerProfile(name, <any>undefined, { urn })
            case "panos:index/ethernetInterface:EthernetInterface":
                return new EthernetInterface(name, <any>undefined, { urn })
            case "panos:index/fileBlockingSecurityProfile:FileBlockingSecurityProfile":
                return new FileBlockingSecurityProfile(name, <any>undefined, { urn })
            case "panos:index/generalSettings:GeneralSettings":
                return new GeneralSettings(name, <any>undefined, { urn })
            case "panos:index/globalprotectIpsecCryptoProfile:GlobalprotectIpsecCryptoProfile":
                return new GlobalprotectIpsecCryptoProfile(name, <any>undefined, { urn })
            case "panos:index/greTunnel:GreTunnel":
                return new GreTunnel(name, <any>undefined, { urn })
            case "panos:index/httpServerProfile:HttpServerProfile":
                return new HttpServerProfile(name, <any>undefined, { urn })
            case "panos:index/ikeCryptoProfile:IkeCryptoProfile":
                return new IkeCryptoProfile(name, <any>undefined, { urn })
            case "panos:index/ikeGateway:IkeGateway":
                return new IkeGateway(name, <any>undefined, { urn })
            case "panos:index/ipTag:IpTag":
                return new IpTag(name, <any>undefined, { urn })
            case "panos:index/ipsecCryptoProfile:IpsecCryptoProfile":
                return new IpsecCryptoProfile(name, <any>undefined, { urn })
            case "panos:index/ipsecTunnel:IpsecTunnel":
                return new IpsecTunnel(name, <any>undefined, { urn })
            case "panos:index/ipsecTunnelProxyIdIpv4:IpsecTunnelProxyIdIpv4":
                return new IpsecTunnelProxyIdIpv4(name, <any>undefined, { urn })
            case "panos:index/kerberosProfile:KerberosProfile":
                return new KerberosProfile(name, <any>undefined, { urn })
            case "panos:index/layer2Subinterface:Layer2Subinterface":
                return new Layer2Subinterface(name, <any>undefined, { urn })
            case "panos:index/layer3Subinterface:Layer3Subinterface":
                return new Layer3Subinterface(name, <any>undefined, { urn })
            case "panos:index/ldapProfile:LdapProfile":
                return new LdapProfile(name, <any>undefined, { urn })
            case "panos:index/licenseApiKey:LicenseApiKey":
                return new LicenseApiKey(name, <any>undefined, { urn })
            case "panos:index/licensing:Licensing":
                return new Licensing(name, <any>undefined, { urn })
            case "panos:index/localUserDbGroup:LocalUserDbGroup":
                return new LocalUserDbGroup(name, <any>undefined, { urn })
            case "panos:index/localUserDbUser:LocalUserDbUser":
                return new LocalUserDbUser(name, <any>undefined, { urn })
            case "panos:index/logForwardingProfile:LogForwardingProfile":
                return new LogForwardingProfile(name, <any>undefined, { urn })
            case "panos:index/loopbackInterface:LoopbackInterface":
                return new LoopbackInterface(name, <any>undefined, { urn })
            case "panos:index/managementProfile:ManagementProfile":
                return new ManagementProfile(name, <any>undefined, { urn })
            case "panos:index/monitorProfile:MonitorProfile":
                return new MonitorProfile(name, <any>undefined, { urn })
            case "panos:index/natPolicy:NatPolicy":
                return new NatPolicy(name, <any>undefined, { urn })
            case "panos:index/natRule:NatRule":
                return new NatRule(name, <any>undefined, { urn })
            case "panos:index/natRuleGroup:NatRuleGroup":
                return new NatRuleGroup(name, <any>undefined, { urn })
            case "panos:index/ospf:Ospf":
                return new Ospf(name, <any>undefined, { urn })
            case "panos:index/ospfArea:OspfArea":
                return new OspfArea(name, <any>undefined, { urn })
            case "panos:index/ospfAreaInterface:OspfAreaInterface":
                return new OspfAreaInterface(name, <any>undefined, { urn })
            case "panos:index/ospfAreaVirtualLink:OspfAreaVirtualLink":
                return new OspfAreaVirtualLink(name, <any>undefined, { urn })
            case "panos:index/ospfAuthProfile:OspfAuthProfile":
                return new OspfAuthProfile(name, <any>undefined, { urn })
            case "panos:index/ospfExport:OspfExport":
                return new OspfExport(name, <any>undefined, { urn })
            case "panos:index/panoramaAddressGroup:PanoramaAddressGroup":
                return new PanoramaAddressGroup(name, <any>undefined, { urn })
            case "panos:index/panoramaAddressObject:PanoramaAddressObject":
                return new PanoramaAddressObject(name, <any>undefined, { urn })
            case "panos:index/panoramaAdministrativeTag:PanoramaAdministrativeTag":
                return new PanoramaAdministrativeTag(name, <any>undefined, { urn })
            case "panos:index/panoramaAggregateInterface:PanoramaAggregateInterface":
                return new PanoramaAggregateInterface(name, <any>undefined, { urn })
            case "panos:index/panoramaApplicationGroup:PanoramaApplicationGroup":
                return new PanoramaApplicationGroup(name, <any>undefined, { urn })
            case "panos:index/panoramaApplicationObject:PanoramaApplicationObject":
                return new PanoramaApplicationObject(name, <any>undefined, { urn })
            case "panos:index/panoramaApplicationSignature:PanoramaApplicationSignature":
                return new PanoramaApplicationSignature(name, <any>undefined, { urn })
            case "panos:index/panoramaBfdProfile:PanoramaBfdProfile":
                return new PanoramaBfdProfile(name, <any>undefined, { urn })
            case "panos:index/panoramaBgp:PanoramaBgp":
                return new PanoramaBgp(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpAggregate:PanoramaBgpAggregate":
                return new PanoramaBgpAggregate(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpAggregateAdvertiseFilter:PanoramaBgpAggregateAdvertiseFilter":
                return new PanoramaBgpAggregateAdvertiseFilter(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpAggregateSuppressFilter:PanoramaBgpAggregateSuppressFilter":
                return new PanoramaBgpAggregateSuppressFilter(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpAuthProfile:PanoramaBgpAuthProfile":
                return new PanoramaBgpAuthProfile(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpConditionalAdv:PanoramaBgpConditionalAdv":
                return new PanoramaBgpConditionalAdv(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpConditionalAdvAdvertiseFilter:PanoramaBgpConditionalAdvAdvertiseFilter":
                return new PanoramaBgpConditionalAdvAdvertiseFilter(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpConditionalAdvNonExistFilter:PanoramaBgpConditionalAdvNonExistFilter":
                return new PanoramaBgpConditionalAdvNonExistFilter(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpDampeningProfile:PanoramaBgpDampeningProfile":
                return new PanoramaBgpDampeningProfile(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpExportRuleGroup:PanoramaBgpExportRuleGroup":
                return new PanoramaBgpExportRuleGroup(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpImportRuleGroup:PanoramaBgpImportRuleGroup":
                return new PanoramaBgpImportRuleGroup(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpPeer:PanoramaBgpPeer":
                return new PanoramaBgpPeer(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpPeerGroup:PanoramaBgpPeerGroup":
                return new PanoramaBgpPeerGroup(name, <any>undefined, { urn })
            case "panos:index/panoramaBgpRedistRule:PanoramaBgpRedistRule":
                return new PanoramaBgpRedistRule(name, <any>undefined, { urn })
            case "panos:index/panoramaDeviceGroup:PanoramaDeviceGroup":
                return new PanoramaDeviceGroup(name, <any>undefined, { urn })
            case "panos:index/panoramaDeviceGroupEntry:PanoramaDeviceGroupEntry":
                return new PanoramaDeviceGroupEntry(name, <any>undefined, { urn })
            case "panos:index/panoramaEdl:PanoramaEdl":
                return new PanoramaEdl(name, <any>undefined, { urn })
            case "panos:index/panoramaEmailServerProfile:PanoramaEmailServerProfile":
                return new PanoramaEmailServerProfile(name, <any>undefined, { urn })
            case "panos:index/panoramaEthernetInterface:PanoramaEthernetInterface":
                return new PanoramaEthernetInterface(name, <any>undefined, { urn })
            case "panos:index/panoramaGcpAccount:PanoramaGcpAccount":
                return new PanoramaGcpAccount(name, <any>undefined, { urn })
            case "panos:index/panoramaGkeCluster:PanoramaGkeCluster":
                return new PanoramaGkeCluster(name, <any>undefined, { urn })
            case "panos:index/panoramaGkeClusterGroup:PanoramaGkeClusterGroup":
                return new PanoramaGkeClusterGroup(name, <any>undefined, { urn })
            case "panos:index/panoramaGreTunnel:PanoramaGreTunnel":
                return new PanoramaGreTunnel(name, <any>undefined, { urn })
            case "panos:index/panoramaHttpServerProfile:PanoramaHttpServerProfile":
                return new PanoramaHttpServerProfile(name, <any>undefined, { urn })
            case "panos:index/panoramaIkeCryptoProfile:PanoramaIkeCryptoProfile":
                return new PanoramaIkeCryptoProfile(name, <any>undefined, { urn })
            case "panos:index/panoramaIkeGateway:PanoramaIkeGateway":
                return new PanoramaIkeGateway(name, <any>undefined, { urn })
            case "panos:index/panoramaIpsecCryptoProfile:PanoramaIpsecCryptoProfile":
                return new PanoramaIpsecCryptoProfile(name, <any>undefined, { urn })
            case "panos:index/panoramaIpsecTunnel:PanoramaIpsecTunnel":
                return new PanoramaIpsecTunnel(name, <any>undefined, { urn })
            case "panos:index/panoramaIpsecTunnelProxyIdIpv4:PanoramaIpsecTunnelProxyIdIpv4":
                return new PanoramaIpsecTunnelProxyIdIpv4(name, <any>undefined, { urn })
            case "panos:index/panoramaLayer2Subinterface:PanoramaLayer2Subinterface":
                return new PanoramaLayer2Subinterface(name, <any>undefined, { urn })
            case "panos:index/panoramaLayer3Subinterface:PanoramaLayer3Subinterface":
                return new PanoramaLayer3Subinterface(name, <any>undefined, { urn })
            case "panos:index/panoramaLogForwardingProfile:PanoramaLogForwardingProfile":
                return new PanoramaLogForwardingProfile(name, <any>undefined, { urn })
            case "panos:index/panoramaLoopbackInterface:PanoramaLoopbackInterface":
                return new PanoramaLoopbackInterface(name, <any>undefined, { urn })
            case "panos:index/panoramaManagementProfile:PanoramaManagementProfile":
                return new PanoramaManagementProfile(name, <any>undefined, { urn })
            case "panos:index/panoramaMonitorProfile:PanoramaMonitorProfile":
                return new PanoramaMonitorProfile(name, <any>undefined, { urn })
            case "panos:index/panoramaNatPolicy:PanoramaNatPolicy":
                return new PanoramaNatPolicy(name, <any>undefined, { urn })
            case "panos:index/panoramaNatRule:PanoramaNatRule":
                return new PanoramaNatRule(name, <any>undefined, { urn })
            case "panos:index/panoramaNatRuleGroup:PanoramaNatRuleGroup":
                return new PanoramaNatRuleGroup(name, <any>undefined, { urn })
            case "panos:index/panoramaPbfRuleGroup:PanoramaPbfRuleGroup":
                return new PanoramaPbfRuleGroup(name, <any>undefined, { urn })
            case "panos:index/panoramaRedistributionProfileIpv4:PanoramaRedistributionProfileIpv4":
                return new PanoramaRedistributionProfileIpv4(name, <any>undefined, { urn })
            case "panos:index/panoramaSecurityPolicies:PanoramaSecurityPolicies":
                return new PanoramaSecurityPolicies(name, <any>undefined, { urn })
            case "panos:index/panoramaSecurityPolicy:PanoramaSecurityPolicy":
                return new PanoramaSecurityPolicy(name, <any>undefined, { urn })
            case "panos:index/panoramaSecurityPolicyGroup:PanoramaSecurityPolicyGroup":
                return new PanoramaSecurityPolicyGroup(name, <any>undefined, { urn })
            case "panos:index/panoramaSecurityRuleGroup:PanoramaSecurityRuleGroup":
                return new PanoramaSecurityRuleGroup(name, <any>undefined, { urn })
            case "panos:index/panoramaServiceGroup:PanoramaServiceGroup":
                return new PanoramaServiceGroup(name, <any>undefined, { urn })
            case "panos:index/panoramaServiceObject:PanoramaServiceObject":
                return new PanoramaServiceObject(name, <any>undefined, { urn })
            case "panos:index/panoramaSnmptrapServerProfile:PanoramaSnmptrapServerProfile":
                return new PanoramaSnmptrapServerProfile(name, <any>undefined, { urn })
            case "panos:index/panoramaStaticRouteIpv4:PanoramaStaticRouteIpv4":
                return new PanoramaStaticRouteIpv4(name, <any>undefined, { urn })
            case "panos:index/panoramaSyslogServerProfile:PanoramaSyslogServerProfile":
                return new PanoramaSyslogServerProfile(name, <any>undefined, { urn })
            case "panos:index/panoramaTemplate:PanoramaTemplate":
                return new PanoramaTemplate(name, <any>undefined, { urn })
            case "panos:index/panoramaTemplateEntry:PanoramaTemplateEntry":
                return new PanoramaTemplateEntry(name, <any>undefined, { urn })
            case "panos:index/panoramaTemplateStack:PanoramaTemplateStack":
                return new PanoramaTemplateStack(name, <any>undefined, { urn })
            case "panos:index/panoramaTemplateStackEntry:PanoramaTemplateStackEntry":
                return new PanoramaTemplateStackEntry(name, <any>undefined, { urn })
            case "panos:index/panoramaTemplateVariable:PanoramaTemplateVariable":
                return new PanoramaTemplateVariable(name, <any>undefined, { urn })
            case "panos:index/panoramaTunnelInterface:PanoramaTunnelInterface":
                return new PanoramaTunnelInterface(name, <any>undefined, { urn })
            case "panos:index/panoramaVirtualRouter:PanoramaVirtualRouter":
                return new PanoramaVirtualRouter(name, <any>undefined, { urn })
            case "panos:index/panoramaVirtualRouterEntry:PanoramaVirtualRouterEntry":
                return new PanoramaVirtualRouterEntry(name, <any>undefined, { urn })
            case "panos:index/panoramaVlan:PanoramaVlan":
                return new PanoramaVlan(name, <any>undefined, { urn })
            case "panos:index/panoramaVlanEntry:PanoramaVlanEntry":
                return new PanoramaVlanEntry(name, <any>undefined, { urn })
            case "panos:index/panoramaVlanInterface:PanoramaVlanInterface":
                return new PanoramaVlanInterface(name, <any>undefined, { urn })
            case "panos:index/panoramaZone:PanoramaZone":
                return new PanoramaZone(name, <any>undefined, { urn })
            case "panos:index/panoramaZoneEntry:PanoramaZoneEntry":
                return new PanoramaZoneEntry(name, <any>undefined, { urn })
            case "panos:index/pbfRuleGroup:PbfRuleGroup":
                return new PbfRuleGroup(name, <any>undefined, { urn })
            case "panos:index/radiusProfile:RadiusProfile":
                return new RadiusProfile(name, <any>undefined, { urn })
            case "panos:index/redistributionProfileIpv4:RedistributionProfileIpv4":
                return new RedistributionProfileIpv4(name, <any>undefined, { urn })
            case "panos:index/samlProfile:SamlProfile":
                return new SamlProfile(name, <any>undefined, { urn })
            case "panos:index/securityPolicies:SecurityPolicies":
                return new SecurityPolicies(name, <any>undefined, { urn })
            case "panos:index/securityPolicy:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "panos:index/securityPolicyGroup:SecurityPolicyGroup":
                return new SecurityPolicyGroup(name, <any>undefined, { urn })
            case "panos:index/securityProfileGroup:SecurityProfileGroup":
                return new SecurityProfileGroup(name, <any>undefined, { urn })
            case "panos:index/securityRuleGroup:SecurityRuleGroup":
                return new SecurityRuleGroup(name, <any>undefined, { urn })
            case "panos:index/serviceGroup:ServiceGroup":
                return new ServiceGroup(name, <any>undefined, { urn })
            case "panos:index/serviceObject:ServiceObject":
                return new ServiceObject(name, <any>undefined, { urn })
            case "panos:index/snmptrapServerProfile:SnmptrapServerProfile":
                return new SnmptrapServerProfile(name, <any>undefined, { urn })
            case "panos:index/sslDecrypt:SslDecrypt":
                return new SslDecrypt(name, <any>undefined, { urn })
            case "panos:index/sslDecryptExcludeCertificateEntry:SslDecryptExcludeCertificateEntry":
                return new SslDecryptExcludeCertificateEntry(name, <any>undefined, { urn })
            case "panos:index/sslDecryptTrustedRootCaEntry:SslDecryptTrustedRootCaEntry":
                return new SslDecryptTrustedRootCaEntry(name, <any>undefined, { urn })
            case "panos:index/sslTlsServiceProfile:SslTlsServiceProfile":
                return new SslTlsServiceProfile(name, <any>undefined, { urn })
            case "panos:index/staticRouteIpv4:StaticRouteIpv4":
                return new StaticRouteIpv4(name, <any>undefined, { urn })
            case "panos:index/syslogServerProfile:SyslogServerProfile":
                return new SyslogServerProfile(name, <any>undefined, { urn })
            case "panos:index/tacacsPlusProfile:TacacsPlusProfile":
                return new TacacsPlusProfile(name, <any>undefined, { urn })
            case "panos:index/telemetry:Telemetry":
                return new Telemetry(name, <any>undefined, { urn })
            case "panos:index/tunnelInterface:TunnelInterface":
                return new TunnelInterface(name, <any>undefined, { urn })
            case "panos:index/urlFilteringSecurityProfile:UrlFilteringSecurityProfile":
                return new UrlFilteringSecurityProfile(name, <any>undefined, { urn })
            case "panos:index/userTag:UserTag":
                return new UserTag(name, <any>undefined, { urn })
            case "panos:index/useridLogin:UseridLogin":
                return new UseridLogin(name, <any>undefined, { urn })
            case "panos:index/virtualRouter:VirtualRouter":
                return new VirtualRouter(name, <any>undefined, { urn })
            case "panos:index/virtualRouterEntry:VirtualRouterEntry":
                return new VirtualRouterEntry(name, <any>undefined, { urn })
            case "panos:index/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            case "panos:index/vlanEntry:VlanEntry":
                return new VlanEntry(name, <any>undefined, { urn })
            case "panos:index/vlanInterface:VlanInterface":
                return new VlanInterface(name, <any>undefined, { urn })
            case "panos:index/vmAuthKey:VmAuthKey":
                return new VmAuthKey(name, <any>undefined, { urn })
            case "panos:index/vmInformationSource:VmInformationSource":
                return new VmInformationSource(name, <any>undefined, { urn })
            case "panos:index/vulnerabilitySecurityProfile:VulnerabilitySecurityProfile":
                return new VulnerabilitySecurityProfile(name, <any>undefined, { urn })
            case "panos:index/wildfireAnalysisSecurityProfile:WildfireAnalysisSecurityProfile":
                return new WildfireAnalysisSecurityProfile(name, <any>undefined, { urn })
            case "panos:index/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            case "panos:index/zoneEntry:ZoneEntry":
                return new ZoneEntry(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("panos", "index/addressGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/addressObject", _module)
pulumi.runtime.registerResourceModule("panos", "index/addressObjects", _module)
pulumi.runtime.registerResourceModule("panos", "index/administrativeTag", _module)
pulumi.runtime.registerResourceModule("panos", "index/aggregateInterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/antiSpywareSecurityProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/antivirusSecurityProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/applicationGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/applicationObject", _module)
pulumi.runtime.registerResourceModule("panos", "index/applicationSignature", _module)
pulumi.runtime.registerResourceModule("panos", "index/arp", _module)
pulumi.runtime.registerResourceModule("panos", "index/authenticationProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/awsCloudWatch", _module)
pulumi.runtime.registerResourceModule("panos", "index/bfdProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgp", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpAggregate", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpAggregateAdvertiseFilter", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpAggregateSuppressFilter", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpAuthProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpConditionalAdv", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpConditionalAdvAdvertiseFilter", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpConditionalAdvNonExistFilter", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpDampeningProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpExportRuleGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpImportRuleGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpPeer", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpPeerGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/bgpRedistRule", _module)
pulumi.runtime.registerResourceModule("panos", "index/certificateImport", _module)
pulumi.runtime.registerResourceModule("panos", "index/certificateProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/customDataPatternObject", _module)
pulumi.runtime.registerResourceModule("panos", "index/customUrlCategory", _module)
pulumi.runtime.registerResourceModule("panos", "index/customUrlCategoryEntry", _module)
pulumi.runtime.registerResourceModule("panos", "index/dagTags", _module)
pulumi.runtime.registerResourceModule("panos", "index/dataFilteringSecurityProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/decryptionRuleGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/deviceGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/deviceGroupEntry", _module)
pulumi.runtime.registerResourceModule("panos", "index/deviceGroupParent", _module)
pulumi.runtime.registerResourceModule("panos", "index/dosProtectionProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/dynamicUserGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/edl", _module)
pulumi.runtime.registerResourceModule("panos", "index/emailServerProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/ethernetInterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/fileBlockingSecurityProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/generalSettings", _module)
pulumi.runtime.registerResourceModule("panos", "index/globalprotectIpsecCryptoProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/greTunnel", _module)
pulumi.runtime.registerResourceModule("panos", "index/httpServerProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/ikeCryptoProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/ikeGateway", _module)
pulumi.runtime.registerResourceModule("panos", "index/ipTag", _module)
pulumi.runtime.registerResourceModule("panos", "index/ipsecCryptoProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/ipsecTunnel", _module)
pulumi.runtime.registerResourceModule("panos", "index/ipsecTunnelProxyIdIpv4", _module)
pulumi.runtime.registerResourceModule("panos", "index/kerberosProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/layer2Subinterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/layer3Subinterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/ldapProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/licenseApiKey", _module)
pulumi.runtime.registerResourceModule("panos", "index/licensing", _module)
pulumi.runtime.registerResourceModule("panos", "index/localUserDbGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/localUserDbUser", _module)
pulumi.runtime.registerResourceModule("panos", "index/logForwardingProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/loopbackInterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/managementProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/monitorProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/natPolicy", _module)
pulumi.runtime.registerResourceModule("panos", "index/natRule", _module)
pulumi.runtime.registerResourceModule("panos", "index/natRuleGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/ospf", _module)
pulumi.runtime.registerResourceModule("panos", "index/ospfArea", _module)
pulumi.runtime.registerResourceModule("panos", "index/ospfAreaInterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/ospfAreaVirtualLink", _module)
pulumi.runtime.registerResourceModule("panos", "index/ospfAuthProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/ospfExport", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaAddressGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaAddressObject", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaAdministrativeTag", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaAggregateInterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaApplicationGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaApplicationObject", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaApplicationSignature", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBfdProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgp", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpAggregate", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpAggregateAdvertiseFilter", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpAggregateSuppressFilter", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpAuthProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpConditionalAdv", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpConditionalAdvAdvertiseFilter", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpConditionalAdvNonExistFilter", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpDampeningProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpExportRuleGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpImportRuleGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpPeer", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpPeerGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaBgpRedistRule", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaDeviceGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaDeviceGroupEntry", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaEdl", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaEmailServerProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaEthernetInterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaGcpAccount", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaGkeCluster", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaGkeClusterGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaGreTunnel", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaHttpServerProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaIkeCryptoProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaIkeGateway", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaIpsecCryptoProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaIpsecTunnel", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaIpsecTunnelProxyIdIpv4", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaLayer2Subinterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaLayer3Subinterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaLogForwardingProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaLoopbackInterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaManagementProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaMonitorProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaNatPolicy", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaNatRule", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaNatRuleGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaPbfRuleGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaRedistributionProfileIpv4", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaSecurityPolicies", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaSecurityPolicyGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaSecurityRuleGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaServiceGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaServiceObject", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaSnmptrapServerProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaStaticRouteIpv4", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaSyslogServerProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaTemplate", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaTemplateEntry", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaTemplateStack", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaTemplateStackEntry", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaTemplateVariable", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaTunnelInterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaVirtualRouter", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaVirtualRouterEntry", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaVlan", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaVlanEntry", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaVlanInterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaZone", _module)
pulumi.runtime.registerResourceModule("panos", "index/panoramaZoneEntry", _module)
pulumi.runtime.registerResourceModule("panos", "index/pbfRuleGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/radiusProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/redistributionProfileIpv4", _module)
pulumi.runtime.registerResourceModule("panos", "index/samlProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/securityPolicies", _module)
pulumi.runtime.registerResourceModule("panos", "index/securityPolicy", _module)
pulumi.runtime.registerResourceModule("panos", "index/securityPolicyGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/securityProfileGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/securityRuleGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/serviceGroup", _module)
pulumi.runtime.registerResourceModule("panos", "index/serviceObject", _module)
pulumi.runtime.registerResourceModule("panos", "index/snmptrapServerProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/sslDecrypt", _module)
pulumi.runtime.registerResourceModule("panos", "index/sslDecryptExcludeCertificateEntry", _module)
pulumi.runtime.registerResourceModule("panos", "index/sslDecryptTrustedRootCaEntry", _module)
pulumi.runtime.registerResourceModule("panos", "index/sslTlsServiceProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/staticRouteIpv4", _module)
pulumi.runtime.registerResourceModule("panos", "index/syslogServerProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/tacacsPlusProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/telemetry", _module)
pulumi.runtime.registerResourceModule("panos", "index/tunnelInterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/urlFilteringSecurityProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/userTag", _module)
pulumi.runtime.registerResourceModule("panos", "index/useridLogin", _module)
pulumi.runtime.registerResourceModule("panos", "index/virtualRouter", _module)
pulumi.runtime.registerResourceModule("panos", "index/virtualRouterEntry", _module)
pulumi.runtime.registerResourceModule("panos", "index/vlan", _module)
pulumi.runtime.registerResourceModule("panos", "index/vlanEntry", _module)
pulumi.runtime.registerResourceModule("panos", "index/vlanInterface", _module)
pulumi.runtime.registerResourceModule("panos", "index/vmAuthKey", _module)
pulumi.runtime.registerResourceModule("panos", "index/vmInformationSource", _module)
pulumi.runtime.registerResourceModule("panos", "index/vulnerabilitySecurityProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/wildfireAnalysisSecurityProfile", _module)
pulumi.runtime.registerResourceModule("panos", "index/zone", _module)
pulumi.runtime.registerResourceModule("panos", "index/zoneEntry", _module)
pulumi.runtime.registerResourcePackage("panos", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:panos") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
