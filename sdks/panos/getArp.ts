// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getArp(args: GetArpArgs, opts?: pulumi.InvokeOptions): Promise<GetArpResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("panos:index/getArp:getArp", {
        "id": args.id,
        "interfaceName": args.interfaceName,
        "interfaceType": args.interfaceType,
        "ip": args.ip,
        "subinterfaceName": args.subinterfaceName,
        "template": args.template,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getArp.
 */
export interface GetArpArgs {
    id?: string;
    interfaceName?: string;
    interfaceType?: string;
    ip: string;
    subinterfaceName?: string;
    template?: string;
}

/**
 * A collection of values returned by getArp.
 */
export interface GetArpResult {
    readonly id: string;
    readonly interface: string;
    readonly interfaceName?: string;
    readonly interfaceType?: string;
    readonly ip: string;
    readonly macAddress: string;
    readonly subinterfaceName?: string;
    readonly template?: string;
}
export function getArpOutput(args: GetArpOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetArpResult> {
    return pulumi.output(args).apply((a: any) => getArp(a, opts))
}

/**
 * A collection of arguments for invoking getArp.
 */
export interface GetArpOutputArgs {
    id?: pulumi.Input<string>;
    interfaceName?: pulumi.Input<string>;
    interfaceType?: pulumi.Input<string>;
    ip: pulumi.Input<string>;
    subinterfaceName?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}
