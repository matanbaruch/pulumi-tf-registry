// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAuditCommentHistory(args: GetAuditCommentHistoryArgs, opts?: pulumi.InvokeOptions): Promise<GetAuditCommentHistoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("panos:index/getAuditCommentHistory:getAuditCommentHistory", {
        "deviceGroup": args.deviceGroup,
        "direction": args.direction,
        "id": args.id,
        "name": args.name,
        "nlogs": args.nlogs,
        "ruleType": args.ruleType,
        "rulebase": args.rulebase,
        "skip": args.skip,
        "vsys": args.vsys,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAuditCommentHistory.
 */
export interface GetAuditCommentHistoryArgs {
    deviceGroup?: string;
    direction?: string;
    id?: string;
    name: string;
    nlogs?: number;
    ruleType?: string;
    rulebase?: string;
    skip?: number;
    vsys?: string;
}

/**
 * A collection of values returned by getAuditCommentHistory.
 */
export interface GetAuditCommentHistoryResult {
    readonly deviceGroup?: string;
    readonly direction?: string;
    readonly id: string;
    readonly logs: outputs.GetAuditCommentHistoryLog[];
    readonly name: string;
    readonly nlogs?: number;
    readonly ruleType?: string;
    readonly rulebase?: string;
    readonly skip?: number;
    readonly vsys?: string;
}
export function getAuditCommentHistoryOutput(args: GetAuditCommentHistoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuditCommentHistoryResult> {
    return pulumi.output(args).apply((a: any) => getAuditCommentHistory(a, opts))
}

/**
 * A collection of arguments for invoking getAuditCommentHistory.
 */
export interface GetAuditCommentHistoryOutputArgs {
    deviceGroup?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nlogs?: pulumi.Input<number>;
    ruleType?: pulumi.Input<string>;
    rulebase?: pulumi.Input<string>;
    skip?: pulumi.Input<number>;
    vsys?: pulumi.Input<string>;
}
