// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PanoramaGreTunnel extends pulumi.CustomResource {
    /**
     * Get an existing PanoramaGreTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PanoramaGreTunnelState, opts?: pulumi.CustomResourceOptions): PanoramaGreTunnel {
        return new PanoramaGreTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/panoramaGreTunnel:PanoramaGreTunnel';

    /**
     * Returns true if the given object is an instance of PanoramaGreTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PanoramaGreTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PanoramaGreTunnel.__pulumiType;
    }

    public readonly copyTos!: pulumi.Output<boolean | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    public readonly enableKeepAlive!: pulumi.Output<boolean | undefined>;
    public readonly interface!: pulumi.Output<string>;
    public readonly keepAliveHoldTimer!: pulumi.Output<number | undefined>;
    public readonly keepAliveInterval!: pulumi.Output<number | undefined>;
    public readonly keepAliveRetry!: pulumi.Output<number | undefined>;
    public readonly localAddressType!: pulumi.Output<string | undefined>;
    public readonly localAddressValue!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly peerAddress!: pulumi.Output<string>;
    /**
     * The template.
     */
    public readonly template!: pulumi.Output<string>;
    public readonly ttl!: pulumi.Output<number | undefined>;
    public readonly tunnelInterface!: pulumi.Output<string>;

    /**
     * Create a PanoramaGreTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PanoramaGreTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PanoramaGreTunnelArgs | PanoramaGreTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PanoramaGreTunnelState | undefined;
            resourceInputs["copyTos"] = state ? state.copyTos : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["enableKeepAlive"] = state ? state.enableKeepAlive : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["keepAliveHoldTimer"] = state ? state.keepAliveHoldTimer : undefined;
            resourceInputs["keepAliveInterval"] = state ? state.keepAliveInterval : undefined;
            resourceInputs["keepAliveRetry"] = state ? state.keepAliveRetry : undefined;
            resourceInputs["localAddressType"] = state ? state.localAddressType : undefined;
            resourceInputs["localAddressValue"] = state ? state.localAddressValue : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peerAddress"] = state ? state.peerAddress : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["tunnelInterface"] = state ? state.tunnelInterface : undefined;
        } else {
            const args = argsOrState as PanoramaGreTunnelArgs | undefined;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.localAddressValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localAddressValue'");
            }
            if ((!args || args.peerAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerAddress'");
            }
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            if ((!args || args.tunnelInterface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnelInterface'");
            }
            resourceInputs["copyTos"] = args ? args.copyTos : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["enableKeepAlive"] = args ? args.enableKeepAlive : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["keepAliveHoldTimer"] = args ? args.keepAliveHoldTimer : undefined;
            resourceInputs["keepAliveInterval"] = args ? args.keepAliveInterval : undefined;
            resourceInputs["keepAliveRetry"] = args ? args.keepAliveRetry : undefined;
            resourceInputs["localAddressType"] = args ? args.localAddressType : undefined;
            resourceInputs["localAddressValue"] = args ? args.localAddressValue : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peerAddress"] = args ? args.peerAddress : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["tunnelInterface"] = args ? args.tunnelInterface : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PanoramaGreTunnel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PanoramaGreTunnel resources.
 */
export interface PanoramaGreTunnelState {
    copyTos?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    enableKeepAlive?: pulumi.Input<boolean>;
    interface?: pulumi.Input<string>;
    keepAliveHoldTimer?: pulumi.Input<number>;
    keepAliveInterval?: pulumi.Input<number>;
    keepAliveRetry?: pulumi.Input<number>;
    localAddressType?: pulumi.Input<string>;
    localAddressValue?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    peerAddress?: pulumi.Input<string>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    tunnelInterface?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PanoramaGreTunnel resource.
 */
export interface PanoramaGreTunnelArgs {
    copyTos?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    enableKeepAlive?: pulumi.Input<boolean>;
    interface: pulumi.Input<string>;
    keepAliveHoldTimer?: pulumi.Input<number>;
    keepAliveInterval?: pulumi.Input<number>;
    keepAliveRetry?: pulumi.Input<number>;
    localAddressType?: pulumi.Input<string>;
    localAddressValue: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    peerAddress: pulumi.Input<string>;
    /**
     * The template.
     */
    template: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    tunnelInterface: pulumi.Input<string>;
}
