// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PanoramaManagementProfile extends pulumi.CustomResource {
    /**
     * Get an existing PanoramaManagementProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PanoramaManagementProfileState, opts?: pulumi.CustomResourceOptions): PanoramaManagementProfile {
        return new PanoramaManagementProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/panoramaManagementProfile:PanoramaManagementProfile';

    /**
     * Returns true if the given object is an instance of PanoramaManagementProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PanoramaManagementProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PanoramaManagementProfile.__pulumiType;
    }

    public readonly http!: pulumi.Output<boolean | undefined>;
    public readonly httpOcsp!: pulumi.Output<boolean | undefined>;
    public readonly https!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly permittedIps!: pulumi.Output<string[] | undefined>;
    public readonly ping!: pulumi.Output<boolean | undefined>;
    public readonly responsePages!: pulumi.Output<boolean | undefined>;
    public readonly snmp!: pulumi.Output<boolean | undefined>;
    public readonly ssh!: pulumi.Output<boolean | undefined>;
    public readonly telnet!: pulumi.Output<boolean | undefined>;
    public readonly template!: pulumi.Output<string | undefined>;
    public readonly templateStack!: pulumi.Output<string | undefined>;
    public readonly useridService!: pulumi.Output<boolean | undefined>;
    public readonly useridSyslogListenerSsl!: pulumi.Output<boolean | undefined>;
    public readonly useridSyslogListenerUdp!: pulumi.Output<boolean | undefined>;

    /**
     * Create a PanoramaManagementProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PanoramaManagementProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PanoramaManagementProfileArgs | PanoramaManagementProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PanoramaManagementProfileState | undefined;
            resourceInputs["http"] = state ? state.http : undefined;
            resourceInputs["httpOcsp"] = state ? state.httpOcsp : undefined;
            resourceInputs["https"] = state ? state.https : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permittedIps"] = state ? state.permittedIps : undefined;
            resourceInputs["ping"] = state ? state.ping : undefined;
            resourceInputs["responsePages"] = state ? state.responsePages : undefined;
            resourceInputs["snmp"] = state ? state.snmp : undefined;
            resourceInputs["ssh"] = state ? state.ssh : undefined;
            resourceInputs["telnet"] = state ? state.telnet : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
            resourceInputs["useridService"] = state ? state.useridService : undefined;
            resourceInputs["useridSyslogListenerSsl"] = state ? state.useridSyslogListenerSsl : undefined;
            resourceInputs["useridSyslogListenerUdp"] = state ? state.useridSyslogListenerUdp : undefined;
        } else {
            const args = argsOrState as PanoramaManagementProfileArgs | undefined;
            resourceInputs["http"] = args ? args.http : undefined;
            resourceInputs["httpOcsp"] = args ? args.httpOcsp : undefined;
            resourceInputs["https"] = args ? args.https : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permittedIps"] = args ? args.permittedIps : undefined;
            resourceInputs["ping"] = args ? args.ping : undefined;
            resourceInputs["responsePages"] = args ? args.responsePages : undefined;
            resourceInputs["snmp"] = args ? args.snmp : undefined;
            resourceInputs["ssh"] = args ? args.ssh : undefined;
            resourceInputs["telnet"] = args ? args.telnet : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
            resourceInputs["useridService"] = args ? args.useridService : undefined;
            resourceInputs["useridSyslogListenerSsl"] = args ? args.useridSyslogListenerSsl : undefined;
            resourceInputs["useridSyslogListenerUdp"] = args ? args.useridSyslogListenerUdp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PanoramaManagementProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PanoramaManagementProfile resources.
 */
export interface PanoramaManagementProfileState {
    http?: pulumi.Input<boolean>;
    httpOcsp?: pulumi.Input<boolean>;
    https?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    permittedIps?: pulumi.Input<pulumi.Input<string>[]>;
    ping?: pulumi.Input<boolean>;
    responsePages?: pulumi.Input<boolean>;
    snmp?: pulumi.Input<boolean>;
    ssh?: pulumi.Input<boolean>;
    telnet?: pulumi.Input<boolean>;
    template?: pulumi.Input<string>;
    templateStack?: pulumi.Input<string>;
    useridService?: pulumi.Input<boolean>;
    useridSyslogListenerSsl?: pulumi.Input<boolean>;
    useridSyslogListenerUdp?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PanoramaManagementProfile resource.
 */
export interface PanoramaManagementProfileArgs {
    http?: pulumi.Input<boolean>;
    httpOcsp?: pulumi.Input<boolean>;
    https?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    permittedIps?: pulumi.Input<pulumi.Input<string>[]>;
    ping?: pulumi.Input<boolean>;
    responsePages?: pulumi.Input<boolean>;
    snmp?: pulumi.Input<boolean>;
    ssh?: pulumi.Input<boolean>;
    telnet?: pulumi.Input<boolean>;
    template?: pulumi.Input<string>;
    templateStack?: pulumi.Input<string>;
    useridService?: pulumi.Input<boolean>;
    useridSyslogListenerSsl?: pulumi.Input<boolean>;
    useridSyslogListenerUdp?: pulumi.Input<boolean>;
}
