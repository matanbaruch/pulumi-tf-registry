// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PanoramaVirtualRouter extends pulumi.CustomResource {
    /**
     * Get an existing PanoramaVirtualRouter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PanoramaVirtualRouterState, opts?: pulumi.CustomResourceOptions): PanoramaVirtualRouter {
        return new PanoramaVirtualRouter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/panoramaVirtualRouter:PanoramaVirtualRouter';

    /**
     * Returns true if the given object is an instance of PanoramaVirtualRouter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PanoramaVirtualRouter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PanoramaVirtualRouter.__pulumiType;
    }

    public readonly ebgpDist!: pulumi.Output<number | undefined>;
    public readonly ecmpHashSeed!: pulumi.Output<number | undefined>;
    public readonly ecmpHashSourceOnly!: pulumi.Output<boolean | undefined>;
    public readonly ecmpHashUsePort!: pulumi.Output<boolean | undefined>;
    public readonly ecmpLoadBalanceMethod!: pulumi.Output<string | undefined>;
    public readonly ecmpMaxPath!: pulumi.Output<number | undefined>;
    public readonly ecmpStrictSourcePath!: pulumi.Output<boolean | undefined>;
    public readonly ecmpSymmetricReturn!: pulumi.Output<boolean | undefined>;
    public readonly ecmpWeightedRoundRobinInterfaces!: pulumi.Output<{[key: string]: number} | undefined>;
    public readonly enableEcmp!: pulumi.Output<boolean | undefined>;
    public readonly ibgpDist!: pulumi.Output<number | undefined>;
    /**
     * List of interfaces in this virtual router.
     */
    public readonly interfaces!: pulumi.Output<string[]>;
    /**
     * The name.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly ospfExtDist!: pulumi.Output<number | undefined>;
    public readonly ospfIntDist!: pulumi.Output<number | undefined>;
    public readonly ospfv3ExtDist!: pulumi.Output<number | undefined>;
    public readonly ospfv3IntDist!: pulumi.Output<number | undefined>;
    public readonly ripDist!: pulumi.Output<number | undefined>;
    public readonly staticDist!: pulumi.Output<number | undefined>;
    public readonly staticIpv6Dist!: pulumi.Output<number | undefined>;
    /**
     * The template.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * The template stack.
     */
    public readonly templateStack!: pulumi.Output<string | undefined>;
    /**
     * The vsys.
     */
    public readonly vsys!: pulumi.Output<string | undefined>;

    /**
     * Create a PanoramaVirtualRouter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PanoramaVirtualRouterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PanoramaVirtualRouterArgs | PanoramaVirtualRouterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PanoramaVirtualRouterState | undefined;
            resourceInputs["ebgpDist"] = state ? state.ebgpDist : undefined;
            resourceInputs["ecmpHashSeed"] = state ? state.ecmpHashSeed : undefined;
            resourceInputs["ecmpHashSourceOnly"] = state ? state.ecmpHashSourceOnly : undefined;
            resourceInputs["ecmpHashUsePort"] = state ? state.ecmpHashUsePort : undefined;
            resourceInputs["ecmpLoadBalanceMethod"] = state ? state.ecmpLoadBalanceMethod : undefined;
            resourceInputs["ecmpMaxPath"] = state ? state.ecmpMaxPath : undefined;
            resourceInputs["ecmpStrictSourcePath"] = state ? state.ecmpStrictSourcePath : undefined;
            resourceInputs["ecmpSymmetricReturn"] = state ? state.ecmpSymmetricReturn : undefined;
            resourceInputs["ecmpWeightedRoundRobinInterfaces"] = state ? state.ecmpWeightedRoundRobinInterfaces : undefined;
            resourceInputs["enableEcmp"] = state ? state.enableEcmp : undefined;
            resourceInputs["ibgpDist"] = state ? state.ibgpDist : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ospfExtDist"] = state ? state.ospfExtDist : undefined;
            resourceInputs["ospfIntDist"] = state ? state.ospfIntDist : undefined;
            resourceInputs["ospfv3ExtDist"] = state ? state.ospfv3ExtDist : undefined;
            resourceInputs["ospfv3IntDist"] = state ? state.ospfv3IntDist : undefined;
            resourceInputs["ripDist"] = state ? state.ripDist : undefined;
            resourceInputs["staticDist"] = state ? state.staticDist : undefined;
            resourceInputs["staticIpv6Dist"] = state ? state.staticIpv6Dist : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
            resourceInputs["vsys"] = state ? state.vsys : undefined;
        } else {
            const args = argsOrState as PanoramaVirtualRouterArgs | undefined;
            resourceInputs["ebgpDist"] = args ? args.ebgpDist : undefined;
            resourceInputs["ecmpHashSeed"] = args ? args.ecmpHashSeed : undefined;
            resourceInputs["ecmpHashSourceOnly"] = args ? args.ecmpHashSourceOnly : undefined;
            resourceInputs["ecmpHashUsePort"] = args ? args.ecmpHashUsePort : undefined;
            resourceInputs["ecmpLoadBalanceMethod"] = args ? args.ecmpLoadBalanceMethod : undefined;
            resourceInputs["ecmpMaxPath"] = args ? args.ecmpMaxPath : undefined;
            resourceInputs["ecmpStrictSourcePath"] = args ? args.ecmpStrictSourcePath : undefined;
            resourceInputs["ecmpSymmetricReturn"] = args ? args.ecmpSymmetricReturn : undefined;
            resourceInputs["ecmpWeightedRoundRobinInterfaces"] = args ? args.ecmpWeightedRoundRobinInterfaces : undefined;
            resourceInputs["enableEcmp"] = args ? args.enableEcmp : undefined;
            resourceInputs["ibgpDist"] = args ? args.ibgpDist : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ospfExtDist"] = args ? args.ospfExtDist : undefined;
            resourceInputs["ospfIntDist"] = args ? args.ospfIntDist : undefined;
            resourceInputs["ospfv3ExtDist"] = args ? args.ospfv3ExtDist : undefined;
            resourceInputs["ospfv3IntDist"] = args ? args.ospfv3IntDist : undefined;
            resourceInputs["ripDist"] = args ? args.ripDist : undefined;
            resourceInputs["staticDist"] = args ? args.staticDist : undefined;
            resourceInputs["staticIpv6Dist"] = args ? args.staticIpv6Dist : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
            resourceInputs["vsys"] = args ? args.vsys : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PanoramaVirtualRouter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PanoramaVirtualRouter resources.
 */
export interface PanoramaVirtualRouterState {
    ebgpDist?: pulumi.Input<number>;
    ecmpHashSeed?: pulumi.Input<number>;
    ecmpHashSourceOnly?: pulumi.Input<boolean>;
    ecmpHashUsePort?: pulumi.Input<boolean>;
    ecmpLoadBalanceMethod?: pulumi.Input<string>;
    ecmpMaxPath?: pulumi.Input<number>;
    ecmpStrictSourcePath?: pulumi.Input<boolean>;
    ecmpSymmetricReturn?: pulumi.Input<boolean>;
    ecmpWeightedRoundRobinInterfaces?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    enableEcmp?: pulumi.Input<boolean>;
    ibgpDist?: pulumi.Input<number>;
    /**
     * List of interfaces in this virtual router.
     */
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    ospfExtDist?: pulumi.Input<number>;
    ospfIntDist?: pulumi.Input<number>;
    ospfv3ExtDist?: pulumi.Input<number>;
    ospfv3IntDist?: pulumi.Input<number>;
    ripDist?: pulumi.Input<number>;
    staticDist?: pulumi.Input<number>;
    staticIpv6Dist?: pulumi.Input<number>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * The vsys.
     */
    vsys?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PanoramaVirtualRouter resource.
 */
export interface PanoramaVirtualRouterArgs {
    ebgpDist?: pulumi.Input<number>;
    ecmpHashSeed?: pulumi.Input<number>;
    ecmpHashSourceOnly?: pulumi.Input<boolean>;
    ecmpHashUsePort?: pulumi.Input<boolean>;
    ecmpLoadBalanceMethod?: pulumi.Input<string>;
    ecmpMaxPath?: pulumi.Input<number>;
    ecmpStrictSourcePath?: pulumi.Input<boolean>;
    ecmpSymmetricReturn?: pulumi.Input<boolean>;
    ecmpWeightedRoundRobinInterfaces?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    enableEcmp?: pulumi.Input<boolean>;
    ibgpDist?: pulumi.Input<number>;
    /**
     * List of interfaces in this virtual router.
     */
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    ospfExtDist?: pulumi.Input<number>;
    ospfIntDist?: pulumi.Input<number>;
    ospfv3ExtDist?: pulumi.Input<number>;
    ospfv3IntDist?: pulumi.Input<number>;
    ripDist?: pulumi.Input<number>;
    staticDist?: pulumi.Input<number>;
    staticIpv6Dist?: pulumi.Input<number>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * The vsys.
     */
    vsys?: pulumi.Input<string>;
}
