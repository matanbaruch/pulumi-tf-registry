// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CertificateImport extends pulumi.CustomResource {
    /**
     * Get an existing CertificateImport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateImportState, opts?: pulumi.CustomResourceOptions): CertificateImport {
        return new CertificateImport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/certificateImport:CertificateImport';

    /**
     * Returns true if the given object is an instance of CertificateImport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateImport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateImport.__pulumiType;
    }

    public /*out*/ readonly algorithm!: pulumi.Output<string>;
    public /*out*/ readonly ca!: pulumi.Output<boolean>;
    public /*out*/ readonly certFormat!: pulumi.Output<string>;
    public /*out*/ readonly certPassphrase!: pulumi.Output<string>;
    public /*out*/ readonly certPublicKey!: pulumi.Output<string>;
    public /*out*/ readonly commonName!: pulumi.Output<string>;
    public /*out*/ readonly csr!: pulumi.Output<string>;
    public /*out*/ readonly expiryEpoch!: pulumi.Output<string>;
    public /*out*/ readonly issuer!: pulumi.Output<string>;
    public /*out*/ readonly issuerHash!: pulumi.Output<string>;
    /**
     * The certificate name.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly notValidAfter!: pulumi.Output<string>;
    public /*out*/ readonly notValidBefore!: pulumi.Output<string>;
    /**
     * PEM certificate specification.
     */
    public readonly pem!: pulumi.Output<outputs.CertificateImportPem | undefined>;
    /**
     * PKCS12 certificate specification.
     */
    public readonly pkcs12!: pulumi.Output<outputs.CertificateImportPkcs12 | undefined>;
    public /*out*/ readonly privateKey!: pulumi.Output<string>;
    public /*out*/ readonly privateKeyOnHsm!: pulumi.Output<boolean>;
    public /*out*/ readonly publicKey!: pulumi.Output<string>;
    public /*out*/ readonly revokeDateEpoch!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly subject!: pulumi.Output<string>;
    public /*out*/ readonly subjectHash!: pulumi.Output<string>;
    /**
     * Template to import into.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * The vsys this object belongs in.
     */
    public readonly vsys!: pulumi.Output<string | undefined>;

    /**
     * Create a CertificateImport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CertificateImportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateImportArgs | CertificateImportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateImportState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["ca"] = state ? state.ca : undefined;
            resourceInputs["certFormat"] = state ? state.certFormat : undefined;
            resourceInputs["certPassphrase"] = state ? state.certPassphrase : undefined;
            resourceInputs["certPublicKey"] = state ? state.certPublicKey : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["csr"] = state ? state.csr : undefined;
            resourceInputs["expiryEpoch"] = state ? state.expiryEpoch : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["issuerHash"] = state ? state.issuerHash : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notValidAfter"] = state ? state.notValidAfter : undefined;
            resourceInputs["notValidBefore"] = state ? state.notValidBefore : undefined;
            resourceInputs["pem"] = state ? state.pem : undefined;
            resourceInputs["pkcs12"] = state ? state.pkcs12 : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["privateKeyOnHsm"] = state ? state.privateKeyOnHsm : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["revokeDateEpoch"] = state ? state.revokeDateEpoch : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["subjectHash"] = state ? state.subjectHash : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["vsys"] = state ? state.vsys : undefined;
        } else {
            const args = argsOrState as CertificateImportArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pem"] = args ? args.pem : undefined;
            resourceInputs["pkcs12"] = args ? args.pkcs12 : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["vsys"] = args ? args.vsys : undefined;
            resourceInputs["algorithm"] = undefined /*out*/;
            resourceInputs["ca"] = undefined /*out*/;
            resourceInputs["certFormat"] = undefined /*out*/;
            resourceInputs["certPassphrase"] = undefined /*out*/;
            resourceInputs["certPublicKey"] = undefined /*out*/;
            resourceInputs["commonName"] = undefined /*out*/;
            resourceInputs["csr"] = undefined /*out*/;
            resourceInputs["expiryEpoch"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["issuerHash"] = undefined /*out*/;
            resourceInputs["notValidAfter"] = undefined /*out*/;
            resourceInputs["notValidBefore"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["privateKeyOnHsm"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
            resourceInputs["revokeDateEpoch"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subject"] = undefined /*out*/;
            resourceInputs["subjectHash"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["certPassphrase", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CertificateImport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CertificateImport resources.
 */
export interface CertificateImportState {
    algorithm?: pulumi.Input<string>;
    ca?: pulumi.Input<boolean>;
    certFormat?: pulumi.Input<string>;
    certPassphrase?: pulumi.Input<string>;
    certPublicKey?: pulumi.Input<string>;
    commonName?: pulumi.Input<string>;
    csr?: pulumi.Input<string>;
    expiryEpoch?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    issuerHash?: pulumi.Input<string>;
    /**
     * The certificate name.
     */
    name?: pulumi.Input<string>;
    notValidAfter?: pulumi.Input<string>;
    notValidBefore?: pulumi.Input<string>;
    /**
     * PEM certificate specification.
     */
    pem?: pulumi.Input<inputs.CertificateImportPem>;
    /**
     * PKCS12 certificate specification.
     */
    pkcs12?: pulumi.Input<inputs.CertificateImportPkcs12>;
    privateKey?: pulumi.Input<string>;
    privateKeyOnHsm?: pulumi.Input<boolean>;
    publicKey?: pulumi.Input<string>;
    revokeDateEpoch?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subject?: pulumi.Input<string>;
    subjectHash?: pulumi.Input<string>;
    /**
     * Template to import into.
     */
    template?: pulumi.Input<string>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CertificateImport resource.
 */
export interface CertificateImportArgs {
    /**
     * The certificate name.
     */
    name?: pulumi.Input<string>;
    /**
     * PEM certificate specification.
     */
    pem?: pulumi.Input<inputs.CertificateImportPem>;
    /**
     * PKCS12 certificate specification.
     */
    pkcs12?: pulumi.Input<inputs.CertificateImportPkcs12>;
    /**
     * Template to import into.
     */
    template?: pulumi.Input<string>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}
