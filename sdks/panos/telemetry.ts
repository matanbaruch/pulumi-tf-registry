// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Telemetry extends pulumi.CustomResource {
    /**
     * Get an existing Telemetry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TelemetryState, opts?: pulumi.CustomResourceOptions): Telemetry {
        return new Telemetry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/telemetry:Telemetry';

    /**
     * Returns true if the given object is an instance of Telemetry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Telemetry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Telemetry.__pulumiType;
    }

    public readonly applicationReports!: pulumi.Output<boolean | undefined>;
    public readonly fileTypeIdentificationReports!: pulumi.Output<boolean | undefined>;
    public readonly passiveDnsMonitoring!: pulumi.Output<boolean | undefined>;
    public readonly productUsageStats!: pulumi.Output<boolean | undefined>;
    public readonly threatPreventionData!: pulumi.Output<boolean | undefined>;
    public readonly threatPreventionPacketCaptures!: pulumi.Output<boolean | undefined>;
    public readonly threatPreventionReports!: pulumi.Output<boolean | undefined>;
    public readonly urlReports!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Telemetry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TelemetryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TelemetryArgs | TelemetryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TelemetryState | undefined;
            resourceInputs["applicationReports"] = state ? state.applicationReports : undefined;
            resourceInputs["fileTypeIdentificationReports"] = state ? state.fileTypeIdentificationReports : undefined;
            resourceInputs["passiveDnsMonitoring"] = state ? state.passiveDnsMonitoring : undefined;
            resourceInputs["productUsageStats"] = state ? state.productUsageStats : undefined;
            resourceInputs["threatPreventionData"] = state ? state.threatPreventionData : undefined;
            resourceInputs["threatPreventionPacketCaptures"] = state ? state.threatPreventionPacketCaptures : undefined;
            resourceInputs["threatPreventionReports"] = state ? state.threatPreventionReports : undefined;
            resourceInputs["urlReports"] = state ? state.urlReports : undefined;
        } else {
            const args = argsOrState as TelemetryArgs | undefined;
            resourceInputs["applicationReports"] = args ? args.applicationReports : undefined;
            resourceInputs["fileTypeIdentificationReports"] = args ? args.fileTypeIdentificationReports : undefined;
            resourceInputs["passiveDnsMonitoring"] = args ? args.passiveDnsMonitoring : undefined;
            resourceInputs["productUsageStats"] = args ? args.productUsageStats : undefined;
            resourceInputs["threatPreventionData"] = args ? args.threatPreventionData : undefined;
            resourceInputs["threatPreventionPacketCaptures"] = args ? args.threatPreventionPacketCaptures : undefined;
            resourceInputs["threatPreventionReports"] = args ? args.threatPreventionReports : undefined;
            resourceInputs["urlReports"] = args ? args.urlReports : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Telemetry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Telemetry resources.
 */
export interface TelemetryState {
    applicationReports?: pulumi.Input<boolean>;
    fileTypeIdentificationReports?: pulumi.Input<boolean>;
    passiveDnsMonitoring?: pulumi.Input<boolean>;
    productUsageStats?: pulumi.Input<boolean>;
    threatPreventionData?: pulumi.Input<boolean>;
    threatPreventionPacketCaptures?: pulumi.Input<boolean>;
    threatPreventionReports?: pulumi.Input<boolean>;
    urlReports?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Telemetry resource.
 */
export interface TelemetryArgs {
    applicationReports?: pulumi.Input<boolean>;
    fileTypeIdentificationReports?: pulumi.Input<boolean>;
    passiveDnsMonitoring?: pulumi.Input<boolean>;
    productUsageStats?: pulumi.Input<boolean>;
    threatPreventionData?: pulumi.Input<boolean>;
    threatPreventionPacketCaptures?: pulumi.Input<boolean>;
    threatPreventionReports?: pulumi.Input<boolean>;
    urlReports?: pulumi.Input<boolean>;
}
