// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PanoramaGcpAccount extends pulumi.CustomResource {
    /**
     * Get an existing PanoramaGcpAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PanoramaGcpAccountState, opts?: pulumi.CustomResourceOptions): PanoramaGcpAccount {
        return new PanoramaGcpAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/panoramaGcpAccount:PanoramaGcpAccount';

    /**
     * Returns true if the given object is an instance of PanoramaGcpAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PanoramaGcpAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PanoramaGcpAccount.__pulumiType;
    }

    public readonly credentialFile!: pulumi.Output<string>;
    public /*out*/ readonly credentialFileEnc!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly serviceAccountCredentialType!: pulumi.Output<string | undefined>;

    /**
     * Create a PanoramaGcpAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PanoramaGcpAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PanoramaGcpAccountArgs | PanoramaGcpAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PanoramaGcpAccountState | undefined;
            resourceInputs["credentialFile"] = state ? state.credentialFile : undefined;
            resourceInputs["credentialFileEnc"] = state ? state.credentialFileEnc : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["serviceAccountCredentialType"] = state ? state.serviceAccountCredentialType : undefined;
        } else {
            const args = argsOrState as PanoramaGcpAccountArgs | undefined;
            if ((!args || args.credentialFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialFile'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["credentialFile"] = args?.credentialFile ? pulumi.secret(args.credentialFile) : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["serviceAccountCredentialType"] = args ? args.serviceAccountCredentialType : undefined;
            resourceInputs["credentialFileEnc"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["credentialFile", "credentialFileEnc"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PanoramaGcpAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PanoramaGcpAccount resources.
 */
export interface PanoramaGcpAccountState {
    credentialFile?: pulumi.Input<string>;
    credentialFileEnc?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    serviceAccountCredentialType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PanoramaGcpAccount resource.
 */
export interface PanoramaGcpAccountArgs {
    credentialFile: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    serviceAccountCredentialType?: pulumi.Input<string>;
}
