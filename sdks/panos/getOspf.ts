// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getOspf(args: GetOspfArgs, opts?: pulumi.InvokeOptions): Promise<GetOspfResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("panos:index/getOspf:getOspf", {
        "id": args.id,
        "template": args.template,
        "templateStack": args.templateStack,
        "virtualRouter": args.virtualRouter,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOspf.
 */
export interface GetOspfArgs {
    id?: string;
    template?: string;
    templateStack?: string;
    virtualRouter: string;
}

/**
 * A collection of values returned by getOspf.
 */
export interface GetOspfResult {
    readonly allowRedistributeDefaultRoute: boolean;
    readonly bfdProfile: string;
    readonly enable: boolean;
    readonly enableGracefulRestart: boolean;
    readonly gracePeriod: number;
    readonly helperEnable: boolean;
    readonly id: string;
    readonly lsaInterval: number;
    readonly maxNeighborRestartTime: number;
    readonly rejectDefaultRoute: boolean;
    readonly rfc1583: boolean;
    readonly routerId: string;
    readonly spfCalculationDelay: number;
    readonly strictLsaChecking: boolean;
    readonly template?: string;
    readonly templateStack?: string;
    readonly virtualRouter: string;
}
export function getOspfOutput(args: GetOspfOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOspfResult> {
    return pulumi.output(args).apply((a: any) => getOspf(a, opts))
}

/**
 * A collection of arguments for invoking getOspf.
 */
export interface GetOspfOutputArgs {
    id?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
    templateStack?: pulumi.Input<string>;
    virtualRouter: pulumi.Input<string>;
}
