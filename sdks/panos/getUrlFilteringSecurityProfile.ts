// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getUrlFilteringSecurityProfile(args: GetUrlFilteringSecurityProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetUrlFilteringSecurityProfileResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("panos:index/getUrlFilteringSecurityProfile:getUrlFilteringSecurityProfile", {
        "deviceGroup": args.deviceGroup,
        "id": args.id,
        "name": args.name,
        "vsys": args.vsys,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUrlFilteringSecurityProfile.
 */
export interface GetUrlFilteringSecurityProfileArgs {
    deviceGroup?: string;
    id?: string;
    name: string;
    vsys?: string;
}

/**
 * A collection of values returned by getUrlFilteringSecurityProfile.
 */
export interface GetUrlFilteringSecurityProfileResult {
    readonly alertCategories: string[];
    readonly allowCategories: string[];
    readonly allowLists: string[];
    readonly blockCategories: string[];
    readonly blockListAction: string;
    readonly blockLists: string[];
    readonly continueCategories: string[];
    readonly description: string;
    readonly deviceGroup?: string;
    readonly dynamicUrl: boolean;
    readonly expiredLicenseAction: boolean;
    readonly httpHeaderInsertions: outputs.GetUrlFilteringSecurityProfileHttpHeaderInsertion[];
    readonly id: string;
    readonly logContainerPageOnly: boolean;
    readonly logHttpHeaderReferer: boolean;
    readonly logHttpHeaderUserAgent: boolean;
    readonly logHttpHeaderXff: boolean;
    readonly machineLearningExceptions: string[];
    readonly machineLearningModels: outputs.GetUrlFilteringSecurityProfileMachineLearningModel[];
    readonly name: string;
    readonly overrideCategories: string[];
    readonly safeSearchEnforcement: boolean;
    readonly trackContainerPage: boolean;
    readonly ucdAlertCategories: string[];
    readonly ucdAllowCategories: string[];
    readonly ucdBlockCategories: string[];
    readonly ucdContinueCategories: string[];
    readonly ucdLogSeverity: string;
    readonly ucdMode: string;
    readonly ucdModeGroupMapping: string;
    readonly vsys?: string;
}
export function getUrlFilteringSecurityProfileOutput(args: GetUrlFilteringSecurityProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUrlFilteringSecurityProfileResult> {
    return pulumi.output(args).apply((a: any) => getUrlFilteringSecurityProfile(a, opts))
}

/**
 * A collection of arguments for invoking getUrlFilteringSecurityProfile.
 */
export interface GetUrlFilteringSecurityProfileOutputArgs {
    deviceGroup?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    vsys?: pulumi.Input<string>;
}
