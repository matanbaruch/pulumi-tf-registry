// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SamlProfile extends pulumi.CustomResource {
    /**
     * Get an existing SamlProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlProfileState, opts?: pulumi.CustomResourceOptions): SamlProfile {
        return new SamlProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/samlProfile:SamlProfile';

    /**
     * Returns true if the given object is an instance of SamlProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamlProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamlProfile.__pulumiType;
    }

    /**
     * Administrator use only.
     */
    public readonly adminUseOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Object name of IdP signing certificate.
     */
    public readonly identityProviderCertificate!: pulumi.Output<string>;
    /**
     * Unique identifier for SAML IdP.
     */
    public readonly identityProviderId!: pulumi.Output<string>;
    /**
     * Maximum allowed clock skew in seconds between SAML entities.
     */
    public readonly maxClockSkew!: pulumi.Output<number | undefined>;
    /**
     * The name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Sign SAML message to IdP.
     */
    public readonly signSamlMessage!: pulumi.Output<boolean | undefined>;
    /**
     * SAML HTTP binding for SLO requests to IdP.
     */
    public readonly sloBinding!: pulumi.Output<string | undefined>;
    /**
     * The single logout service URL for the IdP server.
     */
    public readonly sloUrl!: pulumi.Output<string | undefined>;
    /**
     * SAML HTTP binding for SSO requests to IdP.
     */
    public readonly ssoBinding!: pulumi.Output<string | undefined>;
    /**
     * The single sign on service URL for the IdP server.
     */
    public readonly ssoUrl!: pulumi.Output<string>;
    /**
     * The template.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * The template stack.
     */
    public readonly templateStack!: pulumi.Output<string | undefined>;
    /**
     * Validate identity provider certificate.
     */
    public readonly validateIdentityProviderCertificate!: pulumi.Output<boolean | undefined>;
    /**
     * The vsys this object belongs in.
     */
    public readonly vsys!: pulumi.Output<string | undefined>;

    /**
     * Create a SamlProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlProfileArgs | SamlProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlProfileState | undefined;
            resourceInputs["adminUseOnly"] = state ? state.adminUseOnly : undefined;
            resourceInputs["identityProviderCertificate"] = state ? state.identityProviderCertificate : undefined;
            resourceInputs["identityProviderId"] = state ? state.identityProviderId : undefined;
            resourceInputs["maxClockSkew"] = state ? state.maxClockSkew : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["signSamlMessage"] = state ? state.signSamlMessage : undefined;
            resourceInputs["sloBinding"] = state ? state.sloBinding : undefined;
            resourceInputs["sloUrl"] = state ? state.sloUrl : undefined;
            resourceInputs["ssoBinding"] = state ? state.ssoBinding : undefined;
            resourceInputs["ssoUrl"] = state ? state.ssoUrl : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
            resourceInputs["validateIdentityProviderCertificate"] = state ? state.validateIdentityProviderCertificate : undefined;
            resourceInputs["vsys"] = state ? state.vsys : undefined;
        } else {
            const args = argsOrState as SamlProfileArgs | undefined;
            if ((!args || args.identityProviderCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityProviderCertificate'");
            }
            if ((!args || args.identityProviderId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityProviderId'");
            }
            if ((!args || args.ssoUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ssoUrl'");
            }
            resourceInputs["adminUseOnly"] = args ? args.adminUseOnly : undefined;
            resourceInputs["identityProviderCertificate"] = args ? args.identityProviderCertificate : undefined;
            resourceInputs["identityProviderId"] = args ? args.identityProviderId : undefined;
            resourceInputs["maxClockSkew"] = args ? args.maxClockSkew : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["signSamlMessage"] = args ? args.signSamlMessage : undefined;
            resourceInputs["sloBinding"] = args ? args.sloBinding : undefined;
            resourceInputs["sloUrl"] = args ? args.sloUrl : undefined;
            resourceInputs["ssoBinding"] = args ? args.ssoBinding : undefined;
            resourceInputs["ssoUrl"] = args ? args.ssoUrl : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
            resourceInputs["validateIdentityProviderCertificate"] = args ? args.validateIdentityProviderCertificate : undefined;
            resourceInputs["vsys"] = args ? args.vsys : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SamlProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SamlProfile resources.
 */
export interface SamlProfileState {
    /**
     * Administrator use only.
     */
    adminUseOnly?: pulumi.Input<boolean>;
    /**
     * Object name of IdP signing certificate.
     */
    identityProviderCertificate?: pulumi.Input<string>;
    /**
     * Unique identifier for SAML IdP.
     */
    identityProviderId?: pulumi.Input<string>;
    /**
     * Maximum allowed clock skew in seconds between SAML entities.
     */
    maxClockSkew?: pulumi.Input<number>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * Sign SAML message to IdP.
     */
    signSamlMessage?: pulumi.Input<boolean>;
    /**
     * SAML HTTP binding for SLO requests to IdP.
     */
    sloBinding?: pulumi.Input<string>;
    /**
     * The single logout service URL for the IdP server.
     */
    sloUrl?: pulumi.Input<string>;
    /**
     * SAML HTTP binding for SSO requests to IdP.
     */
    ssoBinding?: pulumi.Input<string>;
    /**
     * The single sign on service URL for the IdP server.
     */
    ssoUrl?: pulumi.Input<string>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * Validate identity provider certificate.
     */
    validateIdentityProviderCertificate?: pulumi.Input<boolean>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SamlProfile resource.
 */
export interface SamlProfileArgs {
    /**
     * Administrator use only.
     */
    adminUseOnly?: pulumi.Input<boolean>;
    /**
     * Object name of IdP signing certificate.
     */
    identityProviderCertificate: pulumi.Input<string>;
    /**
     * Unique identifier for SAML IdP.
     */
    identityProviderId: pulumi.Input<string>;
    /**
     * Maximum allowed clock skew in seconds between SAML entities.
     */
    maxClockSkew?: pulumi.Input<number>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * Sign SAML message to IdP.
     */
    signSamlMessage?: pulumi.Input<boolean>;
    /**
     * SAML HTTP binding for SLO requests to IdP.
     */
    sloBinding?: pulumi.Input<string>;
    /**
     * The single logout service URL for the IdP server.
     */
    sloUrl?: pulumi.Input<string>;
    /**
     * SAML HTTP binding for SSO requests to IdP.
     */
    ssoBinding?: pulumi.Input<string>;
    /**
     * The single sign on service URL for the IdP server.
     */
    ssoUrl: pulumi.Input<string>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * Validate identity provider certificate.
     */
    validateIdentityProviderCertificate?: pulumi.Input<boolean>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}
