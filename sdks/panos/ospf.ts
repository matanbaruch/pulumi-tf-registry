// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ospf extends pulumi.CustomResource {
    /**
     * Get an existing Ospf resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OspfState, opts?: pulumi.CustomResourceOptions): Ospf {
        return new Ospf(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/ospf:Ospf';

    /**
     * Returns true if the given object is an instance of Ospf.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ospf {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ospf.__pulumiType;
    }

    /**
     * Allow redistribute default route
     */
    public readonly allowRedistributeDefaultRoute!: pulumi.Output<boolean | undefined>;
    /**
     * BFD profile name
     */
    public readonly bfdProfile!: pulumi.Output<string | undefined>;
    /**
     * Enable flag
     */
    public readonly enable!: pulumi.Output<boolean | undefined>;
    /**
     * Enable graceful restart
     */
    public readonly enableGracefulRestart!: pulumi.Output<boolean | undefined>;
    /**
     * Grace period
     */
    public readonly gracePeriod!: pulumi.Output<number | undefined>;
    /**
     * Helper enable
     */
    public readonly helperEnable!: pulumi.Output<boolean | undefined>;
    /**
     * LSA interval
     */
    public readonly lsaInterval!: pulumi.Output<number | undefined>;
    /**
     * Max neighbor restart time
     */
    public readonly maxNeighborRestartTime!: pulumi.Output<number | undefined>;
    /**
     * Reject default route
     */
    public readonly rejectDefaultRoute!: pulumi.Output<boolean | undefined>;
    /**
     * RFC 1583
     */
    public readonly rfc1583!: pulumi.Output<boolean | undefined>;
    /**
     * Router ID
     */
    public readonly routerId!: pulumi.Output<string | undefined>;
    /**
     * SPF calculation delay
     */
    public readonly spfCalculationDelay!: pulumi.Output<number | undefined>;
    /**
     * Strict LSA checking
     */
    public readonly strictLsaChecking!: pulumi.Output<boolean | undefined>;
    /**
     * The template.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * The template stack.
     */
    public readonly templateStack!: pulumi.Output<string | undefined>;
    /**
     * The virtual router
     */
    public readonly virtualRouter!: pulumi.Output<string>;

    /**
     * Create a Ospf resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OspfArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OspfArgs | OspfState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OspfState | undefined;
            resourceInputs["allowRedistributeDefaultRoute"] = state ? state.allowRedistributeDefaultRoute : undefined;
            resourceInputs["bfdProfile"] = state ? state.bfdProfile : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["enableGracefulRestart"] = state ? state.enableGracefulRestart : undefined;
            resourceInputs["gracePeriod"] = state ? state.gracePeriod : undefined;
            resourceInputs["helperEnable"] = state ? state.helperEnable : undefined;
            resourceInputs["lsaInterval"] = state ? state.lsaInterval : undefined;
            resourceInputs["maxNeighborRestartTime"] = state ? state.maxNeighborRestartTime : undefined;
            resourceInputs["rejectDefaultRoute"] = state ? state.rejectDefaultRoute : undefined;
            resourceInputs["rfc1583"] = state ? state.rfc1583 : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["spfCalculationDelay"] = state ? state.spfCalculationDelay : undefined;
            resourceInputs["strictLsaChecking"] = state ? state.strictLsaChecking : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
            resourceInputs["virtualRouter"] = state ? state.virtualRouter : undefined;
        } else {
            const args = argsOrState as OspfArgs | undefined;
            if ((!args || args.virtualRouter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualRouter'");
            }
            resourceInputs["allowRedistributeDefaultRoute"] = args ? args.allowRedistributeDefaultRoute : undefined;
            resourceInputs["bfdProfile"] = args ? args.bfdProfile : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["enableGracefulRestart"] = args ? args.enableGracefulRestart : undefined;
            resourceInputs["gracePeriod"] = args ? args.gracePeriod : undefined;
            resourceInputs["helperEnable"] = args ? args.helperEnable : undefined;
            resourceInputs["lsaInterval"] = args ? args.lsaInterval : undefined;
            resourceInputs["maxNeighborRestartTime"] = args ? args.maxNeighborRestartTime : undefined;
            resourceInputs["rejectDefaultRoute"] = args ? args.rejectDefaultRoute : undefined;
            resourceInputs["rfc1583"] = args ? args.rfc1583 : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["spfCalculationDelay"] = args ? args.spfCalculationDelay : undefined;
            resourceInputs["strictLsaChecking"] = args ? args.strictLsaChecking : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
            resourceInputs["virtualRouter"] = args ? args.virtualRouter : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ospf.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ospf resources.
 */
export interface OspfState {
    /**
     * Allow redistribute default route
     */
    allowRedistributeDefaultRoute?: pulumi.Input<boolean>;
    /**
     * BFD profile name
     */
    bfdProfile?: pulumi.Input<string>;
    /**
     * Enable flag
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Enable graceful restart
     */
    enableGracefulRestart?: pulumi.Input<boolean>;
    /**
     * Grace period
     */
    gracePeriod?: pulumi.Input<number>;
    /**
     * Helper enable
     */
    helperEnable?: pulumi.Input<boolean>;
    /**
     * LSA interval
     */
    lsaInterval?: pulumi.Input<number>;
    /**
     * Max neighbor restart time
     */
    maxNeighborRestartTime?: pulumi.Input<number>;
    /**
     * Reject default route
     */
    rejectDefaultRoute?: pulumi.Input<boolean>;
    /**
     * RFC 1583
     */
    rfc1583?: pulumi.Input<boolean>;
    /**
     * Router ID
     */
    routerId?: pulumi.Input<string>;
    /**
     * SPF calculation delay
     */
    spfCalculationDelay?: pulumi.Input<number>;
    /**
     * Strict LSA checking
     */
    strictLsaChecking?: pulumi.Input<boolean>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * The virtual router
     */
    virtualRouter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ospf resource.
 */
export interface OspfArgs {
    /**
     * Allow redistribute default route
     */
    allowRedistributeDefaultRoute?: pulumi.Input<boolean>;
    /**
     * BFD profile name
     */
    bfdProfile?: pulumi.Input<string>;
    /**
     * Enable flag
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Enable graceful restart
     */
    enableGracefulRestart?: pulumi.Input<boolean>;
    /**
     * Grace period
     */
    gracePeriod?: pulumi.Input<number>;
    /**
     * Helper enable
     */
    helperEnable?: pulumi.Input<boolean>;
    /**
     * LSA interval
     */
    lsaInterval?: pulumi.Input<number>;
    /**
     * Max neighbor restart time
     */
    maxNeighborRestartTime?: pulumi.Input<number>;
    /**
     * Reject default route
     */
    rejectDefaultRoute?: pulumi.Input<boolean>;
    /**
     * RFC 1583
     */
    rfc1583?: pulumi.Input<boolean>;
    /**
     * Router ID
     */
    routerId?: pulumi.Input<string>;
    /**
     * SPF calculation delay
     */
    spfCalculationDelay?: pulumi.Input<number>;
    /**
     * Strict LSA checking
     */
    strictLsaChecking?: pulumi.Input<boolean>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * The virtual router
     */
    virtualRouter: pulumi.Input<string>;
}
