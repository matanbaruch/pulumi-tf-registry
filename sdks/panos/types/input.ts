// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AddressObjectsObject {
    description?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AddressObjectsTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface AntiSpywareSecurityProfileBotnetList {
    /**
     * Action to take
     */
    action: pulumi.Input<string>;
    /**
     * Name
     */
    name: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) Packet capture config
     */
    packetCapture?: pulumi.Input<string>;
}

export interface AntiSpywareSecurityProfileDnsCategory {
    /**
     * Action to take
     */
    action?: pulumi.Input<string>;
    /**
     * Logging level
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Name
     */
    name: pulumi.Input<string>;
    /**
     * Packet capture config
     */
    packetCapture?: pulumi.Input<string>;
}

export interface AntiSpywareSecurityProfileException {
    /**
     * Action
     */
    action?: pulumi.Input<string>;
    /**
     * (action = block-ip) The duration to block for
     */
    blockIpDuration?: pulumi.Input<number>;
    /**
     * (action = block-ip) The track by config
     */
    blockIpTrackBy?: pulumi.Input<string>;
    /**
     * List of exempt IP addresses
     */
    exemptIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Threat name
     */
    name: pulumi.Input<string>;
    /**
     * (PAN-OS 8.x only) Packet capture config
     */
    packetCapture?: pulumi.Input<string>;
}

export interface AntiSpywareSecurityProfileRule {
    /**
     * Action to take
     */
    action?: pulumi.Input<string>;
    /**
     * (For action = block-ip) The duration
     */
    blockIpDuration?: pulumi.Input<number>;
    /**
     * (For action = block-ip) The track by setting
     */
    blockIpTrackBy?: pulumi.Input<string>;
    /**
     * The category
     */
    category: pulumi.Input<string>;
    /**
     * Name
     */
    name: pulumi.Input<string>;
    /**
     * Packet capture setting
     */
    packetCapture?: pulumi.Input<string>;
    /**
     * List of severities
     */
    severities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Threat name
     */
    threatName?: pulumi.Input<string>;
}

export interface AntiSpywareSecurityProfileWhiteList {
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Name
     */
    name: pulumi.Input<string>;
}

export interface AntivirusSecurityProfileApplicationException {
    /**
     * Action to take for this application
     */
    action?: pulumi.Input<string>;
    /**
     * The application name
     */
    application: pulumi.Input<string>;
}

export interface AntivirusSecurityProfileDecoder {
    /**
     * Decoder action
     */
    action?: pulumi.Input<string>;
    /**
     * (PAN-OS 10.0+) ML action
     */
    machineLearningAction?: pulumi.Input<string>;
    /**
     * Decoder name
     */
    name: pulumi.Input<string>;
    /**
     * Wildfire action
     */
    wildfireAction?: pulumi.Input<string>;
}

export interface AntivirusSecurityProfileMachineLearningException {
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Filename
     */
    filename?: pulumi.Input<string>;
    /**
     * Machine learning exception name
     */
    name: pulumi.Input<string>;
}

export interface AntivirusSecurityProfileMachineLearningModel {
    /**
     * Action to take
     */
    action: pulumi.Input<string>;
    /**
     * ML model
     */
    model: pulumi.Input<string>;
}

export interface ApplicationObjectDefaults {
    icmp?: pulumi.Input<inputs.ApplicationObjectDefaultsIcmp>;
    icmp6?: pulumi.Input<inputs.ApplicationObjectDefaultsIcmp6>;
    ipProtocol?: pulumi.Input<inputs.ApplicationObjectDefaultsIpProtocol>;
    port?: pulumi.Input<inputs.ApplicationObjectDefaultsPort>;
}

export interface ApplicationObjectDefaultsIcmp {
    code?: pulumi.Input<number>;
    type: pulumi.Input<number>;
}

export interface ApplicationObjectDefaultsIcmp6 {
    code?: pulumi.Input<number>;
    type: pulumi.Input<number>;
}

export interface ApplicationObjectDefaultsIpProtocol {
    value: pulumi.Input<string>;
}

export interface ApplicationObjectDefaultsPort {
    ports: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ApplicationObjectScanning {
    dataPatterns?: pulumi.Input<boolean>;
    fileTypes?: pulumi.Input<boolean>;
    viruses?: pulumi.Input<boolean>;
}

export interface ApplicationObjectTimeoutSettings {
    tcpHalfClosed?: pulumi.Input<number>;
    tcpTimeWait?: pulumi.Input<number>;
    tcpTimeout?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    udpTimeout?: pulumi.Input<number>;
}

export interface ApplicationSignatureAndCondition {
    name?: pulumi.Input<string>;
    orConditions: pulumi.Input<pulumi.Input<inputs.ApplicationSignatureAndConditionOrCondition>[]>;
}

export interface ApplicationSignatureAndConditionOrCondition {
    equalTo?: pulumi.Input<inputs.ApplicationSignatureAndConditionOrConditionEqualTo>;
    greaterThan?: pulumi.Input<inputs.ApplicationSignatureAndConditionOrConditionGreaterThan>;
    lessThan?: pulumi.Input<inputs.ApplicationSignatureAndConditionOrConditionLessThan>;
    name?: pulumi.Input<string>;
    patternMatch?: pulumi.Input<inputs.ApplicationSignatureAndConditionOrConditionPatternMatch>;
}

export interface ApplicationSignatureAndConditionOrConditionEqualTo {
    context: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    position?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ApplicationSignatureAndConditionOrConditionGreaterThan {
    context: pulumi.Input<string>;
    qualifiers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    value: pulumi.Input<string>;
}

export interface ApplicationSignatureAndConditionOrConditionLessThan {
    context: pulumi.Input<string>;
    qualifiers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    value: pulumi.Input<string>;
}

export interface ApplicationSignatureAndConditionOrConditionPatternMatch {
    context: pulumi.Input<string>;
    pattern: pulumi.Input<string>;
    qualifiers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface AuthenticationProfileMultiFactorAuthentication {
    /**
     * Enable additional authentication factors.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of additional authentication factors.
     */
    factors?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AuthenticationProfileSingleSignOn {
    /**
     * Kerberos keytab.
     */
    keytab?: pulumi.Input<string>;
    /**
     * Kerberos realm to be used for authentication.
     */
    realm?: pulumi.Input<string>;
    /**
     * Kerberos service principal.
     */
    servicePrincipal?: pulumi.Input<string>;
}

export interface AuthenticationProfileType {
    /**
     * LDAP authentication.
     */
    kerberos?: pulumi.Input<inputs.AuthenticationProfileTypeKerberos>;
    /**
     * LDAP authentication.
     */
    ldap?: pulumi.Input<inputs.AuthenticationProfileTypeLdap>;
    /**
     * Local database authentication.
     */
    localDatabase?: pulumi.Input<boolean>;
    /**
     * No authentication.
     */
    none?: pulumi.Input<boolean>;
    /**
     * Radius authentication.
     */
    radius?: pulumi.Input<inputs.AuthenticationProfileTypeRadius>;
    /**
     * SAML authentication.
     */
    saml?: pulumi.Input<inputs.AuthenticationProfileTypeSaml>;
    /**
     * (PAN-OS 7.0+) TACACS+ authentication.
     */
    tacacsPlus?: pulumi.Input<inputs.AuthenticationProfileTypeTacacsPlus>;
}

export interface AuthenticationProfileTypeKerberos {
    /**
     * (PAN-OS 7.0+) Realm name to be used for authentication.
     */
    realm: pulumi.Input<string>;
    /**
     * Kerberos server profile object.
     */
    serverProfile: pulumi.Input<string>;
}

export interface AuthenticationProfileTypeLdap {
    /**
     * Login attribute in LDAP server to authenticate against.
     */
    loginAttribute?: pulumi.Input<string>;
    /**
     * Number of days prior to warning a user about password expiry.
     */
    passwordExpiryWarning?: pulumi.Input<string>;
    /**
     * LDAP server profile object.
     */
    serverProfile: pulumi.Input<string>;
}

export interface AuthenticationProfileTypeRadius {
    /**
     * (PAN-OS 7.0+) Retrieve user group from RADIUS.
     */
    retrieveUserGroup?: pulumi.Input<boolean>;
    /**
     * Radius server profile object.
     */
    serverProfile: pulumi.Input<string>;
}

export interface AuthenticationProfileTypeSaml {
    /**
     * Access domain attribute.
     */
    accessDomainAttribute?: pulumi.Input<string>;
    /**
     * Admin role attribute.
     */
    adminRoleAttribute?: pulumi.Input<string>;
    /**
     * Certificate profile for IDP and SP.
     */
    certificateProfile?: pulumi.Input<string>;
    /**
     * Enable single logout.
     */
    enableSingleLogout?: pulumi.Input<boolean>;
    /**
     * Signing certificate for SAML requests.
     */
    requestSigningCertificate?: pulumi.Input<string>;
    /**
     * SAML IDP server profile object.
     */
    serverProfile: pulumi.Input<string>;
    /**
     * User group attribute.
     */
    userGroupAttribute?: pulumi.Input<string>;
    /**
     * Attribute name for username to be extracted from SAML response.
     */
    usernameAttribute?: pulumi.Input<string>;
}

export interface AuthenticationProfileTypeTacacsPlus {
    /**
     * (PAN-OS 8.0+) Retrieve user group from TACACS+.
     */
    retrieveUserGroup?: pulumi.Input<boolean>;
    /**
     * TACACS+ server profile object.
     */
    serverProfile: pulumi.Input<string>;
}

export interface BgpAggregateAdvertiseFilterAddressPrefix {
    exact?: pulumi.Input<boolean>;
    prefix: pulumi.Input<string>;
}

export interface BgpAggregateSuppressFilterAddressPrefix {
    exact?: pulumi.Input<boolean>;
    prefix: pulumi.Input<string>;
}

export interface BgpExportRuleGroupRule {
    action?: pulumi.Input<string>;
    asPathLimit?: pulumi.Input<number>;
    asPathType?: pulumi.Input<string>;
    asPathValue?: pulumi.Input<string>;
    communityType?: pulumi.Input<string>;
    communityValue?: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    extendedCommunityType?: pulumi.Input<string>;
    extendedCommunityValue?: pulumi.Input<string>;
    localPreference?: pulumi.Input<string>;
    matchAddressPrefixes?: pulumi.Input<pulumi.Input<inputs.BgpExportRuleGroupRuleMatchAddressPrefix>[]>;
    matchAsPathRegex?: pulumi.Input<string>;
    matchCommunityRegex?: pulumi.Input<string>;
    matchExtendedCommunityRegex?: pulumi.Input<string>;
    matchFromPeers?: pulumi.Input<pulumi.Input<string>[]>;
    matchMed?: pulumi.Input<string>;
    matchNextHops?: pulumi.Input<pulumi.Input<string>[]>;
    matchRouteTable?: pulumi.Input<string>;
    med?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nextHop?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    usedBies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BgpExportRuleGroupRuleMatchAddressPrefix {
    exact?: pulumi.Input<boolean>;
    prefix: pulumi.Input<string>;
}

export interface BgpImportRuleGroupRule {
    action?: pulumi.Input<string>;
    asPathLimit?: pulumi.Input<number>;
    asPathType?: pulumi.Input<string>;
    communityType?: pulumi.Input<string>;
    communityValue?: pulumi.Input<string>;
    dampening?: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    extendedCommunityType?: pulumi.Input<string>;
    extendedCommunityValue?: pulumi.Input<string>;
    localPreference?: pulumi.Input<string>;
    matchAddressPrefixes?: pulumi.Input<pulumi.Input<inputs.BgpImportRuleGroupRuleMatchAddressPrefix>[]>;
    matchAsPathRegex?: pulumi.Input<string>;
    matchCommunityRegex?: pulumi.Input<string>;
    matchExtendedCommunityRegex?: pulumi.Input<string>;
    matchFromPeers?: pulumi.Input<pulumi.Input<string>[]>;
    matchMed?: pulumi.Input<string>;
    matchNextHops?: pulumi.Input<pulumi.Input<string>[]>;
    matchRouteTable?: pulumi.Input<string>;
    med?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nextHop?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    usedBies?: pulumi.Input<pulumi.Input<string>[]>;
    weight?: pulumi.Input<number>;
}

export interface BgpImportRuleGroupRuleMatchAddressPrefix {
    exact?: pulumi.Input<boolean>;
    prefix: pulumi.Input<string>;
}

export interface CertificateImportPem {
    /**
     * The contents of the certificate file.
     */
    certificate: pulumi.Input<string>;
    /**
     * The certificate filename.
     */
    certificateFilename?: pulumi.Input<string>;
    /**
     * The private key file passphrase.
     */
    passphrase: pulumi.Input<string>;
    /**
     * The contents of the private key file.
     */
    privateKey: pulumi.Input<string>;
    /**
     * The private key filename.
     */
    privateKeyFilename?: pulumi.Input<string>;
}

export interface CertificateImportPkcs12 {
    /**
     * The contents of the certificate file.
     */
    certificate: pulumi.Input<string>;
    /**
     * The certificate filename.
     */
    certificateFilename?: pulumi.Input<string>;
    /**
     * The passphrase.
     */
    passphrase: pulumi.Input<string>;
}

export interface CertificateProfileCertificate {
    defaultOcspUrl?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    ocspVerifyCertificate?: pulumi.Input<string>;
    templateName?: pulumi.Input<string>;
}

export interface CustomDataPatternObjectFileProperty {
    /**
     * File property
     */
    fileProperty: pulumi.Input<string>;
    /**
     * The file type
     */
    fileType: pulumi.Input<string>;
    /**
     * Name
     */
    name: pulumi.Input<string>;
    /**
     * Property value
     */
    propertyValue: pulumi.Input<string>;
}

export interface CustomDataPatternObjectPredefinedPattern {
    /**
     * List of file types
     */
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name
     */
    name: pulumi.Input<string>;
}

export interface CustomDataPatternObjectRegex {
    /**
     * List of file types
     */
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name
     */
    name: pulumi.Input<string>;
    /**
     * The regex
     */
    regex: pulumi.Input<string>;
}

export interface DagTagsRegister {
    ip: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DataFilteringSecurityProfileRule {
    /**
     * Alert threshold
     */
    alertThreshold?: pulumi.Input<number>;
    /**
     * List of applications
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Block threshold
     */
    blockThreshold?: pulumi.Input<number>;
    /**
     * The data pattern to use
     */
    dataPattern: pulumi.Input<string>;
    /**
     * Direction
     */
    direction?: pulumi.Input<string>;
    /**
     * List of file types
     */
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (PAN-OS 8.0+) Log severity
     */
    logSeverity?: pulumi.Input<string>;
    /**
     * Rule name
     */
    name?: pulumi.Input<string>;
}

export interface DecryptionRuleGroupRule {
    /**
     * Action to take.
     */
    action?: pulumi.Input<string>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    /**
     * The decryption profile.
     */
    decryptionProfile?: pulumi.Input<string>;
    /**
     * The decryption type.
     */
    decryptionType?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * List of destination addresses.
     */
    destinationAddresses: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of destination HIP devices.
     */
    destinationHips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of destination zones.
     */
    destinationZones: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable this rule.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Forwarding profile.
     */
    forwardingProfile?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    /**
     * Log failed TLS handshakes.
     */
    logFailedTlsHandshakes?: pulumi.Input<boolean>;
    /**
     * The log setting.
     */
    logSetting?: pulumi.Input<string>;
    /**
     * Log successful TLS handshakes.
     */
    logSuccessfulTlsHandshakes?: pulumi.Input<boolean>;
    /**
     * The rule name.
     */
    name: pulumi.Input<string>;
    /**
     * Negate the destination addresses.
     */
    negateDestination?: pulumi.Input<boolean>;
    /**
     * Negate the source addresses.
     */
    negateSource?: pulumi.Input<boolean>;
    negateTarget?: pulumi.Input<boolean>;
    /**
     * List of services.
     */
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source addresses.
     */
    sourceAddresses: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source HIP devices.
     */
    sourceHips?: pulumi.Input<pulumi.Input<string>[]>;
    sourceUsers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source zones.
     */
    sourceZones: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (PAN-OS 10.1 and below) The SSL certificate.
     */
    sslCertificate?: pulumi.Input<string>;
    /**
     * (PAN-OS 10.2+) List of SSL decryption certs.
     */
    sslCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.DecryptionRuleGroupRuleTarget>[]>;
    /**
     * List of URL categories.
     */
    urlCategories: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface DecryptionRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DecryptionRuleGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DeviceGroupDevice {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DosProtectionProfileIcmp {
    /**
     * Activate rate
     */
    activateRate?: pulumi.Input<number>;
    /**
     * Alarm rate
     */
    alarmRate?: pulumi.Input<number>;
    /**
     * Block duration
     */
    blockDuration?: pulumi.Input<number>;
    /**
     * Enable this protection or not
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Max rate
     */
    maxRate?: pulumi.Input<number>;
}

export interface DosProtectionProfileIcmpv6 {
    /**
     * Activate rate
     */
    activateRate?: pulumi.Input<number>;
    /**
     * Alarm rate
     */
    alarmRate?: pulumi.Input<number>;
    /**
     * Block duration
     */
    blockDuration?: pulumi.Input<number>;
    /**
     * Enable this protection or not
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Max rate
     */
    maxRate?: pulumi.Input<number>;
}

export interface DosProtectionProfileOther {
    /**
     * Activate rate
     */
    activateRate?: pulumi.Input<number>;
    /**
     * Alarm rate
     */
    alarmRate?: pulumi.Input<number>;
    /**
     * Block duration
     */
    blockDuration?: pulumi.Input<number>;
    /**
     * Enable this protection or not
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Max rate
     */
    maxRate?: pulumi.Input<number>;
}

export interface DosProtectionProfileSyn {
    /**
     * SYN protection action
     */
    action: pulumi.Input<string>;
    /**
     * Activate rate
     */
    activateRate?: pulumi.Input<number>;
    /**
     * Alarm rate
     */
    alarmRate?: pulumi.Input<number>;
    /**
     * Block duration
     */
    blockDuration?: pulumi.Input<number>;
    /**
     * Enable this protection or not
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Max rate
     */
    maxRate?: pulumi.Input<number>;
}

export interface DosProtectionProfileUdp {
    /**
     * Activate rate
     */
    activateRate?: pulumi.Input<number>;
    /**
     * Alarm rate
     */
    alarmRate?: pulumi.Input<number>;
    /**
     * Block duration
     */
    blockDuration?: pulumi.Input<number>;
    /**
     * Enable this protection or not
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Max rate
     */
    maxRate?: pulumi.Input<number>;
}

export interface EmailServerProfileEmailServer {
    alsoToEmail?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    emailGateway: pulumi.Input<string>;
    fromEmail: pulumi.Input<string>;
    name: pulumi.Input<string>;
    toEmail: pulumi.Input<string>;
}

export interface FileBlockingSecurityProfileRule {
    /**
     * The action to take (note that forward and forward-and-continue are PAN-OS 6.1 only)
     */
    action?: pulumi.Input<string>;
    /**
     * List of applications
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The direction
     */
    direction?: pulumi.Input<string>;
    /**
     * List of file types
     */
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rule name
     */
    name: pulumi.Input<string>;
}

export interface GetPredefinedThreatTimeouts {
    read?: string;
}

export interface GetPredefinedThreatTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetTechSupportFileTimeouts {
    read?: string;
}

export interface GetTechSupportFileTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface HttpServerProfileAuthFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileConfigFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileDataFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileGtpFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileHipMatchFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileHttpServer {
    address: pulumi.Input<string>;
    certificateProfile?: pulumi.Input<string>;
    httpMethod?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    tlsVersion?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface HttpServerProfileIptagFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileSctpFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileSystemFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileThreatFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileTrafficFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileTunnelFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileUrlFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileUserIdFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface HttpServerProfileWildfireFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface KerberosProfileServer {
    /**
     * The server name.
     */
    name: pulumi.Input<string>;
    /**
     * Kerberos server port number.
     */
    port?: pulumi.Input<number>;
    /**
     * Server hostname or IP address.
     */
    server: pulumi.Input<string>;
}

export interface LdapProfileServer {
    /**
     * The server name.
     */
    name: pulumi.Input<string>;
    /**
     * LDAP server port number.
     */
    port?: pulumi.Input<number>;
    /**
     * Server hostname or IP address.
     */
    server: pulumi.Input<string>;
}

export interface LicensingLicense {
    authCode: pulumi.Input<string>;
    description: pulumi.Input<string>;
    expired: pulumi.Input<string>;
    expires: pulumi.Input<string>;
    feature: pulumi.Input<string>;
    issued: pulumi.Input<string>;
    serial: pulumi.Input<string>;
}

export interface LogForwardingProfileMatchList {
    actions?: pulumi.Input<pulumi.Input<inputs.LogForwardingProfileMatchListAction>[]>;
    description?: pulumi.Input<string>;
    emailServerProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    filter?: pulumi.Input<string>;
    httpServerProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    logType?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sendToPanorama?: pulumi.Input<boolean>;
    snmptrapServerProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    syslogServerProfiles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogForwardingProfileMatchListAction {
    azureIntegration?: pulumi.Input<inputs.LogForwardingProfileMatchListActionAzureIntegration>;
    name: pulumi.Input<string>;
    taggingIntegration?: pulumi.Input<inputs.LogForwardingProfileMatchListActionTaggingIntegration>;
}

export interface LogForwardingProfileMatchListActionAzureIntegration {
    azureIntegration?: pulumi.Input<boolean>;
}

export interface LogForwardingProfileMatchListActionTaggingIntegration {
    action?: pulumi.Input<string>;
    localRegistration?: pulumi.Input<inputs.LogForwardingProfileMatchListActionTaggingIntegrationLocalRegistration>;
    panoramaRegistration?: pulumi.Input<inputs.LogForwardingProfileMatchListActionTaggingIntegrationPanoramaRegistration>;
    remoteRegistration?: pulumi.Input<inputs.LogForwardingProfileMatchListActionTaggingIntegrationRemoteRegistration>;
    target?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
}

export interface LogForwardingProfileMatchListActionTaggingIntegrationLocalRegistration {
    tags: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogForwardingProfileMatchListActionTaggingIntegrationPanoramaRegistration {
    tags: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogForwardingProfileMatchListActionTaggingIntegrationRemoteRegistration {
    httpProfile: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NatRuleGroupRule {
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    negateTarget?: pulumi.Input<boolean>;
    originalPacket: pulumi.Input<inputs.NatRuleGroupRuleOriginalPacket>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.NatRuleGroupRuleTarget>[]>;
    translatedPacket: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacket>;
    type?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface NatRuleGroupRuleOriginalPacket {
    destinationAddresses: pulumi.Input<pulumi.Input<string>[]>;
    destinationInterface?: pulumi.Input<string>;
    destinationZone: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sourceAddresses: pulumi.Input<pulumi.Input<string>[]>;
    sourceZones: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NatRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NatRuleGroupRuleTranslatedPacket {
    destination: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketDestination>;
    source: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketSource>;
}

export interface NatRuleGroupRuleTranslatedPacketDestination {
    /**
     * @deprecated Deprecated
     */
    dynamic?: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketDestinationDynamic>;
    dynamicTranslation?: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketDestinationDynamicTranslation>;
    /**
     * @deprecated Deprecated
     */
    static?: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketDestinationStatic>;
    staticTranslation?: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketDestinationStaticTranslation>;
}

export interface NatRuleGroupRuleTranslatedPacketDestinationDynamic {
    address: pulumi.Input<string>;
    distribution?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface NatRuleGroupRuleTranslatedPacketDestinationDynamicTranslation {
    address: pulumi.Input<string>;
    distribution?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface NatRuleGroupRuleTranslatedPacketDestinationStatic {
    address: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface NatRuleGroupRuleTranslatedPacketDestinationStaticTranslation {
    address: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface NatRuleGroupRuleTranslatedPacketSource {
    dynamicIp?: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIp>;
    dynamicIpAndPort?: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPort>;
    staticIp?: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketSourceStaticIp>;
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIp {
    fallback?: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIpFallback>;
    translatedAddresses: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPort {
    interfaceAddress?: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortInterfaceAddress>;
    translatedAddress?: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortTranslatedAddress>;
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortInterfaceAddress {
    interface: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortTranslatedAddress {
    translatedAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIpFallback {
    interfaceAddress?: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackInterfaceAddress>;
    translatedAddress?: pulumi.Input<inputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackTranslatedAddress>;
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackInterfaceAddress {
    interface: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackTranslatedAddress {
    translatedAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NatRuleGroupRuleTranslatedPacketSourceStaticIp {
    biDirectional?: pulumi.Input<boolean>;
    translatedAddress: pulumi.Input<string>;
}

export interface NatRuleGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface OspfAreaExtRange {
    /**
     * Action
     */
    action?: pulumi.Input<string>;
    /**
     * Network
     */
    network: pulumi.Input<string>;
}

export interface OspfAreaRange {
    /**
     * Action
     */
    action?: pulumi.Input<string>;
    /**
     * Network
     */
    network: pulumi.Input<string>;
}

export interface OspfAuthProfileMd5Key {
    /**
     * MD5 key
     */
    key: pulumi.Input<string>;
    /**
     * MD5 key ID
     */
    keyId: pulumi.Input<number>;
    /**
     * Preferred key
     */
    preferred?: pulumi.Input<boolean>;
}

export interface OspfAuthProfileMd5KeysEnc {
    enc: pulumi.Input<string>;
    raw: pulumi.Input<string>;
}

export interface PanoramaApplicationObjectDefaults {
    icmp?: pulumi.Input<inputs.PanoramaApplicationObjectDefaultsIcmp>;
    icmp6?: pulumi.Input<inputs.PanoramaApplicationObjectDefaultsIcmp6>;
    ipProtocol?: pulumi.Input<inputs.PanoramaApplicationObjectDefaultsIpProtocol>;
    port?: pulumi.Input<inputs.PanoramaApplicationObjectDefaultsPort>;
}

export interface PanoramaApplicationObjectDefaultsIcmp {
    code?: pulumi.Input<number>;
    type: pulumi.Input<number>;
}

export interface PanoramaApplicationObjectDefaultsIcmp6 {
    code?: pulumi.Input<number>;
    type: pulumi.Input<number>;
}

export interface PanoramaApplicationObjectDefaultsIpProtocol {
    value: pulumi.Input<string>;
}

export interface PanoramaApplicationObjectDefaultsPort {
    ports: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaApplicationObjectScanning {
    dataPatterns?: pulumi.Input<boolean>;
    fileTypes?: pulumi.Input<boolean>;
    viruses?: pulumi.Input<boolean>;
}

export interface PanoramaApplicationObjectTimeoutSettings {
    tcpHalfClosed?: pulumi.Input<number>;
    tcpTimeWait?: pulumi.Input<number>;
    tcpTimeout?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    udpTimeout?: pulumi.Input<number>;
}

export interface PanoramaApplicationSignatureAndCondition {
    name?: pulumi.Input<string>;
    orConditions: pulumi.Input<pulumi.Input<inputs.PanoramaApplicationSignatureAndConditionOrCondition>[]>;
}

export interface PanoramaApplicationSignatureAndConditionOrCondition {
    equalTo?: pulumi.Input<inputs.PanoramaApplicationSignatureAndConditionOrConditionEqualTo>;
    greaterThan?: pulumi.Input<inputs.PanoramaApplicationSignatureAndConditionOrConditionGreaterThan>;
    lessThan?: pulumi.Input<inputs.PanoramaApplicationSignatureAndConditionOrConditionLessThan>;
    name?: pulumi.Input<string>;
    patternMatch?: pulumi.Input<inputs.PanoramaApplicationSignatureAndConditionOrConditionPatternMatch>;
}

export interface PanoramaApplicationSignatureAndConditionOrConditionEqualTo {
    context: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    position?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface PanoramaApplicationSignatureAndConditionOrConditionGreaterThan {
    context: pulumi.Input<string>;
    qualifiers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    value: pulumi.Input<string>;
}

export interface PanoramaApplicationSignatureAndConditionOrConditionLessThan {
    context: pulumi.Input<string>;
    qualifiers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    value: pulumi.Input<string>;
}

export interface PanoramaApplicationSignatureAndConditionOrConditionPatternMatch {
    context: pulumi.Input<string>;
    pattern: pulumi.Input<string>;
    qualifiers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface PanoramaBgpAggregateAdvertiseFilterAddressPrefix {
    exact?: pulumi.Input<boolean>;
    prefix: pulumi.Input<string>;
}

export interface PanoramaBgpAggregateSuppressFilterAddressPrefix {
    exact?: pulumi.Input<boolean>;
    prefix: pulumi.Input<string>;
}

export interface PanoramaBgpExportRuleGroupRule {
    action?: pulumi.Input<string>;
    asPathLimit?: pulumi.Input<number>;
    asPathType?: pulumi.Input<string>;
    asPathValue?: pulumi.Input<string>;
    communityType?: pulumi.Input<string>;
    communityValue?: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    extendedCommunityType?: pulumi.Input<string>;
    extendedCommunityValue?: pulumi.Input<string>;
    localPreference?: pulumi.Input<string>;
    matchAddressPrefixes?: pulumi.Input<pulumi.Input<inputs.PanoramaBgpExportRuleGroupRuleMatchAddressPrefix>[]>;
    matchAsPathRegex?: pulumi.Input<string>;
    matchCommunityRegex?: pulumi.Input<string>;
    matchExtendedCommunityRegex?: pulumi.Input<string>;
    matchFromPeers?: pulumi.Input<pulumi.Input<string>[]>;
    matchMed?: pulumi.Input<string>;
    matchNextHops?: pulumi.Input<pulumi.Input<string>[]>;
    matchRouteTable?: pulumi.Input<string>;
    med?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nextHop?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    usedBies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaBgpExportRuleGroupRuleMatchAddressPrefix {
    exact?: pulumi.Input<boolean>;
    prefix: pulumi.Input<string>;
}

export interface PanoramaBgpImportRuleGroupRule {
    action?: pulumi.Input<string>;
    asPathLimit?: pulumi.Input<number>;
    asPathType?: pulumi.Input<string>;
    communityType?: pulumi.Input<string>;
    communityValue?: pulumi.Input<string>;
    dampening?: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    extendedCommunityType?: pulumi.Input<string>;
    extendedCommunityValue?: pulumi.Input<string>;
    localPreference?: pulumi.Input<string>;
    matchAddressPrefixes?: pulumi.Input<pulumi.Input<inputs.PanoramaBgpImportRuleGroupRuleMatchAddressPrefix>[]>;
    matchAsPathRegex?: pulumi.Input<string>;
    matchCommunityRegex?: pulumi.Input<string>;
    matchExtendedCommunityRegex?: pulumi.Input<string>;
    matchFromPeers?: pulumi.Input<pulumi.Input<string>[]>;
    matchMed?: pulumi.Input<string>;
    matchNextHops?: pulumi.Input<pulumi.Input<string>[]>;
    matchRouteTable?: pulumi.Input<string>;
    med?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nextHop?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    usedBies?: pulumi.Input<pulumi.Input<string>[]>;
    weight?: pulumi.Input<number>;
}

export interface PanoramaBgpImportRuleGroupRuleMatchAddressPrefix {
    exact?: pulumi.Input<boolean>;
    prefix: pulumi.Input<string>;
}

export interface PanoramaDeviceGroupDevice {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaEmailServerProfileEmailServer {
    alsoToEmail?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    emailGateway: pulumi.Input<string>;
    fromEmail: pulumi.Input<string>;
    name: pulumi.Input<string>;
    toEmail: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileAuthFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileConfigFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileDataFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileGtpFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileHipMatchFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileHttpServer {
    address: pulumi.Input<string>;
    certificateProfile?: pulumi.Input<string>;
    httpMethod?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    tlsVersion?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileIptagFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileSctpFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileSystemFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileThreatFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileTrafficFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileTunnelFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileUrlFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileUserIdFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaHttpServerProfileWildfireFormat {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    payload?: pulumi.Input<string>;
    uriFormat?: pulumi.Input<string>;
}

export interface PanoramaLogForwardingProfileMatchList {
    actions?: pulumi.Input<pulumi.Input<inputs.PanoramaLogForwardingProfileMatchListAction>[]>;
    description?: pulumi.Input<string>;
    emailServerProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    filter?: pulumi.Input<string>;
    httpServerProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    logType?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sendToPanorama?: pulumi.Input<boolean>;
    snmptrapServerProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    syslogServerProfiles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaLogForwardingProfileMatchListAction {
    azureIntegration?: pulumi.Input<inputs.PanoramaLogForwardingProfileMatchListActionAzureIntegration>;
    name: pulumi.Input<string>;
    taggingIntegration?: pulumi.Input<inputs.PanoramaLogForwardingProfileMatchListActionTaggingIntegration>;
}

export interface PanoramaLogForwardingProfileMatchListActionAzureIntegration {
    azureIntegration?: pulumi.Input<boolean>;
}

export interface PanoramaLogForwardingProfileMatchListActionTaggingIntegration {
    action?: pulumi.Input<string>;
    localRegistration?: pulumi.Input<inputs.PanoramaLogForwardingProfileMatchListActionTaggingIntegrationLocalRegistration>;
    panoramaRegistration?: pulumi.Input<inputs.PanoramaLogForwardingProfileMatchListActionTaggingIntegrationPanoramaRegistration>;
    remoteRegistration?: pulumi.Input<inputs.PanoramaLogForwardingProfileMatchListActionTaggingIntegrationRemoteRegistration>;
    target?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
}

export interface PanoramaLogForwardingProfileMatchListActionTaggingIntegrationLocalRegistration {
    tags: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaLogForwardingProfileMatchListActionTaggingIntegrationPanoramaRegistration {
    tags: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaLogForwardingProfileMatchListActionTaggingIntegrationRemoteRegistration {
    httpProfile: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaNatPolicyTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaNatRuleGroupRule {
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    negateTarget?: pulumi.Input<boolean>;
    originalPacket: pulumi.Input<inputs.PanoramaNatRuleGroupRuleOriginalPacket>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.PanoramaNatRuleGroupRuleTarget>[]>;
    translatedPacket: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacket>;
    type?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface PanoramaNatRuleGroupRuleOriginalPacket {
    destinationAddresses: pulumi.Input<pulumi.Input<string>[]>;
    destinationInterface?: pulumi.Input<string>;
    destinationZone: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sourceAddresses: pulumi.Input<pulumi.Input<string>[]>;
    sourceZones: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaNatRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacket {
    destination: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketDestination>;
    source: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketSource>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketDestination {
    /**
     * @deprecated Deprecated
     */
    dynamic?: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketDestinationDynamic>;
    dynamicTranslation?: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketDestinationDynamicTranslation>;
    /**
     * @deprecated Deprecated
     */
    static?: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketDestinationStatic>;
    staticTranslation?: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketDestinationStaticTranslation>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketDestinationDynamic {
    address: pulumi.Input<string>;
    distribution?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketDestinationDynamicTranslation {
    address: pulumi.Input<string>;
    distribution?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketDestinationStatic {
    address: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketDestinationStaticTranslation {
    address: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSource {
    dynamicIp?: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIp>;
    dynamicIpAndPort?: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPort>;
    staticIp?: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceStaticIp>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIp {
    fallback?: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpFallback>;
    translatedAddresses: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPort {
    interfaceAddress?: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortInterfaceAddress>;
    translatedAddress?: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortTranslatedAddress>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortInterfaceAddress {
    interface: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortTranslatedAddress {
    translatedAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpFallback {
    interfaceAddress?: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackInterfaceAddress>;
    translatedAddress?: pulumi.Input<inputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackTranslatedAddress>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackInterfaceAddress {
    interface: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackTranslatedAddress {
    translatedAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceStaticIp {
    biDirectional?: pulumi.Input<boolean>;
    translatedAddress: pulumi.Input<string>;
}

export interface PanoramaNatRuleGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface PanoramaNatRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaPbfRuleGroupRule {
    activeActiveDeviceBinding?: pulumi.Input<string>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destination: pulumi.Input<inputs.PanoramaPbfRuleGroupRuleDestination>;
    disabled?: pulumi.Input<boolean>;
    forwarding: pulumi.Input<inputs.PanoramaPbfRuleGroupRuleForwarding>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    negateTarget?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<string>;
    source: pulumi.Input<inputs.PanoramaPbfRuleGroupRuleSource>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.PanoramaPbfRuleGroupRuleTarget>[]>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface PanoramaPbfRuleGroupRuleDestination {
    addresses: pulumi.Input<pulumi.Input<string>[]>;
    applications: pulumi.Input<pulumi.Input<string>[]>;
    negate?: pulumi.Input<boolean>;
    services: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaPbfRuleGroupRuleForwarding {
    action?: pulumi.Input<string>;
    egressInterface?: pulumi.Input<string>;
    monitor?: pulumi.Input<inputs.PanoramaPbfRuleGroupRuleForwardingMonitor>;
    nextHopType?: pulumi.Input<string>;
    nextHopValue?: pulumi.Input<string>;
    symmetricReturn?: pulumi.Input<inputs.PanoramaPbfRuleGroupRuleForwardingSymmetricReturn>;
    vsys?: pulumi.Input<string>;
}

export interface PanoramaPbfRuleGroupRuleForwardingMonitor {
    disableIfUnreachable?: pulumi.Input<boolean>;
    ipAddress?: pulumi.Input<string>;
    profile?: pulumi.Input<string>;
}

export interface PanoramaPbfRuleGroupRuleForwardingSymmetricReturn {
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    enable?: pulumi.Input<boolean>;
}

export interface PanoramaPbfRuleGroupRuleSource {
    addresses: pulumi.Input<pulumi.Input<string>[]>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    negate?: pulumi.Input<boolean>;
    users: pulumi.Input<pulumi.Input<string>[]>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaPbfRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaPbfRuleGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface PanoramaSecurityPoliciesRule {
    action?: pulumi.Input<string>;
    applications: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    categories: pulumi.Input<pulumi.Input<string>[]>;
    dataFiltering?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    destinationAddresses: pulumi.Input<pulumi.Input<string>[]>;
    destinationDevices?: pulumi.Input<pulumi.Input<string>[]>;
    destinationZones: pulumi.Input<pulumi.Input<string>[]>;
    disableServerResponseInspection?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    fileBlocking?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    hipProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    icmpUnreachable?: pulumi.Input<boolean>;
    logEnd?: pulumi.Input<boolean>;
    logSetting?: pulumi.Input<string>;
    logStart?: pulumi.Input<boolean>;
    /**
     * The name.
     */
    name: pulumi.Input<string>;
    negateDestination?: pulumi.Input<boolean>;
    /**
     * Negate the source addresses.
     */
    negateSource?: pulumi.Input<boolean>;
    negateTarget?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<string>;
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source addresses.
     */
    sourceAddresses: pulumi.Input<pulumi.Input<string>[]>;
    sourceDevices?: pulumi.Input<pulumi.Input<string>[]>;
    sourceUsers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source zones.
     */
    sourceZones: pulumi.Input<pulumi.Input<string>[]>;
    spyware?: pulumi.Input<string>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.PanoramaSecurityPoliciesRuleTarget>[]>;
    /**
     * Rule type.
     */
    type?: pulumi.Input<string>;
    urlFiltering?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
    virus?: pulumi.Input<string>;
    vulnerability?: pulumi.Input<string>;
    wildfireAnalysis?: pulumi.Input<string>;
}

export interface PanoramaSecurityPoliciesRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaSecurityPoliciesTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface PanoramaSecurityPolicyGroupRule {
    action?: pulumi.Input<string>;
    applications: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    categories: pulumi.Input<pulumi.Input<string>[]>;
    dataFiltering?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    destinationAddresses: pulumi.Input<pulumi.Input<string>[]>;
    destinationDevices?: pulumi.Input<pulumi.Input<string>[]>;
    destinationZones: pulumi.Input<pulumi.Input<string>[]>;
    disableServerResponseInspection?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    fileBlocking?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    hipProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    icmpUnreachable?: pulumi.Input<boolean>;
    logEnd?: pulumi.Input<boolean>;
    logSetting?: pulumi.Input<string>;
    logStart?: pulumi.Input<boolean>;
    /**
     * The name.
     */
    name: pulumi.Input<string>;
    negateDestination?: pulumi.Input<boolean>;
    /**
     * Negate the source addresses.
     */
    negateSource?: pulumi.Input<boolean>;
    negateTarget?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<string>;
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source addresses.
     */
    sourceAddresses: pulumi.Input<pulumi.Input<string>[]>;
    sourceDevices?: pulumi.Input<pulumi.Input<string>[]>;
    sourceUsers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source zones.
     */
    sourceZones: pulumi.Input<pulumi.Input<string>[]>;
    spyware?: pulumi.Input<string>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.PanoramaSecurityPolicyGroupRuleTarget>[]>;
    /**
     * Rule type.
     */
    type?: pulumi.Input<string>;
    urlFiltering?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
    virus?: pulumi.Input<string>;
    vulnerability?: pulumi.Input<string>;
    wildfireAnalysis?: pulumi.Input<string>;
}

export interface PanoramaSecurityPolicyGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaSecurityPolicyGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface PanoramaSecurityPolicyRule {
    action?: pulumi.Input<string>;
    applications: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    categories: pulumi.Input<pulumi.Input<string>[]>;
    dataFiltering?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    destinationAddresses: pulumi.Input<pulumi.Input<string>[]>;
    destinationDevices?: pulumi.Input<pulumi.Input<string>[]>;
    destinationZones: pulumi.Input<pulumi.Input<string>[]>;
    disableServerResponseInspection?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    fileBlocking?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    hipProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    icmpUnreachable?: pulumi.Input<boolean>;
    logEnd?: pulumi.Input<boolean>;
    logSetting?: pulumi.Input<string>;
    logStart?: pulumi.Input<boolean>;
    /**
     * The name.
     */
    name: pulumi.Input<string>;
    negateDestination?: pulumi.Input<boolean>;
    /**
     * Negate the source addresses.
     */
    negateSource?: pulumi.Input<boolean>;
    negateTarget?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<string>;
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source addresses.
     */
    sourceAddresses: pulumi.Input<pulumi.Input<string>[]>;
    sourceDevices?: pulumi.Input<pulumi.Input<string>[]>;
    sourceUsers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source zones.
     */
    sourceZones: pulumi.Input<pulumi.Input<string>[]>;
    spyware?: pulumi.Input<string>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.PanoramaSecurityPolicyRuleTarget>[]>;
    /**
     * Rule type.
     */
    type?: pulumi.Input<string>;
    urlFiltering?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
    virus?: pulumi.Input<string>;
    vulnerability?: pulumi.Input<string>;
    wildfireAnalysis?: pulumi.Input<string>;
}

export interface PanoramaSecurityPolicyRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaSecurityPolicyTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface PanoramaSecurityRuleGroupRule {
    action?: pulumi.Input<string>;
    applications: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    categories: pulumi.Input<pulumi.Input<string>[]>;
    dataFiltering?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    destinationAddresses: pulumi.Input<pulumi.Input<string>[]>;
    destinationDevices?: pulumi.Input<pulumi.Input<string>[]>;
    destinationZones: pulumi.Input<pulumi.Input<string>[]>;
    disableServerResponseInspection?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    fileBlocking?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    hipProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    icmpUnreachable?: pulumi.Input<boolean>;
    logEnd?: pulumi.Input<boolean>;
    logSetting?: pulumi.Input<string>;
    logStart?: pulumi.Input<boolean>;
    /**
     * The name.
     */
    name: pulumi.Input<string>;
    negateDestination?: pulumi.Input<boolean>;
    /**
     * Negate the source addresses.
     */
    negateSource?: pulumi.Input<boolean>;
    negateTarget?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<string>;
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source addresses.
     */
    sourceAddresses: pulumi.Input<pulumi.Input<string>[]>;
    sourceDevices?: pulumi.Input<pulumi.Input<string>[]>;
    sourceUsers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source zones.
     */
    sourceZones: pulumi.Input<pulumi.Input<string>[]>;
    spyware?: pulumi.Input<string>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.PanoramaSecurityRuleGroupRuleTarget>[]>;
    /**
     * Rule type.
     */
    type?: pulumi.Input<string>;
    urlFiltering?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
    virus?: pulumi.Input<string>;
    vulnerability?: pulumi.Input<string>;
    wildfireAnalysis?: pulumi.Input<string>;
}

export interface PanoramaSecurityRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PanoramaSecurityRuleGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface PanoramaSnmptrapServerProfileV2cServer {
    community: pulumi.Input<string>;
    manager: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface PanoramaSnmptrapServerProfileV3Server {
    authPassword: pulumi.Input<string>;
    engineId?: pulumi.Input<string>;
    manager: pulumi.Input<string>;
    name: pulumi.Input<string>;
    privPassword: pulumi.Input<string>;
    user: pulumi.Input<string>;
}

export interface PanoramaSyslogServerProfileSyslogServer {
    facility?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    server: pulumi.Input<string>;
    syslogFormat?: pulumi.Input<string>;
    transport?: pulumi.Input<string>;
}

export interface PanoramaTemplateDevice {
    serial: pulumi.Input<string>;
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PbfRuleGroupRule {
    activeActiveDeviceBinding?: pulumi.Input<string>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destination: pulumi.Input<inputs.PbfRuleGroupRuleDestination>;
    disabled?: pulumi.Input<boolean>;
    forwarding: pulumi.Input<inputs.PbfRuleGroupRuleForwarding>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    negateTarget?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<string>;
    source: pulumi.Input<inputs.PbfRuleGroupRuleSource>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.PbfRuleGroupRuleTarget>[]>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface PbfRuleGroupRuleDestination {
    addresses: pulumi.Input<pulumi.Input<string>[]>;
    applications: pulumi.Input<pulumi.Input<string>[]>;
    negate?: pulumi.Input<boolean>;
    services: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PbfRuleGroupRuleForwarding {
    action?: pulumi.Input<string>;
    egressInterface?: pulumi.Input<string>;
    monitor?: pulumi.Input<inputs.PbfRuleGroupRuleForwardingMonitor>;
    nextHopType?: pulumi.Input<string>;
    nextHopValue?: pulumi.Input<string>;
    symmetricReturn?: pulumi.Input<inputs.PbfRuleGroupRuleForwardingSymmetricReturn>;
    vsys?: pulumi.Input<string>;
}

export interface PbfRuleGroupRuleForwardingMonitor {
    disableIfUnreachable?: pulumi.Input<boolean>;
    ipAddress?: pulumi.Input<string>;
    profile?: pulumi.Input<string>;
}

export interface PbfRuleGroupRuleForwardingSymmetricReturn {
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    enable?: pulumi.Input<boolean>;
}

export interface PbfRuleGroupRuleSource {
    addresses: pulumi.Input<pulumi.Input<string>[]>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    negate?: pulumi.Input<boolean>;
    users: pulumi.Input<pulumi.Input<string>[]>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PbfRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PbfRuleGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface RadiusProfileProtocol {
    /**
     * (PAN-OS 8.0 only) Auto.
     */
    auto?: pulumi.Input<boolean>;
    /**
     * CHAP.
     */
    chap?: pulumi.Input<boolean>;
    /**
     * EAP-TTLS with PAP.
     */
    eapTtlsWithPap?: pulumi.Input<inputs.RadiusProfileProtocolEapTtlsWithPap>;
    /**
     * PAP.
     */
    pap?: pulumi.Input<boolean>;
    /**
     * PEAP-MSCHAPv2.
     */
    peapMschapV2?: pulumi.Input<inputs.RadiusProfileProtocolPeapMschapV2>;
    /**
     * PEAP with GTC.
     */
    peapWithGtc?: pulumi.Input<inputs.RadiusProfileProtocolPeapWithGtc>;
}

export interface RadiusProfileProtocolEapTtlsWithPap {
    /**
     * Certificate profile for verifying the Radius server.
     */
    certificateProfile: pulumi.Input<string>;
    /**
     * Make outer identity anonymous.
     */
    makeOuterIdentityAnonymous?: pulumi.Input<boolean>;
}

export interface RadiusProfileProtocolPeapMschapV2 {
    /**
     * Allow users to change passwords after expiry.
     */
    allowExpiredPasswordChange?: pulumi.Input<boolean>;
    /**
     * Certificate profile for verifying the Radius server.
     */
    certificateProfile: pulumi.Input<string>;
    /**
     * Make outer identity anonymous.
     */
    makeOuterIdentityAnonymous?: pulumi.Input<boolean>;
}

export interface RadiusProfileProtocolPeapWithGtc {
    /**
     * Certificate profile for verifying the Radius server.
     */
    certificateProfile: pulumi.Input<string>;
    /**
     * Make outer identity anonymous.
     */
    makeOuterIdentityAnonymous?: pulumi.Input<boolean>;
}

export interface RadiusProfileServer {
    /**
     * The server name.
     */
    name: pulumi.Input<string>;
    /**
     * Radius server port number.
     */
    port?: pulumi.Input<number>;
    /**
     * Shared secret for Radius communication.
     */
    secret: pulumi.Input<string>;
    /**
     * Server hostname or IP address.
     */
    server: pulumi.Input<string>;
}

export interface SecurityPoliciesRule {
    action?: pulumi.Input<string>;
    applications: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    categories: pulumi.Input<pulumi.Input<string>[]>;
    dataFiltering?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    destinationAddresses: pulumi.Input<pulumi.Input<string>[]>;
    destinationDevices?: pulumi.Input<pulumi.Input<string>[]>;
    destinationZones: pulumi.Input<pulumi.Input<string>[]>;
    disableServerResponseInspection?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    fileBlocking?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    hipProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    icmpUnreachable?: pulumi.Input<boolean>;
    logEnd?: pulumi.Input<boolean>;
    logSetting?: pulumi.Input<string>;
    logStart?: pulumi.Input<boolean>;
    /**
     * The name.
     */
    name: pulumi.Input<string>;
    negateDestination?: pulumi.Input<boolean>;
    /**
     * Negate the source addresses.
     */
    negateSource?: pulumi.Input<boolean>;
    negateTarget?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<string>;
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source addresses.
     */
    sourceAddresses: pulumi.Input<pulumi.Input<string>[]>;
    sourceDevices?: pulumi.Input<pulumi.Input<string>[]>;
    sourceUsers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source zones.
     */
    sourceZones: pulumi.Input<pulumi.Input<string>[]>;
    spyware?: pulumi.Input<string>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.SecurityPoliciesRuleTarget>[]>;
    /**
     * Rule type.
     */
    type?: pulumi.Input<string>;
    urlFiltering?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
    virus?: pulumi.Input<string>;
    vulnerability?: pulumi.Input<string>;
    wildfireAnalysis?: pulumi.Input<string>;
}

export interface SecurityPoliciesRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityPoliciesTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SecurityPolicyGroupRule {
    action?: pulumi.Input<string>;
    applications: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    categories: pulumi.Input<pulumi.Input<string>[]>;
    dataFiltering?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    destinationAddresses: pulumi.Input<pulumi.Input<string>[]>;
    destinationDevices?: pulumi.Input<pulumi.Input<string>[]>;
    destinationZones: pulumi.Input<pulumi.Input<string>[]>;
    disableServerResponseInspection?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    fileBlocking?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    hipProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    icmpUnreachable?: pulumi.Input<boolean>;
    logEnd?: pulumi.Input<boolean>;
    logSetting?: pulumi.Input<string>;
    logStart?: pulumi.Input<boolean>;
    /**
     * The name.
     */
    name: pulumi.Input<string>;
    negateDestination?: pulumi.Input<boolean>;
    /**
     * Negate the source addresses.
     */
    negateSource?: pulumi.Input<boolean>;
    negateTarget?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<string>;
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source addresses.
     */
    sourceAddresses: pulumi.Input<pulumi.Input<string>[]>;
    sourceDevices?: pulumi.Input<pulumi.Input<string>[]>;
    sourceUsers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source zones.
     */
    sourceZones: pulumi.Input<pulumi.Input<string>[]>;
    spyware?: pulumi.Input<string>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.SecurityPolicyGroupRuleTarget>[]>;
    /**
     * Rule type.
     */
    type?: pulumi.Input<string>;
    urlFiltering?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
    virus?: pulumi.Input<string>;
    vulnerability?: pulumi.Input<string>;
    wildfireAnalysis?: pulumi.Input<string>;
}

export interface SecurityPolicyGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityPolicyGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SecurityPolicyRule {
    action?: pulumi.Input<string>;
    applications: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    categories: pulumi.Input<pulumi.Input<string>[]>;
    dataFiltering?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    destinationAddresses: pulumi.Input<pulumi.Input<string>[]>;
    destinationDevices?: pulumi.Input<pulumi.Input<string>[]>;
    destinationZones: pulumi.Input<pulumi.Input<string>[]>;
    disableServerResponseInspection?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    fileBlocking?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    hipProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    icmpUnreachable?: pulumi.Input<boolean>;
    logEnd?: pulumi.Input<boolean>;
    logSetting?: pulumi.Input<string>;
    logStart?: pulumi.Input<boolean>;
    /**
     * The name.
     */
    name: pulumi.Input<string>;
    negateDestination?: pulumi.Input<boolean>;
    /**
     * Negate the source addresses.
     */
    negateSource?: pulumi.Input<boolean>;
    negateTarget?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<string>;
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source addresses.
     */
    sourceAddresses: pulumi.Input<pulumi.Input<string>[]>;
    sourceDevices?: pulumi.Input<pulumi.Input<string>[]>;
    sourceUsers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source zones.
     */
    sourceZones: pulumi.Input<pulumi.Input<string>[]>;
    spyware?: pulumi.Input<string>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.SecurityPolicyRuleTarget>[]>;
    /**
     * Rule type.
     */
    type?: pulumi.Input<string>;
    urlFiltering?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
    virus?: pulumi.Input<string>;
    vulnerability?: pulumi.Input<string>;
    wildfireAnalysis?: pulumi.Input<string>;
}

export interface SecurityPolicyRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityPolicyTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SecurityRuleGroupRule {
    action?: pulumi.Input<string>;
    applications: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    categories: pulumi.Input<pulumi.Input<string>[]>;
    dataFiltering?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    destinationAddresses: pulumi.Input<pulumi.Input<string>[]>;
    destinationDevices?: pulumi.Input<pulumi.Input<string>[]>;
    destinationZones: pulumi.Input<pulumi.Input<string>[]>;
    disableServerResponseInspection?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    fileBlocking?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: pulumi.Input<string>;
    hipProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    icmpUnreachable?: pulumi.Input<boolean>;
    logEnd?: pulumi.Input<boolean>;
    logSetting?: pulumi.Input<string>;
    logStart?: pulumi.Input<boolean>;
    /**
     * The name.
     */
    name: pulumi.Input<string>;
    negateDestination?: pulumi.Input<boolean>;
    /**
     * Negate the source addresses.
     */
    negateSource?: pulumi.Input<boolean>;
    negateTarget?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<string>;
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source addresses.
     */
    sourceAddresses: pulumi.Input<pulumi.Input<string>[]>;
    sourceDevices?: pulumi.Input<pulumi.Input<string>[]>;
    sourceUsers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source zones.
     */
    sourceZones: pulumi.Input<pulumi.Input<string>[]>;
    spyware?: pulumi.Input<string>;
    /**
     * The administrative tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.SecurityRuleGroupRuleTarget>[]>;
    /**
     * Rule type.
     */
    type?: pulumi.Input<string>;
    urlFiltering?: pulumi.Input<string>;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid?: pulumi.Input<string>;
    virus?: pulumi.Input<string>;
    vulnerability?: pulumi.Input<string>;
    wildfireAnalysis?: pulumi.Input<string>;
}

export interface SecurityRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: pulumi.Input<string>;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityRuleGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SnmptrapServerProfileV2cServer {
    community: pulumi.Input<string>;
    manager: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface SnmptrapServerProfileV3Server {
    authPassword: pulumi.Input<string>;
    engineId?: pulumi.Input<string>;
    manager: pulumi.Input<string>;
    name: pulumi.Input<string>;
    privPassword: pulumi.Input<string>;
    user: pulumi.Input<string>;
}

export interface SslDecryptSslDecryptExcludeCertificate {
    description?: pulumi.Input<string>;
    exclude?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
}

export interface SyslogServerProfileSyslogServer {
    facility?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    server: pulumi.Input<string>;
    syslogFormat?: pulumi.Input<string>;
    transport?: pulumi.Input<string>;
}

export interface TacacsPlusProfileProtocol {
    /**
     * (PAN-OS 8.0 only) Auto.
     */
    auto?: pulumi.Input<boolean>;
    /**
     * CHAP.
     */
    chap?: pulumi.Input<boolean>;
    /**
     * PAP.
     */
    pap?: pulumi.Input<boolean>;
}

export interface TacacsPlusProfileServer {
    /**
     * The server name.
     */
    name: pulumi.Input<string>;
    /**
     * TACACS+ server port number.
     */
    port?: pulumi.Input<number>;
    /**
     * Shared secret for TACACS+ communication.
     */
    secret: pulumi.Input<string>;
    /**
     * Server hostname or IP address.
     */
    server: pulumi.Input<string>;
}

export interface UrlFilteringSecurityProfileHttpHeaderInsertion {
    /**
     * Header domains
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of HTTP header specs
     */
    httpHeaders?: pulumi.Input<pulumi.Input<inputs.UrlFilteringSecurityProfileHttpHeaderInsertionHttpHeader>[]>;
    /**
     * Header name
     */
    name: pulumi.Input<string>;
    /**
     * Header type
     */
    type?: pulumi.Input<string>;
}

export interface UrlFilteringSecurityProfileHttpHeaderInsertionHttpHeader {
    /**
     * The header
     */
    header: pulumi.Input<string>;
    /**
     * Set to true to enable logging of this header insertion
     */
    log?: pulumi.Input<boolean>;
    /**
     * HTTP header name (auto-generated)
     */
    name?: pulumi.Input<string>;
    /**
     * The value of the header
     */
    value: pulumi.Input<string>;
}

export interface UrlFilteringSecurityProfileMachineLearningModel {
    /**
     * Machine learning model action
     */
    action: pulumi.Input<string>;
    /**
     * Machine learning model
     */
    model: pulumi.Input<string>;
}

export interface VmInformationSourceAwsVpc {
    /**
     * AWS access key ID.
     */
    accessKeyId: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * Disabled or not.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Enable vm-info timeout when source is disconnected.
     */
    enableTimeout?: pulumi.Input<boolean>;
    /**
     * AWS secret access key.
     */
    secretAccessKey: pulumi.Input<string>;
    /**
     * IP address or name.
     */
    source: pulumi.Input<string>;
    /**
     * The vm-info timeout value (in hours) when source is disconnected.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Time interval (in sec) for updates.
     */
    updateInterval?: pulumi.Input<number>;
    /**
     * AWS VPC name or ID.
     */
    vpcId: pulumi.Input<string>;
}

export interface VmInformationSourceEsxi {
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * Disabled or not.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Enable vm-info timeout when source is disconnected.
     */
    enableTimeout?: pulumi.Input<boolean>;
    /**
     * The vm-info-source login password.
     */
    password: pulumi.Input<string>;
    /**
     * The port number.
     */
    port?: pulumi.Input<number>;
    /**
     * IP address or source name for vm-info-source.
     */
    source: pulumi.Input<string>;
    /**
     * The vm-info timeout value (in hours) when source is disconnected.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Time interval (in sec) for updates.
     */
    updateInterval?: pulumi.Input<number>;
    /**
     * The vm-info-source login username.
     */
    username: pulumi.Input<string>;
}

export interface VmInformationSourceGoogleCompute {
    /**
     * The auth type.
     */
    authType?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * Disabled or not.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Enable vm-info timeout when source is disconnected.
     */
    enableTimeout?: pulumi.Input<boolean>;
    /**
     * Google Compute Engine Project-ID.
     */
    projectId: pulumi.Input<string>;
    /**
     * GCE service account JSON file.
     */
    serviceAccountCredential?: pulumi.Input<string>;
    /**
     * The vm-info timeout value (in hours) when source is disconnected.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Time interval (in sec) for updates.
     */
    updateInterval?: pulumi.Input<number>;
    /**
     * Google Compute Engine project zone name.
     */
    zoneName: pulumi.Input<string>;
}

export interface VmInformationSourceVcenter {
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * Disabled or not.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Enable vm-info timeout when source is disconnected.
     */
    enableTimeout?: pulumi.Input<boolean>;
    /**
     * The vm-info-source login password.
     */
    password: pulumi.Input<string>;
    /**
     * The port number.
     */
    port?: pulumi.Input<number>;
    /**
     * IP address or source name for vm-info-source.
     */
    source: pulumi.Input<string>;
    /**
     * The vm-info timeout value (in hours) when source is disconnected.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Time interval (in sec) for updates.
     */
    updateInterval?: pulumi.Input<number>;
    /**
     * The vm-info-source login username.
     */
    username: pulumi.Input<string>;
}

export interface VulnerabilitySecurityProfileException {
    /**
     * The action
     */
    action?: pulumi.Input<string>;
    /**
     * Track by duration
     */
    blockIpDuration?: pulumi.Input<number>;
    /**
     * Track by setting
     */
    blockIpTrackBy?: pulumi.Input<string>;
    /**
     * List of exempt IP addresses
     */
    exemptIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name
     */
    name: pulumi.Input<string>;
    /**
     * Packet capture setting
     */
    packetCapture?: pulumi.Input<string>;
    /**
     * Time interval
     */
    timeInterval?: pulumi.Input<number>;
    /**
     * Time threshold
     */
    timeThreshold?: pulumi.Input<number>;
    /**
     * Time track by setting
     */
    timeTrackBy?: pulumi.Input<string>;
}

export interface VulnerabilitySecurityProfileRule {
    /**
     * The action
     */
    action?: pulumi.Input<string>;
    /**
     * Track by duration
     */
    blockIpDuration?: pulumi.Input<number>;
    /**
     * Track by setting
     */
    blockIpTrackBy?: pulumi.Input<string>;
    /**
     * The category
     */
    category?: pulumi.Input<string>;
    /**
     * List of CVEs
     */
    cves?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The host
     */
    host?: pulumi.Input<string>;
    /**
     * Rule name
     */
    name: pulumi.Input<string>;
    /**
     * Packet capture setting
     */
    packetCapture?: pulumi.Input<string>;
    /**
     * List of severities
     */
    severities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The threat name
     */
    threatName?: pulumi.Input<string>;
    /**
     * List of vendor IDs
     */
    vendorIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WildfireAnalysisSecurityProfileRule {
    /**
     * Analysis setting
     */
    analysis?: pulumi.Input<string>;
    /**
     * List of applications
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Direction
     */
    direction?: pulumi.Input<string>;
    /**
     * List of file types
     */
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rule name
     */
    name: pulumi.Input<string>;
}
