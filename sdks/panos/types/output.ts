// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AddressObjectsObject {
    description?: string;
    name: string;
    /**
     * The administrative tags.
     */
    tags?: string[];
    type?: string;
    value: string;
}

export interface AddressObjectsTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface AntiSpywareSecurityProfileBotnetList {
    /**
     * Action to take
     */
    action: string;
    /**
     * Name
     */
    name: string;
    /**
     * (PAN-OS 9.0+) Packet capture config
     */
    packetCapture?: string;
}

export interface AntiSpywareSecurityProfileDnsCategory {
    /**
     * Action to take
     */
    action?: string;
    /**
     * Logging level
     */
    logLevel?: string;
    /**
     * Name
     */
    name: string;
    /**
     * Packet capture config
     */
    packetCapture?: string;
}

export interface AntiSpywareSecurityProfileException {
    /**
     * Action
     */
    action?: string;
    /**
     * (action = block-ip) The duration to block for
     */
    blockIpDuration?: number;
    /**
     * (action = block-ip) The track by config
     */
    blockIpTrackBy?: string;
    /**
     * List of exempt IP addresses
     */
    exemptIps?: string[];
    /**
     * Threat name
     */
    name: string;
    /**
     * (PAN-OS 8.x only) Packet capture config
     */
    packetCapture?: string;
}

export interface AntiSpywareSecurityProfileRule {
    /**
     * Action to take
     */
    action?: string;
    /**
     * (For action = block-ip) The duration
     */
    blockIpDuration?: number;
    /**
     * (For action = block-ip) The track by setting
     */
    blockIpTrackBy?: string;
    /**
     * The category
     */
    category: string;
    /**
     * Name
     */
    name: string;
    /**
     * Packet capture setting
     */
    packetCapture?: string;
    /**
     * List of severities
     */
    severities?: string[];
    /**
     * Threat name
     */
    threatName?: string;
}

export interface AntiSpywareSecurityProfileWhiteList {
    /**
     * Description
     */
    description?: string;
    /**
     * Name
     */
    name: string;
}

export interface AntivirusSecurityProfileApplicationException {
    /**
     * Action to take for this application
     */
    action?: string;
    /**
     * The application name
     */
    application: string;
}

export interface AntivirusSecurityProfileDecoder {
    /**
     * Decoder action
     */
    action?: string;
    /**
     * (PAN-OS 10.0+) ML action
     */
    machineLearningAction?: string;
    /**
     * Decoder name
     */
    name: string;
    /**
     * Wildfire action
     */
    wildfireAction?: string;
}

export interface AntivirusSecurityProfileMachineLearningException {
    /**
     * Description
     */
    description?: string;
    /**
     * Filename
     */
    filename?: string;
    /**
     * Machine learning exception name
     */
    name: string;
}

export interface AntivirusSecurityProfileMachineLearningModel {
    /**
     * Action to take
     */
    action: string;
    /**
     * ML model
     */
    model: string;
}

export interface ApplicationObjectDefaults {
    icmp?: outputs.ApplicationObjectDefaultsIcmp;
    icmp6?: outputs.ApplicationObjectDefaultsIcmp6;
    ipProtocol?: outputs.ApplicationObjectDefaultsIpProtocol;
    port?: outputs.ApplicationObjectDefaultsPort;
}

export interface ApplicationObjectDefaultsIcmp {
    code?: number;
    type: number;
}

export interface ApplicationObjectDefaultsIcmp6 {
    code?: number;
    type: number;
}

export interface ApplicationObjectDefaultsIpProtocol {
    value: string;
}

export interface ApplicationObjectDefaultsPort {
    ports: string[];
}

export interface ApplicationObjectScanning {
    dataPatterns?: boolean;
    fileTypes?: boolean;
    viruses?: boolean;
}

export interface ApplicationObjectTimeoutSettings {
    tcpHalfClosed?: number;
    tcpTimeWait?: number;
    tcpTimeout?: number;
    timeout?: number;
    udpTimeout?: number;
}

export interface ApplicationSignatureAndCondition {
    name: string;
    orConditions: outputs.ApplicationSignatureAndConditionOrCondition[];
}

export interface ApplicationSignatureAndConditionOrCondition {
    equalTo?: outputs.ApplicationSignatureAndConditionOrConditionEqualTo;
    greaterThan?: outputs.ApplicationSignatureAndConditionOrConditionGreaterThan;
    lessThan?: outputs.ApplicationSignatureAndConditionOrConditionLessThan;
    name: string;
    patternMatch?: outputs.ApplicationSignatureAndConditionOrConditionPatternMatch;
}

export interface ApplicationSignatureAndConditionOrConditionEqualTo {
    context: string;
    mask?: string;
    position?: string;
    value: string;
}

export interface ApplicationSignatureAndConditionOrConditionGreaterThan {
    context: string;
    qualifiers?: {[key: string]: string};
    value: string;
}

export interface ApplicationSignatureAndConditionOrConditionLessThan {
    context: string;
    qualifiers?: {[key: string]: string};
    value: string;
}

export interface ApplicationSignatureAndConditionOrConditionPatternMatch {
    context: string;
    pattern: string;
    qualifiers?: {[key: string]: string};
}

export interface AuthenticationProfileMultiFactorAuthentication {
    /**
     * Enable additional authentication factors.
     */
    enabled?: boolean;
    /**
     * List of additional authentication factors.
     */
    factors?: string[];
}

export interface AuthenticationProfileSingleSignOn {
    /**
     * Kerberos keytab.
     */
    keytab?: string;
    /**
     * Kerberos realm to be used for authentication.
     */
    realm?: string;
    /**
     * Kerberos service principal.
     */
    servicePrincipal?: string;
}

export interface AuthenticationProfileType {
    /**
     * LDAP authentication.
     */
    kerberos?: outputs.AuthenticationProfileTypeKerberos;
    /**
     * LDAP authentication.
     */
    ldap?: outputs.AuthenticationProfileTypeLdap;
    /**
     * Local database authentication.
     */
    localDatabase?: boolean;
    /**
     * No authentication.
     */
    none?: boolean;
    /**
     * Radius authentication.
     */
    radius?: outputs.AuthenticationProfileTypeRadius;
    /**
     * SAML authentication.
     */
    saml?: outputs.AuthenticationProfileTypeSaml;
    /**
     * (PAN-OS 7.0+) TACACS+ authentication.
     */
    tacacsPlus?: outputs.AuthenticationProfileTypeTacacsPlus;
}

export interface AuthenticationProfileTypeKerberos {
    /**
     * (PAN-OS 7.0+) Realm name to be used for authentication.
     */
    realm: string;
    /**
     * Kerberos server profile object.
     */
    serverProfile: string;
}

export interface AuthenticationProfileTypeLdap {
    /**
     * Login attribute in LDAP server to authenticate against.
     */
    loginAttribute?: string;
    /**
     * Number of days prior to warning a user about password expiry.
     */
    passwordExpiryWarning?: string;
    /**
     * LDAP server profile object.
     */
    serverProfile: string;
}

export interface AuthenticationProfileTypeRadius {
    /**
     * (PAN-OS 7.0+) Retrieve user group from RADIUS.
     */
    retrieveUserGroup?: boolean;
    /**
     * Radius server profile object.
     */
    serverProfile: string;
}

export interface AuthenticationProfileTypeSaml {
    /**
     * Access domain attribute.
     */
    accessDomainAttribute?: string;
    /**
     * Admin role attribute.
     */
    adminRoleAttribute?: string;
    /**
     * Certificate profile for IDP and SP.
     */
    certificateProfile?: string;
    /**
     * Enable single logout.
     */
    enableSingleLogout?: boolean;
    /**
     * Signing certificate for SAML requests.
     */
    requestSigningCertificate?: string;
    /**
     * SAML IDP server profile object.
     */
    serverProfile: string;
    /**
     * User group attribute.
     */
    userGroupAttribute?: string;
    /**
     * Attribute name for username to be extracted from SAML response.
     */
    usernameAttribute?: string;
}

export interface AuthenticationProfileTypeTacacsPlus {
    /**
     * (PAN-OS 8.0+) Retrieve user group from TACACS+.
     */
    retrieveUserGroup?: boolean;
    /**
     * TACACS+ server profile object.
     */
    serverProfile: string;
}

export interface BgpAggregateAdvertiseFilterAddressPrefix {
    exact?: boolean;
    prefix: string;
}

export interface BgpAggregateSuppressFilterAddressPrefix {
    exact?: boolean;
    prefix: string;
}

export interface BgpExportRuleGroupRule {
    action?: string;
    asPathLimit?: number;
    asPathType?: string;
    asPathValue?: string;
    communityType?: string;
    communityValue?: string;
    enable?: boolean;
    extendedCommunityType?: string;
    extendedCommunityValue?: string;
    localPreference?: string;
    matchAddressPrefixes?: outputs.BgpExportRuleGroupRuleMatchAddressPrefix[];
    matchAsPathRegex?: string;
    matchCommunityRegex?: string;
    matchExtendedCommunityRegex?: string;
    matchFromPeers?: string[];
    matchMed?: string;
    matchNextHops?: string[];
    matchRouteTable?: string;
    med?: string;
    name: string;
    nextHop?: string;
    origin?: string;
    usedBies?: string[];
}

export interface BgpExportRuleGroupRuleMatchAddressPrefix {
    exact?: boolean;
    prefix: string;
}

export interface BgpImportRuleGroupRule {
    action?: string;
    asPathLimit?: number;
    asPathType?: string;
    communityType?: string;
    communityValue?: string;
    dampening?: string;
    enable?: boolean;
    extendedCommunityType?: string;
    extendedCommunityValue?: string;
    localPreference?: string;
    matchAddressPrefixes?: outputs.BgpImportRuleGroupRuleMatchAddressPrefix[];
    matchAsPathRegex?: string;
    matchCommunityRegex?: string;
    matchExtendedCommunityRegex?: string;
    matchFromPeers?: string[];
    matchMed?: string;
    matchNextHops?: string[];
    matchRouteTable?: string;
    med?: string;
    name: string;
    nextHop?: string;
    origin?: string;
    usedBies?: string[];
    weight?: number;
}

export interface BgpImportRuleGroupRuleMatchAddressPrefix {
    exact?: boolean;
    prefix: string;
}

export interface CertificateImportPem {
    /**
     * The contents of the certificate file.
     */
    certificate: string;
    /**
     * The certificate filename.
     */
    certificateFilename?: string;
    /**
     * The private key file passphrase.
     */
    passphrase: string;
    /**
     * The contents of the private key file.
     */
    privateKey: string;
    /**
     * The private key filename.
     */
    privateKeyFilename?: string;
}

export interface CertificateImportPkcs12 {
    /**
     * The contents of the certificate file.
     */
    certificate: string;
    /**
     * The certificate filename.
     */
    certificateFilename?: string;
    /**
     * The passphrase.
     */
    passphrase: string;
}

export interface CertificateProfileCertificate {
    defaultOcspUrl?: string;
    name: string;
    ocspVerifyCertificate?: string;
    templateName?: string;
}

export interface CustomDataPatternObjectFileProperty {
    /**
     * File property
     */
    fileProperty: string;
    /**
     * The file type
     */
    fileType: string;
    /**
     * Name
     */
    name: string;
    /**
     * Property value
     */
    propertyValue: string;
}

export interface CustomDataPatternObjectPredefinedPattern {
    /**
     * List of file types
     */
    fileTypes?: string[];
    /**
     * Name
     */
    name: string;
}

export interface CustomDataPatternObjectRegex {
    /**
     * List of file types
     */
    fileTypes?: string[];
    /**
     * Name
     */
    name: string;
    /**
     * The regex
     */
    regex: string;
}

export interface DagTagsRegister {
    ip: string;
    tags: string[];
}

export interface DataFilteringSecurityProfileRule {
    /**
     * Alert threshold
     */
    alertThreshold?: number;
    /**
     * List of applications
     */
    applications?: string[];
    /**
     * Block threshold
     */
    blockThreshold?: number;
    /**
     * The data pattern to use
     */
    dataPattern: string;
    /**
     * Direction
     */
    direction?: string;
    /**
     * List of file types
     */
    fileTypes?: string[];
    /**
     * (PAN-OS 8.0+) Log severity
     */
    logSeverity?: string;
    /**
     * Rule name
     */
    name: string;
}

export interface DecryptionRuleGroupRule {
    /**
     * Action to take.
     */
    action?: string;
    /**
     * The audit comment.
     */
    auditComment?: string;
    /**
     * The decryption profile.
     */
    decryptionProfile?: string;
    /**
     * The decryption type.
     */
    decryptionType?: string;
    /**
     * The description.
     */
    description?: string;
    /**
     * List of destination addresses.
     */
    destinationAddresses: string[];
    /**
     * List of destination HIP devices.
     */
    destinationHips?: string[];
    /**
     * List of destination zones.
     */
    destinationZones: string[];
    /**
     * Disable this rule.
     */
    disabled?: boolean;
    /**
     * Forwarding profile.
     */
    forwardingProfile?: string;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    /**
     * Log failed TLS handshakes.
     */
    logFailedTlsHandshakes?: boolean;
    /**
     * The log setting.
     */
    logSetting?: string;
    /**
     * Log successful TLS handshakes.
     */
    logSuccessfulTlsHandshakes?: boolean;
    /**
     * The rule name.
     */
    name: string;
    /**
     * Negate the destination addresses.
     */
    negateDestination?: boolean;
    /**
     * Negate the source addresses.
     */
    negateSource?: boolean;
    negateTarget?: boolean;
    /**
     * List of services.
     */
    services: string[];
    /**
     * List of source addresses.
     */
    sourceAddresses: string[];
    /**
     * List of source HIP devices.
     */
    sourceHips?: string[];
    sourceUsers: string[];
    /**
     * List of source zones.
     */
    sourceZones: string[];
    /**
     * (PAN-OS 10.1 and below) The SSL certificate.
     */
    sslCertificate?: string;
    /**
     * (PAN-OS 10.2+) List of SSL decryption certs.
     */
    sslCertificates?: string[];
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.DecryptionRuleGroupRuleTarget[];
    /**
     * List of URL categories.
     */
    urlCategories: string[];
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
}

export interface DecryptionRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface DecryptionRuleGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DeviceGroupDevice {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface DosProtectionProfileIcmp {
    /**
     * Activate rate
     */
    activateRate?: number;
    /**
     * Alarm rate
     */
    alarmRate?: number;
    /**
     * Block duration
     */
    blockDuration?: number;
    /**
     * Enable this protection or not
     */
    enable?: boolean;
    /**
     * Max rate
     */
    maxRate?: number;
}

export interface DosProtectionProfileIcmpv6 {
    /**
     * Activate rate
     */
    activateRate?: number;
    /**
     * Alarm rate
     */
    alarmRate?: number;
    /**
     * Block duration
     */
    blockDuration?: number;
    /**
     * Enable this protection or not
     */
    enable?: boolean;
    /**
     * Max rate
     */
    maxRate?: number;
}

export interface DosProtectionProfileOther {
    /**
     * Activate rate
     */
    activateRate?: number;
    /**
     * Alarm rate
     */
    alarmRate?: number;
    /**
     * Block duration
     */
    blockDuration?: number;
    /**
     * Enable this protection or not
     */
    enable?: boolean;
    /**
     * Max rate
     */
    maxRate?: number;
}

export interface DosProtectionProfileSyn {
    /**
     * SYN protection action
     */
    action: string;
    /**
     * Activate rate
     */
    activateRate?: number;
    /**
     * Alarm rate
     */
    alarmRate?: number;
    /**
     * Block duration
     */
    blockDuration?: number;
    /**
     * Enable this protection or not
     */
    enable?: boolean;
    /**
     * Max rate
     */
    maxRate?: number;
}

export interface DosProtectionProfileUdp {
    /**
     * Activate rate
     */
    activateRate?: number;
    /**
     * Alarm rate
     */
    alarmRate?: number;
    /**
     * Block duration
     */
    blockDuration?: number;
    /**
     * Enable this protection or not
     */
    enable?: boolean;
    /**
     * Max rate
     */
    maxRate?: number;
}

export interface EmailServerProfileEmailServer {
    alsoToEmail?: string;
    displayName?: string;
    emailGateway: string;
    fromEmail: string;
    name: string;
    toEmail: string;
}

export interface FileBlockingSecurityProfileRule {
    /**
     * The action to take (note that forward and forward-and-continue are PAN-OS 6.1 only)
     */
    action?: string;
    /**
     * List of applications
     */
    applications?: string[];
    /**
     * The direction
     */
    direction?: string;
    /**
     * List of file types
     */
    fileTypes?: string[];
    /**
     * Rule name
     */
    name: string;
}

export interface GetAntiSpywareSecurityProfileBotnetList {
    action: string;
    name: string;
    packetCapture: string;
}

export interface GetAntiSpywareSecurityProfileDnsCategory {
    action: string;
    logLevel: string;
    name: string;
    packetCapture: string;
}

export interface GetAntiSpywareSecurityProfileException {
    action: string;
    blockIpDuration: number;
    blockIpTrackBy: string;
    exemptIps: string[];
    name: string;
    packetCapture: string;
}

export interface GetAntiSpywareSecurityProfileRule {
    action: string;
    blockIpDuration: number;
    blockIpTrackBy: string;
    category: string;
    name: string;
    packetCapture: string;
    severities: string[];
    threatName: string;
}

export interface GetAntiSpywareSecurityProfileWhiteList {
    description: string;
    name: string;
}

export interface GetAntivirusSecurityProfileApplicationException {
    action: string;
    application: string;
}

export interface GetAntivirusSecurityProfileDecoder {
    action: string;
    machineLearningAction: string;
    name: string;
    wildfireAction: string;
}

export interface GetAntivirusSecurityProfileMachineLearningException {
    description: string;
    filename: string;
    name: string;
}

export interface GetAntivirusSecurityProfileMachineLearningModel {
    action: string;
    model: string;
}

export interface GetApplicationObjectDefault {
    icmp6s: outputs.GetApplicationObjectDefaultIcmp6[];
    icmps: outputs.GetApplicationObjectDefaultIcmp[];
    ipProtocols: outputs.GetApplicationObjectDefaultIpProtocol[];
    ports: outputs.GetApplicationObjectDefaultPort[];
}

export interface GetApplicationObjectDefaultIcmp {
    code: number;
    type: number;
}

export interface GetApplicationObjectDefaultIcmp6 {
    code: number;
    type: number;
}

export interface GetApplicationObjectDefaultIpProtocol {
    value: string;
}

export interface GetApplicationObjectDefaultPort {
    ports: string[];
}

export interface GetApplicationObjectScanning {
    dataPatterns: boolean;
    fileTypes: boolean;
    viruses: boolean;
}

export interface GetApplicationObjectTimeoutSetting {
    tcpHalfClosed: number;
    tcpTimeWait: number;
    tcpTimeout: number;
    timeout: number;
    udpTimeout: number;
}

export interface GetAuditCommentHistoryLog {
    admin: string;
    comment: string;
    configVersion: number;
    timeGenerated: string;
    timeGeneratedRfc3339: string;
}

export interface GetCertificateProfileCertificate {
    defaultOcspUrl: string;
    name: string;
    ocspVerifyCertificate: string;
    templateName: string;
}

export interface GetCustomDataPatternObjectFileProperty {
    fileProperty: string;
    fileType: string;
    name: string;
    propertyValue: string;
}

export interface GetCustomDataPatternObjectPredefinedPattern {
    fileTypes: string[];
    name: string;
}

export interface GetCustomDataPatternObjectRegex {
    fileTypes: string[];
    name: string;
    regex: string;
}

export interface GetDataFilteringSecurityProfileRule {
    alertThreshold: number;
    applications: string[];
    blockThreshold: number;
    dataPattern: string;
    direction: string;
    fileTypes: string[];
    logSeverity: string;
    name: string;
}

export interface GetDecryptionRuleRule {
    action: string;
    auditComment: string;
    decryptionProfile: string;
    decryptionType: string;
    description: string;
    destinationAddresses: string[];
    destinationHips: string[];
    destinationZones: string[];
    disabled: boolean;
    forwardingProfile: string;
    groupTag: string;
    logFailedTlsHandshakes: boolean;
    logSetting: string;
    logSuccessfulTlsHandshakes: boolean;
    name: string;
    negateDestination: boolean;
    negateSource: boolean;
    negateTarget: boolean;
    services: string[];
    sourceAddresses: string[];
    sourceHips: string[];
    sourceUsers: string[];
    sourceZones: string[];
    sslCertificate: string;
    sslCertificates: string[];
    tags: string[];
    targets: outputs.GetDecryptionRuleRuleTarget[];
    urlCategories: string[];
    uuid: string;
}

export interface GetDecryptionRuleRuleTarget {
    serial: string;
    vsysLists: string[];
}

export interface GetDeviceGroupDevice {
    serial: string;
    vsysLists: string[];
}

export interface GetDosProtectionProfileIcmp {
    activateRate: number;
    alarmRate: number;
    blockDuration: number;
    enable: boolean;
    maxRate: number;
}

export interface GetDosProtectionProfileIcmpv6 {
    activateRate: number;
    alarmRate: number;
    blockDuration: number;
    enable: boolean;
    maxRate: number;
}

export interface GetDosProtectionProfileOther {
    activateRate: number;
    alarmRate: number;
    blockDuration: number;
    enable: boolean;
    maxRate: number;
}

export interface GetDosProtectionProfileSyn {
    action: string;
    activateRate: number;
    alarmRate: number;
    blockDuration: number;
    enable: boolean;
    maxRate: number;
}

export interface GetDosProtectionProfileUdp {
    activateRate: number;
    alarmRate: number;
    blockDuration: number;
    enable: boolean;
    maxRate: number;
}

export interface GetEmailServerProfileEmailServer {
    alsoToEmail: string;
    displayName: string;
    emailGateway: string;
    fromEmail: string;
    name: string;
    toEmail: string;
}

export interface GetFileBlockingSecurityProfileRule {
    action: string;
    applications: string[];
    direction: string;
    fileTypes: string[];
    name: string;
}

export interface GetIpTagEntry {
    ip: string;
    tags: string[];
}

export interface GetKerberosProfileServer {
    name: string;
    port: number;
    server: string;
}

export interface GetNatRuleRule {
    auditComment: string;
    description: string;
    disabled: boolean;
    groupTag: string;
    name: string;
    negateTarget: boolean;
    originalPackets: outputs.GetNatRuleRuleOriginalPacket[];
    tags: string[];
    targets: outputs.GetNatRuleRuleTarget[];
    translatedPackets: outputs.GetNatRuleRuleTranslatedPacket[];
    type: string;
    uuid: string;
}

export interface GetNatRuleRuleOriginalPacket {
    destinationAddresses: string[];
    destinationInterface: string;
    destinationZone: string;
    service: string;
    sourceAddresses: string[];
    sourceZones: string[];
}

export interface GetNatRuleRuleTarget {
    serial: string;
    vsysLists: string[];
}

export interface GetNatRuleRuleTranslatedPacket {
    destinations: outputs.GetNatRuleRuleTranslatedPacketDestination[];
    sources: outputs.GetNatRuleRuleTranslatedPacketSource[];
}

export interface GetNatRuleRuleTranslatedPacketDestination {
    dynamicTranslations: outputs.GetNatRuleRuleTranslatedPacketDestinationDynamicTranslation[];
    dynamics: outputs.GetNatRuleRuleTranslatedPacketDestinationDynamic[];
    staticTranslations: outputs.GetNatRuleRuleTranslatedPacketDestinationStaticTranslation[];
    statics: outputs.GetNatRuleRuleTranslatedPacketDestinationStatic[];
}

export interface GetNatRuleRuleTranslatedPacketDestinationDynamic {
    address: string;
    distribution: string;
    port: number;
}

export interface GetNatRuleRuleTranslatedPacketDestinationDynamicTranslation {
    address: string;
    distribution: string;
    port: number;
}

export interface GetNatRuleRuleTranslatedPacketDestinationStatic {
    address: string;
    port: number;
}

export interface GetNatRuleRuleTranslatedPacketDestinationStaticTranslation {
    address: string;
    port: number;
}

export interface GetNatRuleRuleTranslatedPacketSource {
    dynamicIpAndPorts: outputs.GetNatRuleRuleTranslatedPacketSourceDynamicIpAndPort[];
    dynamicIps: outputs.GetNatRuleRuleTranslatedPacketSourceDynamicIp[];
    staticIps: outputs.GetNatRuleRuleTranslatedPacketSourceStaticIp[];
}

export interface GetNatRuleRuleTranslatedPacketSourceDynamicIp {
    fallbacks: outputs.GetNatRuleRuleTranslatedPacketSourceDynamicIpFallback[];
    translatedAddresses: string[];
}

export interface GetNatRuleRuleTranslatedPacketSourceDynamicIpAndPort {
    interfaceAddresses: outputs.GetNatRuleRuleTranslatedPacketSourceDynamicIpAndPortInterfaceAddress[];
    translatedAddresses: outputs.GetNatRuleRuleTranslatedPacketSourceDynamicIpAndPortTranslatedAddress[];
}

export interface GetNatRuleRuleTranslatedPacketSourceDynamicIpAndPortInterfaceAddress {
    interface: string;
    ipAddress: string;
}

export interface GetNatRuleRuleTranslatedPacketSourceDynamicIpAndPortTranslatedAddress {
    translatedAddresses: string[];
}

export interface GetNatRuleRuleTranslatedPacketSourceDynamicIpFallback {
    interfaceAddresses: outputs.GetNatRuleRuleTranslatedPacketSourceDynamicIpFallbackInterfaceAddress[];
    translatedAddresses: outputs.GetNatRuleRuleTranslatedPacketSourceDynamicIpFallbackTranslatedAddress[];
}

export interface GetNatRuleRuleTranslatedPacketSourceDynamicIpFallbackInterfaceAddress {
    interface: string;
    ipAddress: string;
    type: string;
}

export interface GetNatRuleRuleTranslatedPacketSourceDynamicIpFallbackTranslatedAddress {
    translatedAddresses: string[];
}

export interface GetNatRuleRuleTranslatedPacketSourceStaticIp {
    biDirectional: boolean;
    translatedAddress: string;
}

export interface GetOspfAreaExtRange {
    action: string;
    network: string;
}

export interface GetOspfAreaRange {
    action: string;
    network: string;
}

export interface GetPanoramaPluginDetail {
    downloaded: string;
    installed: string;
    name: string;
    packageFile: string;
    platform: string;
    releaseDate: string;
    releaseNoteUrl: string;
    size: string;
    version: string;
}

export interface GetPbfRuleRule {
    activeActiveDeviceBinding: string;
    auditComment: string;
    description: string;
    destinations: outputs.GetPbfRuleRuleDestination[];
    disabled: boolean;
    forwardings: outputs.GetPbfRuleRuleForwarding[];
    groupTag: string;
    name: string;
    negateTarget: boolean;
    schedule: string;
    sources: outputs.GetPbfRuleRuleSource[];
    tags: string[];
    targets: outputs.GetPbfRuleRuleTarget[];
    uuid: string;
}

export interface GetPbfRuleRuleDestination {
    addresses: string[];
    applications: string[];
    negate: boolean;
    services: string[];
}

export interface GetPbfRuleRuleForwarding {
    action: string;
    egressInterface: string;
    monitors: outputs.GetPbfRuleRuleForwardingMonitor[];
    nextHopType: string;
    nextHopValue: string;
    symmetricReturns: outputs.GetPbfRuleRuleForwardingSymmetricReturn[];
    vsys: string;
}

export interface GetPbfRuleRuleForwardingMonitor {
    disableIfUnreachable: boolean;
    ipAddress: string;
    profile: string;
}

export interface GetPbfRuleRuleForwardingSymmetricReturn {
    addresses: string[];
    enable: boolean;
}

export interface GetPbfRuleRuleSource {
    addresses: string[];
    interfaces: string[];
    negate: boolean;
    users: string[];
    zones: string[];
}

export interface GetPbfRuleRuleTarget {
    serial: string;
    vsysLists: string[];
}

export interface GetPluginDetail {
    downloaded: string;
    installed: string;
    name: string;
    packageFile: string;
    platform: string;
    releaseDate: string;
    releaseNoteUrl: string;
    size: string;
    version: string;
}

export interface GetPredefinedDlpFileTypeFileType {
    name: string;
    properties: outputs.GetPredefinedDlpFileTypeFileTypeProperty[];
}

export interface GetPredefinedDlpFileTypeFileTypeProperty {
    label: string;
    name: string;
}

export interface GetPredefinedTdbFileTypeFileType {
    dataIdent: boolean;
    fileTypeId: number;
    fileTypeIdent: boolean;
    fullName: string;
    name: string;
    threatName: string;
}

export interface GetPredefinedThreatThreat {
    name: string;
    threatName: string;
}

export interface GetPredefinedThreatTimeouts {
    read?: string;
}

export interface GetSecurityRuleRule {
    action: string;
    applications: string[];
    auditComment: string;
    categories: string[];
    dataFiltering: string;
    description: string;
    destinationAddresses: string[];
    destinationDevices: string[];
    destinationZones: string[];
    disableServerResponseInspection: boolean;
    disabled: boolean;
    fileBlocking: string;
    group: string;
    groupTag: string;
    hipProfiles: string[];
    icmpUnreachable: boolean;
    logEnd: boolean;
    logSetting: string;
    logStart: boolean;
    name: string;
    negateDestination: boolean;
    negateSource: boolean;
    negateTarget: boolean;
    schedule: string;
    services: string[];
    sourceAddresses: string[];
    sourceDevices: string[];
    sourceUsers: string[];
    sourceZones: string[];
    spyware: string;
    tags: string[];
    targets: outputs.GetSecurityRuleRuleTarget[];
    type: string;
    urlFiltering: string;
    uuid: string;
    virus: string;
    vulnerability: string;
    wildfireAnalysis: string;
}

export interface GetSecurityRuleRuleTarget {
    serial: string;
    vsysLists: string[];
}

export interface GetSslDecryptSslDecryptExcludeCertificate {
    description: string;
    exclude: boolean;
    name: string;
}

export interface GetSyslogServerProfileSyslogServer {
    facility: string;
    name: string;
    port: number;
    server: string;
    syslogFormat: string;
    transport: string;
}

export interface GetTechSupportFileTimeouts {
    read?: string;
}

export interface GetUrlFilteringSecurityProfileHttpHeaderInsertion {
    domains: string[];
    httpHeaders: outputs.GetUrlFilteringSecurityProfileHttpHeaderInsertionHttpHeader[];
    name: string;
    type: string;
}

export interface GetUrlFilteringSecurityProfileHttpHeaderInsertionHttpHeader {
    header: string;
    log: boolean;
    name: string;
    value: string;
}

export interface GetUrlFilteringSecurityProfileMachineLearningModel {
    action: string;
    model: string;
}

export interface GetUserTagEntry {
    tags: string[];
    user: string;
}

export interface GetVmAuthKeyEntry {
    authKey: string;
    expiry: string;
    valid: boolean;
}

export interface GetVulnerabilitySecurityProfileException {
    action: string;
    blockIpDuration: number;
    blockIpTrackBy: string;
    exemptIps: string[];
    name: string;
    packetCapture: string;
    timeInterval: number;
    timeThreshold: number;
    timeTrackBy: string;
}

export interface GetVulnerabilitySecurityProfileRule {
    action: string;
    blockIpDuration: number;
    blockIpTrackBy: string;
    category: string;
    cves: string[];
    host: string;
    name: string;
    packetCapture: string;
    severities: string[];
    threatName: string;
    vendorIds: string[];
}

export interface GetWildfireAnalysisSecurityProfileRule {
    analysis: string;
    applications: string[];
    direction: string;
    fileTypes: string[];
    name: string;
}

export interface HttpServerProfileAuthFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileConfigFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileDataFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileGtpFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileHipMatchFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileHttpServer {
    address: string;
    certificateProfile?: string;
    httpMethod?: string;
    name: string;
    password?: string;
    port?: number;
    protocol?: string;
    tlsVersion?: string;
    username?: string;
}

export interface HttpServerProfileIptagFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileSctpFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileSystemFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileThreatFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileTrafficFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileTunnelFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileUrlFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileUserIdFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface HttpServerProfileWildfireFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface KerberosProfileServer {
    /**
     * The server name.
     */
    name: string;
    /**
     * Kerberos server port number.
     */
    port?: number;
    /**
     * Server hostname or IP address.
     */
    server: string;
}

export interface LdapProfileServer {
    /**
     * The server name.
     */
    name: string;
    /**
     * LDAP server port number.
     */
    port?: number;
    /**
     * Server hostname or IP address.
     */
    server: string;
}

export interface LicensingLicense {
    authCode: string;
    description: string;
    expired: string;
    expires: string;
    feature: string;
    issued: string;
    serial: string;
}

export interface LogForwardingProfileMatchList {
    actions?: outputs.LogForwardingProfileMatchListAction[];
    description?: string;
    emailServerProfiles?: string[];
    filter?: string;
    httpServerProfiles?: string[];
    logType?: string;
    name: string;
    sendToPanorama?: boolean;
    snmptrapServerProfiles?: string[];
    syslogServerProfiles?: string[];
}

export interface LogForwardingProfileMatchListAction {
    azureIntegration?: outputs.LogForwardingProfileMatchListActionAzureIntegration;
    name: string;
    taggingIntegration?: outputs.LogForwardingProfileMatchListActionTaggingIntegration;
}

export interface LogForwardingProfileMatchListActionAzureIntegration {
    azureIntegration?: boolean;
}

export interface LogForwardingProfileMatchListActionTaggingIntegration {
    action?: string;
    localRegistration?: outputs.LogForwardingProfileMatchListActionTaggingIntegrationLocalRegistration;
    panoramaRegistration?: outputs.LogForwardingProfileMatchListActionTaggingIntegrationPanoramaRegistration;
    remoteRegistration?: outputs.LogForwardingProfileMatchListActionTaggingIntegrationRemoteRegistration;
    target?: string;
    timeout?: number;
}

export interface LogForwardingProfileMatchListActionTaggingIntegrationLocalRegistration {
    tags: string[];
}

export interface LogForwardingProfileMatchListActionTaggingIntegrationPanoramaRegistration {
    tags: string[];
}

export interface LogForwardingProfileMatchListActionTaggingIntegrationRemoteRegistration {
    httpProfile: string;
    tags: string[];
}

export interface NatRuleGroupRule {
    /**
     * The audit comment.
     */
    auditComment?: string;
    description?: string;
    disabled?: boolean;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    name: string;
    negateTarget?: boolean;
    originalPacket: outputs.NatRuleGroupRuleOriginalPacket;
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.NatRuleGroupRuleTarget[];
    translatedPacket: outputs.NatRuleGroupRuleTranslatedPacket;
    type?: string;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
}

export interface NatRuleGroupRuleOriginalPacket {
    destinationAddresses: string[];
    destinationInterface?: string;
    destinationZone: string;
    service?: string;
    sourceAddresses: string[];
    sourceZones: string[];
}

export interface NatRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface NatRuleGroupRuleTranslatedPacket {
    destination: outputs.NatRuleGroupRuleTranslatedPacketDestination;
    source: outputs.NatRuleGroupRuleTranslatedPacketSource;
}

export interface NatRuleGroupRuleTranslatedPacketDestination {
    /**
     * @deprecated Deprecated
     */
    dynamic?: outputs.NatRuleGroupRuleTranslatedPacketDestinationDynamic;
    dynamicTranslation?: outputs.NatRuleGroupRuleTranslatedPacketDestinationDynamicTranslation;
    /**
     * @deprecated Deprecated
     */
    static?: outputs.NatRuleGroupRuleTranslatedPacketDestinationStatic;
    staticTranslation?: outputs.NatRuleGroupRuleTranslatedPacketDestinationStaticTranslation;
}

export interface NatRuleGroupRuleTranslatedPacketDestinationDynamic {
    address: string;
    distribution?: string;
    port?: number;
}

export interface NatRuleGroupRuleTranslatedPacketDestinationDynamicTranslation {
    address: string;
    distribution?: string;
    port?: number;
}

export interface NatRuleGroupRuleTranslatedPacketDestinationStatic {
    address: string;
    port?: number;
}

export interface NatRuleGroupRuleTranslatedPacketDestinationStaticTranslation {
    address: string;
    port?: number;
}

export interface NatRuleGroupRuleTranslatedPacketSource {
    dynamicIp?: outputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIp;
    dynamicIpAndPort?: outputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPort;
    staticIp?: outputs.NatRuleGroupRuleTranslatedPacketSourceStaticIp;
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIp {
    fallback?: outputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIpFallback;
    translatedAddresses: string[];
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPort {
    interfaceAddress?: outputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortInterfaceAddress;
    translatedAddress?: outputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortTranslatedAddress;
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortInterfaceAddress {
    interface: string;
    ipAddress?: string;
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortTranslatedAddress {
    translatedAddresses?: string[];
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIpFallback {
    interfaceAddress?: outputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackInterfaceAddress;
    translatedAddress?: outputs.NatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackTranslatedAddress;
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackInterfaceAddress {
    interface: string;
    ipAddress?: string;
    type?: string;
}

export interface NatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackTranslatedAddress {
    translatedAddresses?: string[];
}

export interface NatRuleGroupRuleTranslatedPacketSourceStaticIp {
    biDirectional?: boolean;
    translatedAddress: string;
}

export interface NatRuleGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OspfAreaExtRange {
    /**
     * Action
     */
    action?: string;
    /**
     * Network
     */
    network: string;
}

export interface OspfAreaRange {
    /**
     * Action
     */
    action?: string;
    /**
     * Network
     */
    network: string;
}

export interface OspfAuthProfileMd5Key {
    /**
     * MD5 key
     */
    key: string;
    /**
     * MD5 key ID
     */
    keyId: number;
    /**
     * Preferred key
     */
    preferred?: boolean;
}

export interface OspfAuthProfileMd5KeysEnc {
    enc: string;
    raw: string;
}

export interface PanoramaApplicationObjectDefaults {
    icmp?: outputs.PanoramaApplicationObjectDefaultsIcmp;
    icmp6?: outputs.PanoramaApplicationObjectDefaultsIcmp6;
    ipProtocol?: outputs.PanoramaApplicationObjectDefaultsIpProtocol;
    port?: outputs.PanoramaApplicationObjectDefaultsPort;
}

export interface PanoramaApplicationObjectDefaultsIcmp {
    code?: number;
    type: number;
}

export interface PanoramaApplicationObjectDefaultsIcmp6 {
    code?: number;
    type: number;
}

export interface PanoramaApplicationObjectDefaultsIpProtocol {
    value: string;
}

export interface PanoramaApplicationObjectDefaultsPort {
    ports: string[];
}

export interface PanoramaApplicationObjectScanning {
    dataPatterns?: boolean;
    fileTypes?: boolean;
    viruses?: boolean;
}

export interface PanoramaApplicationObjectTimeoutSettings {
    tcpHalfClosed?: number;
    tcpTimeWait?: number;
    tcpTimeout?: number;
    timeout?: number;
    udpTimeout?: number;
}

export interface PanoramaApplicationSignatureAndCondition {
    name: string;
    orConditions: outputs.PanoramaApplicationSignatureAndConditionOrCondition[];
}

export interface PanoramaApplicationSignatureAndConditionOrCondition {
    equalTo?: outputs.PanoramaApplicationSignatureAndConditionOrConditionEqualTo;
    greaterThan?: outputs.PanoramaApplicationSignatureAndConditionOrConditionGreaterThan;
    lessThan?: outputs.PanoramaApplicationSignatureAndConditionOrConditionLessThan;
    name: string;
    patternMatch?: outputs.PanoramaApplicationSignatureAndConditionOrConditionPatternMatch;
}

export interface PanoramaApplicationSignatureAndConditionOrConditionEqualTo {
    context: string;
    mask?: string;
    position?: string;
    value: string;
}

export interface PanoramaApplicationSignatureAndConditionOrConditionGreaterThan {
    context: string;
    qualifiers?: {[key: string]: string};
    value: string;
}

export interface PanoramaApplicationSignatureAndConditionOrConditionLessThan {
    context: string;
    qualifiers?: {[key: string]: string};
    value: string;
}

export interface PanoramaApplicationSignatureAndConditionOrConditionPatternMatch {
    context: string;
    pattern: string;
    qualifiers?: {[key: string]: string};
}

export interface PanoramaBgpAggregateAdvertiseFilterAddressPrefix {
    exact?: boolean;
    prefix: string;
}

export interface PanoramaBgpAggregateSuppressFilterAddressPrefix {
    exact?: boolean;
    prefix: string;
}

export interface PanoramaBgpExportRuleGroupRule {
    action?: string;
    asPathLimit?: number;
    asPathType?: string;
    asPathValue?: string;
    communityType?: string;
    communityValue?: string;
    enable?: boolean;
    extendedCommunityType?: string;
    extendedCommunityValue?: string;
    localPreference?: string;
    matchAddressPrefixes?: outputs.PanoramaBgpExportRuleGroupRuleMatchAddressPrefix[];
    matchAsPathRegex?: string;
    matchCommunityRegex?: string;
    matchExtendedCommunityRegex?: string;
    matchFromPeers?: string[];
    matchMed?: string;
    matchNextHops?: string[];
    matchRouteTable?: string;
    med?: string;
    name: string;
    nextHop?: string;
    origin?: string;
    usedBies?: string[];
}

export interface PanoramaBgpExportRuleGroupRuleMatchAddressPrefix {
    exact?: boolean;
    prefix: string;
}

export interface PanoramaBgpImportRuleGroupRule {
    action?: string;
    asPathLimit?: number;
    asPathType?: string;
    communityType?: string;
    communityValue?: string;
    dampening?: string;
    enable?: boolean;
    extendedCommunityType?: string;
    extendedCommunityValue?: string;
    localPreference?: string;
    matchAddressPrefixes?: outputs.PanoramaBgpImportRuleGroupRuleMatchAddressPrefix[];
    matchAsPathRegex?: string;
    matchCommunityRegex?: string;
    matchExtendedCommunityRegex?: string;
    matchFromPeers?: string[];
    matchMed?: string;
    matchNextHops?: string[];
    matchRouteTable?: string;
    med?: string;
    name: string;
    nextHop?: string;
    origin?: string;
    usedBies?: string[];
    weight?: number;
}

export interface PanoramaBgpImportRuleGroupRuleMatchAddressPrefix {
    exact?: boolean;
    prefix: string;
}

export interface PanoramaDeviceGroupDevice {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface PanoramaEmailServerProfileEmailServer {
    alsoToEmail?: string;
    displayName?: string;
    emailGateway: string;
    fromEmail: string;
    name: string;
    toEmail: string;
}

export interface PanoramaHttpServerProfileAuthFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileConfigFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileDataFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileGtpFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileHipMatchFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileHttpServer {
    address: string;
    certificateProfile?: string;
    httpMethod?: string;
    name: string;
    password?: string;
    port?: number;
    protocol?: string;
    tlsVersion?: string;
    username?: string;
}

export interface PanoramaHttpServerProfileIptagFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileSctpFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileSystemFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileThreatFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileTrafficFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileTunnelFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileUrlFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileUserIdFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaHttpServerProfileWildfireFormat {
    headers?: {[key: string]: string};
    name?: string;
    params?: {[key: string]: string};
    payload?: string;
    uriFormat?: string;
}

export interface PanoramaLogForwardingProfileMatchList {
    actions?: outputs.PanoramaLogForwardingProfileMatchListAction[];
    description?: string;
    emailServerProfiles?: string[];
    filter?: string;
    httpServerProfiles?: string[];
    logType?: string;
    name: string;
    sendToPanorama?: boolean;
    snmptrapServerProfiles?: string[];
    syslogServerProfiles?: string[];
}

export interface PanoramaLogForwardingProfileMatchListAction {
    azureIntegration?: outputs.PanoramaLogForwardingProfileMatchListActionAzureIntegration;
    name: string;
    taggingIntegration?: outputs.PanoramaLogForwardingProfileMatchListActionTaggingIntegration;
}

export interface PanoramaLogForwardingProfileMatchListActionAzureIntegration {
    azureIntegration?: boolean;
}

export interface PanoramaLogForwardingProfileMatchListActionTaggingIntegration {
    action?: string;
    localRegistration?: outputs.PanoramaLogForwardingProfileMatchListActionTaggingIntegrationLocalRegistration;
    panoramaRegistration?: outputs.PanoramaLogForwardingProfileMatchListActionTaggingIntegrationPanoramaRegistration;
    remoteRegistration?: outputs.PanoramaLogForwardingProfileMatchListActionTaggingIntegrationRemoteRegistration;
    target?: string;
    timeout?: number;
}

export interface PanoramaLogForwardingProfileMatchListActionTaggingIntegrationLocalRegistration {
    tags: string[];
}

export interface PanoramaLogForwardingProfileMatchListActionTaggingIntegrationPanoramaRegistration {
    tags: string[];
}

export interface PanoramaLogForwardingProfileMatchListActionTaggingIntegrationRemoteRegistration {
    httpProfile: string;
    tags: string[];
}

export interface PanoramaNatPolicyTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface PanoramaNatRuleGroupRule {
    /**
     * The audit comment.
     */
    auditComment?: string;
    description?: string;
    disabled?: boolean;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    name: string;
    negateTarget?: boolean;
    originalPacket: outputs.PanoramaNatRuleGroupRuleOriginalPacket;
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.PanoramaNatRuleGroupRuleTarget[];
    translatedPacket: outputs.PanoramaNatRuleGroupRuleTranslatedPacket;
    type?: string;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
}

export interface PanoramaNatRuleGroupRuleOriginalPacket {
    destinationAddresses: string[];
    destinationInterface?: string;
    destinationZone: string;
    service?: string;
    sourceAddresses: string[];
    sourceZones: string[];
}

export interface PanoramaNatRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface PanoramaNatRuleGroupRuleTranslatedPacket {
    destination: outputs.PanoramaNatRuleGroupRuleTranslatedPacketDestination;
    source: outputs.PanoramaNatRuleGroupRuleTranslatedPacketSource;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketDestination {
    /**
     * @deprecated Deprecated
     */
    dynamic?: outputs.PanoramaNatRuleGroupRuleTranslatedPacketDestinationDynamic;
    dynamicTranslation?: outputs.PanoramaNatRuleGroupRuleTranslatedPacketDestinationDynamicTranslation;
    /**
     * @deprecated Deprecated
     */
    static?: outputs.PanoramaNatRuleGroupRuleTranslatedPacketDestinationStatic;
    staticTranslation?: outputs.PanoramaNatRuleGroupRuleTranslatedPacketDestinationStaticTranslation;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketDestinationDynamic {
    address: string;
    distribution?: string;
    port?: number;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketDestinationDynamicTranslation {
    address: string;
    distribution?: string;
    port?: number;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketDestinationStatic {
    address: string;
    port?: number;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketDestinationStaticTranslation {
    address: string;
    port?: number;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSource {
    dynamicIp?: outputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIp;
    dynamicIpAndPort?: outputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPort;
    staticIp?: outputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceStaticIp;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIp {
    fallback?: outputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpFallback;
    translatedAddresses: string[];
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPort {
    interfaceAddress?: outputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortInterfaceAddress;
    translatedAddress?: outputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortTranslatedAddress;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortInterfaceAddress {
    interface: string;
    ipAddress?: string;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpAndPortTranslatedAddress {
    translatedAddresses?: string[];
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpFallback {
    interfaceAddress?: outputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackInterfaceAddress;
    translatedAddress?: outputs.PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackTranslatedAddress;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackInterfaceAddress {
    interface: string;
    ipAddress?: string;
    type?: string;
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceDynamicIpFallbackTranslatedAddress {
    translatedAddresses?: string[];
}

export interface PanoramaNatRuleGroupRuleTranslatedPacketSourceStaticIp {
    biDirectional?: boolean;
    translatedAddress: string;
}

export interface PanoramaNatRuleGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PanoramaNatRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface PanoramaPbfRuleGroupRule {
    activeActiveDeviceBinding?: string;
    /**
     * The audit comment.
     */
    auditComment?: string;
    description?: string;
    destination: outputs.PanoramaPbfRuleGroupRuleDestination;
    disabled?: boolean;
    forwarding: outputs.PanoramaPbfRuleGroupRuleForwarding;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    name: string;
    negateTarget?: boolean;
    schedule?: string;
    source: outputs.PanoramaPbfRuleGroupRuleSource;
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.PanoramaPbfRuleGroupRuleTarget[];
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
}

export interface PanoramaPbfRuleGroupRuleDestination {
    addresses: string[];
    applications: string[];
    negate?: boolean;
    services: string[];
}

export interface PanoramaPbfRuleGroupRuleForwarding {
    action?: string;
    egressInterface?: string;
    monitor?: outputs.PanoramaPbfRuleGroupRuleForwardingMonitor;
    nextHopType?: string;
    nextHopValue?: string;
    symmetricReturn?: outputs.PanoramaPbfRuleGroupRuleForwardingSymmetricReturn;
    vsys?: string;
}

export interface PanoramaPbfRuleGroupRuleForwardingMonitor {
    disableIfUnreachable?: boolean;
    ipAddress?: string;
    profile?: string;
}

export interface PanoramaPbfRuleGroupRuleForwardingSymmetricReturn {
    addresses?: string[];
    enable?: boolean;
}

export interface PanoramaPbfRuleGroupRuleSource {
    addresses: string[];
    interfaces?: string[];
    negate?: boolean;
    users: string[];
    zones?: string[];
}

export interface PanoramaPbfRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface PanoramaPbfRuleGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PanoramaSecurityPoliciesRule {
    action?: string;
    applications: string[];
    /**
     * The audit comment.
     */
    auditComment?: string;
    categories: string[];
    dataFiltering?: string;
    /**
     * The description.
     */
    description?: string;
    destinationAddresses: string[];
    destinationDevices?: string[];
    destinationZones: string[];
    disableServerResponseInspection?: boolean;
    disabled?: boolean;
    fileBlocking?: string;
    group?: string;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    hipProfiles?: string[];
    icmpUnreachable?: boolean;
    logEnd?: boolean;
    logSetting?: string;
    logStart?: boolean;
    /**
     * The name.
     */
    name: string;
    negateDestination?: boolean;
    /**
     * Negate the source addresses.
     */
    negateSource?: boolean;
    negateTarget?: boolean;
    schedule?: string;
    services: string[];
    /**
     * List of source addresses.
     */
    sourceAddresses: string[];
    sourceDevices?: string[];
    sourceUsers: string[];
    /**
     * List of source zones.
     */
    sourceZones: string[];
    spyware?: string;
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.PanoramaSecurityPoliciesRuleTarget[];
    /**
     * Rule type.
     */
    type?: string;
    urlFiltering?: string;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
    virus?: string;
    vulnerability?: string;
    wildfireAnalysis?: string;
}

export interface PanoramaSecurityPoliciesRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface PanoramaSecurityPoliciesTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PanoramaSecurityPolicyGroupRule {
    action?: string;
    applications: string[];
    /**
     * The audit comment.
     */
    auditComment?: string;
    categories: string[];
    dataFiltering?: string;
    /**
     * The description.
     */
    description?: string;
    destinationAddresses: string[];
    destinationDevices?: string[];
    destinationZones: string[];
    disableServerResponseInspection?: boolean;
    disabled?: boolean;
    fileBlocking?: string;
    group?: string;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    hipProfiles?: string[];
    icmpUnreachable?: boolean;
    logEnd?: boolean;
    logSetting?: string;
    logStart?: boolean;
    /**
     * The name.
     */
    name: string;
    negateDestination?: boolean;
    /**
     * Negate the source addresses.
     */
    negateSource?: boolean;
    negateTarget?: boolean;
    schedule?: string;
    services: string[];
    /**
     * List of source addresses.
     */
    sourceAddresses: string[];
    sourceDevices?: string[];
    sourceUsers: string[];
    /**
     * List of source zones.
     */
    sourceZones: string[];
    spyware?: string;
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.PanoramaSecurityPolicyGroupRuleTarget[];
    /**
     * Rule type.
     */
    type?: string;
    urlFiltering?: string;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
    virus?: string;
    vulnerability?: string;
    wildfireAnalysis?: string;
}

export interface PanoramaSecurityPolicyGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface PanoramaSecurityPolicyGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PanoramaSecurityPolicyRule {
    action?: string;
    applications: string[];
    /**
     * The audit comment.
     */
    auditComment?: string;
    categories: string[];
    dataFiltering?: string;
    /**
     * The description.
     */
    description?: string;
    destinationAddresses: string[];
    destinationDevices?: string[];
    destinationZones: string[];
    disableServerResponseInspection?: boolean;
    disabled?: boolean;
    fileBlocking?: string;
    group?: string;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    hipProfiles?: string[];
    icmpUnreachable?: boolean;
    logEnd?: boolean;
    logSetting?: string;
    logStart?: boolean;
    /**
     * The name.
     */
    name: string;
    negateDestination?: boolean;
    /**
     * Negate the source addresses.
     */
    negateSource?: boolean;
    negateTarget?: boolean;
    schedule?: string;
    services: string[];
    /**
     * List of source addresses.
     */
    sourceAddresses: string[];
    sourceDevices?: string[];
    sourceUsers: string[];
    /**
     * List of source zones.
     */
    sourceZones: string[];
    spyware?: string;
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.PanoramaSecurityPolicyRuleTarget[];
    /**
     * Rule type.
     */
    type?: string;
    urlFiltering?: string;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
    virus?: string;
    vulnerability?: string;
    wildfireAnalysis?: string;
}

export interface PanoramaSecurityPolicyRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface PanoramaSecurityPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PanoramaSecurityRuleGroupRule {
    action?: string;
    applications: string[];
    /**
     * The audit comment.
     */
    auditComment?: string;
    categories: string[];
    dataFiltering?: string;
    /**
     * The description.
     */
    description?: string;
    destinationAddresses: string[];
    destinationDevices?: string[];
    destinationZones: string[];
    disableServerResponseInspection?: boolean;
    disabled?: boolean;
    fileBlocking?: string;
    group?: string;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    hipProfiles?: string[];
    icmpUnreachable?: boolean;
    logEnd?: boolean;
    logSetting?: string;
    logStart?: boolean;
    /**
     * The name.
     */
    name: string;
    negateDestination?: boolean;
    /**
     * Negate the source addresses.
     */
    negateSource?: boolean;
    negateTarget?: boolean;
    schedule?: string;
    services: string[];
    /**
     * List of source addresses.
     */
    sourceAddresses: string[];
    sourceDevices?: string[];
    sourceUsers: string[];
    /**
     * List of source zones.
     */
    sourceZones: string[];
    spyware?: string;
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.PanoramaSecurityRuleGroupRuleTarget[];
    /**
     * Rule type.
     */
    type?: string;
    urlFiltering?: string;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
    virus?: string;
    vulnerability?: string;
    wildfireAnalysis?: string;
}

export interface PanoramaSecurityRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface PanoramaSecurityRuleGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PanoramaSnmptrapServerProfileV2cServer {
    community: string;
    manager: string;
    name: string;
}

export interface PanoramaSnmptrapServerProfileV3Server {
    authPassword: string;
    engineId?: string;
    manager: string;
    name: string;
    privPassword: string;
    user: string;
}

export interface PanoramaSyslogServerProfileSyslogServer {
    facility?: string;
    name: string;
    port?: number;
    server: string;
    syslogFormat?: string;
    transport?: string;
}

export interface PanoramaTemplateDevice {
    serial: string;
    vsysLists?: string[];
}

export interface PbfRuleGroupRule {
    activeActiveDeviceBinding?: string;
    /**
     * The audit comment.
     */
    auditComment?: string;
    description?: string;
    destination: outputs.PbfRuleGroupRuleDestination;
    disabled?: boolean;
    forwarding: outputs.PbfRuleGroupRuleForwarding;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    name: string;
    negateTarget?: boolean;
    schedule?: string;
    source: outputs.PbfRuleGroupRuleSource;
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.PbfRuleGroupRuleTarget[];
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
}

export interface PbfRuleGroupRuleDestination {
    addresses: string[];
    applications: string[];
    negate?: boolean;
    services: string[];
}

export interface PbfRuleGroupRuleForwarding {
    action?: string;
    egressInterface?: string;
    monitor?: outputs.PbfRuleGroupRuleForwardingMonitor;
    nextHopType?: string;
    nextHopValue?: string;
    symmetricReturn?: outputs.PbfRuleGroupRuleForwardingSymmetricReturn;
    vsys?: string;
}

export interface PbfRuleGroupRuleForwardingMonitor {
    disableIfUnreachable?: boolean;
    ipAddress?: string;
    profile?: string;
}

export interface PbfRuleGroupRuleForwardingSymmetricReturn {
    addresses?: string[];
    enable?: boolean;
}

export interface PbfRuleGroupRuleSource {
    addresses: string[];
    interfaces?: string[];
    negate?: boolean;
    users: string[];
    zones?: string[];
}

export interface PbfRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface PbfRuleGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface RadiusProfileProtocol {
    /**
     * (PAN-OS 8.0 only) Auto.
     */
    auto?: boolean;
    /**
     * CHAP.
     */
    chap?: boolean;
    /**
     * EAP-TTLS with PAP.
     */
    eapTtlsWithPap?: outputs.RadiusProfileProtocolEapTtlsWithPap;
    /**
     * PAP.
     */
    pap?: boolean;
    /**
     * PEAP-MSCHAPv2.
     */
    peapMschapV2?: outputs.RadiusProfileProtocolPeapMschapV2;
    /**
     * PEAP with GTC.
     */
    peapWithGtc?: outputs.RadiusProfileProtocolPeapWithGtc;
}

export interface RadiusProfileProtocolEapTtlsWithPap {
    /**
     * Certificate profile for verifying the Radius server.
     */
    certificateProfile: string;
    /**
     * Make outer identity anonymous.
     */
    makeOuterIdentityAnonymous?: boolean;
}

export interface RadiusProfileProtocolPeapMschapV2 {
    /**
     * Allow users to change passwords after expiry.
     */
    allowExpiredPasswordChange?: boolean;
    /**
     * Certificate profile for verifying the Radius server.
     */
    certificateProfile: string;
    /**
     * Make outer identity anonymous.
     */
    makeOuterIdentityAnonymous?: boolean;
}

export interface RadiusProfileProtocolPeapWithGtc {
    /**
     * Certificate profile for verifying the Radius server.
     */
    certificateProfile: string;
    /**
     * Make outer identity anonymous.
     */
    makeOuterIdentityAnonymous?: boolean;
}

export interface RadiusProfileServer {
    /**
     * The server name.
     */
    name: string;
    /**
     * Radius server port number.
     */
    port?: number;
    /**
     * Shared secret for Radius communication.
     */
    secret: string;
    /**
     * Server hostname or IP address.
     */
    server: string;
}

export interface SecurityPoliciesRule {
    action?: string;
    applications: string[];
    /**
     * The audit comment.
     */
    auditComment?: string;
    categories: string[];
    dataFiltering?: string;
    /**
     * The description.
     */
    description?: string;
    destinationAddresses: string[];
    destinationDevices?: string[];
    destinationZones: string[];
    disableServerResponseInspection?: boolean;
    disabled?: boolean;
    fileBlocking?: string;
    group?: string;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    hipProfiles?: string[];
    icmpUnreachable?: boolean;
    logEnd?: boolean;
    logSetting?: string;
    logStart?: boolean;
    /**
     * The name.
     */
    name: string;
    negateDestination?: boolean;
    /**
     * Negate the source addresses.
     */
    negateSource?: boolean;
    negateTarget?: boolean;
    schedule?: string;
    services: string[];
    /**
     * List of source addresses.
     */
    sourceAddresses: string[];
    sourceDevices?: string[];
    sourceUsers: string[];
    /**
     * List of source zones.
     */
    sourceZones: string[];
    spyware?: string;
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.SecurityPoliciesRuleTarget[];
    /**
     * Rule type.
     */
    type?: string;
    urlFiltering?: string;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
    virus?: string;
    vulnerability?: string;
    wildfireAnalysis?: string;
}

export interface SecurityPoliciesRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface SecurityPoliciesTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SecurityPolicyGroupRule {
    action?: string;
    applications: string[];
    /**
     * The audit comment.
     */
    auditComment?: string;
    categories: string[];
    dataFiltering?: string;
    /**
     * The description.
     */
    description?: string;
    destinationAddresses: string[];
    destinationDevices?: string[];
    destinationZones: string[];
    disableServerResponseInspection?: boolean;
    disabled?: boolean;
    fileBlocking?: string;
    group?: string;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    hipProfiles?: string[];
    icmpUnreachable?: boolean;
    logEnd?: boolean;
    logSetting?: string;
    logStart?: boolean;
    /**
     * The name.
     */
    name: string;
    negateDestination?: boolean;
    /**
     * Negate the source addresses.
     */
    negateSource?: boolean;
    negateTarget?: boolean;
    schedule?: string;
    services: string[];
    /**
     * List of source addresses.
     */
    sourceAddresses: string[];
    sourceDevices?: string[];
    sourceUsers: string[];
    /**
     * List of source zones.
     */
    sourceZones: string[];
    spyware?: string;
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.SecurityPolicyGroupRuleTarget[];
    /**
     * Rule type.
     */
    type?: string;
    urlFiltering?: string;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
    virus?: string;
    vulnerability?: string;
    wildfireAnalysis?: string;
}

export interface SecurityPolicyGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface SecurityPolicyGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SecurityPolicyRule {
    action?: string;
    applications: string[];
    /**
     * The audit comment.
     */
    auditComment?: string;
    categories: string[];
    dataFiltering?: string;
    /**
     * The description.
     */
    description?: string;
    destinationAddresses: string[];
    destinationDevices?: string[];
    destinationZones: string[];
    disableServerResponseInspection?: boolean;
    disabled?: boolean;
    fileBlocking?: string;
    group?: string;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    hipProfiles?: string[];
    icmpUnreachable?: boolean;
    logEnd?: boolean;
    logSetting?: string;
    logStart?: boolean;
    /**
     * The name.
     */
    name: string;
    negateDestination?: boolean;
    /**
     * Negate the source addresses.
     */
    negateSource?: boolean;
    negateTarget?: boolean;
    schedule?: string;
    services: string[];
    /**
     * List of source addresses.
     */
    sourceAddresses: string[];
    sourceDevices?: string[];
    sourceUsers: string[];
    /**
     * List of source zones.
     */
    sourceZones: string[];
    spyware?: string;
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.SecurityPolicyRuleTarget[];
    /**
     * Rule type.
     */
    type?: string;
    urlFiltering?: string;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
    virus?: string;
    vulnerability?: string;
    wildfireAnalysis?: string;
}

export interface SecurityPolicyRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface SecurityPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SecurityRuleGroupRule {
    action?: string;
    applications: string[];
    /**
     * The audit comment.
     */
    auditComment?: string;
    categories: string[];
    dataFiltering?: string;
    /**
     * The description.
     */
    description?: string;
    destinationAddresses: string[];
    destinationDevices?: string[];
    destinationZones: string[];
    disableServerResponseInspection?: boolean;
    disabled?: boolean;
    fileBlocking?: string;
    group?: string;
    /**
     * (PAN-OS 9.0+) The group tag.
     */
    groupTag?: string;
    hipProfiles?: string[];
    icmpUnreachable?: boolean;
    logEnd?: boolean;
    logSetting?: string;
    logStart?: boolean;
    /**
     * The name.
     */
    name: string;
    negateDestination?: boolean;
    /**
     * Negate the source addresses.
     */
    negateSource?: boolean;
    negateTarget?: boolean;
    schedule?: string;
    services: string[];
    /**
     * List of source addresses.
     */
    sourceAddresses: string[];
    sourceDevices?: string[];
    sourceUsers: string[];
    /**
     * List of source zones.
     */
    sourceZones: string[];
    spyware?: string;
    /**
     * The administrative tags.
     */
    tags?: string[];
    /**
     * NGFW serial numbers and vsys spec.
     */
    targets?: outputs.SecurityRuleGroupRuleTarget[];
    /**
     * Rule type.
     */
    type?: string;
    urlFiltering?: string;
    /**
     * (PAN-OS 9.0+) The PAN-OS UUID.
     */
    uuid: string;
    virus?: string;
    vulnerability?: string;
    wildfireAnalysis?: string;
}

export interface SecurityRuleGroupRuleTarget {
    /**
     * The NGFW serial number.
     */
    serial: string;
    /**
     * List of vsys; leave this unspecified if the NGFW is a VM.
     */
    vsysLists?: string[];
}

export interface SecurityRuleGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SnmptrapServerProfileV2cServer {
    community: string;
    manager: string;
    name: string;
}

export interface SnmptrapServerProfileV3Server {
    authPassword: string;
    engineId?: string;
    manager: string;
    name: string;
    privPassword: string;
    user: string;
}

export interface SslDecryptSslDecryptExcludeCertificate {
    description?: string;
    exclude?: boolean;
    name: string;
}

export interface SyslogServerProfileSyslogServer {
    facility?: string;
    name: string;
    port?: number;
    server: string;
    syslogFormat?: string;
    transport?: string;
}

export interface TacacsPlusProfileProtocol {
    /**
     * (PAN-OS 8.0 only) Auto.
     */
    auto?: boolean;
    /**
     * CHAP.
     */
    chap?: boolean;
    /**
     * PAP.
     */
    pap?: boolean;
}

export interface TacacsPlusProfileServer {
    /**
     * The server name.
     */
    name: string;
    /**
     * TACACS+ server port number.
     */
    port?: number;
    /**
     * Shared secret for TACACS+ communication.
     */
    secret: string;
    /**
     * Server hostname or IP address.
     */
    server: string;
}

export interface UrlFilteringSecurityProfileHttpHeaderInsertion {
    /**
     * Header domains
     */
    domains?: string[];
    /**
     * List of HTTP header specs
     */
    httpHeaders?: outputs.UrlFilteringSecurityProfileHttpHeaderInsertionHttpHeader[];
    /**
     * Header name
     */
    name: string;
    /**
     * Header type
     */
    type?: string;
}

export interface UrlFilteringSecurityProfileHttpHeaderInsertionHttpHeader {
    /**
     * The header
     */
    header: string;
    /**
     * Set to true to enable logging of this header insertion
     */
    log?: boolean;
    /**
     * HTTP header name (auto-generated)
     */
    name: string;
    /**
     * The value of the header
     */
    value: string;
}

export interface UrlFilteringSecurityProfileMachineLearningModel {
    /**
     * Machine learning model action
     */
    action: string;
    /**
     * Machine learning model
     */
    model: string;
}

export interface VmInformationSourceAwsVpc {
    /**
     * AWS access key ID.
     */
    accessKeyId: string;
    /**
     * The description.
     */
    description?: string;
    /**
     * Disabled or not.
     */
    disabled?: boolean;
    /**
     * Enable vm-info timeout when source is disconnected.
     */
    enableTimeout?: boolean;
    /**
     * AWS secret access key.
     */
    secretAccessKey: string;
    /**
     * IP address or name.
     */
    source: string;
    /**
     * The vm-info timeout value (in hours) when source is disconnected.
     */
    timeout?: number;
    /**
     * Time interval (in sec) for updates.
     */
    updateInterval?: number;
    /**
     * AWS VPC name or ID.
     */
    vpcId: string;
}

export interface VmInformationSourceEsxi {
    /**
     * The description.
     */
    description?: string;
    /**
     * Disabled or not.
     */
    disabled?: boolean;
    /**
     * Enable vm-info timeout when source is disconnected.
     */
    enableTimeout?: boolean;
    /**
     * The vm-info-source login password.
     */
    password: string;
    /**
     * The port number.
     */
    port?: number;
    /**
     * IP address or source name for vm-info-source.
     */
    source: string;
    /**
     * The vm-info timeout value (in hours) when source is disconnected.
     */
    timeout?: number;
    /**
     * Time interval (in sec) for updates.
     */
    updateInterval?: number;
    /**
     * The vm-info-source login username.
     */
    username: string;
}

export interface VmInformationSourceGoogleCompute {
    /**
     * The auth type.
     */
    authType?: string;
    /**
     * The description.
     */
    description?: string;
    /**
     * Disabled or not.
     */
    disabled?: boolean;
    /**
     * Enable vm-info timeout when source is disconnected.
     */
    enableTimeout?: boolean;
    /**
     * Google Compute Engine Project-ID.
     */
    projectId: string;
    /**
     * GCE service account JSON file.
     */
    serviceAccountCredential?: string;
    /**
     * The vm-info timeout value (in hours) when source is disconnected.
     */
    timeout?: number;
    /**
     * Time interval (in sec) for updates.
     */
    updateInterval?: number;
    /**
     * Google Compute Engine project zone name.
     */
    zoneName: string;
}

export interface VmInformationSourceVcenter {
    /**
     * The description.
     */
    description?: string;
    /**
     * Disabled or not.
     */
    disabled?: boolean;
    /**
     * Enable vm-info timeout when source is disconnected.
     */
    enableTimeout?: boolean;
    /**
     * The vm-info-source login password.
     */
    password: string;
    /**
     * The port number.
     */
    port?: number;
    /**
     * IP address or source name for vm-info-source.
     */
    source: string;
    /**
     * The vm-info timeout value (in hours) when source is disconnected.
     */
    timeout?: number;
    /**
     * Time interval (in sec) for updates.
     */
    updateInterval?: number;
    /**
     * The vm-info-source login username.
     */
    username: string;
}

export interface VulnerabilitySecurityProfileException {
    /**
     * The action
     */
    action?: string;
    /**
     * Track by duration
     */
    blockIpDuration?: number;
    /**
     * Track by setting
     */
    blockIpTrackBy?: string;
    /**
     * List of exempt IP addresses
     */
    exemptIps?: string[];
    /**
     * Name
     */
    name: string;
    /**
     * Packet capture setting
     */
    packetCapture?: string;
    /**
     * Time interval
     */
    timeInterval?: number;
    /**
     * Time threshold
     */
    timeThreshold?: number;
    /**
     * Time track by setting
     */
    timeTrackBy?: string;
}

export interface VulnerabilitySecurityProfileRule {
    /**
     * The action
     */
    action?: string;
    /**
     * Track by duration
     */
    blockIpDuration?: number;
    /**
     * Track by setting
     */
    blockIpTrackBy?: string;
    /**
     * The category
     */
    category?: string;
    /**
     * List of CVEs
     */
    cves?: string[];
    /**
     * The host
     */
    host?: string;
    /**
     * Rule name
     */
    name: string;
    /**
     * Packet capture setting
     */
    packetCapture?: string;
    /**
     * List of severities
     */
    severities?: string[];
    /**
     * The threat name
     */
    threatName?: string;
    /**
     * List of vendor IDs
     */
    vendorIds?: string[];
}

export interface WildfireAnalysisSecurityProfileRule {
    /**
     * Analysis setting
     */
    analysis?: string;
    /**
     * List of applications
     */
    applications?: string[];
    /**
     * Direction
     */
    direction?: string;
    /**
     * List of file types
     */
    fileTypes?: string[];
    /**
     * Rule name
     */
    name: string;
}

