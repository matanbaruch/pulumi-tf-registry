// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Arp extends pulumi.CustomResource {
    /**
     * Get an existing Arp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArpState, opts?: pulumi.CustomResourceOptions): Arp {
        return new Arp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/arp:Arp';

    /**
     * Returns true if the given object is an instance of Arp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Arp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Arp.__pulumiType;
    }

    /**
     * (For interface_type = vlan) The interface
     */
    public readonly interface!: pulumi.Output<string | undefined>;
    /**
     * The interface name; leave this empty for VLAN interfaces
     */
    public readonly interfaceName!: pulumi.Output<string | undefined>;
    /**
     * The interface type
     */
    public readonly interfaceType!: pulumi.Output<string | undefined>;
    /**
     * The IP address
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * The MAC address
     */
    public readonly macAddress!: pulumi.Output<string>;
    /**
     * The subinterface name
     */
    public readonly subinterfaceName!: pulumi.Output<string | undefined>;
    /**
     * (If Panorama) The template where the interface is
     */
    public readonly template!: pulumi.Output<string | undefined>;

    /**
     * Create a Arp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArpArgs | ArpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArpState | undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["interfaceName"] = state ? state.interfaceName : undefined;
            resourceInputs["interfaceType"] = state ? state.interfaceType : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["subinterfaceName"] = state ? state.subinterfaceName : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
        } else {
            const args = argsOrState as ArpArgs | undefined;
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.macAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'macAddress'");
            }
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["interfaceName"] = args ? args.interfaceName : undefined;
            resourceInputs["interfaceType"] = args ? args.interfaceType : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["subinterfaceName"] = args ? args.subinterfaceName : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Arp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Arp resources.
 */
export interface ArpState {
    /**
     * (For interface_type = vlan) The interface
     */
    interface?: pulumi.Input<string>;
    /**
     * The interface name; leave this empty for VLAN interfaces
     */
    interfaceName?: pulumi.Input<string>;
    /**
     * The interface type
     */
    interfaceType?: pulumi.Input<string>;
    /**
     * The IP address
     */
    ip?: pulumi.Input<string>;
    /**
     * The MAC address
     */
    macAddress?: pulumi.Input<string>;
    /**
     * The subinterface name
     */
    subinterfaceName?: pulumi.Input<string>;
    /**
     * (If Panorama) The template where the interface is
     */
    template?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Arp resource.
 */
export interface ArpArgs {
    /**
     * (For interface_type = vlan) The interface
     */
    interface?: pulumi.Input<string>;
    /**
     * The interface name; leave this empty for VLAN interfaces
     */
    interfaceName?: pulumi.Input<string>;
    /**
     * The interface type
     */
    interfaceType?: pulumi.Input<string>;
    /**
     * The IP address
     */
    ip: pulumi.Input<string>;
    /**
     * The MAC address
     */
    macAddress: pulumi.Input<string>;
    /**
     * The subinterface name
     */
    subinterfaceName?: pulumi.Input<string>;
    /**
     * (If Panorama) The template where the interface is
     */
    template?: pulumi.Input<string>;
}
