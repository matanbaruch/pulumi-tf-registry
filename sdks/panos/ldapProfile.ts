// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LdapProfile extends pulumi.CustomResource {
    /**
     * Get an existing LdapProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LdapProfileState, opts?: pulumi.CustomResourceOptions): LdapProfile {
        return new LdapProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/ldapProfile:LdapProfile';

    /**
     * Returns true if the given object is an instance of LdapProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LdapProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LdapProfile.__pulumiType;
    }

    /**
     * Administrator use only.
     */
    public readonly adminUseOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Default base distinguished name (DN) to use for searches.
     */
    public readonly baseDn!: pulumi.Output<string | undefined>;
    /**
     * Bind distinguished name.
     */
    public readonly bindDn!: pulumi.Output<string | undefined>;
    /**
     * Number of seconds to use for connecting to servers.
     */
    public readonly bindTimeout!: pulumi.Output<number | undefined>;
    /**
     * Disable this profile.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * LDAP type.
     */
    public readonly ldapType!: pulumi.Output<string | undefined>;
    /**
     * The name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Bind password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Password, encrypted.
     */
    public /*out*/ readonly passwordEnc!: pulumi.Output<string>;
    /**
     * Password, raw.
     */
    public /*out*/ readonly passwordRaw!: pulumi.Output<string>;
    /**
     * Interval (in seconds) for reconnecting LDAP server.
     */
    public readonly retryInterval!: pulumi.Output<number | undefined>;
    /**
     * Number of seconds to wait for performing searches.
     */
    public readonly searchTimeout!: pulumi.Output<number | undefined>;
    /**
     * List of LDAP servers.
     */
    public readonly servers!: pulumi.Output<outputs.LdapProfileServer[] | undefined>;
    /**
     * SSL.
     */
    public readonly ssl!: pulumi.Output<boolean | undefined>;
    /**
     * The template.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * The template stack.
     */
    public readonly templateStack!: pulumi.Output<string | undefined>;
    /**
     * Verify server certificate for SSL sessions.
     */
    public readonly verifyServerCertificate!: pulumi.Output<boolean | undefined>;
    /**
     * The vsys this object belongs in.
     */
    public readonly vsys!: pulumi.Output<string | undefined>;

    /**
     * Create a LdapProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LdapProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LdapProfileArgs | LdapProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LdapProfileState | undefined;
            resourceInputs["adminUseOnly"] = state ? state.adminUseOnly : undefined;
            resourceInputs["baseDn"] = state ? state.baseDn : undefined;
            resourceInputs["bindDn"] = state ? state.bindDn : undefined;
            resourceInputs["bindTimeout"] = state ? state.bindTimeout : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["ldapType"] = state ? state.ldapType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordEnc"] = state ? state.passwordEnc : undefined;
            resourceInputs["passwordRaw"] = state ? state.passwordRaw : undefined;
            resourceInputs["retryInterval"] = state ? state.retryInterval : undefined;
            resourceInputs["searchTimeout"] = state ? state.searchTimeout : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
            resourceInputs["verifyServerCertificate"] = state ? state.verifyServerCertificate : undefined;
            resourceInputs["vsys"] = state ? state.vsys : undefined;
        } else {
            const args = argsOrState as LdapProfileArgs | undefined;
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["adminUseOnly"] = args ? args.adminUseOnly : undefined;
            resourceInputs["baseDn"] = args ? args.baseDn : undefined;
            resourceInputs["bindDn"] = args ? args.bindDn : undefined;
            resourceInputs["bindTimeout"] = args ? args.bindTimeout : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["ldapType"] = args ? args.ldapType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["retryInterval"] = args ? args.retryInterval : undefined;
            resourceInputs["searchTimeout"] = args ? args.searchTimeout : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
            resourceInputs["verifyServerCertificate"] = args ? args.verifyServerCertificate : undefined;
            resourceInputs["vsys"] = args ? args.vsys : undefined;
            resourceInputs["passwordEnc"] = undefined /*out*/;
            resourceInputs["passwordRaw"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "passwordEnc", "passwordRaw"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LdapProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LdapProfile resources.
 */
export interface LdapProfileState {
    /**
     * Administrator use only.
     */
    adminUseOnly?: pulumi.Input<boolean>;
    /**
     * Default base distinguished name (DN) to use for searches.
     */
    baseDn?: pulumi.Input<string>;
    /**
     * Bind distinguished name.
     */
    bindDn?: pulumi.Input<string>;
    /**
     * Number of seconds to use for connecting to servers.
     */
    bindTimeout?: pulumi.Input<number>;
    /**
     * Disable this profile.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * LDAP type.
     */
    ldapType?: pulumi.Input<string>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * Bind password.
     */
    password?: pulumi.Input<string>;
    /**
     * Password, encrypted.
     */
    passwordEnc?: pulumi.Input<string>;
    /**
     * Password, raw.
     */
    passwordRaw?: pulumi.Input<string>;
    /**
     * Interval (in seconds) for reconnecting LDAP server.
     */
    retryInterval?: pulumi.Input<number>;
    /**
     * Number of seconds to wait for performing searches.
     */
    searchTimeout?: pulumi.Input<number>;
    /**
     * List of LDAP servers.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.LdapProfileServer>[]>;
    /**
     * SSL.
     */
    ssl?: pulumi.Input<boolean>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * Verify server certificate for SSL sessions.
     */
    verifyServerCertificate?: pulumi.Input<boolean>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LdapProfile resource.
 */
export interface LdapProfileArgs {
    /**
     * Administrator use only.
     */
    adminUseOnly?: pulumi.Input<boolean>;
    /**
     * Default base distinguished name (DN) to use for searches.
     */
    baseDn?: pulumi.Input<string>;
    /**
     * Bind distinguished name.
     */
    bindDn?: pulumi.Input<string>;
    /**
     * Number of seconds to use for connecting to servers.
     */
    bindTimeout?: pulumi.Input<number>;
    /**
     * Disable this profile.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * LDAP type.
     */
    ldapType?: pulumi.Input<string>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * Bind password.
     */
    password: pulumi.Input<string>;
    /**
     * Interval (in seconds) for reconnecting LDAP server.
     */
    retryInterval?: pulumi.Input<number>;
    /**
     * Number of seconds to wait for performing searches.
     */
    searchTimeout?: pulumi.Input<number>;
    /**
     * List of LDAP servers.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.LdapProfileServer>[]>;
    /**
     * SSL.
     */
    ssl?: pulumi.Input<boolean>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * Verify server certificate for SSL sessions.
     */
    verifyServerCertificate?: pulumi.Input<boolean>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}
