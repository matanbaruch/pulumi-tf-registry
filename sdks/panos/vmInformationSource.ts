// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmInformationSource extends pulumi.CustomResource {
    /**
     * Get an existing VmInformationSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmInformationSourceState, opts?: pulumi.CustomResourceOptions): VmInformationSource {
        return new VmInformationSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/vmInformationSource:VmInformationSource';

    /**
     * Returns true if the given object is an instance of VmInformationSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmInformationSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmInformationSource.__pulumiType;
    }

    /**
     * AWS VPC information source.
     */
    public readonly awsVpc!: pulumi.Output<outputs.VmInformationSourceAwsVpc | undefined>;
    /**
     * VMware ESXi information source.
     */
    public readonly esxi!: pulumi.Output<outputs.VmInformationSourceEsxi | undefined>;
    /**
     * Google compute engine information source.
     */
    public readonly googleCompute!: pulumi.Output<outputs.VmInformationSourceGoogleCompute | undefined>;
    /**
     * The name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configured and encrypted values.
     */
    public /*out*/ readonly settings!: pulumi.Output<{[key: string]: string}>;
    /**
     * The template.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * The template stack.
     */
    public readonly templateStack!: pulumi.Output<string | undefined>;
    /**
     * VMware vCenter information source.
     */
    public readonly vcenter!: pulumi.Output<outputs.VmInformationSourceVcenter | undefined>;
    /**
     * The vsys this object belongs in.
     */
    public readonly vsys!: pulumi.Output<string | undefined>;

    /**
     * Create a VmInformationSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VmInformationSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmInformationSourceArgs | VmInformationSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmInformationSourceState | undefined;
            resourceInputs["awsVpc"] = state ? state.awsVpc : undefined;
            resourceInputs["esxi"] = state ? state.esxi : undefined;
            resourceInputs["googleCompute"] = state ? state.googleCompute : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
            resourceInputs["vcenter"] = state ? state.vcenter : undefined;
            resourceInputs["vsys"] = state ? state.vsys : undefined;
        } else {
            const args = argsOrState as VmInformationSourceArgs | undefined;
            resourceInputs["awsVpc"] = args ? args.awsVpc : undefined;
            resourceInputs["esxi"] = args ? args.esxi : undefined;
            resourceInputs["googleCompute"] = args ? args.googleCompute : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
            resourceInputs["vcenter"] = args ? args.vcenter : undefined;
            resourceInputs["vsys"] = args ? args.vsys : undefined;
            resourceInputs["settings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["settings"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VmInformationSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmInformationSource resources.
 */
export interface VmInformationSourceState {
    /**
     * AWS VPC information source.
     */
    awsVpc?: pulumi.Input<inputs.VmInformationSourceAwsVpc>;
    /**
     * VMware ESXi information source.
     */
    esxi?: pulumi.Input<inputs.VmInformationSourceEsxi>;
    /**
     * Google compute engine information source.
     */
    googleCompute?: pulumi.Input<inputs.VmInformationSourceGoogleCompute>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * Configured and encrypted values.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * VMware vCenter information source.
     */
    vcenter?: pulumi.Input<inputs.VmInformationSourceVcenter>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmInformationSource resource.
 */
export interface VmInformationSourceArgs {
    /**
     * AWS VPC information source.
     */
    awsVpc?: pulumi.Input<inputs.VmInformationSourceAwsVpc>;
    /**
     * VMware ESXi information source.
     */
    esxi?: pulumi.Input<inputs.VmInformationSourceEsxi>;
    /**
     * Google compute engine information source.
     */
    googleCompute?: pulumi.Input<inputs.VmInformationSourceGoogleCompute>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * VMware vCenter information source.
     */
    vcenter?: pulumi.Input<inputs.VmInformationSourceVcenter>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}
