// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Bgp extends pulumi.CustomResource {
    /**
     * Get an existing Bgp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BgpState, opts?: pulumi.CustomResourceOptions): Bgp {
        return new Bgp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/bgp:Bgp';

    /**
     * Returns true if the given object is an instance of Bgp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bgp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bgp.__pulumiType;
    }

    public readonly aggregateMed!: pulumi.Output<boolean | undefined>;
    public readonly allowRedistributeDefaultRoute!: pulumi.Output<boolean | undefined>;
    public readonly alwaysCompareMed!: pulumi.Output<boolean | undefined>;
    public readonly asFormat!: pulumi.Output<string | undefined>;
    public readonly asNumber!: pulumi.Output<string | undefined>;
    public readonly bfdProfile!: pulumi.Output<string | undefined>;
    public readonly confederationMemberAs!: pulumi.Output<string | undefined>;
    public readonly defaultLocalPreference!: pulumi.Output<string | undefined>;
    public readonly deterministicMedComparison!: pulumi.Output<boolean | undefined>;
    public readonly ecmpMultiAs!: pulumi.Output<boolean | undefined>;
    public readonly enable!: pulumi.Output<boolean | undefined>;
    public readonly enableGracefulRestart!: pulumi.Output<boolean | undefined>;
    public readonly enforceFirstAs!: pulumi.Output<boolean | undefined>;
    public readonly installRoute!: pulumi.Output<boolean | undefined>;
    public readonly localRestartTime!: pulumi.Output<number | undefined>;
    public readonly maxPeerRestartTime!: pulumi.Output<number | undefined>;
    public readonly reflectorClusterId!: pulumi.Output<string | undefined>;
    public readonly rejectDefaultRoute!: pulumi.Output<boolean | undefined>;
    public readonly routerId!: pulumi.Output<string | undefined>;
    public readonly staleRouteTime!: pulumi.Output<number | undefined>;
    public readonly virtualRouter!: pulumi.Output<string>;

    /**
     * Create a Bgp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BgpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BgpArgs | BgpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BgpState | undefined;
            resourceInputs["aggregateMed"] = state ? state.aggregateMed : undefined;
            resourceInputs["allowRedistributeDefaultRoute"] = state ? state.allowRedistributeDefaultRoute : undefined;
            resourceInputs["alwaysCompareMed"] = state ? state.alwaysCompareMed : undefined;
            resourceInputs["asFormat"] = state ? state.asFormat : undefined;
            resourceInputs["asNumber"] = state ? state.asNumber : undefined;
            resourceInputs["bfdProfile"] = state ? state.bfdProfile : undefined;
            resourceInputs["confederationMemberAs"] = state ? state.confederationMemberAs : undefined;
            resourceInputs["defaultLocalPreference"] = state ? state.defaultLocalPreference : undefined;
            resourceInputs["deterministicMedComparison"] = state ? state.deterministicMedComparison : undefined;
            resourceInputs["ecmpMultiAs"] = state ? state.ecmpMultiAs : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["enableGracefulRestart"] = state ? state.enableGracefulRestart : undefined;
            resourceInputs["enforceFirstAs"] = state ? state.enforceFirstAs : undefined;
            resourceInputs["installRoute"] = state ? state.installRoute : undefined;
            resourceInputs["localRestartTime"] = state ? state.localRestartTime : undefined;
            resourceInputs["maxPeerRestartTime"] = state ? state.maxPeerRestartTime : undefined;
            resourceInputs["reflectorClusterId"] = state ? state.reflectorClusterId : undefined;
            resourceInputs["rejectDefaultRoute"] = state ? state.rejectDefaultRoute : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["staleRouteTime"] = state ? state.staleRouteTime : undefined;
            resourceInputs["virtualRouter"] = state ? state.virtualRouter : undefined;
        } else {
            const args = argsOrState as BgpArgs | undefined;
            if ((!args || args.virtualRouter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualRouter'");
            }
            resourceInputs["aggregateMed"] = args ? args.aggregateMed : undefined;
            resourceInputs["allowRedistributeDefaultRoute"] = args ? args.allowRedistributeDefaultRoute : undefined;
            resourceInputs["alwaysCompareMed"] = args ? args.alwaysCompareMed : undefined;
            resourceInputs["asFormat"] = args ? args.asFormat : undefined;
            resourceInputs["asNumber"] = args ? args.asNumber : undefined;
            resourceInputs["bfdProfile"] = args ? args.bfdProfile : undefined;
            resourceInputs["confederationMemberAs"] = args ? args.confederationMemberAs : undefined;
            resourceInputs["defaultLocalPreference"] = args ? args.defaultLocalPreference : undefined;
            resourceInputs["deterministicMedComparison"] = args ? args.deterministicMedComparison : undefined;
            resourceInputs["ecmpMultiAs"] = args ? args.ecmpMultiAs : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["enableGracefulRestart"] = args ? args.enableGracefulRestart : undefined;
            resourceInputs["enforceFirstAs"] = args ? args.enforceFirstAs : undefined;
            resourceInputs["installRoute"] = args ? args.installRoute : undefined;
            resourceInputs["localRestartTime"] = args ? args.localRestartTime : undefined;
            resourceInputs["maxPeerRestartTime"] = args ? args.maxPeerRestartTime : undefined;
            resourceInputs["reflectorClusterId"] = args ? args.reflectorClusterId : undefined;
            resourceInputs["rejectDefaultRoute"] = args ? args.rejectDefaultRoute : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["staleRouteTime"] = args ? args.staleRouteTime : undefined;
            resourceInputs["virtualRouter"] = args ? args.virtualRouter : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bgp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Bgp resources.
 */
export interface BgpState {
    aggregateMed?: pulumi.Input<boolean>;
    allowRedistributeDefaultRoute?: pulumi.Input<boolean>;
    alwaysCompareMed?: pulumi.Input<boolean>;
    asFormat?: pulumi.Input<string>;
    asNumber?: pulumi.Input<string>;
    bfdProfile?: pulumi.Input<string>;
    confederationMemberAs?: pulumi.Input<string>;
    defaultLocalPreference?: pulumi.Input<string>;
    deterministicMedComparison?: pulumi.Input<boolean>;
    ecmpMultiAs?: pulumi.Input<boolean>;
    enable?: pulumi.Input<boolean>;
    enableGracefulRestart?: pulumi.Input<boolean>;
    enforceFirstAs?: pulumi.Input<boolean>;
    installRoute?: pulumi.Input<boolean>;
    localRestartTime?: pulumi.Input<number>;
    maxPeerRestartTime?: pulumi.Input<number>;
    reflectorClusterId?: pulumi.Input<string>;
    rejectDefaultRoute?: pulumi.Input<boolean>;
    routerId?: pulumi.Input<string>;
    staleRouteTime?: pulumi.Input<number>;
    virtualRouter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Bgp resource.
 */
export interface BgpArgs {
    aggregateMed?: pulumi.Input<boolean>;
    allowRedistributeDefaultRoute?: pulumi.Input<boolean>;
    alwaysCompareMed?: pulumi.Input<boolean>;
    asFormat?: pulumi.Input<string>;
    asNumber?: pulumi.Input<string>;
    bfdProfile?: pulumi.Input<string>;
    confederationMemberAs?: pulumi.Input<string>;
    defaultLocalPreference?: pulumi.Input<string>;
    deterministicMedComparison?: pulumi.Input<boolean>;
    ecmpMultiAs?: pulumi.Input<boolean>;
    enable?: pulumi.Input<boolean>;
    enableGracefulRestart?: pulumi.Input<boolean>;
    enforceFirstAs?: pulumi.Input<boolean>;
    installRoute?: pulumi.Input<boolean>;
    localRestartTime?: pulumi.Input<number>;
    maxPeerRestartTime?: pulumi.Input<number>;
    reflectorClusterId?: pulumi.Input<string>;
    rejectDefaultRoute?: pulumi.Input<boolean>;
    routerId?: pulumi.Input<string>;
    staleRouteTime?: pulumi.Input<number>;
    virtualRouter: pulumi.Input<string>;
}
