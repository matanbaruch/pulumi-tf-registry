// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PanoramaSecurityPolicy extends pulumi.CustomResource {
    /**
     * Get an existing PanoramaSecurityPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PanoramaSecurityPolicyState, opts?: pulumi.CustomResourceOptions): PanoramaSecurityPolicy {
        return new PanoramaSecurityPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/panoramaSecurityPolicy:PanoramaSecurityPolicy';

    /**
     * Returns true if the given object is an instance of PanoramaSecurityPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PanoramaSecurityPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PanoramaSecurityPolicy.__pulumiType;
    }

    /**
     * The device group.
     */
    public readonly deviceGroup!: pulumi.Output<string | undefined>;
    /**
     * The rulebase location.
     */
    public readonly rulebase!: pulumi.Output<string | undefined>;
    public readonly rules!: pulumi.Output<outputs.PanoramaSecurityPolicyRule[]>;
    public readonly timeouts!: pulumi.Output<outputs.PanoramaSecurityPolicyTimeouts | undefined>;
    /**
     * The vsys this object belongs in.
     */
    public readonly vsys!: pulumi.Output<string | undefined>;

    /**
     * Create a PanoramaSecurityPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PanoramaSecurityPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PanoramaSecurityPolicyArgs | PanoramaSecurityPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PanoramaSecurityPolicyState | undefined;
            resourceInputs["deviceGroup"] = state ? state.deviceGroup : undefined;
            resourceInputs["rulebase"] = state ? state.rulebase : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vsys"] = state ? state.vsys : undefined;
        } else {
            const args = argsOrState as PanoramaSecurityPolicyArgs | undefined;
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["deviceGroup"] = args ? args.deviceGroup : undefined;
            resourceInputs["rulebase"] = args ? args.rulebase : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vsys"] = args ? args.vsys : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PanoramaSecurityPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PanoramaSecurityPolicy resources.
 */
export interface PanoramaSecurityPolicyState {
    /**
     * The device group.
     */
    deviceGroup?: pulumi.Input<string>;
    /**
     * The rulebase location.
     */
    rulebase?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.PanoramaSecurityPolicyRule>[]>;
    timeouts?: pulumi.Input<inputs.PanoramaSecurityPolicyTimeouts>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PanoramaSecurityPolicy resource.
 */
export interface PanoramaSecurityPolicyArgs {
    /**
     * The device group.
     */
    deviceGroup?: pulumi.Input<string>;
    /**
     * The rulebase location.
     */
    rulebase?: pulumi.Input<string>;
    rules: pulumi.Input<pulumi.Input<inputs.PanoramaSecurityPolicyRule>[]>;
    timeouts?: pulumi.Input<inputs.PanoramaSecurityPolicyTimeouts>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}
