// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpsecTunnelProxyIdIpv4 extends pulumi.CustomResource {
    /**
     * Get an existing IpsecTunnelProxyIdIpv4 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpsecTunnelProxyIdIpv4State, opts?: pulumi.CustomResourceOptions): IpsecTunnelProxyIdIpv4 {
        return new IpsecTunnelProxyIdIpv4(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/ipsecTunnelProxyIdIpv4:IpsecTunnelProxyIdIpv4';

    /**
     * Returns true if the given object is an instance of IpsecTunnelProxyIdIpv4.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpsecTunnelProxyIdIpv4 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpsecTunnelProxyIdIpv4.__pulumiType;
    }

    public readonly ipsecTunnel!: pulumi.Output<string>;
    public readonly local!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly protocolAny!: pulumi.Output<boolean | undefined>;
    public readonly protocolNumber!: pulumi.Output<number | undefined>;
    public readonly protocolTcpLocal!: pulumi.Output<number | undefined>;
    public readonly protocolTcpRemote!: pulumi.Output<number | undefined>;
    public readonly protocolUdpLocal!: pulumi.Output<number | undefined>;
    public readonly protocolUdpRemote!: pulumi.Output<number | undefined>;
    public readonly remote!: pulumi.Output<string | undefined>;

    /**
     * Create a IpsecTunnelProxyIdIpv4 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpsecTunnelProxyIdIpv4Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpsecTunnelProxyIdIpv4Args | IpsecTunnelProxyIdIpv4State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpsecTunnelProxyIdIpv4State | undefined;
            resourceInputs["ipsecTunnel"] = state ? state.ipsecTunnel : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocolAny"] = state ? state.protocolAny : undefined;
            resourceInputs["protocolNumber"] = state ? state.protocolNumber : undefined;
            resourceInputs["protocolTcpLocal"] = state ? state.protocolTcpLocal : undefined;
            resourceInputs["protocolTcpRemote"] = state ? state.protocolTcpRemote : undefined;
            resourceInputs["protocolUdpLocal"] = state ? state.protocolUdpLocal : undefined;
            resourceInputs["protocolUdpRemote"] = state ? state.protocolUdpRemote : undefined;
            resourceInputs["remote"] = state ? state.remote : undefined;
        } else {
            const args = argsOrState as IpsecTunnelProxyIdIpv4Args | undefined;
            if ((!args || args.ipsecTunnel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipsecTunnel'");
            }
            resourceInputs["ipsecTunnel"] = args ? args.ipsecTunnel : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocolAny"] = args ? args.protocolAny : undefined;
            resourceInputs["protocolNumber"] = args ? args.protocolNumber : undefined;
            resourceInputs["protocolTcpLocal"] = args ? args.protocolTcpLocal : undefined;
            resourceInputs["protocolTcpRemote"] = args ? args.protocolTcpRemote : undefined;
            resourceInputs["protocolUdpLocal"] = args ? args.protocolUdpLocal : undefined;
            resourceInputs["protocolUdpRemote"] = args ? args.protocolUdpRemote : undefined;
            resourceInputs["remote"] = args ? args.remote : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpsecTunnelProxyIdIpv4.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpsecTunnelProxyIdIpv4 resources.
 */
export interface IpsecTunnelProxyIdIpv4State {
    ipsecTunnel?: pulumi.Input<string>;
    local?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocolAny?: pulumi.Input<boolean>;
    protocolNumber?: pulumi.Input<number>;
    protocolTcpLocal?: pulumi.Input<number>;
    protocolTcpRemote?: pulumi.Input<number>;
    protocolUdpLocal?: pulumi.Input<number>;
    protocolUdpRemote?: pulumi.Input<number>;
    remote?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpsecTunnelProxyIdIpv4 resource.
 */
export interface IpsecTunnelProxyIdIpv4Args {
    ipsecTunnel: pulumi.Input<string>;
    local?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocolAny?: pulumi.Input<boolean>;
    protocolNumber?: pulumi.Input<number>;
    protocolTcpLocal?: pulumi.Input<number>;
    protocolTcpRemote?: pulumi.Input<number>;
    protocolUdpLocal?: pulumi.Input<number>;
    protocolUdpRemote?: pulumi.Input<number>;
    remote?: pulumi.Input<string>;
}
