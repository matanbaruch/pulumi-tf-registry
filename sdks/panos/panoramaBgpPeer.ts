// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PanoramaBgpPeer extends pulumi.CustomResource {
    /**
     * Get an existing PanoramaBgpPeer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PanoramaBgpPeerState, opts?: pulumi.CustomResourceOptions): PanoramaBgpPeer {
        return new PanoramaBgpPeer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/panoramaBgpPeer:PanoramaBgpPeer';

    /**
     * Returns true if the given object is an instance of PanoramaBgpPeer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PanoramaBgpPeer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PanoramaBgpPeer.__pulumiType;
    }

    public readonly addressFamilyType!: pulumi.Output<string | undefined>;
    public readonly allowIncomingConnections!: pulumi.Output<boolean | undefined>;
    public readonly allowOutgoingConnections!: pulumi.Output<boolean | undefined>;
    public readonly authProfile!: pulumi.Output<string | undefined>;
    public readonly bfdProfile!: pulumi.Output<string | undefined>;
    public readonly bgpPeerGroup!: pulumi.Output<string>;
    public readonly enable!: pulumi.Output<boolean | undefined>;
    public readonly enableMpBgp!: pulumi.Output<boolean | undefined>;
    public readonly enableSenderSideLoopDetection!: pulumi.Output<boolean | undefined>;
    public readonly holdTime!: pulumi.Output<number | undefined>;
    public readonly idleHoldTime!: pulumi.Output<number | undefined>;
    public readonly incomingConnectionsRemotePort!: pulumi.Output<number | undefined>;
    public readonly keepAliveInterval!: pulumi.Output<number | undefined>;
    public readonly localAddressInterface!: pulumi.Output<string>;
    public readonly localAddressIp!: pulumi.Output<string | undefined>;
    public readonly maxPrefixes!: pulumi.Output<string | undefined>;
    public readonly minRouteAdvertisementInterval!: pulumi.Output<number | undefined>;
    public readonly multiHop!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly openDelayTime!: pulumi.Output<number | undefined>;
    public readonly outgoingConnectionsLocalPort!: pulumi.Output<number | undefined>;
    public readonly peerAddressIp!: pulumi.Output<string>;
    public readonly peerAs!: pulumi.Output<string | undefined>;
    public readonly peeringType!: pulumi.Output<string | undefined>;
    public readonly reflectorClient!: pulumi.Output<string | undefined>;
    public readonly subsequentAddressFamilyMulticast!: pulumi.Output<boolean | undefined>;
    public readonly subsequentAddressFamilyUnicast!: pulumi.Output<boolean | undefined>;
    /**
     * The template.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * The template stack.
     */
    public readonly templateStack!: pulumi.Output<string | undefined>;
    public readonly virtualRouter!: pulumi.Output<string>;

    /**
     * Create a PanoramaBgpPeer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PanoramaBgpPeerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PanoramaBgpPeerArgs | PanoramaBgpPeerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PanoramaBgpPeerState | undefined;
            resourceInputs["addressFamilyType"] = state ? state.addressFamilyType : undefined;
            resourceInputs["allowIncomingConnections"] = state ? state.allowIncomingConnections : undefined;
            resourceInputs["allowOutgoingConnections"] = state ? state.allowOutgoingConnections : undefined;
            resourceInputs["authProfile"] = state ? state.authProfile : undefined;
            resourceInputs["bfdProfile"] = state ? state.bfdProfile : undefined;
            resourceInputs["bgpPeerGroup"] = state ? state.bgpPeerGroup : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["enableMpBgp"] = state ? state.enableMpBgp : undefined;
            resourceInputs["enableSenderSideLoopDetection"] = state ? state.enableSenderSideLoopDetection : undefined;
            resourceInputs["holdTime"] = state ? state.holdTime : undefined;
            resourceInputs["idleHoldTime"] = state ? state.idleHoldTime : undefined;
            resourceInputs["incomingConnectionsRemotePort"] = state ? state.incomingConnectionsRemotePort : undefined;
            resourceInputs["keepAliveInterval"] = state ? state.keepAliveInterval : undefined;
            resourceInputs["localAddressInterface"] = state ? state.localAddressInterface : undefined;
            resourceInputs["localAddressIp"] = state ? state.localAddressIp : undefined;
            resourceInputs["maxPrefixes"] = state ? state.maxPrefixes : undefined;
            resourceInputs["minRouteAdvertisementInterval"] = state ? state.minRouteAdvertisementInterval : undefined;
            resourceInputs["multiHop"] = state ? state.multiHop : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openDelayTime"] = state ? state.openDelayTime : undefined;
            resourceInputs["outgoingConnectionsLocalPort"] = state ? state.outgoingConnectionsLocalPort : undefined;
            resourceInputs["peerAddressIp"] = state ? state.peerAddressIp : undefined;
            resourceInputs["peerAs"] = state ? state.peerAs : undefined;
            resourceInputs["peeringType"] = state ? state.peeringType : undefined;
            resourceInputs["reflectorClient"] = state ? state.reflectorClient : undefined;
            resourceInputs["subsequentAddressFamilyMulticast"] = state ? state.subsequentAddressFamilyMulticast : undefined;
            resourceInputs["subsequentAddressFamilyUnicast"] = state ? state.subsequentAddressFamilyUnicast : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
            resourceInputs["virtualRouter"] = state ? state.virtualRouter : undefined;
        } else {
            const args = argsOrState as PanoramaBgpPeerArgs | undefined;
            if ((!args || args.bgpPeerGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bgpPeerGroup'");
            }
            if ((!args || args.localAddressInterface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localAddressInterface'");
            }
            if ((!args || args.peerAddressIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerAddressIp'");
            }
            if ((!args || args.virtualRouter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualRouter'");
            }
            resourceInputs["addressFamilyType"] = args ? args.addressFamilyType : undefined;
            resourceInputs["allowIncomingConnections"] = args ? args.allowIncomingConnections : undefined;
            resourceInputs["allowOutgoingConnections"] = args ? args.allowOutgoingConnections : undefined;
            resourceInputs["authProfile"] = args ? args.authProfile : undefined;
            resourceInputs["bfdProfile"] = args ? args.bfdProfile : undefined;
            resourceInputs["bgpPeerGroup"] = args ? args.bgpPeerGroup : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["enableMpBgp"] = args ? args.enableMpBgp : undefined;
            resourceInputs["enableSenderSideLoopDetection"] = args ? args.enableSenderSideLoopDetection : undefined;
            resourceInputs["holdTime"] = args ? args.holdTime : undefined;
            resourceInputs["idleHoldTime"] = args ? args.idleHoldTime : undefined;
            resourceInputs["incomingConnectionsRemotePort"] = args ? args.incomingConnectionsRemotePort : undefined;
            resourceInputs["keepAliveInterval"] = args ? args.keepAliveInterval : undefined;
            resourceInputs["localAddressInterface"] = args ? args.localAddressInterface : undefined;
            resourceInputs["localAddressIp"] = args ? args.localAddressIp : undefined;
            resourceInputs["maxPrefixes"] = args ? args.maxPrefixes : undefined;
            resourceInputs["minRouteAdvertisementInterval"] = args ? args.minRouteAdvertisementInterval : undefined;
            resourceInputs["multiHop"] = args ? args.multiHop : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openDelayTime"] = args ? args.openDelayTime : undefined;
            resourceInputs["outgoingConnectionsLocalPort"] = args ? args.outgoingConnectionsLocalPort : undefined;
            resourceInputs["peerAddressIp"] = args ? args.peerAddressIp : undefined;
            resourceInputs["peerAs"] = args ? args.peerAs : undefined;
            resourceInputs["peeringType"] = args ? args.peeringType : undefined;
            resourceInputs["reflectorClient"] = args ? args.reflectorClient : undefined;
            resourceInputs["subsequentAddressFamilyMulticast"] = args ? args.subsequentAddressFamilyMulticast : undefined;
            resourceInputs["subsequentAddressFamilyUnicast"] = args ? args.subsequentAddressFamilyUnicast : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
            resourceInputs["virtualRouter"] = args ? args.virtualRouter : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PanoramaBgpPeer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PanoramaBgpPeer resources.
 */
export interface PanoramaBgpPeerState {
    addressFamilyType?: pulumi.Input<string>;
    allowIncomingConnections?: pulumi.Input<boolean>;
    allowOutgoingConnections?: pulumi.Input<boolean>;
    authProfile?: pulumi.Input<string>;
    bfdProfile?: pulumi.Input<string>;
    bgpPeerGroup?: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    enableMpBgp?: pulumi.Input<boolean>;
    enableSenderSideLoopDetection?: pulumi.Input<boolean>;
    holdTime?: pulumi.Input<number>;
    idleHoldTime?: pulumi.Input<number>;
    incomingConnectionsRemotePort?: pulumi.Input<number>;
    keepAliveInterval?: pulumi.Input<number>;
    localAddressInterface?: pulumi.Input<string>;
    localAddressIp?: pulumi.Input<string>;
    maxPrefixes?: pulumi.Input<string>;
    minRouteAdvertisementInterval?: pulumi.Input<number>;
    multiHop?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    openDelayTime?: pulumi.Input<number>;
    outgoingConnectionsLocalPort?: pulumi.Input<number>;
    peerAddressIp?: pulumi.Input<string>;
    peerAs?: pulumi.Input<string>;
    peeringType?: pulumi.Input<string>;
    reflectorClient?: pulumi.Input<string>;
    subsequentAddressFamilyMulticast?: pulumi.Input<boolean>;
    subsequentAddressFamilyUnicast?: pulumi.Input<boolean>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    virtualRouter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PanoramaBgpPeer resource.
 */
export interface PanoramaBgpPeerArgs {
    addressFamilyType?: pulumi.Input<string>;
    allowIncomingConnections?: pulumi.Input<boolean>;
    allowOutgoingConnections?: pulumi.Input<boolean>;
    authProfile?: pulumi.Input<string>;
    bfdProfile?: pulumi.Input<string>;
    bgpPeerGroup: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    enableMpBgp?: pulumi.Input<boolean>;
    enableSenderSideLoopDetection?: pulumi.Input<boolean>;
    holdTime?: pulumi.Input<number>;
    idleHoldTime?: pulumi.Input<number>;
    incomingConnectionsRemotePort?: pulumi.Input<number>;
    keepAliveInterval?: pulumi.Input<number>;
    localAddressInterface: pulumi.Input<string>;
    localAddressIp?: pulumi.Input<string>;
    maxPrefixes?: pulumi.Input<string>;
    minRouteAdvertisementInterval?: pulumi.Input<number>;
    multiHop?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    openDelayTime?: pulumi.Input<number>;
    outgoingConnectionsLocalPort?: pulumi.Input<number>;
    peerAddressIp: pulumi.Input<string>;
    peerAs?: pulumi.Input<string>;
    peeringType?: pulumi.Input<string>;
    reflectorClient?: pulumi.Input<string>;
    subsequentAddressFamilyMulticast?: pulumi.Input<boolean>;
    subsequentAddressFamilyUnicast?: pulumi.Input<boolean>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    virtualRouter: pulumi.Input<string>;
}
