// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HttpServerProfile extends pulumi.CustomResource {
    /**
     * Get an existing HttpServerProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HttpServerProfileState, opts?: pulumi.CustomResourceOptions): HttpServerProfile {
        return new HttpServerProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/httpServerProfile:HttpServerProfile';

    /**
     * Returns true if the given object is an instance of HttpServerProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HttpServerProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HttpServerProfile.__pulumiType;
    }

    public readonly authFormat!: pulumi.Output<outputs.HttpServerProfileAuthFormat | undefined>;
    public readonly configFormat!: pulumi.Output<outputs.HttpServerProfileConfigFormat | undefined>;
    public readonly dataFormat!: pulumi.Output<outputs.HttpServerProfileDataFormat | undefined>;
    public readonly gtpFormat!: pulumi.Output<outputs.HttpServerProfileGtpFormat | undefined>;
    public readonly hipMatchFormat!: pulumi.Output<outputs.HttpServerProfileHipMatchFormat | undefined>;
    public readonly httpServers!: pulumi.Output<outputs.HttpServerProfileHttpServer[]>;
    public readonly iptagFormat!: pulumi.Output<outputs.HttpServerProfileIptagFormat | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly passwordEnc!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly passwordRaw!: pulumi.Output<{[key: string]: string}>;
    public readonly sctpFormat!: pulumi.Output<outputs.HttpServerProfileSctpFormat | undefined>;
    public readonly systemFormat!: pulumi.Output<outputs.HttpServerProfileSystemFormat | undefined>;
    public readonly tagRegistration!: pulumi.Output<boolean | undefined>;
    public readonly threatFormat!: pulumi.Output<outputs.HttpServerProfileThreatFormat | undefined>;
    public readonly trafficFormat!: pulumi.Output<outputs.HttpServerProfileTrafficFormat | undefined>;
    public readonly tunnelFormat!: pulumi.Output<outputs.HttpServerProfileTunnelFormat | undefined>;
    public readonly urlFormat!: pulumi.Output<outputs.HttpServerProfileUrlFormat | undefined>;
    public readonly userIdFormat!: pulumi.Output<outputs.HttpServerProfileUserIdFormat | undefined>;
    /**
     * The vsys this object belongs in.
     */
    public readonly vsys!: pulumi.Output<string | undefined>;
    public readonly wildfireFormat!: pulumi.Output<outputs.HttpServerProfileWildfireFormat | undefined>;

    /**
     * Create a HttpServerProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HttpServerProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HttpServerProfileArgs | HttpServerProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HttpServerProfileState | undefined;
            resourceInputs["authFormat"] = state ? state.authFormat : undefined;
            resourceInputs["configFormat"] = state ? state.configFormat : undefined;
            resourceInputs["dataFormat"] = state ? state.dataFormat : undefined;
            resourceInputs["gtpFormat"] = state ? state.gtpFormat : undefined;
            resourceInputs["hipMatchFormat"] = state ? state.hipMatchFormat : undefined;
            resourceInputs["httpServers"] = state ? state.httpServers : undefined;
            resourceInputs["iptagFormat"] = state ? state.iptagFormat : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passwordEnc"] = state ? state.passwordEnc : undefined;
            resourceInputs["passwordRaw"] = state ? state.passwordRaw : undefined;
            resourceInputs["sctpFormat"] = state ? state.sctpFormat : undefined;
            resourceInputs["systemFormat"] = state ? state.systemFormat : undefined;
            resourceInputs["tagRegistration"] = state ? state.tagRegistration : undefined;
            resourceInputs["threatFormat"] = state ? state.threatFormat : undefined;
            resourceInputs["trafficFormat"] = state ? state.trafficFormat : undefined;
            resourceInputs["tunnelFormat"] = state ? state.tunnelFormat : undefined;
            resourceInputs["urlFormat"] = state ? state.urlFormat : undefined;
            resourceInputs["userIdFormat"] = state ? state.userIdFormat : undefined;
            resourceInputs["vsys"] = state ? state.vsys : undefined;
            resourceInputs["wildfireFormat"] = state ? state.wildfireFormat : undefined;
        } else {
            const args = argsOrState as HttpServerProfileArgs | undefined;
            if ((!args || args.httpServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpServers'");
            }
            resourceInputs["authFormat"] = args ? args.authFormat : undefined;
            resourceInputs["configFormat"] = args ? args.configFormat : undefined;
            resourceInputs["dataFormat"] = args ? args.dataFormat : undefined;
            resourceInputs["gtpFormat"] = args ? args.gtpFormat : undefined;
            resourceInputs["hipMatchFormat"] = args ? args.hipMatchFormat : undefined;
            resourceInputs["httpServers"] = args ? args.httpServers : undefined;
            resourceInputs["iptagFormat"] = args ? args.iptagFormat : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sctpFormat"] = args ? args.sctpFormat : undefined;
            resourceInputs["systemFormat"] = args ? args.systemFormat : undefined;
            resourceInputs["tagRegistration"] = args ? args.tagRegistration : undefined;
            resourceInputs["threatFormat"] = args ? args.threatFormat : undefined;
            resourceInputs["trafficFormat"] = args ? args.trafficFormat : undefined;
            resourceInputs["tunnelFormat"] = args ? args.tunnelFormat : undefined;
            resourceInputs["urlFormat"] = args ? args.urlFormat : undefined;
            resourceInputs["userIdFormat"] = args ? args.userIdFormat : undefined;
            resourceInputs["vsys"] = args ? args.vsys : undefined;
            resourceInputs["wildfireFormat"] = args ? args.wildfireFormat : undefined;
            resourceInputs["passwordEnc"] = undefined /*out*/;
            resourceInputs["passwordRaw"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passwordEnc", "passwordRaw"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(HttpServerProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HttpServerProfile resources.
 */
export interface HttpServerProfileState {
    authFormat?: pulumi.Input<inputs.HttpServerProfileAuthFormat>;
    configFormat?: pulumi.Input<inputs.HttpServerProfileConfigFormat>;
    dataFormat?: pulumi.Input<inputs.HttpServerProfileDataFormat>;
    gtpFormat?: pulumi.Input<inputs.HttpServerProfileGtpFormat>;
    hipMatchFormat?: pulumi.Input<inputs.HttpServerProfileHipMatchFormat>;
    httpServers?: pulumi.Input<pulumi.Input<inputs.HttpServerProfileHttpServer>[]>;
    iptagFormat?: pulumi.Input<inputs.HttpServerProfileIptagFormat>;
    name?: pulumi.Input<string>;
    passwordEnc?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    passwordRaw?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sctpFormat?: pulumi.Input<inputs.HttpServerProfileSctpFormat>;
    systemFormat?: pulumi.Input<inputs.HttpServerProfileSystemFormat>;
    tagRegistration?: pulumi.Input<boolean>;
    threatFormat?: pulumi.Input<inputs.HttpServerProfileThreatFormat>;
    trafficFormat?: pulumi.Input<inputs.HttpServerProfileTrafficFormat>;
    tunnelFormat?: pulumi.Input<inputs.HttpServerProfileTunnelFormat>;
    urlFormat?: pulumi.Input<inputs.HttpServerProfileUrlFormat>;
    userIdFormat?: pulumi.Input<inputs.HttpServerProfileUserIdFormat>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
    wildfireFormat?: pulumi.Input<inputs.HttpServerProfileWildfireFormat>;
}

/**
 * The set of arguments for constructing a HttpServerProfile resource.
 */
export interface HttpServerProfileArgs {
    authFormat?: pulumi.Input<inputs.HttpServerProfileAuthFormat>;
    configFormat?: pulumi.Input<inputs.HttpServerProfileConfigFormat>;
    dataFormat?: pulumi.Input<inputs.HttpServerProfileDataFormat>;
    gtpFormat?: pulumi.Input<inputs.HttpServerProfileGtpFormat>;
    hipMatchFormat?: pulumi.Input<inputs.HttpServerProfileHipMatchFormat>;
    httpServers: pulumi.Input<pulumi.Input<inputs.HttpServerProfileHttpServer>[]>;
    iptagFormat?: pulumi.Input<inputs.HttpServerProfileIptagFormat>;
    name?: pulumi.Input<string>;
    sctpFormat?: pulumi.Input<inputs.HttpServerProfileSctpFormat>;
    systemFormat?: pulumi.Input<inputs.HttpServerProfileSystemFormat>;
    tagRegistration?: pulumi.Input<boolean>;
    threatFormat?: pulumi.Input<inputs.HttpServerProfileThreatFormat>;
    trafficFormat?: pulumi.Input<inputs.HttpServerProfileTrafficFormat>;
    tunnelFormat?: pulumi.Input<inputs.HttpServerProfileTunnelFormat>;
    urlFormat?: pulumi.Input<inputs.HttpServerProfileUrlFormat>;
    userIdFormat?: pulumi.Input<inputs.HttpServerProfileUserIdFormat>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
    wildfireFormat?: pulumi.Input<inputs.HttpServerProfileWildfireFormat>;
}
