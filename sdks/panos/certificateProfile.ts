// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CertificateProfile extends pulumi.CustomResource {
    /**
     * Get an existing CertificateProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateProfileState, opts?: pulumi.CustomResourceOptions): CertificateProfile {
        return new CertificateProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/certificateProfile:CertificateProfile';

    /**
     * Returns true if the given object is an instance of CertificateProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateProfile.__pulumiType;
    }

    public readonly blockCertificateTimeout!: pulumi.Output<boolean | undefined>;
    public readonly blockExpiredCertificate!: pulumi.Output<boolean | undefined>;
    public readonly blockUnauthenticatedCertificate!: pulumi.Output<boolean | undefined>;
    public readonly blockUnknownCertificate!: pulumi.Output<boolean | undefined>;
    public readonly certificateStatusTimeout!: pulumi.Output<number | undefined>;
    public readonly certificates!: pulumi.Output<outputs.CertificateProfileCertificate[] | undefined>;
    public readonly crlReceiveTimeout!: pulumi.Output<number | undefined>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ocspExcludeNonce!: pulumi.Output<boolean | undefined>;
    public readonly ocspReceiveTimeout!: pulumi.Output<number | undefined>;
    /**
     * The template.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * The template stack.
     */
    public readonly templateStack!: pulumi.Output<string | undefined>;
    public readonly useCrl!: pulumi.Output<boolean | undefined>;
    public readonly useOcsp!: pulumi.Output<boolean | undefined>;
    public readonly usernameField!: pulumi.Output<string | undefined>;
    public readonly usernameFieldValue!: pulumi.Output<string | undefined>;
    /**
     * The vsys this object belongs in.
     */
    public readonly vsys!: pulumi.Output<string | undefined>;

    /**
     * Create a CertificateProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CertificateProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateProfileArgs | CertificateProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateProfileState | undefined;
            resourceInputs["blockCertificateTimeout"] = state ? state.blockCertificateTimeout : undefined;
            resourceInputs["blockExpiredCertificate"] = state ? state.blockExpiredCertificate : undefined;
            resourceInputs["blockUnauthenticatedCertificate"] = state ? state.blockUnauthenticatedCertificate : undefined;
            resourceInputs["blockUnknownCertificate"] = state ? state.blockUnknownCertificate : undefined;
            resourceInputs["certificateStatusTimeout"] = state ? state.certificateStatusTimeout : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["crlReceiveTimeout"] = state ? state.crlReceiveTimeout : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ocspExcludeNonce"] = state ? state.ocspExcludeNonce : undefined;
            resourceInputs["ocspReceiveTimeout"] = state ? state.ocspReceiveTimeout : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
            resourceInputs["useCrl"] = state ? state.useCrl : undefined;
            resourceInputs["useOcsp"] = state ? state.useOcsp : undefined;
            resourceInputs["usernameField"] = state ? state.usernameField : undefined;
            resourceInputs["usernameFieldValue"] = state ? state.usernameFieldValue : undefined;
            resourceInputs["vsys"] = state ? state.vsys : undefined;
        } else {
            const args = argsOrState as CertificateProfileArgs | undefined;
            resourceInputs["blockCertificateTimeout"] = args ? args.blockCertificateTimeout : undefined;
            resourceInputs["blockExpiredCertificate"] = args ? args.blockExpiredCertificate : undefined;
            resourceInputs["blockUnauthenticatedCertificate"] = args ? args.blockUnauthenticatedCertificate : undefined;
            resourceInputs["blockUnknownCertificate"] = args ? args.blockUnknownCertificate : undefined;
            resourceInputs["certificateStatusTimeout"] = args ? args.certificateStatusTimeout : undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["crlReceiveTimeout"] = args ? args.crlReceiveTimeout : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ocspExcludeNonce"] = args ? args.ocspExcludeNonce : undefined;
            resourceInputs["ocspReceiveTimeout"] = args ? args.ocspReceiveTimeout : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
            resourceInputs["useCrl"] = args ? args.useCrl : undefined;
            resourceInputs["useOcsp"] = args ? args.useOcsp : undefined;
            resourceInputs["usernameField"] = args ? args.usernameField : undefined;
            resourceInputs["usernameFieldValue"] = args ? args.usernameFieldValue : undefined;
            resourceInputs["vsys"] = args ? args.vsys : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificateProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CertificateProfile resources.
 */
export interface CertificateProfileState {
    blockCertificateTimeout?: pulumi.Input<boolean>;
    blockExpiredCertificate?: pulumi.Input<boolean>;
    blockUnauthenticatedCertificate?: pulumi.Input<boolean>;
    blockUnknownCertificate?: pulumi.Input<boolean>;
    certificateStatusTimeout?: pulumi.Input<number>;
    certificates?: pulumi.Input<pulumi.Input<inputs.CertificateProfileCertificate>[]>;
    crlReceiveTimeout?: pulumi.Input<number>;
    domain?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ocspExcludeNonce?: pulumi.Input<boolean>;
    ocspReceiveTimeout?: pulumi.Input<number>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    useCrl?: pulumi.Input<boolean>;
    useOcsp?: pulumi.Input<boolean>;
    usernameField?: pulumi.Input<string>;
    usernameFieldValue?: pulumi.Input<string>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CertificateProfile resource.
 */
export interface CertificateProfileArgs {
    blockCertificateTimeout?: pulumi.Input<boolean>;
    blockExpiredCertificate?: pulumi.Input<boolean>;
    blockUnauthenticatedCertificate?: pulumi.Input<boolean>;
    blockUnknownCertificate?: pulumi.Input<boolean>;
    certificateStatusTimeout?: pulumi.Input<number>;
    certificates?: pulumi.Input<pulumi.Input<inputs.CertificateProfileCertificate>[]>;
    crlReceiveTimeout?: pulumi.Input<number>;
    domain?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ocspExcludeNonce?: pulumi.Input<boolean>;
    ocspReceiveTimeout?: pulumi.Input<number>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    useCrl?: pulumi.Input<boolean>;
    useOcsp?: pulumi.Input<boolean>;
    usernameField?: pulumi.Input<string>;
    usernameFieldValue?: pulumi.Input<string>;
    /**
     * The vsys this object belongs in.
     */
    vsys?: pulumi.Input<string>;
}
