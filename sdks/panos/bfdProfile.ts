// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BfdProfile extends pulumi.CustomResource {
    /**
     * Get an existing BfdProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BfdProfileState, opts?: pulumi.CustomResourceOptions): BfdProfile {
        return new BfdProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/bfdProfile:BfdProfile';

    /**
     * Returns true if the given object is an instance of BfdProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BfdProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BfdProfile.__pulumiType;
    }

    public readonly detectionMultiplier!: pulumi.Output<number | undefined>;
    public readonly holdTime!: pulumi.Output<number | undefined>;
    public readonly minimumRxInterval!: pulumi.Output<number | undefined>;
    public readonly minimumRxTtl!: pulumi.Output<number | undefined>;
    public readonly minimumTxInterval!: pulumi.Output<number | undefined>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a BfdProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BfdProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BfdProfileArgs | BfdProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BfdProfileState | undefined;
            resourceInputs["detectionMultiplier"] = state ? state.detectionMultiplier : undefined;
            resourceInputs["holdTime"] = state ? state.holdTime : undefined;
            resourceInputs["minimumRxInterval"] = state ? state.minimumRxInterval : undefined;
            resourceInputs["minimumRxTtl"] = state ? state.minimumRxTtl : undefined;
            resourceInputs["minimumTxInterval"] = state ? state.minimumTxInterval : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as BfdProfileArgs | undefined;
            resourceInputs["detectionMultiplier"] = args ? args.detectionMultiplier : undefined;
            resourceInputs["holdTime"] = args ? args.holdTime : undefined;
            resourceInputs["minimumRxInterval"] = args ? args.minimumRxInterval : undefined;
            resourceInputs["minimumRxTtl"] = args ? args.minimumRxTtl : undefined;
            resourceInputs["minimumTxInterval"] = args ? args.minimumTxInterval : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BfdProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BfdProfile resources.
 */
export interface BfdProfileState {
    detectionMultiplier?: pulumi.Input<number>;
    holdTime?: pulumi.Input<number>;
    minimumRxInterval?: pulumi.Input<number>;
    minimumRxTtl?: pulumi.Input<number>;
    minimumTxInterval?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BfdProfile resource.
 */
export interface BfdProfileArgs {
    detectionMultiplier?: pulumi.Input<number>;
    holdTime?: pulumi.Input<number>;
    minimumRxInterval?: pulumi.Input<number>;
    minimumRxTtl?: pulumi.Input<number>;
    minimumTxInterval?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
