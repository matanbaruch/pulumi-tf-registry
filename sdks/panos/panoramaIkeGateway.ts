// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PanoramaIkeGateway extends pulumi.CustomResource {
    /**
     * Get an existing PanoramaIkeGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PanoramaIkeGatewayState, opts?: pulumi.CustomResourceOptions): PanoramaIkeGateway {
        return new PanoramaIkeGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/panoramaIkeGateway:PanoramaIkeGateway';

    /**
     * Returns true if the given object is an instance of PanoramaIkeGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PanoramaIkeGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PanoramaIkeGateway.__pulumiType;
    }

    public readonly authType!: pulumi.Output<string | undefined>;
    public readonly certBaseUrl!: pulumi.Output<string | undefined>;
    public readonly certEnableHashAndUrl!: pulumi.Output<boolean | undefined>;
    public readonly certEnableStrictValidation!: pulumi.Output<boolean | undefined>;
    public readonly certPermitPayloadMismatch!: pulumi.Output<boolean | undefined>;
    public readonly certProfile!: pulumi.Output<string | undefined>;
    public readonly certUseManagementAsSource!: pulumi.Output<boolean | undefined>;
    public readonly deadPeerDetectionInterval!: pulumi.Output<number | undefined>;
    public readonly deadPeerDetectionRetry!: pulumi.Output<number | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    public readonly enableDeadPeerDetection!: pulumi.Output<boolean | undefined>;
    public readonly enableFragmentation!: pulumi.Output<boolean | undefined>;
    public readonly enableIpv6!: pulumi.Output<boolean | undefined>;
    public readonly enableLivenessCheck!: pulumi.Output<boolean | undefined>;
    public readonly enableNatTraversal!: pulumi.Output<boolean | undefined>;
    public readonly enablePassiveMode!: pulumi.Output<boolean | undefined>;
    public readonly ikev1CryptoProfile!: pulumi.Output<string | undefined>;
    public readonly ikev1ExchangeMode!: pulumi.Output<string | undefined>;
    public readonly ikev2CookieValidation!: pulumi.Output<boolean | undefined>;
    public readonly ikev2CryptoProfile!: pulumi.Output<string | undefined>;
    public readonly interface!: pulumi.Output<string>;
    public readonly livenessCheckInterval!: pulumi.Output<number | undefined>;
    public readonly localCert!: pulumi.Output<string | undefined>;
    public readonly localIdType!: pulumi.Output<string | undefined>;
    public readonly localIdValue!: pulumi.Output<string | undefined>;
    public readonly localIpAddressType!: pulumi.Output<string | undefined>;
    public readonly localIpAddressValue!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly natTraversalEnableUdpChecksum!: pulumi.Output<boolean | undefined>;
    public readonly natTraversalKeepAlive!: pulumi.Output<number | undefined>;
    public readonly peerIdCheck!: pulumi.Output<string | undefined>;
    public readonly peerIdType!: pulumi.Output<string | undefined>;
    public readonly peerIdValue!: pulumi.Output<string | undefined>;
    public readonly peerIpType!: pulumi.Output<string | undefined>;
    public readonly peerIpValue!: pulumi.Output<string | undefined>;
    public readonly preSharedKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly preSharedKeyEnc!: pulumi.Output<string>;
    public readonly template!: pulumi.Output<string | undefined>;
    public readonly templateStack!: pulumi.Output<string | undefined>;
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a PanoramaIkeGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PanoramaIkeGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PanoramaIkeGatewayArgs | PanoramaIkeGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PanoramaIkeGatewayState | undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["certBaseUrl"] = state ? state.certBaseUrl : undefined;
            resourceInputs["certEnableHashAndUrl"] = state ? state.certEnableHashAndUrl : undefined;
            resourceInputs["certEnableStrictValidation"] = state ? state.certEnableStrictValidation : undefined;
            resourceInputs["certPermitPayloadMismatch"] = state ? state.certPermitPayloadMismatch : undefined;
            resourceInputs["certProfile"] = state ? state.certProfile : undefined;
            resourceInputs["certUseManagementAsSource"] = state ? state.certUseManagementAsSource : undefined;
            resourceInputs["deadPeerDetectionInterval"] = state ? state.deadPeerDetectionInterval : undefined;
            resourceInputs["deadPeerDetectionRetry"] = state ? state.deadPeerDetectionRetry : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["enableDeadPeerDetection"] = state ? state.enableDeadPeerDetection : undefined;
            resourceInputs["enableFragmentation"] = state ? state.enableFragmentation : undefined;
            resourceInputs["enableIpv6"] = state ? state.enableIpv6 : undefined;
            resourceInputs["enableLivenessCheck"] = state ? state.enableLivenessCheck : undefined;
            resourceInputs["enableNatTraversal"] = state ? state.enableNatTraversal : undefined;
            resourceInputs["enablePassiveMode"] = state ? state.enablePassiveMode : undefined;
            resourceInputs["ikev1CryptoProfile"] = state ? state.ikev1CryptoProfile : undefined;
            resourceInputs["ikev1ExchangeMode"] = state ? state.ikev1ExchangeMode : undefined;
            resourceInputs["ikev2CookieValidation"] = state ? state.ikev2CookieValidation : undefined;
            resourceInputs["ikev2CryptoProfile"] = state ? state.ikev2CryptoProfile : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["livenessCheckInterval"] = state ? state.livenessCheckInterval : undefined;
            resourceInputs["localCert"] = state ? state.localCert : undefined;
            resourceInputs["localIdType"] = state ? state.localIdType : undefined;
            resourceInputs["localIdValue"] = state ? state.localIdValue : undefined;
            resourceInputs["localIpAddressType"] = state ? state.localIpAddressType : undefined;
            resourceInputs["localIpAddressValue"] = state ? state.localIpAddressValue : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natTraversalEnableUdpChecksum"] = state ? state.natTraversalEnableUdpChecksum : undefined;
            resourceInputs["natTraversalKeepAlive"] = state ? state.natTraversalKeepAlive : undefined;
            resourceInputs["peerIdCheck"] = state ? state.peerIdCheck : undefined;
            resourceInputs["peerIdType"] = state ? state.peerIdType : undefined;
            resourceInputs["peerIdValue"] = state ? state.peerIdValue : undefined;
            resourceInputs["peerIpType"] = state ? state.peerIpType : undefined;
            resourceInputs["peerIpValue"] = state ? state.peerIpValue : undefined;
            resourceInputs["preSharedKey"] = state ? state.preSharedKey : undefined;
            resourceInputs["preSharedKeyEnc"] = state ? state.preSharedKeyEnc : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as PanoramaIkeGatewayArgs | undefined;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["certBaseUrl"] = args ? args.certBaseUrl : undefined;
            resourceInputs["certEnableHashAndUrl"] = args ? args.certEnableHashAndUrl : undefined;
            resourceInputs["certEnableStrictValidation"] = args ? args.certEnableStrictValidation : undefined;
            resourceInputs["certPermitPayloadMismatch"] = args ? args.certPermitPayloadMismatch : undefined;
            resourceInputs["certProfile"] = args ? args.certProfile : undefined;
            resourceInputs["certUseManagementAsSource"] = args ? args.certUseManagementAsSource : undefined;
            resourceInputs["deadPeerDetectionInterval"] = args ? args.deadPeerDetectionInterval : undefined;
            resourceInputs["deadPeerDetectionRetry"] = args ? args.deadPeerDetectionRetry : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["enableDeadPeerDetection"] = args ? args.enableDeadPeerDetection : undefined;
            resourceInputs["enableFragmentation"] = args ? args.enableFragmentation : undefined;
            resourceInputs["enableIpv6"] = args ? args.enableIpv6 : undefined;
            resourceInputs["enableLivenessCheck"] = args ? args.enableLivenessCheck : undefined;
            resourceInputs["enableNatTraversal"] = args ? args.enableNatTraversal : undefined;
            resourceInputs["enablePassiveMode"] = args ? args.enablePassiveMode : undefined;
            resourceInputs["ikev1CryptoProfile"] = args ? args.ikev1CryptoProfile : undefined;
            resourceInputs["ikev1ExchangeMode"] = args ? args.ikev1ExchangeMode : undefined;
            resourceInputs["ikev2CookieValidation"] = args ? args.ikev2CookieValidation : undefined;
            resourceInputs["ikev2CryptoProfile"] = args ? args.ikev2CryptoProfile : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["livenessCheckInterval"] = args ? args.livenessCheckInterval : undefined;
            resourceInputs["localCert"] = args ? args.localCert : undefined;
            resourceInputs["localIdType"] = args ? args.localIdType : undefined;
            resourceInputs["localIdValue"] = args ? args.localIdValue : undefined;
            resourceInputs["localIpAddressType"] = args ? args.localIpAddressType : undefined;
            resourceInputs["localIpAddressValue"] = args ? args.localIpAddressValue : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["natTraversalEnableUdpChecksum"] = args ? args.natTraversalEnableUdpChecksum : undefined;
            resourceInputs["natTraversalKeepAlive"] = args ? args.natTraversalKeepAlive : undefined;
            resourceInputs["peerIdCheck"] = args ? args.peerIdCheck : undefined;
            resourceInputs["peerIdType"] = args ? args.peerIdType : undefined;
            resourceInputs["peerIdValue"] = args ? args.peerIdValue : undefined;
            resourceInputs["peerIpType"] = args ? args.peerIpType : undefined;
            resourceInputs["peerIpValue"] = args ? args.peerIpValue : undefined;
            resourceInputs["preSharedKey"] = args?.preSharedKey ? pulumi.secret(args.preSharedKey) : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["preSharedKeyEnc"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["preSharedKey", "preSharedKeyEnc"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PanoramaIkeGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PanoramaIkeGateway resources.
 */
export interface PanoramaIkeGatewayState {
    authType?: pulumi.Input<string>;
    certBaseUrl?: pulumi.Input<string>;
    certEnableHashAndUrl?: pulumi.Input<boolean>;
    certEnableStrictValidation?: pulumi.Input<boolean>;
    certPermitPayloadMismatch?: pulumi.Input<boolean>;
    certProfile?: pulumi.Input<string>;
    certUseManagementAsSource?: pulumi.Input<boolean>;
    deadPeerDetectionInterval?: pulumi.Input<number>;
    deadPeerDetectionRetry?: pulumi.Input<number>;
    disabled?: pulumi.Input<boolean>;
    enableDeadPeerDetection?: pulumi.Input<boolean>;
    enableFragmentation?: pulumi.Input<boolean>;
    enableIpv6?: pulumi.Input<boolean>;
    enableLivenessCheck?: pulumi.Input<boolean>;
    enableNatTraversal?: pulumi.Input<boolean>;
    enablePassiveMode?: pulumi.Input<boolean>;
    ikev1CryptoProfile?: pulumi.Input<string>;
    ikev1ExchangeMode?: pulumi.Input<string>;
    ikev2CookieValidation?: pulumi.Input<boolean>;
    ikev2CryptoProfile?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    livenessCheckInterval?: pulumi.Input<number>;
    localCert?: pulumi.Input<string>;
    localIdType?: pulumi.Input<string>;
    localIdValue?: pulumi.Input<string>;
    localIpAddressType?: pulumi.Input<string>;
    localIpAddressValue?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    natTraversalEnableUdpChecksum?: pulumi.Input<boolean>;
    natTraversalKeepAlive?: pulumi.Input<number>;
    peerIdCheck?: pulumi.Input<string>;
    peerIdType?: pulumi.Input<string>;
    peerIdValue?: pulumi.Input<string>;
    peerIpType?: pulumi.Input<string>;
    peerIpValue?: pulumi.Input<string>;
    preSharedKey?: pulumi.Input<string>;
    preSharedKeyEnc?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
    templateStack?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PanoramaIkeGateway resource.
 */
export interface PanoramaIkeGatewayArgs {
    authType?: pulumi.Input<string>;
    certBaseUrl?: pulumi.Input<string>;
    certEnableHashAndUrl?: pulumi.Input<boolean>;
    certEnableStrictValidation?: pulumi.Input<boolean>;
    certPermitPayloadMismatch?: pulumi.Input<boolean>;
    certProfile?: pulumi.Input<string>;
    certUseManagementAsSource?: pulumi.Input<boolean>;
    deadPeerDetectionInterval?: pulumi.Input<number>;
    deadPeerDetectionRetry?: pulumi.Input<number>;
    disabled?: pulumi.Input<boolean>;
    enableDeadPeerDetection?: pulumi.Input<boolean>;
    enableFragmentation?: pulumi.Input<boolean>;
    enableIpv6?: pulumi.Input<boolean>;
    enableLivenessCheck?: pulumi.Input<boolean>;
    enableNatTraversal?: pulumi.Input<boolean>;
    enablePassiveMode?: pulumi.Input<boolean>;
    ikev1CryptoProfile?: pulumi.Input<string>;
    ikev1ExchangeMode?: pulumi.Input<string>;
    ikev2CookieValidation?: pulumi.Input<boolean>;
    ikev2CryptoProfile?: pulumi.Input<string>;
    interface: pulumi.Input<string>;
    livenessCheckInterval?: pulumi.Input<number>;
    localCert?: pulumi.Input<string>;
    localIdType?: pulumi.Input<string>;
    localIdValue?: pulumi.Input<string>;
    localIpAddressType?: pulumi.Input<string>;
    localIpAddressValue?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    natTraversalEnableUdpChecksum?: pulumi.Input<boolean>;
    natTraversalKeepAlive?: pulumi.Input<number>;
    peerIdCheck?: pulumi.Input<string>;
    peerIdType?: pulumi.Input<string>;
    peerIdValue?: pulumi.Input<string>;
    peerIpType?: pulumi.Input<string>;
    peerIpValue?: pulumi.Input<string>;
    preSharedKey?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
    templateStack?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
