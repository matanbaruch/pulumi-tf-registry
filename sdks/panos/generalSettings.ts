// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GeneralSettings extends pulumi.CustomResource {
    /**
     * Get an existing GeneralSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GeneralSettingsState, opts?: pulumi.CustomResourceOptions): GeneralSettings {
        return new GeneralSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/generalSettings:GeneralSettings';

    /**
     * Returns true if the given object is an instance of GeneralSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GeneralSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GeneralSettings.__pulumiType;
    }

    /**
     * Primary DNS IP address
     */
    public readonly dnsPrimary!: pulumi.Output<string>;
    /**
     * Secondary DNS IP address
     */
    public readonly dnsSecondary!: pulumi.Output<string>;
    /**
     * Domain
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The firewall hostname
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Primary NTP server
     */
    public readonly ntpPrimaryAddress!: pulumi.Output<string>;
    /**
     * NTP symmetric-key algorithm (sha1 or md5)
     */
    public readonly ntpPrimaryAlgorithm!: pulumi.Output<string>;
    /**
     * NTP symmetric-key auth key
     */
    public readonly ntpPrimaryAuthKey!: pulumi.Output<string>;
    /**
     * NTP auth type (none, autokey, symmetric-key)
     */
    public readonly ntpPrimaryAuthType!: pulumi.Output<string>;
    /**
     * NTP symmetric-key key ID
     */
    public readonly ntpPrimaryKeyId!: pulumi.Output<number>;
    /**
     * Secondary NTP server
     */
    public readonly ntpSecondaryAddress!: pulumi.Output<string>;
    /**
     * NTP symmetric-key algorithm (sha1 or md5)
     */
    public readonly ntpSecondaryAlgorithm!: pulumi.Output<string>;
    /**
     * NTP symmetric-key auth key
     */
    public readonly ntpSecondaryAuthKey!: pulumi.Output<string>;
    /**
     * NTP auth type (none, autokey, symmetric-key)
     */
    public readonly ntpSecondaryAuthType!: pulumi.Output<string>;
    /**
     * NTP symmetric-key key ID
     */
    public readonly ntpSecondaryKeyId!: pulumi.Output<number>;
    public readonly proxyPassword!: pulumi.Output<string>;
    public /*out*/ readonly proxyPasswordEnc!: pulumi.Output<string>;
    public readonly proxyPort!: pulumi.Output<number>;
    public readonly proxyServer!: pulumi.Output<string>;
    public readonly proxyUser!: pulumi.Output<string>;
    /**
     * Timezone
     */
    public readonly timezone!: pulumi.Output<string>;
    /**
     * PANOS update server
     */
    public readonly updateServer!: pulumi.Output<string | undefined>;
    /**
     * Verify update server identity
     */
    public readonly verifyUpdateServer!: pulumi.Output<boolean | undefined>;

    /**
     * Create a GeneralSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GeneralSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GeneralSettingsArgs | GeneralSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GeneralSettingsState | undefined;
            resourceInputs["dnsPrimary"] = state ? state.dnsPrimary : undefined;
            resourceInputs["dnsSecondary"] = state ? state.dnsSecondary : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ntpPrimaryAddress"] = state ? state.ntpPrimaryAddress : undefined;
            resourceInputs["ntpPrimaryAlgorithm"] = state ? state.ntpPrimaryAlgorithm : undefined;
            resourceInputs["ntpPrimaryAuthKey"] = state ? state.ntpPrimaryAuthKey : undefined;
            resourceInputs["ntpPrimaryAuthType"] = state ? state.ntpPrimaryAuthType : undefined;
            resourceInputs["ntpPrimaryKeyId"] = state ? state.ntpPrimaryKeyId : undefined;
            resourceInputs["ntpSecondaryAddress"] = state ? state.ntpSecondaryAddress : undefined;
            resourceInputs["ntpSecondaryAlgorithm"] = state ? state.ntpSecondaryAlgorithm : undefined;
            resourceInputs["ntpSecondaryAuthKey"] = state ? state.ntpSecondaryAuthKey : undefined;
            resourceInputs["ntpSecondaryAuthType"] = state ? state.ntpSecondaryAuthType : undefined;
            resourceInputs["ntpSecondaryKeyId"] = state ? state.ntpSecondaryKeyId : undefined;
            resourceInputs["proxyPassword"] = state ? state.proxyPassword : undefined;
            resourceInputs["proxyPasswordEnc"] = state ? state.proxyPasswordEnc : undefined;
            resourceInputs["proxyPort"] = state ? state.proxyPort : undefined;
            resourceInputs["proxyServer"] = state ? state.proxyServer : undefined;
            resourceInputs["proxyUser"] = state ? state.proxyUser : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["updateServer"] = state ? state.updateServer : undefined;
            resourceInputs["verifyUpdateServer"] = state ? state.verifyUpdateServer : undefined;
        } else {
            const args = argsOrState as GeneralSettingsArgs | undefined;
            resourceInputs["dnsPrimary"] = args ? args.dnsPrimary : undefined;
            resourceInputs["dnsSecondary"] = args ? args.dnsSecondary : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["ntpPrimaryAddress"] = args ? args.ntpPrimaryAddress : undefined;
            resourceInputs["ntpPrimaryAlgorithm"] = args ? args.ntpPrimaryAlgorithm : undefined;
            resourceInputs["ntpPrimaryAuthKey"] = args ? args.ntpPrimaryAuthKey : undefined;
            resourceInputs["ntpPrimaryAuthType"] = args ? args.ntpPrimaryAuthType : undefined;
            resourceInputs["ntpPrimaryKeyId"] = args ? args.ntpPrimaryKeyId : undefined;
            resourceInputs["ntpSecondaryAddress"] = args ? args.ntpSecondaryAddress : undefined;
            resourceInputs["ntpSecondaryAlgorithm"] = args ? args.ntpSecondaryAlgorithm : undefined;
            resourceInputs["ntpSecondaryAuthKey"] = args ? args.ntpSecondaryAuthKey : undefined;
            resourceInputs["ntpSecondaryAuthType"] = args ? args.ntpSecondaryAuthType : undefined;
            resourceInputs["ntpSecondaryKeyId"] = args ? args.ntpSecondaryKeyId : undefined;
            resourceInputs["proxyPassword"] = args?.proxyPassword ? pulumi.secret(args.proxyPassword) : undefined;
            resourceInputs["proxyPort"] = args ? args.proxyPort : undefined;
            resourceInputs["proxyServer"] = args ? args.proxyServer : undefined;
            resourceInputs["proxyUser"] = args ? args.proxyUser : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["updateServer"] = args ? args.updateServer : undefined;
            resourceInputs["verifyUpdateServer"] = args ? args.verifyUpdateServer : undefined;
            resourceInputs["proxyPasswordEnc"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["proxyPassword", "proxyPasswordEnc"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GeneralSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GeneralSettings resources.
 */
export interface GeneralSettingsState {
    /**
     * Primary DNS IP address
     */
    dnsPrimary?: pulumi.Input<string>;
    /**
     * Secondary DNS IP address
     */
    dnsSecondary?: pulumi.Input<string>;
    /**
     * Domain
     */
    domain?: pulumi.Input<string>;
    /**
     * The firewall hostname
     */
    hostname?: pulumi.Input<string>;
    /**
     * Primary NTP server
     */
    ntpPrimaryAddress?: pulumi.Input<string>;
    /**
     * NTP symmetric-key algorithm (sha1 or md5)
     */
    ntpPrimaryAlgorithm?: pulumi.Input<string>;
    /**
     * NTP symmetric-key auth key
     */
    ntpPrimaryAuthKey?: pulumi.Input<string>;
    /**
     * NTP auth type (none, autokey, symmetric-key)
     */
    ntpPrimaryAuthType?: pulumi.Input<string>;
    /**
     * NTP symmetric-key key ID
     */
    ntpPrimaryKeyId?: pulumi.Input<number>;
    /**
     * Secondary NTP server
     */
    ntpSecondaryAddress?: pulumi.Input<string>;
    /**
     * NTP symmetric-key algorithm (sha1 or md5)
     */
    ntpSecondaryAlgorithm?: pulumi.Input<string>;
    /**
     * NTP symmetric-key auth key
     */
    ntpSecondaryAuthKey?: pulumi.Input<string>;
    /**
     * NTP auth type (none, autokey, symmetric-key)
     */
    ntpSecondaryAuthType?: pulumi.Input<string>;
    /**
     * NTP symmetric-key key ID
     */
    ntpSecondaryKeyId?: pulumi.Input<number>;
    proxyPassword?: pulumi.Input<string>;
    proxyPasswordEnc?: pulumi.Input<string>;
    proxyPort?: pulumi.Input<number>;
    proxyServer?: pulumi.Input<string>;
    proxyUser?: pulumi.Input<string>;
    /**
     * Timezone
     */
    timezone?: pulumi.Input<string>;
    /**
     * PANOS update server
     */
    updateServer?: pulumi.Input<string>;
    /**
     * Verify update server identity
     */
    verifyUpdateServer?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GeneralSettings resource.
 */
export interface GeneralSettingsArgs {
    /**
     * Primary DNS IP address
     */
    dnsPrimary?: pulumi.Input<string>;
    /**
     * Secondary DNS IP address
     */
    dnsSecondary?: pulumi.Input<string>;
    /**
     * Domain
     */
    domain?: pulumi.Input<string>;
    /**
     * The firewall hostname
     */
    hostname?: pulumi.Input<string>;
    /**
     * Primary NTP server
     */
    ntpPrimaryAddress?: pulumi.Input<string>;
    /**
     * NTP symmetric-key algorithm (sha1 or md5)
     */
    ntpPrimaryAlgorithm?: pulumi.Input<string>;
    /**
     * NTP symmetric-key auth key
     */
    ntpPrimaryAuthKey?: pulumi.Input<string>;
    /**
     * NTP auth type (none, autokey, symmetric-key)
     */
    ntpPrimaryAuthType?: pulumi.Input<string>;
    /**
     * NTP symmetric-key key ID
     */
    ntpPrimaryKeyId?: pulumi.Input<number>;
    /**
     * Secondary NTP server
     */
    ntpSecondaryAddress?: pulumi.Input<string>;
    /**
     * NTP symmetric-key algorithm (sha1 or md5)
     */
    ntpSecondaryAlgorithm?: pulumi.Input<string>;
    /**
     * NTP symmetric-key auth key
     */
    ntpSecondaryAuthKey?: pulumi.Input<string>;
    /**
     * NTP auth type (none, autokey, symmetric-key)
     */
    ntpSecondaryAuthType?: pulumi.Input<string>;
    /**
     * NTP symmetric-key key ID
     */
    ntpSecondaryKeyId?: pulumi.Input<number>;
    proxyPassword?: pulumi.Input<string>;
    proxyPort?: pulumi.Input<number>;
    proxyServer?: pulumi.Input<string>;
    proxyUser?: pulumi.Input<string>;
    /**
     * Timezone
     */
    timezone?: pulumi.Input<string>;
    /**
     * PANOS update server
     */
    updateServer?: pulumi.Input<string>;
    /**
     * Verify update server identity
     */
    verifyUpdateServer?: pulumi.Input<boolean>;
}
