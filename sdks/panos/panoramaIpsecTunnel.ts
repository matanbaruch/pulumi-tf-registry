// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PanoramaIpsecTunnel extends pulumi.CustomResource {
    /**
     * Get an existing PanoramaIpsecTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PanoramaIpsecTunnelState, opts?: pulumi.CustomResourceOptions): PanoramaIpsecTunnel {
        return new PanoramaIpsecTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/panoramaIpsecTunnel:PanoramaIpsecTunnel';

    /**
     * Returns true if the given object is an instance of PanoramaIpsecTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PanoramaIpsecTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PanoramaIpsecTunnel.__pulumiType;
    }

    public readonly akIkeGateway!: pulumi.Output<string | undefined>;
    public readonly akIpsecCryptoProfile!: pulumi.Output<string | undefined>;
    public readonly antiReplay!: pulumi.Output<boolean | undefined>;
    public readonly copyFlowLabel!: pulumi.Output<boolean | undefined>;
    public readonly copyTos!: pulumi.Output<boolean | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    public readonly enableIpv6!: pulumi.Output<boolean | undefined>;
    public readonly enableTunnelMonitor!: pulumi.Output<boolean | undefined>;
    public readonly gpsCertificateProfile!: pulumi.Output<string | undefined>;
    public readonly gpsInterface!: pulumi.Output<string | undefined>;
    public readonly gpsInterfaceFloatingIpIpv4!: pulumi.Output<string | undefined>;
    public readonly gpsInterfaceFloatingIpIpv6!: pulumi.Output<string | undefined>;
    public readonly gpsInterfaceIpIpv4!: pulumi.Output<string | undefined>;
    public readonly gpsInterfaceIpIpv6!: pulumi.Output<string | undefined>;
    public readonly gpsLocalCertificate!: pulumi.Output<string | undefined>;
    public readonly gpsPortalAddress!: pulumi.Output<string | undefined>;
    public readonly gpsPreferIpv6!: pulumi.Output<boolean | undefined>;
    public readonly gpsPublishConnectedRoutes!: pulumi.Output<boolean | undefined>;
    public readonly gpsPublishRoutes!: pulumi.Output<string[] | undefined>;
    public readonly mkAuthKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly mkAuthKeyEnc!: pulumi.Output<string>;
    public readonly mkAuthType!: pulumi.Output<string | undefined>;
    public readonly mkEspEncryptionKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly mkEspEncryptionKeyEnc!: pulumi.Output<string>;
    public readonly mkEspEncryptionType!: pulumi.Output<string | undefined>;
    public readonly mkInterface!: pulumi.Output<string | undefined>;
    public readonly mkLocalAddressFloatingIp!: pulumi.Output<string | undefined>;
    public readonly mkLocalAddressIp!: pulumi.Output<string | undefined>;
    public readonly mkLocalSpi!: pulumi.Output<string | undefined>;
    public readonly mkProtocol!: pulumi.Output<string | undefined>;
    public readonly mkRemoteAddress!: pulumi.Output<string | undefined>;
    public readonly mkRemoteSpi!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly template!: pulumi.Output<string>;
    public readonly tunnelInterface!: pulumi.Output<string>;
    public readonly tunnelMonitorDestinationIp!: pulumi.Output<string | undefined>;
    public readonly tunnelMonitorProfile!: pulumi.Output<string | undefined>;
    public readonly tunnelMonitorProxyId!: pulumi.Output<string | undefined>;
    public readonly tunnelMonitorSourceIp!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a PanoramaIpsecTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PanoramaIpsecTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PanoramaIpsecTunnelArgs | PanoramaIpsecTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PanoramaIpsecTunnelState | undefined;
            resourceInputs["akIkeGateway"] = state ? state.akIkeGateway : undefined;
            resourceInputs["akIpsecCryptoProfile"] = state ? state.akIpsecCryptoProfile : undefined;
            resourceInputs["antiReplay"] = state ? state.antiReplay : undefined;
            resourceInputs["copyFlowLabel"] = state ? state.copyFlowLabel : undefined;
            resourceInputs["copyTos"] = state ? state.copyTos : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["enableIpv6"] = state ? state.enableIpv6 : undefined;
            resourceInputs["enableTunnelMonitor"] = state ? state.enableTunnelMonitor : undefined;
            resourceInputs["gpsCertificateProfile"] = state ? state.gpsCertificateProfile : undefined;
            resourceInputs["gpsInterface"] = state ? state.gpsInterface : undefined;
            resourceInputs["gpsInterfaceFloatingIpIpv4"] = state ? state.gpsInterfaceFloatingIpIpv4 : undefined;
            resourceInputs["gpsInterfaceFloatingIpIpv6"] = state ? state.gpsInterfaceFloatingIpIpv6 : undefined;
            resourceInputs["gpsInterfaceIpIpv4"] = state ? state.gpsInterfaceIpIpv4 : undefined;
            resourceInputs["gpsInterfaceIpIpv6"] = state ? state.gpsInterfaceIpIpv6 : undefined;
            resourceInputs["gpsLocalCertificate"] = state ? state.gpsLocalCertificate : undefined;
            resourceInputs["gpsPortalAddress"] = state ? state.gpsPortalAddress : undefined;
            resourceInputs["gpsPreferIpv6"] = state ? state.gpsPreferIpv6 : undefined;
            resourceInputs["gpsPublishConnectedRoutes"] = state ? state.gpsPublishConnectedRoutes : undefined;
            resourceInputs["gpsPublishRoutes"] = state ? state.gpsPublishRoutes : undefined;
            resourceInputs["mkAuthKey"] = state ? state.mkAuthKey : undefined;
            resourceInputs["mkAuthKeyEnc"] = state ? state.mkAuthKeyEnc : undefined;
            resourceInputs["mkAuthType"] = state ? state.mkAuthType : undefined;
            resourceInputs["mkEspEncryptionKey"] = state ? state.mkEspEncryptionKey : undefined;
            resourceInputs["mkEspEncryptionKeyEnc"] = state ? state.mkEspEncryptionKeyEnc : undefined;
            resourceInputs["mkEspEncryptionType"] = state ? state.mkEspEncryptionType : undefined;
            resourceInputs["mkInterface"] = state ? state.mkInterface : undefined;
            resourceInputs["mkLocalAddressFloatingIp"] = state ? state.mkLocalAddressFloatingIp : undefined;
            resourceInputs["mkLocalAddressIp"] = state ? state.mkLocalAddressIp : undefined;
            resourceInputs["mkLocalSpi"] = state ? state.mkLocalSpi : undefined;
            resourceInputs["mkProtocol"] = state ? state.mkProtocol : undefined;
            resourceInputs["mkRemoteAddress"] = state ? state.mkRemoteAddress : undefined;
            resourceInputs["mkRemoteSpi"] = state ? state.mkRemoteSpi : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["tunnelInterface"] = state ? state.tunnelInterface : undefined;
            resourceInputs["tunnelMonitorDestinationIp"] = state ? state.tunnelMonitorDestinationIp : undefined;
            resourceInputs["tunnelMonitorProfile"] = state ? state.tunnelMonitorProfile : undefined;
            resourceInputs["tunnelMonitorProxyId"] = state ? state.tunnelMonitorProxyId : undefined;
            resourceInputs["tunnelMonitorSourceIp"] = state ? state.tunnelMonitorSourceIp : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as PanoramaIpsecTunnelArgs | undefined;
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            if ((!args || args.tunnelInterface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnelInterface'");
            }
            resourceInputs["akIkeGateway"] = args ? args.akIkeGateway : undefined;
            resourceInputs["akIpsecCryptoProfile"] = args ? args.akIpsecCryptoProfile : undefined;
            resourceInputs["antiReplay"] = args ? args.antiReplay : undefined;
            resourceInputs["copyFlowLabel"] = args ? args.copyFlowLabel : undefined;
            resourceInputs["copyTos"] = args ? args.copyTos : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["enableIpv6"] = args ? args.enableIpv6 : undefined;
            resourceInputs["enableTunnelMonitor"] = args ? args.enableTunnelMonitor : undefined;
            resourceInputs["gpsCertificateProfile"] = args ? args.gpsCertificateProfile : undefined;
            resourceInputs["gpsInterface"] = args ? args.gpsInterface : undefined;
            resourceInputs["gpsInterfaceFloatingIpIpv4"] = args ? args.gpsInterfaceFloatingIpIpv4 : undefined;
            resourceInputs["gpsInterfaceFloatingIpIpv6"] = args ? args.gpsInterfaceFloatingIpIpv6 : undefined;
            resourceInputs["gpsInterfaceIpIpv4"] = args ? args.gpsInterfaceIpIpv4 : undefined;
            resourceInputs["gpsInterfaceIpIpv6"] = args ? args.gpsInterfaceIpIpv6 : undefined;
            resourceInputs["gpsLocalCertificate"] = args ? args.gpsLocalCertificate : undefined;
            resourceInputs["gpsPortalAddress"] = args ? args.gpsPortalAddress : undefined;
            resourceInputs["gpsPreferIpv6"] = args ? args.gpsPreferIpv6 : undefined;
            resourceInputs["gpsPublishConnectedRoutes"] = args ? args.gpsPublishConnectedRoutes : undefined;
            resourceInputs["gpsPublishRoutes"] = args ? args.gpsPublishRoutes : undefined;
            resourceInputs["mkAuthKey"] = args?.mkAuthKey ? pulumi.secret(args.mkAuthKey) : undefined;
            resourceInputs["mkAuthType"] = args ? args.mkAuthType : undefined;
            resourceInputs["mkEspEncryptionKey"] = args?.mkEspEncryptionKey ? pulumi.secret(args.mkEspEncryptionKey) : undefined;
            resourceInputs["mkEspEncryptionType"] = args ? args.mkEspEncryptionType : undefined;
            resourceInputs["mkInterface"] = args ? args.mkInterface : undefined;
            resourceInputs["mkLocalAddressFloatingIp"] = args ? args.mkLocalAddressFloatingIp : undefined;
            resourceInputs["mkLocalAddressIp"] = args ? args.mkLocalAddressIp : undefined;
            resourceInputs["mkLocalSpi"] = args ? args.mkLocalSpi : undefined;
            resourceInputs["mkProtocol"] = args ? args.mkProtocol : undefined;
            resourceInputs["mkRemoteAddress"] = args ? args.mkRemoteAddress : undefined;
            resourceInputs["mkRemoteSpi"] = args ? args.mkRemoteSpi : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["tunnelInterface"] = args ? args.tunnelInterface : undefined;
            resourceInputs["tunnelMonitorDestinationIp"] = args ? args.tunnelMonitorDestinationIp : undefined;
            resourceInputs["tunnelMonitorProfile"] = args ? args.tunnelMonitorProfile : undefined;
            resourceInputs["tunnelMonitorProxyId"] = args ? args.tunnelMonitorProxyId : undefined;
            resourceInputs["tunnelMonitorSourceIp"] = args ? args.tunnelMonitorSourceIp : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["mkAuthKeyEnc"] = undefined /*out*/;
            resourceInputs["mkEspEncryptionKeyEnc"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["mkAuthKey", "mkAuthKeyEnc", "mkEspEncryptionKey", "mkEspEncryptionKeyEnc"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PanoramaIpsecTunnel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PanoramaIpsecTunnel resources.
 */
export interface PanoramaIpsecTunnelState {
    akIkeGateway?: pulumi.Input<string>;
    akIpsecCryptoProfile?: pulumi.Input<string>;
    antiReplay?: pulumi.Input<boolean>;
    copyFlowLabel?: pulumi.Input<boolean>;
    copyTos?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    enableIpv6?: pulumi.Input<boolean>;
    enableTunnelMonitor?: pulumi.Input<boolean>;
    gpsCertificateProfile?: pulumi.Input<string>;
    gpsInterface?: pulumi.Input<string>;
    gpsInterfaceFloatingIpIpv4?: pulumi.Input<string>;
    gpsInterfaceFloatingIpIpv6?: pulumi.Input<string>;
    gpsInterfaceIpIpv4?: pulumi.Input<string>;
    gpsInterfaceIpIpv6?: pulumi.Input<string>;
    gpsLocalCertificate?: pulumi.Input<string>;
    gpsPortalAddress?: pulumi.Input<string>;
    gpsPreferIpv6?: pulumi.Input<boolean>;
    gpsPublishConnectedRoutes?: pulumi.Input<boolean>;
    gpsPublishRoutes?: pulumi.Input<pulumi.Input<string>[]>;
    mkAuthKey?: pulumi.Input<string>;
    mkAuthKeyEnc?: pulumi.Input<string>;
    mkAuthType?: pulumi.Input<string>;
    mkEspEncryptionKey?: pulumi.Input<string>;
    mkEspEncryptionKeyEnc?: pulumi.Input<string>;
    mkEspEncryptionType?: pulumi.Input<string>;
    mkInterface?: pulumi.Input<string>;
    mkLocalAddressFloatingIp?: pulumi.Input<string>;
    mkLocalAddressIp?: pulumi.Input<string>;
    mkLocalSpi?: pulumi.Input<string>;
    mkProtocol?: pulumi.Input<string>;
    mkRemoteAddress?: pulumi.Input<string>;
    mkRemoteSpi?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
    tunnelInterface?: pulumi.Input<string>;
    tunnelMonitorDestinationIp?: pulumi.Input<string>;
    tunnelMonitorProfile?: pulumi.Input<string>;
    tunnelMonitorProxyId?: pulumi.Input<string>;
    tunnelMonitorSourceIp?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PanoramaIpsecTunnel resource.
 */
export interface PanoramaIpsecTunnelArgs {
    akIkeGateway?: pulumi.Input<string>;
    akIpsecCryptoProfile?: pulumi.Input<string>;
    antiReplay?: pulumi.Input<boolean>;
    copyFlowLabel?: pulumi.Input<boolean>;
    copyTos?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    enableIpv6?: pulumi.Input<boolean>;
    enableTunnelMonitor?: pulumi.Input<boolean>;
    gpsCertificateProfile?: pulumi.Input<string>;
    gpsInterface?: pulumi.Input<string>;
    gpsInterfaceFloatingIpIpv4?: pulumi.Input<string>;
    gpsInterfaceFloatingIpIpv6?: pulumi.Input<string>;
    gpsInterfaceIpIpv4?: pulumi.Input<string>;
    gpsInterfaceIpIpv6?: pulumi.Input<string>;
    gpsLocalCertificate?: pulumi.Input<string>;
    gpsPortalAddress?: pulumi.Input<string>;
    gpsPreferIpv6?: pulumi.Input<boolean>;
    gpsPublishConnectedRoutes?: pulumi.Input<boolean>;
    gpsPublishRoutes?: pulumi.Input<pulumi.Input<string>[]>;
    mkAuthKey?: pulumi.Input<string>;
    mkAuthType?: pulumi.Input<string>;
    mkEspEncryptionKey?: pulumi.Input<string>;
    mkEspEncryptionType?: pulumi.Input<string>;
    mkInterface?: pulumi.Input<string>;
    mkLocalAddressFloatingIp?: pulumi.Input<string>;
    mkLocalAddressIp?: pulumi.Input<string>;
    mkLocalSpi?: pulumi.Input<string>;
    mkProtocol?: pulumi.Input<string>;
    mkRemoteAddress?: pulumi.Input<string>;
    mkRemoteSpi?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    template: pulumi.Input<string>;
    tunnelInterface: pulumi.Input<string>;
    tunnelMonitorDestinationIp?: pulumi.Input<string>;
    tunnelMonitorProfile?: pulumi.Input<string>;
    tunnelMonitorProxyId?: pulumi.Input<string>;
    tunnelMonitorSourceIp?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
