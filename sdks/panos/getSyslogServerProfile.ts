// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSyslogServerProfile(args: GetSyslogServerProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetSyslogServerProfileResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("panos:index/getSyslogServerProfile:getSyslogServerProfile", {
        "id": args.id,
        "name": args.name,
        "template": args.template,
        "templateStack": args.templateStack,
        "vsys": args.vsys,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSyslogServerProfile.
 */
export interface GetSyslogServerProfileArgs {
    id?: string;
    name: string;
    template?: string;
    templateStack?: string;
    vsys?: string;
}

/**
 * A collection of values returned by getSyslogServerProfile.
 */
export interface GetSyslogServerProfileResult {
    readonly authFormat: string;
    readonly configFormat: string;
    readonly dataFormat: string;
    readonly escapeCharacter: string;
    readonly escapedCharacters: string;
    readonly gtpFormat: string;
    readonly hipMatchFormat: string;
    readonly id: string;
    readonly iptagFormat: string;
    readonly name: string;
    readonly sctpFormat: string;
    readonly syslogServers: outputs.GetSyslogServerProfileSyslogServer[];
    readonly systemFormat: string;
    readonly template?: string;
    readonly templateStack?: string;
    readonly threatFormat: string;
    readonly trafficFormat: string;
    readonly tunnelFormat: string;
    readonly urlFormat: string;
    readonly userIdFormat: string;
    readonly vsys?: string;
    readonly wildfireFormat: string;
}
export function getSyslogServerProfileOutput(args: GetSyslogServerProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSyslogServerProfileResult> {
    return pulumi.output(args).apply((a: any) => getSyslogServerProfile(a, opts))
}

/**
 * A collection of arguments for invoking getSyslogServerProfile.
 */
export interface GetSyslogServerProfileOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    template?: pulumi.Input<string>;
    templateStack?: pulumi.Input<string>;
    vsys?: pulumi.Input<string>;
}
