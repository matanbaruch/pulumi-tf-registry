// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OspfArea extends pulumi.CustomResource {
    /**
     * Get an existing OspfArea resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OspfAreaState, opts?: pulumi.CustomResourceOptions): OspfArea {
        return new OspfArea(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panos:index/ospfArea:OspfArea';

    /**
     * Returns true if the given object is an instance of OspfArea.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OspfArea {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OspfArea.__pulumiType;
    }

    /**
     * (stub/nssa) Accept summary
     */
    public readonly acceptSummary!: pulumi.Output<boolean | undefined>;
    /**
     * (stub/nssa) Advertise metric
     */
    public readonly advertiseMetric!: pulumi.Output<number | undefined>;
    /**
     * (nssa) Advertise type
     */
    public readonly advertiseType!: pulumi.Output<string | undefined>;
    /**
     * (stub/nssa) Default route advertise
     */
    public readonly defaultRouteAdvertise!: pulumi.Output<boolean | undefined>;
    /**
     * (nssa) List of EXT Range specs
     */
    public readonly extRanges!: pulumi.Output<outputs.OspfAreaExtRange[] | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of range specs
     */
    public readonly ranges!: pulumi.Output<outputs.OspfAreaRange[] | undefined>;
    /**
     * The template.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * The template stack.
     */
    public readonly templateStack!: pulumi.Output<string | undefined>;
    /**
     * Area type
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The virtual router
     */
    public readonly virtualRouter!: pulumi.Output<string>;

    /**
     * Create a OspfArea resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OspfAreaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OspfAreaArgs | OspfAreaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OspfAreaState | undefined;
            resourceInputs["acceptSummary"] = state ? state.acceptSummary : undefined;
            resourceInputs["advertiseMetric"] = state ? state.advertiseMetric : undefined;
            resourceInputs["advertiseType"] = state ? state.advertiseType : undefined;
            resourceInputs["defaultRouteAdvertise"] = state ? state.defaultRouteAdvertise : undefined;
            resourceInputs["extRanges"] = state ? state.extRanges : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ranges"] = state ? state.ranges : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateStack"] = state ? state.templateStack : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["virtualRouter"] = state ? state.virtualRouter : undefined;
        } else {
            const args = argsOrState as OspfAreaArgs | undefined;
            if ((!args || args.virtualRouter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualRouter'");
            }
            resourceInputs["acceptSummary"] = args ? args.acceptSummary : undefined;
            resourceInputs["advertiseMetric"] = args ? args.advertiseMetric : undefined;
            resourceInputs["advertiseType"] = args ? args.advertiseType : undefined;
            resourceInputs["defaultRouteAdvertise"] = args ? args.defaultRouteAdvertise : undefined;
            resourceInputs["extRanges"] = args ? args.extRanges : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ranges"] = args ? args.ranges : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateStack"] = args ? args.templateStack : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["virtualRouter"] = args ? args.virtualRouter : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OspfArea.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OspfArea resources.
 */
export interface OspfAreaState {
    /**
     * (stub/nssa) Accept summary
     */
    acceptSummary?: pulumi.Input<boolean>;
    /**
     * (stub/nssa) Advertise metric
     */
    advertiseMetric?: pulumi.Input<number>;
    /**
     * (nssa) Advertise type
     */
    advertiseType?: pulumi.Input<string>;
    /**
     * (stub/nssa) Default route advertise
     */
    defaultRouteAdvertise?: pulumi.Input<boolean>;
    /**
     * (nssa) List of EXT Range specs
     */
    extRanges?: pulumi.Input<pulumi.Input<inputs.OspfAreaExtRange>[]>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * List of range specs
     */
    ranges?: pulumi.Input<pulumi.Input<inputs.OspfAreaRange>[]>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * Area type
     */
    type?: pulumi.Input<string>;
    /**
     * The virtual router
     */
    virtualRouter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OspfArea resource.
 */
export interface OspfAreaArgs {
    /**
     * (stub/nssa) Accept summary
     */
    acceptSummary?: pulumi.Input<boolean>;
    /**
     * (stub/nssa) Advertise metric
     */
    advertiseMetric?: pulumi.Input<number>;
    /**
     * (nssa) Advertise type
     */
    advertiseType?: pulumi.Input<string>;
    /**
     * (stub/nssa) Default route advertise
     */
    defaultRouteAdvertise?: pulumi.Input<boolean>;
    /**
     * (nssa) List of EXT Range specs
     */
    extRanges?: pulumi.Input<pulumi.Input<inputs.OspfAreaExtRange>[]>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * List of range specs
     */
    ranges?: pulumi.Input<pulumi.Input<inputs.OspfAreaRange>[]>;
    /**
     * The template.
     */
    template?: pulumi.Input<string>;
    /**
     * The template stack.
     */
    templateStack?: pulumi.Input<string>;
    /**
     * Area type
     */
    type?: pulumi.Input<string>;
    /**
     * The virtual router
     */
    virtualRouter: pulumi.Input<string>;
}
