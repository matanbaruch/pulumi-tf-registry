// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CollectorGroup extends pulumi.CustomResource {
    /**
     * Get an existing CollectorGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CollectorGroupState, opts?: pulumi.CustomResourceOptions): CollectorGroup {
        return new CollectorGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logicmonitor:index/collectorGroup:CollectorGroup';

    /**
     * Returns true if the given object is an instance of CollectorGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CollectorGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CollectorGroup.__pulumiType;
    }

    public readonly autoBalance!: pulumi.Output<boolean | undefined>;
    public readonly autoBalanceInstanceCountThreshold!: pulumi.Output<number | undefined>;
    public readonly autoBalanceStrategy!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createOn!: pulumi.Output<number>;
    public readonly customProperties!: pulumi.Output<outputs.CollectorGroupCustomProperty[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly numOfCollectors!: pulumi.Output<number>;
    public /*out*/ readonly userPermission!: pulumi.Output<string>;

    /**
     * Create a CollectorGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CollectorGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CollectorGroupArgs | CollectorGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CollectorGroupState | undefined;
            resourceInputs["autoBalance"] = state ? state.autoBalance : undefined;
            resourceInputs["autoBalanceInstanceCountThreshold"] = state ? state.autoBalanceInstanceCountThreshold : undefined;
            resourceInputs["autoBalanceStrategy"] = state ? state.autoBalanceStrategy : undefined;
            resourceInputs["createOn"] = state ? state.createOn : undefined;
            resourceInputs["customProperties"] = state ? state.customProperties : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numOfCollectors"] = state ? state.numOfCollectors : undefined;
            resourceInputs["userPermission"] = state ? state.userPermission : undefined;
        } else {
            const args = argsOrState as CollectorGroupArgs | undefined;
            resourceInputs["autoBalance"] = args ? args.autoBalance : undefined;
            resourceInputs["autoBalanceInstanceCountThreshold"] = args ? args.autoBalanceInstanceCountThreshold : undefined;
            resourceInputs["autoBalanceStrategy"] = args ? args.autoBalanceStrategy : undefined;
            resourceInputs["customProperties"] = args ? args.customProperties : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["createOn"] = undefined /*out*/;
            resourceInputs["numOfCollectors"] = undefined /*out*/;
            resourceInputs["userPermission"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CollectorGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CollectorGroup resources.
 */
export interface CollectorGroupState {
    autoBalance?: pulumi.Input<boolean>;
    autoBalanceInstanceCountThreshold?: pulumi.Input<number>;
    autoBalanceStrategy?: pulumi.Input<string>;
    createOn?: pulumi.Input<number>;
    customProperties?: pulumi.Input<pulumi.Input<inputs.CollectorGroupCustomProperty>[]>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numOfCollectors?: pulumi.Input<number>;
    userPermission?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CollectorGroup resource.
 */
export interface CollectorGroupArgs {
    autoBalance?: pulumi.Input<boolean>;
    autoBalanceInstanceCountThreshold?: pulumi.Input<number>;
    autoBalanceStrategy?: pulumi.Input<string>;
    customProperties?: pulumi.Input<pulumi.Input<inputs.CollectorGroupCustomProperty>[]>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
