// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logicmonitor:index/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly fullName!: pulumi.Output<string>;
    public /*out*/ readonly groupFullPath!: pulumi.Output<string>;
    public readonly groupId!: pulumi.Output<number | undefined>;
    public readonly groupName!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly owner!: pulumi.Output<string | undefined>;
    public readonly sharable!: pulumi.Output<boolean | undefined>;
    public readonly template!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly userPermission!: pulumi.Output<string>;
    public readonly widgetTokens!: pulumi.Output<outputs.DashboardWidgetToken[] | undefined>;
    public readonly widgetsConfig!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["groupFullPath"] = state ? state.groupFullPath : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["sharable"] = state ? state.sharable : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["userPermission"] = state ? state.userPermission : undefined;
            resourceInputs["widgetTokens"] = state ? state.widgetTokens : undefined;
            resourceInputs["widgetsConfig"] = state ? state.widgetsConfig : undefined;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["sharable"] = args ? args.sharable : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["widgetTokens"] = args ? args.widgetTokens : undefined;
            resourceInputs["widgetsConfig"] = args ? args.widgetsConfig : undefined;
            resourceInputs["fullName"] = undefined /*out*/;
            resourceInputs["groupFullPath"] = undefined /*out*/;
            resourceInputs["userPermission"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dashboard.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    description?: pulumi.Input<string>;
    fullName?: pulumi.Input<string>;
    groupFullPath?: pulumi.Input<string>;
    groupId?: pulumi.Input<number>;
    groupName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    sharable?: pulumi.Input<boolean>;
    template?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    userPermission?: pulumi.Input<string>;
    widgetTokens?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToken>[]>;
    widgetsConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    description?: pulumi.Input<string>;
    groupId?: pulumi.Input<number>;
    groupName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    sharable?: pulumi.Input<boolean>;
    template?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    widgetTokens?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToken>[]>;
    widgetsConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
