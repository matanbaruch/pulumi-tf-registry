// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatasource(args?: GetDatasourceArgs, opts?: pulumi.InvokeOptions): Promise<GetDatasourceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("logicmonitor:index/getDatasource:getDatasource", {
        "appliesTo": args.appliesTo,
        "auditVersion": args.auditVersion,
        "autoDiscoveryConfigs": args.autoDiscoveryConfigs,
        "checksum": args.checksum,
        "collectInterval": args.collectInterval,
        "collectMethod": args.collectMethod,
        "collectorAttributes": args.collectorAttributes,
        "dataPoints": args.dataPoints,
        "description": args.description,
        "displayName": args.displayName,
        "enableAutoDiscovery": args.enableAutoDiscovery,
        "enableEriDiscovery": args.enableEriDiscovery,
        "eriDiscoveryConfigs": args.eriDiscoveryConfigs,
        "eriDiscoveryInterval": args.eriDiscoveryInterval,
        "filter": args.filter,
        "group": args.group,
        "hasMultiInstances": args.hasMultiInstances,
        "id": args.id,
        "lineageId": args.lineageId,
        "name": args.name,
        "payloadVersion": args.payloadVersion,
        "tags": args.tags,
        "technology": args.technology,
        "useWildValueAsUuid": args.useWildValueAsUuid,
        "version": args.version,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatasource.
 */
export interface GetDatasourceArgs {
    appliesTo?: string;
    auditVersion?: number;
    autoDiscoveryConfigs?: inputs.GetDatasourceAutoDiscoveryConfig[];
    checksum?: string;
    collectInterval?: number;
    collectMethod?: string;
    collectorAttributes?: inputs.GetDatasourceCollectorAttribute[];
    dataPoints?: inputs.GetDatasourceDataPoint[];
    description?: string;
    displayName?: string;
    enableAutoDiscovery?: boolean;
    enableEriDiscovery?: boolean;
    eriDiscoveryConfigs?: inputs.GetDatasourceEriDiscoveryConfig[];
    eriDiscoveryInterval?: number;
    filter?: string;
    group?: string;
    hasMultiInstances?: boolean;
    id?: number;
    lineageId?: string;
    name?: string;
    payloadVersion?: number;
    tags?: string;
    technology?: string;
    useWildValueAsUuid?: boolean;
    version?: number;
}

/**
 * A collection of values returned by getDatasource.
 */
export interface GetDatasourceResult {
    readonly appliesTo?: string;
    readonly auditVersion?: number;
    readonly autoDiscoveryConfigs?: outputs.GetDatasourceAutoDiscoveryConfig[];
    readonly checksum?: string;
    readonly collectInterval?: number;
    readonly collectMethod?: string;
    readonly collectorAttributes?: outputs.GetDatasourceCollectorAttribute[];
    readonly dataPoints?: outputs.GetDatasourceDataPoint[];
    readonly description?: string;
    readonly displayName?: string;
    readonly enableAutoDiscovery?: boolean;
    readonly enableEriDiscovery?: boolean;
    readonly eriDiscoveryConfigs?: outputs.GetDatasourceEriDiscoveryConfig[];
    readonly eriDiscoveryInterval?: number;
    readonly filter?: string;
    readonly group?: string;
    readonly hasMultiInstances?: boolean;
    readonly id: number;
    readonly lineageId?: string;
    readonly name?: string;
    readonly payloadVersion?: number;
    readonly tags?: string;
    readonly technology?: string;
    readonly useWildValueAsUuid?: boolean;
    readonly version?: number;
}
export function getDatasourceOutput(args?: GetDatasourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatasourceResult> {
    return pulumi.output(args).apply((a: any) => getDatasource(a, opts))
}

/**
 * A collection of arguments for invoking getDatasource.
 */
export interface GetDatasourceOutputArgs {
    appliesTo?: pulumi.Input<string>;
    auditVersion?: pulumi.Input<number>;
    autoDiscoveryConfigs?: pulumi.Input<pulumi.Input<inputs.GetDatasourceAutoDiscoveryConfigArgs>[]>;
    checksum?: pulumi.Input<string>;
    collectInterval?: pulumi.Input<number>;
    collectMethod?: pulumi.Input<string>;
    collectorAttributes?: pulumi.Input<pulumi.Input<inputs.GetDatasourceCollectorAttributeArgs>[]>;
    dataPoints?: pulumi.Input<pulumi.Input<inputs.GetDatasourceDataPointArgs>[]>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enableAutoDiscovery?: pulumi.Input<boolean>;
    enableEriDiscovery?: pulumi.Input<boolean>;
    eriDiscoveryConfigs?: pulumi.Input<pulumi.Input<inputs.GetDatasourceEriDiscoveryConfigArgs>[]>;
    eriDiscoveryInterval?: pulumi.Input<number>;
    filter?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    hasMultiInstances?: pulumi.Input<boolean>;
    id?: pulumi.Input<number>;
    lineageId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    payloadVersion?: pulumi.Input<number>;
    tags?: pulumi.Input<string>;
    technology?: pulumi.Input<string>;
    useWildValueAsUuid?: pulumi.Input<boolean>;
    version?: pulumi.Input<number>;
}
