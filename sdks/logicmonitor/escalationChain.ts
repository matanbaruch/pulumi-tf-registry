// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EscalationChain extends pulumi.CustomResource {
    /**
     * Get an existing EscalationChain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EscalationChainState, opts?: pulumi.CustomResourceOptions): EscalationChain {
        return new EscalationChain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logicmonitor:index/escalationChain:EscalationChain';

    /**
     * Returns true if the given object is an instance of EscalationChain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EscalationChain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EscalationChain.__pulumiType;
    }

    public readonly ccDestinations!: pulumi.Output<outputs.EscalationChainCcDestination[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destinations!: pulumi.Output<outputs.EscalationChainDestination[]>;
    public readonly enableThrottling!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly inAlerting!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly throttlingAlerts!: pulumi.Output<number | undefined>;
    public readonly throttlingPeriod!: pulumi.Output<number | undefined>;

    /**
     * Create a EscalationChain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EscalationChainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EscalationChainArgs | EscalationChainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EscalationChainState | undefined;
            resourceInputs["ccDestinations"] = state ? state.ccDestinations : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinations"] = state ? state.destinations : undefined;
            resourceInputs["enableThrottling"] = state ? state.enableThrottling : undefined;
            resourceInputs["inAlerting"] = state ? state.inAlerting : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["throttlingAlerts"] = state ? state.throttlingAlerts : undefined;
            resourceInputs["throttlingPeriod"] = state ? state.throttlingPeriod : undefined;
        } else {
            const args = argsOrState as EscalationChainArgs | undefined;
            if ((!args || args.destinations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinations'");
            }
            resourceInputs["ccDestinations"] = args ? args.ccDestinations : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinations"] = args ? args.destinations : undefined;
            resourceInputs["enableThrottling"] = args ? args.enableThrottling : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["throttlingAlerts"] = args ? args.throttlingAlerts : undefined;
            resourceInputs["throttlingPeriod"] = args ? args.throttlingPeriod : undefined;
            resourceInputs["inAlerting"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EscalationChain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EscalationChain resources.
 */
export interface EscalationChainState {
    ccDestinations?: pulumi.Input<pulumi.Input<inputs.EscalationChainCcDestination>[]>;
    description?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.EscalationChainDestination>[]>;
    enableThrottling?: pulumi.Input<boolean>;
    inAlerting?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    throttlingAlerts?: pulumi.Input<number>;
    throttlingPeriod?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a EscalationChain resource.
 */
export interface EscalationChainArgs {
    ccDestinations?: pulumi.Input<pulumi.Input<inputs.EscalationChainCcDestination>[]>;
    description?: pulumi.Input<string>;
    destinations: pulumi.Input<pulumi.Input<inputs.EscalationChainDestination>[]>;
    enableThrottling?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    throttlingAlerts?: pulumi.Input<number>;
    throttlingPeriod?: pulumi.Input<number>;
}
