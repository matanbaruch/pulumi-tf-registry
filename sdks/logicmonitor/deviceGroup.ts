// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DeviceGroup extends pulumi.CustomResource {
    /**
     * Get an existing DeviceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceGroupState, opts?: pulumi.CustomResourceOptions): DeviceGroup {
        return new DeviceGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logicmonitor:index/deviceGroup:DeviceGroup';

    /**
     * Returns true if the given object is an instance of DeviceGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceGroup.__pulumiType;
    }

    public readonly appliesTo!: pulumi.Output<string | undefined>;
    public /*out*/ readonly awsRegionsInfo!: pulumi.Output<string>;
    public /*out*/ readonly awsTestResultCode!: pulumi.Output<number>;
    public /*out*/ readonly awsTestResults!: pulumi.Output<outputs.DeviceGroupAwsTestResult[]>;
    public /*out*/ readonly azureRegionsInfo!: pulumi.Output<string>;
    public /*out*/ readonly azureTestResultCode!: pulumi.Output<number>;
    public /*out*/ readonly azureTestResults!: pulumi.Output<outputs.DeviceGroupAzureTestResult[]>;
    public /*out*/ readonly createdOn!: pulumi.Output<number>;
    public readonly customProperties!: pulumi.Output<outputs.DeviceGroupCustomProperty[] | undefined>;
    public /*out*/ readonly defaultCollectorDescription!: pulumi.Output<string>;
    public readonly defaultCollectorId!: pulumi.Output<number | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disableAlerting!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly effectiveAlertEnabled!: pulumi.Output<boolean>;
    public readonly enableNetflow!: pulumi.Output<boolean | undefined>;
    public readonly extras!: pulumi.Output<outputs.DeviceGroupExtra[] | undefined>;
    public /*out*/ readonly fullPath!: pulumi.Output<string>;
    public /*out*/ readonly gcpRegionsInfo!: pulumi.Output<string>;
    public /*out*/ readonly gcpTestResultCode!: pulumi.Output<number>;
    public /*out*/ readonly gcpTestResults!: pulumi.Output<outputs.DeviceGroupGcpTestResult[]>;
    public /*out*/ readonly groupStatus!: pulumi.Output<string>;
    public readonly groupType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly hasNetflowEnabledDevices!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly numOfAWSDevices!: pulumi.Output<number>;
    public /*out*/ readonly numOfAzureDevices!: pulumi.Output<number>;
    public /*out*/ readonly numOfDirectDevices!: pulumi.Output<number>;
    public /*out*/ readonly numOfDirectSubGroups!: pulumi.Output<number>;
    public /*out*/ readonly numOfGcpDevices!: pulumi.Output<number>;
    public /*out*/ readonly numOfHosts!: pulumi.Output<number>;
    public readonly parentId!: pulumi.Output<number | undefined>;
    public /*out*/ readonly subGroups!: pulumi.Output<outputs.DeviceGroupSubGroup[]>;
    public /*out*/ readonly userPermission!: pulumi.Output<string>;

    /**
     * Create a DeviceGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DeviceGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceGroupArgs | DeviceGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceGroupState | undefined;
            resourceInputs["appliesTo"] = state ? state.appliesTo : undefined;
            resourceInputs["awsRegionsInfo"] = state ? state.awsRegionsInfo : undefined;
            resourceInputs["awsTestResultCode"] = state ? state.awsTestResultCode : undefined;
            resourceInputs["awsTestResults"] = state ? state.awsTestResults : undefined;
            resourceInputs["azureRegionsInfo"] = state ? state.azureRegionsInfo : undefined;
            resourceInputs["azureTestResultCode"] = state ? state.azureTestResultCode : undefined;
            resourceInputs["azureTestResults"] = state ? state.azureTestResults : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["customProperties"] = state ? state.customProperties : undefined;
            resourceInputs["defaultCollectorDescription"] = state ? state.defaultCollectorDescription : undefined;
            resourceInputs["defaultCollectorId"] = state ? state.defaultCollectorId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableAlerting"] = state ? state.disableAlerting : undefined;
            resourceInputs["effectiveAlertEnabled"] = state ? state.effectiveAlertEnabled : undefined;
            resourceInputs["enableNetflow"] = state ? state.enableNetflow : undefined;
            resourceInputs["extras"] = state ? state.extras : undefined;
            resourceInputs["fullPath"] = state ? state.fullPath : undefined;
            resourceInputs["gcpRegionsInfo"] = state ? state.gcpRegionsInfo : undefined;
            resourceInputs["gcpTestResultCode"] = state ? state.gcpTestResultCode : undefined;
            resourceInputs["gcpTestResults"] = state ? state.gcpTestResults : undefined;
            resourceInputs["groupStatus"] = state ? state.groupStatus : undefined;
            resourceInputs["groupType"] = state ? state.groupType : undefined;
            resourceInputs["hasNetflowEnabledDevices"] = state ? state.hasNetflowEnabledDevices : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numOfAWSDevices"] = state ? state.numOfAWSDevices : undefined;
            resourceInputs["numOfAzureDevices"] = state ? state.numOfAzureDevices : undefined;
            resourceInputs["numOfDirectDevices"] = state ? state.numOfDirectDevices : undefined;
            resourceInputs["numOfDirectSubGroups"] = state ? state.numOfDirectSubGroups : undefined;
            resourceInputs["numOfGcpDevices"] = state ? state.numOfGcpDevices : undefined;
            resourceInputs["numOfHosts"] = state ? state.numOfHosts : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["subGroups"] = state ? state.subGroups : undefined;
            resourceInputs["userPermission"] = state ? state.userPermission : undefined;
        } else {
            const args = argsOrState as DeviceGroupArgs | undefined;
            resourceInputs["appliesTo"] = args ? args.appliesTo : undefined;
            resourceInputs["customProperties"] = args ? args.customProperties : undefined;
            resourceInputs["defaultCollectorId"] = args ? args.defaultCollectorId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableAlerting"] = args ? args.disableAlerting : undefined;
            resourceInputs["enableNetflow"] = args ? args.enableNetflow : undefined;
            resourceInputs["extras"] = args ? args.extras : undefined;
            resourceInputs["groupType"] = args ? args.groupType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["awsRegionsInfo"] = undefined /*out*/;
            resourceInputs["awsTestResultCode"] = undefined /*out*/;
            resourceInputs["awsTestResults"] = undefined /*out*/;
            resourceInputs["azureRegionsInfo"] = undefined /*out*/;
            resourceInputs["azureTestResultCode"] = undefined /*out*/;
            resourceInputs["azureTestResults"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["defaultCollectorDescription"] = undefined /*out*/;
            resourceInputs["effectiveAlertEnabled"] = undefined /*out*/;
            resourceInputs["fullPath"] = undefined /*out*/;
            resourceInputs["gcpRegionsInfo"] = undefined /*out*/;
            resourceInputs["gcpTestResultCode"] = undefined /*out*/;
            resourceInputs["gcpTestResults"] = undefined /*out*/;
            resourceInputs["groupStatus"] = undefined /*out*/;
            resourceInputs["hasNetflowEnabledDevices"] = undefined /*out*/;
            resourceInputs["numOfAWSDevices"] = undefined /*out*/;
            resourceInputs["numOfAzureDevices"] = undefined /*out*/;
            resourceInputs["numOfDirectDevices"] = undefined /*out*/;
            resourceInputs["numOfDirectSubGroups"] = undefined /*out*/;
            resourceInputs["numOfGcpDevices"] = undefined /*out*/;
            resourceInputs["numOfHosts"] = undefined /*out*/;
            resourceInputs["subGroups"] = undefined /*out*/;
            resourceInputs["userPermission"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DeviceGroup resources.
 */
export interface DeviceGroupState {
    appliesTo?: pulumi.Input<string>;
    awsRegionsInfo?: pulumi.Input<string>;
    awsTestResultCode?: pulumi.Input<number>;
    awsTestResults?: pulumi.Input<pulumi.Input<inputs.DeviceGroupAwsTestResult>[]>;
    azureRegionsInfo?: pulumi.Input<string>;
    azureTestResultCode?: pulumi.Input<number>;
    azureTestResults?: pulumi.Input<pulumi.Input<inputs.DeviceGroupAzureTestResult>[]>;
    createdOn?: pulumi.Input<number>;
    customProperties?: pulumi.Input<pulumi.Input<inputs.DeviceGroupCustomProperty>[]>;
    defaultCollectorDescription?: pulumi.Input<string>;
    defaultCollectorId?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    disableAlerting?: pulumi.Input<boolean>;
    effectiveAlertEnabled?: pulumi.Input<boolean>;
    enableNetflow?: pulumi.Input<boolean>;
    extras?: pulumi.Input<pulumi.Input<inputs.DeviceGroupExtra>[]>;
    fullPath?: pulumi.Input<string>;
    gcpRegionsInfo?: pulumi.Input<string>;
    gcpTestResultCode?: pulumi.Input<number>;
    gcpTestResults?: pulumi.Input<pulumi.Input<inputs.DeviceGroupGcpTestResult>[]>;
    groupStatus?: pulumi.Input<string>;
    groupType?: pulumi.Input<string>;
    hasNetflowEnabledDevices?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    numOfAWSDevices?: pulumi.Input<number>;
    numOfAzureDevices?: pulumi.Input<number>;
    numOfDirectDevices?: pulumi.Input<number>;
    numOfDirectSubGroups?: pulumi.Input<number>;
    numOfGcpDevices?: pulumi.Input<number>;
    numOfHosts?: pulumi.Input<number>;
    parentId?: pulumi.Input<number>;
    subGroups?: pulumi.Input<pulumi.Input<inputs.DeviceGroupSubGroup>[]>;
    userPermission?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeviceGroup resource.
 */
export interface DeviceGroupArgs {
    appliesTo?: pulumi.Input<string>;
    customProperties?: pulumi.Input<pulumi.Input<inputs.DeviceGroupCustomProperty>[]>;
    defaultCollectorId?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    disableAlerting?: pulumi.Input<boolean>;
    enableNetflow?: pulumi.Input<boolean>;
    extras?: pulumi.Input<pulumi.Input<inputs.DeviceGroupExtra>[]>;
    groupType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parentId?: pulumi.Input<number>;
}
