// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDashboardGroup(args?: GetDashboardGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetDashboardGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("logicmonitor:index/getDashboardGroup:getDashboardGroup", {
        "dashboards": args.dashboards,
        "description": args.description,
        "filter": args.filter,
        "fullPath": args.fullPath,
        "id": args.id,
        "name": args.name,
        "numOfDashboards": args.numOfDashboards,
        "numOfDirectDashboards": args.numOfDirectDashboards,
        "numOfDirectSubGroups": args.numOfDirectSubGroups,
        "parentId": args.parentId,
        "template": args.template,
        "userPermission": args.userPermission,
        "widgetTokens": args.widgetTokens,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDashboardGroup.
 */
export interface GetDashboardGroupArgs {
    dashboards?: inputs.GetDashboardGroupDashboard[];
    description?: string;
    filter?: string;
    fullPath?: string;
    id?: number;
    name?: string;
    numOfDashboards?: number;
    numOfDirectDashboards?: number;
    numOfDirectSubGroups?: number;
    parentId?: number;
    template?: {[key: string]: string};
    userPermission?: string;
    widgetTokens?: inputs.GetDashboardGroupWidgetToken[];
}

/**
 * A collection of values returned by getDashboardGroup.
 */
export interface GetDashboardGroupResult {
    readonly dashboards?: outputs.GetDashboardGroupDashboard[];
    readonly description?: string;
    readonly filter?: string;
    readonly fullPath?: string;
    readonly id: number;
    readonly name?: string;
    readonly numOfDashboards?: number;
    readonly numOfDirectDashboards?: number;
    readonly numOfDirectSubGroups?: number;
    readonly parentId?: number;
    readonly template?: {[key: string]: string};
    readonly userPermission?: string;
    readonly widgetTokens?: outputs.GetDashboardGroupWidgetToken[];
}
export function getDashboardGroupOutput(args?: GetDashboardGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDashboardGroupResult> {
    return pulumi.output(args).apply((a: any) => getDashboardGroup(a, opts))
}

/**
 * A collection of arguments for invoking getDashboardGroup.
 */
export interface GetDashboardGroupOutputArgs {
    dashboards?: pulumi.Input<pulumi.Input<inputs.GetDashboardGroupDashboardArgs>[]>;
    description?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    fullPath?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numOfDashboards?: pulumi.Input<number>;
    numOfDirectDashboards?: pulumi.Input<number>;
    numOfDirectSubGroups?: pulumi.Input<number>;
    parentId?: pulumi.Input<number>;
    template?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    userPermission?: pulumi.Input<string>;
    widgetTokens?: pulumi.Input<pulumi.Input<inputs.GetDashboardGroupWidgetTokenArgs>[]>;
}
