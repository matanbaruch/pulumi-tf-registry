// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCollectorGroup(args?: GetCollectorGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetCollectorGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("logicmonitor:index/getCollectorGroup:getCollectorGroup", {
        "autoBalance": args.autoBalance,
        "autoBalanceInstanceCountThreshold": args.autoBalanceInstanceCountThreshold,
        "autoBalanceStrategy": args.autoBalanceStrategy,
        "createOn": args.createOn,
        "customProperties": args.customProperties,
        "description": args.description,
        "filter": args.filter,
        "id": args.id,
        "name": args.name,
        "numOfCollectors": args.numOfCollectors,
        "userPermission": args.userPermission,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCollectorGroup.
 */
export interface GetCollectorGroupArgs {
    autoBalance?: boolean;
    autoBalanceInstanceCountThreshold?: number;
    autoBalanceStrategy?: string;
    createOn?: number;
    customProperties?: inputs.GetCollectorGroupCustomProperty[];
    description?: string;
    filter?: string;
    id?: number;
    name?: string;
    numOfCollectors?: number;
    userPermission?: string;
}

/**
 * A collection of values returned by getCollectorGroup.
 */
export interface GetCollectorGroupResult {
    readonly autoBalance?: boolean;
    readonly autoBalanceInstanceCountThreshold?: number;
    readonly autoBalanceStrategy?: string;
    readonly createOn?: number;
    readonly customProperties?: outputs.GetCollectorGroupCustomProperty[];
    readonly description?: string;
    readonly filter?: string;
    readonly id: number;
    readonly name?: string;
    readonly numOfCollectors?: number;
    readonly userPermission?: string;
}
export function getCollectorGroupOutput(args?: GetCollectorGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCollectorGroupResult> {
    return pulumi.output(args).apply((a: any) => getCollectorGroup(a, opts))
}

/**
 * A collection of arguments for invoking getCollectorGroup.
 */
export interface GetCollectorGroupOutputArgs {
    autoBalance?: pulumi.Input<boolean>;
    autoBalanceInstanceCountThreshold?: pulumi.Input<number>;
    autoBalanceStrategy?: pulumi.Input<string>;
    createOn?: pulumi.Input<number>;
    customProperties?: pulumi.Input<pulumi.Input<inputs.GetCollectorGroupCustomPropertyArgs>[]>;
    description?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numOfCollectors?: pulumi.Input<number>;
    userPermission?: pulumi.Input<string>;
}
