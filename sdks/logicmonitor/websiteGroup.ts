// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WebsiteGroup extends pulumi.CustomResource {
    /**
     * Get an existing WebsiteGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebsiteGroupState, opts?: pulumi.CustomResourceOptions): WebsiteGroup {
        return new WebsiteGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logicmonitor:index/websiteGroup:WebsiteGroup';

    /**
     * Returns true if the given object is an instance of WebsiteGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebsiteGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebsiteGroup.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disableAlerting!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly fullPath!: pulumi.Output<string>;
    public /*out*/ readonly hasWebsitesDisabled!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly numOfDirectSubGroups!: pulumi.Output<number>;
    public /*out*/ readonly numOfDirectWebsites!: pulumi.Output<number>;
    public /*out*/ readonly numOfWebsites!: pulumi.Output<number>;
    public readonly parentId!: pulumi.Output<number | undefined>;
    public readonly properties!: pulumi.Output<outputs.WebsiteGroupProperty[] | undefined>;
    public readonly stopMonitoring!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly userPermission!: pulumi.Output<string>;

    /**
     * Create a WebsiteGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WebsiteGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebsiteGroupArgs | WebsiteGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebsiteGroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableAlerting"] = state ? state.disableAlerting : undefined;
            resourceInputs["fullPath"] = state ? state.fullPath : undefined;
            resourceInputs["hasWebsitesDisabled"] = state ? state.hasWebsitesDisabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numOfDirectSubGroups"] = state ? state.numOfDirectSubGroups : undefined;
            resourceInputs["numOfDirectWebsites"] = state ? state.numOfDirectWebsites : undefined;
            resourceInputs["numOfWebsites"] = state ? state.numOfWebsites : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["stopMonitoring"] = state ? state.stopMonitoring : undefined;
            resourceInputs["userPermission"] = state ? state.userPermission : undefined;
        } else {
            const args = argsOrState as WebsiteGroupArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableAlerting"] = args ? args.disableAlerting : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["stopMonitoring"] = args ? args.stopMonitoring : undefined;
            resourceInputs["fullPath"] = undefined /*out*/;
            resourceInputs["hasWebsitesDisabled"] = undefined /*out*/;
            resourceInputs["numOfDirectSubGroups"] = undefined /*out*/;
            resourceInputs["numOfDirectWebsites"] = undefined /*out*/;
            resourceInputs["numOfWebsites"] = undefined /*out*/;
            resourceInputs["userPermission"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebsiteGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WebsiteGroup resources.
 */
export interface WebsiteGroupState {
    description?: pulumi.Input<string>;
    disableAlerting?: pulumi.Input<boolean>;
    fullPath?: pulumi.Input<string>;
    hasWebsitesDisabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    numOfDirectSubGroups?: pulumi.Input<number>;
    numOfDirectWebsites?: pulumi.Input<number>;
    numOfWebsites?: pulumi.Input<number>;
    parentId?: pulumi.Input<number>;
    properties?: pulumi.Input<pulumi.Input<inputs.WebsiteGroupProperty>[]>;
    stopMonitoring?: pulumi.Input<boolean>;
    userPermission?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebsiteGroup resource.
 */
export interface WebsiteGroupArgs {
    description?: pulumi.Input<string>;
    disableAlerting?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    parentId?: pulumi.Input<number>;
    properties?: pulumi.Input<pulumi.Input<inputs.WebsiteGroupProperty>[]>;
    stopMonitoring?: pulumi.Input<boolean>;
}
