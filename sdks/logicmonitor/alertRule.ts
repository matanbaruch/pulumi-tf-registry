// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AlertRule extends pulumi.CustomResource {
    /**
     * Get an existing AlertRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertRuleState, opts?: pulumi.CustomResourceOptions): AlertRule {
        return new AlertRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logicmonitor:index/alertRule:AlertRule';

    /**
     * Returns true if the given object is an instance of AlertRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertRule.__pulumiType;
    }

    public readonly datapoint!: pulumi.Output<string>;
    public readonly datasource!: pulumi.Output<string>;
    public readonly deviceGroups!: pulumi.Output<string[]>;
    public readonly devices!: pulumi.Output<string[]>;
    public /*out*/ readonly escalatingChain!: pulumi.Output<{[key: string]: string}>;
    public readonly escalatingChainId!: pulumi.Output<number>;
    public readonly escalationInterval!: pulumi.Output<number | undefined>;
    public readonly instance!: pulumi.Output<string>;
    public readonly levelStr!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number>;
    public readonly suppressAlertAckSdt!: pulumi.Output<boolean | undefined>;
    public readonly suppressAlertClear!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AlertRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertRuleArgs | AlertRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertRuleState | undefined;
            resourceInputs["datapoint"] = state ? state.datapoint : undefined;
            resourceInputs["datasource"] = state ? state.datasource : undefined;
            resourceInputs["deviceGroups"] = state ? state.deviceGroups : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["escalatingChain"] = state ? state.escalatingChain : undefined;
            resourceInputs["escalatingChainId"] = state ? state.escalatingChainId : undefined;
            resourceInputs["escalationInterval"] = state ? state.escalationInterval : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["levelStr"] = state ? state.levelStr : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["suppressAlertAckSdt"] = state ? state.suppressAlertAckSdt : undefined;
            resourceInputs["suppressAlertClear"] = state ? state.suppressAlertClear : undefined;
        } else {
            const args = argsOrState as AlertRuleArgs | undefined;
            if ((!args || args.datapoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datapoint'");
            }
            if ((!args || args.datasource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasource'");
            }
            if ((!args || args.deviceGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceGroups'");
            }
            if ((!args || args.devices === undefined) && !opts.urn) {
                throw new Error("Missing required property 'devices'");
            }
            if ((!args || args.escalatingChainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'escalatingChainId'");
            }
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["datapoint"] = args ? args.datapoint : undefined;
            resourceInputs["datasource"] = args ? args.datasource : undefined;
            resourceInputs["deviceGroups"] = args ? args.deviceGroups : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["escalatingChainId"] = args ? args.escalatingChainId : undefined;
            resourceInputs["escalationInterval"] = args ? args.escalationInterval : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["levelStr"] = args ? args.levelStr : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["suppressAlertAckSdt"] = args ? args.suppressAlertAckSdt : undefined;
            resourceInputs["suppressAlertClear"] = args ? args.suppressAlertClear : undefined;
            resourceInputs["escalatingChain"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlertRule resources.
 */
export interface AlertRuleState {
    datapoint?: pulumi.Input<string>;
    datasource?: pulumi.Input<string>;
    deviceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    devices?: pulumi.Input<pulumi.Input<string>[]>;
    escalatingChain?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    escalatingChainId?: pulumi.Input<number>;
    escalationInterval?: pulumi.Input<number>;
    instance?: pulumi.Input<string>;
    levelStr?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    suppressAlertAckSdt?: pulumi.Input<boolean>;
    suppressAlertClear?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AlertRule resource.
 */
export interface AlertRuleArgs {
    datapoint: pulumi.Input<string>;
    datasource: pulumi.Input<string>;
    deviceGroups: pulumi.Input<pulumi.Input<string>[]>;
    devices: pulumi.Input<pulumi.Input<string>[]>;
    escalatingChainId: pulumi.Input<number>;
    escalationInterval?: pulumi.Input<number>;
    instance: pulumi.Input<string>;
    levelStr?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    priority: pulumi.Input<number>;
    suppressAlertAckSdt?: pulumi.Input<boolean>;
    suppressAlertClear?: pulumi.Input<boolean>;
}
