// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDeviceGroup(args?: GetDeviceGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetDeviceGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("logicmonitor:index/getDeviceGroup:getDeviceGroup", {
        "appliesTo": args.appliesTo,
        "awsRegionsInfo": args.awsRegionsInfo,
        "awsTestResultCode": args.awsTestResultCode,
        "awsTestResults": args.awsTestResults,
        "azureRegionsInfo": args.azureRegionsInfo,
        "azureTestResultCode": args.azureTestResultCode,
        "azureTestResults": args.azureTestResults,
        "createdOn": args.createdOn,
        "customProperties": args.customProperties,
        "defaultCollectorDescription": args.defaultCollectorDescription,
        "defaultCollectorId": args.defaultCollectorId,
        "description": args.description,
        "disableAlerting": args.disableAlerting,
        "effectiveAlertEnabled": args.effectiveAlertEnabled,
        "enableNetflow": args.enableNetflow,
        "extras": args.extras,
        "filter": args.filter,
        "fullPath": args.fullPath,
        "gcpRegionsInfo": args.gcpRegionsInfo,
        "gcpTestResultCode": args.gcpTestResultCode,
        "gcpTestResults": args.gcpTestResults,
        "groupStatus": args.groupStatus,
        "groupType": args.groupType,
        "hasNetflowEnabledDevices": args.hasNetflowEnabledDevices,
        "id": args.id,
        "name": args.name,
        "numOfAWSDevices": args.numOfAWSDevices,
        "numOfAzureDevices": args.numOfAzureDevices,
        "numOfDirectDevices": args.numOfDirectDevices,
        "numOfDirectSubGroups": args.numOfDirectSubGroups,
        "numOfGcpDevices": args.numOfGcpDevices,
        "numOfHosts": args.numOfHosts,
        "parentId": args.parentId,
        "subGroups": args.subGroups,
        "userPermission": args.userPermission,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDeviceGroup.
 */
export interface GetDeviceGroupArgs {
    appliesTo?: string;
    awsRegionsInfo?: string;
    awsTestResultCode?: number;
    awsTestResults?: inputs.GetDeviceGroupAwsTestResult[];
    azureRegionsInfo?: string;
    azureTestResultCode?: number;
    azureTestResults?: inputs.GetDeviceGroupAzureTestResult[];
    createdOn?: number;
    customProperties?: inputs.GetDeviceGroupCustomProperty[];
    defaultCollectorDescription?: string;
    defaultCollectorId?: number;
    description?: string;
    disableAlerting?: boolean;
    effectiveAlertEnabled?: boolean;
    enableNetflow?: boolean;
    extras?: inputs.GetDeviceGroupExtra[];
    filter?: string;
    fullPath?: string;
    gcpRegionsInfo?: string;
    gcpTestResultCode?: number;
    gcpTestResults?: inputs.GetDeviceGroupGcpTestResult[];
    groupStatus?: string;
    groupType?: string;
    hasNetflowEnabledDevices?: boolean;
    id?: number;
    name?: string;
    numOfAWSDevices?: number;
    numOfAzureDevices?: number;
    numOfDirectDevices?: number;
    numOfDirectSubGroups?: number;
    numOfGcpDevices?: number;
    numOfHosts?: number;
    parentId?: number;
    subGroups?: inputs.GetDeviceGroupSubGroup[];
    userPermission?: string;
}

/**
 * A collection of values returned by getDeviceGroup.
 */
export interface GetDeviceGroupResult {
    readonly appliesTo?: string;
    readonly awsRegionsInfo?: string;
    readonly awsTestResultCode?: number;
    readonly awsTestResults?: outputs.GetDeviceGroupAwsTestResult[];
    readonly azureRegionsInfo?: string;
    readonly azureTestResultCode?: number;
    readonly azureTestResults?: outputs.GetDeviceGroupAzureTestResult[];
    readonly createdOn?: number;
    readonly customProperties?: outputs.GetDeviceGroupCustomProperty[];
    readonly defaultCollectorDescription?: string;
    readonly defaultCollectorId?: number;
    readonly description?: string;
    readonly disableAlerting?: boolean;
    readonly effectiveAlertEnabled?: boolean;
    readonly enableNetflow?: boolean;
    readonly extras?: outputs.GetDeviceGroupExtra[];
    readonly filter?: string;
    readonly fullPath?: string;
    readonly gcpRegionsInfo?: string;
    readonly gcpTestResultCode?: number;
    readonly gcpTestResults?: outputs.GetDeviceGroupGcpTestResult[];
    readonly groupStatus?: string;
    readonly groupType?: string;
    readonly hasNetflowEnabledDevices?: boolean;
    readonly id: number;
    readonly name?: string;
    readonly numOfAWSDevices?: number;
    readonly numOfAzureDevices?: number;
    readonly numOfDirectDevices?: number;
    readonly numOfDirectSubGroups?: number;
    readonly numOfGcpDevices?: number;
    readonly numOfHosts?: number;
    readonly parentId?: number;
    readonly subGroups?: outputs.GetDeviceGroupSubGroup[];
    readonly userPermission?: string;
}
export function getDeviceGroupOutput(args?: GetDeviceGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDeviceGroupResult> {
    return pulumi.output(args).apply((a: any) => getDeviceGroup(a, opts))
}

/**
 * A collection of arguments for invoking getDeviceGroup.
 */
export interface GetDeviceGroupOutputArgs {
    appliesTo?: pulumi.Input<string>;
    awsRegionsInfo?: pulumi.Input<string>;
    awsTestResultCode?: pulumi.Input<number>;
    awsTestResults?: pulumi.Input<pulumi.Input<inputs.GetDeviceGroupAwsTestResultArgs>[]>;
    azureRegionsInfo?: pulumi.Input<string>;
    azureTestResultCode?: pulumi.Input<number>;
    azureTestResults?: pulumi.Input<pulumi.Input<inputs.GetDeviceGroupAzureTestResultArgs>[]>;
    createdOn?: pulumi.Input<number>;
    customProperties?: pulumi.Input<pulumi.Input<inputs.GetDeviceGroupCustomPropertyArgs>[]>;
    defaultCollectorDescription?: pulumi.Input<string>;
    defaultCollectorId?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    disableAlerting?: pulumi.Input<boolean>;
    effectiveAlertEnabled?: pulumi.Input<boolean>;
    enableNetflow?: pulumi.Input<boolean>;
    extras?: pulumi.Input<pulumi.Input<inputs.GetDeviceGroupExtraArgs>[]>;
    filter?: pulumi.Input<string>;
    fullPath?: pulumi.Input<string>;
    gcpRegionsInfo?: pulumi.Input<string>;
    gcpTestResultCode?: pulumi.Input<number>;
    gcpTestResults?: pulumi.Input<pulumi.Input<inputs.GetDeviceGroupGcpTestResultArgs>[]>;
    groupStatus?: pulumi.Input<string>;
    groupType?: pulumi.Input<string>;
    hasNetflowEnabledDevices?: pulumi.Input<boolean>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numOfAWSDevices?: pulumi.Input<number>;
    numOfAzureDevices?: pulumi.Input<number>;
    numOfDirectDevices?: pulumi.Input<number>;
    numOfDirectSubGroups?: pulumi.Input<number>;
    numOfGcpDevices?: pulumi.Input<number>;
    numOfHosts?: pulumi.Input<number>;
    parentId?: pulumi.Input<number>;
    subGroups?: pulumi.Input<pulumi.Input<inputs.GetDeviceGroupSubGroupArgs>[]>;
    userPermission?: pulumi.Input<string>;
}
