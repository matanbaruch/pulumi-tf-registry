// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertRuleArgs, AlertRuleState } from "./alertRule";
export type AlertRule = import("./alertRule").AlertRule;
export const AlertRule: typeof import("./alertRule").AlertRule = null as any;
utilities.lazyLoad(exports, ["AlertRule"], () => require("./alertRule"));

export { CollectorArgs, CollectorState } from "./collector";
export type Collector = import("./collector").Collector;
export const Collector: typeof import("./collector").Collector = null as any;
utilities.lazyLoad(exports, ["Collector"], () => require("./collector"));

export { CollectorGroupArgs, CollectorGroupState } from "./collectorGroup";
export type CollectorGroup = import("./collectorGroup").CollectorGroup;
export const CollectorGroup: typeof import("./collectorGroup").CollectorGroup = null as any;
utilities.lazyLoad(exports, ["CollectorGroup"], () => require("./collectorGroup"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { DashboardGroupArgs, DashboardGroupState } from "./dashboardGroup";
export type DashboardGroup = import("./dashboardGroup").DashboardGroup;
export const DashboardGroup: typeof import("./dashboardGroup").DashboardGroup = null as any;
utilities.lazyLoad(exports, ["DashboardGroup"], () => require("./dashboardGroup"));

export { DatasourceArgs, DatasourceState } from "./datasource";
export type Datasource = import("./datasource").Datasource;
export const Datasource: typeof import("./datasource").Datasource = null as any;
utilities.lazyLoad(exports, ["Datasource"], () => require("./datasource"));

export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;
utilities.lazyLoad(exports, ["Device"], () => require("./device"));

export { DeviceGroupArgs, DeviceGroupState } from "./deviceGroup";
export type DeviceGroup = import("./deviceGroup").DeviceGroup;
export const DeviceGroup: typeof import("./deviceGroup").DeviceGroup = null as any;
utilities.lazyLoad(exports, ["DeviceGroup"], () => require("./deviceGroup"));

export { EscalationChainArgs, EscalationChainState } from "./escalationChain";
export type EscalationChain = import("./escalationChain").EscalationChain;
export const EscalationChain: typeof import("./escalationChain").EscalationChain = null as any;
utilities.lazyLoad(exports, ["EscalationChain"], () => require("./escalationChain"));

export { GetAlertRuleArgs, GetAlertRuleResult, GetAlertRuleOutputArgs } from "./getAlertRule";
export const getAlertRule: typeof import("./getAlertRule").getAlertRule = null as any;
export const getAlertRuleOutput: typeof import("./getAlertRule").getAlertRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAlertRule","getAlertRuleOutput"], () => require("./getAlertRule"));

export { GetCollectorArgs, GetCollectorResult, GetCollectorOutputArgs } from "./getCollector";
export const getCollector: typeof import("./getCollector").getCollector = null as any;
export const getCollectorOutput: typeof import("./getCollector").getCollectorOutput = null as any;
utilities.lazyLoad(exports, ["getCollector","getCollectorOutput"], () => require("./getCollector"));

export { GetCollectorGroupArgs, GetCollectorGroupResult, GetCollectorGroupOutputArgs } from "./getCollectorGroup";
export const getCollectorGroup: typeof import("./getCollectorGroup").getCollectorGroup = null as any;
export const getCollectorGroupOutput: typeof import("./getCollectorGroup").getCollectorGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCollectorGroup","getCollectorGroupOutput"], () => require("./getCollectorGroup"));

export { GetDashboardArgs, GetDashboardResult, GetDashboardOutputArgs } from "./getDashboard";
export const getDashboard: typeof import("./getDashboard").getDashboard = null as any;
export const getDashboardOutput: typeof import("./getDashboard").getDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getDashboard","getDashboardOutput"], () => require("./getDashboard"));

export { GetDashboardGroupArgs, GetDashboardGroupResult, GetDashboardGroupOutputArgs } from "./getDashboardGroup";
export const getDashboardGroup: typeof import("./getDashboardGroup").getDashboardGroup = null as any;
export const getDashboardGroupOutput: typeof import("./getDashboardGroup").getDashboardGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDashboardGroup","getDashboardGroupOutput"], () => require("./getDashboardGroup"));

export { GetDataResourceAwsExternalIdArgs, GetDataResourceAwsExternalIdResult, GetDataResourceAwsExternalIdOutputArgs } from "./getDataResourceAwsExternalId";
export const getDataResourceAwsExternalId: typeof import("./getDataResourceAwsExternalId").getDataResourceAwsExternalId = null as any;
export const getDataResourceAwsExternalIdOutput: typeof import("./getDataResourceAwsExternalId").getDataResourceAwsExternalIdOutput = null as any;
utilities.lazyLoad(exports, ["getDataResourceAwsExternalId","getDataResourceAwsExternalIdOutput"], () => require("./getDataResourceAwsExternalId"));

export { GetDatasourceArgs, GetDatasourceResult, GetDatasourceOutputArgs } from "./getDatasource";
export const getDatasource: typeof import("./getDatasource").getDatasource = null as any;
export const getDatasourceOutput: typeof import("./getDatasource").getDatasourceOutput = null as any;
utilities.lazyLoad(exports, ["getDatasource","getDatasourceOutput"], () => require("./getDatasource"));

export { GetDeviceArgs, GetDeviceResult, GetDeviceOutputArgs } from "./getDevice";
export const getDevice: typeof import("./getDevice").getDevice = null as any;
export const getDeviceOutput: typeof import("./getDevice").getDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDevice","getDeviceOutput"], () => require("./getDevice"));

export { GetDeviceGroupArgs, GetDeviceGroupResult, GetDeviceGroupOutputArgs } from "./getDeviceGroup";
export const getDeviceGroup: typeof import("./getDeviceGroup").getDeviceGroup = null as any;
export const getDeviceGroupOutput: typeof import("./getDeviceGroup").getDeviceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceGroup","getDeviceGroupOutput"], () => require("./getDeviceGroup"));

export { GetEscalationChainArgs, GetEscalationChainResult, GetEscalationChainOutputArgs } from "./getEscalationChain";
export const getEscalationChain: typeof import("./getEscalationChain").getEscalationChain = null as any;
export const getEscalationChainOutput: typeof import("./getEscalationChain").getEscalationChainOutput = null as any;
utilities.lazyLoad(exports, ["getEscalationChain","getEscalationChainOutput"], () => require("./getEscalationChain"));

export { GetWebsiteArgs, GetWebsiteResult, GetWebsiteOutputArgs } from "./getWebsite";
export const getWebsite: typeof import("./getWebsite").getWebsite = null as any;
export const getWebsiteOutput: typeof import("./getWebsite").getWebsiteOutput = null as any;
utilities.lazyLoad(exports, ["getWebsite","getWebsiteOutput"], () => require("./getWebsite"));

export { GetWebsiteGroupArgs, GetWebsiteGroupResult, GetWebsiteGroupOutputArgs } from "./getWebsiteGroup";
export const getWebsiteGroup: typeof import("./getWebsiteGroup").getWebsiteGroup = null as any;
export const getWebsiteGroupOutput: typeof import("./getWebsiteGroup").getWebsiteGroupOutput = null as any;
utilities.lazyLoad(exports, ["getWebsiteGroup","getWebsiteGroupOutput"], () => require("./getWebsiteGroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { WebsiteArgs, WebsiteState } from "./website";
export type Website = import("./website").Website;
export const Website: typeof import("./website").Website = null as any;
utilities.lazyLoad(exports, ["Website"], () => require("./website"));

export { WebsiteGroupArgs, WebsiteGroupState } from "./websiteGroup";
export type WebsiteGroup = import("./websiteGroup").WebsiteGroup;
export const WebsiteGroup: typeof import("./websiteGroup").WebsiteGroup = null as any;
utilities.lazyLoad(exports, ["WebsiteGroup"], () => require("./websiteGroup"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "logicmonitor:index/alertRule:AlertRule":
                return new AlertRule(name, <any>undefined, { urn })
            case "logicmonitor:index/collector:Collector":
                return new Collector(name, <any>undefined, { urn })
            case "logicmonitor:index/collectorGroup:CollectorGroup":
                return new CollectorGroup(name, <any>undefined, { urn })
            case "logicmonitor:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "logicmonitor:index/dashboardGroup:DashboardGroup":
                return new DashboardGroup(name, <any>undefined, { urn })
            case "logicmonitor:index/datasource:Datasource":
                return new Datasource(name, <any>undefined, { urn })
            case "logicmonitor:index/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "logicmonitor:index/deviceGroup:DeviceGroup":
                return new DeviceGroup(name, <any>undefined, { urn })
            case "logicmonitor:index/escalationChain:EscalationChain":
                return new EscalationChain(name, <any>undefined, { urn })
            case "logicmonitor:index/website:Website":
                return new Website(name, <any>undefined, { urn })
            case "logicmonitor:index/websiteGroup:WebsiteGroup":
                return new WebsiteGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("logicmonitor", "index/alertRule", _module)
pulumi.runtime.registerResourceModule("logicmonitor", "index/collector", _module)
pulumi.runtime.registerResourceModule("logicmonitor", "index/collectorGroup", _module)
pulumi.runtime.registerResourceModule("logicmonitor", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("logicmonitor", "index/dashboardGroup", _module)
pulumi.runtime.registerResourceModule("logicmonitor", "index/datasource", _module)
pulumi.runtime.registerResourceModule("logicmonitor", "index/device", _module)
pulumi.runtime.registerResourceModule("logicmonitor", "index/deviceGroup", _module)
pulumi.runtime.registerResourceModule("logicmonitor", "index/escalationChain", _module)
pulumi.runtime.registerResourceModule("logicmonitor", "index/website", _module)
pulumi.runtime.registerResourceModule("logicmonitor", "index/websiteGroup", _module)
pulumi.runtime.registerResourcePackage("logicmonitor", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:logicmonitor") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
