// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Collector extends pulumi.CustomResource {
    /**
     * Get an existing Collector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CollectorState, opts?: pulumi.CustomResourceOptions): Collector {
        return new Collector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logicmonitor:index/collector:Collector';

    /**
     * Returns true if the given object is an instance of Collector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Collector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Collector.__pulumiType;
    }

    public /*out*/ readonly ackComment!: pulumi.Output<string>;
    public /*out*/ readonly acked!: pulumi.Output<boolean>;
    public /*out*/ readonly ackedBy!: pulumi.Output<string>;
    public /*out*/ readonly ackedOn!: pulumi.Output<number>;
    public /*out*/ readonly ackedOnLocal!: pulumi.Output<string>;
    public readonly arch!: pulumi.Output<string | undefined>;
    public readonly automaticUpgradeInfos!: pulumi.Output<outputs.CollectorAutomaticUpgradeInfo[] | undefined>;
    public readonly backupAgentId!: pulumi.Output<number | undefined>;
    public readonly build!: pulumi.Output<string | undefined>;
    public /*out*/ readonly canDowngrade!: pulumi.Output<boolean>;
    public /*out*/ readonly canDowngradeReason!: pulumi.Output<string>;
    public /*out*/ readonly clearSent!: pulumi.Output<boolean>;
    public /*out*/ readonly collectorConf!: pulumi.Output<string>;
    public /*out*/ readonly collectorDeviceId!: pulumi.Output<number>;
    public readonly collectorGroupId!: pulumi.Output<number | undefined>;
    public /*out*/ readonly collectorGroupName!: pulumi.Output<string>;
    public readonly collectorSize!: pulumi.Output<string | undefined>;
    public readonly company!: pulumi.Output<string | undefined>;
    public /*out*/ readonly confVersion!: pulumi.Output<string>;
    public /*out*/ readonly createdOn!: pulumi.Output<number>;
    public /*out*/ readonly createdOnLocal!: pulumi.Output<string>;
    public readonly customProperties!: pulumi.Output<outputs.CollectorCustomProperty[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly ea!: pulumi.Output<boolean | undefined>;
    public readonly enableFailBack!: pulumi.Output<boolean | undefined>;
    public readonly enableFailOverOnCollectorDevice!: pulumi.Output<boolean | undefined>;
    public readonly escalatingChainId!: pulumi.Output<number | undefined>;
    public /*out*/ readonly hasFailOverDevice!: pulumi.Output<boolean>;
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    public /*out*/ readonly inSDT!: pulumi.Output<boolean>;
    public /*out*/ readonly installerUrlCmds!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly isDown!: pulumi.Output<boolean>;
    public /*out*/ readonly lastSentNotificationOn!: pulumi.Output<number>;
    public /*out*/ readonly lastSentNotificationOnLocal!: pulumi.Output<string>;
    public readonly monitorOthers!: pulumi.Output<boolean | undefined>;
    public readonly needAutoCreateCollectorDevice!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly netscanVersion!: pulumi.Output<string>;
    public /*out*/ readonly nextRecipient!: pulumi.Output<number>;
    public /*out*/ readonly nextUpgradeInfos!: pulumi.Output<outputs.CollectorNextUpgradeInfo[]>;
    public /*out*/ readonly numberOfHosts!: pulumi.Output<number>;
    public readonly numberOfInstances!: pulumi.Output<number | undefined>;
    public /*out*/ readonly numberOfWebsites!: pulumi.Output<number>;
    public readonly onetimeDowngradeInfos!: pulumi.Output<outputs.CollectorOnetimeDowngradeInfo[] | undefined>;
    public readonly onetimeUpgradeInfos!: pulumi.Output<outputs.CollectorOnetimeUpgradeInfo[] | undefined>;
    public /*out*/ readonly platform!: pulumi.Output<string>;
    public /*out*/ readonly predefinedConfig!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly previousVersion!: pulumi.Output<string>;
    public readonly resendIval!: pulumi.Output<number | undefined>;
    public /*out*/ readonly sbproxyConf!: pulumi.Output<string>;
    public readonly specifiedCollectorDeviceGroupId!: pulumi.Output<number | undefined>;
    public /*out*/ readonly status!: pulumi.Output<number>;
    public readonly suppressAlertClear!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly upTime!: pulumi.Output<number>;
    public /*out*/ readonly updatedOn!: pulumi.Output<number>;
    public /*out*/ readonly updatedOnLocal!: pulumi.Output<string>;
    public /*out*/ readonly userChangeOn!: pulumi.Output<number>;
    public /*out*/ readonly userChangeOnLocal!: pulumi.Output<string>;
    public /*out*/ readonly userPermission!: pulumi.Output<string>;
    public /*out*/ readonly userVisibleHostsNum!: pulumi.Output<number>;
    public /*out*/ readonly userVisibleWebsitesNum!: pulumi.Output<number>;
    public /*out*/ readonly watchdogConf!: pulumi.Output<string>;
    public /*out*/ readonly watchdogUpdatedOn!: pulumi.Output<number>;
    public /*out*/ readonly watchdogUpdatedOnLocal!: pulumi.Output<string>;
    public /*out*/ readonly websiteConf!: pulumi.Output<string>;
    public /*out*/ readonly wrapperConf!: pulumi.Output<string>;

    /**
     * Create a Collector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CollectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CollectorArgs | CollectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CollectorState | undefined;
            resourceInputs["ackComment"] = state ? state.ackComment : undefined;
            resourceInputs["acked"] = state ? state.acked : undefined;
            resourceInputs["ackedBy"] = state ? state.ackedBy : undefined;
            resourceInputs["ackedOn"] = state ? state.ackedOn : undefined;
            resourceInputs["ackedOnLocal"] = state ? state.ackedOnLocal : undefined;
            resourceInputs["arch"] = state ? state.arch : undefined;
            resourceInputs["automaticUpgradeInfos"] = state ? state.automaticUpgradeInfos : undefined;
            resourceInputs["backupAgentId"] = state ? state.backupAgentId : undefined;
            resourceInputs["build"] = state ? state.build : undefined;
            resourceInputs["canDowngrade"] = state ? state.canDowngrade : undefined;
            resourceInputs["canDowngradeReason"] = state ? state.canDowngradeReason : undefined;
            resourceInputs["clearSent"] = state ? state.clearSent : undefined;
            resourceInputs["collectorConf"] = state ? state.collectorConf : undefined;
            resourceInputs["collectorDeviceId"] = state ? state.collectorDeviceId : undefined;
            resourceInputs["collectorGroupId"] = state ? state.collectorGroupId : undefined;
            resourceInputs["collectorGroupName"] = state ? state.collectorGroupName : undefined;
            resourceInputs["collectorSize"] = state ? state.collectorSize : undefined;
            resourceInputs["company"] = state ? state.company : undefined;
            resourceInputs["confVersion"] = state ? state.confVersion : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["createdOnLocal"] = state ? state.createdOnLocal : undefined;
            resourceInputs["customProperties"] = state ? state.customProperties : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ea"] = state ? state.ea : undefined;
            resourceInputs["enableFailBack"] = state ? state.enableFailBack : undefined;
            resourceInputs["enableFailOverOnCollectorDevice"] = state ? state.enableFailOverOnCollectorDevice : undefined;
            resourceInputs["escalatingChainId"] = state ? state.escalatingChainId : undefined;
            resourceInputs["hasFailOverDevice"] = state ? state.hasFailOverDevice : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["inSDT"] = state ? state.inSDT : undefined;
            resourceInputs["installerUrlCmds"] = state ? state.installerUrlCmds : undefined;
            resourceInputs["isDown"] = state ? state.isDown : undefined;
            resourceInputs["lastSentNotificationOn"] = state ? state.lastSentNotificationOn : undefined;
            resourceInputs["lastSentNotificationOnLocal"] = state ? state.lastSentNotificationOnLocal : undefined;
            resourceInputs["monitorOthers"] = state ? state.monitorOthers : undefined;
            resourceInputs["needAutoCreateCollectorDevice"] = state ? state.needAutoCreateCollectorDevice : undefined;
            resourceInputs["netscanVersion"] = state ? state.netscanVersion : undefined;
            resourceInputs["nextRecipient"] = state ? state.nextRecipient : undefined;
            resourceInputs["nextUpgradeInfos"] = state ? state.nextUpgradeInfos : undefined;
            resourceInputs["numberOfHosts"] = state ? state.numberOfHosts : undefined;
            resourceInputs["numberOfInstances"] = state ? state.numberOfInstances : undefined;
            resourceInputs["numberOfWebsites"] = state ? state.numberOfWebsites : undefined;
            resourceInputs["onetimeDowngradeInfos"] = state ? state.onetimeDowngradeInfos : undefined;
            resourceInputs["onetimeUpgradeInfos"] = state ? state.onetimeUpgradeInfos : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["predefinedConfig"] = state ? state.predefinedConfig : undefined;
            resourceInputs["previousVersion"] = state ? state.previousVersion : undefined;
            resourceInputs["resendIval"] = state ? state.resendIval : undefined;
            resourceInputs["sbproxyConf"] = state ? state.sbproxyConf : undefined;
            resourceInputs["specifiedCollectorDeviceGroupId"] = state ? state.specifiedCollectorDeviceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["suppressAlertClear"] = state ? state.suppressAlertClear : undefined;
            resourceInputs["upTime"] = state ? state.upTime : undefined;
            resourceInputs["updatedOn"] = state ? state.updatedOn : undefined;
            resourceInputs["updatedOnLocal"] = state ? state.updatedOnLocal : undefined;
            resourceInputs["userChangeOn"] = state ? state.userChangeOn : undefined;
            resourceInputs["userChangeOnLocal"] = state ? state.userChangeOnLocal : undefined;
            resourceInputs["userPermission"] = state ? state.userPermission : undefined;
            resourceInputs["userVisibleHostsNum"] = state ? state.userVisibleHostsNum : undefined;
            resourceInputs["userVisibleWebsitesNum"] = state ? state.userVisibleWebsitesNum : undefined;
            resourceInputs["watchdogConf"] = state ? state.watchdogConf : undefined;
            resourceInputs["watchdogUpdatedOn"] = state ? state.watchdogUpdatedOn : undefined;
            resourceInputs["watchdogUpdatedOnLocal"] = state ? state.watchdogUpdatedOnLocal : undefined;
            resourceInputs["websiteConf"] = state ? state.websiteConf : undefined;
            resourceInputs["wrapperConf"] = state ? state.wrapperConf : undefined;
        } else {
            const args = argsOrState as CollectorArgs | undefined;
            resourceInputs["arch"] = args ? args.arch : undefined;
            resourceInputs["automaticUpgradeInfos"] = args ? args.automaticUpgradeInfos : undefined;
            resourceInputs["backupAgentId"] = args ? args.backupAgentId : undefined;
            resourceInputs["build"] = args ? args.build : undefined;
            resourceInputs["collectorGroupId"] = args ? args.collectorGroupId : undefined;
            resourceInputs["collectorSize"] = args ? args.collectorSize : undefined;
            resourceInputs["company"] = args ? args.company : undefined;
            resourceInputs["customProperties"] = args ? args.customProperties : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ea"] = args ? args.ea : undefined;
            resourceInputs["enableFailBack"] = args ? args.enableFailBack : undefined;
            resourceInputs["enableFailOverOnCollectorDevice"] = args ? args.enableFailOverOnCollectorDevice : undefined;
            resourceInputs["escalatingChainId"] = args ? args.escalatingChainId : undefined;
            resourceInputs["monitorOthers"] = args ? args.monitorOthers : undefined;
            resourceInputs["needAutoCreateCollectorDevice"] = args ? args.needAutoCreateCollectorDevice : undefined;
            resourceInputs["numberOfInstances"] = args ? args.numberOfInstances : undefined;
            resourceInputs["onetimeDowngradeInfos"] = args ? args.onetimeDowngradeInfos : undefined;
            resourceInputs["onetimeUpgradeInfos"] = args ? args.onetimeUpgradeInfos : undefined;
            resourceInputs["resendIval"] = args ? args.resendIval : undefined;
            resourceInputs["specifiedCollectorDeviceGroupId"] = args ? args.specifiedCollectorDeviceGroupId : undefined;
            resourceInputs["suppressAlertClear"] = args ? args.suppressAlertClear : undefined;
            resourceInputs["ackComment"] = undefined /*out*/;
            resourceInputs["acked"] = undefined /*out*/;
            resourceInputs["ackedBy"] = undefined /*out*/;
            resourceInputs["ackedOn"] = undefined /*out*/;
            resourceInputs["ackedOnLocal"] = undefined /*out*/;
            resourceInputs["canDowngrade"] = undefined /*out*/;
            resourceInputs["canDowngradeReason"] = undefined /*out*/;
            resourceInputs["clearSent"] = undefined /*out*/;
            resourceInputs["collectorConf"] = undefined /*out*/;
            resourceInputs["collectorDeviceId"] = undefined /*out*/;
            resourceInputs["collectorGroupName"] = undefined /*out*/;
            resourceInputs["confVersion"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["createdOnLocal"] = undefined /*out*/;
            resourceInputs["hasFailOverDevice"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["inSDT"] = undefined /*out*/;
            resourceInputs["installerUrlCmds"] = undefined /*out*/;
            resourceInputs["isDown"] = undefined /*out*/;
            resourceInputs["lastSentNotificationOn"] = undefined /*out*/;
            resourceInputs["lastSentNotificationOnLocal"] = undefined /*out*/;
            resourceInputs["netscanVersion"] = undefined /*out*/;
            resourceInputs["nextRecipient"] = undefined /*out*/;
            resourceInputs["nextUpgradeInfos"] = undefined /*out*/;
            resourceInputs["numberOfHosts"] = undefined /*out*/;
            resourceInputs["numberOfWebsites"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["predefinedConfig"] = undefined /*out*/;
            resourceInputs["previousVersion"] = undefined /*out*/;
            resourceInputs["sbproxyConf"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["upTime"] = undefined /*out*/;
            resourceInputs["updatedOn"] = undefined /*out*/;
            resourceInputs["updatedOnLocal"] = undefined /*out*/;
            resourceInputs["userChangeOn"] = undefined /*out*/;
            resourceInputs["userChangeOnLocal"] = undefined /*out*/;
            resourceInputs["userPermission"] = undefined /*out*/;
            resourceInputs["userVisibleHostsNum"] = undefined /*out*/;
            resourceInputs["userVisibleWebsitesNum"] = undefined /*out*/;
            resourceInputs["watchdogConf"] = undefined /*out*/;
            resourceInputs["watchdogUpdatedOn"] = undefined /*out*/;
            resourceInputs["watchdogUpdatedOnLocal"] = undefined /*out*/;
            resourceInputs["websiteConf"] = undefined /*out*/;
            resourceInputs["wrapperConf"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Collector.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Collector resources.
 */
export interface CollectorState {
    ackComment?: pulumi.Input<string>;
    acked?: pulumi.Input<boolean>;
    ackedBy?: pulumi.Input<string>;
    ackedOn?: pulumi.Input<number>;
    ackedOnLocal?: pulumi.Input<string>;
    arch?: pulumi.Input<string>;
    automaticUpgradeInfos?: pulumi.Input<pulumi.Input<inputs.CollectorAutomaticUpgradeInfo>[]>;
    backupAgentId?: pulumi.Input<number>;
    build?: pulumi.Input<string>;
    canDowngrade?: pulumi.Input<boolean>;
    canDowngradeReason?: pulumi.Input<string>;
    clearSent?: pulumi.Input<boolean>;
    collectorConf?: pulumi.Input<string>;
    collectorDeviceId?: pulumi.Input<number>;
    collectorGroupId?: pulumi.Input<number>;
    collectorGroupName?: pulumi.Input<string>;
    collectorSize?: pulumi.Input<string>;
    company?: pulumi.Input<string>;
    confVersion?: pulumi.Input<string>;
    createdOn?: pulumi.Input<number>;
    createdOnLocal?: pulumi.Input<string>;
    customProperties?: pulumi.Input<pulumi.Input<inputs.CollectorCustomProperty>[]>;
    description?: pulumi.Input<string>;
    ea?: pulumi.Input<boolean>;
    enableFailBack?: pulumi.Input<boolean>;
    enableFailOverOnCollectorDevice?: pulumi.Input<boolean>;
    escalatingChainId?: pulumi.Input<number>;
    hasFailOverDevice?: pulumi.Input<boolean>;
    hostname?: pulumi.Input<string>;
    inSDT?: pulumi.Input<boolean>;
    installerUrlCmds?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isDown?: pulumi.Input<boolean>;
    lastSentNotificationOn?: pulumi.Input<number>;
    lastSentNotificationOnLocal?: pulumi.Input<string>;
    monitorOthers?: pulumi.Input<boolean>;
    needAutoCreateCollectorDevice?: pulumi.Input<boolean>;
    netscanVersion?: pulumi.Input<string>;
    nextRecipient?: pulumi.Input<number>;
    nextUpgradeInfos?: pulumi.Input<pulumi.Input<inputs.CollectorNextUpgradeInfo>[]>;
    numberOfHosts?: pulumi.Input<number>;
    numberOfInstances?: pulumi.Input<number>;
    numberOfWebsites?: pulumi.Input<number>;
    onetimeDowngradeInfos?: pulumi.Input<pulumi.Input<inputs.CollectorOnetimeDowngradeInfo>[]>;
    onetimeUpgradeInfos?: pulumi.Input<pulumi.Input<inputs.CollectorOnetimeUpgradeInfo>[]>;
    platform?: pulumi.Input<string>;
    predefinedConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    previousVersion?: pulumi.Input<string>;
    resendIval?: pulumi.Input<number>;
    sbproxyConf?: pulumi.Input<string>;
    specifiedCollectorDeviceGroupId?: pulumi.Input<number>;
    status?: pulumi.Input<number>;
    suppressAlertClear?: pulumi.Input<boolean>;
    upTime?: pulumi.Input<number>;
    updatedOn?: pulumi.Input<number>;
    updatedOnLocal?: pulumi.Input<string>;
    userChangeOn?: pulumi.Input<number>;
    userChangeOnLocal?: pulumi.Input<string>;
    userPermission?: pulumi.Input<string>;
    userVisibleHostsNum?: pulumi.Input<number>;
    userVisibleWebsitesNum?: pulumi.Input<number>;
    watchdogConf?: pulumi.Input<string>;
    watchdogUpdatedOn?: pulumi.Input<number>;
    watchdogUpdatedOnLocal?: pulumi.Input<string>;
    websiteConf?: pulumi.Input<string>;
    wrapperConf?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Collector resource.
 */
export interface CollectorArgs {
    arch?: pulumi.Input<string>;
    automaticUpgradeInfos?: pulumi.Input<pulumi.Input<inputs.CollectorAutomaticUpgradeInfo>[]>;
    backupAgentId?: pulumi.Input<number>;
    build?: pulumi.Input<string>;
    collectorGroupId?: pulumi.Input<number>;
    collectorSize?: pulumi.Input<string>;
    company?: pulumi.Input<string>;
    customProperties?: pulumi.Input<pulumi.Input<inputs.CollectorCustomProperty>[]>;
    description?: pulumi.Input<string>;
    ea?: pulumi.Input<boolean>;
    enableFailBack?: pulumi.Input<boolean>;
    enableFailOverOnCollectorDevice?: pulumi.Input<boolean>;
    escalatingChainId?: pulumi.Input<number>;
    monitorOthers?: pulumi.Input<boolean>;
    needAutoCreateCollectorDevice?: pulumi.Input<boolean>;
    numberOfInstances?: pulumi.Input<number>;
    onetimeDowngradeInfos?: pulumi.Input<pulumi.Input<inputs.CollectorOnetimeDowngradeInfo>[]>;
    onetimeUpgradeInfos?: pulumi.Input<pulumi.Input<inputs.CollectorOnetimeUpgradeInfo>[]>;
    resendIval?: pulumi.Input<number>;
    specifiedCollectorDeviceGroupId?: pulumi.Input<number>;
    suppressAlertClear?: pulumi.Input<boolean>;
}
