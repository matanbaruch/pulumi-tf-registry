// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWebsite(args?: GetWebsiteArgs, opts?: pulumi.InvokeOptions): Promise<GetWebsiteResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("logicmonitor:index/getWebsite:getWebsite", {
        "alertExpr": args.alertExpr,
        "description": args.description,
        "disableAlerting": args.disableAlerting,
        "domain": args.domain,
        "filter": args.filter,
        "globalSmAlertCond": args.globalSmAlertCond,
        "groupId": args.groupId,
        "host": args.host,
        "id": args.id,
        "ignoreSSL": args.ignoreSSL,
        "individualAlertLevel": args.individualAlertLevel,
        "individualSmAlertEnable": args.individualSmAlertEnable,
        "isInternal": args.isInternal,
        "lastUpdated": args.lastUpdated,
        "name": args.name,
        "overallAlertLevel": args.overallAlertLevel,
        "pollingInterval": args.pollingInterval,
        "schema": args.schema,
        "status": args.status,
        "steps": args.steps,
        "stopMonitoring": args.stopMonitoring,
        "stopMonitoringByFolder": args.stopMonitoringByFolder,
        "template": args.template,
        "testLocations": args.testLocations,
        "transition": args.transition,
        "triggerSSLExpirationAlert": args.triggerSSLExpirationAlert,
        "triggerSSLStatusAlert": args.triggerSSLStatusAlert,
        "type": args.type,
        "useDefaultAlertSetting": args.useDefaultAlertSetting,
        "useDefaultLocationSetting": args.useDefaultLocationSetting,
        "userPermission": args.userPermission,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWebsite.
 */
export interface GetWebsiteArgs {
    alertExpr?: string;
    description?: string;
    disableAlerting?: boolean;
    domain?: string;
    filter?: string;
    globalSmAlertCond?: number;
    groupId?: number;
    host?: string;
    id?: number;
    ignoreSSL?: boolean;
    individualAlertLevel?: string;
    individualSmAlertEnable?: boolean;
    isInternal?: boolean;
    lastUpdated?: number;
    name?: string;
    overallAlertLevel?: string;
    pollingInterval?: number;
    schema?: string;
    status?: string;
    steps?: inputs.GetWebsiteStep[];
    stopMonitoring?: boolean;
    stopMonitoringByFolder?: boolean;
    template?: {[key: string]: string};
    testLocations?: inputs.GetWebsiteTestLocation[];
    transition?: number;
    triggerSSLExpirationAlert?: boolean;
    triggerSSLStatusAlert?: boolean;
    type?: string;
    useDefaultAlertSetting?: boolean;
    useDefaultLocationSetting?: boolean;
    userPermission?: string;
}

/**
 * A collection of values returned by getWebsite.
 */
export interface GetWebsiteResult {
    readonly alertExpr?: string;
    readonly description?: string;
    readonly disableAlerting?: boolean;
    readonly domain?: string;
    readonly filter?: string;
    readonly globalSmAlertCond?: number;
    readonly groupId?: number;
    readonly host?: string;
    readonly id: number;
    readonly ignoreSSL?: boolean;
    readonly individualAlertLevel?: string;
    readonly individualSmAlertEnable?: boolean;
    readonly isInternal?: boolean;
    readonly lastUpdated?: number;
    readonly name?: string;
    readonly overallAlertLevel?: string;
    readonly pollingInterval?: number;
    readonly schema?: string;
    readonly status?: string;
    readonly steps?: outputs.GetWebsiteStep[];
    readonly stopMonitoring?: boolean;
    readonly stopMonitoringByFolder?: boolean;
    readonly template?: {[key: string]: string};
    readonly testLocations?: outputs.GetWebsiteTestLocation[];
    readonly transition?: number;
    readonly triggerSSLExpirationAlert?: boolean;
    readonly triggerSSLStatusAlert?: boolean;
    readonly type?: string;
    readonly useDefaultAlertSetting?: boolean;
    readonly useDefaultLocationSetting?: boolean;
    readonly userPermission?: string;
}
export function getWebsiteOutput(args?: GetWebsiteOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWebsiteResult> {
    return pulumi.output(args).apply((a: any) => getWebsite(a, opts))
}

/**
 * A collection of arguments for invoking getWebsite.
 */
export interface GetWebsiteOutputArgs {
    alertExpr?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disableAlerting?: pulumi.Input<boolean>;
    domain?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    globalSmAlertCond?: pulumi.Input<number>;
    groupId?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ignoreSSL?: pulumi.Input<boolean>;
    individualAlertLevel?: pulumi.Input<string>;
    individualSmAlertEnable?: pulumi.Input<boolean>;
    isInternal?: pulumi.Input<boolean>;
    lastUpdated?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    overallAlertLevel?: pulumi.Input<string>;
    pollingInterval?: pulumi.Input<number>;
    schema?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    steps?: pulumi.Input<pulumi.Input<inputs.GetWebsiteStepArgs>[]>;
    stopMonitoring?: pulumi.Input<boolean>;
    stopMonitoringByFolder?: pulumi.Input<boolean>;
    template?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    testLocations?: pulumi.Input<pulumi.Input<inputs.GetWebsiteTestLocationArgs>[]>;
    transition?: pulumi.Input<number>;
    triggerSSLExpirationAlert?: pulumi.Input<boolean>;
    triggerSSLStatusAlert?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
    useDefaultAlertSetting?: pulumi.Input<boolean>;
    useDefaultLocationSetting?: pulumi.Input<boolean>;
    userPermission?: pulumi.Input<string>;
}
