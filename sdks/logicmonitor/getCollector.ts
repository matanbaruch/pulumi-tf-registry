// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCollector(args?: GetCollectorArgs, opts?: pulumi.InvokeOptions): Promise<GetCollectorResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("logicmonitor:index/getCollector:getCollector", {
        "ackComment": args.ackComment,
        "acked": args.acked,
        "ackedBy": args.ackedBy,
        "ackedOn": args.ackedOn,
        "ackedOnLocal": args.ackedOnLocal,
        "arch": args.arch,
        "automaticUpgradeInfos": args.automaticUpgradeInfos,
        "backupAgentId": args.backupAgentId,
        "build": args.build,
        "canDowngrade": args.canDowngrade,
        "canDowngradeReason": args.canDowngradeReason,
        "clearSent": args.clearSent,
        "collectorConf": args.collectorConf,
        "collectorDeviceId": args.collectorDeviceId,
        "collectorGroupId": args.collectorGroupId,
        "collectorGroupName": args.collectorGroupName,
        "collectorSize": args.collectorSize,
        "company": args.company,
        "confVersion": args.confVersion,
        "createdOn": args.createdOn,
        "createdOnLocal": args.createdOnLocal,
        "customProperties": args.customProperties,
        "description": args.description,
        "ea": args.ea,
        "enableFailBack": args.enableFailBack,
        "enableFailOverOnCollectorDevice": args.enableFailOverOnCollectorDevice,
        "escalatingChainId": args.escalatingChainId,
        "filter": args.filter,
        "hasFailOverDevice": args.hasFailOverDevice,
        "hostname": args.hostname,
        "id": args.id,
        "inSDT": args.inSDT,
        "installerUrlCmds": args.installerUrlCmds,
        "isDown": args.isDown,
        "lastSentNotificationOn": args.lastSentNotificationOn,
        "lastSentNotificationOnLocal": args.lastSentNotificationOnLocal,
        "monitorOthers": args.monitorOthers,
        "needAutoCreateCollectorDevice": args.needAutoCreateCollectorDevice,
        "netscanVersion": args.netscanVersion,
        "nextRecipient": args.nextRecipient,
        "nextUpgradeInfos": args.nextUpgradeInfos,
        "numberOfHosts": args.numberOfHosts,
        "numberOfInstances": args.numberOfInstances,
        "numberOfWebsites": args.numberOfWebsites,
        "onetimeDowngradeInfos": args.onetimeDowngradeInfos,
        "onetimeUpgradeInfos": args.onetimeUpgradeInfos,
        "platform": args.platform,
        "predefinedConfig": args.predefinedConfig,
        "previousVersion": args.previousVersion,
        "resendIval": args.resendIval,
        "sbproxyConf": args.sbproxyConf,
        "specifiedCollectorDeviceGroupId": args.specifiedCollectorDeviceGroupId,
        "status": args.status,
        "suppressAlertClear": args.suppressAlertClear,
        "upTime": args.upTime,
        "updatedOn": args.updatedOn,
        "updatedOnLocal": args.updatedOnLocal,
        "userChangeOn": args.userChangeOn,
        "userChangeOnLocal": args.userChangeOnLocal,
        "userPermission": args.userPermission,
        "userVisibleHostsNum": args.userVisibleHostsNum,
        "userVisibleWebsitesNum": args.userVisibleWebsitesNum,
        "watchdogConf": args.watchdogConf,
        "watchdogUpdatedOn": args.watchdogUpdatedOn,
        "watchdogUpdatedOnLocal": args.watchdogUpdatedOnLocal,
        "websiteConf": args.websiteConf,
        "wrapperConf": args.wrapperConf,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCollector.
 */
export interface GetCollectorArgs {
    ackComment?: string;
    acked?: boolean;
    ackedBy?: string;
    ackedOn?: number;
    ackedOnLocal?: string;
    arch?: string;
    automaticUpgradeInfos?: inputs.GetCollectorAutomaticUpgradeInfo[];
    backupAgentId?: number;
    build?: string;
    canDowngrade?: boolean;
    canDowngradeReason?: string;
    clearSent?: boolean;
    collectorConf?: string;
    collectorDeviceId?: number;
    collectorGroupId?: number;
    collectorGroupName?: string;
    collectorSize?: string;
    company?: string;
    confVersion?: string;
    createdOn?: number;
    createdOnLocal?: string;
    customProperties?: inputs.GetCollectorCustomProperty[];
    description?: string;
    ea?: boolean;
    enableFailBack?: boolean;
    enableFailOverOnCollectorDevice?: boolean;
    escalatingChainId?: number;
    filter?: string;
    hasFailOverDevice?: boolean;
    hostname?: string;
    id?: number;
    inSDT?: boolean;
    installerUrlCmds?: {[key: string]: string};
    isDown?: boolean;
    lastSentNotificationOn?: number;
    lastSentNotificationOnLocal?: string;
    monitorOthers?: boolean;
    needAutoCreateCollectorDevice?: boolean;
    netscanVersion?: string;
    nextRecipient?: number;
    nextUpgradeInfos?: inputs.GetCollectorNextUpgradeInfo[];
    numberOfHosts?: number;
    numberOfInstances?: number;
    numberOfWebsites?: number;
    onetimeDowngradeInfos?: inputs.GetCollectorOnetimeDowngradeInfo[];
    onetimeUpgradeInfos?: inputs.GetCollectorOnetimeUpgradeInfo[];
    platform?: string;
    predefinedConfig?: {[key: string]: string};
    previousVersion?: string;
    resendIval?: number;
    sbproxyConf?: string;
    specifiedCollectorDeviceGroupId?: number;
    status?: number;
    suppressAlertClear?: boolean;
    upTime?: number;
    updatedOn?: number;
    updatedOnLocal?: string;
    userChangeOn?: number;
    userChangeOnLocal?: string;
    userPermission?: string;
    userVisibleHostsNum?: number;
    userVisibleWebsitesNum?: number;
    watchdogConf?: string;
    watchdogUpdatedOn?: number;
    watchdogUpdatedOnLocal?: string;
    websiteConf?: string;
    wrapperConf?: string;
}

/**
 * A collection of values returned by getCollector.
 */
export interface GetCollectorResult {
    readonly ackComment?: string;
    readonly acked?: boolean;
    readonly ackedBy?: string;
    readonly ackedOn?: number;
    readonly ackedOnLocal?: string;
    readonly arch?: string;
    readonly automaticUpgradeInfos?: outputs.GetCollectorAutomaticUpgradeInfo[];
    readonly backupAgentId?: number;
    readonly build?: string;
    readonly canDowngrade?: boolean;
    readonly canDowngradeReason?: string;
    readonly clearSent?: boolean;
    readonly collectorConf?: string;
    readonly collectorDeviceId?: number;
    readonly collectorGroupId?: number;
    readonly collectorGroupName?: string;
    readonly collectorSize?: string;
    readonly company?: string;
    readonly confVersion?: string;
    readonly createdOn?: number;
    readonly createdOnLocal?: string;
    readonly customProperties?: outputs.GetCollectorCustomProperty[];
    readonly description?: string;
    readonly ea?: boolean;
    readonly enableFailBack?: boolean;
    readonly enableFailOverOnCollectorDevice?: boolean;
    readonly escalatingChainId?: number;
    readonly filter?: string;
    readonly hasFailOverDevice?: boolean;
    readonly hostname?: string;
    readonly id: number;
    readonly inSDT?: boolean;
    readonly installerUrlCmds?: {[key: string]: string};
    readonly isDown?: boolean;
    readonly lastSentNotificationOn?: number;
    readonly lastSentNotificationOnLocal?: string;
    readonly monitorOthers?: boolean;
    readonly needAutoCreateCollectorDevice?: boolean;
    readonly netscanVersion?: string;
    readonly nextRecipient?: number;
    readonly nextUpgradeInfos?: outputs.GetCollectorNextUpgradeInfo[];
    readonly numberOfHosts?: number;
    readonly numberOfInstances?: number;
    readonly numberOfWebsites?: number;
    readonly onetimeDowngradeInfos?: outputs.GetCollectorOnetimeDowngradeInfo[];
    readonly onetimeUpgradeInfos?: outputs.GetCollectorOnetimeUpgradeInfo[];
    readonly platform?: string;
    readonly predefinedConfig?: {[key: string]: string};
    readonly previousVersion?: string;
    readonly resendIval?: number;
    readonly sbproxyConf?: string;
    readonly specifiedCollectorDeviceGroupId?: number;
    readonly status?: number;
    readonly suppressAlertClear?: boolean;
    readonly upTime?: number;
    readonly updatedOn?: number;
    readonly updatedOnLocal?: string;
    readonly userChangeOn?: number;
    readonly userChangeOnLocal?: string;
    readonly userPermission?: string;
    readonly userVisibleHostsNum?: number;
    readonly userVisibleWebsitesNum?: number;
    readonly watchdogConf?: string;
    readonly watchdogUpdatedOn?: number;
    readonly watchdogUpdatedOnLocal?: string;
    readonly websiteConf?: string;
    readonly wrapperConf?: string;
}
export function getCollectorOutput(args?: GetCollectorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCollectorResult> {
    return pulumi.output(args).apply((a: any) => getCollector(a, opts))
}

/**
 * A collection of arguments for invoking getCollector.
 */
export interface GetCollectorOutputArgs {
    ackComment?: pulumi.Input<string>;
    acked?: pulumi.Input<boolean>;
    ackedBy?: pulumi.Input<string>;
    ackedOn?: pulumi.Input<number>;
    ackedOnLocal?: pulumi.Input<string>;
    arch?: pulumi.Input<string>;
    automaticUpgradeInfos?: pulumi.Input<pulumi.Input<inputs.GetCollectorAutomaticUpgradeInfoArgs>[]>;
    backupAgentId?: pulumi.Input<number>;
    build?: pulumi.Input<string>;
    canDowngrade?: pulumi.Input<boolean>;
    canDowngradeReason?: pulumi.Input<string>;
    clearSent?: pulumi.Input<boolean>;
    collectorConf?: pulumi.Input<string>;
    collectorDeviceId?: pulumi.Input<number>;
    collectorGroupId?: pulumi.Input<number>;
    collectorGroupName?: pulumi.Input<string>;
    collectorSize?: pulumi.Input<string>;
    company?: pulumi.Input<string>;
    confVersion?: pulumi.Input<string>;
    createdOn?: pulumi.Input<number>;
    createdOnLocal?: pulumi.Input<string>;
    customProperties?: pulumi.Input<pulumi.Input<inputs.GetCollectorCustomPropertyArgs>[]>;
    description?: pulumi.Input<string>;
    ea?: pulumi.Input<boolean>;
    enableFailBack?: pulumi.Input<boolean>;
    enableFailOverOnCollectorDevice?: pulumi.Input<boolean>;
    escalatingChainId?: pulumi.Input<number>;
    filter?: pulumi.Input<string>;
    hasFailOverDevice?: pulumi.Input<boolean>;
    hostname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    inSDT?: pulumi.Input<boolean>;
    installerUrlCmds?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isDown?: pulumi.Input<boolean>;
    lastSentNotificationOn?: pulumi.Input<number>;
    lastSentNotificationOnLocal?: pulumi.Input<string>;
    monitorOthers?: pulumi.Input<boolean>;
    needAutoCreateCollectorDevice?: pulumi.Input<boolean>;
    netscanVersion?: pulumi.Input<string>;
    nextRecipient?: pulumi.Input<number>;
    nextUpgradeInfos?: pulumi.Input<pulumi.Input<inputs.GetCollectorNextUpgradeInfoArgs>[]>;
    numberOfHosts?: pulumi.Input<number>;
    numberOfInstances?: pulumi.Input<number>;
    numberOfWebsites?: pulumi.Input<number>;
    onetimeDowngradeInfos?: pulumi.Input<pulumi.Input<inputs.GetCollectorOnetimeDowngradeInfoArgs>[]>;
    onetimeUpgradeInfos?: pulumi.Input<pulumi.Input<inputs.GetCollectorOnetimeUpgradeInfoArgs>[]>;
    platform?: pulumi.Input<string>;
    predefinedConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    previousVersion?: pulumi.Input<string>;
    resendIval?: pulumi.Input<number>;
    sbproxyConf?: pulumi.Input<string>;
    specifiedCollectorDeviceGroupId?: pulumi.Input<number>;
    status?: pulumi.Input<number>;
    suppressAlertClear?: pulumi.Input<boolean>;
    upTime?: pulumi.Input<number>;
    updatedOn?: pulumi.Input<number>;
    updatedOnLocal?: pulumi.Input<string>;
    userChangeOn?: pulumi.Input<number>;
    userChangeOnLocal?: pulumi.Input<string>;
    userPermission?: pulumi.Input<string>;
    userVisibleHostsNum?: pulumi.Input<number>;
    userVisibleWebsitesNum?: pulumi.Input<number>;
    watchdogConf?: pulumi.Input<string>;
    watchdogUpdatedOn?: pulumi.Input<number>;
    watchdogUpdatedOnLocal?: pulumi.Input<string>;
    websiteConf?: pulumi.Input<string>;
    wrapperConf?: pulumi.Input<string>;
}
