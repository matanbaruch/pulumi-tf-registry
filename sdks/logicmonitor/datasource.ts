// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Datasource extends pulumi.CustomResource {
    /**
     * Get an existing Datasource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasourceState, opts?: pulumi.CustomResourceOptions): Datasource {
        return new Datasource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logicmonitor:index/datasource:Datasource';

    /**
     * Returns true if the given object is an instance of Datasource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Datasource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Datasource.__pulumiType;
    }

    public readonly appliesTo!: pulumi.Output<string | undefined>;
    public /*out*/ readonly auditVersion!: pulumi.Output<number>;
    public readonly autoDiscoveryConfigs!: pulumi.Output<outputs.DatasourceAutoDiscoveryConfig[] | undefined>;
    public /*out*/ readonly checksum!: pulumi.Output<string>;
    public readonly collectInterval!: pulumi.Output<number>;
    public readonly collectMethod!: pulumi.Output<string>;
    public readonly collectorAttributes!: pulumi.Output<outputs.DatasourceCollectorAttribute[]>;
    public readonly dataPoints!: pulumi.Output<outputs.DatasourceDataPoint[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string | undefined>;
    public readonly enableAutoDiscovery!: pulumi.Output<boolean | undefined>;
    public readonly enableEriDiscovery!: pulumi.Output<boolean | undefined>;
    public readonly eriDiscoveryConfigs!: pulumi.Output<outputs.DatasourceEriDiscoveryConfig[] | undefined>;
    public readonly eriDiscoveryInterval!: pulumi.Output<number | undefined>;
    public readonly group!: pulumi.Output<string | undefined>;
    public readonly hasMultiInstances!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly lineageId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly payloadVersion!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<string | undefined>;
    public readonly technology!: pulumi.Output<string | undefined>;
    public /*out*/ readonly useWildValueAsUuid!: pulumi.Output<boolean>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a Datasource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasourceArgs | DatasourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasourceState | undefined;
            resourceInputs["appliesTo"] = state ? state.appliesTo : undefined;
            resourceInputs["auditVersion"] = state ? state.auditVersion : undefined;
            resourceInputs["autoDiscoveryConfigs"] = state ? state.autoDiscoveryConfigs : undefined;
            resourceInputs["checksum"] = state ? state.checksum : undefined;
            resourceInputs["collectInterval"] = state ? state.collectInterval : undefined;
            resourceInputs["collectMethod"] = state ? state.collectMethod : undefined;
            resourceInputs["collectorAttributes"] = state ? state.collectorAttributes : undefined;
            resourceInputs["dataPoints"] = state ? state.dataPoints : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enableAutoDiscovery"] = state ? state.enableAutoDiscovery : undefined;
            resourceInputs["enableEriDiscovery"] = state ? state.enableEriDiscovery : undefined;
            resourceInputs["eriDiscoveryConfigs"] = state ? state.eriDiscoveryConfigs : undefined;
            resourceInputs["eriDiscoveryInterval"] = state ? state.eriDiscoveryInterval : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["hasMultiInstances"] = state ? state.hasMultiInstances : undefined;
            resourceInputs["lineageId"] = state ? state.lineageId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["payloadVersion"] = state ? state.payloadVersion : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["technology"] = state ? state.technology : undefined;
            resourceInputs["useWildValueAsUuid"] = state ? state.useWildValueAsUuid : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DatasourceArgs | undefined;
            if ((!args || args.collectInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectInterval'");
            }
            if ((!args || args.collectMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectMethod'");
            }
            if ((!args || args.collectorAttributes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectorAttributes'");
            }
            resourceInputs["appliesTo"] = args ? args.appliesTo : undefined;
            resourceInputs["autoDiscoveryConfigs"] = args ? args.autoDiscoveryConfigs : undefined;
            resourceInputs["collectInterval"] = args ? args.collectInterval : undefined;
            resourceInputs["collectMethod"] = args ? args.collectMethod : undefined;
            resourceInputs["collectorAttributes"] = args ? args.collectorAttributes : undefined;
            resourceInputs["dataPoints"] = args ? args.dataPoints : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enableAutoDiscovery"] = args ? args.enableAutoDiscovery : undefined;
            resourceInputs["enableEriDiscovery"] = args ? args.enableEriDiscovery : undefined;
            resourceInputs["eriDiscoveryConfigs"] = args ? args.eriDiscoveryConfigs : undefined;
            resourceInputs["eriDiscoveryInterval"] = args ? args.eriDiscoveryInterval : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["hasMultiInstances"] = args ? args.hasMultiInstances : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["technology"] = args ? args.technology : undefined;
            resourceInputs["auditVersion"] = undefined /*out*/;
            resourceInputs["checksum"] = undefined /*out*/;
            resourceInputs["lineageId"] = undefined /*out*/;
            resourceInputs["payloadVersion"] = undefined /*out*/;
            resourceInputs["useWildValueAsUuid"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Datasource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Datasource resources.
 */
export interface DatasourceState {
    appliesTo?: pulumi.Input<string>;
    auditVersion?: pulumi.Input<number>;
    autoDiscoveryConfigs?: pulumi.Input<pulumi.Input<inputs.DatasourceAutoDiscoveryConfig>[]>;
    checksum?: pulumi.Input<string>;
    collectInterval?: pulumi.Input<number>;
    collectMethod?: pulumi.Input<string>;
    collectorAttributes?: pulumi.Input<pulumi.Input<inputs.DatasourceCollectorAttribute>[]>;
    dataPoints?: pulumi.Input<pulumi.Input<inputs.DatasourceDataPoint>[]>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enableAutoDiscovery?: pulumi.Input<boolean>;
    enableEriDiscovery?: pulumi.Input<boolean>;
    eriDiscoveryConfigs?: pulumi.Input<pulumi.Input<inputs.DatasourceEriDiscoveryConfig>[]>;
    eriDiscoveryInterval?: pulumi.Input<number>;
    group?: pulumi.Input<string>;
    hasMultiInstances?: pulumi.Input<boolean>;
    lineageId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    payloadVersion?: pulumi.Input<number>;
    tags?: pulumi.Input<string>;
    technology?: pulumi.Input<string>;
    useWildValueAsUuid?: pulumi.Input<boolean>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Datasource resource.
 */
export interface DatasourceArgs {
    appliesTo?: pulumi.Input<string>;
    autoDiscoveryConfigs?: pulumi.Input<pulumi.Input<inputs.DatasourceAutoDiscoveryConfig>[]>;
    collectInterval: pulumi.Input<number>;
    collectMethod: pulumi.Input<string>;
    collectorAttributes: pulumi.Input<pulumi.Input<inputs.DatasourceCollectorAttribute>[]>;
    dataPoints?: pulumi.Input<pulumi.Input<inputs.DatasourceDataPoint>[]>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enableAutoDiscovery?: pulumi.Input<boolean>;
    enableEriDiscovery?: pulumi.Input<boolean>;
    eriDiscoveryConfigs?: pulumi.Input<pulumi.Input<inputs.DatasourceEriDiscoveryConfig>[]>;
    eriDiscoveryInterval?: pulumi.Input<number>;
    group?: pulumi.Input<string>;
    hasMultiInstances?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<string>;
    technology?: pulumi.Input<string>;
}
