// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Website extends pulumi.CustomResource {
    /**
     * Get an existing Website resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebsiteState, opts?: pulumi.CustomResourceOptions): Website {
        return new Website(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logicmonitor:index/website:Website';

    /**
     * Returns true if the given object is an instance of Website.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Website {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Website.__pulumiType;
    }

    public readonly alertExpr!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disableAlerting!: pulumi.Output<boolean | undefined>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly globalSmAlertCond!: pulumi.Output<number | undefined>;
    public readonly groupId!: pulumi.Output<number | undefined>;
    public readonly host!: pulumi.Output<string | undefined>;
    public readonly ignoreSSL!: pulumi.Output<boolean | undefined>;
    public readonly individualAlertLevel!: pulumi.Output<string | undefined>;
    public readonly individualSmAlertEnable!: pulumi.Output<boolean | undefined>;
    public readonly isInternal!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly overallAlertLevel!: pulumi.Output<string | undefined>;
    public readonly pollingInterval!: pulumi.Output<number | undefined>;
    public readonly schema!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly steps!: pulumi.Output<outputs.WebsiteStep[] | undefined>;
    public readonly stopMonitoring!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly stopMonitoringByFolder!: pulumi.Output<boolean>;
    public readonly template!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly testLocations!: pulumi.Output<outputs.WebsiteTestLocation[] | undefined>;
    public readonly transition!: pulumi.Output<number | undefined>;
    public readonly triggerSSLExpirationAlert!: pulumi.Output<boolean | undefined>;
    public readonly triggerSSLStatusAlert!: pulumi.Output<boolean | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly useDefaultAlertSetting!: pulumi.Output<boolean | undefined>;
    public readonly useDefaultLocationSetting!: pulumi.Output<boolean | undefined>;
    public readonly userPermission!: pulumi.Output<string | undefined>;

    /**
     * Create a Website resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebsiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebsiteArgs | WebsiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebsiteState | undefined;
            resourceInputs["alertExpr"] = state ? state.alertExpr : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableAlerting"] = state ? state.disableAlerting : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["globalSmAlertCond"] = state ? state.globalSmAlertCond : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["ignoreSSL"] = state ? state.ignoreSSL : undefined;
            resourceInputs["individualAlertLevel"] = state ? state.individualAlertLevel : undefined;
            resourceInputs["individualSmAlertEnable"] = state ? state.individualSmAlertEnable : undefined;
            resourceInputs["isInternal"] = state ? state.isInternal : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overallAlertLevel"] = state ? state.overallAlertLevel : undefined;
            resourceInputs["pollingInterval"] = state ? state.pollingInterval : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["steps"] = state ? state.steps : undefined;
            resourceInputs["stopMonitoring"] = state ? state.stopMonitoring : undefined;
            resourceInputs["stopMonitoringByFolder"] = state ? state.stopMonitoringByFolder : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["testLocations"] = state ? state.testLocations : undefined;
            resourceInputs["transition"] = state ? state.transition : undefined;
            resourceInputs["triggerSSLExpirationAlert"] = state ? state.triggerSSLExpirationAlert : undefined;
            resourceInputs["triggerSSLStatusAlert"] = state ? state.triggerSSLStatusAlert : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["useDefaultAlertSetting"] = state ? state.useDefaultAlertSetting : undefined;
            resourceInputs["useDefaultLocationSetting"] = state ? state.useDefaultLocationSetting : undefined;
            resourceInputs["userPermission"] = state ? state.userPermission : undefined;
        } else {
            const args = argsOrState as WebsiteArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["alertExpr"] = args ? args.alertExpr : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableAlerting"] = args ? args.disableAlerting : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["globalSmAlertCond"] = args ? args.globalSmAlertCond : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["ignoreSSL"] = args ? args.ignoreSSL : undefined;
            resourceInputs["individualAlertLevel"] = args ? args.individualAlertLevel : undefined;
            resourceInputs["individualSmAlertEnable"] = args ? args.individualSmAlertEnable : undefined;
            resourceInputs["isInternal"] = args ? args.isInternal : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overallAlertLevel"] = args ? args.overallAlertLevel : undefined;
            resourceInputs["pollingInterval"] = args ? args.pollingInterval : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["steps"] = args ? args.steps : undefined;
            resourceInputs["stopMonitoring"] = args ? args.stopMonitoring : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["testLocations"] = args ? args.testLocations : undefined;
            resourceInputs["transition"] = args ? args.transition : undefined;
            resourceInputs["triggerSSLExpirationAlert"] = args ? args.triggerSSLExpirationAlert : undefined;
            resourceInputs["triggerSSLStatusAlert"] = args ? args.triggerSSLStatusAlert : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["useDefaultAlertSetting"] = args ? args.useDefaultAlertSetting : undefined;
            resourceInputs["useDefaultLocationSetting"] = args ? args.useDefaultLocationSetting : undefined;
            resourceInputs["userPermission"] = args ? args.userPermission : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["stopMonitoringByFolder"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Website.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Website resources.
 */
export interface WebsiteState {
    alertExpr?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disableAlerting?: pulumi.Input<boolean>;
    domain?: pulumi.Input<string>;
    globalSmAlertCond?: pulumi.Input<number>;
    groupId?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    ignoreSSL?: pulumi.Input<boolean>;
    individualAlertLevel?: pulumi.Input<string>;
    individualSmAlertEnable?: pulumi.Input<boolean>;
    isInternal?: pulumi.Input<boolean>;
    lastUpdated?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    overallAlertLevel?: pulumi.Input<string>;
    pollingInterval?: pulumi.Input<number>;
    schema?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    steps?: pulumi.Input<pulumi.Input<inputs.WebsiteStep>[]>;
    stopMonitoring?: pulumi.Input<boolean>;
    stopMonitoringByFolder?: pulumi.Input<boolean>;
    template?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    testLocations?: pulumi.Input<pulumi.Input<inputs.WebsiteTestLocation>[]>;
    transition?: pulumi.Input<number>;
    triggerSSLExpirationAlert?: pulumi.Input<boolean>;
    triggerSSLStatusAlert?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
    useDefaultAlertSetting?: pulumi.Input<boolean>;
    useDefaultLocationSetting?: pulumi.Input<boolean>;
    userPermission?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Website resource.
 */
export interface WebsiteArgs {
    alertExpr?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disableAlerting?: pulumi.Input<boolean>;
    domain?: pulumi.Input<string>;
    globalSmAlertCond?: pulumi.Input<number>;
    groupId?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    ignoreSSL?: pulumi.Input<boolean>;
    individualAlertLevel?: pulumi.Input<string>;
    individualSmAlertEnable?: pulumi.Input<boolean>;
    isInternal?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    overallAlertLevel?: pulumi.Input<string>;
    pollingInterval?: pulumi.Input<number>;
    schema?: pulumi.Input<string>;
    steps?: pulumi.Input<pulumi.Input<inputs.WebsiteStep>[]>;
    stopMonitoring?: pulumi.Input<boolean>;
    template?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    testLocations?: pulumi.Input<pulumi.Input<inputs.WebsiteTestLocation>[]>;
    transition?: pulumi.Input<number>;
    triggerSSLExpirationAlert?: pulumi.Input<boolean>;
    triggerSSLStatusAlert?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    useDefaultAlertSetting?: pulumi.Input<boolean>;
    useDefaultLocationSetting?: pulumi.Input<boolean>;
    userPermission?: pulumi.Input<string>;
}
