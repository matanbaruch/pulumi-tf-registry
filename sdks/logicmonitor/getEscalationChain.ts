// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEscalationChain(args?: GetEscalationChainArgs, opts?: pulumi.InvokeOptions): Promise<GetEscalationChainResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("logicmonitor:index/getEscalationChain:getEscalationChain", {
        "ccDestinations": args.ccDestinations,
        "description": args.description,
        "destinations": args.destinations,
        "enableThrottling": args.enableThrottling,
        "filter": args.filter,
        "id": args.id,
        "inAlerting": args.inAlerting,
        "name": args.name,
        "throttlingAlerts": args.throttlingAlerts,
        "throttlingPeriod": args.throttlingPeriod,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEscalationChain.
 */
export interface GetEscalationChainArgs {
    ccDestinations?: inputs.GetEscalationChainCcDestination[];
    description?: string;
    destinations?: inputs.GetEscalationChainDestination[];
    enableThrottling?: boolean;
    filter?: string;
    id?: number;
    inAlerting?: boolean;
    name?: string;
    throttlingAlerts?: number;
    throttlingPeriod?: number;
}

/**
 * A collection of values returned by getEscalationChain.
 */
export interface GetEscalationChainResult {
    readonly ccDestinations?: outputs.GetEscalationChainCcDestination[];
    readonly description?: string;
    readonly destinations?: outputs.GetEscalationChainDestination[];
    readonly enableThrottling?: boolean;
    readonly filter?: string;
    readonly id: number;
    readonly inAlerting?: boolean;
    readonly name?: string;
    readonly throttlingAlerts?: number;
    readonly throttlingPeriod?: number;
}
export function getEscalationChainOutput(args?: GetEscalationChainOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEscalationChainResult> {
    return pulumi.output(args).apply((a: any) => getEscalationChain(a, opts))
}

/**
 * A collection of arguments for invoking getEscalationChain.
 */
export interface GetEscalationChainOutputArgs {
    ccDestinations?: pulumi.Input<pulumi.Input<inputs.GetEscalationChainCcDestinationArgs>[]>;
    description?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.GetEscalationChainDestinationArgs>[]>;
    enableThrottling?: pulumi.Input<boolean>;
    filter?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    inAlerting?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    throttlingAlerts?: pulumi.Input<number>;
    throttlingPeriod?: pulumi.Input<number>;
}
