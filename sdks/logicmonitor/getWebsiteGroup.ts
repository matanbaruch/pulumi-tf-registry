// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWebsiteGroup(args?: GetWebsiteGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetWebsiteGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("logicmonitor:index/getWebsiteGroup:getWebsiteGroup", {
        "description": args.description,
        "disableAlerting": args.disableAlerting,
        "filter": args.filter,
        "fullPath": args.fullPath,
        "hasWebsitesDisabled": args.hasWebsitesDisabled,
        "id": args.id,
        "name": args.name,
        "numOfDirectSubGroups": args.numOfDirectSubGroups,
        "numOfDirectWebsites": args.numOfDirectWebsites,
        "numOfWebsites": args.numOfWebsites,
        "parentId": args.parentId,
        "properties": args.properties,
        "stopMonitoring": args.stopMonitoring,
        "userPermission": args.userPermission,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWebsiteGroup.
 */
export interface GetWebsiteGroupArgs {
    description?: string;
    disableAlerting?: boolean;
    filter?: string;
    fullPath?: string;
    hasWebsitesDisabled?: boolean;
    id?: number;
    name?: string;
    numOfDirectSubGroups?: number;
    numOfDirectWebsites?: number;
    numOfWebsites?: number;
    parentId?: number;
    properties?: inputs.GetWebsiteGroupProperty[];
    stopMonitoring?: boolean;
    userPermission?: string;
}

/**
 * A collection of values returned by getWebsiteGroup.
 */
export interface GetWebsiteGroupResult {
    readonly description?: string;
    readonly disableAlerting?: boolean;
    readonly filter?: string;
    readonly fullPath?: string;
    readonly hasWebsitesDisabled?: boolean;
    readonly id: number;
    readonly name?: string;
    readonly numOfDirectSubGroups?: number;
    readonly numOfDirectWebsites?: number;
    readonly numOfWebsites?: number;
    readonly parentId?: number;
    readonly properties?: outputs.GetWebsiteGroupProperty[];
    readonly stopMonitoring?: boolean;
    readonly userPermission?: string;
}
export function getWebsiteGroupOutput(args?: GetWebsiteGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWebsiteGroupResult> {
    return pulumi.output(args).apply((a: any) => getWebsiteGroup(a, opts))
}

/**
 * A collection of arguments for invoking getWebsiteGroup.
 */
export interface GetWebsiteGroupOutputArgs {
    description?: pulumi.Input<string>;
    disableAlerting?: pulumi.Input<boolean>;
    filter?: pulumi.Input<string>;
    fullPath?: pulumi.Input<string>;
    hasWebsitesDisabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numOfDirectSubGroups?: pulumi.Input<number>;
    numOfDirectWebsites?: pulumi.Input<number>;
    numOfWebsites?: pulumi.Input<number>;
    parentId?: pulumi.Input<number>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetWebsiteGroupPropertyArgs>[]>;
    stopMonitoring?: pulumi.Input<boolean>;
    userPermission?: pulumi.Input<string>;
}
