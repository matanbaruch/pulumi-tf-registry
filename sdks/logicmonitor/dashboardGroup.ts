// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DashboardGroup extends pulumi.CustomResource {
    /**
     * Get an existing DashboardGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardGroupState, opts?: pulumi.CustomResourceOptions): DashboardGroup {
        return new DashboardGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logicmonitor:index/dashboardGroup:DashboardGroup';

    /**
     * Returns true if the given object is an instance of DashboardGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DashboardGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DashboardGroup.__pulumiType;
    }

    public /*out*/ readonly dashboards!: pulumi.Output<outputs.DashboardGroupDashboard[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly fullPath!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly numOfDashboards!: pulumi.Output<number>;
    public /*out*/ readonly numOfDirectDashboards!: pulumi.Output<number>;
    public /*out*/ readonly numOfDirectSubGroups!: pulumi.Output<number>;
    public readonly parentId!: pulumi.Output<number | undefined>;
    public readonly template!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly userPermission!: pulumi.Output<string>;
    public readonly widgetTokens!: pulumi.Output<outputs.DashboardGroupWidgetToken[] | undefined>;

    /**
     * Create a DashboardGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DashboardGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardGroupArgs | DashboardGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardGroupState | undefined;
            resourceInputs["dashboards"] = state ? state.dashboards : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fullPath"] = state ? state.fullPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numOfDashboards"] = state ? state.numOfDashboards : undefined;
            resourceInputs["numOfDirectDashboards"] = state ? state.numOfDirectDashboards : undefined;
            resourceInputs["numOfDirectSubGroups"] = state ? state.numOfDirectSubGroups : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["userPermission"] = state ? state.userPermission : undefined;
            resourceInputs["widgetTokens"] = state ? state.widgetTokens : undefined;
        } else {
            const args = argsOrState as DashboardGroupArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["widgetTokens"] = args ? args.widgetTokens : undefined;
            resourceInputs["dashboards"] = undefined /*out*/;
            resourceInputs["fullPath"] = undefined /*out*/;
            resourceInputs["numOfDashboards"] = undefined /*out*/;
            resourceInputs["numOfDirectDashboards"] = undefined /*out*/;
            resourceInputs["numOfDirectSubGroups"] = undefined /*out*/;
            resourceInputs["userPermission"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DashboardGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DashboardGroup resources.
 */
export interface DashboardGroupState {
    dashboards?: pulumi.Input<pulumi.Input<inputs.DashboardGroupDashboard>[]>;
    description?: pulumi.Input<string>;
    fullPath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numOfDashboards?: pulumi.Input<number>;
    numOfDirectDashboards?: pulumi.Input<number>;
    numOfDirectSubGroups?: pulumi.Input<number>;
    parentId?: pulumi.Input<number>;
    template?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    userPermission?: pulumi.Input<string>;
    widgetTokens?: pulumi.Input<pulumi.Input<inputs.DashboardGroupWidgetToken>[]>;
}

/**
 * The set of arguments for constructing a DashboardGroup resource.
 */
export interface DashboardGroupArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parentId?: pulumi.Input<number>;
    template?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    widgetTokens?: pulumi.Input<pulumi.Input<inputs.DashboardGroupWidgetToken>[]>;
}
