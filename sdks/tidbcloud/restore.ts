// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Restore extends pulumi.CustomResource {
    /**
     * Get an existing Restore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RestoreState, opts?: pulumi.CustomResourceOptions): Restore {
        return new Restore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tidbcloud:index/restore:Restore';

    /**
     * Returns true if the given object is an instance of Restore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Restore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Restore.__pulumiType;
    }

    /**
     * The ID of the backup
     */
    public readonly backupId!: pulumi.Output<string>;
    /**
     * The information of the restored cluster. The restored cluster is the new cluster your backup data is restored to.
     */
    public /*out*/ readonly cluster!: pulumi.Output<outputs.RestoreCluster>;
    /**
     * The ID of the cluster
     */
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    /**
     * The configuration of the cluster
     */
    public readonly config!: pulumi.Output<outputs.RestoreConfig>;
    /**
     * The creation time of the backup in UTC.The time format follows the ISO8601 standard, which is YYYY-MM-DD
     * (year-month-day) + T +HH:MM:SS (hour-minutes-seconds) + Z. For example, 2020-01-01T00:00:00Z.
     */
    public /*out*/ readonly createTimestamp!: pulumi.Output<string>;
    /**
     * The error message of restore if failed.
     */
    public /*out*/ readonly errorMessage!: pulumi.Output<string>;
    /**
     * The name of the restore
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project. You can get the project ID from tidbcloud.getProjects datasource.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Enum: "PENDING" "RUNNING" "FAILED" "SUCCESS" The status of the restore task.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a Restore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RestoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RestoreArgs | RestoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RestoreState | undefined;
            resourceInputs["backupId"] = state ? state.backupId : undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["createTimestamp"] = state ? state.createTimestamp : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as RestoreArgs | undefined;
            if ((!args || args.backupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupId'");
            }
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["backupId"] = args ? args.backupId : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["cluster"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["createTimestamp"] = undefined /*out*/;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Restore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Restore resources.
 */
export interface RestoreState {
    /**
     * The ID of the backup
     */
    backupId?: pulumi.Input<string>;
    /**
     * The information of the restored cluster. The restored cluster is the new cluster your backup data is restored to.
     */
    cluster?: pulumi.Input<inputs.RestoreCluster>;
    /**
     * The ID of the cluster
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The configuration of the cluster
     */
    config?: pulumi.Input<inputs.RestoreConfig>;
    /**
     * The creation time of the backup in UTC.The time format follows the ISO8601 standard, which is YYYY-MM-DD
     * (year-month-day) + T +HH:MM:SS (hour-minutes-seconds) + Z. For example, 2020-01-01T00:00:00Z.
     */
    createTimestamp?: pulumi.Input<string>;
    /**
     * The error message of restore if failed.
     */
    errorMessage?: pulumi.Input<string>;
    /**
     * The name of the restore
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project. You can get the project ID from tidbcloud.getProjects datasource.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Enum: "PENDING" "RUNNING" "FAILED" "SUCCESS" The status of the restore task.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Restore resource.
 */
export interface RestoreArgs {
    /**
     * The ID of the backup
     */
    backupId: pulumi.Input<string>;
    /**
     * The configuration of the cluster
     */
    config: pulumi.Input<inputs.RestoreConfig>;
    /**
     * The name of the restore
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project. You can get the project ID from tidbcloud.getProjects datasource.
     */
    projectId: pulumi.Input<string>;
}
