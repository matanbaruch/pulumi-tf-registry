// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { GetBackupsArgs, GetBackupsResult, GetBackupsOutputArgs } from "./getBackups";
export const getBackups: typeof import("./getBackups").getBackups = null as any;
export const getBackupsOutput: typeof import("./getBackups").getBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getBackups","getBackupsOutput"], () => require("./getBackups"));

export { GetClusterSpecsResult } from "./getClusterSpecs";
export const getClusterSpecs: typeof import("./getClusterSpecs").getClusterSpecs = null as any;
export const getClusterSpecsOutput: typeof import("./getClusterSpecs").getClusterSpecsOutput = null as any;
utilities.lazyLoad(exports, ["getClusterSpecs","getClusterSpecsOutput"], () => require("./getClusterSpecs"));

export { GetClustersArgs, GetClustersResult, GetClustersOutputArgs } from "./getClusters";
export const getClusters: typeof import("./getClusters").getClusters = null as any;
export const getClustersOutput: typeof import("./getClusters").getClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClusters","getClustersOutput"], () => require("./getClusters"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetRestoresArgs, GetRestoresResult, GetRestoresOutputArgs } from "./getRestores";
export const getRestores: typeof import("./getRestores").getRestores = null as any;
export const getRestoresOutput: typeof import("./getRestores").getRestoresOutput = null as any;
utilities.lazyLoad(exports, ["getRestores","getRestoresOutput"], () => require("./getRestores"));

export { ImportArgs, ImportState } from "./import";
export type Import = import("./import").Import;
export const Import: typeof import("./import").Import = null as any;
utilities.lazyLoad(exports, ["Import"], () => require("./import"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RestoreArgs, RestoreState } from "./restore";
export type Restore = import("./restore").Restore;
export const Restore: typeof import("./restore").Restore = null as any;
utilities.lazyLoad(exports, ["Restore"], () => require("./restore"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tidbcloud:index/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "tidbcloud:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "tidbcloud:index/import:Import":
                return new Import(name, <any>undefined, { urn })
            case "tidbcloud:index/restore:Restore":
                return new Restore(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tidbcloud", "index/backup", _module)
pulumi.runtime.registerResourceModule("tidbcloud", "index/cluster", _module)
pulumi.runtime.registerResourceModule("tidbcloud", "index/import", _module)
pulumi.runtime.registerResourceModule("tidbcloud", "index/restore", _module)
pulumi.runtime.registerResourcePackage("tidbcloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:tidbcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
