// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Import extends pulumi.CustomResource {
    /**
     * Get an existing Import resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImportState, opts?: pulumi.CustomResourceOptions): Import {
        return new Import(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tidbcloud:index/import:Import';

    /**
     * Returns true if the given object is an instance of Import.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Import {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Import.__pulumiType;
    }

    /**
     * Import task all completed tables
     */
    public /*out*/ readonly allCompletedTables!: pulumi.Output<outputs.ImportAllCompletedTable[]>;
    /**
     * The arn of AWS IAM role, used for importing from S3
     */
    public readonly awsRoleArn!: pulumi.Output<string | undefined>;
    /**
     * The ID of your cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Import task completed percent
     */
    public /*out*/ readonly completedPercent!: pulumi.Output<number>;
    /**
     * Import task completed tables
     */
    public /*out*/ readonly completedTables!: pulumi.Output<number>;
    /**
     * Import task create time
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The CSV configuration.See https://docs.pingcap.com/tidbcloud/csv-config-for-import-data for more details.
     */
    public readonly csvFormat!: pulumi.Output<outputs.ImportCsvFormat | undefined>;
    /**
     * The format of data to import.Enum: "SqlFile" "AuroraSnapshot" "CSV" "Parquet".
     */
    public readonly dataFormat!: pulumi.Output<string>;
    /**
     * Import task elapsed time seconds
     */
    public /*out*/ readonly elapsedTimeSeconds!: pulumi.Output<number>;
    /**
     * The local file path, used for importing from LOCAL
     */
    public readonly fileName!: pulumi.Output<string | undefined>;
    /**
     * Import task message
     */
    public /*out*/ readonly message!: pulumi.Output<string>;
    /**
     * The file name returned by generating upload url, used for importing from local file.
     */
    public /*out*/ readonly newFileName!: pulumi.Output<string>;
    /**
     * Import task pending tables
     */
    public /*out*/ readonly pendingTables!: pulumi.Output<number>;
    /**
     * Import task post import completed percent
     */
    public /*out*/ readonly postImportCompletedPercent!: pulumi.Output<number>;
    /**
     * Import task processed source data size
     */
    public /*out*/ readonly processedSourceDataSize!: pulumi.Output<string>;
    /**
     * The ID of the project. You can get the project ID from tidbcloud.getProjects datasource.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The full s3 path that contains data to import, used for importing from S3
     */
    public readonly sourceUrl!: pulumi.Output<string | undefined>;
    /**
     * Import task status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The target db and table to import data, used for importing from LOCAL
     */
    public readonly targetTable!: pulumi.Output<outputs.ImportTargetTable | undefined>;
    /**
     * Import task total files
     */
    public /*out*/ readonly totalFiles!: pulumi.Output<number>;
    /**
     * Import task total size
     */
    public /*out*/ readonly totalSize!: pulumi.Output<string>;
    /**
     * Import task total tables count
     */
    public /*out*/ readonly totalTablesCount!: pulumi.Output<number>;
    /**
     * The type of data source. Enum: "S3" "LOCAL".
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Import resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImportArgs | ImportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImportState | undefined;
            resourceInputs["allCompletedTables"] = state ? state.allCompletedTables : undefined;
            resourceInputs["awsRoleArn"] = state ? state.awsRoleArn : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["completedPercent"] = state ? state.completedPercent : undefined;
            resourceInputs["completedTables"] = state ? state.completedTables : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["csvFormat"] = state ? state.csvFormat : undefined;
            resourceInputs["dataFormat"] = state ? state.dataFormat : undefined;
            resourceInputs["elapsedTimeSeconds"] = state ? state.elapsedTimeSeconds : undefined;
            resourceInputs["fileName"] = state ? state.fileName : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["newFileName"] = state ? state.newFileName : undefined;
            resourceInputs["pendingTables"] = state ? state.pendingTables : undefined;
            resourceInputs["postImportCompletedPercent"] = state ? state.postImportCompletedPercent : undefined;
            resourceInputs["processedSourceDataSize"] = state ? state.processedSourceDataSize : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["sourceUrl"] = state ? state.sourceUrl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targetTable"] = state ? state.targetTable : undefined;
            resourceInputs["totalFiles"] = state ? state.totalFiles : undefined;
            resourceInputs["totalSize"] = state ? state.totalSize : undefined;
            resourceInputs["totalTablesCount"] = state ? state.totalTablesCount : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ImportArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.dataFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFormat'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["awsRoleArn"] = args ? args.awsRoleArn : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["csvFormat"] = args ? args.csvFormat : undefined;
            resourceInputs["dataFormat"] = args ? args.dataFormat : undefined;
            resourceInputs["fileName"] = args ? args.fileName : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["sourceUrl"] = args ? args.sourceUrl : undefined;
            resourceInputs["targetTable"] = args ? args.targetTable : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["allCompletedTables"] = undefined /*out*/;
            resourceInputs["completedPercent"] = undefined /*out*/;
            resourceInputs["completedTables"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["elapsedTimeSeconds"] = undefined /*out*/;
            resourceInputs["message"] = undefined /*out*/;
            resourceInputs["newFileName"] = undefined /*out*/;
            resourceInputs["pendingTables"] = undefined /*out*/;
            resourceInputs["postImportCompletedPercent"] = undefined /*out*/;
            resourceInputs["processedSourceDataSize"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["totalFiles"] = undefined /*out*/;
            resourceInputs["totalSize"] = undefined /*out*/;
            resourceInputs["totalTablesCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Import.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Import resources.
 */
export interface ImportState {
    /**
     * Import task all completed tables
     */
    allCompletedTables?: pulumi.Input<pulumi.Input<inputs.ImportAllCompletedTable>[]>;
    /**
     * The arn of AWS IAM role, used for importing from S3
     */
    awsRoleArn?: pulumi.Input<string>;
    /**
     * The ID of your cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Import task completed percent
     */
    completedPercent?: pulumi.Input<number>;
    /**
     * Import task completed tables
     */
    completedTables?: pulumi.Input<number>;
    /**
     * Import task create time
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The CSV configuration.See https://docs.pingcap.com/tidbcloud/csv-config-for-import-data for more details.
     */
    csvFormat?: pulumi.Input<inputs.ImportCsvFormat>;
    /**
     * The format of data to import.Enum: "SqlFile" "AuroraSnapshot" "CSV" "Parquet".
     */
    dataFormat?: pulumi.Input<string>;
    /**
     * Import task elapsed time seconds
     */
    elapsedTimeSeconds?: pulumi.Input<number>;
    /**
     * The local file path, used for importing from LOCAL
     */
    fileName?: pulumi.Input<string>;
    /**
     * Import task message
     */
    message?: pulumi.Input<string>;
    /**
     * The file name returned by generating upload url, used for importing from local file.
     */
    newFileName?: pulumi.Input<string>;
    /**
     * Import task pending tables
     */
    pendingTables?: pulumi.Input<number>;
    /**
     * Import task post import completed percent
     */
    postImportCompletedPercent?: pulumi.Input<number>;
    /**
     * Import task processed source data size
     */
    processedSourceDataSize?: pulumi.Input<string>;
    /**
     * The ID of the project. You can get the project ID from tidbcloud.getProjects datasource.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The full s3 path that contains data to import, used for importing from S3
     */
    sourceUrl?: pulumi.Input<string>;
    /**
     * Import task status
     */
    status?: pulumi.Input<string>;
    /**
     * The target db and table to import data, used for importing from LOCAL
     */
    targetTable?: pulumi.Input<inputs.ImportTargetTable>;
    /**
     * Import task total files
     */
    totalFiles?: pulumi.Input<number>;
    /**
     * Import task total size
     */
    totalSize?: pulumi.Input<string>;
    /**
     * Import task total tables count
     */
    totalTablesCount?: pulumi.Input<number>;
    /**
     * The type of data source. Enum: "S3" "LOCAL".
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Import resource.
 */
export interface ImportArgs {
    /**
     * The arn of AWS IAM role, used for importing from S3
     */
    awsRoleArn?: pulumi.Input<string>;
    /**
     * The ID of your cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The CSV configuration.See https://docs.pingcap.com/tidbcloud/csv-config-for-import-data for more details.
     */
    csvFormat?: pulumi.Input<inputs.ImportCsvFormat>;
    /**
     * The format of data to import.Enum: "SqlFile" "AuroraSnapshot" "CSV" "Parquet".
     */
    dataFormat: pulumi.Input<string>;
    /**
     * The local file path, used for importing from LOCAL
     */
    fileName?: pulumi.Input<string>;
    /**
     * The ID of the project. You can get the project ID from tidbcloud.getProjects datasource.
     */
    projectId: pulumi.Input<string>;
    /**
     * The full s3 path that contains data to import, used for importing from S3
     */
    sourceUrl?: pulumi.Input<string>;
    /**
     * The target db and table to import data, used for importing from LOCAL
     */
    targetTable?: pulumi.Input<inputs.ImportTargetTable>;
    /**
     * The type of data source. Enum: "S3" "LOCAL".
     */
    type: pulumi.Input<string>;
}
