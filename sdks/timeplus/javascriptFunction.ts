// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class JavascriptFunction extends pulumi.CustomResource {
    /**
     * Get an existing JavascriptFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JavascriptFunctionState, opts?: pulumi.CustomResourceOptions): JavascriptFunction {
        return new JavascriptFunction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeplus:index/javascriptFunction:JavascriptFunction';

    /**
     * Returns true if the given object is an instance of JavascriptFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JavascriptFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JavascriptFunction.__pulumiType;
    }

    /**
     * Describe an argument of the javascript function, argument order matters
     */
    public readonly args!: pulumi.Output<outputs.JavascriptFunctionArg[] | undefined>;
    /**
     * A detailed text describes the javascript function
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indecates if the javascript function an aggregate function
     */
    public readonly isAggregateFunction!: pulumi.Output<boolean | undefined>;
    /**
     * The javascript function name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The type of the function's return value
     */
    public readonly returnType!: pulumi.Output<string>;
    /**
     * The javascript function source code
     */
    public readonly source!: pulumi.Output<string>;

    /**
     * Create a JavascriptFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JavascriptFunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JavascriptFunctionArgs | JavascriptFunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JavascriptFunctionState | undefined;
            resourceInputs["args"] = state ? state.args : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isAggregateFunction"] = state ? state.isAggregateFunction : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["returnType"] = state ? state.returnType : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
        } else {
            const args = argsOrState as JavascriptFunctionArgs | undefined;
            if ((!args || args.returnType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'returnType'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["args"] = args ? args.args : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isAggregateFunction"] = args ? args.isAggregateFunction : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["returnType"] = args ? args.returnType : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JavascriptFunction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering JavascriptFunction resources.
 */
export interface JavascriptFunctionState {
    /**
     * Describe an argument of the javascript function, argument order matters
     */
    args?: pulumi.Input<pulumi.Input<inputs.JavascriptFunctionArg>[]>;
    /**
     * A detailed text describes the javascript function
     */
    description?: pulumi.Input<string>;
    /**
     * Indecates if the javascript function an aggregate function
     */
    isAggregateFunction?: pulumi.Input<boolean>;
    /**
     * The javascript function name
     */
    name?: pulumi.Input<string>;
    /**
     * The type of the function's return value
     */
    returnType?: pulumi.Input<string>;
    /**
     * The javascript function source code
     */
    source?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JavascriptFunction resource.
 */
export interface JavascriptFunctionArgs {
    /**
     * Describe an argument of the javascript function, argument order matters
     */
    args?: pulumi.Input<pulumi.Input<inputs.JavascriptFunctionArg>[]>;
    /**
     * A detailed text describes the javascript function
     */
    description?: pulumi.Input<string>;
    /**
     * Indecates if the javascript function an aggregate function
     */
    isAggregateFunction?: pulumi.Input<boolean>;
    /**
     * The javascript function name
     */
    name?: pulumi.Input<string>;
    /**
     * The type of the function's return value
     */
    returnType: pulumi.Input<string>;
    /**
     * The javascript function source code
     */
    source: pulumi.Input<string>;
}
