// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Sink extends pulumi.CustomResource {
    /**
     * Get an existing Sink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SinkState, opts?: pulumi.CustomResourceOptions): Sink {
        return new Sink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeplus:index/sink:Sink';

    /**
     * Returns true if the given object is an instance of Sink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sink.__pulumiType;
    }

    /**
     * A detailed text describes the sink
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The human-friendly name for the sink
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A JSON object defines the configurations for the specific sink type. The properites could contain sensitive information
     * like password, secret, etc.
     */
    public readonly properties!: pulumi.Output<string>;
    /**
     * The query the sink uses to generate data
     */
    public readonly query!: pulumi.Output<string>;
    /**
     * The type of the sink, refer to the Timeplus document for supported sink types
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Sink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SinkArgs | SinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SinkState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SinkArgs | undefined;
            if ((!args || args.properties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["properties"] = args?.properties ? pulumi.secret(args.properties) : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["properties"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Sink.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sink resources.
 */
export interface SinkState {
    /**
     * A detailed text describes the sink
     */
    description?: pulumi.Input<string>;
    /**
     * The human-friendly name for the sink
     */
    name?: pulumi.Input<string>;
    /**
     * A JSON object defines the configurations for the specific sink type. The properites could contain sensitive information
     * like password, secret, etc.
     */
    properties?: pulumi.Input<string>;
    /**
     * The query the sink uses to generate data
     */
    query?: pulumi.Input<string>;
    /**
     * The type of the sink, refer to the Timeplus document for supported sink types
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sink resource.
 */
export interface SinkArgs {
    /**
     * A detailed text describes the sink
     */
    description?: pulumi.Input<string>;
    /**
     * The human-friendly name for the sink
     */
    name?: pulumi.Input<string>;
    /**
     * A JSON object defines the configurations for the specific sink type. The properites could contain sensitive information
     * like password, secret, etc.
     */
    properties: pulumi.Input<string>;
    /**
     * The query the sink uses to generate data
     */
    query: pulumi.Input<string>;
    /**
     * The type of the sink, refer to the Timeplus document for supported sink types
     */
    type: pulumi.Input<string>;
}
