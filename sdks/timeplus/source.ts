// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Source extends pulumi.CustomResource {
    /**
     * Get an existing Source resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceState, opts?: pulumi.CustomResourceOptions): Source {
        return new Source(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeplus:index/source:Source';

    /**
     * Returns true if the given object is an instance of Source.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Source {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Source.__pulumiType;
    }

    /**
     * A detailed text describes the source
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The human-friendly name for the source
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A JSON object defines the configurations for the specific source type. The properites could contain sensitive
     * information like password, secret, etc.
     */
    public readonly properties!: pulumi.Output<string>;
    /**
     * The target stream the source ingests data to
     */
    public readonly stream!: pulumi.Output<string>;
    /**
     * The type of the source, refer to the Timeplus document for supported source types
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Source resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceArgs | SourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["stream"] = state ? state.stream : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SourceArgs | undefined;
            if ((!args || args.properties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            if ((!args || args.stream === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stream'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["properties"] = args?.properties ? pulumi.secret(args.properties) : undefined;
            resourceInputs["stream"] = args ? args.stream : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["properties"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Source.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Source resources.
 */
export interface SourceState {
    /**
     * A detailed text describes the source
     */
    description?: pulumi.Input<string>;
    /**
     * The human-friendly name for the source
     */
    name?: pulumi.Input<string>;
    /**
     * A JSON object defines the configurations for the specific source type. The properites could contain sensitive
     * information like password, secret, etc.
     */
    properties?: pulumi.Input<string>;
    /**
     * The target stream the source ingests data to
     */
    stream?: pulumi.Input<string>;
    /**
     * The type of the source, refer to the Timeplus document for supported source types
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Source resource.
 */
export interface SourceArgs {
    /**
     * A detailed text describes the source
     */
    description?: pulumi.Input<string>;
    /**
     * The human-friendly name for the source
     */
    name?: pulumi.Input<string>;
    /**
     * A JSON object defines the configurations for the specific source type. The properites could contain sensitive
     * information like password, secret, etc.
     */
    properties: pulumi.Input<string>;
    /**
     * The target stream the source ingests data to
     */
    stream: pulumi.Input<string>;
    /**
     * The type of the source, refer to the Timeplus document for supported source types
     */
    type: pulumi.Input<string>;
}
