// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertArgs, AlertState } from "./alert";
export type Alert = import("./alert").Alert;
export const Alert: typeof import("./alert").Alert = null as any;
utilities.lazyLoad(exports, ["Alert"], () => require("./alert"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { GetAlertArgs, GetAlertResult, GetAlertOutputArgs } from "./getAlert";
export const getAlert: typeof import("./getAlert").getAlert = null as any;
export const getAlertOutput: typeof import("./getAlert").getAlertOutput = null as any;
utilities.lazyLoad(exports, ["getAlert","getAlertOutput"], () => require("./getAlert"));

export { GetDashboardArgs, GetDashboardResult, GetDashboardOutputArgs } from "./getDashboard";
export const getDashboard: typeof import("./getDashboard").getDashboard = null as any;
export const getDashboardOutput: typeof import("./getDashboard").getDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getDashboard","getDashboardOutput"], () => require("./getDashboard"));

export { GetJavascriptFunctionArgs, GetJavascriptFunctionResult, GetJavascriptFunctionOutputArgs } from "./getJavascriptFunction";
export const getJavascriptFunction: typeof import("./getJavascriptFunction").getJavascriptFunction = null as any;
export const getJavascriptFunctionOutput: typeof import("./getJavascriptFunction").getJavascriptFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getJavascriptFunction","getJavascriptFunctionOutput"], () => require("./getJavascriptFunction"));

export { GetMaterializedViewArgs, GetMaterializedViewResult, GetMaterializedViewOutputArgs } from "./getMaterializedView";
export const getMaterializedView: typeof import("./getMaterializedView").getMaterializedView = null as any;
export const getMaterializedViewOutput: typeof import("./getMaterializedView").getMaterializedViewOutput = null as any;
utilities.lazyLoad(exports, ["getMaterializedView","getMaterializedViewOutput"], () => require("./getMaterializedView"));

export { GetRemoteFunctionArgs, GetRemoteFunctionResult, GetRemoteFunctionOutputArgs } from "./getRemoteFunction";
export const getRemoteFunction: typeof import("./getRemoteFunction").getRemoteFunction = null as any;
export const getRemoteFunctionOutput: typeof import("./getRemoteFunction").getRemoteFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteFunction","getRemoteFunctionOutput"], () => require("./getRemoteFunction"));

export { GetSinkArgs, GetSinkResult, GetSinkOutputArgs } from "./getSink";
export const getSink: typeof import("./getSink").getSink = null as any;
export const getSinkOutput: typeof import("./getSink").getSinkOutput = null as any;
utilities.lazyLoad(exports, ["getSink","getSinkOutput"], () => require("./getSink"));

export { GetSourceArgs, GetSourceResult, GetSourceOutputArgs } from "./getSource";
export const getSource: typeof import("./getSource").getSource = null as any;
export const getSourceOutput: typeof import("./getSource").getSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSource","getSourceOutput"], () => require("./getSource"));

export { GetStreamArgs, GetStreamResult, GetStreamOutputArgs } from "./getStream";
export const getStream: typeof import("./getStream").getStream = null as any;
export const getStreamOutput: typeof import("./getStream").getStreamOutput = null as any;
utilities.lazyLoad(exports, ["getStream","getStreamOutput"], () => require("./getStream"));

export { GetViewArgs, GetViewResult, GetViewOutputArgs } from "./getView";
export const getView: typeof import("./getView").getView = null as any;
export const getViewOutput: typeof import("./getView").getViewOutput = null as any;
utilities.lazyLoad(exports, ["getView","getViewOutput"], () => require("./getView"));

export { JavascriptFunctionArgs, JavascriptFunctionState } from "./javascriptFunction";
export type JavascriptFunction = import("./javascriptFunction").JavascriptFunction;
export const JavascriptFunction: typeof import("./javascriptFunction").JavascriptFunction = null as any;
utilities.lazyLoad(exports, ["JavascriptFunction"], () => require("./javascriptFunction"));

export { MaterializedViewArgs, MaterializedViewState } from "./materializedView";
export type MaterializedView = import("./materializedView").MaterializedView;
export const MaterializedView: typeof import("./materializedView").MaterializedView = null as any;
utilities.lazyLoad(exports, ["MaterializedView"], () => require("./materializedView"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RemoteFunctionArgs, RemoteFunctionState } from "./remoteFunction";
export type RemoteFunction = import("./remoteFunction").RemoteFunction;
export const RemoteFunction: typeof import("./remoteFunction").RemoteFunction = null as any;
utilities.lazyLoad(exports, ["RemoteFunction"], () => require("./remoteFunction"));

export { SinkArgs, SinkState } from "./sink";
export type Sink = import("./sink").Sink;
export const Sink: typeof import("./sink").Sink = null as any;
utilities.lazyLoad(exports, ["Sink"], () => require("./sink"));

export { SourceArgs, SourceState } from "./source";
export type Source = import("./source").Source;
export const Source: typeof import("./source").Source = null as any;
utilities.lazyLoad(exports, ["Source"], () => require("./source"));

export { StreamArgs, StreamState } from "./stream";
export type Stream = import("./stream").Stream;
export const Stream: typeof import("./stream").Stream = null as any;
utilities.lazyLoad(exports, ["Stream"], () => require("./stream"));

export { ViewArgs, ViewState } from "./view";
export type View = import("./view").View;
export const View: typeof import("./view").View = null as any;
utilities.lazyLoad(exports, ["View"], () => require("./view"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "timeplus:index/alert:Alert":
                return new Alert(name, <any>undefined, { urn })
            case "timeplus:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "timeplus:index/javascriptFunction:JavascriptFunction":
                return new JavascriptFunction(name, <any>undefined, { urn })
            case "timeplus:index/materializedView:MaterializedView":
                return new MaterializedView(name, <any>undefined, { urn })
            case "timeplus:index/remoteFunction:RemoteFunction":
                return new RemoteFunction(name, <any>undefined, { urn })
            case "timeplus:index/sink:Sink":
                return new Sink(name, <any>undefined, { urn })
            case "timeplus:index/source:Source":
                return new Source(name, <any>undefined, { urn })
            case "timeplus:index/stream:Stream":
                return new Stream(name, <any>undefined, { urn })
            case "timeplus:index/view:View":
                return new View(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("timeplus", "index/alert", _module)
pulumi.runtime.registerResourceModule("timeplus", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("timeplus", "index/javascriptFunction", _module)
pulumi.runtime.registerResourceModule("timeplus", "index/materializedView", _module)
pulumi.runtime.registerResourceModule("timeplus", "index/remoteFunction", _module)
pulumi.runtime.registerResourceModule("timeplus", "index/sink", _module)
pulumi.runtime.registerResourceModule("timeplus", "index/source", _module)
pulumi.runtime.registerResourceModule("timeplus", "index/stream", _module)
pulumi.runtime.registerResourceModule("timeplus", "index/view", _module)
pulumi.runtime.registerResourcePackage("timeplus", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:timeplus") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
