// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MaterializedView extends pulumi.CustomResource {
    /**
     * Get an existing MaterializedView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MaterializedViewState, opts?: pulumi.CustomResourceOptions): MaterializedView {
        return new MaterializedView(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeplus:index/materializedView:MaterializedView';

    /**
     * Returns true if the given object is an instance of MaterializedView.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MaterializedView {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MaterializedView.__pulumiType;
    }

    /**
     * A detailed text describes the view
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A SQL expression defines the maximum age of historical data
     */
    public readonly historyTtl!: pulumi.Output<string | undefined>;
    /**
     * The view name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The query SQL of the view. Changing the SQL will lead to a recreation.
     */
    public readonly query!: pulumi.Output<string>;
    /**
     * The retention size threadhold in bytes indicates how many data could be kept in the streaming store
     */
    public readonly retentionBytes!: pulumi.Output<number>;
    /**
     * The retention period threadhold in millisecond indicates how long data could be kept in the streaming store
     */
    public readonly retentionMs!: pulumi.Output<number>;
    /**
     * The optional stream name that the materialized view writes data to
     */
    public readonly targetStream!: pulumi.Output<string | undefined>;

    /**
     * Create a MaterializedView resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MaterializedViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MaterializedViewArgs | MaterializedViewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MaterializedViewState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["historyTtl"] = state ? state.historyTtl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["retentionBytes"] = state ? state.retentionBytes : undefined;
            resourceInputs["retentionMs"] = state ? state.retentionMs : undefined;
            resourceInputs["targetStream"] = state ? state.targetStream : undefined;
        } else {
            const args = argsOrState as MaterializedViewArgs | undefined;
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["historyTtl"] = args ? args.historyTtl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["retentionBytes"] = args ? args.retentionBytes : undefined;
            resourceInputs["retentionMs"] = args ? args.retentionMs : undefined;
            resourceInputs["targetStream"] = args ? args.targetStream : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MaterializedView.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MaterializedView resources.
 */
export interface MaterializedViewState {
    /**
     * A detailed text describes the view
     */
    description?: pulumi.Input<string>;
    /**
     * A SQL expression defines the maximum age of historical data
     */
    historyTtl?: pulumi.Input<string>;
    /**
     * The view name
     */
    name?: pulumi.Input<string>;
    /**
     * The query SQL of the view. Changing the SQL will lead to a recreation.
     */
    query?: pulumi.Input<string>;
    /**
     * The retention size threadhold in bytes indicates how many data could be kept in the streaming store
     */
    retentionBytes?: pulumi.Input<number>;
    /**
     * The retention period threadhold in millisecond indicates how long data could be kept in the streaming store
     */
    retentionMs?: pulumi.Input<number>;
    /**
     * The optional stream name that the materialized view writes data to
     */
    targetStream?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MaterializedView resource.
 */
export interface MaterializedViewArgs {
    /**
     * A detailed text describes the view
     */
    description?: pulumi.Input<string>;
    /**
     * A SQL expression defines the maximum age of historical data
     */
    historyTtl?: pulumi.Input<string>;
    /**
     * The view name
     */
    name?: pulumi.Input<string>;
    /**
     * The query SQL of the view. Changing the SQL will lead to a recreation.
     */
    query: pulumi.Input<string>;
    /**
     * The retention size threadhold in bytes indicates how many data could be kept in the streaming store
     */
    retentionBytes?: pulumi.Input<number>;
    /**
     * The retention period threadhold in millisecond indicates how long data could be kept in the streaming store
     */
    retentionMs?: pulumi.Input<number>;
    /**
     * The optional stream name that the materialized view writes data to
     */
    targetStream?: pulumi.Input<string>;
}
