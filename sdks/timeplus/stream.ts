// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Stream extends pulumi.CustomResource {
    /**
     * Get an existing Stream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamState, opts?: pulumi.CustomResourceOptions): Stream {
        return new Stream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeplus:index/stream:Stream';

    /**
     * Returns true if the given object is an instance of Stream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Stream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stream.__pulumiType;
    }

    /**
     * Define the columns of the stream
     */
    public readonly columns!: pulumi.Output<outputs.StreamColumn[] | undefined>;
    /**
     * A detailed text describes the stream
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A SQL expression defines the maximum age of data that are persisted in the historical store
     */
    public readonly historyTtl!: pulumi.Output<string | undefined>;
    /**
     * The stream mode. Options: append, changelog, changelog_kv, versioned_kv. Default: "append"
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The stream name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The retention size threadhold in bytes indicates how many data could be kept in the streaming store
     */
    public readonly retentionBytes!: pulumi.Output<number>;
    /**
     * The retention period threadhold in millisecond indicates how long data could be kept in the streaming store
     */
    public readonly retentionMs!: pulumi.Output<number>;

    /**
     * Create a Stream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamArgs | StreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamState | undefined;
            resourceInputs["columns"] = state ? state.columns : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["historyTtl"] = state ? state.historyTtl : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["retentionBytes"] = state ? state.retentionBytes : undefined;
            resourceInputs["retentionMs"] = state ? state.retentionMs : undefined;
        } else {
            const args = argsOrState as StreamArgs | undefined;
            resourceInputs["columns"] = args ? args.columns : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["historyTtl"] = args ? args.historyTtl : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["retentionBytes"] = args ? args.retentionBytes : undefined;
            resourceInputs["retentionMs"] = args ? args.retentionMs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Stream.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Stream resources.
 */
export interface StreamState {
    /**
     * Define the columns of the stream
     */
    columns?: pulumi.Input<pulumi.Input<inputs.StreamColumn>[]>;
    /**
     * A detailed text describes the stream
     */
    description?: pulumi.Input<string>;
    /**
     * A SQL expression defines the maximum age of data that are persisted in the historical store
     */
    historyTtl?: pulumi.Input<string>;
    /**
     * The stream mode. Options: append, changelog, changelog_kv, versioned_kv. Default: "append"
     */
    mode?: pulumi.Input<string>;
    /**
     * The stream name
     */
    name?: pulumi.Input<string>;
    /**
     * The retention size threadhold in bytes indicates how many data could be kept in the streaming store
     */
    retentionBytes?: pulumi.Input<number>;
    /**
     * The retention period threadhold in millisecond indicates how long data could be kept in the streaming store
     */
    retentionMs?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Stream resource.
 */
export interface StreamArgs {
    /**
     * Define the columns of the stream
     */
    columns?: pulumi.Input<pulumi.Input<inputs.StreamColumn>[]>;
    /**
     * A detailed text describes the stream
     */
    description?: pulumi.Input<string>;
    /**
     * A SQL expression defines the maximum age of data that are persisted in the historical store
     */
    historyTtl?: pulumi.Input<string>;
    /**
     * The stream mode. Options: append, changelog, changelog_kv, versioned_kv. Default: "append"
     */
    mode?: pulumi.Input<string>;
    /**
     * The stream name
     */
    name?: pulumi.Input<string>;
    /**
     * The retention size threadhold in bytes indicates how many data could be kept in the streaming store
     */
    retentionBytes?: pulumi.Input<number>;
    /**
     * The retention period threadhold in millisecond indicates how long data could be kept in the streaming store
     */
    retentionMs?: pulumi.Input<number>;
}
