// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Permission extends pulumi.CustomResource {
    /**
     * Get an existing Permission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionState, opts?: pulumi.CustomResourceOptions): Permission {
        return new Permission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'platform:index/permission:Permission';

    /**
     * Returns true if the given object is an instance of Permission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Permission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Permission.__pulumiType;
    }

    /**
     * Defines the repositories to be used or excluded.
     */
    public readonly artifact!: pulumi.Output<outputs.PermissionArtifact | undefined>;
    /**
     * Defines the builds to be used or excluded.
     */
    public readonly build!: pulumi.Output<outputs.PermissionBuild | undefined>;
    /**
     * Defines the destinations to be used or excluded.
     */
    public readonly destination!: pulumi.Output<outputs.PermissionDestination | undefined>;
    /**
     * Permission name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Defines the pipeline sources to be used or excluded.
     */
    public readonly pipelineSource!: pulumi.Output<outputs.PermissionPipelineSource | undefined>;
    /**
     * Defines the release bundles to be used or excluded.
     */
    public readonly releaseBundle!: pulumi.Output<outputs.PermissionReleaseBundle | undefined>;

    /**
     * Create a Permission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionArgs | PermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionState | undefined;
            resourceInputs["artifact"] = state ? state.artifact : undefined;
            resourceInputs["build"] = state ? state.build : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pipelineSource"] = state ? state.pipelineSource : undefined;
            resourceInputs["releaseBundle"] = state ? state.releaseBundle : undefined;
        } else {
            const args = argsOrState as PermissionArgs | undefined;
            resourceInputs["artifact"] = args ? args.artifact : undefined;
            resourceInputs["build"] = args ? args.build : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pipelineSource"] = args ? args.pipelineSource : undefined;
            resourceInputs["releaseBundle"] = args ? args.releaseBundle : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Permission.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Permission resources.
 */
export interface PermissionState {
    /**
     * Defines the repositories to be used or excluded.
     */
    artifact?: pulumi.Input<inputs.PermissionArtifact>;
    /**
     * Defines the builds to be used or excluded.
     */
    build?: pulumi.Input<inputs.PermissionBuild>;
    /**
     * Defines the destinations to be used or excluded.
     */
    destination?: pulumi.Input<inputs.PermissionDestination>;
    /**
     * Permission name
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the pipeline sources to be used or excluded.
     */
    pipelineSource?: pulumi.Input<inputs.PermissionPipelineSource>;
    /**
     * Defines the release bundles to be used or excluded.
     */
    releaseBundle?: pulumi.Input<inputs.PermissionReleaseBundle>;
}

/**
 * The set of arguments for constructing a Permission resource.
 */
export interface PermissionArgs {
    /**
     * Defines the repositories to be used or excluded.
     */
    artifact?: pulumi.Input<inputs.PermissionArtifact>;
    /**
     * Defines the builds to be used or excluded.
     */
    build?: pulumi.Input<inputs.PermissionBuild>;
    /**
     * Defines the destinations to be used or excluded.
     */
    destination?: pulumi.Input<inputs.PermissionDestination>;
    /**
     * Permission name
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the pipeline sources to be used or excluded.
     */
    pipelineSource?: pulumi.Input<inputs.PermissionPipelineSource>;
    /**
     * Defines the release bundles to be used or excluded.
     */
    releaseBundle?: pulumi.Input<inputs.PermissionReleaseBundle>;
}
