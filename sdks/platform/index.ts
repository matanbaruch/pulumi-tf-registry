// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GlobalRoleArgs, GlobalRoleState } from "./globalRole";
export type GlobalRole = import("./globalRole").GlobalRole;
export const GlobalRole: typeof import("./globalRole").GlobalRole = null as any;
utilities.lazyLoad(exports, ["GlobalRole"], () => require("./globalRole"));

export { LicenseArgs, LicenseState } from "./license";
export type License = import("./license").License;
export const License: typeof import("./license").License = null as any;
utilities.lazyLoad(exports, ["License"], () => require("./license"));

export { MyjfrogIpAllowlistArgs, MyjfrogIpAllowlistState } from "./myjfrogIpAllowlist";
export type MyjfrogIpAllowlist = import("./myjfrogIpAllowlist").MyjfrogIpAllowlist;
export const MyjfrogIpAllowlist: typeof import("./myjfrogIpAllowlist").MyjfrogIpAllowlist = null as any;
utilities.lazyLoad(exports, ["MyjfrogIpAllowlist"], () => require("./myjfrogIpAllowlist"));

export { OidcConfigurationArgs, OidcConfigurationState } from "./oidcConfiguration";
export type OidcConfiguration = import("./oidcConfiguration").OidcConfiguration;
export const OidcConfiguration: typeof import("./oidcConfiguration").OidcConfiguration = null as any;
utilities.lazyLoad(exports, ["OidcConfiguration"], () => require("./oidcConfiguration"));

export { OidcIdentityMappingArgs, OidcIdentityMappingState } from "./oidcIdentityMapping";
export type OidcIdentityMapping = import("./oidcIdentityMapping").OidcIdentityMapping;
export const OidcIdentityMapping: typeof import("./oidcIdentityMapping").OidcIdentityMapping = null as any;
utilities.lazyLoad(exports, ["OidcIdentityMapping"], () => require("./oidcIdentityMapping"));

export { PermissionArgs, PermissionState } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReverseProxyArgs, ReverseProxyState } from "./reverseProxy";
export type ReverseProxy = import("./reverseProxy").ReverseProxy;
export const ReverseProxy: typeof import("./reverseProxy").ReverseProxy = null as any;
utilities.lazyLoad(exports, ["ReverseProxy"], () => require("./reverseProxy"));

export { SamlSettingsArgs, SamlSettingsState } from "./samlSettings";
export type SamlSettings = import("./samlSettings").SamlSettings;
export const SamlSettings: typeof import("./samlSettings").SamlSettings = null as any;
utilities.lazyLoad(exports, ["SamlSettings"], () => require("./samlSettings"));

export { ScimGroupArgs, ScimGroupState } from "./scimGroup";
export type ScimGroup = import("./scimGroup").ScimGroup;
export const ScimGroup: typeof import("./scimGroup").ScimGroup = null as any;
utilities.lazyLoad(exports, ["ScimGroup"], () => require("./scimGroup"));

export { ScimUserArgs, ScimUserState } from "./scimUser";
export type ScimUser = import("./scimUser").ScimUser;
export const ScimUser: typeof import("./scimUser").ScimUser = null as any;
utilities.lazyLoad(exports, ["ScimUser"], () => require("./scimUser"));

export { WorkersServiceArgs, WorkersServiceState } from "./workersService";
export type WorkersService = import("./workersService").WorkersService;
export const WorkersService: typeof import("./workersService").WorkersService = null as any;
utilities.lazyLoad(exports, ["WorkersService"], () => require("./workersService"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "platform:index/globalRole:GlobalRole":
                return new GlobalRole(name, <any>undefined, { urn })
            case "platform:index/license:License":
                return new License(name, <any>undefined, { urn })
            case "platform:index/myjfrogIpAllowlist:MyjfrogIpAllowlist":
                return new MyjfrogIpAllowlist(name, <any>undefined, { urn })
            case "platform:index/oidcConfiguration:OidcConfiguration":
                return new OidcConfiguration(name, <any>undefined, { urn })
            case "platform:index/oidcIdentityMapping:OidcIdentityMapping":
                return new OidcIdentityMapping(name, <any>undefined, { urn })
            case "platform:index/permission:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "platform:index/reverseProxy:ReverseProxy":
                return new ReverseProxy(name, <any>undefined, { urn })
            case "platform:index/samlSettings:SamlSettings":
                return new SamlSettings(name, <any>undefined, { urn })
            case "platform:index/scimGroup:ScimGroup":
                return new ScimGroup(name, <any>undefined, { urn })
            case "platform:index/scimUser:ScimUser":
                return new ScimUser(name, <any>undefined, { urn })
            case "platform:index/workersService:WorkersService":
                return new WorkersService(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("platform", "index/globalRole", _module)
pulumi.runtime.registerResourceModule("platform", "index/license", _module)
pulumi.runtime.registerResourceModule("platform", "index/myjfrogIpAllowlist", _module)
pulumi.runtime.registerResourceModule("platform", "index/oidcConfiguration", _module)
pulumi.runtime.registerResourceModule("platform", "index/oidcIdentityMapping", _module)
pulumi.runtime.registerResourceModule("platform", "index/permission", _module)
pulumi.runtime.registerResourceModule("platform", "index/reverseProxy", _module)
pulumi.runtime.registerResourceModule("platform", "index/samlSettings", _module)
pulumi.runtime.registerResourceModule("platform", "index/scimGroup", _module)
pulumi.runtime.registerResourceModule("platform", "index/scimUser", _module)
pulumi.runtime.registerResourceModule("platform", "index/workersService", _module)
pulumi.runtime.registerResourcePackage("platform", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:platform") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
