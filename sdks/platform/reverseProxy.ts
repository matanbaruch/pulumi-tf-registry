// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ReverseProxy extends pulumi.CustomResource {
    /**
     * Get an existing ReverseProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReverseProxyState, opts?: pulumi.CustomResourceOptions): ReverseProxy {
        return new ReverseProxy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'platform:index/reverseProxy:ReverseProxy';

    /**
     * Returns true if the given object is an instance of ReverseProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReverseProxy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReverseProxy.__pulumiType;
    }

    /**
     * Docker access method. The default value is SUBDOMAIN. Supported values: SUBDOMAIN, REPOPATHPREFIX, PORTPERREPO.
     */
    public readonly dockerReverseProxyMethod!: pulumi.Output<string>;
    /**
     * The port for access via HTTP. The default value is 80. Only settable when `server_provider` is set to `NIGNIX` or
     * `APACHE`
     */
    public readonly httpPort!: pulumi.Output<number>;
    /**
     * The port for access via HTTPS. The default value is 443. Only settable when `use_https` is set to `true`
     */
    public readonly httpsPort!: pulumi.Output<number>;
    /**
     * The internal server name for Artifactory which will be used by the web server to access the Artifactory machine. If the
     * web server is installed on the same machine as Artifactory you can use localhost, otherwise use the IP or hostname. Must
     * be set when `server_provider` is set to `NIGNIX` or `APACHE`
     */
    public readonly internalHostname!: pulumi.Output<string | undefined>;
    /**
     * The server name that will be used to access Artifactory. Should be correlated with the base URL value. Must be set when
     * `server_provider` is set to `NIGNIX` or `APACHE`
     */
    public readonly publicServerName!: pulumi.Output<string | undefined>;
    /**
     * Set the server provider type. Supported values: DIRECT, NGINX, APACHE.
     */
    public readonly serverProvider!: pulumi.Output<string>;
    /**
     * The full path of the certificate file on the web server, e.g. `/etc/ssl/certs/myserver.crt`. Must be set when
     * `use_https` is set to `true`
     */
    public readonly sslCertificatePath!: pulumi.Output<string | undefined>;
    /**
     * The full path of the key file on the web server, e.g. `/etc/ssl/private/myserver.key`. Must be set when `use_https` is
     * set to `true`
     */
    public readonly sslKeyPath!: pulumi.Output<string | undefined>;
    /**
     * When set, Artifactory will be accessible via HTTPS at the corresponding port that is set. Only settable when
     * `server_provider` is set to `NIGNIX` or `APACHE`
     */
    public readonly useHttps!: pulumi.Output<boolean>;

    /**
     * Create a ReverseProxy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReverseProxyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReverseProxyArgs | ReverseProxyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReverseProxyState | undefined;
            resourceInputs["dockerReverseProxyMethod"] = state ? state.dockerReverseProxyMethod : undefined;
            resourceInputs["httpPort"] = state ? state.httpPort : undefined;
            resourceInputs["httpsPort"] = state ? state.httpsPort : undefined;
            resourceInputs["internalHostname"] = state ? state.internalHostname : undefined;
            resourceInputs["publicServerName"] = state ? state.publicServerName : undefined;
            resourceInputs["serverProvider"] = state ? state.serverProvider : undefined;
            resourceInputs["sslCertificatePath"] = state ? state.sslCertificatePath : undefined;
            resourceInputs["sslKeyPath"] = state ? state.sslKeyPath : undefined;
            resourceInputs["useHttps"] = state ? state.useHttps : undefined;
        } else {
            const args = argsOrState as ReverseProxyArgs | undefined;
            if ((!args || args.serverProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverProvider'");
            }
            resourceInputs["dockerReverseProxyMethod"] = args ? args.dockerReverseProxyMethod : undefined;
            resourceInputs["httpPort"] = args ? args.httpPort : undefined;
            resourceInputs["httpsPort"] = args ? args.httpsPort : undefined;
            resourceInputs["internalHostname"] = args ? args.internalHostname : undefined;
            resourceInputs["publicServerName"] = args ? args.publicServerName : undefined;
            resourceInputs["serverProvider"] = args ? args.serverProvider : undefined;
            resourceInputs["sslCertificatePath"] = args ? args.sslCertificatePath : undefined;
            resourceInputs["sslKeyPath"] = args ? args.sslKeyPath : undefined;
            resourceInputs["useHttps"] = args ? args.useHttps : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReverseProxy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ReverseProxy resources.
 */
export interface ReverseProxyState {
    /**
     * Docker access method. The default value is SUBDOMAIN. Supported values: SUBDOMAIN, REPOPATHPREFIX, PORTPERREPO.
     */
    dockerReverseProxyMethod?: pulumi.Input<string>;
    /**
     * The port for access via HTTP. The default value is 80. Only settable when `server_provider` is set to `NIGNIX` or
     * `APACHE`
     */
    httpPort?: pulumi.Input<number>;
    /**
     * The port for access via HTTPS. The default value is 443. Only settable when `use_https` is set to `true`
     */
    httpsPort?: pulumi.Input<number>;
    /**
     * The internal server name for Artifactory which will be used by the web server to access the Artifactory machine. If the
     * web server is installed on the same machine as Artifactory you can use localhost, otherwise use the IP or hostname. Must
     * be set when `server_provider` is set to `NIGNIX` or `APACHE`
     */
    internalHostname?: pulumi.Input<string>;
    /**
     * The server name that will be used to access Artifactory. Should be correlated with the base URL value. Must be set when
     * `server_provider` is set to `NIGNIX` or `APACHE`
     */
    publicServerName?: pulumi.Input<string>;
    /**
     * Set the server provider type. Supported values: DIRECT, NGINX, APACHE.
     */
    serverProvider?: pulumi.Input<string>;
    /**
     * The full path of the certificate file on the web server, e.g. `/etc/ssl/certs/myserver.crt`. Must be set when
     * `use_https` is set to `true`
     */
    sslCertificatePath?: pulumi.Input<string>;
    /**
     * The full path of the key file on the web server, e.g. `/etc/ssl/private/myserver.key`. Must be set when `use_https` is
     * set to `true`
     */
    sslKeyPath?: pulumi.Input<string>;
    /**
     * When set, Artifactory will be accessible via HTTPS at the corresponding port that is set. Only settable when
     * `server_provider` is set to `NIGNIX` or `APACHE`
     */
    useHttps?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ReverseProxy resource.
 */
export interface ReverseProxyArgs {
    /**
     * Docker access method. The default value is SUBDOMAIN. Supported values: SUBDOMAIN, REPOPATHPREFIX, PORTPERREPO.
     */
    dockerReverseProxyMethod?: pulumi.Input<string>;
    /**
     * The port for access via HTTP. The default value is 80. Only settable when `server_provider` is set to `NIGNIX` or
     * `APACHE`
     */
    httpPort?: pulumi.Input<number>;
    /**
     * The port for access via HTTPS. The default value is 443. Only settable when `use_https` is set to `true`
     */
    httpsPort?: pulumi.Input<number>;
    /**
     * The internal server name for Artifactory which will be used by the web server to access the Artifactory machine. If the
     * web server is installed on the same machine as Artifactory you can use localhost, otherwise use the IP or hostname. Must
     * be set when `server_provider` is set to `NIGNIX` or `APACHE`
     */
    internalHostname?: pulumi.Input<string>;
    /**
     * The server name that will be used to access Artifactory. Should be correlated with the base URL value. Must be set when
     * `server_provider` is set to `NIGNIX` or `APACHE`
     */
    publicServerName?: pulumi.Input<string>;
    /**
     * Set the server provider type. Supported values: DIRECT, NGINX, APACHE.
     */
    serverProvider: pulumi.Input<string>;
    /**
     * The full path of the certificate file on the web server, e.g. `/etc/ssl/certs/myserver.crt`. Must be set when
     * `use_https` is set to `true`
     */
    sslCertificatePath?: pulumi.Input<string>;
    /**
     * The full path of the key file on the web server, e.g. `/etc/ssl/private/myserver.key`. Must be set when `use_https` is
     * set to `true`
     */
    sslKeyPath?: pulumi.Input<string>;
    /**
     * When set, Artifactory will be accessible via HTTPS at the corresponding port that is set. Only settable when
     * `server_provider` is set to `NIGNIX` or `APACHE`
     */
    useHttps?: pulumi.Input<boolean>;
}
