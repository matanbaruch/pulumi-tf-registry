// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WorkersService extends pulumi.CustomResource {
    /**
     * Get an existing WorkersService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkersServiceState, opts?: pulumi.CustomResourceOptions): WorkersService {
        return new WorkersService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'platform:index/workersService:WorkersService';

    /**
     * Returns true if the given object is an instance of WorkersService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkersService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkersService.__pulumiType;
    }

    /**
     * The worker action with which the worker is associated. Valid values: BEFORE_DOWNLOAD, AFTER_DOWNLOAD, BEFORE_UPLOAD,
     * AFTER_CREATE, AFTER_BUILD_INFO_SAVE, AFTER_MOVE
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Description of the worker.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether to enable the worker immediately after creation.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Defines the repositories to be used or excluded.
     */
    public readonly filterCriteria!: pulumi.Output<outputs.WorkersServiceFilterCriteria>;
    /**
     * The unique ID of the worker.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The secrets to be added to the worker.
     */
    public readonly secrets!: pulumi.Output<outputs.WorkersServiceSecret[] | undefined>;
    /**
     * The worker script in TypeScript or JavaScript.
     */
    public readonly sourceCode!: pulumi.Output<string>;

    /**
     * Create a WorkersService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkersServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkersServiceArgs | WorkersServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkersServiceState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["filterCriteria"] = state ? state.filterCriteria : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["sourceCode"] = state ? state.sourceCode : undefined;
        } else {
            const args = argsOrState as WorkersServiceArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.filterCriteria === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterCriteria'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.sourceCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceCode'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["filterCriteria"] = args ? args.filterCriteria : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["sourceCode"] = args ? args.sourceCode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkersService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkersService resources.
 */
export interface WorkersServiceState {
    /**
     * The worker action with which the worker is associated. Valid values: BEFORE_DOWNLOAD, AFTER_DOWNLOAD, BEFORE_UPLOAD,
     * AFTER_CREATE, AFTER_BUILD_INFO_SAVE, AFTER_MOVE
     */
    action?: pulumi.Input<string>;
    /**
     * Description of the worker.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable the worker immediately after creation.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Defines the repositories to be used or excluded.
     */
    filterCriteria?: pulumi.Input<inputs.WorkersServiceFilterCriteria>;
    /**
     * The unique ID of the worker.
     */
    key?: pulumi.Input<string>;
    /**
     * The secrets to be added to the worker.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.WorkersServiceSecret>[]>;
    /**
     * The worker script in TypeScript or JavaScript.
     */
    sourceCode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkersService resource.
 */
export interface WorkersServiceArgs {
    /**
     * The worker action with which the worker is associated. Valid values: BEFORE_DOWNLOAD, AFTER_DOWNLOAD, BEFORE_UPLOAD,
     * AFTER_CREATE, AFTER_BUILD_INFO_SAVE, AFTER_MOVE
     */
    action: pulumi.Input<string>;
    /**
     * Description of the worker.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable the worker immediately after creation.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Defines the repositories to be used or excluded.
     */
    filterCriteria: pulumi.Input<inputs.WorkersServiceFilterCriteria>;
    /**
     * The unique ID of the worker.
     */
    key: pulumi.Input<string>;
    /**
     * The secrets to be added to the worker.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.WorkersServiceSecret>[]>;
    /**
     * The worker script in TypeScript or JavaScript.
     */
    sourceCode: pulumi.Input<string>;
}
