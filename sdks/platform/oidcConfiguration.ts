// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OidcConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing OidcConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OidcConfigurationState, opts?: pulumi.CustomResourceOptions): OidcConfiguration {
        return new OidcConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'platform:index/oidcConfiguration:OidcConfiguration';

    /**
     * Returns true if the given object is an instance of OidcConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OidcConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OidcConfiguration.__pulumiType;
    }

    /**
     * Informational field that you can use to include details of the audience that uses the OIDC configuration.
     */
    public readonly audience!: pulumi.Output<string | undefined>;
    /**
     * Description of the OIDC provider
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * OIDC issuer URL. For GitHub actions, the URL must be https://token.actions.githubusercontent.com.
     */
    public readonly issuerUrl!: pulumi.Output<string>;
    /**
     * Name of the OIDC provider
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Type of OIDC provider. Can be `generic`, `GitHub`, or `Azure`.
     */
    public readonly providerType!: pulumi.Output<string>;

    /**
     * Create a OidcConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OidcConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OidcConfigurationArgs | OidcConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OidcConfigurationState | undefined;
            resourceInputs["audience"] = state ? state.audience : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["issuerUrl"] = state ? state.issuerUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
        } else {
            const args = argsOrState as OidcConfigurationArgs | undefined;
            if ((!args || args.issuerUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuerUrl'");
            }
            if ((!args || args.providerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerType'");
            }
            resourceInputs["audience"] = args ? args.audience : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["issuerUrl"] = args ? args.issuerUrl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["providerType"] = args ? args.providerType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OidcConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OidcConfiguration resources.
 */
export interface OidcConfigurationState {
    /**
     * Informational field that you can use to include details of the audience that uses the OIDC configuration.
     */
    audience?: pulumi.Input<string>;
    /**
     * Description of the OIDC provider
     */
    description?: pulumi.Input<string>;
    /**
     * OIDC issuer URL. For GitHub actions, the URL must be https://token.actions.githubusercontent.com.
     */
    issuerUrl?: pulumi.Input<string>;
    /**
     * Name of the OIDC provider
     */
    name?: pulumi.Input<string>;
    /**
     * Type of OIDC provider. Can be `generic`, `GitHub`, or `Azure`.
     */
    providerType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OidcConfiguration resource.
 */
export interface OidcConfigurationArgs {
    /**
     * Informational field that you can use to include details of the audience that uses the OIDC configuration.
     */
    audience?: pulumi.Input<string>;
    /**
     * Description of the OIDC provider
     */
    description?: pulumi.Input<string>;
    /**
     * OIDC issuer URL. For GitHub actions, the URL must be https://token.actions.githubusercontent.com.
     */
    issuerUrl: pulumi.Input<string>;
    /**
     * Name of the OIDC provider
     */
    name?: pulumi.Input<string>;
    /**
     * Type of OIDC provider. Can be `generic`, `GitHub`, or `Azure`.
     */
    providerType: pulumi.Input<string>;
}
