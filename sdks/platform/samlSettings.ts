// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SamlSettings extends pulumi.CustomResource {
    /**
     * Get an existing SamlSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlSettingsState, opts?: pulumi.CustomResourceOptions): SamlSettings {
        return new SamlSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'platform:index/samlSettings:SamlSettings';

    /**
     * Returns true if the given object is an instance of SamlSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamlSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamlSettings.__pulumiType;
    }

    /**
     * When set, auto created users will have access to their profile page and will be able to perform actions such as
     * generating an API key. Default value is `false`.
     */
    public readonly allowUserToAccessProfile!: pulumi.Output<boolean>;
    /**
     * When set, clicking on the login link will direct users to the configured SAML login URL. Default value is `false`.
     */
    public readonly autoRedirect!: pulumi.Output<boolean>;
    /**
     * The certificate for SAML Authentication in Base64 format. NOTE! The certificate must contain the public key to allow
     * Artifactory to verify sign-in requests.
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * If `no_auto_user_creation` is diabled or an internal user exists, the system will set the user's email to the value in
     * this attribute that is returned by the SAML login XML response.
     */
    public readonly emailAttribute!: pulumi.Output<string | undefined>;
    /**
     * When set, SAML integration is enabled and users may be authenticated via a SAML server. Default value is `true`.
     */
    public readonly enable!: pulumi.Output<boolean>;
    /**
     * The group attribute in the SAML login XML response. Note that the system will search for a case-sensitive match to an
     * existing group..
     */
    public readonly groupAttribute!: pulumi.Output<string | undefined>;
    /**
     * The identity provider login URL (when you try to login, the service provider redirects to this URL).
     */
    public readonly loginUrl!: pulumi.Output<string>;
    /**
     * The identity provider logout URL (when you try to logout, the service provider redirects to this URL).
     */
    public readonly logoutUrl!: pulumi.Output<string>;
    /**
     * SAML Settings name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The username attribute used to configure the SSO URL for the identity provider.
     */
    public readonly nameIdAttribute!: pulumi.Output<string | undefined>;
    /**
     * When disabled, the system will automatically create new users for those who have logged in using SAML, and assign them
     * to the default groups. Default value is `false`.
     */
    public readonly noAutoUserCreation!: pulumi.Output<boolean>;
    /**
     * The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.
     */
    public readonly serviceProviderName!: pulumi.Output<string>;
    /**
     * When set, in addition to the groups the user is already associated with, he will also be associated with the groups
     * returned in the SAML login response. Note that the user's association with the returned groups is not persistent. It is
     * only valid for the current login session. Default value is `false`.
     */
    public readonly syncGroups!: pulumi.Output<boolean>;
    /**
     * When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your
     * IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML
     * response. Default value is `false`.
     */
    public readonly useEncryptedAssertion!: pulumi.Output<boolean>;
    /**
     * Set this flag to specify who the assertion is intended for. The "audience" will be the service provider and is typically
     * a URL but can technically be formatted as any string of data. Default value is `true`.
     */
    public readonly verifyAudienceRestriction!: pulumi.Output<boolean>;

    /**
     * Create a SamlSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlSettingsArgs | SamlSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlSettingsState | undefined;
            resourceInputs["allowUserToAccessProfile"] = state ? state.allowUserToAccessProfile : undefined;
            resourceInputs["autoRedirect"] = state ? state.autoRedirect : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["emailAttribute"] = state ? state.emailAttribute : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["groupAttribute"] = state ? state.groupAttribute : undefined;
            resourceInputs["loginUrl"] = state ? state.loginUrl : undefined;
            resourceInputs["logoutUrl"] = state ? state.logoutUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameIdAttribute"] = state ? state.nameIdAttribute : undefined;
            resourceInputs["noAutoUserCreation"] = state ? state.noAutoUserCreation : undefined;
            resourceInputs["serviceProviderName"] = state ? state.serviceProviderName : undefined;
            resourceInputs["syncGroups"] = state ? state.syncGroups : undefined;
            resourceInputs["useEncryptedAssertion"] = state ? state.useEncryptedAssertion : undefined;
            resourceInputs["verifyAudienceRestriction"] = state ? state.verifyAudienceRestriction : undefined;
        } else {
            const args = argsOrState as SamlSettingsArgs | undefined;
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            if ((!args || args.loginUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginUrl'");
            }
            if ((!args || args.logoutUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logoutUrl'");
            }
            if ((!args || args.serviceProviderName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceProviderName'");
            }
            resourceInputs["allowUserToAccessProfile"] = args ? args.allowUserToAccessProfile : undefined;
            resourceInputs["autoRedirect"] = args ? args.autoRedirect : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["emailAttribute"] = args ? args.emailAttribute : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["groupAttribute"] = args ? args.groupAttribute : undefined;
            resourceInputs["loginUrl"] = args ? args.loginUrl : undefined;
            resourceInputs["logoutUrl"] = args ? args.logoutUrl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameIdAttribute"] = args ? args.nameIdAttribute : undefined;
            resourceInputs["noAutoUserCreation"] = args ? args.noAutoUserCreation : undefined;
            resourceInputs["serviceProviderName"] = args ? args.serviceProviderName : undefined;
            resourceInputs["syncGroups"] = args ? args.syncGroups : undefined;
            resourceInputs["useEncryptedAssertion"] = args ? args.useEncryptedAssertion : undefined;
            resourceInputs["verifyAudienceRestriction"] = args ? args.verifyAudienceRestriction : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SamlSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SamlSettings resources.
 */
export interface SamlSettingsState {
    /**
     * When set, auto created users will have access to their profile page and will be able to perform actions such as
     * generating an API key. Default value is `false`.
     */
    allowUserToAccessProfile?: pulumi.Input<boolean>;
    /**
     * When set, clicking on the login link will direct users to the configured SAML login URL. Default value is `false`.
     */
    autoRedirect?: pulumi.Input<boolean>;
    /**
     * The certificate for SAML Authentication in Base64 format. NOTE! The certificate must contain the public key to allow
     * Artifactory to verify sign-in requests.
     */
    certificate?: pulumi.Input<string>;
    /**
     * If `no_auto_user_creation` is diabled or an internal user exists, the system will set the user's email to the value in
     * this attribute that is returned by the SAML login XML response.
     */
    emailAttribute?: pulumi.Input<string>;
    /**
     * When set, SAML integration is enabled and users may be authenticated via a SAML server. Default value is `true`.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * The group attribute in the SAML login XML response. Note that the system will search for a case-sensitive match to an
     * existing group..
     */
    groupAttribute?: pulumi.Input<string>;
    /**
     * The identity provider login URL (when you try to login, the service provider redirects to this URL).
     */
    loginUrl?: pulumi.Input<string>;
    /**
     * The identity provider logout URL (when you try to logout, the service provider redirects to this URL).
     */
    logoutUrl?: pulumi.Input<string>;
    /**
     * SAML Settings name.
     */
    name?: pulumi.Input<string>;
    /**
     * The username attribute used to configure the SSO URL for the identity provider.
     */
    nameIdAttribute?: pulumi.Input<string>;
    /**
     * When disabled, the system will automatically create new users for those who have logged in using SAML, and assign them
     * to the default groups. Default value is `false`.
     */
    noAutoUserCreation?: pulumi.Input<boolean>;
    /**
     * The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.
     */
    serviceProviderName?: pulumi.Input<string>;
    /**
     * When set, in addition to the groups the user is already associated with, he will also be associated with the groups
     * returned in the SAML login response. Note that the user's association with the returned groups is not persistent. It is
     * only valid for the current login session. Default value is `false`.
     */
    syncGroups?: pulumi.Input<boolean>;
    /**
     * When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your
     * IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML
     * response. Default value is `false`.
     */
    useEncryptedAssertion?: pulumi.Input<boolean>;
    /**
     * Set this flag to specify who the assertion is intended for. The "audience" will be the service provider and is typically
     * a URL but can technically be formatted as any string of data. Default value is `true`.
     */
    verifyAudienceRestriction?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SamlSettings resource.
 */
export interface SamlSettingsArgs {
    /**
     * When set, auto created users will have access to their profile page and will be able to perform actions such as
     * generating an API key. Default value is `false`.
     */
    allowUserToAccessProfile?: pulumi.Input<boolean>;
    /**
     * When set, clicking on the login link will direct users to the configured SAML login URL. Default value is `false`.
     */
    autoRedirect?: pulumi.Input<boolean>;
    /**
     * The certificate for SAML Authentication in Base64 format. NOTE! The certificate must contain the public key to allow
     * Artifactory to verify sign-in requests.
     */
    certificate: pulumi.Input<string>;
    /**
     * If `no_auto_user_creation` is diabled or an internal user exists, the system will set the user's email to the value in
     * this attribute that is returned by the SAML login XML response.
     */
    emailAttribute?: pulumi.Input<string>;
    /**
     * When set, SAML integration is enabled and users may be authenticated via a SAML server. Default value is `true`.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * The group attribute in the SAML login XML response. Note that the system will search for a case-sensitive match to an
     * existing group..
     */
    groupAttribute?: pulumi.Input<string>;
    /**
     * The identity provider login URL (when you try to login, the service provider redirects to this URL).
     */
    loginUrl: pulumi.Input<string>;
    /**
     * The identity provider logout URL (when you try to logout, the service provider redirects to this URL).
     */
    logoutUrl: pulumi.Input<string>;
    /**
     * SAML Settings name.
     */
    name?: pulumi.Input<string>;
    /**
     * The username attribute used to configure the SSO URL for the identity provider.
     */
    nameIdAttribute?: pulumi.Input<string>;
    /**
     * When disabled, the system will automatically create new users for those who have logged in using SAML, and assign them
     * to the default groups. Default value is `false`.
     */
    noAutoUserCreation?: pulumi.Input<boolean>;
    /**
     * The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.
     */
    serviceProviderName: pulumi.Input<string>;
    /**
     * When set, in addition to the groups the user is already associated with, he will also be associated with the groups
     * returned in the SAML login response. Note that the user's association with the returned groups is not persistent. It is
     * only valid for the current login session. Default value is `false`.
     */
    syncGroups?: pulumi.Input<boolean>;
    /**
     * When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your
     * IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML
     * response. Default value is `false`.
     */
    useEncryptedAssertion?: pulumi.Input<boolean>;
    /**
     * Set this flag to specify who the assertion is intended for. The "audience" will be the service provider and is typically
     * a URL but can technically be formatted as any string of data. Default value is `true`.
     */
    verifyAudienceRestriction?: pulumi.Input<boolean>;
}
