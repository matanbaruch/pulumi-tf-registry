// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface OidcIdentityMappingTokenSpec {
    /**
     * Sets of (space separated) the JFrog services to which the mapping applies. Default value is `*@*`, which applies to all services.
     */
    audience?: pulumi.Input<string>;
    /**
     * Token expiry time in seconds. Default value is 60.
     */
    expiresIn?: pulumi.Input<number>;
    /**
     * Scope of the token. Must start with `applied-permissions/user`, `applied-permissions/admin`, or `applied-permissions/groups:`. Group names must be comma-separated, double quotes wrapped, e.g. `applied-permissions/groups:\"readers\",\"my-group\",`
     */
    scope: pulumi.Input<string>;
    /**
     * User name of the OIDC user. Not applicable when `scope` is set to `applied-permissions/groups`
     */
    username?: pulumi.Input<string>;
}

export interface PermissionArtifact {
    /**
     * Either one of `users` or `groups` attribute must be set.
     */
    actions?: pulumi.Input<inputs.PermissionArtifactActions>;
    targets: pulumi.Input<pulumi.Input<inputs.PermissionArtifactTarget>[]>;
}

export interface PermissionArtifactActions {
    /**
     * Must contain at least one item.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.PermissionArtifactActionsGroup>[]>;
    /**
     * Must contain at least one item.
     */
    users?: pulumi.Input<pulumi.Input<inputs.PermissionArtifactActionsUser>[]>;
}

export interface PermissionArtifactActionsGroup {
    name: pulumi.Input<string>;
    /**
     * **READ**: Downloads artifacts and reads the metadata.
     * **ANNOTATE**: Annotates artifacts and folders with metadata and properties.
     * **WRITE**: Deploys artifacts & deploys to remote repository caches.
     * **DELETE**: Deletes or overwrites artifacts.
     * **SCAN**: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
     * **MANAGE**: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PermissionArtifactActionsUser {
    name: pulumi.Input<string>;
    /**
     * **READ**: Downloads artifacts and reads the metadata.
     * **ANNOTATE**: Annotates artifacts and folders with metadata and properties.
     * **WRITE**: Deploys artifacts & deploys to remote repository caches.
     * **DELETE**: Deletes or overwrites artifacts.
     * **SCAN**: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
     * **MANAGE**: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PermissionArtifactTarget {
    /**
     * Simple comma separated wildcard patterns for **existing and future** repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, **, ?). For example: `org/apache/**`
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Simple comma separated wildcard patterns for **existing and future** repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, **, ?). For example: `org/apache/**`
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify repository key as name. Use `ANY LOCAL`, `ANY REMOTE`, or `ANY DISTRIBUTION` for any repository type.
     */
    name: pulumi.Input<string>;
}

export interface PermissionBuild {
    /**
     * Either one of `users` or `groups` attribute must be set.
     */
    actions?: pulumi.Input<inputs.PermissionBuildActions>;
    targets: pulumi.Input<pulumi.Input<inputs.PermissionBuildTarget>[]>;
}

export interface PermissionBuildActions {
    /**
     * Must contain at least one item.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.PermissionBuildActionsGroup>[]>;
    /**
     * Must contain at least one item.
     */
    users?: pulumi.Input<pulumi.Input<inputs.PermissionBuildActionsUser>[]>;
}

export interface PermissionBuildActionsGroup {
    name: pulumi.Input<string>;
    /**
     * **READ**: View and downloads build info artifacts from the artifactory-build-info default repository and reads the corresponding build in the Builds page.
     * **ANNOTATE**: Annotates build info artifacts and folders with metadata and properties.
     * **WRITE**: Allows uploading and promoting build info artifacts.
     * **DELETE**: Deletes build info artifacts.
     * **SCAN**: Triggers Xray scans on builds. Creates and deletes custom issues and license.
     * **MANAGE**: Allows changing build info permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PermissionBuildActionsUser {
    name: pulumi.Input<string>;
    /**
     * **READ**: View and downloads build info artifacts from the artifactory-build-info default repository and reads the corresponding build in the Builds page.
     * **ANNOTATE**: Annotates build info artifacts and folders with metadata and properties.
     * **WRITE**: Allows uploading and promoting build info artifacts.
     * **DELETE**: Deletes build info artifacts.
     * **SCAN**: Triggers Xray scans on builds. Creates and deletes custom issues and license.
     * **MANAGE**: Allows changing build info permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PermissionBuildTarget {
    /**
     * Use Ant-style wildcard patterns to specify **existing and future** build names (i.e. artifact paths) in the build info repository (without a leading slash) that will be excluded from this permission target. Ant-style path expressions are supported (*, **, ?). For example, an `apache/**` pattern will exclude the "apache" build info from the permission.
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use Ant-style wildcard patterns to specify **existing and future** build names (i.e. artifact paths) in the build info repository (without a leading slash) that will be included in this permission target. Ant-style path expressions are supported (*, **, ?). For example, an `apache/**` pattern will include the "apache" build info in the permission.
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only `artifactory-build-info` is allowed for name. Specify build name as part of the `include_patterns` or `exclude_patterns`.
     */
    name: pulumi.Input<string>;
}

export interface PermissionDestination {
    /**
     * Either one of `users` or `groups` attribute must be set.
     */
    actions?: pulumi.Input<inputs.PermissionDestinationActions>;
    targets: pulumi.Input<pulumi.Input<inputs.PermissionDestinationTarget>[]>;
}

export interface PermissionDestinationActions {
    /**
     * Must contain at least one item.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.PermissionDestinationActionsGroup>[]>;
    /**
     * Must contain at least one item.
     */
    users?: pulumi.Input<pulumi.Input<inputs.PermissionDestinationActionsUser>[]>;
}

export interface PermissionDestinationActionsGroup {
    name: pulumi.Input<string>;
    /**
     * **EXECUTE**: Distributes Release Bundles according to their destination permissions.
     * **DELETE**: Deletes Release Bundles from the selected destinations.
     * **MANAGE**: Adds and deletes users who can distribute Release Bundles on assigned destinations.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PermissionDestinationActionsUser {
    name: pulumi.Input<string>;
    /**
     * **EXECUTE**: Distributes Release Bundles according to their destination permissions.
     * **DELETE**: Deletes Release Bundles from the selected destinations.
     * **MANAGE**: Adds and deletes users who can distribute Release Bundles on assigned destinations.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PermissionDestinationTarget {
    /**
     * Simple wildcard patterns for existing and future JPD or city names. Ant-style path expressions are supported (*, **, ?). For example: `site_*` or `New*`
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Simple wildcard patterns for existing and future JPD or city names. Ant-style path expressions are supported (*, **, ?). For example: `site_*` or `New*`
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify destination name as name. Use `*` to include all destinations.
     */
    name: pulumi.Input<string>;
}

export interface PermissionPipelineSource {
    /**
     * Either one of `users` or `groups` attribute must be set.
     */
    actions?: pulumi.Input<inputs.PermissionPipelineSourceActions>;
    targets: pulumi.Input<pulumi.Input<inputs.PermissionPipelineSourceTarget>[]>;
}

export interface PermissionPipelineSourceActions {
    /**
     * Must contain at least one item.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.PermissionPipelineSourceActionsGroup>[]>;
    /**
     * Must contain at least one item.
     */
    users?: pulumi.Input<pulumi.Input<inputs.PermissionPipelineSourceActionsUser>[]>;
}

export interface PermissionPipelineSourceActionsGroup {
    name: pulumi.Input<string>;
    /**
     * **READ**: View the available pipeline sources.
     * **EXECUTE**: Manually trigger execution of steps.
     * **MANAGE**: Create and edit pipeline sources.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PermissionPipelineSourceActionsUser {
    name: pulumi.Input<string>;
    /**
     * **READ**: View the available pipeline sources.
     * **EXECUTE**: Manually trigger execution of steps.
     * **MANAGE**: Create and edit pipeline sources.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PermissionPipelineSourceTarget {
    /**
     * Use Ant-style wildcard patterns to specify the full repository name of the **existing and future** pipeline sources that will be excluded from this permission. The pattern should have the following format: `{FULL_REPOSITORY_NAME_PATTERN}/**`. Ant-style path expressions are supported (*, **, ?). For example, the pattern `*&#47;*test*&#47;**` will exclude all repositories that contain the word "test" regardless of the repository owner.
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use Ant-style wildcard patterns to specify the full repository name of the **existing and future** pipeline sources that will be included in this permission. The pattern should have the following format: `{FULL_REPOSITORY_NAME_PATTERN}/**`. Ant-style path expressions are supported (*, **, ?). For example, the pattern `*&#47;*test*&#47;**` will include all repositories that contain the word "test" regardless of the repository owner.
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify pipeline source name as name. Use `*` to include all pipeline sources.
     */
    name: pulumi.Input<string>;
}

export interface PermissionReleaseBundle {
    /**
     * Either one of `users` or `groups` attribute must be set.
     */
    actions?: pulumi.Input<inputs.PermissionReleaseBundleActions>;
    targets: pulumi.Input<pulumi.Input<inputs.PermissionReleaseBundleTarget>[]>;
}

export interface PermissionReleaseBundleActions {
    /**
     * Must contain at least one item.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.PermissionReleaseBundleActionsGroup>[]>;
    /**
     * Must contain at least one item.
     */
    users?: pulumi.Input<pulumi.Input<inputs.PermissionReleaseBundleActionsUser>[]>;
}

export interface PermissionReleaseBundleActionsGroup {
    name: pulumi.Input<string>;
    /**
     * **READ**: Views and downloads Release Bundle artifacts from the relevant Release Bundle repository and reads the corresponding Release Bundles in the Distribution page.
     * **ANNOTATE**: Annotates Release Bundle artifacts and folder with metadata and properties.
     * **WRITE**: Creates Release Bundles.
     * **EXECUTE**: Allows users to promote Release Bundles v2 to a selected target environment and is a prerequisite for distributing Release Bundles (v1 & v2) to Distribution Edge nodes.
     * **DELETE**: Deletes Release Bundles.
     * **SCAN** Xray Metadata: Triggers Xray scans on Release Bundles. Creates and deletes custom issues and license.
     * **MANAGE**: Allows changing Release Bundle permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PermissionReleaseBundleActionsUser {
    name: pulumi.Input<string>;
    /**
     * **READ**: Views and downloads Release Bundle artifacts from the relevant Release Bundle repository and reads the corresponding Release Bundles in the Distribution page.
     * **ANNOTATE**: Annotates Release Bundle artifacts and folder with metadata and properties.
     * **WRITE**: Creates Release Bundles.
     * **EXECUTE**: Allows users to promote Release Bundles v2 to a selected target environment and is a prerequisite for distributing Release Bundles (v1 & v2) to Distribution Edge nodes.
     * **DELETE**: Deletes Release Bundles.
     * **SCAN** Xray Metadata: Triggers Xray scans on Release Bundles. Creates and deletes custom issues and license.
     * **MANAGE**: Allows changing Release Bundle permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PermissionReleaseBundleTarget {
    /**
     * Simple wildcard patterns for **existing and future** Release Bundle names. Ant-style path expressions are supported (*, **, ?). For example: `product_*&#47;**`
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Simple wildcard patterns for **existing and future** Release Bundle names. Ant-style path expressions are supported (*, **, ?). For example: `product_*&#47;**`
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify release bundle repository key as name.
     */
    name: pulumi.Input<string>;
}

export interface ScimGroupMember {
    display: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ScimUserEmail {
    primary: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface ScimUserGroup {
    value: pulumi.Input<string>;
}

export interface WorkersServiceFilterCriteria {
    artifactFilterCriteria: pulumi.Input<inputs.WorkersServiceFilterCriteriaArtifactFilterCriteria>;
}

export interface WorkersServiceFilterCriteriaArtifactFilterCriteria {
    /**
     * Define patterns to for all repository paths for repositories to be excluded in the repoKeys. Defines those repositories that do not trigger the worker.
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Define patterns to match all repository paths for repositories identified in the repoKeys. Defines those repositories that trigger the worker.
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines which repositories are used when an action event occurs to trigger the worker.
     */
    repoKeys: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkersServiceSecret {
    /**
     * The name of the secret.
     */
    key: pulumi.Input<string>;
    /**
     * The name of the secret.
     */
    value: pulumi.Input<string>;
}
