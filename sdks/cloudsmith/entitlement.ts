// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Entitlement extends pulumi.CustomResource {
    /**
     * Get an existing Entitlement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntitlementState, opts?: pulumi.CustomResourceOptions): Entitlement {
        return new Entitlement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudsmith:index/entitlement:Entitlement';

    /**
     * Returns true if the given object is an instance of Entitlement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Entitlement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Entitlement.__pulumiType;
    }

    /**
     * If enabled, the token will allow downloads based on configured restrictions (if any).
     */
    public readonly isActive!: pulumi.Output<boolean>;
    /**
     * The starting date/time the token is allowed to be used from.
     */
    public readonly limitDateRangeFrom!: pulumi.Output<string | undefined>;
    /**
     * The ending date/time the token is allowed to be used until.
     */
    public readonly limitDateRangeTo!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously
     * (after the download happens), the limit may not be imposed immediately but at a later point.
     */
    public readonly limitNumClients!: pulumi.Output<number>;
    /**
     * The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously
     * (after the download happens), the limit may not be imposed immediately but at a later point.
     */
    public readonly limitNumDownloads!: pulumi.Output<number>;
    /**
     * The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used
     * for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will
     * still allow access to non-package files, such as metadata.
     */
    public readonly limitPackageQuery!: pulumi.Output<string | undefined>;
    /**
     * The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT
     * and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code
     * used, the package format, etc. and it always starts with a forward slash.
     */
    public readonly limitPathQuery!: pulumi.Output<string | undefined>;
    /**
     * A descriptive name for the entitlement.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Namespace to which this entitlement belongs.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Repository to which this entitlement belongs.
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * The literal value of the token to be created.
     */
    public readonly token!: pulumi.Output<string>;

    /**
     * Create a Entitlement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EntitlementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntitlementArgs | EntitlementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntitlementState | undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["limitDateRangeFrom"] = state ? state.limitDateRangeFrom : undefined;
            resourceInputs["limitDateRangeTo"] = state ? state.limitDateRangeTo : undefined;
            resourceInputs["limitNumClients"] = state ? state.limitNumClients : undefined;
            resourceInputs["limitNumDownloads"] = state ? state.limitNumDownloads : undefined;
            resourceInputs["limitPackageQuery"] = state ? state.limitPackageQuery : undefined;
            resourceInputs["limitPathQuery"] = state ? state.limitPathQuery : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as EntitlementArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["limitDateRangeFrom"] = args ? args.limitDateRangeFrom : undefined;
            resourceInputs["limitDateRangeTo"] = args ? args.limitDateRangeTo : undefined;
            resourceInputs["limitNumClients"] = args ? args.limitNumClients : undefined;
            resourceInputs["limitNumDownloads"] = args ? args.limitNumDownloads : undefined;
            resourceInputs["limitPackageQuery"] = args ? args.limitPackageQuery : undefined;
            resourceInputs["limitPathQuery"] = args ? args.limitPathQuery : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Entitlement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Entitlement resources.
 */
export interface EntitlementState {
    /**
     * If enabled, the token will allow downloads based on configured restrictions (if any).
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * The starting date/time the token is allowed to be used from.
     */
    limitDateRangeFrom?: pulumi.Input<string>;
    /**
     * The ending date/time the token is allowed to be used until.
     */
    limitDateRangeTo?: pulumi.Input<string>;
    /**
     * The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously
     * (after the download happens), the limit may not be imposed immediately but at a later point.
     */
    limitNumClients?: pulumi.Input<number>;
    /**
     * The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously
     * (after the download happens), the limit may not be imposed immediately but at a later point.
     */
    limitNumDownloads?: pulumi.Input<number>;
    /**
     * The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used
     * for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will
     * still allow access to non-package files, such as metadata.
     */
    limitPackageQuery?: pulumi.Input<string>;
    /**
     * The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT
     * and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code
     * used, the package format, etc. and it always starts with a forward slash.
     */
    limitPathQuery?: pulumi.Input<string>;
    /**
     * A descriptive name for the entitlement.
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace to which this entitlement belongs.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Repository to which this entitlement belongs.
     */
    repository?: pulumi.Input<string>;
    /**
     * The literal value of the token to be created.
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Entitlement resource.
 */
export interface EntitlementArgs {
    /**
     * If enabled, the token will allow downloads based on configured restrictions (if any).
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * The starting date/time the token is allowed to be used from.
     */
    limitDateRangeFrom?: pulumi.Input<string>;
    /**
     * The ending date/time the token is allowed to be used until.
     */
    limitDateRangeTo?: pulumi.Input<string>;
    /**
     * The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously
     * (after the download happens), the limit may not be imposed immediately but at a later point.
     */
    limitNumClients?: pulumi.Input<number>;
    /**
     * The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously
     * (after the download happens), the limit may not be imposed immediately but at a later point.
     */
    limitNumDownloads?: pulumi.Input<number>;
    /**
     * The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used
     * for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will
     * still allow access to non-package files, such as metadata.
     */
    limitPackageQuery?: pulumi.Input<string>;
    /**
     * The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT
     * and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code
     * used, the package format, etc. and it always starts with a forward slash.
     */
    limitPathQuery?: pulumi.Input<string>;
    /**
     * A descriptive name for the entitlement.
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace to which this entitlement belongs.
     */
    namespace: pulumi.Input<string>;
    /**
     * Repository to which this entitlement belongs.
     */
    repository: pulumi.Input<string>;
    /**
     * The literal value of the token to be created.
     */
    token?: pulumi.Input<string>;
}
