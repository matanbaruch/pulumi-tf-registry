// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookState, opts?: pulumi.CustomResourceOptions): Webhook {
        return new Webhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudsmith:index/webhook:Webhook';

    /**
     * Returns true if the given object is an instance of Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Webhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Webhook.__pulumiType;
    }

    /**
     * ISO 8601 timestamp at which the webhook was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The user/account that created the webhook.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Why this webhook has been disabled.
     */
    public /*out*/ readonly disableReason!: pulumi.Output<string>;
    /**
     * List of events for which this webhook will be fired.
     */
    public readonly events!: pulumi.Output<string[]>;
    /**
     * If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.
     */
    public readonly isActive!: pulumi.Output<boolean>;
    /**
     * Namespace to which this webhook belongs.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for
     * repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package
     * does not match, the webhook will not fire.
     */
    public readonly packageQuery!: pulumi.Output<string | undefined>;
    /**
     * Repository to which this webhook belongs.
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * The format of the payloads for webhook requests.
     */
    public readonly requestBodyFormat!: pulumi.Output<string>;
    /**
     * The format of the payloads for webhook requests.
     */
    public readonly requestBodyTemplateFormat!: pulumi.Output<string>;
    /**
     * The value that will be sent for the 'Content Type' header.
     */
    public readonly requestContentType!: pulumi.Output<string | undefined>;
    /**
     * The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use
     * this as a form of authentication on the endpoint side.
     */
    public readonly secretHeader!: pulumi.Output<string | undefined>;
    /**
     * The value for the predefined secret (note: this is treated as a passphrase and is encrypted when we store it). You can
     * use this as a form of authentication on the endpoint side.
     */
    public readonly secretValue!: pulumi.Output<string | undefined>;
    /**
     * The value for the signature key - This is used to generate an HMAC-based hex digest of the request body, which we send
     * as the X-Cloudsmith-Signature header so that you can ensure that the request wasn't modified by a malicious party (note:
     * this is treated as a passphrase and is encrypted when we store it).
     */
    public readonly signatureKey!: pulumi.Output<string | undefined>;
    /**
     * The slug_perm immutably identifies the webhook. It will never change once a webhook has been created.
     */
    public /*out*/ readonly slugPerm!: pulumi.Output<string>;
    /**
     * The destination URL that webhook payloads will be POST'ed to.
     */
    public readonly targetUrl!: pulumi.Output<string>;
    public readonly templates!: pulumi.Output<outputs.WebhookTemplate[] | undefined>;
    /**
     * ISO 8601 timestamp at which the webhook was updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The user/account that updated the webhook.
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;
    /**
     * If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying
     * the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.
     */
    public readonly verifySsl!: pulumi.Output<boolean>;

    /**
     * Create a Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookArgs | WebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["disableReason"] = state ? state.disableReason : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["packageQuery"] = state ? state.packageQuery : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["requestBodyFormat"] = state ? state.requestBodyFormat : undefined;
            resourceInputs["requestBodyTemplateFormat"] = state ? state.requestBodyTemplateFormat : undefined;
            resourceInputs["requestContentType"] = state ? state.requestContentType : undefined;
            resourceInputs["secretHeader"] = state ? state.secretHeader : undefined;
            resourceInputs["secretValue"] = state ? state.secretValue : undefined;
            resourceInputs["signatureKey"] = state ? state.signatureKey : undefined;
            resourceInputs["slugPerm"] = state ? state.slugPerm : undefined;
            resourceInputs["targetUrl"] = state ? state.targetUrl : undefined;
            resourceInputs["templates"] = state ? state.templates : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["verifySsl"] = state ? state.verifySsl : undefined;
        } else {
            const args = argsOrState as WebhookArgs | undefined;
            if ((!args || args.events === undefined) && !opts.urn) {
                throw new Error("Missing required property 'events'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.targetUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetUrl'");
            }
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["packageQuery"] = args ? args.packageQuery : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["requestBodyFormat"] = args ? args.requestBodyFormat : undefined;
            resourceInputs["requestBodyTemplateFormat"] = args ? args.requestBodyTemplateFormat : undefined;
            resourceInputs["requestContentType"] = args ? args.requestContentType : undefined;
            resourceInputs["secretHeader"] = args ? args.secretHeader : undefined;
            resourceInputs["secretValue"] = args?.secretValue ? pulumi.secret(args.secretValue) : undefined;
            resourceInputs["signatureKey"] = args?.signatureKey ? pulumi.secret(args.signatureKey) : undefined;
            resourceInputs["targetUrl"] = args ? args.targetUrl : undefined;
            resourceInputs["templates"] = args ? args.templates : undefined;
            resourceInputs["verifySsl"] = args ? args.verifySsl : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["disableReason"] = undefined /*out*/;
            resourceInputs["slugPerm"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretValue", "signatureKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Webhook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Webhook resources.
 */
export interface WebhookState {
    /**
     * ISO 8601 timestamp at which the webhook was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The user/account that created the webhook.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Why this webhook has been disabled.
     */
    disableReason?: pulumi.Input<string>;
    /**
     * List of events for which this webhook will be fired.
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Namespace to which this webhook belongs.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for
     * repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package
     * does not match, the webhook will not fire.
     */
    packageQuery?: pulumi.Input<string>;
    /**
     * Repository to which this webhook belongs.
     */
    repository?: pulumi.Input<string>;
    /**
     * The format of the payloads for webhook requests.
     */
    requestBodyFormat?: pulumi.Input<string>;
    /**
     * The format of the payloads for webhook requests.
     */
    requestBodyTemplateFormat?: pulumi.Input<string>;
    /**
     * The value that will be sent for the 'Content Type' header.
     */
    requestContentType?: pulumi.Input<string>;
    /**
     * The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use
     * this as a form of authentication on the endpoint side.
     */
    secretHeader?: pulumi.Input<string>;
    /**
     * The value for the predefined secret (note: this is treated as a passphrase and is encrypted when we store it). You can
     * use this as a form of authentication on the endpoint side.
     */
    secretValue?: pulumi.Input<string>;
    /**
     * The value for the signature key - This is used to generate an HMAC-based hex digest of the request body, which we send
     * as the X-Cloudsmith-Signature header so that you can ensure that the request wasn't modified by a malicious party (note:
     * this is treated as a passphrase and is encrypted when we store it).
     */
    signatureKey?: pulumi.Input<string>;
    /**
     * The slug_perm immutably identifies the webhook. It will never change once a webhook has been created.
     */
    slugPerm?: pulumi.Input<string>;
    /**
     * The destination URL that webhook payloads will be POST'ed to.
     */
    targetUrl?: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<inputs.WebhookTemplate>[]>;
    /**
     * ISO 8601 timestamp at which the webhook was updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The user/account that updated the webhook.
     */
    updatedBy?: pulumi.Input<string>;
    /**
     * If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying
     * the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.
     */
    verifySsl?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Webhook resource.
 */
export interface WebhookArgs {
    /**
     * List of events for which this webhook will be fired.
     */
    events: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Namespace to which this webhook belongs.
     */
    namespace: pulumi.Input<string>;
    /**
     * The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for
     * repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package
     * does not match, the webhook will not fire.
     */
    packageQuery?: pulumi.Input<string>;
    /**
     * Repository to which this webhook belongs.
     */
    repository: pulumi.Input<string>;
    /**
     * The format of the payloads for webhook requests.
     */
    requestBodyFormat?: pulumi.Input<string>;
    /**
     * The format of the payloads for webhook requests.
     */
    requestBodyTemplateFormat?: pulumi.Input<string>;
    /**
     * The value that will be sent for the 'Content Type' header.
     */
    requestContentType?: pulumi.Input<string>;
    /**
     * The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use
     * this as a form of authentication on the endpoint side.
     */
    secretHeader?: pulumi.Input<string>;
    /**
     * The value for the predefined secret (note: this is treated as a passphrase and is encrypted when we store it). You can
     * use this as a form of authentication on the endpoint side.
     */
    secretValue?: pulumi.Input<string>;
    /**
     * The value for the signature key - This is used to generate an HMAC-based hex digest of the request body, which we send
     * as the X-Cloudsmith-Signature header so that you can ensure that the request wasn't modified by a malicious party (note:
     * this is treated as a passphrase and is encrypted when we store it).
     */
    signatureKey?: pulumi.Input<string>;
    /**
     * The destination URL that webhook payloads will be POST'ed to.
     */
    targetUrl: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<inputs.WebhookTemplate>[]>;
    /**
     * If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying
     * the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.
     */
    verifySsl?: pulumi.Input<boolean>;
}
