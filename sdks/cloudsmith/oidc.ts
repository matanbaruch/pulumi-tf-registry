// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Oidc extends pulumi.CustomResource {
    /**
     * Get an existing Oidc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OidcState, opts?: pulumi.CustomResourceOptions): Oidc {
        return new Oidc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudsmith:index/oidc:Oidc';

    /**
     * Returns true if the given object is an instance of Oidc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Oidc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Oidc.__pulumiType;
    }

    /**
     * The claims associated with these provider settings
     */
    public readonly claims!: pulumi.Output<{[key: string]: string}>;
    /**
     * Whether the provider settings should be used for incoming OIDC requests.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The name of the provider settings are being configured for
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Namespace to which this OIDC config belongs.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * The URL from the provider that serves as the base for the OpenID configuration.
     */
    public readonly providerUrl!: pulumi.Output<string>;
    /**
     * The service accounts associated with these provider settings
     */
    public readonly serviceAccounts!: pulumi.Output<string[]>;
    /**
     * The slug identifies the oidc.
     */
    public /*out*/ readonly slug!: pulumi.Output<string>;
    /**
     * The slug_perm identifies the oidc.
     */
    public /*out*/ readonly slugPerm!: pulumi.Output<string>;

    /**
     * Create a Oidc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OidcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OidcArgs | OidcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OidcState | undefined;
            resourceInputs["claims"] = state ? state.claims : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["providerUrl"] = state ? state.providerUrl : undefined;
            resourceInputs["serviceAccounts"] = state ? state.serviceAccounts : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["slugPerm"] = state ? state.slugPerm : undefined;
        } else {
            const args = argsOrState as OidcArgs | undefined;
            if ((!args || args.claims === undefined) && !opts.urn) {
                throw new Error("Missing required property 'claims'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.providerUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerUrl'");
            }
            if ((!args || args.serviceAccounts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccounts'");
            }
            resourceInputs["claims"] = args ? args.claims : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["providerUrl"] = args ? args.providerUrl : undefined;
            resourceInputs["serviceAccounts"] = args ? args.serviceAccounts : undefined;
            resourceInputs["slug"] = undefined /*out*/;
            resourceInputs["slugPerm"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Oidc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Oidc resources.
 */
export interface OidcState {
    /**
     * The claims associated with these provider settings
     */
    claims?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether the provider settings should be used for incoming OIDC requests.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the provider settings are being configured for
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace to which this OIDC config belongs.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The URL from the provider that serves as the base for the OpenID configuration.
     */
    providerUrl?: pulumi.Input<string>;
    /**
     * The service accounts associated with these provider settings
     */
    serviceAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The slug identifies the oidc.
     */
    slug?: pulumi.Input<string>;
    /**
     * The slug_perm identifies the oidc.
     */
    slugPerm?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Oidc resource.
 */
export interface OidcArgs {
    /**
     * The claims associated with these provider settings
     */
    claims: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether the provider settings should be used for incoming OIDC requests.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The name of the provider settings are being configured for
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace to which this OIDC config belongs.
     */
    namespace: pulumi.Input<string>;
    /**
     * The URL from the provider that serves as the base for the OpenID configuration.
     */
    providerUrl: pulumi.Input<string>;
    /**
     * The service accounts associated with these provider settings
     */
    serviceAccounts: pulumi.Input<pulumi.Input<string>[]>;
}
