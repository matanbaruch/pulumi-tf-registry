// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { EntitlementArgs, EntitlementState } from "./entitlement";
export type Entitlement = import("./entitlement").Entitlement;
export const Entitlement: typeof import("./entitlement").Entitlement = null as any;
utilities.lazyLoad(exports, ["Entitlement"], () => require("./entitlement"));

export { GetEntitlementListArgs, GetEntitlementListResult, GetEntitlementListOutputArgs } from "./getEntitlementList";
export const getEntitlementList: typeof import("./getEntitlementList").getEntitlementList = null as any;
export const getEntitlementListOutput: typeof import("./getEntitlementList").getEntitlementListOutput = null as any;
utilities.lazyLoad(exports, ["getEntitlementList","getEntitlementListOutput"], () => require("./getEntitlementList"));

export { GetListOrgMembersArgs, GetListOrgMembersResult, GetListOrgMembersOutputArgs } from "./getListOrgMembers";
export const getListOrgMembers: typeof import("./getListOrgMembers").getListOrgMembers = null as any;
export const getListOrgMembersOutput: typeof import("./getListOrgMembers").getListOrgMembersOutput = null as any;
utilities.lazyLoad(exports, ["getListOrgMembers","getListOrgMembersOutput"], () => require("./getListOrgMembers"));

export { GetNamespaceArgs, GetNamespaceResult, GetNamespaceOutputArgs } from "./getNamespace";
export const getNamespace: typeof import("./getNamespace").getNamespace = null as any;
export const getNamespaceOutput: typeof import("./getNamespace").getNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getNamespace","getNamespaceOutput"], () => require("./getNamespace"));

export { GetOrgMemberDetailsArgs, GetOrgMemberDetailsResult, GetOrgMemberDetailsOutputArgs } from "./getOrgMemberDetails";
export const getOrgMemberDetails: typeof import("./getOrgMemberDetails").getOrgMemberDetails = null as any;
export const getOrgMemberDetailsOutput: typeof import("./getOrgMemberDetails").getOrgMemberDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getOrgMemberDetails","getOrgMemberDetailsOutput"], () => require("./getOrgMemberDetails"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetPackageArgs, GetPackageResult, GetPackageOutputArgs } from "./getPackage";
export const getPackage: typeof import("./getPackage").getPackage = null as any;
export const getPackageOutput: typeof import("./getPackage").getPackageOutput = null as any;
utilities.lazyLoad(exports, ["getPackage","getPackageOutput"], () => require("./getPackage"));

export { GetPackageDenyPolicyArgs, GetPackageDenyPolicyResult, GetPackageDenyPolicyOutputArgs } from "./getPackageDenyPolicy";
export const getPackageDenyPolicy: typeof import("./getPackageDenyPolicy").getPackageDenyPolicy = null as any;
export const getPackageDenyPolicyOutput: typeof import("./getPackageDenyPolicy").getPackageDenyPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPackageDenyPolicy","getPackageDenyPolicyOutput"], () => require("./getPackageDenyPolicy"));

export { GetPackageListArgs, GetPackageListResult, GetPackageListOutputArgs } from "./getPackageList";
export const getPackageList: typeof import("./getPackageList").getPackageList = null as any;
export const getPackageListOutput: typeof import("./getPackageList").getPackageListOutput = null as any;
utilities.lazyLoad(exports, ["getPackageList","getPackageListOutput"], () => require("./getPackageList"));

export { GetRepositoryArgs, GetRepositoryResult, GetRepositoryOutputArgs } from "./getRepository";
export const getRepository: typeof import("./getRepository").getRepository = null as any;
export const getRepositoryOutput: typeof import("./getRepository").getRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRepository","getRepositoryOutput"], () => require("./getRepository"));

export { GetRepositoryPrivilegesArgs, GetRepositoryPrivilegesResult, GetRepositoryPrivilegesOutputArgs } from "./getRepositoryPrivileges";
export const getRepositoryPrivileges: typeof import("./getRepositoryPrivileges").getRepositoryPrivileges = null as any;
export const getRepositoryPrivilegesOutput: typeof import("./getRepositoryPrivileges").getRepositoryPrivilegesOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryPrivileges","getRepositoryPrivilegesOutput"], () => require("./getRepositoryPrivileges"));

export { LicensePolicyArgs, LicensePolicyState } from "./licensePolicy";
export type LicensePolicy = import("./licensePolicy").LicensePolicy;
export const LicensePolicy: typeof import("./licensePolicy").LicensePolicy = null as any;
utilities.lazyLoad(exports, ["LicensePolicy"], () => require("./licensePolicy"));

export { ManageTeamArgs, ManageTeamState } from "./manageTeam";
export type ManageTeam = import("./manageTeam").ManageTeam;
export const ManageTeam: typeof import("./manageTeam").ManageTeam = null as any;
utilities.lazyLoad(exports, ["ManageTeam"], () => require("./manageTeam"));

export { OidcArgs, OidcState } from "./oidc";
export type Oidc = import("./oidc").Oidc;
export const Oidc: typeof import("./oidc").Oidc = null as any;
utilities.lazyLoad(exports, ["Oidc"], () => require("./oidc"));

export { PackageDenyPolicyArgs, PackageDenyPolicyState } from "./packageDenyPolicy";
export type PackageDenyPolicy = import("./packageDenyPolicy").PackageDenyPolicy;
export const PackageDenyPolicy: typeof import("./packageDenyPolicy").PackageDenyPolicy = null as any;
utilities.lazyLoad(exports, ["PackageDenyPolicy"], () => require("./packageDenyPolicy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { RepositoryGeoIpRulesArgs, RepositoryGeoIpRulesState } from "./repositoryGeoIpRules";
export type RepositoryGeoIpRules = import("./repositoryGeoIpRules").RepositoryGeoIpRules;
export const RepositoryGeoIpRules: typeof import("./repositoryGeoIpRules").RepositoryGeoIpRules = null as any;
utilities.lazyLoad(exports, ["RepositoryGeoIpRules"], () => require("./repositoryGeoIpRules"));

export { RepositoryPrivilegesArgs, RepositoryPrivilegesState } from "./repositoryPrivileges";
export type RepositoryPrivileges = import("./repositoryPrivileges").RepositoryPrivileges;
export const RepositoryPrivileges: typeof import("./repositoryPrivileges").RepositoryPrivileges = null as any;
utilities.lazyLoad(exports, ["RepositoryPrivileges"], () => require("./repositoryPrivileges"));

export { RepositoryRetentionRuleArgs, RepositoryRetentionRuleState } from "./repositoryRetentionRule";
export type RepositoryRetentionRule = import("./repositoryRetentionRule").RepositoryRetentionRule;
export const RepositoryRetentionRule: typeof import("./repositoryRetentionRule").RepositoryRetentionRule = null as any;
utilities.lazyLoad(exports, ["RepositoryRetentionRule"], () => require("./repositoryRetentionRule"));

export { RepositoryUpstreamArgs, RepositoryUpstreamState } from "./repositoryUpstream";
export type RepositoryUpstream = import("./repositoryUpstream").RepositoryUpstream;
export const RepositoryUpstream: typeof import("./repositoryUpstream").RepositoryUpstream = null as any;
utilities.lazyLoad(exports, ["RepositoryUpstream"], () => require("./repositoryUpstream"));

export { SamlArgs, SamlState } from "./saml";
export type Saml = import("./saml").Saml;
export const Saml: typeof import("./saml").Saml = null as any;
utilities.lazyLoad(exports, ["Saml"], () => require("./saml"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { VulnerabilityPolicyArgs, VulnerabilityPolicyState } from "./vulnerabilityPolicy";
export type VulnerabilityPolicy = import("./vulnerabilityPolicy").VulnerabilityPolicy;
export const VulnerabilityPolicy: typeof import("./vulnerabilityPolicy").VulnerabilityPolicy = null as any;
utilities.lazyLoad(exports, ["VulnerabilityPolicy"], () => require("./vulnerabilityPolicy"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudsmith:index/entitlement:Entitlement":
                return new Entitlement(name, <any>undefined, { urn })
            case "cloudsmith:index/licensePolicy:LicensePolicy":
                return new LicensePolicy(name, <any>undefined, { urn })
            case "cloudsmith:index/manageTeam:ManageTeam":
                return new ManageTeam(name, <any>undefined, { urn })
            case "cloudsmith:index/oidc:Oidc":
                return new Oidc(name, <any>undefined, { urn })
            case "cloudsmith:index/packageDenyPolicy:PackageDenyPolicy":
                return new PackageDenyPolicy(name, <any>undefined, { urn })
            case "cloudsmith:index/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "cloudsmith:index/repositoryGeoIpRules:RepositoryGeoIpRules":
                return new RepositoryGeoIpRules(name, <any>undefined, { urn })
            case "cloudsmith:index/repositoryPrivileges:RepositoryPrivileges":
                return new RepositoryPrivileges(name, <any>undefined, { urn })
            case "cloudsmith:index/repositoryRetentionRule:RepositoryRetentionRule":
                return new RepositoryRetentionRule(name, <any>undefined, { urn })
            case "cloudsmith:index/repositoryUpstream:RepositoryUpstream":
                return new RepositoryUpstream(name, <any>undefined, { urn })
            case "cloudsmith:index/saml:Saml":
                return new Saml(name, <any>undefined, { urn })
            case "cloudsmith:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "cloudsmith:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "cloudsmith:index/vulnerabilityPolicy:VulnerabilityPolicy":
                return new VulnerabilityPolicy(name, <any>undefined, { urn })
            case "cloudsmith:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudsmith", "index/entitlement", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/licensePolicy", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/manageTeam", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/oidc", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/packageDenyPolicy", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/repository", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/repositoryGeoIpRules", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/repositoryPrivileges", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/repositoryRetentionRule", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/repositoryUpstream", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/saml", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/service", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/team", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/vulnerabilityPolicy", _module)
pulumi.runtime.registerResourceModule("cloudsmith", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("cloudsmith", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudsmith") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
