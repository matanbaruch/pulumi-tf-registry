// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LicensePolicy extends pulumi.CustomResource {
    /**
     * Get an existing LicensePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicensePolicyState, opts?: pulumi.CustomResourceOptions): LicensePolicy {
        return new LicensePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudsmith:index/licensePolicy:LicensePolicy';

    /**
     * Returns true if the given object is an instance of LicensePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicensePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicensePolicy.__pulumiType;
    }

    /**
     * Allow unknown licenses within the policy.
     */
    public readonly allowUnknownLicenses!: pulumi.Output<boolean>;
    /**
     * The time the policy was created at.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the license policy.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name of the license policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * On violation of the license policy, quarantine violating packages.
     */
    public readonly onViolationQuarantine!: pulumi.Output<boolean>;
    /**
     * Organization to which this policy belongs.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * A search / filter string of packages to include in the policy.
     */
    public readonly packageQueryString!: pulumi.Output<string | undefined>;
    /**
     * Slug-perm of the license policy
     */
    public /*out*/ readonly slugPerm!: pulumi.Output<string>;
    /**
     * The licenses to deny.
     */
    public readonly spdxIdentifiers!: pulumi.Output<string[]>;
    /**
     * The time the policy last updated at.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a LicensePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicensePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicensePolicyArgs | LicensePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicensePolicyState | undefined;
            resourceInputs["allowUnknownLicenses"] = state ? state.allowUnknownLicenses : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onViolationQuarantine"] = state ? state.onViolationQuarantine : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["packageQueryString"] = state ? state.packageQueryString : undefined;
            resourceInputs["slugPerm"] = state ? state.slugPerm : undefined;
            resourceInputs["spdxIdentifiers"] = state ? state.spdxIdentifiers : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as LicensePolicyArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.spdxIdentifiers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spdxIdentifiers'");
            }
            resourceInputs["allowUnknownLicenses"] = args ? args.allowUnknownLicenses : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onViolationQuarantine"] = args ? args.onViolationQuarantine : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["packageQueryString"] = args ? args.packageQueryString : undefined;
            resourceInputs["spdxIdentifiers"] = args ? args.spdxIdentifiers : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["slugPerm"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LicensePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LicensePolicy resources.
 */
export interface LicensePolicyState {
    /**
     * Allow unknown licenses within the policy.
     */
    allowUnknownLicenses?: pulumi.Input<boolean>;
    /**
     * The time the policy was created at.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the license policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the license policy.
     */
    name?: pulumi.Input<string>;
    /**
     * On violation of the license policy, quarantine violating packages.
     */
    onViolationQuarantine?: pulumi.Input<boolean>;
    /**
     * Organization to which this policy belongs.
     */
    organization?: pulumi.Input<string>;
    /**
     * A search / filter string of packages to include in the policy.
     */
    packageQueryString?: pulumi.Input<string>;
    /**
     * Slug-perm of the license policy
     */
    slugPerm?: pulumi.Input<string>;
    /**
     * The licenses to deny.
     */
    spdxIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time the policy last updated at.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LicensePolicy resource.
 */
export interface LicensePolicyArgs {
    /**
     * Allow unknown licenses within the policy.
     */
    allowUnknownLicenses?: pulumi.Input<boolean>;
    /**
     * The description of the license policy.
     */
    description: pulumi.Input<string>;
    /**
     * The name of the license policy.
     */
    name?: pulumi.Input<string>;
    /**
     * On violation of the license policy, quarantine violating packages.
     */
    onViolationQuarantine?: pulumi.Input<boolean>;
    /**
     * Organization to which this policy belongs.
     */
    organization: pulumi.Input<string>;
    /**
     * A search / filter string of packages to include in the policy.
     */
    packageQueryString?: pulumi.Input<string>;
    /**
     * The licenses to deny.
     */
    spdxIdentifiers: pulumi.Input<pulumi.Input<string>[]>;
}
