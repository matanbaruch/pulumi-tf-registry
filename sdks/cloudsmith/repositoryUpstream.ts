// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RepositoryUpstream extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryUpstream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryUpstreamState, opts?: pulumi.CustomResourceOptions): RepositoryUpstream {
        return new RepositoryUpstream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudsmith:index/repositoryUpstream:RepositoryUpstream';

    /**
     * Returns true if the given object is an instance of RepositoryUpstream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryUpstream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryUpstream.__pulumiType;
    }

    /**
     * The authentication mode to use when accessing this upstream.
     */
    public readonly authMode!: pulumi.Output<string>;
    /**
     * Secret to provide with requests to upstream.
     */
    public readonly authSecret!: pulumi.Output<string | undefined>;
    /**
     * Username to provide with requests to upstream.
     */
    public readonly authUsername!: pulumi.Output<string | undefined>;
    /**
     * (deb only) The component to fetch from the upstream.
     */
    public readonly component!: pulumi.Output<string>;
    /**
     * ISO 8601 timestamp at which the Upstream was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * (rpm only) The distribution version that packages found on this upstream will be associated with.
     */
    public readonly distroVersion!: pulumi.Output<string | undefined>;
    /**
     * (deb only) The distribution versions that packages found on this upstream will be associated with.
     */
    public readonly distroVersions!: pulumi.Output<string[] | undefined>;
    /**
     * The key for extra header #1 to send to upstream.
     */
    public readonly extraHeader1!: pulumi.Output<string | undefined>;
    /**
     * The key for extra header #2 to send to upstream.
     */
    public readonly extraHeader2!: pulumi.Output<string | undefined>;
    /**
     * The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.
     */
    public readonly extraValue1!: pulumi.Output<string | undefined>;
    /**
     * The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.
     */
    public readonly extraValue2!: pulumi.Output<string | undefined>;
    /**
     * (deb/rpm only) When true, source packages will be available from this upstream.
     */
    public readonly includeSources!: pulumi.Output<boolean>;
    /**
     * Whether or not this upstream is active and ready for requests.
     */
    public readonly isActive!: pulumi.Output<boolean>;
    /**
     * The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as
     * operate in a proxy/cache or cache only mode.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages
     * retrieved from this upstream.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Organization to which the Upstream belongs.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * The Repository to which the Upstream belongs.
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * The unique identifier for this Upstream.
     */
    public /*out*/ readonly slugPerm!: pulumi.Output<string>;
    /**
     * ISO 8601 timestamp at which the Upstream was updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * (deb only) The distribution to fetch from the upstream.
     */
    public readonly upstreamDistribution!: pulumi.Output<string | undefined>;
    /**
     * The type of Upstream (docker, nuget, python, ...)
     */
    public readonly upstreamType!: pulumi.Output<string>;
    /**
     * The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the
     * root of the repository.
     */
    public readonly upstreamUrl!: pulumi.Output<string>;
    /**
     * If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this
     * enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS
     * upstreams.
     */
    public readonly verifySsl!: pulumi.Output<boolean>;

    /**
     * Create a RepositoryUpstream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryUpstreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryUpstreamArgs | RepositoryUpstreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryUpstreamState | undefined;
            resourceInputs["authMode"] = state ? state.authMode : undefined;
            resourceInputs["authSecret"] = state ? state.authSecret : undefined;
            resourceInputs["authUsername"] = state ? state.authUsername : undefined;
            resourceInputs["component"] = state ? state.component : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["distroVersion"] = state ? state.distroVersion : undefined;
            resourceInputs["distroVersions"] = state ? state.distroVersions : undefined;
            resourceInputs["extraHeader1"] = state ? state.extraHeader1 : undefined;
            resourceInputs["extraHeader2"] = state ? state.extraHeader2 : undefined;
            resourceInputs["extraValue1"] = state ? state.extraValue1 : undefined;
            resourceInputs["extraValue2"] = state ? state.extraValue2 : undefined;
            resourceInputs["includeSources"] = state ? state.includeSources : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["slugPerm"] = state ? state.slugPerm : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["upstreamDistribution"] = state ? state.upstreamDistribution : undefined;
            resourceInputs["upstreamType"] = state ? state.upstreamType : undefined;
            resourceInputs["upstreamUrl"] = state ? state.upstreamUrl : undefined;
            resourceInputs["verifySsl"] = state ? state.verifySsl : undefined;
        } else {
            const args = argsOrState as RepositoryUpstreamArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.upstreamType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'upstreamType'");
            }
            if ((!args || args.upstreamUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'upstreamUrl'");
            }
            resourceInputs["authMode"] = args ? args.authMode : undefined;
            resourceInputs["authSecret"] = args ? args.authSecret : undefined;
            resourceInputs["authUsername"] = args ? args.authUsername : undefined;
            resourceInputs["component"] = args ? args.component : undefined;
            resourceInputs["distroVersion"] = args ? args.distroVersion : undefined;
            resourceInputs["distroVersions"] = args ? args.distroVersions : undefined;
            resourceInputs["extraHeader1"] = args ? args.extraHeader1 : undefined;
            resourceInputs["extraHeader2"] = args ? args.extraHeader2 : undefined;
            resourceInputs["extraValue1"] = args ? args.extraValue1 : undefined;
            resourceInputs["extraValue2"] = args ? args.extraValue2 : undefined;
            resourceInputs["includeSources"] = args ? args.includeSources : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["upstreamDistribution"] = args ? args.upstreamDistribution : undefined;
            resourceInputs["upstreamType"] = args ? args.upstreamType : undefined;
            resourceInputs["upstreamUrl"] = args ? args.upstreamUrl : undefined;
            resourceInputs["verifySsl"] = args ? args.verifySsl : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["slugPerm"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryUpstream.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RepositoryUpstream resources.
 */
export interface RepositoryUpstreamState {
    /**
     * The authentication mode to use when accessing this upstream.
     */
    authMode?: pulumi.Input<string>;
    /**
     * Secret to provide with requests to upstream.
     */
    authSecret?: pulumi.Input<string>;
    /**
     * Username to provide with requests to upstream.
     */
    authUsername?: pulumi.Input<string>;
    /**
     * (deb only) The component to fetch from the upstream.
     */
    component?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp at which the Upstream was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * (rpm only) The distribution version that packages found on this upstream will be associated with.
     */
    distroVersion?: pulumi.Input<string>;
    /**
     * (deb only) The distribution versions that packages found on this upstream will be associated with.
     */
    distroVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The key for extra header #1 to send to upstream.
     */
    extraHeader1?: pulumi.Input<string>;
    /**
     * The key for extra header #2 to send to upstream.
     */
    extraHeader2?: pulumi.Input<string>;
    /**
     * The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.
     */
    extraValue1?: pulumi.Input<string>;
    /**
     * The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.
     */
    extraValue2?: pulumi.Input<string>;
    /**
     * (deb/rpm only) When true, source packages will be available from this upstream.
     */
    includeSources?: pulumi.Input<boolean>;
    /**
     * Whether or not this upstream is active and ready for requests.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as
     * operate in a proxy/cache or cache only mode.
     */
    mode?: pulumi.Input<string>;
    /**
     * A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages
     * retrieved from this upstream.
     */
    name?: pulumi.Input<string>;
    /**
     * The Organization to which the Upstream belongs.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.
     */
    priority?: pulumi.Input<number>;
    /**
     * The Repository to which the Upstream belongs.
     */
    repository?: pulumi.Input<string>;
    /**
     * The unique identifier for this Upstream.
     */
    slugPerm?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp at which the Upstream was updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * (deb only) The distribution to fetch from the upstream.
     */
    upstreamDistribution?: pulumi.Input<string>;
    /**
     * The type of Upstream (docker, nuget, python, ...)
     */
    upstreamType?: pulumi.Input<string>;
    /**
     * The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the
     * root of the repository.
     */
    upstreamUrl?: pulumi.Input<string>;
    /**
     * If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this
     * enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS
     * upstreams.
     */
    verifySsl?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RepositoryUpstream resource.
 */
export interface RepositoryUpstreamArgs {
    /**
     * The authentication mode to use when accessing this upstream.
     */
    authMode?: pulumi.Input<string>;
    /**
     * Secret to provide with requests to upstream.
     */
    authSecret?: pulumi.Input<string>;
    /**
     * Username to provide with requests to upstream.
     */
    authUsername?: pulumi.Input<string>;
    /**
     * (deb only) The component to fetch from the upstream.
     */
    component?: pulumi.Input<string>;
    /**
     * (rpm only) The distribution version that packages found on this upstream will be associated with.
     */
    distroVersion?: pulumi.Input<string>;
    /**
     * (deb only) The distribution versions that packages found on this upstream will be associated with.
     */
    distroVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The key for extra header #1 to send to upstream.
     */
    extraHeader1?: pulumi.Input<string>;
    /**
     * The key for extra header #2 to send to upstream.
     */
    extraHeader2?: pulumi.Input<string>;
    /**
     * The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.
     */
    extraValue1?: pulumi.Input<string>;
    /**
     * The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.
     */
    extraValue2?: pulumi.Input<string>;
    /**
     * (deb/rpm only) When true, source packages will be available from this upstream.
     */
    includeSources?: pulumi.Input<boolean>;
    /**
     * Whether or not this upstream is active and ready for requests.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as
     * operate in a proxy/cache or cache only mode.
     */
    mode?: pulumi.Input<string>;
    /**
     * A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages
     * retrieved from this upstream.
     */
    name?: pulumi.Input<string>;
    /**
     * The Organization to which the Upstream belongs.
     */
    namespace: pulumi.Input<string>;
    /**
     * Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.
     */
    priority?: pulumi.Input<number>;
    /**
     * The Repository to which the Upstream belongs.
     */
    repository: pulumi.Input<string>;
    /**
     * (deb only) The distribution to fetch from the upstream.
     */
    upstreamDistribution?: pulumi.Input<string>;
    /**
     * The type of Upstream (docker, nuget, python, ...)
     */
    upstreamType: pulumi.Input<string>;
    /**
     * The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the
     * root of the repository.
     */
    upstreamUrl: pulumi.Input<string>;
    /**
     * If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this
     * enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS
     * upstreams.
     */
    verifySsl?: pulumi.Input<boolean>;
}
