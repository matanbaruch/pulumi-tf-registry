// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudsmith:index/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * Base URL from which packages and other artifacts are downloaded.
     */
    public /*out*/ readonly cdnUrl!: pulumi.Output<string>;
    /**
     * If checked, missing credentials for this repository where basic authentication is required shall present an enriched
     * value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as
     * SBT where the authentication realm is used to distinguish and disambiguate credentials.
     */
    public readonly contextualAuthRealm!: pulumi.Output<boolean>;
    /**
     * If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    public readonly copyOwn!: pulumi.Output<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific copy setting.
     */
    public readonly copyPackages!: pulumi.Output<string>;
    /**
     * ISO 8601 timestamp at which the repository was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * This defines the default level of privilege that all of your organization members have for this repository. This does
     * not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies
     * to owners, managers and members). Be careful if setting this to admin, because any member will be able to change
     * settings.Valid values include: `Admin`, `Read`, `Write`, `None`.
     */
    public readonly defaultPrivilege!: pulumi.Output<string>;
    /**
     * If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    public readonly deleteOwn!: pulumi.Output<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific delete setting.
     */
    public readonly deletePackages!: pulumi.Output<string>;
    /**
     * ISO 8601 timestamp at which the repository was deleted (repositories are soft deleted temporarily to allow cancelling).
     */
    public /*out*/ readonly deletedAt!: pulumi.Output<string>;
    /**
     * A description of the repository's purpose/contents.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited
     * extension of the lifetime of access tokens.
     */
    public readonly dockerRefreshTokensEnabled!: pulumi.Output<boolean>;
    /**
     * If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages.
     * Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.
     */
    public readonly indexFiles!: pulumi.Output<boolean>;
    /**
     * True if this repository is open source.
     */
    public /*out*/ readonly isOpenSource!: pulumi.Output<boolean>;
    /**
     * True if this repository is private.
     */
    public /*out*/ readonly isPrivate!: pulumi.Output<boolean>;
    /**
     * True if this repository is public.
     */
    public /*out*/ readonly isPublic!: pulumi.Output<boolean>;
    /**
     * If checked, users can move any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    public readonly moveOwn!: pulumi.Output<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific move setting.
     */
    public readonly movePackages!: pulumi.Output<string>;
    /**
     * A descriptive name for the repository.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Namespace to which this repository belongs.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * API endpoint where data about this namespace can be retrieved.
     */
    public /*out*/ readonly namespaceUrl!: pulumi.Output<string>;
    /**
     * If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the
     * public npmjs.org registry. If there is at least one version for a package, others will not be proxied.
     */
    public readonly proxyNpmjs!: pulumi.Output<boolean>;
    /**
     * If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from
     * the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.
     */
    public readonly proxyPypi!: pulumi.Output<boolean>;
    /**
     * If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.
     */
    public readonly rawPackageIndexEnabled!: pulumi.Output<boolean>;
    /**
     * If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.
     */
    public readonly rawPackageIndexSignaturesEnabled!: pulumi.Output<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded
     * by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the
     * user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish
     * will fail.
     */
    public readonly replacePackages!: pulumi.Output<string>;
    /**
     * If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default.
     * This only applies if the user has the required privilege for the republishing AND has the required privilege to delete
     * existing packages that they don't own.
     */
    public readonly replacePackagesByDefault!: pulumi.Output<boolean>;
    /**
     * The repository type changes how it is accessed and billed. Private repositories can only be used on paid plans, but are
     * visible only to you or authorised delegates. Public repositories are free to use on all plans and visible to all
     * Cloudsmith users.Valid values include: `Private` or `Public`.
     */
    public readonly repositoryType!: pulumi.Output<string | undefined>;
    /**
     * If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    public readonly resyncOwn!: pulumi.Output<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific resync setting.
     */
    public readonly resyncPackages!: pulumi.Output<string>;
    /**
     * If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    public readonly scanOwn!: pulumi.Output<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific scan setting.
     */
    public readonly scanPackages!: pulumi.Output<string>;
    /**
     * Website URL for this repository.
     */
    public /*out*/ readonly selfHtmlUrl!: pulumi.Output<string>;
    /**
     * API endpoint where data about this repository can be retrieved.
     */
    public /*out*/ readonly selfUrl!: pulumi.Output<string>;
    /**
     * If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type
     * uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded
     * only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.
     */
    public readonly showSetupAll!: pulumi.Output<boolean>;
    /**
     * The slug identifies the repository in URIs.
     */
    public readonly slug!: pulumi.Output<string>;
    /**
     * The slug_perm immutably identifies the repository. It will never change once a repository has been created.
     */
    public /*out*/ readonly slugPerm!: pulumi.Output<string>;
    /**
     * The Cloudsmith region in which package files are stored.Supported regions include: Sydney, Australia
     * (au-sydney),Singapore (sg-singapore), Montreal, Canada (ca-montreal), Frankfurt, Germany (de-frankfurt), Oregon,United
     * States (us-oregon), Ohio, United States (us-ohio), Dublin, Ireland (ie-dublin) (default)
     */
    public readonly storageRegion!: pulumi.Output<string>;
    /**
     * If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this off if
     * you have packages that are old or otherwise mildly off-spec, but we can't guarantee the packages will work with npm-cli
     * or other tooling correctly. Turn off at your own risk!
     */
    public readonly strictNpmValidation!: pulumi.Output<boolean>;
    /**
     * If checked, packages pushed with a pre-release component on that version will be marked with the 'latest' tag. Note that
     * if unchecked, a repository containing ONLY pre-release versions, will have no version marked latest which may cause
     * incompatibility with native tools
     */
    public readonly tagPreReleasesAsLatest!: pulumi.Output<boolean | undefined>;
    /**
     * If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the
     * entitlement token used to authenticate the repository, in the form of 'source=t-'; or 'source=none' if no token was
     * used. You can use this to help with pinning.
     */
    public readonly useDebianLabels!: pulumi.Output<boolean>;
    /**
     * If checked, dependencies of uploaded Cargo crates which do not set an explicit value for "registry" will be assumed to
     * be available from crates.io. If unchecked, dependencies with unspecified "registry" values will be assumed to be
     * available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever
     * installed from Cloudsmith unless explicitly specified as belong to another registry.
     */
    public readonly useDefaultCargoUpstream!: pulumi.Output<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to see/use entitlement tokens with private repositories.
     * If a user does not have the permission, they will only be able to download packages using other credentials, such as
     * email/password via basic authentication. Use this if you want to force users to only use their user-based token, which
     * is tied to their access (if removed, they can't use it). Possible values: Read, Write, Admin.
     */
    public readonly useEntitlementsPrivilege!: pulumi.Output<string>;
    /**
     * If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is
     * not tied to specific system architecture (like i686).
     */
    public readonly useNoarchPackages!: pulumi.Output<boolean>;
    /**
     * If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that
     * contains source code rather than built binaries.
     */
    public readonly useSourcePackages!: pulumi.Output<boolean>;
    /**
     * If checked, vulnerability scanning will be enabled for all supported packages within this repository.
     */
    public readonly useVulnerabilityScanning!: pulumi.Output<boolean>;
    /**
     * If checked, users can use and manage their own user-specific entitlement token for the repository (if private).
     * Otherwise, user-specific entitlements are disabled for all users.
     */
    public readonly userEntitlementsEnabled!: pulumi.Output<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to view repository statistics, to include
     * entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any
     * statistics, either via the UI, API or CLI.Valid values include: `Admin`, `Write`, `Read`.
     */
    public readonly viewStatistics!: pulumi.Output<string>;
    public readonly waitForDeletion!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["cdnUrl"] = state ? state.cdnUrl : undefined;
            resourceInputs["contextualAuthRealm"] = state ? state.contextualAuthRealm : undefined;
            resourceInputs["copyOwn"] = state ? state.copyOwn : undefined;
            resourceInputs["copyPackages"] = state ? state.copyPackages : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["defaultPrivilege"] = state ? state.defaultPrivilege : undefined;
            resourceInputs["deleteOwn"] = state ? state.deleteOwn : undefined;
            resourceInputs["deletePackages"] = state ? state.deletePackages : undefined;
            resourceInputs["deletedAt"] = state ? state.deletedAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dockerRefreshTokensEnabled"] = state ? state.dockerRefreshTokensEnabled : undefined;
            resourceInputs["indexFiles"] = state ? state.indexFiles : undefined;
            resourceInputs["isOpenSource"] = state ? state.isOpenSource : undefined;
            resourceInputs["isPrivate"] = state ? state.isPrivate : undefined;
            resourceInputs["isPublic"] = state ? state.isPublic : undefined;
            resourceInputs["moveOwn"] = state ? state.moveOwn : undefined;
            resourceInputs["movePackages"] = state ? state.movePackages : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["namespaceUrl"] = state ? state.namespaceUrl : undefined;
            resourceInputs["proxyNpmjs"] = state ? state.proxyNpmjs : undefined;
            resourceInputs["proxyPypi"] = state ? state.proxyPypi : undefined;
            resourceInputs["rawPackageIndexEnabled"] = state ? state.rawPackageIndexEnabled : undefined;
            resourceInputs["rawPackageIndexSignaturesEnabled"] = state ? state.rawPackageIndexSignaturesEnabled : undefined;
            resourceInputs["replacePackages"] = state ? state.replacePackages : undefined;
            resourceInputs["replacePackagesByDefault"] = state ? state.replacePackagesByDefault : undefined;
            resourceInputs["repositoryType"] = state ? state.repositoryType : undefined;
            resourceInputs["resyncOwn"] = state ? state.resyncOwn : undefined;
            resourceInputs["resyncPackages"] = state ? state.resyncPackages : undefined;
            resourceInputs["scanOwn"] = state ? state.scanOwn : undefined;
            resourceInputs["scanPackages"] = state ? state.scanPackages : undefined;
            resourceInputs["selfHtmlUrl"] = state ? state.selfHtmlUrl : undefined;
            resourceInputs["selfUrl"] = state ? state.selfUrl : undefined;
            resourceInputs["showSetupAll"] = state ? state.showSetupAll : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["slugPerm"] = state ? state.slugPerm : undefined;
            resourceInputs["storageRegion"] = state ? state.storageRegion : undefined;
            resourceInputs["strictNpmValidation"] = state ? state.strictNpmValidation : undefined;
            resourceInputs["tagPreReleasesAsLatest"] = state ? state.tagPreReleasesAsLatest : undefined;
            resourceInputs["useDebianLabels"] = state ? state.useDebianLabels : undefined;
            resourceInputs["useDefaultCargoUpstream"] = state ? state.useDefaultCargoUpstream : undefined;
            resourceInputs["useEntitlementsPrivilege"] = state ? state.useEntitlementsPrivilege : undefined;
            resourceInputs["useNoarchPackages"] = state ? state.useNoarchPackages : undefined;
            resourceInputs["useSourcePackages"] = state ? state.useSourcePackages : undefined;
            resourceInputs["useVulnerabilityScanning"] = state ? state.useVulnerabilityScanning : undefined;
            resourceInputs["userEntitlementsEnabled"] = state ? state.userEntitlementsEnabled : undefined;
            resourceInputs["viewStatistics"] = state ? state.viewStatistics : undefined;
            resourceInputs["waitForDeletion"] = state ? state.waitForDeletion : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["contextualAuthRealm"] = args ? args.contextualAuthRealm : undefined;
            resourceInputs["copyOwn"] = args ? args.copyOwn : undefined;
            resourceInputs["copyPackages"] = args ? args.copyPackages : undefined;
            resourceInputs["defaultPrivilege"] = args ? args.defaultPrivilege : undefined;
            resourceInputs["deleteOwn"] = args ? args.deleteOwn : undefined;
            resourceInputs["deletePackages"] = args ? args.deletePackages : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dockerRefreshTokensEnabled"] = args ? args.dockerRefreshTokensEnabled : undefined;
            resourceInputs["indexFiles"] = args ? args.indexFiles : undefined;
            resourceInputs["moveOwn"] = args ? args.moveOwn : undefined;
            resourceInputs["movePackages"] = args ? args.movePackages : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["proxyNpmjs"] = args ? args.proxyNpmjs : undefined;
            resourceInputs["proxyPypi"] = args ? args.proxyPypi : undefined;
            resourceInputs["rawPackageIndexEnabled"] = args ? args.rawPackageIndexEnabled : undefined;
            resourceInputs["rawPackageIndexSignaturesEnabled"] = args ? args.rawPackageIndexSignaturesEnabled : undefined;
            resourceInputs["replacePackages"] = args ? args.replacePackages : undefined;
            resourceInputs["replacePackagesByDefault"] = args ? args.replacePackagesByDefault : undefined;
            resourceInputs["repositoryType"] = args ? args.repositoryType : undefined;
            resourceInputs["resyncOwn"] = args ? args.resyncOwn : undefined;
            resourceInputs["resyncPackages"] = args ? args.resyncPackages : undefined;
            resourceInputs["scanOwn"] = args ? args.scanOwn : undefined;
            resourceInputs["scanPackages"] = args ? args.scanPackages : undefined;
            resourceInputs["showSetupAll"] = args ? args.showSetupAll : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["storageRegion"] = args ? args.storageRegion : undefined;
            resourceInputs["strictNpmValidation"] = args ? args.strictNpmValidation : undefined;
            resourceInputs["tagPreReleasesAsLatest"] = args ? args.tagPreReleasesAsLatest : undefined;
            resourceInputs["useDebianLabels"] = args ? args.useDebianLabels : undefined;
            resourceInputs["useDefaultCargoUpstream"] = args ? args.useDefaultCargoUpstream : undefined;
            resourceInputs["useEntitlementsPrivilege"] = args ? args.useEntitlementsPrivilege : undefined;
            resourceInputs["useNoarchPackages"] = args ? args.useNoarchPackages : undefined;
            resourceInputs["useSourcePackages"] = args ? args.useSourcePackages : undefined;
            resourceInputs["useVulnerabilityScanning"] = args ? args.useVulnerabilityScanning : undefined;
            resourceInputs["userEntitlementsEnabled"] = args ? args.userEntitlementsEnabled : undefined;
            resourceInputs["viewStatistics"] = args ? args.viewStatistics : undefined;
            resourceInputs["waitForDeletion"] = args ? args.waitForDeletion : undefined;
            resourceInputs["cdnUrl"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["deletedAt"] = undefined /*out*/;
            resourceInputs["isOpenSource"] = undefined /*out*/;
            resourceInputs["isPrivate"] = undefined /*out*/;
            resourceInputs["isPublic"] = undefined /*out*/;
            resourceInputs["namespaceUrl"] = undefined /*out*/;
            resourceInputs["selfHtmlUrl"] = undefined /*out*/;
            resourceInputs["selfUrl"] = undefined /*out*/;
            resourceInputs["slugPerm"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * Base URL from which packages and other artifacts are downloaded.
     */
    cdnUrl?: pulumi.Input<string>;
    /**
     * If checked, missing credentials for this repository where basic authentication is required shall present an enriched
     * value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as
     * SBT where the authentication realm is used to distinguish and disambiguate credentials.
     */
    contextualAuthRealm?: pulumi.Input<boolean>;
    /**
     * If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    copyOwn?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific copy setting.
     */
    copyPackages?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp at which the repository was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * This defines the default level of privilege that all of your organization members have for this repository. This does
     * not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies
     * to owners, managers and members). Be careful if setting this to admin, because any member will be able to change
     * settings.Valid values include: `Admin`, `Read`, `Write`, `None`.
     */
    defaultPrivilege?: pulumi.Input<string>;
    /**
     * If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    deleteOwn?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific delete setting.
     */
    deletePackages?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp at which the repository was deleted (repositories are soft deleted temporarily to allow cancelling).
     */
    deletedAt?: pulumi.Input<string>;
    /**
     * A description of the repository's purpose/contents.
     */
    description?: pulumi.Input<string>;
    /**
     * If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited
     * extension of the lifetime of access tokens.
     */
    dockerRefreshTokensEnabled?: pulumi.Input<boolean>;
    /**
     * If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages.
     * Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.
     */
    indexFiles?: pulumi.Input<boolean>;
    /**
     * True if this repository is open source.
     */
    isOpenSource?: pulumi.Input<boolean>;
    /**
     * True if this repository is private.
     */
    isPrivate?: pulumi.Input<boolean>;
    /**
     * True if this repository is public.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * If checked, users can move any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    moveOwn?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific move setting.
     */
    movePackages?: pulumi.Input<string>;
    /**
     * A descriptive name for the repository.
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace to which this repository belongs.
     */
    namespace?: pulumi.Input<string>;
    /**
     * API endpoint where data about this namespace can be retrieved.
     */
    namespaceUrl?: pulumi.Input<string>;
    /**
     * If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the
     * public npmjs.org registry. If there is at least one version for a package, others will not be proxied.
     */
    proxyNpmjs?: pulumi.Input<boolean>;
    /**
     * If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from
     * the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.
     */
    proxyPypi?: pulumi.Input<boolean>;
    /**
     * If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.
     */
    rawPackageIndexEnabled?: pulumi.Input<boolean>;
    /**
     * If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.
     */
    rawPackageIndexSignaturesEnabled?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded
     * by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the
     * user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish
     * will fail.
     */
    replacePackages?: pulumi.Input<string>;
    /**
     * If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default.
     * This only applies if the user has the required privilege for the republishing AND has the required privilege to delete
     * existing packages that they don't own.
     */
    replacePackagesByDefault?: pulumi.Input<boolean>;
    /**
     * The repository type changes how it is accessed and billed. Private repositories can only be used on paid plans, but are
     * visible only to you or authorised delegates. Public repositories are free to use on all plans and visible to all
     * Cloudsmith users.Valid values include: `Private` or `Public`.
     */
    repositoryType?: pulumi.Input<string>;
    /**
     * If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    resyncOwn?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific resync setting.
     */
    resyncPackages?: pulumi.Input<string>;
    /**
     * If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    scanOwn?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific scan setting.
     */
    scanPackages?: pulumi.Input<string>;
    /**
     * Website URL for this repository.
     */
    selfHtmlUrl?: pulumi.Input<string>;
    /**
     * API endpoint where data about this repository can be retrieved.
     */
    selfUrl?: pulumi.Input<string>;
    /**
     * If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type
     * uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded
     * only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.
     */
    showSetupAll?: pulumi.Input<boolean>;
    /**
     * The slug identifies the repository in URIs.
     */
    slug?: pulumi.Input<string>;
    /**
     * The slug_perm immutably identifies the repository. It will never change once a repository has been created.
     */
    slugPerm?: pulumi.Input<string>;
    /**
     * The Cloudsmith region in which package files are stored.Supported regions include: Sydney, Australia
     * (au-sydney),Singapore (sg-singapore), Montreal, Canada (ca-montreal), Frankfurt, Germany (de-frankfurt), Oregon,United
     * States (us-oregon), Ohio, United States (us-ohio), Dublin, Ireland (ie-dublin) (default)
     */
    storageRegion?: pulumi.Input<string>;
    /**
     * If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this off if
     * you have packages that are old or otherwise mildly off-spec, but we can't guarantee the packages will work with npm-cli
     * or other tooling correctly. Turn off at your own risk!
     */
    strictNpmValidation?: pulumi.Input<boolean>;
    /**
     * If checked, packages pushed with a pre-release component on that version will be marked with the 'latest' tag. Note that
     * if unchecked, a repository containing ONLY pre-release versions, will have no version marked latest which may cause
     * incompatibility with native tools
     */
    tagPreReleasesAsLatest?: pulumi.Input<boolean>;
    /**
     * If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the
     * entitlement token used to authenticate the repository, in the form of 'source=t-'; or 'source=none' if no token was
     * used. You can use this to help with pinning.
     */
    useDebianLabels?: pulumi.Input<boolean>;
    /**
     * If checked, dependencies of uploaded Cargo crates which do not set an explicit value for "registry" will be assumed to
     * be available from crates.io. If unchecked, dependencies with unspecified "registry" values will be assumed to be
     * available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever
     * installed from Cloudsmith unless explicitly specified as belong to another registry.
     */
    useDefaultCargoUpstream?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to see/use entitlement tokens with private repositories.
     * If a user does not have the permission, they will only be able to download packages using other credentials, such as
     * email/password via basic authentication. Use this if you want to force users to only use their user-based token, which
     * is tied to their access (if removed, they can't use it). Possible values: Read, Write, Admin.
     */
    useEntitlementsPrivilege?: pulumi.Input<string>;
    /**
     * If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is
     * not tied to specific system architecture (like i686).
     */
    useNoarchPackages?: pulumi.Input<boolean>;
    /**
     * If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that
     * contains source code rather than built binaries.
     */
    useSourcePackages?: pulumi.Input<boolean>;
    /**
     * If checked, vulnerability scanning will be enabled for all supported packages within this repository.
     */
    useVulnerabilityScanning?: pulumi.Input<boolean>;
    /**
     * If checked, users can use and manage their own user-specific entitlement token for the repository (if private).
     * Otherwise, user-specific entitlements are disabled for all users.
     */
    userEntitlementsEnabled?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to view repository statistics, to include
     * entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any
     * statistics, either via the UI, API or CLI.Valid values include: `Admin`, `Write`, `Read`.
     */
    viewStatistics?: pulumi.Input<string>;
    waitForDeletion?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * If checked, missing credentials for this repository where basic authentication is required shall present an enriched
     * value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as
     * SBT where the authentication realm is used to distinguish and disambiguate credentials.
     */
    contextualAuthRealm?: pulumi.Input<boolean>;
    /**
     * If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    copyOwn?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific copy setting.
     */
    copyPackages?: pulumi.Input<string>;
    /**
     * This defines the default level of privilege that all of your organization members have for this repository. This does
     * not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies
     * to owners, managers and members). Be careful if setting this to admin, because any member will be able to change
     * settings.Valid values include: `Admin`, `Read`, `Write`, `None`.
     */
    defaultPrivilege?: pulumi.Input<string>;
    /**
     * If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    deleteOwn?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific delete setting.
     */
    deletePackages?: pulumi.Input<string>;
    /**
     * A description of the repository's purpose/contents.
     */
    description?: pulumi.Input<string>;
    /**
     * If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited
     * extension of the lifetime of access tokens.
     */
    dockerRefreshTokensEnabled?: pulumi.Input<boolean>;
    /**
     * If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages.
     * Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.
     */
    indexFiles?: pulumi.Input<boolean>;
    /**
     * If checked, users can move any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    moveOwn?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific move setting.
     */
    movePackages?: pulumi.Input<string>;
    /**
     * A descriptive name for the repository.
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace to which this repository belongs.
     */
    namespace: pulumi.Input<string>;
    /**
     * If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the
     * public npmjs.org registry. If there is at least one version for a package, others will not be proxied.
     */
    proxyNpmjs?: pulumi.Input<boolean>;
    /**
     * If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from
     * the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.
     */
    proxyPypi?: pulumi.Input<boolean>;
    /**
     * If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.
     */
    rawPackageIndexEnabled?: pulumi.Input<boolean>;
    /**
     * If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.
     */
    rawPackageIndexSignaturesEnabled?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded
     * by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the
     * user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish
     * will fail.
     */
    replacePackages?: pulumi.Input<string>;
    /**
     * If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default.
     * This only applies if the user has the required privilege for the republishing AND has the required privilege to delete
     * existing packages that they don't own.
     */
    replacePackagesByDefault?: pulumi.Input<boolean>;
    /**
     * The repository type changes how it is accessed and billed. Private repositories can only be used on paid plans, but are
     * visible only to you or authorised delegates. Public repositories are free to use on all plans and visible to all
     * Cloudsmith users.Valid values include: `Private` or `Public`.
     */
    repositoryType?: pulumi.Input<string>;
    /**
     * If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    resyncOwn?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific resync setting.
     */
    resyncPackages?: pulumi.Input<string>;
    /**
     * If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write
     * privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the
     * repository, and any inherited from the org.
     */
    scanOwn?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by
     * that user, in which the permission may be overridden by the user-specific scan setting.
     */
    scanPackages?: pulumi.Input<string>;
    /**
     * If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type
     * uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded
     * only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.
     */
    showSetupAll?: pulumi.Input<boolean>;
    /**
     * The slug identifies the repository in URIs.
     */
    slug?: pulumi.Input<string>;
    /**
     * The Cloudsmith region in which package files are stored.Supported regions include: Sydney, Australia
     * (au-sydney),Singapore (sg-singapore), Montreal, Canada (ca-montreal), Frankfurt, Germany (de-frankfurt), Oregon,United
     * States (us-oregon), Ohio, United States (us-ohio), Dublin, Ireland (ie-dublin) (default)
     */
    storageRegion?: pulumi.Input<string>;
    /**
     * If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this off if
     * you have packages that are old or otherwise mildly off-spec, but we can't guarantee the packages will work with npm-cli
     * or other tooling correctly. Turn off at your own risk!
     */
    strictNpmValidation?: pulumi.Input<boolean>;
    /**
     * If checked, packages pushed with a pre-release component on that version will be marked with the 'latest' tag. Note that
     * if unchecked, a repository containing ONLY pre-release versions, will have no version marked latest which may cause
     * incompatibility with native tools
     */
    tagPreReleasesAsLatest?: pulumi.Input<boolean>;
    /**
     * If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the
     * entitlement token used to authenticate the repository, in the form of 'source=t-'; or 'source=none' if no token was
     * used. You can use this to help with pinning.
     */
    useDebianLabels?: pulumi.Input<boolean>;
    /**
     * If checked, dependencies of uploaded Cargo crates which do not set an explicit value for "registry" will be assumed to
     * be available from crates.io. If unchecked, dependencies with unspecified "registry" values will be assumed to be
     * available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever
     * installed from Cloudsmith unless explicitly specified as belong to another registry.
     */
    useDefaultCargoUpstream?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to see/use entitlement tokens with private repositories.
     * If a user does not have the permission, they will only be able to download packages using other credentials, such as
     * email/password via basic authentication. Use this if you want to force users to only use their user-based token, which
     * is tied to their access (if removed, they can't use it). Possible values: Read, Write, Admin.
     */
    useEntitlementsPrivilege?: pulumi.Input<string>;
    /**
     * If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is
     * not tied to specific system architecture (like i686).
     */
    useNoarchPackages?: pulumi.Input<boolean>;
    /**
     * If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that
     * contains source code rather than built binaries.
     */
    useSourcePackages?: pulumi.Input<boolean>;
    /**
     * If checked, vulnerability scanning will be enabled for all supported packages within this repository.
     */
    useVulnerabilityScanning?: pulumi.Input<boolean>;
    /**
     * If checked, users can use and manage their own user-specific entitlement token for the repository (if private).
     * Otherwise, user-specific entitlements are disabled for all users.
     */
    userEntitlementsEnabled?: pulumi.Input<boolean>;
    /**
     * This defines the minimum level of privilege required for a user to view repository statistics, to include
     * entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any
     * statistics, either via the UI, API or CLI.Valid values include: `Admin`, `Write`, `Read`.
     */
    viewStatistics?: pulumi.Input<string>;
    waitForDeletion?: pulumi.Input<boolean>;
}
