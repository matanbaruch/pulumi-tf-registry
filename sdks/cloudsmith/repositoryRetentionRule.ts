// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RepositoryRetentionRule extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryRetentionRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryRetentionRuleState, opts?: pulumi.CustomResourceOptions): RepositoryRetentionRule {
        return new RepositoryRetentionRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudsmith:index/repositoryRetentionRule:RepositoryRetentionRule';

    /**
     * Returns true if the given object is an instance of RepositoryRetentionRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryRetentionRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryRetentionRule.__pulumiType;
    }

    /**
     * The namespace of the repository.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * The name of the repository.
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * The maximum number of packages to retain. Must be between 0 and 10000.
     */
    public readonly retentionCountLimit!: pulumi.Output<number | undefined>;
    /**
     * The number of days of packages to retain. Must be between 0 and 180.
     */
    public readonly retentionDaysLimit!: pulumi.Output<number | undefined>;
    /**
     * If true, the retention lifecycle rules will be activated for the repository and settings will be updated.
     */
    public readonly retentionEnabled!: pulumi.Output<boolean>;
    /**
     * If true, retention will apply to packages by package formats rather than across all package formats.
     */
    public readonly retentionGroupByFormat!: pulumi.Output<boolean | undefined>;
    /**
     * If true, retention will apply to groups of packages by name rather than all packages.
     */
    public readonly retentionGroupByName!: pulumi.Output<boolean | undefined>;
    /**
     * If true, retention will apply to packages by package type rather than across all package types for one or more formats.
     */
    public readonly retentionGroupByPackageType!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum total size (in bytes) of packages to retain. Must be between 0 and 21474836480 (21.47 GB / 21474.83 MB).
     */
    public readonly retentionSizeLimit!: pulumi.Output<number | undefined>;

    /**
     * Create a RepositoryRetentionRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryRetentionRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryRetentionRuleArgs | RepositoryRetentionRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryRetentionRuleState | undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["retentionCountLimit"] = state ? state.retentionCountLimit : undefined;
            resourceInputs["retentionDaysLimit"] = state ? state.retentionDaysLimit : undefined;
            resourceInputs["retentionEnabled"] = state ? state.retentionEnabled : undefined;
            resourceInputs["retentionGroupByFormat"] = state ? state.retentionGroupByFormat : undefined;
            resourceInputs["retentionGroupByName"] = state ? state.retentionGroupByName : undefined;
            resourceInputs["retentionGroupByPackageType"] = state ? state.retentionGroupByPackageType : undefined;
            resourceInputs["retentionSizeLimit"] = state ? state.retentionSizeLimit : undefined;
        } else {
            const args = argsOrState as RepositoryRetentionRuleArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.retentionEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionEnabled'");
            }
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["retentionCountLimit"] = args ? args.retentionCountLimit : undefined;
            resourceInputs["retentionDaysLimit"] = args ? args.retentionDaysLimit : undefined;
            resourceInputs["retentionEnabled"] = args ? args.retentionEnabled : undefined;
            resourceInputs["retentionGroupByFormat"] = args ? args.retentionGroupByFormat : undefined;
            resourceInputs["retentionGroupByName"] = args ? args.retentionGroupByName : undefined;
            resourceInputs["retentionGroupByPackageType"] = args ? args.retentionGroupByPackageType : undefined;
            resourceInputs["retentionSizeLimit"] = args ? args.retentionSizeLimit : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryRetentionRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RepositoryRetentionRule resources.
 */
export interface RepositoryRetentionRuleState {
    /**
     * The namespace of the repository.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The name of the repository.
     */
    repository?: pulumi.Input<string>;
    /**
     * The maximum number of packages to retain. Must be between 0 and 10000.
     */
    retentionCountLimit?: pulumi.Input<number>;
    /**
     * The number of days of packages to retain. Must be between 0 and 180.
     */
    retentionDaysLimit?: pulumi.Input<number>;
    /**
     * If true, the retention lifecycle rules will be activated for the repository and settings will be updated.
     */
    retentionEnabled?: pulumi.Input<boolean>;
    /**
     * If true, retention will apply to packages by package formats rather than across all package formats.
     */
    retentionGroupByFormat?: pulumi.Input<boolean>;
    /**
     * If true, retention will apply to groups of packages by name rather than all packages.
     */
    retentionGroupByName?: pulumi.Input<boolean>;
    /**
     * If true, retention will apply to packages by package type rather than across all package types for one or more formats.
     */
    retentionGroupByPackageType?: pulumi.Input<boolean>;
    /**
     * The maximum total size (in bytes) of packages to retain. Must be between 0 and 21474836480 (21.47 GB / 21474.83 MB).
     */
    retentionSizeLimit?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RepositoryRetentionRule resource.
 */
export interface RepositoryRetentionRuleArgs {
    /**
     * The namespace of the repository.
     */
    namespace: pulumi.Input<string>;
    /**
     * The name of the repository.
     */
    repository: pulumi.Input<string>;
    /**
     * The maximum number of packages to retain. Must be between 0 and 10000.
     */
    retentionCountLimit?: pulumi.Input<number>;
    /**
     * The number of days of packages to retain. Must be between 0 and 180.
     */
    retentionDaysLimit?: pulumi.Input<number>;
    /**
     * If true, the retention lifecycle rules will be activated for the repository and settings will be updated.
     */
    retentionEnabled: pulumi.Input<boolean>;
    /**
     * If true, retention will apply to packages by package formats rather than across all package formats.
     */
    retentionGroupByFormat?: pulumi.Input<boolean>;
    /**
     * If true, retention will apply to groups of packages by name rather than all packages.
     */
    retentionGroupByName?: pulumi.Input<boolean>;
    /**
     * If true, retention will apply to packages by package type rather than across all package types for one or more formats.
     */
    retentionGroupByPackageType?: pulumi.Input<boolean>;
    /**
     * The maximum total size (in bytes) of packages to retain. Must be between 0 and 21474836480 (21.47 GB / 21474.83 MB).
     */
    retentionSizeLimit?: pulumi.Input<number>;
}
