// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Netnamespace extends pulumi.CustomResource {
    /**
     * Get an existing Netnamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetnamespaceState, opts?: pulumi.CustomResourceOptions): Netnamespace {
        return new Netnamespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openshift:index/netnamespace:Netnamespace';

    /**
     * Returns true if the given object is an instance of Netnamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Netnamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Netnamespace.__pulumiType;
    }

    /**
     * EgressIPs is a list of reserved IPs that will be used as the source for external traffic coming from pods in this
     * namespace. (If empty, external traffic will be masqueraded to Node IPs.)
     */
    public readonly egressIps!: pulumi.Output<string[] | undefined>;
    /**
     * Standard netnamespace's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#metadata
     */
    public readonly metadata!: pulumi.Output<outputs.NetnamespaceMetadata>;
    /**
     * (integer) NetID is the network identifier of the network namespace assigned to each overlay network packet. This can be
     * manipulated with the "oc adm pod-network" commands.
     */
    public /*out*/ readonly netid!: pulumi.Output<string>;
    /**
     * (string) NetName is the name of the network namespace. (This is the same as the object's name, but both fields must be
     * set.)
     */
    public readonly netname!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetnamespaceTimeouts | undefined>;

    /**
     * Create a Netnamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetnamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetnamespaceArgs | NetnamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetnamespaceState | undefined;
            resourceInputs["egressIps"] = state ? state.egressIps : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["netid"] = state ? state.netid : undefined;
            resourceInputs["netname"] = state ? state.netname : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetnamespaceArgs | undefined;
            if ((!args || args.metadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            if ((!args || args.netname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netname'");
            }
            resourceInputs["egressIps"] = args ? args.egressIps : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["netname"] = args ? args.netname : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["netid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Netnamespace.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Netnamespace resources.
 */
export interface NetnamespaceState {
    /**
     * EgressIPs is a list of reserved IPs that will be used as the source for external traffic coming from pods in this
     * namespace. (If empty, external traffic will be masqueraded to Node IPs.)
     */
    egressIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Standard netnamespace's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#metadata
     */
    metadata?: pulumi.Input<inputs.NetnamespaceMetadata>;
    /**
     * (integer) NetID is the network identifier of the network namespace assigned to each overlay network packet. This can be
     * manipulated with the "oc adm pod-network" commands.
     */
    netid?: pulumi.Input<string>;
    /**
     * (string) NetName is the name of the network namespace. (This is the same as the object's name, but both fields must be
     * set.)
     */
    netname?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetnamespaceTimeouts>;
}

/**
 * The set of arguments for constructing a Netnamespace resource.
 */
export interface NetnamespaceArgs {
    /**
     * EgressIPs is a list of reserved IPs that will be used as the source for external traffic coming from pods in this
     * namespace. (If empty, external traffic will be masqueraded to Node IPs.)
     */
    egressIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Standard netnamespace's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#metadata
     */
    metadata: pulumi.Input<inputs.NetnamespaceMetadata>;
    /**
     * (string) NetName is the name of the network namespace. (This is the same as the object's name, but both fields must be
     * set.)
     */
    netname: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetnamespaceTimeouts>;
}
