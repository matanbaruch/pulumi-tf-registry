// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The provider type for the openshift package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'openshift';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * PEM-encoded client certificate for TLS authentication.
     */
    public readonly clientCertificate!: pulumi.Output<string | undefined>;
    /**
     * PEM-encoded client certificate key for TLS authentication.
     */
    public readonly clientKey!: pulumi.Output<string | undefined>;
    /**
     * PEM-encoded root certificates bundle for TLS authentication.
     */
    public readonly clusterCaCertificate!: pulumi.Output<string | undefined>;
    public readonly configContext!: pulumi.Output<string | undefined>;
    public readonly configContextAuthInfo!: pulumi.Output<string | undefined>;
    public readonly configContextCluster!: pulumi.Output<string | undefined>;
    /**
     * Path to the kube config file, defaults to ~/.kube/config
     */
    public readonly configPath!: pulumi.Output<string | undefined>;
    /**
     * The hostname (in form of URI) of Kubernetes master.
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Token to authenticate an service account
     */
    public readonly token!: pulumi.Output<string | undefined>;
    /**
     * The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["clientCertificate"] = args ? args.clientCertificate : undefined;
            resourceInputs["clientKey"] = args ? args.clientKey : undefined;
            resourceInputs["clusterCaCertificate"] = args ? args.clusterCaCertificate : undefined;
            resourceInputs["configContext"] = args ? args.configContext : undefined;
            resourceInputs["configContextAuthInfo"] = args ? args.configContextAuthInfo : undefined;
            resourceInputs["configContextCluster"] = args ? args.configContextCluster : undefined;
            resourceInputs["configPath"] = args ? args.configPath : undefined;
            resourceInputs["exec"] = pulumi.output(args ? args.exec : undefined).apply(JSON.stringify);
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["insecure"] = pulumi.output(args ? args.insecure : undefined).apply(JSON.stringify);
            resourceInputs["loadConfigFile"] = pulumi.output(args ? args.loadConfigFile : undefined).apply(JSON.stringify);
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["token"] = args ? args.token : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * PEM-encoded client certificate for TLS authentication.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * PEM-encoded client certificate key for TLS authentication.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * PEM-encoded root certificates bundle for TLS authentication.
     */
    clusterCaCertificate?: pulumi.Input<string>;
    configContext?: pulumi.Input<string>;
    configContextAuthInfo?: pulumi.Input<string>;
    configContextCluster?: pulumi.Input<string>;
    /**
     * Path to the kube config file, defaults to ~/.kube/config
     */
    configPath?: pulumi.Input<string>;
    exec?: pulumi.Input<inputs.ProviderExec>;
    /**
     * The hostname (in form of URI) of Kubernetes master.
     */
    host?: pulumi.Input<string>;
    /**
     * Whether server should be accessed without verifying the TLS certificate.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * Load local kubeconfig.
     */
    loadConfigFile?: pulumi.Input<boolean>;
    /**
     * The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
     */
    password?: pulumi.Input<string>;
    /**
     * Token to authenticate an service account
     */
    token?: pulumi.Input<string>;
    /**
     * The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
     */
    username?: pulumi.Input<string>;
}
