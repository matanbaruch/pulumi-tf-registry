// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BuildConfigMetadata {
    /**
     * An unstructured key value map stored with the build config that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency
     */
    generateName?: pulumi.Input<string>;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation?: pulumi.Input<number>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the build config. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the build config, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace defines the space within which name of the build config must be unique.
     */
    namespace?: pulumi.Input<string>;
    /**
     * An opaque value that represents the internal version of this build config that can be used by clients to determine when build config has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * A URL representing this build config.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The unique in time and space value for this build config. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid?: pulumi.Input<string>;
}

export interface BuildConfigSpec {
    /**
     * (integer) completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer
     */
    completionDeadlineSeconds?: pulumi.Input<number>;
    /**
     * (integer) failedBuildsHistoryLimit is the number of old failed builds to retain. If not specified, all failed builds are retained.
     */
    failedBuildsHistoryLimit?: pulumi.Input<number>;
    /**
     * (object) nodeSelector is a selector which must be true for the build pod to fit on a node If nil, it can be overridden by default build nodeselector values for the cluster. If set to an empty map or a map with any values, default build nodeselector values are ignored.
     */
    nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (v1.BuildOutput) output describes the Docker image the Strategy should produce.
     */
    outputs?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecOutput>[]>;
    /**
     * (v1.BuildPostCommitSpec) postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry.
     */
    postCommits?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecPostCommit>[]>;
    /**
     * (v1.ResourceRequirements) resources computes resource requirements to execute the build.
     */
    resources?: pulumi.Input<inputs.BuildConfigSpecResources>;
    /**
     * (string) RunPolicy describes how the new build created from this build configuration will be scheduled for execution. This is optional, if not specified we default to "Serial".
     */
    runPolicy?: pulumi.Input<string>;
    /**
     * (string) serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * (v1.BuildSource) source describes the SCM in use.
     */
    source?: pulumi.Input<inputs.BuildConfigSpecSource>;
    /**
     * (v1.BuildStrategy) strategy defines how to perform a build.
     */
    strategies?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategy>[]>;
    /**
     * (integer) successfulBuildsHistoryLimit is the number of old successful builds to retain. If not specified, all successful builds are retained.
     */
    successfulBuildsHistoryLimit?: pulumi.Input<number>;
    /**
     * (array) triggers determine how new Builds can be launched from a BuildConfig. If no triggers are defined, a new build can only occur as a result of an explicit client build creation.
     */
    triggers?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecTrigger>[]>;
}

export interface BuildConfigSpecOutput {
    /**
     * (array) imageLabels define a list of labels that are applied to the resulting image. If there are multiple labels with the same name then the last one in the list is used.
     */
    imageLabels?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecOutputImageLabel>[]>;
    /**
     * (v1.LocalObjectReference) PushSecret is the name of a Secret that would be used for setting up the authentication for executing the Docker push to authentication enabled Docker Registry (or Docker Hub).
     */
    pushSecrets?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecOutputPushSecret>[]>;
    /**
     * (v1.ObjectReference) to defines an optional location to push the output of this build to. Kind must be one of 'ImageStreamTag' or 'DockerImage'. This value will be used to look up a Docker image repository to push to. In the case of an ImageStreamTag, the ImageStreamTag will be looked for in the namespace of the build unless Namespace is specified.
     */
    tos?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecOutputTo>[]>;
}

export interface BuildConfigSpecOutputImageLabel {
    /**
     * (string) name defines the name of the label. It must have non-zero length.
     */
    name?: pulumi.Input<string>;
    /**
     * (string) value defines the literal value of the label.
     */
    value?: pulumi.Input<string>;
}

export interface BuildConfigSpecOutputPushSecret {
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecOutputTo {
    /**
     * (string) API version of the referent.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * (string) If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
     */
    fieldPath?: pulumi.Input<string>;
    /**
     * (string) Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
     */
    kind?: pulumi.Input<string>;
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    namespace?: pulumi.Input<string>;
    /**
     * (string) Specific resource_version to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * (string) UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid?: pulumi.Input<string>;
}

export interface BuildConfigSpecPostCommit {
    /**
     * (array) args is a list of arguments that are provided to either Command, Script or the Docker image's default entrypoint. The arguments are placed immediately after the command to be run.
     */
    args?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (array) command is the command to run. It may not be specified with Script. This might be needed if the image doesn't have `/bin/sh`, or if you do not want to use a shell. In all other cases, using Script might be more convenient.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (string) script is a shell script to be run with `/bin/sh -ic`. It may not be specified with Command. Use Script when a shell script is appropriate to execute the post build hook, for example for running unit tests with `rake test`. If you need control over the image entrypoint, or if the image does not have `/bin/sh`, use Command and/or Args. The `-i` flag is needed to support CentOS and RHEL images that use Software Collections (SCL), in order to have the appropriate collections enabled in the shell. E.g., in the Ruby image, this is necessary to make `ruby`, `bundle` and other binaries available in the PATH.
     */
    script?: pulumi.Input<string>;
}

export interface BuildConfigSpecResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
     */
    limits?: pulumi.Input<inputs.BuildConfigSpecResourcesLimits>;
    requests?: pulumi.Input<inputs.BuildConfigSpecResourcesRequests>;
}

export interface BuildConfigSpecResourcesLimits {
    cpu?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
}

export interface BuildConfigSpecResourcesRequests {
    cpu?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
}

export interface BuildConfigSpecSource {
    /**
     * (v1.BinaryBuildSource) binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy. For Docker builds, this is the build context and an optional Dockerfile may be specified to override any Dockerfile in the build context. For Source builds, this is assumed to be an archive as described above. For Source and Docker builds, if binary.asFile is set the build will receive a directory with a single file. contextDir may be used when an archive is provided. Custom builds will receive this binary as input on STDIN.
     */
    binary?: pulumi.Input<inputs.BuildConfigSpecSourceBinary>;
    /**
     * (string) contextDir specifies the sub-directory where the source code for the application exists. This allows to have buildable sources in directory other than root of repository.
     */
    contextDir?: pulumi.Input<string>;
    /**
     * (string) dockerfile is the raw contents of a Dockerfile which should be built. When this option is specified, the FROM may be modified based on your strategy base image and additional ENV stanzas from your strategy environment will be added after the FROM, but before the rest of your Dockerfile stanzas. The Dockerfile source type may be used with other options like git - in those cases the Git repo will have any innate Dockerfile replaced in the context dir.
     */
    dockerfile?: pulumi.Input<string>;
    /**
     * (v1.GitBuildSource) git contains optional information about git build source
     */
    gits?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecSourceGit>[]>;
    /**
     * (array) images describes a set of images to be used to provide source for the build
     */
    images?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecSourceImage>[]>;
    /**
     * (array) secrets represents a list of secrets and their destinations that will be used only for the build.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecSourceSecret>[]>;
    /**
     * (v1.LocalObjectReference) sourceSecret is the name of a Secret that would be used for setting up the authentication for cloning private repository. The secret contains valid credentials for remote repository, where the data's key represent the authentication method to be used and value is the base64 encoded credentials. Supported auth methods are: ssh-privatekey.
     */
    sourceSecrets?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecSourceSourceSecret>[]>;
    /**
     * (string) type of build input to accept
     */
    type?: pulumi.Input<string>;
}

export interface BuildConfigSpecSourceBinary {
    /**
     * (string) asFile indicates that the provided binary input should be considered a single file within the build input. For example, specifying "webapp.war" would place the provided binary as `/webapp.war` for the builder. If left empty, the Docker and Source build strategies assume this file is a zip, tar, or tar.gz file and extract it as the source. The custom strategy receives this binary as standard input. This filename may not contain slashes or be '..' or '.'.
     */
    asFile?: pulumi.Input<string>;
}

export interface BuildConfigSpecSourceGit {
    /**
     * (string) ref is the branch/tag/ref to build.
     */
    ref?: pulumi.Input<string>;
    /**
     * (string) uri points to the source that will be built. The structure of the source will depend on the type of build to run
     */
    uri?: pulumi.Input<string>;
}

export interface BuildConfigSpecSourceImage {
    /**
     * (v1.ObjectReference) from is a reference to an ImageStreamTag, ImageStreamImage, or DockerImage to copy source from.
     */
    froms?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecSourceImageFrom>[]>;
    /**
     * (array) paths is a list of source and destination paths to copy from the image.
     */
    paths?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecSourceImagePath>[]>;
    /**
     * (v1.LocalObjectReference) pullSecret is a reference to a secret to be used to pull the image from a registry If the image is pulled from the OpenShift registry, this field does not need to be set.
     */
    pullSecrets?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecSourceImagePullSecret>[]>;
}

export interface BuildConfigSpecSourceImageFrom {
    /**
     * (string) API version of the referent.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * (string) If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
     */
    fieldPath?: pulumi.Input<string>;
    /**
     * (string) Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
     */
    kind?: pulumi.Input<string>;
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    namespace?: pulumi.Input<string>;
    /**
     * (string) Specific resource_version to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * (string) UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid?: pulumi.Input<string>;
}

export interface BuildConfigSpecSourceImagePath {
    /**
     * (string) destinationDir is the relative directory within the build directory where files copied from the image are placed.
     */
    destinationDir?: pulumi.Input<string>;
    /**
     * (string) sourcePath is the absolute path of the file or directory inside the image to copy to the build directory.  If the source path ends in /. then the content of the directory will be copied, but the directory itself will not be created at the destination.
     */
    sourcePath?: pulumi.Input<string>;
}

export interface BuildConfigSpecSourceImagePullSecret {
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecSourceSecret {
    /**
     * (string) destinationDir is the directory where the files from the secret should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. Later, when the script finishes, all files injected will be truncated to zero length. For the Docker build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during docker build.
     */
    destinationDir?: pulumi.Input<string>;
    /**
     * (v1.LocalObjectReference) secret is a reference to an existing secret that you want to use in your build.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecSourceSecretSecret>[]>;
}

export interface BuildConfigSpecSourceSecretSecret {
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecSourceSourceSecret {
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategy {
    /**
     * (v1.DockerBuildStrategy) dockerStrategy holds the parameters to the Docker build strategy.
     */
    dockerStrategies?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategy>[]>;
    /**
     * (v1.JenkinsPipelineBuildStrategy) JenkinsPipelineStrategy holds the parameters to the Jenkins Pipeline build strategy. This strategy is in tech preview.
     */
    jenkinsPipelineStrategies?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategyJenkinsPipelineStrategy>[]>;
    /**
     * (v1.SourceBuildStrategy) sourceStrategy holds the parameters to the Source build strategy.
     */
    sourceStrategies?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategySourceStrategy>[]>;
    /**
     * (string) type is the kind of build strategy.
     */
    type?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyDockerStrategy {
    /**
     * (array) buildArgs contains build arguments that will be resolved in the Dockerfile.  See https://docs.docker.com/engine/reference/builder/#/arg for more details.
     */
    buildArgs?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyBuildArg>[]>;
    /**
     * (string) dockerfilePath is the path of the Dockerfile that will be used to build the Docker image, relative to the root of the context (contextDir).
     */
    dockerfilePath?: pulumi.Input<string>;
    /**
     * (array) env contains additional environment variables you want to pass into a builder container.
     */
    envs?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyEnv>[]>;
    /**
     * (boolean) forcePull describes if the builder should pull the images from registry prior to building.
     */
    forcePull?: pulumi.Input<boolean>;
    /**
     * (v1.ObjectReference) from is a reference to an ImageStreamTag, ImageStreamImage, or DockerImage to copy source from.
     */
    froms?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyFrom>[]>;
    /**
     * (string) imageOptimizationPolicy describes what optimizations the system can use when building images to reduce the final size or time spent building the image. The default policy is 'None' which means the final build image will be equivalent to an image created by the Docker build API. The experimental policy 'SkipLayers' will avoid committing new layers in between each image step, and will fail if the Dockerfile cannot provide compatibility with the 'None' policy. An additional experimental policy 'SkipLayersAndWarn' is the same as 'SkipLayers' but simply warns if compatibility cannot be preserved.
     */
    imageOptimizationPolicy?: pulumi.Input<string>;
    /**
     * (boolean) noCache if set to true indicates that the docker build must be executed with the --no-cache=true flag
     */
    noCache?: pulumi.Input<boolean>;
    /**
     * (v1.LocalObjectReference) pullSecret is a reference to a secret to be used to pull the image from a registry If the image is pulled from the OpenShift registry, this field does not need to be set.
     */
    pullSecrets?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyPullSecret>[]>;
}

export interface BuildConfigSpecStrategyDockerStrategyBuildArg {
    /**
     * (string) Name of the environment variable. Must be a C_IDENTIFIER.
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: pulumi.Input<string>;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyBuildArgValueFrom>;
}

export interface BuildConfigSpecStrategyDockerStrategyBuildArgValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyBuildArgValueFromConfigMapKeyRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    fieldRef?: pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyBuildArgValueFromFieldRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    resourceFieldRef?: pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyBuildArgValueFromResourceFieldRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    secretKeyRef?: pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyBuildArgValueFromSecretKeyRef>;
}

export interface BuildConfigSpecStrategyDockerStrategyBuildArgValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyDockerStrategyBuildArgValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyDockerStrategyBuildArgValueFromResourceFieldRef {
    containerName?: pulumi.Input<string>;
    /**
     * Resource to select
     */
    resource: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyDockerStrategyBuildArgValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyDockerStrategyEnv {
    /**
     * (string) Name of the environment variable. Must be a C_IDENTIFIER.
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: pulumi.Input<string>;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyEnvValueFrom>;
}

export interface BuildConfigSpecStrategyDockerStrategyEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyEnvValueFromConfigMapKeyRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    fieldRef?: pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyEnvValueFromFieldRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    resourceFieldRef?: pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyEnvValueFromResourceFieldRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    secretKeyRef?: pulumi.Input<inputs.BuildConfigSpecStrategyDockerStrategyEnvValueFromSecretKeyRef>;
}

export interface BuildConfigSpecStrategyDockerStrategyEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyDockerStrategyEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyDockerStrategyEnvValueFromResourceFieldRef {
    containerName?: pulumi.Input<string>;
    /**
     * Resource to select
     */
    resource: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyDockerStrategyEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyDockerStrategyFrom {
    /**
     * (string) API version of the referent.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * (string) If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
     */
    fieldPath?: pulumi.Input<string>;
    /**
     * (string) Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
     */
    kind?: pulumi.Input<string>;
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    namespace?: pulumi.Input<string>;
    /**
     * (string) Specific resource_version to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * (string) UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyDockerStrategyPullSecret {
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyJenkinsPipelineStrategy {
    /**
     * (array) env contains additional environment variables you want to pass into a builder container.
     */
    envs?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategyJenkinsPipelineStrategyEnv>[]>;
    /**
     * (string) Jenkinsfile defines the optional raw contents of a Jenkinsfile which defines a Jenkins pipeline build.
     */
    jenkinsfile?: pulumi.Input<string>;
    /**
     * (string) JenkinsfilePath is the optional path of the Jenkinsfile that will be used to configure the pipeline relative to the root of the context (contextDir). If both JenkinsfilePath & Jenkinsfile are both not specified, this defaults to Jenkinsfile in the root of the specified contextDir.
     */
    jenkinsfilePath?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyJenkinsPipelineStrategyEnv {
    /**
     * (string) Name of the environment variable. Must be a C_IDENTIFIER.
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: pulumi.Input<string>;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: pulumi.Input<inputs.BuildConfigSpecStrategyJenkinsPipelineStrategyEnvValueFrom>;
}

export interface BuildConfigSpecStrategyJenkinsPipelineStrategyEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: pulumi.Input<inputs.BuildConfigSpecStrategyJenkinsPipelineStrategyEnvValueFromConfigMapKeyRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    fieldRef?: pulumi.Input<inputs.BuildConfigSpecStrategyJenkinsPipelineStrategyEnvValueFromFieldRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    resourceFieldRef?: pulumi.Input<inputs.BuildConfigSpecStrategyJenkinsPipelineStrategyEnvValueFromResourceFieldRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    secretKeyRef?: pulumi.Input<inputs.BuildConfigSpecStrategyJenkinsPipelineStrategyEnvValueFromSecretKeyRef>;
}

export interface BuildConfigSpecStrategyJenkinsPipelineStrategyEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyJenkinsPipelineStrategyEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyJenkinsPipelineStrategyEnvValueFromResourceFieldRef {
    containerName?: pulumi.Input<string>;
    /**
     * Resource to select
     */
    resource: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategyJenkinsPipelineStrategyEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategySourceStrategy {
    /**
     * (array) env contains additional environment variables you want to pass into a builder container.
     */
    envs?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategySourceStrategyEnv>[]>;
    /**
     * (boolean) forcePull describes if the builder should pull the images from registry prior to building.
     */
    forcePull?: pulumi.Input<boolean>;
    /**
     * (v1.ObjectReference) from is a reference to an ImageStreamTag, ImageStreamImage, or DockerImage to copy source from.
     */
    froms?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategySourceStrategyFrom>[]>;
    /**
     * (boolean) incremental flag forces the Source build to do incremental builds if true.
     */
    incremental?: pulumi.Input<boolean>;
    /**
     * (v1.LocalObjectReference) pullSecret is a reference to a secret to be used to pull the image from a registry If the image is pulled from the OpenShift registry, this field does not need to be set.
     */
    pullSecrets?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategySourceStrategyPullSecret>[]>;
    /**
     * (array) runtimeArtifacts specifies a list of source/destination pairs that will be copied from the builder to the runtime image. sourcePath can be a file or directory. destinationDir must be a directory. destinationDir can also be empty or equal to ".", in this case it just refers to the root of WORKDIR. Deprecated: This feature will be removed in a future release. Use ImageSource to copy binary artifacts created from one build into a separate runtime image.
     */
    runtimeArtifacts?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategySourceStrategyRuntimeArtifact>[]>;
    /**
     * (v1.ObjectReference) runtimeImage is an optional image that is used to run an application without unneeded dependencies installed. The building of the application is still done in the builder image but, post build, you can copy the needed artifacts in the runtime image for use. Deprecated: This feature will be removed in a future release. Use ImageSource to copy binary artifacts created from one build into a separate runtime image.
     */
    runtimeImages?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecStrategySourceStrategyRuntimeImage>[]>;
    /**
     * (string) scripts is the location of Source scripts
     */
    scripts?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategySourceStrategyEnv {
    /**
     * (string) Name of the environment variable. Must be a C_IDENTIFIER.
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: pulumi.Input<string>;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: pulumi.Input<inputs.BuildConfigSpecStrategySourceStrategyEnvValueFrom>;
}

export interface BuildConfigSpecStrategySourceStrategyEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: pulumi.Input<inputs.BuildConfigSpecStrategySourceStrategyEnvValueFromConfigMapKeyRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    fieldRef?: pulumi.Input<inputs.BuildConfigSpecStrategySourceStrategyEnvValueFromFieldRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    resourceFieldRef?: pulumi.Input<inputs.BuildConfigSpecStrategySourceStrategyEnvValueFromResourceFieldRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    secretKeyRef?: pulumi.Input<inputs.BuildConfigSpecStrategySourceStrategyEnvValueFromSecretKeyRef>;
}

export interface BuildConfigSpecStrategySourceStrategyEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategySourceStrategyEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategySourceStrategyEnvValueFromResourceFieldRef {
    containerName?: pulumi.Input<string>;
    /**
     * Resource to select
     */
    resource: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategySourceStrategyEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategySourceStrategyFrom {
    /**
     * (string) API version of the referent.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * (string) If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
     */
    fieldPath?: pulumi.Input<string>;
    /**
     * (string) Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
     */
    kind?: pulumi.Input<string>;
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    namespace?: pulumi.Input<string>;
    /**
     * (string) Specific resource_version to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * (string) UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategySourceStrategyPullSecret {
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategySourceStrategyRuntimeArtifact {
    /**
     * (string) destinationDir is the relative directory within the build directory where files copied from the image are placed.
     */
    destinationDir?: pulumi.Input<string>;
    /**
     * (string) sourcePath is the absolute path of the file or directory inside the image to copy to the build directory.  If the source path ends in /. then the content of the directory will be copied, but the directory itself will not be created at the destination.
     */
    sourcePath?: pulumi.Input<string>;
}

export interface BuildConfigSpecStrategySourceStrategyRuntimeImage {
    /**
     * (string) API version of the referent.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * (string) If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
     */
    fieldPath?: pulumi.Input<string>;
    /**
     * (string) Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
     */
    kind?: pulumi.Input<string>;
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    namespace?: pulumi.Input<string>;
    /**
     * (string) Specific resource_version to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * (string) UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid?: pulumi.Input<string>;
}

export interface BuildConfigSpecTrigger {
    /**
     * (v1.WebHookTrigger) BitbucketWebHook contains the parameters for a Bitbucket webhook type of trigger
     */
    bitbuckets?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecTriggerBitbucket>[]>;
    /**
     * (v1.WebHookTrigger) generic contains the parameters for a Generic webhook type of trigger
     */
    generics?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecTriggerGeneric>[]>;
    /**
     * (v1.WebHookTrigger) github contains the parameters for a GitHub webhook type of trigger
     */
    githubs?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecTriggerGithub>[]>;
    /**
     * (v1.WebHookTrigger) GitLabWebHook contains the parameters for a GitLab webhook type of trigger
     */
    gitlabs?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecTriggerGitlab>[]>;
    /**
     * (v1.WebHookTrigger) GitLabWebHook contains the parameters for a GitLab webhook type of trigger
     */
    imageChanges?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecTriggerImageChange>[]>;
    /**
     * (string) type is the type of build trigger
     */
    type?: pulumi.Input<string>;
}

export interface BuildConfigSpecTriggerBitbucket {
    /**
     * (boolean) allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook.
     */
    allowEnv?: pulumi.Input<boolean>;
    /**
     * (string) secret used to validate requests.
     */
    secret?: pulumi.Input<string>;
}

export interface BuildConfigSpecTriggerGeneric {
    /**
     * (boolean) allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook.
     */
    allowEnv?: pulumi.Input<boolean>;
    /**
     * (string) secret used to validate requests.
     */
    secret?: pulumi.Input<string>;
}

export interface BuildConfigSpecTriggerGithub {
    /**
     * (boolean) allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook.
     */
    allowEnv?: pulumi.Input<boolean>;
    /**
     * (string) secret used to validate requests.
     */
    secret?: pulumi.Input<string>;
}

export interface BuildConfigSpecTriggerGitlab {
    /**
     * (boolean) allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook.
     */
    allowEnv?: pulumi.Input<boolean>;
    /**
     * (string) secret used to validate requests.
     */
    secret?: pulumi.Input<string>;
}

export interface BuildConfigSpecTriggerImageChange {
    /**
     * (v1.ObjectReference) from is a reference to an ImageStreamTag, ImageStreamImage, or DockerImage to copy source from.
     */
    froms?: pulumi.Input<pulumi.Input<inputs.BuildConfigSpecTriggerImageChangeFrom>[]>;
    /**
     * (string) lastTriggeredImageID is used internally by the ImageChangeController to save last used image ID for build
     */
    lastTriggeredImageId?: pulumi.Input<string>;
}

export interface BuildConfigSpecTriggerImageChangeFrom {
    /**
     * (string) API version of the referent.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * (string) If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
     */
    fieldPath?: pulumi.Input<string>;
    /**
     * (string) Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
     */
    kind?: pulumi.Input<string>;
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    namespace?: pulumi.Input<string>;
    /**
     * (string) Specific resource_version to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * (string) UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid?: pulumi.Input<string>;
}

export interface DeploymentConfigMetadata {
    /**
     * An unstructured key value map stored with the pod that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency
     */
    generateName?: pulumi.Input<string>;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation?: pulumi.Input<number>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the pod. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the pod, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace defines the space within which name of the pod must be unique.
     */
    namespace?: pulumi.Input<string>;
    /**
     * An opaque value that represents the internal version of this pod that can be used by clients to determine when pod has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * A URL representing this pod.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The unique in time and space value for this pod. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid?: pulumi.Input<string>;
}

export interface DeploymentConfigSpec {
    /**
     * (integer) MinReadySeconds is the minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
     */
    minReadySeconds?: pulumi.Input<number>;
    /**
     * (boolean) Paused indicates that the deployment config is paused resulting in no new deployments on template changes or changes in the template caused by other triggers.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * (integer) Replicas is the number of desired replicas.
     */
    replicas?: pulumi.Input<number>;
    /**
     * (integer) RevisionHistoryLimit is the number of old ReplicationControllers to retain to allow for rollbacks. This field is a pointer to allow for differentiation between an explicit zero and not specified. Defaults to 10. (This only applies to DeploymentConfigs created via the new group API resource, not the legacy resource.)
     */
    revisionHistoryLimit?: pulumi.Input<number>;
    /**
     * (object) Selector is a label query over pods that should match the Replicas count.
     */
    selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (v1.DeploymentStrategy) Strategy describes how a deployment is executed.
     */
    strategy?: pulumi.Input<inputs.DeploymentConfigSpecStrategy>;
    /**
     * (v1.PodTemplateSpec) Template is the object that describes the pod that will be created if insufficient replicas are detected.
     */
    template: pulumi.Input<inputs.DeploymentConfigSpecTemplate>;
    /**
     * (array) Triggers determine how updates to a DeploymentConfig result in new deployments. If no triggers are defined, a new deployment can only occur as a result of an explicit client update to the DeploymentConfig with a new LatestVersion. If null, defaults to having a config change trigger.
     */
    triggers?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTrigger>[]>;
}

export interface DeploymentConfigSpecStrategy {
    /**
     * (integer) ActiveDeadlineSeconds is the duration in seconds that the deployer pods for this deployment config may be active on a node before the system actively tries to terminate them.
     */
    activeDeadlineSeconds?: pulumi.Input<number>;
    /**
     * (v1.ResourceRequirements) Resources contains resource requirements to execute the deployment and any hooks.
     */
    resources?: pulumi.Input<inputs.DeploymentConfigSpecStrategyResources>;
    /**
     * (v1.RollingDeploymentStrategyParams) RollingParams are the input to the Rolling deployment strategy.
     */
    rollingParams?: pulumi.Input<inputs.DeploymentConfigSpecStrategyRollingParams>;
    /**
     * (string) Type is the name of a deployment strategy.
     */
    type?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecStrategyResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
     */
    limits?: pulumi.Input<inputs.DeploymentConfigSpecStrategyResourcesLimits>;
    requests?: pulumi.Input<inputs.DeploymentConfigSpecStrategyResourcesRequests>;
}

export interface DeploymentConfigSpecStrategyResourcesLimits {
    cpu?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecStrategyResourcesRequests {
    cpu?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecStrategyRollingParams {
    /**
     * (integer) IntervalSeconds is the time to wait between polling deployment status after update. If the value is nil, a default will be used.
     */
    intervalSeconds?: pulumi.Input<number>;
    /**
     * (intstr.IntOrString) MaxSurge is the maximum number of pods that can be scheduled above the original number of pods. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxUnavailable is 0. By default, 25% is used. Example: when this is set to 30%, the new RC can be scaled up by 30% immediately when the rolling update starts. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of original pods.
     */
    maxSurge?: pulumi.Input<string>;
    /**
     * (intstr.IntOrString) MaxUnavailable is the maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding down. This cannot be 0 if MaxSurge is 0. By default, 25% is used. Example: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update.
     */
    maxUnavailable?: pulumi.Input<string>;
    /**
     * (integer) TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.
     */
    timeoutSeconds?: pulumi.Input<number>;
    /**
     * (integer) UpdatePeriodSeconds is the time to wait between individual pod updates. If the value is nil, a default will be used.
     */
    updatePeriodSeconds?: pulumi.Input<number>;
}

export interface DeploymentConfigSpecTemplate {
    /**
     * Standard pod's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#metadata
     */
    metadata: pulumi.Input<inputs.DeploymentConfigSpecTemplateMetadata>;
    /**
     * (v1.PodSpec) Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
     */
    spec: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpec>;
}

export interface DeploymentConfigSpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the pod that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency
     */
    generateName?: pulumi.Input<string>;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation?: pulumi.Input<number>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the pod. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the pod, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace defines the space within which name of the pod must be unique.
     */
    namespace?: pulumi.Input<string>;
    /**
     * An opaque value that represents the internal version of this pod that can be used by clients to determine when pod has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * A URL representing this pod.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The unique in time and space value for this pod. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: pulumi.Input<number>;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinity>;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: pulumi.Input<boolean>;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers
     */
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainer>[]>;
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecDnsConfig>;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Optional: Defaults to 'ClusterFirst', see [Kubernetes reference](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy).
     */
    dnsPolicy?: pulumi.Input<string>;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecHostAlias>[]>;
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: pulumi.Input<boolean>;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: pulumi.Input<boolean>;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: pulumi.Input<boolean>;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname?: pulumi.Input<string>;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecImagePullSecret>[]>;
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainer>[]>;
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName?: pulumi.Input<string>;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://kubernetes.io/docs/user-guide/node-selection.
     */
    nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: http://kubernetes.io/docs/user-guide/pod-states#restartpolicy.
     */
    restartPolicy?: pulumi.Input<string>;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecSecurityContext>;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName?: pulumi.Input<string>;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: pulumi.Input<number>;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecToleration>[]>;
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: http://kubernetes.io/docs/user-guide/volumes
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolume>[]>;
}

export interface DeploymentConfigSpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityNodeAffinity>;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAffinity>;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinity>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
    /**
     * weight is in the range 1-100
     */
    weight: pulumi.Input<number>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression>[]>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: pulumi.Input<string>;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm>[]>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression>[]>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: pulumi.Input<string>;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: pulumi.Input<number>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>[]>;
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression>[]>;
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: pulumi.Input<string>;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: pulumi.Input<string>;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>[]>;
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression>[]>;
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: pulumi.Input<string>;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: pulumi.Input<string>;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: pulumi.Input<number>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>[]>;
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression>[]>;
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: pulumi.Input<string>;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: pulumi.Input<string>;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>[]>;
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression>[]>;
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentConfigSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: pulumi.Input<string>;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: pulumi.Input<string>;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
     */
    args?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerEnvFrom>[]>;
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerEnv>[]>;
    /**
     * Docker image name. More info: http://kubernetes.io/docs/user-guide/images
     */
    image?: pulumi.Input<string>;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/images#updating-images
     */
    imagePullPolicy?: pulumi.Input<string>;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLifecycle>;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     */
    livenessProbe?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLivenessProbe>;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: pulumi.Input<string>;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerPort>[]>;
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     */
    readinessProbe?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerReadinessProbe>;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
     */
    resources?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerResources>;
    /**
     * Security options the pod should run with. More info: http://releases.k8s.io/HEAD/docs/design/security_context.md
     */
    securityContext?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerSecurityContext>;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: pulumi.Input<boolean>;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: pulumi.Input<boolean>;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: pulumi.Input<string>;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: pulumi.Input<boolean>;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerVolumeMount>[]>;
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: pulumi.Input<string>;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: pulumi.Input<string>;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerEnvValueFrom>;
}

export interface DeploymentConfigSpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerEnvFromConfigMapRef>;
    /**
     * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The Secret to select from
     */
    secretRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerEnvFromSecretRef>;
}

export interface DeploymentConfigSpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name: pulumi.Input<string>;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: pulumi.Input<boolean>;
}

export interface DeploymentConfigSpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: pulumi.Input<string>;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: pulumi.Input<boolean>;
}

export interface DeploymentConfigSpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    fieldRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerEnvValueFromFieldRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    resourceFieldRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerEnvValueFromResourceFieldRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    secretKeyRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerEnvValueFromSecretKeyRef>;
}

export interface DeploymentConfigSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: pulumi.Input<string>;
    /**
     * Resource to select
     */
    resource: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: http://kubernetes.io/docs/user-guide/container-environment#hook-details
     */
    postStarts?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLifecyclePostStart>[]>;
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: http://kubernetes.io/docs/user-guide/container-environment#hook-details
     */
    preStops?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLifecyclePreStop>[]>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLifecyclePostStartExec>;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLifecyclePostStartHttpGet>;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLifecyclePostStartTcpSocket>[]>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader>[]>;
    /**
     * Path to access on the HTTP server.
     */
    path?: pulumi.Input<string>;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: pulumi.Input<string>;
    /**
     * The header field value
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLifecyclePreStopExec>;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLifecyclePreStopHttpGet>;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLifecyclePreStopTcpSocket>[]>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader>[]>;
    /**
     * Path to access on the HTTP server.
     */
    path?: pulumi.Input<string>;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: pulumi.Input<string>;
    /**
     * The header field value
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLivenessProbeExec>;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: pulumi.Input<number>;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLivenessProbeHttpGet>;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     */
    initialDelaySeconds?: pulumi.Input<number>;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: pulumi.Input<number>;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: pulumi.Input<number>;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLivenessProbeTcpSocket>[]>;
    /**
     * Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     */
    timeoutSeconds?: pulumi.Input<number>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader>[]>;
    /**
     * Path to access on the HTTP server.
     */
    path?: pulumi.Input<string>;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: pulumi.Input<string>;
    /**
     * The header field value
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: pulumi.Input<number>;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: pulumi.Input<string>;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: pulumi.Input<number>;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: pulumi.Input<string>;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerReadinessProbeExec>;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: pulumi.Input<number>;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerReadinessProbeHttpGet>;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     */
    initialDelaySeconds?: pulumi.Input<number>;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: pulumi.Input<number>;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: pulumi.Input<number>;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerReadinessProbeTcpSocket>[]>;
    /**
     * Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     */
    timeoutSeconds?: pulumi.Input<number>;
}

export interface DeploymentConfigSpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader>[]>;
    /**
     * Path to access on the HTTP server.
     */
    path?: pulumi.Input<string>;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: pulumi.Input<string>;
    /**
     * The header field value
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
     */
    limits?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerResourcesLimits>;
    requests?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerResourcesRequests>;
}

export interface DeploymentConfigSpecTemplateSpecContainerResourcesLimits {
    cpu?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerResourcesRequests {
    cpu?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: pulumi.Input<boolean>;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerSecurityContextCapabilities>;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: pulumi.Input<boolean>;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: pulumi.Input<boolean>;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: pulumi.Input<number>;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: pulumi.Input<boolean>;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: pulumi.Input<number>;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecContainerSecurityContextSeLinuxOptions>;
}

export interface DeploymentConfigSpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Removed capabilities
     */
    drops?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: pulumi.Input<string>;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: pulumi.Input<string>;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: pulumi.Input<string>;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: pulumi.Input<string>;
    /**
     * This must match the Name of a Volume.
     */
    name: pulumi.Input<string>;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecDnsConfigOption>[]>;
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: pulumi.Input<string>;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IP address of the host file entry.
     */
    ip: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
     */
    args?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerEnvFrom>[]>;
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerEnv>[]>;
    /**
     * Docker image name. More info: http://kubernetes.io/docs/user-guide/images
     */
    image?: pulumi.Input<string>;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/images#updating-images
     */
    imagePullPolicy?: pulumi.Input<string>;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLifecycle>;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     */
    livenessProbe?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLivenessProbe>;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: pulumi.Input<string>;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerPort>[]>;
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     */
    readinessProbe?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerReadinessProbe>;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
     */
    resources?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerResources>;
    /**
     * Security options the pod should run with. More info: http://releases.k8s.io/HEAD/docs/design/security_context.md
     */
    securityContext?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerSecurityContext>;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: pulumi.Input<boolean>;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: pulumi.Input<boolean>;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: pulumi.Input<string>;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: pulumi.Input<boolean>;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerVolumeMount>[]>;
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: pulumi.Input<string>;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: pulumi.Input<string>;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerEnvValueFrom>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerEnvFromConfigMapRef>;
    /**
     * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The Secret to select from
     */
    secretRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerEnvFromSecretRef>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name: pulumi.Input<string>;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: pulumi.Input<boolean>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: pulumi.Input<string>;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: pulumi.Input<boolean>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    fieldRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerEnvValueFromFieldRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    resourceFieldRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef>;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP..
     */
    secretKeyRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: pulumi.Input<string>;
    /**
     * Resource to select
     */
    resource: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: http://kubernetes.io/docs/user-guide/container-environment#hook-details
     */
    postStarts?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLifecyclePostStart>[]>;
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: http://kubernetes.io/docs/user-guide/container-environment#hook-details
     */
    preStops?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLifecyclePreStop>[]>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLifecyclePostStartExec>;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLifecyclePostStartHttpGet>;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket>[]>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader>[]>;
    /**
     * Path to access on the HTTP server.
     */
    path?: pulumi.Input<string>;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: pulumi.Input<string>;
    /**
     * The header field value
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLifecyclePreStopExec>;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLifecyclePreStopHttpGet>;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket>[]>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader>[]>;
    /**
     * Path to access on the HTTP server.
     */
    path?: pulumi.Input<string>;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: pulumi.Input<string>;
    /**
     * The header field value
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLivenessProbeExec>;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: pulumi.Input<number>;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLivenessProbeHttpGet>;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     */
    initialDelaySeconds?: pulumi.Input<number>;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: pulumi.Input<number>;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: pulumi.Input<number>;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLivenessProbeTcpSocket>[]>;
    /**
     * Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     */
    timeoutSeconds?: pulumi.Input<number>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader>[]>;
    /**
     * Path to access on the HTTP server.
     */
    path?: pulumi.Input<string>;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: pulumi.Input<string>;
    /**
     * The header field value
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: pulumi.Input<number>;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: pulumi.Input<string>;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: pulumi.Input<number>;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: pulumi.Input<string>;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerReadinessProbeExec>;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: pulumi.Input<number>;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerReadinessProbeHttpGet>;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     */
    initialDelaySeconds?: pulumi.Input<number>;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: pulumi.Input<number>;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: pulumi.Input<number>;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerReadinessProbeTcpSocket>[]>;
    /**
     * Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     */
    timeoutSeconds?: pulumi.Input<number>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader>[]>;
    /**
     * Path to access on the HTTP server.
     */
    path?: pulumi.Input<string>;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: pulumi.Input<string>;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: pulumi.Input<string>;
    /**
     * The header field value
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
     */
    limits?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerResourcesLimits>;
    requests?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerResourcesRequests>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerResourcesLimits {
    cpu?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerResourcesRequests {
    cpu?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: pulumi.Input<boolean>;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerSecurityContextCapabilities>;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: pulumi.Input<boolean>;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: pulumi.Input<boolean>;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: pulumi.Input<number>;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: pulumi.Input<boolean>;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: pulumi.Input<number>;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Removed capabilities
     */
    drops?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: pulumi.Input<string>;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: pulumi.Input<string>;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: pulumi.Input<string>;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: pulumi.Input<string>;
    /**
     * This must match the Name of a Volume.
     */
    name: pulumi.Input<string>;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: pulumi.Input<number>;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: pulumi.Input<number>;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: pulumi.Input<boolean>;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: pulumi.Input<number>;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecSecurityContextSeLinuxOptions>;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface DeploymentConfigSpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: pulumi.Input<string>;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: pulumi.Input<string>;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: pulumi.Input<string>;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: pulumi.Input<string>;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: pulumi.Input<string>;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: pulumi.Input<string>;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeAwsElasticBlockStore>;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeAzureDisk>;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeAzureFile>;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeCephFs>;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
     */
    cinder?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeCinder>;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeConfigMap>;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeDownwardApi>;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
     */
    emptyDir?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeEmptyDir>;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeFc>;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeFlexVolume>;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeFlocker>;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeGcePersistentDisk>;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeGitRepo>;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
     */
    glusterfs?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeGlusterfs>;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath
     */
    hostPath?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeHostPath>;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeIscsi>;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: http://kubernetes.io/docs/user-guide/volumes#local
     */
    local?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeLocal>;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
     */
    nfs?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeNfs>;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumePersistentVolumeClaim>;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumePhotonPersistentDisk>;
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeQuobyte>;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
     */
    rbd?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeRbd>;
    /**
     * Secret represents a secret that should populate this volume. More info: http://kubernetes.io/docs/user-guide/volumes#secrets
     */
    secret?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeSecret>;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeVsphereVolume>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
     */
    fsType?: pulumi.Input<string>;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: pulumi.Input<number>;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
     */
    volumeId: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: pulumi.Input<string>;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: pulumi.Input<string>;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: pulumi.Input<string>;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: pulumi.Input<string>;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: pulumi.Input<boolean>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: pulumi.Input<string>;
    /**
     * Share Name
     */
    shareName: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: pulumi.Input<string>;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * The path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: pulumi.Input<string>;
    /**
     * Reference to the authentication secret for User, default is empty. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeCephFsSecretRef>;
    /**
     * User is the rados user name, default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
     */
    user?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
     */
    fsType?: pulumi.Input<string>;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Volume ID used to identify the volume in Cinder. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
     */
    volumeId: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: pulumi.Input<string>;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeConfigMapItem>[]>;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: pulumi.Input<string>;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: pulumi.Input<string>;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: pulumi.Input<string>;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeDownwardApiItem>[]>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeDownwardApiItemFieldRef>;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: pulumi.Input<string>;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: pulumi.Input<string>;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: pulumi.Input<string>;
    quantity?: pulumi.Input<string>;
    /**
     * Resource to select
     */
    resource: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
     */
    medium?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: pulumi.Input<string>;
    /**
     * FC target lun number
     */
    lun: pulumi.Input<number>;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: pulumi.Input<string>;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: pulumi.Input<string>;
    /**
     * Extra command options if any.
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeFlexVolumeSecretRef>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: pulumi.Input<string>;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
     */
    fsType?: pulumi.Input<string>;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
     */
    partition?: pulumi.Input<number>;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
     */
    pdName: pulumi.Input<string>;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
     */
    readOnly?: pulumi.Input<boolean>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: pulumi.Input<string>;
    /**
     * Repository URL
     */
    repository?: pulumi.Input<string>;
    /**
     * Commit hash for the specified revision.
     */
    revision?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: pulumi.Input<string>;
    /**
     * The Glusterfs volume path. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
     */
    path: pulumi.Input<string>;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: pulumi.Input<boolean>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath
     */
    path?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#iscsi
     */
    fsType?: pulumi.Input<string>;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: pulumi.Input<string>;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: pulumi.Input<string>;
    /**
     * iSCSI target lun number.
     */
    lun?: pulumi.Input<number>;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: http://kubernetes.io/docs/user-guide/volumes#local
     */
    path?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
     */
    path: pulumi.Input<string>;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Server is the hostname or IP address of the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
     */
    server: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: pulumi.Input<string>;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: pulumi.Input<boolean>;
}

export interface DeploymentConfigSpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: pulumi.Input<string>;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: pulumi.Input<string>;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: pulumi.Input<string>;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: pulumi.Input<string>;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#rbd
     */
    fsType?: pulumi.Input<string>;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
     */
    keyring?: pulumi.Input<string>;
    /**
     * The rados user name. Default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: pulumi.Input<string>;
    /**
     * The rados image name. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: pulumi.Input<string>;
    /**
     * The rados pool name. Default is rbd. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: pulumi.Input<string>;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeRbdSecretRef>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: pulumi.Input<string>;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTemplateSpecVolumeSecretItem>[]>;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: pulumi.Input<boolean>;
    /**
     * Name of the secret in the pod's namespace to use. More info: http://kubernetes.io/docs/user-guide/volumes#secrets
     */
    secretName?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: pulumi.Input<string>;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: pulumi.Input<string>;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: pulumi.Input<string>;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTrigger {
    /**
     * (v1.DeploymentTriggerImageChangeParams) ImageChangeParams represents the parameters for the ImageChange trigger.
     */
    imageChangeParams?: pulumi.Input<inputs.DeploymentConfigSpecTriggerImageChangeParams>;
    /**
     * (string) Type of the trigger
     */
    type?: pulumi.Input<string>;
}

export interface DeploymentConfigSpecTriggerImageChangeParams {
    /**
     * (boolean) Automatic means that the detection of a new tag value should result in an image update inside the pod template.
     */
    automatic?: pulumi.Input<boolean>;
    /**
     * (array) ContainerNames is used to restrict tag updates to the specified set of container names in a pod. If multiple triggers point to the same containers, the resulting behavior is undefined. Future API versions will make this a validation error. If ContainerNames does not point to a valid container, the trigger will be ignored. Future API versions will make this a validation error.
     */
    containerNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (v1.ObjectReference) From is a reference to an image stream tag to watch for changes. From.Name is the only required subfield - if From.Namespace is blank, the namespace of the current deployment trigger will be used.
     */
    froms?: pulumi.Input<pulumi.Input<inputs.DeploymentConfigSpecTriggerImageChangeParamsFrom>[]>;
}

export interface DeploymentConfigSpecTriggerImageChangeParamsFrom {
    /**
     * (string) Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
     */
    kind?: pulumi.Input<string>;
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    namespace?: pulumi.Input<string>;
}

export interface DeploymentConfigTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ImageStreamMetadata {
    /**
     * An unstructured key value map stored with the imagestream that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency
     */
    generateName?: pulumi.Input<string>;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation?: pulumi.Input<number>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the imagestream. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the imagestream, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace defines the space within which name of the imagestream must be unique.
     */
    namespace?: pulumi.Input<string>;
    /**
     * An opaque value that represents the internal version of this imagestream that can be used by clients to determine when imagestream has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * A URL representing this imagestream.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The unique in time and space value for this imagestream. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid?: pulumi.Input<string>;
}

export interface ImageStreamSpec {
    /**
     * (string) dockerImageRepository is optional, if specified this stream is backed by a Docker repository on this server
     */
    dockerImageRepository?: pulumi.Input<string>;
    /**
     * (v1.ImageLookupPolicy) lookupPolicy controls how other resources reference images within this namespace.
     */
    lookupPolicy?: pulumi.Input<inputs.ImageStreamSpecLookupPolicy>;
    /**
     * (array) tags map arbitrary string values to specific image locators
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ImageStreamSpecTag>[]>;
}

export interface ImageStreamSpecLookupPolicy {
    /**
     * (boolean) local will change the docker short image references (like 'mysql' or 'php:latest') on objects in this namespace to the image ID whenever they match this image stream, instead of reaching out to a remote registry. The name will be fully qualified to an image ID if found. The tag's referencePolicy is taken into account on the replaced value. Only works within the current namespace.
     */
    local?: pulumi.Input<boolean>;
}

export interface ImageStreamSpecTag {
    /**
     * (object) Annotations associated with images using this tag
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (v1.ObjectReference) From is a reference to an image stream tag or image stream this tag should track
     */
    froms?: pulumi.Input<pulumi.Input<inputs.ImageStreamSpecTagFrom>[]>;
    /**
     * (integer) Generation is the image stream generation that updated this tag - setting it to 0 is an indication that the generation must be updated. Legacy clients will send this as nil, which means the client doesn't know or care.
     */
    generation?: pulumi.Input<number>;
    /**
     * (v1.TagImportPolicy) Import is information that controls how images may be imported by the server.
     */
    importPolicies?: pulumi.Input<pulumi.Input<inputs.ImageStreamSpecTagImportPolicy>[]>;
    /**
     * (string) Name of the tag
     */
    name?: pulumi.Input<string>;
    /**
     * (boolean) Reference states if the tag will be imported. Default value is false, which means the tag will be imported.
     */
    reference?: pulumi.Input<boolean>;
    /**
     * (v1.TagReferencePolicy) ReferencePolicy defines how other components should consume the image
     */
    referencePolicies?: pulumi.Input<pulumi.Input<inputs.ImageStreamSpecTagReferencePolicy>[]>;
}

export interface ImageStreamSpecTagFrom {
    /**
     * (string) API version of the referent.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * (string) If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
     */
    fieldPath?: pulumi.Input<string>;
    /**
     * (string) Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
     */
    kind?: pulumi.Input<string>;
    /**
     * (string) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    namespace?: pulumi.Input<string>;
    /**
     * (string) Specific resource_version to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * (string) UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid?: pulumi.Input<string>;
}

export interface ImageStreamSpecTagImportPolicy {
    /**
     * (boolean) Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * (boolean) Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported
     */
    scheduled?: pulumi.Input<boolean>;
}

export interface ImageStreamSpecTagReferencePolicy {
    /**
     * (string) Type determines how the image pull spec should be transformed when the image stream tag is used in deployment config triggers or new builds. The default value is `Source`, indicating the original location of the image should be used (if imported). The user may also specify `Local`, indicating that the pull spec should point to the integrated Docker registry and leverage the registry's ability to proxy the pull to an upstream registry. `Local` allows the credentials used to pull this image to be managed from the image stream's namespace, so others on the platform can access a remote image but have no access to the remote secret. It also allows the image layers to be mirrored into the local registry which the images can still be pulled even if the upstream registry is unavailable.
     */
    type?: pulumi.Input<string>;
}

export interface ImageStreamTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetnamespaceMetadata {
    /**
     * An unstructured key value map stored with the netnamespace that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency
     */
    generateName?: pulumi.Input<string>;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation?: pulumi.Input<number>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the netnamespace. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the netnamespace, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace defines the space within which name of the netnamespace must be unique.
     */
    namespace?: pulumi.Input<string>;
    /**
     * An opaque value that represents the internal version of this netnamespace that can be used by clients to determine when netnamespace has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * A URL representing this netnamespace.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The unique in time and space value for this netnamespace. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid?: pulumi.Input<string>;
}

export interface NetnamespaceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ProjectMetadata {
    /**
     * An unstructured key value map stored with the project that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency
     */
    generateName?: pulumi.Input<string>;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation?: pulumi.Input<number>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the project. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the project, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
    /**
     * An opaque value that represents the internal version of this project that can be used by clients to determine when project has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * A URL representing this project.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The unique in time and space value for this project. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid?: pulumi.Input<string>;
}

export interface ProjectRequestMetadata {
    /**
     * An unstructured key value map stored with the project that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency
     */
    generateName?: pulumi.Input<string>;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation?: pulumi.Input<number>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the project. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the project, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
    /**
     * An opaque value that represents the internal version of this project that can be used by clients to determine when project has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * A URL representing this project.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The unique in time and space value for this project. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid?: pulumi.Input<string>;
}

export interface ProjectRequestTimeouts {
    delete?: pulumi.Input<string>;
}

export interface ProjectTimeouts {
    delete?: pulumi.Input<string>;
}

export interface ProviderExec {
    apiVersion: pulumi.Input<string>;
    args?: pulumi.Input<pulumi.Input<string>[]>;
    command: pulumi.Input<string>;
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RouteMetadata {
    /**
     * An unstructured key value map stored with the route that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency
     */
    generateName?: pulumi.Input<string>;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation?: pulumi.Input<number>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the route. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the route, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace defines the space within which name of the route must be unique.
     */
    namespace?: pulumi.Input<string>;
    /**
     * An opaque value that represents the internal version of this route that can be used by clients to determine when route has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * A URL representing this route.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The unique in time and space value for this route. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid?: pulumi.Input<string>;
}

export interface RouteSpec {
    /**
     * (string) host is an alias/DNS that points to the service. Optional. If not specified a route name will typically be automatically chosen. Must follow DNS952 subdomain conventions.
     */
    host?: pulumi.Input<string>;
    /**
     * (string) Path that the router watches for, to route traffic for to the service. Optional
     */
    path?: pulumi.Input<string>;
    /**
     * (v1.RoutePort) If specified, the port to be used by the router. Most routers will use all endpoints exposed by the service by default - set this value to instruct routers which port to use.
     */
    port?: pulumi.Input<inputs.RouteSpecPort>;
    /**
     * (v1.TLSConfig) The tls field provides the ability to configure certificates and termination for the route.
     */
    tls?: pulumi.Input<inputs.RouteSpecTls>;
    /**
     * (v1.RouteTargetReference) to is an object the route should use as the primary backend. Only the Service kind is allowed, and it will be defaulted to Service. If the weight field (0-256 default 1) is set to zero, no traffic will be sent to this backend.
     */
    to: pulumi.Input<inputs.RouteSpecTo>;
    /**
     * (string) Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
     */
    wildcardPolicy?: pulumi.Input<string>;
}

export interface RouteSpecPort {
    /**
     * (intstr.IntOrString) The target port on pods selected by the service this route points to. If this is a string, it will be looked up as a named port in the target endpoints port list. Required
     */
    targetPort: pulumi.Input<string>;
}

export interface RouteSpecTls {
    /**
     * (string) caCertificate provides the cert authority certificate contents
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * (string) certificate provides certificate contents
     */
    certificate?: pulumi.Input<string>;
    /**
     * (string) destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
     */
    destinationCaCertificate?: pulumi.Input<string>;
    /**
     * (string) insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
     */
    insecureEdgeTerminationPolicy?: pulumi.Input<string>;
    /**
     * (string) key provides key file contents
     */
    key?: pulumi.Input<string>;
    /**
     * (string) termination indicates termination type.
     */
    termination?: pulumi.Input<string>;
}

export interface RouteSpecTo {
    /**
     * (string) The kind of target that the route is referring to. Currently, only 'Service' is allowed
     */
    kind: pulumi.Input<string>;
    /**
     * (string) name of the service/target that is being referred to. e.g. name of the service
     */
    name: pulumi.Input<string>;
    /**
     * (integer) weight as an integer between 0 and 256, default 1, that specifies the target's relative weight against other target reference objects. 0 suppresses requests to this backend.
     */
    weight?: pulumi.Input<number>;
}

export interface SecretMetadata {
    /**
     * An unstructured key value map stored with the secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency
     */
    generateName?: pulumi.Input<string>;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation?: pulumi.Input<number>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the secret, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace defines the space within which name of the secret must be unique.
     */
    namespace?: pulumi.Input<string>;
    /**
     * An opaque value that represents the internal version of this secret that can be used by clients to determine when secret has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * A URL representing this secret.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The unique in time and space value for this secret. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid?: pulumi.Input<string>;
}
export namespace config {
}
