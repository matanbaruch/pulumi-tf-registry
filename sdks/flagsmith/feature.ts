// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Feature extends pulumi.CustomResource {
    /**
     * Get an existing Feature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeatureState, opts?: pulumi.CustomResourceOptions): Feature {
        return new Feature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'flagsmith:index/feature:Feature';

    /**
     * Returns true if the given object is an instance of Feature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Feature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Feature.__pulumiType;
    }

    /**
     * Determines if the feature is enabled by default. If unspecified, it will default to false
     */
    public readonly defaultEnabled!: pulumi.Output<boolean>;
    /**
     * Description of the feature
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the feature
     */
    public readonly featureName!: pulumi.Output<string>;
    /**
     * Determines the initial value of the feature.
     */
    public readonly initialValue!: pulumi.Output<string>;
    /**
     * Can be used to archive/unarchive a feature. If unspecified, it will default to false
     */
    public readonly isArchived!: pulumi.Output<boolean>;
    /**
     * List of user IDs representing the owners of the feature.
     */
    public readonly owners!: pulumi.Output<number[] | undefined>;
    /**
     * ID of the project
     */
    public /*out*/ readonly projectId!: pulumi.Output<number>;
    /**
     * UUID of project the feature belongs to
     */
    public readonly projectUuid!: pulumi.Output<string>;
    /**
     * List of tag IDs representing the tags attached to the feature.
     */
    public readonly tags!: pulumi.Output<number[] | undefined>;
    /**
     * Type of the feature, can be STANDARD, or MULTIVARIATE. if unspecified, it will default to STANDARD
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * UUID of the feature
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Feature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FeatureArgs | FeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FeatureState | undefined;
            resourceInputs["defaultEnabled"] = state ? state.defaultEnabled : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["featureName"] = state ? state.featureName : undefined;
            resourceInputs["initialValue"] = state ? state.initialValue : undefined;
            resourceInputs["isArchived"] = state ? state.isArchived : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectUuid"] = state ? state.projectUuid : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as FeatureArgs | undefined;
            if ((!args || args.featureName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureName'");
            }
            if ((!args || args.projectUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectUuid'");
            }
            resourceInputs["defaultEnabled"] = args ? args.defaultEnabled : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["featureName"] = args ? args.featureName : undefined;
            resourceInputs["initialValue"] = args ? args.initialValue : undefined;
            resourceInputs["isArchived"] = args ? args.isArchived : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["projectUuid"] = args ? args.projectUuid : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Feature.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Feature resources.
 */
export interface FeatureState {
    /**
     * Determines if the feature is enabled by default. If unspecified, it will default to false
     */
    defaultEnabled?: pulumi.Input<boolean>;
    /**
     * Description of the feature
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the feature
     */
    featureName?: pulumi.Input<string>;
    /**
     * Determines the initial value of the feature.
     */
    initialValue?: pulumi.Input<string>;
    /**
     * Can be used to archive/unarchive a feature. If unspecified, it will default to false
     */
    isArchived?: pulumi.Input<boolean>;
    /**
     * List of user IDs representing the owners of the feature.
     */
    owners?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of the project
     */
    projectId?: pulumi.Input<number>;
    /**
     * UUID of project the feature belongs to
     */
    projectUuid?: pulumi.Input<string>;
    /**
     * List of tag IDs representing the tags attached to the feature.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Type of the feature, can be STANDARD, or MULTIVARIATE. if unspecified, it will default to STANDARD
     */
    type?: pulumi.Input<string>;
    /**
     * UUID of the feature
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Feature resource.
 */
export interface FeatureArgs {
    /**
     * Determines if the feature is enabled by default. If unspecified, it will default to false
     */
    defaultEnabled?: pulumi.Input<boolean>;
    /**
     * Description of the feature
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the feature
     */
    featureName: pulumi.Input<string>;
    /**
     * Determines the initial value of the feature.
     */
    initialValue?: pulumi.Input<string>;
    /**
     * Can be used to archive/unarchive a feature. If unspecified, it will default to false
     */
    isArchived?: pulumi.Input<boolean>;
    /**
     * List of user IDs representing the owners of the feature.
     */
    owners?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * UUID of project the feature belongs to
     */
    projectUuid: pulumi.Input<string>;
    /**
     * List of tag IDs representing the tags attached to the feature.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Type of the feature, can be STANDARD, or MULTIVARIATE. if unspecified, it will default to STANDARD
     */
    type?: pulumi.Input<string>;
}
