// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MvFeatureOption extends pulumi.CustomResource {
    /**
     * Get an existing MvFeatureOption resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MvFeatureOptionState, opts?: pulumi.CustomResourceOptions): MvFeatureOption {
        return new MvFeatureOption(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'flagsmith:index/mvFeatureOption:MvFeatureOption';

    /**
     * Returns true if the given object is an instance of MvFeatureOption.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MvFeatureOption {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MvFeatureOption.__pulumiType;
    }

    /**
     * Boolean value of the multivariate option if the type is `bool`
     */
    public readonly booleanValue!: pulumi.Output<boolean | undefined>;
    /**
     * Percentage allocation of the current multivariate option
     */
    public readonly defaultPercentageAllocation!: pulumi.Output<number>;
    /**
     * ID of the feature to which the multivariate option belongs
     */
    public /*out*/ readonly featureId!: pulumi.Output<number>;
    /**
     * UUID of the feature to which the multivariate option belongs
     */
    public readonly featureUuid!: pulumi.Output<string>;
    /**
     * Integer value of the multivariate option if the type is `int`
     */
    public readonly integerValue!: pulumi.Output<number | undefined>;
    /**
     * Project ID of the feature to which the multivariate option belongs
     */
    public /*out*/ readonly projectId!: pulumi.Output<number>;
    /**
     * String value of the multivariate option if the type is `unicode`
     */
    public readonly stringValue!: pulumi.Output<string | undefined>;
    /**
     * Type of the multivariate option can be `unicode`, `int` or `bool`
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * UUID of the multivariate option
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a MvFeatureOption resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MvFeatureOptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MvFeatureOptionArgs | MvFeatureOptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MvFeatureOptionState | undefined;
            resourceInputs["booleanValue"] = state ? state.booleanValue : undefined;
            resourceInputs["defaultPercentageAllocation"] = state ? state.defaultPercentageAllocation : undefined;
            resourceInputs["featureId"] = state ? state.featureId : undefined;
            resourceInputs["featureUuid"] = state ? state.featureUuid : undefined;
            resourceInputs["integerValue"] = state ? state.integerValue : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["stringValue"] = state ? state.stringValue : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as MvFeatureOptionArgs | undefined;
            if ((!args || args.defaultPercentageAllocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultPercentageAllocation'");
            }
            if ((!args || args.featureUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureUuid'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["booleanValue"] = args ? args.booleanValue : undefined;
            resourceInputs["defaultPercentageAllocation"] = args ? args.defaultPercentageAllocation : undefined;
            resourceInputs["featureUuid"] = args ? args.featureUuid : undefined;
            resourceInputs["integerValue"] = args ? args.integerValue : undefined;
            resourceInputs["stringValue"] = args ? args.stringValue : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["featureId"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MvFeatureOption.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MvFeatureOption resources.
 */
export interface MvFeatureOptionState {
    /**
     * Boolean value of the multivariate option if the type is `bool`
     */
    booleanValue?: pulumi.Input<boolean>;
    /**
     * Percentage allocation of the current multivariate option
     */
    defaultPercentageAllocation?: pulumi.Input<number>;
    /**
     * ID of the feature to which the multivariate option belongs
     */
    featureId?: pulumi.Input<number>;
    /**
     * UUID of the feature to which the multivariate option belongs
     */
    featureUuid?: pulumi.Input<string>;
    /**
     * Integer value of the multivariate option if the type is `int`
     */
    integerValue?: pulumi.Input<number>;
    /**
     * Project ID of the feature to which the multivariate option belongs
     */
    projectId?: pulumi.Input<number>;
    /**
     * String value of the multivariate option if the type is `unicode`
     */
    stringValue?: pulumi.Input<string>;
    /**
     * Type of the multivariate option can be `unicode`, `int` or `bool`
     */
    type?: pulumi.Input<string>;
    /**
     * UUID of the multivariate option
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MvFeatureOption resource.
 */
export interface MvFeatureOptionArgs {
    /**
     * Boolean value of the multivariate option if the type is `bool`
     */
    booleanValue?: pulumi.Input<boolean>;
    /**
     * Percentage allocation of the current multivariate option
     */
    defaultPercentageAllocation: pulumi.Input<number>;
    /**
     * UUID of the feature to which the multivariate option belongs
     */
    featureUuid: pulumi.Input<string>;
    /**
     * Integer value of the multivariate option if the type is `int`
     */
    integerValue?: pulumi.Input<number>;
    /**
     * String value of the multivariate option if the type is `unicode`
     */
    stringValue?: pulumi.Input<string>;
    /**
     * Type of the multivariate option can be `unicode`, `int` or `bool`
     */
    type: pulumi.Input<string>;
}
