// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FeatureState extends pulumi.CustomResource {
    /**
     * Get an existing FeatureState resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeatureStateState, opts?: pulumi.CustomResourceOptions): FeatureState {
        return new FeatureState(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'flagsmith:index/featureState:FeatureState';

    /**
     * Returns true if the given object is an instance of FeatureState.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FeatureState {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FeatureState.__pulumiType;
    }

    /**
     * Used for enabling/disabling the feature
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * ID of the environment
     */
    public /*out*/ readonly environmentId!: pulumi.Output<number>;
    /**
     * Client side environment key associated with the environment
     */
    public readonly environmentKey!: pulumi.Output<string>;
    /**
     * ID of the feature
     */
    public readonly featureId!: pulumi.Output<number>;
    /**
     * ID of the feature_segment, used internally to bind a feature state to a segment
     */
    public /*out*/ readonly featureSegmentId!: pulumi.Output<number>;
    /**
     * Value for the feature State. NOTE: One of string_value, integer_value or boolean_value must be set
     */
    public readonly featureStateValue!: pulumi.Output<outputs.FeatureStateFeatureStateValue>;
    /**
     * ID of the segment, used for creating segment overrides
     */
    public readonly segmentId!: pulumi.Output<number | undefined>;
    /**
     * Priority of the segment overrides.
     */
    public readonly segmentPriority!: pulumi.Output<number>;
    /**
     * UUID of the featurestate
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a FeatureState resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureStateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FeatureStateArgs | FeatureStateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FeatureStateState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["environmentKey"] = state ? state.environmentKey : undefined;
            resourceInputs["featureId"] = state ? state.featureId : undefined;
            resourceInputs["featureSegmentId"] = state ? state.featureSegmentId : undefined;
            resourceInputs["featureStateValue"] = state ? state.featureStateValue : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["segmentPriority"] = state ? state.segmentPriority : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as FeatureStateArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.environmentKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentKey'");
            }
            if ((!args || args.featureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureId'");
            }
            if ((!args || args.featureStateValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureStateValue'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["environmentKey"] = args ? args.environmentKey : undefined;
            resourceInputs["featureId"] = args ? args.featureId : undefined;
            resourceInputs["featureStateValue"] = args ? args.featureStateValue : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["segmentPriority"] = args ? args.segmentPriority : undefined;
            resourceInputs["environmentId"] = undefined /*out*/;
            resourceInputs["featureSegmentId"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FeatureState.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FeatureState resources.
 */
export interface FeatureStateState {
    /**
     * Used for enabling/disabling the feature
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * ID of the environment
     */
    environmentId?: pulumi.Input<number>;
    /**
     * Client side environment key associated with the environment
     */
    environmentKey?: pulumi.Input<string>;
    /**
     * ID of the feature
     */
    featureId?: pulumi.Input<number>;
    /**
     * ID of the feature_segment, used internally to bind a feature state to a segment
     */
    featureSegmentId?: pulumi.Input<number>;
    /**
     * Value for the feature State. NOTE: One of string_value, integer_value or boolean_value must be set
     */
    featureStateValue?: pulumi.Input<inputs.FeatureStateFeatureStateValue>;
    /**
     * ID of the segment, used for creating segment overrides
     */
    segmentId?: pulumi.Input<number>;
    /**
     * Priority of the segment overrides.
     */
    segmentPriority?: pulumi.Input<number>;
    /**
     * UUID of the featurestate
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FeatureState resource.
 */
export interface FeatureStateArgs {
    /**
     * Used for enabling/disabling the feature
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Client side environment key associated with the environment
     */
    environmentKey: pulumi.Input<string>;
    /**
     * ID of the feature
     */
    featureId: pulumi.Input<number>;
    /**
     * Value for the feature State. NOTE: One of string_value, integer_value or boolean_value must be set
     */
    featureStateValue: pulumi.Input<inputs.FeatureStateFeatureStateValue>;
    /**
     * ID of the segment, used for creating segment overrides
     */
    segmentId?: pulumi.Input<number>;
    /**
     * Priority of the segment overrides.
     */
    segmentPriority?: pulumi.Input<number>;
}
