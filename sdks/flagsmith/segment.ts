// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Segment extends pulumi.CustomResource {
    /**
     * Get an existing Segment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SegmentState, opts?: pulumi.CustomResourceOptions): Segment {
        return new Segment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'flagsmith:index/segment:Segment';

    /**
     * Returns true if the given object is an instance of Segment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Segment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Segment.__pulumiType;
    }

    /**
     * Description of the segment
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Set this to create a feature specific segment
     */
    public readonly featureId!: pulumi.Output<number>;
    /**
     * Name of the segment
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the project
     */
    public /*out*/ readonly projectId!: pulumi.Output<number>;
    /**
     * UUID of project the segment belongs to
     */
    public readonly projectUuid!: pulumi.Output<string>;
    /**
     * Rules for the segment
     */
    public readonly rules!: pulumi.Output<outputs.SegmentRule[]>;
    /**
     * UUID of the segment
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Segment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SegmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SegmentArgs | SegmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SegmentState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["featureId"] = state ? state.featureId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectUuid"] = state ? state.projectUuid : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SegmentArgs | undefined;
            if ((!args || args.projectUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectUuid'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["featureId"] = args ? args.featureId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectUuid"] = args ? args.projectUuid : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Segment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Segment resources.
 */
export interface SegmentState {
    /**
     * Description of the segment
     */
    description?: pulumi.Input<string>;
    /**
     * Set this to create a feature specific segment
     */
    featureId?: pulumi.Input<number>;
    /**
     * Name of the segment
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the project
     */
    projectId?: pulumi.Input<number>;
    /**
     * UUID of project the segment belongs to
     */
    projectUuid?: pulumi.Input<string>;
    /**
     * Rules for the segment
     */
    rules?: pulumi.Input<pulumi.Input<inputs.SegmentRule>[]>;
    /**
     * UUID of the segment
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Segment resource.
 */
export interface SegmentArgs {
    /**
     * Description of the segment
     */
    description?: pulumi.Input<string>;
    /**
     * Set this to create a feature specific segment
     */
    featureId?: pulumi.Input<number>;
    /**
     * Name of the segment
     */
    name?: pulumi.Input<string>;
    /**
     * UUID of project the segment belongs to
     */
    projectUuid: pulumi.Input<string>;
    /**
     * Rules for the segment
     */
    rules: pulumi.Input<pulumi.Input<inputs.SegmentRule>[]>;
}
