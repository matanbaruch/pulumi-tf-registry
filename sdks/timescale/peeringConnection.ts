// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PeeringConnection extends pulumi.CustomResource {
    /**
     * Get an existing PeeringConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PeeringConnectionState, opts?: pulumi.CustomResourceOptions): PeeringConnection {
        return new PeeringConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timescale:index/peeringConnection:PeeringConnection';

    /**
     * Returns true if the given object is an instance of PeeringConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PeeringConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PeeringConnection.__pulumiType;
    }

    public /*out*/ readonly errorMessage!: pulumi.Output<string>;
    /**
     * AWS account ID where the VPC to be paired
     */
    public readonly peerAccountId!: pulumi.Output<string>;
    /**
     * CIDR for the VPC to be paired
     */
    public /*out*/ readonly peerCidr!: pulumi.Output<string>;
    /**
     * Region code for the VPC to be paired
     */
    public readonly peerRegionCode!: pulumi.Output<string>;
    /**
     * AWS ID for the VPC to be paired
     */
    public readonly peerVpcId!: pulumi.Output<string>;
    /**
     * AWS ID of the peering connection (starts with pcx-...)
     */
    public /*out*/ readonly provisionedId!: pulumi.Output<string>;
    /**
     * Peering connection status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Timescale internal ID for a vpc
     */
    public readonly timescaleVpcId!: pulumi.Output<number>;
    /**
     * AWS VPC ID of the timescale instance VPC
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a PeeringConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PeeringConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PeeringConnectionArgs | PeeringConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PeeringConnectionState | undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["peerAccountId"] = state ? state.peerAccountId : undefined;
            resourceInputs["peerCidr"] = state ? state.peerCidr : undefined;
            resourceInputs["peerRegionCode"] = state ? state.peerRegionCode : undefined;
            resourceInputs["peerVpcId"] = state ? state.peerVpcId : undefined;
            resourceInputs["provisionedId"] = state ? state.provisionedId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timescaleVpcId"] = state ? state.timescaleVpcId : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as PeeringConnectionArgs | undefined;
            if ((!args || args.peerAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerAccountId'");
            }
            if ((!args || args.peerRegionCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerRegionCode'");
            }
            if ((!args || args.peerVpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerVpcId'");
            }
            if ((!args || args.timescaleVpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timescaleVpcId'");
            }
            resourceInputs["peerAccountId"] = args ? args.peerAccountId : undefined;
            resourceInputs["peerRegionCode"] = args ? args.peerRegionCode : undefined;
            resourceInputs["peerVpcId"] = args ? args.peerVpcId : undefined;
            resourceInputs["timescaleVpcId"] = args ? args.timescaleVpcId : undefined;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["peerCidr"] = undefined /*out*/;
            resourceInputs["provisionedId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PeeringConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PeeringConnection resources.
 */
export interface PeeringConnectionState {
    errorMessage?: pulumi.Input<string>;
    /**
     * AWS account ID where the VPC to be paired
     */
    peerAccountId?: pulumi.Input<string>;
    /**
     * CIDR for the VPC to be paired
     */
    peerCidr?: pulumi.Input<string>;
    /**
     * Region code for the VPC to be paired
     */
    peerRegionCode?: pulumi.Input<string>;
    /**
     * AWS ID for the VPC to be paired
     */
    peerVpcId?: pulumi.Input<string>;
    /**
     * AWS ID of the peering connection (starts with pcx-...)
     */
    provisionedId?: pulumi.Input<string>;
    /**
     * Peering connection status
     */
    status?: pulumi.Input<string>;
    /**
     * Timescale internal ID for a vpc
     */
    timescaleVpcId?: pulumi.Input<number>;
    /**
     * AWS VPC ID of the timescale instance VPC
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PeeringConnection resource.
 */
export interface PeeringConnectionArgs {
    /**
     * AWS account ID where the VPC to be paired
     */
    peerAccountId: pulumi.Input<string>;
    /**
     * Region code for the VPC to be paired
     */
    peerRegionCode: pulumi.Input<string>;
    /**
     * AWS ID for the VPC to be paired
     */
    peerVpcId: pulumi.Input<string>;
    /**
     * Timescale internal ID for a vpc
     */
    timescaleVpcId: pulumi.Input<number>;
}
