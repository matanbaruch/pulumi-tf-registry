// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vpcs extends pulumi.CustomResource {
    /**
     * Get an existing Vpcs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcsState, opts?: pulumi.CustomResourceOptions): Vpcs {
        return new Vpcs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timescale:index/vpcs:Vpcs';

    /**
     * Returns true if the given object is an instance of Vpcs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vpcs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vpcs.__pulumiType;
    }

    /**
     * The IPv4 CIDR block
     */
    public readonly cidr!: pulumi.Output<string>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    public /*out*/ readonly errorMessage!: pulumi.Output<string>;
    /**
     * VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the
     * provider.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    public /*out*/ readonly provisionedId!: pulumi.Output<string>;
    /**
     * The region for this VPC.
     */
    public readonly regionCode!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VpcsTimeouts>;
    public /*out*/ readonly updated!: pulumi.Output<string>;

    /**
     * Create a Vpcs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcsArgs | VpcsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcsState | undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["provisionedId"] = state ? state.provisionedId : undefined;
            resourceInputs["regionCode"] = state ? state.regionCode : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
        } else {
            const args = argsOrState as VpcsArgs | undefined;
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            if ((!args || args.regionCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionCode'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regionCode"] = args ? args.regionCode : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["provisionedId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vpcs.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vpcs resources.
 */
export interface VpcsState {
    /**
     * The IPv4 CIDR block
     */
    cidr?: pulumi.Input<string>;
    created?: pulumi.Input<string>;
    errorMessage?: pulumi.Input<string>;
    /**
     * VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the
     * provider.
     */
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    provisionedId?: pulumi.Input<string>;
    /**
     * The region for this VPC.
     */
    regionCode?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpcsTimeouts>;
    updated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vpcs resource.
 */
export interface VpcsArgs {
    /**
     * The IPv4 CIDR block
     */
    cidr: pulumi.Input<string>;
    /**
     * VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the
     * provider.
     */
    name?: pulumi.Input<string>;
    /**
     * The region for this VPC.
     */
    regionCode: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpcsTimeouts>;
}
