// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CloudEditionClusterArgs, CloudEditionClusterState } from "./cloudEditionCluster";
export type CloudEditionCluster = import("./cloudEditionCluster").CloudEditionCluster;
export const CloudEditionCluster: typeof import("./cloudEditionCluster").CloudEditionCluster = null as any;
utilities.lazyLoad(exports, ["CloudEditionCluster"], () => require("./cloudEditionCluster"));

export { JobRunArgs, JobRunState } from "./jobRun";
export type JobRun = import("./jobRun").JobRun;
export const JobRun: typeof import("./jobRun").JobRun = null as any;
utilities.lazyLoad(exports, ["JobRun"], () => require("./jobRun"));

export { JobVmwareArgs, JobVmwareState } from "./jobVmware";
export type JobVmware = import("./jobVmware").JobVmware;
export const JobVmware: typeof import("./jobVmware").JobVmware = null as any;
utilities.lazyLoad(exports, ["JobVmware"], () => require("./jobVmware"));

export { PhysicalEditionClusterArgs, PhysicalEditionClusterState } from "./physicalEditionCluster";
export type PhysicalEditionCluster = import("./physicalEditionCluster").PhysicalEditionCluster;
export const PhysicalEditionCluster: typeof import("./physicalEditionCluster").PhysicalEditionCluster = null as any;
utilities.lazyLoad(exports, ["PhysicalEditionCluster"], () => require("./physicalEditionCluster"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RestoreVmwareVmArgs, RestoreVmwareVmState } from "./restoreVmwareVm";
export type RestoreVmwareVm = import("./restoreVmwareVm").RestoreVmwareVm;
export const RestoreVmwareVm: typeof import("./restoreVmwareVm").RestoreVmwareVm = null as any;
utilities.lazyLoad(exports, ["RestoreVmwareVm"], () => require("./restoreVmwareVm"));

export { SourceVmwareArgs, SourceVmwareState } from "./sourceVmware";
export type SourceVmware = import("./sourceVmware").SourceVmware;
export const SourceVmware: typeof import("./sourceVmware").SourceVmware = null as any;
utilities.lazyLoad(exports, ["SourceVmware"], () => require("./sourceVmware"));

export { VirtualEditionClusterArgs, VirtualEditionClusterState } from "./virtualEditionCluster";
export type VirtualEditionCluster = import("./virtualEditionCluster").VirtualEditionCluster;
export const VirtualEditionCluster: typeof import("./virtualEditionCluster").VirtualEditionCluster = null as any;
utilities.lazyLoad(exports, ["VirtualEditionCluster"], () => require("./virtualEditionCluster"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cohesity:index/cloudEditionCluster:CloudEditionCluster":
                return new CloudEditionCluster(name, <any>undefined, { urn })
            case "cohesity:index/jobRun:JobRun":
                return new JobRun(name, <any>undefined, { urn })
            case "cohesity:index/jobVmware:JobVmware":
                return new JobVmware(name, <any>undefined, { urn })
            case "cohesity:index/physicalEditionCluster:PhysicalEditionCluster":
                return new PhysicalEditionCluster(name, <any>undefined, { urn })
            case "cohesity:index/restoreVmwareVm:RestoreVmwareVm":
                return new RestoreVmwareVm(name, <any>undefined, { urn })
            case "cohesity:index/sourceVmware:SourceVmware":
                return new SourceVmware(name, <any>undefined, { urn })
            case "cohesity:index/virtualEditionCluster:VirtualEditionCluster":
                return new VirtualEditionCluster(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cohesity", "index/cloudEditionCluster", _module)
pulumi.runtime.registerResourceModule("cohesity", "index/jobRun", _module)
pulumi.runtime.registerResourceModule("cohesity", "index/jobVmware", _module)
pulumi.runtime.registerResourceModule("cohesity", "index/physicalEditionCluster", _module)
pulumi.runtime.registerResourceModule("cohesity", "index/restoreVmwareVm", _module)
pulumi.runtime.registerResourceModule("cohesity", "index/sourceVmware", _module)
pulumi.runtime.registerResourceModule("cohesity", "index/virtualEditionCluster", _module)
pulumi.runtime.registerResourcePackage("cohesity", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cohesity") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
