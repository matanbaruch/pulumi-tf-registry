// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudEditionCluster extends pulumi.CustomResource {
    /**
     * Get an existing CloudEditionCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudEditionClusterState, opts?: pulumi.CustomResourceOptions): CloudEditionCluster {
        return new CloudEditionCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesity:index/cloudEditionCluster:CloudEditionCluster';

    /**
     * Returns true if the given object is an instance of CloudEditionCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudEditionCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudEditionCluster.__pulumiType;
    }

    /**
     * The default gateway IP address for the cluster network
     */
    public readonly clusterGateway!: pulumi.Output<string>;
    /**
     * The name of the new Cloud edition cluster
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The subnet mask of the cluster network
     */
    public readonly clusterSubnetMask!: pulumi.Output<string>;
    /**
     * The DNS servers to configure on the cluster
     */
    public readonly dnsServers!: pulumi.Output<string[]>;
    /**
     * The domain names to configure on the cluster
     */
    public readonly domainNames!: pulumi.Output<string[]>;
    /**
     * Specifies whether or not to enable encryption. If encryption is enabled, all data on the cluster will be encrypted
     */
    public readonly enableEncryption!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether or not to enable FIPS mode. This must be set to true in order to enable FIPS
     */
    public readonly enableFipsMode!: pulumi.Output<boolean | undefined>;
    /**
     * The rotation period for encryption keys in days
     */
    public readonly encryptionKeysRotationPeriod!: pulumi.Output<number | undefined>;
    /**
     * Cohesity license key to apply after cluster creation
     */
    public readonly licenseKey!: pulumi.Output<string | undefined>;
    /**
     * The metadata fault tolerance
     */
    public readonly metadataFaultTolerance!: pulumi.Output<number | undefined>;
    /**
     * IP addresses of the nodes in the cluster
     */
    public readonly nodeIps!: pulumi.Output<string[]>;
    /**
     * The NTP servers to configure on the cluster
     */
    public readonly ntpServers!: pulumi.Output<string[]>;
    /**
     * The time to wait in minutes for cluster creation or destruction
     */
    public readonly operationTimeout!: pulumi.Output<number | undefined>;

    /**
     * Create a CloudEditionCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudEditionClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudEditionClusterArgs | CloudEditionClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudEditionClusterState | undefined;
            resourceInputs["clusterGateway"] = state ? state.clusterGateway : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterSubnetMask"] = state ? state.clusterSubnetMask : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["domainNames"] = state ? state.domainNames : undefined;
            resourceInputs["enableEncryption"] = state ? state.enableEncryption : undefined;
            resourceInputs["enableFipsMode"] = state ? state.enableFipsMode : undefined;
            resourceInputs["encryptionKeysRotationPeriod"] = state ? state.encryptionKeysRotationPeriod : undefined;
            resourceInputs["licenseKey"] = state ? state.licenseKey : undefined;
            resourceInputs["metadataFaultTolerance"] = state ? state.metadataFaultTolerance : undefined;
            resourceInputs["nodeIps"] = state ? state.nodeIps : undefined;
            resourceInputs["ntpServers"] = state ? state.ntpServers : undefined;
            resourceInputs["operationTimeout"] = state ? state.operationTimeout : undefined;
        } else {
            const args = argsOrState as CloudEditionClusterArgs | undefined;
            if ((!args || args.clusterGateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterGateway'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.clusterSubnetMask === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterSubnetMask'");
            }
            if ((!args || args.dnsServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsServers'");
            }
            if ((!args || args.domainNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainNames'");
            }
            if ((!args || args.nodeIps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeIps'");
            }
            if ((!args || args.ntpServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ntpServers'");
            }
            resourceInputs["clusterGateway"] = args ? args.clusterGateway : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterSubnetMask"] = args ? args.clusterSubnetMask : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["domainNames"] = args ? args.domainNames : undefined;
            resourceInputs["enableEncryption"] = args ? args.enableEncryption : undefined;
            resourceInputs["enableFipsMode"] = args ? args.enableFipsMode : undefined;
            resourceInputs["encryptionKeysRotationPeriod"] = args ? args.encryptionKeysRotationPeriod : undefined;
            resourceInputs["licenseKey"] = args?.licenseKey ? pulumi.secret(args.licenseKey) : undefined;
            resourceInputs["metadataFaultTolerance"] = args ? args.metadataFaultTolerance : undefined;
            resourceInputs["nodeIps"] = args ? args.nodeIps : undefined;
            resourceInputs["ntpServers"] = args ? args.ntpServers : undefined;
            resourceInputs["operationTimeout"] = args ? args.operationTimeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["licenseKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CloudEditionCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudEditionCluster resources.
 */
export interface CloudEditionClusterState {
    /**
     * The default gateway IP address for the cluster network
     */
    clusterGateway?: pulumi.Input<string>;
    /**
     * The name of the new Cloud edition cluster
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The subnet mask of the cluster network
     */
    clusterSubnetMask?: pulumi.Input<string>;
    /**
     * The DNS servers to configure on the cluster
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The domain names to configure on the cluster
     */
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether or not to enable encryption. If encryption is enabled, all data on the cluster will be encrypted
     */
    enableEncryption?: pulumi.Input<boolean>;
    /**
     * Specifies whether or not to enable FIPS mode. This must be set to true in order to enable FIPS
     */
    enableFipsMode?: pulumi.Input<boolean>;
    /**
     * The rotation period for encryption keys in days
     */
    encryptionKeysRotationPeriod?: pulumi.Input<number>;
    /**
     * Cohesity license key to apply after cluster creation
     */
    licenseKey?: pulumi.Input<string>;
    /**
     * The metadata fault tolerance
     */
    metadataFaultTolerance?: pulumi.Input<number>;
    /**
     * IP addresses of the nodes in the cluster
     */
    nodeIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The NTP servers to configure on the cluster
     */
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time to wait in minutes for cluster creation or destruction
     */
    operationTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CloudEditionCluster resource.
 */
export interface CloudEditionClusterArgs {
    /**
     * The default gateway IP address for the cluster network
     */
    clusterGateway: pulumi.Input<string>;
    /**
     * The name of the new Cloud edition cluster
     */
    clusterName: pulumi.Input<string>;
    /**
     * The subnet mask of the cluster network
     */
    clusterSubnetMask: pulumi.Input<string>;
    /**
     * The DNS servers to configure on the cluster
     */
    dnsServers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The domain names to configure on the cluster
     */
    domainNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether or not to enable encryption. If encryption is enabled, all data on the cluster will be encrypted
     */
    enableEncryption?: pulumi.Input<boolean>;
    /**
     * Specifies whether or not to enable FIPS mode. This must be set to true in order to enable FIPS
     */
    enableFipsMode?: pulumi.Input<boolean>;
    /**
     * The rotation period for encryption keys in days
     */
    encryptionKeysRotationPeriod?: pulumi.Input<number>;
    /**
     * Cohesity license key to apply after cluster creation
     */
    licenseKey?: pulumi.Input<string>;
    /**
     * The metadata fault tolerance
     */
    metadataFaultTolerance?: pulumi.Input<number>;
    /**
     * IP addresses of the nodes in the cluster
     */
    nodeIps: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The NTP servers to configure on the cluster
     */
    ntpServers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time to wait in minutes for cluster creation or destruction
     */
    operationTimeout?: pulumi.Input<number>;
}
