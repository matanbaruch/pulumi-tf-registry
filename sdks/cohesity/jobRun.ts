// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class JobRun extends pulumi.CustomResource {
    /**
     * Get an existing JobRun resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobRunState, opts?: pulumi.CustomResourceOptions): JobRun {
        return new JobRun(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesity:index/jobRun:JobRun';

    /**
     * Returns true if the given object is an instance of JobRun.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JobRun {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JobRun.__pulumiType;
    }

    /**
     * Specifies the name of the Protection Job
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the time to wait in minutes for the protection job run to complete the run or stop the run
     */
    public readonly operationTimeout!: pulumi.Output<number | undefined>;
    /**
     * Specifies the type of backup
     */
    public readonly runType!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to start or stop a protection job run
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * Specifies the current timestamp to trigger starting or stopping a job run
     */
    public readonly timestamp!: pulumi.Output<string>;

    /**
     * Create a JobRun resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobRunArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobRunArgs | JobRunState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JobRunState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operationTimeout"] = state ? state.operationTimeout : undefined;
            resourceInputs["runType"] = state ? state.runType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timestamp"] = state ? state.timestamp : undefined;
        } else {
            const args = argsOrState as JobRunArgs | undefined;
            if ((!args || args.timestamp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timestamp'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operationTimeout"] = args ? args.operationTimeout : undefined;
            resourceInputs["runType"] = args ? args.runType : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timestamp"] = args ? args.timestamp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JobRun.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering JobRun resources.
 */
export interface JobRunState {
    /**
     * Specifies the name of the Protection Job
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the time to wait in minutes for the protection job run to complete the run or stop the run
     */
    operationTimeout?: pulumi.Input<number>;
    /**
     * Specifies the type of backup
     */
    runType?: pulumi.Input<string>;
    /**
     * Specifies whether to start or stop a protection job run
     */
    state?: pulumi.Input<string>;
    /**
     * Specifies the current timestamp to trigger starting or stopping a job run
     */
    timestamp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JobRun resource.
 */
export interface JobRunArgs {
    /**
     * Specifies the name of the Protection Job
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the time to wait in minutes for the protection job run to complete the run or stop the run
     */
    operationTimeout?: pulumi.Input<number>;
    /**
     * Specifies the type of backup
     */
    runType?: pulumi.Input<string>;
    /**
     * Specifies whether to start or stop a protection job run
     */
    state?: pulumi.Input<string>;
    /**
     * Specifies the current timestamp to trigger starting or stopping a job run
     */
    timestamp: pulumi.Input<string>;
}
