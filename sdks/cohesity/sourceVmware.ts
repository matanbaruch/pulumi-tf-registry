// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SourceVmware extends pulumi.CustomResource {
    /**
     * Get an existing SourceVmware resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceVmwareState, opts?: pulumi.CustomResourceOptions): SourceVmware {
        return new SourceVmware(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesity:index/sourceVmware:SourceVmware';

    /**
     * Returns true if the given object is an instance of SourceVmware.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourceVmware {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceVmware.__pulumiType;
    }

    /**
     * If the latency of a datastore is above this value, existing backup tasks using the datastore are throttled.
     */
    public readonly activeTaskLatency!: pulumi.Output<number | undefined>;
    /**
     * The contents of CA certificate
     */
    public readonly caCertificate!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether datastore streams are configured for all datastores that are part of the registered entity. If set to
     * true, number of streams from Cohesity cluster to the registered entity will be limited to the value set for
     * number_of_streams. If not set or set to false, there is no max limit for the number of concurrent streams.
     */
    public readonly capStreamsPerDatastore!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether read operations to the datastores, which are part of the registered Protection Source, are throttled.
     */
    public readonly enableLatencyThrottling!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether SSL verification should be performed.
     */
    public readonly enableSslVerification!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the network endpoint of the Protection Source where it is reachable. It could be an URL or hostname or an IP
     * address of the Protection Source
     */
    public readonly endpoint!: pulumi.Output<string>;
    /**
     * If the latency of a datastore is above this value, then new backup tasks using the datastore will not be started.
     */
    public readonly newTaskLatency!: pulumi.Output<number | undefined>;
    /**
     * Specifies the limit on the number of streams Cohesity cluster will make concurrently to the datastores of the registered
     * entity. This limit is enforced only when the cap_streams_per_datastore is set to true
     */
    public readonly numberOfStreams!: pulumi.Output<number | undefined>;
    /**
     * Specifies password of the username to access the target source
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Specifies username to access the target source
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * Specifies the VMware entity type
     */
    public readonly vmwareType!: pulumi.Output<string | undefined>;

    /**
     * Create a SourceVmware resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceVmwareArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceVmwareArgs | SourceVmwareState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceVmwareState | undefined;
            resourceInputs["activeTaskLatency"] = state ? state.activeTaskLatency : undefined;
            resourceInputs["caCertificate"] = state ? state.caCertificate : undefined;
            resourceInputs["capStreamsPerDatastore"] = state ? state.capStreamsPerDatastore : undefined;
            resourceInputs["enableLatencyThrottling"] = state ? state.enableLatencyThrottling : undefined;
            resourceInputs["enableSslVerification"] = state ? state.enableSslVerification : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["newTaskLatency"] = state ? state.newTaskLatency : undefined;
            resourceInputs["numberOfStreams"] = state ? state.numberOfStreams : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vmwareType"] = state ? state.vmwareType : undefined;
        } else {
            const args = argsOrState as SourceVmwareArgs | undefined;
            if ((!args || args.endpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["activeTaskLatency"] = args ? args.activeTaskLatency : undefined;
            resourceInputs["caCertificate"] = args?.caCertificate ? pulumi.secret(args.caCertificate) : undefined;
            resourceInputs["capStreamsPerDatastore"] = args ? args.capStreamsPerDatastore : undefined;
            resourceInputs["enableLatencyThrottling"] = args ? args.enableLatencyThrottling : undefined;
            resourceInputs["enableSslVerification"] = args ? args.enableSslVerification : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["newTaskLatency"] = args ? args.newTaskLatency : undefined;
            resourceInputs["numberOfStreams"] = args ? args.numberOfStreams : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vmwareType"] = args ? args.vmwareType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caCertificate", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SourceVmware.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SourceVmware resources.
 */
export interface SourceVmwareState {
    /**
     * If the latency of a datastore is above this value, existing backup tasks using the datastore are throttled.
     */
    activeTaskLatency?: pulumi.Input<number>;
    /**
     * The contents of CA certificate
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * Specifies whether datastore streams are configured for all datastores that are part of the registered entity. If set to
     * true, number of streams from Cohesity cluster to the registered entity will be limited to the value set for
     * number_of_streams. If not set or set to false, there is no max limit for the number of concurrent streams.
     */
    capStreamsPerDatastore?: pulumi.Input<boolean>;
    /**
     * Indicates whether read operations to the datastores, which are part of the registered Protection Source, are throttled.
     */
    enableLatencyThrottling?: pulumi.Input<boolean>;
    /**
     * Specifies whether SSL verification should be performed.
     */
    enableSslVerification?: pulumi.Input<boolean>;
    /**
     * Specifies the network endpoint of the Protection Source where it is reachable. It could be an URL or hostname or an IP
     * address of the Protection Source
     */
    endpoint?: pulumi.Input<string>;
    /**
     * If the latency of a datastore is above this value, then new backup tasks using the datastore will not be started.
     */
    newTaskLatency?: pulumi.Input<number>;
    /**
     * Specifies the limit on the number of streams Cohesity cluster will make concurrently to the datastores of the registered
     * entity. This limit is enforced only when the cap_streams_per_datastore is set to true
     */
    numberOfStreams?: pulumi.Input<number>;
    /**
     * Specifies password of the username to access the target source
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies username to access the target source
     */
    username?: pulumi.Input<string>;
    /**
     * Specifies the VMware entity type
     */
    vmwareType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SourceVmware resource.
 */
export interface SourceVmwareArgs {
    /**
     * If the latency of a datastore is above this value, existing backup tasks using the datastore are throttled.
     */
    activeTaskLatency?: pulumi.Input<number>;
    /**
     * The contents of CA certificate
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * Specifies whether datastore streams are configured for all datastores that are part of the registered entity. If set to
     * true, number of streams from Cohesity cluster to the registered entity will be limited to the value set for
     * number_of_streams. If not set or set to false, there is no max limit for the number of concurrent streams.
     */
    capStreamsPerDatastore?: pulumi.Input<boolean>;
    /**
     * Indicates whether read operations to the datastores, which are part of the registered Protection Source, are throttled.
     */
    enableLatencyThrottling?: pulumi.Input<boolean>;
    /**
     * Specifies whether SSL verification should be performed.
     */
    enableSslVerification?: pulumi.Input<boolean>;
    /**
     * Specifies the network endpoint of the Protection Source where it is reachable. It could be an URL or hostname or an IP
     * address of the Protection Source
     */
    endpoint: pulumi.Input<string>;
    /**
     * If the latency of a datastore is above this value, then new backup tasks using the datastore will not be started.
     */
    newTaskLatency?: pulumi.Input<number>;
    /**
     * Specifies the limit on the number of streams Cohesity cluster will make concurrently to the datastores of the registered
     * entity. This limit is enforced only when the cap_streams_per_datastore is set to true
     */
    numberOfStreams?: pulumi.Input<number>;
    /**
     * Specifies password of the username to access the target source
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies username to access the target source
     */
    username: pulumi.Input<string>;
    /**
     * Specifies the VMware entity type
     */
    vmwareType?: pulumi.Input<string>;
}
