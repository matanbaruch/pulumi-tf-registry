// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Release extends pulumi.CustomResource {
    /**
     * Get an existing Release resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReleaseState, opts?: pulumi.CustomResourceOptions): Release {
        return new Release(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'helmfile:index/release:Release';

    /**
     * Returns true if the given object is an instance of Release.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Release {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Release.__pulumiType;
    }

    public /*out*/ readonly applyOutput!: pulumi.Output<string>;
    public readonly atomic!: pulumi.Output<boolean | undefined>;
    public readonly awsAssumeRole!: pulumi.Output<outputs.ReleaseAwsAssumeRole | undefined>;
    public readonly awsProfile!: pulumi.Output<string | undefined>;
    public readonly awsRegion!: pulumi.Output<string | undefined>;
    public readonly binary!: pulumi.Output<string | undefined>;
    public readonly chart!: pulumi.Output<string>;
    public readonly cleanupOnFail!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly diffOutput!: pulumi.Output<string>;
    public readonly dirty!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly error!: pulumi.Output<string>;
    public readonly force!: pulumi.Output<boolean | undefined>;
    public readonly helmBinary!: pulumi.Output<string | undefined>;
    public readonly helmVersion!: pulumi.Output<string | undefined>;
    public readonly kubeconfig!: pulumi.Output<string>;
    public readonly kubecontext!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string | undefined>;
    public readonly timeout!: pulumi.Output<number | undefined>;
    public readonly values!: pulumi.Output<string[] | undefined>;
    public readonly verify!: pulumi.Output<boolean | undefined>;
    public readonly version!: pulumi.Output<string | undefined>;
    public readonly wait!: pulumi.Output<boolean | undefined>;
    public readonly workingDirectory!: pulumi.Output<string | undefined>;

    /**
     * Create a Release resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReleaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReleaseArgs | ReleaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReleaseState | undefined;
            resourceInputs["applyOutput"] = state ? state.applyOutput : undefined;
            resourceInputs["atomic"] = state ? state.atomic : undefined;
            resourceInputs["awsAssumeRole"] = state ? state.awsAssumeRole : undefined;
            resourceInputs["awsProfile"] = state ? state.awsProfile : undefined;
            resourceInputs["awsRegion"] = state ? state.awsRegion : undefined;
            resourceInputs["binary"] = state ? state.binary : undefined;
            resourceInputs["chart"] = state ? state.chart : undefined;
            resourceInputs["cleanupOnFail"] = state ? state.cleanupOnFail : undefined;
            resourceInputs["diffOutput"] = state ? state.diffOutput : undefined;
            resourceInputs["dirty"] = state ? state.dirty : undefined;
            resourceInputs["error"] = state ? state.error : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["helmBinary"] = state ? state.helmBinary : undefined;
            resourceInputs["helmVersion"] = state ? state.helmVersion : undefined;
            resourceInputs["kubeconfig"] = state ? state.kubeconfig : undefined;
            resourceInputs["kubecontext"] = state ? state.kubecontext : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
            resourceInputs["verify"] = state ? state.verify : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["wait"] = state ? state.wait : undefined;
            resourceInputs["workingDirectory"] = state ? state.workingDirectory : undefined;
        } else {
            const args = argsOrState as ReleaseArgs | undefined;
            if ((!args || args.chart === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chart'");
            }
            if ((!args || args.kubeconfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubeconfig'");
            }
            resourceInputs["atomic"] = args ? args.atomic : undefined;
            resourceInputs["awsAssumeRole"] = args ? args.awsAssumeRole : undefined;
            resourceInputs["awsProfile"] = args ? args.awsProfile : undefined;
            resourceInputs["awsRegion"] = args ? args.awsRegion : undefined;
            resourceInputs["binary"] = args ? args.binary : undefined;
            resourceInputs["chart"] = args ? args.chart : undefined;
            resourceInputs["cleanupOnFail"] = args ? args.cleanupOnFail : undefined;
            resourceInputs["dirty"] = args ? args.dirty : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["helmBinary"] = args ? args.helmBinary : undefined;
            resourceInputs["helmVersion"] = args ? args.helmVersion : undefined;
            resourceInputs["kubeconfig"] = args ? args.kubeconfig : undefined;
            resourceInputs["kubecontext"] = args ? args.kubecontext : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
            resourceInputs["verify"] = args ? args.verify : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["wait"] = args ? args.wait : undefined;
            resourceInputs["workingDirectory"] = args ? args.workingDirectory : undefined;
            resourceInputs["applyOutput"] = undefined /*out*/;
            resourceInputs["diffOutput"] = undefined /*out*/;
            resourceInputs["error"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Release.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Release resources.
 */
export interface ReleaseState {
    applyOutput?: pulumi.Input<string>;
    atomic?: pulumi.Input<boolean>;
    awsAssumeRole?: pulumi.Input<inputs.ReleaseAwsAssumeRole>;
    awsProfile?: pulumi.Input<string>;
    awsRegion?: pulumi.Input<string>;
    binary?: pulumi.Input<string>;
    chart?: pulumi.Input<string>;
    cleanupOnFail?: pulumi.Input<boolean>;
    diffOutput?: pulumi.Input<string>;
    dirty?: pulumi.Input<boolean>;
    error?: pulumi.Input<string>;
    force?: pulumi.Input<boolean>;
    helmBinary?: pulumi.Input<string>;
    helmVersion?: pulumi.Input<string>;
    kubeconfig?: pulumi.Input<string>;
    kubecontext?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
    verify?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
    wait?: pulumi.Input<boolean>;
    workingDirectory?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Release resource.
 */
export interface ReleaseArgs {
    atomic?: pulumi.Input<boolean>;
    awsAssumeRole?: pulumi.Input<inputs.ReleaseAwsAssumeRole>;
    awsProfile?: pulumi.Input<string>;
    awsRegion?: pulumi.Input<string>;
    binary?: pulumi.Input<string>;
    chart: pulumi.Input<string>;
    cleanupOnFail?: pulumi.Input<boolean>;
    dirty?: pulumi.Input<boolean>;
    force?: pulumi.Input<boolean>;
    helmBinary?: pulumi.Input<string>;
    helmVersion?: pulumi.Input<string>;
    kubeconfig: pulumi.Input<string>;
    kubecontext?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
    verify?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
    wait?: pulumi.Input<boolean>;
    workingDirectory?: pulumi.Input<string>;
}
