// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Aggregate extends pulumi.CustomResource {
    /**
     * Get an existing Aggregate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AggregateState, opts?: pulumi.CustomResourceOptions): Aggregate {
        return new Aggregate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-cloudmanager:index/aggregate:Aggregate';

    /**
     * Returns true if the given object is an instance of Aggregate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Aggregate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Aggregate.__pulumiType;
    }

    public readonly capacityTier!: pulumi.Output<string | undefined>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly diskSizeSize!: pulumi.Output<number | undefined>;
    public readonly diskSizeUnit!: pulumi.Output<string | undefined>;
    public readonly homeNode!: pulumi.Output<string | undefined>;
    public readonly iops!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly numberOfDisks!: pulumi.Output<number>;
    public readonly providerVolumeType!: pulumi.Output<string | undefined>;
    public readonly throughput!: pulumi.Output<number | undefined>;
    public readonly workingEnvironmentId!: pulumi.Output<string | undefined>;
    public readonly workingEnvironmentName!: pulumi.Output<string | undefined>;

    /**
     * Create a Aggregate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AggregateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AggregateArgs | AggregateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AggregateState | undefined;
            resourceInputs["capacityTier"] = state ? state.capacityTier : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["diskSizeSize"] = state ? state.diskSizeSize : undefined;
            resourceInputs["diskSizeUnit"] = state ? state.diskSizeUnit : undefined;
            resourceInputs["homeNode"] = state ? state.homeNode : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfDisks"] = state ? state.numberOfDisks : undefined;
            resourceInputs["providerVolumeType"] = state ? state.providerVolumeType : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
            resourceInputs["workingEnvironmentId"] = state ? state.workingEnvironmentId : undefined;
            resourceInputs["workingEnvironmentName"] = state ? state.workingEnvironmentName : undefined;
        } else {
            const args = argsOrState as AggregateArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.numberOfDisks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numberOfDisks'");
            }
            resourceInputs["capacityTier"] = args ? args.capacityTier : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["diskSizeSize"] = args ? args.diskSizeSize : undefined;
            resourceInputs["diskSizeUnit"] = args ? args.diskSizeUnit : undefined;
            resourceInputs["homeNode"] = args ? args.homeNode : undefined;
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfDisks"] = args ? args.numberOfDisks : undefined;
            resourceInputs["providerVolumeType"] = args ? args.providerVolumeType : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
            resourceInputs["workingEnvironmentId"] = args ? args.workingEnvironmentId : undefined;
            resourceInputs["workingEnvironmentName"] = args ? args.workingEnvironmentName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Aggregate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Aggregate resources.
 */
export interface AggregateState {
    capacityTier?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    diskSizeSize?: pulumi.Input<number>;
    diskSizeUnit?: pulumi.Input<string>;
    homeNode?: pulumi.Input<string>;
    iops?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numberOfDisks?: pulumi.Input<number>;
    providerVolumeType?: pulumi.Input<string>;
    throughput?: pulumi.Input<number>;
    workingEnvironmentId?: pulumi.Input<string>;
    workingEnvironmentName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Aggregate resource.
 */
export interface AggregateArgs {
    capacityTier?: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    diskSizeSize?: pulumi.Input<number>;
    diskSizeUnit?: pulumi.Input<string>;
    homeNode?: pulumi.Input<string>;
    iops?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numberOfDisks: pulumi.Input<number>;
    providerVolumeType?: pulumi.Input<string>;
    throughput?: pulumi.Input<number>;
    workingEnvironmentId?: pulumi.Input<string>;
    workingEnvironmentName?: pulumi.Input<string>;
}
