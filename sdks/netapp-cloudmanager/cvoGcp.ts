// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CvoGcp extends pulumi.CustomResource {
    /**
     * Get an existing CvoGcp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CvoGcpState, opts?: pulumi.CustomResourceOptions): CvoGcp {
        return new CvoGcp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-cloudmanager:index/cvoGcp:CvoGcp';

    /**
     * Returns true if the given object is an instance of CvoGcp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CvoGcp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CvoGcp.__pulumiType;
    }

    public readonly backupVolumesToCbs!: pulumi.Output<boolean | undefined>;
    public readonly capacityPackageName!: pulumi.Output<string | undefined>;
    public readonly capacityTier!: pulumi.Output<string | undefined>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly dataEncryptionType!: pulumi.Output<string | undefined>;
    public readonly enableCompliance!: pulumi.Output<boolean | undefined>;
    public readonly firewallIpRanges!: pulumi.Output<boolean | undefined>;
    public readonly firewallRule!: pulumi.Output<string | undefined>;
    public readonly firewallTagNameRule!: pulumi.Output<string | undefined>;
    public readonly flashCache!: pulumi.Output<boolean | undefined>;
    public readonly gcpEncryptionParameters!: pulumi.Output<string | undefined>;
    public readonly gcpLabels!: pulumi.Output<outputs.CvoGcpGcpLabel[] | undefined>;
    public readonly gcpServiceAccount!: pulumi.Output<string | undefined>;
    public readonly gcpVolumeSize!: pulumi.Output<number | undefined>;
    public readonly gcpVolumeSizeUnit!: pulumi.Output<string | undefined>;
    public readonly gcpVolumeType!: pulumi.Output<string | undefined>;
    public readonly instanceType!: pulumi.Output<string | undefined>;
    public readonly isHa!: pulumi.Output<boolean | undefined>;
    public readonly licenseType!: pulumi.Output<string | undefined>;
    public readonly mediatorZone!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkProjectId!: pulumi.Output<string | undefined>;
    public readonly node1Zone!: pulumi.Output<string | undefined>;
    public readonly node2Zone!: pulumi.Output<string | undefined>;
    public readonly nssAccount!: pulumi.Output<string | undefined>;
    public readonly ontapVersion!: pulumi.Output<string | undefined>;
    public readonly platformSerialNumberNode1!: pulumi.Output<string | undefined>;
    public readonly platformSerialNumberNode2!: pulumi.Output<string | undefined>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly providedLicense!: pulumi.Output<string | undefined>;
    public readonly retries!: pulumi.Output<number | undefined>;
    public readonly saasSubscriptionId!: pulumi.Output<string | undefined>;
    public readonly serialNumber!: pulumi.Output<string | undefined>;
    public readonly subnet0NodeAndDataConnectivity!: pulumi.Output<string | undefined>;
    public readonly subnet1ClusterConnectivity!: pulumi.Output<string | undefined>;
    public readonly subnet2HaConnectivity!: pulumi.Output<string | undefined>;
    public readonly subnet3DataReplication!: pulumi.Output<string | undefined>;
    public readonly subnetId!: pulumi.Output<string | undefined>;
    public readonly svmName!: pulumi.Output<string | undefined>;
    public readonly svmPassword!: pulumi.Output<string>;
    public readonly svms!: pulumi.Output<outputs.CvoGcpSvm[] | undefined>;
    public readonly tierLevel!: pulumi.Output<string | undefined>;
    public readonly upgradeOntapVersion!: pulumi.Output<boolean | undefined>;
    public readonly useLatestVersion!: pulumi.Output<boolean | undefined>;
    public readonly vpc0FirewallRuleName!: pulumi.Output<string | undefined>;
    public readonly vpc0FirewallRuleTagName!: pulumi.Output<string | undefined>;
    public readonly vpc0NodeAndDataConnectivity!: pulumi.Output<string | undefined>;
    public readonly vpc1ClusterConnectivity!: pulumi.Output<string | undefined>;
    public readonly vpc1FirewallRuleName!: pulumi.Output<string | undefined>;
    public readonly vpc1FirewallRuleTagName!: pulumi.Output<string | undefined>;
    public readonly vpc2FirewallRuleName!: pulumi.Output<string | undefined>;
    public readonly vpc2FirewallRuleTagName!: pulumi.Output<string | undefined>;
    public readonly vpc2HaConnectivity!: pulumi.Output<string | undefined>;
    public readonly vpc3DataReplication!: pulumi.Output<string | undefined>;
    public readonly vpc3FirewallRuleName!: pulumi.Output<string | undefined>;
    public readonly vpc3FirewallRuleTagName!: pulumi.Output<string | undefined>;
    public readonly vpcId!: pulumi.Output<string | undefined>;
    public readonly workspaceId!: pulumi.Output<string | undefined>;
    public readonly wormRetentionPeriodLength!: pulumi.Output<number | undefined>;
    public readonly wormRetentionPeriodUnit!: pulumi.Output<string | undefined>;
    public readonly writingSpeedState!: pulumi.Output<string>;
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a CvoGcp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CvoGcpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CvoGcpArgs | CvoGcpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CvoGcpState | undefined;
            resourceInputs["backupVolumesToCbs"] = state ? state.backupVolumesToCbs : undefined;
            resourceInputs["capacityPackageName"] = state ? state.capacityPackageName : undefined;
            resourceInputs["capacityTier"] = state ? state.capacityTier : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["dataEncryptionType"] = state ? state.dataEncryptionType : undefined;
            resourceInputs["enableCompliance"] = state ? state.enableCompliance : undefined;
            resourceInputs["firewallIpRanges"] = state ? state.firewallIpRanges : undefined;
            resourceInputs["firewallRule"] = state ? state.firewallRule : undefined;
            resourceInputs["firewallTagNameRule"] = state ? state.firewallTagNameRule : undefined;
            resourceInputs["flashCache"] = state ? state.flashCache : undefined;
            resourceInputs["gcpEncryptionParameters"] = state ? state.gcpEncryptionParameters : undefined;
            resourceInputs["gcpLabels"] = state ? state.gcpLabels : undefined;
            resourceInputs["gcpServiceAccount"] = state ? state.gcpServiceAccount : undefined;
            resourceInputs["gcpVolumeSize"] = state ? state.gcpVolumeSize : undefined;
            resourceInputs["gcpVolumeSizeUnit"] = state ? state.gcpVolumeSizeUnit : undefined;
            resourceInputs["gcpVolumeType"] = state ? state.gcpVolumeType : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["isHa"] = state ? state.isHa : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["mediatorZone"] = state ? state.mediatorZone : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkProjectId"] = state ? state.networkProjectId : undefined;
            resourceInputs["node1Zone"] = state ? state.node1Zone : undefined;
            resourceInputs["node2Zone"] = state ? state.node2Zone : undefined;
            resourceInputs["nssAccount"] = state ? state.nssAccount : undefined;
            resourceInputs["ontapVersion"] = state ? state.ontapVersion : undefined;
            resourceInputs["platformSerialNumberNode1"] = state ? state.platformSerialNumberNode1 : undefined;
            resourceInputs["platformSerialNumberNode2"] = state ? state.platformSerialNumberNode2 : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["providedLicense"] = state ? state.providedLicense : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["saasSubscriptionId"] = state ? state.saasSubscriptionId : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["subnet0NodeAndDataConnectivity"] = state ? state.subnet0NodeAndDataConnectivity : undefined;
            resourceInputs["subnet1ClusterConnectivity"] = state ? state.subnet1ClusterConnectivity : undefined;
            resourceInputs["subnet2HaConnectivity"] = state ? state.subnet2HaConnectivity : undefined;
            resourceInputs["subnet3DataReplication"] = state ? state.subnet3DataReplication : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["svmName"] = state ? state.svmName : undefined;
            resourceInputs["svmPassword"] = state ? state.svmPassword : undefined;
            resourceInputs["svms"] = state ? state.svms : undefined;
            resourceInputs["tierLevel"] = state ? state.tierLevel : undefined;
            resourceInputs["upgradeOntapVersion"] = state ? state.upgradeOntapVersion : undefined;
            resourceInputs["useLatestVersion"] = state ? state.useLatestVersion : undefined;
            resourceInputs["vpc0FirewallRuleName"] = state ? state.vpc0FirewallRuleName : undefined;
            resourceInputs["vpc0FirewallRuleTagName"] = state ? state.vpc0FirewallRuleTagName : undefined;
            resourceInputs["vpc0NodeAndDataConnectivity"] = state ? state.vpc0NodeAndDataConnectivity : undefined;
            resourceInputs["vpc1ClusterConnectivity"] = state ? state.vpc1ClusterConnectivity : undefined;
            resourceInputs["vpc1FirewallRuleName"] = state ? state.vpc1FirewallRuleName : undefined;
            resourceInputs["vpc1FirewallRuleTagName"] = state ? state.vpc1FirewallRuleTagName : undefined;
            resourceInputs["vpc2FirewallRuleName"] = state ? state.vpc2FirewallRuleName : undefined;
            resourceInputs["vpc2FirewallRuleTagName"] = state ? state.vpc2FirewallRuleTagName : undefined;
            resourceInputs["vpc2HaConnectivity"] = state ? state.vpc2HaConnectivity : undefined;
            resourceInputs["vpc3DataReplication"] = state ? state.vpc3DataReplication : undefined;
            resourceInputs["vpc3FirewallRuleName"] = state ? state.vpc3FirewallRuleName : undefined;
            resourceInputs["vpc3FirewallRuleTagName"] = state ? state.vpc3FirewallRuleTagName : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
            resourceInputs["wormRetentionPeriodLength"] = state ? state.wormRetentionPeriodLength : undefined;
            resourceInputs["wormRetentionPeriodUnit"] = state ? state.wormRetentionPeriodUnit : undefined;
            resourceInputs["writingSpeedState"] = state ? state.writingSpeedState : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as CvoGcpArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.svmPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'svmPassword'");
            }
            resourceInputs["backupVolumesToCbs"] = args ? args.backupVolumesToCbs : undefined;
            resourceInputs["capacityPackageName"] = args ? args.capacityPackageName : undefined;
            resourceInputs["capacityTier"] = args ? args.capacityTier : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["dataEncryptionType"] = args ? args.dataEncryptionType : undefined;
            resourceInputs["enableCompliance"] = args ? args.enableCompliance : undefined;
            resourceInputs["firewallIpRanges"] = args ? args.firewallIpRanges : undefined;
            resourceInputs["firewallRule"] = args ? args.firewallRule : undefined;
            resourceInputs["firewallTagNameRule"] = args ? args.firewallTagNameRule : undefined;
            resourceInputs["flashCache"] = args ? args.flashCache : undefined;
            resourceInputs["gcpEncryptionParameters"] = args ? args.gcpEncryptionParameters : undefined;
            resourceInputs["gcpLabels"] = args ? args.gcpLabels : undefined;
            resourceInputs["gcpServiceAccount"] = args ? args.gcpServiceAccount : undefined;
            resourceInputs["gcpVolumeSize"] = args ? args.gcpVolumeSize : undefined;
            resourceInputs["gcpVolumeSizeUnit"] = args ? args.gcpVolumeSizeUnit : undefined;
            resourceInputs["gcpVolumeType"] = args ? args.gcpVolumeType : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["isHa"] = args ? args.isHa : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["mediatorZone"] = args ? args.mediatorZone : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkProjectId"] = args ? args.networkProjectId : undefined;
            resourceInputs["node1Zone"] = args ? args.node1Zone : undefined;
            resourceInputs["node2Zone"] = args ? args.node2Zone : undefined;
            resourceInputs["nssAccount"] = args ? args.nssAccount : undefined;
            resourceInputs["ontapVersion"] = args ? args.ontapVersion : undefined;
            resourceInputs["platformSerialNumberNode1"] = args ? args.platformSerialNumberNode1 : undefined;
            resourceInputs["platformSerialNumberNode2"] = args ? args.platformSerialNumberNode2 : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["providedLicense"] = args ? args.providedLicense : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["saasSubscriptionId"] = args ? args.saasSubscriptionId : undefined;
            resourceInputs["serialNumber"] = args ? args.serialNumber : undefined;
            resourceInputs["subnet0NodeAndDataConnectivity"] = args ? args.subnet0NodeAndDataConnectivity : undefined;
            resourceInputs["subnet1ClusterConnectivity"] = args ? args.subnet1ClusterConnectivity : undefined;
            resourceInputs["subnet2HaConnectivity"] = args ? args.subnet2HaConnectivity : undefined;
            resourceInputs["subnet3DataReplication"] = args ? args.subnet3DataReplication : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["svmName"] = args ? args.svmName : undefined;
            resourceInputs["svmPassword"] = args?.svmPassword ? pulumi.secret(args.svmPassword) : undefined;
            resourceInputs["svms"] = args ? args.svms : undefined;
            resourceInputs["tierLevel"] = args ? args.tierLevel : undefined;
            resourceInputs["upgradeOntapVersion"] = args ? args.upgradeOntapVersion : undefined;
            resourceInputs["useLatestVersion"] = args ? args.useLatestVersion : undefined;
            resourceInputs["vpc0FirewallRuleName"] = args ? args.vpc0FirewallRuleName : undefined;
            resourceInputs["vpc0FirewallRuleTagName"] = args ? args.vpc0FirewallRuleTagName : undefined;
            resourceInputs["vpc0NodeAndDataConnectivity"] = args ? args.vpc0NodeAndDataConnectivity : undefined;
            resourceInputs["vpc1ClusterConnectivity"] = args ? args.vpc1ClusterConnectivity : undefined;
            resourceInputs["vpc1FirewallRuleName"] = args ? args.vpc1FirewallRuleName : undefined;
            resourceInputs["vpc1FirewallRuleTagName"] = args ? args.vpc1FirewallRuleTagName : undefined;
            resourceInputs["vpc2FirewallRuleName"] = args ? args.vpc2FirewallRuleName : undefined;
            resourceInputs["vpc2FirewallRuleTagName"] = args ? args.vpc2FirewallRuleTagName : undefined;
            resourceInputs["vpc2HaConnectivity"] = args ? args.vpc2HaConnectivity : undefined;
            resourceInputs["vpc3DataReplication"] = args ? args.vpc3DataReplication : undefined;
            resourceInputs["vpc3FirewallRuleName"] = args ? args.vpc3FirewallRuleName : undefined;
            resourceInputs["vpc3FirewallRuleTagName"] = args ? args.vpc3FirewallRuleTagName : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["wormRetentionPeriodLength"] = args ? args.wormRetentionPeriodLength : undefined;
            resourceInputs["wormRetentionPeriodUnit"] = args ? args.wormRetentionPeriodUnit : undefined;
            resourceInputs["writingSpeedState"] = args ? args.writingSpeedState : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["svmPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CvoGcp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CvoGcp resources.
 */
export interface CvoGcpState {
    backupVolumesToCbs?: pulumi.Input<boolean>;
    capacityPackageName?: pulumi.Input<string>;
    capacityTier?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    dataEncryptionType?: pulumi.Input<string>;
    enableCompliance?: pulumi.Input<boolean>;
    firewallIpRanges?: pulumi.Input<boolean>;
    firewallRule?: pulumi.Input<string>;
    firewallTagNameRule?: pulumi.Input<string>;
    flashCache?: pulumi.Input<boolean>;
    gcpEncryptionParameters?: pulumi.Input<string>;
    gcpLabels?: pulumi.Input<pulumi.Input<inputs.CvoGcpGcpLabel>[]>;
    gcpServiceAccount?: pulumi.Input<string>;
    gcpVolumeSize?: pulumi.Input<number>;
    gcpVolumeSizeUnit?: pulumi.Input<string>;
    gcpVolumeType?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    isHa?: pulumi.Input<boolean>;
    licenseType?: pulumi.Input<string>;
    mediatorZone?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkProjectId?: pulumi.Input<string>;
    node1Zone?: pulumi.Input<string>;
    node2Zone?: pulumi.Input<string>;
    nssAccount?: pulumi.Input<string>;
    ontapVersion?: pulumi.Input<string>;
    platformSerialNumberNode1?: pulumi.Input<string>;
    platformSerialNumberNode2?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    providedLicense?: pulumi.Input<string>;
    retries?: pulumi.Input<number>;
    saasSubscriptionId?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    subnet0NodeAndDataConnectivity?: pulumi.Input<string>;
    subnet1ClusterConnectivity?: pulumi.Input<string>;
    subnet2HaConnectivity?: pulumi.Input<string>;
    subnet3DataReplication?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    svmPassword?: pulumi.Input<string>;
    svms?: pulumi.Input<pulumi.Input<inputs.CvoGcpSvm>[]>;
    tierLevel?: pulumi.Input<string>;
    upgradeOntapVersion?: pulumi.Input<boolean>;
    useLatestVersion?: pulumi.Input<boolean>;
    vpc0FirewallRuleName?: pulumi.Input<string>;
    vpc0FirewallRuleTagName?: pulumi.Input<string>;
    vpc0NodeAndDataConnectivity?: pulumi.Input<string>;
    vpc1ClusterConnectivity?: pulumi.Input<string>;
    vpc1FirewallRuleName?: pulumi.Input<string>;
    vpc1FirewallRuleTagName?: pulumi.Input<string>;
    vpc2FirewallRuleName?: pulumi.Input<string>;
    vpc2FirewallRuleTagName?: pulumi.Input<string>;
    vpc2HaConnectivity?: pulumi.Input<string>;
    vpc3DataReplication?: pulumi.Input<string>;
    vpc3FirewallRuleName?: pulumi.Input<string>;
    vpc3FirewallRuleTagName?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    workspaceId?: pulumi.Input<string>;
    wormRetentionPeriodLength?: pulumi.Input<number>;
    wormRetentionPeriodUnit?: pulumi.Input<string>;
    writingSpeedState?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CvoGcp resource.
 */
export interface CvoGcpArgs {
    backupVolumesToCbs?: pulumi.Input<boolean>;
    capacityPackageName?: pulumi.Input<string>;
    capacityTier?: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    dataEncryptionType?: pulumi.Input<string>;
    enableCompliance?: pulumi.Input<boolean>;
    firewallIpRanges?: pulumi.Input<boolean>;
    firewallRule?: pulumi.Input<string>;
    firewallTagNameRule?: pulumi.Input<string>;
    flashCache?: pulumi.Input<boolean>;
    gcpEncryptionParameters?: pulumi.Input<string>;
    gcpLabels?: pulumi.Input<pulumi.Input<inputs.CvoGcpGcpLabel>[]>;
    gcpServiceAccount?: pulumi.Input<string>;
    gcpVolumeSize?: pulumi.Input<number>;
    gcpVolumeSizeUnit?: pulumi.Input<string>;
    gcpVolumeType?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    isHa?: pulumi.Input<boolean>;
    licenseType?: pulumi.Input<string>;
    mediatorZone?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkProjectId?: pulumi.Input<string>;
    node1Zone?: pulumi.Input<string>;
    node2Zone?: pulumi.Input<string>;
    nssAccount?: pulumi.Input<string>;
    ontapVersion?: pulumi.Input<string>;
    platformSerialNumberNode1?: pulumi.Input<string>;
    platformSerialNumberNode2?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    providedLicense?: pulumi.Input<string>;
    retries?: pulumi.Input<number>;
    saasSubscriptionId?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    subnet0NodeAndDataConnectivity?: pulumi.Input<string>;
    subnet1ClusterConnectivity?: pulumi.Input<string>;
    subnet2HaConnectivity?: pulumi.Input<string>;
    subnet3DataReplication?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    svmPassword: pulumi.Input<string>;
    svms?: pulumi.Input<pulumi.Input<inputs.CvoGcpSvm>[]>;
    tierLevel?: pulumi.Input<string>;
    upgradeOntapVersion?: pulumi.Input<boolean>;
    useLatestVersion?: pulumi.Input<boolean>;
    vpc0FirewallRuleName?: pulumi.Input<string>;
    vpc0FirewallRuleTagName?: pulumi.Input<string>;
    vpc0NodeAndDataConnectivity?: pulumi.Input<string>;
    vpc1ClusterConnectivity?: pulumi.Input<string>;
    vpc1FirewallRuleName?: pulumi.Input<string>;
    vpc1FirewallRuleTagName?: pulumi.Input<string>;
    vpc2FirewallRuleName?: pulumi.Input<string>;
    vpc2FirewallRuleTagName?: pulumi.Input<string>;
    vpc2HaConnectivity?: pulumi.Input<string>;
    vpc3DataReplication?: pulumi.Input<string>;
    vpc3FirewallRuleName?: pulumi.Input<string>;
    vpc3FirewallRuleTagName?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    workspaceId?: pulumi.Input<string>;
    wormRetentionPeriodLength?: pulumi.Input<number>;
    wormRetentionPeriodUnit?: pulumi.Input<string>;
    writingSpeedState?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
