// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ConnectorGcp extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorGcp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorGcpState, opts?: pulumi.CustomResourceOptions): ConnectorGcp {
        return new ConnectorGcp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-cloudmanager:index/connectorGcp:ConnectorGcp';

    /**
     * Returns true if the given object is an instance of ConnectorGcp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorGcp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorGcp.__pulumiType;
    }

    public readonly accountId!: pulumi.Output<string>;
    public readonly associatePublicIp!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly clientId!: pulumi.Output<string>;
    public readonly company!: pulumi.Output<string>;
    public readonly firewallTags!: pulumi.Output<boolean | undefined>;
    public readonly gcpBlockProjectSshKeys!: pulumi.Output<boolean | undefined>;
    public readonly gcpEnableOsLogin!: pulumi.Output<boolean | undefined>;
    public readonly gcpEnableOsLoginSk!: pulumi.Output<boolean | undefined>;
    public readonly gcpSerialPortEnable!: pulumi.Output<boolean | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly machineType!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkProjectId!: pulumi.Output<string | undefined>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly proxyCertificates!: pulumi.Output<string[] | undefined>;
    public readonly proxyPassword!: pulumi.Output<string | undefined>;
    public readonly proxyUrl!: pulumi.Output<string | undefined>;
    public readonly proxyUserName!: pulumi.Output<string | undefined>;
    public readonly serviceAccountEmail!: pulumi.Output<string>;
    public readonly serviceAccountKey!: pulumi.Output<string | undefined>;
    public readonly serviceAccountPath!: pulumi.Output<string | undefined>;
    public readonly subnetId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a ConnectorGcp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorGcpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorGcpArgs | ConnectorGcpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorGcpState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["associatePublicIp"] = state ? state.associatePublicIp : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["company"] = state ? state.company : undefined;
            resourceInputs["firewallTags"] = state ? state.firewallTags : undefined;
            resourceInputs["gcpBlockProjectSshKeys"] = state ? state.gcpBlockProjectSshKeys : undefined;
            resourceInputs["gcpEnableOsLogin"] = state ? state.gcpEnableOsLogin : undefined;
            resourceInputs["gcpEnableOsLoginSk"] = state ? state.gcpEnableOsLoginSk : undefined;
            resourceInputs["gcpSerialPortEnable"] = state ? state.gcpSerialPortEnable : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["machineType"] = state ? state.machineType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkProjectId"] = state ? state.networkProjectId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["proxyCertificates"] = state ? state.proxyCertificates : undefined;
            resourceInputs["proxyPassword"] = state ? state.proxyPassword : undefined;
            resourceInputs["proxyUrl"] = state ? state.proxyUrl : undefined;
            resourceInputs["proxyUserName"] = state ? state.proxyUserName : undefined;
            resourceInputs["serviceAccountEmail"] = state ? state.serviceAccountEmail : undefined;
            resourceInputs["serviceAccountKey"] = state ? state.serviceAccountKey : undefined;
            resourceInputs["serviceAccountPath"] = state ? state.serviceAccountPath : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ConnectorGcpArgs | undefined;
            if ((!args || args.company === undefined) && !opts.urn) {
                throw new Error("Missing required property 'company'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.serviceAccountEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountEmail'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["associatePublicIp"] = args ? args.associatePublicIp : undefined;
            resourceInputs["company"] = args ? args.company : undefined;
            resourceInputs["firewallTags"] = args ? args.firewallTags : undefined;
            resourceInputs["gcpBlockProjectSshKeys"] = args ? args.gcpBlockProjectSshKeys : undefined;
            resourceInputs["gcpEnableOsLogin"] = args ? args.gcpEnableOsLogin : undefined;
            resourceInputs["gcpEnableOsLoginSk"] = args ? args.gcpEnableOsLoginSk : undefined;
            resourceInputs["gcpSerialPortEnable"] = args ? args.gcpSerialPortEnable : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["machineType"] = args ? args.machineType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkProjectId"] = args ? args.networkProjectId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["proxyCertificates"] = args ? args.proxyCertificates : undefined;
            resourceInputs["proxyPassword"] = args?.proxyPassword ? pulumi.secret(args.proxyPassword) : undefined;
            resourceInputs["proxyUrl"] = args ? args.proxyUrl : undefined;
            resourceInputs["proxyUserName"] = args ? args.proxyUserName : undefined;
            resourceInputs["serviceAccountEmail"] = args ? args.serviceAccountEmail : undefined;
            resourceInputs["serviceAccountKey"] = args?.serviceAccountKey ? pulumi.secret(args.serviceAccountKey) : undefined;
            resourceInputs["serviceAccountPath"] = args ? args.serviceAccountPath : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["clientId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["proxyPassword", "serviceAccountKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ConnectorGcp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorGcp resources.
 */
export interface ConnectorGcpState {
    accountId?: pulumi.Input<string>;
    associatePublicIp?: pulumi.Input<boolean>;
    clientId?: pulumi.Input<string>;
    company?: pulumi.Input<string>;
    firewallTags?: pulumi.Input<boolean>;
    gcpBlockProjectSshKeys?: pulumi.Input<boolean>;
    gcpEnableOsLogin?: pulumi.Input<boolean>;
    gcpEnableOsLoginSk?: pulumi.Input<boolean>;
    gcpSerialPortEnable?: pulumi.Input<boolean>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    machineType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkProjectId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    proxyCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    proxyPassword?: pulumi.Input<string>;
    proxyUrl?: pulumi.Input<string>;
    proxyUserName?: pulumi.Input<string>;
    serviceAccountEmail?: pulumi.Input<string>;
    serviceAccountKey?: pulumi.Input<string>;
    serviceAccountPath?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorGcp resource.
 */
export interface ConnectorGcpArgs {
    accountId?: pulumi.Input<string>;
    associatePublicIp?: pulumi.Input<boolean>;
    company: pulumi.Input<string>;
    firewallTags?: pulumi.Input<boolean>;
    gcpBlockProjectSshKeys?: pulumi.Input<boolean>;
    gcpEnableOsLogin?: pulumi.Input<boolean>;
    gcpEnableOsLoginSk?: pulumi.Input<boolean>;
    gcpSerialPortEnable?: pulumi.Input<boolean>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    machineType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkProjectId?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    proxyCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    proxyPassword?: pulumi.Input<string>;
    proxyUrl?: pulumi.Input<string>;
    proxyUserName?: pulumi.Input<string>;
    serviceAccountEmail: pulumi.Input<string>;
    serviceAccountKey?: pulumi.Input<string>;
    serviceAccountPath?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    zone: pulumi.Input<string>;
}
