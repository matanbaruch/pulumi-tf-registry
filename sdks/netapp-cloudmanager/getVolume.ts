// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVolume(args: GetVolumeArgs, opts?: pulumi.InvokeOptions): Promise<GetVolumeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("netapp-cloudmanager:index/getVolume:getVolume", {
        "aggregateName": args.aggregateName,
        "capacityTier": args.capacityTier,
        "clientId": args.clientId,
        "enableCompression": args.enableCompression,
        "enableDeduplication": args.enableDeduplication,
        "enableThinProvisioning": args.enableThinProvisioning,
        "exportPolicyIps": args.exportPolicyIps,
        "exportPolicyName": args.exportPolicyName,
        "exportPolicyNfsVersions": args.exportPolicyNfsVersions,
        "exportPolicyType": args.exportPolicyType,
        "id": args.id,
        "igroups": args.igroups,
        "initiators": args.initiators,
        "iops": args.iops,
        "mountPoint": args.mountPoint,
        "name": args.name,
        "osName": args.osName,
        "permission": args.permission,
        "providerVolumeType": args.providerVolumeType,
        "shareName": args.shareName,
        "size": args.size,
        "snapshotPolicyName": args.snapshotPolicyName,
        "svmName": args.svmName,
        "throughput": args.throughput,
        "tieringPolicy": args.tieringPolicy,
        "unit": args.unit,
        "users": args.users,
        "volumeProtocol": args.volumeProtocol,
        "workingEnvironmentId": args.workingEnvironmentId,
        "workingEnvironmentName": args.workingEnvironmentName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVolume.
 */
export interface GetVolumeArgs {
    aggregateName?: string;
    capacityTier?: string;
    clientId: string;
    enableCompression?: boolean;
    enableDeduplication?: boolean;
    enableThinProvisioning?: boolean;
    exportPolicyIps?: string[];
    exportPolicyName?: string;
    exportPolicyNfsVersions?: string[];
    exportPolicyType?: string;
    id?: string;
    igroups?: string[];
    initiators?: inputs.GetVolumeInitiator[];
    iops?: number;
    mountPoint?: string;
    name: string;
    osName?: string;
    permission?: string;
    providerVolumeType?: string;
    shareName?: string;
    size?: number;
    snapshotPolicyName?: string;
    svmName?: string;
    throughput?: number;
    tieringPolicy?: string;
    unit?: string;
    users?: string[];
    volumeProtocol?: string;
    workingEnvironmentId?: string;
    workingEnvironmentName?: string;
}

/**
 * A collection of values returned by getVolume.
 */
export interface GetVolumeResult {
    readonly aggregateName: string;
    readonly capacityTier?: string;
    readonly clientId: string;
    readonly enableCompression?: boolean;
    readonly enableDeduplication?: boolean;
    readonly enableThinProvisioning?: boolean;
    readonly exportPolicyIps?: string[];
    readonly exportPolicyName?: string;
    readonly exportPolicyNfsVersions?: string[];
    readonly exportPolicyType?: string;
    readonly id: string;
    readonly igroups?: string[];
    readonly initiators?: outputs.GetVolumeInitiator[];
    readonly iops?: number;
    readonly mountPoint?: string;
    readonly name: string;
    readonly osName?: string;
    readonly permission?: string;
    readonly providerVolumeType?: string;
    readonly shareName?: string;
    readonly size?: number;
    readonly snapshotPolicyName?: string;
    readonly svmName?: string;
    readonly throughput?: number;
    readonly tieringPolicy?: string;
    readonly unit?: string;
    readonly users?: string[];
    readonly volumeProtocol?: string;
    readonly workingEnvironmentId?: string;
    readonly workingEnvironmentName?: string;
}
export function getVolumeOutput(args: GetVolumeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVolumeResult> {
    return pulumi.output(args).apply((a: any) => getVolume(a, opts))
}

/**
 * A collection of arguments for invoking getVolume.
 */
export interface GetVolumeOutputArgs {
    aggregateName?: pulumi.Input<string>;
    capacityTier?: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    enableCompression?: pulumi.Input<boolean>;
    enableDeduplication?: pulumi.Input<boolean>;
    enableThinProvisioning?: pulumi.Input<boolean>;
    exportPolicyIps?: pulumi.Input<pulumi.Input<string>[]>;
    exportPolicyName?: pulumi.Input<string>;
    exportPolicyNfsVersions?: pulumi.Input<pulumi.Input<string>[]>;
    exportPolicyType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    igroups?: pulumi.Input<pulumi.Input<string>[]>;
    initiators?: pulumi.Input<pulumi.Input<inputs.GetVolumeInitiatorArgs>[]>;
    iops?: pulumi.Input<number>;
    mountPoint?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    osName?: pulumi.Input<string>;
    permission?: pulumi.Input<string>;
    providerVolumeType?: pulumi.Input<string>;
    shareName?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotPolicyName?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    throughput?: pulumi.Input<number>;
    tieringPolicy?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    volumeProtocol?: pulumi.Input<string>;
    workingEnvironmentId?: pulumi.Input<string>;
    workingEnvironmentName?: pulumi.Input<string>;
}
