// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectorAws extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorAws resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorAwsState, opts?: pulumi.CustomResourceOptions): ConnectorAws {
        return new ConnectorAws(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-cloudmanager:index/connectorAws:ConnectorAws';

    /**
     * Returns true if the given object is an instance of ConnectorAws.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorAws {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorAws.__pulumiType;
    }

    public readonly accountId!: pulumi.Output<string>;
    public readonly ami!: pulumi.Output<string | undefined>;
    public readonly associatePublicIpAddress!: pulumi.Output<boolean | undefined>;
    public readonly awsTags!: pulumi.Output<outputs.ConnectorAwsAwsTag[] | undefined>;
    public /*out*/ readonly clientId!: pulumi.Output<string>;
    public readonly company!: pulumi.Output<string>;
    public readonly enableTerminationProtection!: pulumi.Output<boolean | undefined>;
    public readonly iamInstanceProfileName!: pulumi.Output<string>;
    public readonly instanceMetadatas!: pulumi.Output<outputs.ConnectorAwsInstanceMetadata[] | undefined>;
    public readonly instanceType!: pulumi.Output<string | undefined>;
    public readonly keyName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly proxyCertificates!: pulumi.Output<string[] | undefined>;
    public readonly proxyPassword!: pulumi.Output<string | undefined>;
    public readonly proxyUrl!: pulumi.Output<string | undefined>;
    public readonly proxyUserName!: pulumi.Output<string | undefined>;
    public readonly publicIpAddress!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;

    /**
     * Create a ConnectorAws resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorAwsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorAwsArgs | ConnectorAwsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorAwsState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["ami"] = state ? state.ami : undefined;
            resourceInputs["associatePublicIpAddress"] = state ? state.associatePublicIpAddress : undefined;
            resourceInputs["awsTags"] = state ? state.awsTags : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["company"] = state ? state.company : undefined;
            resourceInputs["enableTerminationProtection"] = state ? state.enableTerminationProtection : undefined;
            resourceInputs["iamInstanceProfileName"] = state ? state.iamInstanceProfileName : undefined;
            resourceInputs["instanceMetadatas"] = state ? state.instanceMetadatas : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["proxyCertificates"] = state ? state.proxyCertificates : undefined;
            resourceInputs["proxyPassword"] = state ? state.proxyPassword : undefined;
            resourceInputs["proxyUrl"] = state ? state.proxyUrl : undefined;
            resourceInputs["proxyUserName"] = state ? state.proxyUserName : undefined;
            resourceInputs["publicIpAddress"] = state ? state.publicIpAddress : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
        } else {
            const args = argsOrState as ConnectorAwsArgs | undefined;
            if ((!args || args.company === undefined) && !opts.urn) {
                throw new Error("Missing required property 'company'");
            }
            if ((!args || args.iamInstanceProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iamInstanceProfileName'");
            }
            if ((!args || args.keyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyName'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["ami"] = args ? args.ami : undefined;
            resourceInputs["associatePublicIpAddress"] = args ? args.associatePublicIpAddress : undefined;
            resourceInputs["awsTags"] = args ? args.awsTags : undefined;
            resourceInputs["company"] = args ? args.company : undefined;
            resourceInputs["enableTerminationProtection"] = args ? args.enableTerminationProtection : undefined;
            resourceInputs["iamInstanceProfileName"] = args ? args.iamInstanceProfileName : undefined;
            resourceInputs["instanceMetadatas"] = args ? args.instanceMetadatas : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["proxyCertificates"] = args ? args.proxyCertificates : undefined;
            resourceInputs["proxyPassword"] = args?.proxyPassword ? pulumi.secret(args.proxyPassword) : undefined;
            resourceInputs["proxyUrl"] = args ? args.proxyUrl : undefined;
            resourceInputs["proxyUserName"] = args ? args.proxyUserName : undefined;
            resourceInputs["publicIpAddress"] = args ? args.publicIpAddress : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["clientId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["proxyPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ConnectorAws.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorAws resources.
 */
export interface ConnectorAwsState {
    accountId?: pulumi.Input<string>;
    ami?: pulumi.Input<string>;
    associatePublicIpAddress?: pulumi.Input<boolean>;
    awsTags?: pulumi.Input<pulumi.Input<inputs.ConnectorAwsAwsTag>[]>;
    clientId?: pulumi.Input<string>;
    company?: pulumi.Input<string>;
    enableTerminationProtection?: pulumi.Input<boolean>;
    iamInstanceProfileName?: pulumi.Input<string>;
    instanceMetadatas?: pulumi.Input<pulumi.Input<inputs.ConnectorAwsInstanceMetadata>[]>;
    instanceType?: pulumi.Input<string>;
    keyName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    proxyCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    proxyPassword?: pulumi.Input<string>;
    proxyUrl?: pulumi.Input<string>;
    proxyUserName?: pulumi.Input<string>;
    publicIpAddress?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorAws resource.
 */
export interface ConnectorAwsArgs {
    accountId?: pulumi.Input<string>;
    ami?: pulumi.Input<string>;
    associatePublicIpAddress?: pulumi.Input<boolean>;
    awsTags?: pulumi.Input<pulumi.Input<inputs.ConnectorAwsAwsTag>[]>;
    company: pulumi.Input<string>;
    enableTerminationProtection?: pulumi.Input<boolean>;
    iamInstanceProfileName: pulumi.Input<string>;
    instanceMetadatas?: pulumi.Input<pulumi.Input<inputs.ConnectorAwsInstanceMetadata>[]>;
    instanceType?: pulumi.Input<string>;
    keyName: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    proxyCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    proxyPassword?: pulumi.Input<string>;
    proxyUrl?: pulumi.Input<string>;
    proxyUserName?: pulumi.Input<string>;
    publicIpAddress?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}
