// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Snapmirror extends pulumi.CustomResource {
    /**
     * Get an existing Snapmirror resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapmirrorState, opts?: pulumi.CustomResourceOptions): Snapmirror {
        return new Snapmirror(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-cloudmanager:index/snapmirror:Snapmirror';

    /**
     * Returns true if the given object is an instance of Snapmirror.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapmirror {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapmirror.__pulumiType;
    }

    public readonly capacityTier!: pulumi.Output<string | undefined>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly destinationAggregateName!: pulumi.Output<string | undefined>;
    public readonly destinationSvmName!: pulumi.Output<string>;
    public readonly destinationVolumeName!: pulumi.Output<string>;
    public readonly destinationWorkingEnvironmentId!: pulumi.Output<string | undefined>;
    public readonly destinationWorkingEnvironmentName!: pulumi.Output<string | undefined>;
    public readonly iops!: pulumi.Output<number | undefined>;
    public readonly maxTransferRate!: pulumi.Output<number | undefined>;
    public readonly policy!: pulumi.Output<string | undefined>;
    public readonly providerVolumeType!: pulumi.Output<string | undefined>;
    public readonly schedule!: pulumi.Output<string | undefined>;
    public readonly sourceSvmName!: pulumi.Output<string>;
    public readonly sourceVolumeName!: pulumi.Output<string>;
    public readonly sourceWorkingEnvironmentId!: pulumi.Output<string | undefined>;
    public readonly sourceWorkingEnvironmentName!: pulumi.Output<string | undefined>;
    public readonly tenantId!: pulumi.Output<string | undefined>;
    public readonly throughput!: pulumi.Output<number | undefined>;

    /**
     * Create a Snapmirror resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapmirrorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapmirrorArgs | SnapmirrorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapmirrorState | undefined;
            resourceInputs["capacityTier"] = state ? state.capacityTier : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["destinationAggregateName"] = state ? state.destinationAggregateName : undefined;
            resourceInputs["destinationSvmName"] = state ? state.destinationSvmName : undefined;
            resourceInputs["destinationVolumeName"] = state ? state.destinationVolumeName : undefined;
            resourceInputs["destinationWorkingEnvironmentId"] = state ? state.destinationWorkingEnvironmentId : undefined;
            resourceInputs["destinationWorkingEnvironmentName"] = state ? state.destinationWorkingEnvironmentName : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["maxTransferRate"] = state ? state.maxTransferRate : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["providerVolumeType"] = state ? state.providerVolumeType : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["sourceSvmName"] = state ? state.sourceSvmName : undefined;
            resourceInputs["sourceVolumeName"] = state ? state.sourceVolumeName : undefined;
            resourceInputs["sourceWorkingEnvironmentId"] = state ? state.sourceWorkingEnvironmentId : undefined;
            resourceInputs["sourceWorkingEnvironmentName"] = state ? state.sourceWorkingEnvironmentName : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
        } else {
            const args = argsOrState as SnapmirrorArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.destinationVolumeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationVolumeName'");
            }
            if ((!args || args.sourceVolumeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceVolumeName'");
            }
            resourceInputs["capacityTier"] = args ? args.capacityTier : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["destinationAggregateName"] = args ? args.destinationAggregateName : undefined;
            resourceInputs["destinationSvmName"] = args ? args.destinationSvmName : undefined;
            resourceInputs["destinationVolumeName"] = args ? args.destinationVolumeName : undefined;
            resourceInputs["destinationWorkingEnvironmentId"] = args ? args.destinationWorkingEnvironmentId : undefined;
            resourceInputs["destinationWorkingEnvironmentName"] = args ? args.destinationWorkingEnvironmentName : undefined;
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["maxTransferRate"] = args ? args.maxTransferRate : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["providerVolumeType"] = args ? args.providerVolumeType : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["sourceSvmName"] = args ? args.sourceSvmName : undefined;
            resourceInputs["sourceVolumeName"] = args ? args.sourceVolumeName : undefined;
            resourceInputs["sourceWorkingEnvironmentId"] = args ? args.sourceWorkingEnvironmentId : undefined;
            resourceInputs["sourceWorkingEnvironmentName"] = args ? args.sourceWorkingEnvironmentName : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapmirror.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Snapmirror resources.
 */
export interface SnapmirrorState {
    capacityTier?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    destinationAggregateName?: pulumi.Input<string>;
    destinationSvmName?: pulumi.Input<string>;
    destinationVolumeName?: pulumi.Input<string>;
    destinationWorkingEnvironmentId?: pulumi.Input<string>;
    destinationWorkingEnvironmentName?: pulumi.Input<string>;
    iops?: pulumi.Input<number>;
    maxTransferRate?: pulumi.Input<number>;
    policy?: pulumi.Input<string>;
    providerVolumeType?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    sourceSvmName?: pulumi.Input<string>;
    sourceVolumeName?: pulumi.Input<string>;
    sourceWorkingEnvironmentId?: pulumi.Input<string>;
    sourceWorkingEnvironmentName?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    throughput?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Snapmirror resource.
 */
export interface SnapmirrorArgs {
    capacityTier?: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    destinationAggregateName?: pulumi.Input<string>;
    destinationSvmName?: pulumi.Input<string>;
    destinationVolumeName: pulumi.Input<string>;
    destinationWorkingEnvironmentId?: pulumi.Input<string>;
    destinationWorkingEnvironmentName?: pulumi.Input<string>;
    iops?: pulumi.Input<number>;
    maxTransferRate?: pulumi.Input<number>;
    policy?: pulumi.Input<string>;
    providerVolumeType?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    sourceSvmName?: pulumi.Input<string>;
    sourceVolumeName: pulumi.Input<string>;
    sourceWorkingEnvironmentId?: pulumi.Input<string>;
    sourceWorkingEnvironmentName?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    throughput?: pulumi.Input<number>;
}
