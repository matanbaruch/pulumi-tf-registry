// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AnfVolume extends pulumi.CustomResource {
    /**
     * Get an existing AnfVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AnfVolumeState, opts?: pulumi.CustomResourceOptions): AnfVolume {
        return new AnfVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-cloudmanager:index/anfVolume:AnfVolume';

    /**
     * Returns true if the given object is an instance of AnfVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AnfVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AnfVolume.__pulumiType;
    }

    public readonly account!: pulumi.Output<string | undefined>;
    public readonly capacityPool!: pulumi.Output<string>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly exportPolicies!: pulumi.Output<outputs.AnfVolumeExportPolicy[] | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly netappAccount!: pulumi.Output<string>;
    public readonly protocolTypes!: pulumi.Output<string[]>;
    public readonly resourceGroups!: pulumi.Output<string>;
    public readonly serviceLevel!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<number>;
    public readonly sizeUnit!: pulumi.Output<string>;
    public readonly subnet!: pulumi.Output<string>;
    public readonly subscription!: pulumi.Output<string>;
    public readonly virtualNetwork!: pulumi.Output<string>;
    public readonly volumePath!: pulumi.Output<string>;
    public readonly workingEnvironmentName!: pulumi.Output<string>;

    /**
     * Create a AnfVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AnfVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AnfVolumeArgs | AnfVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AnfVolumeState | undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["capacityPool"] = state ? state.capacityPool : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["exportPolicies"] = state ? state.exportPolicies : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netappAccount"] = state ? state.netappAccount : undefined;
            resourceInputs["protocolTypes"] = state ? state.protocolTypes : undefined;
            resourceInputs["resourceGroups"] = state ? state.resourceGroups : undefined;
            resourceInputs["serviceLevel"] = state ? state.serviceLevel : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sizeUnit"] = state ? state.sizeUnit : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["subscription"] = state ? state.subscription : undefined;
            resourceInputs["virtualNetwork"] = state ? state.virtualNetwork : undefined;
            resourceInputs["volumePath"] = state ? state.volumePath : undefined;
            resourceInputs["workingEnvironmentName"] = state ? state.workingEnvironmentName : undefined;
        } else {
            const args = argsOrState as AnfVolumeArgs | undefined;
            if ((!args || args.capacityPool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacityPool'");
            }
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.netappAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netappAccount'");
            }
            if ((!args || args.protocolTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolTypes'");
            }
            if ((!args || args.resourceGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroups'");
            }
            if ((!args || args.serviceLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceLevel'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.sizeUnit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizeUnit'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            if ((!args || args.subscription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscription'");
            }
            if ((!args || args.virtualNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualNetwork'");
            }
            if ((!args || args.volumePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumePath'");
            }
            if ((!args || args.workingEnvironmentName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workingEnvironmentName'");
            }
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["capacityPool"] = args ? args.capacityPool : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["exportPolicies"] = args ? args.exportPolicies : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netappAccount"] = args ? args.netappAccount : undefined;
            resourceInputs["protocolTypes"] = args ? args.protocolTypes : undefined;
            resourceInputs["resourceGroups"] = args ? args.resourceGroups : undefined;
            resourceInputs["serviceLevel"] = args ? args.serviceLevel : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sizeUnit"] = args ? args.sizeUnit : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["subscription"] = args ? args.subscription : undefined;
            resourceInputs["virtualNetwork"] = args ? args.virtualNetwork : undefined;
            resourceInputs["volumePath"] = args ? args.volumePath : undefined;
            resourceInputs["workingEnvironmentName"] = args ? args.workingEnvironmentName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AnfVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AnfVolume resources.
 */
export interface AnfVolumeState {
    account?: pulumi.Input<string>;
    capacityPool?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    exportPolicies?: pulumi.Input<pulumi.Input<inputs.AnfVolumeExportPolicy>[]>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netappAccount?: pulumi.Input<string>;
    protocolTypes?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroups?: pulumi.Input<string>;
    serviceLevel?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    sizeUnit?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    subscription?: pulumi.Input<string>;
    virtualNetwork?: pulumi.Input<string>;
    volumePath?: pulumi.Input<string>;
    workingEnvironmentName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AnfVolume resource.
 */
export interface AnfVolumeArgs {
    account?: pulumi.Input<string>;
    capacityPool: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    exportPolicies?: pulumi.Input<pulumi.Input<inputs.AnfVolumeExportPolicy>[]>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netappAccount: pulumi.Input<string>;
    protocolTypes: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroups: pulumi.Input<string>;
    serviceLevel: pulumi.Input<string>;
    size: pulumi.Input<number>;
    sizeUnit: pulumi.Input<string>;
    subnet: pulumi.Input<string>;
    subscription: pulumi.Input<string>;
    virtualNetwork: pulumi.Input<string>;
    volumePath: pulumi.Input<string>;
    workingEnvironmentName: pulumi.Input<string>;
}
