// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cbs extends pulumi.CustomResource {
    /**
     * Get an existing Cbs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CbsState, opts?: pulumi.CustomResourceOptions): Cbs {
        return new Cbs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-cloudmanager:index/cbs:Cbs';

    /**
     * Returns true if the given object is an instance of Cbs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cbs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cbs.__pulumiType;
    }

    public readonly accountId!: pulumi.Output<string>;
    public readonly autoBackupEnabled!: pulumi.Output<boolean | undefined>;
    public readonly awsCbsParameters!: pulumi.Output<outputs.CbsAwsCbsParameters | undefined>;
    public readonly azureCbsParameters!: pulumi.Output<outputs.CbsAzureCbsParameters | undefined>;
    public readonly backupPolicy!: pulumi.Output<outputs.CbsBackupPolicy | undefined>;
    public readonly bucket!: pulumi.Output<string | undefined>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly cloudProvider!: pulumi.Output<string | undefined>;
    public readonly exportExistingSnapshots!: pulumi.Output<boolean | undefined>;
    public readonly ipSpace!: pulumi.Output<string | undefined>;
    public readonly maxTransferRate!: pulumi.Output<number | undefined>;
    public readonly region!: pulumi.Output<string | undefined>;
    public readonly volumes!: pulumi.Output<outputs.CbsVolume[] | undefined>;
    public readonly workingEnvironmentId!: pulumi.Output<string | undefined>;
    public readonly workingEnvironmentName!: pulumi.Output<string | undefined>;

    /**
     * Create a Cbs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CbsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CbsArgs | CbsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CbsState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["autoBackupEnabled"] = state ? state.autoBackupEnabled : undefined;
            resourceInputs["awsCbsParameters"] = state ? state.awsCbsParameters : undefined;
            resourceInputs["azureCbsParameters"] = state ? state.azureCbsParameters : undefined;
            resourceInputs["backupPolicy"] = state ? state.backupPolicy : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["exportExistingSnapshots"] = state ? state.exportExistingSnapshots : undefined;
            resourceInputs["ipSpace"] = state ? state.ipSpace : undefined;
            resourceInputs["maxTransferRate"] = state ? state.maxTransferRate : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
            resourceInputs["workingEnvironmentId"] = state ? state.workingEnvironmentId : undefined;
            resourceInputs["workingEnvironmentName"] = state ? state.workingEnvironmentName : undefined;
        } else {
            const args = argsOrState as CbsArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["autoBackupEnabled"] = args ? args.autoBackupEnabled : undefined;
            resourceInputs["awsCbsParameters"] = args ? args.awsCbsParameters : undefined;
            resourceInputs["azureCbsParameters"] = args ? args.azureCbsParameters : undefined;
            resourceInputs["backupPolicy"] = args ? args.backupPolicy : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["exportExistingSnapshots"] = args ? args.exportExistingSnapshots : undefined;
            resourceInputs["ipSpace"] = args ? args.ipSpace : undefined;
            resourceInputs["maxTransferRate"] = args ? args.maxTransferRate : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["workingEnvironmentId"] = args ? args.workingEnvironmentId : undefined;
            resourceInputs["workingEnvironmentName"] = args ? args.workingEnvironmentName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cbs.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cbs resources.
 */
export interface CbsState {
    accountId?: pulumi.Input<string>;
    autoBackupEnabled?: pulumi.Input<boolean>;
    awsCbsParameters?: pulumi.Input<inputs.CbsAwsCbsParameters>;
    azureCbsParameters?: pulumi.Input<inputs.CbsAzureCbsParameters>;
    backupPolicy?: pulumi.Input<inputs.CbsBackupPolicy>;
    bucket?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    cloudProvider?: pulumi.Input<string>;
    exportExistingSnapshots?: pulumi.Input<boolean>;
    ipSpace?: pulumi.Input<string>;
    maxTransferRate?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    volumes?: pulumi.Input<pulumi.Input<inputs.CbsVolume>[]>;
    workingEnvironmentId?: pulumi.Input<string>;
    workingEnvironmentName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cbs resource.
 */
export interface CbsArgs {
    accountId: pulumi.Input<string>;
    autoBackupEnabled?: pulumi.Input<boolean>;
    awsCbsParameters?: pulumi.Input<inputs.CbsAwsCbsParameters>;
    azureCbsParameters?: pulumi.Input<inputs.CbsAzureCbsParameters>;
    backupPolicy?: pulumi.Input<inputs.CbsBackupPolicy>;
    bucket?: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    cloudProvider?: pulumi.Input<string>;
    exportExistingSnapshots?: pulumi.Input<boolean>;
    ipSpace?: pulumi.Input<string>;
    maxTransferRate?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    volumes?: pulumi.Input<pulumi.Input<inputs.CbsVolume>[]>;
    workingEnvironmentId?: pulumi.Input<string>;
    workingEnvironmentName?: pulumi.Input<string>;
}
