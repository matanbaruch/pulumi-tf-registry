// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CifsServer extends pulumi.CustomResource {
    /**
     * Get an existing CifsServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CifsServerState, opts?: pulumi.CustomResourceOptions): CifsServer {
        return new CifsServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-cloudmanager:index/cifsServer:CifsServer';

    /**
     * Returns true if the given object is an instance of CifsServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CifsServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CifsServer.__pulumiType;
    }

    public readonly clientId!: pulumi.Output<string>;
    public readonly dnsDomain!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string>;
    public readonly ipAddresses!: pulumi.Output<string[]>;
    public readonly isWorkgroup!: pulumi.Output<boolean | undefined>;
    public readonly netbios!: pulumi.Output<string>;
    public readonly organizationalUnit!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly serverName!: pulumi.Output<string | undefined>;
    public readonly svmName!: pulumi.Output<string | undefined>;
    public readonly username!: pulumi.Output<string>;
    public readonly workgroupName!: pulumi.Output<string | undefined>;
    public readonly workingEnvironmentId!: pulumi.Output<string | undefined>;
    public readonly workingEnvironmentName!: pulumi.Output<string | undefined>;

    /**
     * Create a CifsServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CifsServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CifsServerArgs | CifsServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CifsServerState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["dnsDomain"] = state ? state.dnsDomain : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["isWorkgroup"] = state ? state.isWorkgroup : undefined;
            resourceInputs["netbios"] = state ? state.netbios : undefined;
            resourceInputs["organizationalUnit"] = state ? state.organizationalUnit : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["svmName"] = state ? state.svmName : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["workgroupName"] = state ? state.workgroupName : undefined;
            resourceInputs["workingEnvironmentId"] = state ? state.workingEnvironmentId : undefined;
            resourceInputs["workingEnvironmentName"] = state ? state.workingEnvironmentName : undefined;
        } else {
            const args = argsOrState as CifsServerArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.dnsDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsDomain'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.ipAddresses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddresses'");
            }
            if ((!args || args.netbios === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netbios'");
            }
            if ((!args || args.organizationalUnit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationalUnit'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["dnsDomain"] = args ? args.dnsDomain : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["ipAddresses"] = args ? args.ipAddresses : undefined;
            resourceInputs["isWorkgroup"] = args ? args.isWorkgroup : undefined;
            resourceInputs["netbios"] = args ? args.netbios : undefined;
            resourceInputs["organizationalUnit"] = args ? args.organizationalUnit : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["svmName"] = args ? args.svmName : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["workgroupName"] = args ? args.workgroupName : undefined;
            resourceInputs["workingEnvironmentId"] = args ? args.workingEnvironmentId : undefined;
            resourceInputs["workingEnvironmentName"] = args ? args.workingEnvironmentName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CifsServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CifsServer resources.
 */
export interface CifsServerState {
    clientId?: pulumi.Input<string>;
    dnsDomain?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    isWorkgroup?: pulumi.Input<boolean>;
    netbios?: pulumi.Input<string>;
    organizationalUnit?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    workgroupName?: pulumi.Input<string>;
    workingEnvironmentId?: pulumi.Input<string>;
    workingEnvironmentName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CifsServer resource.
 */
export interface CifsServerArgs {
    clientId: pulumi.Input<string>;
    dnsDomain: pulumi.Input<string>;
    domain: pulumi.Input<string>;
    ipAddresses: pulumi.Input<pulumi.Input<string>[]>;
    isWorkgroup?: pulumi.Input<boolean>;
    netbios: pulumi.Input<string>;
    organizationalUnit: pulumi.Input<string>;
    password: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    username: pulumi.Input<string>;
    workgroupName?: pulumi.Input<string>;
    workingEnvironmentId?: pulumi.Input<string>;
    workingEnvironmentName?: pulumi.Input<string>;
}
