// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CvsGcpVolume extends pulumi.CustomResource {
    /**
     * Get an existing CvsGcpVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CvsGcpVolumeState, opts?: pulumi.CustomResourceOptions): CvsGcpVolume {
        return new CvsGcpVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-cloudmanager:index/cvsGcpVolume:CvsGcpVolume';

    /**
     * Returns true if the given object is an instance of CvsGcpVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CvsGcpVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CvsGcpVolume.__pulumiType;
    }

    public readonly account!: pulumi.Output<string | undefined>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly exportPolicies!: pulumi.Output<outputs.CvsGcpVolumeExportPolicy[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly network!: pulumi.Output<string>;
    public readonly protocolTypes!: pulumi.Output<string[]>;
    public readonly region!: pulumi.Output<string>;
    public readonly serviceLevel!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<number>;
    public readonly sizeUnit!: pulumi.Output<string>;
    public readonly snapshotPolicies!: pulumi.Output<outputs.CvsGcpVolumeSnapshotPolicy[] | undefined>;
    public readonly volumePath!: pulumi.Output<string>;
    public readonly workingEnvironmentName!: pulumi.Output<string>;

    /**
     * Create a CvsGcpVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CvsGcpVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CvsGcpVolumeArgs | CvsGcpVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CvsGcpVolumeState | undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["exportPolicies"] = state ? state.exportPolicies : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["protocolTypes"] = state ? state.protocolTypes : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["serviceLevel"] = state ? state.serviceLevel : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sizeUnit"] = state ? state.sizeUnit : undefined;
            resourceInputs["snapshotPolicies"] = state ? state.snapshotPolicies : undefined;
            resourceInputs["volumePath"] = state ? state.volumePath : undefined;
            resourceInputs["workingEnvironmentName"] = state ? state.workingEnvironmentName : undefined;
        } else {
            const args = argsOrState as CvsGcpVolumeArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.protocolTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolTypes'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.sizeUnit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizeUnit'");
            }
            if ((!args || args.workingEnvironmentName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workingEnvironmentName'");
            }
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["exportPolicies"] = args ? args.exportPolicies : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["protocolTypes"] = args ? args.protocolTypes : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serviceLevel"] = args ? args.serviceLevel : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sizeUnit"] = args ? args.sizeUnit : undefined;
            resourceInputs["snapshotPolicies"] = args ? args.snapshotPolicies : undefined;
            resourceInputs["volumePath"] = args ? args.volumePath : undefined;
            resourceInputs["workingEnvironmentName"] = args ? args.workingEnvironmentName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CvsGcpVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CvsGcpVolume resources.
 */
export interface CvsGcpVolumeState {
    account?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    exportPolicies?: pulumi.Input<pulumi.Input<inputs.CvsGcpVolumeExportPolicy>[]>;
    name?: pulumi.Input<string>;
    network?: pulumi.Input<string>;
    protocolTypes?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    serviceLevel?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    sizeUnit?: pulumi.Input<string>;
    snapshotPolicies?: pulumi.Input<pulumi.Input<inputs.CvsGcpVolumeSnapshotPolicy>[]>;
    volumePath?: pulumi.Input<string>;
    workingEnvironmentName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CvsGcpVolume resource.
 */
export interface CvsGcpVolumeArgs {
    account?: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    exportPolicies?: pulumi.Input<pulumi.Input<inputs.CvsGcpVolumeExportPolicy>[]>;
    name?: pulumi.Input<string>;
    network: pulumi.Input<string>;
    protocolTypes: pulumi.Input<pulumi.Input<string>[]>;
    region: pulumi.Input<string>;
    serviceLevel?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    sizeUnit: pulumi.Input<string>;
    snapshotPolicies?: pulumi.Input<pulumi.Input<inputs.CvsGcpVolumeSnapshotPolicy>[]>;
    volumePath?: pulumi.Input<string>;
    workingEnvironmentName: pulumi.Input<string>;
}
