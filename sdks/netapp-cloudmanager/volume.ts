// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-cloudmanager:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    public readonly aggregateName!: pulumi.Output<string>;
    public readonly capacityTier!: pulumi.Output<string | undefined>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly enableCompression!: pulumi.Output<boolean | undefined>;
    public readonly enableDeduplication!: pulumi.Output<boolean | undefined>;
    public readonly enableThinProvisioning!: pulumi.Output<boolean | undefined>;
    public readonly exportPolicyIps!: pulumi.Output<string[] | undefined>;
    public readonly exportPolicyName!: pulumi.Output<string | undefined>;
    public readonly exportPolicyNfsVersions!: pulumi.Output<string[] | undefined>;
    public readonly exportPolicyRuleAccessControl!: pulumi.Output<string | undefined>;
    public readonly exportPolicyRuleSuperUser!: pulumi.Output<boolean | undefined>;
    public readonly exportPolicyType!: pulumi.Output<string | undefined>;
    public readonly igroups!: pulumi.Output<string[] | undefined>;
    public readonly initiators!: pulumi.Output<outputs.VolumeInitiator[] | undefined>;
    public readonly iops!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly osName!: pulumi.Output<string | undefined>;
    public readonly permission!: pulumi.Output<string | undefined>;
    public readonly providerVolumeType!: pulumi.Output<string>;
    public readonly shareName!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<number>;
    public readonly snapshotPolicies!: pulumi.Output<outputs.VolumeSnapshotPolicy[] | undefined>;
    public readonly snapshotPolicyName!: pulumi.Output<string | undefined>;
    public readonly svmName!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly throughput!: pulumi.Output<number | undefined>;
    public readonly tieringPolicy!: pulumi.Output<string | undefined>;
    public readonly unit!: pulumi.Output<string>;
    public readonly users!: pulumi.Output<string[] | undefined>;
    public readonly volumeProtocol!: pulumi.Output<string | undefined>;
    public readonly workingEnvironmentId!: pulumi.Output<string | undefined>;
    public readonly workingEnvironmentName!: pulumi.Output<string | undefined>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["aggregateName"] = state ? state.aggregateName : undefined;
            resourceInputs["capacityTier"] = state ? state.capacityTier : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["enableCompression"] = state ? state.enableCompression : undefined;
            resourceInputs["enableDeduplication"] = state ? state.enableDeduplication : undefined;
            resourceInputs["enableThinProvisioning"] = state ? state.enableThinProvisioning : undefined;
            resourceInputs["exportPolicyIps"] = state ? state.exportPolicyIps : undefined;
            resourceInputs["exportPolicyName"] = state ? state.exportPolicyName : undefined;
            resourceInputs["exportPolicyNfsVersions"] = state ? state.exportPolicyNfsVersions : undefined;
            resourceInputs["exportPolicyRuleAccessControl"] = state ? state.exportPolicyRuleAccessControl : undefined;
            resourceInputs["exportPolicyRuleSuperUser"] = state ? state.exportPolicyRuleSuperUser : undefined;
            resourceInputs["exportPolicyType"] = state ? state.exportPolicyType : undefined;
            resourceInputs["igroups"] = state ? state.igroups : undefined;
            resourceInputs["initiators"] = state ? state.initiators : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osName"] = state ? state.osName : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["providerVolumeType"] = state ? state.providerVolumeType : undefined;
            resourceInputs["shareName"] = state ? state.shareName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotPolicies"] = state ? state.snapshotPolicies : undefined;
            resourceInputs["snapshotPolicyName"] = state ? state.snapshotPolicyName : undefined;
            resourceInputs["svmName"] = state ? state.svmName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
            resourceInputs["tieringPolicy"] = state ? state.tieringPolicy : undefined;
            resourceInputs["unit"] = state ? state.unit : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["volumeProtocol"] = state ? state.volumeProtocol : undefined;
            resourceInputs["workingEnvironmentId"] = state ? state.workingEnvironmentId : undefined;
            resourceInputs["workingEnvironmentName"] = state ? state.workingEnvironmentName : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.providerVolumeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerVolumeType'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.unit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'unit'");
            }
            resourceInputs["aggregateName"] = args ? args.aggregateName : undefined;
            resourceInputs["capacityTier"] = args ? args.capacityTier : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["enableCompression"] = args ? args.enableCompression : undefined;
            resourceInputs["enableDeduplication"] = args ? args.enableDeduplication : undefined;
            resourceInputs["enableThinProvisioning"] = args ? args.enableThinProvisioning : undefined;
            resourceInputs["exportPolicyIps"] = args ? args.exportPolicyIps : undefined;
            resourceInputs["exportPolicyName"] = args ? args.exportPolicyName : undefined;
            resourceInputs["exportPolicyNfsVersions"] = args ? args.exportPolicyNfsVersions : undefined;
            resourceInputs["exportPolicyRuleAccessControl"] = args ? args.exportPolicyRuleAccessControl : undefined;
            resourceInputs["exportPolicyRuleSuperUser"] = args ? args.exportPolicyRuleSuperUser : undefined;
            resourceInputs["exportPolicyType"] = args ? args.exportPolicyType : undefined;
            resourceInputs["igroups"] = args ? args.igroups : undefined;
            resourceInputs["initiators"] = args ? args.initiators : undefined;
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osName"] = args ? args.osName : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["providerVolumeType"] = args ? args.providerVolumeType : undefined;
            resourceInputs["shareName"] = args ? args.shareName : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotPolicies"] = args ? args.snapshotPolicies : undefined;
            resourceInputs["snapshotPolicyName"] = args ? args.snapshotPolicyName : undefined;
            resourceInputs["svmName"] = args ? args.svmName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
            resourceInputs["tieringPolicy"] = args ? args.tieringPolicy : undefined;
            resourceInputs["unit"] = args ? args.unit : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["volumeProtocol"] = args ? args.volumeProtocol : undefined;
            resourceInputs["workingEnvironmentId"] = args ? args.workingEnvironmentId : undefined;
            resourceInputs["workingEnvironmentName"] = args ? args.workingEnvironmentName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    aggregateName?: pulumi.Input<string>;
    capacityTier?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    enableCompression?: pulumi.Input<boolean>;
    enableDeduplication?: pulumi.Input<boolean>;
    enableThinProvisioning?: pulumi.Input<boolean>;
    exportPolicyIps?: pulumi.Input<pulumi.Input<string>[]>;
    exportPolicyName?: pulumi.Input<string>;
    exportPolicyNfsVersions?: pulumi.Input<pulumi.Input<string>[]>;
    exportPolicyRuleAccessControl?: pulumi.Input<string>;
    exportPolicyRuleSuperUser?: pulumi.Input<boolean>;
    exportPolicyType?: pulumi.Input<string>;
    igroups?: pulumi.Input<pulumi.Input<string>[]>;
    initiators?: pulumi.Input<pulumi.Input<inputs.VolumeInitiator>[]>;
    iops?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osName?: pulumi.Input<string>;
    permission?: pulumi.Input<string>;
    providerVolumeType?: pulumi.Input<string>;
    shareName?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotPolicies?: pulumi.Input<pulumi.Input<inputs.VolumeSnapshotPolicy>[]>;
    snapshotPolicyName?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throughput?: pulumi.Input<number>;
    tieringPolicy?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    volumeProtocol?: pulumi.Input<string>;
    workingEnvironmentId?: pulumi.Input<string>;
    workingEnvironmentName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    aggregateName?: pulumi.Input<string>;
    capacityTier?: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    enableCompression?: pulumi.Input<boolean>;
    enableDeduplication?: pulumi.Input<boolean>;
    enableThinProvisioning?: pulumi.Input<boolean>;
    exportPolicyIps?: pulumi.Input<pulumi.Input<string>[]>;
    exportPolicyName?: pulumi.Input<string>;
    exportPolicyNfsVersions?: pulumi.Input<pulumi.Input<string>[]>;
    exportPolicyRuleAccessControl?: pulumi.Input<string>;
    exportPolicyRuleSuperUser?: pulumi.Input<boolean>;
    exportPolicyType?: pulumi.Input<string>;
    igroups?: pulumi.Input<pulumi.Input<string>[]>;
    initiators?: pulumi.Input<pulumi.Input<inputs.VolumeInitiator>[]>;
    iops?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osName?: pulumi.Input<string>;
    permission?: pulumi.Input<string>;
    providerVolumeType: pulumi.Input<string>;
    shareName?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    snapshotPolicies?: pulumi.Input<pulumi.Input<inputs.VolumeSnapshotPolicy>[]>;
    snapshotPolicyName?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throughput?: pulumi.Input<number>;
    tieringPolicy?: pulumi.Input<string>;
    unit: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    volumeProtocol?: pulumi.Input<string>;
    workingEnvironmentId?: pulumi.Input<string>;
    workingEnvironmentName?: pulumi.Input<string>;
}
