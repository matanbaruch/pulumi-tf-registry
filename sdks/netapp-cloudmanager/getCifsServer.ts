// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCifsServer(args: GetCifsServerArgs, opts?: pulumi.InvokeOptions): Promise<GetCifsServerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("netapp-cloudmanager:index/getCifsServer:getCifsServer", {
        "clientId": args.clientId,
        "dnsDomain": args.dnsDomain,
        "domain": args.domain,
        "id": args.id,
        "ipAddresses": args.ipAddresses,
        "isWorkgroup": args.isWorkgroup,
        "netbios": args.netbios,
        "organizationalUnit": args.organizationalUnit,
        "password": args.password,
        "serverName": args.serverName,
        "svmName": args.svmName,
        "username": args.username,
        "workgroupName": args.workgroupName,
        "workingEnvironmentId": args.workingEnvironmentId,
        "workingEnvironmentName": args.workingEnvironmentName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCifsServer.
 */
export interface GetCifsServerArgs {
    clientId: string;
    dnsDomain?: string;
    domain?: string;
    id?: string;
    ipAddresses?: string[];
    isWorkgroup?: boolean;
    netbios?: string;
    organizationalUnit?: string;
    password?: string;
    serverName?: string;
    svmName?: string;
    username?: string;
    workgroupName?: string;
    workingEnvironmentId?: string;
    workingEnvironmentName?: string;
}

/**
 * A collection of values returned by getCifsServer.
 */
export interface GetCifsServerResult {
    readonly clientId: string;
    readonly dnsDomain?: string;
    readonly domain?: string;
    readonly id: string;
    readonly ipAddresses?: string[];
    readonly isWorkgroup?: boolean;
    readonly netbios?: string;
    readonly organizationalUnit?: string;
    readonly password?: string;
    readonly serverName?: string;
    readonly svmName?: string;
    readonly username?: string;
    readonly workgroupName?: string;
    readonly workingEnvironmentId?: string;
    readonly workingEnvironmentName?: string;
}
export function getCifsServerOutput(args: GetCifsServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCifsServerResult> {
    return pulumi.output(args).apply((a: any) => getCifsServer(a, opts))
}

/**
 * A collection of arguments for invoking getCifsServer.
 */
export interface GetCifsServerOutputArgs {
    clientId: pulumi.Input<string>;
    dnsDomain?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    isWorkgroup?: pulumi.Input<boolean>;
    netbios?: pulumi.Input<string>;
    organizationalUnit?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    workgroupName?: pulumi.Input<string>;
    workingEnvironmentId?: pulumi.Input<string>;
    workingEnvironmentName?: pulumi.Input<string>;
}
