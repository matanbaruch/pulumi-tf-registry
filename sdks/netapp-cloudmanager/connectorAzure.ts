// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ConnectorAzure extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorAzure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorAzureState, opts?: pulumi.CustomResourceOptions): ConnectorAzure {
        return new ConnectorAzure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-cloudmanager:index/connectorAzure:ConnectorAzure';

    /**
     * Returns true if the given object is an instance of ConnectorAzure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorAzure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorAzure.__pulumiType;
    }

    public readonly accountId!: pulumi.Output<string>;
    public readonly adminPassword!: pulumi.Output<string>;
    public readonly adminUsername!: pulumi.Output<string>;
    public readonly associatePublicIpAddress!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly clientId!: pulumi.Output<string>;
    public readonly company!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkSecurityGroupName!: pulumi.Output<string>;
    public readonly networkSecurityResourceGroup!: pulumi.Output<string | undefined>;
    public readonly principalId!: pulumi.Output<string>;
    public readonly proxyCertificates!: pulumi.Output<string[] | undefined>;
    public readonly proxyPassword!: pulumi.Output<string | undefined>;
    public readonly proxyUrl!: pulumi.Output<string | undefined>;
    public readonly proxyUserName!: pulumi.Output<string | undefined>;
    public readonly resourceGroup!: pulumi.Output<string>;
    public readonly storageAccount!: pulumi.Output<string | undefined>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly subscriptionId!: pulumi.Output<string>;
    public readonly virtualMachineSize!: pulumi.Output<string | undefined>;
    public readonly vnetId!: pulumi.Output<string>;
    public readonly vnetResourceGroup!: pulumi.Output<string | undefined>;

    /**
     * Create a ConnectorAzure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorAzureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorAzureArgs | ConnectorAzureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorAzureState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["adminUsername"] = state ? state.adminUsername : undefined;
            resourceInputs["associatePublicIpAddress"] = state ? state.associatePublicIpAddress : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["company"] = state ? state.company : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkSecurityGroupName"] = state ? state.networkSecurityGroupName : undefined;
            resourceInputs["networkSecurityResourceGroup"] = state ? state.networkSecurityResourceGroup : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["proxyCertificates"] = state ? state.proxyCertificates : undefined;
            resourceInputs["proxyPassword"] = state ? state.proxyPassword : undefined;
            resourceInputs["proxyUrl"] = state ? state.proxyUrl : undefined;
            resourceInputs["proxyUserName"] = state ? state.proxyUserName : undefined;
            resourceInputs["resourceGroup"] = state ? state.resourceGroup : undefined;
            resourceInputs["storageAccount"] = state ? state.storageAccount : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["virtualMachineSize"] = state ? state.virtualMachineSize : undefined;
            resourceInputs["vnetId"] = state ? state.vnetId : undefined;
            resourceInputs["vnetResourceGroup"] = state ? state.vnetResourceGroup : undefined;
        } else {
            const args = argsOrState as ConnectorAzureArgs | undefined;
            if ((!args || args.adminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminPassword'");
            }
            if ((!args || args.adminUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminUsername'");
            }
            if ((!args || args.company === undefined) && !opts.urn) {
                throw new Error("Missing required property 'company'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.networkSecurityGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkSecurityGroupName'");
            }
            if ((!args || args.resourceGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroup'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            if ((!args || args.vnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vnetId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["adminUsername"] = args ? args.adminUsername : undefined;
            resourceInputs["associatePublicIpAddress"] = args ? args.associatePublicIpAddress : undefined;
            resourceInputs["company"] = args ? args.company : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkSecurityGroupName"] = args ? args.networkSecurityGroupName : undefined;
            resourceInputs["networkSecurityResourceGroup"] = args ? args.networkSecurityResourceGroup : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["proxyCertificates"] = args ? args.proxyCertificates : undefined;
            resourceInputs["proxyPassword"] = args?.proxyPassword ? pulumi.secret(args.proxyPassword) : undefined;
            resourceInputs["proxyUrl"] = args ? args.proxyUrl : undefined;
            resourceInputs["proxyUserName"] = args ? args.proxyUserName : undefined;
            resourceInputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            resourceInputs["storageAccount"] = args ? args.storageAccount : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            resourceInputs["virtualMachineSize"] = args ? args.virtualMachineSize : undefined;
            resourceInputs["vnetId"] = args ? args.vnetId : undefined;
            resourceInputs["vnetResourceGroup"] = args ? args.vnetResourceGroup : undefined;
            resourceInputs["clientId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword", "proxyPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ConnectorAzure.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorAzure resources.
 */
export interface ConnectorAzureState {
    accountId?: pulumi.Input<string>;
    adminPassword?: pulumi.Input<string>;
    adminUsername?: pulumi.Input<string>;
    associatePublicIpAddress?: pulumi.Input<boolean>;
    clientId?: pulumi.Input<string>;
    company?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkSecurityGroupName?: pulumi.Input<string>;
    networkSecurityResourceGroup?: pulumi.Input<string>;
    principalId?: pulumi.Input<string>;
    proxyCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    proxyPassword?: pulumi.Input<string>;
    proxyUrl?: pulumi.Input<string>;
    proxyUserName?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
    storageAccount?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    subscriptionId?: pulumi.Input<string>;
    virtualMachineSize?: pulumi.Input<string>;
    vnetId?: pulumi.Input<string>;
    vnetResourceGroup?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorAzure resource.
 */
export interface ConnectorAzureArgs {
    accountId?: pulumi.Input<string>;
    adminPassword: pulumi.Input<string>;
    adminUsername: pulumi.Input<string>;
    associatePublicIpAddress?: pulumi.Input<boolean>;
    company: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkSecurityGroupName: pulumi.Input<string>;
    networkSecurityResourceGroup?: pulumi.Input<string>;
    principalId?: pulumi.Input<string>;
    proxyCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    proxyPassword?: pulumi.Input<string>;
    proxyUrl?: pulumi.Input<string>;
    proxyUserName?: pulumi.Input<string>;
    resourceGroup: pulumi.Input<string>;
    storageAccount?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    subscriptionId: pulumi.Input<string>;
    virtualMachineSize?: pulumi.Input<string>;
    vnetId: pulumi.Input<string>;
    vnetResourceGroup?: pulumi.Input<string>;
}
