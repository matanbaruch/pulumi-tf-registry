// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AggregateArgs, AggregateState } from "./aggregate";
export type Aggregate = import("./aggregate").Aggregate;
export const Aggregate: typeof import("./aggregate").Aggregate = null as any;
utilities.lazyLoad(exports, ["Aggregate"], () => require("./aggregate"));

export { AnfVolumeArgs, AnfVolumeState } from "./anfVolume";
export type AnfVolume = import("./anfVolume").AnfVolume;
export const AnfVolume: typeof import("./anfVolume").AnfVolume = null as any;
utilities.lazyLoad(exports, ["AnfVolume"], () => require("./anfVolume"));

export { AwsFsxArgs, AwsFsxState } from "./awsFsx";
export type AwsFsx = import("./awsFsx").AwsFsx;
export const AwsFsx: typeof import("./awsFsx").AwsFsx = null as any;
utilities.lazyLoad(exports, ["AwsFsx"], () => require("./awsFsx"));

export { AwsFsxVolumeArgs, AwsFsxVolumeState } from "./awsFsxVolume";
export type AwsFsxVolume = import("./awsFsxVolume").AwsFsxVolume;
export const AwsFsxVolume: typeof import("./awsFsxVolume").AwsFsxVolume = null as any;
utilities.lazyLoad(exports, ["AwsFsxVolume"], () => require("./awsFsxVolume"));

export { CbsArgs, CbsState } from "./cbs";
export type Cbs = import("./cbs").Cbs;
export const Cbs: typeof import("./cbs").Cbs = null as any;
utilities.lazyLoad(exports, ["Cbs"], () => require("./cbs"));

export { CifsServerArgs, CifsServerState } from "./cifsServer";
export type CifsServer = import("./cifsServer").CifsServer;
export const CifsServer: typeof import("./cifsServer").CifsServer = null as any;
utilities.lazyLoad(exports, ["CifsServer"], () => require("./cifsServer"));

export { ConnectorAwsArgs, ConnectorAwsState } from "./connectorAws";
export type ConnectorAws = import("./connectorAws").ConnectorAws;
export const ConnectorAws: typeof import("./connectorAws").ConnectorAws = null as any;
utilities.lazyLoad(exports, ["ConnectorAws"], () => require("./connectorAws"));

export { ConnectorAzureArgs, ConnectorAzureState } from "./connectorAzure";
export type ConnectorAzure = import("./connectorAzure").ConnectorAzure;
export const ConnectorAzure: typeof import("./connectorAzure").ConnectorAzure = null as any;
utilities.lazyLoad(exports, ["ConnectorAzure"], () => require("./connectorAzure"));

export { ConnectorGcpArgs, ConnectorGcpState } from "./connectorGcp";
export type ConnectorGcp = import("./connectorGcp").ConnectorGcp;
export const ConnectorGcp: typeof import("./connectorGcp").ConnectorGcp = null as any;
utilities.lazyLoad(exports, ["ConnectorGcp"], () => require("./connectorGcp"));

export { CvoAwsArgs, CvoAwsState } from "./cvoAws";
export type CvoAws = import("./cvoAws").CvoAws;
export const CvoAws: typeof import("./cvoAws").CvoAws = null as any;
utilities.lazyLoad(exports, ["CvoAws"], () => require("./cvoAws"));

export { CvoAzureArgs, CvoAzureState } from "./cvoAzure";
export type CvoAzure = import("./cvoAzure").CvoAzure;
export const CvoAzure: typeof import("./cvoAzure").CvoAzure = null as any;
utilities.lazyLoad(exports, ["CvoAzure"], () => require("./cvoAzure"));

export { CvoGcpArgs, CvoGcpState } from "./cvoGcp";
export type CvoGcp = import("./cvoGcp").CvoGcp;
export const CvoGcp: typeof import("./cvoGcp").CvoGcp = null as any;
utilities.lazyLoad(exports, ["CvoGcp"], () => require("./cvoGcp"));

export { CvoOnpremArgs, CvoOnpremState } from "./cvoOnprem";
export type CvoOnprem = import("./cvoOnprem").CvoOnprem;
export const CvoOnprem: typeof import("./cvoOnprem").CvoOnprem = null as any;
utilities.lazyLoad(exports, ["CvoOnprem"], () => require("./cvoOnprem"));

export { CvsGcpVolumeArgs, CvsGcpVolumeState } from "./cvsGcpVolume";
export type CvsGcpVolume = import("./cvsGcpVolume").CvsGcpVolume;
export const CvsGcpVolume: typeof import("./cvsGcpVolume").CvsGcpVolume = null as any;
utilities.lazyLoad(exports, ["CvsGcpVolume"], () => require("./cvsGcpVolume"));

export { GetAwsFsxArgs, GetAwsFsxResult, GetAwsFsxOutputArgs } from "./getAwsFsx";
export const getAwsFsx: typeof import("./getAwsFsx").getAwsFsx = null as any;
export const getAwsFsxOutput: typeof import("./getAwsFsx").getAwsFsxOutput = null as any;
utilities.lazyLoad(exports, ["getAwsFsx","getAwsFsxOutput"], () => require("./getAwsFsx"));

export { GetCifsServerArgs, GetCifsServerResult, GetCifsServerOutputArgs } from "./getCifsServer";
export const getCifsServer: typeof import("./getCifsServer").getCifsServer = null as any;
export const getCifsServerOutput: typeof import("./getCifsServer").getCifsServerOutput = null as any;
utilities.lazyLoad(exports, ["getCifsServer","getCifsServerOutput"], () => require("./getCifsServer"));

export { GetCvoAwsArgs, GetCvoAwsResult, GetCvoAwsOutputArgs } from "./getCvoAws";
export const getCvoAws: typeof import("./getCvoAws").getCvoAws = null as any;
export const getCvoAwsOutput: typeof import("./getCvoAws").getCvoAwsOutput = null as any;
utilities.lazyLoad(exports, ["getCvoAws","getCvoAwsOutput"], () => require("./getCvoAws"));

export { GetNssAccountArgs, GetNssAccountResult, GetNssAccountOutputArgs } from "./getNssAccount";
export const getNssAccount: typeof import("./getNssAccount").getNssAccount = null as any;
export const getNssAccountOutput: typeof import("./getNssAccount").getNssAccountOutput = null as any;
utilities.lazyLoad(exports, ["getNssAccount","getNssAccountOutput"], () => require("./getNssAccount"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { NssAccountArgs, NssAccountState } from "./nssAccount";
export type NssAccount = import("./nssAccount").NssAccount;
export const NssAccount: typeof import("./nssAccount").NssAccount = null as any;
utilities.lazyLoad(exports, ["NssAccount"], () => require("./nssAccount"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SnapmirrorArgs, SnapmirrorState } from "./snapmirror";
export type Snapmirror = import("./snapmirror").Snapmirror;
export const Snapmirror: typeof import("./snapmirror").Snapmirror = null as any;
utilities.lazyLoad(exports, ["Snapmirror"], () => require("./snapmirror"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netapp-cloudmanager:index/aggregate:Aggregate":
                return new Aggregate(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/anfVolume:AnfVolume":
                return new AnfVolume(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/awsFsx:AwsFsx":
                return new AwsFsx(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/awsFsxVolume:AwsFsxVolume":
                return new AwsFsxVolume(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/cbs:Cbs":
                return new Cbs(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/cifsServer:CifsServer":
                return new CifsServer(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/connectorAws:ConnectorAws":
                return new ConnectorAws(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/connectorAzure:ConnectorAzure":
                return new ConnectorAzure(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/connectorGcp:ConnectorGcp":
                return new ConnectorGcp(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/cvoAws:CvoAws":
                return new CvoAws(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/cvoAzure:CvoAzure":
                return new CvoAzure(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/cvoGcp:CvoGcp":
                return new CvoGcp(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/cvoOnprem:CvoOnprem":
                return new CvoOnprem(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/cvsGcpVolume:CvsGcpVolume":
                return new CvsGcpVolume(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/nssAccount:NssAccount":
                return new NssAccount(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/snapmirror:Snapmirror":
                return new Snapmirror(name, <any>undefined, { urn })
            case "netapp-cloudmanager:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/aggregate", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/anfVolume", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/awsFsx", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/awsFsxVolume", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/cbs", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/cifsServer", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/connectorAws", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/connectorAzure", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/connectorGcp", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/cvoAws", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/cvoAzure", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/cvoGcp", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/cvoOnprem", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/cvsGcpVolume", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/nssAccount", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/snapmirror", _module)
pulumi.runtime.registerResourceModule("netapp-cloudmanager", "index/volume", _module)
pulumi.runtime.registerResourcePackage("netapp-cloudmanager", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:netapp-cloudmanager") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
