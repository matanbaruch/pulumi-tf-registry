// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AwsFsxVolume extends pulumi.CustomResource {
    /**
     * Get an existing AwsFsxVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsFsxVolumeState, opts?: pulumi.CustomResourceOptions): AwsFsxVolume {
        return new AwsFsxVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-cloudmanager:index/awsFsxVolume:AwsFsxVolume';

    /**
     * Returns true if the given object is an instance of AwsFsxVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsFsxVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsFsxVolume.__pulumiType;
    }

    public readonly clientId!: pulumi.Output<string>;
    public readonly enableStorageEfficiency!: pulumi.Output<boolean | undefined>;
    public readonly exportPolicyIps!: pulumi.Output<string[] | undefined>;
    public readonly exportPolicyNfsVersions!: pulumi.Output<string[] | undefined>;
    public readonly exportPolicyType!: pulumi.Output<string | undefined>;
    public readonly fileSystemId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly permission!: pulumi.Output<string | undefined>;
    public readonly shareName!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<number>;
    public readonly snapshotPolicyName!: pulumi.Output<string | undefined>;
    public readonly svmName!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly tieringPolicy!: pulumi.Output<string | undefined>;
    public readonly unit!: pulumi.Output<string>;
    public readonly users!: pulumi.Output<string[] | undefined>;
    public readonly volumeProtocol!: pulumi.Output<string>;

    /**
     * Create a AwsFsxVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsFsxVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsFsxVolumeArgs | AwsFsxVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsFsxVolumeState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["enableStorageEfficiency"] = state ? state.enableStorageEfficiency : undefined;
            resourceInputs["exportPolicyIps"] = state ? state.exportPolicyIps : undefined;
            resourceInputs["exportPolicyNfsVersions"] = state ? state.exportPolicyNfsVersions : undefined;
            resourceInputs["exportPolicyType"] = state ? state.exportPolicyType : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["shareName"] = state ? state.shareName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotPolicyName"] = state ? state.snapshotPolicyName : undefined;
            resourceInputs["svmName"] = state ? state.svmName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["tieringPolicy"] = state ? state.tieringPolicy : undefined;
            resourceInputs["unit"] = state ? state.unit : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["volumeProtocol"] = state ? state.volumeProtocol : undefined;
        } else {
            const args = argsOrState as AwsFsxVolumeArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.unit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'unit'");
            }
            if ((!args || args.volumeProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeProtocol'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["enableStorageEfficiency"] = args ? args.enableStorageEfficiency : undefined;
            resourceInputs["exportPolicyIps"] = args ? args.exportPolicyIps : undefined;
            resourceInputs["exportPolicyNfsVersions"] = args ? args.exportPolicyNfsVersions : undefined;
            resourceInputs["exportPolicyType"] = args ? args.exportPolicyType : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["shareName"] = args ? args.shareName : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotPolicyName"] = args ? args.snapshotPolicyName : undefined;
            resourceInputs["svmName"] = args ? args.svmName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["tieringPolicy"] = args ? args.tieringPolicy : undefined;
            resourceInputs["unit"] = args ? args.unit : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["volumeProtocol"] = args ? args.volumeProtocol : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsFsxVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsFsxVolume resources.
 */
export interface AwsFsxVolumeState {
    clientId?: pulumi.Input<string>;
    enableStorageEfficiency?: pulumi.Input<boolean>;
    exportPolicyIps?: pulumi.Input<pulumi.Input<string>[]>;
    exportPolicyNfsVersions?: pulumi.Input<pulumi.Input<string>[]>;
    exportPolicyType?: pulumi.Input<string>;
    fileSystemId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    permission?: pulumi.Input<string>;
    shareName?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotPolicyName?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantId?: pulumi.Input<string>;
    tieringPolicy?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    volumeProtocol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsFsxVolume resource.
 */
export interface AwsFsxVolumeArgs {
    clientId: pulumi.Input<string>;
    enableStorageEfficiency?: pulumi.Input<boolean>;
    exportPolicyIps?: pulumi.Input<pulumi.Input<string>[]>;
    exportPolicyNfsVersions?: pulumi.Input<pulumi.Input<string>[]>;
    exportPolicyType?: pulumi.Input<string>;
    fileSystemId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    permission?: pulumi.Input<string>;
    shareName?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    snapshotPolicyName?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantId: pulumi.Input<string>;
    tieringPolicy?: pulumi.Input<string>;
    unit: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    volumeProtocol: pulumi.Input<string>;
}
