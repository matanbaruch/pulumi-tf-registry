// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SyntheticsScriptMonitor extends pulumi.CustomResource {
    /**
     * Get an existing SyntheticsScriptMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyntheticsScriptMonitorState, opts?: pulumi.CustomResourceOptions): SyntheticsScriptMonitor {
        return new SyntheticsScriptMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/syntheticsScriptMonitor:SyntheticsScriptMonitor';

    /**
     * Returns true if the given object is an instance of SyntheticsScriptMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyntheticsScriptMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyntheticsScriptMonitor.__pulumiType;
    }

    /**
     * ID of the newrelic account.
     */
    public readonly accountId!: pulumi.Output<number>;
    /**
     * The device orientation the user would like to represent. Valid values are LANDSCAPE, PORTRAIT, or NONE.
     */
    public readonly deviceOrientation!: pulumi.Output<string | undefined>;
    /**
     * The device type that a user can select. Valid values are MOBILE, TABLET, or NONE.
     */
    public readonly deviceType!: pulumi.Output<string | undefined>;
    /**
     * Capture a screenshot during job execution.
     */
    public readonly enableScreenshotOnFailureAndScript!: pulumi.Output<boolean | undefined>;
    /**
     * The unique entity identifier of the monitor in New Relic.
     */
    public /*out*/ readonly guid!: pulumi.Output<string>;
    public readonly locationPrivates!: pulumi.Output<outputs.SyntheticsScriptMonitorLocationPrivate[] | undefined>;
    /**
     * The public location(s) that the monitor will run jobs from.
     */
    public readonly locationsPublics!: pulumi.Output<string[] | undefined>;
    /**
     * The title of this monitor.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES,
     * EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.
     */
    public readonly period!: pulumi.Output<string>;
    /**
     * The interval in minutes at which this monitor should run.
     */
    public /*out*/ readonly periodInMinutes!: pulumi.Output<number>;
    /**
     * The runtime type that the monitor will run.
     */
    public readonly runtimeType!: pulumi.Output<string | undefined>;
    /**
     * The specific semver version of the runtime type.
     */
    public readonly runtimeTypeVersion!: pulumi.Output<string | undefined>;
    /**
     * The script that the monitor runs.
     */
    public readonly script!: pulumi.Output<string | undefined>;
    /**
     * The programing language that should execute the script.
     */
    public readonly scriptLanguage!: pulumi.Output<string | undefined>;
    /**
     * The monitor status (ENABLED or DISABLED).
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The tags that will be associated with the monitor.
     */
    public readonly tags!: pulumi.Output<outputs.SyntheticsScriptMonitorTag[] | undefined>;
    /**
     * The monitor type. Valid values are SCRIPT_BROWSER, and SCRIPT_API.
     */
    public readonly type!: pulumi.Output<string>;
    public readonly useUnsupportedLegacyRuntime!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SyntheticsScriptMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyntheticsScriptMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyntheticsScriptMonitorArgs | SyntheticsScriptMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyntheticsScriptMonitorState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["deviceOrientation"] = state ? state.deviceOrientation : undefined;
            resourceInputs["deviceType"] = state ? state.deviceType : undefined;
            resourceInputs["enableScreenshotOnFailureAndScript"] = state ? state.enableScreenshotOnFailureAndScript : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["locationPrivates"] = state ? state.locationPrivates : undefined;
            resourceInputs["locationsPublics"] = state ? state.locationsPublics : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodInMinutes"] = state ? state.periodInMinutes : undefined;
            resourceInputs["runtimeType"] = state ? state.runtimeType : undefined;
            resourceInputs["runtimeTypeVersion"] = state ? state.runtimeTypeVersion : undefined;
            resourceInputs["script"] = state ? state.script : undefined;
            resourceInputs["scriptLanguage"] = state ? state.scriptLanguage : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["useUnsupportedLegacyRuntime"] = state ? state.useUnsupportedLegacyRuntime : undefined;
        } else {
            const args = argsOrState as SyntheticsScriptMonitorArgs | undefined;
            if ((!args || args.period === undefined) && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["deviceOrientation"] = args ? args.deviceOrientation : undefined;
            resourceInputs["deviceType"] = args ? args.deviceType : undefined;
            resourceInputs["enableScreenshotOnFailureAndScript"] = args ? args.enableScreenshotOnFailureAndScript : undefined;
            resourceInputs["locationPrivates"] = args ? args.locationPrivates : undefined;
            resourceInputs["locationsPublics"] = args ? args.locationsPublics : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["runtimeType"] = args ? args.runtimeType : undefined;
            resourceInputs["runtimeTypeVersion"] = args ? args.runtimeTypeVersion : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["scriptLanguage"] = args ? args.scriptLanguage : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["useUnsupportedLegacyRuntime"] = args ? args.useUnsupportedLegacyRuntime : undefined;
            resourceInputs["guid"] = undefined /*out*/;
            resourceInputs["periodInMinutes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyntheticsScriptMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SyntheticsScriptMonitor resources.
 */
export interface SyntheticsScriptMonitorState {
    /**
     * ID of the newrelic account.
     */
    accountId?: pulumi.Input<number>;
    /**
     * The device orientation the user would like to represent. Valid values are LANDSCAPE, PORTRAIT, or NONE.
     */
    deviceOrientation?: pulumi.Input<string>;
    /**
     * The device type that a user can select. Valid values are MOBILE, TABLET, or NONE.
     */
    deviceType?: pulumi.Input<string>;
    /**
     * Capture a screenshot during job execution.
     */
    enableScreenshotOnFailureAndScript?: pulumi.Input<boolean>;
    /**
     * The unique entity identifier of the monitor in New Relic.
     */
    guid?: pulumi.Input<string>;
    locationPrivates?: pulumi.Input<pulumi.Input<inputs.SyntheticsScriptMonitorLocationPrivate>[]>;
    /**
     * The public location(s) that the monitor will run jobs from.
     */
    locationsPublics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of this monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES,
     * EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.
     */
    period?: pulumi.Input<string>;
    /**
     * The interval in minutes at which this monitor should run.
     */
    periodInMinutes?: pulumi.Input<number>;
    /**
     * The runtime type that the monitor will run.
     */
    runtimeType?: pulumi.Input<string>;
    /**
     * The specific semver version of the runtime type.
     */
    runtimeTypeVersion?: pulumi.Input<string>;
    /**
     * The script that the monitor runs.
     */
    script?: pulumi.Input<string>;
    /**
     * The programing language that should execute the script.
     */
    scriptLanguage?: pulumi.Input<string>;
    /**
     * The monitor status (ENABLED or DISABLED).
     */
    status?: pulumi.Input<string>;
    /**
     * The tags that will be associated with the monitor.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SyntheticsScriptMonitorTag>[]>;
    /**
     * The monitor type. Valid values are SCRIPT_BROWSER, and SCRIPT_API.
     */
    type?: pulumi.Input<string>;
    useUnsupportedLegacyRuntime?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SyntheticsScriptMonitor resource.
 */
export interface SyntheticsScriptMonitorArgs {
    /**
     * ID of the newrelic account.
     */
    accountId?: pulumi.Input<number>;
    /**
     * The device orientation the user would like to represent. Valid values are LANDSCAPE, PORTRAIT, or NONE.
     */
    deviceOrientation?: pulumi.Input<string>;
    /**
     * The device type that a user can select. Valid values are MOBILE, TABLET, or NONE.
     */
    deviceType?: pulumi.Input<string>;
    /**
     * Capture a screenshot during job execution.
     */
    enableScreenshotOnFailureAndScript?: pulumi.Input<boolean>;
    locationPrivates?: pulumi.Input<pulumi.Input<inputs.SyntheticsScriptMonitorLocationPrivate>[]>;
    /**
     * The public location(s) that the monitor will run jobs from.
     */
    locationsPublics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of this monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES,
     * EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.
     */
    period: pulumi.Input<string>;
    /**
     * The runtime type that the monitor will run.
     */
    runtimeType?: pulumi.Input<string>;
    /**
     * The specific semver version of the runtime type.
     */
    runtimeTypeVersion?: pulumi.Input<string>;
    /**
     * The script that the monitor runs.
     */
    script?: pulumi.Input<string>;
    /**
     * The programing language that should execute the script.
     */
    scriptLanguage?: pulumi.Input<string>;
    /**
     * The monitor status (ENABLED or DISABLED).
     */
    status: pulumi.Input<string>;
    /**
     * The tags that will be associated with the monitor.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SyntheticsScriptMonitorTag>[]>;
    /**
     * The monitor type. Valid values are SCRIPT_BROWSER, and SCRIPT_API.
     */
    type: pulumi.Input<string>;
    useUnsupportedLegacyRuntime?: pulumi.Input<boolean>;
}
