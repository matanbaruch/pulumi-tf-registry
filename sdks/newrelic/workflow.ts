// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Workflow extends pulumi.CustomResource {
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkflowState, opts?: pulumi.CustomResourceOptions): Workflow {
        return new Workflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/workflow:Workflow';

    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workflow.__pulumiType;
    }

    /**
     * The account id of the workflow.
     */
    public readonly accountId!: pulumi.Output<number>;
    /**
     * Workflow's destination configuration.
     */
    public readonly destinations!: pulumi.Output<outputs.WorkflowDestination[]>;
    /**
     * Indicates whether the destinations are enabled.
     *
     * @deprecated Deprecated
     */
    public readonly destinationsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether the workflow is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enrichments can give additional context on alert notifications by adding NRQL query results to them.
     */
    public readonly enrichments!: pulumi.Output<outputs.WorkflowEnrichments | undefined>;
    /**
     * Indicates whether the enrichments are enabled.
     */
    public readonly enrichmentsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Workflow entity GUID
     */
    public /*out*/ readonly guid!: pulumi.Output<string>;
    public readonly issuesFilter!: pulumi.Output<outputs.WorkflowIssuesFilter>;
    /**
     * The last time notification was sent for this workflow.
     */
    public /*out*/ readonly lastRun!: pulumi.Output<string>;
    /**
     * The type of the muting rule handling. One of: (NOTIFY_ALL_ISSUES, DONT_NOTIFY_FULLY_MUTED_ISSUES,
     * DONT_NOTIFY_FULLY_OR_PARTIALLY_MUTED_ISSUES).
     */
    public readonly mutingRulesHandling!: pulumi.Output<string>;
    /**
     * (Required) The name of the workflow.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the workflow.
     */
    public /*out*/ readonly workflowId!: pulumi.Output<string>;

    /**
     * Create a Workflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkflowArgs | WorkflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkflowState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["destinations"] = state ? state.destinations : undefined;
            resourceInputs["destinationsEnabled"] = state ? state.destinationsEnabled : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["enrichments"] = state ? state.enrichments : undefined;
            resourceInputs["enrichmentsEnabled"] = state ? state.enrichmentsEnabled : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["issuesFilter"] = state ? state.issuesFilter : undefined;
            resourceInputs["lastRun"] = state ? state.lastRun : undefined;
            resourceInputs["mutingRulesHandling"] = state ? state.mutingRulesHandling : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["workflowId"] = state ? state.workflowId : undefined;
        } else {
            const args = argsOrState as WorkflowArgs | undefined;
            if ((!args || args.destinations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinations'");
            }
            if ((!args || args.issuesFilter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuesFilter'");
            }
            if ((!args || args.mutingRulesHandling === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mutingRulesHandling'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["destinations"] = args ? args.destinations : undefined;
            resourceInputs["destinationsEnabled"] = args ? args.destinationsEnabled : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["enrichments"] = args ? args.enrichments : undefined;
            resourceInputs["enrichmentsEnabled"] = args ? args.enrichmentsEnabled : undefined;
            resourceInputs["issuesFilter"] = args ? args.issuesFilter : undefined;
            resourceInputs["mutingRulesHandling"] = args ? args.mutingRulesHandling : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["guid"] = undefined /*out*/;
            resourceInputs["lastRun"] = undefined /*out*/;
            resourceInputs["workflowId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workflow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Workflow resources.
 */
export interface WorkflowState {
    /**
     * The account id of the workflow.
     */
    accountId?: pulumi.Input<number>;
    /**
     * Workflow's destination configuration.
     */
    destinations?: pulumi.Input<pulumi.Input<inputs.WorkflowDestination>[]>;
    /**
     * Indicates whether the destinations are enabled.
     *
     * @deprecated Deprecated
     */
    destinationsEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the workflow is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Enrichments can give additional context on alert notifications by adding NRQL query results to them.
     */
    enrichments?: pulumi.Input<inputs.WorkflowEnrichments>;
    /**
     * Indicates whether the enrichments are enabled.
     */
    enrichmentsEnabled?: pulumi.Input<boolean>;
    /**
     * Workflow entity GUID
     */
    guid?: pulumi.Input<string>;
    issuesFilter?: pulumi.Input<inputs.WorkflowIssuesFilter>;
    /**
     * The last time notification was sent for this workflow.
     */
    lastRun?: pulumi.Input<string>;
    /**
     * The type of the muting rule handling. One of: (NOTIFY_ALL_ISSUES, DONT_NOTIFY_FULLY_MUTED_ISSUES,
     * DONT_NOTIFY_FULLY_OR_PARTIALLY_MUTED_ISSUES).
     */
    mutingRulesHandling?: pulumi.Input<string>;
    /**
     * (Required) The name of the workflow.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the workflow.
     */
    workflowId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Workflow resource.
 */
export interface WorkflowArgs {
    /**
     * The account id of the workflow.
     */
    accountId?: pulumi.Input<number>;
    /**
     * Workflow's destination configuration.
     */
    destinations: pulumi.Input<pulumi.Input<inputs.WorkflowDestination>[]>;
    /**
     * Indicates whether the destinations are enabled.
     *
     * @deprecated Deprecated
     */
    destinationsEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the workflow is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Enrichments can give additional context on alert notifications by adding NRQL query results to them.
     */
    enrichments?: pulumi.Input<inputs.WorkflowEnrichments>;
    /**
     * Indicates whether the enrichments are enabled.
     */
    enrichmentsEnabled?: pulumi.Input<boolean>;
    issuesFilter: pulumi.Input<inputs.WorkflowIssuesFilter>;
    /**
     * The type of the muting rule handling. One of: (NOTIFY_ALL_ISSUES, DONT_NOTIFY_FULLY_MUTED_ISSUES,
     * DONT_NOTIFY_FULLY_OR_PARTIALLY_MUTED_ISSUES).
     */
    mutingRulesHandling: pulumi.Input<string>;
    /**
     * (Required) The name of the workflow.
     */
    name?: pulumi.Input<string>;
}
