// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEntity(args: GetEntityArgs, opts?: pulumi.InvokeOptions): Promise<GetEntityResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("newrelic:index/getEntity:getEntity", {
        "accountId": args.accountId,
        "domain": args.domain,
        "entityTags": args.entityTags,
        "id": args.id,
        "ignoreCase": args.ignoreCase,
        "ignoreNotFound": args.ignoreNotFound,
        "name": args.name,
        "tags": args.tags,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEntity.
 */
export interface GetEntityArgs {
    accountId?: number;
    domain?: string;
    entityTags?: string;
    id?: string;
    ignoreCase?: boolean;
    ignoreNotFound?: boolean;
    name: string;
    tags?: inputs.GetEntityTag[];
    type?: string;
}

/**
 * A collection of values returned by getEntity.
 */
export interface GetEntityResult {
    readonly accountId: number;
    readonly applicationId: number;
    readonly domain: string;
    readonly entityTags: string;
    readonly guid: string;
    readonly id: string;
    readonly ignoreCase?: boolean;
    readonly ignoreNotFound?: boolean;
    readonly name: string;
    readonly servingApmApplicationId: number;
    readonly tags?: outputs.GetEntityTag[];
    readonly type: string;
}
export function getEntityOutput(args: GetEntityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEntityResult> {
    return pulumi.output(args).apply((a: any) => getEntity(a, opts))
}

/**
 * A collection of arguments for invoking getEntity.
 */
export interface GetEntityOutputArgs {
    accountId?: pulumi.Input<number>;
    domain?: pulumi.Input<string>;
    entityTags?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ignoreCase?: pulumi.Input<boolean>;
    ignoreNotFound?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEntityTagArgs>[]>;
    type?: pulumi.Input<string>;
}
