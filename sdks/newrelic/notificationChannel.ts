// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NotificationChannel extends pulumi.CustomResource {
    /**
     * Get an existing NotificationChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationChannelState, opts?: pulumi.CustomResourceOptions): NotificationChannel {
        return new NotificationChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/notificationChannel:NotificationChannel';

    /**
     * Returns true if the given object is an instance of NotificationChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationChannel.__pulumiType;
    }

    /**
     * The account id of the channel.
     */
    public readonly accountId!: pulumi.Output<number>;
    /**
     * Indicates whether the channel is active.
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * (Required) The id of the destination.
     */
    public readonly destinationId!: pulumi.Output<string>;
    /**
     * (Required) The name of the channel.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (Required) The type of the channel product. One of: (DISCUSSIONS, ERROR_TRACKING, IINT).
     */
    public readonly product!: pulumi.Output<string>;
    /**
     * Notification channel property type.
     */
    public readonly properties!: pulumi.Output<outputs.NotificationChannelProperty[]>;
    /**
     * The status of the channel.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NotificationChannelTimeouts | undefined>;
    /**
     * (Required) The type of the channel. One of: (WEBHOOK, EMAIL, SERVICENOW_INCIDENTS, SERVICE_NOW_APP,
     * PAGERDUTY_ACCOUNT_INTEGRATION, PAGERDUTY_SERVICE_INTEGRATION, JIRA_CLASSIC, SLACK, SLACK_COLLABORATION, SLACK_LEGACY,
     * MOBILE_PUSH, EVENT_BRIDGE).
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a NotificationChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationChannelArgs | NotificationChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationChannelState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["destinationId"] = state ? state.destinationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["product"] = state ? state.product : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NotificationChannelArgs | undefined;
            if ((!args || args.destinationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationId'");
            }
            if ((!args || args.product === undefined) && !opts.urn) {
                throw new Error("Missing required property 'product'");
            }
            if ((!args || args.properties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["destinationId"] = args ? args.destinationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["product"] = args ? args.product : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationChannel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NotificationChannel resources.
 */
export interface NotificationChannelState {
    /**
     * The account id of the channel.
     */
    accountId?: pulumi.Input<number>;
    /**
     * Indicates whether the channel is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * (Required) The id of the destination.
     */
    destinationId?: pulumi.Input<string>;
    /**
     * (Required) The name of the channel.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) The type of the channel product. One of: (DISCUSSIONS, ERROR_TRACKING, IINT).
     */
    product?: pulumi.Input<string>;
    /**
     * Notification channel property type.
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NotificationChannelProperty>[]>;
    /**
     * The status of the channel.
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NotificationChannelTimeouts>;
    /**
     * (Required) The type of the channel. One of: (WEBHOOK, EMAIL, SERVICENOW_INCIDENTS, SERVICE_NOW_APP,
     * PAGERDUTY_ACCOUNT_INTEGRATION, PAGERDUTY_SERVICE_INTEGRATION, JIRA_CLASSIC, SLACK, SLACK_COLLABORATION, SLACK_LEGACY,
     * MOBILE_PUSH, EVENT_BRIDGE).
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotificationChannel resource.
 */
export interface NotificationChannelArgs {
    /**
     * The account id of the channel.
     */
    accountId?: pulumi.Input<number>;
    /**
     * Indicates whether the channel is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * (Required) The id of the destination.
     */
    destinationId: pulumi.Input<string>;
    /**
     * (Required) The name of the channel.
     */
    name?: pulumi.Input<string>;
    /**
     * (Required) The type of the channel product. One of: (DISCUSSIONS, ERROR_TRACKING, IINT).
     */
    product: pulumi.Input<string>;
    /**
     * Notification channel property type.
     */
    properties: pulumi.Input<pulumi.Input<inputs.NotificationChannelProperty>[]>;
    timeouts?: pulumi.Input<inputs.NotificationChannelTimeouts>;
    /**
     * (Required) The type of the channel. One of: (WEBHOOK, EMAIL, SERVICENOW_INCIDENTS, SERVICE_NOW_APP,
     * PAGERDUTY_ACCOUNT_INTEGRATION, PAGERDUTY_SERVICE_INTEGRATION, JIRA_CLASSIC, SLACK, SLACK_COLLABORATION, SLACK_LEGACY,
     * MOBILE_PUSH, EVENT_BRIDGE).
     */
    type: pulumi.Input<string>;
}
