// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlertPolicyChannel extends pulumi.CustomResource {
    /**
     * Get an existing AlertPolicyChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertPolicyChannelState, opts?: pulumi.CustomResourceOptions): AlertPolicyChannel {
        return new AlertPolicyChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/alertPolicyChannel:AlertPolicyChannel';

    /**
     * Returns true if the given object is an instance of AlertPolicyChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertPolicyChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertPolicyChannel.__pulumiType;
    }

    /**
     * The New Relic account ID where you want to link the channel to.
     */
    public readonly accountId!: pulumi.Output<number>;
    public readonly channelIds!: pulumi.Output<number[]>;
    /**
     * The ID of the policy.
     */
    public readonly policyId!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.AlertPolicyChannelTimeouts | undefined>;

    /**
     * Create a AlertPolicyChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertPolicyChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertPolicyChannelArgs | AlertPolicyChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertPolicyChannelState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["channelIds"] = state ? state.channelIds : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AlertPolicyChannelArgs | undefined;
            if ((!args || args.channelIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelIds'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["channelIds"] = args ? args.channelIds : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertPolicyChannel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlertPolicyChannel resources.
 */
export interface AlertPolicyChannelState {
    /**
     * The New Relic account ID where you want to link the channel to.
     */
    accountId?: pulumi.Input<number>;
    channelIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The ID of the policy.
     */
    policyId?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.AlertPolicyChannelTimeouts>;
}

/**
 * The set of arguments for constructing a AlertPolicyChannel resource.
 */
export interface AlertPolicyChannelArgs {
    /**
     * The New Relic account ID where you want to link the channel to.
     */
    accountId?: pulumi.Input<number>;
    channelIds: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The ID of the policy.
     */
    policyId: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.AlertPolicyChannelTimeouts>;
}
