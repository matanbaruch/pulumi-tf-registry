// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountManagementArgs, AccountManagementState } from "./accountManagement";
export type AccountManagement = import("./accountManagement").AccountManagement;
export const AccountManagement: typeof import("./accountManagement").AccountManagement = null as any;
utilities.lazyLoad(exports, ["AccountManagement"], () => require("./accountManagement"));

export { AlertChannelArgs, AlertChannelState } from "./alertChannel";
export type AlertChannel = import("./alertChannel").AlertChannel;
export const AlertChannel: typeof import("./alertChannel").AlertChannel = null as any;
utilities.lazyLoad(exports, ["AlertChannel"], () => require("./alertChannel"));

export { AlertConditionArgs, AlertConditionState } from "./alertCondition";
export type AlertCondition = import("./alertCondition").AlertCondition;
export const AlertCondition: typeof import("./alertCondition").AlertCondition = null as any;
utilities.lazyLoad(exports, ["AlertCondition"], () => require("./alertCondition"));

export { AlertMutingRuleArgs, AlertMutingRuleState } from "./alertMutingRule";
export type AlertMutingRule = import("./alertMutingRule").AlertMutingRule;
export const AlertMutingRule: typeof import("./alertMutingRule").AlertMutingRule = null as any;
utilities.lazyLoad(exports, ["AlertMutingRule"], () => require("./alertMutingRule"));

export { AlertPolicyArgs, AlertPolicyState } from "./alertPolicy";
export type AlertPolicy = import("./alertPolicy").AlertPolicy;
export const AlertPolicy: typeof import("./alertPolicy").AlertPolicy = null as any;
utilities.lazyLoad(exports, ["AlertPolicy"], () => require("./alertPolicy"));

export { AlertPolicyChannelArgs, AlertPolicyChannelState } from "./alertPolicyChannel";
export type AlertPolicyChannel = import("./alertPolicyChannel").AlertPolicyChannel;
export const AlertPolicyChannel: typeof import("./alertPolicyChannel").AlertPolicyChannel = null as any;
utilities.lazyLoad(exports, ["AlertPolicyChannel"], () => require("./alertPolicyChannel"));

export { ApiAccessKeyArgs, ApiAccessKeyState } from "./apiAccessKey";
export type ApiAccessKey = import("./apiAccessKey").ApiAccessKey;
export const ApiAccessKey: typeof import("./apiAccessKey").ApiAccessKey = null as any;
utilities.lazyLoad(exports, ["ApiAccessKey"], () => require("./apiAccessKey"));

export { ApplicationSettingsArgs, ApplicationSettingsState } from "./applicationSettings";
export type ApplicationSettings = import("./applicationSettings").ApplicationSettings;
export const ApplicationSettings: typeof import("./applicationSettings").ApplicationSettings = null as any;
utilities.lazyLoad(exports, ["ApplicationSettings"], () => require("./applicationSettings"));

export { BrowserApplicationArgs, BrowserApplicationState } from "./browserApplication";
export type BrowserApplication = import("./browserApplication").BrowserApplication;
export const BrowserApplication: typeof import("./browserApplication").BrowserApplication = null as any;
utilities.lazyLoad(exports, ["BrowserApplication"], () => require("./browserApplication"));

export { CloudAwsGovcloudIntegrationsArgs, CloudAwsGovcloudIntegrationsState } from "./cloudAwsGovcloudIntegrations";
export type CloudAwsGovcloudIntegrations = import("./cloudAwsGovcloudIntegrations").CloudAwsGovcloudIntegrations;
export const CloudAwsGovcloudIntegrations: typeof import("./cloudAwsGovcloudIntegrations").CloudAwsGovcloudIntegrations = null as any;
utilities.lazyLoad(exports, ["CloudAwsGovcloudIntegrations"], () => require("./cloudAwsGovcloudIntegrations"));

export { CloudAwsGovcloudLinkAccountArgs, CloudAwsGovcloudLinkAccountState } from "./cloudAwsGovcloudLinkAccount";
export type CloudAwsGovcloudLinkAccount = import("./cloudAwsGovcloudLinkAccount").CloudAwsGovcloudLinkAccount;
export const CloudAwsGovcloudLinkAccount: typeof import("./cloudAwsGovcloudLinkAccount").CloudAwsGovcloudLinkAccount = null as any;
utilities.lazyLoad(exports, ["CloudAwsGovcloudLinkAccount"], () => require("./cloudAwsGovcloudLinkAccount"));

export { CloudAwsIntegrationsArgs, CloudAwsIntegrationsState } from "./cloudAwsIntegrations";
export type CloudAwsIntegrations = import("./cloudAwsIntegrations").CloudAwsIntegrations;
export const CloudAwsIntegrations: typeof import("./cloudAwsIntegrations").CloudAwsIntegrations = null as any;
utilities.lazyLoad(exports, ["CloudAwsIntegrations"], () => require("./cloudAwsIntegrations"));

export { CloudAwsLinkAccountArgs, CloudAwsLinkAccountState } from "./cloudAwsLinkAccount";
export type CloudAwsLinkAccount = import("./cloudAwsLinkAccount").CloudAwsLinkAccount;
export const CloudAwsLinkAccount: typeof import("./cloudAwsLinkAccount").CloudAwsLinkAccount = null as any;
utilities.lazyLoad(exports, ["CloudAwsLinkAccount"], () => require("./cloudAwsLinkAccount"));

export { CloudAzureIntegrationsArgs, CloudAzureIntegrationsState } from "./cloudAzureIntegrations";
export type CloudAzureIntegrations = import("./cloudAzureIntegrations").CloudAzureIntegrations;
export const CloudAzureIntegrations: typeof import("./cloudAzureIntegrations").CloudAzureIntegrations = null as any;
utilities.lazyLoad(exports, ["CloudAzureIntegrations"], () => require("./cloudAzureIntegrations"));

export { CloudAzureLinkAccountArgs, CloudAzureLinkAccountState } from "./cloudAzureLinkAccount";
export type CloudAzureLinkAccount = import("./cloudAzureLinkAccount").CloudAzureLinkAccount;
export const CloudAzureLinkAccount: typeof import("./cloudAzureLinkAccount").CloudAzureLinkAccount = null as any;
utilities.lazyLoad(exports, ["CloudAzureLinkAccount"], () => require("./cloudAzureLinkAccount"));

export { CloudGcpIntegrationsArgs, CloudGcpIntegrationsState } from "./cloudGcpIntegrations";
export type CloudGcpIntegrations = import("./cloudGcpIntegrations").CloudGcpIntegrations;
export const CloudGcpIntegrations: typeof import("./cloudGcpIntegrations").CloudGcpIntegrations = null as any;
utilities.lazyLoad(exports, ["CloudGcpIntegrations"], () => require("./cloudGcpIntegrations"));

export { CloudGcpLinkAccountArgs, CloudGcpLinkAccountState } from "./cloudGcpLinkAccount";
export type CloudGcpLinkAccount = import("./cloudGcpLinkAccount").CloudGcpLinkAccount;
export const CloudGcpLinkAccount: typeof import("./cloudGcpLinkAccount").CloudGcpLinkAccount = null as any;
utilities.lazyLoad(exports, ["CloudGcpLinkAccount"], () => require("./cloudGcpLinkAccount"));

export { DataPartitionRuleArgs, DataPartitionRuleState } from "./dataPartitionRule";
export type DataPartitionRule = import("./dataPartitionRule").DataPartitionRule;
export const DataPartitionRule: typeof import("./dataPartitionRule").DataPartitionRule = null as any;
utilities.lazyLoad(exports, ["DataPartitionRule"], () => require("./dataPartitionRule"));

export { EntityTagsArgs, EntityTagsState } from "./entityTags";
export type EntityTags = import("./entityTags").EntityTags;
export const EntityTags: typeof import("./entityTags").EntityTags = null as any;
utilities.lazyLoad(exports, ["EntityTags"], () => require("./entityTags"));

export { EventsToMetricsRuleArgs, EventsToMetricsRuleState } from "./eventsToMetricsRule";
export type EventsToMetricsRule = import("./eventsToMetricsRule").EventsToMetricsRule;
export const EventsToMetricsRule: typeof import("./eventsToMetricsRule").EventsToMetricsRule = null as any;
utilities.lazyLoad(exports, ["EventsToMetricsRule"], () => require("./eventsToMetricsRule"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAlertChannelArgs, GetAlertChannelResult, GetAlertChannelOutputArgs } from "./getAlertChannel";
export const getAlertChannel: typeof import("./getAlertChannel").getAlertChannel = null as any;
export const getAlertChannelOutput: typeof import("./getAlertChannel").getAlertChannelOutput = null as any;
utilities.lazyLoad(exports, ["getAlertChannel","getAlertChannelOutput"], () => require("./getAlertChannel"));

export { GetAlertPolicyArgs, GetAlertPolicyResult, GetAlertPolicyOutputArgs } from "./getAlertPolicy";
export const getAlertPolicy: typeof import("./getAlertPolicy").getAlertPolicy = null as any;
export const getAlertPolicyOutput: typeof import("./getAlertPolicy").getAlertPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAlertPolicy","getAlertPolicyOutput"], () => require("./getAlertPolicy"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetAuthenticationDomainArgs, GetAuthenticationDomainResult, GetAuthenticationDomainOutputArgs } from "./getAuthenticationDomain";
export const getAuthenticationDomain: typeof import("./getAuthenticationDomain").getAuthenticationDomain = null as any;
export const getAuthenticationDomainOutput: typeof import("./getAuthenticationDomain").getAuthenticationDomainOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationDomain","getAuthenticationDomainOutput"], () => require("./getAuthenticationDomain"));

export { GetCloudAccountArgs, GetCloudAccountResult, GetCloudAccountOutputArgs } from "./getCloudAccount";
export const getCloudAccount: typeof import("./getCloudAccount").getCloudAccount = null as any;
export const getCloudAccountOutput: typeof import("./getCloudAccount").getCloudAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccount","getCloudAccountOutput"], () => require("./getCloudAccount"));

export { GetEntityArgs, GetEntityResult, GetEntityOutputArgs } from "./getEntity";
export const getEntity: typeof import("./getEntity").getEntity = null as any;
export const getEntityOutput: typeof import("./getEntity").getEntityOutput = null as any;
utilities.lazyLoad(exports, ["getEntity","getEntityOutput"], () => require("./getEntity"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetKeyTransactionArgs, GetKeyTransactionResult, GetKeyTransactionOutputArgs } from "./getKeyTransaction";
export const getKeyTransaction: typeof import("./getKeyTransaction").getKeyTransaction = null as any;
export const getKeyTransactionOutput: typeof import("./getKeyTransaction").getKeyTransactionOutput = null as any;
utilities.lazyLoad(exports, ["getKeyTransaction","getKeyTransactionOutput"], () => require("./getKeyTransaction"));

export { GetNotificationDestinationArgs, GetNotificationDestinationResult, GetNotificationDestinationOutputArgs } from "./getNotificationDestination";
export const getNotificationDestination: typeof import("./getNotificationDestination").getNotificationDestination = null as any;
export const getNotificationDestinationOutput: typeof import("./getNotificationDestination").getNotificationDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getNotificationDestination","getNotificationDestinationOutput"], () => require("./getNotificationDestination"));

export { GetObfuscationExpressionArgs, GetObfuscationExpressionResult, GetObfuscationExpressionOutputArgs } from "./getObfuscationExpression";
export const getObfuscationExpression: typeof import("./getObfuscationExpression").getObfuscationExpression = null as any;
export const getObfuscationExpressionOutput: typeof import("./getObfuscationExpression").getObfuscationExpressionOutput = null as any;
utilities.lazyLoad(exports, ["getObfuscationExpression","getObfuscationExpressionOutput"], () => require("./getObfuscationExpression"));

export { GetServiceLevelAlertHelperArgs, GetServiceLevelAlertHelperResult, GetServiceLevelAlertHelperOutputArgs } from "./getServiceLevelAlertHelper";
export const getServiceLevelAlertHelper: typeof import("./getServiceLevelAlertHelper").getServiceLevelAlertHelper = null as any;
export const getServiceLevelAlertHelperOutput: typeof import("./getServiceLevelAlertHelper").getServiceLevelAlertHelperOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLevelAlertHelper","getServiceLevelAlertHelperOutput"], () => require("./getServiceLevelAlertHelper"));

export { GetSyntheticsPrivateLocationArgs, GetSyntheticsPrivateLocationResult, GetSyntheticsPrivateLocationOutputArgs } from "./getSyntheticsPrivateLocation";
export const getSyntheticsPrivateLocation: typeof import("./getSyntheticsPrivateLocation").getSyntheticsPrivateLocation = null as any;
export const getSyntheticsPrivateLocationOutput: typeof import("./getSyntheticsPrivateLocation").getSyntheticsPrivateLocationOutput = null as any;
utilities.lazyLoad(exports, ["getSyntheticsPrivateLocation","getSyntheticsPrivateLocationOutput"], () => require("./getSyntheticsPrivateLocation"));

export { GetSyntheticsSecureCredentialArgs, GetSyntheticsSecureCredentialResult, GetSyntheticsSecureCredentialOutputArgs } from "./getSyntheticsSecureCredential";
export const getSyntheticsSecureCredential: typeof import("./getSyntheticsSecureCredential").getSyntheticsSecureCredential = null as any;
export const getSyntheticsSecureCredentialOutput: typeof import("./getSyntheticsSecureCredential").getSyntheticsSecureCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getSyntheticsSecureCredential","getSyntheticsSecureCredentialOutput"], () => require("./getSyntheticsSecureCredential"));

export { GetTestGrokPatternArgs, GetTestGrokPatternResult, GetTestGrokPatternOutputArgs } from "./getTestGrokPattern";
export const getTestGrokPattern: typeof import("./getTestGrokPattern").getTestGrokPattern = null as any;
export const getTestGrokPatternOutput: typeof import("./getTestGrokPattern").getTestGrokPatternOutput = null as any;
utilities.lazyLoad(exports, ["getTestGrokPattern","getTestGrokPatternOutput"], () => require("./getTestGrokPattern"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { InfraAlertConditionArgs, InfraAlertConditionState } from "./infraAlertCondition";
export type InfraAlertCondition = import("./infraAlertCondition").InfraAlertCondition;
export const InfraAlertCondition: typeof import("./infraAlertCondition").InfraAlertCondition = null as any;
utilities.lazyLoad(exports, ["InfraAlertCondition"], () => require("./infraAlertCondition"));

export { InsightsEventArgs, InsightsEventState } from "./insightsEvent";
export type InsightsEvent = import("./insightsEvent").InsightsEvent;
export const InsightsEvent: typeof import("./insightsEvent").InsightsEvent = null as any;
utilities.lazyLoad(exports, ["InsightsEvent"], () => require("./insightsEvent"));

export { LogParsingRuleArgs, LogParsingRuleState } from "./logParsingRule";
export type LogParsingRule = import("./logParsingRule").LogParsingRule;
export const LogParsingRule: typeof import("./logParsingRule").LogParsingRule = null as any;
utilities.lazyLoad(exports, ["LogParsingRule"], () => require("./logParsingRule"));

export { MonitorDowntimeArgs, MonitorDowntimeState } from "./monitorDowntime";
export type MonitorDowntime = import("./monitorDowntime").MonitorDowntime;
export const MonitorDowntime: typeof import("./monitorDowntime").MonitorDowntime = null as any;
utilities.lazyLoad(exports, ["MonitorDowntime"], () => require("./monitorDowntime"));

export { NotificationChannelArgs, NotificationChannelState } from "./notificationChannel";
export type NotificationChannel = import("./notificationChannel").NotificationChannel;
export const NotificationChannel: typeof import("./notificationChannel").NotificationChannel = null as any;
utilities.lazyLoad(exports, ["NotificationChannel"], () => require("./notificationChannel"));

export { NotificationDestinationArgs, NotificationDestinationState } from "./notificationDestination";
export type NotificationDestination = import("./notificationDestination").NotificationDestination;
export const NotificationDestination: typeof import("./notificationDestination").NotificationDestination = null as any;
utilities.lazyLoad(exports, ["NotificationDestination"], () => require("./notificationDestination"));

export { NrqlAlertConditionArgs, NrqlAlertConditionState } from "./nrqlAlertCondition";
export type NrqlAlertCondition = import("./nrqlAlertCondition").NrqlAlertCondition;
export const NrqlAlertCondition: typeof import("./nrqlAlertCondition").NrqlAlertCondition = null as any;
utilities.lazyLoad(exports, ["NrqlAlertCondition"], () => require("./nrqlAlertCondition"));

export { NrqlDropRuleArgs, NrqlDropRuleState } from "./nrqlDropRule";
export type NrqlDropRule = import("./nrqlDropRule").NrqlDropRule;
export const NrqlDropRule: typeof import("./nrqlDropRule").NrqlDropRule = null as any;
utilities.lazyLoad(exports, ["NrqlDropRule"], () => require("./nrqlDropRule"));

export { ObfuscationExpressionArgs, ObfuscationExpressionState } from "./obfuscationExpression";
export type ObfuscationExpression = import("./obfuscationExpression").ObfuscationExpression;
export const ObfuscationExpression: typeof import("./obfuscationExpression").ObfuscationExpression = null as any;
utilities.lazyLoad(exports, ["ObfuscationExpression"], () => require("./obfuscationExpression"));

export { ObfuscationRuleArgs, ObfuscationRuleState } from "./obfuscationRule";
export type ObfuscationRule = import("./obfuscationRule").ObfuscationRule;
export const ObfuscationRule: typeof import("./obfuscationRule").ObfuscationRule = null as any;
utilities.lazyLoad(exports, ["ObfuscationRule"], () => require("./obfuscationRule"));

export { OneDashboardArgs, OneDashboardState } from "./oneDashboard";
export type OneDashboard = import("./oneDashboard").OneDashboard;
export const OneDashboard: typeof import("./oneDashboard").OneDashboard = null as any;
utilities.lazyLoad(exports, ["OneDashboard"], () => require("./oneDashboard"));

export { OneDashboardJsonArgs, OneDashboardJsonState } from "./oneDashboardJson";
export type OneDashboardJson = import("./oneDashboardJson").OneDashboardJson;
export const OneDashboardJson: typeof import("./oneDashboardJson").OneDashboardJson = null as any;
utilities.lazyLoad(exports, ["OneDashboardJson"], () => require("./oneDashboardJson"));

export { OneDashboardRawArgs, OneDashboardRawState } from "./oneDashboardRaw";
export type OneDashboardRaw = import("./oneDashboardRaw").OneDashboardRaw;
export const OneDashboardRaw: typeof import("./oneDashboardRaw").OneDashboardRaw = null as any;
utilities.lazyLoad(exports, ["OneDashboardRaw"], () => require("./oneDashboardRaw"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServiceLevelArgs, ServiceLevelState } from "./serviceLevel";
export type ServiceLevel = import("./serviceLevel").ServiceLevel;
export const ServiceLevel: typeof import("./serviceLevel").ServiceLevel = null as any;
utilities.lazyLoad(exports, ["ServiceLevel"], () => require("./serviceLevel"));

export { SyntheticsAlertConditionArgs, SyntheticsAlertConditionState } from "./syntheticsAlertCondition";
export type SyntheticsAlertCondition = import("./syntheticsAlertCondition").SyntheticsAlertCondition;
export const SyntheticsAlertCondition: typeof import("./syntheticsAlertCondition").SyntheticsAlertCondition = null as any;
utilities.lazyLoad(exports, ["SyntheticsAlertCondition"], () => require("./syntheticsAlertCondition"));

export { SyntheticsBrokenLinksMonitorArgs, SyntheticsBrokenLinksMonitorState } from "./syntheticsBrokenLinksMonitor";
export type SyntheticsBrokenLinksMonitor = import("./syntheticsBrokenLinksMonitor").SyntheticsBrokenLinksMonitor;
export const SyntheticsBrokenLinksMonitor: typeof import("./syntheticsBrokenLinksMonitor").SyntheticsBrokenLinksMonitor = null as any;
utilities.lazyLoad(exports, ["SyntheticsBrokenLinksMonitor"], () => require("./syntheticsBrokenLinksMonitor"));

export { SyntheticsCertCheckMonitorArgs, SyntheticsCertCheckMonitorState } from "./syntheticsCertCheckMonitor";
export type SyntheticsCertCheckMonitor = import("./syntheticsCertCheckMonitor").SyntheticsCertCheckMonitor;
export const SyntheticsCertCheckMonitor: typeof import("./syntheticsCertCheckMonitor").SyntheticsCertCheckMonitor = null as any;
utilities.lazyLoad(exports, ["SyntheticsCertCheckMonitor"], () => require("./syntheticsCertCheckMonitor"));

export { SyntheticsMonitorArgs, SyntheticsMonitorState } from "./syntheticsMonitor";
export type SyntheticsMonitor = import("./syntheticsMonitor").SyntheticsMonitor;
export const SyntheticsMonitor: typeof import("./syntheticsMonitor").SyntheticsMonitor = null as any;
utilities.lazyLoad(exports, ["SyntheticsMonitor"], () => require("./syntheticsMonitor"));

export { SyntheticsMultilocationAlertConditionArgs, SyntheticsMultilocationAlertConditionState } from "./syntheticsMultilocationAlertCondition";
export type SyntheticsMultilocationAlertCondition = import("./syntheticsMultilocationAlertCondition").SyntheticsMultilocationAlertCondition;
export const SyntheticsMultilocationAlertCondition: typeof import("./syntheticsMultilocationAlertCondition").SyntheticsMultilocationAlertCondition = null as any;
utilities.lazyLoad(exports, ["SyntheticsMultilocationAlertCondition"], () => require("./syntheticsMultilocationAlertCondition"));

export { SyntheticsPrivateLocationArgs, SyntheticsPrivateLocationState } from "./syntheticsPrivateLocation";
export type SyntheticsPrivateLocation = import("./syntheticsPrivateLocation").SyntheticsPrivateLocation;
export const SyntheticsPrivateLocation: typeof import("./syntheticsPrivateLocation").SyntheticsPrivateLocation = null as any;
utilities.lazyLoad(exports, ["SyntheticsPrivateLocation"], () => require("./syntheticsPrivateLocation"));

export { SyntheticsScriptMonitorArgs, SyntheticsScriptMonitorState } from "./syntheticsScriptMonitor";
export type SyntheticsScriptMonitor = import("./syntheticsScriptMonitor").SyntheticsScriptMonitor;
export const SyntheticsScriptMonitor: typeof import("./syntheticsScriptMonitor").SyntheticsScriptMonitor = null as any;
utilities.lazyLoad(exports, ["SyntheticsScriptMonitor"], () => require("./syntheticsScriptMonitor"));

export { SyntheticsSecureCredentialArgs, SyntheticsSecureCredentialState } from "./syntheticsSecureCredential";
export type SyntheticsSecureCredential = import("./syntheticsSecureCredential").SyntheticsSecureCredential;
export const SyntheticsSecureCredential: typeof import("./syntheticsSecureCredential").SyntheticsSecureCredential = null as any;
utilities.lazyLoad(exports, ["SyntheticsSecureCredential"], () => require("./syntheticsSecureCredential"));

export { SyntheticsStepMonitorArgs, SyntheticsStepMonitorState } from "./syntheticsStepMonitor";
export type SyntheticsStepMonitor = import("./syntheticsStepMonitor").SyntheticsStepMonitor;
export const SyntheticsStepMonitor: typeof import("./syntheticsStepMonitor").SyntheticsStepMonitor = null as any;
utilities.lazyLoad(exports, ["SyntheticsStepMonitor"], () => require("./syntheticsStepMonitor"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { WorkflowArgs, WorkflowState } from "./workflow";
export type Workflow = import("./workflow").Workflow;
export const Workflow: typeof import("./workflow").Workflow = null as any;
utilities.lazyLoad(exports, ["Workflow"], () => require("./workflow"));

export { WorkloadArgs, WorkloadState } from "./workload";
export type Workload = import("./workload").Workload;
export const Workload: typeof import("./workload").Workload = null as any;
utilities.lazyLoad(exports, ["Workload"], () => require("./workload"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "newrelic:index/accountManagement:AccountManagement":
                return new AccountManagement(name, <any>undefined, { urn })
            case "newrelic:index/alertChannel:AlertChannel":
                return new AlertChannel(name, <any>undefined, { urn })
            case "newrelic:index/alertCondition:AlertCondition":
                return new AlertCondition(name, <any>undefined, { urn })
            case "newrelic:index/alertMutingRule:AlertMutingRule":
                return new AlertMutingRule(name, <any>undefined, { urn })
            case "newrelic:index/alertPolicy:AlertPolicy":
                return new AlertPolicy(name, <any>undefined, { urn })
            case "newrelic:index/alertPolicyChannel:AlertPolicyChannel":
                return new AlertPolicyChannel(name, <any>undefined, { urn })
            case "newrelic:index/apiAccessKey:ApiAccessKey":
                return new ApiAccessKey(name, <any>undefined, { urn })
            case "newrelic:index/applicationSettings:ApplicationSettings":
                return new ApplicationSettings(name, <any>undefined, { urn })
            case "newrelic:index/browserApplication:BrowserApplication":
                return new BrowserApplication(name, <any>undefined, { urn })
            case "newrelic:index/cloudAwsGovcloudIntegrations:CloudAwsGovcloudIntegrations":
                return new CloudAwsGovcloudIntegrations(name, <any>undefined, { urn })
            case "newrelic:index/cloudAwsGovcloudLinkAccount:CloudAwsGovcloudLinkAccount":
                return new CloudAwsGovcloudLinkAccount(name, <any>undefined, { urn })
            case "newrelic:index/cloudAwsIntegrations:CloudAwsIntegrations":
                return new CloudAwsIntegrations(name, <any>undefined, { urn })
            case "newrelic:index/cloudAwsLinkAccount:CloudAwsLinkAccount":
                return new CloudAwsLinkAccount(name, <any>undefined, { urn })
            case "newrelic:index/cloudAzureIntegrations:CloudAzureIntegrations":
                return new CloudAzureIntegrations(name, <any>undefined, { urn })
            case "newrelic:index/cloudAzureLinkAccount:CloudAzureLinkAccount":
                return new CloudAzureLinkAccount(name, <any>undefined, { urn })
            case "newrelic:index/cloudGcpIntegrations:CloudGcpIntegrations":
                return new CloudGcpIntegrations(name, <any>undefined, { urn })
            case "newrelic:index/cloudGcpLinkAccount:CloudGcpLinkAccount":
                return new CloudGcpLinkAccount(name, <any>undefined, { urn })
            case "newrelic:index/dataPartitionRule:DataPartitionRule":
                return new DataPartitionRule(name, <any>undefined, { urn })
            case "newrelic:index/entityTags:EntityTags":
                return new EntityTags(name, <any>undefined, { urn })
            case "newrelic:index/eventsToMetricsRule:EventsToMetricsRule":
                return new EventsToMetricsRule(name, <any>undefined, { urn })
            case "newrelic:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "newrelic:index/infraAlertCondition:InfraAlertCondition":
                return new InfraAlertCondition(name, <any>undefined, { urn })
            case "newrelic:index/insightsEvent:InsightsEvent":
                return new InsightsEvent(name, <any>undefined, { urn })
            case "newrelic:index/logParsingRule:LogParsingRule":
                return new LogParsingRule(name, <any>undefined, { urn })
            case "newrelic:index/monitorDowntime:MonitorDowntime":
                return new MonitorDowntime(name, <any>undefined, { urn })
            case "newrelic:index/notificationChannel:NotificationChannel":
                return new NotificationChannel(name, <any>undefined, { urn })
            case "newrelic:index/notificationDestination:NotificationDestination":
                return new NotificationDestination(name, <any>undefined, { urn })
            case "newrelic:index/nrqlAlertCondition:NrqlAlertCondition":
                return new NrqlAlertCondition(name, <any>undefined, { urn })
            case "newrelic:index/nrqlDropRule:NrqlDropRule":
                return new NrqlDropRule(name, <any>undefined, { urn })
            case "newrelic:index/obfuscationExpression:ObfuscationExpression":
                return new ObfuscationExpression(name, <any>undefined, { urn })
            case "newrelic:index/obfuscationRule:ObfuscationRule":
                return new ObfuscationRule(name, <any>undefined, { urn })
            case "newrelic:index/oneDashboard:OneDashboard":
                return new OneDashboard(name, <any>undefined, { urn })
            case "newrelic:index/oneDashboardJson:OneDashboardJson":
                return new OneDashboardJson(name, <any>undefined, { urn })
            case "newrelic:index/oneDashboardRaw:OneDashboardRaw":
                return new OneDashboardRaw(name, <any>undefined, { urn })
            case "newrelic:index/serviceLevel:ServiceLevel":
                return new ServiceLevel(name, <any>undefined, { urn })
            case "newrelic:index/syntheticsAlertCondition:SyntheticsAlertCondition":
                return new SyntheticsAlertCondition(name, <any>undefined, { urn })
            case "newrelic:index/syntheticsBrokenLinksMonitor:SyntheticsBrokenLinksMonitor":
                return new SyntheticsBrokenLinksMonitor(name, <any>undefined, { urn })
            case "newrelic:index/syntheticsCertCheckMonitor:SyntheticsCertCheckMonitor":
                return new SyntheticsCertCheckMonitor(name, <any>undefined, { urn })
            case "newrelic:index/syntheticsMonitor:SyntheticsMonitor":
                return new SyntheticsMonitor(name, <any>undefined, { urn })
            case "newrelic:index/syntheticsMultilocationAlertCondition:SyntheticsMultilocationAlertCondition":
                return new SyntheticsMultilocationAlertCondition(name, <any>undefined, { urn })
            case "newrelic:index/syntheticsPrivateLocation:SyntheticsPrivateLocation":
                return new SyntheticsPrivateLocation(name, <any>undefined, { urn })
            case "newrelic:index/syntheticsScriptMonitor:SyntheticsScriptMonitor":
                return new SyntheticsScriptMonitor(name, <any>undefined, { urn })
            case "newrelic:index/syntheticsSecureCredential:SyntheticsSecureCredential":
                return new SyntheticsSecureCredential(name, <any>undefined, { urn })
            case "newrelic:index/syntheticsStepMonitor:SyntheticsStepMonitor":
                return new SyntheticsStepMonitor(name, <any>undefined, { urn })
            case "newrelic:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "newrelic:index/workflow:Workflow":
                return new Workflow(name, <any>undefined, { urn })
            case "newrelic:index/workload:Workload":
                return new Workload(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("newrelic", "index/accountManagement", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/alertChannel", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/alertCondition", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/alertMutingRule", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/alertPolicy", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/alertPolicyChannel", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/apiAccessKey", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/applicationSettings", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/browserApplication", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/cloudAwsGovcloudIntegrations", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/cloudAwsGovcloudLinkAccount", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/cloudAwsIntegrations", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/cloudAwsLinkAccount", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/cloudAzureIntegrations", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/cloudAzureLinkAccount", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/cloudGcpIntegrations", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/cloudGcpLinkAccount", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/dataPartitionRule", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/entityTags", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/eventsToMetricsRule", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/group", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/infraAlertCondition", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/insightsEvent", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/logParsingRule", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/monitorDowntime", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/notificationChannel", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/notificationDestination", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/nrqlAlertCondition", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/nrqlDropRule", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/obfuscationExpression", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/obfuscationRule", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/oneDashboard", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/oneDashboardJson", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/oneDashboardRaw", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/serviceLevel", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/syntheticsAlertCondition", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/syntheticsBrokenLinksMonitor", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/syntheticsCertCheckMonitor", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/syntheticsMonitor", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/syntheticsMultilocationAlertCondition", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/syntheticsPrivateLocation", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/syntheticsScriptMonitor", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/syntheticsSecureCredential", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/syntheticsStepMonitor", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/user", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/workflow", _module)
pulumi.runtime.registerResourceModule("newrelic", "index/workload", _module)
pulumi.runtime.registerResourcePackage("newrelic", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:newrelic") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
