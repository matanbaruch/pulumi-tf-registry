// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getServiceLevelAlertHelper(args: GetServiceLevelAlertHelperArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceLevelAlertHelperResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("newrelic:index/getServiceLevelAlertHelper:getServiceLevelAlertHelper", {
        "alertType": args.alertType,
        "customEvaluationPeriod": args.customEvaluationPeriod,
        "customToleratedBudgetConsumption": args.customToleratedBudgetConsumption,
        "id": args.id,
        "isBadEvents": args.isBadEvents,
        "sliGuid": args.sliGuid,
        "sloPeriod": args.sloPeriod,
        "sloTarget": args.sloTarget,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServiceLevelAlertHelper.
 */
export interface GetServiceLevelAlertHelperArgs {
    alertType: string;
    customEvaluationPeriod?: number;
    customToleratedBudgetConsumption?: number;
    id?: string;
    isBadEvents?: boolean;
    sliGuid: string;
    sloPeriod: number;
    sloTarget: number;
}

/**
 * A collection of values returned by getServiceLevelAlertHelper.
 */
export interface GetServiceLevelAlertHelperResult {
    readonly alertType: string;
    readonly customEvaluationPeriod?: number;
    readonly customToleratedBudgetConsumption?: number;
    readonly evaluationPeriod: number;
    readonly id: string;
    readonly isBadEvents?: boolean;
    readonly nrql: string;
    readonly sliGuid: string;
    readonly sloPeriod: number;
    readonly sloTarget: number;
    readonly threshold: number;
    readonly toleratedBudgetConsumption: number;
}
export function getServiceLevelAlertHelperOutput(args: GetServiceLevelAlertHelperOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceLevelAlertHelperResult> {
    return pulumi.output(args).apply((a: any) => getServiceLevelAlertHelper(a, opts))
}

/**
 * A collection of arguments for invoking getServiceLevelAlertHelper.
 */
export interface GetServiceLevelAlertHelperOutputArgs {
    alertType: pulumi.Input<string>;
    customEvaluationPeriod?: pulumi.Input<number>;
    customToleratedBudgetConsumption?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    isBadEvents?: pulumi.Input<boolean>;
    sliGuid: pulumi.Input<string>;
    sloPeriod: pulumi.Input<number>;
    sloTarget: pulumi.Input<number>;
}
