// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SyntheticsMultilocationAlertCondition extends pulumi.CustomResource {
    /**
     * Get an existing SyntheticsMultilocationAlertCondition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyntheticsMultilocationAlertConditionState, opts?: pulumi.CustomResourceOptions): SyntheticsMultilocationAlertCondition {
        return new SyntheticsMultilocationAlertCondition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/syntheticsMultilocationAlertCondition:SyntheticsMultilocationAlertCondition';

    /**
     * Returns true if the given object is an instance of SyntheticsMultilocationAlertCondition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyntheticsMultilocationAlertCondition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyntheticsMultilocationAlertCondition.__pulumiType;
    }

    /**
     * A condition term with priority set to critical.
     */
    public readonly critical!: pulumi.Output<outputs.SyntheticsMultilocationAlertConditionCritical>;
    /**
     * Set whether to enable the alert condition. Defaults to true.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The GUIDs of the Synthetics monitors to alert on.
     */
    public readonly entities!: pulumi.Output<string[]>;
    /**
     * The unique entity identifier of the condition in New Relic.
     */
    public /*out*/ readonly entityGuid!: pulumi.Output<string>;
    /**
     * The title of this condition.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the policy where this condition will be used.
     */
    public readonly policyId!: pulumi.Output<number>;
    /**
     * Runbook URL to display in notifications.
     */
    public readonly runbookUrl!: pulumi.Output<string | undefined>;
    /**
     * Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you
     * select. Must be in the range of 300 to 2592000 (inclusive)
     */
    public readonly violationTimeLimitSeconds!: pulumi.Output<number | undefined>;
    /**
     * A condition term with priority set to warning.
     */
    public readonly warning!: pulumi.Output<outputs.SyntheticsMultilocationAlertConditionWarning | undefined>;

    /**
     * Create a SyntheticsMultilocationAlertCondition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyntheticsMultilocationAlertConditionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyntheticsMultilocationAlertConditionArgs | SyntheticsMultilocationAlertConditionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyntheticsMultilocationAlertConditionState | undefined;
            resourceInputs["critical"] = state ? state.critical : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["entities"] = state ? state.entities : undefined;
            resourceInputs["entityGuid"] = state ? state.entityGuid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["runbookUrl"] = state ? state.runbookUrl : undefined;
            resourceInputs["violationTimeLimitSeconds"] = state ? state.violationTimeLimitSeconds : undefined;
            resourceInputs["warning"] = state ? state.warning : undefined;
        } else {
            const args = argsOrState as SyntheticsMultilocationAlertConditionArgs | undefined;
            if ((!args || args.critical === undefined) && !opts.urn) {
                throw new Error("Missing required property 'critical'");
            }
            if ((!args || args.entities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entities'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["critical"] = args ? args.critical : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["entities"] = args ? args.entities : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["runbookUrl"] = args ? args.runbookUrl : undefined;
            resourceInputs["violationTimeLimitSeconds"] = args ? args.violationTimeLimitSeconds : undefined;
            resourceInputs["warning"] = args ? args.warning : undefined;
            resourceInputs["entityGuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyntheticsMultilocationAlertCondition.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SyntheticsMultilocationAlertCondition resources.
 */
export interface SyntheticsMultilocationAlertConditionState {
    /**
     * A condition term with priority set to critical.
     */
    critical?: pulumi.Input<inputs.SyntheticsMultilocationAlertConditionCritical>;
    /**
     * Set whether to enable the alert condition. Defaults to true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The GUIDs of the Synthetics monitors to alert on.
     */
    entities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique entity identifier of the condition in New Relic.
     */
    entityGuid?: pulumi.Input<string>;
    /**
     * The title of this condition.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the policy where this condition will be used.
     */
    policyId?: pulumi.Input<number>;
    /**
     * Runbook URL to display in notifications.
     */
    runbookUrl?: pulumi.Input<string>;
    /**
     * Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you
     * select. Must be in the range of 300 to 2592000 (inclusive)
     */
    violationTimeLimitSeconds?: pulumi.Input<number>;
    /**
     * A condition term with priority set to warning.
     */
    warning?: pulumi.Input<inputs.SyntheticsMultilocationAlertConditionWarning>;
}

/**
 * The set of arguments for constructing a SyntheticsMultilocationAlertCondition resource.
 */
export interface SyntheticsMultilocationAlertConditionArgs {
    /**
     * A condition term with priority set to critical.
     */
    critical: pulumi.Input<inputs.SyntheticsMultilocationAlertConditionCritical>;
    /**
     * Set whether to enable the alert condition. Defaults to true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The GUIDs of the Synthetics monitors to alert on.
     */
    entities: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of this condition.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the policy where this condition will be used.
     */
    policyId: pulumi.Input<number>;
    /**
     * Runbook URL to display in notifications.
     */
    runbookUrl?: pulumi.Input<string>;
    /**
     * Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you
     * select. Must be in the range of 300 to 2592000 (inclusive)
     */
    violationTimeLimitSeconds?: pulumi.Input<number>;
    /**
     * A condition term with priority set to warning.
     */
    warning?: pulumi.Input<inputs.SyntheticsMultilocationAlertConditionWarning>;
}
