// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SyntheticsBrokenLinksMonitor extends pulumi.CustomResource {
    /**
     * Get an existing SyntheticsBrokenLinksMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyntheticsBrokenLinksMonitorState, opts?: pulumi.CustomResourceOptions): SyntheticsBrokenLinksMonitor {
        return new SyntheticsBrokenLinksMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/syntheticsBrokenLinksMonitor:SyntheticsBrokenLinksMonitor';

    /**
     * Returns true if the given object is an instance of SyntheticsBrokenLinksMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyntheticsBrokenLinksMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyntheticsBrokenLinksMonitor.__pulumiType;
    }

    /**
     * ID of the newrelic account.
     */
    public readonly accountId!: pulumi.Output<number>;
    /**
     * The unique entity identifier of the monitor in New Relic.
     */
    public /*out*/ readonly guid!: pulumi.Output<string>;
    /**
     * List private location GUIDs for which the monitor will run.
     */
    public readonly locationsPrivates!: pulumi.Output<string[] | undefined>;
    /**
     * Publicly available location names in which the monitor will run.
     */
    public readonly locationsPublics!: pulumi.Output<string[] | undefined>;
    /**
     * The title of this monitor.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES,
     * EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.
     */
    public readonly period!: pulumi.Output<string>;
    /**
     * The interval in minutes at which this monitor should run.
     */
    public /*out*/ readonly periodInMinutes!: pulumi.Output<number>;
    /**
     * The runtime type that the monitor will run.
     */
    public readonly runtimeType!: pulumi.Output<string | undefined>;
    /**
     * The specific semver version of the runtime type.
     */
    public readonly runtimeTypeVersion!: pulumi.Output<string | undefined>;
    /**
     * The monitor status (ENABLED or DISABLED).
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The tags that will be associated with the monitor.
     */
    public readonly tags!: pulumi.Output<outputs.SyntheticsBrokenLinksMonitorTag[] | undefined>;
    /**
     * The URI the monitor runs against.
     */
    public readonly uri!: pulumi.Output<string>;
    public readonly useUnsupportedLegacyRuntime!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SyntheticsBrokenLinksMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyntheticsBrokenLinksMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyntheticsBrokenLinksMonitorArgs | SyntheticsBrokenLinksMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyntheticsBrokenLinksMonitorState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["locationsPrivates"] = state ? state.locationsPrivates : undefined;
            resourceInputs["locationsPublics"] = state ? state.locationsPublics : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodInMinutes"] = state ? state.periodInMinutes : undefined;
            resourceInputs["runtimeType"] = state ? state.runtimeType : undefined;
            resourceInputs["runtimeTypeVersion"] = state ? state.runtimeTypeVersion : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
            resourceInputs["useUnsupportedLegacyRuntime"] = state ? state.useUnsupportedLegacyRuntime : undefined;
        } else {
            const args = argsOrState as SyntheticsBrokenLinksMonitorArgs | undefined;
            if ((!args || args.period === undefined) && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.uri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uri'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["locationsPrivates"] = args ? args.locationsPrivates : undefined;
            resourceInputs["locationsPublics"] = args ? args.locationsPublics : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["runtimeType"] = args ? args.runtimeType : undefined;
            resourceInputs["runtimeTypeVersion"] = args ? args.runtimeTypeVersion : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["uri"] = args ? args.uri : undefined;
            resourceInputs["useUnsupportedLegacyRuntime"] = args ? args.useUnsupportedLegacyRuntime : undefined;
            resourceInputs["guid"] = undefined /*out*/;
            resourceInputs["periodInMinutes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyntheticsBrokenLinksMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SyntheticsBrokenLinksMonitor resources.
 */
export interface SyntheticsBrokenLinksMonitorState {
    /**
     * ID of the newrelic account.
     */
    accountId?: pulumi.Input<number>;
    /**
     * The unique entity identifier of the monitor in New Relic.
     */
    guid?: pulumi.Input<string>;
    /**
     * List private location GUIDs for which the monitor will run.
     */
    locationsPrivates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Publicly available location names in which the monitor will run.
     */
    locationsPublics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of this monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES,
     * EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.
     */
    period?: pulumi.Input<string>;
    /**
     * The interval in minutes at which this monitor should run.
     */
    periodInMinutes?: pulumi.Input<number>;
    /**
     * The runtime type that the monitor will run.
     */
    runtimeType?: pulumi.Input<string>;
    /**
     * The specific semver version of the runtime type.
     */
    runtimeTypeVersion?: pulumi.Input<string>;
    /**
     * The monitor status (ENABLED or DISABLED).
     */
    status?: pulumi.Input<string>;
    /**
     * The tags that will be associated with the monitor.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SyntheticsBrokenLinksMonitorTag>[]>;
    /**
     * The URI the monitor runs against.
     */
    uri?: pulumi.Input<string>;
    useUnsupportedLegacyRuntime?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SyntheticsBrokenLinksMonitor resource.
 */
export interface SyntheticsBrokenLinksMonitorArgs {
    /**
     * ID of the newrelic account.
     */
    accountId?: pulumi.Input<number>;
    /**
     * List private location GUIDs for which the monitor will run.
     */
    locationsPrivates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Publicly available location names in which the monitor will run.
     */
    locationsPublics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of this monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES,
     * EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.
     */
    period: pulumi.Input<string>;
    /**
     * The runtime type that the monitor will run.
     */
    runtimeType?: pulumi.Input<string>;
    /**
     * The specific semver version of the runtime type.
     */
    runtimeTypeVersion?: pulumi.Input<string>;
    /**
     * The monitor status (ENABLED or DISABLED).
     */
    status: pulumi.Input<string>;
    /**
     * The tags that will be associated with the monitor.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SyntheticsBrokenLinksMonitorTag>[]>;
    /**
     * The URI the monitor runs against.
     */
    uri: pulumi.Input<string>;
    useUnsupportedLegacyRuntime?: pulumi.Input<boolean>;
}
