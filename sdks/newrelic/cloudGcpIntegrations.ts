// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudGcpIntegrations extends pulumi.CustomResource {
    /**
     * Get an existing CloudGcpIntegrations resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudGcpIntegrationsState, opts?: pulumi.CustomResourceOptions): CloudGcpIntegrations {
        return new CloudGcpIntegrations(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/cloudGcpIntegrations:CloudGcpIntegrations';

    /**
     * Returns true if the given object is an instance of CloudGcpIntegrations.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudGcpIntegrations {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudGcpIntegrations.__pulumiType;
    }

    /**
     * ID of the newrelic account
     */
    public readonly accountId!: pulumi.Output<number>;
    /**
     * GCP alloy DB integration
     */
    public readonly alloyDb!: pulumi.Output<outputs.CloudGcpIntegrationsAlloyDb | undefined>;
    /**
     * GCP app engine service
     */
    public readonly appEngine!: pulumi.Output<outputs.CloudGcpIntegrationsAppEngine | undefined>;
    /**
     * GCP biq query service
     */
    public readonly bigQuery!: pulumi.Output<outputs.CloudGcpIntegrationsBigQuery | undefined>;
    /**
     * GCP big table service
     */
    public readonly bigTable!: pulumi.Output<outputs.CloudGcpIntegrationsBigTable | undefined>;
    /**
     * GCP big table service
     */
    public readonly composer!: pulumi.Output<outputs.CloudGcpIntegrationsComposer | undefined>;
    /**
     * GCP big table service
     */
    public readonly dataFlow!: pulumi.Output<outputs.CloudGcpIntegrationsDataFlow | undefined>;
    /**
     * GCP big table service
     */
    public readonly dataProc!: pulumi.Output<outputs.CloudGcpIntegrationsDataProc | undefined>;
    /**
     * GCP big table service
     */
    public readonly dataStore!: pulumi.Output<outputs.CloudGcpIntegrationsDataStore | undefined>;
    /**
     * GCP big table service
     */
    public readonly fireBaseDatabase!: pulumi.Output<outputs.CloudGcpIntegrationsFireBaseDatabase | undefined>;
    /**
     * GCP big table service
     */
    public readonly fireBaseHosting!: pulumi.Output<outputs.CloudGcpIntegrationsFireBaseHosting | undefined>;
    /**
     * GCP big table service
     */
    public readonly fireBaseStorage!: pulumi.Output<outputs.CloudGcpIntegrationsFireBaseStorage | undefined>;
    /**
     * GCP big table service
     */
    public readonly fireStore!: pulumi.Output<outputs.CloudGcpIntegrationsFireStore | undefined>;
    /**
     * GCP big table service
     */
    public readonly functions!: pulumi.Output<outputs.CloudGcpIntegrationsFunctions | undefined>;
    /**
     * GCP big table service
     */
    public readonly interconnect!: pulumi.Output<outputs.CloudGcpIntegrationsInterconnect | undefined>;
    /**
     * GCP big table service
     */
    public readonly kubernetes!: pulumi.Output<outputs.CloudGcpIntegrationsKubernetes | undefined>;
    /**
     * Id of the linked gcp account in New Relic
     */
    public readonly linkedAccountId!: pulumi.Output<number>;
    /**
     * GCP big table service
     */
    public readonly loadBalancing!: pulumi.Output<outputs.CloudGcpIntegrationsLoadBalancing | undefined>;
    /**
     * GCP big table service
     */
    public readonly memCache!: pulumi.Output<outputs.CloudGcpIntegrationsMemCache | undefined>;
    /**
     * GCP big table service
     */
    public readonly pubSub!: pulumi.Output<outputs.CloudGcpIntegrationsPubSub | undefined>;
    /**
     * GCP big table service
     */
    public readonly redis!: pulumi.Output<outputs.CloudGcpIntegrationsRedis | undefined>;
    /**
     * GCP big table service
     */
    public readonly router!: pulumi.Output<outputs.CloudGcpIntegrationsRouter | undefined>;
    /**
     * GCP big table service
     */
    public readonly run!: pulumi.Output<outputs.CloudGcpIntegrationsRun | undefined>;
    /**
     * GCP big table service
     */
    public readonly spanner!: pulumi.Output<outputs.CloudGcpIntegrationsSpanner | undefined>;
    /**
     * GCP big table service
     */
    public readonly sql!: pulumi.Output<outputs.CloudGcpIntegrationsSql | undefined>;
    /**
     * GCP big table service
     */
    public readonly storage!: pulumi.Output<outputs.CloudGcpIntegrationsStorage | undefined>;
    /**
     * GCP big table service
     */
    public readonly virtualMachines!: pulumi.Output<outputs.CloudGcpIntegrationsVirtualMachines | undefined>;
    /**
     * GCP big table service
     */
    public readonly vpcAccess!: pulumi.Output<outputs.CloudGcpIntegrationsVpcAccess | undefined>;

    /**
     * Create a CloudGcpIntegrations resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudGcpIntegrationsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudGcpIntegrationsArgs | CloudGcpIntegrationsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudGcpIntegrationsState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["alloyDb"] = state ? state.alloyDb : undefined;
            resourceInputs["appEngine"] = state ? state.appEngine : undefined;
            resourceInputs["bigQuery"] = state ? state.bigQuery : undefined;
            resourceInputs["bigTable"] = state ? state.bigTable : undefined;
            resourceInputs["composer"] = state ? state.composer : undefined;
            resourceInputs["dataFlow"] = state ? state.dataFlow : undefined;
            resourceInputs["dataProc"] = state ? state.dataProc : undefined;
            resourceInputs["dataStore"] = state ? state.dataStore : undefined;
            resourceInputs["fireBaseDatabase"] = state ? state.fireBaseDatabase : undefined;
            resourceInputs["fireBaseHosting"] = state ? state.fireBaseHosting : undefined;
            resourceInputs["fireBaseStorage"] = state ? state.fireBaseStorage : undefined;
            resourceInputs["fireStore"] = state ? state.fireStore : undefined;
            resourceInputs["functions"] = state ? state.functions : undefined;
            resourceInputs["interconnect"] = state ? state.interconnect : undefined;
            resourceInputs["kubernetes"] = state ? state.kubernetes : undefined;
            resourceInputs["linkedAccountId"] = state ? state.linkedAccountId : undefined;
            resourceInputs["loadBalancing"] = state ? state.loadBalancing : undefined;
            resourceInputs["memCache"] = state ? state.memCache : undefined;
            resourceInputs["pubSub"] = state ? state.pubSub : undefined;
            resourceInputs["redis"] = state ? state.redis : undefined;
            resourceInputs["router"] = state ? state.router : undefined;
            resourceInputs["run"] = state ? state.run : undefined;
            resourceInputs["spanner"] = state ? state.spanner : undefined;
            resourceInputs["sql"] = state ? state.sql : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["virtualMachines"] = state ? state.virtualMachines : undefined;
            resourceInputs["vpcAccess"] = state ? state.vpcAccess : undefined;
        } else {
            const args = argsOrState as CloudGcpIntegrationsArgs | undefined;
            if ((!args || args.linkedAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'linkedAccountId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["alloyDb"] = args ? args.alloyDb : undefined;
            resourceInputs["appEngine"] = args ? args.appEngine : undefined;
            resourceInputs["bigQuery"] = args ? args.bigQuery : undefined;
            resourceInputs["bigTable"] = args ? args.bigTable : undefined;
            resourceInputs["composer"] = args ? args.composer : undefined;
            resourceInputs["dataFlow"] = args ? args.dataFlow : undefined;
            resourceInputs["dataProc"] = args ? args.dataProc : undefined;
            resourceInputs["dataStore"] = args ? args.dataStore : undefined;
            resourceInputs["fireBaseDatabase"] = args ? args.fireBaseDatabase : undefined;
            resourceInputs["fireBaseHosting"] = args ? args.fireBaseHosting : undefined;
            resourceInputs["fireBaseStorage"] = args ? args.fireBaseStorage : undefined;
            resourceInputs["fireStore"] = args ? args.fireStore : undefined;
            resourceInputs["functions"] = args ? args.functions : undefined;
            resourceInputs["interconnect"] = args ? args.interconnect : undefined;
            resourceInputs["kubernetes"] = args ? args.kubernetes : undefined;
            resourceInputs["linkedAccountId"] = args ? args.linkedAccountId : undefined;
            resourceInputs["loadBalancing"] = args ? args.loadBalancing : undefined;
            resourceInputs["memCache"] = args ? args.memCache : undefined;
            resourceInputs["pubSub"] = args ? args.pubSub : undefined;
            resourceInputs["redis"] = args ? args.redis : undefined;
            resourceInputs["router"] = args ? args.router : undefined;
            resourceInputs["run"] = args ? args.run : undefined;
            resourceInputs["spanner"] = args ? args.spanner : undefined;
            resourceInputs["sql"] = args ? args.sql : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["virtualMachines"] = args ? args.virtualMachines : undefined;
            resourceInputs["vpcAccess"] = args ? args.vpcAccess : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudGcpIntegrations.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudGcpIntegrations resources.
 */
export interface CloudGcpIntegrationsState {
    /**
     * ID of the newrelic account
     */
    accountId?: pulumi.Input<number>;
    /**
     * GCP alloy DB integration
     */
    alloyDb?: pulumi.Input<inputs.CloudGcpIntegrationsAlloyDb>;
    /**
     * GCP app engine service
     */
    appEngine?: pulumi.Input<inputs.CloudGcpIntegrationsAppEngine>;
    /**
     * GCP biq query service
     */
    bigQuery?: pulumi.Input<inputs.CloudGcpIntegrationsBigQuery>;
    /**
     * GCP big table service
     */
    bigTable?: pulumi.Input<inputs.CloudGcpIntegrationsBigTable>;
    /**
     * GCP big table service
     */
    composer?: pulumi.Input<inputs.CloudGcpIntegrationsComposer>;
    /**
     * GCP big table service
     */
    dataFlow?: pulumi.Input<inputs.CloudGcpIntegrationsDataFlow>;
    /**
     * GCP big table service
     */
    dataProc?: pulumi.Input<inputs.CloudGcpIntegrationsDataProc>;
    /**
     * GCP big table service
     */
    dataStore?: pulumi.Input<inputs.CloudGcpIntegrationsDataStore>;
    /**
     * GCP big table service
     */
    fireBaseDatabase?: pulumi.Input<inputs.CloudGcpIntegrationsFireBaseDatabase>;
    /**
     * GCP big table service
     */
    fireBaseHosting?: pulumi.Input<inputs.CloudGcpIntegrationsFireBaseHosting>;
    /**
     * GCP big table service
     */
    fireBaseStorage?: pulumi.Input<inputs.CloudGcpIntegrationsFireBaseStorage>;
    /**
     * GCP big table service
     */
    fireStore?: pulumi.Input<inputs.CloudGcpIntegrationsFireStore>;
    /**
     * GCP big table service
     */
    functions?: pulumi.Input<inputs.CloudGcpIntegrationsFunctions>;
    /**
     * GCP big table service
     */
    interconnect?: pulumi.Input<inputs.CloudGcpIntegrationsInterconnect>;
    /**
     * GCP big table service
     */
    kubernetes?: pulumi.Input<inputs.CloudGcpIntegrationsKubernetes>;
    /**
     * Id of the linked gcp account in New Relic
     */
    linkedAccountId?: pulumi.Input<number>;
    /**
     * GCP big table service
     */
    loadBalancing?: pulumi.Input<inputs.CloudGcpIntegrationsLoadBalancing>;
    /**
     * GCP big table service
     */
    memCache?: pulumi.Input<inputs.CloudGcpIntegrationsMemCache>;
    /**
     * GCP big table service
     */
    pubSub?: pulumi.Input<inputs.CloudGcpIntegrationsPubSub>;
    /**
     * GCP big table service
     */
    redis?: pulumi.Input<inputs.CloudGcpIntegrationsRedis>;
    /**
     * GCP big table service
     */
    router?: pulumi.Input<inputs.CloudGcpIntegrationsRouter>;
    /**
     * GCP big table service
     */
    run?: pulumi.Input<inputs.CloudGcpIntegrationsRun>;
    /**
     * GCP big table service
     */
    spanner?: pulumi.Input<inputs.CloudGcpIntegrationsSpanner>;
    /**
     * GCP big table service
     */
    sql?: pulumi.Input<inputs.CloudGcpIntegrationsSql>;
    /**
     * GCP big table service
     */
    storage?: pulumi.Input<inputs.CloudGcpIntegrationsStorage>;
    /**
     * GCP big table service
     */
    virtualMachines?: pulumi.Input<inputs.CloudGcpIntegrationsVirtualMachines>;
    /**
     * GCP big table service
     */
    vpcAccess?: pulumi.Input<inputs.CloudGcpIntegrationsVpcAccess>;
}

/**
 * The set of arguments for constructing a CloudGcpIntegrations resource.
 */
export interface CloudGcpIntegrationsArgs {
    /**
     * ID of the newrelic account
     */
    accountId?: pulumi.Input<number>;
    /**
     * GCP alloy DB integration
     */
    alloyDb?: pulumi.Input<inputs.CloudGcpIntegrationsAlloyDb>;
    /**
     * GCP app engine service
     */
    appEngine?: pulumi.Input<inputs.CloudGcpIntegrationsAppEngine>;
    /**
     * GCP biq query service
     */
    bigQuery?: pulumi.Input<inputs.CloudGcpIntegrationsBigQuery>;
    /**
     * GCP big table service
     */
    bigTable?: pulumi.Input<inputs.CloudGcpIntegrationsBigTable>;
    /**
     * GCP big table service
     */
    composer?: pulumi.Input<inputs.CloudGcpIntegrationsComposer>;
    /**
     * GCP big table service
     */
    dataFlow?: pulumi.Input<inputs.CloudGcpIntegrationsDataFlow>;
    /**
     * GCP big table service
     */
    dataProc?: pulumi.Input<inputs.CloudGcpIntegrationsDataProc>;
    /**
     * GCP big table service
     */
    dataStore?: pulumi.Input<inputs.CloudGcpIntegrationsDataStore>;
    /**
     * GCP big table service
     */
    fireBaseDatabase?: pulumi.Input<inputs.CloudGcpIntegrationsFireBaseDatabase>;
    /**
     * GCP big table service
     */
    fireBaseHosting?: pulumi.Input<inputs.CloudGcpIntegrationsFireBaseHosting>;
    /**
     * GCP big table service
     */
    fireBaseStorage?: pulumi.Input<inputs.CloudGcpIntegrationsFireBaseStorage>;
    /**
     * GCP big table service
     */
    fireStore?: pulumi.Input<inputs.CloudGcpIntegrationsFireStore>;
    /**
     * GCP big table service
     */
    functions?: pulumi.Input<inputs.CloudGcpIntegrationsFunctions>;
    /**
     * GCP big table service
     */
    interconnect?: pulumi.Input<inputs.CloudGcpIntegrationsInterconnect>;
    /**
     * GCP big table service
     */
    kubernetes?: pulumi.Input<inputs.CloudGcpIntegrationsKubernetes>;
    /**
     * Id of the linked gcp account in New Relic
     */
    linkedAccountId: pulumi.Input<number>;
    /**
     * GCP big table service
     */
    loadBalancing?: pulumi.Input<inputs.CloudGcpIntegrationsLoadBalancing>;
    /**
     * GCP big table service
     */
    memCache?: pulumi.Input<inputs.CloudGcpIntegrationsMemCache>;
    /**
     * GCP big table service
     */
    pubSub?: pulumi.Input<inputs.CloudGcpIntegrationsPubSub>;
    /**
     * GCP big table service
     */
    redis?: pulumi.Input<inputs.CloudGcpIntegrationsRedis>;
    /**
     * GCP big table service
     */
    router?: pulumi.Input<inputs.CloudGcpIntegrationsRouter>;
    /**
     * GCP big table service
     */
    run?: pulumi.Input<inputs.CloudGcpIntegrationsRun>;
    /**
     * GCP big table service
     */
    spanner?: pulumi.Input<inputs.CloudGcpIntegrationsSpanner>;
    /**
     * GCP big table service
     */
    sql?: pulumi.Input<inputs.CloudGcpIntegrationsSql>;
    /**
     * GCP big table service
     */
    storage?: pulumi.Input<inputs.CloudGcpIntegrationsStorage>;
    /**
     * GCP big table service
     */
    virtualMachines?: pulumi.Input<inputs.CloudGcpIntegrationsVirtualMachines>;
    /**
     * GCP big table service
     */
    vpcAccess?: pulumi.Input<inputs.CloudGcpIntegrationsVpcAccess>;
}
