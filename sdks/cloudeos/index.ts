// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AwsVpnArgs, AwsVpnState } from "./awsVpn";
export type AwsVpn = import("./awsVpn").AwsVpn;
export const AwsVpn: typeof import("./awsVpn").AwsVpn = null as any;
utilities.lazyLoad(exports, ["AwsVpn"], () => require("./awsVpn"));

export { ClosArgs, ClosState } from "./clos";
export type Clos = import("./clos").Clos;
export const Clos: typeof import("./clos").Clos = null as any;
utilities.lazyLoad(exports, ["Clos"], () => require("./clos"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RouterConfigArgs, RouterConfigState } from "./routerConfig";
export type RouterConfig = import("./routerConfig").RouterConfig;
export const RouterConfig: typeof import("./routerConfig").RouterConfig = null as any;
utilities.lazyLoad(exports, ["RouterConfig"], () => require("./routerConfig"));

export { RouterStatusArgs, RouterStatusState } from "./routerStatus";
export type RouterStatus = import("./routerStatus").RouterStatus;
export const RouterStatus: typeof import("./routerStatus").RouterStatus = null as any;
utilities.lazyLoad(exports, ["RouterStatus"], () => require("./routerStatus"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { TopologyArgs, TopologyState } from "./topology";
export type Topology = import("./topology").Topology;
export const Topology: typeof import("./topology").Topology = null as any;
utilities.lazyLoad(exports, ["Topology"], () => require("./topology"));

export { VpcConfigArgs, VpcConfigState } from "./vpcConfig";
export type VpcConfig = import("./vpcConfig").VpcConfig;
export const VpcConfig: typeof import("./vpcConfig").VpcConfig = null as any;
utilities.lazyLoad(exports, ["VpcConfig"], () => require("./vpcConfig"));

export { VpcStatusArgs, VpcStatusState } from "./vpcStatus";
export type VpcStatus = import("./vpcStatus").VpcStatus;
export const VpcStatus: typeof import("./vpcStatus").VpcStatus = null as any;
utilities.lazyLoad(exports, ["VpcStatus"], () => require("./vpcStatus"));

export { WanArgs, WanState } from "./wan";
export type Wan = import("./wan").Wan;
export const Wan: typeof import("./wan").Wan = null as any;
utilities.lazyLoad(exports, ["Wan"], () => require("./wan"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudeos:index/awsVpn:AwsVpn":
                return new AwsVpn(name, <any>undefined, { urn })
            case "cloudeos:index/clos:Clos":
                return new Clos(name, <any>undefined, { urn })
            case "cloudeos:index/routerConfig:RouterConfig":
                return new RouterConfig(name, <any>undefined, { urn })
            case "cloudeos:index/routerStatus:RouterStatus":
                return new RouterStatus(name, <any>undefined, { urn })
            case "cloudeos:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "cloudeos:index/topology:Topology":
                return new Topology(name, <any>undefined, { urn })
            case "cloudeos:index/vpcConfig:VpcConfig":
                return new VpcConfig(name, <any>undefined, { urn })
            case "cloudeos:index/vpcStatus:VpcStatus":
                return new VpcStatus(name, <any>undefined, { urn })
            case "cloudeos:index/wan:Wan":
                return new Wan(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudeos", "index/awsVpn", _module)
pulumi.runtime.registerResourceModule("cloudeos", "index/clos", _module)
pulumi.runtime.registerResourceModule("cloudeos", "index/routerConfig", _module)
pulumi.runtime.registerResourceModule("cloudeos", "index/routerStatus", _module)
pulumi.runtime.registerResourceModule("cloudeos", "index/subnet", _module)
pulumi.runtime.registerResourceModule("cloudeos", "index/topology", _module)
pulumi.runtime.registerResourceModule("cloudeos", "index/vpcConfig", _module)
pulumi.runtime.registerResourceModule("cloudeos", "index/vpcStatus", _module)
pulumi.runtime.registerResourceModule("cloudeos", "index/wan", _module)
pulumi.runtime.registerResourcePackage("cloudeos", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudeos") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
