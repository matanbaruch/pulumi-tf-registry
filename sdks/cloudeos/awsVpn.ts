// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AwsVpn extends pulumi.CustomResource {
    /**
     * Get an existing AwsVpn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsVpnState, opts?: pulumi.CustomResourceOptions): AwsVpn {
        return new AwsVpn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudeos:index/awsVpn:AwsVpn';

    /**
     * Returns true if the given object is an instance of AwsVpn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsVpn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsVpn.__pulumiType;
    }

    /**
     * AWS Customer Gateway ID
     */
    public readonly cgwId!: pulumi.Output<string>;
    /**
     * Segment/VRF ID
     */
    public readonly cnps!: pulumi.Output<string>;
    /**
     * tf_id of the CloudEOS Router
     */
    public readonly routerId!: pulumi.Output<string>;
    /**
     * Unique resource ID
     */
    public /*out*/ readonly tfId!: pulumi.Output<string>;
    /**
     * Transit Gateway ID
     */
    public readonly tgwId!: pulumi.Output<string | undefined>;
    /**
     * Public IP address of the AWS VPN Connection endpoint
     */
    public readonly tunnel1AwsEndpointIp!: pulumi.Output<string>;
    /**
     * Tunnel IP address of the AWS VPN Connection
     */
    public readonly tunnel1AwsOverlayIp!: pulumi.Output<string>;
    /**
     * BGP ASN
     */
    public readonly tunnel1BgpAsn!: pulumi.Output<string>;
    /**
     * Hold timer value for BGP
     */
    public readonly tunnel1BgpHoldtime!: pulumi.Output<string>;
    /**
     * Ipsec Preshared key for Tunnel1
     */
    public readonly tunnel1PresharedKey!: pulumi.Output<string>;
    /**
     * Tunnel Interface overlay IP address for the router
     */
    public readonly tunnel1RouterOverlayIp!: pulumi.Output<string>;
    /**
     * Public IP address of the AWS VPN Connection endpoint
     */
    public readonly tunnel2AwsEndpointIp!: pulumi.Output<string>;
    /**
     * Tunnel IP address of the AWS VPN Connection
     */
    public readonly tunnel2AwsOverlayIp!: pulumi.Output<string>;
    /**
     * BGP ASN
     */
    public readonly tunnel2BgpAsn!: pulumi.Output<string>;
    /**
     * Hold timer value for BGP
     */
    public readonly tunnel2BgpHoldtime!: pulumi.Output<string>;
    /**
     * Pre shared key for Tunnel1
     */
    public readonly tunnel2PresharedKey!: pulumi.Output<string>;
    /**
     * Tunnel interface IP address for the router
     */
    public readonly tunnel2RouterOverlayIp!: pulumi.Output<string>;
    /**
     * VPC ID for the Router given in "router_id"
     */
    public readonly vpcId!: pulumi.Output<string>;
    /**
     * Vpn connection ID
     */
    public readonly vpnConnectionId!: pulumi.Output<string>;
    /**
     * VPN Gateway ID
     */
    public readonly vpnGatewayId!: pulumi.Output<string | undefined>;
    /**
     * TGW Attachment ID for the VPN connection
     */
    public readonly vpnTgwAttachmentId!: pulumi.Output<string | undefined>;

    /**
     * Create a AwsVpn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsVpnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsVpnArgs | AwsVpnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsVpnState | undefined;
            resourceInputs["cgwId"] = state ? state.cgwId : undefined;
            resourceInputs["cnps"] = state ? state.cnps : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["tfId"] = state ? state.tfId : undefined;
            resourceInputs["tgwId"] = state ? state.tgwId : undefined;
            resourceInputs["tunnel1AwsEndpointIp"] = state ? state.tunnel1AwsEndpointIp : undefined;
            resourceInputs["tunnel1AwsOverlayIp"] = state ? state.tunnel1AwsOverlayIp : undefined;
            resourceInputs["tunnel1BgpAsn"] = state ? state.tunnel1BgpAsn : undefined;
            resourceInputs["tunnel1BgpHoldtime"] = state ? state.tunnel1BgpHoldtime : undefined;
            resourceInputs["tunnel1PresharedKey"] = state ? state.tunnel1PresharedKey : undefined;
            resourceInputs["tunnel1RouterOverlayIp"] = state ? state.tunnel1RouterOverlayIp : undefined;
            resourceInputs["tunnel2AwsEndpointIp"] = state ? state.tunnel2AwsEndpointIp : undefined;
            resourceInputs["tunnel2AwsOverlayIp"] = state ? state.tunnel2AwsOverlayIp : undefined;
            resourceInputs["tunnel2BgpAsn"] = state ? state.tunnel2BgpAsn : undefined;
            resourceInputs["tunnel2BgpHoldtime"] = state ? state.tunnel2BgpHoldtime : undefined;
            resourceInputs["tunnel2PresharedKey"] = state ? state.tunnel2PresharedKey : undefined;
            resourceInputs["tunnel2RouterOverlayIp"] = state ? state.tunnel2RouterOverlayIp : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpnConnectionId"] = state ? state.vpnConnectionId : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
            resourceInputs["vpnTgwAttachmentId"] = state ? state.vpnTgwAttachmentId : undefined;
        } else {
            const args = argsOrState as AwsVpnArgs | undefined;
            if ((!args || args.cgwId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cgwId'");
            }
            if ((!args || args.cnps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cnps'");
            }
            if ((!args || args.routerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routerId'");
            }
            if ((!args || args.tunnel1AwsEndpointIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnel1AwsEndpointIp'");
            }
            if ((!args || args.tunnel1AwsOverlayIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnel1AwsOverlayIp'");
            }
            if ((!args || args.tunnel1BgpAsn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnel1BgpAsn'");
            }
            if ((!args || args.tunnel1BgpHoldtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnel1BgpHoldtime'");
            }
            if ((!args || args.tunnel1PresharedKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnel1PresharedKey'");
            }
            if ((!args || args.tunnel1RouterOverlayIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnel1RouterOverlayIp'");
            }
            if ((!args || args.tunnel2AwsEndpointIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnel2AwsEndpointIp'");
            }
            if ((!args || args.tunnel2AwsOverlayIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnel2AwsOverlayIp'");
            }
            if ((!args || args.tunnel2BgpAsn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnel2BgpAsn'");
            }
            if ((!args || args.tunnel2BgpHoldtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnel2BgpHoldtime'");
            }
            if ((!args || args.tunnel2PresharedKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnel2PresharedKey'");
            }
            if ((!args || args.tunnel2RouterOverlayIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnel2RouterOverlayIp'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.vpnConnectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnConnectionId'");
            }
            resourceInputs["cgwId"] = args ? args.cgwId : undefined;
            resourceInputs["cnps"] = args ? args.cnps : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["tgwId"] = args ? args.tgwId : undefined;
            resourceInputs["tunnel1AwsEndpointIp"] = args ? args.tunnel1AwsEndpointIp : undefined;
            resourceInputs["tunnel1AwsOverlayIp"] = args ? args.tunnel1AwsOverlayIp : undefined;
            resourceInputs["tunnel1BgpAsn"] = args ? args.tunnel1BgpAsn : undefined;
            resourceInputs["tunnel1BgpHoldtime"] = args ? args.tunnel1BgpHoldtime : undefined;
            resourceInputs["tunnel1PresharedKey"] = args?.tunnel1PresharedKey ? pulumi.secret(args.tunnel1PresharedKey) : undefined;
            resourceInputs["tunnel1RouterOverlayIp"] = args ? args.tunnel1RouterOverlayIp : undefined;
            resourceInputs["tunnel2AwsEndpointIp"] = args ? args.tunnel2AwsEndpointIp : undefined;
            resourceInputs["tunnel2AwsOverlayIp"] = args ? args.tunnel2AwsOverlayIp : undefined;
            resourceInputs["tunnel2BgpAsn"] = args ? args.tunnel2BgpAsn : undefined;
            resourceInputs["tunnel2BgpHoldtime"] = args ? args.tunnel2BgpHoldtime : undefined;
            resourceInputs["tunnel2PresharedKey"] = args?.tunnel2PresharedKey ? pulumi.secret(args.tunnel2PresharedKey) : undefined;
            resourceInputs["tunnel2RouterOverlayIp"] = args ? args.tunnel2RouterOverlayIp : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vpnConnectionId"] = args ? args.vpnConnectionId : undefined;
            resourceInputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            resourceInputs["vpnTgwAttachmentId"] = args ? args.vpnTgwAttachmentId : undefined;
            resourceInputs["tfId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tunnel1PresharedKey", "tunnel2PresharedKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AwsVpn.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsVpn resources.
 */
export interface AwsVpnState {
    /**
     * AWS Customer Gateway ID
     */
    cgwId?: pulumi.Input<string>;
    /**
     * Segment/VRF ID
     */
    cnps?: pulumi.Input<string>;
    /**
     * tf_id of the CloudEOS Router
     */
    routerId?: pulumi.Input<string>;
    /**
     * Unique resource ID
     */
    tfId?: pulumi.Input<string>;
    /**
     * Transit Gateway ID
     */
    tgwId?: pulumi.Input<string>;
    /**
     * Public IP address of the AWS VPN Connection endpoint
     */
    tunnel1AwsEndpointIp?: pulumi.Input<string>;
    /**
     * Tunnel IP address of the AWS VPN Connection
     */
    tunnel1AwsOverlayIp?: pulumi.Input<string>;
    /**
     * BGP ASN
     */
    tunnel1BgpAsn?: pulumi.Input<string>;
    /**
     * Hold timer value for BGP
     */
    tunnel1BgpHoldtime?: pulumi.Input<string>;
    /**
     * Ipsec Preshared key for Tunnel1
     */
    tunnel1PresharedKey?: pulumi.Input<string>;
    /**
     * Tunnel Interface overlay IP address for the router
     */
    tunnel1RouterOverlayIp?: pulumi.Input<string>;
    /**
     * Public IP address of the AWS VPN Connection endpoint
     */
    tunnel2AwsEndpointIp?: pulumi.Input<string>;
    /**
     * Tunnel IP address of the AWS VPN Connection
     */
    tunnel2AwsOverlayIp?: pulumi.Input<string>;
    /**
     * BGP ASN
     */
    tunnel2BgpAsn?: pulumi.Input<string>;
    /**
     * Hold timer value for BGP
     */
    tunnel2BgpHoldtime?: pulumi.Input<string>;
    /**
     * Pre shared key for Tunnel1
     */
    tunnel2PresharedKey?: pulumi.Input<string>;
    /**
     * Tunnel interface IP address for the router
     */
    tunnel2RouterOverlayIp?: pulumi.Input<string>;
    /**
     * VPC ID for the Router given in "router_id"
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Vpn connection ID
     */
    vpnConnectionId?: pulumi.Input<string>;
    /**
     * VPN Gateway ID
     */
    vpnGatewayId?: pulumi.Input<string>;
    /**
     * TGW Attachment ID for the VPN connection
     */
    vpnTgwAttachmentId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsVpn resource.
 */
export interface AwsVpnArgs {
    /**
     * AWS Customer Gateway ID
     */
    cgwId: pulumi.Input<string>;
    /**
     * Segment/VRF ID
     */
    cnps: pulumi.Input<string>;
    /**
     * tf_id of the CloudEOS Router
     */
    routerId: pulumi.Input<string>;
    /**
     * Transit Gateway ID
     */
    tgwId?: pulumi.Input<string>;
    /**
     * Public IP address of the AWS VPN Connection endpoint
     */
    tunnel1AwsEndpointIp: pulumi.Input<string>;
    /**
     * Tunnel IP address of the AWS VPN Connection
     */
    tunnel1AwsOverlayIp: pulumi.Input<string>;
    /**
     * BGP ASN
     */
    tunnel1BgpAsn: pulumi.Input<string>;
    /**
     * Hold timer value for BGP
     */
    tunnel1BgpHoldtime: pulumi.Input<string>;
    /**
     * Ipsec Preshared key for Tunnel1
     */
    tunnel1PresharedKey: pulumi.Input<string>;
    /**
     * Tunnel Interface overlay IP address for the router
     */
    tunnel1RouterOverlayIp: pulumi.Input<string>;
    /**
     * Public IP address of the AWS VPN Connection endpoint
     */
    tunnel2AwsEndpointIp: pulumi.Input<string>;
    /**
     * Tunnel IP address of the AWS VPN Connection
     */
    tunnel2AwsOverlayIp: pulumi.Input<string>;
    /**
     * BGP ASN
     */
    tunnel2BgpAsn: pulumi.Input<string>;
    /**
     * Hold timer value for BGP
     */
    tunnel2BgpHoldtime: pulumi.Input<string>;
    /**
     * Pre shared key for Tunnel1
     */
    tunnel2PresharedKey: pulumi.Input<string>;
    /**
     * Tunnel interface IP address for the router
     */
    tunnel2RouterOverlayIp: pulumi.Input<string>;
    /**
     * VPC ID for the Router given in "router_id"
     */
    vpcId: pulumi.Input<string>;
    /**
     * Vpn connection ID
     */
    vpnConnectionId: pulumi.Input<string>;
    /**
     * VPN Gateway ID
     */
    vpnGatewayId?: pulumi.Input<string>;
    /**
     * TGW Attachment ID for the VPN connection
     */
    vpnTgwAttachmentId?: pulumi.Input<string>;
}
