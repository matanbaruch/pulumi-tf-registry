// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Clos extends pulumi.CustomResource {
    /**
     * Get an existing Clos resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClosState, opts?: pulumi.CustomResourceOptions): Clos {
        return new Clos(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudeos:index/clos:Clos';

    /**
     * Returns true if the given object is an instance of Clos.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Clos {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Clos.__pulumiType;
    }

    /**
     * Container name for leaf
     */
    public readonly cvContainerName!: pulumi.Output<string | undefined>;
    /**
     * full_mesh or hub_spoke
     */
    public readonly fabric!: pulumi.Output<string | undefined>;
    public readonly leafEncryption!: pulumi.Output<boolean | undefined>;
    public readonly leafToEdgeIgw!: pulumi.Output<boolean | undefined>;
    public readonly leafToEdgePeering!: pulumi.Output<boolean | undefined>;
    /**
     * Clos topology name
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly tfId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ClosTimeouts | undefined>;
    /**
     * Base topology name
     */
    public readonly topologyName!: pulumi.Output<string>;

    /**
     * Create a Clos resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClosArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClosArgs | ClosState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClosState | undefined;
            resourceInputs["cvContainerName"] = state ? state.cvContainerName : undefined;
            resourceInputs["fabric"] = state ? state.fabric : undefined;
            resourceInputs["leafEncryption"] = state ? state.leafEncryption : undefined;
            resourceInputs["leafToEdgeIgw"] = state ? state.leafToEdgeIgw : undefined;
            resourceInputs["leafToEdgePeering"] = state ? state.leafToEdgePeering : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tfId"] = state ? state.tfId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topologyName"] = state ? state.topologyName : undefined;
        } else {
            const args = argsOrState as ClosArgs | undefined;
            if ((!args || args.topologyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topologyName'");
            }
            resourceInputs["cvContainerName"] = args ? args.cvContainerName : undefined;
            resourceInputs["fabric"] = args ? args.fabric : undefined;
            resourceInputs["leafEncryption"] = args ? args.leafEncryption : undefined;
            resourceInputs["leafToEdgeIgw"] = args ? args.leafToEdgeIgw : undefined;
            resourceInputs["leafToEdgePeering"] = args ? args.leafToEdgePeering : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topologyName"] = args ? args.topologyName : undefined;
            resourceInputs["tfId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Clos.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Clos resources.
 */
export interface ClosState {
    /**
     * Container name for leaf
     */
    cvContainerName?: pulumi.Input<string>;
    /**
     * full_mesh or hub_spoke
     */
    fabric?: pulumi.Input<string>;
    leafEncryption?: pulumi.Input<boolean>;
    leafToEdgeIgw?: pulumi.Input<boolean>;
    leafToEdgePeering?: pulumi.Input<boolean>;
    /**
     * Clos topology name
     */
    name?: pulumi.Input<string>;
    tfId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClosTimeouts>;
    /**
     * Base topology name
     */
    topologyName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Clos resource.
 */
export interface ClosArgs {
    /**
     * Container name for leaf
     */
    cvContainerName?: pulumi.Input<string>;
    /**
     * full_mesh or hub_spoke
     */
    fabric?: pulumi.Input<string>;
    leafEncryption?: pulumi.Input<boolean>;
    leafToEdgeIgw?: pulumi.Input<boolean>;
    leafToEdgePeering?: pulumi.Input<boolean>;
    /**
     * Clos topology name
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClosTimeouts>;
    /**
     * Base topology name
     */
    topologyName: pulumi.Input<string>;
}
