// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RouterStatus extends pulumi.CustomResource {
    /**
     * Get an existing RouterStatus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterStatusState, opts?: pulumi.CustomResourceOptions): RouterStatus {
        return new RouterStatus(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudeos:index/routerStatus:RouterStatus';

    /**
     * Returns true if the given object is an instance of RouterStatus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterStatus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterStatus.__pulumiType;
    }

    /**
     * Availability set if for Azure
     */
    public readonly availabilitySetId!: pulumi.Output<string | undefined>;
    public readonly availabilityZone!: pulumi.Output<string | undefined>;
    /**
     * aws / azure / gcp
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    public readonly cnps!: pulumi.Output<string | undefined>;
    /**
     * Container to which cvp should add this device
     */
    public readonly cvContainer!: pulumi.Output<string | undefined>;
    /**
     * Deployment mode for the resources: provision or empty
     */
    public readonly deployMode!: pulumi.Output<string | undefined>;
    /**
     * Deployment Status of the CloudEOS Router
     */
    public readonly deploymentStatus!: pulumi.Output<string>;
    public readonly haName!: pulumi.Output<string | undefined>;
    /**
     * VM instance ID
     */
    public readonly instanceId!: pulumi.Output<string | undefined>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly internalRtTableIds!: pulumi.Output<string[] | undefined>;
    /**
     * Interface id
     */
    public readonly intfIds!: pulumi.Output<string[]>;
    /**
     * Interface name
     */
    public readonly intfNames!: pulumi.Output<string[]>;
    /**
     * Private IP address
     */
    public readonly intfPrivateIps!: pulumi.Output<string[]>;
    /**
     * Subnet id attached to intf
     */
    public readonly intfSubnetIds!: pulumi.Output<string[]>;
    /**
     * Interface type
     */
    public readonly intfTypes!: pulumi.Output<string[]>;
    public readonly isRr!: pulumi.Output<boolean | undefined>;
    public readonly primaryNetworkInterfaceId!: pulumi.Output<string | undefined>;
    public readonly privateRtTableIds!: pulumi.Output<string[] | undefined>;
    /**
     * Public ip address
     */
    public readonly publicIp!: pulumi.Output<string | undefined>;
    public readonly publicRtTableIds!: pulumi.Output<string[] | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly rgLocation!: pulumi.Output<string | undefined>;
    public readonly rgName!: pulumi.Output<string | undefined>;
    /**
     * BGP ASN computed on the CloudEOS Router
     */
    public readonly routerBgpAsn!: pulumi.Output<string>;
    /**
     * List of all route table and association resources.
     */
    public readonly routingResourceInfos!: pulumi.Output<string[] | undefined>;
    /**
     * A mapping of tags to assign to the resource
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tfId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.RouterStatusTimeouts | undefined>;
    /**
     * Vpc id of cloudeos
     */
    public readonly vpcId!: pulumi.Output<string | undefined>;

    /**
     * Create a RouterStatus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouterStatusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterStatusArgs | RouterStatusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterStatusState | undefined;
            resourceInputs["availabilitySetId"] = state ? state.availabilitySetId : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["cnps"] = state ? state.cnps : undefined;
            resourceInputs["cvContainer"] = state ? state.cvContainer : undefined;
            resourceInputs["deployMode"] = state ? state.deployMode : undefined;
            resourceInputs["deploymentStatus"] = state ? state.deploymentStatus : undefined;
            resourceInputs["haName"] = state ? state.haName : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["internalRtTableIds"] = state ? state.internalRtTableIds : undefined;
            resourceInputs["intfIds"] = state ? state.intfIds : undefined;
            resourceInputs["intfNames"] = state ? state.intfNames : undefined;
            resourceInputs["intfPrivateIps"] = state ? state.intfPrivateIps : undefined;
            resourceInputs["intfSubnetIds"] = state ? state.intfSubnetIds : undefined;
            resourceInputs["intfTypes"] = state ? state.intfTypes : undefined;
            resourceInputs["isRr"] = state ? state.isRr : undefined;
            resourceInputs["primaryNetworkInterfaceId"] = state ? state.primaryNetworkInterfaceId : undefined;
            resourceInputs["privateRtTableIds"] = state ? state.privateRtTableIds : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["publicRtTableIds"] = state ? state.publicRtTableIds : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rgLocation"] = state ? state.rgLocation : undefined;
            resourceInputs["rgName"] = state ? state.rgName : undefined;
            resourceInputs["routerBgpAsn"] = state ? state.routerBgpAsn : undefined;
            resourceInputs["routingResourceInfos"] = state ? state.routingResourceInfos : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tfId"] = state ? state.tfId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as RouterStatusArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.intfIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intfIds'");
            }
            if ((!args || args.intfNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intfNames'");
            }
            if ((!args || args.intfPrivateIps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intfPrivateIps'");
            }
            if ((!args || args.intfSubnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intfSubnetIds'");
            }
            if ((!args || args.intfTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intfTypes'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.tfId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tfId'");
            }
            resourceInputs["availabilitySetId"] = args ? args.availabilitySetId : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["cnps"] = args ? args.cnps : undefined;
            resourceInputs["cvContainer"] = args ? args.cvContainer : undefined;
            resourceInputs["deployMode"] = args ? args.deployMode : undefined;
            resourceInputs["deploymentStatus"] = args ? args.deploymentStatus : undefined;
            resourceInputs["haName"] = args ? args.haName : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["internalRtTableIds"] = args ? args.internalRtTableIds : undefined;
            resourceInputs["intfIds"] = args ? args.intfIds : undefined;
            resourceInputs["intfNames"] = args ? args.intfNames : undefined;
            resourceInputs["intfPrivateIps"] = args ? args.intfPrivateIps : undefined;
            resourceInputs["intfSubnetIds"] = args ? args.intfSubnetIds : undefined;
            resourceInputs["intfTypes"] = args ? args.intfTypes : undefined;
            resourceInputs["isRr"] = args ? args.isRr : undefined;
            resourceInputs["primaryNetworkInterfaceId"] = args ? args.primaryNetworkInterfaceId : undefined;
            resourceInputs["privateRtTableIds"] = args ? args.privateRtTableIds : undefined;
            resourceInputs["publicIp"] = args ? args.publicIp : undefined;
            resourceInputs["publicRtTableIds"] = args ? args.publicRtTableIds : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rgLocation"] = args ? args.rgLocation : undefined;
            resourceInputs["rgName"] = args ? args.rgName : undefined;
            resourceInputs["routerBgpAsn"] = args ? args.routerBgpAsn : undefined;
            resourceInputs["routingResourceInfos"] = args ? args.routingResourceInfos : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tfId"] = args ? args.tfId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterStatus.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterStatus resources.
 */
export interface RouterStatusState {
    /**
     * Availability set if for Azure
     */
    availabilitySetId?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    /**
     * aws / azure / gcp
     */
    cloudProvider?: pulumi.Input<string>;
    cnps?: pulumi.Input<string>;
    /**
     * Container to which cvp should add this device
     */
    cvContainer?: pulumi.Input<string>;
    /**
     * Deployment mode for the resources: provision or empty
     */
    deployMode?: pulumi.Input<string>;
    /**
     * Deployment Status of the CloudEOS Router
     */
    deploymentStatus?: pulumi.Input<string>;
    haName?: pulumi.Input<string>;
    /**
     * VM instance ID
     */
    instanceId?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    internalRtTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interface id
     */
    intfIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interface name
     */
    intfNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Private IP address
     */
    intfPrivateIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subnet id attached to intf
     */
    intfSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interface type
     */
    intfTypes?: pulumi.Input<pulumi.Input<string>[]>;
    isRr?: pulumi.Input<boolean>;
    primaryNetworkInterfaceId?: pulumi.Input<string>;
    privateRtTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Public ip address
     */
    publicIp?: pulumi.Input<string>;
    publicRtTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    rgLocation?: pulumi.Input<string>;
    rgName?: pulumi.Input<string>;
    /**
     * BGP ASN computed on the CloudEOS Router
     */
    routerBgpAsn?: pulumi.Input<string>;
    /**
     * List of all route table and association resources.
     */
    routingResourceInfos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A mapping of tags to assign to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tfId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RouterStatusTimeouts>;
    /**
     * Vpc id of cloudeos
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouterStatus resource.
 */
export interface RouterStatusArgs {
    /**
     * Availability set if for Azure
     */
    availabilitySetId?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    /**
     * aws / azure / gcp
     */
    cloudProvider: pulumi.Input<string>;
    cnps?: pulumi.Input<string>;
    /**
     * Container to which cvp should add this device
     */
    cvContainer?: pulumi.Input<string>;
    /**
     * Deployment mode for the resources: provision or empty
     */
    deployMode?: pulumi.Input<string>;
    /**
     * Deployment Status of the CloudEOS Router
     */
    deploymentStatus?: pulumi.Input<string>;
    haName?: pulumi.Input<string>;
    /**
     * VM instance ID
     */
    instanceId?: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
    internalRtTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interface id
     */
    intfIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interface name
     */
    intfNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Private IP address
     */
    intfPrivateIps: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subnet id attached to intf
     */
    intfSubnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interface type
     */
    intfTypes: pulumi.Input<pulumi.Input<string>[]>;
    isRr?: pulumi.Input<boolean>;
    primaryNetworkInterfaceId?: pulumi.Input<string>;
    privateRtTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Public ip address
     */
    publicIp?: pulumi.Input<string>;
    publicRtTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    region: pulumi.Input<string>;
    rgLocation?: pulumi.Input<string>;
    rgName?: pulumi.Input<string>;
    /**
     * BGP ASN computed on the CloudEOS Router
     */
    routerBgpAsn?: pulumi.Input<string>;
    /**
     * List of all route table and association resources.
     */
    routingResourceInfos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A mapping of tags to assign to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tfId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RouterStatusTimeouts>;
    /**
     * Vpc id of cloudeos
     */
    vpcId?: pulumi.Input<string>;
}
