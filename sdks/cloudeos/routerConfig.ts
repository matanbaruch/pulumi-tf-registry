// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RouterConfig extends pulumi.CustomResource {
    /**
     * Get an existing RouterConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterConfigState, opts?: pulumi.CustomResourceOptions): RouterConfig {
        return new RouterConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudeos:index/routerConfig:RouterConfig';

    /**
     * Returns true if the given object is an instance of RouterConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterConfig.__pulumiType;
    }

    /**
     * CloudEOS image
     */
    public readonly ami!: pulumi.Output<string | undefined>;
    public readonly availabilityZone!: pulumi.Output<string | undefined>;
    public /*out*/ readonly bootstrapCfg!: pulumi.Output<string>;
    /**
     * aws/azure/gcp
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * CloudEos Licensing Model
     */
    public readonly cloudeosImageOffer!: pulumi.Output<string | undefined>;
    public readonly cnps!: pulumi.Output<string | undefined>;
    public readonly deployMode!: pulumi.Output<string>;
    public /*out*/ readonly haRtrId!: pulumi.Output<string>;
    public /*out*/ readonly internalRtTableIds!: pulumi.Output<string[]>;
    /**
     * Interface name
     */
    public readonly intfNames!: pulumi.Output<string[]>;
    /**
     * Private IP address
     */
    public readonly intfPrivateIps!: pulumi.Output<string[]>;
    /**
     * Interface type
     */
    public readonly intfTypes!: pulumi.Output<string[]>;
    public readonly isRr!: pulumi.Output<boolean | undefined>;
    /**
     * AWS keypair name
     */
    public readonly keyName!: pulumi.Output<string | undefined>;
    /**
     * A set of licenses for cloudeos
     */
    public readonly licenses!: pulumi.Output<outputs.RouterConfigLicense[] | undefined>;
    public /*out*/ readonly peerRoutetableIds!: pulumi.Output<string[]>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly peerroutetableid1s!: pulumi.Output<string[]>;
    public /*out*/ readonly privateRtTableIds!: pulumi.Output<string[]>;
    public /*out*/ readonly publicRtTableIds!: pulumi.Output<string[]>;
    public readonly region!: pulumi.Output<string>;
    public readonly role!: pulumi.Output<string | undefined>;
    /**
     * A mapping of tags to assign to the resource
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tfId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.RouterConfigTimeouts | undefined>;
    public readonly topologyName!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a RouterConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouterConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterConfigArgs | RouterConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterConfigState | undefined;
            resourceInputs["ami"] = state ? state.ami : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["bootstrapCfg"] = state ? state.bootstrapCfg : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["cloudeosImageOffer"] = state ? state.cloudeosImageOffer : undefined;
            resourceInputs["cnps"] = state ? state.cnps : undefined;
            resourceInputs["deployMode"] = state ? state.deployMode : undefined;
            resourceInputs["haRtrId"] = state ? state.haRtrId : undefined;
            resourceInputs["internalRtTableIds"] = state ? state.internalRtTableIds : undefined;
            resourceInputs["intfNames"] = state ? state.intfNames : undefined;
            resourceInputs["intfPrivateIps"] = state ? state.intfPrivateIps : undefined;
            resourceInputs["intfTypes"] = state ? state.intfTypes : undefined;
            resourceInputs["isRr"] = state ? state.isRr : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["licenses"] = state ? state.licenses : undefined;
            resourceInputs["peerRoutetableIds"] = state ? state.peerRoutetableIds : undefined;
            resourceInputs["peerroutetableid1s"] = state ? state.peerroutetableid1s : undefined;
            resourceInputs["privateRtTableIds"] = state ? state.privateRtTableIds : undefined;
            resourceInputs["publicRtTableIds"] = state ? state.publicRtTableIds : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tfId"] = state ? state.tfId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topologyName"] = state ? state.topologyName : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as RouterConfigArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.intfNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intfNames'");
            }
            if ((!args || args.intfPrivateIps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intfPrivateIps'");
            }
            if ((!args || args.intfTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intfTypes'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.topologyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topologyName'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["ami"] = args ? args.ami : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["cloudeosImageOffer"] = args ? args.cloudeosImageOffer : undefined;
            resourceInputs["cnps"] = args ? args.cnps : undefined;
            resourceInputs["deployMode"] = args ? args.deployMode : undefined;
            resourceInputs["intfNames"] = args ? args.intfNames : undefined;
            resourceInputs["intfPrivateIps"] = args ? args.intfPrivateIps : undefined;
            resourceInputs["intfTypes"] = args ? args.intfTypes : undefined;
            resourceInputs["isRr"] = args ? args.isRr : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["licenses"] = args ? args.licenses : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topologyName"] = args ? args.topologyName : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["bootstrapCfg"] = undefined /*out*/;
            resourceInputs["haRtrId"] = undefined /*out*/;
            resourceInputs["internalRtTableIds"] = undefined /*out*/;
            resourceInputs["peerRoutetableIds"] = undefined /*out*/;
            resourceInputs["peerroutetableid1s"] = undefined /*out*/;
            resourceInputs["privateRtTableIds"] = undefined /*out*/;
            resourceInputs["publicRtTableIds"] = undefined /*out*/;
            resourceInputs["tfId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterConfig resources.
 */
export interface RouterConfigState {
    /**
     * CloudEOS image
     */
    ami?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    bootstrapCfg?: pulumi.Input<string>;
    /**
     * aws/azure/gcp
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * CloudEos Licensing Model
     */
    cloudeosImageOffer?: pulumi.Input<string>;
    cnps?: pulumi.Input<string>;
    deployMode?: pulumi.Input<string>;
    haRtrId?: pulumi.Input<string>;
    internalRtTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interface name
     */
    intfNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Private IP address
     */
    intfPrivateIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interface type
     */
    intfTypes?: pulumi.Input<pulumi.Input<string>[]>;
    isRr?: pulumi.Input<boolean>;
    /**
     * AWS keypair name
     */
    keyName?: pulumi.Input<string>;
    /**
     * A set of licenses for cloudeos
     */
    licenses?: pulumi.Input<pulumi.Input<inputs.RouterConfigLicense>[]>;
    peerRoutetableIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    peerroutetableid1s?: pulumi.Input<pulumi.Input<string>[]>;
    privateRtTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    publicRtTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tfId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RouterConfigTimeouts>;
    topologyName?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouterConfig resource.
 */
export interface RouterConfigArgs {
    /**
     * CloudEOS image
     */
    ami?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    /**
     * aws/azure/gcp
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * CloudEos Licensing Model
     */
    cloudeosImageOffer?: pulumi.Input<string>;
    cnps?: pulumi.Input<string>;
    deployMode?: pulumi.Input<string>;
    /**
     * Interface name
     */
    intfNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Private IP address
     */
    intfPrivateIps: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interface type
     */
    intfTypes: pulumi.Input<pulumi.Input<string>[]>;
    isRr?: pulumi.Input<boolean>;
    /**
     * AWS keypair name
     */
    keyName?: pulumi.Input<string>;
    /**
     * A set of licenses for cloudeos
     */
    licenses?: pulumi.Input<pulumi.Input<inputs.RouterConfigLicense>[]>;
    region: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RouterConfigTimeouts>;
    topologyName: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
}
