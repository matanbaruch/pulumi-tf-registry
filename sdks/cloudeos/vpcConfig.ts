// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcConfig extends pulumi.CustomResource {
    /**
     * Get an existing VpcConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcConfigState, opts?: pulumi.CustomResourceOptions): VpcConfig {
        return new VpcConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudeos:index/vpcConfig:VpcConfig';

    /**
     * Returns true if the given object is an instance of VpcConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcConfig.__pulumiType;
    }

    /**
     * cloudeos_clos resource ID
     */
    public readonly closId!: pulumi.Output<string | undefined>;
    /**
     * ClosFabric name
     */
    public readonly closName!: pulumi.Output<string | undefined>;
    /**
     * aws/azure/gcp
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    public readonly cnps!: pulumi.Output<string>;
    public readonly deployMode!: pulumi.Output<string>;
    public /*out*/ readonly peerRgName!: pulumi.Output<string>;
    public /*out*/ readonly peerVnetId!: pulumi.Output<string>;
    public /*out*/ readonly peerVnetName!: pulumi.Output<string>;
    public /*out*/ readonly peerVpcCidr!: pulumi.Output<string>;
    public /*out*/ readonly peerVpcId!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly peervpcidr!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    /**
     * Resource Group name
     */
    public readonly rgName!: pulumi.Output<string | undefined>;
    /**
     * CloudEdge/CloudLeaf
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tfId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VpcConfigTimeouts | undefined>;
    /**
     * cloudeos_topology resource ID
     */
    public readonly topologyId!: pulumi.Output<string | undefined>;
    public readonly topologyName!: pulumi.Output<string>;
    /**
     * VNET name
     */
    public readonly vnetName!: pulumi.Output<string | undefined>;
    /**
     * cloudeos_wan resource ID
     */
    public readonly wanId!: pulumi.Output<string | undefined>;
    /**
     * WanFabric name
     */
    public readonly wanName!: pulumi.Output<string | undefined>;

    /**
     * Create a VpcConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcConfigArgs | VpcConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcConfigState | undefined;
            resourceInputs["closId"] = state ? state.closId : undefined;
            resourceInputs["closName"] = state ? state.closName : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["cnps"] = state ? state.cnps : undefined;
            resourceInputs["deployMode"] = state ? state.deployMode : undefined;
            resourceInputs["peerRgName"] = state ? state.peerRgName : undefined;
            resourceInputs["peerVnetId"] = state ? state.peerVnetId : undefined;
            resourceInputs["peerVnetName"] = state ? state.peerVnetName : undefined;
            resourceInputs["peerVpcCidr"] = state ? state.peerVpcCidr : undefined;
            resourceInputs["peerVpcId"] = state ? state.peerVpcId : undefined;
            resourceInputs["peervpcidr"] = state ? state.peervpcidr : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rgName"] = state ? state.rgName : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tfId"] = state ? state.tfId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topologyId"] = state ? state.topologyId : undefined;
            resourceInputs["topologyName"] = state ? state.topologyName : undefined;
            resourceInputs["vnetName"] = state ? state.vnetName : undefined;
            resourceInputs["wanId"] = state ? state.wanId : undefined;
            resourceInputs["wanName"] = state ? state.wanName : undefined;
        } else {
            const args = argsOrState as VpcConfigArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.cnps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cnps'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.topologyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topologyName'");
            }
            resourceInputs["closId"] = args ? args.closId : undefined;
            resourceInputs["closName"] = args ? args.closName : undefined;
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["cnps"] = args ? args.cnps : undefined;
            resourceInputs["deployMode"] = args ? args.deployMode : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rgName"] = args ? args.rgName : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topologyId"] = args ? args.topologyId : undefined;
            resourceInputs["topologyName"] = args ? args.topologyName : undefined;
            resourceInputs["vnetName"] = args ? args.vnetName : undefined;
            resourceInputs["wanId"] = args ? args.wanId : undefined;
            resourceInputs["wanName"] = args ? args.wanName : undefined;
            resourceInputs["peerRgName"] = undefined /*out*/;
            resourceInputs["peerVnetId"] = undefined /*out*/;
            resourceInputs["peerVnetName"] = undefined /*out*/;
            resourceInputs["peerVpcCidr"] = undefined /*out*/;
            resourceInputs["peerVpcId"] = undefined /*out*/;
            resourceInputs["peervpcidr"] = undefined /*out*/;
            resourceInputs["tfId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcConfig resources.
 */
export interface VpcConfigState {
    /**
     * cloudeos_clos resource ID
     */
    closId?: pulumi.Input<string>;
    /**
     * ClosFabric name
     */
    closName?: pulumi.Input<string>;
    /**
     * aws/azure/gcp
     */
    cloudProvider?: pulumi.Input<string>;
    cnps?: pulumi.Input<string>;
    deployMode?: pulumi.Input<string>;
    peerRgName?: pulumi.Input<string>;
    peerVnetId?: pulumi.Input<string>;
    peerVnetName?: pulumi.Input<string>;
    peerVpcCidr?: pulumi.Input<string>;
    peerVpcId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    peervpcidr?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Resource Group name
     */
    rgName?: pulumi.Input<string>;
    /**
     * CloudEdge/CloudLeaf
     */
    role?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tfId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpcConfigTimeouts>;
    /**
     * cloudeos_topology resource ID
     */
    topologyId?: pulumi.Input<string>;
    topologyName?: pulumi.Input<string>;
    /**
     * VNET name
     */
    vnetName?: pulumi.Input<string>;
    /**
     * cloudeos_wan resource ID
     */
    wanId?: pulumi.Input<string>;
    /**
     * WanFabric name
     */
    wanName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcConfig resource.
 */
export interface VpcConfigArgs {
    /**
     * cloudeos_clos resource ID
     */
    closId?: pulumi.Input<string>;
    /**
     * ClosFabric name
     */
    closName?: pulumi.Input<string>;
    /**
     * aws/azure/gcp
     */
    cloudProvider: pulumi.Input<string>;
    cnps: pulumi.Input<string>;
    deployMode?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    /**
     * Resource Group name
     */
    rgName?: pulumi.Input<string>;
    /**
     * CloudEdge/CloudLeaf
     */
    role: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpcConfigTimeouts>;
    /**
     * cloudeos_topology resource ID
     */
    topologyId?: pulumi.Input<string>;
    topologyName: pulumi.Input<string>;
    /**
     * VNET name
     */
    vnetName?: pulumi.Input<string>;
    /**
     * cloudeos_wan resource ID
     */
    wanId?: pulumi.Input<string>;
    /**
     * WanFabric name
     */
    wanName?: pulumi.Input<string>;
}
