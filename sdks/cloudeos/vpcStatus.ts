// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcStatus extends pulumi.CustomResource {
    /**
     * Get an existing VpcStatus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcStatusState, opts?: pulumi.CustomResourceOptions): VpcStatus {
        return new VpcStatus(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudeos:index/vpcStatus:VpcStatus';

    /**
     * Returns true if the given object is an instance of VpcStatus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcStatus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcStatus.__pulumiType;
    }

    /**
     * The unique identifier of the account
     */
    public readonly account!: pulumi.Output<string>;
    /**
     * CIDR block
     */
    public readonly cidrBlock!: pulumi.Output<string | undefined>;
    /**
     * ClosFabric name
     */
    public readonly closName!: pulumi.Output<string | undefined>;
    /**
     * aws/azure/gcp
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    public readonly cnps!: pulumi.Output<string>;
    /**
     * Deployment mode for the resources: provision or empty
     */
    public readonly deployMode!: pulumi.Output<string | undefined>;
    /**
     * Internet gateway id
     */
    public readonly igw!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    /**
     * Resource group needed by Azure
     */
    public readonly resourceGroup!: pulumi.Output<string | undefined>;
    public readonly rgName!: pulumi.Output<string | undefined>;
    /**
     * CloudEdge/CloudLeaf
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * Security group id
     */
    public readonly securityGroupId!: pulumi.Output<string | undefined>;
    /**
     * A mapping of tags to assign to the resource
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tfId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VpcStatusTimeouts | undefined>;
    /**
     * Base topology name
     */
    public readonly topologyName!: pulumi.Output<string | undefined>;
    public readonly vnetName!: pulumi.Output<string | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    /**
     * WanFabric name
     */
    public readonly wanName!: pulumi.Output<string | undefined>;

    /**
     * Create a VpcStatus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcStatusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcStatusArgs | VpcStatusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcStatusState | undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            resourceInputs["closName"] = state ? state.closName : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["cnps"] = state ? state.cnps : undefined;
            resourceInputs["deployMode"] = state ? state.deployMode : undefined;
            resourceInputs["igw"] = state ? state.igw : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resourceGroup"] = state ? state.resourceGroup : undefined;
            resourceInputs["rgName"] = state ? state.rgName : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tfId"] = state ? state.tfId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topologyName"] = state ? state.topologyName : undefined;
            resourceInputs["vnetName"] = state ? state.vnetName : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["wanName"] = state ? state.wanName : undefined;
        } else {
            const args = argsOrState as VpcStatusArgs | undefined;
            if ((!args || args.account === undefined) && !opts.urn) {
                throw new Error("Missing required property 'account'");
            }
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.cnps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cnps'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.tfId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tfId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            resourceInputs["closName"] = args ? args.closName : undefined;
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["cnps"] = args ? args.cnps : undefined;
            resourceInputs["deployMode"] = args ? args.deployMode : undefined;
            resourceInputs["igw"] = args ? args.igw : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            resourceInputs["rgName"] = args ? args.rgName : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tfId"] = args ? args.tfId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topologyName"] = args ? args.topologyName : undefined;
            resourceInputs["vnetName"] = args ? args.vnetName : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["wanName"] = args ? args.wanName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcStatus.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcStatus resources.
 */
export interface VpcStatusState {
    /**
     * The unique identifier of the account
     */
    account?: pulumi.Input<string>;
    /**
     * CIDR block
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * ClosFabric name
     */
    closName?: pulumi.Input<string>;
    /**
     * aws/azure/gcp
     */
    cloudProvider?: pulumi.Input<string>;
    cnps?: pulumi.Input<string>;
    /**
     * Deployment mode for the resources: provision or empty
     */
    deployMode?: pulumi.Input<string>;
    /**
     * Internet gateway id
     */
    igw?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Resource group needed by Azure
     */
    resourceGroup?: pulumi.Input<string>;
    rgName?: pulumi.Input<string>;
    /**
     * CloudEdge/CloudLeaf
     */
    role?: pulumi.Input<string>;
    /**
     * Security group id
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tfId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpcStatusTimeouts>;
    /**
     * Base topology name
     */
    topologyName?: pulumi.Input<string>;
    vnetName?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    /**
     * WanFabric name
     */
    wanName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcStatus resource.
 */
export interface VpcStatusArgs {
    /**
     * The unique identifier of the account
     */
    account: pulumi.Input<string>;
    /**
     * CIDR block
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * ClosFabric name
     */
    closName?: pulumi.Input<string>;
    /**
     * aws/azure/gcp
     */
    cloudProvider: pulumi.Input<string>;
    cnps: pulumi.Input<string>;
    /**
     * Deployment mode for the resources: provision or empty
     */
    deployMode?: pulumi.Input<string>;
    /**
     * Internet gateway id
     */
    igw?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    /**
     * Resource group needed by Azure
     */
    resourceGroup?: pulumi.Input<string>;
    rgName?: pulumi.Input<string>;
    /**
     * CloudEdge/CloudLeaf
     */
    role: pulumi.Input<string>;
    /**
     * Security group id
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tfId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpcStatusTimeouts>;
    /**
     * Base topology name
     */
    topologyName?: pulumi.Input<string>;
    vnetName?: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
    /**
     * WanFabric name
     */
    wanName?: pulumi.Input<string>;
}
