// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetProfileArgs, GetProfileResult, GetProfileOutputArgs } from "./getProfile";
export const getProfile: typeof import("./getProfile").getProfile = null as any;
export const getProfileOutput: typeof import("./getProfile").getProfileOutput = null as any;
utilities.lazyLoad(exports, ["getProfile","getProfileOutput"], () => require("./getProfile"));

export { GetUserLicenseArgs, GetUserLicenseResult, GetUserLicenseOutputArgs } from "./getUserLicense";
export const getUserLicense: typeof import("./getUserLicense").getUserLicense = null as any;
export const getUserLicenseOutput: typeof import("./getUserLicense").getUserLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getUserLicense","getUserLicenseOutput"], () => require("./getUserLicense"));

export { ProfileArgs, ProfileState } from "./profile";
export type Profile = import("./profile").Profile;
export const Profile: typeof import("./profile").Profile = null as any;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserRoleArgs, UserRoleState } from "./userRole";
export type UserRole = import("./userRole").UserRole;
export const UserRole: typeof import("./userRole").UserRole = null as any;
utilities.lazyLoad(exports, ["UserRole"], () => require("./userRole"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "salesforce:index/profile:Profile":
                return new Profile(name, <any>undefined, { urn })
            case "salesforce:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "salesforce:index/userRole:UserRole":
                return new UserRole(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("salesforce", "index/profile", _module)
pulumi.runtime.registerResourceModule("salesforce", "index/user", _module)
pulumi.runtime.registerResourceModule("salesforce", "index/userRole", _module)
pulumi.runtime.registerResourcePackage("salesforce", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:salesforce") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
