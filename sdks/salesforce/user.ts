// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'salesforce:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * The user’s alias. For example, jsmith.
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * The user’s email address.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * The email encoding for the user, such as ISO-8859-1 or UTF-8. Defaults to UTF-8.
     */
    public readonly emailEncodingKey!: pulumi.Output<string>;
    /**
     * The user’s language. Defaults to en_US.
     */
    public readonly languageLocaleKey!: pulumi.Output<string>;
    /**
     * The user’s last name.
     */
    public readonly lastName!: pulumi.Output<string>;
    /**
     * The value of the field affects formatting and parsing of values, especially numeric values, in the user interface. It
     * doesn’t affect the API. The field values are named according to the language, and the country if necessary, using
     * two-letter ISO codes. The set of names is based on the ISO standard. You can also manually set a user’s locale in the
     * user interface, and then use that value for inserting or updating other users via the API. Defaults to en_US.
     */
    public readonly localeSidKey!: pulumi.Output<string>;
    /**
     * ID of the user’s Profile. Use this value to cache metadata based on profile.
     */
    public readonly profileId!: pulumi.Output<string>;
    /**
     * Reset password and send an email to the user. No reset is performed if this field is omitted, is false, or was true and
     * remained true on subsequent apply. Please set to false and then true in subsequent applies, or have it set to true on
     * create to trigger the reset.
     */
    public readonly resetPassword!: pulumi.Output<boolean>;
    /**
     * A User time zone affects the offset used when displaying or entering times in the user interface. But the API doesn’t
     * use a User time zone when querying or setting values. Values for this field are named using region and key city,
     * according to ISO standards. You can also manually set one User time zone in the user interface, and then use that value
     * for creating or updating other User records via the API. Defaults to America/New_York.
     */
    public readonly timeZoneSidKey!: pulumi.Output<string>;
    /**
     * ID of the user’s UserRole.
     */
    public readonly userRoleId!: pulumi.Output<string | undefined>;
    /**
     * Contains the name that a user enters to log in to the API or the user interface. The value for this field must be in the
     * form of an email address, using all lowercase characters. It must also be unique across all organizations. If you try to
     * create or update a User with a duplicate value for this field, the operation is rejected. Each inserted User also counts
     * as a license. Every organization has a maximum number of licenses. If you attempt to exceed the maximum number of
     * licenses by inserting User records, the create request is rejected.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["emailEncodingKey"] = state ? state.emailEncodingKey : undefined;
            resourceInputs["languageLocaleKey"] = state ? state.languageLocaleKey : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["localeSidKey"] = state ? state.localeSidKey : undefined;
            resourceInputs["profileId"] = state ? state.profileId : undefined;
            resourceInputs["resetPassword"] = state ? state.resetPassword : undefined;
            resourceInputs["timeZoneSidKey"] = state ? state.timeZoneSidKey : undefined;
            resourceInputs["userRoleId"] = state ? state.userRoleId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.alias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alias'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.lastName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lastName'");
            }
            if ((!args || args.profileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["emailEncodingKey"] = args ? args.emailEncodingKey : undefined;
            resourceInputs["languageLocaleKey"] = args ? args.languageLocaleKey : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["localeSidKey"] = args ? args.localeSidKey : undefined;
            resourceInputs["profileId"] = args ? args.profileId : undefined;
            resourceInputs["resetPassword"] = args ? args.resetPassword : undefined;
            resourceInputs["timeZoneSidKey"] = args ? args.timeZoneSidKey : undefined;
            resourceInputs["userRoleId"] = args ? args.userRoleId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * The user’s alias. For example, jsmith.
     */
    alias?: pulumi.Input<string>;
    /**
     * The user’s email address.
     */
    email?: pulumi.Input<string>;
    /**
     * The email encoding for the user, such as ISO-8859-1 or UTF-8. Defaults to UTF-8.
     */
    emailEncodingKey?: pulumi.Input<string>;
    /**
     * The user’s language. Defaults to en_US.
     */
    languageLocaleKey?: pulumi.Input<string>;
    /**
     * The user’s last name.
     */
    lastName?: pulumi.Input<string>;
    /**
     * The value of the field affects formatting and parsing of values, especially numeric values, in the user interface. It
     * doesn’t affect the API. The field values are named according to the language, and the country if necessary, using
     * two-letter ISO codes. The set of names is based on the ISO standard. You can also manually set a user’s locale in the
     * user interface, and then use that value for inserting or updating other users via the API. Defaults to en_US.
     */
    localeSidKey?: pulumi.Input<string>;
    /**
     * ID of the user’s Profile. Use this value to cache metadata based on profile.
     */
    profileId?: pulumi.Input<string>;
    /**
     * Reset password and send an email to the user. No reset is performed if this field is omitted, is false, or was true and
     * remained true on subsequent apply. Please set to false and then true in subsequent applies, or have it set to true on
     * create to trigger the reset.
     */
    resetPassword?: pulumi.Input<boolean>;
    /**
     * A User time zone affects the offset used when displaying or entering times in the user interface. But the API doesn’t
     * use a User time zone when querying or setting values. Values for this field are named using region and key city,
     * according to ISO standards. You can also manually set one User time zone in the user interface, and then use that value
     * for creating or updating other User records via the API. Defaults to America/New_York.
     */
    timeZoneSidKey?: pulumi.Input<string>;
    /**
     * ID of the user’s UserRole.
     */
    userRoleId?: pulumi.Input<string>;
    /**
     * Contains the name that a user enters to log in to the API or the user interface. The value for this field must be in the
     * form of an email address, using all lowercase characters. It must also be unique across all organizations. If you try to
     * create or update a User with a duplicate value for this field, the operation is rejected. Each inserted User also counts
     * as a license. Every organization has a maximum number of licenses. If you attempt to exceed the maximum number of
     * licenses by inserting User records, the create request is rejected.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * The user’s alias. For example, jsmith.
     */
    alias: pulumi.Input<string>;
    /**
     * The user’s email address.
     */
    email: pulumi.Input<string>;
    /**
     * The email encoding for the user, such as ISO-8859-1 or UTF-8. Defaults to UTF-8.
     */
    emailEncodingKey?: pulumi.Input<string>;
    /**
     * The user’s language. Defaults to en_US.
     */
    languageLocaleKey?: pulumi.Input<string>;
    /**
     * The user’s last name.
     */
    lastName: pulumi.Input<string>;
    /**
     * The value of the field affects formatting and parsing of values, especially numeric values, in the user interface. It
     * doesn’t affect the API. The field values are named according to the language, and the country if necessary, using
     * two-letter ISO codes. The set of names is based on the ISO standard. You can also manually set a user’s locale in the
     * user interface, and then use that value for inserting or updating other users via the API. Defaults to en_US.
     */
    localeSidKey?: pulumi.Input<string>;
    /**
     * ID of the user’s Profile. Use this value to cache metadata based on profile.
     */
    profileId: pulumi.Input<string>;
    /**
     * Reset password and send an email to the user. No reset is performed if this field is omitted, is false, or was true and
     * remained true on subsequent apply. Please set to false and then true in subsequent applies, or have it set to true on
     * create to trigger the reset.
     */
    resetPassword?: pulumi.Input<boolean>;
    /**
     * A User time zone affects the offset used when displaying or entering times in the user interface. But the API doesn’t
     * use a User time zone when querying or setting values. Values for this field are named using region and key city,
     * according to ISO standards. You can also manually set one User time zone in the user interface, and then use that value
     * for creating or updating other User records via the API. Defaults to America/New_York.
     */
    timeZoneSidKey?: pulumi.Input<string>;
    /**
     * ID of the user’s UserRole.
     */
    userRoleId?: pulumi.Input<string>;
    /**
     * Contains the name that a user enters to log in to the API or the user interface. The value for this field must be in the
     * form of an email address, using all lowercase characters. It must also be unique across all organizations. If you try to
     * create or update a User with a duplicate value for this field, the operation is rejected. Each inserted User also counts
     * as a license. Every organization has a maximum number of licenses. If you attempt to exceed the maximum number of
     * licenses by inserting User records, the create request is rejected.
     */
    username: pulumi.Input<string>;
}
