// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AuthSettingsArgs, AuthSettingsState } from "./authSettings";
export type AuthSettings = import("./authSettings").AuthSettings;
export const AuthSettings: typeof import("./authSettings").AuthSettings = null as any;
utilities.lazyLoad(exports, ["AuthSettings"], () => require("./authSettings"));

export { CleanupSettingsArgs, CleanupSettingsState } from "./cleanupSettings";
export type CleanupSettings = import("./cleanupSettings").CleanupSettings;
export const CleanupSettings: typeof import("./cleanupSettings").CleanupSettings = null as any;
utilities.lazyLoad(exports, ["CleanupSettings"], () => require("./cleanupSettings"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ContextParametersArgs, ContextParametersState } from "./contextParameters";
export type ContextParameters = import("./contextParameters").ContextParameters;
export const ContextParameters: typeof import("./contextParameters").ContextParameters = null as any;
utilities.lazyLoad(exports, ["ContextParameters"], () => require("./contextParameters"));

export { EmailSettingsArgs, EmailSettingsState } from "./emailSettings";
export type EmailSettings = import("./emailSettings").EmailSettings;
export const EmailSettings: typeof import("./emailSettings").EmailSettings = null as any;
utilities.lazyLoad(exports, ["EmailSettings"], () => require("./emailSettings"));

export { GetBuildConfigurationArgs, GetBuildConfigurationResult, GetBuildConfigurationOutputArgs } from "./getBuildConfiguration";
export const getBuildConfiguration: typeof import("./getBuildConfiguration").getBuildConfiguration = null as any;
export const getBuildConfigurationOutput: typeof import("./getBuildConfiguration").getBuildConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getBuildConfiguration","getBuildConfigurationOutput"], () => require("./getBuildConfiguration"));

export { GetPoolArgs, GetPoolResult, GetPoolOutputArgs } from "./getPool";
export const getPool: typeof import("./getPool").getPool = null as any;
export const getPoolOutput: typeof import("./getPool").getPoolOutput = null as any;
utilities.lazyLoad(exports, ["getPool","getPoolOutput"], () => require("./getPool"));

export { GetServerResult } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GlobalSettingsArgs, GlobalSettingsState } from "./globalSettings";
export type GlobalSettings = import("./globalSettings").GlobalSettings;
export const GlobalSettings: typeof import("./globalSettings").GlobalSettings = null as any;
utilities.lazyLoad(exports, ["GlobalSettings"], () => require("./globalSettings"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMemberArgs, GroupMemberState } from "./groupMember";
export type GroupMember = import("./groupMember").GroupMember;
export const GroupMember: typeof import("./groupMember").GroupMember = null as any;
utilities.lazyLoad(exports, ["GroupMember"], () => require("./groupMember"));

export { LicenseArgs, LicenseState } from "./license";
export type License = import("./license").License;
export const License: typeof import("./license").License = null as any;
utilities.lazyLoad(exports, ["License"], () => require("./license"));

export { PoolArgs, PoolState } from "./pool";
export type Pool = import("./pool").Pool;
export const Pool: typeof import("./pool").Pool = null as any;
utilities.lazyLoad(exports, ["Pool"], () => require("./pool"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectParameterArgs, ProjectParameterState } from "./projectParameter";
export type ProjectParameter = import("./projectParameter").ProjectParameter;
export const ProjectParameter: typeof import("./projectParameter").ProjectParameter = null as any;
utilities.lazyLoad(exports, ["ProjectParameter"], () => require("./projectParameter"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { SecureTokenArgs, SecureTokenState } from "./secureToken";
export type SecureToken = import("./secureToken").SecureToken;
export const SecureToken: typeof import("./secureToken").SecureToken = null as any;
utilities.lazyLoad(exports, ["SecureToken"], () => require("./secureToken"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { VcsrootArgs, VcsrootState } from "./vcsroot";
export type Vcsroot = import("./vcsroot").Vcsroot;
export const Vcsroot: typeof import("./vcsroot").Vcsroot = null as any;
utilities.lazyLoad(exports, ["Vcsroot"], () => require("./vcsroot"));

export { VersionedSettingsArgs, VersionedSettingsState } from "./versionedSettings";
export type VersionedSettings = import("./versionedSettings").VersionedSettings;
export const VersionedSettings: typeof import("./versionedSettings").VersionedSettings = null as any;
utilities.lazyLoad(exports, ["VersionedSettings"], () => require("./versionedSettings"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "teamcity:index/authSettings:AuthSettings":
                return new AuthSettings(name, <any>undefined, { urn })
            case "teamcity:index/cleanupSettings:CleanupSettings":
                return new CleanupSettings(name, <any>undefined, { urn })
            case "teamcity:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "teamcity:index/contextParameters:ContextParameters":
                return new ContextParameters(name, <any>undefined, { urn })
            case "teamcity:index/emailSettings:EmailSettings":
                return new EmailSettings(name, <any>undefined, { urn })
            case "teamcity:index/globalSettings:GlobalSettings":
                return new GlobalSettings(name, <any>undefined, { urn })
            case "teamcity:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "teamcity:index/groupMember:GroupMember":
                return new GroupMember(name, <any>undefined, { urn })
            case "teamcity:index/license:License":
                return new License(name, <any>undefined, { urn })
            case "teamcity:index/pool:Pool":
                return new Pool(name, <any>undefined, { urn })
            case "teamcity:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "teamcity:index/projectParameter:ProjectParameter":
                return new ProjectParameter(name, <any>undefined, { urn })
            case "teamcity:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "teamcity:index/secureToken:SecureToken":
                return new SecureToken(name, <any>undefined, { urn })
            case "teamcity:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "teamcity:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "teamcity:index/vcsroot:Vcsroot":
                return new Vcsroot(name, <any>undefined, { urn })
            case "teamcity:index/versionedSettings:VersionedSettings":
                return new VersionedSettings(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("teamcity", "index/authSettings", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/cleanupSettings", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/connection", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/contextParameters", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/emailSettings", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/globalSettings", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/group", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/groupMember", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/license", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/pool", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/project", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/projectParameter", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/role", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/secureToken", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/user", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/vcsroot", _module)
pulumi.runtime.registerResourceModule("teamcity", "index/versionedSettings", _module)
pulumi.runtime.registerResourcePackage("teamcity", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:teamcity") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
