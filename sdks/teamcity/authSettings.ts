// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AuthSettings extends pulumi.CustomResource {
    /**
     * Get an existing AuthSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthSettingsState, opts?: pulumi.CustomResourceOptions): AuthSettings {
        return new AuthSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'teamcity:index/authSettings:AuthSettings';

    /**
     * Returns true if the given object is an instance of AuthSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthSettings.__pulumiType;
    }

    public readonly allowGuest!: pulumi.Output<boolean>;
    public readonly collapseLoginForm!: pulumi.Output<boolean>;
    public readonly emailVerification!: pulumi.Output<boolean>;
    public readonly guestUsername!: pulumi.Output<string>;
    public readonly modules!: pulumi.Output<outputs.AuthSettingsModules>;
    public readonly perProjectPermissions!: pulumi.Output<boolean>;
    public readonly welcomeText!: pulumi.Output<string>;

    /**
     * Create a AuthSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthSettingsArgs | AuthSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthSettingsState | undefined;
            resourceInputs["allowGuest"] = state ? state.allowGuest : undefined;
            resourceInputs["collapseLoginForm"] = state ? state.collapseLoginForm : undefined;
            resourceInputs["emailVerification"] = state ? state.emailVerification : undefined;
            resourceInputs["guestUsername"] = state ? state.guestUsername : undefined;
            resourceInputs["modules"] = state ? state.modules : undefined;
            resourceInputs["perProjectPermissions"] = state ? state.perProjectPermissions : undefined;
            resourceInputs["welcomeText"] = state ? state.welcomeText : undefined;
        } else {
            const args = argsOrState as AuthSettingsArgs | undefined;
            if ((!args || args.allowGuest === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowGuest'");
            }
            if ((!args || args.collapseLoginForm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collapseLoginForm'");
            }
            if ((!args || args.emailVerification === undefined) && !opts.urn) {
                throw new Error("Missing required property 'emailVerification'");
            }
            if ((!args || args.guestUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'guestUsername'");
            }
            if ((!args || args.modules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modules'");
            }
            if ((!args || args.perProjectPermissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'perProjectPermissions'");
            }
            if ((!args || args.welcomeText === undefined) && !opts.urn) {
                throw new Error("Missing required property 'welcomeText'");
            }
            resourceInputs["allowGuest"] = args ? args.allowGuest : undefined;
            resourceInputs["collapseLoginForm"] = args ? args.collapseLoginForm : undefined;
            resourceInputs["emailVerification"] = args ? args.emailVerification : undefined;
            resourceInputs["guestUsername"] = args ? args.guestUsername : undefined;
            resourceInputs["modules"] = args ? args.modules : undefined;
            resourceInputs["perProjectPermissions"] = args ? args.perProjectPermissions : undefined;
            resourceInputs["welcomeText"] = args ? args.welcomeText : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuthSettings resources.
 */
export interface AuthSettingsState {
    allowGuest?: pulumi.Input<boolean>;
    collapseLoginForm?: pulumi.Input<boolean>;
    emailVerification?: pulumi.Input<boolean>;
    guestUsername?: pulumi.Input<string>;
    modules?: pulumi.Input<inputs.AuthSettingsModules>;
    perProjectPermissions?: pulumi.Input<boolean>;
    welcomeText?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthSettings resource.
 */
export interface AuthSettingsArgs {
    allowGuest: pulumi.Input<boolean>;
    collapseLoginForm: pulumi.Input<boolean>;
    emailVerification: pulumi.Input<boolean>;
    guestUsername: pulumi.Input<string>;
    modules: pulumi.Input<inputs.AuthSettingsModules>;
    perProjectPermissions: pulumi.Input<boolean>;
    welcomeText: pulumi.Input<string>;
}
