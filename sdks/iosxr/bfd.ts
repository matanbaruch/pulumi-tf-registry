// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Bfd extends pulumi.CustomResource {
    /**
     * Get an existing Bfd resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BfdState, opts?: pulumi.CustomResourceOptions): Bfd {
        return new Bfd(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxr:index/bfd:Bfd';

    /**
     * Returns true if the given object is an instance of Bfd.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bfd {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bfd.__pulumiType;
    }

    /**
     * Use inheritence mechanism
     */
    public readonly bundleCoexistenceBobBlbInherit!: pulumi.Output<boolean | undefined>;
    /**
     * Use BFD logical Bundle natively
     */
    public readonly bundleCoexistenceBobBlbLogical!: pulumi.Output<boolean | undefined>;
    /**
     * Initial delay before bringing up session - Range: `1`-`518400000`
     */
    public readonly dampeningBundleMemberInitialWait!: pulumi.Output<number | undefined>;
    /**
     * Apply immediate dampening and only when failure is L3 specific
     */
    public readonly dampeningBundleMemberL3OnlyMode!: pulumi.Output<boolean | undefined>;
    /**
     * Maximum delay before bringing up session - Range: `1`-`518400000`
     */
    public readonly dampeningBundleMemberMaximumWait!: pulumi.Output<number | undefined>;
    /**
     * Secondary delay before bringing up session - Range: `1`-`518400000`
     */
    public readonly dampeningBundleMemberSecondaryWait!: pulumi.Output<number | undefined>;
    /**
     * Disable BFD dampening
     */
    public readonly dampeningDisable!: pulumi.Output<boolean | undefined>;
    /**
     * Enable DOWN state session monitoring extensions
     */
    public readonly dampeningExtensionsDownMonitoring!: pulumi.Output<boolean | undefined>;
    /**
     * Initial delay before bringing up session - Range: `1`-`3600000`
     */
    public readonly dampeningInitialWait!: pulumi.Output<number | undefined>;
    /**
     * Maximum delay before bringing up session - Range: `1`-`3600000`
     */
    public readonly dampeningMaximumWait!: pulumi.Output<number | undefined>;
    /**
     * Secondary delay before bringing up session - Range: `1`-`3600000`
     */
    public readonly dampeningSecondaryWait!: pulumi.Output<number | undefined>;
    /**
     * Stability threshold to enable dampening - Range: `60000`-`3600000`
     */
    public readonly dampeningThreshold!: pulumi.Output<number | undefined>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Disable BFD echo mode
     */
    public readonly echoDisable!: pulumi.Output<boolean | undefined>;
    /**
     * The preferred minimum interval (in ms) for the BFD session - Range: `15`-`2000`
     */
    public readonly echoIpv4BundlePerMemberPreferredMinimumInterval!: pulumi.Output<number | undefined>;
    /**
     * BFD echo source IP address
     */
    public readonly echoIpv4Source!: pulumi.Output<string | undefined>;
    /**
     * Count of consecutive bad latency packets to take session down - Range: `1`-`10`
     */
    public readonly echoLatencyDetectCount!: pulumi.Output<number | undefined>;
    /**
     * Percentage of detection time to consider as bad latency - Range: `100`-`250`
     */
    public readonly echoLatencyDetectPercentage!: pulumi.Output<number | undefined>;
    /**
     * Ignore remote 'Required Min Echo RX Interval' setting
     */
    public readonly echoStartupValidateForce!: pulumi.Output<boolean | undefined>;
    /**
     * Configure BFD on an interface
     */
    public readonly interfaces!: pulumi.Output<outputs.BfdInterface[] | undefined>;
    /**
     * Disable BFD checksum
     */
    public readonly ipv6ChecksumDisable!: pulumi.Output<boolean | undefined>;
    /**
     * TTL Drop Threshold - Range: `0`-`254`
     */
    public readonly multihopTtlDropThreshold!: pulumi.Output<number | undefined>;
    /**
     * Specify a location
     */
    public readonly multipathLocations!: pulumi.Output<outputs.BfdMultipathLocation[] | undefined>;
    /**
     * Configure BFD trap pre-mapped
     */
    public readonly trapSinglehopPreMapped!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Bfd resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BfdArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BfdArgs | BfdState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BfdState | undefined;
            resourceInputs["bundleCoexistenceBobBlbInherit"] = state ? state.bundleCoexistenceBobBlbInherit : undefined;
            resourceInputs["bundleCoexistenceBobBlbLogical"] = state ? state.bundleCoexistenceBobBlbLogical : undefined;
            resourceInputs["dampeningBundleMemberInitialWait"] = state ? state.dampeningBundleMemberInitialWait : undefined;
            resourceInputs["dampeningBundleMemberL3OnlyMode"] = state ? state.dampeningBundleMemberL3OnlyMode : undefined;
            resourceInputs["dampeningBundleMemberMaximumWait"] = state ? state.dampeningBundleMemberMaximumWait : undefined;
            resourceInputs["dampeningBundleMemberSecondaryWait"] = state ? state.dampeningBundleMemberSecondaryWait : undefined;
            resourceInputs["dampeningDisable"] = state ? state.dampeningDisable : undefined;
            resourceInputs["dampeningExtensionsDownMonitoring"] = state ? state.dampeningExtensionsDownMonitoring : undefined;
            resourceInputs["dampeningInitialWait"] = state ? state.dampeningInitialWait : undefined;
            resourceInputs["dampeningMaximumWait"] = state ? state.dampeningMaximumWait : undefined;
            resourceInputs["dampeningSecondaryWait"] = state ? state.dampeningSecondaryWait : undefined;
            resourceInputs["dampeningThreshold"] = state ? state.dampeningThreshold : undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["echoDisable"] = state ? state.echoDisable : undefined;
            resourceInputs["echoIpv4BundlePerMemberPreferredMinimumInterval"] = state ? state.echoIpv4BundlePerMemberPreferredMinimumInterval : undefined;
            resourceInputs["echoIpv4Source"] = state ? state.echoIpv4Source : undefined;
            resourceInputs["echoLatencyDetectCount"] = state ? state.echoLatencyDetectCount : undefined;
            resourceInputs["echoLatencyDetectPercentage"] = state ? state.echoLatencyDetectPercentage : undefined;
            resourceInputs["echoStartupValidateForce"] = state ? state.echoStartupValidateForce : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["ipv6ChecksumDisable"] = state ? state.ipv6ChecksumDisable : undefined;
            resourceInputs["multihopTtlDropThreshold"] = state ? state.multihopTtlDropThreshold : undefined;
            resourceInputs["multipathLocations"] = state ? state.multipathLocations : undefined;
            resourceInputs["trapSinglehopPreMapped"] = state ? state.trapSinglehopPreMapped : undefined;
        } else {
            const args = argsOrState as BfdArgs | undefined;
            resourceInputs["bundleCoexistenceBobBlbInherit"] = args ? args.bundleCoexistenceBobBlbInherit : undefined;
            resourceInputs["bundleCoexistenceBobBlbLogical"] = args ? args.bundleCoexistenceBobBlbLogical : undefined;
            resourceInputs["dampeningBundleMemberInitialWait"] = args ? args.dampeningBundleMemberInitialWait : undefined;
            resourceInputs["dampeningBundleMemberL3OnlyMode"] = args ? args.dampeningBundleMemberL3OnlyMode : undefined;
            resourceInputs["dampeningBundleMemberMaximumWait"] = args ? args.dampeningBundleMemberMaximumWait : undefined;
            resourceInputs["dampeningBundleMemberSecondaryWait"] = args ? args.dampeningBundleMemberSecondaryWait : undefined;
            resourceInputs["dampeningDisable"] = args ? args.dampeningDisable : undefined;
            resourceInputs["dampeningExtensionsDownMonitoring"] = args ? args.dampeningExtensionsDownMonitoring : undefined;
            resourceInputs["dampeningInitialWait"] = args ? args.dampeningInitialWait : undefined;
            resourceInputs["dampeningMaximumWait"] = args ? args.dampeningMaximumWait : undefined;
            resourceInputs["dampeningSecondaryWait"] = args ? args.dampeningSecondaryWait : undefined;
            resourceInputs["dampeningThreshold"] = args ? args.dampeningThreshold : undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["echoDisable"] = args ? args.echoDisable : undefined;
            resourceInputs["echoIpv4BundlePerMemberPreferredMinimumInterval"] = args ? args.echoIpv4BundlePerMemberPreferredMinimumInterval : undefined;
            resourceInputs["echoIpv4Source"] = args ? args.echoIpv4Source : undefined;
            resourceInputs["echoLatencyDetectCount"] = args ? args.echoLatencyDetectCount : undefined;
            resourceInputs["echoLatencyDetectPercentage"] = args ? args.echoLatencyDetectPercentage : undefined;
            resourceInputs["echoStartupValidateForce"] = args ? args.echoStartupValidateForce : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["ipv6ChecksumDisable"] = args ? args.ipv6ChecksumDisable : undefined;
            resourceInputs["multihopTtlDropThreshold"] = args ? args.multihopTtlDropThreshold : undefined;
            resourceInputs["multipathLocations"] = args ? args.multipathLocations : undefined;
            resourceInputs["trapSinglehopPreMapped"] = args ? args.trapSinglehopPreMapped : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bfd.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Bfd resources.
 */
export interface BfdState {
    /**
     * Use inheritence mechanism
     */
    bundleCoexistenceBobBlbInherit?: pulumi.Input<boolean>;
    /**
     * Use BFD logical Bundle natively
     */
    bundleCoexistenceBobBlbLogical?: pulumi.Input<boolean>;
    /**
     * Initial delay before bringing up session - Range: `1`-`518400000`
     */
    dampeningBundleMemberInitialWait?: pulumi.Input<number>;
    /**
     * Apply immediate dampening and only when failure is L3 specific
     */
    dampeningBundleMemberL3OnlyMode?: pulumi.Input<boolean>;
    /**
     * Maximum delay before bringing up session - Range: `1`-`518400000`
     */
    dampeningBundleMemberMaximumWait?: pulumi.Input<number>;
    /**
     * Secondary delay before bringing up session - Range: `1`-`518400000`
     */
    dampeningBundleMemberSecondaryWait?: pulumi.Input<number>;
    /**
     * Disable BFD dampening
     */
    dampeningDisable?: pulumi.Input<boolean>;
    /**
     * Enable DOWN state session monitoring extensions
     */
    dampeningExtensionsDownMonitoring?: pulumi.Input<boolean>;
    /**
     * Initial delay before bringing up session - Range: `1`-`3600000`
     */
    dampeningInitialWait?: pulumi.Input<number>;
    /**
     * Maximum delay before bringing up session - Range: `1`-`3600000`
     */
    dampeningMaximumWait?: pulumi.Input<number>;
    /**
     * Secondary delay before bringing up session - Range: `1`-`3600000`
     */
    dampeningSecondaryWait?: pulumi.Input<number>;
    /**
     * Stability threshold to enable dampening - Range: `60000`-`3600000`
     */
    dampeningThreshold?: pulumi.Input<number>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Disable BFD echo mode
     */
    echoDisable?: pulumi.Input<boolean>;
    /**
     * The preferred minimum interval (in ms) for the BFD session - Range: `15`-`2000`
     */
    echoIpv4BundlePerMemberPreferredMinimumInterval?: pulumi.Input<number>;
    /**
     * BFD echo source IP address
     */
    echoIpv4Source?: pulumi.Input<string>;
    /**
     * Count of consecutive bad latency packets to take session down - Range: `1`-`10`
     */
    echoLatencyDetectCount?: pulumi.Input<number>;
    /**
     * Percentage of detection time to consider as bad latency - Range: `100`-`250`
     */
    echoLatencyDetectPercentage?: pulumi.Input<number>;
    /**
     * Ignore remote 'Required Min Echo RX Interval' setting
     */
    echoStartupValidateForce?: pulumi.Input<boolean>;
    /**
     * Configure BFD on an interface
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.BfdInterface>[]>;
    /**
     * Disable BFD checksum
     */
    ipv6ChecksumDisable?: pulumi.Input<boolean>;
    /**
     * TTL Drop Threshold - Range: `0`-`254`
     */
    multihopTtlDropThreshold?: pulumi.Input<number>;
    /**
     * Specify a location
     */
    multipathLocations?: pulumi.Input<pulumi.Input<inputs.BfdMultipathLocation>[]>;
    /**
     * Configure BFD trap pre-mapped
     */
    trapSinglehopPreMapped?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Bfd resource.
 */
export interface BfdArgs {
    /**
     * Use inheritence mechanism
     */
    bundleCoexistenceBobBlbInherit?: pulumi.Input<boolean>;
    /**
     * Use BFD logical Bundle natively
     */
    bundleCoexistenceBobBlbLogical?: pulumi.Input<boolean>;
    /**
     * Initial delay before bringing up session - Range: `1`-`518400000`
     */
    dampeningBundleMemberInitialWait?: pulumi.Input<number>;
    /**
     * Apply immediate dampening and only when failure is L3 specific
     */
    dampeningBundleMemberL3OnlyMode?: pulumi.Input<boolean>;
    /**
     * Maximum delay before bringing up session - Range: `1`-`518400000`
     */
    dampeningBundleMemberMaximumWait?: pulumi.Input<number>;
    /**
     * Secondary delay before bringing up session - Range: `1`-`518400000`
     */
    dampeningBundleMemberSecondaryWait?: pulumi.Input<number>;
    /**
     * Disable BFD dampening
     */
    dampeningDisable?: pulumi.Input<boolean>;
    /**
     * Enable DOWN state session monitoring extensions
     */
    dampeningExtensionsDownMonitoring?: pulumi.Input<boolean>;
    /**
     * Initial delay before bringing up session - Range: `1`-`3600000`
     */
    dampeningInitialWait?: pulumi.Input<number>;
    /**
     * Maximum delay before bringing up session - Range: `1`-`3600000`
     */
    dampeningMaximumWait?: pulumi.Input<number>;
    /**
     * Secondary delay before bringing up session - Range: `1`-`3600000`
     */
    dampeningSecondaryWait?: pulumi.Input<number>;
    /**
     * Stability threshold to enable dampening - Range: `60000`-`3600000`
     */
    dampeningThreshold?: pulumi.Input<number>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Disable BFD echo mode
     */
    echoDisable?: pulumi.Input<boolean>;
    /**
     * The preferred minimum interval (in ms) for the BFD session - Range: `15`-`2000`
     */
    echoIpv4BundlePerMemberPreferredMinimumInterval?: pulumi.Input<number>;
    /**
     * BFD echo source IP address
     */
    echoIpv4Source?: pulumi.Input<string>;
    /**
     * Count of consecutive bad latency packets to take session down - Range: `1`-`10`
     */
    echoLatencyDetectCount?: pulumi.Input<number>;
    /**
     * Percentage of detection time to consider as bad latency - Range: `100`-`250`
     */
    echoLatencyDetectPercentage?: pulumi.Input<number>;
    /**
     * Ignore remote 'Required Min Echo RX Interval' setting
     */
    echoStartupValidateForce?: pulumi.Input<boolean>;
    /**
     * Configure BFD on an interface
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.BfdInterface>[]>;
    /**
     * Disable BFD checksum
     */
    ipv6ChecksumDisable?: pulumi.Input<boolean>;
    /**
     * TTL Drop Threshold - Range: `0`-`254`
     */
    multihopTtlDropThreshold?: pulumi.Input<number>;
    /**
     * Specify a location
     */
    multipathLocations?: pulumi.Input<pulumi.Input<inputs.BfdMultipathLocation>[]>;
    /**
     * Configure BFD trap pre-mapped
     */
    trapSinglehopPreMapped?: pulumi.Input<boolean>;
}
