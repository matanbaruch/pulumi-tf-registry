// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Logging extends pulumi.CustomResource {
    /**
     * Get an existing Logging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoggingState, opts?: pulumi.CustomResourceOptions): Logging {
        return new Logging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxr:index/logging:Logging';

    /**
     * Returns true if the given object is an instance of Logging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Logging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Logging.__pulumiType;
    }

    /**
     * configure this node - Choices: `alerts`, `critical`, `debugging`, `emergencies`, `errors`, `informational`,
     * `notifications`, `warnings`
     */
    public readonly bufferedLevel!: pulumi.Output<string | undefined>;
    /**
     * Logging buffer size - Range: `307200`-`125000000`
     */
    public readonly bufferedLoggingBufferSize!: pulumi.Output<number | undefined>;
    /**
     * Set console logging - Choices: `alerts`, `critical`, `debugging`, `disable`, `emergencies`, `errors`, `informational`,
     * `notifications`, `warning`
     */
    public readonly console!: pulumi.Output<string | undefined>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Include alarm source location in message text
     */
    public readonly eventsDisplayLocation!: pulumi.Output<boolean | undefined>;
    /**
     * Log all events with equal or higher (lower level) severity - Choices: `alerts`, `critical`, `emergencies`, `errors`,
     * `informational`, `notifications`, `warnings`
     */
    public readonly eventsLevel!: pulumi.Output<string | undefined>;
    /**
     * configure this node - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`, `local3`, `local4`,
     * `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`, `sys9`, `syslog`,
     * `user`, `uucp`
     */
    public readonly facilityLevel!: pulumi.Output<string | undefined>;
    /**
     * Hostname prefix to add on msgs to servers
     */
    public readonly hostnameprefix!: pulumi.Output<string | undefined>;
    /**
     * Set IP DSCP (DiffServ CodePoint)
     */
    public readonly ipv4Dscp!: pulumi.Output<string | undefined>;
    /**
     * Set monitor logging - Choices: `alerts`, `critical`, `debugging`, `disable`, `emergencies`, `errors`, `informational`,
     * `notifications`, `warning`
     */
    public readonly monitor!: pulumi.Output<string | undefined>;
    /**
     * Suppress consecutive duplicate messages
     */
    public readonly suppressDuplicates!: pulumi.Output<boolean | undefined>;
    /**
     * Set trap logging - Choices: `alerts`, `critical`, `debugging`, `disable`, `emergencies`, `errors`, `informational`,
     * `notifications`, `warning`
     */
    public readonly trap!: pulumi.Output<string | undefined>;

    /**
     * Create a Logging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoggingArgs | LoggingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoggingState | undefined;
            resourceInputs["bufferedLevel"] = state ? state.bufferedLevel : undefined;
            resourceInputs["bufferedLoggingBufferSize"] = state ? state.bufferedLoggingBufferSize : undefined;
            resourceInputs["console"] = state ? state.console : undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["eventsDisplayLocation"] = state ? state.eventsDisplayLocation : undefined;
            resourceInputs["eventsLevel"] = state ? state.eventsLevel : undefined;
            resourceInputs["facilityLevel"] = state ? state.facilityLevel : undefined;
            resourceInputs["hostnameprefix"] = state ? state.hostnameprefix : undefined;
            resourceInputs["ipv4Dscp"] = state ? state.ipv4Dscp : undefined;
            resourceInputs["monitor"] = state ? state.monitor : undefined;
            resourceInputs["suppressDuplicates"] = state ? state.suppressDuplicates : undefined;
            resourceInputs["trap"] = state ? state.trap : undefined;
        } else {
            const args = argsOrState as LoggingArgs | undefined;
            resourceInputs["bufferedLevel"] = args ? args.bufferedLevel : undefined;
            resourceInputs["bufferedLoggingBufferSize"] = args ? args.bufferedLoggingBufferSize : undefined;
            resourceInputs["console"] = args ? args.console : undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["eventsDisplayLocation"] = args ? args.eventsDisplayLocation : undefined;
            resourceInputs["eventsLevel"] = args ? args.eventsLevel : undefined;
            resourceInputs["facilityLevel"] = args ? args.facilityLevel : undefined;
            resourceInputs["hostnameprefix"] = args ? args.hostnameprefix : undefined;
            resourceInputs["ipv4Dscp"] = args ? args.ipv4Dscp : undefined;
            resourceInputs["monitor"] = args ? args.monitor : undefined;
            resourceInputs["suppressDuplicates"] = args ? args.suppressDuplicates : undefined;
            resourceInputs["trap"] = args ? args.trap : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Logging.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Logging resources.
 */
export interface LoggingState {
    /**
     * configure this node - Choices: `alerts`, `critical`, `debugging`, `emergencies`, `errors`, `informational`,
     * `notifications`, `warnings`
     */
    bufferedLevel?: pulumi.Input<string>;
    /**
     * Logging buffer size - Range: `307200`-`125000000`
     */
    bufferedLoggingBufferSize?: pulumi.Input<number>;
    /**
     * Set console logging - Choices: `alerts`, `critical`, `debugging`, `disable`, `emergencies`, `errors`, `informational`,
     * `notifications`, `warning`
     */
    console?: pulumi.Input<string>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Include alarm source location in message text
     */
    eventsDisplayLocation?: pulumi.Input<boolean>;
    /**
     * Log all events with equal or higher (lower level) severity - Choices: `alerts`, `critical`, `emergencies`, `errors`,
     * `informational`, `notifications`, `warnings`
     */
    eventsLevel?: pulumi.Input<string>;
    /**
     * configure this node - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`, `local3`, `local4`,
     * `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`, `sys9`, `syslog`,
     * `user`, `uucp`
     */
    facilityLevel?: pulumi.Input<string>;
    /**
     * Hostname prefix to add on msgs to servers
     */
    hostnameprefix?: pulumi.Input<string>;
    /**
     * Set IP DSCP (DiffServ CodePoint)
     */
    ipv4Dscp?: pulumi.Input<string>;
    /**
     * Set monitor logging - Choices: `alerts`, `critical`, `debugging`, `disable`, `emergencies`, `errors`, `informational`,
     * `notifications`, `warning`
     */
    monitor?: pulumi.Input<string>;
    /**
     * Suppress consecutive duplicate messages
     */
    suppressDuplicates?: pulumi.Input<boolean>;
    /**
     * Set trap logging - Choices: `alerts`, `critical`, `debugging`, `disable`, `emergencies`, `errors`, `informational`,
     * `notifications`, `warning`
     */
    trap?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Logging resource.
 */
export interface LoggingArgs {
    /**
     * configure this node - Choices: `alerts`, `critical`, `debugging`, `emergencies`, `errors`, `informational`,
     * `notifications`, `warnings`
     */
    bufferedLevel?: pulumi.Input<string>;
    /**
     * Logging buffer size - Range: `307200`-`125000000`
     */
    bufferedLoggingBufferSize?: pulumi.Input<number>;
    /**
     * Set console logging - Choices: `alerts`, `critical`, `debugging`, `disable`, `emergencies`, `errors`, `informational`,
     * `notifications`, `warning`
     */
    console?: pulumi.Input<string>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Include alarm source location in message text
     */
    eventsDisplayLocation?: pulumi.Input<boolean>;
    /**
     * Log all events with equal or higher (lower level) severity - Choices: `alerts`, `critical`, `emergencies`, `errors`,
     * `informational`, `notifications`, `warnings`
     */
    eventsLevel?: pulumi.Input<string>;
    /**
     * configure this node - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`, `local3`, `local4`,
     * `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`, `sys9`, `syslog`,
     * `user`, `uucp`
     */
    facilityLevel?: pulumi.Input<string>;
    /**
     * Hostname prefix to add on msgs to servers
     */
    hostnameprefix?: pulumi.Input<string>;
    /**
     * Set IP DSCP (DiffServ CodePoint)
     */
    ipv4Dscp?: pulumi.Input<string>;
    /**
     * Set monitor logging - Choices: `alerts`, `critical`, `debugging`, `disable`, `emergencies`, `errors`, `informational`,
     * `notifications`, `warning`
     */
    monitor?: pulumi.Input<string>;
    /**
     * Suppress consecutive duplicate messages
     */
    suppressDuplicates?: pulumi.Input<boolean>;
    /**
     * Set trap logging - Choices: `alerts`, `critical`, `debugging`, `disable`, `emergencies`, `errors`, `informational`,
     * `notifications`, `warning`
     */
    trap?: pulumi.Input<string>;
}
