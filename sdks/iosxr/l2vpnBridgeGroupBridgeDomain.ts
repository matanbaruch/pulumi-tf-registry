// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class L2vpnBridgeGroupBridgeDomain extends pulumi.CustomResource {
    /**
     * Get an existing L2vpnBridgeGroupBridgeDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: L2vpnBridgeGroupBridgeDomainState, opts?: pulumi.CustomResourceOptions): L2vpnBridgeGroupBridgeDomain {
        return new L2vpnBridgeGroupBridgeDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxr:index/l2vpnBridgeGroupBridgeDomain:L2vpnBridgeGroupBridgeDomain';

    /**
     * Returns true if the given object is an instance of L2vpnBridgeGroupBridgeDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is L2vpnBridgeGroupBridgeDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === L2vpnBridgeGroupBridgeDomain.__pulumiType;
    }

    /**
     * Configure bridge domain
     */
    public readonly bridgeDomainName!: pulumi.Output<string>;
    /**
     * Specify the group the bridge belongs to
     */
    public readonly bridgeGroupName!: pulumi.Output<string>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Ethernet VPN identifier
     */
    public readonly evis!: pulumi.Output<outputs.L2vpnBridgeGroupBridgeDomainEvi[] | undefined>;
    /**
     * Specify interface name
     */
    public readonly interfaces!: pulumi.Output<outputs.L2vpnBridgeGroupBridgeDomainInterface[] | undefined>;
    /**
     * Maximum transmission unit (payload) for this Bridge Domain - Range: `46`-`65535`
     */
    public readonly mtu!: pulumi.Output<number | undefined>;
    /**
     * Ethernet VPN identifier for srv6
     */
    public readonly segmentRoutingSrv6Evis!: pulumi.Output<outputs.L2vpnBridgeGroupBridgeDomainSegmentRoutingSrv6Evi[] | undefined>;
    /**
     * Set the storm control kbps - Range: `64`-`1280000`
     */
    public readonly stormControlBroadcastKbps!: pulumi.Output<number | undefined>;
    /**
     * Set the storm control pps - Range: `1`-`160000`
     */
    public readonly stormControlBroadcastPps!: pulumi.Output<number | undefined>;
    /**
     * Set the storm control kbps - Range: `64`-`1280000`
     */
    public readonly stormControlMulticastKbps!: pulumi.Output<number | undefined>;
    /**
     * Set the storm control pps - Range: `1`-`160000`
     */
    public readonly stormControlMulticastPps!: pulumi.Output<number | undefined>;
    /**
     * Set the storm control kbps - Range: `64`-`1280000`
     */
    public readonly stormControlUnknownUnicastKbps!: pulumi.Output<number | undefined>;
    /**
     * Set the storm control pps - Range: `1`-`160000`
     */
    public readonly stormControlUnknownUnicastPps!: pulumi.Output<number | undefined>;
    /**
     * VxLAN VPN identifier
     */
    public readonly vnis!: pulumi.Output<outputs.L2vpnBridgeGroupBridgeDomainVni[] | undefined>;

    /**
     * Create a L2vpnBridgeGroupBridgeDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: L2vpnBridgeGroupBridgeDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: L2vpnBridgeGroupBridgeDomainArgs | L2vpnBridgeGroupBridgeDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as L2vpnBridgeGroupBridgeDomainState | undefined;
            resourceInputs["bridgeDomainName"] = state ? state.bridgeDomainName : undefined;
            resourceInputs["bridgeGroupName"] = state ? state.bridgeGroupName : undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["evis"] = state ? state.evis : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["segmentRoutingSrv6Evis"] = state ? state.segmentRoutingSrv6Evis : undefined;
            resourceInputs["stormControlBroadcastKbps"] = state ? state.stormControlBroadcastKbps : undefined;
            resourceInputs["stormControlBroadcastPps"] = state ? state.stormControlBroadcastPps : undefined;
            resourceInputs["stormControlMulticastKbps"] = state ? state.stormControlMulticastKbps : undefined;
            resourceInputs["stormControlMulticastPps"] = state ? state.stormControlMulticastPps : undefined;
            resourceInputs["stormControlUnknownUnicastKbps"] = state ? state.stormControlUnknownUnicastKbps : undefined;
            resourceInputs["stormControlUnknownUnicastPps"] = state ? state.stormControlUnknownUnicastPps : undefined;
            resourceInputs["vnis"] = state ? state.vnis : undefined;
        } else {
            const args = argsOrState as L2vpnBridgeGroupBridgeDomainArgs | undefined;
            if ((!args || args.bridgeDomainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bridgeDomainName'");
            }
            if ((!args || args.bridgeGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bridgeGroupName'");
            }
            resourceInputs["bridgeDomainName"] = args ? args.bridgeDomainName : undefined;
            resourceInputs["bridgeGroupName"] = args ? args.bridgeGroupName : undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["evis"] = args ? args.evis : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["segmentRoutingSrv6Evis"] = args ? args.segmentRoutingSrv6Evis : undefined;
            resourceInputs["stormControlBroadcastKbps"] = args ? args.stormControlBroadcastKbps : undefined;
            resourceInputs["stormControlBroadcastPps"] = args ? args.stormControlBroadcastPps : undefined;
            resourceInputs["stormControlMulticastKbps"] = args ? args.stormControlMulticastKbps : undefined;
            resourceInputs["stormControlMulticastPps"] = args ? args.stormControlMulticastPps : undefined;
            resourceInputs["stormControlUnknownUnicastKbps"] = args ? args.stormControlUnknownUnicastKbps : undefined;
            resourceInputs["stormControlUnknownUnicastPps"] = args ? args.stormControlUnknownUnicastPps : undefined;
            resourceInputs["vnis"] = args ? args.vnis : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(L2vpnBridgeGroupBridgeDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering L2vpnBridgeGroupBridgeDomain resources.
 */
export interface L2vpnBridgeGroupBridgeDomainState {
    /**
     * Configure bridge domain
     */
    bridgeDomainName?: pulumi.Input<string>;
    /**
     * Specify the group the bridge belongs to
     */
    bridgeGroupName?: pulumi.Input<string>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Ethernet VPN identifier
     */
    evis?: pulumi.Input<pulumi.Input<inputs.L2vpnBridgeGroupBridgeDomainEvi>[]>;
    /**
     * Specify interface name
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.L2vpnBridgeGroupBridgeDomainInterface>[]>;
    /**
     * Maximum transmission unit (payload) for this Bridge Domain - Range: `46`-`65535`
     */
    mtu?: pulumi.Input<number>;
    /**
     * Ethernet VPN identifier for srv6
     */
    segmentRoutingSrv6Evis?: pulumi.Input<pulumi.Input<inputs.L2vpnBridgeGroupBridgeDomainSegmentRoutingSrv6Evi>[]>;
    /**
     * Set the storm control kbps - Range: `64`-`1280000`
     */
    stormControlBroadcastKbps?: pulumi.Input<number>;
    /**
     * Set the storm control pps - Range: `1`-`160000`
     */
    stormControlBroadcastPps?: pulumi.Input<number>;
    /**
     * Set the storm control kbps - Range: `64`-`1280000`
     */
    stormControlMulticastKbps?: pulumi.Input<number>;
    /**
     * Set the storm control pps - Range: `1`-`160000`
     */
    stormControlMulticastPps?: pulumi.Input<number>;
    /**
     * Set the storm control kbps - Range: `64`-`1280000`
     */
    stormControlUnknownUnicastKbps?: pulumi.Input<number>;
    /**
     * Set the storm control pps - Range: `1`-`160000`
     */
    stormControlUnknownUnicastPps?: pulumi.Input<number>;
    /**
     * VxLAN VPN identifier
     */
    vnis?: pulumi.Input<pulumi.Input<inputs.L2vpnBridgeGroupBridgeDomainVni>[]>;
}

/**
 * The set of arguments for constructing a L2vpnBridgeGroupBridgeDomain resource.
 */
export interface L2vpnBridgeGroupBridgeDomainArgs {
    /**
     * Configure bridge domain
     */
    bridgeDomainName: pulumi.Input<string>;
    /**
     * Specify the group the bridge belongs to
     */
    bridgeGroupName: pulumi.Input<string>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Ethernet VPN identifier
     */
    evis?: pulumi.Input<pulumi.Input<inputs.L2vpnBridgeGroupBridgeDomainEvi>[]>;
    /**
     * Specify interface name
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.L2vpnBridgeGroupBridgeDomainInterface>[]>;
    /**
     * Maximum transmission unit (payload) for this Bridge Domain - Range: `46`-`65535`
     */
    mtu?: pulumi.Input<number>;
    /**
     * Ethernet VPN identifier for srv6
     */
    segmentRoutingSrv6Evis?: pulumi.Input<pulumi.Input<inputs.L2vpnBridgeGroupBridgeDomainSegmentRoutingSrv6Evi>[]>;
    /**
     * Set the storm control kbps - Range: `64`-`1280000`
     */
    stormControlBroadcastKbps?: pulumi.Input<number>;
    /**
     * Set the storm control pps - Range: `1`-`160000`
     */
    stormControlBroadcastPps?: pulumi.Input<number>;
    /**
     * Set the storm control kbps - Range: `64`-`1280000`
     */
    stormControlMulticastKbps?: pulumi.Input<number>;
    /**
     * Set the storm control pps - Range: `1`-`160000`
     */
    stormControlMulticastPps?: pulumi.Input<number>;
    /**
     * Set the storm control kbps - Range: `64`-`1280000`
     */
    stormControlUnknownUnicastKbps?: pulumi.Input<number>;
    /**
     * Set the storm control pps - Range: `1`-`160000`
     */
    stormControlUnknownUnicastPps?: pulumi.Input<number>;
    /**
     * VxLAN VPN identifier
     */
    vnis?: pulumi.Input<pulumi.Input<inputs.L2vpnBridgeGroupBridgeDomainVni>[]>;
}
