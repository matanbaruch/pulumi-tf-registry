// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ssh extends pulumi.CustomResource {
    /**
     * Get an existing Ssh resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SshState, opts?: pulumi.CustomResourceOptions): Ssh {
        return new Ssh(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxr:index/ssh:Ssh';

    /**
     * Returns true if the given object is an instance of Ssh.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ssh {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ssh.__pulumiType;
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Cisco ssh server DSCP - Range: `0`-`63`
     */
    public readonly serverDscp!: pulumi.Output<number | undefined>;
    /**
     * Enable ssh server logging
     */
    public readonly serverLogging!: pulumi.Output<boolean | undefined>;
    /**
     * Cisco sshd rate-limit of service requests - Range: `1`-`600`
     */
    public readonly serverRateLimit!: pulumi.Output<number | undefined>;
    /**
     * Cisco sshd session-limit of service requests - Range: `1`-`110`
     */
    public readonly serverSessionLimit!: pulumi.Output<number | undefined>;
    /**
     * Cisco sshd protocol version 2
     */
    public readonly serverV2!: pulumi.Output<boolean | undefined>;
    /**
     * Cisco sshd VRF name
     */
    public readonly serverVrfs!: pulumi.Output<outputs.SshServerVrf[] | undefined>;

    /**
     * Create a Ssh resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SshArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SshArgs | SshState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SshState | undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["serverDscp"] = state ? state.serverDscp : undefined;
            resourceInputs["serverLogging"] = state ? state.serverLogging : undefined;
            resourceInputs["serverRateLimit"] = state ? state.serverRateLimit : undefined;
            resourceInputs["serverSessionLimit"] = state ? state.serverSessionLimit : undefined;
            resourceInputs["serverV2"] = state ? state.serverV2 : undefined;
            resourceInputs["serverVrfs"] = state ? state.serverVrfs : undefined;
        } else {
            const args = argsOrState as SshArgs | undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["serverDscp"] = args ? args.serverDscp : undefined;
            resourceInputs["serverLogging"] = args ? args.serverLogging : undefined;
            resourceInputs["serverRateLimit"] = args ? args.serverRateLimit : undefined;
            resourceInputs["serverSessionLimit"] = args ? args.serverSessionLimit : undefined;
            resourceInputs["serverV2"] = args ? args.serverV2 : undefined;
            resourceInputs["serverVrfs"] = args ? args.serverVrfs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ssh.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ssh resources.
 */
export interface SshState {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Cisco ssh server DSCP - Range: `0`-`63`
     */
    serverDscp?: pulumi.Input<number>;
    /**
     * Enable ssh server logging
     */
    serverLogging?: pulumi.Input<boolean>;
    /**
     * Cisco sshd rate-limit of service requests - Range: `1`-`600`
     */
    serverRateLimit?: pulumi.Input<number>;
    /**
     * Cisco sshd session-limit of service requests - Range: `1`-`110`
     */
    serverSessionLimit?: pulumi.Input<number>;
    /**
     * Cisco sshd protocol version 2
     */
    serverV2?: pulumi.Input<boolean>;
    /**
     * Cisco sshd VRF name
     */
    serverVrfs?: pulumi.Input<pulumi.Input<inputs.SshServerVrf>[]>;
}

/**
 * The set of arguments for constructing a Ssh resource.
 */
export interface SshArgs {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Cisco ssh server DSCP - Range: `0`-`63`
     */
    serverDscp?: pulumi.Input<number>;
    /**
     * Enable ssh server logging
     */
    serverLogging?: pulumi.Input<boolean>;
    /**
     * Cisco sshd rate-limit of service requests - Range: `1`-`600`
     */
    serverRateLimit?: pulumi.Input<number>;
    /**
     * Cisco sshd session-limit of service requests - Range: `1`-`110`
     */
    serverSessionLimit?: pulumi.Input<number>;
    /**
     * Cisco sshd protocol version 2
     */
    serverV2?: pulumi.Input<boolean>;
    /**
     * Cisco sshd VRF name
     */
    serverVrfs?: pulumi.Input<pulumi.Input<inputs.SshServerVrf>[]>;
}
