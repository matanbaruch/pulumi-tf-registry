// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AsPathSetArgs, AsPathSetState } from "./asPathSet";
export type AsPathSet = import("./asPathSet").AsPathSet;
export const AsPathSet: typeof import("./asPathSet").AsPathSet = null as any;
utilities.lazyLoad(exports, ["AsPathSet"], () => require("./asPathSet"));

export { BannerArgs, BannerState } from "./banner";
export type Banner = import("./banner").Banner;
export const Banner: typeof import("./banner").Banner = null as any;
utilities.lazyLoad(exports, ["Banner"], () => require("./banner"));

export { BfdArgs, BfdState } from "./bfd";
export type Bfd = import("./bfd").Bfd;
export const Bfd: typeof import("./bfd").Bfd = null as any;
utilities.lazyLoad(exports, ["Bfd"], () => require("./bfd"));

export { BgpAsFormatArgs, BgpAsFormatState } from "./bgpAsFormat";
export type BgpAsFormat = import("./bgpAsFormat").BgpAsFormat;
export const BgpAsFormat: typeof import("./bgpAsFormat").BgpAsFormat = null as any;
utilities.lazyLoad(exports, ["BgpAsFormat"], () => require("./bgpAsFormat"));

export { CdpArgs, CdpState } from "./cdp";
export type Cdp = import("./cdp").Cdp;
export const Cdp: typeof import("./cdp").Cdp = null as any;
utilities.lazyLoad(exports, ["Cdp"], () => require("./cdp"));

export { ClassMapQosArgs, ClassMapQosState } from "./classMapQos";
export type ClassMapQos = import("./classMapQos").ClassMapQos;
export const ClassMapQos: typeof import("./classMapQos").ClassMapQos = null as any;
utilities.lazyLoad(exports, ["ClassMapQos"], () => require("./classMapQos"));

export { CommunitySetArgs, CommunitySetState } from "./communitySet";
export type CommunitySet = import("./communitySet").CommunitySet;
export const CommunitySet: typeof import("./communitySet").CommunitySet = null as any;
utilities.lazyLoad(exports, ["CommunitySet"], () => require("./communitySet"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { DomainVrfArgs, DomainVrfState } from "./domainVrf";
export type DomainVrf = import("./domainVrf").DomainVrf;
export const DomainVrf: typeof import("./domainVrf").DomainVrf = null as any;
utilities.lazyLoad(exports, ["DomainVrf"], () => require("./domainVrf"));

export { ErrorDisableRecoveryArgs, ErrorDisableRecoveryState } from "./errorDisableRecovery";
export type ErrorDisableRecovery = import("./errorDisableRecovery").ErrorDisableRecovery;
export const ErrorDisableRecovery: typeof import("./errorDisableRecovery").ErrorDisableRecovery = null as any;
utilities.lazyLoad(exports, ["ErrorDisableRecovery"], () => require("./errorDisableRecovery"));

export { EsiSetArgs, EsiSetState } from "./esiSet";
export type EsiSet = import("./esiSet").EsiSet;
export const EsiSet: typeof import("./esiSet").EsiSet = null as any;
utilities.lazyLoad(exports, ["EsiSet"], () => require("./esiSet"));

export { EvpnArgs, EvpnState } from "./evpn";
export type Evpn = import("./evpn").Evpn;
export const Evpn: typeof import("./evpn").Evpn = null as any;
utilities.lazyLoad(exports, ["Evpn"], () => require("./evpn"));

export { EvpnEviArgs, EvpnEviState } from "./evpnEvi";
export type EvpnEvi = import("./evpnEvi").EvpnEvi;
export const EvpnEvi: typeof import("./evpnEvi").EvpnEvi = null as any;
utilities.lazyLoad(exports, ["EvpnEvi"], () => require("./evpnEvi"));

export { EvpnGroupArgs, EvpnGroupState } from "./evpnGroup";
export type EvpnGroup = import("./evpnGroup").EvpnGroup;
export const EvpnGroup: typeof import("./evpnGroup").EvpnGroup = null as any;
utilities.lazyLoad(exports, ["EvpnGroup"], () => require("./evpnGroup"));

export { EvpnInterfaceArgs, EvpnInterfaceState } from "./evpnInterface";
export type EvpnInterface = import("./evpnInterface").EvpnInterface;
export const EvpnInterface: typeof import("./evpnInterface").EvpnInterface = null as any;
utilities.lazyLoad(exports, ["EvpnInterface"], () => require("./evpnInterface"));

export { EvpnSegmentRoutingSrv6EviArgs, EvpnSegmentRoutingSrv6EviState } from "./evpnSegmentRoutingSrv6Evi";
export type EvpnSegmentRoutingSrv6Evi = import("./evpnSegmentRoutingSrv6Evi").EvpnSegmentRoutingSrv6Evi;
export const EvpnSegmentRoutingSrv6Evi: typeof import("./evpnSegmentRoutingSrv6Evi").EvpnSegmentRoutingSrv6Evi = null as any;
utilities.lazyLoad(exports, ["EvpnSegmentRoutingSrv6Evi"], () => require("./evpnSegmentRoutingSrv6Evi"));

export { ExtcommunityCostSetArgs, ExtcommunityCostSetState } from "./extcommunityCostSet";
export type ExtcommunityCostSet = import("./extcommunityCostSet").ExtcommunityCostSet;
export const ExtcommunityCostSet: typeof import("./extcommunityCostSet").ExtcommunityCostSet = null as any;
utilities.lazyLoad(exports, ["ExtcommunityCostSet"], () => require("./extcommunityCostSet"));

export { ExtcommunityOpaqueSetArgs, ExtcommunityOpaqueSetState } from "./extcommunityOpaqueSet";
export type ExtcommunityOpaqueSet = import("./extcommunityOpaqueSet").ExtcommunityOpaqueSet;
export const ExtcommunityOpaqueSet: typeof import("./extcommunityOpaqueSet").ExtcommunityOpaqueSet = null as any;
utilities.lazyLoad(exports, ["ExtcommunityOpaqueSet"], () => require("./extcommunityOpaqueSet"));

export { ExtcommunityRtSetArgs, ExtcommunityRtSetState } from "./extcommunityRtSet";
export type ExtcommunityRtSet = import("./extcommunityRtSet").ExtcommunityRtSet;
export const ExtcommunityRtSet: typeof import("./extcommunityRtSet").ExtcommunityRtSet = null as any;
utilities.lazyLoad(exports, ["ExtcommunityRtSet"], () => require("./extcommunityRtSet"));

export { ExtcommunitySooSetArgs, ExtcommunitySooSetState } from "./extcommunitySooSet";
export type ExtcommunitySooSet = import("./extcommunitySooSet").ExtcommunitySooSet;
export const ExtcommunitySooSet: typeof import("./extcommunitySooSet").ExtcommunitySooSet = null as any;
utilities.lazyLoad(exports, ["ExtcommunitySooSet"], () => require("./extcommunitySooSet"));

export { FlowExporterMapArgs, FlowExporterMapState } from "./flowExporterMap";
export type FlowExporterMap = import("./flowExporterMap").FlowExporterMap;
export const FlowExporterMap: typeof import("./flowExporterMap").FlowExporterMap = null as any;
utilities.lazyLoad(exports, ["FlowExporterMap"], () => require("./flowExporterMap"));

export { FlowMonitorMapArgs, FlowMonitorMapState } from "./flowMonitorMap";
export type FlowMonitorMap = import("./flowMonitorMap").FlowMonitorMap;
export const FlowMonitorMap: typeof import("./flowMonitorMap").FlowMonitorMap = null as any;
utilities.lazyLoad(exports, ["FlowMonitorMap"], () => require("./flowMonitorMap"));

export { FlowSamplerMapArgs, FlowSamplerMapState } from "./flowSamplerMap";
export type FlowSamplerMap = import("./flowSamplerMap").FlowSamplerMap;
export const FlowSamplerMap: typeof import("./flowSamplerMap").FlowSamplerMap = null as any;
utilities.lazyLoad(exports, ["FlowSamplerMap"], () => require("./flowSamplerMap"));

export { FpdArgs, FpdState } from "./fpd";
export type Fpd = import("./fpd").Fpd;
export const Fpd: typeof import("./fpd").Fpd = null as any;
utilities.lazyLoad(exports, ["Fpd"], () => require("./fpd"));

export { GetAsPathSetArgs, GetAsPathSetResult, GetAsPathSetOutputArgs } from "./getAsPathSet";
export const getAsPathSet: typeof import("./getAsPathSet").getAsPathSet = null as any;
export const getAsPathSetOutput: typeof import("./getAsPathSet").getAsPathSetOutput = null as any;
utilities.lazyLoad(exports, ["getAsPathSet","getAsPathSetOutput"], () => require("./getAsPathSet"));

export { GetBannerArgs, GetBannerResult, GetBannerOutputArgs } from "./getBanner";
export const getBanner: typeof import("./getBanner").getBanner = null as any;
export const getBannerOutput: typeof import("./getBanner").getBannerOutput = null as any;
utilities.lazyLoad(exports, ["getBanner","getBannerOutput"], () => require("./getBanner"));

export { GetBfdArgs, GetBfdResult, GetBfdOutputArgs } from "./getBfd";
export const getBfd: typeof import("./getBfd").getBfd = null as any;
export const getBfdOutput: typeof import("./getBfd").getBfdOutput = null as any;
utilities.lazyLoad(exports, ["getBfd","getBfdOutput"], () => require("./getBfd"));

export { GetBgpAsFormatArgs, GetBgpAsFormatResult, GetBgpAsFormatOutputArgs } from "./getBgpAsFormat";
export const getBgpAsFormat: typeof import("./getBgpAsFormat").getBgpAsFormat = null as any;
export const getBgpAsFormatOutput: typeof import("./getBgpAsFormat").getBgpAsFormatOutput = null as any;
utilities.lazyLoad(exports, ["getBgpAsFormat","getBgpAsFormatOutput"], () => require("./getBgpAsFormat"));

export { GetCdpArgs, GetCdpResult, GetCdpOutputArgs } from "./getCdp";
export const getCdp: typeof import("./getCdp").getCdp = null as any;
export const getCdpOutput: typeof import("./getCdp").getCdpOutput = null as any;
utilities.lazyLoad(exports, ["getCdp","getCdpOutput"], () => require("./getCdp"));

export { GetClassMapQosArgs, GetClassMapQosResult, GetClassMapQosOutputArgs } from "./getClassMapQos";
export const getClassMapQos: typeof import("./getClassMapQos").getClassMapQos = null as any;
export const getClassMapQosOutput: typeof import("./getClassMapQos").getClassMapQosOutput = null as any;
utilities.lazyLoad(exports, ["getClassMapQos","getClassMapQosOutput"], () => require("./getClassMapQos"));

export { GetCommunitySetArgs, GetCommunitySetResult, GetCommunitySetOutputArgs } from "./getCommunitySet";
export const getCommunitySet: typeof import("./getCommunitySet").getCommunitySet = null as any;
export const getCommunitySetOutput: typeof import("./getCommunitySet").getCommunitySetOutput = null as any;
utilities.lazyLoad(exports, ["getCommunitySet","getCommunitySetOutput"], () => require("./getCommunitySet"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { GetDomainVrfArgs, GetDomainVrfResult, GetDomainVrfOutputArgs } from "./getDomainVrf";
export const getDomainVrf: typeof import("./getDomainVrf").getDomainVrf = null as any;
export const getDomainVrfOutput: typeof import("./getDomainVrf").getDomainVrfOutput = null as any;
utilities.lazyLoad(exports, ["getDomainVrf","getDomainVrfOutput"], () => require("./getDomainVrf"));

export { GetErrorDisableRecoveryArgs, GetErrorDisableRecoveryResult, GetErrorDisableRecoveryOutputArgs } from "./getErrorDisableRecovery";
export const getErrorDisableRecovery: typeof import("./getErrorDisableRecovery").getErrorDisableRecovery = null as any;
export const getErrorDisableRecoveryOutput: typeof import("./getErrorDisableRecovery").getErrorDisableRecoveryOutput = null as any;
utilities.lazyLoad(exports, ["getErrorDisableRecovery","getErrorDisableRecoveryOutput"], () => require("./getErrorDisableRecovery"));

export { GetEsiSetArgs, GetEsiSetResult, GetEsiSetOutputArgs } from "./getEsiSet";
export const getEsiSet: typeof import("./getEsiSet").getEsiSet = null as any;
export const getEsiSetOutput: typeof import("./getEsiSet").getEsiSetOutput = null as any;
utilities.lazyLoad(exports, ["getEsiSet","getEsiSetOutput"], () => require("./getEsiSet"));

export { GetEvpnArgs, GetEvpnResult, GetEvpnOutputArgs } from "./getEvpn";
export const getEvpn: typeof import("./getEvpn").getEvpn = null as any;
export const getEvpnOutput: typeof import("./getEvpn").getEvpnOutput = null as any;
utilities.lazyLoad(exports, ["getEvpn","getEvpnOutput"], () => require("./getEvpn"));

export { GetEvpnEviArgs, GetEvpnEviResult, GetEvpnEviOutputArgs } from "./getEvpnEvi";
export const getEvpnEvi: typeof import("./getEvpnEvi").getEvpnEvi = null as any;
export const getEvpnEviOutput: typeof import("./getEvpnEvi").getEvpnEviOutput = null as any;
utilities.lazyLoad(exports, ["getEvpnEvi","getEvpnEviOutput"], () => require("./getEvpnEvi"));

export { GetEvpnGroupArgs, GetEvpnGroupResult, GetEvpnGroupOutputArgs } from "./getEvpnGroup";
export const getEvpnGroup: typeof import("./getEvpnGroup").getEvpnGroup = null as any;
export const getEvpnGroupOutput: typeof import("./getEvpnGroup").getEvpnGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEvpnGroup","getEvpnGroupOutput"], () => require("./getEvpnGroup"));

export { GetEvpnInterfaceArgs, GetEvpnInterfaceResult, GetEvpnInterfaceOutputArgs } from "./getEvpnInterface";
export const getEvpnInterface: typeof import("./getEvpnInterface").getEvpnInterface = null as any;
export const getEvpnInterfaceOutput: typeof import("./getEvpnInterface").getEvpnInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getEvpnInterface","getEvpnInterfaceOutput"], () => require("./getEvpnInterface"));

export { GetEvpnSegmentRoutingSrv6EviArgs, GetEvpnSegmentRoutingSrv6EviResult, GetEvpnSegmentRoutingSrv6EviOutputArgs } from "./getEvpnSegmentRoutingSrv6Evi";
export const getEvpnSegmentRoutingSrv6Evi: typeof import("./getEvpnSegmentRoutingSrv6Evi").getEvpnSegmentRoutingSrv6Evi = null as any;
export const getEvpnSegmentRoutingSrv6EviOutput: typeof import("./getEvpnSegmentRoutingSrv6Evi").getEvpnSegmentRoutingSrv6EviOutput = null as any;
utilities.lazyLoad(exports, ["getEvpnSegmentRoutingSrv6Evi","getEvpnSegmentRoutingSrv6EviOutput"], () => require("./getEvpnSegmentRoutingSrv6Evi"));

export { GetExtcommunityCostSetArgs, GetExtcommunityCostSetResult, GetExtcommunityCostSetOutputArgs } from "./getExtcommunityCostSet";
export const getExtcommunityCostSet: typeof import("./getExtcommunityCostSet").getExtcommunityCostSet = null as any;
export const getExtcommunityCostSetOutput: typeof import("./getExtcommunityCostSet").getExtcommunityCostSetOutput = null as any;
utilities.lazyLoad(exports, ["getExtcommunityCostSet","getExtcommunityCostSetOutput"], () => require("./getExtcommunityCostSet"));

export { GetExtcommunityOpaqueSetArgs, GetExtcommunityOpaqueSetResult, GetExtcommunityOpaqueSetOutputArgs } from "./getExtcommunityOpaqueSet";
export const getExtcommunityOpaqueSet: typeof import("./getExtcommunityOpaqueSet").getExtcommunityOpaqueSet = null as any;
export const getExtcommunityOpaqueSetOutput: typeof import("./getExtcommunityOpaqueSet").getExtcommunityOpaqueSetOutput = null as any;
utilities.lazyLoad(exports, ["getExtcommunityOpaqueSet","getExtcommunityOpaqueSetOutput"], () => require("./getExtcommunityOpaqueSet"));

export { GetExtcommunityRtSetArgs, GetExtcommunityRtSetResult, GetExtcommunityRtSetOutputArgs } from "./getExtcommunityRtSet";
export const getExtcommunityRtSet: typeof import("./getExtcommunityRtSet").getExtcommunityRtSet = null as any;
export const getExtcommunityRtSetOutput: typeof import("./getExtcommunityRtSet").getExtcommunityRtSetOutput = null as any;
utilities.lazyLoad(exports, ["getExtcommunityRtSet","getExtcommunityRtSetOutput"], () => require("./getExtcommunityRtSet"));

export { GetExtcommunitySooSetArgs, GetExtcommunitySooSetResult, GetExtcommunitySooSetOutputArgs } from "./getExtcommunitySooSet";
export const getExtcommunitySooSet: typeof import("./getExtcommunitySooSet").getExtcommunitySooSet = null as any;
export const getExtcommunitySooSetOutput: typeof import("./getExtcommunitySooSet").getExtcommunitySooSetOutput = null as any;
utilities.lazyLoad(exports, ["getExtcommunitySooSet","getExtcommunitySooSetOutput"], () => require("./getExtcommunitySooSet"));

export { GetFlowExporterMapArgs, GetFlowExporterMapResult, GetFlowExporterMapOutputArgs } from "./getFlowExporterMap";
export const getFlowExporterMap: typeof import("./getFlowExporterMap").getFlowExporterMap = null as any;
export const getFlowExporterMapOutput: typeof import("./getFlowExporterMap").getFlowExporterMapOutput = null as any;
utilities.lazyLoad(exports, ["getFlowExporterMap","getFlowExporterMapOutput"], () => require("./getFlowExporterMap"));

export { GetFlowMonitorMapArgs, GetFlowMonitorMapResult, GetFlowMonitorMapOutputArgs } from "./getFlowMonitorMap";
export const getFlowMonitorMap: typeof import("./getFlowMonitorMap").getFlowMonitorMap = null as any;
export const getFlowMonitorMapOutput: typeof import("./getFlowMonitorMap").getFlowMonitorMapOutput = null as any;
utilities.lazyLoad(exports, ["getFlowMonitorMap","getFlowMonitorMapOutput"], () => require("./getFlowMonitorMap"));

export { GetFlowSamplerMapArgs, GetFlowSamplerMapResult, GetFlowSamplerMapOutputArgs } from "./getFlowSamplerMap";
export const getFlowSamplerMap: typeof import("./getFlowSamplerMap").getFlowSamplerMap = null as any;
export const getFlowSamplerMapOutput: typeof import("./getFlowSamplerMap").getFlowSamplerMapOutput = null as any;
utilities.lazyLoad(exports, ["getFlowSamplerMap","getFlowSamplerMapOutput"], () => require("./getFlowSamplerMap"));

export { GetFpdArgs, GetFpdResult, GetFpdOutputArgs } from "./getFpd";
export const getFpd: typeof import("./getFpd").getFpd = null as any;
export const getFpdOutput: typeof import("./getFpd").getFpdOutput = null as any;
utilities.lazyLoad(exports, ["getFpd","getFpdOutput"], () => require("./getFpd"));

export { GetGnmiArgs, GetGnmiResult, GetGnmiOutputArgs } from "./getGnmi";
export const getGnmi: typeof import("./getGnmi").getGnmi = null as any;
export const getGnmiOutput: typeof import("./getGnmi").getGnmiOutput = null as any;
utilities.lazyLoad(exports, ["getGnmi","getGnmiOutput"], () => require("./getGnmi"));

export { GetHostnameArgs, GetHostnameResult, GetHostnameOutputArgs } from "./getHostname";
export const getHostname: typeof import("./getHostname").getHostname = null as any;
export const getHostnameOutput: typeof import("./getHostname").getHostnameOutput = null as any;
utilities.lazyLoad(exports, ["getHostname","getHostnameOutput"], () => require("./getHostname"));

export { GetInterfaceArgs, GetInterfaceResult, GetInterfaceOutputArgs } from "./getInterface";
export const getInterface: typeof import("./getInterface").getInterface = null as any;
export const getInterfaceOutput: typeof import("./getInterface").getInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getInterface","getInterfaceOutput"], () => require("./getInterface"));

export { GetIpv4AccessListArgs, GetIpv4AccessListResult, GetIpv4AccessListOutputArgs } from "./getIpv4AccessList";
export const getIpv4AccessList: typeof import("./getIpv4AccessList").getIpv4AccessList = null as any;
export const getIpv4AccessListOutput: typeof import("./getIpv4AccessList").getIpv4AccessListOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4AccessList","getIpv4AccessListOutput"], () => require("./getIpv4AccessList"));

export { GetIpv4AccessListOptionsArgs, GetIpv4AccessListOptionsResult, GetIpv4AccessListOptionsOutputArgs } from "./getIpv4AccessListOptions";
export const getIpv4AccessListOptions: typeof import("./getIpv4AccessListOptions").getIpv4AccessListOptions = null as any;
export const getIpv4AccessListOptionsOutput: typeof import("./getIpv4AccessListOptions").getIpv4AccessListOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4AccessListOptions","getIpv4AccessListOptionsOutput"], () => require("./getIpv4AccessListOptions"));

export { GetIpv4PrefixListArgs, GetIpv4PrefixListResult, GetIpv4PrefixListOutputArgs } from "./getIpv4PrefixList";
export const getIpv4PrefixList: typeof import("./getIpv4PrefixList").getIpv4PrefixList = null as any;
export const getIpv4PrefixListOutput: typeof import("./getIpv4PrefixList").getIpv4PrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4PrefixList","getIpv4PrefixListOutput"], () => require("./getIpv4PrefixList"));

export { GetIpv6Args, GetIpv6Result, GetIpv6OutputArgs } from "./getIpv6";
export const getIpv6: typeof import("./getIpv6").getIpv6 = null as any;
export const getIpv6Output: typeof import("./getIpv6").getIpv6Output = null as any;
utilities.lazyLoad(exports, ["getIpv6","getIpv6Output"], () => require("./getIpv6"));

export { GetIpv6AccessListArgs, GetIpv6AccessListResult, GetIpv6AccessListOutputArgs } from "./getIpv6AccessList";
export const getIpv6AccessList: typeof import("./getIpv6AccessList").getIpv6AccessList = null as any;
export const getIpv6AccessListOutput: typeof import("./getIpv6AccessList").getIpv6AccessListOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6AccessList","getIpv6AccessListOutput"], () => require("./getIpv6AccessList"));

export { GetIpv6AccessListOptionsArgs, GetIpv6AccessListOptionsResult, GetIpv6AccessListOptionsOutputArgs } from "./getIpv6AccessListOptions";
export const getIpv6AccessListOptions: typeof import("./getIpv6AccessListOptions").getIpv6AccessListOptions = null as any;
export const getIpv6AccessListOptionsOutput: typeof import("./getIpv6AccessListOptions").getIpv6AccessListOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6AccessListOptions","getIpv6AccessListOptionsOutput"], () => require("./getIpv6AccessListOptions"));

export { GetIpv6PrefixListArgs, GetIpv6PrefixListResult, GetIpv6PrefixListOutputArgs } from "./getIpv6PrefixList";
export const getIpv6PrefixList: typeof import("./getIpv6PrefixList").getIpv6PrefixList = null as any;
export const getIpv6PrefixListOutput: typeof import("./getIpv6PrefixList").getIpv6PrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6PrefixList","getIpv6PrefixListOutput"], () => require("./getIpv6PrefixList"));

export { GetKeyChainArgs, GetKeyChainResult, GetKeyChainOutputArgs } from "./getKeyChain";
export const getKeyChain: typeof import("./getKeyChain").getKeyChain = null as any;
export const getKeyChainOutput: typeof import("./getKeyChain").getKeyChainOutput = null as any;
utilities.lazyLoad(exports, ["getKeyChain","getKeyChainOutput"], () => require("./getKeyChain"));

export { GetL2vpnArgs, GetL2vpnResult, GetL2vpnOutputArgs } from "./getL2vpn";
export const getL2vpn: typeof import("./getL2vpn").getL2vpn = null as any;
export const getL2vpnOutput: typeof import("./getL2vpn").getL2vpnOutput = null as any;
utilities.lazyLoad(exports, ["getL2vpn","getL2vpnOutput"], () => require("./getL2vpn"));

export { GetL2vpnBridgeGroupArgs, GetL2vpnBridgeGroupResult, GetL2vpnBridgeGroupOutputArgs } from "./getL2vpnBridgeGroup";
export const getL2vpnBridgeGroup: typeof import("./getL2vpnBridgeGroup").getL2vpnBridgeGroup = null as any;
export const getL2vpnBridgeGroupOutput: typeof import("./getL2vpnBridgeGroup").getL2vpnBridgeGroupOutput = null as any;
utilities.lazyLoad(exports, ["getL2vpnBridgeGroup","getL2vpnBridgeGroupOutput"], () => require("./getL2vpnBridgeGroup"));

export { GetL2vpnBridgeGroupBridgeDomainArgs, GetL2vpnBridgeGroupBridgeDomainResult, GetL2vpnBridgeGroupBridgeDomainOutputArgs } from "./getL2vpnBridgeGroupBridgeDomain";
export const getL2vpnBridgeGroupBridgeDomain: typeof import("./getL2vpnBridgeGroupBridgeDomain").getL2vpnBridgeGroupBridgeDomain = null as any;
export const getL2vpnBridgeGroupBridgeDomainOutput: typeof import("./getL2vpnBridgeGroupBridgeDomain").getL2vpnBridgeGroupBridgeDomainOutput = null as any;
utilities.lazyLoad(exports, ["getL2vpnBridgeGroupBridgeDomain","getL2vpnBridgeGroupBridgeDomainOutput"], () => require("./getL2vpnBridgeGroupBridgeDomain"));

export { GetL2vpnPwClassArgs, GetL2vpnPwClassResult, GetL2vpnPwClassOutputArgs } from "./getL2vpnPwClass";
export const getL2vpnPwClass: typeof import("./getL2vpnPwClass").getL2vpnPwClass = null as any;
export const getL2vpnPwClassOutput: typeof import("./getL2vpnPwClass").getL2vpnPwClassOutput = null as any;
utilities.lazyLoad(exports, ["getL2vpnPwClass","getL2vpnPwClassOutput"], () => require("./getL2vpnPwClass"));

export { GetL2vpnXconnectGroupP2pArgs, GetL2vpnXconnectGroupP2pResult, GetL2vpnXconnectGroupP2pOutputArgs } from "./getL2vpnXconnectGroupP2p";
export const getL2vpnXconnectGroupP2p: typeof import("./getL2vpnXconnectGroupP2p").getL2vpnXconnectGroupP2p = null as any;
export const getL2vpnXconnectGroupP2pOutput: typeof import("./getL2vpnXconnectGroupP2p").getL2vpnXconnectGroupP2pOutput = null as any;
utilities.lazyLoad(exports, ["getL2vpnXconnectGroupP2p","getL2vpnXconnectGroupP2pOutput"], () => require("./getL2vpnXconnectGroupP2p"));

export { GetLacpArgs, GetLacpResult, GetLacpOutputArgs } from "./getLacp";
export const getLacp: typeof import("./getLacp").getLacp = null as any;
export const getLacpOutput: typeof import("./getLacp").getLacpOutput = null as any;
utilities.lazyLoad(exports, ["getLacp","getLacpOutput"], () => require("./getLacp"));

export { GetLldpArgs, GetLldpResult, GetLldpOutputArgs } from "./getLldp";
export const getLldp: typeof import("./getLldp").getLldp = null as any;
export const getLldpOutput: typeof import("./getLldp").getLldpOutput = null as any;
utilities.lazyLoad(exports, ["getLldp","getLldpOutput"], () => require("./getLldp"));

export { GetLoggingArgs, GetLoggingResult, GetLoggingOutputArgs } from "./getLogging";
export const getLogging: typeof import("./getLogging").getLogging = null as any;
export const getLoggingOutput: typeof import("./getLogging").getLoggingOutput = null as any;
utilities.lazyLoad(exports, ["getLogging","getLoggingOutput"], () => require("./getLogging"));

export { GetLoggingSourceInterfaceArgs, GetLoggingSourceInterfaceResult, GetLoggingSourceInterfaceOutputArgs } from "./getLoggingSourceInterface";
export const getLoggingSourceInterface: typeof import("./getLoggingSourceInterface").getLoggingSourceInterface = null as any;
export const getLoggingSourceInterfaceOutput: typeof import("./getLoggingSourceInterface").getLoggingSourceInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingSourceInterface","getLoggingSourceInterfaceOutput"], () => require("./getLoggingSourceInterface"));

export { GetLoggingVrfArgs, GetLoggingVrfResult, GetLoggingVrfOutputArgs } from "./getLoggingVrf";
export const getLoggingVrf: typeof import("./getLoggingVrf").getLoggingVrf = null as any;
export const getLoggingVrfOutput: typeof import("./getLoggingVrf").getLoggingVrfOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingVrf","getLoggingVrfOutput"], () => require("./getLoggingVrf"));

export { GetMplsLdpArgs, GetMplsLdpResult, GetMplsLdpOutputArgs } from "./getMplsLdp";
export const getMplsLdp: typeof import("./getMplsLdp").getMplsLdp = null as any;
export const getMplsLdpOutput: typeof import("./getMplsLdp").getMplsLdpOutput = null as any;
utilities.lazyLoad(exports, ["getMplsLdp","getMplsLdpOutput"], () => require("./getMplsLdp"));

export { GetMplsOamArgs, GetMplsOamResult, GetMplsOamOutputArgs } from "./getMplsOam";
export const getMplsOam: typeof import("./getMplsOam").getMplsOam = null as any;
export const getMplsOamOutput: typeof import("./getMplsOam").getMplsOamOutput = null as any;
utilities.lazyLoad(exports, ["getMplsOam","getMplsOamOutput"], () => require("./getMplsOam"));

export { GetMplsTrafficEngArgs, GetMplsTrafficEngResult, GetMplsTrafficEngOutputArgs } from "./getMplsTrafficEng";
export const getMplsTrafficEng: typeof import("./getMplsTrafficEng").getMplsTrafficEng = null as any;
export const getMplsTrafficEngOutput: typeof import("./getMplsTrafficEng").getMplsTrafficEngOutput = null as any;
utilities.lazyLoad(exports, ["getMplsTrafficEng","getMplsTrafficEngOutput"], () => require("./getMplsTrafficEng"));

export { GetNtpArgs, GetNtpResult, GetNtpOutputArgs } from "./getNtp";
export const getNtp: typeof import("./getNtp").getNtp = null as any;
export const getNtpOutput: typeof import("./getNtp").getNtpOutput = null as any;
utilities.lazyLoad(exports, ["getNtp","getNtpOutput"], () => require("./getNtp"));

export { GetPceArgs, GetPceResult, GetPceOutputArgs } from "./getPce";
export const getPce: typeof import("./getPce").getPce = null as any;
export const getPceOutput: typeof import("./getPce").getPceOutput = null as any;
utilities.lazyLoad(exports, ["getPce","getPceOutput"], () => require("./getPce"));

export { GetPolicyMapQosArgs, GetPolicyMapQosResult, GetPolicyMapQosOutputArgs } from "./getPolicyMapQos";
export const getPolicyMapQos: typeof import("./getPolicyMapQos").getPolicyMapQos = null as any;
export const getPolicyMapQosOutput: typeof import("./getPolicyMapQos").getPolicyMapQosOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyMapQos","getPolicyMapQosOutput"], () => require("./getPolicyMapQos"));

export { GetPrefixSetArgs, GetPrefixSetResult, GetPrefixSetOutputArgs } from "./getPrefixSet";
export const getPrefixSet: typeof import("./getPrefixSet").getPrefixSet = null as any;
export const getPrefixSetOutput: typeof import("./getPrefixSet").getPrefixSetOutput = null as any;
utilities.lazyLoad(exports, ["getPrefixSet","getPrefixSetOutput"], () => require("./getPrefixSet"));

export { GetRdSetArgs, GetRdSetResult, GetRdSetOutputArgs } from "./getRdSet";
export const getRdSet: typeof import("./getRdSet").getRdSet = null as any;
export const getRdSetOutput: typeof import("./getRdSet").getRdSetOutput = null as any;
utilities.lazyLoad(exports, ["getRdSet","getRdSetOutput"], () => require("./getRdSet"));

export { GetRoutePolicyArgs, GetRoutePolicyResult, GetRoutePolicyOutputArgs } from "./getRoutePolicy";
export const getRoutePolicy: typeof import("./getRoutePolicy").getRoutePolicy = null as any;
export const getRoutePolicyOutput: typeof import("./getRoutePolicy").getRoutePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRoutePolicy","getRoutePolicyOutput"], () => require("./getRoutePolicy"));

export { GetRouterBgpArgs, GetRouterBgpResult, GetRouterBgpOutputArgs } from "./getRouterBgp";
export const getRouterBgp: typeof import("./getRouterBgp").getRouterBgp = null as any;
export const getRouterBgpOutput: typeof import("./getRouterBgp").getRouterBgpOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgp","getRouterBgpOutput"], () => require("./getRouterBgp"));

export { GetRouterBgpAddressFamilyArgs, GetRouterBgpAddressFamilyResult, GetRouterBgpAddressFamilyOutputArgs } from "./getRouterBgpAddressFamily";
export const getRouterBgpAddressFamily: typeof import("./getRouterBgpAddressFamily").getRouterBgpAddressFamily = null as any;
export const getRouterBgpAddressFamilyOutput: typeof import("./getRouterBgpAddressFamily").getRouterBgpAddressFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgpAddressFamily","getRouterBgpAddressFamilyOutput"], () => require("./getRouterBgpAddressFamily"));

export { GetRouterBgpNeighborAddressFamilyArgs, GetRouterBgpNeighborAddressFamilyResult, GetRouterBgpNeighborAddressFamilyOutputArgs } from "./getRouterBgpNeighborAddressFamily";
export const getRouterBgpNeighborAddressFamily: typeof import("./getRouterBgpNeighborAddressFamily").getRouterBgpNeighborAddressFamily = null as any;
export const getRouterBgpNeighborAddressFamilyOutput: typeof import("./getRouterBgpNeighborAddressFamily").getRouterBgpNeighborAddressFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgpNeighborAddressFamily","getRouterBgpNeighborAddressFamilyOutput"], () => require("./getRouterBgpNeighborAddressFamily"));

export { GetRouterBgpNeighborGroupArgs, GetRouterBgpNeighborGroupResult, GetRouterBgpNeighborGroupOutputArgs } from "./getRouterBgpNeighborGroup";
export const getRouterBgpNeighborGroup: typeof import("./getRouterBgpNeighborGroup").getRouterBgpNeighborGroup = null as any;
export const getRouterBgpNeighborGroupOutput: typeof import("./getRouterBgpNeighborGroup").getRouterBgpNeighborGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgpNeighborGroup","getRouterBgpNeighborGroupOutput"], () => require("./getRouterBgpNeighborGroup"));

export { GetRouterBgpVrfArgs, GetRouterBgpVrfResult, GetRouterBgpVrfOutputArgs } from "./getRouterBgpVrf";
export const getRouterBgpVrf: typeof import("./getRouterBgpVrf").getRouterBgpVrf = null as any;
export const getRouterBgpVrfOutput: typeof import("./getRouterBgpVrf").getRouterBgpVrfOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgpVrf","getRouterBgpVrfOutput"], () => require("./getRouterBgpVrf"));

export { GetRouterBgpVrfAddressFamilyArgs, GetRouterBgpVrfAddressFamilyResult, GetRouterBgpVrfAddressFamilyOutputArgs } from "./getRouterBgpVrfAddressFamily";
export const getRouterBgpVrfAddressFamily: typeof import("./getRouterBgpVrfAddressFamily").getRouterBgpVrfAddressFamily = null as any;
export const getRouterBgpVrfAddressFamilyOutput: typeof import("./getRouterBgpVrfAddressFamily").getRouterBgpVrfAddressFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgpVrfAddressFamily","getRouterBgpVrfAddressFamilyOutput"], () => require("./getRouterBgpVrfAddressFamily"));

export { GetRouterBgpVrfNeighborAddressFamilyArgs, GetRouterBgpVrfNeighborAddressFamilyResult, GetRouterBgpVrfNeighborAddressFamilyOutputArgs } from "./getRouterBgpVrfNeighborAddressFamily";
export const getRouterBgpVrfNeighborAddressFamily: typeof import("./getRouterBgpVrfNeighborAddressFamily").getRouterBgpVrfNeighborAddressFamily = null as any;
export const getRouterBgpVrfNeighborAddressFamilyOutput: typeof import("./getRouterBgpVrfNeighborAddressFamily").getRouterBgpVrfNeighborAddressFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgpVrfNeighborAddressFamily","getRouterBgpVrfNeighborAddressFamilyOutput"], () => require("./getRouterBgpVrfNeighborAddressFamily"));

export { GetRouterHsrpInterfaceArgs, GetRouterHsrpInterfaceResult, GetRouterHsrpInterfaceOutputArgs } from "./getRouterHsrpInterface";
export const getRouterHsrpInterface: typeof import("./getRouterHsrpInterface").getRouterHsrpInterface = null as any;
export const getRouterHsrpInterfaceOutput: typeof import("./getRouterHsrpInterface").getRouterHsrpInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getRouterHsrpInterface","getRouterHsrpInterfaceOutput"], () => require("./getRouterHsrpInterface"));

export { GetRouterHsrpInterfaceIpv4GroupV1Args, GetRouterHsrpInterfaceIpv4GroupV1Result, GetRouterHsrpInterfaceIpv4GroupV1OutputArgs } from "./getRouterHsrpInterfaceIpv4GroupV1";
export const getRouterHsrpInterfaceIpv4GroupV1: typeof import("./getRouterHsrpInterfaceIpv4GroupV1").getRouterHsrpInterfaceIpv4GroupV1 = null as any;
export const getRouterHsrpInterfaceIpv4GroupV1Output: typeof import("./getRouterHsrpInterfaceIpv4GroupV1").getRouterHsrpInterfaceIpv4GroupV1Output = null as any;
utilities.lazyLoad(exports, ["getRouterHsrpInterfaceIpv4GroupV1","getRouterHsrpInterfaceIpv4GroupV1Output"], () => require("./getRouterHsrpInterfaceIpv4GroupV1"));

export { GetRouterHsrpInterfaceIpv4GroupV2Args, GetRouterHsrpInterfaceIpv4GroupV2Result, GetRouterHsrpInterfaceIpv4GroupV2OutputArgs } from "./getRouterHsrpInterfaceIpv4GroupV2";
export const getRouterHsrpInterfaceIpv4GroupV2: typeof import("./getRouterHsrpInterfaceIpv4GroupV2").getRouterHsrpInterfaceIpv4GroupV2 = null as any;
export const getRouterHsrpInterfaceIpv4GroupV2Output: typeof import("./getRouterHsrpInterfaceIpv4GroupV2").getRouterHsrpInterfaceIpv4GroupV2Output = null as any;
utilities.lazyLoad(exports, ["getRouterHsrpInterfaceIpv4GroupV2","getRouterHsrpInterfaceIpv4GroupV2Output"], () => require("./getRouterHsrpInterfaceIpv4GroupV2"));

export { GetRouterHsrpInterfaceIpv6GroupV2Args, GetRouterHsrpInterfaceIpv6GroupV2Result, GetRouterHsrpInterfaceIpv6GroupV2OutputArgs } from "./getRouterHsrpInterfaceIpv6GroupV2";
export const getRouterHsrpInterfaceIpv6GroupV2: typeof import("./getRouterHsrpInterfaceIpv6GroupV2").getRouterHsrpInterfaceIpv6GroupV2 = null as any;
export const getRouterHsrpInterfaceIpv6GroupV2Output: typeof import("./getRouterHsrpInterfaceIpv6GroupV2").getRouterHsrpInterfaceIpv6GroupV2Output = null as any;
utilities.lazyLoad(exports, ["getRouterHsrpInterfaceIpv6GroupV2","getRouterHsrpInterfaceIpv6GroupV2Output"], () => require("./getRouterHsrpInterfaceIpv6GroupV2"));

export { GetRouterIsisArgs, GetRouterIsisResult, GetRouterIsisOutputArgs } from "./getRouterIsis";
export const getRouterIsis: typeof import("./getRouterIsis").getRouterIsis = null as any;
export const getRouterIsisOutput: typeof import("./getRouterIsis").getRouterIsisOutput = null as any;
utilities.lazyLoad(exports, ["getRouterIsis","getRouterIsisOutput"], () => require("./getRouterIsis"));

export { GetRouterIsisAddressFamilyArgs, GetRouterIsisAddressFamilyResult, GetRouterIsisAddressFamilyOutputArgs } from "./getRouterIsisAddressFamily";
export const getRouterIsisAddressFamily: typeof import("./getRouterIsisAddressFamily").getRouterIsisAddressFamily = null as any;
export const getRouterIsisAddressFamilyOutput: typeof import("./getRouterIsisAddressFamily").getRouterIsisAddressFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getRouterIsisAddressFamily","getRouterIsisAddressFamilyOutput"], () => require("./getRouterIsisAddressFamily"));

export { GetRouterIsisInterfaceArgs, GetRouterIsisInterfaceResult, GetRouterIsisInterfaceOutputArgs } from "./getRouterIsisInterface";
export const getRouterIsisInterface: typeof import("./getRouterIsisInterface").getRouterIsisInterface = null as any;
export const getRouterIsisInterfaceOutput: typeof import("./getRouterIsisInterface").getRouterIsisInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getRouterIsisInterface","getRouterIsisInterfaceOutput"], () => require("./getRouterIsisInterface"));

export { GetRouterIsisInterfaceAddressFamilyArgs, GetRouterIsisInterfaceAddressFamilyResult, GetRouterIsisInterfaceAddressFamilyOutputArgs } from "./getRouterIsisInterfaceAddressFamily";
export const getRouterIsisInterfaceAddressFamily: typeof import("./getRouterIsisInterfaceAddressFamily").getRouterIsisInterfaceAddressFamily = null as any;
export const getRouterIsisInterfaceAddressFamilyOutput: typeof import("./getRouterIsisInterfaceAddressFamily").getRouterIsisInterfaceAddressFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getRouterIsisInterfaceAddressFamily","getRouterIsisInterfaceAddressFamilyOutput"], () => require("./getRouterIsisInterfaceAddressFamily"));

export { GetRouterOspfArgs, GetRouterOspfResult, GetRouterOspfOutputArgs } from "./getRouterOspf";
export const getRouterOspf: typeof import("./getRouterOspf").getRouterOspf = null as any;
export const getRouterOspfOutput: typeof import("./getRouterOspf").getRouterOspfOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspf","getRouterOspfOutput"], () => require("./getRouterOspf"));

export { GetRouterOspfAreaInterfaceArgs, GetRouterOspfAreaInterfaceResult, GetRouterOspfAreaInterfaceOutputArgs } from "./getRouterOspfAreaInterface";
export const getRouterOspfAreaInterface: typeof import("./getRouterOspfAreaInterface").getRouterOspfAreaInterface = null as any;
export const getRouterOspfAreaInterfaceOutput: typeof import("./getRouterOspfAreaInterface").getRouterOspfAreaInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspfAreaInterface","getRouterOspfAreaInterfaceOutput"], () => require("./getRouterOspfAreaInterface"));

export { GetRouterOspfVrfArgs, GetRouterOspfVrfResult, GetRouterOspfVrfOutputArgs } from "./getRouterOspfVrf";
export const getRouterOspfVrf: typeof import("./getRouterOspfVrf").getRouterOspfVrf = null as any;
export const getRouterOspfVrfOutput: typeof import("./getRouterOspfVrf").getRouterOspfVrfOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspfVrf","getRouterOspfVrfOutput"], () => require("./getRouterOspfVrf"));

export { GetRouterOspfVrfAreaInterfaceArgs, GetRouterOspfVrfAreaInterfaceResult, GetRouterOspfVrfAreaInterfaceOutputArgs } from "./getRouterOspfVrfAreaInterface";
export const getRouterOspfVrfAreaInterface: typeof import("./getRouterOspfVrfAreaInterface").getRouterOspfVrfAreaInterface = null as any;
export const getRouterOspfVrfAreaInterfaceOutput: typeof import("./getRouterOspfVrfAreaInterface").getRouterOspfVrfAreaInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspfVrfAreaInterface","getRouterOspfVrfAreaInterfaceOutput"], () => require("./getRouterOspfVrfAreaInterface"));

export { GetRouterStaticIpv4MulticastArgs, GetRouterStaticIpv4MulticastResult, GetRouterStaticIpv4MulticastOutputArgs } from "./getRouterStaticIpv4Multicast";
export const getRouterStaticIpv4Multicast: typeof import("./getRouterStaticIpv4Multicast").getRouterStaticIpv4Multicast = null as any;
export const getRouterStaticIpv4MulticastOutput: typeof import("./getRouterStaticIpv4Multicast").getRouterStaticIpv4MulticastOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStaticIpv4Multicast","getRouterStaticIpv4MulticastOutput"], () => require("./getRouterStaticIpv4Multicast"));

export { GetRouterStaticIpv4UnicastArgs, GetRouterStaticIpv4UnicastResult, GetRouterStaticIpv4UnicastOutputArgs } from "./getRouterStaticIpv4Unicast";
export const getRouterStaticIpv4Unicast: typeof import("./getRouterStaticIpv4Unicast").getRouterStaticIpv4Unicast = null as any;
export const getRouterStaticIpv4UnicastOutput: typeof import("./getRouterStaticIpv4Unicast").getRouterStaticIpv4UnicastOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStaticIpv4Unicast","getRouterStaticIpv4UnicastOutput"], () => require("./getRouterStaticIpv4Unicast"));

export { GetRouterStaticIpv6MulticastArgs, GetRouterStaticIpv6MulticastResult, GetRouterStaticIpv6MulticastOutputArgs } from "./getRouterStaticIpv6Multicast";
export const getRouterStaticIpv6Multicast: typeof import("./getRouterStaticIpv6Multicast").getRouterStaticIpv6Multicast = null as any;
export const getRouterStaticIpv6MulticastOutput: typeof import("./getRouterStaticIpv6Multicast").getRouterStaticIpv6MulticastOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStaticIpv6Multicast","getRouterStaticIpv6MulticastOutput"], () => require("./getRouterStaticIpv6Multicast"));

export { GetRouterStaticIpv6UnicastArgs, GetRouterStaticIpv6UnicastResult, GetRouterStaticIpv6UnicastOutputArgs } from "./getRouterStaticIpv6Unicast";
export const getRouterStaticIpv6Unicast: typeof import("./getRouterStaticIpv6Unicast").getRouterStaticIpv6Unicast = null as any;
export const getRouterStaticIpv6UnicastOutput: typeof import("./getRouterStaticIpv6Unicast").getRouterStaticIpv6UnicastOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStaticIpv6Unicast","getRouterStaticIpv6UnicastOutput"], () => require("./getRouterStaticIpv6Unicast"));

export { GetRouterStaticVrfIpv4MulticastArgs, GetRouterStaticVrfIpv4MulticastResult, GetRouterStaticVrfIpv4MulticastOutputArgs } from "./getRouterStaticVrfIpv4Multicast";
export const getRouterStaticVrfIpv4Multicast: typeof import("./getRouterStaticVrfIpv4Multicast").getRouterStaticVrfIpv4Multicast = null as any;
export const getRouterStaticVrfIpv4MulticastOutput: typeof import("./getRouterStaticVrfIpv4Multicast").getRouterStaticVrfIpv4MulticastOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStaticVrfIpv4Multicast","getRouterStaticVrfIpv4MulticastOutput"], () => require("./getRouterStaticVrfIpv4Multicast"));

export { GetRouterStaticVrfIpv4UnicastArgs, GetRouterStaticVrfIpv4UnicastResult, GetRouterStaticVrfIpv4UnicastOutputArgs } from "./getRouterStaticVrfIpv4Unicast";
export const getRouterStaticVrfIpv4Unicast: typeof import("./getRouterStaticVrfIpv4Unicast").getRouterStaticVrfIpv4Unicast = null as any;
export const getRouterStaticVrfIpv4UnicastOutput: typeof import("./getRouterStaticVrfIpv4Unicast").getRouterStaticVrfIpv4UnicastOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStaticVrfIpv4Unicast","getRouterStaticVrfIpv4UnicastOutput"], () => require("./getRouterStaticVrfIpv4Unicast"));

export { GetRouterStaticVrfIpv6MulticastArgs, GetRouterStaticVrfIpv6MulticastResult, GetRouterStaticVrfIpv6MulticastOutputArgs } from "./getRouterStaticVrfIpv6Multicast";
export const getRouterStaticVrfIpv6Multicast: typeof import("./getRouterStaticVrfIpv6Multicast").getRouterStaticVrfIpv6Multicast = null as any;
export const getRouterStaticVrfIpv6MulticastOutput: typeof import("./getRouterStaticVrfIpv6Multicast").getRouterStaticVrfIpv6MulticastOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStaticVrfIpv6Multicast","getRouterStaticVrfIpv6MulticastOutput"], () => require("./getRouterStaticVrfIpv6Multicast"));

export { GetRouterStaticVrfIpv6UnicastArgs, GetRouterStaticVrfIpv6UnicastResult, GetRouterStaticVrfIpv6UnicastOutputArgs } from "./getRouterStaticVrfIpv6Unicast";
export const getRouterStaticVrfIpv6Unicast: typeof import("./getRouterStaticVrfIpv6Unicast").getRouterStaticVrfIpv6Unicast = null as any;
export const getRouterStaticVrfIpv6UnicastOutput: typeof import("./getRouterStaticVrfIpv6Unicast").getRouterStaticVrfIpv6UnicastOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStaticVrfIpv6Unicast","getRouterStaticVrfIpv6UnicastOutput"], () => require("./getRouterStaticVrfIpv6Unicast"));

export { GetRouterVrrpInterfaceArgs, GetRouterVrrpInterfaceResult, GetRouterVrrpInterfaceOutputArgs } from "./getRouterVrrpInterface";
export const getRouterVrrpInterface: typeof import("./getRouterVrrpInterface").getRouterVrrpInterface = null as any;
export const getRouterVrrpInterfaceOutput: typeof import("./getRouterVrrpInterface").getRouterVrrpInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getRouterVrrpInterface","getRouterVrrpInterfaceOutput"], () => require("./getRouterVrrpInterface"));

export { GetRouterVrrpInterfaceIpv4Args, GetRouterVrrpInterfaceIpv4Result, GetRouterVrrpInterfaceIpv4OutputArgs } from "./getRouterVrrpInterfaceIpv4";
export const getRouterVrrpInterfaceIpv4: typeof import("./getRouterVrrpInterfaceIpv4").getRouterVrrpInterfaceIpv4 = null as any;
export const getRouterVrrpInterfaceIpv4Output: typeof import("./getRouterVrrpInterfaceIpv4").getRouterVrrpInterfaceIpv4Output = null as any;
utilities.lazyLoad(exports, ["getRouterVrrpInterfaceIpv4","getRouterVrrpInterfaceIpv4Output"], () => require("./getRouterVrrpInterfaceIpv4"));

export { GetRouterVrrpInterfaceIpv6Args, GetRouterVrrpInterfaceIpv6Result, GetRouterVrrpInterfaceIpv6OutputArgs } from "./getRouterVrrpInterfaceIpv6";
export const getRouterVrrpInterfaceIpv6: typeof import("./getRouterVrrpInterfaceIpv6").getRouterVrrpInterfaceIpv6 = null as any;
export const getRouterVrrpInterfaceIpv6Output: typeof import("./getRouterVrrpInterfaceIpv6").getRouterVrrpInterfaceIpv6Output = null as any;
utilities.lazyLoad(exports, ["getRouterVrrpInterfaceIpv6","getRouterVrrpInterfaceIpv6Output"], () => require("./getRouterVrrpInterfaceIpv6"));

export { GetSegmentRoutingArgs, GetSegmentRoutingResult, GetSegmentRoutingOutputArgs } from "./getSegmentRouting";
export const getSegmentRouting: typeof import("./getSegmentRouting").getSegmentRouting = null as any;
export const getSegmentRoutingOutput: typeof import("./getSegmentRouting").getSegmentRoutingOutput = null as any;
utilities.lazyLoad(exports, ["getSegmentRouting","getSegmentRoutingOutput"], () => require("./getSegmentRouting"));

export { GetSegmentRoutingTeArgs, GetSegmentRoutingTeResult, GetSegmentRoutingTeOutputArgs } from "./getSegmentRoutingTe";
export const getSegmentRoutingTe: typeof import("./getSegmentRoutingTe").getSegmentRoutingTe = null as any;
export const getSegmentRoutingTeOutput: typeof import("./getSegmentRoutingTe").getSegmentRoutingTeOutput = null as any;
utilities.lazyLoad(exports, ["getSegmentRoutingTe","getSegmentRoutingTeOutput"], () => require("./getSegmentRoutingTe"));

export { GetSegmentRoutingTePolicyCandidatePathArgs, GetSegmentRoutingTePolicyCandidatePathResult, GetSegmentRoutingTePolicyCandidatePathOutputArgs } from "./getSegmentRoutingTePolicyCandidatePath";
export const getSegmentRoutingTePolicyCandidatePath: typeof import("./getSegmentRoutingTePolicyCandidatePath").getSegmentRoutingTePolicyCandidatePath = null as any;
export const getSegmentRoutingTePolicyCandidatePathOutput: typeof import("./getSegmentRoutingTePolicyCandidatePath").getSegmentRoutingTePolicyCandidatePathOutput = null as any;
utilities.lazyLoad(exports, ["getSegmentRoutingTePolicyCandidatePath","getSegmentRoutingTePolicyCandidatePathOutput"], () => require("./getSegmentRoutingTePolicyCandidatePath"));

export { GetSegmentRoutingV6Args, GetSegmentRoutingV6Result, GetSegmentRoutingV6OutputArgs } from "./getSegmentRoutingV6";
export const getSegmentRoutingV6: typeof import("./getSegmentRoutingV6").getSegmentRoutingV6 = null as any;
export const getSegmentRoutingV6Output: typeof import("./getSegmentRoutingV6").getSegmentRoutingV6Output = null as any;
utilities.lazyLoad(exports, ["getSegmentRoutingV6","getSegmentRoutingV6Output"], () => require("./getSegmentRoutingV6"));

export { GetServiceTimestampsArgs, GetServiceTimestampsResult, GetServiceTimestampsOutputArgs } from "./getServiceTimestamps";
export const getServiceTimestamps: typeof import("./getServiceTimestamps").getServiceTimestamps = null as any;
export const getServiceTimestampsOutput: typeof import("./getServiceTimestamps").getServiceTimestampsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceTimestamps","getServiceTimestampsOutput"], () => require("./getServiceTimestamps"));

export { GetSnmpServerArgs, GetSnmpServerResult, GetSnmpServerOutputArgs } from "./getSnmpServer";
export const getSnmpServer: typeof import("./getSnmpServer").getSnmpServer = null as any;
export const getSnmpServerOutput: typeof import("./getSnmpServer").getSnmpServerOutput = null as any;
utilities.lazyLoad(exports, ["getSnmpServer","getSnmpServerOutput"], () => require("./getSnmpServer"));

export { GetSnmpServerMibArgs, GetSnmpServerMibResult, GetSnmpServerMibOutputArgs } from "./getSnmpServerMib";
export const getSnmpServerMib: typeof import("./getSnmpServerMib").getSnmpServerMib = null as any;
export const getSnmpServerMibOutput: typeof import("./getSnmpServerMib").getSnmpServerMibOutput = null as any;
utilities.lazyLoad(exports, ["getSnmpServerMib","getSnmpServerMibOutput"], () => require("./getSnmpServerMib"));

export { GetSnmpServerViewArgs, GetSnmpServerViewResult, GetSnmpServerViewOutputArgs } from "./getSnmpServerView";
export const getSnmpServerView: typeof import("./getSnmpServerView").getSnmpServerView = null as any;
export const getSnmpServerViewOutput: typeof import("./getSnmpServerView").getSnmpServerViewOutput = null as any;
utilities.lazyLoad(exports, ["getSnmpServerView","getSnmpServerViewOutput"], () => require("./getSnmpServerView"));

export { GetSnmpServerVrfHostArgs, GetSnmpServerVrfHostResult, GetSnmpServerVrfHostOutputArgs } from "./getSnmpServerVrfHost";
export const getSnmpServerVrfHost: typeof import("./getSnmpServerVrfHost").getSnmpServerVrfHost = null as any;
export const getSnmpServerVrfHostOutput: typeof import("./getSnmpServerVrfHost").getSnmpServerVrfHostOutput = null as any;
utilities.lazyLoad(exports, ["getSnmpServerVrfHost","getSnmpServerVrfHostOutput"], () => require("./getSnmpServerVrfHost"));

export { GetSshArgs, GetSshResult, GetSshOutputArgs } from "./getSsh";
export const getSsh: typeof import("./getSsh").getSsh = null as any;
export const getSshOutput: typeof import("./getSsh").getSshOutput = null as any;
utilities.lazyLoad(exports, ["getSsh","getSshOutput"], () => require("./getSsh"));

export { GetTagSetArgs, GetTagSetResult, GetTagSetOutputArgs } from "./getTagSet";
export const getTagSet: typeof import("./getTagSet").getTagSet = null as any;
export const getTagSetOutput: typeof import("./getTagSet").getTagSetOutput = null as any;
utilities.lazyLoad(exports, ["getTagSet","getTagSetOutput"], () => require("./getTagSet"));

export { GetTelnetArgs, GetTelnetResult, GetTelnetOutputArgs } from "./getTelnet";
export const getTelnet: typeof import("./getTelnet").getTelnet = null as any;
export const getTelnetOutput: typeof import("./getTelnet").getTelnetOutput = null as any;
utilities.lazyLoad(exports, ["getTelnet","getTelnetOutput"], () => require("./getTelnet"));

export { GetVrfArgs, GetVrfResult, GetVrfOutputArgs } from "./getVrf";
export const getVrf: typeof import("./getVrf").getVrf = null as any;
export const getVrfOutput: typeof import("./getVrf").getVrfOutput = null as any;
utilities.lazyLoad(exports, ["getVrf","getVrfOutput"], () => require("./getVrf"));

export { GnmiArgs, GnmiState } from "./gnmi";
export type Gnmi = import("./gnmi").Gnmi;
export const Gnmi: typeof import("./gnmi").Gnmi = null as any;
utilities.lazyLoad(exports, ["Gnmi"], () => require("./gnmi"));

export { HostnameArgs, HostnameState } from "./hostname";
export type Hostname = import("./hostname").Hostname;
export const Hostname: typeof import("./hostname").Hostname = null as any;
utilities.lazyLoad(exports, ["Hostname"], () => require("./hostname"));

export { InterfaceArgs, InterfaceState } from "./interface";
export type Interface = import("./interface").Interface;
export const Interface: typeof import("./interface").Interface = null as any;
utilities.lazyLoad(exports, ["Interface"], () => require("./interface"));

export { Ipv4AccessListArgs, Ipv4AccessListState } from "./ipv4AccessList";
export type Ipv4AccessList = import("./ipv4AccessList").Ipv4AccessList;
export const Ipv4AccessList: typeof import("./ipv4AccessList").Ipv4AccessList = null as any;
utilities.lazyLoad(exports, ["Ipv4AccessList"], () => require("./ipv4AccessList"));

export { Ipv4AccessListOptionsArgs, Ipv4AccessListOptionsState } from "./ipv4AccessListOptions";
export type Ipv4AccessListOptions = import("./ipv4AccessListOptions").Ipv4AccessListOptions;
export const Ipv4AccessListOptions: typeof import("./ipv4AccessListOptions").Ipv4AccessListOptions = null as any;
utilities.lazyLoad(exports, ["Ipv4AccessListOptions"], () => require("./ipv4AccessListOptions"));

export { Ipv4PrefixListArgs, Ipv4PrefixListState } from "./ipv4PrefixList";
export type Ipv4PrefixList = import("./ipv4PrefixList").Ipv4PrefixList;
export const Ipv4PrefixList: typeof import("./ipv4PrefixList").Ipv4PrefixList = null as any;
utilities.lazyLoad(exports, ["Ipv4PrefixList"], () => require("./ipv4PrefixList"));

export { Ipv6Args, Ipv6State } from "./ipv6";
export type Ipv6 = import("./ipv6").Ipv6;
export const Ipv6: typeof import("./ipv6").Ipv6 = null as any;
utilities.lazyLoad(exports, ["Ipv6"], () => require("./ipv6"));

export { Ipv6AccessListArgs, Ipv6AccessListState } from "./ipv6AccessList";
export type Ipv6AccessList = import("./ipv6AccessList").Ipv6AccessList;
export const Ipv6AccessList: typeof import("./ipv6AccessList").Ipv6AccessList = null as any;
utilities.lazyLoad(exports, ["Ipv6AccessList"], () => require("./ipv6AccessList"));

export { Ipv6AccessListOptionsArgs, Ipv6AccessListOptionsState } from "./ipv6AccessListOptions";
export type Ipv6AccessListOptions = import("./ipv6AccessListOptions").Ipv6AccessListOptions;
export const Ipv6AccessListOptions: typeof import("./ipv6AccessListOptions").Ipv6AccessListOptions = null as any;
utilities.lazyLoad(exports, ["Ipv6AccessListOptions"], () => require("./ipv6AccessListOptions"));

export { Ipv6PrefixListArgs, Ipv6PrefixListState } from "./ipv6PrefixList";
export type Ipv6PrefixList = import("./ipv6PrefixList").Ipv6PrefixList;
export const Ipv6PrefixList: typeof import("./ipv6PrefixList").Ipv6PrefixList = null as any;
utilities.lazyLoad(exports, ["Ipv6PrefixList"], () => require("./ipv6PrefixList"));

export { KeyChainArgs, KeyChainState } from "./keyChain";
export type KeyChain = import("./keyChain").KeyChain;
export const KeyChain: typeof import("./keyChain").KeyChain = null as any;
utilities.lazyLoad(exports, ["KeyChain"], () => require("./keyChain"));

export { L2vpnArgs, L2vpnState } from "./l2vpn";
export type L2vpn = import("./l2vpn").L2vpn;
export const L2vpn: typeof import("./l2vpn").L2vpn = null as any;
utilities.lazyLoad(exports, ["L2vpn"], () => require("./l2vpn"));

export { L2vpnBridgeGroupArgs, L2vpnBridgeGroupState } from "./l2vpnBridgeGroup";
export type L2vpnBridgeGroup = import("./l2vpnBridgeGroup").L2vpnBridgeGroup;
export const L2vpnBridgeGroup: typeof import("./l2vpnBridgeGroup").L2vpnBridgeGroup = null as any;
utilities.lazyLoad(exports, ["L2vpnBridgeGroup"], () => require("./l2vpnBridgeGroup"));

export { L2vpnBridgeGroupBridgeDomainArgs, L2vpnBridgeGroupBridgeDomainState } from "./l2vpnBridgeGroupBridgeDomain";
export type L2vpnBridgeGroupBridgeDomain = import("./l2vpnBridgeGroupBridgeDomain").L2vpnBridgeGroupBridgeDomain;
export const L2vpnBridgeGroupBridgeDomain: typeof import("./l2vpnBridgeGroupBridgeDomain").L2vpnBridgeGroupBridgeDomain = null as any;
utilities.lazyLoad(exports, ["L2vpnBridgeGroupBridgeDomain"], () => require("./l2vpnBridgeGroupBridgeDomain"));

export { L2vpnPwClassArgs, L2vpnPwClassState } from "./l2vpnPwClass";
export type L2vpnPwClass = import("./l2vpnPwClass").L2vpnPwClass;
export const L2vpnPwClass: typeof import("./l2vpnPwClass").L2vpnPwClass = null as any;
utilities.lazyLoad(exports, ["L2vpnPwClass"], () => require("./l2vpnPwClass"));

export { L2vpnXconnectGroupP2pArgs, L2vpnXconnectGroupP2pState } from "./l2vpnXconnectGroupP2p";
export type L2vpnXconnectGroupP2p = import("./l2vpnXconnectGroupP2p").L2vpnXconnectGroupP2p;
export const L2vpnXconnectGroupP2p: typeof import("./l2vpnXconnectGroupP2p").L2vpnXconnectGroupP2p = null as any;
utilities.lazyLoad(exports, ["L2vpnXconnectGroupP2p"], () => require("./l2vpnXconnectGroupP2p"));

export { LacpArgs, LacpState } from "./lacp";
export type Lacp = import("./lacp").Lacp;
export const Lacp: typeof import("./lacp").Lacp = null as any;
utilities.lazyLoad(exports, ["Lacp"], () => require("./lacp"));

export { LldpArgs, LldpState } from "./lldp";
export type Lldp = import("./lldp").Lldp;
export const Lldp: typeof import("./lldp").Lldp = null as any;
utilities.lazyLoad(exports, ["Lldp"], () => require("./lldp"));

export { LoggingArgs, LoggingState } from "./logging";
export type Logging = import("./logging").Logging;
export const Logging: typeof import("./logging").Logging = null as any;
utilities.lazyLoad(exports, ["Logging"], () => require("./logging"));

export { LoggingSourceInterfaceArgs, LoggingSourceInterfaceState } from "./loggingSourceInterface";
export type LoggingSourceInterface = import("./loggingSourceInterface").LoggingSourceInterface;
export const LoggingSourceInterface: typeof import("./loggingSourceInterface").LoggingSourceInterface = null as any;
utilities.lazyLoad(exports, ["LoggingSourceInterface"], () => require("./loggingSourceInterface"));

export { LoggingVrfArgs, LoggingVrfState } from "./loggingVrf";
export type LoggingVrf = import("./loggingVrf").LoggingVrf;
export const LoggingVrf: typeof import("./loggingVrf").LoggingVrf = null as any;
utilities.lazyLoad(exports, ["LoggingVrf"], () => require("./loggingVrf"));

export { MplsLdpArgs, MplsLdpState } from "./mplsLdp";
export type MplsLdp = import("./mplsLdp").MplsLdp;
export const MplsLdp: typeof import("./mplsLdp").MplsLdp = null as any;
utilities.lazyLoad(exports, ["MplsLdp"], () => require("./mplsLdp"));

export { MplsOamArgs, MplsOamState } from "./mplsOam";
export type MplsOam = import("./mplsOam").MplsOam;
export const MplsOam: typeof import("./mplsOam").MplsOam = null as any;
utilities.lazyLoad(exports, ["MplsOam"], () => require("./mplsOam"));

export { MplsTrafficEngArgs, MplsTrafficEngState } from "./mplsTrafficEng";
export type MplsTrafficEng = import("./mplsTrafficEng").MplsTrafficEng;
export const MplsTrafficEng: typeof import("./mplsTrafficEng").MplsTrafficEng = null as any;
utilities.lazyLoad(exports, ["MplsTrafficEng"], () => require("./mplsTrafficEng"));

export { NtpArgs, NtpState } from "./ntp";
export type Ntp = import("./ntp").Ntp;
export const Ntp: typeof import("./ntp").Ntp = null as any;
utilities.lazyLoad(exports, ["Ntp"], () => require("./ntp"));

export { PceArgs, PceState } from "./pce";
export type Pce = import("./pce").Pce;
export const Pce: typeof import("./pce").Pce = null as any;
utilities.lazyLoad(exports, ["Pce"], () => require("./pce"));

export { PolicyMapQosArgs, PolicyMapQosState } from "./policyMapQos";
export type PolicyMapQos = import("./policyMapQos").PolicyMapQos;
export const PolicyMapQos: typeof import("./policyMapQos").PolicyMapQos = null as any;
utilities.lazyLoad(exports, ["PolicyMapQos"], () => require("./policyMapQos"));

export { PrefixSetArgs, PrefixSetState } from "./prefixSet";
export type PrefixSet = import("./prefixSet").PrefixSet;
export const PrefixSet: typeof import("./prefixSet").PrefixSet = null as any;
utilities.lazyLoad(exports, ["PrefixSet"], () => require("./prefixSet"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RdSetArgs, RdSetState } from "./rdSet";
export type RdSet = import("./rdSet").RdSet;
export const RdSet: typeof import("./rdSet").RdSet = null as any;
utilities.lazyLoad(exports, ["RdSet"], () => require("./rdSet"));

export { RoutePolicyArgs, RoutePolicyState } from "./routePolicy";
export type RoutePolicy = import("./routePolicy").RoutePolicy;
export const RoutePolicy: typeof import("./routePolicy").RoutePolicy = null as any;
utilities.lazyLoad(exports, ["RoutePolicy"], () => require("./routePolicy"));

export { RouterBgpArgs, RouterBgpState } from "./routerBgp";
export type RouterBgp = import("./routerBgp").RouterBgp;
export const RouterBgp: typeof import("./routerBgp").RouterBgp = null as any;
utilities.lazyLoad(exports, ["RouterBgp"], () => require("./routerBgp"));

export { RouterBgpAddressFamilyArgs, RouterBgpAddressFamilyState } from "./routerBgpAddressFamily";
export type RouterBgpAddressFamily = import("./routerBgpAddressFamily").RouterBgpAddressFamily;
export const RouterBgpAddressFamily: typeof import("./routerBgpAddressFamily").RouterBgpAddressFamily = null as any;
utilities.lazyLoad(exports, ["RouterBgpAddressFamily"], () => require("./routerBgpAddressFamily"));

export { RouterBgpNeighborAddressFamilyArgs, RouterBgpNeighborAddressFamilyState } from "./routerBgpNeighborAddressFamily";
export type RouterBgpNeighborAddressFamily = import("./routerBgpNeighborAddressFamily").RouterBgpNeighborAddressFamily;
export const RouterBgpNeighborAddressFamily: typeof import("./routerBgpNeighborAddressFamily").RouterBgpNeighborAddressFamily = null as any;
utilities.lazyLoad(exports, ["RouterBgpNeighborAddressFamily"], () => require("./routerBgpNeighborAddressFamily"));

export { RouterBgpNeighborGroupArgs, RouterBgpNeighborGroupState } from "./routerBgpNeighborGroup";
export type RouterBgpNeighborGroup = import("./routerBgpNeighborGroup").RouterBgpNeighborGroup;
export const RouterBgpNeighborGroup: typeof import("./routerBgpNeighborGroup").RouterBgpNeighborGroup = null as any;
utilities.lazyLoad(exports, ["RouterBgpNeighborGroup"], () => require("./routerBgpNeighborGroup"));

export { RouterBgpVrfArgs, RouterBgpVrfState } from "./routerBgpVrf";
export type RouterBgpVrf = import("./routerBgpVrf").RouterBgpVrf;
export const RouterBgpVrf: typeof import("./routerBgpVrf").RouterBgpVrf = null as any;
utilities.lazyLoad(exports, ["RouterBgpVrf"], () => require("./routerBgpVrf"));

export { RouterBgpVrfAddressFamilyArgs, RouterBgpVrfAddressFamilyState } from "./routerBgpVrfAddressFamily";
export type RouterBgpVrfAddressFamily = import("./routerBgpVrfAddressFamily").RouterBgpVrfAddressFamily;
export const RouterBgpVrfAddressFamily: typeof import("./routerBgpVrfAddressFamily").RouterBgpVrfAddressFamily = null as any;
utilities.lazyLoad(exports, ["RouterBgpVrfAddressFamily"], () => require("./routerBgpVrfAddressFamily"));

export { RouterBgpVrfNeighborAddressFamilyArgs, RouterBgpVrfNeighborAddressFamilyState } from "./routerBgpVrfNeighborAddressFamily";
export type RouterBgpVrfNeighborAddressFamily = import("./routerBgpVrfNeighborAddressFamily").RouterBgpVrfNeighborAddressFamily;
export const RouterBgpVrfNeighborAddressFamily: typeof import("./routerBgpVrfNeighborAddressFamily").RouterBgpVrfNeighborAddressFamily = null as any;
utilities.lazyLoad(exports, ["RouterBgpVrfNeighborAddressFamily"], () => require("./routerBgpVrfNeighborAddressFamily"));

export { RouterHsrpInterfaceArgs, RouterHsrpInterfaceState } from "./routerHsrpInterface";
export type RouterHsrpInterface = import("./routerHsrpInterface").RouterHsrpInterface;
export const RouterHsrpInterface: typeof import("./routerHsrpInterface").RouterHsrpInterface = null as any;
utilities.lazyLoad(exports, ["RouterHsrpInterface"], () => require("./routerHsrpInterface"));

export { RouterHsrpInterfaceIpv4GroupV1Args, RouterHsrpInterfaceIpv4GroupV1State } from "./routerHsrpInterfaceIpv4GroupV1";
export type RouterHsrpInterfaceIpv4GroupV1 = import("./routerHsrpInterfaceIpv4GroupV1").RouterHsrpInterfaceIpv4GroupV1;
export const RouterHsrpInterfaceIpv4GroupV1: typeof import("./routerHsrpInterfaceIpv4GroupV1").RouterHsrpInterfaceIpv4GroupV1 = null as any;
utilities.lazyLoad(exports, ["RouterHsrpInterfaceIpv4GroupV1"], () => require("./routerHsrpInterfaceIpv4GroupV1"));

export { RouterHsrpInterfaceIpv4GroupV2Args, RouterHsrpInterfaceIpv4GroupV2State } from "./routerHsrpInterfaceIpv4GroupV2";
export type RouterHsrpInterfaceIpv4GroupV2 = import("./routerHsrpInterfaceIpv4GroupV2").RouterHsrpInterfaceIpv4GroupV2;
export const RouterHsrpInterfaceIpv4GroupV2: typeof import("./routerHsrpInterfaceIpv4GroupV2").RouterHsrpInterfaceIpv4GroupV2 = null as any;
utilities.lazyLoad(exports, ["RouterHsrpInterfaceIpv4GroupV2"], () => require("./routerHsrpInterfaceIpv4GroupV2"));

export { RouterHsrpInterfaceIpv6GroupV2Args, RouterHsrpInterfaceIpv6GroupV2State } from "./routerHsrpInterfaceIpv6GroupV2";
export type RouterHsrpInterfaceIpv6GroupV2 = import("./routerHsrpInterfaceIpv6GroupV2").RouterHsrpInterfaceIpv6GroupV2;
export const RouterHsrpInterfaceIpv6GroupV2: typeof import("./routerHsrpInterfaceIpv6GroupV2").RouterHsrpInterfaceIpv6GroupV2 = null as any;
utilities.lazyLoad(exports, ["RouterHsrpInterfaceIpv6GroupV2"], () => require("./routerHsrpInterfaceIpv6GroupV2"));

export { RouterIsisArgs, RouterIsisState } from "./routerIsis";
export type RouterIsis = import("./routerIsis").RouterIsis;
export const RouterIsis: typeof import("./routerIsis").RouterIsis = null as any;
utilities.lazyLoad(exports, ["RouterIsis"], () => require("./routerIsis"));

export { RouterIsisAddressFamilyArgs, RouterIsisAddressFamilyState } from "./routerIsisAddressFamily";
export type RouterIsisAddressFamily = import("./routerIsisAddressFamily").RouterIsisAddressFamily;
export const RouterIsisAddressFamily: typeof import("./routerIsisAddressFamily").RouterIsisAddressFamily = null as any;
utilities.lazyLoad(exports, ["RouterIsisAddressFamily"], () => require("./routerIsisAddressFamily"));

export { RouterIsisInterfaceArgs, RouterIsisInterfaceState } from "./routerIsisInterface";
export type RouterIsisInterface = import("./routerIsisInterface").RouterIsisInterface;
export const RouterIsisInterface: typeof import("./routerIsisInterface").RouterIsisInterface = null as any;
utilities.lazyLoad(exports, ["RouterIsisInterface"], () => require("./routerIsisInterface"));

export { RouterIsisInterfaceAddressFamilyArgs, RouterIsisInterfaceAddressFamilyState } from "./routerIsisInterfaceAddressFamily";
export type RouterIsisInterfaceAddressFamily = import("./routerIsisInterfaceAddressFamily").RouterIsisInterfaceAddressFamily;
export const RouterIsisInterfaceAddressFamily: typeof import("./routerIsisInterfaceAddressFamily").RouterIsisInterfaceAddressFamily = null as any;
utilities.lazyLoad(exports, ["RouterIsisInterfaceAddressFamily"], () => require("./routerIsisInterfaceAddressFamily"));

export { RouterOspfArgs, RouterOspfState } from "./routerOspf";
export type RouterOspf = import("./routerOspf").RouterOspf;
export const RouterOspf: typeof import("./routerOspf").RouterOspf = null as any;
utilities.lazyLoad(exports, ["RouterOspf"], () => require("./routerOspf"));

export { RouterOspfAreaInterfaceArgs, RouterOspfAreaInterfaceState } from "./routerOspfAreaInterface";
export type RouterOspfAreaInterface = import("./routerOspfAreaInterface").RouterOspfAreaInterface;
export const RouterOspfAreaInterface: typeof import("./routerOspfAreaInterface").RouterOspfAreaInterface = null as any;
utilities.lazyLoad(exports, ["RouterOspfAreaInterface"], () => require("./routerOspfAreaInterface"));

export { RouterOspfVrfArgs, RouterOspfVrfState } from "./routerOspfVrf";
export type RouterOspfVrf = import("./routerOspfVrf").RouterOspfVrf;
export const RouterOspfVrf: typeof import("./routerOspfVrf").RouterOspfVrf = null as any;
utilities.lazyLoad(exports, ["RouterOspfVrf"], () => require("./routerOspfVrf"));

export { RouterOspfVrfAreaInterfaceArgs, RouterOspfVrfAreaInterfaceState } from "./routerOspfVrfAreaInterface";
export type RouterOspfVrfAreaInterface = import("./routerOspfVrfAreaInterface").RouterOspfVrfAreaInterface;
export const RouterOspfVrfAreaInterface: typeof import("./routerOspfVrfAreaInterface").RouterOspfVrfAreaInterface = null as any;
utilities.lazyLoad(exports, ["RouterOspfVrfAreaInterface"], () => require("./routerOspfVrfAreaInterface"));

export { RouterStaticIpv4MulticastArgs, RouterStaticIpv4MulticastState } from "./routerStaticIpv4Multicast";
export type RouterStaticIpv4Multicast = import("./routerStaticIpv4Multicast").RouterStaticIpv4Multicast;
export const RouterStaticIpv4Multicast: typeof import("./routerStaticIpv4Multicast").RouterStaticIpv4Multicast = null as any;
utilities.lazyLoad(exports, ["RouterStaticIpv4Multicast"], () => require("./routerStaticIpv4Multicast"));

export { RouterStaticIpv4UnicastArgs, RouterStaticIpv4UnicastState } from "./routerStaticIpv4Unicast";
export type RouterStaticIpv4Unicast = import("./routerStaticIpv4Unicast").RouterStaticIpv4Unicast;
export const RouterStaticIpv4Unicast: typeof import("./routerStaticIpv4Unicast").RouterStaticIpv4Unicast = null as any;
utilities.lazyLoad(exports, ["RouterStaticIpv4Unicast"], () => require("./routerStaticIpv4Unicast"));

export { RouterStaticIpv6MulticastArgs, RouterStaticIpv6MulticastState } from "./routerStaticIpv6Multicast";
export type RouterStaticIpv6Multicast = import("./routerStaticIpv6Multicast").RouterStaticIpv6Multicast;
export const RouterStaticIpv6Multicast: typeof import("./routerStaticIpv6Multicast").RouterStaticIpv6Multicast = null as any;
utilities.lazyLoad(exports, ["RouterStaticIpv6Multicast"], () => require("./routerStaticIpv6Multicast"));

export { RouterStaticIpv6UnicastArgs, RouterStaticIpv6UnicastState } from "./routerStaticIpv6Unicast";
export type RouterStaticIpv6Unicast = import("./routerStaticIpv6Unicast").RouterStaticIpv6Unicast;
export const RouterStaticIpv6Unicast: typeof import("./routerStaticIpv6Unicast").RouterStaticIpv6Unicast = null as any;
utilities.lazyLoad(exports, ["RouterStaticIpv6Unicast"], () => require("./routerStaticIpv6Unicast"));

export { RouterStaticVrfIpv4MulticastArgs, RouterStaticVrfIpv4MulticastState } from "./routerStaticVrfIpv4Multicast";
export type RouterStaticVrfIpv4Multicast = import("./routerStaticVrfIpv4Multicast").RouterStaticVrfIpv4Multicast;
export const RouterStaticVrfIpv4Multicast: typeof import("./routerStaticVrfIpv4Multicast").RouterStaticVrfIpv4Multicast = null as any;
utilities.lazyLoad(exports, ["RouterStaticVrfIpv4Multicast"], () => require("./routerStaticVrfIpv4Multicast"));

export { RouterStaticVrfIpv4UnicastArgs, RouterStaticVrfIpv4UnicastState } from "./routerStaticVrfIpv4Unicast";
export type RouterStaticVrfIpv4Unicast = import("./routerStaticVrfIpv4Unicast").RouterStaticVrfIpv4Unicast;
export const RouterStaticVrfIpv4Unicast: typeof import("./routerStaticVrfIpv4Unicast").RouterStaticVrfIpv4Unicast = null as any;
utilities.lazyLoad(exports, ["RouterStaticVrfIpv4Unicast"], () => require("./routerStaticVrfIpv4Unicast"));

export { RouterStaticVrfIpv6MulticastArgs, RouterStaticVrfIpv6MulticastState } from "./routerStaticVrfIpv6Multicast";
export type RouterStaticVrfIpv6Multicast = import("./routerStaticVrfIpv6Multicast").RouterStaticVrfIpv6Multicast;
export const RouterStaticVrfIpv6Multicast: typeof import("./routerStaticVrfIpv6Multicast").RouterStaticVrfIpv6Multicast = null as any;
utilities.lazyLoad(exports, ["RouterStaticVrfIpv6Multicast"], () => require("./routerStaticVrfIpv6Multicast"));

export { RouterStaticVrfIpv6UnicastArgs, RouterStaticVrfIpv6UnicastState } from "./routerStaticVrfIpv6Unicast";
export type RouterStaticVrfIpv6Unicast = import("./routerStaticVrfIpv6Unicast").RouterStaticVrfIpv6Unicast;
export const RouterStaticVrfIpv6Unicast: typeof import("./routerStaticVrfIpv6Unicast").RouterStaticVrfIpv6Unicast = null as any;
utilities.lazyLoad(exports, ["RouterStaticVrfIpv6Unicast"], () => require("./routerStaticVrfIpv6Unicast"));

export { RouterVrrpInterfaceArgs, RouterVrrpInterfaceState } from "./routerVrrpInterface";
export type RouterVrrpInterface = import("./routerVrrpInterface").RouterVrrpInterface;
export const RouterVrrpInterface: typeof import("./routerVrrpInterface").RouterVrrpInterface = null as any;
utilities.lazyLoad(exports, ["RouterVrrpInterface"], () => require("./routerVrrpInterface"));

export { RouterVrrpInterfaceIpv4Args, RouterVrrpInterfaceIpv4State } from "./routerVrrpInterfaceIpv4";
export type RouterVrrpInterfaceIpv4 = import("./routerVrrpInterfaceIpv4").RouterVrrpInterfaceIpv4;
export const RouterVrrpInterfaceIpv4: typeof import("./routerVrrpInterfaceIpv4").RouterVrrpInterfaceIpv4 = null as any;
utilities.lazyLoad(exports, ["RouterVrrpInterfaceIpv4"], () => require("./routerVrrpInterfaceIpv4"));

export { RouterVrrpInterfaceIpv6Args, RouterVrrpInterfaceIpv6State } from "./routerVrrpInterfaceIpv6";
export type RouterVrrpInterfaceIpv6 = import("./routerVrrpInterfaceIpv6").RouterVrrpInterfaceIpv6;
export const RouterVrrpInterfaceIpv6: typeof import("./routerVrrpInterfaceIpv6").RouterVrrpInterfaceIpv6 = null as any;
utilities.lazyLoad(exports, ["RouterVrrpInterfaceIpv6"], () => require("./routerVrrpInterfaceIpv6"));

export { SegmentRoutingArgs, SegmentRoutingState } from "./segmentRouting";
export type SegmentRouting = import("./segmentRouting").SegmentRouting;
export const SegmentRouting: typeof import("./segmentRouting").SegmentRouting = null as any;
utilities.lazyLoad(exports, ["SegmentRouting"], () => require("./segmentRouting"));

export { SegmentRoutingTeArgs, SegmentRoutingTeState } from "./segmentRoutingTe";
export type SegmentRoutingTe = import("./segmentRoutingTe").SegmentRoutingTe;
export const SegmentRoutingTe: typeof import("./segmentRoutingTe").SegmentRoutingTe = null as any;
utilities.lazyLoad(exports, ["SegmentRoutingTe"], () => require("./segmentRoutingTe"));

export { SegmentRoutingTePolicyCandidatePathArgs, SegmentRoutingTePolicyCandidatePathState } from "./segmentRoutingTePolicyCandidatePath";
export type SegmentRoutingTePolicyCandidatePath = import("./segmentRoutingTePolicyCandidatePath").SegmentRoutingTePolicyCandidatePath;
export const SegmentRoutingTePolicyCandidatePath: typeof import("./segmentRoutingTePolicyCandidatePath").SegmentRoutingTePolicyCandidatePath = null as any;
utilities.lazyLoad(exports, ["SegmentRoutingTePolicyCandidatePath"], () => require("./segmentRoutingTePolicyCandidatePath"));

export { SegmentRoutingV6Args, SegmentRoutingV6State } from "./segmentRoutingV6";
export type SegmentRoutingV6 = import("./segmentRoutingV6").SegmentRoutingV6;
export const SegmentRoutingV6: typeof import("./segmentRoutingV6").SegmentRoutingV6 = null as any;
utilities.lazyLoad(exports, ["SegmentRoutingV6"], () => require("./segmentRoutingV6"));

export { ServiceTimestampsArgs, ServiceTimestampsState } from "./serviceTimestamps";
export type ServiceTimestamps = import("./serviceTimestamps").ServiceTimestamps;
export const ServiceTimestamps: typeof import("./serviceTimestamps").ServiceTimestamps = null as any;
utilities.lazyLoad(exports, ["ServiceTimestamps"], () => require("./serviceTimestamps"));

export { SnmpServerArgs, SnmpServerState } from "./snmpServer";
export type SnmpServer = import("./snmpServer").SnmpServer;
export const SnmpServer: typeof import("./snmpServer").SnmpServer = null as any;
utilities.lazyLoad(exports, ["SnmpServer"], () => require("./snmpServer"));

export { SnmpServerMibArgs, SnmpServerMibState } from "./snmpServerMib";
export type SnmpServerMib = import("./snmpServerMib").SnmpServerMib;
export const SnmpServerMib: typeof import("./snmpServerMib").SnmpServerMib = null as any;
utilities.lazyLoad(exports, ["SnmpServerMib"], () => require("./snmpServerMib"));

export { SnmpServerViewArgs, SnmpServerViewState } from "./snmpServerView";
export type SnmpServerView = import("./snmpServerView").SnmpServerView;
export const SnmpServerView: typeof import("./snmpServerView").SnmpServerView = null as any;
utilities.lazyLoad(exports, ["SnmpServerView"], () => require("./snmpServerView"));

export { SnmpServerVrfHostArgs, SnmpServerVrfHostState } from "./snmpServerVrfHost";
export type SnmpServerVrfHost = import("./snmpServerVrfHost").SnmpServerVrfHost;
export const SnmpServerVrfHost: typeof import("./snmpServerVrfHost").SnmpServerVrfHost = null as any;
utilities.lazyLoad(exports, ["SnmpServerVrfHost"], () => require("./snmpServerVrfHost"));

export { SshArgs, SshState } from "./ssh";
export type Ssh = import("./ssh").Ssh;
export const Ssh: typeof import("./ssh").Ssh = null as any;
utilities.lazyLoad(exports, ["Ssh"], () => require("./ssh"));

export { TagSetArgs, TagSetState } from "./tagSet";
export type TagSet = import("./tagSet").TagSet;
export const TagSet: typeof import("./tagSet").TagSet = null as any;
utilities.lazyLoad(exports, ["TagSet"], () => require("./tagSet"));

export { TelnetArgs, TelnetState } from "./telnet";
export type Telnet = import("./telnet").Telnet;
export const Telnet: typeof import("./telnet").Telnet = null as any;
utilities.lazyLoad(exports, ["Telnet"], () => require("./telnet"));

export { VrfArgs, VrfState } from "./vrf";
export type Vrf = import("./vrf").Vrf;
export const Vrf: typeof import("./vrf").Vrf = null as any;
utilities.lazyLoad(exports, ["Vrf"], () => require("./vrf"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "iosxr:index/asPathSet:AsPathSet":
                return new AsPathSet(name, <any>undefined, { urn })
            case "iosxr:index/banner:Banner":
                return new Banner(name, <any>undefined, { urn })
            case "iosxr:index/bfd:Bfd":
                return new Bfd(name, <any>undefined, { urn })
            case "iosxr:index/bgpAsFormat:BgpAsFormat":
                return new BgpAsFormat(name, <any>undefined, { urn })
            case "iosxr:index/cdp:Cdp":
                return new Cdp(name, <any>undefined, { urn })
            case "iosxr:index/classMapQos:ClassMapQos":
                return new ClassMapQos(name, <any>undefined, { urn })
            case "iosxr:index/communitySet:CommunitySet":
                return new CommunitySet(name, <any>undefined, { urn })
            case "iosxr:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "iosxr:index/domainVrf:DomainVrf":
                return new DomainVrf(name, <any>undefined, { urn })
            case "iosxr:index/errorDisableRecovery:ErrorDisableRecovery":
                return new ErrorDisableRecovery(name, <any>undefined, { urn })
            case "iosxr:index/esiSet:EsiSet":
                return new EsiSet(name, <any>undefined, { urn })
            case "iosxr:index/evpn:Evpn":
                return new Evpn(name, <any>undefined, { urn })
            case "iosxr:index/evpnEvi:EvpnEvi":
                return new EvpnEvi(name, <any>undefined, { urn })
            case "iosxr:index/evpnGroup:EvpnGroup":
                return new EvpnGroup(name, <any>undefined, { urn })
            case "iosxr:index/evpnInterface:EvpnInterface":
                return new EvpnInterface(name, <any>undefined, { urn })
            case "iosxr:index/evpnSegmentRoutingSrv6Evi:EvpnSegmentRoutingSrv6Evi":
                return new EvpnSegmentRoutingSrv6Evi(name, <any>undefined, { urn })
            case "iosxr:index/extcommunityCostSet:ExtcommunityCostSet":
                return new ExtcommunityCostSet(name, <any>undefined, { urn })
            case "iosxr:index/extcommunityOpaqueSet:ExtcommunityOpaqueSet":
                return new ExtcommunityOpaqueSet(name, <any>undefined, { urn })
            case "iosxr:index/extcommunityRtSet:ExtcommunityRtSet":
                return new ExtcommunityRtSet(name, <any>undefined, { urn })
            case "iosxr:index/extcommunitySooSet:ExtcommunitySooSet":
                return new ExtcommunitySooSet(name, <any>undefined, { urn })
            case "iosxr:index/flowExporterMap:FlowExporterMap":
                return new FlowExporterMap(name, <any>undefined, { urn })
            case "iosxr:index/flowMonitorMap:FlowMonitorMap":
                return new FlowMonitorMap(name, <any>undefined, { urn })
            case "iosxr:index/flowSamplerMap:FlowSamplerMap":
                return new FlowSamplerMap(name, <any>undefined, { urn })
            case "iosxr:index/fpd:Fpd":
                return new Fpd(name, <any>undefined, { urn })
            case "iosxr:index/gnmi:Gnmi":
                return new Gnmi(name, <any>undefined, { urn })
            case "iosxr:index/hostname:Hostname":
                return new Hostname(name, <any>undefined, { urn })
            case "iosxr:index/interface:Interface":
                return new Interface(name, <any>undefined, { urn })
            case "iosxr:index/ipv4AccessList:Ipv4AccessList":
                return new Ipv4AccessList(name, <any>undefined, { urn })
            case "iosxr:index/ipv4AccessListOptions:Ipv4AccessListOptions":
                return new Ipv4AccessListOptions(name, <any>undefined, { urn })
            case "iosxr:index/ipv4PrefixList:Ipv4PrefixList":
                return new Ipv4PrefixList(name, <any>undefined, { urn })
            case "iosxr:index/ipv6:Ipv6":
                return new Ipv6(name, <any>undefined, { urn })
            case "iosxr:index/ipv6AccessList:Ipv6AccessList":
                return new Ipv6AccessList(name, <any>undefined, { urn })
            case "iosxr:index/ipv6AccessListOptions:Ipv6AccessListOptions":
                return new Ipv6AccessListOptions(name, <any>undefined, { urn })
            case "iosxr:index/ipv6PrefixList:Ipv6PrefixList":
                return new Ipv6PrefixList(name, <any>undefined, { urn })
            case "iosxr:index/keyChain:KeyChain":
                return new KeyChain(name, <any>undefined, { urn })
            case "iosxr:index/l2vpn:L2vpn":
                return new L2vpn(name, <any>undefined, { urn })
            case "iosxr:index/l2vpnBridgeGroup:L2vpnBridgeGroup":
                return new L2vpnBridgeGroup(name, <any>undefined, { urn })
            case "iosxr:index/l2vpnBridgeGroupBridgeDomain:L2vpnBridgeGroupBridgeDomain":
                return new L2vpnBridgeGroupBridgeDomain(name, <any>undefined, { urn })
            case "iosxr:index/l2vpnPwClass:L2vpnPwClass":
                return new L2vpnPwClass(name, <any>undefined, { urn })
            case "iosxr:index/l2vpnXconnectGroupP2p:L2vpnXconnectGroupP2p":
                return new L2vpnXconnectGroupP2p(name, <any>undefined, { urn })
            case "iosxr:index/lacp:Lacp":
                return new Lacp(name, <any>undefined, { urn })
            case "iosxr:index/lldp:Lldp":
                return new Lldp(name, <any>undefined, { urn })
            case "iosxr:index/logging:Logging":
                return new Logging(name, <any>undefined, { urn })
            case "iosxr:index/loggingSourceInterface:LoggingSourceInterface":
                return new LoggingSourceInterface(name, <any>undefined, { urn })
            case "iosxr:index/loggingVrf:LoggingVrf":
                return new LoggingVrf(name, <any>undefined, { urn })
            case "iosxr:index/mplsLdp:MplsLdp":
                return new MplsLdp(name, <any>undefined, { urn })
            case "iosxr:index/mplsOam:MplsOam":
                return new MplsOam(name, <any>undefined, { urn })
            case "iosxr:index/mplsTrafficEng:MplsTrafficEng":
                return new MplsTrafficEng(name, <any>undefined, { urn })
            case "iosxr:index/ntp:Ntp":
                return new Ntp(name, <any>undefined, { urn })
            case "iosxr:index/pce:Pce":
                return new Pce(name, <any>undefined, { urn })
            case "iosxr:index/policyMapQos:PolicyMapQos":
                return new PolicyMapQos(name, <any>undefined, { urn })
            case "iosxr:index/prefixSet:PrefixSet":
                return new PrefixSet(name, <any>undefined, { urn })
            case "iosxr:index/rdSet:RdSet":
                return new RdSet(name, <any>undefined, { urn })
            case "iosxr:index/routePolicy:RoutePolicy":
                return new RoutePolicy(name, <any>undefined, { urn })
            case "iosxr:index/routerBgp:RouterBgp":
                return new RouterBgp(name, <any>undefined, { urn })
            case "iosxr:index/routerBgpAddressFamily:RouterBgpAddressFamily":
                return new RouterBgpAddressFamily(name, <any>undefined, { urn })
            case "iosxr:index/routerBgpNeighborAddressFamily:RouterBgpNeighborAddressFamily":
                return new RouterBgpNeighborAddressFamily(name, <any>undefined, { urn })
            case "iosxr:index/routerBgpNeighborGroup:RouterBgpNeighborGroup":
                return new RouterBgpNeighborGroup(name, <any>undefined, { urn })
            case "iosxr:index/routerBgpVrf:RouterBgpVrf":
                return new RouterBgpVrf(name, <any>undefined, { urn })
            case "iosxr:index/routerBgpVrfAddressFamily:RouterBgpVrfAddressFamily":
                return new RouterBgpVrfAddressFamily(name, <any>undefined, { urn })
            case "iosxr:index/routerBgpVrfNeighborAddressFamily:RouterBgpVrfNeighborAddressFamily":
                return new RouterBgpVrfNeighborAddressFamily(name, <any>undefined, { urn })
            case "iosxr:index/routerHsrpInterface:RouterHsrpInterface":
                return new RouterHsrpInterface(name, <any>undefined, { urn })
            case "iosxr:index/routerHsrpInterfaceIpv4GroupV1:RouterHsrpInterfaceIpv4GroupV1":
                return new RouterHsrpInterfaceIpv4GroupV1(name, <any>undefined, { urn })
            case "iosxr:index/routerHsrpInterfaceIpv4GroupV2:RouterHsrpInterfaceIpv4GroupV2":
                return new RouterHsrpInterfaceIpv4GroupV2(name, <any>undefined, { urn })
            case "iosxr:index/routerHsrpInterfaceIpv6GroupV2:RouterHsrpInterfaceIpv6GroupV2":
                return new RouterHsrpInterfaceIpv6GroupV2(name, <any>undefined, { urn })
            case "iosxr:index/routerIsis:RouterIsis":
                return new RouterIsis(name, <any>undefined, { urn })
            case "iosxr:index/routerIsisAddressFamily:RouterIsisAddressFamily":
                return new RouterIsisAddressFamily(name, <any>undefined, { urn })
            case "iosxr:index/routerIsisInterface:RouterIsisInterface":
                return new RouterIsisInterface(name, <any>undefined, { urn })
            case "iosxr:index/routerIsisInterfaceAddressFamily:RouterIsisInterfaceAddressFamily":
                return new RouterIsisInterfaceAddressFamily(name, <any>undefined, { urn })
            case "iosxr:index/routerOspf:RouterOspf":
                return new RouterOspf(name, <any>undefined, { urn })
            case "iosxr:index/routerOspfAreaInterface:RouterOspfAreaInterface":
                return new RouterOspfAreaInterface(name, <any>undefined, { urn })
            case "iosxr:index/routerOspfVrf:RouterOspfVrf":
                return new RouterOspfVrf(name, <any>undefined, { urn })
            case "iosxr:index/routerOspfVrfAreaInterface:RouterOspfVrfAreaInterface":
                return new RouterOspfVrfAreaInterface(name, <any>undefined, { urn })
            case "iosxr:index/routerStaticIpv4Multicast:RouterStaticIpv4Multicast":
                return new RouterStaticIpv4Multicast(name, <any>undefined, { urn })
            case "iosxr:index/routerStaticIpv4Unicast:RouterStaticIpv4Unicast":
                return new RouterStaticIpv4Unicast(name, <any>undefined, { urn })
            case "iosxr:index/routerStaticIpv6Multicast:RouterStaticIpv6Multicast":
                return new RouterStaticIpv6Multicast(name, <any>undefined, { urn })
            case "iosxr:index/routerStaticIpv6Unicast:RouterStaticIpv6Unicast":
                return new RouterStaticIpv6Unicast(name, <any>undefined, { urn })
            case "iosxr:index/routerStaticVrfIpv4Multicast:RouterStaticVrfIpv4Multicast":
                return new RouterStaticVrfIpv4Multicast(name, <any>undefined, { urn })
            case "iosxr:index/routerStaticVrfIpv4Unicast:RouterStaticVrfIpv4Unicast":
                return new RouterStaticVrfIpv4Unicast(name, <any>undefined, { urn })
            case "iosxr:index/routerStaticVrfIpv6Multicast:RouterStaticVrfIpv6Multicast":
                return new RouterStaticVrfIpv6Multicast(name, <any>undefined, { urn })
            case "iosxr:index/routerStaticVrfIpv6Unicast:RouterStaticVrfIpv6Unicast":
                return new RouterStaticVrfIpv6Unicast(name, <any>undefined, { urn })
            case "iosxr:index/routerVrrpInterface:RouterVrrpInterface":
                return new RouterVrrpInterface(name, <any>undefined, { urn })
            case "iosxr:index/routerVrrpInterfaceIpv4:RouterVrrpInterfaceIpv4":
                return new RouterVrrpInterfaceIpv4(name, <any>undefined, { urn })
            case "iosxr:index/routerVrrpInterfaceIpv6:RouterVrrpInterfaceIpv6":
                return new RouterVrrpInterfaceIpv6(name, <any>undefined, { urn })
            case "iosxr:index/segmentRouting:SegmentRouting":
                return new SegmentRouting(name, <any>undefined, { urn })
            case "iosxr:index/segmentRoutingTe:SegmentRoutingTe":
                return new SegmentRoutingTe(name, <any>undefined, { urn })
            case "iosxr:index/segmentRoutingTePolicyCandidatePath:SegmentRoutingTePolicyCandidatePath":
                return new SegmentRoutingTePolicyCandidatePath(name, <any>undefined, { urn })
            case "iosxr:index/segmentRoutingV6:SegmentRoutingV6":
                return new SegmentRoutingV6(name, <any>undefined, { urn })
            case "iosxr:index/serviceTimestamps:ServiceTimestamps":
                return new ServiceTimestamps(name, <any>undefined, { urn })
            case "iosxr:index/snmpServer:SnmpServer":
                return new SnmpServer(name, <any>undefined, { urn })
            case "iosxr:index/snmpServerMib:SnmpServerMib":
                return new SnmpServerMib(name, <any>undefined, { urn })
            case "iosxr:index/snmpServerView:SnmpServerView":
                return new SnmpServerView(name, <any>undefined, { urn })
            case "iosxr:index/snmpServerVrfHost:SnmpServerVrfHost":
                return new SnmpServerVrfHost(name, <any>undefined, { urn })
            case "iosxr:index/ssh:Ssh":
                return new Ssh(name, <any>undefined, { urn })
            case "iosxr:index/tagSet:TagSet":
                return new TagSet(name, <any>undefined, { urn })
            case "iosxr:index/telnet:Telnet":
                return new Telnet(name, <any>undefined, { urn })
            case "iosxr:index/vrf:Vrf":
                return new Vrf(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("iosxr", "index/asPathSet", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/banner", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/bfd", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/bgpAsFormat", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/cdp", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/classMapQos", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/communitySet", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/domain", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/domainVrf", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/errorDisableRecovery", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/esiSet", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/evpn", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/evpnEvi", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/evpnGroup", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/evpnInterface", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/evpnSegmentRoutingSrv6Evi", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/extcommunityCostSet", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/extcommunityOpaqueSet", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/extcommunityRtSet", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/extcommunitySooSet", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/flowExporterMap", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/flowMonitorMap", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/flowSamplerMap", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/fpd", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/gnmi", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/hostname", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/interface", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/ipv4AccessList", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/ipv4AccessListOptions", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/ipv4PrefixList", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/ipv6", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/ipv6AccessList", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/ipv6AccessListOptions", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/ipv6PrefixList", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/keyChain", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/l2vpn", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/l2vpnBridgeGroup", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/l2vpnBridgeGroupBridgeDomain", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/l2vpnPwClass", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/l2vpnXconnectGroupP2p", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/lacp", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/lldp", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/logging", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/loggingSourceInterface", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/loggingVrf", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/mplsLdp", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/mplsOam", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/mplsTrafficEng", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/ntp", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/pce", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/policyMapQos", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/prefixSet", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/rdSet", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routePolicy", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerBgp", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerBgpAddressFamily", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerBgpNeighborAddressFamily", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerBgpNeighborGroup", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerBgpVrf", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerBgpVrfAddressFamily", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerBgpVrfNeighborAddressFamily", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerHsrpInterface", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerHsrpInterfaceIpv4GroupV1", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerHsrpInterfaceIpv4GroupV2", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerHsrpInterfaceIpv6GroupV2", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerIsis", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerIsisAddressFamily", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerIsisInterface", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerIsisInterfaceAddressFamily", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerOspf", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerOspfAreaInterface", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerOspfVrf", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerOspfVrfAreaInterface", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerStaticIpv4Multicast", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerStaticIpv4Unicast", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerStaticIpv6Multicast", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerStaticIpv6Unicast", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerStaticVrfIpv4Multicast", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerStaticVrfIpv4Unicast", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerStaticVrfIpv6Multicast", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerStaticVrfIpv6Unicast", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerVrrpInterface", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerVrrpInterfaceIpv4", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/routerVrrpInterfaceIpv6", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/segmentRouting", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/segmentRoutingTe", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/segmentRoutingTePolicyCandidatePath", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/segmentRoutingV6", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/serviceTimestamps", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/snmpServer", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/snmpServerMib", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/snmpServerView", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/snmpServerVrfHost", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/ssh", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/tagSet", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/telnet", _module)
pulumi.runtime.registerResourceModule("iosxr", "index/vrf", _module)
pulumi.runtime.registerResourcePackage("iosxr", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:iosxr") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
