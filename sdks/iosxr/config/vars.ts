// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("iosxr");

/**
 * TLS CA certificate content. This can also be set as the IOSXR_CA_CERTIFICATE environment variable.
 */
export declare const caCertificate: string | undefined;
Object.defineProperty(exports, "caCertificate", {
    get() {
        return __config.get("caCertificate");
    },
    enumerable: true,
});

/**
 * TLS certificate content. This can also be set as the IOSXR_CERTIFICATE environment variable.
 */
export declare const certificate: string | undefined;
Object.defineProperty(exports, "certificate", {
    get() {
        return __config.get("certificate");
    },
    enumerable: true,
});

/**
 * This can be used to manage a list of devices from a single provider. All devices must use the same credentials. Each
 * resource and data source has an optional attribute named `device`, which can then select a device by its name from this
 * list.
 */
export declare const devices: outputs.config.Devices[] | undefined;
Object.defineProperty(exports, "devices", {
    get() {
        return __config.getObject<outputs.config.Devices[]>("devices");
    },
    enumerable: true,
});

/**
 * IP or name of the Cisco IOS-XR device. Optionally a port can be added with `:12345`. The default port is `57400`. This
 * can also be set as the IOSXR_HOST environment variable. If no `host` is provided, the `host` of the first device from
 * the `devices` list is being used.
 */
export declare const host: string | undefined;
Object.defineProperty(exports, "host", {
    get() {
        return __config.get("host");
    },
    enumerable: true,
});

/**
 * TLS private key content. This can also be set as the IOSXR_KEY environment variable.
 */
export declare const key: string | undefined;
Object.defineProperty(exports, "key", {
    get() {
        return __config.get("key");
    },
    enumerable: true,
});

/**
 * Password for the IOS-XR device. This can also be set as the IOSXR_PASSWORD environment variable.
 */
export declare const password: string | undefined;
Object.defineProperty(exports, "password", {
    get() {
        return __config.get("password");
    },
    enumerable: true,
});

/**
 * Reuse gNMI connection. This can also be set as the IOSXR_REUSE_CONNECTION environment variable. Defaults to `true`.
 */
export declare const reuseConnection: boolean | undefined;
Object.defineProperty(exports, "reuseConnection", {
    get() {
        return __config.getObject<boolean>("reuseConnection");
    },
    enumerable: true,
});

/**
 * Use TLS. This can also be set as the IOSXR_TLS environment variable. Defaults to `true`.
 */
export declare const tls: boolean | undefined;
Object.defineProperty(exports, "tls", {
    get() {
        return __config.getObject<boolean>("tls");
    },
    enumerable: true,
});

/**
 * Username for the IOS-XR device. This can also be set as the IOSXR_USERNAME environment variable.
 */
export declare const username: string | undefined;
Object.defineProperty(exports, "username", {
    get() {
        return __config.get("username");
    },
    enumerable: true,
});

/**
 * Verify target certificate. This can also be set as the IOSXR_VERIFY_CERTIFICATE environment variable. Defaults to
 * `false`.
 */
export declare const verifyCertificate: boolean | undefined;
Object.defineProperty(exports, "verifyCertificate", {
    get() {
        return __config.getObject<boolean>("verifyCertificate");
    },
    enumerable: true,
});

