// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RouterIsis extends pulumi.CustomResource {
    /**
     * Get an existing RouterIsis resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterIsisState, opts?: pulumi.CustomResourceOptions): RouterIsis {
        return new RouterIsis(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxr:index/routerIsis:RouterIsis';

    /**
     * Returns true if the given object is an instance of RouterIsis.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterIsis {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterIsis.__pulumiType;
    }

    /**
     * Affinity map configuration
     */
    public readonly affinityMaps!: pulumi.Output<outputs.RouterIsisAffinityMap[] | undefined>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Set distribution process instance identifier - Range: `32`-`4294967295`
     */
    public readonly distributeLinkStateInstanceId!: pulumi.Output<number | undefined>;
    /**
     * Set distribution for one level only - Range: `1`-`2`
     */
    public readonly distributeLinkStateLevel!: pulumi.Output<number | undefined>;
    /**
     * Set throttle update in seconds - Range: `1`-`20`
     */
    public readonly distributeLinkStateThrottle!: pulumi.Output<number | undefined>;
    /**
     * Flex Algorithm definition
     */
    public readonly flexAlgos!: pulumi.Output<outputs.RouterIsisFlexAlgo[] | undefined>;
    /**
     * Enter the IS-IS interface configuration submode
     */
    public readonly interfaces!: pulumi.Output<outputs.RouterIsisInterface[] | undefined>;
    /**
     * Area type (level) - Choices: `level-1`, `level-1-2`, `level-2-only`
     */
    public readonly isType!: pulumi.Output<string | undefined>;
    /**
     * Enable logging adjacency state changes
     */
    public readonly logAdjacencyChanges!: pulumi.Output<boolean | undefined>;
    /**
     * Initial delay before generating an LSP - Range: `0`-`120000`
     */
    public readonly lspGenIntervalInitialWait!: pulumi.Output<number | undefined>;
    /**
     * Maximum delay before generating an LSP - Range: `0`-`120000`
     */
    public readonly lspGenIntervalMaximumWait!: pulumi.Output<number | undefined>;
    /**
     * Secondary delay before generating an LSP - Range: `0`-`120000`
     */
    public readonly lspGenIntervalSecondaryWait!: pulumi.Output<number | undefined>;
    /**
     * Specifies a Key Chain name will follow
     */
    public readonly lspPasswordKeychain!: pulumi.Output<string | undefined>;
    /**
     * Set LSP refresh interval - Range: `1`-`65535`
     */
    public readonly lspRefreshInterval!: pulumi.Output<number | undefined>;
    /**
     * Set maximum LSP lifetime - Range: `1`-`65535`
     */
    public readonly maxLspLifetime!: pulumi.Output<number | undefined>;
    /**
     * A Network Entity Title (NET) for this process
     */
    public readonly nets!: pulumi.Output<outputs.RouterIsisNet[] | undefined>;
    /**
     * Cisco Proprietary NSF restart
     */
    public readonly nsfCisco!: pulumi.Output<boolean | undefined>;
    /**
     * IETF NSF restar
     */
    public readonly nsfIetf!: pulumi.Output<boolean | undefined>;
    /**
     * # of times T1 can expire waiting for the restart ACK - Range: `1`-`10`
     */
    public readonly nsfInterfaceExpires!: pulumi.Output<number | undefined>;
    /**
     * Timer used to wait for a restart ACK (seconds) - Range: `1`-`20`
     */
    public readonly nsfInterfaceTimer!: pulumi.Output<number | undefined>;
    /**
     * Maximum route lifetime following restart (seconds) - Range: `5`-`300`
     */
    public readonly nsfLifetime!: pulumi.Output<number | undefined>;
    /**
     * Enable NSR
     */
    public readonly nsr!: pulumi.Output<boolean | undefined>;
    /**
     * Process ID
     */
    public readonly processId!: pulumi.Output<string>;
    /**
     * If overload-bit set advertise IP prefixes learned from other protocols
     */
    public readonly setOverloadBitAdvertiseExternal!: pulumi.Output<boolean | undefined>;
    /**
     * If overload-bit set advertise IP prefixes learned from another ISIS level
     */
    public readonly setOverloadBitAdvertiseInterlevel!: pulumi.Output<boolean | undefined>;
    /**
     * Set overload-bit for one level only
     */
    public readonly setOverloadBitLevels!: pulumi.Output<outputs.RouterIsisSetOverloadBitLevel[] | undefined>;
    /**
     * Time in seconds to advertise ourself as overloaded after reboot
     */
    public readonly setOverloadBitOnStartupAdvertiseAsOverloaded!: pulumi.Output<boolean | undefined>;
    /**
     * Time in seconds to advertise ourself as overloaded after reboot - Range: `5`-`86400`
     */
    public readonly setOverloadBitOnStartupAdvertiseAsOverloadedTimeToAdvertise!: pulumi.Output<number | undefined>;
    /**
     * Set overload bit on startup until BGP signals convergence, or timeout
     */
    public readonly setOverloadBitOnStartupWaitForBgp!: pulumi.Output<boolean | undefined>;

    /**
     * Create a RouterIsis resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouterIsisArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterIsisArgs | RouterIsisState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterIsisState | undefined;
            resourceInputs["affinityMaps"] = state ? state.affinityMaps : undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["distributeLinkStateInstanceId"] = state ? state.distributeLinkStateInstanceId : undefined;
            resourceInputs["distributeLinkStateLevel"] = state ? state.distributeLinkStateLevel : undefined;
            resourceInputs["distributeLinkStateThrottle"] = state ? state.distributeLinkStateThrottle : undefined;
            resourceInputs["flexAlgos"] = state ? state.flexAlgos : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["isType"] = state ? state.isType : undefined;
            resourceInputs["logAdjacencyChanges"] = state ? state.logAdjacencyChanges : undefined;
            resourceInputs["lspGenIntervalInitialWait"] = state ? state.lspGenIntervalInitialWait : undefined;
            resourceInputs["lspGenIntervalMaximumWait"] = state ? state.lspGenIntervalMaximumWait : undefined;
            resourceInputs["lspGenIntervalSecondaryWait"] = state ? state.lspGenIntervalSecondaryWait : undefined;
            resourceInputs["lspPasswordKeychain"] = state ? state.lspPasswordKeychain : undefined;
            resourceInputs["lspRefreshInterval"] = state ? state.lspRefreshInterval : undefined;
            resourceInputs["maxLspLifetime"] = state ? state.maxLspLifetime : undefined;
            resourceInputs["nets"] = state ? state.nets : undefined;
            resourceInputs["nsfCisco"] = state ? state.nsfCisco : undefined;
            resourceInputs["nsfIetf"] = state ? state.nsfIetf : undefined;
            resourceInputs["nsfInterfaceExpires"] = state ? state.nsfInterfaceExpires : undefined;
            resourceInputs["nsfInterfaceTimer"] = state ? state.nsfInterfaceTimer : undefined;
            resourceInputs["nsfLifetime"] = state ? state.nsfLifetime : undefined;
            resourceInputs["nsr"] = state ? state.nsr : undefined;
            resourceInputs["processId"] = state ? state.processId : undefined;
            resourceInputs["setOverloadBitAdvertiseExternal"] = state ? state.setOverloadBitAdvertiseExternal : undefined;
            resourceInputs["setOverloadBitAdvertiseInterlevel"] = state ? state.setOverloadBitAdvertiseInterlevel : undefined;
            resourceInputs["setOverloadBitLevels"] = state ? state.setOverloadBitLevels : undefined;
            resourceInputs["setOverloadBitOnStartupAdvertiseAsOverloaded"] = state ? state.setOverloadBitOnStartupAdvertiseAsOverloaded : undefined;
            resourceInputs["setOverloadBitOnStartupAdvertiseAsOverloadedTimeToAdvertise"] = state ? state.setOverloadBitOnStartupAdvertiseAsOverloadedTimeToAdvertise : undefined;
            resourceInputs["setOverloadBitOnStartupWaitForBgp"] = state ? state.setOverloadBitOnStartupWaitForBgp : undefined;
        } else {
            const args = argsOrState as RouterIsisArgs | undefined;
            if ((!args || args.processId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processId'");
            }
            resourceInputs["affinityMaps"] = args ? args.affinityMaps : undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["distributeLinkStateInstanceId"] = args ? args.distributeLinkStateInstanceId : undefined;
            resourceInputs["distributeLinkStateLevel"] = args ? args.distributeLinkStateLevel : undefined;
            resourceInputs["distributeLinkStateThrottle"] = args ? args.distributeLinkStateThrottle : undefined;
            resourceInputs["flexAlgos"] = args ? args.flexAlgos : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["isType"] = args ? args.isType : undefined;
            resourceInputs["logAdjacencyChanges"] = args ? args.logAdjacencyChanges : undefined;
            resourceInputs["lspGenIntervalInitialWait"] = args ? args.lspGenIntervalInitialWait : undefined;
            resourceInputs["lspGenIntervalMaximumWait"] = args ? args.lspGenIntervalMaximumWait : undefined;
            resourceInputs["lspGenIntervalSecondaryWait"] = args ? args.lspGenIntervalSecondaryWait : undefined;
            resourceInputs["lspPasswordKeychain"] = args ? args.lspPasswordKeychain : undefined;
            resourceInputs["lspRefreshInterval"] = args ? args.lspRefreshInterval : undefined;
            resourceInputs["maxLspLifetime"] = args ? args.maxLspLifetime : undefined;
            resourceInputs["nets"] = args ? args.nets : undefined;
            resourceInputs["nsfCisco"] = args ? args.nsfCisco : undefined;
            resourceInputs["nsfIetf"] = args ? args.nsfIetf : undefined;
            resourceInputs["nsfInterfaceExpires"] = args ? args.nsfInterfaceExpires : undefined;
            resourceInputs["nsfInterfaceTimer"] = args ? args.nsfInterfaceTimer : undefined;
            resourceInputs["nsfLifetime"] = args ? args.nsfLifetime : undefined;
            resourceInputs["nsr"] = args ? args.nsr : undefined;
            resourceInputs["processId"] = args ? args.processId : undefined;
            resourceInputs["setOverloadBitAdvertiseExternal"] = args ? args.setOverloadBitAdvertiseExternal : undefined;
            resourceInputs["setOverloadBitAdvertiseInterlevel"] = args ? args.setOverloadBitAdvertiseInterlevel : undefined;
            resourceInputs["setOverloadBitLevels"] = args ? args.setOverloadBitLevels : undefined;
            resourceInputs["setOverloadBitOnStartupAdvertiseAsOverloaded"] = args ? args.setOverloadBitOnStartupAdvertiseAsOverloaded : undefined;
            resourceInputs["setOverloadBitOnStartupAdvertiseAsOverloadedTimeToAdvertise"] = args ? args.setOverloadBitOnStartupAdvertiseAsOverloadedTimeToAdvertise : undefined;
            resourceInputs["setOverloadBitOnStartupWaitForBgp"] = args ? args.setOverloadBitOnStartupWaitForBgp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterIsis.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterIsis resources.
 */
export interface RouterIsisState {
    /**
     * Affinity map configuration
     */
    affinityMaps?: pulumi.Input<pulumi.Input<inputs.RouterIsisAffinityMap>[]>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Set distribution process instance identifier - Range: `32`-`4294967295`
     */
    distributeLinkStateInstanceId?: pulumi.Input<number>;
    /**
     * Set distribution for one level only - Range: `1`-`2`
     */
    distributeLinkStateLevel?: pulumi.Input<number>;
    /**
     * Set throttle update in seconds - Range: `1`-`20`
     */
    distributeLinkStateThrottle?: pulumi.Input<number>;
    /**
     * Flex Algorithm definition
     */
    flexAlgos?: pulumi.Input<pulumi.Input<inputs.RouterIsisFlexAlgo>[]>;
    /**
     * Enter the IS-IS interface configuration submode
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.RouterIsisInterface>[]>;
    /**
     * Area type (level) - Choices: `level-1`, `level-1-2`, `level-2-only`
     */
    isType?: pulumi.Input<string>;
    /**
     * Enable logging adjacency state changes
     */
    logAdjacencyChanges?: pulumi.Input<boolean>;
    /**
     * Initial delay before generating an LSP - Range: `0`-`120000`
     */
    lspGenIntervalInitialWait?: pulumi.Input<number>;
    /**
     * Maximum delay before generating an LSP - Range: `0`-`120000`
     */
    lspGenIntervalMaximumWait?: pulumi.Input<number>;
    /**
     * Secondary delay before generating an LSP - Range: `0`-`120000`
     */
    lspGenIntervalSecondaryWait?: pulumi.Input<number>;
    /**
     * Specifies a Key Chain name will follow
     */
    lspPasswordKeychain?: pulumi.Input<string>;
    /**
     * Set LSP refresh interval - Range: `1`-`65535`
     */
    lspRefreshInterval?: pulumi.Input<number>;
    /**
     * Set maximum LSP lifetime - Range: `1`-`65535`
     */
    maxLspLifetime?: pulumi.Input<number>;
    /**
     * A Network Entity Title (NET) for this process
     */
    nets?: pulumi.Input<pulumi.Input<inputs.RouterIsisNet>[]>;
    /**
     * Cisco Proprietary NSF restart
     */
    nsfCisco?: pulumi.Input<boolean>;
    /**
     * IETF NSF restar
     */
    nsfIetf?: pulumi.Input<boolean>;
    /**
     * # of times T1 can expire waiting for the restart ACK - Range: `1`-`10`
     */
    nsfInterfaceExpires?: pulumi.Input<number>;
    /**
     * Timer used to wait for a restart ACK (seconds) - Range: `1`-`20`
     */
    nsfInterfaceTimer?: pulumi.Input<number>;
    /**
     * Maximum route lifetime following restart (seconds) - Range: `5`-`300`
     */
    nsfLifetime?: pulumi.Input<number>;
    /**
     * Enable NSR
     */
    nsr?: pulumi.Input<boolean>;
    /**
     * Process ID
     */
    processId?: pulumi.Input<string>;
    /**
     * If overload-bit set advertise IP prefixes learned from other protocols
     */
    setOverloadBitAdvertiseExternal?: pulumi.Input<boolean>;
    /**
     * If overload-bit set advertise IP prefixes learned from another ISIS level
     */
    setOverloadBitAdvertiseInterlevel?: pulumi.Input<boolean>;
    /**
     * Set overload-bit for one level only
     */
    setOverloadBitLevels?: pulumi.Input<pulumi.Input<inputs.RouterIsisSetOverloadBitLevel>[]>;
    /**
     * Time in seconds to advertise ourself as overloaded after reboot
     */
    setOverloadBitOnStartupAdvertiseAsOverloaded?: pulumi.Input<boolean>;
    /**
     * Time in seconds to advertise ourself as overloaded after reboot - Range: `5`-`86400`
     */
    setOverloadBitOnStartupAdvertiseAsOverloadedTimeToAdvertise?: pulumi.Input<number>;
    /**
     * Set overload bit on startup until BGP signals convergence, or timeout
     */
    setOverloadBitOnStartupWaitForBgp?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RouterIsis resource.
 */
export interface RouterIsisArgs {
    /**
     * Affinity map configuration
     */
    affinityMaps?: pulumi.Input<pulumi.Input<inputs.RouterIsisAffinityMap>[]>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Set distribution process instance identifier - Range: `32`-`4294967295`
     */
    distributeLinkStateInstanceId?: pulumi.Input<number>;
    /**
     * Set distribution for one level only - Range: `1`-`2`
     */
    distributeLinkStateLevel?: pulumi.Input<number>;
    /**
     * Set throttle update in seconds - Range: `1`-`20`
     */
    distributeLinkStateThrottle?: pulumi.Input<number>;
    /**
     * Flex Algorithm definition
     */
    flexAlgos?: pulumi.Input<pulumi.Input<inputs.RouterIsisFlexAlgo>[]>;
    /**
     * Enter the IS-IS interface configuration submode
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.RouterIsisInterface>[]>;
    /**
     * Area type (level) - Choices: `level-1`, `level-1-2`, `level-2-only`
     */
    isType?: pulumi.Input<string>;
    /**
     * Enable logging adjacency state changes
     */
    logAdjacencyChanges?: pulumi.Input<boolean>;
    /**
     * Initial delay before generating an LSP - Range: `0`-`120000`
     */
    lspGenIntervalInitialWait?: pulumi.Input<number>;
    /**
     * Maximum delay before generating an LSP - Range: `0`-`120000`
     */
    lspGenIntervalMaximumWait?: pulumi.Input<number>;
    /**
     * Secondary delay before generating an LSP - Range: `0`-`120000`
     */
    lspGenIntervalSecondaryWait?: pulumi.Input<number>;
    /**
     * Specifies a Key Chain name will follow
     */
    lspPasswordKeychain?: pulumi.Input<string>;
    /**
     * Set LSP refresh interval - Range: `1`-`65535`
     */
    lspRefreshInterval?: pulumi.Input<number>;
    /**
     * Set maximum LSP lifetime - Range: `1`-`65535`
     */
    maxLspLifetime?: pulumi.Input<number>;
    /**
     * A Network Entity Title (NET) for this process
     */
    nets?: pulumi.Input<pulumi.Input<inputs.RouterIsisNet>[]>;
    /**
     * Cisco Proprietary NSF restart
     */
    nsfCisco?: pulumi.Input<boolean>;
    /**
     * IETF NSF restar
     */
    nsfIetf?: pulumi.Input<boolean>;
    /**
     * # of times T1 can expire waiting for the restart ACK - Range: `1`-`10`
     */
    nsfInterfaceExpires?: pulumi.Input<number>;
    /**
     * Timer used to wait for a restart ACK (seconds) - Range: `1`-`20`
     */
    nsfInterfaceTimer?: pulumi.Input<number>;
    /**
     * Maximum route lifetime following restart (seconds) - Range: `5`-`300`
     */
    nsfLifetime?: pulumi.Input<number>;
    /**
     * Enable NSR
     */
    nsr?: pulumi.Input<boolean>;
    /**
     * Process ID
     */
    processId: pulumi.Input<string>;
    /**
     * If overload-bit set advertise IP prefixes learned from other protocols
     */
    setOverloadBitAdvertiseExternal?: pulumi.Input<boolean>;
    /**
     * If overload-bit set advertise IP prefixes learned from another ISIS level
     */
    setOverloadBitAdvertiseInterlevel?: pulumi.Input<boolean>;
    /**
     * Set overload-bit for one level only
     */
    setOverloadBitLevels?: pulumi.Input<pulumi.Input<inputs.RouterIsisSetOverloadBitLevel>[]>;
    /**
     * Time in seconds to advertise ourself as overloaded after reboot
     */
    setOverloadBitOnStartupAdvertiseAsOverloaded?: pulumi.Input<boolean>;
    /**
     * Time in seconds to advertise ourself as overloaded after reboot - Range: `5`-`86400`
     */
    setOverloadBitOnStartupAdvertiseAsOverloadedTimeToAdvertise?: pulumi.Input<number>;
    /**
     * Set overload bit on startup until BGP signals convergence, or timeout
     */
    setOverloadBitOnStartupWaitForBgp?: pulumi.Input<boolean>;
}
