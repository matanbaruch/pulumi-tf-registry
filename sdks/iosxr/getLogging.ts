// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLogging(args?: GetLoggingArgs, opts?: pulumi.InvokeOptions): Promise<GetLoggingResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxr:index/getLogging:getLogging", {
        "device": args.device,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLogging.
 */
export interface GetLoggingArgs {
    device?: string;
}

/**
 * A collection of values returned by getLogging.
 */
export interface GetLoggingResult {
    readonly bufferedLevel: string;
    readonly bufferedLoggingBufferSize: number;
    readonly console: string;
    readonly device?: string;
    readonly eventsDisplayLocation: boolean;
    readonly eventsLevel: string;
    readonly facilityLevel: string;
    readonly hostnameprefix: string;
    readonly id: string;
    readonly ipv4Dscp: string;
    readonly monitor: string;
    readonly suppressDuplicates: boolean;
    readonly trap: string;
}
export function getLoggingOutput(args?: GetLoggingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoggingResult> {
    return pulumi.output(args).apply((a: any) => getLogging(a, opts))
}

/**
 * A collection of arguments for invoking getLogging.
 */
export interface GetLoggingOutputArgs {
    device?: pulumi.Input<string>;
}
