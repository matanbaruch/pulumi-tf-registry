// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFlowMonitorMap(args: GetFlowMonitorMapArgs, opts?: pulumi.InvokeOptions): Promise<GetFlowMonitorMapResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxr:index/getFlowMonitorMap:getFlowMonitorMap", {
        "device": args.device,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFlowMonitorMap.
 */
export interface GetFlowMonitorMapArgs {
    device?: string;
    name: string;
}

/**
 * A collection of values returned by getFlowMonitorMap.
 */
export interface GetFlowMonitorMapResult {
    readonly cacheEntries: number;
    readonly cacheImmediate: boolean;
    readonly cachePermanent: boolean;
    readonly cacheTimeoutActive: number;
    readonly cacheTimeoutInactive: number;
    readonly cacheTimeoutRateLimit: number;
    readonly cacheTimeoutUpdate: number;
    readonly device?: string;
    readonly exporters: outputs.GetFlowMonitorMapExporter[];
    readonly hwCacheTimeoutInactive: number;
    readonly id: string;
    readonly name: string;
    readonly optionBgpattr: boolean;
    readonly optionFiltered: boolean;
    readonly optionOutbundlemember: boolean;
    readonly optionOutphysint: boolean;
    readonly recordDatalinkRecord: boolean;
    readonly recordDefaultMdi: boolean;
    readonly recordDefaultRtp: boolean;
    readonly recordIpv4: boolean;
    readonly recordIpv4As: boolean;
    readonly recordIpv4AsTos: boolean;
    readonly recordIpv4BgpNexthopTos: boolean;
    readonly recordIpv4Destination: boolean;
    readonly recordIpv4DestinationPrefix: boolean;
    readonly recordIpv4DestinationPrefixTos: boolean;
    readonly recordIpv4DestinationTos: boolean;
    readonly recordIpv4Gtp: boolean;
    readonly recordIpv4PeerAs: boolean;
    readonly recordIpv4Prefix: boolean;
    readonly recordIpv4PrefixPort: boolean;
    readonly recordIpv4PrefixTos: boolean;
    readonly recordIpv4ProtocolPort: boolean;
    readonly recordIpv4ProtocolPortTos: boolean;
    readonly recordIpv4SourcePrefix: boolean;
    readonly recordIpv4SourcePrefixTos: boolean;
    readonly recordIpv6: boolean;
    readonly recordIpv6Destination: boolean;
    readonly recordIpv6Gtp: boolean;
    readonly recordIpv6PeerAs: boolean;
    readonly recordMapT: boolean;
    readonly recordMpls: boolean;
    readonly recordMplsIpv4Fields: boolean;
    readonly recordMplsIpv4Ipv6Fields: boolean;
    readonly recordMplsIpv6Fields: boolean;
    readonly recordMplsLabels: number;
    readonly recordSflow: boolean;
    readonly sflowOptions: boolean;
    readonly sflowOptionsExtendedGateway: boolean;
    readonly sflowOptionsExtendedIpv4TunnelEgress: boolean;
    readonly sflowOptionsExtendedIpv6TunnelEgress: boolean;
    readonly sflowOptionsExtendedRouter: boolean;
    readonly sflowOptionsIfCountersPollingInterval: number;
    readonly sflowOptionsInputIfindex: string;
    readonly sflowOptionsOutputIfindex: string;
    readonly sflowOptionsSampleHeaderSize: number;
}
export function getFlowMonitorMapOutput(args: GetFlowMonitorMapOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFlowMonitorMapResult> {
    return pulumi.output(args).apply((a: any) => getFlowMonitorMap(a, opts))
}

/**
 * A collection of arguments for invoking getFlowMonitorMap.
 */
export interface GetFlowMonitorMapOutputArgs {
    device?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
