// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getErrorDisableRecovery(args?: GetErrorDisableRecoveryArgs, opts?: pulumi.InvokeOptions): Promise<GetErrorDisableRecoveryResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxr:index/getErrorDisableRecovery:getErrorDisableRecovery", {
        "device": args.device,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getErrorDisableRecovery.
 */
export interface GetErrorDisableRecoveryArgs {
    device?: string;
}

/**
 * A collection of values returned by getErrorDisableRecovery.
 */
export interface GetErrorDisableRecoveryResult {
    readonly clusterMinlinksInterval: number;
    readonly clusterUdldInterval: number;
    readonly device?: string;
    readonly id: string;
    readonly l2vpnBportMacMoveInterval: number;
    readonly linkOamCapabilitiesConflictInterval: number;
    readonly linkOamCriticalEventInterval: number;
    readonly linkOamDampeningInterval: number;
    readonly linkOamDiscoveryTimeoutInterval: number;
    readonly linkOamDyingGaspInterval: number;
    readonly linkOamLinkFaultInterval: number;
    readonly linkOamMiswiredInterval: number;
    readonly linkOamSessionDownInterval: number;
    readonly linkOamThresholdBreachedInterval: number;
    readonly otTrackStateChangeInterval: number;
    readonly pvrstPvidMismatchInterval: number;
    readonly stpBpduGuardInterval: number;
    readonly stpLegacyBpduInterval: number;
    readonly udldLoopbackInterval: number;
    readonly udldNeighborMismatchInterval: number;
    readonly udldTimeoutInterval: number;
    readonly udldUnidirectionalInterval: number;
}
export function getErrorDisableRecoveryOutput(args?: GetErrorDisableRecoveryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetErrorDisableRecoveryResult> {
    return pulumi.output(args).apply((a: any) => getErrorDisableRecovery(a, opts))
}

/**
 * A collection of arguments for invoking getErrorDisableRecovery.
 */
export interface GetErrorDisableRecoveryOutputArgs {
    device?: pulumi.Input<string>;
}
