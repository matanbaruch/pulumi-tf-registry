// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getInterface(args: GetInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetInterfaceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxr:index/getInterface:getInterface", {
        "device": args.device,
        "interfaceName": args.interfaceName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getInterface.
 */
export interface GetInterfaceArgs {
    device?: string;
    interfaceName: string;
}

/**
 * A collection of values returned by getInterface.
 */
export interface GetInterfaceResult {
    readonly bandwidth: number;
    readonly bfdModeIetf: boolean;
    readonly bundleId: number;
    readonly bundleIdMode: string;
    readonly bundleLoadBalancingHashDstIp: boolean;
    readonly bundleLoadBalancingHashSrcIp: boolean;
    readonly bundleMaximumActiveLinks: number;
    readonly bundleMinimumActiveLinks: number;
    readonly bundlePortPriority: number;
    readonly bundleShutdown: boolean;
    readonly cdp: boolean;
    readonly dampeningDecayHalfLifeValue: number;
    readonly description: string;
    readonly device?: string;
    readonly encapsulationDot1qVlanId: number;
    readonly flowIpv4EgressMonitorSamplers: outputs.GetInterfaceFlowIpv4EgressMonitorSampler[];
    readonly flowIpv4EgressMonitors: outputs.GetInterfaceFlowIpv4EgressMonitor[];
    readonly flowIpv4IngressMonitorSamplers: outputs.GetInterfaceFlowIpv4IngressMonitorSampler[];
    readonly flowIpv4IngressMonitors: outputs.GetInterfaceFlowIpv4IngressMonitor[];
    readonly flowIpv6EgressMonitorSamplers: outputs.GetInterfaceFlowIpv6EgressMonitorSampler[];
    readonly flowIpv6EgressMonitors: outputs.GetInterfaceFlowIpv6EgressMonitor[];
    readonly flowIpv6IngressMonitorSamplers: outputs.GetInterfaceFlowIpv6IngressMonitorSampler[];
    readonly flowIpv6IngressMonitors: outputs.GetInterfaceFlowIpv6IngressMonitor[];
    readonly id: string;
    readonly interfaceName: string;
    readonly ipv4AccessGroupEgressAcl: string;
    readonly ipv4AccessGroupEgressCompressLevel: number;
    readonly ipv4AccessGroupEgressHardwareCount: boolean;
    readonly ipv4AccessGroupEgressInterfaceStatistics: boolean;
    readonly ipv4AccessGroupIngressAcl1: string;
    readonly ipv4AccessGroupIngressCompressLevel: number;
    readonly ipv4AccessGroupIngressHardwareCount: boolean;
    readonly ipv4AccessGroupIngressInterfaceStatistics: boolean;
    readonly ipv4Address: string;
    readonly ipv4Netmask: string;
    readonly ipv4PointToPoint: boolean;
    readonly ipv4VerifyUnicastSourceReachableViaAllowDefault: boolean;
    readonly ipv4VerifyUnicastSourceReachableViaAllowSelfPing: boolean;
    readonly ipv4VerifyUnicastSourceReachableViaType: string;
    readonly ipv6AccessGroupEgressAcl1: string;
    readonly ipv6AccessGroupEgressCompressLevel: number;
    readonly ipv6AccessGroupEgressInterfaceStatistics: boolean;
    readonly ipv6AccessGroupIngressAcl1: string;
    readonly ipv6AccessGroupIngressCompressLevel: number;
    readonly ipv6AccessGroupIngressInterfaceStatistics: boolean;
    readonly ipv6Addresses: outputs.GetInterfaceIpv6Address[];
    readonly ipv6Autoconfig: boolean;
    readonly ipv6Enable: boolean;
    readonly ipv6LinkLocalAddress: string;
    readonly ipv6LinkLocalZone: string;
    readonly ipv6VerifyUnicastSourceReachableViaAllowDefault: boolean;
    readonly ipv6VerifyUnicastSourceReachableViaAllowSelfPing: boolean;
    readonly ipv6VerifyUnicastSourceReachableViaType: string;
    readonly l2transport: boolean;
    readonly l2transportEncapsulationDot1qSecondDot1q: string;
    readonly l2transportEncapsulationDot1qVlanId: string;
    readonly loadInterval: number;
    readonly mtu: number;
    readonly multipoint: boolean;
    readonly pointToPoint: boolean;
    readonly rewriteIngressTagPopOne: boolean;
    readonly rewriteIngressTagPopTwo: boolean;
    readonly servicePolicyInputs: outputs.GetInterfaceServicePolicyInput[];
    readonly servicePolicyOutputs: outputs.GetInterfaceServicePolicyOutput[];
    readonly shutdown: boolean;
    readonly unnumbered: string;
    readonly vrf: string;
}
export function getInterfaceOutput(args: GetInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getInterface(a, opts))
}

/**
 * A collection of arguments for invoking getInterface.
 */
export interface GetInterfaceOutputArgs {
    device?: pulumi.Input<string>;
    interfaceName: pulumi.Input<string>;
}
