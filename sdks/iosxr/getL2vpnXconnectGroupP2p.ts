// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getL2vpnXconnectGroupP2p(args: GetL2vpnXconnectGroupP2pArgs, opts?: pulumi.InvokeOptions): Promise<GetL2vpnXconnectGroupP2pResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxr:index/getL2vpnXconnectGroupP2p:getL2vpnXconnectGroupP2p", {
        "device": args.device,
        "groupName": args.groupName,
        "p2pXconnectName": args.p2pXconnectName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getL2vpnXconnectGroupP2p.
 */
export interface GetL2vpnXconnectGroupP2pArgs {
    device?: string;
    groupName: string;
    p2pXconnectName: string;
}

/**
 * A collection of values returned by getL2vpnXconnectGroupP2p.
 */
export interface GetL2vpnXconnectGroupP2pResult {
    readonly description: string;
    readonly device?: string;
    readonly evpnServiceNeighbors: outputs.GetL2vpnXconnectGroupP2pEvpnServiceNeighbor[];
    readonly evpnTargetNeighbors: outputs.GetL2vpnXconnectGroupP2pEvpnTargetNeighbor[];
    readonly groupName: string;
    readonly id: string;
    readonly interfaces: outputs.GetL2vpnXconnectGroupP2pInterface[];
    readonly ipv4Neighbors: outputs.GetL2vpnXconnectGroupP2pIpv4Neighbor[];
    readonly ipv6Neighbors: outputs.GetL2vpnXconnectGroupP2pIpv6Neighbor[];
    readonly neighborEvpnEviSegmentRoutingServices: outputs.GetL2vpnXconnectGroupP2pNeighborEvpnEviSegmentRoutingService[];
    readonly p2pXconnectName: string;
}
export function getL2vpnXconnectGroupP2pOutput(args: GetL2vpnXconnectGroupP2pOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetL2vpnXconnectGroupP2pResult> {
    return pulumi.output(args).apply((a: any) => getL2vpnXconnectGroupP2p(a, opts))
}

/**
 * A collection of arguments for invoking getL2vpnXconnectGroupP2p.
 */
export interface GetL2vpnXconnectGroupP2pOutputArgs {
    device?: pulumi.Input<string>;
    groupName: pulumi.Input<string>;
    p2pXconnectName: pulumi.Input<string>;
}
