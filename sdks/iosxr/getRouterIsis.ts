// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRouterIsis(args: GetRouterIsisArgs, opts?: pulumi.InvokeOptions): Promise<GetRouterIsisResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxr:index/getRouterIsis:getRouterIsis", {
        "device": args.device,
        "processId": args.processId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRouterIsis.
 */
export interface GetRouterIsisArgs {
    device?: string;
    processId: string;
}

/**
 * A collection of values returned by getRouterIsis.
 */
export interface GetRouterIsisResult {
    readonly affinityMaps: outputs.GetRouterIsisAffinityMap[];
    readonly device?: string;
    readonly distributeLinkStateInstanceId: number;
    readonly distributeLinkStateLevel: number;
    readonly distributeLinkStateThrottle: number;
    readonly flexAlgos: outputs.GetRouterIsisFlexAlgo[];
    readonly id: string;
    readonly interfaces: outputs.GetRouterIsisInterface[];
    readonly isType: string;
    readonly logAdjacencyChanges: boolean;
    readonly lspGenIntervalInitialWait: number;
    readonly lspGenIntervalMaximumWait: number;
    readonly lspGenIntervalSecondaryWait: number;
    readonly lspPasswordKeychain: string;
    readonly lspRefreshInterval: number;
    readonly maxLspLifetime: number;
    readonly nets: outputs.GetRouterIsisNet[];
    readonly nsfCisco: boolean;
    readonly nsfIetf: boolean;
    readonly nsfInterfaceExpires: number;
    readonly nsfInterfaceTimer: number;
    readonly nsfLifetime: number;
    readonly nsr: boolean;
    readonly processId: string;
    readonly setOverloadBitAdvertiseExternal: boolean;
    readonly setOverloadBitAdvertiseInterlevel: boolean;
    readonly setOverloadBitLevels: outputs.GetRouterIsisSetOverloadBitLevel[];
    readonly setOverloadBitOnStartupAdvertiseAsOverloaded: boolean;
    readonly setOverloadBitOnStartupAdvertiseAsOverloadedTimeToAdvertise: number;
    readonly setOverloadBitOnStartupWaitForBgp: boolean;
}
export function getRouterIsisOutput(args: GetRouterIsisOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRouterIsisResult> {
    return pulumi.output(args).apply((a: any) => getRouterIsis(a, opts))
}

/**
 * A collection of arguments for invoking getRouterIsis.
 */
export interface GetRouterIsisOutputArgs {
    device?: pulumi.Input<string>;
    processId: pulumi.Input<string>;
}
