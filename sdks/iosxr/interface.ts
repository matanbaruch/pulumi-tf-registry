// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Interface extends pulumi.CustomResource {
    /**
     * Get an existing Interface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceState, opts?: pulumi.CustomResourceOptions): Interface {
        return new Interface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxr:index/interface:Interface';

    /**
     * Returns true if the given object is an instance of Interface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Interface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Interface.__pulumiType;
    }

    /**
     * Set the bandwidth of an interface - Range: `0`-`9223372036854775807`
     */
    public readonly bandwidth!: pulumi.Output<number | undefined>;
    /**
     * Use IETF standard for BoB
     */
    public readonly bfdModeIetf!: pulumi.Output<boolean | undefined>;
    /**
     * Add the port to an aggregated interface. - Range: `1`-`65535`
     */
    public readonly bundleId!: pulumi.Output<number | undefined>;
    /**
     * Specify the mode of operation. - Choices: `active`, `inherit`, `on`, `passive`
     */
    public readonly bundleIdMode!: pulumi.Output<string | undefined>;
    /**
     * Use the destination IP as the hash function
     */
    public readonly bundleLoadBalancingHashDstIp!: pulumi.Output<boolean | undefined>;
    /**
     * Use the source IP as the hash function
     */
    public readonly bundleLoadBalancingHashSrcIp!: pulumi.Output<boolean | undefined>;
    /**
     * Set the maximum number of active links in this bundle - Range: `1`-`64`
     */
    public readonly bundleMaximumActiveLinks!: pulumi.Output<number | undefined>;
    /**
     * Set the number of active links needed to bring up this bundle - Range: `1`-`64`
     */
    public readonly bundleMinimumActiveLinks!: pulumi.Output<number | undefined>;
    /**
     * Priority for this port. Lower value is higher priority. - Range: `1`-`65535`
     */
    public readonly bundlePortPriority!: pulumi.Output<number | undefined>;
    /**
     * Bring all links in the bundle down to Standby state
     */
    public readonly bundleShutdown!: pulumi.Output<boolean | undefined>;
    /**
     * Enable CDP on an interface
     */
    public readonly cdp!: pulumi.Output<boolean | undefined>;
    /**
     * Decay half life (in minutes) - Range: `1`-`45`
     */
    public readonly dampeningDecayHalfLifeValue!: pulumi.Output<number | undefined>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * Set description for this interface
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Configure first (outer) VLAN ID on the subinterface - Range: `1`-`4094`
     */
    public readonly encapsulationDot1qVlanId!: pulumi.Output<number | undefined>;
    /**
     * Specify a flow monitor and sampler for outgoing packets
     */
    public readonly flowIpv4EgressMonitorSamplers!: pulumi.Output<outputs.InterfaceFlowIpv4EgressMonitorSampler[] | undefined>;
    /**
     * Specify a flow monitor for packets
     */
    public readonly flowIpv4EgressMonitors!: pulumi.Output<outputs.InterfaceFlowIpv4EgressMonitor[] | undefined>;
    /**
     * Specify a flow monitor and sampler for incoming packets
     */
    public readonly flowIpv4IngressMonitorSamplers!: pulumi.Output<outputs.InterfaceFlowIpv4IngressMonitorSampler[] | undefined>;
    /**
     * Specify a flow monitor for packets
     */
    public readonly flowIpv4IngressMonitors!: pulumi.Output<outputs.InterfaceFlowIpv4IngressMonitor[] | undefined>;
    /**
     * Specify a flow monitor and sampler for outgoing packets
     */
    public readonly flowIpv6EgressMonitorSamplers!: pulumi.Output<outputs.InterfaceFlowIpv6EgressMonitorSampler[] | undefined>;
    /**
     * Specify a flow monitor for packets
     */
    public readonly flowIpv6EgressMonitors!: pulumi.Output<outputs.InterfaceFlowIpv6EgressMonitor[] | undefined>;
    /**
     * Specify a flow monitor and sampler for incoming packets
     */
    public readonly flowIpv6IngressMonitorSamplers!: pulumi.Output<outputs.InterfaceFlowIpv6IngressMonitorSampler[] | undefined>;
    /**
     * Specify a flow monitor for packets
     */
    public readonly flowIpv6IngressMonitors!: pulumi.Output<outputs.InterfaceFlowIpv6IngressMonitor[] | undefined>;
    /**
     * Interface configuration subcommands
     */
    public readonly interfaceName!: pulumi.Output<string>;
    /**
     * Access-list name
     */
    public readonly ipv4AccessGroupEgressAcl!: pulumi.Output<string | undefined>;
    /**
     * Specify ACL compression in hardware - Range: `0`-`3`
     */
    public readonly ipv4AccessGroupEgressCompressLevel!: pulumi.Output<number | undefined>;
    /**
     * Count packets in hardware
     */
    public readonly ipv4AccessGroupEgressHardwareCount!: pulumi.Output<boolean | undefined>;
    /**
     * Per interface statistics in hardware
     */
    public readonly ipv4AccessGroupEgressInterfaceStatistics!: pulumi.Output<boolean | undefined>;
    /**
     * Access-list name
     */
    public readonly ipv4AccessGroupIngressAcl1!: pulumi.Output<string | undefined>;
    /**
     * Specify ACL compression in hardware - Range: `0`-`3`
     */
    public readonly ipv4AccessGroupIngressCompressLevel!: pulumi.Output<number | undefined>;
    /**
     * Count packets in hardware
     */
    public readonly ipv4AccessGroupIngressHardwareCount!: pulumi.Output<boolean | undefined>;
    /**
     * Per interface statistics in hardware
     */
    public readonly ipv4AccessGroupIngressInterfaceStatistics!: pulumi.Output<boolean | undefined>;
    /**
     * IP address
     */
    public readonly ipv4Address!: pulumi.Output<string | undefined>;
    /**
     * IP subnet mask
     */
    public readonly ipv4Netmask!: pulumi.Output<string | undefined>;
    /**
     * Enable point-to-point handling for this interface.
     */
    public readonly ipv4PointToPoint!: pulumi.Output<boolean | undefined>;
    /**
     * Allow default route to match when checking source address
     */
    public readonly ipv4VerifyUnicastSourceReachableViaAllowDefault!: pulumi.Output<boolean | undefined>;
    /**
     * Allow router to ping itself (opens vulnerability in verification)
     */
    public readonly ipv4VerifyUnicastSourceReachableViaAllowSelfPing!: pulumi.Output<boolean | undefined>;
    /**
     * Source reachable type - Choices: `any`, `rx`
     */
    public readonly ipv4VerifyUnicastSourceReachableViaType!: pulumi.Output<string | undefined>;
    /**
     * Access-list name
     */
    public readonly ipv6AccessGroupEgressAcl1!: pulumi.Output<string | undefined>;
    /**
     * Specify ACL compression in hardware - Range: `0`-`3`
     */
    public readonly ipv6AccessGroupEgressCompressLevel!: pulumi.Output<number | undefined>;
    /**
     * Per interface statistics in hardware
     */
    public readonly ipv6AccessGroupEgressInterfaceStatistics!: pulumi.Output<boolean | undefined>;
    /**
     * Access-list name
     */
    public readonly ipv6AccessGroupIngressAcl1!: pulumi.Output<string | undefined>;
    /**
     * Specify ACL compression in hardware - Range: `0`-`3`
     */
    public readonly ipv6AccessGroupIngressCompressLevel!: pulumi.Output<number | undefined>;
    /**
     * Per interface statistics in hardware
     */
    public readonly ipv6AccessGroupIngressInterfaceStatistics!: pulumi.Output<boolean | undefined>;
    /**
     * IPv6 address
     */
    public readonly ipv6Addresses!: pulumi.Output<outputs.InterfaceIpv6Address[] | undefined>;
    /**
     * Enable slaac on Mgmt interface
     */
    public readonly ipv6Autoconfig!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IPv6 on interface
     */
    public readonly ipv6Enable!: pulumi.Output<boolean | undefined>;
    /**
     * IPv6 address
     */
    public readonly ipv6LinkLocalAddress!: pulumi.Output<string | undefined>;
    /**
     * IPv6 address zone
     */
    public readonly ipv6LinkLocalZone!: pulumi.Output<string | undefined>;
    /**
     * Allow default route to match when checking source address
     */
    public readonly ipv6VerifyUnicastSourceReachableViaAllowDefault!: pulumi.Output<boolean | undefined>;
    /**
     * Allow router to ping itself (opens vulnerability in verification)
     */
    public readonly ipv6VerifyUnicastSourceReachableViaAllowSelfPing!: pulumi.Output<boolean | undefined>;
    /**
     * Source reachable type - Choices: `any`, `rx`
     */
    public readonly ipv6VerifyUnicastSourceReachableViaType!: pulumi.Output<string | undefined>;
    /**
     * l2transport sub-interface
     */
    public readonly l2transport!: pulumi.Output<boolean | undefined>;
    /**
     * End of VLAN range
     */
    public readonly l2transportEncapsulationDot1qSecondDot1q!: pulumi.Output<string | undefined>;
    /**
     * Single VLAN id or start of VLAN range
     */
    public readonly l2transportEncapsulationDot1qVlanId!: pulumi.Output<string | undefined>;
    /**
     * Specify interval for load calculation for an interface
     */
    public readonly loadInterval!: pulumi.Output<number | undefined>;
    /**
     * Set the MTU on an interface - Range: `64`-`65535`
     */
    public readonly mtu!: pulumi.Output<number | undefined>;
    /**
     * multipoint sub-interface
     */
    public readonly multipoint!: pulumi.Output<boolean | undefined>;
    /**
     * point-to-point sub-interface
     */
    public readonly pointToPoint!: pulumi.Output<boolean | undefined>;
    /**
     * Remove outer tag only
     */
    public readonly rewriteIngressTagPopOne!: pulumi.Output<boolean | undefined>;
    /**
     * Remove two outermost tags
     */
    public readonly rewriteIngressTagPopTwo!: pulumi.Output<boolean | undefined>;
    /**
     * Configure a policy in the input direction
     */
    public readonly servicePolicyInputs!: pulumi.Output<outputs.InterfaceServicePolicyInput[] | undefined>;
    /**
     * direction of service policy application
     */
    public readonly servicePolicyOutputs!: pulumi.Output<outputs.InterfaceServicePolicyOutput[] | undefined>;
    /**
     * shutdown the given interface
     */
    public readonly shutdown!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IP processing without an explicit address
     */
    public readonly unnumbered!: pulumi.Output<string | undefined>;
    /**
     * Set VRF in which the interface operates
     */
    public readonly vrf!: pulumi.Output<string | undefined>;

    /**
     * Create a Interface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceArgs | InterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceState | undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["bfdModeIetf"] = state ? state.bfdModeIetf : undefined;
            resourceInputs["bundleId"] = state ? state.bundleId : undefined;
            resourceInputs["bundleIdMode"] = state ? state.bundleIdMode : undefined;
            resourceInputs["bundleLoadBalancingHashDstIp"] = state ? state.bundleLoadBalancingHashDstIp : undefined;
            resourceInputs["bundleLoadBalancingHashSrcIp"] = state ? state.bundleLoadBalancingHashSrcIp : undefined;
            resourceInputs["bundleMaximumActiveLinks"] = state ? state.bundleMaximumActiveLinks : undefined;
            resourceInputs["bundleMinimumActiveLinks"] = state ? state.bundleMinimumActiveLinks : undefined;
            resourceInputs["bundlePortPriority"] = state ? state.bundlePortPriority : undefined;
            resourceInputs["bundleShutdown"] = state ? state.bundleShutdown : undefined;
            resourceInputs["cdp"] = state ? state.cdp : undefined;
            resourceInputs["dampeningDecayHalfLifeValue"] = state ? state.dampeningDecayHalfLifeValue : undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["encapsulationDot1qVlanId"] = state ? state.encapsulationDot1qVlanId : undefined;
            resourceInputs["flowIpv4EgressMonitorSamplers"] = state ? state.flowIpv4EgressMonitorSamplers : undefined;
            resourceInputs["flowIpv4EgressMonitors"] = state ? state.flowIpv4EgressMonitors : undefined;
            resourceInputs["flowIpv4IngressMonitorSamplers"] = state ? state.flowIpv4IngressMonitorSamplers : undefined;
            resourceInputs["flowIpv4IngressMonitors"] = state ? state.flowIpv4IngressMonitors : undefined;
            resourceInputs["flowIpv6EgressMonitorSamplers"] = state ? state.flowIpv6EgressMonitorSamplers : undefined;
            resourceInputs["flowIpv6EgressMonitors"] = state ? state.flowIpv6EgressMonitors : undefined;
            resourceInputs["flowIpv6IngressMonitorSamplers"] = state ? state.flowIpv6IngressMonitorSamplers : undefined;
            resourceInputs["flowIpv6IngressMonitors"] = state ? state.flowIpv6IngressMonitors : undefined;
            resourceInputs["interfaceName"] = state ? state.interfaceName : undefined;
            resourceInputs["ipv4AccessGroupEgressAcl"] = state ? state.ipv4AccessGroupEgressAcl : undefined;
            resourceInputs["ipv4AccessGroupEgressCompressLevel"] = state ? state.ipv4AccessGroupEgressCompressLevel : undefined;
            resourceInputs["ipv4AccessGroupEgressHardwareCount"] = state ? state.ipv4AccessGroupEgressHardwareCount : undefined;
            resourceInputs["ipv4AccessGroupEgressInterfaceStatistics"] = state ? state.ipv4AccessGroupEgressInterfaceStatistics : undefined;
            resourceInputs["ipv4AccessGroupIngressAcl1"] = state ? state.ipv4AccessGroupIngressAcl1 : undefined;
            resourceInputs["ipv4AccessGroupIngressCompressLevel"] = state ? state.ipv4AccessGroupIngressCompressLevel : undefined;
            resourceInputs["ipv4AccessGroupIngressHardwareCount"] = state ? state.ipv4AccessGroupIngressHardwareCount : undefined;
            resourceInputs["ipv4AccessGroupIngressInterfaceStatistics"] = state ? state.ipv4AccessGroupIngressInterfaceStatistics : undefined;
            resourceInputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            resourceInputs["ipv4Netmask"] = state ? state.ipv4Netmask : undefined;
            resourceInputs["ipv4PointToPoint"] = state ? state.ipv4PointToPoint : undefined;
            resourceInputs["ipv4VerifyUnicastSourceReachableViaAllowDefault"] = state ? state.ipv4VerifyUnicastSourceReachableViaAllowDefault : undefined;
            resourceInputs["ipv4VerifyUnicastSourceReachableViaAllowSelfPing"] = state ? state.ipv4VerifyUnicastSourceReachableViaAllowSelfPing : undefined;
            resourceInputs["ipv4VerifyUnicastSourceReachableViaType"] = state ? state.ipv4VerifyUnicastSourceReachableViaType : undefined;
            resourceInputs["ipv6AccessGroupEgressAcl1"] = state ? state.ipv6AccessGroupEgressAcl1 : undefined;
            resourceInputs["ipv6AccessGroupEgressCompressLevel"] = state ? state.ipv6AccessGroupEgressCompressLevel : undefined;
            resourceInputs["ipv6AccessGroupEgressInterfaceStatistics"] = state ? state.ipv6AccessGroupEgressInterfaceStatistics : undefined;
            resourceInputs["ipv6AccessGroupIngressAcl1"] = state ? state.ipv6AccessGroupIngressAcl1 : undefined;
            resourceInputs["ipv6AccessGroupIngressCompressLevel"] = state ? state.ipv6AccessGroupIngressCompressLevel : undefined;
            resourceInputs["ipv6AccessGroupIngressInterfaceStatistics"] = state ? state.ipv6AccessGroupIngressInterfaceStatistics : undefined;
            resourceInputs["ipv6Addresses"] = state ? state.ipv6Addresses : undefined;
            resourceInputs["ipv6Autoconfig"] = state ? state.ipv6Autoconfig : undefined;
            resourceInputs["ipv6Enable"] = state ? state.ipv6Enable : undefined;
            resourceInputs["ipv6LinkLocalAddress"] = state ? state.ipv6LinkLocalAddress : undefined;
            resourceInputs["ipv6LinkLocalZone"] = state ? state.ipv6LinkLocalZone : undefined;
            resourceInputs["ipv6VerifyUnicastSourceReachableViaAllowDefault"] = state ? state.ipv6VerifyUnicastSourceReachableViaAllowDefault : undefined;
            resourceInputs["ipv6VerifyUnicastSourceReachableViaAllowSelfPing"] = state ? state.ipv6VerifyUnicastSourceReachableViaAllowSelfPing : undefined;
            resourceInputs["ipv6VerifyUnicastSourceReachableViaType"] = state ? state.ipv6VerifyUnicastSourceReachableViaType : undefined;
            resourceInputs["l2transport"] = state ? state.l2transport : undefined;
            resourceInputs["l2transportEncapsulationDot1qSecondDot1q"] = state ? state.l2transportEncapsulationDot1qSecondDot1q : undefined;
            resourceInputs["l2transportEncapsulationDot1qVlanId"] = state ? state.l2transportEncapsulationDot1qVlanId : undefined;
            resourceInputs["loadInterval"] = state ? state.loadInterval : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["multipoint"] = state ? state.multipoint : undefined;
            resourceInputs["pointToPoint"] = state ? state.pointToPoint : undefined;
            resourceInputs["rewriteIngressTagPopOne"] = state ? state.rewriteIngressTagPopOne : undefined;
            resourceInputs["rewriteIngressTagPopTwo"] = state ? state.rewriteIngressTagPopTwo : undefined;
            resourceInputs["servicePolicyInputs"] = state ? state.servicePolicyInputs : undefined;
            resourceInputs["servicePolicyOutputs"] = state ? state.servicePolicyOutputs : undefined;
            resourceInputs["shutdown"] = state ? state.shutdown : undefined;
            resourceInputs["unnumbered"] = state ? state.unnumbered : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
        } else {
            const args = argsOrState as InterfaceArgs | undefined;
            if ((!args || args.interfaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaceName'");
            }
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["bfdModeIetf"] = args ? args.bfdModeIetf : undefined;
            resourceInputs["bundleId"] = args ? args.bundleId : undefined;
            resourceInputs["bundleIdMode"] = args ? args.bundleIdMode : undefined;
            resourceInputs["bundleLoadBalancingHashDstIp"] = args ? args.bundleLoadBalancingHashDstIp : undefined;
            resourceInputs["bundleLoadBalancingHashSrcIp"] = args ? args.bundleLoadBalancingHashSrcIp : undefined;
            resourceInputs["bundleMaximumActiveLinks"] = args ? args.bundleMaximumActiveLinks : undefined;
            resourceInputs["bundleMinimumActiveLinks"] = args ? args.bundleMinimumActiveLinks : undefined;
            resourceInputs["bundlePortPriority"] = args ? args.bundlePortPriority : undefined;
            resourceInputs["bundleShutdown"] = args ? args.bundleShutdown : undefined;
            resourceInputs["cdp"] = args ? args.cdp : undefined;
            resourceInputs["dampeningDecayHalfLifeValue"] = args ? args.dampeningDecayHalfLifeValue : undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["encapsulationDot1qVlanId"] = args ? args.encapsulationDot1qVlanId : undefined;
            resourceInputs["flowIpv4EgressMonitorSamplers"] = args ? args.flowIpv4EgressMonitorSamplers : undefined;
            resourceInputs["flowIpv4EgressMonitors"] = args ? args.flowIpv4EgressMonitors : undefined;
            resourceInputs["flowIpv4IngressMonitorSamplers"] = args ? args.flowIpv4IngressMonitorSamplers : undefined;
            resourceInputs["flowIpv4IngressMonitors"] = args ? args.flowIpv4IngressMonitors : undefined;
            resourceInputs["flowIpv6EgressMonitorSamplers"] = args ? args.flowIpv6EgressMonitorSamplers : undefined;
            resourceInputs["flowIpv6EgressMonitors"] = args ? args.flowIpv6EgressMonitors : undefined;
            resourceInputs["flowIpv6IngressMonitorSamplers"] = args ? args.flowIpv6IngressMonitorSamplers : undefined;
            resourceInputs["flowIpv6IngressMonitors"] = args ? args.flowIpv6IngressMonitors : undefined;
            resourceInputs["interfaceName"] = args ? args.interfaceName : undefined;
            resourceInputs["ipv4AccessGroupEgressAcl"] = args ? args.ipv4AccessGroupEgressAcl : undefined;
            resourceInputs["ipv4AccessGroupEgressCompressLevel"] = args ? args.ipv4AccessGroupEgressCompressLevel : undefined;
            resourceInputs["ipv4AccessGroupEgressHardwareCount"] = args ? args.ipv4AccessGroupEgressHardwareCount : undefined;
            resourceInputs["ipv4AccessGroupEgressInterfaceStatistics"] = args ? args.ipv4AccessGroupEgressInterfaceStatistics : undefined;
            resourceInputs["ipv4AccessGroupIngressAcl1"] = args ? args.ipv4AccessGroupIngressAcl1 : undefined;
            resourceInputs["ipv4AccessGroupIngressCompressLevel"] = args ? args.ipv4AccessGroupIngressCompressLevel : undefined;
            resourceInputs["ipv4AccessGroupIngressHardwareCount"] = args ? args.ipv4AccessGroupIngressHardwareCount : undefined;
            resourceInputs["ipv4AccessGroupIngressInterfaceStatistics"] = args ? args.ipv4AccessGroupIngressInterfaceStatistics : undefined;
            resourceInputs["ipv4Address"] = args ? args.ipv4Address : undefined;
            resourceInputs["ipv4Netmask"] = args ? args.ipv4Netmask : undefined;
            resourceInputs["ipv4PointToPoint"] = args ? args.ipv4PointToPoint : undefined;
            resourceInputs["ipv4VerifyUnicastSourceReachableViaAllowDefault"] = args ? args.ipv4VerifyUnicastSourceReachableViaAllowDefault : undefined;
            resourceInputs["ipv4VerifyUnicastSourceReachableViaAllowSelfPing"] = args ? args.ipv4VerifyUnicastSourceReachableViaAllowSelfPing : undefined;
            resourceInputs["ipv4VerifyUnicastSourceReachableViaType"] = args ? args.ipv4VerifyUnicastSourceReachableViaType : undefined;
            resourceInputs["ipv6AccessGroupEgressAcl1"] = args ? args.ipv6AccessGroupEgressAcl1 : undefined;
            resourceInputs["ipv6AccessGroupEgressCompressLevel"] = args ? args.ipv6AccessGroupEgressCompressLevel : undefined;
            resourceInputs["ipv6AccessGroupEgressInterfaceStatistics"] = args ? args.ipv6AccessGroupEgressInterfaceStatistics : undefined;
            resourceInputs["ipv6AccessGroupIngressAcl1"] = args ? args.ipv6AccessGroupIngressAcl1 : undefined;
            resourceInputs["ipv6AccessGroupIngressCompressLevel"] = args ? args.ipv6AccessGroupIngressCompressLevel : undefined;
            resourceInputs["ipv6AccessGroupIngressInterfaceStatistics"] = args ? args.ipv6AccessGroupIngressInterfaceStatistics : undefined;
            resourceInputs["ipv6Addresses"] = args ? args.ipv6Addresses : undefined;
            resourceInputs["ipv6Autoconfig"] = args ? args.ipv6Autoconfig : undefined;
            resourceInputs["ipv6Enable"] = args ? args.ipv6Enable : undefined;
            resourceInputs["ipv6LinkLocalAddress"] = args ? args.ipv6LinkLocalAddress : undefined;
            resourceInputs["ipv6LinkLocalZone"] = args ? args.ipv6LinkLocalZone : undefined;
            resourceInputs["ipv6VerifyUnicastSourceReachableViaAllowDefault"] = args ? args.ipv6VerifyUnicastSourceReachableViaAllowDefault : undefined;
            resourceInputs["ipv6VerifyUnicastSourceReachableViaAllowSelfPing"] = args ? args.ipv6VerifyUnicastSourceReachableViaAllowSelfPing : undefined;
            resourceInputs["ipv6VerifyUnicastSourceReachableViaType"] = args ? args.ipv6VerifyUnicastSourceReachableViaType : undefined;
            resourceInputs["l2transport"] = args ? args.l2transport : undefined;
            resourceInputs["l2transportEncapsulationDot1qSecondDot1q"] = args ? args.l2transportEncapsulationDot1qSecondDot1q : undefined;
            resourceInputs["l2transportEncapsulationDot1qVlanId"] = args ? args.l2transportEncapsulationDot1qVlanId : undefined;
            resourceInputs["loadInterval"] = args ? args.loadInterval : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["multipoint"] = args ? args.multipoint : undefined;
            resourceInputs["pointToPoint"] = args ? args.pointToPoint : undefined;
            resourceInputs["rewriteIngressTagPopOne"] = args ? args.rewriteIngressTagPopOne : undefined;
            resourceInputs["rewriteIngressTagPopTwo"] = args ? args.rewriteIngressTagPopTwo : undefined;
            resourceInputs["servicePolicyInputs"] = args ? args.servicePolicyInputs : undefined;
            resourceInputs["servicePolicyOutputs"] = args ? args.servicePolicyOutputs : undefined;
            resourceInputs["shutdown"] = args ? args.shutdown : undefined;
            resourceInputs["unnumbered"] = args ? args.unnumbered : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Interface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Interface resources.
 */
export interface InterfaceState {
    /**
     * Set the bandwidth of an interface - Range: `0`-`9223372036854775807`
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Use IETF standard for BoB
     */
    bfdModeIetf?: pulumi.Input<boolean>;
    /**
     * Add the port to an aggregated interface. - Range: `1`-`65535`
     */
    bundleId?: pulumi.Input<number>;
    /**
     * Specify the mode of operation. - Choices: `active`, `inherit`, `on`, `passive`
     */
    bundleIdMode?: pulumi.Input<string>;
    /**
     * Use the destination IP as the hash function
     */
    bundleLoadBalancingHashDstIp?: pulumi.Input<boolean>;
    /**
     * Use the source IP as the hash function
     */
    bundleLoadBalancingHashSrcIp?: pulumi.Input<boolean>;
    /**
     * Set the maximum number of active links in this bundle - Range: `1`-`64`
     */
    bundleMaximumActiveLinks?: pulumi.Input<number>;
    /**
     * Set the number of active links needed to bring up this bundle - Range: `1`-`64`
     */
    bundleMinimumActiveLinks?: pulumi.Input<number>;
    /**
     * Priority for this port. Lower value is higher priority. - Range: `1`-`65535`
     */
    bundlePortPriority?: pulumi.Input<number>;
    /**
     * Bring all links in the bundle down to Standby state
     */
    bundleShutdown?: pulumi.Input<boolean>;
    /**
     * Enable CDP on an interface
     */
    cdp?: pulumi.Input<boolean>;
    /**
     * Decay half life (in minutes) - Range: `1`-`45`
     */
    dampeningDecayHalfLifeValue?: pulumi.Input<number>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * Set description for this interface
     */
    description?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Configure first (outer) VLAN ID on the subinterface - Range: `1`-`4094`
     */
    encapsulationDot1qVlanId?: pulumi.Input<number>;
    /**
     * Specify a flow monitor and sampler for outgoing packets
     */
    flowIpv4EgressMonitorSamplers?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv4EgressMonitorSampler>[]>;
    /**
     * Specify a flow monitor for packets
     */
    flowIpv4EgressMonitors?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv4EgressMonitor>[]>;
    /**
     * Specify a flow monitor and sampler for incoming packets
     */
    flowIpv4IngressMonitorSamplers?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv4IngressMonitorSampler>[]>;
    /**
     * Specify a flow monitor for packets
     */
    flowIpv4IngressMonitors?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv4IngressMonitor>[]>;
    /**
     * Specify a flow monitor and sampler for outgoing packets
     */
    flowIpv6EgressMonitorSamplers?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv6EgressMonitorSampler>[]>;
    /**
     * Specify a flow monitor for packets
     */
    flowIpv6EgressMonitors?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv6EgressMonitor>[]>;
    /**
     * Specify a flow monitor and sampler for incoming packets
     */
    flowIpv6IngressMonitorSamplers?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv6IngressMonitorSampler>[]>;
    /**
     * Specify a flow monitor for packets
     */
    flowIpv6IngressMonitors?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv6IngressMonitor>[]>;
    /**
     * Interface configuration subcommands
     */
    interfaceName?: pulumi.Input<string>;
    /**
     * Access-list name
     */
    ipv4AccessGroupEgressAcl?: pulumi.Input<string>;
    /**
     * Specify ACL compression in hardware - Range: `0`-`3`
     */
    ipv4AccessGroupEgressCompressLevel?: pulumi.Input<number>;
    /**
     * Count packets in hardware
     */
    ipv4AccessGroupEgressHardwareCount?: pulumi.Input<boolean>;
    /**
     * Per interface statistics in hardware
     */
    ipv4AccessGroupEgressInterfaceStatistics?: pulumi.Input<boolean>;
    /**
     * Access-list name
     */
    ipv4AccessGroupIngressAcl1?: pulumi.Input<string>;
    /**
     * Specify ACL compression in hardware - Range: `0`-`3`
     */
    ipv4AccessGroupIngressCompressLevel?: pulumi.Input<number>;
    /**
     * Count packets in hardware
     */
    ipv4AccessGroupIngressHardwareCount?: pulumi.Input<boolean>;
    /**
     * Per interface statistics in hardware
     */
    ipv4AccessGroupIngressInterfaceStatistics?: pulumi.Input<boolean>;
    /**
     * IP address
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * IP subnet mask
     */
    ipv4Netmask?: pulumi.Input<string>;
    /**
     * Enable point-to-point handling for this interface.
     */
    ipv4PointToPoint?: pulumi.Input<boolean>;
    /**
     * Allow default route to match when checking source address
     */
    ipv4VerifyUnicastSourceReachableViaAllowDefault?: pulumi.Input<boolean>;
    /**
     * Allow router to ping itself (opens vulnerability in verification)
     */
    ipv4VerifyUnicastSourceReachableViaAllowSelfPing?: pulumi.Input<boolean>;
    /**
     * Source reachable type - Choices: `any`, `rx`
     */
    ipv4VerifyUnicastSourceReachableViaType?: pulumi.Input<string>;
    /**
     * Access-list name
     */
    ipv6AccessGroupEgressAcl1?: pulumi.Input<string>;
    /**
     * Specify ACL compression in hardware - Range: `0`-`3`
     */
    ipv6AccessGroupEgressCompressLevel?: pulumi.Input<number>;
    /**
     * Per interface statistics in hardware
     */
    ipv6AccessGroupEgressInterfaceStatistics?: pulumi.Input<boolean>;
    /**
     * Access-list name
     */
    ipv6AccessGroupIngressAcl1?: pulumi.Input<string>;
    /**
     * Specify ACL compression in hardware - Range: `0`-`3`
     */
    ipv6AccessGroupIngressCompressLevel?: pulumi.Input<number>;
    /**
     * Per interface statistics in hardware
     */
    ipv6AccessGroupIngressInterfaceStatistics?: pulumi.Input<boolean>;
    /**
     * IPv6 address
     */
    ipv6Addresses?: pulumi.Input<pulumi.Input<inputs.InterfaceIpv6Address>[]>;
    /**
     * Enable slaac on Mgmt interface
     */
    ipv6Autoconfig?: pulumi.Input<boolean>;
    /**
     * Enable IPv6 on interface
     */
    ipv6Enable?: pulumi.Input<boolean>;
    /**
     * IPv6 address
     */
    ipv6LinkLocalAddress?: pulumi.Input<string>;
    /**
     * IPv6 address zone
     */
    ipv6LinkLocalZone?: pulumi.Input<string>;
    /**
     * Allow default route to match when checking source address
     */
    ipv6VerifyUnicastSourceReachableViaAllowDefault?: pulumi.Input<boolean>;
    /**
     * Allow router to ping itself (opens vulnerability in verification)
     */
    ipv6VerifyUnicastSourceReachableViaAllowSelfPing?: pulumi.Input<boolean>;
    /**
     * Source reachable type - Choices: `any`, `rx`
     */
    ipv6VerifyUnicastSourceReachableViaType?: pulumi.Input<string>;
    /**
     * l2transport sub-interface
     */
    l2transport?: pulumi.Input<boolean>;
    /**
     * End of VLAN range
     */
    l2transportEncapsulationDot1qSecondDot1q?: pulumi.Input<string>;
    /**
     * Single VLAN id or start of VLAN range
     */
    l2transportEncapsulationDot1qVlanId?: pulumi.Input<string>;
    /**
     * Specify interval for load calculation for an interface
     */
    loadInterval?: pulumi.Input<number>;
    /**
     * Set the MTU on an interface - Range: `64`-`65535`
     */
    mtu?: pulumi.Input<number>;
    /**
     * multipoint sub-interface
     */
    multipoint?: pulumi.Input<boolean>;
    /**
     * point-to-point sub-interface
     */
    pointToPoint?: pulumi.Input<boolean>;
    /**
     * Remove outer tag only
     */
    rewriteIngressTagPopOne?: pulumi.Input<boolean>;
    /**
     * Remove two outermost tags
     */
    rewriteIngressTagPopTwo?: pulumi.Input<boolean>;
    /**
     * Configure a policy in the input direction
     */
    servicePolicyInputs?: pulumi.Input<pulumi.Input<inputs.InterfaceServicePolicyInput>[]>;
    /**
     * direction of service policy application
     */
    servicePolicyOutputs?: pulumi.Input<pulumi.Input<inputs.InterfaceServicePolicyOutput>[]>;
    /**
     * shutdown the given interface
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Enable IP processing without an explicit address
     */
    unnumbered?: pulumi.Input<string>;
    /**
     * Set VRF in which the interface operates
     */
    vrf?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Interface resource.
 */
export interface InterfaceArgs {
    /**
     * Set the bandwidth of an interface - Range: `0`-`9223372036854775807`
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Use IETF standard for BoB
     */
    bfdModeIetf?: pulumi.Input<boolean>;
    /**
     * Add the port to an aggregated interface. - Range: `1`-`65535`
     */
    bundleId?: pulumi.Input<number>;
    /**
     * Specify the mode of operation. - Choices: `active`, `inherit`, `on`, `passive`
     */
    bundleIdMode?: pulumi.Input<string>;
    /**
     * Use the destination IP as the hash function
     */
    bundleLoadBalancingHashDstIp?: pulumi.Input<boolean>;
    /**
     * Use the source IP as the hash function
     */
    bundleLoadBalancingHashSrcIp?: pulumi.Input<boolean>;
    /**
     * Set the maximum number of active links in this bundle - Range: `1`-`64`
     */
    bundleMaximumActiveLinks?: pulumi.Input<number>;
    /**
     * Set the number of active links needed to bring up this bundle - Range: `1`-`64`
     */
    bundleMinimumActiveLinks?: pulumi.Input<number>;
    /**
     * Priority for this port. Lower value is higher priority. - Range: `1`-`65535`
     */
    bundlePortPriority?: pulumi.Input<number>;
    /**
     * Bring all links in the bundle down to Standby state
     */
    bundleShutdown?: pulumi.Input<boolean>;
    /**
     * Enable CDP on an interface
     */
    cdp?: pulumi.Input<boolean>;
    /**
     * Decay half life (in minutes) - Range: `1`-`45`
     */
    dampeningDecayHalfLifeValue?: pulumi.Input<number>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * Set description for this interface
     */
    description?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Configure first (outer) VLAN ID on the subinterface - Range: `1`-`4094`
     */
    encapsulationDot1qVlanId?: pulumi.Input<number>;
    /**
     * Specify a flow monitor and sampler for outgoing packets
     */
    flowIpv4EgressMonitorSamplers?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv4EgressMonitorSampler>[]>;
    /**
     * Specify a flow monitor for packets
     */
    flowIpv4EgressMonitors?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv4EgressMonitor>[]>;
    /**
     * Specify a flow monitor and sampler for incoming packets
     */
    flowIpv4IngressMonitorSamplers?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv4IngressMonitorSampler>[]>;
    /**
     * Specify a flow monitor for packets
     */
    flowIpv4IngressMonitors?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv4IngressMonitor>[]>;
    /**
     * Specify a flow monitor and sampler for outgoing packets
     */
    flowIpv6EgressMonitorSamplers?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv6EgressMonitorSampler>[]>;
    /**
     * Specify a flow monitor for packets
     */
    flowIpv6EgressMonitors?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv6EgressMonitor>[]>;
    /**
     * Specify a flow monitor and sampler for incoming packets
     */
    flowIpv6IngressMonitorSamplers?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv6IngressMonitorSampler>[]>;
    /**
     * Specify a flow monitor for packets
     */
    flowIpv6IngressMonitors?: pulumi.Input<pulumi.Input<inputs.InterfaceFlowIpv6IngressMonitor>[]>;
    /**
     * Interface configuration subcommands
     */
    interfaceName: pulumi.Input<string>;
    /**
     * Access-list name
     */
    ipv4AccessGroupEgressAcl?: pulumi.Input<string>;
    /**
     * Specify ACL compression in hardware - Range: `0`-`3`
     */
    ipv4AccessGroupEgressCompressLevel?: pulumi.Input<number>;
    /**
     * Count packets in hardware
     */
    ipv4AccessGroupEgressHardwareCount?: pulumi.Input<boolean>;
    /**
     * Per interface statistics in hardware
     */
    ipv4AccessGroupEgressInterfaceStatistics?: pulumi.Input<boolean>;
    /**
     * Access-list name
     */
    ipv4AccessGroupIngressAcl1?: pulumi.Input<string>;
    /**
     * Specify ACL compression in hardware - Range: `0`-`3`
     */
    ipv4AccessGroupIngressCompressLevel?: pulumi.Input<number>;
    /**
     * Count packets in hardware
     */
    ipv4AccessGroupIngressHardwareCount?: pulumi.Input<boolean>;
    /**
     * Per interface statistics in hardware
     */
    ipv4AccessGroupIngressInterfaceStatistics?: pulumi.Input<boolean>;
    /**
     * IP address
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * IP subnet mask
     */
    ipv4Netmask?: pulumi.Input<string>;
    /**
     * Enable point-to-point handling for this interface.
     */
    ipv4PointToPoint?: pulumi.Input<boolean>;
    /**
     * Allow default route to match when checking source address
     */
    ipv4VerifyUnicastSourceReachableViaAllowDefault?: pulumi.Input<boolean>;
    /**
     * Allow router to ping itself (opens vulnerability in verification)
     */
    ipv4VerifyUnicastSourceReachableViaAllowSelfPing?: pulumi.Input<boolean>;
    /**
     * Source reachable type - Choices: `any`, `rx`
     */
    ipv4VerifyUnicastSourceReachableViaType?: pulumi.Input<string>;
    /**
     * Access-list name
     */
    ipv6AccessGroupEgressAcl1?: pulumi.Input<string>;
    /**
     * Specify ACL compression in hardware - Range: `0`-`3`
     */
    ipv6AccessGroupEgressCompressLevel?: pulumi.Input<number>;
    /**
     * Per interface statistics in hardware
     */
    ipv6AccessGroupEgressInterfaceStatistics?: pulumi.Input<boolean>;
    /**
     * Access-list name
     */
    ipv6AccessGroupIngressAcl1?: pulumi.Input<string>;
    /**
     * Specify ACL compression in hardware - Range: `0`-`3`
     */
    ipv6AccessGroupIngressCompressLevel?: pulumi.Input<number>;
    /**
     * Per interface statistics in hardware
     */
    ipv6AccessGroupIngressInterfaceStatistics?: pulumi.Input<boolean>;
    /**
     * IPv6 address
     */
    ipv6Addresses?: pulumi.Input<pulumi.Input<inputs.InterfaceIpv6Address>[]>;
    /**
     * Enable slaac on Mgmt interface
     */
    ipv6Autoconfig?: pulumi.Input<boolean>;
    /**
     * Enable IPv6 on interface
     */
    ipv6Enable?: pulumi.Input<boolean>;
    /**
     * IPv6 address
     */
    ipv6LinkLocalAddress?: pulumi.Input<string>;
    /**
     * IPv6 address zone
     */
    ipv6LinkLocalZone?: pulumi.Input<string>;
    /**
     * Allow default route to match when checking source address
     */
    ipv6VerifyUnicastSourceReachableViaAllowDefault?: pulumi.Input<boolean>;
    /**
     * Allow router to ping itself (opens vulnerability in verification)
     */
    ipv6VerifyUnicastSourceReachableViaAllowSelfPing?: pulumi.Input<boolean>;
    /**
     * Source reachable type - Choices: `any`, `rx`
     */
    ipv6VerifyUnicastSourceReachableViaType?: pulumi.Input<string>;
    /**
     * l2transport sub-interface
     */
    l2transport?: pulumi.Input<boolean>;
    /**
     * End of VLAN range
     */
    l2transportEncapsulationDot1qSecondDot1q?: pulumi.Input<string>;
    /**
     * Single VLAN id or start of VLAN range
     */
    l2transportEncapsulationDot1qVlanId?: pulumi.Input<string>;
    /**
     * Specify interval for load calculation for an interface
     */
    loadInterval?: pulumi.Input<number>;
    /**
     * Set the MTU on an interface - Range: `64`-`65535`
     */
    mtu?: pulumi.Input<number>;
    /**
     * multipoint sub-interface
     */
    multipoint?: pulumi.Input<boolean>;
    /**
     * point-to-point sub-interface
     */
    pointToPoint?: pulumi.Input<boolean>;
    /**
     * Remove outer tag only
     */
    rewriteIngressTagPopOne?: pulumi.Input<boolean>;
    /**
     * Remove two outermost tags
     */
    rewriteIngressTagPopTwo?: pulumi.Input<boolean>;
    /**
     * Configure a policy in the input direction
     */
    servicePolicyInputs?: pulumi.Input<pulumi.Input<inputs.InterfaceServicePolicyInput>[]>;
    /**
     * direction of service policy application
     */
    servicePolicyOutputs?: pulumi.Input<pulumi.Input<inputs.InterfaceServicePolicyOutput>[]>;
    /**
     * shutdown the given interface
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Enable IP processing without an explicit address
     */
    unnumbered?: pulumi.Input<string>;
    /**
     * Set VRF in which the interface operates
     */
    vrf?: pulumi.Input<string>;
}
