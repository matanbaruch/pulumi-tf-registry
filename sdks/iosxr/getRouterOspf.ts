// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRouterOspf(args: GetRouterOspfArgs, opts?: pulumi.InvokeOptions): Promise<GetRouterOspfResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxr:index/getRouterOspf:getRouterOspf", {
        "device": args.device,
        "processName": args.processName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRouterOspf.
 */
export interface GetRouterOspfArgs {
    device?: string;
    processName: string;
}

/**
 * A collection of values returned by getRouterOspf.
 */
export interface GetRouterOspfResult {
    readonly areas: outputs.GetRouterOspfArea[];
    readonly autoCostDisable: boolean;
    readonly autoCostReferenceBandwidth: number;
    readonly bfdFastDetect: boolean;
    readonly bfdMinimumInterval: number;
    readonly bfdMultiplier: number;
    readonly deadInterval: number;
    readonly defaultInformationOriginate: boolean;
    readonly defaultInformationOriginateAlways: boolean;
    readonly defaultInformationOriginateMetricType: number;
    readonly device?: string;
    readonly helloInterval: number;
    readonly id: string;
    readonly mplsLdpSync: boolean;
    readonly mtuIgnoreDisable: boolean;
    readonly mtuIgnoreEnable: boolean;
    readonly passiveDisable: boolean;
    readonly passiveEnable: boolean;
    readonly priority: number;
    readonly processName: string;
    readonly redistributeBgps: outputs.GetRouterOspfRedistributeBgp[];
    readonly redistributeConnected: boolean;
    readonly redistributeConnectedMetricType: string;
    readonly redistributeConnectedTag: number;
    readonly redistributeIses: outputs.GetRouterOspfRedistributeIse[];
    readonly redistributeOspfs: outputs.GetRouterOspfRedistributeOspf[];
    readonly redistributeStatic: boolean;
    readonly redistributeStaticMetricType: string;
    readonly redistributeStaticTag: number;
    readonly routerId: string;
    readonly segmentRoutingMpls: boolean;
    readonly segmentRoutingSrPrefer: boolean;
}
export function getRouterOspfOutput(args: GetRouterOspfOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRouterOspfResult> {
    return pulumi.output(args).apply((a: any) => getRouterOspf(a, opts))
}

/**
 * A collection of arguments for invoking getRouterOspf.
 */
export interface GetRouterOspfOutputArgs {
    device?: pulumi.Input<string>;
    processName: pulumi.Input<string>;
}
