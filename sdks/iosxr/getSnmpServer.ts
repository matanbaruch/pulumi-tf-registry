// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSnmpServer(args?: GetSnmpServerArgs, opts?: pulumi.InvokeOptions): Promise<GetSnmpServerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxr:index/getSnmpServer:getSnmpServer", {
        "device": args.device,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSnmpServer.
 */
export interface GetSnmpServerArgs {
    device?: string;
}

/**
 * A collection of values returned by getSnmpServer.
 */
export interface GetSnmpServerResult {
    readonly communities: outputs.GetSnmpServerCommunity[];
    readonly contact: string;
    readonly device?: string;
    readonly groups: outputs.GetSnmpServerGroup[];
    readonly id: string;
    readonly location: string;
    readonly trapSourceBoth: string;
    readonly trapsBfd: boolean;
    readonly trapsBgpBgp4MibUpdown: boolean;
    readonly trapsBgpCbgp2Updown: boolean;
    readonly trapsBridgemib: boolean;
    readonly trapsConfig: boolean;
    readonly trapsCopyComplete: boolean;
    readonly trapsEntity: boolean;
    readonly trapsEntityRedundancyAll: boolean;
    readonly trapsEntityStateOperstatus: boolean;
    readonly trapsEthernetOamEvents: boolean;
    readonly trapsFruCtrl: boolean;
    readonly trapsIsisAdjacencyChange: string;
    readonly trapsIsisAll: string;
    readonly trapsIsisAreaMismatch: string;
    readonly trapsIsisAttemptToExceedMaxSequence: string;
    readonly trapsIsisAuthenticationFailure: string;
    readonly trapsIsisAuthenticationTypeFailure: string;
    readonly trapsIsisCorruptedLspDetected: string;
    readonly trapsIsisDatabaseOverload: string;
    readonly trapsIsisIdLenMismatch: string;
    readonly trapsIsisLspErrorDetected: string;
    readonly trapsIsisLspTooLargeToPropagate: string;
    readonly trapsIsisManualAddressDrops: string;
    readonly trapsIsisMaxAreaAddressesMismatch: string;
    readonly trapsIsisOrigLspBuffSizeMismatch: string;
    readonly trapsIsisOwnLspPurge: string;
    readonly trapsIsisProtocolsSupportedMismatch: string;
    readonly trapsIsisRejectedAdjacency: string;
    readonly trapsIsisSequenceNumberSkip: string;
    readonly trapsIsisVersionSkew: string;
    readonly trapsL2vpnAll: boolean;
    readonly trapsL2vpnVcDown: boolean;
    readonly trapsL2vpnVcUp: boolean;
    readonly trapsNtp: boolean;
    readonly trapsPower: boolean;
    readonly trapsRf: boolean;
    readonly trapsSensor: boolean;
    readonly trapsSnmpLinkdown: boolean;
    readonly trapsSnmpLinkup: boolean;
    readonly trapsSystem: boolean;
    readonly users: outputs.GetSnmpServerUser[];
}
export function getSnmpServerOutput(args?: GetSnmpServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSnmpServerResult> {
    return pulumi.output(args).apply((a: any) => getSnmpServer(a, opts))
}

/**
 * A collection of arguments for invoking getSnmpServer.
 */
export interface GetSnmpServerOutputArgs {
    device?: pulumi.Input<string>;
}
