// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEvpnEvi(args: GetEvpnEviArgs, opts?: pulumi.InvokeOptions): Promise<GetEvpnEviResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxr:index/getEvpnEvi:getEvpnEvi", {
        "device": args.device,
        "vpnId": args.vpnId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEvpnEvi.
 */
export interface GetEvpnEviArgs {
    device?: string;
    vpnId: number;
}

/**
 * A collection of values returned by getEvpnEvi.
 */
export interface GetEvpnEviResult {
    readonly advertiseMac: boolean;
    readonly bgpRdFourByteAsAssignedNumber: number;
    readonly bgpRdFourByteAsNumber: number;
    readonly bgpRdIpv4Address: string;
    readonly bgpRdIpv4AddressAssignedNumber: number;
    readonly bgpRdTwoByteAsAssignedNumber: number;
    readonly bgpRdTwoByteAsNumber: number;
    readonly bgpRoutePolicyExport: string;
    readonly bgpRoutePolicyImport: string;
    readonly bgpRouteTargetExportFourByteAsFormats: outputs.GetEvpnEviBgpRouteTargetExportFourByteAsFormat[];
    readonly bgpRouteTargetExportIpv4AddressFormats: outputs.GetEvpnEviBgpRouteTargetExportIpv4AddressFormat[];
    readonly bgpRouteTargetExportTwoByteAsFormats: outputs.GetEvpnEviBgpRouteTargetExportTwoByteAsFormat[];
    readonly bgpRouteTargetImportFourByteAsFormats: outputs.GetEvpnEviBgpRouteTargetImportFourByteAsFormat[];
    readonly bgpRouteTargetImportIpv4AddressFormats: outputs.GetEvpnEviBgpRouteTargetImportIpv4AddressFormat[];
    readonly bgpRouteTargetImportTwoByteAsFormats: outputs.GetEvpnEviBgpRouteTargetImportTwoByteAsFormat[];
    readonly controlWordDisable: boolean;
    readonly description: string;
    readonly device?: string;
    readonly etree: boolean;
    readonly etreeLeaf: boolean;
    readonly etreeRtLeaf: boolean;
    readonly id: string;
    readonly loadBalancing: boolean;
    readonly loadBalancingFlowLabelStatic: boolean;
    readonly unknownUnicastSuppression: boolean;
    readonly vpnId: number;
}
export function getEvpnEviOutput(args: GetEvpnEviOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEvpnEviResult> {
    return pulumi.output(args).apply((a: any) => getEvpnEvi(a, opts))
}

/**
 * A collection of arguments for invoking getEvpnEvi.
 */
export interface GetEvpnEviOutputArgs {
    device?: pulumi.Input<string>;
    vpnId: pulumi.Input<number>;
}
