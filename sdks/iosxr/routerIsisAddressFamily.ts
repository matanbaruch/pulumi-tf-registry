// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RouterIsisAddressFamily extends pulumi.CustomResource {
    /**
     * Get an existing RouterIsisAddressFamily resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterIsisAddressFamilyState, opts?: pulumi.CustomResourceOptions): RouterIsisAddressFamily {
        return new RouterIsisAddressFamily(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxr:index/routerIsisAddressFamily:RouterIsisAddressFamily';

    /**
     * Returns true if the given object is an instance of RouterIsisAddressFamily.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterIsisAddressFamily {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterIsisAddressFamily.__pulumiType;
    }

    /**
     * Advertise additional link attributes
     */
    public readonly advertiseLinkAttributes!: pulumi.Output<boolean | undefined>;
    /**
     * Advertise prefixes of passive interfaces only
     */
    public readonly advertisePassiveOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Address family name - Choices: `ipv4`, `ipv6`
     */
    public readonly afName!: pulumi.Output<string>;
    /**
     * Distribute a default route
     */
    public readonly defaultInformationOriginate!: pulumi.Output<boolean | undefined>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Delay before running FRR computation - Range: `100`-`60000`
     */
    public readonly fastRerouteDelayInterval!: pulumi.Output<number | undefined>;
    /**
     * Compute for critical priority prefixes only
     */
    public readonly fastReroutePerLinkPriorityLimitCritical!: pulumi.Output<boolean | undefined>;
    /**
     * Compute for critical & high priority prefixes
     */
    public readonly fastReroutePerLinkPriorityLimitHigh!: pulumi.Output<boolean | undefined>;
    /**
     * Compute for critical, high & medium priority prefixes
     */
    public readonly fastReroutePerLinkPriorityLimitMedium!: pulumi.Output<boolean | undefined>;
    /**
     * Compute for critical priority prefixes only
     */
    public readonly fastReroutePerPrefixPriorityLimitCritical!: pulumi.Output<boolean | undefined>;
    /**
     * Compute for critical & high priority prefixes
     */
    public readonly fastReroutePerPrefixPriorityLimitHigh!: pulumi.Output<boolean | undefined>;
    /**
     * Compute for critical, high & medium priority prefixes
     */
    public readonly fastReroutePerPrefixPriorityLimitMedium!: pulumi.Output<boolean | undefined>;
    /**
     * Maximum number of redistributed prefixes - Range: `1`-`28000`
     */
    public readonly maximumRedistributedPrefixes!: pulumi.Output<number | undefined>;
    /**
     * Set maximum redistributed prefixes for one level only
     */
    public readonly maximumRedistributedPrefixesLevels!: pulumi.Output<outputs.RouterIsisAddressFamilyMaximumRedistributedPrefixesLevel[] | undefined>;
    /**
     * Set metric-style for one level only
     */
    public readonly metricStyleLevels!: pulumi.Output<outputs.RouterIsisAddressFamilyMetricStyleLevel[] | undefined>;
    /**
     * Use old style of TLVs with narrow metric
     */
    public readonly metricStyleNarrow!: pulumi.Output<boolean | undefined>;
    /**
     * Send and accept both styles of TLVs during transition
     */
    public readonly metricStyleTransition!: pulumi.Output<boolean | undefined>;
    /**
     * Use new style of TLVs to carry wider metric
     */
    public readonly metricStyleWide!: pulumi.Output<boolean | undefined>;
    /**
     * Enable microloop avoidance for only protected prefixes
     */
    public readonly microloopAvoidanceProtected!: pulumi.Output<boolean | undefined>;
    /**
     * Enable segment routing microloop avoidance
     */
    public readonly microloopAvoidanceSegmentRouting!: pulumi.Output<boolean | undefined>;
    /**
     * Enable LDP IGP interface auto-configuration
     */
    public readonly mplsLdpAutoConfig!: pulumi.Output<boolean | undefined>;
    /**
     * Enable mpls traffic-eng at level 1
     */
    public readonly mplsTrafficEngLevel1!: pulumi.Output<boolean | undefined>;
    /**
     * Enable mpls traffic-eng at both level 1 and 2
     */
    public readonly mplsTrafficEngLevel12!: pulumi.Output<boolean | undefined>;
    /**
     * Enable mpls traffic-eng at level 2
     */
    public readonly mplsTrafficEngLevel2Only!: pulumi.Output<boolean | undefined>;
    public readonly mplsTrafficEngRouterIdInterface!: pulumi.Output<string | undefined>;
    /**
     * configure this node
     */
    public readonly mplsTrafficEngRouterIdIpAddress!: pulumi.Output<string | undefined>;
    /**
     * Process ID
     */
    public readonly processId!: pulumi.Output<string>;
    /**
     * IS-IS
     */
    public readonly redistributeIses!: pulumi.Output<outputs.RouterIsisAddressFamilyRedistributeIse[] | undefined>;
    /**
     * Router ID Interface
     */
    public readonly routerIdInterfaceName!: pulumi.Output<string | undefined>;
    /**
     * Router ID address
     */
    public readonly routerIdIpAddress!: pulumi.Output<string | undefined>;
    /**
     * Sub address family name - Choices: `multicast`, `unicast`
     */
    public readonly safName!: pulumi.Output<string>;
    /**
     * Prefer segment routing labels over LDP labels
     */
    public readonly segmentRoutingMplsSrPrefer!: pulumi.Output<boolean | undefined>;
    /**
     * Enter SRv6 Locator submode
     */
    public readonly segmentRoutingSrv6Locators!: pulumi.Output<outputs.RouterIsisAddressFamilySegmentRoutingSrv6Locator[] | undefined>;
    /**
     * Initial delay before running a route calculation - Range: `0`-`120000`
     */
    public readonly spfIntervalInitialWait!: pulumi.Output<number | undefined>;
    /**
     * Maximum delay before running a route calculation - Range: `0`-`120000`
     */
    public readonly spfIntervalMaximumWait!: pulumi.Output<number | undefined>;
    /**
     * Secondary delay before running a route calculation - Range: `0`-`120000`
     */
    public readonly spfIntervalSecondaryWait!: pulumi.Output<number | undefined>;
    /**
     * Configure a prefix priority list
     */
    public readonly spfPrefixPriorities!: pulumi.Output<outputs.RouterIsisAddressFamilySpfPrefixPriority[] | undefined>;

    /**
     * Create a RouterIsisAddressFamily resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouterIsisAddressFamilyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterIsisAddressFamilyArgs | RouterIsisAddressFamilyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterIsisAddressFamilyState | undefined;
            resourceInputs["advertiseLinkAttributes"] = state ? state.advertiseLinkAttributes : undefined;
            resourceInputs["advertisePassiveOnly"] = state ? state.advertisePassiveOnly : undefined;
            resourceInputs["afName"] = state ? state.afName : undefined;
            resourceInputs["defaultInformationOriginate"] = state ? state.defaultInformationOriginate : undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["fastRerouteDelayInterval"] = state ? state.fastRerouteDelayInterval : undefined;
            resourceInputs["fastReroutePerLinkPriorityLimitCritical"] = state ? state.fastReroutePerLinkPriorityLimitCritical : undefined;
            resourceInputs["fastReroutePerLinkPriorityLimitHigh"] = state ? state.fastReroutePerLinkPriorityLimitHigh : undefined;
            resourceInputs["fastReroutePerLinkPriorityLimitMedium"] = state ? state.fastReroutePerLinkPriorityLimitMedium : undefined;
            resourceInputs["fastReroutePerPrefixPriorityLimitCritical"] = state ? state.fastReroutePerPrefixPriorityLimitCritical : undefined;
            resourceInputs["fastReroutePerPrefixPriorityLimitHigh"] = state ? state.fastReroutePerPrefixPriorityLimitHigh : undefined;
            resourceInputs["fastReroutePerPrefixPriorityLimitMedium"] = state ? state.fastReroutePerPrefixPriorityLimitMedium : undefined;
            resourceInputs["maximumRedistributedPrefixes"] = state ? state.maximumRedistributedPrefixes : undefined;
            resourceInputs["maximumRedistributedPrefixesLevels"] = state ? state.maximumRedistributedPrefixesLevels : undefined;
            resourceInputs["metricStyleLevels"] = state ? state.metricStyleLevels : undefined;
            resourceInputs["metricStyleNarrow"] = state ? state.metricStyleNarrow : undefined;
            resourceInputs["metricStyleTransition"] = state ? state.metricStyleTransition : undefined;
            resourceInputs["metricStyleWide"] = state ? state.metricStyleWide : undefined;
            resourceInputs["microloopAvoidanceProtected"] = state ? state.microloopAvoidanceProtected : undefined;
            resourceInputs["microloopAvoidanceSegmentRouting"] = state ? state.microloopAvoidanceSegmentRouting : undefined;
            resourceInputs["mplsLdpAutoConfig"] = state ? state.mplsLdpAutoConfig : undefined;
            resourceInputs["mplsTrafficEngLevel1"] = state ? state.mplsTrafficEngLevel1 : undefined;
            resourceInputs["mplsTrafficEngLevel12"] = state ? state.mplsTrafficEngLevel12 : undefined;
            resourceInputs["mplsTrafficEngLevel2Only"] = state ? state.mplsTrafficEngLevel2Only : undefined;
            resourceInputs["mplsTrafficEngRouterIdInterface"] = state ? state.mplsTrafficEngRouterIdInterface : undefined;
            resourceInputs["mplsTrafficEngRouterIdIpAddress"] = state ? state.mplsTrafficEngRouterIdIpAddress : undefined;
            resourceInputs["processId"] = state ? state.processId : undefined;
            resourceInputs["redistributeIses"] = state ? state.redistributeIses : undefined;
            resourceInputs["routerIdInterfaceName"] = state ? state.routerIdInterfaceName : undefined;
            resourceInputs["routerIdIpAddress"] = state ? state.routerIdIpAddress : undefined;
            resourceInputs["safName"] = state ? state.safName : undefined;
            resourceInputs["segmentRoutingMplsSrPrefer"] = state ? state.segmentRoutingMplsSrPrefer : undefined;
            resourceInputs["segmentRoutingSrv6Locators"] = state ? state.segmentRoutingSrv6Locators : undefined;
            resourceInputs["spfIntervalInitialWait"] = state ? state.spfIntervalInitialWait : undefined;
            resourceInputs["spfIntervalMaximumWait"] = state ? state.spfIntervalMaximumWait : undefined;
            resourceInputs["spfIntervalSecondaryWait"] = state ? state.spfIntervalSecondaryWait : undefined;
            resourceInputs["spfPrefixPriorities"] = state ? state.spfPrefixPriorities : undefined;
        } else {
            const args = argsOrState as RouterIsisAddressFamilyArgs | undefined;
            if ((!args || args.afName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'afName'");
            }
            if ((!args || args.processId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processId'");
            }
            if ((!args || args.safName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'safName'");
            }
            resourceInputs["advertiseLinkAttributes"] = args ? args.advertiseLinkAttributes : undefined;
            resourceInputs["advertisePassiveOnly"] = args ? args.advertisePassiveOnly : undefined;
            resourceInputs["afName"] = args ? args.afName : undefined;
            resourceInputs["defaultInformationOriginate"] = args ? args.defaultInformationOriginate : undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["fastRerouteDelayInterval"] = args ? args.fastRerouteDelayInterval : undefined;
            resourceInputs["fastReroutePerLinkPriorityLimitCritical"] = args ? args.fastReroutePerLinkPriorityLimitCritical : undefined;
            resourceInputs["fastReroutePerLinkPriorityLimitHigh"] = args ? args.fastReroutePerLinkPriorityLimitHigh : undefined;
            resourceInputs["fastReroutePerLinkPriorityLimitMedium"] = args ? args.fastReroutePerLinkPriorityLimitMedium : undefined;
            resourceInputs["fastReroutePerPrefixPriorityLimitCritical"] = args ? args.fastReroutePerPrefixPriorityLimitCritical : undefined;
            resourceInputs["fastReroutePerPrefixPriorityLimitHigh"] = args ? args.fastReroutePerPrefixPriorityLimitHigh : undefined;
            resourceInputs["fastReroutePerPrefixPriorityLimitMedium"] = args ? args.fastReroutePerPrefixPriorityLimitMedium : undefined;
            resourceInputs["maximumRedistributedPrefixes"] = args ? args.maximumRedistributedPrefixes : undefined;
            resourceInputs["maximumRedistributedPrefixesLevels"] = args ? args.maximumRedistributedPrefixesLevels : undefined;
            resourceInputs["metricStyleLevels"] = args ? args.metricStyleLevels : undefined;
            resourceInputs["metricStyleNarrow"] = args ? args.metricStyleNarrow : undefined;
            resourceInputs["metricStyleTransition"] = args ? args.metricStyleTransition : undefined;
            resourceInputs["metricStyleWide"] = args ? args.metricStyleWide : undefined;
            resourceInputs["microloopAvoidanceProtected"] = args ? args.microloopAvoidanceProtected : undefined;
            resourceInputs["microloopAvoidanceSegmentRouting"] = args ? args.microloopAvoidanceSegmentRouting : undefined;
            resourceInputs["mplsLdpAutoConfig"] = args ? args.mplsLdpAutoConfig : undefined;
            resourceInputs["mplsTrafficEngLevel1"] = args ? args.mplsTrafficEngLevel1 : undefined;
            resourceInputs["mplsTrafficEngLevel12"] = args ? args.mplsTrafficEngLevel12 : undefined;
            resourceInputs["mplsTrafficEngLevel2Only"] = args ? args.mplsTrafficEngLevel2Only : undefined;
            resourceInputs["mplsTrafficEngRouterIdInterface"] = args ? args.mplsTrafficEngRouterIdInterface : undefined;
            resourceInputs["mplsTrafficEngRouterIdIpAddress"] = args ? args.mplsTrafficEngRouterIdIpAddress : undefined;
            resourceInputs["processId"] = args ? args.processId : undefined;
            resourceInputs["redistributeIses"] = args ? args.redistributeIses : undefined;
            resourceInputs["routerIdInterfaceName"] = args ? args.routerIdInterfaceName : undefined;
            resourceInputs["routerIdIpAddress"] = args ? args.routerIdIpAddress : undefined;
            resourceInputs["safName"] = args ? args.safName : undefined;
            resourceInputs["segmentRoutingMplsSrPrefer"] = args ? args.segmentRoutingMplsSrPrefer : undefined;
            resourceInputs["segmentRoutingSrv6Locators"] = args ? args.segmentRoutingSrv6Locators : undefined;
            resourceInputs["spfIntervalInitialWait"] = args ? args.spfIntervalInitialWait : undefined;
            resourceInputs["spfIntervalMaximumWait"] = args ? args.spfIntervalMaximumWait : undefined;
            resourceInputs["spfIntervalSecondaryWait"] = args ? args.spfIntervalSecondaryWait : undefined;
            resourceInputs["spfPrefixPriorities"] = args ? args.spfPrefixPriorities : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterIsisAddressFamily.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterIsisAddressFamily resources.
 */
export interface RouterIsisAddressFamilyState {
    /**
     * Advertise additional link attributes
     */
    advertiseLinkAttributes?: pulumi.Input<boolean>;
    /**
     * Advertise prefixes of passive interfaces only
     */
    advertisePassiveOnly?: pulumi.Input<boolean>;
    /**
     * Address family name - Choices: `ipv4`, `ipv6`
     */
    afName?: pulumi.Input<string>;
    /**
     * Distribute a default route
     */
    defaultInformationOriginate?: pulumi.Input<boolean>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Delay before running FRR computation - Range: `100`-`60000`
     */
    fastRerouteDelayInterval?: pulumi.Input<number>;
    /**
     * Compute for critical priority prefixes only
     */
    fastReroutePerLinkPriorityLimitCritical?: pulumi.Input<boolean>;
    /**
     * Compute for critical & high priority prefixes
     */
    fastReroutePerLinkPriorityLimitHigh?: pulumi.Input<boolean>;
    /**
     * Compute for critical, high & medium priority prefixes
     */
    fastReroutePerLinkPriorityLimitMedium?: pulumi.Input<boolean>;
    /**
     * Compute for critical priority prefixes only
     */
    fastReroutePerPrefixPriorityLimitCritical?: pulumi.Input<boolean>;
    /**
     * Compute for critical & high priority prefixes
     */
    fastReroutePerPrefixPriorityLimitHigh?: pulumi.Input<boolean>;
    /**
     * Compute for critical, high & medium priority prefixes
     */
    fastReroutePerPrefixPriorityLimitMedium?: pulumi.Input<boolean>;
    /**
     * Maximum number of redistributed prefixes - Range: `1`-`28000`
     */
    maximumRedistributedPrefixes?: pulumi.Input<number>;
    /**
     * Set maximum redistributed prefixes for one level only
     */
    maximumRedistributedPrefixesLevels?: pulumi.Input<pulumi.Input<inputs.RouterIsisAddressFamilyMaximumRedistributedPrefixesLevel>[]>;
    /**
     * Set metric-style for one level only
     */
    metricStyleLevels?: pulumi.Input<pulumi.Input<inputs.RouterIsisAddressFamilyMetricStyleLevel>[]>;
    /**
     * Use old style of TLVs with narrow metric
     */
    metricStyleNarrow?: pulumi.Input<boolean>;
    /**
     * Send and accept both styles of TLVs during transition
     */
    metricStyleTransition?: pulumi.Input<boolean>;
    /**
     * Use new style of TLVs to carry wider metric
     */
    metricStyleWide?: pulumi.Input<boolean>;
    /**
     * Enable microloop avoidance for only protected prefixes
     */
    microloopAvoidanceProtected?: pulumi.Input<boolean>;
    /**
     * Enable segment routing microloop avoidance
     */
    microloopAvoidanceSegmentRouting?: pulumi.Input<boolean>;
    /**
     * Enable LDP IGP interface auto-configuration
     */
    mplsLdpAutoConfig?: pulumi.Input<boolean>;
    /**
     * Enable mpls traffic-eng at level 1
     */
    mplsTrafficEngLevel1?: pulumi.Input<boolean>;
    /**
     * Enable mpls traffic-eng at both level 1 and 2
     */
    mplsTrafficEngLevel12?: pulumi.Input<boolean>;
    /**
     * Enable mpls traffic-eng at level 2
     */
    mplsTrafficEngLevel2Only?: pulumi.Input<boolean>;
    mplsTrafficEngRouterIdInterface?: pulumi.Input<string>;
    /**
     * configure this node
     */
    mplsTrafficEngRouterIdIpAddress?: pulumi.Input<string>;
    /**
     * Process ID
     */
    processId?: pulumi.Input<string>;
    /**
     * IS-IS
     */
    redistributeIses?: pulumi.Input<pulumi.Input<inputs.RouterIsisAddressFamilyRedistributeIse>[]>;
    /**
     * Router ID Interface
     */
    routerIdInterfaceName?: pulumi.Input<string>;
    /**
     * Router ID address
     */
    routerIdIpAddress?: pulumi.Input<string>;
    /**
     * Sub address family name - Choices: `multicast`, `unicast`
     */
    safName?: pulumi.Input<string>;
    /**
     * Prefer segment routing labels over LDP labels
     */
    segmentRoutingMplsSrPrefer?: pulumi.Input<boolean>;
    /**
     * Enter SRv6 Locator submode
     */
    segmentRoutingSrv6Locators?: pulumi.Input<pulumi.Input<inputs.RouterIsisAddressFamilySegmentRoutingSrv6Locator>[]>;
    /**
     * Initial delay before running a route calculation - Range: `0`-`120000`
     */
    spfIntervalInitialWait?: pulumi.Input<number>;
    /**
     * Maximum delay before running a route calculation - Range: `0`-`120000`
     */
    spfIntervalMaximumWait?: pulumi.Input<number>;
    /**
     * Secondary delay before running a route calculation - Range: `0`-`120000`
     */
    spfIntervalSecondaryWait?: pulumi.Input<number>;
    /**
     * Configure a prefix priority list
     */
    spfPrefixPriorities?: pulumi.Input<pulumi.Input<inputs.RouterIsisAddressFamilySpfPrefixPriority>[]>;
}

/**
 * The set of arguments for constructing a RouterIsisAddressFamily resource.
 */
export interface RouterIsisAddressFamilyArgs {
    /**
     * Advertise additional link attributes
     */
    advertiseLinkAttributes?: pulumi.Input<boolean>;
    /**
     * Advertise prefixes of passive interfaces only
     */
    advertisePassiveOnly?: pulumi.Input<boolean>;
    /**
     * Address family name - Choices: `ipv4`, `ipv6`
     */
    afName: pulumi.Input<string>;
    /**
     * Distribute a default route
     */
    defaultInformationOriginate?: pulumi.Input<boolean>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Delay before running FRR computation - Range: `100`-`60000`
     */
    fastRerouteDelayInterval?: pulumi.Input<number>;
    /**
     * Compute for critical priority prefixes only
     */
    fastReroutePerLinkPriorityLimitCritical?: pulumi.Input<boolean>;
    /**
     * Compute for critical & high priority prefixes
     */
    fastReroutePerLinkPriorityLimitHigh?: pulumi.Input<boolean>;
    /**
     * Compute for critical, high & medium priority prefixes
     */
    fastReroutePerLinkPriorityLimitMedium?: pulumi.Input<boolean>;
    /**
     * Compute for critical priority prefixes only
     */
    fastReroutePerPrefixPriorityLimitCritical?: pulumi.Input<boolean>;
    /**
     * Compute for critical & high priority prefixes
     */
    fastReroutePerPrefixPriorityLimitHigh?: pulumi.Input<boolean>;
    /**
     * Compute for critical, high & medium priority prefixes
     */
    fastReroutePerPrefixPriorityLimitMedium?: pulumi.Input<boolean>;
    /**
     * Maximum number of redistributed prefixes - Range: `1`-`28000`
     */
    maximumRedistributedPrefixes?: pulumi.Input<number>;
    /**
     * Set maximum redistributed prefixes for one level only
     */
    maximumRedistributedPrefixesLevels?: pulumi.Input<pulumi.Input<inputs.RouterIsisAddressFamilyMaximumRedistributedPrefixesLevel>[]>;
    /**
     * Set metric-style for one level only
     */
    metricStyleLevels?: pulumi.Input<pulumi.Input<inputs.RouterIsisAddressFamilyMetricStyleLevel>[]>;
    /**
     * Use old style of TLVs with narrow metric
     */
    metricStyleNarrow?: pulumi.Input<boolean>;
    /**
     * Send and accept both styles of TLVs during transition
     */
    metricStyleTransition?: pulumi.Input<boolean>;
    /**
     * Use new style of TLVs to carry wider metric
     */
    metricStyleWide?: pulumi.Input<boolean>;
    /**
     * Enable microloop avoidance for only protected prefixes
     */
    microloopAvoidanceProtected?: pulumi.Input<boolean>;
    /**
     * Enable segment routing microloop avoidance
     */
    microloopAvoidanceSegmentRouting?: pulumi.Input<boolean>;
    /**
     * Enable LDP IGP interface auto-configuration
     */
    mplsLdpAutoConfig?: pulumi.Input<boolean>;
    /**
     * Enable mpls traffic-eng at level 1
     */
    mplsTrafficEngLevel1?: pulumi.Input<boolean>;
    /**
     * Enable mpls traffic-eng at both level 1 and 2
     */
    mplsTrafficEngLevel12?: pulumi.Input<boolean>;
    /**
     * Enable mpls traffic-eng at level 2
     */
    mplsTrafficEngLevel2Only?: pulumi.Input<boolean>;
    mplsTrafficEngRouterIdInterface?: pulumi.Input<string>;
    /**
     * configure this node
     */
    mplsTrafficEngRouterIdIpAddress?: pulumi.Input<string>;
    /**
     * Process ID
     */
    processId: pulumi.Input<string>;
    /**
     * IS-IS
     */
    redistributeIses?: pulumi.Input<pulumi.Input<inputs.RouterIsisAddressFamilyRedistributeIse>[]>;
    /**
     * Router ID Interface
     */
    routerIdInterfaceName?: pulumi.Input<string>;
    /**
     * Router ID address
     */
    routerIdIpAddress?: pulumi.Input<string>;
    /**
     * Sub address family name - Choices: `multicast`, `unicast`
     */
    safName: pulumi.Input<string>;
    /**
     * Prefer segment routing labels over LDP labels
     */
    segmentRoutingMplsSrPrefer?: pulumi.Input<boolean>;
    /**
     * Enter SRv6 Locator submode
     */
    segmentRoutingSrv6Locators?: pulumi.Input<pulumi.Input<inputs.RouterIsisAddressFamilySegmentRoutingSrv6Locator>[]>;
    /**
     * Initial delay before running a route calculation - Range: `0`-`120000`
     */
    spfIntervalInitialWait?: pulumi.Input<number>;
    /**
     * Maximum delay before running a route calculation - Range: `0`-`120000`
     */
    spfIntervalMaximumWait?: pulumi.Input<number>;
    /**
     * Secondary delay before running a route calculation - Range: `0`-`120000`
     */
    spfIntervalSecondaryWait?: pulumi.Input<number>;
    /**
     * Configure a prefix priority list
     */
    spfPrefixPriorities?: pulumi.Input<pulumi.Input<inputs.RouterIsisAddressFamilySpfPrefixPriority>[]>;
}
