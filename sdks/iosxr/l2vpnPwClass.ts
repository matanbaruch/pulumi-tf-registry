// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class L2vpnPwClass extends pulumi.CustomResource {
    /**
     * Get an existing L2vpnPwClass resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: L2vpnPwClassState, opts?: pulumi.CustomResourceOptions): L2vpnPwClass {
        return new L2vpnPwClass(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxr:index/l2vpnPwClass:L2vpnPwClass';

    /**
     * Returns true if the given object is an instance of L2vpnPwClass.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is L2vpnPwClass {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === L2vpnPwClass.__pulumiType;
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Set pseudowire encapsulation to MPLS
     */
    public readonly encapsulationMpls!: pulumi.Output<boolean | undefined>;
    /**
     * Insert/Discard Flow label on transmit/recceive
     */
    public readonly encapsulationMplsLoadBalancingFlowLabelBoth!: pulumi.Output<boolean | undefined>;
    /**
     * Set Flow label parameters statically
     */
    public readonly encapsulationMplsLoadBalancingFlowLabelBothStatic!: pulumi.Output<boolean | undefined>;
    /**
     * Legacy code value
     */
    public readonly encapsulationMplsLoadBalancingFlowLabelCodeOne7!: pulumi.Output<boolean | undefined>;
    /**
     * Disables sending code 17 TLV
     */
    public readonly encapsulationMplsLoadBalancingFlowLabelCodeOne7Disable!: pulumi.Output<boolean | undefined>;
    /**
     * Discard Flow label on receive
     */
    public readonly encapsulationMplsLoadBalancingFlowLabelReceive!: pulumi.Output<boolean | undefined>;
    /**
     * Set Flow label parameters statically
     */
    public readonly encapsulationMplsLoadBalancingFlowLabelReceiveStatic!: pulumi.Output<boolean | undefined>;
    /**
     * Insert Flow label on transmit
     */
    public readonly encapsulationMplsLoadBalancingFlowLabelTransmit!: pulumi.Output<boolean | undefined>;
    /**
     * Set Flow label parameters statically
     */
    public readonly encapsulationMplsLoadBalancingFlowLabelTransmitStatic!: pulumi.Output<boolean | undefined>;
    /**
     * Enable PW VC label based load balancing
     */
    public readonly encapsulationMplsLoadBalancingPwLabel!: pulumi.Output<boolean | undefined>;
    /**
     * Ethernet port mode
     */
    public readonly encapsulationMplsTransportModeEthernet!: pulumi.Output<boolean | undefined>;
    /**
     * passthrough incoming tags
     */
    public readonly encapsulationMplsTransportModePassthrough!: pulumi.Output<boolean | undefined>;
    /**
     * Vlan tagged mode
     */
    public readonly encapsulationMplsTransportModeVlan!: pulumi.Output<boolean | undefined>;
    /**
     * Pseudowire class template
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a L2vpnPwClass resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: L2vpnPwClassArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: L2vpnPwClassArgs | L2vpnPwClassState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as L2vpnPwClassState | undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["encapsulationMpls"] = state ? state.encapsulationMpls : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelBoth"] = state ? state.encapsulationMplsLoadBalancingFlowLabelBoth : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelBothStatic"] = state ? state.encapsulationMplsLoadBalancingFlowLabelBothStatic : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelCodeOne7"] = state ? state.encapsulationMplsLoadBalancingFlowLabelCodeOne7 : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelCodeOne7Disable"] = state ? state.encapsulationMplsLoadBalancingFlowLabelCodeOne7Disable : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelReceive"] = state ? state.encapsulationMplsLoadBalancingFlowLabelReceive : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelReceiveStatic"] = state ? state.encapsulationMplsLoadBalancingFlowLabelReceiveStatic : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelTransmit"] = state ? state.encapsulationMplsLoadBalancingFlowLabelTransmit : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelTransmitStatic"] = state ? state.encapsulationMplsLoadBalancingFlowLabelTransmitStatic : undefined;
            resourceInputs["encapsulationMplsLoadBalancingPwLabel"] = state ? state.encapsulationMplsLoadBalancingPwLabel : undefined;
            resourceInputs["encapsulationMplsTransportModeEthernet"] = state ? state.encapsulationMplsTransportModeEthernet : undefined;
            resourceInputs["encapsulationMplsTransportModePassthrough"] = state ? state.encapsulationMplsTransportModePassthrough : undefined;
            resourceInputs["encapsulationMplsTransportModeVlan"] = state ? state.encapsulationMplsTransportModeVlan : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as L2vpnPwClassArgs | undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["encapsulationMpls"] = args ? args.encapsulationMpls : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelBoth"] = args ? args.encapsulationMplsLoadBalancingFlowLabelBoth : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelBothStatic"] = args ? args.encapsulationMplsLoadBalancingFlowLabelBothStatic : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelCodeOne7"] = args ? args.encapsulationMplsLoadBalancingFlowLabelCodeOne7 : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelCodeOne7Disable"] = args ? args.encapsulationMplsLoadBalancingFlowLabelCodeOne7Disable : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelReceive"] = args ? args.encapsulationMplsLoadBalancingFlowLabelReceive : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelReceiveStatic"] = args ? args.encapsulationMplsLoadBalancingFlowLabelReceiveStatic : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelTransmit"] = args ? args.encapsulationMplsLoadBalancingFlowLabelTransmit : undefined;
            resourceInputs["encapsulationMplsLoadBalancingFlowLabelTransmitStatic"] = args ? args.encapsulationMplsLoadBalancingFlowLabelTransmitStatic : undefined;
            resourceInputs["encapsulationMplsLoadBalancingPwLabel"] = args ? args.encapsulationMplsLoadBalancingPwLabel : undefined;
            resourceInputs["encapsulationMplsTransportModeEthernet"] = args ? args.encapsulationMplsTransportModeEthernet : undefined;
            resourceInputs["encapsulationMplsTransportModePassthrough"] = args ? args.encapsulationMplsTransportModePassthrough : undefined;
            resourceInputs["encapsulationMplsTransportModeVlan"] = args ? args.encapsulationMplsTransportModeVlan : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(L2vpnPwClass.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering L2vpnPwClass resources.
 */
export interface L2vpnPwClassState {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Set pseudowire encapsulation to MPLS
     */
    encapsulationMpls?: pulumi.Input<boolean>;
    /**
     * Insert/Discard Flow label on transmit/recceive
     */
    encapsulationMplsLoadBalancingFlowLabelBoth?: pulumi.Input<boolean>;
    /**
     * Set Flow label parameters statically
     */
    encapsulationMplsLoadBalancingFlowLabelBothStatic?: pulumi.Input<boolean>;
    /**
     * Legacy code value
     */
    encapsulationMplsLoadBalancingFlowLabelCodeOne7?: pulumi.Input<boolean>;
    /**
     * Disables sending code 17 TLV
     */
    encapsulationMplsLoadBalancingFlowLabelCodeOne7Disable?: pulumi.Input<boolean>;
    /**
     * Discard Flow label on receive
     */
    encapsulationMplsLoadBalancingFlowLabelReceive?: pulumi.Input<boolean>;
    /**
     * Set Flow label parameters statically
     */
    encapsulationMplsLoadBalancingFlowLabelReceiveStatic?: pulumi.Input<boolean>;
    /**
     * Insert Flow label on transmit
     */
    encapsulationMplsLoadBalancingFlowLabelTransmit?: pulumi.Input<boolean>;
    /**
     * Set Flow label parameters statically
     */
    encapsulationMplsLoadBalancingFlowLabelTransmitStatic?: pulumi.Input<boolean>;
    /**
     * Enable PW VC label based load balancing
     */
    encapsulationMplsLoadBalancingPwLabel?: pulumi.Input<boolean>;
    /**
     * Ethernet port mode
     */
    encapsulationMplsTransportModeEthernet?: pulumi.Input<boolean>;
    /**
     * passthrough incoming tags
     */
    encapsulationMplsTransportModePassthrough?: pulumi.Input<boolean>;
    /**
     * Vlan tagged mode
     */
    encapsulationMplsTransportModeVlan?: pulumi.Input<boolean>;
    /**
     * Pseudowire class template
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a L2vpnPwClass resource.
 */
export interface L2vpnPwClassArgs {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Set pseudowire encapsulation to MPLS
     */
    encapsulationMpls?: pulumi.Input<boolean>;
    /**
     * Insert/Discard Flow label on transmit/recceive
     */
    encapsulationMplsLoadBalancingFlowLabelBoth?: pulumi.Input<boolean>;
    /**
     * Set Flow label parameters statically
     */
    encapsulationMplsLoadBalancingFlowLabelBothStatic?: pulumi.Input<boolean>;
    /**
     * Legacy code value
     */
    encapsulationMplsLoadBalancingFlowLabelCodeOne7?: pulumi.Input<boolean>;
    /**
     * Disables sending code 17 TLV
     */
    encapsulationMplsLoadBalancingFlowLabelCodeOne7Disable?: pulumi.Input<boolean>;
    /**
     * Discard Flow label on receive
     */
    encapsulationMplsLoadBalancingFlowLabelReceive?: pulumi.Input<boolean>;
    /**
     * Set Flow label parameters statically
     */
    encapsulationMplsLoadBalancingFlowLabelReceiveStatic?: pulumi.Input<boolean>;
    /**
     * Insert Flow label on transmit
     */
    encapsulationMplsLoadBalancingFlowLabelTransmit?: pulumi.Input<boolean>;
    /**
     * Set Flow label parameters statically
     */
    encapsulationMplsLoadBalancingFlowLabelTransmitStatic?: pulumi.Input<boolean>;
    /**
     * Enable PW VC label based load balancing
     */
    encapsulationMplsLoadBalancingPwLabel?: pulumi.Input<boolean>;
    /**
     * Ethernet port mode
     */
    encapsulationMplsTransportModeEthernet?: pulumi.Input<boolean>;
    /**
     * passthrough incoming tags
     */
    encapsulationMplsTransportModePassthrough?: pulumi.Input<boolean>;
    /**
     * Vlan tagged mode
     */
    encapsulationMplsTransportModeVlan?: pulumi.Input<boolean>;
    /**
     * Pseudowire class template
     */
    name?: pulumi.Input<string>;
}
