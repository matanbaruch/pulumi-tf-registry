// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FlowMonitorMap extends pulumi.CustomResource {
    /**
     * Get an existing FlowMonitorMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowMonitorMapState, opts?: pulumi.CustomResourceOptions): FlowMonitorMap {
        return new FlowMonitorMap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxr:index/flowMonitorMap:FlowMonitorMap';

    /**
     * Returns true if the given object is an instance of FlowMonitorMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowMonitorMap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowMonitorMap.__pulumiType;
    }

    /**
     * Specify the number of entries in the flow cache - Range: `4096`-`1000000`
     */
    public readonly cacheEntries!: pulumi.Output<number | undefined>;
    /**
     * Immediate removal of entries from flow cache
     */
    public readonly cacheImmediate!: pulumi.Output<boolean | undefined>;
    /**
     * Disable removal of entries from flow cache
     */
    public readonly cachePermanent!: pulumi.Output<boolean | undefined>;
    /**
     * Specify the active flow timeout - Range: `1`-`604800`
     */
    public readonly cacheTimeoutActive!: pulumi.Output<number | undefined>;
    /**
     * Specify the inactive flow timeout - Range: `0`-`604800`
     */
    public readonly cacheTimeoutInactive!: pulumi.Output<number | undefined>;
    /**
     * Maximum number of entries to age each second - Range: `1`-`1000000`
     */
    public readonly cacheTimeoutRateLimit!: pulumi.Output<number | undefined>;
    /**
     * Specify the update timeout - Range: `1`-`604800`
     */
    public readonly cacheTimeoutUpdate!: pulumi.Output<number | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Specify flow exporter map name
     */
    public readonly exporters!: pulumi.Output<outputs.FlowMonitorMapExporter[] | undefined>;
    /**
     * Specify the inactive timeout - Range: `50`-`1800`
     */
    public readonly hwCacheTimeoutInactive!: pulumi.Output<number | undefined>;
    /**
     * Monitor map name - maximum 32 characters
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * export bgp attributes AS_PATH and STD_COMMUNITY
     */
    public readonly optionBgpattr!: pulumi.Output<boolean | undefined>;
    /**
     * Enable filtering of records
     */
    public readonly optionFiltered!: pulumi.Output<boolean | undefined>;
    /**
     * export output physical interfaces of bundle interface
     */
    public readonly optionOutbundlemember!: pulumi.Output<boolean | undefined>;
    /**
     * export output interfaces as physical interfaces
     */
    public readonly optionOutphysint!: pulumi.Output<boolean | undefined>;
    /**
     * Layer2 traffic based flow
     */
    public readonly recordDatalinkRecord!: pulumi.Output<boolean | undefined>;
    /**
     * Default MDI record format
     */
    public readonly recordDefaultMdi!: pulumi.Output<boolean | undefined>;
    /**
     * Default RTP record format
     */
    public readonly recordDefaultRtp!: pulumi.Output<boolean | undefined>;
    /**
     * IPv4 raw record format
     */
    public readonly recordIpv4!: pulumi.Output<boolean | undefined>;
    /**
     * Autonomous System based aggregation
     */
    public readonly recordIpv4As!: pulumi.Output<boolean | undefined>;
    /**
     * AS-TOS based aggregation
     */
    public readonly recordIpv4AsTos!: pulumi.Output<boolean | undefined>;
    /**
     * BGP, nexthop and tos based aggregation
     */
    public readonly recordIpv4BgpNexthopTos!: pulumi.Output<boolean | undefined>;
    /**
     * IPv4 Destination Based NetFlow Accounting
     */
    public readonly recordIpv4Destination!: pulumi.Output<boolean | undefined>;
    /**
     * Destination prefix based aggregation
     */
    public readonly recordIpv4DestinationPrefix!: pulumi.Output<boolean | undefined>;
    /**
     * Destination, prefix and tos based aggregation
     */
    public readonly recordIpv4DestinationPrefixTos!: pulumi.Output<boolean | undefined>;
    /**
     * IPv4 Destination Based NetFlow Accounting TOS
     */
    public readonly recordIpv4DestinationTos!: pulumi.Output<boolean | undefined>;
    /**
     * IPV4 gtp record format
     */
    public readonly recordIpv4Gtp!: pulumi.Output<boolean | undefined>;
    /**
     * Record peer AS
     */
    public readonly recordIpv4PeerAs!: pulumi.Output<boolean | undefined>;
    /**
     * Prefix based agregation
     */
    public readonly recordIpv4Prefix!: pulumi.Output<boolean | undefined>;
    /**
     * Prefix port based aggregation
     */
    public readonly recordIpv4PrefixPort!: pulumi.Output<boolean | undefined>;
    /**
     * Prefix TOS based aggregation
     */
    public readonly recordIpv4PrefixTos!: pulumi.Output<boolean | undefined>;
    /**
     * Protocol-Port based aggregation
     */
    public readonly recordIpv4ProtocolPort!: pulumi.Output<boolean | undefined>;
    /**
     * Protocol, port and tos based aggregation
     */
    public readonly recordIpv4ProtocolPortTos!: pulumi.Output<boolean | undefined>;
    /**
     * source prefix based aggregation
     */
    public readonly recordIpv4SourcePrefix!: pulumi.Output<boolean | undefined>;
    /**
     * Source, Prefix and TOS based aggregation
     */
    public readonly recordIpv4SourcePrefixTos!: pulumi.Output<boolean | undefined>;
    /**
     * IPv6 raw record format
     */
    public readonly recordIpv6!: pulumi.Output<boolean | undefined>;
    /**
     * IPv6 Destination Based NetFlow Accounting
     */
    public readonly recordIpv6Destination!: pulumi.Output<boolean | undefined>;
    /**
     * IPV6 gtp record format
     */
    public readonly recordIpv6Gtp!: pulumi.Output<boolean | undefined>;
    /**
     * Record peer AS
     */
    public readonly recordIpv6PeerAs!: pulumi.Output<boolean | undefined>;
    /**
     * map-t translation based Netflow
     */
    public readonly recordMapT!: pulumi.Output<boolean | undefined>;
    /**
     * MPLS record format
     */
    public readonly recordMpls!: pulumi.Output<boolean | undefined>;
    /**
     * MPLS with IPv4 fields format
     */
    public readonly recordMplsIpv4Fields!: pulumi.Output<boolean | undefined>;
    /**
     * MPLS with IPv4 and IPv6 fields format
     */
    public readonly recordMplsIpv4Ipv6Fields!: pulumi.Output<boolean | undefined>;
    /**
     * MPLS with IPv6 fields format
     */
    public readonly recordMplsIpv6Fields!: pulumi.Output<boolean | undefined>;
    /**
     * Labels to be used for Hashing - Range: `1`-`6`
     */
    public readonly recordMplsLabels!: pulumi.Output<number | undefined>;
    /**
     * sFlow based flow
     */
    public readonly recordSflow!: pulumi.Output<boolean | undefined>;
    /**
     * submode to configure sFlow related options
     */
    public readonly sflowOptions!: pulumi.Output<boolean | undefined>;
    /**
     * Enable extended-gateway flow data type
     */
    public readonly sflowOptionsExtendedGateway!: pulumi.Output<boolean | undefined>;
    /**
     * Enable extended-ipv4-tunnel-egress flow data type
     */
    public readonly sflowOptionsExtendedIpv4TunnelEgress!: pulumi.Output<boolean | undefined>;
    /**
     * Enable extended-ipv6-tunnel-egress flow data type
     */
    public readonly sflowOptionsExtendedIpv6TunnelEgress!: pulumi.Output<boolean | undefined>;
    /**
     * Enable extended-router flow data type
     */
    public readonly sflowOptionsExtendedRouter!: pulumi.Output<boolean | undefined>;
    /**
     * Enable if-counters counter sampling rate - Range: `5`-`1800`
     */
    public readonly sflowOptionsIfCountersPollingInterval!: pulumi.Output<number | undefined>;
    /**
     * Specify ifindex related options - Choices: `physical`
     */
    public readonly sflowOptionsInputIfindex!: pulumi.Output<string | undefined>;
    /**
     * Specify ifindex related options - Choices: `physical`
     */
    public readonly sflowOptionsOutputIfindex!: pulumi.Output<string | undefined>;
    /**
     * Specify maximum sample-header size to be exported - Range: `128`-`200`
     */
    public readonly sflowOptionsSampleHeaderSize!: pulumi.Output<number | undefined>;

    /**
     * Create a FlowMonitorMap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FlowMonitorMapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowMonitorMapArgs | FlowMonitorMapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowMonitorMapState | undefined;
            resourceInputs["cacheEntries"] = state ? state.cacheEntries : undefined;
            resourceInputs["cacheImmediate"] = state ? state.cacheImmediate : undefined;
            resourceInputs["cachePermanent"] = state ? state.cachePermanent : undefined;
            resourceInputs["cacheTimeoutActive"] = state ? state.cacheTimeoutActive : undefined;
            resourceInputs["cacheTimeoutInactive"] = state ? state.cacheTimeoutInactive : undefined;
            resourceInputs["cacheTimeoutRateLimit"] = state ? state.cacheTimeoutRateLimit : undefined;
            resourceInputs["cacheTimeoutUpdate"] = state ? state.cacheTimeoutUpdate : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["exporters"] = state ? state.exporters : undefined;
            resourceInputs["hwCacheTimeoutInactive"] = state ? state.hwCacheTimeoutInactive : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["optionBgpattr"] = state ? state.optionBgpattr : undefined;
            resourceInputs["optionFiltered"] = state ? state.optionFiltered : undefined;
            resourceInputs["optionOutbundlemember"] = state ? state.optionOutbundlemember : undefined;
            resourceInputs["optionOutphysint"] = state ? state.optionOutphysint : undefined;
            resourceInputs["recordDatalinkRecord"] = state ? state.recordDatalinkRecord : undefined;
            resourceInputs["recordDefaultMdi"] = state ? state.recordDefaultMdi : undefined;
            resourceInputs["recordDefaultRtp"] = state ? state.recordDefaultRtp : undefined;
            resourceInputs["recordIpv4"] = state ? state.recordIpv4 : undefined;
            resourceInputs["recordIpv4As"] = state ? state.recordIpv4As : undefined;
            resourceInputs["recordIpv4AsTos"] = state ? state.recordIpv4AsTos : undefined;
            resourceInputs["recordIpv4BgpNexthopTos"] = state ? state.recordIpv4BgpNexthopTos : undefined;
            resourceInputs["recordIpv4Destination"] = state ? state.recordIpv4Destination : undefined;
            resourceInputs["recordIpv4DestinationPrefix"] = state ? state.recordIpv4DestinationPrefix : undefined;
            resourceInputs["recordIpv4DestinationPrefixTos"] = state ? state.recordIpv4DestinationPrefixTos : undefined;
            resourceInputs["recordIpv4DestinationTos"] = state ? state.recordIpv4DestinationTos : undefined;
            resourceInputs["recordIpv4Gtp"] = state ? state.recordIpv4Gtp : undefined;
            resourceInputs["recordIpv4PeerAs"] = state ? state.recordIpv4PeerAs : undefined;
            resourceInputs["recordIpv4Prefix"] = state ? state.recordIpv4Prefix : undefined;
            resourceInputs["recordIpv4PrefixPort"] = state ? state.recordIpv4PrefixPort : undefined;
            resourceInputs["recordIpv4PrefixTos"] = state ? state.recordIpv4PrefixTos : undefined;
            resourceInputs["recordIpv4ProtocolPort"] = state ? state.recordIpv4ProtocolPort : undefined;
            resourceInputs["recordIpv4ProtocolPortTos"] = state ? state.recordIpv4ProtocolPortTos : undefined;
            resourceInputs["recordIpv4SourcePrefix"] = state ? state.recordIpv4SourcePrefix : undefined;
            resourceInputs["recordIpv4SourcePrefixTos"] = state ? state.recordIpv4SourcePrefixTos : undefined;
            resourceInputs["recordIpv6"] = state ? state.recordIpv6 : undefined;
            resourceInputs["recordIpv6Destination"] = state ? state.recordIpv6Destination : undefined;
            resourceInputs["recordIpv6Gtp"] = state ? state.recordIpv6Gtp : undefined;
            resourceInputs["recordIpv6PeerAs"] = state ? state.recordIpv6PeerAs : undefined;
            resourceInputs["recordMapT"] = state ? state.recordMapT : undefined;
            resourceInputs["recordMpls"] = state ? state.recordMpls : undefined;
            resourceInputs["recordMplsIpv4Fields"] = state ? state.recordMplsIpv4Fields : undefined;
            resourceInputs["recordMplsIpv4Ipv6Fields"] = state ? state.recordMplsIpv4Ipv6Fields : undefined;
            resourceInputs["recordMplsIpv6Fields"] = state ? state.recordMplsIpv6Fields : undefined;
            resourceInputs["recordMplsLabels"] = state ? state.recordMplsLabels : undefined;
            resourceInputs["recordSflow"] = state ? state.recordSflow : undefined;
            resourceInputs["sflowOptions"] = state ? state.sflowOptions : undefined;
            resourceInputs["sflowOptionsExtendedGateway"] = state ? state.sflowOptionsExtendedGateway : undefined;
            resourceInputs["sflowOptionsExtendedIpv4TunnelEgress"] = state ? state.sflowOptionsExtendedIpv4TunnelEgress : undefined;
            resourceInputs["sflowOptionsExtendedIpv6TunnelEgress"] = state ? state.sflowOptionsExtendedIpv6TunnelEgress : undefined;
            resourceInputs["sflowOptionsExtendedRouter"] = state ? state.sflowOptionsExtendedRouter : undefined;
            resourceInputs["sflowOptionsIfCountersPollingInterval"] = state ? state.sflowOptionsIfCountersPollingInterval : undefined;
            resourceInputs["sflowOptionsInputIfindex"] = state ? state.sflowOptionsInputIfindex : undefined;
            resourceInputs["sflowOptionsOutputIfindex"] = state ? state.sflowOptionsOutputIfindex : undefined;
            resourceInputs["sflowOptionsSampleHeaderSize"] = state ? state.sflowOptionsSampleHeaderSize : undefined;
        } else {
            const args = argsOrState as FlowMonitorMapArgs | undefined;
            resourceInputs["cacheEntries"] = args ? args.cacheEntries : undefined;
            resourceInputs["cacheImmediate"] = args ? args.cacheImmediate : undefined;
            resourceInputs["cachePermanent"] = args ? args.cachePermanent : undefined;
            resourceInputs["cacheTimeoutActive"] = args ? args.cacheTimeoutActive : undefined;
            resourceInputs["cacheTimeoutInactive"] = args ? args.cacheTimeoutInactive : undefined;
            resourceInputs["cacheTimeoutRateLimit"] = args ? args.cacheTimeoutRateLimit : undefined;
            resourceInputs["cacheTimeoutUpdate"] = args ? args.cacheTimeoutUpdate : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["exporters"] = args ? args.exporters : undefined;
            resourceInputs["hwCacheTimeoutInactive"] = args ? args.hwCacheTimeoutInactive : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["optionBgpattr"] = args ? args.optionBgpattr : undefined;
            resourceInputs["optionFiltered"] = args ? args.optionFiltered : undefined;
            resourceInputs["optionOutbundlemember"] = args ? args.optionOutbundlemember : undefined;
            resourceInputs["optionOutphysint"] = args ? args.optionOutphysint : undefined;
            resourceInputs["recordDatalinkRecord"] = args ? args.recordDatalinkRecord : undefined;
            resourceInputs["recordDefaultMdi"] = args ? args.recordDefaultMdi : undefined;
            resourceInputs["recordDefaultRtp"] = args ? args.recordDefaultRtp : undefined;
            resourceInputs["recordIpv4"] = args ? args.recordIpv4 : undefined;
            resourceInputs["recordIpv4As"] = args ? args.recordIpv4As : undefined;
            resourceInputs["recordIpv4AsTos"] = args ? args.recordIpv4AsTos : undefined;
            resourceInputs["recordIpv4BgpNexthopTos"] = args ? args.recordIpv4BgpNexthopTos : undefined;
            resourceInputs["recordIpv4Destination"] = args ? args.recordIpv4Destination : undefined;
            resourceInputs["recordIpv4DestinationPrefix"] = args ? args.recordIpv4DestinationPrefix : undefined;
            resourceInputs["recordIpv4DestinationPrefixTos"] = args ? args.recordIpv4DestinationPrefixTos : undefined;
            resourceInputs["recordIpv4DestinationTos"] = args ? args.recordIpv4DestinationTos : undefined;
            resourceInputs["recordIpv4Gtp"] = args ? args.recordIpv4Gtp : undefined;
            resourceInputs["recordIpv4PeerAs"] = args ? args.recordIpv4PeerAs : undefined;
            resourceInputs["recordIpv4Prefix"] = args ? args.recordIpv4Prefix : undefined;
            resourceInputs["recordIpv4PrefixPort"] = args ? args.recordIpv4PrefixPort : undefined;
            resourceInputs["recordIpv4PrefixTos"] = args ? args.recordIpv4PrefixTos : undefined;
            resourceInputs["recordIpv4ProtocolPort"] = args ? args.recordIpv4ProtocolPort : undefined;
            resourceInputs["recordIpv4ProtocolPortTos"] = args ? args.recordIpv4ProtocolPortTos : undefined;
            resourceInputs["recordIpv4SourcePrefix"] = args ? args.recordIpv4SourcePrefix : undefined;
            resourceInputs["recordIpv4SourcePrefixTos"] = args ? args.recordIpv4SourcePrefixTos : undefined;
            resourceInputs["recordIpv6"] = args ? args.recordIpv6 : undefined;
            resourceInputs["recordIpv6Destination"] = args ? args.recordIpv6Destination : undefined;
            resourceInputs["recordIpv6Gtp"] = args ? args.recordIpv6Gtp : undefined;
            resourceInputs["recordIpv6PeerAs"] = args ? args.recordIpv6PeerAs : undefined;
            resourceInputs["recordMapT"] = args ? args.recordMapT : undefined;
            resourceInputs["recordMpls"] = args ? args.recordMpls : undefined;
            resourceInputs["recordMplsIpv4Fields"] = args ? args.recordMplsIpv4Fields : undefined;
            resourceInputs["recordMplsIpv4Ipv6Fields"] = args ? args.recordMplsIpv4Ipv6Fields : undefined;
            resourceInputs["recordMplsIpv6Fields"] = args ? args.recordMplsIpv6Fields : undefined;
            resourceInputs["recordMplsLabels"] = args ? args.recordMplsLabels : undefined;
            resourceInputs["recordSflow"] = args ? args.recordSflow : undefined;
            resourceInputs["sflowOptions"] = args ? args.sflowOptions : undefined;
            resourceInputs["sflowOptionsExtendedGateway"] = args ? args.sflowOptionsExtendedGateway : undefined;
            resourceInputs["sflowOptionsExtendedIpv4TunnelEgress"] = args ? args.sflowOptionsExtendedIpv4TunnelEgress : undefined;
            resourceInputs["sflowOptionsExtendedIpv6TunnelEgress"] = args ? args.sflowOptionsExtendedIpv6TunnelEgress : undefined;
            resourceInputs["sflowOptionsExtendedRouter"] = args ? args.sflowOptionsExtendedRouter : undefined;
            resourceInputs["sflowOptionsIfCountersPollingInterval"] = args ? args.sflowOptionsIfCountersPollingInterval : undefined;
            resourceInputs["sflowOptionsInputIfindex"] = args ? args.sflowOptionsInputIfindex : undefined;
            resourceInputs["sflowOptionsOutputIfindex"] = args ? args.sflowOptionsOutputIfindex : undefined;
            resourceInputs["sflowOptionsSampleHeaderSize"] = args ? args.sflowOptionsSampleHeaderSize : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlowMonitorMap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FlowMonitorMap resources.
 */
export interface FlowMonitorMapState {
    /**
     * Specify the number of entries in the flow cache - Range: `4096`-`1000000`
     */
    cacheEntries?: pulumi.Input<number>;
    /**
     * Immediate removal of entries from flow cache
     */
    cacheImmediate?: pulumi.Input<boolean>;
    /**
     * Disable removal of entries from flow cache
     */
    cachePermanent?: pulumi.Input<boolean>;
    /**
     * Specify the active flow timeout - Range: `1`-`604800`
     */
    cacheTimeoutActive?: pulumi.Input<number>;
    /**
     * Specify the inactive flow timeout - Range: `0`-`604800`
     */
    cacheTimeoutInactive?: pulumi.Input<number>;
    /**
     * Maximum number of entries to age each second - Range: `1`-`1000000`
     */
    cacheTimeoutRateLimit?: pulumi.Input<number>;
    /**
     * Specify the update timeout - Range: `1`-`604800`
     */
    cacheTimeoutUpdate?: pulumi.Input<number>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Specify flow exporter map name
     */
    exporters?: pulumi.Input<pulumi.Input<inputs.FlowMonitorMapExporter>[]>;
    /**
     * Specify the inactive timeout - Range: `50`-`1800`
     */
    hwCacheTimeoutInactive?: pulumi.Input<number>;
    /**
     * Monitor map name - maximum 32 characters
     */
    name?: pulumi.Input<string>;
    /**
     * export bgp attributes AS_PATH and STD_COMMUNITY
     */
    optionBgpattr?: pulumi.Input<boolean>;
    /**
     * Enable filtering of records
     */
    optionFiltered?: pulumi.Input<boolean>;
    /**
     * export output physical interfaces of bundle interface
     */
    optionOutbundlemember?: pulumi.Input<boolean>;
    /**
     * export output interfaces as physical interfaces
     */
    optionOutphysint?: pulumi.Input<boolean>;
    /**
     * Layer2 traffic based flow
     */
    recordDatalinkRecord?: pulumi.Input<boolean>;
    /**
     * Default MDI record format
     */
    recordDefaultMdi?: pulumi.Input<boolean>;
    /**
     * Default RTP record format
     */
    recordDefaultRtp?: pulumi.Input<boolean>;
    /**
     * IPv4 raw record format
     */
    recordIpv4?: pulumi.Input<boolean>;
    /**
     * Autonomous System based aggregation
     */
    recordIpv4As?: pulumi.Input<boolean>;
    /**
     * AS-TOS based aggregation
     */
    recordIpv4AsTos?: pulumi.Input<boolean>;
    /**
     * BGP, nexthop and tos based aggregation
     */
    recordIpv4BgpNexthopTos?: pulumi.Input<boolean>;
    /**
     * IPv4 Destination Based NetFlow Accounting
     */
    recordIpv4Destination?: pulumi.Input<boolean>;
    /**
     * Destination prefix based aggregation
     */
    recordIpv4DestinationPrefix?: pulumi.Input<boolean>;
    /**
     * Destination, prefix and tos based aggregation
     */
    recordIpv4DestinationPrefixTos?: pulumi.Input<boolean>;
    /**
     * IPv4 Destination Based NetFlow Accounting TOS
     */
    recordIpv4DestinationTos?: pulumi.Input<boolean>;
    /**
     * IPV4 gtp record format
     */
    recordIpv4Gtp?: pulumi.Input<boolean>;
    /**
     * Record peer AS
     */
    recordIpv4PeerAs?: pulumi.Input<boolean>;
    /**
     * Prefix based agregation
     */
    recordIpv4Prefix?: pulumi.Input<boolean>;
    /**
     * Prefix port based aggregation
     */
    recordIpv4PrefixPort?: pulumi.Input<boolean>;
    /**
     * Prefix TOS based aggregation
     */
    recordIpv4PrefixTos?: pulumi.Input<boolean>;
    /**
     * Protocol-Port based aggregation
     */
    recordIpv4ProtocolPort?: pulumi.Input<boolean>;
    /**
     * Protocol, port and tos based aggregation
     */
    recordIpv4ProtocolPortTos?: pulumi.Input<boolean>;
    /**
     * source prefix based aggregation
     */
    recordIpv4SourcePrefix?: pulumi.Input<boolean>;
    /**
     * Source, Prefix and TOS based aggregation
     */
    recordIpv4SourcePrefixTos?: pulumi.Input<boolean>;
    /**
     * IPv6 raw record format
     */
    recordIpv6?: pulumi.Input<boolean>;
    /**
     * IPv6 Destination Based NetFlow Accounting
     */
    recordIpv6Destination?: pulumi.Input<boolean>;
    /**
     * IPV6 gtp record format
     */
    recordIpv6Gtp?: pulumi.Input<boolean>;
    /**
     * Record peer AS
     */
    recordIpv6PeerAs?: pulumi.Input<boolean>;
    /**
     * map-t translation based Netflow
     */
    recordMapT?: pulumi.Input<boolean>;
    /**
     * MPLS record format
     */
    recordMpls?: pulumi.Input<boolean>;
    /**
     * MPLS with IPv4 fields format
     */
    recordMplsIpv4Fields?: pulumi.Input<boolean>;
    /**
     * MPLS with IPv4 and IPv6 fields format
     */
    recordMplsIpv4Ipv6Fields?: pulumi.Input<boolean>;
    /**
     * MPLS with IPv6 fields format
     */
    recordMplsIpv6Fields?: pulumi.Input<boolean>;
    /**
     * Labels to be used for Hashing - Range: `1`-`6`
     */
    recordMplsLabels?: pulumi.Input<number>;
    /**
     * sFlow based flow
     */
    recordSflow?: pulumi.Input<boolean>;
    /**
     * submode to configure sFlow related options
     */
    sflowOptions?: pulumi.Input<boolean>;
    /**
     * Enable extended-gateway flow data type
     */
    sflowOptionsExtendedGateway?: pulumi.Input<boolean>;
    /**
     * Enable extended-ipv4-tunnel-egress flow data type
     */
    sflowOptionsExtendedIpv4TunnelEgress?: pulumi.Input<boolean>;
    /**
     * Enable extended-ipv6-tunnel-egress flow data type
     */
    sflowOptionsExtendedIpv6TunnelEgress?: pulumi.Input<boolean>;
    /**
     * Enable extended-router flow data type
     */
    sflowOptionsExtendedRouter?: pulumi.Input<boolean>;
    /**
     * Enable if-counters counter sampling rate - Range: `5`-`1800`
     */
    sflowOptionsIfCountersPollingInterval?: pulumi.Input<number>;
    /**
     * Specify ifindex related options - Choices: `physical`
     */
    sflowOptionsInputIfindex?: pulumi.Input<string>;
    /**
     * Specify ifindex related options - Choices: `physical`
     */
    sflowOptionsOutputIfindex?: pulumi.Input<string>;
    /**
     * Specify maximum sample-header size to be exported - Range: `128`-`200`
     */
    sflowOptionsSampleHeaderSize?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a FlowMonitorMap resource.
 */
export interface FlowMonitorMapArgs {
    /**
     * Specify the number of entries in the flow cache - Range: `4096`-`1000000`
     */
    cacheEntries?: pulumi.Input<number>;
    /**
     * Immediate removal of entries from flow cache
     */
    cacheImmediate?: pulumi.Input<boolean>;
    /**
     * Disable removal of entries from flow cache
     */
    cachePermanent?: pulumi.Input<boolean>;
    /**
     * Specify the active flow timeout - Range: `1`-`604800`
     */
    cacheTimeoutActive?: pulumi.Input<number>;
    /**
     * Specify the inactive flow timeout - Range: `0`-`604800`
     */
    cacheTimeoutInactive?: pulumi.Input<number>;
    /**
     * Maximum number of entries to age each second - Range: `1`-`1000000`
     */
    cacheTimeoutRateLimit?: pulumi.Input<number>;
    /**
     * Specify the update timeout - Range: `1`-`604800`
     */
    cacheTimeoutUpdate?: pulumi.Input<number>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Specify flow exporter map name
     */
    exporters?: pulumi.Input<pulumi.Input<inputs.FlowMonitorMapExporter>[]>;
    /**
     * Specify the inactive timeout - Range: `50`-`1800`
     */
    hwCacheTimeoutInactive?: pulumi.Input<number>;
    /**
     * Monitor map name - maximum 32 characters
     */
    name?: pulumi.Input<string>;
    /**
     * export bgp attributes AS_PATH and STD_COMMUNITY
     */
    optionBgpattr?: pulumi.Input<boolean>;
    /**
     * Enable filtering of records
     */
    optionFiltered?: pulumi.Input<boolean>;
    /**
     * export output physical interfaces of bundle interface
     */
    optionOutbundlemember?: pulumi.Input<boolean>;
    /**
     * export output interfaces as physical interfaces
     */
    optionOutphysint?: pulumi.Input<boolean>;
    /**
     * Layer2 traffic based flow
     */
    recordDatalinkRecord?: pulumi.Input<boolean>;
    /**
     * Default MDI record format
     */
    recordDefaultMdi?: pulumi.Input<boolean>;
    /**
     * Default RTP record format
     */
    recordDefaultRtp?: pulumi.Input<boolean>;
    /**
     * IPv4 raw record format
     */
    recordIpv4?: pulumi.Input<boolean>;
    /**
     * Autonomous System based aggregation
     */
    recordIpv4As?: pulumi.Input<boolean>;
    /**
     * AS-TOS based aggregation
     */
    recordIpv4AsTos?: pulumi.Input<boolean>;
    /**
     * BGP, nexthop and tos based aggregation
     */
    recordIpv4BgpNexthopTos?: pulumi.Input<boolean>;
    /**
     * IPv4 Destination Based NetFlow Accounting
     */
    recordIpv4Destination?: pulumi.Input<boolean>;
    /**
     * Destination prefix based aggregation
     */
    recordIpv4DestinationPrefix?: pulumi.Input<boolean>;
    /**
     * Destination, prefix and tos based aggregation
     */
    recordIpv4DestinationPrefixTos?: pulumi.Input<boolean>;
    /**
     * IPv4 Destination Based NetFlow Accounting TOS
     */
    recordIpv4DestinationTos?: pulumi.Input<boolean>;
    /**
     * IPV4 gtp record format
     */
    recordIpv4Gtp?: pulumi.Input<boolean>;
    /**
     * Record peer AS
     */
    recordIpv4PeerAs?: pulumi.Input<boolean>;
    /**
     * Prefix based agregation
     */
    recordIpv4Prefix?: pulumi.Input<boolean>;
    /**
     * Prefix port based aggregation
     */
    recordIpv4PrefixPort?: pulumi.Input<boolean>;
    /**
     * Prefix TOS based aggregation
     */
    recordIpv4PrefixTos?: pulumi.Input<boolean>;
    /**
     * Protocol-Port based aggregation
     */
    recordIpv4ProtocolPort?: pulumi.Input<boolean>;
    /**
     * Protocol, port and tos based aggregation
     */
    recordIpv4ProtocolPortTos?: pulumi.Input<boolean>;
    /**
     * source prefix based aggregation
     */
    recordIpv4SourcePrefix?: pulumi.Input<boolean>;
    /**
     * Source, Prefix and TOS based aggregation
     */
    recordIpv4SourcePrefixTos?: pulumi.Input<boolean>;
    /**
     * IPv6 raw record format
     */
    recordIpv6?: pulumi.Input<boolean>;
    /**
     * IPv6 Destination Based NetFlow Accounting
     */
    recordIpv6Destination?: pulumi.Input<boolean>;
    /**
     * IPV6 gtp record format
     */
    recordIpv6Gtp?: pulumi.Input<boolean>;
    /**
     * Record peer AS
     */
    recordIpv6PeerAs?: pulumi.Input<boolean>;
    /**
     * map-t translation based Netflow
     */
    recordMapT?: pulumi.Input<boolean>;
    /**
     * MPLS record format
     */
    recordMpls?: pulumi.Input<boolean>;
    /**
     * MPLS with IPv4 fields format
     */
    recordMplsIpv4Fields?: pulumi.Input<boolean>;
    /**
     * MPLS with IPv4 and IPv6 fields format
     */
    recordMplsIpv4Ipv6Fields?: pulumi.Input<boolean>;
    /**
     * MPLS with IPv6 fields format
     */
    recordMplsIpv6Fields?: pulumi.Input<boolean>;
    /**
     * Labels to be used for Hashing - Range: `1`-`6`
     */
    recordMplsLabels?: pulumi.Input<number>;
    /**
     * sFlow based flow
     */
    recordSflow?: pulumi.Input<boolean>;
    /**
     * submode to configure sFlow related options
     */
    sflowOptions?: pulumi.Input<boolean>;
    /**
     * Enable extended-gateway flow data type
     */
    sflowOptionsExtendedGateway?: pulumi.Input<boolean>;
    /**
     * Enable extended-ipv4-tunnel-egress flow data type
     */
    sflowOptionsExtendedIpv4TunnelEgress?: pulumi.Input<boolean>;
    /**
     * Enable extended-ipv6-tunnel-egress flow data type
     */
    sflowOptionsExtendedIpv6TunnelEgress?: pulumi.Input<boolean>;
    /**
     * Enable extended-router flow data type
     */
    sflowOptionsExtendedRouter?: pulumi.Input<boolean>;
    /**
     * Enable if-counters counter sampling rate - Range: `5`-`1800`
     */
    sflowOptionsIfCountersPollingInterval?: pulumi.Input<number>;
    /**
     * Specify ifindex related options - Choices: `physical`
     */
    sflowOptionsInputIfindex?: pulumi.Input<string>;
    /**
     * Specify ifindex related options - Choices: `physical`
     */
    sflowOptionsOutputIfindex?: pulumi.Input<string>;
    /**
     * Specify maximum sample-header size to be exported - Range: `128`-`200`
     */
    sflowOptionsSampleHeaderSize?: pulumi.Input<number>;
}
