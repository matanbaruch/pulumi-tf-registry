// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServiceTimestamps extends pulumi.CustomResource {
    /**
     * Get an existing ServiceTimestamps resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceTimestampsState, opts?: pulumi.CustomResourceOptions): ServiceTimestamps {
        return new ServiceTimestamps(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxr:index/serviceTimestamps:ServiceTimestamps';

    /**
     * Returns true if the given object is an instance of ServiceTimestamps.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceTimestamps {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceTimestamps.__pulumiType;
    }

    /**
     * Use local time zone for timestamps
     */
    public readonly debugDatetimeLocaltime!: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp with date and time
     */
    public readonly debugDatetimeLocaltimeOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Include milliseconds in timestamp
     */
    public readonly debugDatetimeMsec!: pulumi.Output<boolean | undefined>;
    /**
     * Add time zone information to timestamp
     */
    public readonly debugDatetimeShowTimezone!: pulumi.Output<boolean | undefined>;
    /**
     * Add year to timestamp
     */
    public readonly debugDatetimeYear!: pulumi.Output<boolean | undefined>;
    /**
     * Disable timestamp debug messages
     */
    public readonly debugDisable!: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp with systime uptime
     */
    public readonly debugUptime!: pulumi.Output<boolean | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Use local time zone for timestamps
     */
    public readonly logDatetimeLocaltime!: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp with date and time
     */
    public readonly logDatetimeLocaltimeOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Include milliseconds in timestamp
     */
    public readonly logDatetimeMsec!: pulumi.Output<boolean | undefined>;
    /**
     * Add time zone information to timestamp
     */
    public readonly logDatetimeShowTimezone!: pulumi.Output<boolean | undefined>;
    /**
     * Add Year to timestamp
     */
    public readonly logDatetimeYear!: pulumi.Output<boolean | undefined>;
    /**
     * Disable timestamp log messages
     */
    public readonly logDisable!: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp with systime uptime
     */
    public readonly logUptime!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ServiceTimestamps resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServiceTimestampsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceTimestampsArgs | ServiceTimestampsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceTimestampsState | undefined;
            resourceInputs["debugDatetimeLocaltime"] = state ? state.debugDatetimeLocaltime : undefined;
            resourceInputs["debugDatetimeLocaltimeOnly"] = state ? state.debugDatetimeLocaltimeOnly : undefined;
            resourceInputs["debugDatetimeMsec"] = state ? state.debugDatetimeMsec : undefined;
            resourceInputs["debugDatetimeShowTimezone"] = state ? state.debugDatetimeShowTimezone : undefined;
            resourceInputs["debugDatetimeYear"] = state ? state.debugDatetimeYear : undefined;
            resourceInputs["debugDisable"] = state ? state.debugDisable : undefined;
            resourceInputs["debugUptime"] = state ? state.debugUptime : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["logDatetimeLocaltime"] = state ? state.logDatetimeLocaltime : undefined;
            resourceInputs["logDatetimeLocaltimeOnly"] = state ? state.logDatetimeLocaltimeOnly : undefined;
            resourceInputs["logDatetimeMsec"] = state ? state.logDatetimeMsec : undefined;
            resourceInputs["logDatetimeShowTimezone"] = state ? state.logDatetimeShowTimezone : undefined;
            resourceInputs["logDatetimeYear"] = state ? state.logDatetimeYear : undefined;
            resourceInputs["logDisable"] = state ? state.logDisable : undefined;
            resourceInputs["logUptime"] = state ? state.logUptime : undefined;
        } else {
            const args = argsOrState as ServiceTimestampsArgs | undefined;
            resourceInputs["debugDatetimeLocaltime"] = args ? args.debugDatetimeLocaltime : undefined;
            resourceInputs["debugDatetimeLocaltimeOnly"] = args ? args.debugDatetimeLocaltimeOnly : undefined;
            resourceInputs["debugDatetimeMsec"] = args ? args.debugDatetimeMsec : undefined;
            resourceInputs["debugDatetimeShowTimezone"] = args ? args.debugDatetimeShowTimezone : undefined;
            resourceInputs["debugDatetimeYear"] = args ? args.debugDatetimeYear : undefined;
            resourceInputs["debugDisable"] = args ? args.debugDisable : undefined;
            resourceInputs["debugUptime"] = args ? args.debugUptime : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["logDatetimeLocaltime"] = args ? args.logDatetimeLocaltime : undefined;
            resourceInputs["logDatetimeLocaltimeOnly"] = args ? args.logDatetimeLocaltimeOnly : undefined;
            resourceInputs["logDatetimeMsec"] = args ? args.logDatetimeMsec : undefined;
            resourceInputs["logDatetimeShowTimezone"] = args ? args.logDatetimeShowTimezone : undefined;
            resourceInputs["logDatetimeYear"] = args ? args.logDatetimeYear : undefined;
            resourceInputs["logDisable"] = args ? args.logDisable : undefined;
            resourceInputs["logUptime"] = args ? args.logUptime : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceTimestamps.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceTimestamps resources.
 */
export interface ServiceTimestampsState {
    /**
     * Use local time zone for timestamps
     */
    debugDatetimeLocaltime?: pulumi.Input<boolean>;
    /**
     * Timestamp with date and time
     */
    debugDatetimeLocaltimeOnly?: pulumi.Input<boolean>;
    /**
     * Include milliseconds in timestamp
     */
    debugDatetimeMsec?: pulumi.Input<boolean>;
    /**
     * Add time zone information to timestamp
     */
    debugDatetimeShowTimezone?: pulumi.Input<boolean>;
    /**
     * Add year to timestamp
     */
    debugDatetimeYear?: pulumi.Input<boolean>;
    /**
     * Disable timestamp debug messages
     */
    debugDisable?: pulumi.Input<boolean>;
    /**
     * Timestamp with systime uptime
     */
    debugUptime?: pulumi.Input<boolean>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Use local time zone for timestamps
     */
    logDatetimeLocaltime?: pulumi.Input<boolean>;
    /**
     * Timestamp with date and time
     */
    logDatetimeLocaltimeOnly?: pulumi.Input<boolean>;
    /**
     * Include milliseconds in timestamp
     */
    logDatetimeMsec?: pulumi.Input<boolean>;
    /**
     * Add time zone information to timestamp
     */
    logDatetimeShowTimezone?: pulumi.Input<boolean>;
    /**
     * Add Year to timestamp
     */
    logDatetimeYear?: pulumi.Input<boolean>;
    /**
     * Disable timestamp log messages
     */
    logDisable?: pulumi.Input<boolean>;
    /**
     * Timestamp with systime uptime
     */
    logUptime?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ServiceTimestamps resource.
 */
export interface ServiceTimestampsArgs {
    /**
     * Use local time zone for timestamps
     */
    debugDatetimeLocaltime?: pulumi.Input<boolean>;
    /**
     * Timestamp with date and time
     */
    debugDatetimeLocaltimeOnly?: pulumi.Input<boolean>;
    /**
     * Include milliseconds in timestamp
     */
    debugDatetimeMsec?: pulumi.Input<boolean>;
    /**
     * Add time zone information to timestamp
     */
    debugDatetimeShowTimezone?: pulumi.Input<boolean>;
    /**
     * Add year to timestamp
     */
    debugDatetimeYear?: pulumi.Input<boolean>;
    /**
     * Disable timestamp debug messages
     */
    debugDisable?: pulumi.Input<boolean>;
    /**
     * Timestamp with systime uptime
     */
    debugUptime?: pulumi.Input<boolean>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Use local time zone for timestamps
     */
    logDatetimeLocaltime?: pulumi.Input<boolean>;
    /**
     * Timestamp with date and time
     */
    logDatetimeLocaltimeOnly?: pulumi.Input<boolean>;
    /**
     * Include milliseconds in timestamp
     */
    logDatetimeMsec?: pulumi.Input<boolean>;
    /**
     * Add time zone information to timestamp
     */
    logDatetimeShowTimezone?: pulumi.Input<boolean>;
    /**
     * Add Year to timestamp
     */
    logDatetimeYear?: pulumi.Input<boolean>;
    /**
     * Disable timestamp log messages
     */
    logDisable?: pulumi.Input<boolean>;
    /**
     * Timestamp with systime uptime
     */
    logUptime?: pulumi.Input<boolean>;
}
