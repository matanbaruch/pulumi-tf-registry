// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class L2vpnXconnectGroupP2p extends pulumi.CustomResource {
    /**
     * Get an existing L2vpnXconnectGroupP2p resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: L2vpnXconnectGroupP2pState, opts?: pulumi.CustomResourceOptions): L2vpnXconnectGroupP2p {
        return new L2vpnXconnectGroupP2p(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxr:index/l2vpnXconnectGroupP2p:L2vpnXconnectGroupP2p';

    /**
     * Returns true if the given object is an instance of L2vpnXconnectGroupP2p.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is L2vpnXconnectGroupP2p {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === L2vpnXconnectGroupP2p.__pulumiType;
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * Description for cross connect
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Specify service ID (used as local and remote ac-id)
     */
    public readonly evpnServiceNeighbors!: pulumi.Output<outputs.L2vpnXconnectGroupP2pEvpnServiceNeighbor[] | undefined>;
    /**
     * Specify remote attachment circuit identifier
     */
    public readonly evpnTargetNeighbors!: pulumi.Output<outputs.L2vpnXconnectGroupP2pEvpnTargetNeighbor[] | undefined>;
    /**
     * Specify the group the cross connects belong to
     */
    public readonly groupName!: pulumi.Output<string>;
    /**
     * Specify (sub-)interface name to cross connect
     */
    public readonly interfaces!: pulumi.Output<outputs.L2vpnXconnectGroupP2pInterface[] | undefined>;
    /**
     * IPv4
     */
    public readonly ipv4Neighbors!: pulumi.Output<outputs.L2vpnXconnectGroupP2pIpv4Neighbor[] | undefined>;
    /**
     * IPv6
     */
    public readonly ipv6Neighbors!: pulumi.Output<outputs.L2vpnXconnectGroupP2pIpv6Neighbor[] | undefined>;
    /**
     * Specify service ID (used as local and remote ac-id)
     */
    public readonly neighborEvpnEviSegmentRoutingServices!: pulumi.Output<outputs.L2vpnXconnectGroupP2pNeighborEvpnEviSegmentRoutingService[] | undefined>;
    /**
     * Configure point to point cross connect commands
     */
    public readonly p2pXconnectName!: pulumi.Output<string>;

    /**
     * Create a L2vpnXconnectGroupP2p resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: L2vpnXconnectGroupP2pArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: L2vpnXconnectGroupP2pArgs | L2vpnXconnectGroupP2pState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as L2vpnXconnectGroupP2pState | undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["evpnServiceNeighbors"] = state ? state.evpnServiceNeighbors : undefined;
            resourceInputs["evpnTargetNeighbors"] = state ? state.evpnTargetNeighbors : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["ipv4Neighbors"] = state ? state.ipv4Neighbors : undefined;
            resourceInputs["ipv6Neighbors"] = state ? state.ipv6Neighbors : undefined;
            resourceInputs["neighborEvpnEviSegmentRoutingServices"] = state ? state.neighborEvpnEviSegmentRoutingServices : undefined;
            resourceInputs["p2pXconnectName"] = state ? state.p2pXconnectName : undefined;
        } else {
            const args = argsOrState as L2vpnXconnectGroupP2pArgs | undefined;
            if ((!args || args.groupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            if ((!args || args.p2pXconnectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'p2pXconnectName'");
            }
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["evpnServiceNeighbors"] = args ? args.evpnServiceNeighbors : undefined;
            resourceInputs["evpnTargetNeighbors"] = args ? args.evpnTargetNeighbors : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["ipv4Neighbors"] = args ? args.ipv4Neighbors : undefined;
            resourceInputs["ipv6Neighbors"] = args ? args.ipv6Neighbors : undefined;
            resourceInputs["neighborEvpnEviSegmentRoutingServices"] = args ? args.neighborEvpnEviSegmentRoutingServices : undefined;
            resourceInputs["p2pXconnectName"] = args ? args.p2pXconnectName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(L2vpnXconnectGroupP2p.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering L2vpnXconnectGroupP2p resources.
 */
export interface L2vpnXconnectGroupP2pState {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * Description for cross connect
     */
    description?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Specify service ID (used as local and remote ac-id)
     */
    evpnServiceNeighbors?: pulumi.Input<pulumi.Input<inputs.L2vpnXconnectGroupP2pEvpnServiceNeighbor>[]>;
    /**
     * Specify remote attachment circuit identifier
     */
    evpnTargetNeighbors?: pulumi.Input<pulumi.Input<inputs.L2vpnXconnectGroupP2pEvpnTargetNeighbor>[]>;
    /**
     * Specify the group the cross connects belong to
     */
    groupName?: pulumi.Input<string>;
    /**
     * Specify (sub-)interface name to cross connect
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.L2vpnXconnectGroupP2pInterface>[]>;
    /**
     * IPv4
     */
    ipv4Neighbors?: pulumi.Input<pulumi.Input<inputs.L2vpnXconnectGroupP2pIpv4Neighbor>[]>;
    /**
     * IPv6
     */
    ipv6Neighbors?: pulumi.Input<pulumi.Input<inputs.L2vpnXconnectGroupP2pIpv6Neighbor>[]>;
    /**
     * Specify service ID (used as local and remote ac-id)
     */
    neighborEvpnEviSegmentRoutingServices?: pulumi.Input<pulumi.Input<inputs.L2vpnXconnectGroupP2pNeighborEvpnEviSegmentRoutingService>[]>;
    /**
     * Configure point to point cross connect commands
     */
    p2pXconnectName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a L2vpnXconnectGroupP2p resource.
 */
export interface L2vpnXconnectGroupP2pArgs {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * Description for cross connect
     */
    description?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Specify service ID (used as local and remote ac-id)
     */
    evpnServiceNeighbors?: pulumi.Input<pulumi.Input<inputs.L2vpnXconnectGroupP2pEvpnServiceNeighbor>[]>;
    /**
     * Specify remote attachment circuit identifier
     */
    evpnTargetNeighbors?: pulumi.Input<pulumi.Input<inputs.L2vpnXconnectGroupP2pEvpnTargetNeighbor>[]>;
    /**
     * Specify the group the cross connects belong to
     */
    groupName: pulumi.Input<string>;
    /**
     * Specify (sub-)interface name to cross connect
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.L2vpnXconnectGroupP2pInterface>[]>;
    /**
     * IPv4
     */
    ipv4Neighbors?: pulumi.Input<pulumi.Input<inputs.L2vpnXconnectGroupP2pIpv4Neighbor>[]>;
    /**
     * IPv6
     */
    ipv6Neighbors?: pulumi.Input<pulumi.Input<inputs.L2vpnXconnectGroupP2pIpv6Neighbor>[]>;
    /**
     * Specify service ID (used as local and remote ac-id)
     */
    neighborEvpnEviSegmentRoutingServices?: pulumi.Input<pulumi.Input<inputs.L2vpnXconnectGroupP2pNeighborEvpnEviSegmentRoutingService>[]>;
    /**
     * Configure point to point cross connect commands
     */
    p2pXconnectName: pulumi.Input<string>;
}
