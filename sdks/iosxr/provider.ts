// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The provider type for the iosxr package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'iosxr';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * TLS CA certificate content. This can also be set as the IOSXR_CA_CERTIFICATE environment variable.
     */
    public readonly caCertificate!: pulumi.Output<string | undefined>;
    /**
     * TLS certificate content. This can also be set as the IOSXR_CERTIFICATE environment variable.
     */
    public readonly certificate!: pulumi.Output<string | undefined>;
    /**
     * IP or name of the Cisco IOS-XR device. Optionally a port can be added with `:12345`. The default port is `57400`. This
     * can also be set as the IOSXR_HOST environment variable. If no `host` is provided, the `host` of the first device from
     * the `devices` list is being used.
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * TLS private key content. This can also be set as the IOSXR_KEY environment variable.
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * Password for the IOS-XR device. This can also be set as the IOSXR_PASSWORD environment variable.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Username for the IOS-XR device. This can also be set as the IOSXR_USERNAME environment variable.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["caCertificate"] = args ? args.caCertificate : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["devices"] = pulumi.output(args ? args.devices : undefined).apply(JSON.stringify);
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["reuseConnection"] = pulumi.output(args ? args.reuseConnection : undefined).apply(JSON.stringify);
            resourceInputs["tls"] = pulumi.output(args ? args.tls : undefined).apply(JSON.stringify);
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["verifyCertificate"] = pulumi.output(args ? args.verifyCertificate : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * TLS CA certificate content. This can also be set as the IOSXR_CA_CERTIFICATE environment variable.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * TLS certificate content. This can also be set as the IOSXR_CERTIFICATE environment variable.
     */
    certificate?: pulumi.Input<string>;
    /**
     * This can be used to manage a list of devices from a single provider. All devices must use the same credentials. Each
     * resource and data source has an optional attribute named `device`, which can then select a device by its name from this
     * list.
     */
    devices?: pulumi.Input<pulumi.Input<inputs.ProviderDevice>[]>;
    /**
     * IP or name of the Cisco IOS-XR device. Optionally a port can be added with `:12345`. The default port is `57400`. This
     * can also be set as the IOSXR_HOST environment variable. If no `host` is provided, the `host` of the first device from
     * the `devices` list is being used.
     */
    host?: pulumi.Input<string>;
    /**
     * TLS private key content. This can also be set as the IOSXR_KEY environment variable.
     */
    key?: pulumi.Input<string>;
    /**
     * Password for the IOS-XR device. This can also be set as the IOSXR_PASSWORD environment variable.
     */
    password?: pulumi.Input<string>;
    /**
     * Reuse gNMI connection. This can also be set as the IOSXR_REUSE_CONNECTION environment variable. Defaults to `true`.
     */
    reuseConnection?: pulumi.Input<boolean>;
    /**
     * Use TLS. This can also be set as the IOSXR_TLS environment variable. Defaults to `true`.
     */
    tls?: pulumi.Input<boolean>;
    /**
     * Username for the IOS-XR device. This can also be set as the IOSXR_USERNAME environment variable.
     */
    username?: pulumi.Input<string>;
    /**
     * Verify target certificate. This can also be set as the IOSXR_VERIFY_CERTIFICATE environment variable. Defaults to
     * `false`.
     */
    verifyCertificate?: pulumi.Input<boolean>;
}
