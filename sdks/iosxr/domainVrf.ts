// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DomainVrf extends pulumi.CustomResource {
    /**
     * Get an existing DomainVrf resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainVrfState, opts?: pulumi.CustomResourceOptions): DomainVrf {
        return new DomainVrf(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxr:index/domainVrf:DomainVrf';

    /**
     * Returns true if the given object is an instance of DomainVrf.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainVrf {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainVrf.__pulumiType;
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * A domain name
     */
    public readonly domains!: pulumi.Output<outputs.DomainVrfDomain[] | undefined>;
    /**
     * Name of host
     */
    public readonly ipv4Hosts!: pulumi.Output<outputs.DomainVrfIpv4Host[] | undefined>;
    /**
     * Name of host
     */
    public readonly ipv6Hosts!: pulumi.Output<outputs.DomainVrfIpv6Host[] | undefined>;
    /**
     * Disable Domain Name System hostname translation
     */
    public readonly lookupDisable!: pulumi.Output<boolean | undefined>;
    /**
     * Specify source interface for DNS resolver
     */
    public readonly lookupSourceInterface!: pulumi.Output<string | undefined>;
    /**
     * Define the domain name for multicast address lookups
     */
    public readonly multicast!: pulumi.Output<string | undefined>;
    /**
     * Define the default domain name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify address of name server to use
     */
    public readonly nameServers!: pulumi.Output<outputs.DomainVrfNameServer[] | undefined>;
    /**
     * VRF name for domain services
     */
    public readonly vrfName!: pulumi.Output<string>;

    /**
     * Create a DomainVrf resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainVrfArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainVrfArgs | DomainVrfState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainVrfState | undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["ipv4Hosts"] = state ? state.ipv4Hosts : undefined;
            resourceInputs["ipv6Hosts"] = state ? state.ipv6Hosts : undefined;
            resourceInputs["lookupDisable"] = state ? state.lookupDisable : undefined;
            resourceInputs["lookupSourceInterface"] = state ? state.lookupSourceInterface : undefined;
            resourceInputs["multicast"] = state ? state.multicast : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameServers"] = state ? state.nameServers : undefined;
            resourceInputs["vrfName"] = state ? state.vrfName : undefined;
        } else {
            const args = argsOrState as DomainVrfArgs | undefined;
            if ((!args || args.vrfName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vrfName'");
            }
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["domains"] = args ? args.domains : undefined;
            resourceInputs["ipv4Hosts"] = args ? args.ipv4Hosts : undefined;
            resourceInputs["ipv6Hosts"] = args ? args.ipv6Hosts : undefined;
            resourceInputs["lookupDisable"] = args ? args.lookupDisable : undefined;
            resourceInputs["lookupSourceInterface"] = args ? args.lookupSourceInterface : undefined;
            resourceInputs["multicast"] = args ? args.multicast : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameServers"] = args ? args.nameServers : undefined;
            resourceInputs["vrfName"] = args ? args.vrfName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainVrf.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DomainVrf resources.
 */
export interface DomainVrfState {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * A domain name
     */
    domains?: pulumi.Input<pulumi.Input<inputs.DomainVrfDomain>[]>;
    /**
     * Name of host
     */
    ipv4Hosts?: pulumi.Input<pulumi.Input<inputs.DomainVrfIpv4Host>[]>;
    /**
     * Name of host
     */
    ipv6Hosts?: pulumi.Input<pulumi.Input<inputs.DomainVrfIpv6Host>[]>;
    /**
     * Disable Domain Name System hostname translation
     */
    lookupDisable?: pulumi.Input<boolean>;
    /**
     * Specify source interface for DNS resolver
     */
    lookupSourceInterface?: pulumi.Input<string>;
    /**
     * Define the domain name for multicast address lookups
     */
    multicast?: pulumi.Input<string>;
    /**
     * Define the default domain name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify address of name server to use
     */
    nameServers?: pulumi.Input<pulumi.Input<inputs.DomainVrfNameServer>[]>;
    /**
     * VRF name for domain services
     */
    vrfName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DomainVrf resource.
 */
export interface DomainVrfArgs {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * A domain name
     */
    domains?: pulumi.Input<pulumi.Input<inputs.DomainVrfDomain>[]>;
    /**
     * Name of host
     */
    ipv4Hosts?: pulumi.Input<pulumi.Input<inputs.DomainVrfIpv4Host>[]>;
    /**
     * Name of host
     */
    ipv6Hosts?: pulumi.Input<pulumi.Input<inputs.DomainVrfIpv6Host>[]>;
    /**
     * Disable Domain Name System hostname translation
     */
    lookupDisable?: pulumi.Input<boolean>;
    /**
     * Specify source interface for DNS resolver
     */
    lookupSourceInterface?: pulumi.Input<string>;
    /**
     * Define the domain name for multicast address lookups
     */
    multicast?: pulumi.Input<string>;
    /**
     * Define the default domain name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify address of name server to use
     */
    nameServers?: pulumi.Input<pulumi.Input<inputs.DomainVrfNameServer>[]>;
    /**
     * VRF name for domain services
     */
    vrfName: pulumi.Input<string>;
}
