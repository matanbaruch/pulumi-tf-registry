// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BfdInterface {
    /**
     * Disable BFD for this interface
     */
    disable?: boolean;
    /**
     * Disable BFD echo mode for this interface
     */
    echoDisable?: boolean;
    /**
     * BFD echo source IP address
     */
    echoIpv4Source?: string;
    /**
     * Configure BFD on an interface
     */
    interfaceName: string;
    /**
     * Disable BFD ipv6 checksum mode for this interface
     */
    ipv6ChecksumDisable?: boolean;
    /**
     * Local address to be used by BFD for this interface
     */
    localAddress?: string;
    /**
     * BFD multiplier for this interface
     *   - Range: `2`-`50`
     */
    multiplier?: number;
    /**
     * BFD RX Interval for this interface in microseconds
     *   - Range: `3000`-`30000000`
     */
    rxInterval?: number;
    /**
     * BFD TX Interval for this interface in microseconds
     *   - Range: `3000`-`30000000`
     */
    txInterval?: number;
}

export interface BfdMultipathLocation {
    /**
     * Specify a location
     */
    locationName: string;
}

export interface DomainDomain {
    /**
     * A domain name
     */
    domainName: string;
    /**
     * This is used to sort the servers in the order of precedence
     *   - Range: `0`-`4294967295`
     */
    order: number;
}

export interface DomainIpv4Host {
    /**
     * Name of host
     */
    hostName: string;
    /**
     * Host IP address (maximum of 8)
     */
    ipAddresses?: string[];
}

export interface DomainIpv6Host {
    /**
     * Name of host
     */
    hostName: string;
    /**
     * IPv6 name or address (maximum four addresses)
     */
    ipv6Addresses?: string[];
}

export interface DomainNameServer {
    /**
     * Specify address of name server to use
     */
    address: string;
    /**
     * This is used to sort the servers in the order of precedence
     *   - Range: `0`-`4294967295`
     */
    order: number;
}

export interface DomainVrfDomain {
    /**
     * A domain name
     */
    domainName: string;
    /**
     * This is used to sort the servers in the order of precedence
     *   - Range: `0`-`4294967295`
     */
    order: number;
}

export interface DomainVrfIpv4Host {
    /**
     * Name of host
     */
    hostName: string;
    /**
     * Host IP address (maximum of 8)
     */
    ipAddresses?: string[];
}

export interface DomainVrfIpv6Host {
    /**
     * Name of host
     */
    hostName: string;
    /**
     * IPv6 name or address (maximum four addresses)
     */
    ipv6Addresses?: string[];
}

export interface DomainVrfNameServer {
    /**
     * Specify address of name server to use
     */
    address: string;
    /**
     * This is used to sort the servers in the order of precedence
     *   - Range: `0`-`4294967295`
     */
    order: number;
}

export interface EvpnEviBgpRouteTargetExportFourByteAsFormat {
    /**
     * Four Byte AS number
     *   - Range: `65536`-`4294967295`
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    assignedNumber: number;
}

export interface EvpnEviBgpRouteTargetExportIpv4AddressFormat {
    /**
     * IP-address:nn (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    assignedNumber: number;
    /**
     * IP address
     */
    ipv4Address: string;
}

export interface EvpnEviBgpRouteTargetExportTwoByteAsFormat {
    /**
     * Two Byte AS Number
     *   - Range: `1`-`65535`
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     *   - Range: `0`-`4294967295`
     */
    assignedNumber: number;
}

export interface EvpnEviBgpRouteTargetImportFourByteAsFormat {
    /**
     * Four Byte AS number
     *   - Range: `65536`-`4294967295`
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    assignedNumber: number;
}

export interface EvpnEviBgpRouteTargetImportIpv4AddressFormat {
    /**
     * IP-address:nn (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    assignedNumber: number;
    /**
     * IP address
     */
    ipv4Address: string;
}

export interface EvpnEviBgpRouteTargetImportTwoByteAsFormat {
    /**
     * Two Byte AS Number
     *   - Range: `1`-`65535`
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     *   - Range: `0`-`4294967295`
     */
    assignedNumber: number;
}

export interface EvpnGroupCoreInterface {
    /**
     * configure EVPN group core interface
     */
    interfaceName: string;
}

export interface EvpnSegmentRoutingSrv6EviBgpRouteTargetExportFourByteAsFormat {
    /**
     * Four Byte AS number
     *   - Range: `65536`-`4294967295`
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    assignedNumber: number;
}

export interface EvpnSegmentRoutingSrv6EviBgpRouteTargetExportIpv4AddressFormat {
    /**
     * IP-address:nn (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    assignedNumber: number;
    /**
     * IP address
     */
    ipv4Address: string;
}

export interface EvpnSegmentRoutingSrv6EviBgpRouteTargetExportTwoByteAsFormat {
    /**
     * Two Byte AS Number
     *   - Range: `1`-`65535`
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     *   - Range: `0`-`4294967295`
     */
    assignedNumber: number;
}

export interface EvpnSegmentRoutingSrv6EviBgpRouteTargetImportFourByteAsFormat {
    /**
     * Four Byte AS number
     *   - Range: `65536`-`4294967295`
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    assignedNumber: number;
}

export interface EvpnSegmentRoutingSrv6EviBgpRouteTargetImportIpv4AddressFormat {
    /**
     * IP-address:nn (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    assignedNumber: number;
    /**
     * IP address
     */
    ipv4Address: string;
}

export interface EvpnSegmentRoutingSrv6EviBgpRouteTargetImportTwoByteAsFormat {
    /**
     * Two Byte AS Number
     *   - Range: `1`-`65535`
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     *   - Range: `0`-`4294967295`
     */
    assignedNumber: number;
}

export interface FlowMonitorMapExporter {
    /**
     * Specify flow exporter map name
     */
    name: string;
}

export interface GetBfdInterface {
    /**
     * Disable BFD for this interface
     */
    disable: boolean;
    /**
     * Disable BFD echo mode for this interface
     */
    echoDisable: boolean;
    /**
     * BFD echo source IP address
     */
    echoIpv4Source: string;
    /**
     * Configure BFD on an interface
     */
    interfaceName: string;
    /**
     * Disable BFD ipv6 checksum mode for this interface
     */
    ipv6ChecksumDisable: boolean;
    /**
     * Local address to be used by BFD for this interface
     */
    localAddress: string;
    /**
     * BFD multiplier for this interface
     */
    multiplier: number;
    /**
     * BFD RX Interval for this interface in microseconds
     */
    rxInterval: number;
    /**
     * BFD TX Interval for this interface in microseconds
     */
    txInterval: number;
}

export interface GetBfdMultipathLocation {
    /**
     * Specify a location
     */
    locationName: string;
}

export interface GetDomainDomain {
    /**
     * A domain name
     */
    domainName: string;
    /**
     * This is used to sort the servers in the order of precedence
     */
    order: number;
}

export interface GetDomainIpv4Host {
    /**
     * Name of host
     */
    hostName: string;
    /**
     * Host IP address (maximum of 8)
     */
    ipAddresses: string[];
}

export interface GetDomainIpv6Host {
    /**
     * Name of host
     */
    hostName: string;
    /**
     * IPv6 name or address (maximum four addresses)
     */
    ipv6Addresses: string[];
}

export interface GetDomainNameServer {
    /**
     * Specify address of name server to use
     */
    address: string;
    /**
     * This is used to sort the servers in the order of precedence
     */
    order: number;
}

export interface GetDomainVrfDomain {
    /**
     * A domain name
     */
    domainName: string;
    /**
     * This is used to sort the servers in the order of precedence
     */
    order: number;
}

export interface GetDomainVrfIpv4Host {
    /**
     * Name of host
     */
    hostName: string;
    /**
     * Host IP address (maximum of 8)
     */
    ipAddresses: string[];
}

export interface GetDomainVrfIpv6Host {
    /**
     * Name of host
     */
    hostName: string;
    /**
     * IPv6 name or address (maximum four addresses)
     */
    ipv6Addresses: string[];
}

export interface GetDomainVrfNameServer {
    /**
     * Specify address of name server to use
     */
    address: string;
    /**
     * This is used to sort the servers in the order of precedence
     */
    order: number;
}

export interface GetEvpnEviBgpRouteTargetExportFourByteAsFormat {
    /**
     * Four Byte AS number
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     */
    assignedNumber: number;
}

export interface GetEvpnEviBgpRouteTargetExportIpv4AddressFormat {
    /**
     * IP-address:nn (hex or decimal format)
     */
    assignedNumber: number;
    /**
     * IP address
     */
    ipv4Address: string;
}

export interface GetEvpnEviBgpRouteTargetExportTwoByteAsFormat {
    /**
     * Two Byte AS Number
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     */
    assignedNumber: number;
}

export interface GetEvpnEviBgpRouteTargetImportFourByteAsFormat {
    /**
     * Four Byte AS number
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     */
    assignedNumber: number;
}

export interface GetEvpnEviBgpRouteTargetImportIpv4AddressFormat {
    /**
     * IP-address:nn (hex or decimal format)
     */
    assignedNumber: number;
    /**
     * IP address
     */
    ipv4Address: string;
}

export interface GetEvpnEviBgpRouteTargetImportTwoByteAsFormat {
    /**
     * Two Byte AS Number
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     */
    assignedNumber: number;
}

export interface GetEvpnGroupCoreInterface {
    /**
     * configure EVPN group core interface
     */
    interfaceName: string;
}

export interface GetEvpnSegmentRoutingSrv6EviBgpRouteTargetExportFourByteAsFormat {
    /**
     * Four Byte AS number
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     */
    assignedNumber: number;
}

export interface GetEvpnSegmentRoutingSrv6EviBgpRouteTargetExportIpv4AddressFormat {
    /**
     * IP-address:nn (hex or decimal format)
     */
    assignedNumber: number;
    /**
     * IP address
     */
    ipv4Address: string;
}

export interface GetEvpnSegmentRoutingSrv6EviBgpRouteTargetExportTwoByteAsFormat {
    /**
     * Two Byte AS Number
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     */
    assignedNumber: number;
}

export interface GetEvpnSegmentRoutingSrv6EviBgpRouteTargetImportFourByteAsFormat {
    /**
     * Four Byte AS number
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     */
    assignedNumber: number;
}

export interface GetEvpnSegmentRoutingSrv6EviBgpRouteTargetImportIpv4AddressFormat {
    /**
     * IP-address:nn (hex or decimal format)
     */
    assignedNumber: number;
    /**
     * IP address
     */
    ipv4Address: string;
}

export interface GetEvpnSegmentRoutingSrv6EviBgpRouteTargetImportTwoByteAsFormat {
    /**
     * Two Byte AS Number
     */
    asNumber: number;
    /**
     * AS:nn (hex or decimal format)
     */
    assignedNumber: number;
}

export interface GetFlowMonitorMapExporter {
    /**
     * Specify flow exporter map name
     */
    name: string;
}

export interface GetInterfaceFlowIpv4EgressMonitor {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
}

export interface GetInterfaceFlowIpv4EgressMonitorSampler {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
    /**
     * Specify a sampler for packets
     */
    samplerMapName: string;
}

export interface GetInterfaceFlowIpv4IngressMonitor {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
}

export interface GetInterfaceFlowIpv4IngressMonitorSampler {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
    /**
     * Specify a sampler for packets
     */
    samplerMapName: string;
}

export interface GetInterfaceFlowIpv6EgressMonitor {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
}

export interface GetInterfaceFlowIpv6EgressMonitorSampler {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
    /**
     * Specify a sampler for packets
     */
    samplerMapName: string;
}

export interface GetInterfaceFlowIpv6IngressMonitor {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
}

export interface GetInterfaceFlowIpv6IngressMonitorSampler {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
    /**
     * Specify a sampler for packets
     */
    samplerMapName: string;
}

export interface GetInterfaceIpv6Address {
    /**
     * IPv6 name or address
     */
    address: string;
    /**
     * Prefix length in bits
     */
    prefixLength: number;
    /**
     * IPv6 address zone
     */
    zone: string;
}

export interface GetInterfaceServicePolicyInput {
    /**
     * Name of the service policy. Set 'input' for 'service-ipsec and 'service-gre' interfaces
     */
    name: string;
}

export interface GetInterfaceServicePolicyOutput {
    /**
     * Name of the service policy. Set 'output' for 'service-ipsec and 'service-gre' interfaces
     */
    name: string;
}

export interface GetIpv4AccessListSequence {
    /**
     * Capture matched packet
     */
    denyCapture: boolean;
    /**
     * counter for this ACE
     */
    denyCounter: string;
    /**
     * Use specified default nexthop on match against this entry
     */
    denyDefault: boolean;
    /**
     * Destination IP address
     */
    denyDestinationAddress: string;
    /**
     * Any destination host
     */
    denyDestinationAny: boolean;
    /**
     * A single destination host
     */
    denyDestinationHost: string;
    /**
     * IPv4 destination network object group
     */
    denyDestinationNetGroup: string;
    /**
     * Match only packets on a given port number
     */
    denyDestinationPortEq: string;
    /**
     * destination port object group
     */
    denyDestinationPortGroup: string;
    /**
     * Match only packet with a greater port number
     */
    denyDestinationPortGt: string;
    /**
     * Match only packets with a lower port number
     */
    denyDestinationPortLt: string;
    /**
     * Match only packets not on a given port
     */
    denyDestinationPortNeq: string;
    /**
     * Port number
     */
    denyDestinationPortRangeEnd: string;
    /**
     * Port number
     */
    denyDestinationPortRangeStart: string;
    /**
     * Destination IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.
     */
    denyDestinationPrefixLength: number;
    /**
     * Destination IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.
     */
    denyDestinationWildcardMask: string;
    denyDscp: string;
    /**
     * Match only packets on a given DSCP value
     */
    denyDscpEq: string;
    /**
     * Match only packet with a greater DSCP value
     */
    denyDscpGt: string;
    /**
     * Match only packets with a lower DSCP value
     */
    denyDscpLt: string;
    /**
     * Match only packets not on a given DSCP value
     */
    denyDscpNeq: string;
    /**
     * DSCP value
     */
    denyDscpRangeEnd: string;
    /**
     * DSCP value
     */
    denyDscpRangeStart: string;
    /**
     * Match only packets with exact protocol numbers
     */
    denyEq: string;
    /**
     * Match only packets with a given value
     */
    denyFragmentOffsetEq: number;
    /**
     * Match only packet with a greater value
     */
    denyFragmentOffsetGt: number;
    /**
     * Match only packets with a lower value
     */
    denyFragmentOffsetLt: number;
    /**
     * Match only packets not on a given value
     */
    denyFragmentOffsetNeq: number;
    /**
     * fragment-offset value
     */
    denyFragmentOffsetRangeEnd: number;
    /**
     * fragment-offset value
     */
    denyFragmentOffsetRangeStart: number;
    /**
     * Fragment type for a packet
     */
    denyFragmentType: string;
    /**
     * Check non-initial fragments
     */
    denyFragments: boolean;
    /**
     * ICMP message code
     */
    denyIcmpMessageCode: number;
    /**
     * ICMP message type
     */
    denyIcmpMessageType: number;
    /**
     * ICMP message type
     */
    denyIcmpMessageTypeName: string;
    /**
     * Do not generate the ICMP message
     */
    denyIcmpOff: boolean;
    /**
     * Generate the ICMP message
     */
    denyIcmpOn: boolean;
    /**
     * Match on IGMP message
     */
    denyIgmpType: string;
    /**
     * Log matches against this entry
     */
    denyLog: boolean;
    /**
     * Log matches against this entry, including input interface
     */
    denyLogInput: boolean;
    /**
     * nexthop1 ipv4 address
     */
    denyNexthop1Ipv4: string;
    /**
     * specific TRACK Name for this nexthop
     */
    denyNexthop1Track: string;
    /**
     * Specific VRF Name for this nexthop
     */
    denyNexthop1Vrf: string;
    /**
     * nexthop2 ipv4 address
     */
    denyNexthop2Ipv4: string;
    /**
     * specific TRACK Name for this nexthop
     */
    denyNexthop2Track: string;
    /**
     * Specific VRF Name for this nexthop
     */
    denyNexthop2Vrf: string;
    /**
     * nexthop3 ipv4 address
     */
    denyNexthop3Ipv4: string;
    /**
     * specific TRACK Name for this nexthop
     */
    denyNexthop3Track: string;
    /**
     * Specific VRF Name for this nexthop
     */
    denyNexthop3Vrf: string;
    /**
     * Match only packets with a given value
     */
    denyPacketLengthEq: number;
    /**
     * Match only packet with a greater value
     */
    denyPacketLengthGt: number;
    /**
     * Match only packets with a lower value
     */
    denyPacketLengthLt: number;
    /**
     * Match only packets not on a given value
     */
    denyPacketLengthNeq: number;
    /**
     * Packet length end
     */
    denyPacketLengthRangeEnd: number;
    /**
     * Packet length start
     */
    denyPacketLengthRangeStart: number;
    /**
     * Police peak-rate value on this entry
     */
    denyPolicePeakRate: number;
    /**
     * Unit for peak-rate value. Currently only pps (packets per second) is supported
     */
    denyPolicePeakUnit: string;
    /**
     * Set Priority option on this entry
     */
    denyPolicePriority: string;
    /**
     * Unit for police value. Currently only pps (packets per second) is supported
     */
    denyPoliceUnit: string;
    /**
     * Police value
     */
    denyPoliceValue: number;
    /**
     * Match packets with given precedence
     */
    denyPrecedence: string;
    /**
     * An IPv4 Protocol
     */
    denyProtocol: string;
    /**
     * An IPv4 Protocol
     */
    denyRangeEndProtocol: string;
    /**
     * An IPv4 Protocol
     */
    denyRangeStartProtocol: string;
    /**
     * qos-group number
     */
    denySetQosGroup: number;
    /**
     * Set ttl value
     */
    denySetTtl: number;
    /**
     * Source IP address
     */
    denySourceAddress: string;
    /**
     * Any source host
     */
    denySourceAny: boolean;
    /**
     * A single source host
     */
    denySourceHost: string;
    /**
     * IPv4 source network object group
     */
    denySourceNetGroup: string;
    /**
     * Match only packets on a given port number
     */
    denySourcePortEq: string;
    /**
     * source port object group
     */
    denySourcePortGroup: string;
    /**
     * Match only packet with a greater port number
     */
    denySourcePortGt: string;
    /**
     * Match only packets with a lower port number
     */
    denySourcePortLt: string;
    /**
     * Match only packets not on a given port
     */
    denySourcePortNeq: string;
    /**
     * Port number
     */
    denySourcePortRangeEnd: string;
    /**
     * Port number
     */
    denySourcePortRangeStart: string;
    /**
     * Source IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.
     */
    denySourcePrefixLength: number;
    /**
     * Source IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.
     */
    denySourceWildcardMask: string;
    /**
     * Match only packets with a given value
     */
    denyTtlEq: number;
    /**
     * Match only packet with a greater value
     */
    denyTtlGt: number;
    /**
     * Match only packets with a lower value
     */
    denyTtlLt: number;
    /**
     * Match only packets not on a given value
     */
    denyTtlNeq: number;
    /**
     * ttl range higher value
     */
    denyTtlRangeEnd: number;
    /**
     * ttl range lower value
     */
    denyTtlRangeStart: number;
    /**
     * Capture matched packet
     */
    permitCapture: boolean;
    /**
     * counter for this ACE
     */
    permitCounter: string;
    /**
     * Use specified default nexthop on match against this entry
     */
    permitDefault: boolean;
    /**
     * Destination IP address
     */
    permitDestinationAddress: string;
    /**
     * Any destination host
     */
    permitDestinationAny: boolean;
    /**
     * A single destination host
     */
    permitDestinationHost: string;
    /**
     * IPv4 destination network object group
     */
    permitDestinationNetGroup: string;
    /**
     * Match only packets on a given port number
     */
    permitDestinationPortEq: string;
    /**
     * destination port object group
     */
    permitDestinationPortGroup: string;
    /**
     * Match only packet with a greater port number
     */
    permitDestinationPortGt: string;
    /**
     * Match only packets with a lower port number
     */
    permitDestinationPortLt: string;
    /**
     * Match only packets not on a given port
     */
    permitDestinationPortNeq: string;
    /**
     * Port number
     */
    permitDestinationPortRangeEnd: string;
    /**
     * Port number
     */
    permitDestinationPortRangeStart: string;
    /**
     * Destination IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.
     */
    permitDestinationPrefixLength: number;
    /**
     * Destination IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.
     */
    permitDestinationWildcardMask: string;
    permitDscp: string;
    /**
     * Match only packets on a given DSCP value
     */
    permitDscpEq: string;
    /**
     * Match only packet with a greater DSCP value
     */
    permitDscpGt: string;
    /**
     * Match only packets with a lower DSCP value
     */
    permitDscpLt: string;
    /**
     * Match only packets not on a given DSCP value
     */
    permitDscpNeq: string;
    /**
     * DSCP value
     */
    permitDscpRangeEnd: string;
    /**
     * DSCP value
     */
    permitDscpRangeStart: string;
    /**
     * Match only packets with exact protocol numbers
     */
    permitEq: string;
    /**
     * Match only packets with a given value
     */
    permitFragmentOffsetEq: number;
    /**
     * Match only packet with a greater value
     */
    permitFragmentOffsetGt: number;
    /**
     * Match only packets with a lower value
     */
    permitFragmentOffsetLt: number;
    /**
     * Match only packets not on a given value
     */
    permitFragmentOffsetNeq: number;
    /**
     * fragment-offset value
     */
    permitFragmentOffsetRangeEnd: number;
    /**
     * fragment-offset value
     */
    permitFragmentOffsetRangeStart: number;
    /**
     * Fragment type for a packet
     */
    permitFragmentType: string;
    /**
     * Check non-initial fragments
     */
    permitFragments: boolean;
    /**
     * ICMP message code
     */
    permitIcmpMessageCode: number;
    /**
     * ICMP message type
     */
    permitIcmpMessageType: number;
    /**
     * ICMP message type
     */
    permitIcmpMessageTypeName: string;
    /**
     * Match on IGMP message
     */
    permitIgmpType: string;
    /**
     * Log matches against this entry
     */
    permitLog: boolean;
    /**
     * Log matches against this entry, including input interface
     */
    permitLogInput: boolean;
    /**
     * nexthop1 ipv4 address
     */
    permitNexthop1Ipv4: string;
    /**
     * specific TRACK Name for this nexthop
     */
    permitNexthop1Track: string;
    /**
     * Specific VRF Name for this nexthop
     */
    permitNexthop1Vrf: string;
    /**
     * nexthop2 ipv4 address
     */
    permitNexthop2Ipv4: string;
    /**
     * specific TRACK Name for this nexthop
     */
    permitNexthop2Track: string;
    /**
     * Specific VRF Name for this nexthop
     */
    permitNexthop2Vrf: string;
    /**
     * nexthop3 ipv4 address
     */
    permitNexthop3Ipv4: string;
    /**
     * specific TRACK Name for this nexthop
     */
    permitNexthop3Track: string;
    /**
     * Specific VRF Name for this nexthop
     */
    permitNexthop3Vrf: string;
    /**
     * Match only packets with a given value
     */
    permitPacketLengthEq: number;
    /**
     * Match only packet with a greater value
     */
    permitPacketLengthGt: number;
    /**
     * Match only packets with a lower value
     */
    permitPacketLengthLt: number;
    /**
     * Match only packets not on a given value
     */
    permitPacketLengthNeq: number;
    /**
     * Packet length end
     */
    permitPacketLengthRangeEnd: number;
    /**
     * Packet length start
     */
    permitPacketLengthRangeStart: number;
    /**
     * Police peak-rate value on this entry
     */
    permitPolicePeakRate: number;
    /**
     * Unit for peak-rate value. Currently only pps (packets per second) is supported
     */
    permitPolicePeakUnit: string;
    /**
     * Set Priority option on this entry
     */
    permitPolicePriority: string;
    /**
     * Unit for police value. Currently only pps (packets per second) is supported
     */
    permitPoliceUnit: string;
    /**
     * Police value
     */
    permitPoliceValue: number;
    /**
     * Match packets with given precedence
     */
    permitPrecedence: string;
    /**
     * An IPv4 Protocol
     */
    permitProtocol: string;
    /**
     * An IPv4 Protocol
     */
    permitRangeEndProtocol: string;
    /**
     * An IPv4 Protocol
     */
    permitRangeStartProtocol: string;
    /**
     * qos-group number
     */
    permitSetQosGroup: number;
    /**
     * Set ttl value
     */
    permitSetTtl: number;
    /**
     * Source IP address
     */
    permitSourceAddress: string;
    /**
     * Any source host
     */
    permitSourceAny: boolean;
    /**
     * A single source host
     */
    permitSourceHost: string;
    /**
     * IPv4 source network object group
     */
    permitSourceNetGroup: string;
    /**
     * Match only packets on a given port number
     */
    permitSourcePortEq: string;
    /**
     * source port object group
     */
    permitSourcePortGroup: string;
    /**
     * Match only packet with a greater port number
     */
    permitSourcePortGt: string;
    /**
     * Match only packets with a lower port number
     */
    permitSourcePortLt: string;
    /**
     * Match only packets not on a given port
     */
    permitSourcePortNeq: string;
    /**
     * Port number
     */
    permitSourcePortRangeEnd: string;
    /**
     * Port number
     */
    permitSourcePortRangeStart: string;
    /**
     * Source IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.
     */
    permitSourcePrefixLength: number;
    /**
     * Source IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.
     */
    permitSourceWildcardMask: string;
    /**
     * Match only packets with a given value
     */
    permitTtlEq: number;
    /**
     * Match only packet with a greater value
     */
    permitTtlGt: number;
    /**
     * Match only packets with a lower value
     */
    permitTtlLt: number;
    /**
     * Match only packets not on a given value
     */
    permitTtlNeq: number;
    /**
     * ttl range higher value
     */
    permitTtlRangeEnd: number;
    /**
     * ttl range lower value
     */
    permitTtlRangeStart: number;
    /**
     * Comment for access list
     */
    remark: string;
    /**
     * Sequence number for this entry
     */
    sequenceNumber: number;
}

export interface GetIpv4PrefixListSequence {
    /**
     * Mask length of IPv4 address
     */
    mask: string;
    /**
     * Exact prefix length to be matched
     */
    matchPrefixLengthEq: number;
    /**
     * Minimum prefix length to be matched
     */
    matchPrefixLengthGe: number;
    /**
     * Maximum prefix length to be matched
     */
    matchPrefixLengthLe: number;
    /**
     * specify the type to be either deny (or) permit
     */
    permission: string;
    /**
     * IPv4 address prefix
     */
    prefix: string;
    /**
     * Comments for prefix list
     */
    remark: string;
    /**
     * Sequence number
     */
    sequenceNumber: number;
}

export interface GetIpv6AccessListSequence {
    /**
     * Capture matched packet
     */
    denyCapture: boolean;
    /**
     * counter for this ACE
     */
    denyCounter: string;
    /**
     * Destination IP address
     */
    denyDestinationAddress: string;
    /**
     * Any destination host
     */
    denyDestinationAny: boolean;
    /**
     * A single destination host
     */
    denyDestinationHost: string;
    /**
     * IPv6 destination network object group
     */
    denyDestinationNetGroup: string;
    /**
     * Match only packets on a given port number
     */
    denyDestinationPortEq: string;
    /**
     * destination port object group
     */
    denyDestinationPortGroup: string;
    /**
     * Match only packet with a greater port number
     */
    denyDestinationPortGt: string;
    /**
     * Match only packets with a lower port number
     */
    denyDestinationPortLt: string;
    /**
     * Match only packets not on a given port
     */
    denyDestinationPortNeq: string;
    /**
     * Port number
     */
    denyDestinationPortRangeEnd: string;
    /**
     * Port number
     */
    denyDestinationPortRangeStart: string;
    /**
     * Destination IP address prefix length.Either wildcard-mask or prefix-length is supported along with address.
     */
    denyDestinationPrefixLength: number;
    /**
     * Destination IP address mask. Either wildcard-mask or prefix-length is supported along with address.
     */
    denyDestinationWildcardMask: string;
    denyDscp: string;
    /**
     * Match only packets on a given DSCP value
     */
    denyDscpEq: string;
    /**
     * Match only packet with a greater DSCP value
     */
    denyDscpGt: string;
    /**
     * Match only packets with a lower DSCP value
     */
    denyDscpLt: string;
    /**
     * Match only packets not on a given DSCP value
     */
    denyDscpNeq: string;
    /**
     * DSCP value
     */
    denyDscpRangeEnd: string;
    /**
     * DSCP value
     */
    denyDscpRangeStart: string;
    /**
     * Match only packets with exact protocol numbers
     */
    denyEq: string;
    /**
     * Fragment type for a packet
     */
    denyFragmentType: string;
    /**
     * ICMP message code
     */
    denyIcmpMessageCode: number;
    /**
     * ICMP message type
     */
    denyIcmpMessageType: number;
    /**
     * ICMP message type
     */
    denyIcmpMessageTypeName: string;
    /**
     * Do not generate the ICMP message
     */
    denyIcmpOff: boolean;
    /**
     * Generate the ICMP message
     */
    denyIcmpOn: boolean;
    /**
     * Log matches against this entry
     */
    denyLog: boolean;
    /**
     * Log matches against this entry, including input interface
     */
    denyLogInput: boolean;
    /**
     * Match only packets with a given value
     */
    denyPacketLengthEq: number;
    /**
     * Match only packet with a greater value
     */
    denyPacketLengthGt: number;
    /**
     * Match only packets with a lower value
     */
    denyPacketLengthLt: number;
    /**
     * Match only packets not on a given value
     */
    denyPacketLengthNeq: number;
    /**
     * Packet length end
     */
    denyPacketLengthRangeEnd: number;
    /**
     * Packet length start
     */
    denyPacketLengthRangeStart: number;
    /**
     * Police peak-rate value on this entry
     */
    denyPolicePeakRate: number;
    /**
     * Unit for peak-rate value. Currently only pps (packets per second) is supported
     */
    denyPolicePeakUnit: string;
    /**
     * Set Priority option on this entry
     */
    denyPolicePriority: string;
    /**
     * Unit for police value. Currently only pps (packets per second) is supported
     */
    denyPoliceUnit: string;
    /**
     * Police value
     */
    denyPoliceValue: number;
    /**
     * Match packets with given precedence
     */
    denyPrecedence: string;
    /**
     * An IPv6 Protocol
     */
    denyProtocol: string;
    /**
     * An IPv6 Protocol
     */
    denyRangeEndProtocol: string;
    /**
     * An IPv6 Protocol
     */
    denyRangeStartProtocol: string;
    /**
     * qos-group number
     */
    denySetQosGroup: number;
    /**
     * Set ttl value
     */
    denySetTtl: number;
    /**
     * Source IP address
     */
    denySourceAddress: string;
    /**
     * Any source host
     */
    denySourceAny: boolean;
    /**
     * A single source host
     */
    denySourceHost: string;
    /**
     * IPv6 source network object group
     */
    denySourceNetGroup: string;
    /**
     * Match only packets on a given port number
     */
    denySourcePortEq: string;
    /**
     * source port object group
     */
    denySourcePortGroup: string;
    /**
     * Match only packet with a greater port number
     */
    denySourcePortGt: string;
    /**
     * Match only packets with a lower port number
     */
    denySourcePortLt: string;
    /**
     * Match only packets not on a given port
     */
    denySourcePortNeq: string;
    /**
     * Port number
     */
    denySourcePortRangeEnd: string;
    /**
     * Port number
     */
    denySourcePortRangeStart: string;
    /**
     * Source IP address prefix length.Either wildcard-mask or prefix-length is supported along with address.
     */
    denySourcePrefixLength: number;
    /**
     * Source IP address mask. Either wildcard-mask or prefix-length is supported along with address.
     */
    denySourceWildcardMask: string;
    /**
     * Match only packets with a given value
     */
    denyTtlEq: number;
    /**
     * Match only packet with a greater value
     */
    denyTtlGt: number;
    /**
     * Match only packets with a lower value
     */
    denyTtlLt: number;
    /**
     * Match only packets not on a given value
     */
    denyTtlNeq: number;
    /**
     * ttl range higher value
     */
    denyTtlRangeEnd: number;
    /**
     * ttl range lower value
     */
    denyTtlRangeStart: number;
    /**
     * Capture matched packet
     */
    permitCapture: boolean;
    /**
     * counter for this ACE
     */
    permitCounter: string;
    /**
     * Destination IP address
     */
    permitDestinationAddress: string;
    /**
     * Any destination host
     */
    permitDestinationAny: boolean;
    /**
     * A single destination host
     */
    permitDestinationHost: string;
    /**
     * IPv6 destination network object group
     */
    permitDestinationNetGroup: string;
    /**
     * Match only packets on a given port number
     */
    permitDestinationPortEq: string;
    /**
     * destination port object group
     */
    permitDestinationPortGroup: string;
    /**
     * Match only packet with a greater port number
     */
    permitDestinationPortGt: string;
    /**
     * Match only packets with a lower port number
     */
    permitDestinationPortLt: string;
    /**
     * Match only packets not on a given port
     */
    permitDestinationPortNeq: string;
    /**
     * Port number
     */
    permitDestinationPortRangeEnd: string;
    /**
     * Port number
     */
    permitDestinationPortRangeStart: string;
    /**
     * Destination IP address prefix length.Either wildcard-mask or prefix-length is supported along with address.
     */
    permitDestinationPrefixLength: number;
    /**
     * Destination IP address mask. Either wildcard-mask or prefix-length is supported along with address.
     */
    permitDestinationWildcardMask: string;
    permitDscp: string;
    /**
     * Match only packets on a given DSCP value
     */
    permitDscpEq: string;
    /**
     * Match only packet with a greater DSCP value
     */
    permitDscpGt: string;
    /**
     * Match only packets with a lower DSCP value
     */
    permitDscpLt: string;
    /**
     * Match only packets not on a given DSCP value
     */
    permitDscpNeq: string;
    /**
     * DSCP value
     */
    permitDscpRangeEnd: string;
    /**
     * DSCP value
     */
    permitDscpRangeStart: string;
    /**
     * Match only packets with exact protocol numbers
     */
    permitEq: string;
    /**
     * Fragment type for a packet
     */
    permitFragmentType: string;
    /**
     * ICMP message code
     */
    permitIcmpMessageCode: number;
    /**
     * ICMP message type
     */
    permitIcmpMessageType: number;
    /**
     * ICMP message type
     */
    permitIcmpMessageTypeName: string;
    /**
     * Log matches against this entry
     */
    permitLog: boolean;
    /**
     * Log matches against this entry, including input interface
     */
    permitLogInput: boolean;
    /**
     * nexthop1 ipv6 address
     */
    permitNexthop1Ipv6: string;
    /**
     * specific TRACK Name for this nexthop
     */
    permitNexthop1Track: string;
    /**
     * Specific VRF Name for this nexthop
     */
    permitNexthop1Vrf: string;
    /**
     * nexthop2 ipv6 address
     */
    permitNexthop2Ipv6: string;
    /**
     * specific TRACK Name for this nexthop
     */
    permitNexthop2Track: string;
    /**
     * Specific VRF Name for this nexthop
     */
    permitNexthop2Vrf: string;
    /**
     * nexthop3 ipv6 address
     */
    permitNexthop3Ipv6: string;
    /**
     * specific TRACK Name for this nexthop
     */
    permitNexthop3Track: string;
    /**
     * Specific VRF Name for this nexthop
     */
    permitNexthop3Vrf: string;
    /**
     * Match only packets with a given value
     */
    permitPacketLengthEq: number;
    /**
     * Match only packet with a greater value
     */
    permitPacketLengthGt: number;
    /**
     * Match only packets with a lower value
     */
    permitPacketLengthLt: number;
    /**
     * Match only packets not on a given value
     */
    permitPacketLengthNeq: number;
    /**
     * Packet length end
     */
    permitPacketLengthRangeEnd: number;
    /**
     * Packet length start
     */
    permitPacketLengthRangeStart: number;
    /**
     * Police peak-rate value on this entry
     */
    permitPolicePeakRate: number;
    /**
     * Unit for peak-rate value. Currently only pps (packets per second) is supported
     */
    permitPolicePeakUnit: string;
    /**
     * Set Priority option on this entry
     */
    permitPolicePriority: string;
    /**
     * Unit for police value. Currently only pps (packets per second) is supported
     */
    permitPoliceUnit: string;
    /**
     * Police value
     */
    permitPoliceValue: number;
    /**
     * Match packets with given precedence
     */
    permitPrecedence: string;
    /**
     * An IPv6 Protocol
     */
    permitProtocol: string;
    /**
     * An IPv6 Protocol
     */
    permitRangeEndProtocol: string;
    /**
     * An IPv6 Protocol
     */
    permitRangeStartProtocol: string;
    /**
     * qos-group number
     */
    permitSetQosGroup: number;
    /**
     * Set ttl value
     */
    permitSetTtl: number;
    /**
     * Source IP address
     */
    permitSourceAddress: string;
    /**
     * Any source host
     */
    permitSourceAny: boolean;
    /**
     * A single source host
     */
    permitSourceHost: string;
    /**
     * IPv6 source network object group
     */
    permitSourceNetGroup: string;
    /**
     * Match only packets on a given port number
     */
    permitSourcePortEq: string;
    /**
     * source port object group
     */
    permitSourcePortGroup: string;
    /**
     * Match only packet with a greater port number
     */
    permitSourcePortGt: string;
    /**
     * Match only packets with a lower port number
     */
    permitSourcePortLt: string;
    /**
     * Match only packets not on a given port
     */
    permitSourcePortNeq: string;
    /**
     * Port number
     */
    permitSourcePortRangeEnd: string;
    /**
     * Port number
     */
    permitSourcePortRangeStart: string;
    /**
     * Source IP address prefix length.Either wildcard-mask or prefix-length is supported along with address.
     */
    permitSourcePrefixLength: number;
    /**
     * Source IP address mask. Either wildcard-mask or prefix-length is supported along with address.
     */
    permitSourceWildcardMask: string;
    /**
     * Match only packets with a given value
     */
    permitTtlEq: number;
    /**
     * Match only packet with a greater value
     */
    permitTtlGt: number;
    /**
     * Match only packets with a lower value
     */
    permitTtlLt: number;
    /**
     * Match only packets not on a given value
     */
    permitTtlNeq: number;
    /**
     * ttl range higher value
     */
    permitTtlRangeEnd: number;
    /**
     * ttl range lower value
     */
    permitTtlRangeStart: number;
    /**
     * Comment for access list
     */
    remark: string;
    /**
     * Sequence number for this entry
     */
    sequenceNumber: number;
}

export interface GetIpv6PrefixListSequence {
    /**
     * Mask length of IPv6 address
     */
    mask: number;
    /**
     * Exact prefix length to be matched
     */
    matchPrefixLengthEq: number;
    /**
     * Minimum prefix length to be matched
     */
    matchPrefixLengthGe: number;
    /**
     * Maximum prefix length to be matched
     */
    matchPrefixLengthLe: number;
    /**
     * specify the type to be either deny (or) permit
     */
    permission: string;
    /**
     * IPv6 address prefix
     */
    prefix: string;
    /**
     * Comments for prefix list
     */
    remark: string;
    /**
     * Sequence number
     */
    sequenceNumber: number;
}

export interface GetKeyChainKey {
    /**
     * Never expires
     */
    acceptLifetimeInfinite: boolean;
    /**
     * Day of the month
     */
    acceptLifetimeStartTimeDayOfMonth: number;
    /**
     * Start time hour
     */
    acceptLifetimeStartTimeHour: number;
    /**
     * Start time minute
     */
    acceptLifetimeStartTimeMinute: number;
    /**
     * Month of the year
     */
    acceptLifetimeStartTimeMonth: string;
    /**
     * Start time second
     */
    acceptLifetimeStartTimeSecond: number;
    /**
     * Year
     */
    acceptLifetimeStartTimeYear: number;
    /**
     * Choose cryptographic algorithm
     */
    cryptographicAlgorithm: string;
    /**
     * Configure a Key
     */
    keyName: string;
    /**
     * Encrypted key string (even number of characters with first two as digits and sum less than 53, and rest of the characters should be hex digits)
     */
    keyStringPassword: string;
    /**
     * Never expires
     */
    sendLifetimeInfinite: boolean;
    /**
     * Day of the month
     */
    sendLifetimeStartTimeDayOfMonth: number;
    /**
     * Start time hour
     */
    sendLifetimeStartTimeHour: number;
    /**
     * Start time minute
     */
    sendLifetimeStartTimeMinute: number;
    /**
     * Month of the year
     */
    sendLifetimeStartTimeMonth: string;
    /**
     * Start time second
     */
    sendLifetimeStartTimeSecond: number;
    /**
     * Year
     */
    sendLifetimeStartTimeYear: number;
}

export interface GetL2vpnBridgeGroupBridgeDomainEvi {
    /**
     * Ethernet VPN identifier
     */
    vpnId: number;
}

export interface GetL2vpnBridgeGroupBridgeDomainInterface {
    /**
     * Specify interface name
     */
    interfaceName: string;
    /**
     * Configure split-horizon group
     */
    splitHorizonGroup: boolean;
}

export interface GetL2vpnBridgeGroupBridgeDomainSegmentRoutingSrv6Evi {
    /**
     * Ethernet VPN identifier for srv6
     */
    vpnId: number;
}

export interface GetL2vpnBridgeGroupBridgeDomainVni {
    /**
     * VxLAN VPN identifier
     */
    vniId: number;
}

export interface GetL2vpnXconnectGroup {
    /**
     * Specify the group the cross connects belong to
     */
    groupName: string;
}

export interface GetL2vpnXconnectGroupP2pEvpnServiceNeighbor {
    /**
     * PW class template name to use
     */
    pwClass: string;
    /**
     * Specify service ID (used as local and remote ac-id)
     */
    serviceId: number;
    /**
     * Ethernet VPN Identifier
     */
    vpnId: number;
}

export interface GetL2vpnXconnectGroupP2pEvpnTargetNeighbor {
    /**
     * PW class template name to use
     */
    pwClass: string;
    /**
     * Specify remote attachment circuit identifier
     */
    remoteAcId: number;
    /**
     * Specify source attachment circuit identifier
     */
    source: number;
    /**
     * Ethernet VPN Identifier
     */
    vpnId: number;
}

export interface GetL2vpnXconnectGroupP2pInterface {
    /**
     * Specify (sub-)interface name to cross connect
     */
    interfaceName: string;
}

export interface GetL2vpnXconnectGroupP2pIpv4Neighbor {
    /**
     * IPv4
     */
    address: string;
    /**
     * PW class template name to use for this XC
     */
    pwClass: string;
    /**
     * Specify the pseudowire id
     */
    pwId: number;
}

export interface GetL2vpnXconnectGroupP2pIpv6Neighbor {
    /**
     * IPv6
     */
    address: string;
    /**
     * PW class template name to use for this XC
     */
    pwClass: string;
    /**
     * Specify the pseudowire id
     */
    pwId: number;
}

export interface GetL2vpnXconnectGroupP2pNeighborEvpnEviSegmentRoutingService {
    /**
     * PW locator to use for EVPN SID allocation
     */
    segmentRoutingSrv6Locator: string;
    /**
     * Specify service ID (used as local and remote ac-id)
     */
    serviceId: number;
    /**
     * Ethernet VPN Identifier
     */
    vpnId: number;
}

export interface GetLoggingSourceInterfaceVrf {
    /**
     * Set VRF option
     */
    name: string;
}

export interface GetLoggingVrfHostIpv4Address {
    /**
     * IPV4 address of the logging host
     */
    ipv4Address: string;
    /**
     * Set severity operator of  messages for particular remote host/vrf
     */
    operator: string;
    /**
     * Set UDP port for this remote host/vrf
     */
    port: number;
    /**
     * Set severity of  messages for particular remote host/vrf
     */
    severity: string;
}

export interface GetLoggingVrfHostIpv6Address {
    /**
     * IPV6 address of the logging host
     */
    ipv6Address: string;
    /**
     * Set severity operator of  messages for particular remote host/vrf
     */
    operator: string;
    /**
     * Set UDP port for this remote host/vrf
     */
    port: number;
    /**
     * Set severity of  messages for particular remote host/vrf
     */
    severity: string;
}

export interface GetMplsLdpAddressFamily {
    /**
     * Configure Address Family and its parameters
     */
    afName: string;
    /**
     * IP access-list
     */
    labelLocalAllocateForAccessList: string;
    /**
     * Allocate label for host routes only
     */
    labelLocalAllocateForHostRoutes: boolean;
}

export interface GetMplsLdpInterface {
    /**
     * Enable LDP on an interface and enter interface submode
     */
    interfaceName: string;
}

export interface GetMplsLdpMldpAddressFamily {
    /**
     * Enable recursive forwarding
     */
    forwardingRecursive: boolean;
    /**
     * Route policy
     */
    forwardingRecursiveRoutePolicy: string;
    /**
     * MBB delay
     */
    makeBeforeBreakDelay: number;
    /**
     * Configure Address Family and its parameters
     */
    name: string;
    /**
     * MLDP Recursive FEC enable
     */
    recursiveFec: boolean;
}

export interface GetNtpAccessGroupVrf {
    /**
     * Provide full access
     */
    ipv4Peer: string;
    /**
     * Allow only control queries
     */
    ipv4QueryOnly: string;
    /**
     * Provide server and query access
     */
    ipv4Serve: string;
    /**
     * Provide only server access
     */
    ipv4ServeOnly: string;
    /**
     * Provide full access
     */
    ipv6Peer: string;
    /**
     * Allow only control queries
     */
    ipv6QueryOnly: string;
    /**
     * Provide server and query access
     */
    ipv6Serve: string;
    /**
     * Provide only server access
     */
    ipv6ServeOnly: string;
    /**
     * Specify non-default VRF
     */
    vrfName: string;
}

export interface GetNtpAuthenticationKey {
    /**
     * Authentication key for trusted time sources
     */
    keyNumber: number;
    /**
     * Specify an encrypted key
     */
    md5Encrypted: string;
}

export interface GetNtpCmacAuthenticationKey {
    /**
     * Specify an encrypted key
     */
    cmacEncrypted: string;
    /**
     * Authentication key for trusted time sources
     */
    keyNumber: number;
}

export interface GetNtpHmacSha1AuthenticationKey {
    /**
     * Specify an encrypted key
     */
    hmacSha1Encrypted: string;
    /**
     * Authentication key for trusted time sources
     */
    keyNumber: number;
}

export interface GetNtpHmacSha2AuthenticationKey {
    /**
     * Specify an encrypted key
     */
    hmacSha2Encrypted: string;
    /**
     * Authentication key for trusted time sources
     */
    keyNumber: number;
}

export interface GetNtpInterface {
    /**
     * Configure broadcast destination address
     */
    broadcastDestination: string;
    /**
     * Configure broadcast authentication key
     */
    broadcastKey: number;
    /**
     * Configure NTP version
     */
    broadcastVersion: number;
    /**
     * Disable NTP
     */
    disable: boolean;
    /**
     * Configure NTP on an interface
     */
    interfaceName: string;
}

export interface GetNtpInterfaceVrf {
    /**
     * Configure NTP on an interface
     */
    interfaces: outputs.GetNtpInterfaceVrfInterface[];
    /**
     * Specify non-default VRF
     */
    vrfName: string;
}

export interface GetNtpInterfaceVrfInterface {
    /**
     * Listen to NTP broadcasts
     */
    broadcastClient: boolean;
    /**
     * Configure broadcast destination address
     */
    broadcastDestination: string;
    /**
     * Configure broadcast authentication key
     */
    broadcastKey: number;
    /**
     * Configure NTP version
     */
    broadcastVersion: number;
    /**
     * Disable NTP
     */
    disable: boolean;
    /**
     * Configure NTP on an interface
     */
    interfaceName: string;
}

export interface GetNtpIpv4PeersServer {
    /**
     * Peer/server address
     */
    address: string;
    /**
     * Use burst mode
     */
    burst: boolean;
    /**
     * Use initial burst mode
     */
    iburst: boolean;
    /**
     * Configure peer authentication key
     */
    key: number;
    /**
     * Configure maximum polling rate
     */
    maxpoll: number;
    /**
     * Configure minimum polling rate
     */
    minpoll: number;
    /**
     * Prefer this peer when possible
     */
    prefer: boolean;
    /**
     * Interface for source address
     */
    source: string;
    /**
     * Specify peer/server
     */
    type: string;
    /**
     * Configure NTP version
     */
    version: number;
}

export interface GetNtpIpv6PeersServer {
    /**
     * Peer/server address
     */
    address: string;
    /**
     * Use burst mode
     */
    burst: boolean;
    /**
     * Use initial burst mode
     */
    iburst: boolean;
    /**
     * IPv6 address (must be same as key node 'address')
     */
    ipv6Address: string;
    /**
     * Configure peer authentication key
     */
    key: number;
    /**
     * Configure maximum polling rate
     */
    maxpoll: number;
    /**
     * Configure minimum polling rate
     */
    minpoll: number;
    /**
     * Prefer this peer when possible
     */
    prefer: boolean;
    /**
     * Interface for source address
     */
    source: string;
    /**
     * Specify peer/server
     */
    type: string;
    /**
     * Configure NTP version
     */
    version: number;
}

export interface GetNtpPeersServersVrf {
    /**
     * Specify IPv4 address
     */
    ipv4PeersServers: outputs.GetNtpPeersServersVrfIpv4PeersServer[];
    /**
     * Specify IPv6 address
     */
    ipv6PeersServers: outputs.GetNtpPeersServersVrfIpv6PeersServer[];
    /**
     * Specify non-default VRF
     */
    vrfName: string;
}

export interface GetNtpPeersServersVrfIpv4PeersServer {
    /**
     * Peer/server address
     */
    address: string;
    /**
     * Use burst mode
     */
    burst: boolean;
    /**
     * Use initial burst mode
     */
    iburst: boolean;
    /**
     * Configure peer authentication key
     */
    key: number;
    /**
     * Configure maximum polling rate
     */
    maxpoll: number;
    /**
     * Configure minimum polling rate
     */
    minpoll: number;
    /**
     * Prefer this peer when possible
     */
    prefer: boolean;
    /**
     * Interface for source address
     */
    source: string;
    /**
     * Specify peer/server
     */
    type: string;
    /**
     * Configure NTP version
     */
    version: number;
}

export interface GetNtpPeersServersVrfIpv6PeersServer {
    /**
     * Peer/server address
     */
    address: string;
    /**
     * Use burst mode
     */
    burst: boolean;
    /**
     * Use initial burst mode
     */
    iburst: boolean;
    /**
     * IPv6 address (must be same as key node 'address')
     */
    ipv6Address: string;
    /**
     * Configure peer authentication key
     */
    key: number;
    /**
     * Configure maximum polling rate
     */
    maxpoll: number;
    /**
     * Configure minimum polling rate
     */
    minpoll: number;
    /**
     * Prefer this peer when possible
     */
    prefer: boolean;
    /**
     * Interface for source address
     */
    source: string;
    /**
     * Specify peer/server
     */
    type: string;
    /**
     * Configure NTP version
     */
    version: number;
}

export interface GetNtpSourceVrf {
    /**
     * default interface for the VRF
     */
    interfaceName: string;
    /**
     * Specify non-default VRF
     */
    vrfName: string;
}

export interface GetNtpTrustedKey {
    /**
     * Key numbers for trusted time sources
     */
    keyNumber: number;
}

export interface GetPceApiUser {
    /**
     * Specify unencrypted password
     */
    passwordEncrypted: string;
    /**
     * Northbound API username
     */
    userName: string;
}

export interface GetPceStateSyncIpv4 {
    /**
     * IPv4 address
     */
    address: string;
}

export interface GetPolicyMapQosClass {
    /**
     * Bandwidth value unit
     */
    bandwidthRemainingUnit: string;
    /**
     * Bandwidth value
     */
    bandwidthRemainingValue: string;
    /**
     * Name of the class-map
     */
    name: string;
    /**
     * Drop packet
     */
    policeConformActionDrop: boolean;
    /**
     * Transmit packet
     */
    policeConformActionTransmit: boolean;
    /**
     * Drop packet
     */
    policeExceedActionDrop: boolean;
    /**
     * Transmit packet
     */
    policeExceedActionTransmit: boolean;
    /**
     * Rate unit
     */
    policeRateUnit: string;
    /**
     * Committed Information Rate
     */
    policeRateValue: string;
    /**
     * Drop packet
     */
    policeViolateActionDrop: boolean;
    /**
     * Transmit packet
     */
    policeViolateActionTransmit: boolean;
    /**
     * Configure a priority level
     */
    priorityLevel: number;
    /**
     * Configure queue-limit (taildrop threshold) for this class
     */
    queueLimits: outputs.GetPolicyMapQosClassQueueLimit[];
    /**
     * Name of the child service policy
     */
    servicePolicyName: string;
    /**
     * Set IP DSCP (DiffServ CodePoint)
     */
    setDscp: string;
    /**
     * Sets the experimental value of the MPLS packet top-most labels.
     */
    setMplsExperimentalTopmost: number;
    /**
     * Shape rate unit
     */
    shapeAverageRateUnit: string;
    shapeAverageRateValue: string;
    /**
     * The type of class-map
     */
    type: string;
}

export interface GetPolicyMapQosClassQueueLimit {
    /**
     * queue-limit unit
     */
    unit: string;
    /**
     * queue-limit value
     */
    value: string;
}

export interface GetRouterBgpAddressFamilyAggregateAddress {
    /**
     * IPv6 Aggregate address and mask or masklength
     */
    address: string;
    /**
     * Generate AS confed set path information
     */
    asConfedSet: boolean;
    /**
     * Generate AS set path information
     */
    asSet: boolean;
    /**
     * Network in prefix/length format (prefix part)
     */
    masklength: number;
    /**
     * Filter more specific routes from updates
     */
    summaryOnly: boolean;
}

export interface GetRouterBgpAddressFamilyNetwork {
    /**
     * IPv6 network and mask or masklength
     */
    address: string;
    /**
     * Network in prefix/length format (prefix part)
     */
    masklength: number;
    /**
     * Route-policy to modify the attributes
     */
    routePolicy: string;
}

export interface GetRouterBgpAddressFamilyRedistributeIse {
    /**
     * ISO IS-IS
     */
    instanceName: string;
    /**
     * Redistribute ISIS level 1 routes
     */
    levelOne: boolean;
    /**
     * Redistribute ISIS level 1 inter-area routes
     */
    levelOneInterArea: boolean;
    /**
     * Redistribute ISIS level 1 inter-area routes
     */
    levelOneOneInterArea: boolean;
    /**
     * Redistribute ISIS level 2 ISIS routes
     */
    levelOneTwo: boolean;
    /**
     * Redistribute ISIS level 1 inter-area routes
     */
    levelOneTwoOneInterArea: boolean;
    /**
     * Redistribute ISIS level 2 ISIS routes
     */
    levelTwo: boolean;
    /**
     * Redistribute ISIS level 1 inter-area routes
     */
    levelTwoOneInterArea: boolean;
    /**
     * Metric for redistributed routes
     */
    metric: number;
    /**
     * Route policy reference
     */
    routePolicy: string;
}

export interface GetRouterBgpAddressFamilyRedistributeOspf {
    /**
     * Redistribute OSPF external routes
     */
    matchExternal: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchExternalNssaExternal: boolean;
    /**
     * Redistribute OSPF internal routes
     */
    matchInternal: boolean;
    /**
     * Redistribute OSPF external routes
     */
    matchInternalExternal: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchInternalNssaExternal: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchNssaExternal: boolean;
    /**
     * Metric for redistributed routes
     */
    metric: number;
    /**
     * Route policy reference
     */
    routePolicy: string;
    /**
     * Open Shortest Path First (OSPF)
     */
    routerTag: string;
}

export interface GetRouterBgpNeighbor {
    /**
     * time in milliseconds
     */
    advertisementIntervalMilliseconds: number;
    /**
     * Minimum interval between sending BGP routing updates
     */
    advertisementIntervalSeconds: number;
    /**
     * Enable Fast detection
     */
    bfdFastDetect: boolean;
    /**
     * Prevent bfd settings from being inherited from the parent
     */
    bfdFastDetectInheritanceDisable: boolean;
    /**
     * Hold down neighbor session until BFD session is up
     */
    bfdFastDetectStrictMode: boolean;
    /**
     * Hello interval
     */
    bfdMinimumInterval: number;
    /**
     * Detect multiplier
     */
    bfdMultiplier: number;
    /**
     * Neighbor specific description
     */
    description: string;
    /**
     * maximum hop count
     */
    ebgpMultihopMaximumHopCount: number;
    /**
     * Bypass the directly connected nexthop check for single-hop eBGP peering
     */
    ignoreConnectedCheck: boolean;
    /**
     * bgp as-number
     */
    localAs: string;
    /**
     * Dual-AS mode
     */
    localAsDualAs: boolean;
    /**
     * Do not prepend local AS to announcements from this neighbor
     */
    localAsNoPrepend: boolean;
    /**
     * Prepend only local AS to announcements to this neighbor
     */
    localAsReplaceAs: boolean;
    /**
     * Neighbor address
     */
    neighborAddress: string;
    /**
     * Specifies an ENCRYPTED password will follow
     */
    password: string;
    /**
     * bgp as-number
     */
    remoteAs: string;
    /**
     * Administratively shut down this neighbor
     */
    shutdown: boolean;
    /**
     * Holdtime. Set 0 to disable keepalives/hold time.
     */
    timersHoldtime: string;
    /**
     * BGP timers
     */
    timersKeepaliveInterval: number;
    /**
     * Minimum acceptable holdtime from neighbor. Set 0 to disable keepalives/hold time.
     */
    timersMinimumAcceptableHoldtime: string;
    /**
     * Enable EBGP TTL security
     */
    ttlSecurity: boolean;
    /**
     * Source of routing updates
     */
    updateSource: string;
    /**
     * Inherit configuration from a neighbor-group
     */
    useNeighborGroup: string;
}

export interface GetRouterBgpNeighborGroupAddressFamily {
    /**
     * Enter Address Family command mode
     */
    afName: string;
    /**
     * Disable the next hop calculation for this neighbor
     */
    nextHopSelf: boolean;
    /**
     * Prevent next-hop-self from being inherited from the parent
     */
    nextHopSelfInheritanceDisable: boolean;
    /**
     * Apply route policy to inbound routes
     */
    routePolicyIn: string;
    /**
     * Apply route policy to outbound routes
     */
    routePolicyOut: string;
    /**
     * Configure a neighbor as Route Reflector client
     */
    routeReflectorClient: boolean;
    /**
     * Prevent route-reflector-client from being inherited from the parent
     */
    routeReflectorClientInheritanceDisable: boolean;
    /**
     * Always use soft reconfig, even if route refresh is supported
     */
    softReconfigurationInboundAlways: boolean;
}

export interface GetRouterBgpVrfAddressFamilyAggregateAddress {
    /**
     * IPv6 Aggregate address and mask or masklength
     */
    address: string;
    /**
     * Generate AS confed set path information
     */
    asConfedSet: boolean;
    /**
     * Generate AS set path information
     */
    asSet: boolean;
    /**
     * Network in prefix/length format (prefix part)
     */
    masklength: number;
    /**
     * Filter more specific routes from updates
     */
    summaryOnly: boolean;
}

export interface GetRouterBgpVrfAddressFamilyNetwork {
    /**
     * IPv6 network and mask or masklength
     */
    address: string;
    /**
     * Network in prefix/length format (prefix part)
     */
    masklength: number;
    /**
     * Route-policy to modify the attributes
     */
    routePolicy: string;
}

export interface GetRouterBgpVrfAddressFamilyRedistributeOspf {
    /**
     * Redistribute OSPF external routes
     */
    matchExternal: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchExternalNssaExternal: boolean;
    /**
     * Redistribute OSPF internal routes
     */
    matchInternal: boolean;
    /**
     * Redistribute OSPF external routes
     */
    matchInternalExternal: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchInternalNssaExternal: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchNssaExternal: boolean;
    /**
     * Metric for redistributed routes
     */
    metric: number;
    /**
     * Route policy reference
     */
    routePolicy: string;
    /**
     * Open Shortest Path First (OSPF)
     */
    routerTag: string;
}

export interface GetRouterBgpVrfNeighbor {
    /**
     * time in milliseconds
     */
    advertisementIntervalMilliseconds: number;
    /**
     * Minimum interval between sending BGP routing updates
     */
    advertisementIntervalSeconds: number;
    /**
     * Enable Fast detection
     */
    bfdFastDetect: boolean;
    /**
     * Prevent bfd settings from being inherited from the parent
     */
    bfdFastDetectDisable: boolean;
    /**
     * Hold down neighbor session until BFD session is up
     */
    bfdFastDetectStrictMode: boolean;
    /**
     * Hello interval
     */
    bfdMinimumInterval: number;
    /**
     * Detect multiplier
     */
    bfdMultiplier: number;
    /**
     * Neighbor specific description
     */
    description: string;
    /**
     * maximum hop count
     */
    ebgpMultihopMaximumHopCount: number;
    /**
     * Bypass the directly connected nexthop check for single-hop eBGP peering
     */
    ignoreConnectedCheck: boolean;
    /**
     * bgp as-number
     */
    localAs: string;
    /**
     * Dual-AS mode
     */
    localAsDualAs: boolean;
    /**
     * Do not prepend local AS to announcements from this neighbor
     */
    localAsNoPrepend: boolean;
    /**
     * Prepend only local AS to announcements to this neighbor
     */
    localAsReplaceAs: boolean;
    /**
     * Neighbor address
     */
    neighborAddress: string;
    /**
     * Specifies an ENCRYPTED password will follow
     */
    password: string;
    /**
     * bgp as-number
     */
    remoteAs: string;
    /**
     * Administratively shut down this neighbor
     */
    shutdown: boolean;
    /**
     * Holdtime. Set 0 to disable keepalives/hold time.
     */
    timersHoldtime: string;
    /**
     * BGP timers
     */
    timersKeepaliveInterval: number;
    /**
     * Enable EBGP TTL security
     */
    ttlSecurity: boolean;
    /**
     * Source of routing updates
     */
    updateSource: string;
    /**
     * Inherit configuration from a neighbor-group
     */
    useNeighborGroup: string;
}

export interface GetRouterHsrpInterfaceIpv4GroupV1SecondaryIpv4Address {
    /**
     * Set secondary hot standby IP address
     */
    address: string;
}

export interface GetRouterHsrpInterfaceIpv4GroupV1TrackInterface {
    /**
     * Priority decrement
     */
    priorityDecrement: number;
    /**
     * Configure tracking
     */
    trackName: string;
}

export interface GetRouterHsrpInterfaceIpv4GroupV1TrackObject {
    /**
     * Object tracking
     */
    objectName: string;
    /**
     * Priority decrement
     */
    priorityDecrement: number;
}

export interface GetRouterHsrpInterfaceIpv4GroupV2SecondaryIpv4Address {
    /**
     * Set secondary hot standby IP address
     */
    address: string;
}

export interface GetRouterHsrpInterfaceIpv4GroupV2TrackInterface {
    /**
     * Priority decrement
     */
    priorityDecrement: number;
    /**
     * Configure tracking
     */
    trackName: string;
}

export interface GetRouterHsrpInterfaceIpv4GroupV2TrackObject {
    /**
     * Object tracking
     */
    objectName: string;
    /**
     * Priority decrement
     */
    priorityDecrement: number;
}

export interface GetRouterHsrpInterfaceIpv6GroupV2Address {
    /**
     * Set Global HSRP IPv6 address
     */
    address: string;
}

export interface GetRouterHsrpInterfaceIpv6GroupV2TrackInterface {
    /**
     * Priority decrement
     */
    priorityDecrement: number;
    /**
     * Configure tracking
     */
    trackName: string;
}

export interface GetRouterHsrpInterfaceIpv6GroupV2TrackObject {
    /**
     * Object tracking
     */
    objectName: string;
    /**
     * Priority decrement
     */
    priorityDecrement: number;
}

export interface GetRouterIsisAddressFamilyMaximumRedistributedPrefixesLevel {
    /**
     * Set maximum redistributed prefixes for one level only
     */
    levelId: number;
    /**
     * Maximum number of redistributed prefixes
     */
    maximumPrefixes: number;
}

export interface GetRouterIsisAddressFamilyMetricStyleLevel {
    /**
     * Set metric-style for one level only
     */
    levelId: number;
    /**
     * Use old style of TLVs with narrow metric
     */
    narrow: boolean;
    /**
     * Send and accept both styles of TLVs during transition
     */
    transition: boolean;
    /**
     * Use new style of TLVs to carry wider metric
     */
    wide: boolean;
}

export interface GetRouterIsisAddressFamilyRedistributeIse {
    /**
     * IS-IS
     */
    instanceId: string;
    /**
     * Route policy reference
     */
    routePolicy: string;
}

export interface GetRouterIsisAddressFamilySegmentRoutingSrv6Locator {
    /**
     * Advertise the locator only in the specified level
     */
    level: number;
    /**
     * Enter SRv6 Locator submode
     */
    locatorName: string;
}

export interface GetRouterIsisAddressFamilySpfPrefixPriority {
    /**
     * Access-list name
     */
    accessListName: string;
    /**
     * prefix priority
     */
    priority: string;
    /**
     * Specify a tag to indicate priority
     */
    tag: number;
}

export interface GetRouterIsisAffinityMap {
    /**
     * Bit position for affinity attribute value
     */
    bitPosition: number;
    /**
     * Affinity map configuration
     */
    name: string;
}

export interface GetRouterIsisFlexAlgo {
    /**
     * Advertise the Flex-Algo Definition
     */
    advertiseDefinition: boolean;
    /**
     * Flex Algorithm definition
     */
    algorithmNumber: number;
    /**
     * Use delay as metric
     */
    metricTypeDelay: boolean;
}

export interface GetRouterIsisInterface {
    /**
     * Configure circuit type for interface
     */
    circuitType: string;
    /**
     * Disable hello-padding
     */
    helloPaddingDisable: boolean;
    /**
     * Enable hello-padding during adjacency formation only
     */
    helloPaddingSometimes: boolean;
    /**
     * Enter the IS-IS interface configuration submode
     */
    interfaceName: string;
    /**
     * Do not establish adjacencies over this interface
     */
    passive: boolean;
    /**
     * Treat active LAN interface as point-to-point
     */
    pointToPoint: boolean;
    /**
     * Set priority for Designated Router election
     */
    priority: number;
    /**
     * Shutdown IS-IS on this interface
     */
    shutdown: boolean;
    /**
     * Do not advertise connected prefixes of this interface
     */
    suppressed: boolean;
}

export interface GetRouterIsisInterfaceAddressFamilyFastReroutePerPrefixLevel {
    /**
     * Enable EPCFRR LFA for one level only
     */
    levelId: number;
    /**
     * Enable TI LFA computation
     */
    tiLfa: boolean;
}

export interface GetRouterIsisInterfaceAddressFamilyMetricLevel {
    /**
     * Set metric for one level only
     */
    levelId: number;
    /**
     * Maximum wide metric. All routers will exclude this link from their SPF
     */
    maximum: boolean;
    /**
     * Default metric
     */
    metric: number;
}

export interface GetRouterIsisNet {
    /**
     * A Network Entity Title (NET) for this process
     */
    netId: string;
}

export interface GetRouterIsisSetOverloadBitLevel {
    /**
     * If overload-bit set advertise IP prefixes learned from other protocols
     */
    advertiseExternal: boolean;
    /**
     * If overload-bit set advertise IP prefixes learned from another ISIS level
     */
    advertiseInterlevel: boolean;
    /**
     * Set overload-bit for one level only
     */
    levelId: number;
    /**
     * Time in seconds to advertise ourself as overloaded after reboot
     */
    onStartupAdvertiseAsOverloaded: boolean;
    /**
     * Time in seconds to advertise ourself as overloaded after reboot
     */
    onStartupAdvertiseAsOverloadedTimeToAdvertise: number;
    /**
     * Set overload bit on startup until BGP signals convergence, or timeout
     */
    onStartupWaitForBgp: boolean;
}

export interface GetRouterOspfArea {
    /**
     * Enter the OSPF area configuration submode
     */
    areaId: string;
}

export interface GetRouterOspfAreaInterfacePrefixSidAlgorithm {
    /**
     * Force penultimate hop to send explicit-null label
     */
    absoluteExplicitNull: boolean;
    /**
     * Not a node SID (e.g. for anycast SID use)
     */
    absoluteNFlagClear: boolean;
    /**
     * SID value
     */
    absoluteSidLabel: number;
    /**
     * Algorithm Specific Prefix SID Configuration
     */
    algorithmNumber: number;
    /**
     * Force penultimate hop to send explicit-null label
     */
    indexExplicitNull: boolean;
    /**
     * Not a node SID (e.g. for anycast SID use)
     */
    indexNFlagClear: boolean;
    /**
     * SID Index
     */
    indexSidIndex: number;
}

export interface GetRouterOspfRedistributeBgp {
    /**
     * bgp as-number
     */
    asNumber: string;
    /**
     * OSPF exterior metric type for redistributed routes
     */
    metricType: string;
    /**
     * Set tag for routes redistributed into OSPF
     */
    tag: number;
}

export interface GetRouterOspfRedistributeIse {
    /**
     * ISO IS-IS
     */
    instanceName: string;
    /**
     * IS-IS level-1 routes only
     */
    level1: boolean;
    /**
     * IS-IS level-1 and level-2 routes
     */
    level12: boolean;
    /**
     * IS-IS level-2 routes only
     */
    level2: boolean;
    /**
     * OSPF exterior metric type for redistributed routes
     */
    metricType: string;
    /**
     * Set tag for routes redistributed into OSPF
     */
    tag: number;
}

export interface GetRouterOspfRedistributeOspf {
    /**
     * Open Shortest Path First (OSPF)
     */
    instanceName: string;
    /**
     * Redistribute OSPF external routes
     */
    matchExternal: boolean;
    /**
     * Redistribute OSPF internal routes
     */
    matchInternal: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchNssaExternal: boolean;
    /**
     * OSPF exterior metric type for redistributed routes
     */
    metricType: string;
    /**
     * Set tag for routes redistributed into OSPF
     */
    tag: number;
}

export interface GetRouterOspfVrfArea {
    /**
     * Enter the OSPF area configuration submode
     */
    areaId: string;
}

export interface GetRouterOspfVrfRedistributeBgp {
    /**
     * bgp as-number
     */
    asNumber: string;
    /**
     * OSPF exterior metric type for redistributed routes
     */
    metricType: string;
    /**
     * Set tag for routes redistributed into OSPF
     */
    tag: number;
}

export interface GetRouterOspfVrfRedistributeIse {
    /**
     * ISO IS-IS
     */
    instanceName: string;
    /**
     * IS-IS level-1 routes only
     */
    level1: boolean;
    /**
     * IS-IS level-1 and level-2 routes
     */
    level12: boolean;
    /**
     * IS-IS level-2 routes only
     */
    level2: boolean;
    /**
     * OSPF exterior metric type for redistributed routes
     */
    metricType: string;
    /**
     * Set tag for routes redistributed into OSPF
     */
    tag: number;
}

export interface GetRouterOspfVrfRedistributeOspf {
    /**
     * Open Shortest Path First (OSPF)
     */
    instanceName: string;
    /**
     * Redistribute OSPF external routes
     */
    matchExternal: boolean;
    /**
     * Redistribute OSPF internal routes
     */
    matchInternal: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchNssaExternal: boolean;
    /**
     * OSPF exterior metric type for redistributed routes
     */
    metricType: string;
    /**
     * Set tag for routes redistributed into OSPF
     */
    tag: number;
}

export interface GetRouterStaticIpv4MulticastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv4MulticastNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv4MulticastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv4MulticastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses: outputs.GetRouterStaticIpv4MulticastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses: outputs.GetRouterStaticIpv4MulticastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces: outputs.GetRouterStaticIpv4MulticastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface GetRouterStaticIpv4MulticastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv4MulticastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv4MulticastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv4UnicastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv4UnicastNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv4UnicastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv4UnicastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses: outputs.GetRouterStaticIpv4UnicastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses: outputs.GetRouterStaticIpv4UnicastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces: outputs.GetRouterStaticIpv4UnicastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface GetRouterStaticIpv4UnicastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv4UnicastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv4UnicastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv6MulticastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv6MulticastNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv6MulticastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv6MulticastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses: outputs.GetRouterStaticIpv6MulticastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses: outputs.GetRouterStaticIpv6MulticastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces: outputs.GetRouterStaticIpv6MulticastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface GetRouterStaticIpv6MulticastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv6MulticastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv6MulticastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv6UnicastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv6UnicastNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv6UnicastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv6UnicastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses: outputs.GetRouterStaticIpv6UnicastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses: outputs.GetRouterStaticIpv6UnicastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces: outputs.GetRouterStaticIpv6UnicastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface GetRouterStaticIpv6UnicastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv6UnicastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticIpv6UnicastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv4MulticastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv4MulticastNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv4MulticastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv4MulticastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses: outputs.GetRouterStaticVrfIpv4MulticastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses: outputs.GetRouterStaticVrfIpv4MulticastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces: outputs.GetRouterStaticVrfIpv4MulticastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface GetRouterStaticVrfIpv4MulticastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv4MulticastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv4MulticastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv4UnicastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv4UnicastNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv4UnicastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv4UnicastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses: outputs.GetRouterStaticVrfIpv4UnicastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses: outputs.GetRouterStaticVrfIpv4UnicastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces: outputs.GetRouterStaticVrfIpv4UnicastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface GetRouterStaticVrfIpv4UnicastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv4UnicastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv4UnicastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv6MulticastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv6MulticastNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv6MulticastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv6MulticastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses: outputs.GetRouterStaticVrfIpv6MulticastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses: outputs.GetRouterStaticVrfIpv6MulticastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces: outputs.GetRouterStaticVrfIpv6MulticastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface GetRouterStaticVrfIpv6MulticastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv6MulticastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv6MulticastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv6UnicastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv6UnicastNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv6UnicastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv6UnicastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses: outputs.GetRouterStaticVrfIpv6UnicastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses: outputs.GetRouterStaticVrfIpv6UnicastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces: outputs.GetRouterStaticVrfIpv6UnicastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface GetRouterStaticVrfIpv6UnicastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv6UnicastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterStaticVrfIpv6UnicastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description: string;
    /**
     * Distance metric for this route
     */
    distanceMetric: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     */
    metric: number;
    /**
     * Permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
    /**
     * Enable object tracking for static route
     */
    track: string;
}

export interface GetRouterVrrpInterfaceIpv4SecondaryAddress {
    /**
     * VRRP IPv4 address
     */
    address: string;
}

export interface GetRouterVrrpInterfaceIpv4TrackInterface {
    /**
     * Track an interface
     */
    interfaceName: string;
    /**
     * Priority decrement
     */
    priorityDecrement: number;
}

export interface GetRouterVrrpInterfaceIpv4TrackObject {
    /**
     * Object to be tracked
     */
    objectName: string;
    /**
     * Priority decrement
     */
    priorityDecrement: number;
}

export interface GetRouterVrrpInterfaceIpv6TrackInterface {
    /**
     * Track an interface
     */
    interfaceName: string;
    /**
     * Priority decrement
     */
    priorityDecrement: number;
}

export interface GetRouterVrrpInterfaceIpv6TrackObject {
    /**
     * Object to be tracked
     */
    objectName: string;
    /**
     * Priority decrement
     */
    priorityDecrement: number;
}

export interface GetSegmentRoutingTeOnDemandColor {
    /**
     * Color
     */
    color: number;
    /**
     * Protection Type
     */
    constraintSegmentsProtectionType: string;
    /**
     * '0' for regular SIDs, '1' for strict-spf SIDs, '128' - '255' for algorithm SIDs
     */
    constraintSegmentsSidAlgorithm: number;
    /**
     * Anycast Prefix SID Inclusion. Applicable for SR-MPLS and SRv6 policies
     */
    dynamicAnycastSidInclusion: boolean;
    /**
     * Metric Type
     */
    dynamicMetricType: string;
    /**
     * True only
     */
    effectiveMetricEnable: boolean;
    /**
     * Metric type, advertised to other protocols
     */
    effectiveMetricType: string;
    /**
     * Integer value of metric
     */
    effectiveMetricValue: number;
    /**
     * Source address
     */
    sourceAddress: string;
    /**
     * IP address type
     */
    sourceAddressType: string;
    /**
     * True only
     */
    srv6Enable: boolean;
    /**
     * SRv6 USID Behavior
     */
    srv6LocatorBehavior: string;
    /**
     * Binding Segment ID type
     */
    srv6LocatorBindingSidType: string;
    /**
     * SRv6 locator name
     */
    srv6LocatorName: string;
}

export interface GetSegmentRoutingTePcePeer {
    /**
     * Remote PCE address
     */
    pceAddress: string;
    /**
     * Precedence value of this PCE
     */
    precedence: number;
}

export interface GetSegmentRoutingTePolicy {
    /**
     * End point address
     */
    policyColorEndpointAddress: string;
    /**
     * Color
     */
    policyColorEndpointColor: number;
    /**
     * End point type
     */
    policyColorEndpointType: string;
    /**
     * Policy name
     */
    policyName: string;
    /**
     * Source address
     */
    sourceAddress: string;
    /**
     * IP address type
     */
    sourceAddressType: string;
    /**
     * True only
     */
    srv6Enable: boolean;
    /**
     * SRv6 USID Behavior
     */
    srv6LocatorBehavior: string;
    /**
     * Binding Segment ID type
     */
    srv6LocatorBindingSidType: string;
    /**
     * SRv6 locator name
     */
    srv6LocatorName: string;
}

export interface GetSegmentRoutingTePolicyCandidatePathPathInfo {
    /**
     * Type of dynamic path to be computed
     */
    hopType: string;
    /**
     * Metric type
     */
    metricType: string;
    /**
     * Path Computation Element Protocol
     */
    pcep: boolean;
    /**
     * Segment-list name
     */
    segmentListName: string;
    /**
     * Path-option type
     */
    type: string;
}

export interface GetSegmentRoutingV6Locator {
    /**
     * Enable a SRv6 locator
     */
    locatorEnable: boolean;
    /**
     * Specify Locator's behavior
     */
    microSegmentBehavior: string;
    /**
     * Locator name
     */
    name: string;
    /**
     * IPv6 Prefix
     */
    prefix: string;
    /**
     * Prefix length
     */
    prefixLength: number;
}

export interface GetSnmpServerCommunity {
    /**
     * The UNENCRYPTED (cleartext) community string
     */
    community: string;
    /**
     * Type of Access-list
     */
    ipv4: string;
    /**
     * Type of Access-list
     */
    ipv6: string;
    /**
     * Read-only community
     */
    ro: boolean;
    /**
     * Read-write community
     */
    rw: boolean;
    /**
     * SDR Owner permissions for MIB Objects
     */
    sdrowner: boolean;
    /**
     * System Owner permissions for MIB objects
     */
    systemowner: boolean;
    /**
     * Restrict this community to a named view
     */
    view: string;
}

export interface GetSnmpServerGroup {
    /**
     * Name of the group
     */
    groupName: string;
    /**
     * Attach a SNMP context
     */
    v3Context: string;
    /**
     * Type of Access-list
     */
    v3Ipv4: string;
    /**
     * Type of Access-list
     */
    v3Ipv6: string;
    /**
     * specify a notify view for the group
     */
    v3Notify: string;
    /**
     * group using authPriv Security Level
     */
    v3Priv: boolean;
    /**
     * specify a read view for this group
     */
    v3Read: string;
    /**
     * specify a write view for this group
     */
    v3Write: string;
}

export interface GetSnmpServerUser {
    /**
     * Group to which the user belongs
     */
    groupName: string;
    /**
     * Name of the user
     */
    userName: string;
    /**
     * Specifies an aes-128 ENCRYPTED authentication password
     */
    v3AuthMd5EncryptionAes: string;
    /**
     * Specifies an default ENCRYPTED authentication password
     */
    v3AuthMd5EncryptionDefault: string;
    /**
     * Specifies an aes-128 ENCRYPTED authentication password
     */
    v3AuthShaEncryptionAes: string;
    /**
     * Specifies an default ENCRYPTED authentication password
     */
    v3AuthShaEncryptionDefault: string;
    /**
     * Type of Access-list
     */
    v3Ipv4: string;
    /**
     * Specifies an aes-128 ENCRYPTED authentication password
     */
    v3PrivAesAes128EncryptionAes: string;
    /**
     * Specifies an default ENCRYPTED authentication password
     */
    v3PrivAesAes128EncryptionDefault: string;
    /**
     * System Owner permissions for MIB objects
     */
    v3Systemowner: boolean;
}

export interface GetSnmpServerViewMibViewFamily {
    /**
     * MIB family is excluded from the view
     */
    excluded: boolean;
    /**
     * MIB family is included in the view
     */
    included: boolean;
    /**
     * MIB view family name
     */
    name: string;
}

export interface GetSnmpServerVrfHostUnencryptedString {
    /**
     * The UNENCRYPTED (cleartext) community string
     */
    communityString: string;
    /**
     * udp port to which notifications should be sent
     */
    udpPort: string;
    versionV3SecurityLevel: string;
}

export interface GetSshServerVrf {
    /**
     * Configure IPv4 access-list
     */
    ipv4AccessList: string;
    /**
     * Configure IPv6 access-list
     */
    ipv6AccessList: string;
    /**
     * Cisco sshd VRF name
     */
    vrfName: string;
}

export interface GetTelnetVrf {
    /**
     * Access list for telnet server
     */
    ipv4ServerAccessList: string;
    /**
     * Set number of allowable telnet sessions
     */
    ipv4ServerMaxServers: number;
    /**
     * Access list for telnet server
     */
    ipv6ServerAccessList: string;
    /**
     * Set number of allowable telnet sessions
     */
    ipv6ServerMaxServers: number;
    /**
     * Name of VRF
     */
    vrfName: string;
}

export interface GetTelnetVrfsDscp {
    /**
     * dscp
     */
    ipv4Dscp: number;
    /**
     * Name of VRF
     */
    vrfName: string;
}

export interface GetVrfAddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat {
    /**
     * Four Byte AS number
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface GetVrfAddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat {
    /**
     * IPv4Address:index (hex or decimal format)
     */
    index: number;
    /**
     * IP address
     */
    ipAddress: string;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface GetVrfAddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat {
    /**
     * Two Byte AS Number
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface GetVrfAddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat {
    /**
     * Four Byte AS number
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface GetVrfAddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat {
    /**
     * IPv4Address:index (hex or decimal format)
     */
    index: number;
    /**
     * IP address
     */
    ipAddress: string;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface GetVrfAddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat {
    /**
     * Two Byte AS Number
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface GetVrfAddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat {
    /**
     * Four Byte AS number
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface GetVrfAddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat {
    /**
     * IPv4Address:index (hex or decimal format)
     */
    index: number;
    /**
     * IP address
     */
    ipAddress: string;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface GetVrfAddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat {
    /**
     * Two Byte AS Number
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface GetVrfAddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat {
    /**
     * Four Byte AS number
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface GetVrfAddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat {
    /**
     * IPv4Address:index (hex or decimal format)
     */
    index: number;
    /**
     * IP address
     */
    ipAddress: string;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface GetVrfAddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat {
    /**
     * Two Byte AS Number
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface GnmiList {
    /**
     * List of maps of key-value pairs which represents the attributes and its values. To indicate an empty YANG container use `<EMPTY>` as the value.
     */
    items?: {[key: string]: string}[];
    /**
     * YANG list key attribute(s). In case of multiple keys, those should be separated by a comma (`,`).
     */
    key?: string;
    /**
     * YANG list name.
     */
    name: string;
    /**
     * YANG leaf-list values.
     */
    values?: string[];
}

export interface InterfaceFlowIpv4EgressMonitor {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
}

export interface InterfaceFlowIpv4EgressMonitorSampler {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
    /**
     * Specify a sampler for packets
     */
    samplerMapName: string;
}

export interface InterfaceFlowIpv4IngressMonitor {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
}

export interface InterfaceFlowIpv4IngressMonitorSampler {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
    /**
     * Specify a sampler for packets
     */
    samplerMapName: string;
}

export interface InterfaceFlowIpv6EgressMonitor {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
}

export interface InterfaceFlowIpv6EgressMonitorSampler {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
    /**
     * Specify a sampler for packets
     */
    samplerMapName: string;
}

export interface InterfaceFlowIpv6IngressMonitor {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
}

export interface InterfaceFlowIpv6IngressMonitorSampler {
    /**
     * Specify a flow monitor for packets
     */
    monitorMapName: string;
    /**
     * Specify a sampler for packets
     */
    samplerMapName: string;
}

export interface InterfaceIpv6Address {
    /**
     * IPv6 name or address
     */
    address: string;
    /**
     * Prefix length in bits
     *   - Range: `0`-`128`
     */
    prefixLength: number;
    /**
     * IPv6 address zone
     *   - Default value: `0`
     */
    zone: string;
}

export interface InterfaceServicePolicyInput {
    /**
     * Name of the service policy. Set 'input' for 'service-ipsec and 'service-gre' interfaces
     */
    name: string;
}

export interface InterfaceServicePolicyOutput {
    /**
     * Name of the service policy. Set 'output' for 'service-ipsec and 'service-gre' interfaces
     */
    name: string;
}

export interface Ipv4AccessListSequence {
    /**
     * Capture matched packet
     */
    denyCapture?: boolean;
    /**
     * counter for this ACE
     */
    denyCounter?: string;
    /**
     * Use specified default nexthop on match against this entry
     */
    denyDefault?: boolean;
    /**
     * Destination IP address
     */
    denyDestinationAddress?: string;
    /**
     * Any destination host
     */
    denyDestinationAny?: boolean;
    /**
     * A single destination host
     */
    denyDestinationHost?: string;
    /**
     * IPv4 destination network object group
     */
    denyDestinationNetGroup?: string;
    /**
     * Match only packets on a given port number
     */
    denyDestinationPortEq?: string;
    /**
     * destination port object group
     */
    denyDestinationPortGroup?: string;
    /**
     * Match only packet with a greater port number
     */
    denyDestinationPortGt?: string;
    /**
     * Match only packets with a lower port number
     */
    denyDestinationPortLt?: string;
    /**
     * Match only packets not on a given port
     */
    denyDestinationPortNeq?: string;
    /**
     * Port number
     */
    denyDestinationPortRangeEnd?: string;
    /**
     * Port number
     */
    denyDestinationPortRangeStart?: string;
    /**
     * Destination IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.
     *   - Range: `0`-`32`
     */
    denyDestinationPrefixLength?: number;
    /**
     * Destination IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.
     */
    denyDestinationWildcardMask?: string;
    denyDscp?: string;
    /**
     * Match only packets on a given DSCP value
     */
    denyDscpEq?: string;
    /**
     * Match only packet with a greater DSCP value
     */
    denyDscpGt?: string;
    /**
     * Match only packets with a lower DSCP value
     */
    denyDscpLt?: string;
    /**
     * Match only packets not on a given DSCP value
     */
    denyDscpNeq?: string;
    /**
     * DSCP value
     */
    denyDscpRangeEnd?: string;
    /**
     * DSCP value
     */
    denyDscpRangeStart?: string;
    /**
     * Match only packets with exact protocol numbers
     */
    denyEq?: string;
    /**
     * Match only packets with a given value
     *   - Range: `0`-`8191`
     */
    denyFragmentOffsetEq?: number;
    /**
     * Match only packet with a greater value
     *   - Range: `0`-`8191`
     */
    denyFragmentOffsetGt?: number;
    /**
     * Match only packets with a lower value
     *   - Range: `0`-`8191`
     */
    denyFragmentOffsetLt?: number;
    /**
     * Match only packets not on a given value
     *   - Range: `0`-`8191`
     */
    denyFragmentOffsetNeq?: number;
    /**
     * fragment-offset value
     *   - Range: `0`-`8191`
     */
    denyFragmentOffsetRangeEnd?: number;
    /**
     * fragment-offset value
     *   - Range: `0`-`8191`
     */
    denyFragmentOffsetRangeStart?: number;
    /**
     * Fragment type for a packet
     *   - Choices: `dont-fragment`, `dont-fragment first-fragment`, `dont-fragment is-fragment`, `dont-fragment last-fragment`, `first-fragment`, `is-fragment`, `last-fragment`
     */
    denyFragmentType?: string;
    /**
     * Check non-initial fragments
     */
    denyFragments?: boolean;
    /**
     * ICMP message code
     *   - Range: `0`-`255`
     */
    denyIcmpMessageCode?: number;
    /**
     * ICMP message type
     *   - Range: `0`-`255`
     */
    denyIcmpMessageType?: number;
    /**
     * ICMP message type
     *   - Choices: `AdministrativelyProhibited`, `AlternateAddress`, `ConversionError`, `DODHostProhibited`, `DODNetProhibited`, `Echo`, `EchoReply`, `GeneralParameterProblem`, `HostIsolated`, `HostPrecedenceUnreachable`, `HostRedirect`, `HostTOSRedirect`, `HostTOSUnreachable`, `HostUnknown`, `HostUnreachable`, `InformationReply`, `InformationRequest`, `MaskReply`, `MaskRequest`, `MobileRedirect`, `NetTOSRedirect`, `NetTOSUnreachable`, `NetworkRedirect`, `NetworkUnknown`, `NetworkUnreachable`, `NoRoomForOption`, `OptionMissing`, `PacketTooBig`, `ParameterProblem`, `PortUnreachable`, `PrecedenceUnreachable`, `ProtocolUnreachable`, `ReassemblyTimeout`, `Redirect`, `RouterAdvertisement`, `RouterSolicitation`, `SourceQuench`, `SourceRouteFailed`, `TTLExceeded`, `TimeExceeded`, `TimestampReply`, `TimestampRequest`, `Traceroute`, `Unreachable`
     */
    denyIcmpMessageTypeName?: string;
    /**
     * Do not generate the ICMP message
     */
    denyIcmpOff?: boolean;
    /**
     * Generate the ICMP message
     */
    denyIcmpOn?: boolean;
    /**
     * Match on IGMP message
     */
    denyIgmpType?: string;
    /**
     * Log matches against this entry
     */
    denyLog?: boolean;
    /**
     * Log matches against this entry, including input interface
     */
    denyLogInput?: boolean;
    /**
     * nexthop1 ipv4 address
     */
    denyNexthop1Ipv4?: string;
    /**
     * specific TRACK Name for this nexthop
     */
    denyNexthop1Track?: string;
    /**
     * Specific VRF Name for this nexthop
     */
    denyNexthop1Vrf?: string;
    /**
     * nexthop2 ipv4 address
     */
    denyNexthop2Ipv4?: string;
    /**
     * specific TRACK Name for this nexthop
     */
    denyNexthop2Track?: string;
    /**
     * Specific VRF Name for this nexthop
     */
    denyNexthop2Vrf?: string;
    /**
     * nexthop3 ipv4 address
     */
    denyNexthop3Ipv4?: string;
    /**
     * specific TRACK Name for this nexthop
     */
    denyNexthop3Track?: string;
    /**
     * Specific VRF Name for this nexthop
     */
    denyNexthop3Vrf?: string;
    /**
     * Match only packets with a given value
     *   - Range: `0`-`65535`
     */
    denyPacketLengthEq?: number;
    /**
     * Match only packet with a greater value
     *   - Range: `0`-`65535`
     */
    denyPacketLengthGt?: number;
    /**
     * Match only packets with a lower value
     *   - Range: `0`-`65535`
     */
    denyPacketLengthLt?: number;
    /**
     * Match only packets not on a given value
     *   - Range: `0`-`65535`
     */
    denyPacketLengthNeq?: number;
    /**
     * Packet length end
     *   - Range: `0`-`65535`
     */
    denyPacketLengthRangeEnd?: number;
    /**
     * Packet length start
     *   - Range: `0`-`65535`
     */
    denyPacketLengthRangeStart?: number;
    /**
     * Police peak-rate value on this entry
     *   - Range: `0`-`4294967295`
     */
    denyPolicePeakRate?: number;
    /**
     * Unit for peak-rate value. Currently only pps (packets per second) is supported
     */
    denyPolicePeakUnit?: string;
    /**
     * Set Priority option on this entry
     *   - Choices: `critical`, `high`, `low`, `medium`
     */
    denyPolicePriority?: string;
    /**
     * Unit for police value. Currently only pps (packets per second) is supported
     */
    denyPoliceUnit?: string;
    /**
     * Police value
     *   - Range: `0`-`4294967295`
     */
    denyPoliceValue?: number;
    /**
     * Match packets with given precedence
     */
    denyPrecedence?: string;
    /**
     * An IPv4 Protocol
     */
    denyProtocol?: string;
    /**
     * An IPv4 Protocol
     */
    denyRangeEndProtocol?: string;
    /**
     * An IPv4 Protocol
     */
    denyRangeStartProtocol?: string;
    /**
     * qos-group number
     *   - Range: `0`-`512`
     */
    denySetQosGroup?: number;
    /**
     * Set ttl value
     *   - Range: `0`-`255`
     */
    denySetTtl?: number;
    /**
     * Source IP address
     */
    denySourceAddress?: string;
    /**
     * Any source host
     */
    denySourceAny?: boolean;
    /**
     * A single source host
     */
    denySourceHost?: string;
    /**
     * IPv4 source network object group
     */
    denySourceNetGroup?: string;
    /**
     * Match only packets on a given port number
     */
    denySourcePortEq?: string;
    /**
     * source port object group
     */
    denySourcePortGroup?: string;
    /**
     * Match only packet with a greater port number
     */
    denySourcePortGt?: string;
    /**
     * Match only packets with a lower port number
     */
    denySourcePortLt?: string;
    /**
     * Match only packets not on a given port
     */
    denySourcePortNeq?: string;
    /**
     * Port number
     */
    denySourcePortRangeEnd?: string;
    /**
     * Port number
     */
    denySourcePortRangeStart?: string;
    /**
     * Source IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.
     *   - Range: `0`-`32`
     */
    denySourcePrefixLength?: number;
    /**
     * Source IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.
     */
    denySourceWildcardMask?: string;
    /**
     * Match only packets with a given value
     *   - Range: `0`-`255`
     */
    denyTtlEq?: number;
    /**
     * Match only packet with a greater value
     *   - Range: `0`-`255`
     */
    denyTtlGt?: number;
    /**
     * Match only packets with a lower value
     *   - Range: `0`-`255`
     */
    denyTtlLt?: number;
    /**
     * Match only packets not on a given value
     *   - Range: `0`-`255`
     */
    denyTtlNeq?: number;
    /**
     * ttl range higher value
     *   - Range: `0`-`255`
     */
    denyTtlRangeEnd?: number;
    /**
     * ttl range lower value
     *   - Range: `0`-`255`
     */
    denyTtlRangeStart?: number;
    /**
     * Capture matched packet
     */
    permitCapture?: boolean;
    /**
     * counter for this ACE
     */
    permitCounter?: string;
    /**
     * Use specified default nexthop on match against this entry
     */
    permitDefault?: boolean;
    /**
     * Destination IP address
     */
    permitDestinationAddress?: string;
    /**
     * Any destination host
     */
    permitDestinationAny?: boolean;
    /**
     * A single destination host
     */
    permitDestinationHost?: string;
    /**
     * IPv4 destination network object group
     */
    permitDestinationNetGroup?: string;
    /**
     * Match only packets on a given port number
     */
    permitDestinationPortEq?: string;
    /**
     * destination port object group
     */
    permitDestinationPortGroup?: string;
    /**
     * Match only packet with a greater port number
     */
    permitDestinationPortGt?: string;
    /**
     * Match only packets with a lower port number
     */
    permitDestinationPortLt?: string;
    /**
     * Match only packets not on a given port
     */
    permitDestinationPortNeq?: string;
    /**
     * Port number
     */
    permitDestinationPortRangeEnd?: string;
    /**
     * Port number
     */
    permitDestinationPortRangeStart?: string;
    /**
     * Destination IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.
     *   - Range: `0`-`32`
     */
    permitDestinationPrefixLength?: number;
    /**
     * Destination IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.
     */
    permitDestinationWildcardMask?: string;
    permitDscp?: string;
    /**
     * Match only packets on a given DSCP value
     */
    permitDscpEq?: string;
    /**
     * Match only packet with a greater DSCP value
     */
    permitDscpGt?: string;
    /**
     * Match only packets with a lower DSCP value
     */
    permitDscpLt?: string;
    /**
     * Match only packets not on a given DSCP value
     */
    permitDscpNeq?: string;
    /**
     * DSCP value
     */
    permitDscpRangeEnd?: string;
    /**
     * DSCP value
     */
    permitDscpRangeStart?: string;
    /**
     * Match only packets with exact protocol numbers
     */
    permitEq?: string;
    /**
     * Match only packets with a given value
     *   - Range: `0`-`8191`
     */
    permitFragmentOffsetEq?: number;
    /**
     * Match only packet with a greater value
     *   - Range: `0`-`8191`
     */
    permitFragmentOffsetGt?: number;
    /**
     * Match only packets with a lower value
     *   - Range: `0`-`8191`
     */
    permitFragmentOffsetLt?: number;
    /**
     * Match only packets not on a given value
     *   - Range: `0`-`8191`
     */
    permitFragmentOffsetNeq?: number;
    /**
     * fragment-offset value
     *   - Range: `0`-`8191`
     */
    permitFragmentOffsetRangeEnd?: number;
    /**
     * fragment-offset value
     *   - Range: `0`-`8191`
     */
    permitFragmentOffsetRangeStart?: number;
    /**
     * Fragment type for a packet
     *   - Choices: `dont-fragment`, `dont-fragment first-fragment`, `dont-fragment is-fragment`, `dont-fragment last-fragment`, `first-fragment`, `is-fragment`, `last-fragment`
     */
    permitFragmentType?: string;
    /**
     * Check non-initial fragments
     */
    permitFragments?: boolean;
    /**
     * ICMP message code
     *   - Range: `0`-`255`
     */
    permitIcmpMessageCode?: number;
    /**
     * ICMP message type
     *   - Range: `0`-`255`
     */
    permitIcmpMessageType?: number;
    /**
     * ICMP message type
     *   - Choices: `AdministrativelyProhibited`, `AlternateAddress`, `ConversionError`, `DODHostProhibited`, `DODNetProhibited`, `Echo`, `EchoReply`, `GeneralParameterProblem`, `HostIsolated`, `HostPrecedenceUnreachable`, `HostRedirect`, `HostTOSRedirect`, `HostTOSUnreachable`, `HostUnknown`, `HostUnreachable`, `InformationReply`, `InformationRequest`, `MaskReply`, `MaskRequest`, `MobileRedirect`, `NetTOSRedirect`, `NetTOSUnreachable`, `NetworkRedirect`, `NetworkUnknown`, `NetworkUnreachable`, `NoRoomForOption`, `OptionMissing`, `PacketTooBig`, `ParameterProblem`, `PortUnreachable`, `PrecedenceUnreachable`, `ProtocolUnreachable`, `ReassemblyTimeout`, `Redirect`, `RouterAdvertisement`, `RouterSolicitation`, `SourceQuench`, `SourceRouteFailed`, `TTLExceeded`, `TimeExceeded`, `TimestampReply`, `TimestampRequest`, `Traceroute`, `Unreachable`
     */
    permitIcmpMessageTypeName?: string;
    /**
     * Match on IGMP message
     */
    permitIgmpType?: string;
    /**
     * Log matches against this entry
     */
    permitLog?: boolean;
    /**
     * Log matches against this entry, including input interface
     */
    permitLogInput?: boolean;
    /**
     * nexthop1 ipv4 address
     */
    permitNexthop1Ipv4?: string;
    /**
     * specific TRACK Name for this nexthop
     */
    permitNexthop1Track?: string;
    /**
     * Specific VRF Name for this nexthop
     */
    permitNexthop1Vrf?: string;
    /**
     * nexthop2 ipv4 address
     */
    permitNexthop2Ipv4?: string;
    /**
     * specific TRACK Name for this nexthop
     */
    permitNexthop2Track?: string;
    /**
     * Specific VRF Name for this nexthop
     */
    permitNexthop2Vrf?: string;
    /**
     * nexthop3 ipv4 address
     */
    permitNexthop3Ipv4?: string;
    /**
     * specific TRACK Name for this nexthop
     */
    permitNexthop3Track?: string;
    /**
     * Specific VRF Name for this nexthop
     */
    permitNexthop3Vrf?: string;
    /**
     * Match only packets with a given value
     *   - Range: `0`-`65535`
     */
    permitPacketLengthEq?: number;
    /**
     * Match only packet with a greater value
     *   - Range: `0`-`65535`
     */
    permitPacketLengthGt?: number;
    /**
     * Match only packets with a lower value
     *   - Range: `0`-`65535`
     */
    permitPacketLengthLt?: number;
    /**
     * Match only packets not on a given value
     *   - Range: `0`-`65535`
     */
    permitPacketLengthNeq?: number;
    /**
     * Packet length end
     *   - Range: `0`-`65535`
     */
    permitPacketLengthRangeEnd?: number;
    /**
     * Packet length start
     *   - Range: `0`-`65535`
     */
    permitPacketLengthRangeStart?: number;
    /**
     * Police peak-rate value on this entry
     *   - Range: `0`-`4294967295`
     */
    permitPolicePeakRate?: number;
    /**
     * Unit for peak-rate value. Currently only pps (packets per second) is supported
     */
    permitPolicePeakUnit?: string;
    /**
     * Set Priority option on this entry
     *   - Choices: `critical`, `high`, `low`, `medium`
     */
    permitPolicePriority?: string;
    /**
     * Unit for police value. Currently only pps (packets per second) is supported
     */
    permitPoliceUnit?: string;
    /**
     * Police value
     *   - Range: `0`-`4294967295`
     */
    permitPoliceValue?: number;
    /**
     * Match packets with given precedence
     */
    permitPrecedence?: string;
    /**
     * An IPv4 Protocol
     */
    permitProtocol?: string;
    /**
     * An IPv4 Protocol
     */
    permitRangeEndProtocol?: string;
    /**
     * An IPv4 Protocol
     */
    permitRangeStartProtocol?: string;
    /**
     * qos-group number
     *   - Range: `0`-`512`
     */
    permitSetQosGroup?: number;
    /**
     * Set ttl value
     *   - Range: `0`-`255`
     */
    permitSetTtl?: number;
    /**
     * Source IP address
     */
    permitSourceAddress?: string;
    /**
     * Any source host
     */
    permitSourceAny?: boolean;
    /**
     * A single source host
     */
    permitSourceHost?: string;
    /**
     * IPv4 source network object group
     */
    permitSourceNetGroup?: string;
    /**
     * Match only packets on a given port number
     */
    permitSourcePortEq?: string;
    /**
     * source port object group
     */
    permitSourcePortGroup?: string;
    /**
     * Match only packet with a greater port number
     */
    permitSourcePortGt?: string;
    /**
     * Match only packets with a lower port number
     */
    permitSourcePortLt?: string;
    /**
     * Match only packets not on a given port
     */
    permitSourcePortNeq?: string;
    /**
     * Port number
     */
    permitSourcePortRangeEnd?: string;
    /**
     * Port number
     */
    permitSourcePortRangeStart?: string;
    /**
     * Source IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.
     *   - Range: `0`-`32`
     */
    permitSourcePrefixLength?: number;
    /**
     * Source IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.
     */
    permitSourceWildcardMask?: string;
    /**
     * Match only packets with a given value
     *   - Range: `0`-`255`
     */
    permitTtlEq?: number;
    /**
     * Match only packet with a greater value
     *   - Range: `0`-`255`
     */
    permitTtlGt?: number;
    /**
     * Match only packets with a lower value
     *   - Range: `0`-`255`
     */
    permitTtlLt?: number;
    /**
     * Match only packets not on a given value
     *   - Range: `0`-`255`
     */
    permitTtlNeq?: number;
    /**
     * ttl range higher value
     *   - Range: `0`-`255`
     */
    permitTtlRangeEnd?: number;
    /**
     * ttl range lower value
     *   - Range: `0`-`255`
     */
    permitTtlRangeStart?: number;
    /**
     * Comment for access list
     */
    remark?: string;
    /**
     * Sequence number for this entry
     *   - Range: `1`-`2147483643`
     */
    sequenceNumber: number;
}

export interface Ipv4PrefixListSequence {
    /**
     * Mask length of IPv4 address
     */
    mask?: string;
    /**
     * Exact prefix length to be matched
     *   - Range: `0`-`32`
     */
    matchPrefixLengthEq?: number;
    /**
     * Minimum prefix length to be matched
     *   - Range: `0`-`32`
     */
    matchPrefixLengthGe?: number;
    /**
     * Maximum prefix length to be matched
     *   - Range: `0`-`32`
     */
    matchPrefixLengthLe?: number;
    /**
     * specify the type to be either deny (or) permit
     *   - Choices: `deny`, `permit`
     */
    permission?: string;
    /**
     * IPv4 address prefix
     */
    prefix?: string;
    /**
     * Comments for prefix list
     */
    remark?: string;
    /**
     * Sequence number
     *   - Range: `1`-`2147483646`
     */
    sequenceNumber: number;
}

export interface Ipv6AccessListSequence {
    /**
     * Capture matched packet
     */
    denyCapture?: boolean;
    /**
     * counter for this ACE
     */
    denyCounter?: string;
    /**
     * Destination IP address
     */
    denyDestinationAddress?: string;
    /**
     * Any destination host
     */
    denyDestinationAny?: boolean;
    /**
     * A single destination host
     */
    denyDestinationHost?: string;
    /**
     * IPv6 destination network object group
     */
    denyDestinationNetGroup?: string;
    /**
     * Match only packets on a given port number
     */
    denyDestinationPortEq?: string;
    /**
     * destination port object group
     */
    denyDestinationPortGroup?: string;
    /**
     * Match only packet with a greater port number
     */
    denyDestinationPortGt?: string;
    /**
     * Match only packets with a lower port number
     */
    denyDestinationPortLt?: string;
    /**
     * Match only packets not on a given port
     */
    denyDestinationPortNeq?: string;
    /**
     * Port number
     */
    denyDestinationPortRangeEnd?: string;
    /**
     * Port number
     */
    denyDestinationPortRangeStart?: string;
    /**
     * Destination IP address prefix length.Either wildcard-mask or prefix-length is supported along with address.
     *   - Range: `0`-`128`
     */
    denyDestinationPrefixLength?: number;
    /**
     * Destination IP address mask. Either wildcard-mask or prefix-length is supported along with address.
     */
    denyDestinationWildcardMask?: string;
    denyDscp?: string;
    /**
     * Match only packets on a given DSCP value
     */
    denyDscpEq?: string;
    /**
     * Match only packet with a greater DSCP value
     */
    denyDscpGt?: string;
    /**
     * Match only packets with a lower DSCP value
     */
    denyDscpLt?: string;
    /**
     * Match only packets not on a given DSCP value
     */
    denyDscpNeq?: string;
    /**
     * DSCP value
     */
    denyDscpRangeEnd?: string;
    /**
     * DSCP value
     */
    denyDscpRangeStart?: string;
    /**
     * Match only packets with exact protocol numbers
     */
    denyEq?: string;
    /**
     * Fragment type for a packet
     *   - Choices: `first-fragment`, `is-fragment`
     */
    denyFragmentType?: string;
    /**
     * ICMP message code
     *   - Range: `0`-`255`
     */
    denyIcmpMessageCode?: number;
    /**
     * ICMP message type
     *   - Range: `0`-`255`
     */
    denyIcmpMessageType?: number;
    /**
     * ICMP message type
     *   - Choices: `AddressUnreachable`, `AdministrativelyProhibited`, `BeyondScopeOfSourceAddress`, `DestinationUnreachable`, `Echo`, `EchoReply`, `ErroneousHeaderField`, `GroupMembershipQuery`, `GroupMembershipReduction`, `GroupMembershipReport`, `NeighborAdvertisement`, `NeighborRedirect`, `NeighborSolicitation`, `NoRouteToDestination`, `NodeInformationRequestIsRefused`, `NodeInformationSuccessfulReply`, `PacketTooBig`, `ParameterProblem`, `PortUnreachable`, `QuerySubjectIsDomainName`, `QuerySubjectIsIPv4Address`, `QuerySubjectIsIPv6Address`, `RRCommand`, `RRResult`, `RRSeqnumReset`, `ReassemblyOption`, `RouterAdvertisement`, `RouterRenumbering`, `RouterSolicitation`, `TTLExceeded`, `TimeExceeded`, `UnknownQueryType`, `UnrecognizedNextHeader`, `UnrecognizedOption`, `WhoAreYouReply`, `WhoAreYouRequest`
     */
    denyIcmpMessageTypeName?: string;
    /**
     * Do not generate the ICMP message
     */
    denyIcmpOff?: boolean;
    /**
     * Generate the ICMP message
     */
    denyIcmpOn?: boolean;
    /**
     * Log matches against this entry
     */
    denyLog?: boolean;
    /**
     * Log matches against this entry, including input interface
     */
    denyLogInput?: boolean;
    /**
     * Match only packets with a given value
     *   - Range: `0`-`65535`
     */
    denyPacketLengthEq?: number;
    /**
     * Match only packet with a greater value
     *   - Range: `0`-`65535`
     */
    denyPacketLengthGt?: number;
    /**
     * Match only packets with a lower value
     *   - Range: `0`-`65535`
     */
    denyPacketLengthLt?: number;
    /**
     * Match only packets not on a given value
     *   - Range: `0`-`65535`
     */
    denyPacketLengthNeq?: number;
    /**
     * Packet length end
     *   - Range: `0`-`65535`
     */
    denyPacketLengthRangeEnd?: number;
    /**
     * Packet length start
     *   - Range: `0`-`65535`
     */
    denyPacketLengthRangeStart?: number;
    /**
     * Police peak-rate value on this entry
     *   - Range: `0`-`4294967295`
     */
    denyPolicePeakRate?: number;
    /**
     * Unit for peak-rate value. Currently only pps (packets per second) is supported
     */
    denyPolicePeakUnit?: string;
    /**
     * Set Priority option on this entry
     *   - Choices: `critical`, `high`, `low`, `medium`
     */
    denyPolicePriority?: string;
    /**
     * Unit for police value. Currently only pps (packets per second) is supported
     */
    denyPoliceUnit?: string;
    /**
     * Police value
     *   - Range: `0`-`4294967295`
     */
    denyPoliceValue?: number;
    /**
     * Match packets with given precedence
     */
    denyPrecedence?: string;
    /**
     * An IPv6 Protocol
     */
    denyProtocol?: string;
    /**
     * An IPv6 Protocol
     */
    denyRangeEndProtocol?: string;
    /**
     * An IPv6 Protocol
     */
    denyRangeStartProtocol?: string;
    /**
     * qos-group number
     *   - Range: `0`-`512`
     */
    denySetQosGroup?: number;
    /**
     * Set ttl value
     *   - Range: `0`-`255`
     */
    denySetTtl?: number;
    /**
     * Source IP address
     */
    denySourceAddress?: string;
    /**
     * Any source host
     */
    denySourceAny?: boolean;
    /**
     * A single source host
     */
    denySourceHost?: string;
    /**
     * IPv6 source network object group
     */
    denySourceNetGroup?: string;
    /**
     * Match only packets on a given port number
     */
    denySourcePortEq?: string;
    /**
     * source port object group
     */
    denySourcePortGroup?: string;
    /**
     * Match only packet with a greater port number
     */
    denySourcePortGt?: string;
    /**
     * Match only packets with a lower port number
     */
    denySourcePortLt?: string;
    /**
     * Match only packets not on a given port
     */
    denySourcePortNeq?: string;
    /**
     * Port number
     */
    denySourcePortRangeEnd?: string;
    /**
     * Port number
     */
    denySourcePortRangeStart?: string;
    /**
     * Source IP address prefix length.Either wildcard-mask or prefix-length is supported along with address.
     *   - Range: `0`-`128`
     */
    denySourcePrefixLength?: number;
    /**
     * Source IP address mask. Either wildcard-mask or prefix-length is supported along with address.
     */
    denySourceWildcardMask?: string;
    /**
     * Match only packets with a given value
     *   - Range: `0`-`255`
     */
    denyTtlEq?: number;
    /**
     * Match only packet with a greater value
     *   - Range: `0`-`255`
     */
    denyTtlGt?: number;
    /**
     * Match only packets with a lower value
     *   - Range: `0`-`255`
     */
    denyTtlLt?: number;
    /**
     * Match only packets not on a given value
     *   - Range: `0`-`255`
     */
    denyTtlNeq?: number;
    /**
     * ttl range higher value
     *   - Range: `0`-`255`
     */
    denyTtlRangeEnd?: number;
    /**
     * ttl range lower value
     *   - Range: `0`-`255`
     */
    denyTtlRangeStart?: number;
    /**
     * Capture matched packet
     */
    permitCapture?: boolean;
    /**
     * counter for this ACE
     */
    permitCounter?: string;
    /**
     * Destination IP address
     */
    permitDestinationAddress?: string;
    /**
     * Any destination host
     */
    permitDestinationAny?: boolean;
    /**
     * A single destination host
     */
    permitDestinationHost?: string;
    /**
     * IPv6 destination network object group
     */
    permitDestinationNetGroup?: string;
    /**
     * Match only packets on a given port number
     */
    permitDestinationPortEq?: string;
    /**
     * destination port object group
     */
    permitDestinationPortGroup?: string;
    /**
     * Match only packet with a greater port number
     */
    permitDestinationPortGt?: string;
    /**
     * Match only packets with a lower port number
     */
    permitDestinationPortLt?: string;
    /**
     * Match only packets not on a given port
     */
    permitDestinationPortNeq?: string;
    /**
     * Port number
     */
    permitDestinationPortRangeEnd?: string;
    /**
     * Port number
     */
    permitDestinationPortRangeStart?: string;
    /**
     * Destination IP address prefix length.Either wildcard-mask or prefix-length is supported along with address.
     *   - Range: `0`-`128`
     */
    permitDestinationPrefixLength?: number;
    /**
     * Destination IP address mask. Either wildcard-mask or prefix-length is supported along with address.
     */
    permitDestinationWildcardMask?: string;
    permitDscp?: string;
    /**
     * Match only packets on a given DSCP value
     */
    permitDscpEq?: string;
    /**
     * Match only packet with a greater DSCP value
     */
    permitDscpGt?: string;
    /**
     * Match only packets with a lower DSCP value
     */
    permitDscpLt?: string;
    /**
     * Match only packets not on a given DSCP value
     */
    permitDscpNeq?: string;
    /**
     * DSCP value
     */
    permitDscpRangeEnd?: string;
    /**
     * DSCP value
     */
    permitDscpRangeStart?: string;
    /**
     * Match only packets with exact protocol numbers
     */
    permitEq?: string;
    /**
     * Fragment type for a packet
     *   - Choices: `first-fragment`, `is-fragment`
     */
    permitFragmentType?: string;
    /**
     * ICMP message code
     *   - Range: `0`-`255`
     */
    permitIcmpMessageCode?: number;
    /**
     * ICMP message type
     *   - Range: `0`-`255`
     */
    permitIcmpMessageType?: number;
    /**
     * ICMP message type
     *   - Choices: `AddressUnreachable`, `AdministrativelyProhibited`, `BeyondScopeOfSourceAddress`, `DestinationUnreachable`, `Echo`, `EchoReply`, `ErroneousHeaderField`, `GroupMembershipQuery`, `GroupMembershipReduction`, `GroupMembershipReport`, `NeighborAdvertisement`, `NeighborRedirect`, `NeighborSolicitation`, `NoRouteToDestination`, `NodeInformationRequestIsRefused`, `NodeInformationSuccessfulReply`, `PacketTooBig`, `ParameterProblem`, `PortUnreachable`, `QuerySubjectIsDomainName`, `QuerySubjectIsIPv4Address`, `QuerySubjectIsIPv6Address`, `RRCommand`, `RRResult`, `RRSeqnumReset`, `ReassemblyOption`, `RouterAdvertisement`, `RouterRenumbering`, `RouterSolicitation`, `TTLExceeded`, `TimeExceeded`, `UnknownQueryType`, `UnrecognizedNextHeader`, `UnrecognizedOption`, `WhoAreYouReply`, `WhoAreYouRequest`
     */
    permitIcmpMessageTypeName?: string;
    /**
     * Log matches against this entry
     */
    permitLog?: boolean;
    /**
     * Log matches against this entry, including input interface
     */
    permitLogInput?: boolean;
    /**
     * nexthop1 ipv6 address
     */
    permitNexthop1Ipv6?: string;
    /**
     * specific TRACK Name for this nexthop
     */
    permitNexthop1Track?: string;
    /**
     * Specific VRF Name for this nexthop
     */
    permitNexthop1Vrf?: string;
    /**
     * nexthop2 ipv6 address
     */
    permitNexthop2Ipv6?: string;
    /**
     * specific TRACK Name for this nexthop
     */
    permitNexthop2Track?: string;
    /**
     * Specific VRF Name for this nexthop
     */
    permitNexthop2Vrf?: string;
    /**
     * nexthop3 ipv6 address
     */
    permitNexthop3Ipv6?: string;
    /**
     * specific TRACK Name for this nexthop
     */
    permitNexthop3Track?: string;
    /**
     * Specific VRF Name for this nexthop
     */
    permitNexthop3Vrf?: string;
    /**
     * Match only packets with a given value
     *   - Range: `0`-`65535`
     */
    permitPacketLengthEq?: number;
    /**
     * Match only packet with a greater value
     *   - Range: `0`-`65535`
     */
    permitPacketLengthGt?: number;
    /**
     * Match only packets with a lower value
     *   - Range: `0`-`65535`
     */
    permitPacketLengthLt?: number;
    /**
     * Match only packets not on a given value
     *   - Range: `0`-`65535`
     */
    permitPacketLengthNeq?: number;
    /**
     * Packet length end
     *   - Range: `0`-`65535`
     */
    permitPacketLengthRangeEnd?: number;
    /**
     * Packet length start
     *   - Range: `0`-`65535`
     */
    permitPacketLengthRangeStart?: number;
    /**
     * Police peak-rate value on this entry
     *   - Range: `0`-`4294967295`
     */
    permitPolicePeakRate?: number;
    /**
     * Unit for peak-rate value. Currently only pps (packets per second) is supported
     */
    permitPolicePeakUnit?: string;
    /**
     * Set Priority option on this entry
     *   - Choices: `critical`, `high`, `low`, `medium`
     */
    permitPolicePriority?: string;
    /**
     * Unit for police value. Currently only pps (packets per second) is supported
     */
    permitPoliceUnit?: string;
    /**
     * Police value
     *   - Range: `0`-`4294967295`
     */
    permitPoliceValue?: number;
    /**
     * Match packets with given precedence
     */
    permitPrecedence?: string;
    /**
     * An IPv6 Protocol
     */
    permitProtocol?: string;
    /**
     * An IPv6 Protocol
     */
    permitRangeEndProtocol?: string;
    /**
     * An IPv6 Protocol
     */
    permitRangeStartProtocol?: string;
    /**
     * qos-group number
     *   - Range: `0`-`512`
     */
    permitSetQosGroup?: number;
    /**
     * Set ttl value
     *   - Range: `0`-`255`
     */
    permitSetTtl?: number;
    /**
     * Source IP address
     */
    permitSourceAddress?: string;
    /**
     * Any source host
     */
    permitSourceAny?: boolean;
    /**
     * A single source host
     */
    permitSourceHost?: string;
    /**
     * IPv6 source network object group
     */
    permitSourceNetGroup?: string;
    /**
     * Match only packets on a given port number
     */
    permitSourcePortEq?: string;
    /**
     * source port object group
     */
    permitSourcePortGroup?: string;
    /**
     * Match only packet with a greater port number
     */
    permitSourcePortGt?: string;
    /**
     * Match only packets with a lower port number
     */
    permitSourcePortLt?: string;
    /**
     * Match only packets not on a given port
     */
    permitSourcePortNeq?: string;
    /**
     * Port number
     */
    permitSourcePortRangeEnd?: string;
    /**
     * Port number
     */
    permitSourcePortRangeStart?: string;
    /**
     * Source IP address prefix length.Either wildcard-mask or prefix-length is supported along with address.
     *   - Range: `0`-`128`
     */
    permitSourcePrefixLength?: number;
    /**
     * Source IP address mask. Either wildcard-mask or prefix-length is supported along with address.
     */
    permitSourceWildcardMask?: string;
    /**
     * Match only packets with a given value
     *   - Range: `0`-`255`
     */
    permitTtlEq?: number;
    /**
     * Match only packet with a greater value
     *   - Range: `0`-`255`
     */
    permitTtlGt?: number;
    /**
     * Match only packets with a lower value
     *   - Range: `0`-`255`
     */
    permitTtlLt?: number;
    /**
     * Match only packets not on a given value
     *   - Range: `0`-`255`
     */
    permitTtlNeq?: number;
    /**
     * ttl range higher value
     *   - Range: `0`-`255`
     */
    permitTtlRangeEnd?: number;
    /**
     * ttl range lower value
     *   - Range: `0`-`255`
     */
    permitTtlRangeStart?: number;
    /**
     * Comment for access list
     */
    remark?: string;
    /**
     * Sequence number for this entry
     *   - Range: `1`-`2147483643`
     */
    sequenceNumber: number;
}

export interface Ipv6PrefixListSequence {
    /**
     * Mask length of IPv6 address
     *   - Range: `0`-`128`
     */
    mask?: number;
    /**
     * Exact prefix length to be matched
     *   - Range: `0`-`128`
     */
    matchPrefixLengthEq?: number;
    /**
     * Minimum prefix length to be matched
     *   - Range: `0`-`128`
     */
    matchPrefixLengthGe?: number;
    /**
     * Maximum prefix length to be matched
     *   - Range: `0`-`128`
     */
    matchPrefixLengthLe?: number;
    /**
     * specify the type to be either deny (or) permit
     *   - Choices: `deny`, `permit`
     */
    permission?: string;
    /**
     * IPv6 address prefix
     */
    prefix?: string;
    /**
     * Comments for prefix list
     */
    remark?: string;
    /**
     * Sequence number
     *   - Range: `1`-`2147483646`
     */
    sequenceNumber: number;
}

export interface KeyChainKey {
    /**
     * Never expires
     */
    acceptLifetimeInfinite?: boolean;
    /**
     * Day of the month
     *   - Range: `1`-`31`
     */
    acceptLifetimeStartTimeDayOfMonth?: number;
    /**
     * Start time hour
     *   - Range: `0`-`23`
     */
    acceptLifetimeStartTimeHour?: number;
    /**
     * Start time minute
     *   - Range: `0`-`59`
     */
    acceptLifetimeStartTimeMinute?: number;
    /**
     * Month of the year
     *   - Choices: `april`, `august`, `december`, `february`, `january`, `july`, `june`, `march`, `may`, `november`, `october`, `september`
     */
    acceptLifetimeStartTimeMonth?: string;
    /**
     * Start time second
     *   - Range: `0`-`59`
     */
    acceptLifetimeStartTimeSecond?: number;
    /**
     * Year
     *   - Range: `1993`-`2035`
     */
    acceptLifetimeStartTimeYear?: number;
    /**
     * Choose cryptographic algorithm
     *   - Choices: `aes-128-cmac-96`, `hmac-md5`, `hmac-sha-256`, `hmac-sha1-12`, `hmac-sha1-20`, `hmac-sha1-96`, `md5`, `sha-1`
     */
    cryptographicAlgorithm?: string;
    /**
     * Configure a Key
     */
    keyName: string;
    /**
     * Encrypted key string (even number of characters with first two as digits and sum less than 53, and rest of the characters should be hex digits)
     */
    keyStringPassword?: string;
    /**
     * Never expires
     */
    sendLifetimeInfinite?: boolean;
    /**
     * Day of the month
     *   - Range: `1`-`31`
     */
    sendLifetimeStartTimeDayOfMonth?: number;
    /**
     * Start time hour
     *   - Range: `0`-`23`
     */
    sendLifetimeStartTimeHour?: number;
    /**
     * Start time minute
     *   - Range: `0`-`59`
     */
    sendLifetimeStartTimeMinute?: number;
    /**
     * Month of the year
     *   - Choices: `april`, `august`, `december`, `february`, `january`, `july`, `june`, `march`, `may`, `november`, `october`, `september`
     */
    sendLifetimeStartTimeMonth?: string;
    /**
     * Start time second
     *   - Range: `0`-`59`
     */
    sendLifetimeStartTimeSecond?: number;
    /**
     * Year
     *   - Range: `1993`-`2035`
     */
    sendLifetimeStartTimeYear?: number;
}

export interface L2vpnBridgeGroupBridgeDomainEvi {
    /**
     * Ethernet VPN identifier
     *   - Range: `1`-`65534`
     */
    vpnId: number;
}

export interface L2vpnBridgeGroupBridgeDomainInterface {
    /**
     * Specify interface name
     */
    interfaceName: string;
    /**
     * Configure split-horizon group
     */
    splitHorizonGroup?: boolean;
}

export interface L2vpnBridgeGroupBridgeDomainSegmentRoutingSrv6Evi {
    /**
     * Ethernet VPN identifier for srv6
     *   - Range: `1`-`65534`
     */
    vpnId: number;
}

export interface L2vpnBridgeGroupBridgeDomainVni {
    /**
     * VxLAN VPN identifier
     *   - Range: `1`-`16777215`
     */
    vniId: number;
}

export interface L2vpnXconnectGroup {
    /**
     * Specify the group the cross connects belong to
     */
    groupName: string;
}

export interface L2vpnXconnectGroupP2pEvpnServiceNeighbor {
    /**
     * PW class template name to use
     */
    pwClass?: string;
    /**
     * Specify service ID (used as local and remote ac-id)
     *   - Range: `1`-`4294967294`
     */
    serviceId: number;
    /**
     * Ethernet VPN Identifier
     *   - Range: `1`-`65534`
     */
    vpnId: number;
}

export interface L2vpnXconnectGroupP2pEvpnTargetNeighbor {
    /**
     * PW class template name to use
     */
    pwClass?: string;
    /**
     * Specify remote attachment circuit identifier
     *   - Range: `1`-`4294967294`
     */
    remoteAcId: number;
    /**
     * Specify source attachment circuit identifier
     *   - Range: `1`-`4294967294`
     */
    source: number;
    /**
     * Ethernet VPN Identifier
     *   - Range: `1`-`65534`
     */
    vpnId: number;
}

export interface L2vpnXconnectGroupP2pInterface {
    /**
     * Specify (sub-)interface name to cross connect
     */
    interfaceName: string;
}

export interface L2vpnXconnectGroupP2pIpv4Neighbor {
    /**
     * IPv4
     */
    address: string;
    /**
     * PW class template name to use for this XC
     */
    pwClass?: string;
    /**
     * Specify the pseudowire id
     *   - Range: `1`-`4294967295`
     */
    pwId: number;
}

export interface L2vpnXconnectGroupP2pIpv6Neighbor {
    /**
     * IPv6
     */
    address: string;
    /**
     * PW class template name to use for this XC
     */
    pwClass?: string;
    /**
     * Specify the pseudowire id
     *   - Range: `1`-`4294967295`
     */
    pwId: number;
}

export interface L2vpnXconnectGroupP2pNeighborEvpnEviSegmentRoutingService {
    /**
     * PW locator to use for EVPN SID allocation
     */
    segmentRoutingSrv6Locator?: string;
    /**
     * Specify service ID (used as local and remote ac-id)
     *   - Range: `1`-`4294967294`
     */
    serviceId: number;
    /**
     * Ethernet VPN Identifier
     *   - Range: `1`-`65534`
     */
    vpnId: number;
}

export interface LoggingSourceInterfaceVrf {
    /**
     * Set VRF option
     */
    name: string;
}

export interface LoggingVrfHostIpv4Address {
    /**
     * IPV4 address of the logging host
     */
    ipv4Address: string;
    /**
     * Set severity operator of  messages for particular remote host/vrf
     *   - Choices: `equals`, `equals-or-higher`, `not-equals`
     */
    operator?: string;
    /**
     * Set UDP port for this remote host/vrf
     *   - Range: `0`-`65535`
     */
    port?: number;
    /**
     * Set severity of  messages for particular remote host/vrf
     *   - Choices: `alerts`, `critical`, `debugging`, `emergencies`, `error`, `info`, `notifications`, `warning`
     */
    severity?: string;
}

export interface LoggingVrfHostIpv6Address {
    /**
     * IPV6 address of the logging host
     */
    ipv6Address: string;
    /**
     * Set severity operator of  messages for particular remote host/vrf
     *   - Choices: `equals`, `equals-or-higher`, `not-equals`
     */
    operator?: string;
    /**
     * Set UDP port for this remote host/vrf
     *   - Range: `0`-`65535`
     */
    port?: number;
    /**
     * Set severity of  messages for particular remote host/vrf
     *   - Choices: `alerts`, `critical`, `debugging`, `emergencies`, `error`, `info`, `notifications`, `warning`
     */
    severity?: string;
}

export interface MplsLdpAddressFamily {
    /**
     * Configure Address Family and its parameters
     *   - Choices: `ipv4`, `ipv6`
     */
    afName: string;
    /**
     * IP access-list
     */
    labelLocalAllocateForAccessList?: string;
    /**
     * Allocate label for host routes only
     */
    labelLocalAllocateForHostRoutes?: boolean;
}

export interface MplsLdpInterface {
    /**
     * Enable LDP on an interface and enter interface submode
     */
    interfaceName: string;
}

export interface MplsLdpMldpAddressFamily {
    /**
     * Enable recursive forwarding
     */
    forwardingRecursive?: boolean;
    /**
     * Route policy
     */
    forwardingRecursiveRoutePolicy?: string;
    /**
     * MBB delay
     *   - Range: `0`-`600`
     */
    makeBeforeBreakDelay?: number;
    /**
     * Configure Address Family and its parameters
     *   - Choices: `ipv4`
     */
    name: string;
    /**
     * MLDP Recursive FEC enable
     */
    recursiveFec?: boolean;
}

export interface NtpAccessGroupVrf {
    /**
     * Provide full access
     */
    ipv4Peer?: string;
    /**
     * Allow only control queries
     */
    ipv4QueryOnly?: string;
    /**
     * Provide server and query access
     */
    ipv4Serve?: string;
    /**
     * Provide only server access
     */
    ipv4ServeOnly?: string;
    /**
     * Provide full access
     */
    ipv6Peer?: string;
    /**
     * Allow only control queries
     */
    ipv6QueryOnly?: string;
    /**
     * Provide server and query access
     */
    ipv6Serve?: string;
    /**
     * Provide only server access
     */
    ipv6ServeOnly?: string;
    /**
     * Specify non-default VRF
     */
    vrfName: string;
}

export interface NtpAuthenticationKey {
    /**
     * Authentication key for trusted time sources
     *   - Range: `1`-`65535`
     */
    keyNumber: number;
    /**
     * Specify an encrypted key
     */
    md5Encrypted: string;
}

export interface NtpCmacAuthenticationKey {
    /**
     * Specify an encrypted key
     */
    cmacEncrypted: string;
    /**
     * Authentication key for trusted time sources
     *   - Range: `1`-`65535`
     */
    keyNumber: number;
}

export interface NtpHmacSha1AuthenticationKey {
    /**
     * Specify an encrypted key
     */
    hmacSha1Encrypted: string;
    /**
     * Authentication key for trusted time sources
     *   - Range: `1`-`65535`
     */
    keyNumber: number;
}

export interface NtpHmacSha2AuthenticationKey {
    /**
     * Specify an encrypted key
     */
    hmacSha2Encrypted: string;
    /**
     * Authentication key for trusted time sources
     *   - Range: `1`-`65535`
     */
    keyNumber: number;
}

export interface NtpInterface {
    /**
     * Configure broadcast destination address
     */
    broadcastDestination?: string;
    /**
     * Configure broadcast authentication key
     *   - Range: `1`-`65535`
     */
    broadcastKey?: number;
    /**
     * Configure NTP version
     *   - Range: `2`-`4`
     */
    broadcastVersion?: number;
    /**
     * Disable NTP
     */
    disable?: boolean;
    /**
     * Configure NTP on an interface
     */
    interfaceName: string;
}

export interface NtpInterfaceVrf {
    /**
     * Configure NTP on an interface
     */
    interfaces?: outputs.NtpInterfaceVrfInterface[];
    /**
     * Specify non-default VRF
     */
    vrfName: string;
}

export interface NtpInterfaceVrfInterface {
    /**
     * Listen to NTP broadcasts
     */
    broadcastClient?: boolean;
    /**
     * Configure broadcast destination address
     */
    broadcastDestination?: string;
    /**
     * Configure broadcast authentication key
     *   - Range: `1`-`65535`
     */
    broadcastKey?: number;
    /**
     * Configure NTP version
     *   - Range: `2`-`4`
     */
    broadcastVersion?: number;
    /**
     * Disable NTP
     */
    disable?: boolean;
    /**
     * Configure NTP on an interface
     */
    interfaceName: string;
}

export interface NtpIpv4PeersServer {
    /**
     * Peer/server address
     */
    address: string;
    /**
     * Use burst mode
     */
    burst?: boolean;
    /**
     * Use initial burst mode
     */
    iburst?: boolean;
    /**
     * Configure peer authentication key
     *   - Range: `1`-`65535`
     */
    key?: number;
    /**
     * Configure maximum polling rate
     *   - Range: `4`-`9`
     */
    maxpoll?: number;
    /**
     * Configure minimum polling rate
     *   - Range: `4`-`5`
     */
    minpoll?: number;
    /**
     * Prefer this peer when possible
     */
    prefer?: boolean;
    /**
     * Interface for source address
     */
    source?: string;
    /**
     * Specify peer/server
     *   - Choices: `peer`, `server`
     */
    type: string;
    /**
     * Configure NTP version
     *   - Range: `2`-`4`
     */
    version?: number;
}

export interface NtpIpv6PeersServer {
    /**
     * Peer/server address
     */
    address: string;
    /**
     * Use burst mode
     */
    burst?: boolean;
    /**
     * Use initial burst mode
     */
    iburst?: boolean;
    /**
     * IPv6 address (must be same as key node 'address')
     */
    ipv6Address: string;
    /**
     * Configure peer authentication key
     *   - Range: `1`-`65535`
     */
    key?: number;
    /**
     * Configure maximum polling rate
     *   - Range: `4`-`9`
     */
    maxpoll?: number;
    /**
     * Configure minimum polling rate
     *   - Range: `4`-`5`
     */
    minpoll?: number;
    /**
     * Prefer this peer when possible
     */
    prefer?: boolean;
    /**
     * Interface for source address
     */
    source?: string;
    /**
     * Specify peer/server
     *   - Choices: `peer`, `server`
     */
    type: string;
    /**
     * Configure NTP version
     *   - Range: `2`-`4`
     */
    version?: number;
}

export interface NtpPeersServersVrf {
    /**
     * Specify IPv4 address
     */
    ipv4PeersServers?: outputs.NtpPeersServersVrfIpv4PeersServer[];
    /**
     * Specify IPv6 address
     */
    ipv6PeersServers?: outputs.NtpPeersServersVrfIpv6PeersServer[];
    /**
     * Specify non-default VRF
     */
    vrfName: string;
}

export interface NtpPeersServersVrfIpv4PeersServer {
    /**
     * Peer/server address
     */
    address: string;
    /**
     * Use burst mode
     */
    burst?: boolean;
    /**
     * Use initial burst mode
     */
    iburst?: boolean;
    /**
     * Configure peer authentication key
     *   - Range: `1`-`65535`
     */
    key?: number;
    /**
     * Configure maximum polling rate
     *   - Range: `4`-`9`
     */
    maxpoll?: number;
    /**
     * Configure minimum polling rate
     *   - Range: `4`-`5`
     */
    minpoll?: number;
    /**
     * Prefer this peer when possible
     */
    prefer?: boolean;
    /**
     * Interface for source address
     */
    source?: string;
    /**
     * Specify peer/server
     *   - Choices: `peer`, `server`
     */
    type: string;
    /**
     * Configure NTP version
     *   - Range: `2`-`4`
     */
    version?: number;
}

export interface NtpPeersServersVrfIpv6PeersServer {
    /**
     * Peer/server address
     */
    address: string;
    /**
     * Use burst mode
     */
    burst?: boolean;
    /**
     * Use initial burst mode
     */
    iburst?: boolean;
    /**
     * IPv6 address (must be same as key node 'address')
     */
    ipv6Address: string;
    /**
     * Configure peer authentication key
     *   - Range: `1`-`65535`
     */
    key?: number;
    /**
     * Configure maximum polling rate
     *   - Range: `4`-`9`
     */
    maxpoll?: number;
    /**
     * Configure minimum polling rate
     *   - Range: `4`-`5`
     */
    minpoll?: number;
    /**
     * Prefer this peer when possible
     */
    prefer?: boolean;
    /**
     * Interface for source address
     */
    source?: string;
    /**
     * Specify peer/server
     *   - Choices: `peer`, `server`
     */
    type: string;
    /**
     * Configure NTP version
     *   - Range: `2`-`4`
     */
    version?: number;
}

export interface NtpSourceVrf {
    /**
     * default interface for the VRF
     */
    interfaceName: string;
    /**
     * Specify non-default VRF
     */
    vrfName: string;
}

export interface NtpTrustedKey {
    /**
     * Key numbers for trusted time sources
     *   - Range: `1`-`65535`
     */
    keyNumber: number;
}

export interface PceApiUser {
    /**
     * Specify unencrypted password
     */
    passwordEncrypted?: string;
    /**
     * Northbound API username
     */
    userName: string;
}

export interface PceStateSyncIpv4 {
    /**
     * IPv4 address
     */
    address: string;
}

export interface PolicyMapQosClass {
    /**
     * Bandwidth value unit
     *   - Choices: `percent`, `ratio`
     */
    bandwidthRemainingUnit?: string;
    /**
     * Bandwidth value
     */
    bandwidthRemainingValue?: string;
    /**
     * Name of the class-map
     */
    name: string;
    /**
     * Drop packet
     */
    policeConformActionDrop?: boolean;
    /**
     * Transmit packet
     */
    policeConformActionTransmit?: boolean;
    /**
     * Drop packet
     */
    policeExceedActionDrop?: boolean;
    /**
     * Transmit packet
     */
    policeExceedActionTransmit?: boolean;
    /**
     * Rate unit
     *   - Choices: `bps`, `cellsps`, `gbps`, `kbps`, `mbps`, `per-million`, `per-thousand`, `percent`, `pps`
     */
    policeRateUnit?: string;
    /**
     * Committed Information Rate
     */
    policeRateValue?: string;
    /**
     * Drop packet
     */
    policeViolateActionDrop?: boolean;
    /**
     * Transmit packet
     */
    policeViolateActionTransmit?: boolean;
    /**
     * Configure a priority level
     *   - Range: `1`-`7`
     */
    priorityLevel?: number;
    /**
     * Configure queue-limit (taildrop threshold) for this class
     */
    queueLimits?: outputs.PolicyMapQosClassQueueLimit[];
    /**
     * Name of the child service policy
     */
    servicePolicyName?: string;
    /**
     * Set IP DSCP (DiffServ CodePoint)
     */
    setDscp?: string;
    /**
     * Sets the experimental value of the MPLS packet top-most labels.
     *   - Range: `0`-`7`
     */
    setMplsExperimentalTopmost?: number;
    /**
     * Shape rate unit
     *   - Choices: `bps`, `cellsps`, `gbps`, `kbps`, `mbps`, `per-million`, `per-thousand`, `percent`
     */
    shapeAverageRateUnit?: string;
    shapeAverageRateValue?: string;
    /**
     * The type of class-map
     *   - Choices: `qos`, `traffic`
     */
    type: string;
}

export interface PolicyMapQosClassQueueLimit {
    /**
     * queue-limit unit
     *   - Choices: `bytes`, `kbytes`, `mbytes`, `ms`, `packets`, `percent`, `us`
     */
    unit: string;
    /**
     * queue-limit value
     */
    value: string;
}

export interface RouterBgpAddressFamilyAggregateAddress {
    /**
     * IPv6 Aggregate address and mask or masklength
     */
    address: string;
    /**
     * Generate AS confed set path information
     */
    asConfedSet?: boolean;
    /**
     * Generate AS set path information
     */
    asSet?: boolean;
    /**
     * Network in prefix/length format (prefix part)
     *   - Range: `0`-`128`
     */
    masklength: number;
    /**
     * Filter more specific routes from updates
     */
    summaryOnly?: boolean;
}

export interface RouterBgpAddressFamilyNetwork {
    /**
     * IPv6 network and mask or masklength
     */
    address: string;
    /**
     * Network in prefix/length format (prefix part)
     *   - Range: `0`-`128`
     */
    masklength: number;
    /**
     * Route-policy to modify the attributes
     */
    routePolicy?: string;
}

export interface RouterBgpAddressFamilyRedistributeIse {
    /**
     * ISO IS-IS
     */
    instanceName: string;
    /**
     * Redistribute ISIS level 1 routes
     */
    levelOne?: boolean;
    /**
     * Redistribute ISIS level 1 inter-area routes
     */
    levelOneInterArea?: boolean;
    /**
     * Redistribute ISIS level 1 inter-area routes
     */
    levelOneOneInterArea?: boolean;
    /**
     * Redistribute ISIS level 2 ISIS routes
     */
    levelOneTwo?: boolean;
    /**
     * Redistribute ISIS level 1 inter-area routes
     */
    levelOneTwoOneInterArea?: boolean;
    /**
     * Redistribute ISIS level 2 ISIS routes
     */
    levelTwo?: boolean;
    /**
     * Redistribute ISIS level 1 inter-area routes
     */
    levelTwoOneInterArea?: boolean;
    /**
     * Metric for redistributed routes
     *   - Range: `0`-`4294967295`
     */
    metric?: number;
    /**
     * Route policy reference
     */
    routePolicy?: string;
}

export interface RouterBgpAddressFamilyRedistributeOspf {
    /**
     * Redistribute OSPF external routes
     */
    matchExternal?: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchExternalNssaExternal?: boolean;
    /**
     * Redistribute OSPF internal routes
     */
    matchInternal?: boolean;
    /**
     * Redistribute OSPF external routes
     */
    matchInternalExternal?: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchInternalNssaExternal?: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchNssaExternal?: boolean;
    /**
     * Metric for redistributed routes
     *   - Range: `0`-`4294967295`
     */
    metric?: number;
    /**
     * Route policy reference
     */
    routePolicy?: string;
    /**
     * Open Shortest Path First (OSPF)
     */
    routerTag: string;
}

export interface RouterBgpNeighbor {
    /**
     * time in milliseconds
     *   - Range: `0`-`999`
     */
    advertisementIntervalMilliseconds?: number;
    /**
     * Minimum interval between sending BGP routing updates
     *   - Range: `0`-`600`
     */
    advertisementIntervalSeconds?: number;
    /**
     * Enable Fast detection
     */
    bfdFastDetect?: boolean;
    /**
     * Prevent bfd settings from being inherited from the parent
     */
    bfdFastDetectInheritanceDisable?: boolean;
    /**
     * Hold down neighbor session until BFD session is up
     */
    bfdFastDetectStrictMode?: boolean;
    /**
     * Hello interval
     *   - Range: `3`-`30000`
     */
    bfdMinimumInterval?: number;
    /**
     * Detect multiplier
     *   - Range: `2`-`16`
     */
    bfdMultiplier?: number;
    /**
     * Neighbor specific description
     */
    description?: string;
    /**
     * maximum hop count
     *   - Range: `1`-`255`
     */
    ebgpMultihopMaximumHopCount?: number;
    /**
     * Bypass the directly connected nexthop check for single-hop eBGP peering
     */
    ignoreConnectedCheck?: boolean;
    /**
     * bgp as-number
     */
    localAs?: string;
    /**
     * Dual-AS mode
     */
    localAsDualAs?: boolean;
    /**
     * Do not prepend local AS to announcements from this neighbor
     */
    localAsNoPrepend?: boolean;
    /**
     * Prepend only local AS to announcements to this neighbor
     */
    localAsReplaceAs?: boolean;
    /**
     * Neighbor address
     */
    neighborAddress: string;
    /**
     * Specifies an ENCRYPTED password will follow
     */
    password?: string;
    /**
     * bgp as-number
     */
    remoteAs?: string;
    /**
     * Administratively shut down this neighbor
     */
    shutdown?: boolean;
    /**
     * Holdtime. Set 0 to disable keepalives/hold time.
     */
    timersHoldtime?: string;
    /**
     * BGP timers
     *   - Range: `0`-`65535`
     */
    timersKeepaliveInterval?: number;
    /**
     * Minimum acceptable holdtime from neighbor. Set 0 to disable keepalives/hold time.
     */
    timersMinimumAcceptableHoldtime?: string;
    /**
     * Enable EBGP TTL security
     */
    ttlSecurity?: boolean;
    /**
     * Source of routing updates
     */
    updateSource?: string;
    /**
     * Inherit configuration from a neighbor-group
     */
    useNeighborGroup?: string;
}

export interface RouterBgpNeighborGroupAddressFamily {
    /**
     * Enter Address Family command mode
     *   - Choices: `all-address-family`, `ipv4-flowspec`, `ipv4-labeled-unicast`, `ipv4-mdt`, `ipv4-multicast`, `ipv4-mvpn`, `ipv4-rt-filter`, `ipv4-sr-policy`, `ipv4-tunnel`, `ipv4-unicast`, `ipv6-flowspec`, `ipv6-labeled-unicast`, `ipv6-multicast`, `ipv6-mvpn`, `ipv6-sr-policy`, `ipv6-unicast`, `l2vpn-evpn`, `l2vpn-mspw`, `l2vpn-vpls-vpws`, `link-state-link-state`, `vpnv4-flowspec`, `vpnv4-multicast`, `vpnv4-unicast`, `vpnv6-flowspec`, `vpnv6-multicast`, `vpnv6-unicast`
     */
    afName: string;
    /**
     * Disable the next hop calculation for this neighbor
     */
    nextHopSelf?: boolean;
    /**
     * Prevent next-hop-self from being inherited from the parent
     */
    nextHopSelfInheritanceDisable?: boolean;
    /**
     * Apply route policy to inbound routes
     */
    routePolicyIn?: string;
    /**
     * Apply route policy to outbound routes
     */
    routePolicyOut?: string;
    /**
     * Configure a neighbor as Route Reflector client
     */
    routeReflectorClient?: boolean;
    /**
     * Prevent route-reflector-client from being inherited from the parent
     */
    routeReflectorClientInheritanceDisable?: boolean;
    /**
     * Always use soft reconfig, even if route refresh is supported
     */
    softReconfigurationInboundAlways?: boolean;
}

export interface RouterBgpVrfAddressFamilyAggregateAddress {
    /**
     * IPv6 Aggregate address and mask or masklength
     */
    address: string;
    /**
     * Generate AS confed set path information
     */
    asConfedSet?: boolean;
    /**
     * Generate AS set path information
     */
    asSet?: boolean;
    /**
     * Network in prefix/length format (prefix part)
     *   - Range: `0`-`128`
     */
    masklength: number;
    /**
     * Filter more specific routes from updates
     */
    summaryOnly?: boolean;
}

export interface RouterBgpVrfAddressFamilyNetwork {
    /**
     * IPv6 network and mask or masklength
     */
    address: string;
    /**
     * Network in prefix/length format (prefix part)
     *   - Range: `0`-`128`
     */
    masklength: number;
    /**
     * Route-policy to modify the attributes
     */
    routePolicy?: string;
}

export interface RouterBgpVrfAddressFamilyRedistributeOspf {
    /**
     * Redistribute OSPF external routes
     */
    matchExternal?: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchExternalNssaExternal?: boolean;
    /**
     * Redistribute OSPF internal routes
     */
    matchInternal?: boolean;
    /**
     * Redistribute OSPF external routes
     */
    matchInternalExternal?: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchInternalNssaExternal?: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchNssaExternal?: boolean;
    /**
     * Metric for redistributed routes
     *   - Range: `0`-`4294967295`
     */
    metric?: number;
    /**
     * Route policy reference
     */
    routePolicy?: string;
    /**
     * Open Shortest Path First (OSPF)
     */
    routerTag: string;
}

export interface RouterBgpVrfNeighbor {
    /**
     * time in milliseconds
     *   - Range: `0`-`999`
     */
    advertisementIntervalMilliseconds?: number;
    /**
     * Minimum interval between sending BGP routing updates
     *   - Range: `0`-`600`
     */
    advertisementIntervalSeconds?: number;
    /**
     * Enable Fast detection
     */
    bfdFastDetect?: boolean;
    /**
     * Prevent bfd settings from being inherited from the parent
     */
    bfdFastDetectDisable?: boolean;
    /**
     * Hold down neighbor session until BFD session is up
     */
    bfdFastDetectStrictMode?: boolean;
    /**
     * Hello interval
     *   - Range: `3`-`30000`
     */
    bfdMinimumInterval?: number;
    /**
     * Detect multiplier
     *   - Range: `2`-`16`
     */
    bfdMultiplier?: number;
    /**
     * Neighbor specific description
     */
    description?: string;
    /**
     * maximum hop count
     *   - Range: `1`-`255`
     */
    ebgpMultihopMaximumHopCount?: number;
    /**
     * Bypass the directly connected nexthop check for single-hop eBGP peering
     */
    ignoreConnectedCheck?: boolean;
    /**
     * bgp as-number
     */
    localAs?: string;
    /**
     * Dual-AS mode
     */
    localAsDualAs?: boolean;
    /**
     * Do not prepend local AS to announcements from this neighbor
     */
    localAsNoPrepend?: boolean;
    /**
     * Prepend only local AS to announcements to this neighbor
     */
    localAsReplaceAs?: boolean;
    /**
     * Neighbor address
     */
    neighborAddress: string;
    /**
     * Specifies an ENCRYPTED password will follow
     */
    password?: string;
    /**
     * bgp as-number
     */
    remoteAs?: string;
    /**
     * Administratively shut down this neighbor
     */
    shutdown?: boolean;
    /**
     * Holdtime. Set 0 to disable keepalives/hold time.
     */
    timersHoldtime?: string;
    /**
     * BGP timers
     *   - Range: `0`-`65535`
     */
    timersKeepaliveInterval?: number;
    /**
     * Enable EBGP TTL security
     */
    ttlSecurity?: boolean;
    /**
     * Source of routing updates
     */
    updateSource?: string;
    /**
     * Inherit configuration from a neighbor-group
     */
    useNeighborGroup?: string;
}

export interface RouterHsrpInterfaceIpv4GroupV1SecondaryIpv4Address {
    /**
     * Set secondary hot standby IP address
     */
    address: string;
}

export interface RouterHsrpInterfaceIpv4GroupV1TrackInterface {
    /**
     * Priority decrement
     *   - Range: `1`-`255`
     */
    priorityDecrement: number;
    /**
     * Configure tracking
     */
    trackName: string;
}

export interface RouterHsrpInterfaceIpv4GroupV1TrackObject {
    /**
     * Object tracking
     */
    objectName: string;
    /**
     * Priority decrement
     *   - Range: `1`-`255`
     */
    priorityDecrement: number;
}

export interface RouterHsrpInterfaceIpv4GroupV2SecondaryIpv4Address {
    /**
     * Set secondary hot standby IP address
     */
    address: string;
}

export interface RouterHsrpInterfaceIpv4GroupV2TrackInterface {
    /**
     * Priority decrement
     *   - Range: `1`-`255`
     */
    priorityDecrement: number;
    /**
     * Configure tracking
     */
    trackName: string;
}

export interface RouterHsrpInterfaceIpv4GroupV2TrackObject {
    /**
     * Object tracking
     */
    objectName: string;
    /**
     * Priority decrement
     *   - Range: `1`-`255`
     */
    priorityDecrement: number;
}

export interface RouterHsrpInterfaceIpv6GroupV2Address {
    /**
     * Set Global HSRP IPv6 address
     */
    address: string;
}

export interface RouterHsrpInterfaceIpv6GroupV2TrackInterface {
    /**
     * Priority decrement
     *   - Range: `1`-`255`
     */
    priorityDecrement: number;
    /**
     * Configure tracking
     */
    trackName: string;
}

export interface RouterHsrpInterfaceIpv6GroupV2TrackObject {
    /**
     * Object tracking
     */
    objectName: string;
    /**
     * Priority decrement
     *   - Range: `1`-`255`
     */
    priorityDecrement: number;
}

export interface RouterIsisAddressFamilyMaximumRedistributedPrefixesLevel {
    /**
     * Set maximum redistributed prefixes for one level only
     *   - Range: `1`-`2`
     */
    levelId: number;
    /**
     * Maximum number of redistributed prefixes
     *   - Range: `1`-`28000`
     */
    maximumPrefixes: number;
}

export interface RouterIsisAddressFamilyMetricStyleLevel {
    /**
     * Set metric-style for one level only
     *   - Range: `1`-`2`
     */
    levelId: number;
    /**
     * Use old style of TLVs with narrow metric
     */
    narrow?: boolean;
    /**
     * Send and accept both styles of TLVs during transition
     */
    transition?: boolean;
    /**
     * Use new style of TLVs to carry wider metric
     */
    wide?: boolean;
}

export interface RouterIsisAddressFamilyRedistributeIse {
    /**
     * IS-IS
     */
    instanceId: string;
    /**
     * Route policy reference
     */
    routePolicy?: string;
}

export interface RouterIsisAddressFamilySegmentRoutingSrv6Locator {
    /**
     * Advertise the locator only in the specified level
     *   - Range: `1`-`2`
     */
    level?: number;
    /**
     * Enter SRv6 Locator submode
     */
    locatorName: string;
}

export interface RouterIsisAddressFamilySpfPrefixPriority {
    /**
     * Access-list name
     */
    accessListName?: string;
    /**
     * prefix priority
     *   - Choices: `critical`, `high`, `medium`
     */
    priority: string;
    /**
     * Specify a tag to indicate priority
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
}

export interface RouterIsisAffinityMap {
    /**
     * Bit position for affinity attribute value
     *   - Range: `0`-`255`
     */
    bitPosition: number;
    /**
     * Affinity map configuration
     */
    name: string;
}

export interface RouterIsisFlexAlgo {
    /**
     * Advertise the Flex-Algo Definition
     */
    advertiseDefinition?: boolean;
    /**
     * Flex Algorithm definition
     *   - Range: `128`-`255`
     */
    algorithmNumber: number;
    /**
     * Use delay as metric
     */
    metricTypeDelay?: boolean;
}

export interface RouterIsisInterface {
    /**
     * Configure circuit type for interface
     *   - Choices: `level-1`, `level-1-2`, `level-2-only`
     */
    circuitType?: string;
    /**
     * Disable hello-padding
     */
    helloPaddingDisable?: boolean;
    /**
     * Enable hello-padding during adjacency formation only
     */
    helloPaddingSometimes?: boolean;
    /**
     * Enter the IS-IS interface configuration submode
     */
    interfaceName: string;
    /**
     * Do not establish adjacencies over this interface
     */
    passive?: boolean;
    /**
     * Treat active LAN interface as point-to-point
     */
    pointToPoint?: boolean;
    /**
     * Set priority for Designated Router election
     *   - Range: `0`-`127`
     */
    priority?: number;
    /**
     * Shutdown IS-IS on this interface
     */
    shutdown?: boolean;
    /**
     * Do not advertise connected prefixes of this interface
     */
    suppressed?: boolean;
}

export interface RouterIsisInterfaceAddressFamilyFastReroutePerPrefixLevel {
    /**
     * Enable EPCFRR LFA for one level only
     *   - Range: `1`-`2`
     */
    levelId: number;
    /**
     * Enable TI LFA computation
     */
    tiLfa?: boolean;
}

export interface RouterIsisInterfaceAddressFamilyMetricLevel {
    /**
     * Set metric for one level only
     *   - Range: `1`-`2`
     */
    levelId: number;
    /**
     * Maximum wide metric. All routers will exclude this link from their SPF
     */
    maximum?: boolean;
    /**
     * Default metric
     *   - Range: `1`-`16777214`
     */
    metric?: number;
}

export interface RouterIsisNet {
    /**
     * A Network Entity Title (NET) for this process
     */
    netId: string;
}

export interface RouterIsisSetOverloadBitLevel {
    /**
     * If overload-bit set advertise IP prefixes learned from other protocols
     */
    advertiseExternal?: boolean;
    /**
     * If overload-bit set advertise IP prefixes learned from another ISIS level
     */
    advertiseInterlevel?: boolean;
    /**
     * Set overload-bit for one level only
     *   - Range: `1`-`2`
     */
    levelId: number;
    /**
     * Time in seconds to advertise ourself as overloaded after reboot
     */
    onStartupAdvertiseAsOverloaded?: boolean;
    /**
     * Time in seconds to advertise ourself as overloaded after reboot
     *   - Range: `5`-`86400`
     */
    onStartupAdvertiseAsOverloadedTimeToAdvertise?: number;
    /**
     * Set overload bit on startup until BGP signals convergence, or timeout
     */
    onStartupWaitForBgp?: boolean;
}

export interface RouterOspfArea {
    /**
     * Enter the OSPF area configuration submode
     */
    areaId: string;
}

export interface RouterOspfAreaInterfacePrefixSidAlgorithm {
    /**
     * Force penultimate hop to send explicit-null label
     */
    absoluteExplicitNull?: boolean;
    /**
     * Not a node SID (e.g. for anycast SID use)
     */
    absoluteNFlagClear?: boolean;
    /**
     * SID value
     *   - Range: `16000`-`1048575`
     */
    absoluteSidLabel?: number;
    /**
     * Algorithm Specific Prefix SID Configuration
     *   - Range: `128`-`255`
     */
    algorithmNumber: number;
    /**
     * Force penultimate hop to send explicit-null label
     */
    indexExplicitNull?: boolean;
    /**
     * Not a node SID (e.g. for anycast SID use)
     */
    indexNFlagClear?: boolean;
    /**
     * SID Index
     *   - Range: `0`-`1048575`
     */
    indexSidIndex?: number;
}

export interface RouterOspfRedistributeBgp {
    /**
     * bgp as-number
     */
    asNumber: string;
    /**
     * OSPF exterior metric type for redistributed routes
     *   - Choices: `1`, `2`
     */
    metricType?: string;
    /**
     * Set tag for routes redistributed into OSPF
     *   - Range: `0`-`4294967295`
     */
    tag?: number;
}

export interface RouterOspfRedistributeIse {
    /**
     * ISO IS-IS
     */
    instanceName: string;
    /**
     * IS-IS level-1 routes only
     */
    level1?: boolean;
    /**
     * IS-IS level-1 and level-2 routes
     */
    level12?: boolean;
    /**
     * IS-IS level-2 routes only
     */
    level2?: boolean;
    /**
     * OSPF exterior metric type for redistributed routes
     *   - Choices: `1`, `2`
     */
    metricType?: string;
    /**
     * Set tag for routes redistributed into OSPF
     *   - Range: `0`-`4294967295`
     */
    tag?: number;
}

export interface RouterOspfRedistributeOspf {
    /**
     * Open Shortest Path First (OSPF)
     */
    instanceName: string;
    /**
     * Redistribute OSPF external routes
     */
    matchExternal?: boolean;
    /**
     * Redistribute OSPF internal routes
     */
    matchInternal?: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchNssaExternal?: boolean;
    /**
     * OSPF exterior metric type for redistributed routes
     *   - Choices: `1`, `2`
     */
    metricType?: string;
    /**
     * Set tag for routes redistributed into OSPF
     *   - Range: `0`-`4294967295`
     */
    tag?: number;
}

export interface RouterOspfVrfArea {
    /**
     * Enter the OSPF area configuration submode
     */
    areaId: string;
}

export interface RouterOspfVrfRedistributeBgp {
    /**
     * bgp as-number
     */
    asNumber: string;
    /**
     * OSPF exterior metric type for redistributed routes
     *   - Choices: `1`, `2`
     */
    metricType?: string;
    /**
     * Set tag for routes redistributed into OSPF
     *   - Range: `0`-`4294967295`
     */
    tag?: number;
}

export interface RouterOspfVrfRedistributeIse {
    /**
     * ISO IS-IS
     */
    instanceName: string;
    /**
     * IS-IS level-1 routes only
     */
    level1?: boolean;
    /**
     * IS-IS level-1 and level-2 routes
     */
    level12?: boolean;
    /**
     * IS-IS level-2 routes only
     */
    level2?: boolean;
    /**
     * OSPF exterior metric type for redistributed routes
     *   - Choices: `1`, `2`
     */
    metricType?: string;
    /**
     * Set tag for routes redistributed into OSPF
     *   - Range: `0`-`4294967295`
     */
    tag?: number;
}

export interface RouterOspfVrfRedistributeOspf {
    /**
     * Open Shortest Path First (OSPF)
     */
    instanceName: string;
    /**
     * Redistribute OSPF external routes
     */
    matchExternal?: boolean;
    /**
     * Redistribute OSPF internal routes
     */
    matchInternal?: boolean;
    /**
     * Redistribute OSPF NSSA external routes
     */
    matchNssaExternal?: boolean;
    /**
     * OSPF exterior metric type for redistributed routes
     *   - Choices: `1`, `2`
     */
    metricType?: string;
    /**
     * Set tag for routes redistributed into OSPF
     *   - Range: `0`-`4294967295`
     */
    tag?: number;
}

export interface RouterStaticIpv4MulticastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv4MulticastNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv4MulticastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv4MulticastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses?: outputs.RouterStaticIpv4MulticastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses?: outputs.RouterStaticIpv4MulticastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces?: outputs.RouterStaticIpv4MulticastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface RouterStaticIpv4MulticastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv4MulticastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv4MulticastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv4UnicastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv4UnicastNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv4UnicastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv4UnicastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses?: outputs.RouterStaticIpv4UnicastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses?: outputs.RouterStaticIpv4UnicastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces?: outputs.RouterStaticIpv4UnicastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface RouterStaticIpv4UnicastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv4UnicastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv4UnicastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv6MulticastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv6MulticastNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv6MulticastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv6MulticastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses?: outputs.RouterStaticIpv6MulticastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses?: outputs.RouterStaticIpv6MulticastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces?: outputs.RouterStaticIpv6MulticastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface RouterStaticIpv6MulticastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv6MulticastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv6MulticastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv6UnicastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv6UnicastNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv6UnicastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv6UnicastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses?: outputs.RouterStaticIpv6UnicastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses?: outputs.RouterStaticIpv6UnicastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces?: outputs.RouterStaticIpv6UnicastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface RouterStaticIpv6UnicastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv6UnicastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticIpv6UnicastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv4MulticastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv4MulticastNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv4MulticastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv4MulticastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses?: outputs.RouterStaticVrfIpv4MulticastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses?: outputs.RouterStaticVrfIpv4MulticastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces?: outputs.RouterStaticVrfIpv4MulticastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface RouterStaticVrfIpv4MulticastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv4MulticastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv4MulticastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv4UnicastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv4UnicastNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv4UnicastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv4UnicastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses?: outputs.RouterStaticVrfIpv4UnicastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses?: outputs.RouterStaticVrfIpv4UnicastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces?: outputs.RouterStaticVrfIpv4UnicastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface RouterStaticVrfIpv4UnicastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv4UnicastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv4UnicastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv6MulticastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv6MulticastNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv6MulticastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv6MulticastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses?: outputs.RouterStaticVrfIpv6MulticastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses?: outputs.RouterStaticVrfIpv6MulticastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces?: outputs.RouterStaticVrfIpv6MulticastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface RouterStaticVrfIpv6MulticastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv6MulticastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv6MulticastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv6UnicastNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv6UnicastNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv6UnicastNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv6UnicastVrf {
    /**
     * Forwarding router's address
     */
    nexthopAddresses?: outputs.RouterStaticVrfIpv6UnicastVrfNexthopAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaceAddresses?: outputs.RouterStaticVrfIpv6UnicastVrfNexthopInterfaceAddress[];
    /**
     * Forwarding interface
     */
    nexthopInterfaces?: outputs.RouterStaticVrfIpv6UnicastVrfNexthopInterface[];
    /**
     * Destination VRF
     */
    vrfName: string;
}

export interface RouterStaticVrfIpv6UnicastVrfNexthopAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv6UnicastVrfNexthopInterface {
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterStaticVrfIpv6UnicastVrfNexthopInterfaceAddress {
    /**
     * Forwarding router's address
     */
    address: string;
    /**
     * description of the static route
     */
    description?: string;
    /**
     * Distance metric for this route
     *   - Range: `1`-`254`
     */
    distanceMetric?: number;
    /**
     * Forwarding interface
     */
    interfaceName: string;
    /**
     * Set metric for this route
     *   - Range: `1`-`16777214`
     */
    metric?: number;
    /**
     * Permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
    /**
     * Enable object tracking for static route
     */
    track?: string;
}

export interface RouterVrrpInterfaceIpv4SecondaryAddress {
    /**
     * VRRP IPv4 address
     */
    address: string;
}

export interface RouterVrrpInterfaceIpv4TrackInterface {
    /**
     * Track an interface
     */
    interfaceName: string;
    /**
     * Priority decrement
     *   - Range: `1`-`254`
     */
    priorityDecrement?: number;
}

export interface RouterVrrpInterfaceIpv4TrackObject {
    /**
     * Object to be tracked
     */
    objectName: string;
    /**
     * Priority decrement
     *   - Range: `1`-`254`
     */
    priorityDecrement: number;
}

export interface RouterVrrpInterfaceIpv6TrackInterface {
    /**
     * Track an interface
     */
    interfaceName: string;
    /**
     * Priority decrement
     *   - Range: `1`-`254`
     */
    priorityDecrement?: number;
}

export interface RouterVrrpInterfaceIpv6TrackObject {
    /**
     * Object to be tracked
     */
    objectName: string;
    /**
     * Priority decrement
     *   - Range: `1`-`254`
     */
    priorityDecrement: number;
}

export interface SegmentRoutingTeOnDemandColor {
    /**
     * Color
     *   - Range: `1`-`4294967295`
     */
    color: number;
    /**
     * Protection Type
     *   - Choices: `protected-only`, `protected-preferred`, `unprotected-only`, `unprotected-preferred`
     */
    constraintSegmentsProtectionType?: string;
    /**
     * '0' for regular SIDs, '1' for strict-spf SIDs, '128' - '255' for algorithm SIDs
     *   - Range: `0`-`255`
     */
    constraintSegmentsSidAlgorithm?: number;
    /**
     * Anycast Prefix SID Inclusion. Applicable for SR-MPLS and SRv6 policies
     */
    dynamicAnycastSidInclusion?: boolean;
    /**
     * Metric Type
     *   - Choices: `hopcount`, `igp`, `latency`, `te`
     */
    dynamicMetricType?: string;
    /**
     * True only
     */
    effectiveMetricEnable?: boolean;
    /**
     * Metric type, advertised to other protocols
     *   - Choices: `default`, `hopcount`, `igp`, `latency`, `te`
     */
    effectiveMetricType?: string;
    /**
     * Integer value of metric
     *   - Range: `0`-`4294967295`
     */
    effectiveMetricValue?: number;
    /**
     * Source address
     */
    sourceAddress: string;
    /**
     * IP address type
     *   - Choices: `end-point-type-ipv4`, `end-point-type-ipv6`
     */
    sourceAddressType: string;
    /**
     * True only
     */
    srv6Enable?: boolean;
    /**
     * SRv6 USID Behavior
     *   - Choices: `ub6-insert-reduced`
     */
    srv6LocatorBehavior?: string;
    /**
     * Binding Segment ID type
     *   - Choices: `srv6-dynamic`
     */
    srv6LocatorBindingSidType?: string;
    /**
     * SRv6 locator name
     */
    srv6LocatorName?: string;
}

export interface SegmentRoutingTePcePeer {
    /**
     * Remote PCE address
     */
    pceAddress: string;
    /**
     * Precedence value of this PCE
     *   - Range: `0`-`255`
     */
    precedence?: number;
}

export interface SegmentRoutingTePolicy {
    /**
     * End point address
     */
    policyColorEndpointAddress: string;
    /**
     * Color
     *   - Range: `1`-`4294967295`
     */
    policyColorEndpointColor: number;
    /**
     * End point type
     *   - Choices: `end-point-type-ipv4`, `end-point-type-ipv6`
     */
    policyColorEndpointType: string;
    /**
     * Policy name
     */
    policyName: string;
    /**
     * Source address
     */
    sourceAddress: string;
    /**
     * IP address type
     *   - Choices: `end-point-type-ipv4`, `end-point-type-ipv6`
     */
    sourceAddressType: string;
    /**
     * True only
     */
    srv6Enable?: boolean;
    /**
     * SRv6 USID Behavior
     *   - Choices: `ub6-insert-reduced`
     */
    srv6LocatorBehavior?: string;
    /**
     * Binding Segment ID type
     *   - Choices: `srv6-dynamic`
     */
    srv6LocatorBindingSidType?: string;
    /**
     * SRv6 locator name
     */
    srv6LocatorName?: string;
}

export interface SegmentRoutingTePolicyCandidatePathPathInfo {
    /**
     * Type of dynamic path to be computed
     *   - Choices: `mpls`, `srv6`
     */
    hopType: string;
    /**
     * Metric type
     *   - Choices: `hopcount`, `igp`, `latency`, `te`
     */
    metricType?: string;
    /**
     * Path Computation Element Protocol
     */
    pcep?: boolean;
    /**
     * Segment-list name
     */
    segmentListName: string;
    /**
     * Path-option type
     *   - Choices: `dynamic`, `explicit`
     */
    type: string;
}

export interface SegmentRoutingV6Locator {
    /**
     * Enable a SRv6 locator
     */
    locatorEnable?: boolean;
    /**
     * Specify Locator's behavior
     *   - Choices: `unode-psp-usd`, `unode-shift-only`
     */
    microSegmentBehavior?: string;
    /**
     * Locator name
     */
    name: string;
    /**
     * IPv6 Prefix
     */
    prefix?: string;
    /**
     * Prefix length
     *   - Range: `32`-`112`
     */
    prefixLength?: number;
}

export interface SnmpServerCommunity {
    /**
     * The UNENCRYPTED (cleartext) community string
     */
    community: string;
    /**
     * Type of Access-list
     */
    ipv4?: string;
    /**
     * Type of Access-list
     */
    ipv6?: string;
    /**
     * Read-only community
     */
    ro?: boolean;
    /**
     * Read-write community
     */
    rw?: boolean;
    /**
     * SDR Owner permissions for MIB Objects
     */
    sdrowner?: boolean;
    /**
     * System Owner permissions for MIB objects
     */
    systemowner?: boolean;
    /**
     * Restrict this community to a named view
     */
    view?: string;
}

export interface SnmpServerGroup {
    /**
     * Name of the group
     */
    groupName: string;
    /**
     * Attach a SNMP context
     */
    v3Context?: string;
    /**
     * Type of Access-list
     */
    v3Ipv4?: string;
    /**
     * Type of Access-list
     */
    v3Ipv6?: string;
    /**
     * specify a notify view for the group
     */
    v3Notify?: string;
    /**
     * group using authPriv Security Level
     */
    v3Priv?: boolean;
    /**
     * specify a read view for this group
     */
    v3Read?: string;
    /**
     * specify a write view for this group
     */
    v3Write?: string;
}

export interface SnmpServerUser {
    /**
     * Group to which the user belongs
     */
    groupName: string;
    /**
     * Name of the user
     */
    userName: string;
    /**
     * Specifies an aes-128 ENCRYPTED authentication password
     */
    v3AuthMd5EncryptionAes?: string;
    /**
     * Specifies an default ENCRYPTED authentication password
     */
    v3AuthMd5EncryptionDefault?: string;
    /**
     * Specifies an aes-128 ENCRYPTED authentication password
     */
    v3AuthShaEncryptionAes?: string;
    /**
     * Specifies an default ENCRYPTED authentication password
     */
    v3AuthShaEncryptionDefault?: string;
    /**
     * Type of Access-list
     */
    v3Ipv4?: string;
    /**
     * Specifies an aes-128 ENCRYPTED authentication password
     */
    v3PrivAesAes128EncryptionAes?: string;
    /**
     * Specifies an default ENCRYPTED authentication password
     */
    v3PrivAesAes128EncryptionDefault?: string;
    /**
     * System Owner permissions for MIB objects
     */
    v3Systemowner?: boolean;
}

export interface SnmpServerViewMibViewFamily {
    /**
     * MIB family is excluded from the view
     */
    excluded?: boolean;
    /**
     * MIB family is included in the view
     */
    included?: boolean;
    /**
     * MIB view family name
     */
    name: string;
}

export interface SnmpServerVrfHostUnencryptedString {
    /**
     * The UNENCRYPTED (cleartext) community string
     */
    communityString: string;
    /**
     * udp port to which notifications should be sent
     *   - Default value: `default`
     */
    udpPort: string;
    /**
     * - Choices: `auth`, `noauth`, `priv`
     */
    versionV3SecurityLevel: string;
}

export interface SshServerVrf {
    /**
     * Configure IPv4 access-list
     */
    ipv4AccessList?: string;
    /**
     * Configure IPv6 access-list
     */
    ipv6AccessList?: string;
    /**
     * Cisco sshd VRF name
     */
    vrfName: string;
}

export interface TelnetVrf {
    /**
     * Access list for telnet server
     */
    ipv4ServerAccessList?: string;
    /**
     * Set number of allowable telnet sessions
     *   - Range: `1`-`100`
     */
    ipv4ServerMaxServers?: number;
    /**
     * Access list for telnet server
     */
    ipv6ServerAccessList?: string;
    /**
     * Set number of allowable telnet sessions
     *   - Range: `1`-`100`
     */
    ipv6ServerMaxServers?: number;
    /**
     * Name of VRF
     */
    vrfName: string;
}

export interface TelnetVrfsDscp {
    /**
     * dscp
     *   - Range: `0`-`63`
     */
    ipv4Dscp: number;
    /**
     * Name of VRF
     */
    vrfName: string;
}

export interface VrfAddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat {
    /**
     * Four Byte AS number
     *   - Range: `65536`-`4294967295`
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface VrfAddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat {
    /**
     * IPv4Address:index (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    index: number;
    /**
     * IP address
     */
    ipAddress: string;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface VrfAddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat {
    /**
     * Two Byte AS Number
     *   - Range: `1`-`65535`
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     *   - Range: `0`-`4294967295`
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface VrfAddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat {
    /**
     * Four Byte AS number
     *   - Range: `65536`-`4294967295`
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface VrfAddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat {
    /**
     * IPv4Address:index (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    index: number;
    /**
     * IP address
     */
    ipAddress: string;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface VrfAddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat {
    /**
     * Two Byte AS Number
     *   - Range: `1`-`65535`
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     *   - Range: `0`-`4294967295`
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface VrfAddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat {
    /**
     * Four Byte AS number
     *   - Range: `65536`-`4294967295`
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface VrfAddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat {
    /**
     * IPv4Address:index (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    index: number;
    /**
     * IP address
     */
    ipAddress: string;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface VrfAddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat {
    /**
     * Two Byte AS Number
     *   - Range: `1`-`65535`
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     *   - Range: `0`-`4294967295`
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface VrfAddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat {
    /**
     * Four Byte AS number
     *   - Range: `65536`-`4294967295`
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface VrfAddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat {
    /**
     * IPv4Address:index (hex or decimal format)
     *   - Range: `0`-`65535`
     */
    index: number;
    /**
     * IP address
     */
    ipAddress: string;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export interface VrfAddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat {
    /**
     * Two Byte AS Number
     *   - Range: `1`-`65535`
     */
    asNumber: number;
    /**
     * ASN2:index (hex or decimal format)
     *   - Range: `0`-`4294967295`
     */
    index: number;
    /**
     * These are stitching RTs
     */
    stitching: boolean;
}

export namespace config {
    export interface Devices {
        /**
         * IP of the Cisco IOS-XR device.
         */
        host: string;
        /**
         * Device name.
         */
        name: string;
    }

}
