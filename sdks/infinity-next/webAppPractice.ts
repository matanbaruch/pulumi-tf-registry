// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WebAppPractice extends pulumi.CustomResource {
    /**
     * Get an existing WebAppPractice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebAppPracticeState, opts?: pulumi.CustomResourceOptions): WebAppPractice {
        return new WebAppPractice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infinity-next:index/webAppPractice:WebAppPractice';

    /**
     * Returns true if the given object is an instance of WebAppPractice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebAppPractice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebAppPractice.__pulumiType;
    }

    public /*out*/ readonly category!: pulumi.Output<string>;
    public /*out*/ readonly default!: pulumi.Output<boolean>;
    /**
     * IPS protection
     */
    public readonly ips!: pulumi.Output<outputs.WebAppPracticeIps | undefined>;
    /**
     * The name of the resource, also acts as its unique ID
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly practiceType!: pulumi.Output<string>;
    public readonly webAttacks!: pulumi.Output<outputs.WebAppPracticeWebAttacks | undefined>;
    public readonly webBot!: pulumi.Output<outputs.WebAppPracticeWebBot | undefined>;

    /**
     * Create a WebAppPractice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WebAppPracticeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebAppPracticeArgs | WebAppPracticeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebAppPracticeState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["practiceType"] = state ? state.practiceType : undefined;
            resourceInputs["webAttacks"] = state ? state.webAttacks : undefined;
            resourceInputs["webBot"] = state ? state.webBot : undefined;
        } else {
            const args = argsOrState as WebAppPracticeArgs | undefined;
            resourceInputs["ips"] = args ? args.ips : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["webAttacks"] = args ? args.webAttacks : undefined;
            resourceInputs["webBot"] = args ? args.webBot : undefined;
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["default"] = undefined /*out*/;
            resourceInputs["practiceType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebAppPractice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WebAppPractice resources.
 */
export interface WebAppPracticeState {
    category?: pulumi.Input<string>;
    default?: pulumi.Input<boolean>;
    /**
     * IPS protection
     */
    ips?: pulumi.Input<inputs.WebAppPracticeIps>;
    /**
     * The name of the resource, also acts as its unique ID
     */
    name?: pulumi.Input<string>;
    practiceType?: pulumi.Input<string>;
    webAttacks?: pulumi.Input<inputs.WebAppPracticeWebAttacks>;
    webBot?: pulumi.Input<inputs.WebAppPracticeWebBot>;
}

/**
 * The set of arguments for constructing a WebAppPractice resource.
 */
export interface WebAppPracticeArgs {
    /**
     * IPS protection
     */
    ips?: pulumi.Input<inputs.WebAppPracticeIps>;
    /**
     * The name of the resource, also acts as its unique ID
     */
    name?: pulumi.Input<string>;
    webAttacks?: pulumi.Input<inputs.WebAppPracticeWebAttacks>;
    webBot?: pulumi.Input<inputs.WebAppPracticeWebBot>;
}
