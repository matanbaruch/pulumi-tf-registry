// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TrustedSources extends pulumi.CustomResource {
    /**
     * Get an existing TrustedSources resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrustedSourcesState, opts?: pulumi.CustomResourceOptions): TrustedSources {
        return new TrustedSources(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infinity-next:index/trustedSources:TrustedSources';

    /**
     * Returns true if the given object is an instance of TrustedSources.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrustedSources {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrustedSources.__pulumiType;
    }

    /**
     * Minimum number of users or addresses that must exhibit similar activity for the behavior to be considered benign
     */
    public readonly minNumOfSources!: pulumi.Output<number>;
    /**
     * The name of the resource, also acts as its unique ID
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The trusted sources identifier values
     */
    public readonly sourcesIdentifiers!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly sourcesIdentifiersIds!: pulumi.Output<string[]>;

    /**
     * Create a TrustedSources resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrustedSourcesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrustedSourcesArgs | TrustedSourcesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrustedSourcesState | undefined;
            resourceInputs["minNumOfSources"] = state ? state.minNumOfSources : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourcesIdentifiers"] = state ? state.sourcesIdentifiers : undefined;
            resourceInputs["sourcesIdentifiersIds"] = state ? state.sourcesIdentifiersIds : undefined;
        } else {
            const args = argsOrState as TrustedSourcesArgs | undefined;
            if ((!args || args.minNumOfSources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minNumOfSources'");
            }
            resourceInputs["minNumOfSources"] = args ? args.minNumOfSources : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourcesIdentifiers"] = args ? args.sourcesIdentifiers : undefined;
            resourceInputs["sourcesIdentifiersIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrustedSources.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TrustedSources resources.
 */
export interface TrustedSourcesState {
    /**
     * Minimum number of users or addresses that must exhibit similar activity for the behavior to be considered benign
     */
    minNumOfSources?: pulumi.Input<number>;
    /**
     * The name of the resource, also acts as its unique ID
     */
    name?: pulumi.Input<string>;
    /**
     * The trusted sources identifier values
     */
    sourcesIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    sourcesIdentifiersIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a TrustedSources resource.
 */
export interface TrustedSourcesArgs {
    /**
     * Minimum number of users or addresses that must exhibit similar activity for the behavior to be considered benign
     */
    minNumOfSources: pulumi.Input<number>;
    /**
     * The name of the resource, also acts as its unique ID
     */
    name?: pulumi.Input<string>;
    /**
     * The trusted sources identifier values
     */
    sourcesIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
}
