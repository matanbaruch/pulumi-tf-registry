// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessTokenArgs, AccessTokenState } from "./accessToken";
export type AccessToken = import("./accessToken").AccessToken;
export const AccessToken: typeof import("./accessToken").AccessToken = null as any;
utilities.lazyLoad(exports, ["AccessToken"], () => require("./accessToken"));

export { AppsecGatewayProfileArgs, AppsecGatewayProfileState } from "./appsecGatewayProfile";
export type AppsecGatewayProfile = import("./appsecGatewayProfile").AppsecGatewayProfile;
export const AppsecGatewayProfile: typeof import("./appsecGatewayProfile").AppsecGatewayProfile = null as any;
utilities.lazyLoad(exports, ["AppsecGatewayProfile"], () => require("./appsecGatewayProfile"));

export { DockerProfileArgs, DockerProfileState } from "./dockerProfile";
export type DockerProfile = import("./dockerProfile").DockerProfile;
export const DockerProfile: typeof import("./dockerProfile").DockerProfile = null as any;
utilities.lazyLoad(exports, ["DockerProfile"], () => require("./dockerProfile"));

export { EmbeddedProfileArgs, EmbeddedProfileState } from "./embeddedProfile";
export type EmbeddedProfile = import("./embeddedProfile").EmbeddedProfile;
export const EmbeddedProfile: typeof import("./embeddedProfile").EmbeddedProfile = null as any;
utilities.lazyLoad(exports, ["EmbeddedProfile"], () => require("./embeddedProfile"));

export { ExceptionsArgs, ExceptionsState } from "./exceptions";
export type Exceptions = import("./exceptions").Exceptions;
export const Exceptions: typeof import("./exceptions").Exceptions = null as any;
utilities.lazyLoad(exports, ["Exceptions"], () => require("./exceptions"));

export { KubernetesProfileArgs, KubernetesProfileState } from "./kubernetesProfile";
export type KubernetesProfile = import("./kubernetesProfile").KubernetesProfile;
export const KubernetesProfile: typeof import("./kubernetesProfile").KubernetesProfile = null as any;
utilities.lazyLoad(exports, ["KubernetesProfile"], () => require("./kubernetesProfile"));

export { LogTriggerArgs, LogTriggerState } from "./logTrigger";
export type LogTrigger = import("./logTrigger").LogTrigger;
export const LogTrigger: typeof import("./logTrigger").LogTrigger = null as any;
utilities.lazyLoad(exports, ["LogTrigger"], () => require("./logTrigger"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TrustedSourcesArgs, TrustedSourcesState } from "./trustedSources";
export type TrustedSources = import("./trustedSources").TrustedSources;
export const TrustedSources: typeof import("./trustedSources").TrustedSources = null as any;
utilities.lazyLoad(exports, ["TrustedSources"], () => require("./trustedSources"));

export { WebApiAssetArgs, WebApiAssetState } from "./webApiAsset";
export type WebApiAsset = import("./webApiAsset").WebApiAsset;
export const WebApiAsset: typeof import("./webApiAsset").WebApiAsset = null as any;
utilities.lazyLoad(exports, ["WebApiAsset"], () => require("./webApiAsset"));

export { WebApiPracticeArgs, WebApiPracticeState } from "./webApiPractice";
export type WebApiPractice = import("./webApiPractice").WebApiPractice;
export const WebApiPractice: typeof import("./webApiPractice").WebApiPractice = null as any;
utilities.lazyLoad(exports, ["WebApiPractice"], () => require("./webApiPractice"));

export { WebAppAssetArgs, WebAppAssetState } from "./webAppAsset";
export type WebAppAsset = import("./webAppAsset").WebAppAsset;
export const WebAppAsset: typeof import("./webAppAsset").WebAppAsset = null as any;
utilities.lazyLoad(exports, ["WebAppAsset"], () => require("./webAppAsset"));

export { WebAppPracticeArgs, WebAppPracticeState } from "./webAppPractice";
export type WebAppPractice = import("./webAppPractice").WebAppPractice;
export const WebAppPractice: typeof import("./webAppPractice").WebAppPractice = null as any;
utilities.lazyLoad(exports, ["WebAppPractice"], () => require("./webAppPractice"));

export { WebUserResponseArgs, WebUserResponseState } from "./webUserResponse";
export type WebUserResponse = import("./webUserResponse").WebUserResponse;
export const WebUserResponse: typeof import("./webUserResponse").WebUserResponse = null as any;
utilities.lazyLoad(exports, ["WebUserResponse"], () => require("./webUserResponse"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "infinity-next:index/accessToken:AccessToken":
                return new AccessToken(name, <any>undefined, { urn })
            case "infinity-next:index/appsecGatewayProfile:AppsecGatewayProfile":
                return new AppsecGatewayProfile(name, <any>undefined, { urn })
            case "infinity-next:index/dockerProfile:DockerProfile":
                return new DockerProfile(name, <any>undefined, { urn })
            case "infinity-next:index/embeddedProfile:EmbeddedProfile":
                return new EmbeddedProfile(name, <any>undefined, { urn })
            case "infinity-next:index/exceptions:Exceptions":
                return new Exceptions(name, <any>undefined, { urn })
            case "infinity-next:index/kubernetesProfile:KubernetesProfile":
                return new KubernetesProfile(name, <any>undefined, { urn })
            case "infinity-next:index/logTrigger:LogTrigger":
                return new LogTrigger(name, <any>undefined, { urn })
            case "infinity-next:index/trustedSources:TrustedSources":
                return new TrustedSources(name, <any>undefined, { urn })
            case "infinity-next:index/webApiAsset:WebApiAsset":
                return new WebApiAsset(name, <any>undefined, { urn })
            case "infinity-next:index/webApiPractice:WebApiPractice":
                return new WebApiPractice(name, <any>undefined, { urn })
            case "infinity-next:index/webAppAsset:WebAppAsset":
                return new WebAppAsset(name, <any>undefined, { urn })
            case "infinity-next:index/webAppPractice:WebAppPractice":
                return new WebAppPractice(name, <any>undefined, { urn })
            case "infinity-next:index/webUserResponse:WebUserResponse":
                return new WebUserResponse(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("infinity-next", "index/accessToken", _module)
pulumi.runtime.registerResourceModule("infinity-next", "index/appsecGatewayProfile", _module)
pulumi.runtime.registerResourceModule("infinity-next", "index/dockerProfile", _module)
pulumi.runtime.registerResourceModule("infinity-next", "index/embeddedProfile", _module)
pulumi.runtime.registerResourceModule("infinity-next", "index/exceptions", _module)
pulumi.runtime.registerResourceModule("infinity-next", "index/kubernetesProfile", _module)
pulumi.runtime.registerResourceModule("infinity-next", "index/logTrigger", _module)
pulumi.runtime.registerResourceModule("infinity-next", "index/trustedSources", _module)
pulumi.runtime.registerResourceModule("infinity-next", "index/webApiAsset", _module)
pulumi.runtime.registerResourceModule("infinity-next", "index/webApiPractice", _module)
pulumi.runtime.registerResourceModule("infinity-next", "index/webAppAsset", _module)
pulumi.runtime.registerResourceModule("infinity-next", "index/webAppPractice", _module)
pulumi.runtime.registerResourceModule("infinity-next", "index/webUserResponse", _module)
pulumi.runtime.registerResourcePackage("infinity-next", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:infinity-next") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
