// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WebAppAsset extends pulumi.CustomResource {
    /**
     * Get an existing WebAppAsset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebAppAssetState, opts?: pulumi.CustomResourceOptions): WebAppAsset {
        return new WebAppAsset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infinity-next:index/webAppAsset:WebAppAsset';

    /**
     * Returns true if the given object is an instance of WebAppAsset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebAppAsset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebAppAsset.__pulumiType;
    }

    public /*out*/ readonly assetType!: pulumi.Output<string>;
    public /*out*/ readonly category!: pulumi.Output<string>;
    public /*out*/ readonly class!: pulumi.Output<string>;
    public /*out*/ readonly family!: pulumi.Output<string>;
    public /*out*/ readonly group!: pulumi.Output<string>;
    public /*out*/ readonly intelligenceTags!: pulumi.Output<string>;
    public /*out*/ readonly kind!: pulumi.Output<string>;
    public /*out*/ readonly mainAttributes!: pulumi.Output<string>;
    /**
     * The name of the resource, also acts as its unique ID
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly order!: pulumi.Output<string>;
    /**
     * The practices used by the asset
     */
    public readonly practices!: pulumi.Output<outputs.WebAppAssetPractice[] | undefined>;
    /**
     * Profiles linked to the asset
     */
    public readonly profiles!: pulumi.Output<string[] | undefined>;
    /**
     * Settings for the proxy
     */
    public readonly proxySettings!: pulumi.Output<outputs.WebAppAssetProxySetting[] | undefined>;
    public /*out*/ readonly readOnly!: pulumi.Output<boolean>;
    /**
     * Defines how the source identifier valuess of the asset are retrieved
     */
    public readonly sourceIdentifiers!: pulumi.Output<outputs.WebAppAssetSourceIdentifier[] | undefined>;
    public /*out*/ readonly sources!: pulumi.Output<string>;
    /**
     * Trusted sources behavior used by the asset
     */
    public readonly trustedSources!: pulumi.Output<string[] | undefined>;
    /**
     * The URL of the application's backend server to which the reverse proxy redirects the relevant traffic sent to the
     * exposed URL
     */
    public readonly upstreamUrl!: pulumi.Output<string | undefined>;
    /**
     * The application URLs
     */
    public readonly urls!: pulumi.Output<string[]>;
    public /*out*/ readonly urlsIds!: pulumi.Output<string[]>;

    /**
     * Create a WebAppAsset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebAppAssetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebAppAssetArgs | WebAppAssetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebAppAssetState | undefined;
            resourceInputs["assetType"] = state ? state.assetType : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["class"] = state ? state.class : undefined;
            resourceInputs["family"] = state ? state.family : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["intelligenceTags"] = state ? state.intelligenceTags : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["mainAttributes"] = state ? state.mainAttributes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["practices"] = state ? state.practices : undefined;
            resourceInputs["profiles"] = state ? state.profiles : undefined;
            resourceInputs["proxySettings"] = state ? state.proxySettings : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["sourceIdentifiers"] = state ? state.sourceIdentifiers : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["trustedSources"] = state ? state.trustedSources : undefined;
            resourceInputs["upstreamUrl"] = state ? state.upstreamUrl : undefined;
            resourceInputs["urls"] = state ? state.urls : undefined;
            resourceInputs["urlsIds"] = state ? state.urlsIds : undefined;
        } else {
            const args = argsOrState as WebAppAssetArgs | undefined;
            if ((!args || args.urls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'urls'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["practices"] = args ? args.practices : undefined;
            resourceInputs["profiles"] = args ? args.profiles : undefined;
            resourceInputs["proxySettings"] = args ? args.proxySettings : undefined;
            resourceInputs["sourceIdentifiers"] = args ? args.sourceIdentifiers : undefined;
            resourceInputs["trustedSources"] = args ? args.trustedSources : undefined;
            resourceInputs["upstreamUrl"] = args ? args.upstreamUrl : undefined;
            resourceInputs["urls"] = args ? args.urls : undefined;
            resourceInputs["assetType"] = undefined /*out*/;
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["class"] = undefined /*out*/;
            resourceInputs["family"] = undefined /*out*/;
            resourceInputs["group"] = undefined /*out*/;
            resourceInputs["intelligenceTags"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["mainAttributes"] = undefined /*out*/;
            resourceInputs["order"] = undefined /*out*/;
            resourceInputs["readOnly"] = undefined /*out*/;
            resourceInputs["sources"] = undefined /*out*/;
            resourceInputs["urlsIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebAppAsset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WebAppAsset resources.
 */
export interface WebAppAssetState {
    assetType?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    class?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    intelligenceTags?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    mainAttributes?: pulumi.Input<string>;
    /**
     * The name of the resource, also acts as its unique ID
     */
    name?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
    /**
     * The practices used by the asset
     */
    practices?: pulumi.Input<pulumi.Input<inputs.WebAppAssetPractice>[]>;
    /**
     * Profiles linked to the asset
     */
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Settings for the proxy
     */
    proxySettings?: pulumi.Input<pulumi.Input<inputs.WebAppAssetProxySetting>[]>;
    readOnly?: pulumi.Input<boolean>;
    /**
     * Defines how the source identifier valuess of the asset are retrieved
     */
    sourceIdentifiers?: pulumi.Input<pulumi.Input<inputs.WebAppAssetSourceIdentifier>[]>;
    sources?: pulumi.Input<string>;
    /**
     * Trusted sources behavior used by the asset
     */
    trustedSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The URL of the application's backend server to which the reverse proxy redirects the relevant traffic sent to the
     * exposed URL
     */
    upstreamUrl?: pulumi.Input<string>;
    /**
     * The application URLs
     */
    urls?: pulumi.Input<pulumi.Input<string>[]>;
    urlsIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a WebAppAsset resource.
 */
export interface WebAppAssetArgs {
    /**
     * The name of the resource, also acts as its unique ID
     */
    name?: pulumi.Input<string>;
    /**
     * The practices used by the asset
     */
    practices?: pulumi.Input<pulumi.Input<inputs.WebAppAssetPractice>[]>;
    /**
     * Profiles linked to the asset
     */
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Settings for the proxy
     */
    proxySettings?: pulumi.Input<pulumi.Input<inputs.WebAppAssetProxySetting>[]>;
    /**
     * Defines how the source identifier valuess of the asset are retrieved
     */
    sourceIdentifiers?: pulumi.Input<pulumi.Input<inputs.WebAppAssetSourceIdentifier>[]>;
    /**
     * Trusted sources behavior used by the asset
     */
    trustedSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The URL of the application's backend server to which the reverse proxy redirects the relevant traffic sent to the
     * exposed URL
     */
    upstreamUrl?: pulumi.Input<string>;
    /**
     * The application URLs
     */
    urls: pulumi.Input<pulumi.Input<string>[]>;
}
