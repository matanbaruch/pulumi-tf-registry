// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ExceptionsException {
    /**
     * The action of the exception: accept, drop, skip or suppressLog
     */
    action: string;
    actionId: string;
    /**
     * Comment for the exception
     */
    comment?: string;
    id: string;
    matches: outputs.ExceptionsExceptionMatch[];
}

export interface ExceptionsExceptionMatch {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: string;
    operands?: outputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand[];
    operator?: string;
    values?: string[];
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
}

export interface WebApiAssetPractice {
    /**
     * The exceptions used with the practice
     */
    exceptions?: string[];
    id: string;
    /**
     * The mode of the practice: Prevent, Inactive, Disabled or Learn
     */
    mainMode: string;
    practiceWrapperId: string;
    /**
     * The name of the sub practice as the key and its mode as the value. Allowed modes: Detect, Prevent, Inactive, AccordingToPractice, Disabled, Learn or Active
     */
    subPracticesModes?: {[key: string]: string};
    /**
     * The triggers used with the practice
     */
    triggers?: string[];
}

export interface WebApiAssetProxySetting {
    id: string;
    key: string;
    value: string;
}

export interface WebApiAssetSourceIdentifier {
    id: string;
    /**
     * The identifier of the source: SourceIP, XForwardedFor, HeaderKey or Cookie
     */
    identifier?: string;
    values?: string[];
    valuesIds: string[];
}

export interface WebApiPracticeApiAttacks {
    advancedSetting?: outputs.WebApiPracticeApiAttacksAdvancedSetting;
    id: string;
    /**
     * Medium, High or Critical
     */
    minimumSeverity?: string;
}

export interface WebApiPracticeApiAttacksAdvancedSetting {
    bodySize?: number;
    headerSize?: number;
    id: string;
    illegalHttpMethods?: boolean;
    maxObjectDepth?: number;
    urlSize?: number;
}

export interface WebApiPracticeIps {
    /**
     * Detect, Prevent or Inactive
     */
    highConfidence?: string;
    id: string;
    /**
     * Detect, Prevent or Inactive
     */
    lowConfidence?: string;
    /**
     * Detect, Prevent or Inactive
     */
    mediumConfidence?: string;
    /**
     * The performance impact: LowOrLower, MediumOrLower or HighOrLower
     */
    performanceImpact?: string;
    /**
     * The year to apply protections from: 1999, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020
     */
    protectionsFromYear?: string;
    /**
     * The severity level: LowOrAbove, MediumOrAbove, HighOrAbove or Critical
     */
    severityLevel?: string;
}

export interface WebApiPracticeSchemaValidation {
    data: string;
    filename: string;
    id: string;
}

export interface WebAppAssetPractice {
    /**
     * The exceptions used with the practice
     */
    exceptions?: string[];
    id: string;
    /**
     * The mode of the practice: Prevent, Inactive, Disabled or Learn
     */
    mainMode: string;
    practiceWrapperId: string;
    /**
     * The name of the sub practice as the key and its mode as the value. Allowed modes: Detect, Prevent, Inactive, AccordingToPractice, Disabled, Learn or Active
     */
    subPracticesModes?: {[key: string]: string};
    /**
     * The triggers used with the practice
     */
    triggers?: string[];
}

export interface WebAppAssetProxySetting {
    id: string;
    key: string;
    value: string;
}

export interface WebAppAssetSourceIdentifier {
    id: string;
    /**
     * The identifier of the source: SourceIP, XForwardedFor, HeaderKey or Cookie
     */
    identifier?: string;
    values?: string[];
    valuesIds: string[];
}

export interface WebAppPracticeIps {
    /**
     * Detect, Prevent or Inactive
     */
    highConfidence?: string;
    id: string;
    /**
     * Detect, Prevent or Inactive
     */
    lowConfidence?: string;
    /**
     * Detect, Prevent or Inactive
     */
    mediumConfidence?: string;
    /**
     * The performance impact: LowOrLower, MediumOrLower or HighOrLower
     */
    performanceImpact?: string;
    /**
     * The year to apply protections from: 1999, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020
     */
    protectionsFromYear?: string;
    /**
     * The severity level: LowOrAbove, MediumOrAbove, HighOrAbove or Critical
     */
    severityLevel?: string;
}

export interface WebAppPracticeWebAttacks {
    advancedSetting?: outputs.WebAppPracticeWebAttacksAdvancedSetting;
    id: string;
    /**
     * Medium, High or Critical
     */
    minimumSeverity?: string;
}

export interface WebAppPracticeWebAttacksAdvancedSetting {
    bodySize?: number;
    /**
     * Prevent, AccordingToPractice, Disabled or Learn
     */
    csrfProtection?: string;
    /**
     * Prevent, AccordingToPractice, Disabled or Learn
     */
    errorDisclosure?: string;
    headerSize?: number;
    id: string;
    illegalHttpMethods?: boolean;
    maxObjectDepth?: number;
    /**
     * Prevent, AccordingToPractice, Disabled or Learn
     */
    openRedirect?: string;
    urlSize?: number;
}

export interface WebAppPracticeWebBot {
    id: string;
    /**
     * Defines where to inject the Anti-Bot script. The input is the path of the URI
     */
    injectUris?: string[];
    injectUrisIds: string[];
    /**
     * Defines which requests must be validated after the script is injected into a specific URI.
     * The input is the path of the URI
     */
    validUris?: string[];
    validUrisIds: string[];
}

