// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ExceptionsException {
    /**
     * The action of the exception: accept, drop, skip or suppressLog
     */
    action: pulumi.Input<string>;
    actionId?: pulumi.Input<string>;
    /**
     * Comment for the exception
     */
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    matches: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatch>[]>;
}

export interface ExceptionsExceptionMatch {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
    key?: pulumi.Input<string>;
    operands?: pulumi.Input<pulumi.Input<inputs.ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand>[]>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExceptionsExceptionMatchOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperandOperand {
}

export interface WebApiAssetPractice {
    /**
     * The exceptions used with the practice
     */
    exceptions?: pulumi.Input<pulumi.Input<string>[]>;
    id: pulumi.Input<string>;
    /**
     * The mode of the practice: Prevent, Inactive, Disabled or Learn
     */
    mainMode: pulumi.Input<string>;
    practiceWrapperId?: pulumi.Input<string>;
    /**
     * The name of the sub practice as the key and its mode as the value. Allowed modes: Detect, Prevent, Inactive, AccordingToPractice, Disabled, Learn or Active
     */
    subPracticesModes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The triggers used with the practice
     */
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WebApiAssetProxySetting {
    id?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface WebApiAssetSourceIdentifier {
    id?: pulumi.Input<string>;
    /**
     * The identifier of the source: SourceIP, XForwardedFor, HeaderKey or Cookie
     */
    identifier?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
    valuesIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WebApiPracticeApiAttacks {
    advancedSetting?: pulumi.Input<inputs.WebApiPracticeApiAttacksAdvancedSetting>;
    id?: pulumi.Input<string>;
    /**
     * Medium, High or Critical
     */
    minimumSeverity?: pulumi.Input<string>;
}

export interface WebApiPracticeApiAttacksAdvancedSetting {
    bodySize?: pulumi.Input<number>;
    headerSize?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    illegalHttpMethods?: pulumi.Input<boolean>;
    maxObjectDepth?: pulumi.Input<number>;
    urlSize?: pulumi.Input<number>;
}

export interface WebApiPracticeIps {
    /**
     * Detect, Prevent or Inactive
     */
    highConfidence?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * Detect, Prevent or Inactive
     */
    lowConfidence?: pulumi.Input<string>;
    /**
     * Detect, Prevent or Inactive
     */
    mediumConfidence?: pulumi.Input<string>;
    /**
     * The performance impact: LowOrLower, MediumOrLower or HighOrLower
     */
    performanceImpact?: pulumi.Input<string>;
    /**
     * The year to apply protections from: 1999, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020
     */
    protectionsFromYear?: pulumi.Input<string>;
    /**
     * The severity level: LowOrAbove, MediumOrAbove, HighOrAbove or Critical
     */
    severityLevel?: pulumi.Input<string>;
}

export interface WebApiPracticeSchemaValidation {
    data: pulumi.Input<string>;
    filename: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}

export interface WebAppAssetPractice {
    /**
     * The exceptions used with the practice
     */
    exceptions?: pulumi.Input<pulumi.Input<string>[]>;
    id: pulumi.Input<string>;
    /**
     * The mode of the practice: Prevent, Inactive, Disabled or Learn
     */
    mainMode: pulumi.Input<string>;
    practiceWrapperId?: pulumi.Input<string>;
    /**
     * The name of the sub practice as the key and its mode as the value. Allowed modes: Detect, Prevent, Inactive, AccordingToPractice, Disabled, Learn or Active
     */
    subPracticesModes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The triggers used with the practice
     */
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WebAppAssetProxySetting {
    id?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface WebAppAssetSourceIdentifier {
    id?: pulumi.Input<string>;
    /**
     * The identifier of the source: SourceIP, XForwardedFor, HeaderKey or Cookie
     */
    identifier?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
    valuesIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WebAppPracticeIps {
    /**
     * Detect, Prevent or Inactive
     */
    highConfidence?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * Detect, Prevent or Inactive
     */
    lowConfidence?: pulumi.Input<string>;
    /**
     * Detect, Prevent or Inactive
     */
    mediumConfidence?: pulumi.Input<string>;
    /**
     * The performance impact: LowOrLower, MediumOrLower or HighOrLower
     */
    performanceImpact?: pulumi.Input<string>;
    /**
     * The year to apply protections from: 1999, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020
     */
    protectionsFromYear?: pulumi.Input<string>;
    /**
     * The severity level: LowOrAbove, MediumOrAbove, HighOrAbove or Critical
     */
    severityLevel?: pulumi.Input<string>;
}

export interface WebAppPracticeWebAttacks {
    advancedSetting?: pulumi.Input<inputs.WebAppPracticeWebAttacksAdvancedSetting>;
    id?: pulumi.Input<string>;
    /**
     * Medium, High or Critical
     */
    minimumSeverity?: pulumi.Input<string>;
}

export interface WebAppPracticeWebAttacksAdvancedSetting {
    bodySize?: pulumi.Input<number>;
    /**
     * Prevent, AccordingToPractice, Disabled or Learn
     */
    csrfProtection?: pulumi.Input<string>;
    /**
     * Prevent, AccordingToPractice, Disabled or Learn
     */
    errorDisclosure?: pulumi.Input<string>;
    headerSize?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    illegalHttpMethods?: pulumi.Input<boolean>;
    maxObjectDepth?: pulumi.Input<number>;
    /**
     * Prevent, AccordingToPractice, Disabled or Learn
     */
    openRedirect?: pulumi.Input<string>;
    urlSize?: pulumi.Input<number>;
}

export interface WebAppPracticeWebBot {
    id?: pulumi.Input<string>;
    /**
     * Defines where to inject the Anti-Bot script. The input is the path of the URI
     */
    injectUris?: pulumi.Input<pulumi.Input<string>[]>;
    injectUrisIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines which requests must be validated after the script is injected into a specific URI.
     * The input is the path of the URI
     */
    validUris?: pulumi.Input<pulumi.Input<string>[]>;
    validUrisIds?: pulumi.Input<pulumi.Input<string>[]>;
}
