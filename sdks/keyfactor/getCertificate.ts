// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCertificate(args: GetCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("keyfactor:index/getCertificate:getCertificate", {
        "collectionId": args.collectionId,
        "identifier": args.identifier,
        "keyPassword": args.keyPassword,
        "metadata": args.metadata,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCertificate.
 */
export interface GetCertificateArgs {
    collectionId?: number;
    identifier: string;
    keyPassword?: string;
    metadata?: {[key: string]: string};
}

/**
 * A collection of values returned by getCertificate.
 */
export interface GetCertificateResult {
    readonly caCertificate: string;
    readonly certificateAuthority: string;
    readonly certificateChain: string;
    readonly certificateId: number;
    readonly certificatePem: string;
    readonly certificateTemplate: string;
    readonly collectionId?: number;
    readonly commandRequestId: number;
    readonly commonName: string;
    readonly country: string;
    readonly csr: string;
    readonly dnsSans: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly identifier: string;
    readonly ipSans: string[];
    readonly issuerDn: string;
    readonly keyPassword?: string;
    readonly locality: string;
    readonly metadata?: {[key: string]: string};
    readonly organization: string;
    readonly organizationalUnit: string;
    readonly privateKey: string;
    readonly serialNumber: string;
    readonly state: string;
    readonly thumbprint: string;
    readonly uriSans: string[];
}
export function getCertificateOutput(args: GetCertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificateResult> {
    return pulumi.output(args).apply((a: any) => getCertificate(a, opts))
}

/**
 * A collection of arguments for invoking getCertificate.
 */
export interface GetCertificateOutputArgs {
    collectionId?: pulumi.Input<number>;
    identifier: pulumi.Input<string>;
    keyPassword?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
