// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Identity extends pulumi.CustomResource {
    /**
     * Get an existing Identity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityState, opts?: pulumi.CustomResourceOptions): Identity {
        return new Identity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keyfactor:index/identity:Identity';

    /**
     * Returns true if the given object is an instance of Identity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Identity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Identity.__pulumiType;
    }

    /**
     * A string containing the account name for the security identity. For Active Directory user and groups, this will be in
     * the form DOMAIN\\user or group name
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * A string indicating the type of identity—User or Group.
     */
    public /*out*/ readonly identityType!: pulumi.Output<string>;
    /**
     * An array containing the role IDs that the identity is attached to.
     */
    public readonly roles!: pulumi.Output<string[] | undefined>;
    /**
     * A Boolean that indicates whether the security identity's audit XML is valid (true) or not (false). A security identity
     * may become invalid if Keyfactor Command determines that it appears to have been tampered with.
     */
    public /*out*/ readonly valid!: pulumi.Output<boolean>;

    /**
     * Create a Identity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityArgs | IdentityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["identityType"] = state ? state.identityType : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["valid"] = state ? state.valid : undefined;
        } else {
            const args = argsOrState as IdentityArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["identityType"] = undefined /*out*/;
            resourceInputs["valid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Identity.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Identity resources.
 */
export interface IdentityState {
    /**
     * A string containing the account name for the security identity. For Active Directory user and groups, this will be in
     * the form DOMAIN\\user or group name
     */
    accountName?: pulumi.Input<string>;
    /**
     * A string indicating the type of identity—User or Group.
     */
    identityType?: pulumi.Input<string>;
    /**
     * An array containing the role IDs that the identity is attached to.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A Boolean that indicates whether the security identity's audit XML is valid (true) or not (false). A security identity
     * may become invalid if Keyfactor Command determines that it appears to have been tampered with.
     */
    valid?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Identity resource.
 */
export interface IdentityArgs {
    /**
     * A string containing the account name for the security identity. For Active Directory user and groups, this will be in
     * the form DOMAIN\\user or group name
     */
    accountName: pulumi.Input<string>;
    /**
     * An array containing the role IDs that the identity is attached to.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}
