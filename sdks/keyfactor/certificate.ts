// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keyfactor:index/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * PEM formatted CA certificate
     */
    public /*out*/ readonly caCertificate!: pulumi.Output<string>;
    /**
     * Name of certificate authority to deploy certificate with Ex: Example Company CA 1
     */
    public readonly certificateAuthority!: pulumi.Output<string>;
    /**
     * PEM formatted full certificate chain
     */
    public /*out*/ readonly certificateChain!: pulumi.Output<string>;
    /**
     * Keyfactor Command certificate ID.
     */
    public /*out*/ readonly certificateId!: pulumi.Output<number>;
    /**
     * PEM formatted certificate
     */
    public /*out*/ readonly certificatePem!: pulumi.Output<string>;
    /**
     * Short name of certificate template to be deployed
     */
    public readonly certificateTemplate!: pulumi.Output<string>;
    /**
     * Optional certificate collection ID. This is required if enrollment permissions have been granted at the collection
     * level. NOTE: This will *not* assign the cert to the specified collection ID; assignment is based the collection's
     * associated query. For more information on collection permissions see the Keyfactor Command docs:
     * https://software.keyfactor.com/Core-OnPrem/Current/Content/ReferenceGuide/CertificatePermissions.htm?Highlight=collection%20permissions
     */
    public readonly collectionId!: pulumi.Output<number | undefined>;
    /**
     * Keyfactor request ID.
     */
    public /*out*/ readonly commandRequestId!: pulumi.Output<number>;
    /**
     * Subject common name (CN) of the certificate.
     */
    public readonly commonName!: pulumi.Output<string | undefined>;
    /**
     * Subject country of the certificate
     */
    public readonly country!: pulumi.Output<string | undefined>;
    /**
     * Base-64 encoded certificate signing request (CSR)
     */
    public readonly csr!: pulumi.Output<string | undefined>;
    /**
     * List of DNS names to use as subjects of the certificate.
     */
    public readonly dnsSans!: pulumi.Output<string[] | undefined>;
    /**
     * Keyfactor certificate identifier. This can be any of the following values: thumbprint, CN, or Keyfactor Command
     * Certificate ID. If using CN to lookup the last issued certificate, the CN must be an exact match and if multiple
     * certificates are returned the certificate that was most recently issued will be returned.
     */
    public /*out*/ readonly identifier!: pulumi.Output<string>;
    /**
     * List of DNS names to use as subjects of the certificate.
     */
    public readonly ipSans!: pulumi.Output<string[] | undefined>;
    /**
     * Issuer distinguished name that signed the certificate
     */
    public /*out*/ readonly issuerDn!: pulumi.Output<string>;
    public readonly keyPassword!: pulumi.Output<string | undefined>;
    /**
     * Subject locality (L) of the certificate
     */
    public readonly locality!: pulumi.Output<string | undefined>;
    /**
     * Metadata key-value pairs to be attached to certificate
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Subject organization (O) of the certificate
     */
    public readonly organization!: pulumi.Output<string | undefined>;
    /**
     * Subject organizational unit (OU) of the certificate
     */
    public readonly organizationalUnit!: pulumi.Output<string | undefined>;
    /**
     * PEM formatted PKCS#1 private key imported if cert_template has KeyRetention set to a value other than None, and the
     * certificate was not enrolled using a CSR.
     */
    public /*out*/ readonly privateKey!: pulumi.Output<string>;
    /**
     * Serial number of newly enrolled certificate
     */
    public /*out*/ readonly serialNumber!: pulumi.Output<string>;
    /**
     * Subject state (ST) of the certificate
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * Thumbprint of newly enrolled certificate
     */
    public /*out*/ readonly thumbprint!: pulumi.Output<string>;
    /**
     * List of URIs to use as subjects of the certificate.
     */
    public readonly uriSans!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["caCertificate"] = state ? state.caCertificate : undefined;
            resourceInputs["certificateAuthority"] = state ? state.certificateAuthority : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["certificatePem"] = state ? state.certificatePem : undefined;
            resourceInputs["certificateTemplate"] = state ? state.certificateTemplate : undefined;
            resourceInputs["collectionId"] = state ? state.collectionId : undefined;
            resourceInputs["commandRequestId"] = state ? state.commandRequestId : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["csr"] = state ? state.csr : undefined;
            resourceInputs["dnsSans"] = state ? state.dnsSans : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["ipSans"] = state ? state.ipSans : undefined;
            resourceInputs["issuerDn"] = state ? state.issuerDn : undefined;
            resourceInputs["keyPassword"] = state ? state.keyPassword : undefined;
            resourceInputs["locality"] = state ? state.locality : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["organizationalUnit"] = state ? state.organizationalUnit : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["thumbprint"] = state ? state.thumbprint : undefined;
            resourceInputs["uriSans"] = state ? state.uriSans : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if ((!args || args.certificateAuthority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthority'");
            }
            if ((!args || args.certificateTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateTemplate'");
            }
            resourceInputs["certificateAuthority"] = args ? args.certificateAuthority : undefined;
            resourceInputs["certificateTemplate"] = args ? args.certificateTemplate : undefined;
            resourceInputs["collectionId"] = args ? args.collectionId : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["csr"] = args ? args.csr : undefined;
            resourceInputs["dnsSans"] = args ? args.dnsSans : undefined;
            resourceInputs["ipSans"] = args ? args.ipSans : undefined;
            resourceInputs["keyPassword"] = args?.keyPassword ? pulumi.secret(args.keyPassword) : undefined;
            resourceInputs["locality"] = args ? args.locality : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["organizationalUnit"] = args ? args.organizationalUnit : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["uriSans"] = args ? args.uriSans : undefined;
            resourceInputs["caCertificate"] = undefined /*out*/;
            resourceInputs["certificateChain"] = undefined /*out*/;
            resourceInputs["certificateId"] = undefined /*out*/;
            resourceInputs["certificatePem"] = undefined /*out*/;
            resourceInputs["commandRequestId"] = undefined /*out*/;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["issuerDn"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["keyPassword", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Certificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * PEM formatted CA certificate
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * Name of certificate authority to deploy certificate with Ex: Example Company CA 1
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * PEM formatted full certificate chain
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * Keyfactor Command certificate ID.
     */
    certificateId?: pulumi.Input<number>;
    /**
     * PEM formatted certificate
     */
    certificatePem?: pulumi.Input<string>;
    /**
     * Short name of certificate template to be deployed
     */
    certificateTemplate?: pulumi.Input<string>;
    /**
     * Optional certificate collection ID. This is required if enrollment permissions have been granted at the collection
     * level. NOTE: This will *not* assign the cert to the specified collection ID; assignment is based the collection's
     * associated query. For more information on collection permissions see the Keyfactor Command docs:
     * https://software.keyfactor.com/Core-OnPrem/Current/Content/ReferenceGuide/CertificatePermissions.htm?Highlight=collection%20permissions
     */
    collectionId?: pulumi.Input<number>;
    /**
     * Keyfactor request ID.
     */
    commandRequestId?: pulumi.Input<number>;
    /**
     * Subject common name (CN) of the certificate.
     */
    commonName?: pulumi.Input<string>;
    /**
     * Subject country of the certificate
     */
    country?: pulumi.Input<string>;
    /**
     * Base-64 encoded certificate signing request (CSR)
     */
    csr?: pulumi.Input<string>;
    /**
     * List of DNS names to use as subjects of the certificate.
     */
    dnsSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Keyfactor certificate identifier. This can be any of the following values: thumbprint, CN, or Keyfactor Command
     * Certificate ID. If using CN to lookup the last issued certificate, the CN must be an exact match and if multiple
     * certificates are returned the certificate that was most recently issued will be returned.
     */
    identifier?: pulumi.Input<string>;
    /**
     * List of DNS names to use as subjects of the certificate.
     */
    ipSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Issuer distinguished name that signed the certificate
     */
    issuerDn?: pulumi.Input<string>;
    keyPassword?: pulumi.Input<string>;
    /**
     * Subject locality (L) of the certificate
     */
    locality?: pulumi.Input<string>;
    /**
     * Metadata key-value pairs to be attached to certificate
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Subject organization (O) of the certificate
     */
    organization?: pulumi.Input<string>;
    /**
     * Subject organizational unit (OU) of the certificate
     */
    organizationalUnit?: pulumi.Input<string>;
    /**
     * PEM formatted PKCS#1 private key imported if cert_template has KeyRetention set to a value other than None, and the
     * certificate was not enrolled using a CSR.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Serial number of newly enrolled certificate
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * Subject state (ST) of the certificate
     */
    state?: pulumi.Input<string>;
    /**
     * Thumbprint of newly enrolled certificate
     */
    thumbprint?: pulumi.Input<string>;
    /**
     * List of URIs to use as subjects of the certificate.
     */
    uriSans?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Name of certificate authority to deploy certificate with Ex: Example Company CA 1
     */
    certificateAuthority: pulumi.Input<string>;
    /**
     * Short name of certificate template to be deployed
     */
    certificateTemplate: pulumi.Input<string>;
    /**
     * Optional certificate collection ID. This is required if enrollment permissions have been granted at the collection
     * level. NOTE: This will *not* assign the cert to the specified collection ID; assignment is based the collection's
     * associated query. For more information on collection permissions see the Keyfactor Command docs:
     * https://software.keyfactor.com/Core-OnPrem/Current/Content/ReferenceGuide/CertificatePermissions.htm?Highlight=collection%20permissions
     */
    collectionId?: pulumi.Input<number>;
    /**
     * Subject common name (CN) of the certificate.
     */
    commonName?: pulumi.Input<string>;
    /**
     * Subject country of the certificate
     */
    country?: pulumi.Input<string>;
    /**
     * Base-64 encoded certificate signing request (CSR)
     */
    csr?: pulumi.Input<string>;
    /**
     * List of DNS names to use as subjects of the certificate.
     */
    dnsSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of DNS names to use as subjects of the certificate.
     */
    ipSans?: pulumi.Input<pulumi.Input<string>[]>;
    keyPassword?: pulumi.Input<string>;
    /**
     * Subject locality (L) of the certificate
     */
    locality?: pulumi.Input<string>;
    /**
     * Metadata key-value pairs to be attached to certificate
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Subject organization (O) of the certificate
     */
    organization?: pulumi.Input<string>;
    /**
     * Subject organizational unit (OU) of the certificate
     */
    organizationalUnit?: pulumi.Input<string>;
    /**
     * Subject state (ST) of the certificate
     */
    state?: pulumi.Input<string>;
    /**
     * List of URIs to use as subjects of the certificate.
     */
    uriSans?: pulumi.Input<pulumi.Input<string>[]>;
}
