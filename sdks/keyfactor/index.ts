// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CertificateDeploymentArgs, CertificateDeploymentState } from "./certificateDeployment";
export type CertificateDeployment = import("./certificateDeployment").CertificateDeployment;
export const CertificateDeployment: typeof import("./certificateDeployment").CertificateDeployment = null as any;
utilities.lazyLoad(exports, ["CertificateDeployment"], () => require("./certificateDeployment"));

export { CertificateStoreArgs, CertificateStoreState } from "./certificateStore";
export type CertificateStore = import("./certificateStore").CertificateStore;
export const CertificateStore: typeof import("./certificateStore").CertificateStore = null as any;
utilities.lazyLoad(exports, ["CertificateStore"], () => require("./certificateStore"));

export { GetAgentArgs, GetAgentResult, GetAgentOutputArgs } from "./getAgent";
export const getAgent: typeof import("./getAgent").getAgent = null as any;
export const getAgentOutput: typeof import("./getAgent").getAgentOutput = null as any;
utilities.lazyLoad(exports, ["getAgent","getAgentOutput"], () => require("./getAgent"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetCertificateStoreArgs, GetCertificateStoreResult, GetCertificateStoreOutputArgs } from "./getCertificateStore";
export const getCertificateStore: typeof import("./getCertificateStore").getCertificateStore = null as any;
export const getCertificateStoreOutput: typeof import("./getCertificateStore").getCertificateStoreOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateStore","getCertificateStoreOutput"], () => require("./getCertificateStore"));

export { GetCertificateTemplateArgs, GetCertificateTemplateResult, GetCertificateTemplateOutputArgs } from "./getCertificateTemplate";
export const getCertificateTemplate: typeof import("./getCertificateTemplate").getCertificateTemplate = null as any;
export const getCertificateTemplateOutput: typeof import("./getCertificateTemplate").getCertificateTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateTemplate","getCertificateTemplateOutput"], () => require("./getCertificateTemplate"));

export { GetIdentityArgs, GetIdentityResult, GetIdentityOutputArgs } from "./getIdentity";
export const getIdentity: typeof import("./getIdentity").getIdentity = null as any;
export const getIdentityOutput: typeof import("./getIdentity").getIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getIdentity","getIdentityOutput"], () => require("./getIdentity"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { IdentityArgs, IdentityState } from "./identity";
export type Identity = import("./identity").Identity;
export const Identity: typeof import("./identity").Identity = null as any;
utilities.lazyLoad(exports, ["Identity"], () => require("./identity"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { TemplateRoleBindingArgs, TemplateRoleBindingState } from "./templateRoleBinding";
export type TemplateRoleBinding = import("./templateRoleBinding").TemplateRoleBinding;
export const TemplateRoleBinding: typeof import("./templateRoleBinding").TemplateRoleBinding = null as any;
utilities.lazyLoad(exports, ["TemplateRoleBinding"], () => require("./templateRoleBinding"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "keyfactor:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "keyfactor:index/certificateDeployment:CertificateDeployment":
                return new CertificateDeployment(name, <any>undefined, { urn })
            case "keyfactor:index/certificateStore:CertificateStore":
                return new CertificateStore(name, <any>undefined, { urn })
            case "keyfactor:index/identity:Identity":
                return new Identity(name, <any>undefined, { urn })
            case "keyfactor:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "keyfactor:index/templateRoleBinding:TemplateRoleBinding":
                return new TemplateRoleBinding(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("keyfactor", "index/certificate", _module)
pulumi.runtime.registerResourceModule("keyfactor", "index/certificateDeployment", _module)
pulumi.runtime.registerResourceModule("keyfactor", "index/certificateStore", _module)
pulumi.runtime.registerResourceModule("keyfactor", "index/identity", _module)
pulumi.runtime.registerResourceModule("keyfactor", "index/role", _module)
pulumi.runtime.registerResourceModule("keyfactor", "index/templateRoleBinding", _module)
pulumi.runtime.registerResourcePackage("keyfactor", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:keyfactor") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
