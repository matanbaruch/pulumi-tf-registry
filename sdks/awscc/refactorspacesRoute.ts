// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RefactorspacesRoute extends pulumi.CustomResource {
    /**
     * Get an existing RefactorspacesRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RefactorspacesRouteState, opts?: pulumi.CustomResourceOptions): RefactorspacesRoute {
        return new RefactorspacesRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/refactorspacesRoute:RefactorspacesRoute';

    /**
     * Returns true if the given object is an instance of RefactorspacesRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RefactorspacesRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RefactorspacesRoute.__pulumiType;
    }

    public readonly applicationIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly defaultRoute!: pulumi.Output<outputs.RefactorspacesRouteDefaultRoute>;
    public readonly environmentIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly pathResourceToId!: pulumi.Output<string>;
    public /*out*/ readonly routeIdentifier!: pulumi.Output<string>;
    public readonly routeType!: pulumi.Output<string>;
    public readonly serviceIdentifier!: pulumi.Output<string>;
    /**
     * Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     */
    public readonly tags!: pulumi.Output<outputs.RefactorspacesRouteTag[]>;
    public readonly uriPathRoute!: pulumi.Output<outputs.RefactorspacesRouteUriPathRoute>;

    /**
     * Create a RefactorspacesRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RefactorspacesRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RefactorspacesRouteArgs | RefactorspacesRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RefactorspacesRouteState | undefined;
            resourceInputs["applicationIdentifier"] = state ? state.applicationIdentifier : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["defaultRoute"] = state ? state.defaultRoute : undefined;
            resourceInputs["environmentIdentifier"] = state ? state.environmentIdentifier : undefined;
            resourceInputs["pathResourceToId"] = state ? state.pathResourceToId : undefined;
            resourceInputs["routeIdentifier"] = state ? state.routeIdentifier : undefined;
            resourceInputs["routeType"] = state ? state.routeType : undefined;
            resourceInputs["serviceIdentifier"] = state ? state.serviceIdentifier : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["uriPathRoute"] = state ? state.uriPathRoute : undefined;
        } else {
            const args = argsOrState as RefactorspacesRouteArgs | undefined;
            if ((!args || args.applicationIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationIdentifier'");
            }
            if ((!args || args.environmentIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentIdentifier'");
            }
            if ((!args || args.routeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeType'");
            }
            if ((!args || args.serviceIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceIdentifier'");
            }
            resourceInputs["applicationIdentifier"] = args ? args.applicationIdentifier : undefined;
            resourceInputs["defaultRoute"] = args ? args.defaultRoute : undefined;
            resourceInputs["environmentIdentifier"] = args ? args.environmentIdentifier : undefined;
            resourceInputs["routeType"] = args ? args.routeType : undefined;
            resourceInputs["serviceIdentifier"] = args ? args.serviceIdentifier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["uriPathRoute"] = args ? args.uriPathRoute : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["pathResourceToId"] = undefined /*out*/;
            resourceInputs["routeIdentifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RefactorspacesRoute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RefactorspacesRoute resources.
 */
export interface RefactorspacesRouteState {
    applicationIdentifier?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    defaultRoute?: pulumi.Input<inputs.RefactorspacesRouteDefaultRoute>;
    environmentIdentifier?: pulumi.Input<string>;
    pathResourceToId?: pulumi.Input<string>;
    routeIdentifier?: pulumi.Input<string>;
    routeType?: pulumi.Input<string>;
    serviceIdentifier?: pulumi.Input<string>;
    /**
     * Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RefactorspacesRouteTag>[]>;
    uriPathRoute?: pulumi.Input<inputs.RefactorspacesRouteUriPathRoute>;
}

/**
 * The set of arguments for constructing a RefactorspacesRoute resource.
 */
export interface RefactorspacesRouteArgs {
    applicationIdentifier: pulumi.Input<string>;
    defaultRoute?: pulumi.Input<inputs.RefactorspacesRouteDefaultRoute>;
    environmentIdentifier: pulumi.Input<string>;
    routeType: pulumi.Input<string>;
    serviceIdentifier: pulumi.Input<string>;
    /**
     * Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RefactorspacesRouteTag>[]>;
    uriPathRoute?: pulumi.Input<inputs.RefactorspacesRouteUriPathRoute>;
}
