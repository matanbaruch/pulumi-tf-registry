// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LightsailDistribution extends pulumi.CustomResource {
    /**
     * Get an existing LightsailDistribution resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LightsailDistributionState, opts?: pulumi.CustomResourceOptions): LightsailDistribution {
        return new LightsailDistribution(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lightsailDistribution:LightsailDistribution';

    /**
     * Returns true if the given object is an instance of LightsailDistribution.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LightsailDistribution {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LightsailDistribution.__pulumiType;
    }

    /**
     * Indicates whether the bundle that is currently applied to your distribution, specified using the distributionName
     * parameter, can be changed to another bundle.
     */
    public /*out*/ readonly ableToUpdateBundle!: pulumi.Output<boolean>;
    /**
     * The bundle ID to use for the distribution.
     */
    public readonly bundleId!: pulumi.Output<string>;
    /**
     * An object that describes the cache behavior settings for the distribution.
     */
    public readonly cacheBehaviorSettings!: pulumi.Output<outputs.LightsailDistributionCacheBehaviorSettings>;
    /**
     * An array of objects that describe the per-path cache behavior for the distribution.
     */
    public readonly cacheBehaviors!: pulumi.Output<outputs.LightsailDistributionCacheBehavior[]>;
    /**
     * The certificate attached to the Distribution.
     */
    public readonly certificateName!: pulumi.Output<string>;
    /**
     * An object that describes the default cache behavior for the distribution.
     */
    public readonly defaultCacheBehavior!: pulumi.Output<outputs.LightsailDistributionDefaultCacheBehavior>;
    public /*out*/ readonly distributionArn!: pulumi.Output<string>;
    /**
     * The name for the distribution.
     */
    public readonly distributionName!: pulumi.Output<string>;
    /**
     * The IP address type for the distribution.
     */
    public readonly ipAddressType!: pulumi.Output<string>;
    /**
     * Indicates whether the distribution is enabled.
     */
    public readonly isEnabled!: pulumi.Output<boolean>;
    /**
     * An object that describes the origin resource for the distribution, such as a Lightsail instance or load balancer.
     */
    public readonly origin!: pulumi.Output<outputs.LightsailDistributionOrigin>;
    /**
     * The status of the distribution.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.LightsailDistributionTag[]>;

    /**
     * Create a LightsailDistribution resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LightsailDistributionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LightsailDistributionArgs | LightsailDistributionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LightsailDistributionState | undefined;
            resourceInputs["ableToUpdateBundle"] = state ? state.ableToUpdateBundle : undefined;
            resourceInputs["bundleId"] = state ? state.bundleId : undefined;
            resourceInputs["cacheBehaviorSettings"] = state ? state.cacheBehaviorSettings : undefined;
            resourceInputs["cacheBehaviors"] = state ? state.cacheBehaviors : undefined;
            resourceInputs["certificateName"] = state ? state.certificateName : undefined;
            resourceInputs["defaultCacheBehavior"] = state ? state.defaultCacheBehavior : undefined;
            resourceInputs["distributionArn"] = state ? state.distributionArn : undefined;
            resourceInputs["distributionName"] = state ? state.distributionName : undefined;
            resourceInputs["ipAddressType"] = state ? state.ipAddressType : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LightsailDistributionArgs | undefined;
            if ((!args || args.bundleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bundleId'");
            }
            if ((!args || args.defaultCacheBehavior === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultCacheBehavior'");
            }
            if ((!args || args.distributionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'distributionName'");
            }
            if ((!args || args.origin === undefined) && !opts.urn) {
                throw new Error("Missing required property 'origin'");
            }
            resourceInputs["bundleId"] = args ? args.bundleId : undefined;
            resourceInputs["cacheBehaviorSettings"] = args ? args.cacheBehaviorSettings : undefined;
            resourceInputs["cacheBehaviors"] = args ? args.cacheBehaviors : undefined;
            resourceInputs["certificateName"] = args ? args.certificateName : undefined;
            resourceInputs["defaultCacheBehavior"] = args ? args.defaultCacheBehavior : undefined;
            resourceInputs["distributionName"] = args ? args.distributionName : undefined;
            resourceInputs["ipAddressType"] = args ? args.ipAddressType : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["origin"] = args ? args.origin : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["ableToUpdateBundle"] = undefined /*out*/;
            resourceInputs["distributionArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LightsailDistribution.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LightsailDistribution resources.
 */
export interface LightsailDistributionState {
    /**
     * Indicates whether the bundle that is currently applied to your distribution, specified using the distributionName
     * parameter, can be changed to another bundle.
     */
    ableToUpdateBundle?: pulumi.Input<boolean>;
    /**
     * The bundle ID to use for the distribution.
     */
    bundleId?: pulumi.Input<string>;
    /**
     * An object that describes the cache behavior settings for the distribution.
     */
    cacheBehaviorSettings?: pulumi.Input<inputs.LightsailDistributionCacheBehaviorSettings>;
    /**
     * An array of objects that describe the per-path cache behavior for the distribution.
     */
    cacheBehaviors?: pulumi.Input<pulumi.Input<inputs.LightsailDistributionCacheBehavior>[]>;
    /**
     * The certificate attached to the Distribution.
     */
    certificateName?: pulumi.Input<string>;
    /**
     * An object that describes the default cache behavior for the distribution.
     */
    defaultCacheBehavior?: pulumi.Input<inputs.LightsailDistributionDefaultCacheBehavior>;
    distributionArn?: pulumi.Input<string>;
    /**
     * The name for the distribution.
     */
    distributionName?: pulumi.Input<string>;
    /**
     * The IP address type for the distribution.
     */
    ipAddressType?: pulumi.Input<string>;
    /**
     * Indicates whether the distribution is enabled.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * An object that describes the origin resource for the distribution, such as a Lightsail instance or load balancer.
     */
    origin?: pulumi.Input<inputs.LightsailDistributionOrigin>;
    /**
     * The status of the distribution.
     */
    status?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LightsailDistributionTag>[]>;
}

/**
 * The set of arguments for constructing a LightsailDistribution resource.
 */
export interface LightsailDistributionArgs {
    /**
     * The bundle ID to use for the distribution.
     */
    bundleId: pulumi.Input<string>;
    /**
     * An object that describes the cache behavior settings for the distribution.
     */
    cacheBehaviorSettings?: pulumi.Input<inputs.LightsailDistributionCacheBehaviorSettings>;
    /**
     * An array of objects that describe the per-path cache behavior for the distribution.
     */
    cacheBehaviors?: pulumi.Input<pulumi.Input<inputs.LightsailDistributionCacheBehavior>[]>;
    /**
     * The certificate attached to the Distribution.
     */
    certificateName?: pulumi.Input<string>;
    /**
     * An object that describes the default cache behavior for the distribution.
     */
    defaultCacheBehavior: pulumi.Input<inputs.LightsailDistributionDefaultCacheBehavior>;
    /**
     * The name for the distribution.
     */
    distributionName: pulumi.Input<string>;
    /**
     * The IP address type for the distribution.
     */
    ipAddressType?: pulumi.Input<string>;
    /**
     * Indicates whether the distribution is enabled.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * An object that describes the origin resource for the distribution, such as a Lightsail instance or load balancer.
     */
    origin: pulumi.Input<inputs.LightsailDistributionOrigin>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LightsailDistributionTag>[]>;
}
