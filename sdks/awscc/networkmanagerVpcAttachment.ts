// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkmanagerVpcAttachment extends pulumi.CustomResource {
    /**
     * Get an existing NetworkmanagerVpcAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkmanagerVpcAttachmentState, opts?: pulumi.CustomResourceOptions): NetworkmanagerVpcAttachment {
        return new NetworkmanagerVpcAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/networkmanagerVpcAttachment:NetworkmanagerVpcAttachment';

    /**
     * Returns true if the given object is an instance of NetworkmanagerVpcAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkmanagerVpcAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkmanagerVpcAttachment.__pulumiType;
    }

    /**
     * Id of the attachment.
     */
    public /*out*/ readonly attachmentId!: pulumi.Output<string>;
    /**
     * The policy rule number associated with the attachment.
     */
    public /*out*/ readonly attachmentPolicyRuleNumber!: pulumi.Output<number>;
    /**
     * Attachment type.
     */
    public /*out*/ readonly attachmentType!: pulumi.Output<string>;
    /**
     * The ARN of a core network for the VPC attachment.
     */
    public /*out*/ readonly coreNetworkArn!: pulumi.Output<string>;
    /**
     * The ID of a core network for the VPC attachment.
     */
    public readonly coreNetworkId!: pulumi.Output<string>;
    /**
     * Creation time of the attachment.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The Region where the edge is located.
     */
    public /*out*/ readonly edgeLocation!: pulumi.Output<string>;
    /**
     * The name of the network function group attachment.
     */
    public /*out*/ readonly networkFunctionGroupName!: pulumi.Output<string>;
    /**
     * Vpc options of the attachment.
     */
    public readonly options!: pulumi.Output<outputs.NetworkmanagerVpcAttachmentOptions>;
    /**
     * Owner account of the attachment.
     */
    public /*out*/ readonly ownerAccountId!: pulumi.Output<string>;
    /**
     * The attachment to move from one network function group to another.
     */
    public readonly proposedNetworkFunctionGroupChange!: pulumi.Output<outputs.NetworkmanagerVpcAttachmentProposedNetworkFunctionGroupChange>;
    /**
     * The attachment to move from one segment to another.
     */
    public readonly proposedSegmentChange!: pulumi.Output<outputs.NetworkmanagerVpcAttachmentProposedSegmentChange>;
    /**
     * The ARN of the Resource.
     */
    public /*out*/ readonly resourceArn!: pulumi.Output<string>;
    /**
     * The name of the segment attachment..
     */
    public /*out*/ readonly segmentName!: pulumi.Output<string>;
    /**
     * State of the attachment.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Subnet Arn list
     */
    public readonly subnetArns!: pulumi.Output<string[]>;
    /**
     * Tags for the attachment.
     */
    public readonly tags!: pulumi.Output<outputs.NetworkmanagerVpcAttachmentTag[]>;
    /**
     * Last update time of the attachment.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The ARN of the VPC.
     */
    public readonly vpcArn!: pulumi.Output<string>;

    /**
     * Create a NetworkmanagerVpcAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkmanagerVpcAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkmanagerVpcAttachmentArgs | NetworkmanagerVpcAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkmanagerVpcAttachmentState | undefined;
            resourceInputs["attachmentId"] = state ? state.attachmentId : undefined;
            resourceInputs["attachmentPolicyRuleNumber"] = state ? state.attachmentPolicyRuleNumber : undefined;
            resourceInputs["attachmentType"] = state ? state.attachmentType : undefined;
            resourceInputs["coreNetworkArn"] = state ? state.coreNetworkArn : undefined;
            resourceInputs["coreNetworkId"] = state ? state.coreNetworkId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["edgeLocation"] = state ? state.edgeLocation : undefined;
            resourceInputs["networkFunctionGroupName"] = state ? state.networkFunctionGroupName : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["ownerAccountId"] = state ? state.ownerAccountId : undefined;
            resourceInputs["proposedNetworkFunctionGroupChange"] = state ? state.proposedNetworkFunctionGroupChange : undefined;
            resourceInputs["proposedSegmentChange"] = state ? state.proposedSegmentChange : undefined;
            resourceInputs["resourceArn"] = state ? state.resourceArn : undefined;
            resourceInputs["segmentName"] = state ? state.segmentName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetArns"] = state ? state.subnetArns : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["vpcArn"] = state ? state.vpcArn : undefined;
        } else {
            const args = argsOrState as NetworkmanagerVpcAttachmentArgs | undefined;
            if ((!args || args.coreNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'coreNetworkId'");
            }
            if ((!args || args.subnetArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetArns'");
            }
            if ((!args || args.vpcArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcArn'");
            }
            resourceInputs["coreNetworkId"] = args ? args.coreNetworkId : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["proposedNetworkFunctionGroupChange"] = args ? args.proposedNetworkFunctionGroupChange : undefined;
            resourceInputs["proposedSegmentChange"] = args ? args.proposedSegmentChange : undefined;
            resourceInputs["subnetArns"] = args ? args.subnetArns : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcArn"] = args ? args.vpcArn : undefined;
            resourceInputs["attachmentId"] = undefined /*out*/;
            resourceInputs["attachmentPolicyRuleNumber"] = undefined /*out*/;
            resourceInputs["attachmentType"] = undefined /*out*/;
            resourceInputs["coreNetworkArn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["edgeLocation"] = undefined /*out*/;
            resourceInputs["networkFunctionGroupName"] = undefined /*out*/;
            resourceInputs["ownerAccountId"] = undefined /*out*/;
            resourceInputs["resourceArn"] = undefined /*out*/;
            resourceInputs["segmentName"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkmanagerVpcAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkmanagerVpcAttachment resources.
 */
export interface NetworkmanagerVpcAttachmentState {
    /**
     * Id of the attachment.
     */
    attachmentId?: pulumi.Input<string>;
    /**
     * The policy rule number associated with the attachment.
     */
    attachmentPolicyRuleNumber?: pulumi.Input<number>;
    /**
     * Attachment type.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * The ARN of a core network for the VPC attachment.
     */
    coreNetworkArn?: pulumi.Input<string>;
    /**
     * The ID of a core network for the VPC attachment.
     */
    coreNetworkId?: pulumi.Input<string>;
    /**
     * Creation time of the attachment.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The Region where the edge is located.
     */
    edgeLocation?: pulumi.Input<string>;
    /**
     * The name of the network function group attachment.
     */
    networkFunctionGroupName?: pulumi.Input<string>;
    /**
     * Vpc options of the attachment.
     */
    options?: pulumi.Input<inputs.NetworkmanagerVpcAttachmentOptions>;
    /**
     * Owner account of the attachment.
     */
    ownerAccountId?: pulumi.Input<string>;
    /**
     * The attachment to move from one network function group to another.
     */
    proposedNetworkFunctionGroupChange?: pulumi.Input<inputs.NetworkmanagerVpcAttachmentProposedNetworkFunctionGroupChange>;
    /**
     * The attachment to move from one segment to another.
     */
    proposedSegmentChange?: pulumi.Input<inputs.NetworkmanagerVpcAttachmentProposedSegmentChange>;
    /**
     * The ARN of the Resource.
     */
    resourceArn?: pulumi.Input<string>;
    /**
     * The name of the segment attachment..
     */
    segmentName?: pulumi.Input<string>;
    /**
     * State of the attachment.
     */
    state?: pulumi.Input<string>;
    /**
     * Subnet Arn list
     */
    subnetArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags for the attachment.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerVpcAttachmentTag>[]>;
    /**
     * Last update time of the attachment.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The ARN of the VPC.
     */
    vpcArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkmanagerVpcAttachment resource.
 */
export interface NetworkmanagerVpcAttachmentArgs {
    /**
     * The ID of a core network for the VPC attachment.
     */
    coreNetworkId: pulumi.Input<string>;
    /**
     * Vpc options of the attachment.
     */
    options?: pulumi.Input<inputs.NetworkmanagerVpcAttachmentOptions>;
    /**
     * The attachment to move from one network function group to another.
     */
    proposedNetworkFunctionGroupChange?: pulumi.Input<inputs.NetworkmanagerVpcAttachmentProposedNetworkFunctionGroupChange>;
    /**
     * The attachment to move from one segment to another.
     */
    proposedSegmentChange?: pulumi.Input<inputs.NetworkmanagerVpcAttachmentProposedSegmentChange>;
    /**
     * Subnet Arn list
     */
    subnetArns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags for the attachment.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerVpcAttachmentTag>[]>;
    /**
     * The ARN of the VPC.
     */
    vpcArn: pulumi.Input<string>;
}
