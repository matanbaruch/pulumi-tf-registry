// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2Volume extends pulumi.CustomResource {
    /**
     * Get an existing Ec2Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2VolumeState, opts?: pulumi.CustomResourceOptions): Ec2Volume {
        return new Ec2Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2Volume:Ec2Volume';

    /**
     * Returns true if the given object is an instance of Ec2Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2Volume.__pulumiType;
    }

    /**
     * Indicates whether the volume is auto-enabled for I/O operations. By default, Amazon EBS disables I/O to the volume from
     * attached EC2 instances when it determines that a volume's data is potentially inconsistent. If the consistency of the
     * volume is not a concern, and you prefer that the volume be made available immediately if it's impaired, you can
     * configure the volume to automatically enable I/O.
     */
    public readonly autoEnableIo!: pulumi.Output<boolean>;
    /**
     * The ID of the Availability Zone in which to create the volume. For example, ``us-east-1a``.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Indicates whether the volume should be encrypted. The effect of setting the encryption state to ``true`` depends on the
     * volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is
     * enabled. For more information, see [Encryption by
     * default](https://docs.aws.amazon.com/ebs/latest/userguide/work-with-ebs-encr.html#encryption-by-default) in the *Amazon
     * EBS User Guide*. Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more
     * information, see [Supported instance
     * types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html#ebs-encryption_supported_instances).
     */
    public readonly encrypted!: pulumi.Output<boolean>;
    /**
     * The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of
     * IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume
     * and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each
     * volume type: + ``gp3``: 3,000 - 16,000 IOPS + ``io1``: 100 - 64,000 IOPS + ``io2``: 100 - 256,000 IOPS For ``io2``
     * volumes, you can achieve up to 256,000 IOPS on [instances built on the Nitro
     * System](https://docs.aws.amazon.com/ec2/latest/instancetypes/ec2-nitro-instances.html). On other instances, you can
     * achieve performance up to 32,000 IOPS. This parameter is required for ``io1`` and ``io2`` volumes. The default for
     * ``gp3`` volumes is 3,000 IOPS. This parameter is not supported for ``gp2``, ``st1``, ``sc1``, or ``standard`` volumes.
     */
    public readonly iops!: pulumi.Output<number>;
    /**
     * The identifier of the kms-key-long to use for Amazon EBS encryption. If ``KmsKeyId`` is specified, the encrypted state
     * must be ``true``. If you omit this property and your account is enabled for encryption by default, or *Encrypted* is set
     * to ``true``, then the volume is encrypted using the default key specified for your account. If your account does not
     * have a default key, then the volume is encrypted using the aws-managed-key. Alternatively, if you want to specify a
     * different key, you can specify one of the following: + Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab. + Key
     * alias. Specify the alias for the key, prefixed with ``alias/``. For example, for a key with the alias ``my_cmk``, use
     * ``alias/my_cmk``. Or to specify the aws-managed-key, use ``alias/aws/ebs``. + Key ARN. For example,
     * arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab. + Alias ARN. For example,
     * arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
     */
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * Indicates whether Amazon EBS Multi-Attach is enabled. CFNlong does not currently support updating a single-attach volume
     * to be multi-attach enabled, updating a multi-attach enabled volume to be single-attach, or updating the size or number
     * of I/O operations per second (IOPS) of a multi-attach enabled volume.
     */
    public readonly multiAttachEnabled!: pulumi.Output<boolean>;
    /**
     * The Amazon Resource Name (ARN) of the Outpost.
     */
    public readonly outpostArn!: pulumi.Output<string>;
    /**
     * The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the
     * default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size. The
     * following are the supported volumes sizes for each volume type: + ``gp2`` and ``gp3``: 1 - 16,384 GiB + ``io1``: 4 -
     * 16,384 GiB + ``io2``: 4 - 65,536 GiB + ``st1`` and ``sc1``: 125 - 16,384 GiB + ``standard``: 1 - 1024 GiB
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.
     */
    public readonly snapshotId!: pulumi.Output<string>;
    /**
     * The tags to apply to the volume during creation.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2VolumeTag[]>;
    /**
     * The throughput to provision for a volume, with a maximum of 1,000 MiB/s. This parameter is valid only for ``gp3``
     * volumes. The default value is 125. Valid Range: Minimum value of 125. Maximum value of 1000.
     */
    public readonly throughput!: pulumi.Output<number>;
    public /*out*/ readonly volumeId!: pulumi.Output<string>;
    /**
     * The volume type. This parameter can be one of the following values: + General Purpose SSD: ``gp2`` | ``gp3`` +
     * Provisioned IOPS SSD: ``io1`` | ``io2`` + Throughput Optimized HDD: ``st1`` + Cold HDD: ``sc1`` + Magnetic: ``standard``
     * For more information, see [Amazon EBS volume
     * types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html). Default: ``gp2``
     */
    public readonly volumeType!: pulumi.Output<string>;

    /**
     * Create a Ec2Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2VolumeArgs | Ec2VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2VolumeState | undefined;
            resourceInputs["autoEnableIo"] = state ? state.autoEnableIo : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["multiAttachEnabled"] = state ? state.multiAttachEnabled : undefined;
            resourceInputs["outpostArn"] = state ? state.outpostArn : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
        } else {
            const args = argsOrState as Ec2VolumeArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            resourceInputs["autoEnableIo"] = args ? args.autoEnableIo : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["encrypted"] = args ? args.encrypted : undefined;
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["multiAttachEnabled"] = args ? args.multiAttachEnabled : undefined;
            resourceInputs["outpostArn"] = args ? args.outpostArn : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["volumeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2Volume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2Volume resources.
 */
export interface Ec2VolumeState {
    /**
     * Indicates whether the volume is auto-enabled for I/O operations. By default, Amazon EBS disables I/O to the volume from
     * attached EC2 instances when it determines that a volume's data is potentially inconsistent. If the consistency of the
     * volume is not a concern, and you prefer that the volume be made available immediately if it's impaired, you can
     * configure the volume to automatically enable I/O.
     */
    autoEnableIo?: pulumi.Input<boolean>;
    /**
     * The ID of the Availability Zone in which to create the volume. For example, ``us-east-1a``.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Indicates whether the volume should be encrypted. The effect of setting the encryption state to ``true`` depends on the
     * volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is
     * enabled. For more information, see [Encryption by
     * default](https://docs.aws.amazon.com/ebs/latest/userguide/work-with-ebs-encr.html#encryption-by-default) in the *Amazon
     * EBS User Guide*. Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more
     * information, see [Supported instance
     * types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html#ebs-encryption_supported_instances).
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of
     * IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume
     * and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each
     * volume type: + ``gp3``: 3,000 - 16,000 IOPS + ``io1``: 100 - 64,000 IOPS + ``io2``: 100 - 256,000 IOPS For ``io2``
     * volumes, you can achieve up to 256,000 IOPS on [instances built on the Nitro
     * System](https://docs.aws.amazon.com/ec2/latest/instancetypes/ec2-nitro-instances.html). On other instances, you can
     * achieve performance up to 32,000 IOPS. This parameter is required for ``io1`` and ``io2`` volumes. The default for
     * ``gp3`` volumes is 3,000 IOPS. This parameter is not supported for ``gp2``, ``st1``, ``sc1``, or ``standard`` volumes.
     */
    iops?: pulumi.Input<number>;
    /**
     * The identifier of the kms-key-long to use for Amazon EBS encryption. If ``KmsKeyId`` is specified, the encrypted state
     * must be ``true``. If you omit this property and your account is enabled for encryption by default, or *Encrypted* is set
     * to ``true``, then the volume is encrypted using the default key specified for your account. If your account does not
     * have a default key, then the volume is encrypted using the aws-managed-key. Alternatively, if you want to specify a
     * different key, you can specify one of the following: + Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab. + Key
     * alias. Specify the alias for the key, prefixed with ``alias/``. For example, for a key with the alias ``my_cmk``, use
     * ``alias/my_cmk``. Or to specify the aws-managed-key, use ``alias/aws/ebs``. + Key ARN. For example,
     * arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab. + Alias ARN. For example,
     * arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Indicates whether Amazon EBS Multi-Attach is enabled. CFNlong does not currently support updating a single-attach volume
     * to be multi-attach enabled, updating a multi-attach enabled volume to be single-attach, or updating the size or number
     * of I/O operations per second (IOPS) of a multi-attach enabled volume.
     */
    multiAttachEnabled?: pulumi.Input<boolean>;
    /**
     * The Amazon Resource Name (ARN) of the Outpost.
     */
    outpostArn?: pulumi.Input<string>;
    /**
     * The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the
     * default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size. The
     * following are the supported volumes sizes for each volume type: + ``gp2`` and ``gp3``: 1 - 16,384 GiB + ``io1``: 4 -
     * 16,384 GiB + ``io2``: 4 - 65,536 GiB + ``st1`` and ``sc1``: 125 - 16,384 GiB + ``standard``: 1 - 1024 GiB
     */
    size?: pulumi.Input<number>;
    /**
     * The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The tags to apply to the volume during creation.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2VolumeTag>[]>;
    /**
     * The throughput to provision for a volume, with a maximum of 1,000 MiB/s. This parameter is valid only for ``gp3``
     * volumes. The default value is 125. Valid Range: Minimum value of 125. Maximum value of 1000.
     */
    throughput?: pulumi.Input<number>;
    volumeId?: pulumi.Input<string>;
    /**
     * The volume type. This parameter can be one of the following values: + General Purpose SSD: ``gp2`` | ``gp3`` +
     * Provisioned IOPS SSD: ``io1`` | ``io2`` + Throughput Optimized HDD: ``st1`` + Cold HDD: ``sc1`` + Magnetic: ``standard``
     * For more information, see [Amazon EBS volume
     * types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html). Default: ``gp2``
     */
    volumeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2Volume resource.
 */
export interface Ec2VolumeArgs {
    /**
     * Indicates whether the volume is auto-enabled for I/O operations. By default, Amazon EBS disables I/O to the volume from
     * attached EC2 instances when it determines that a volume's data is potentially inconsistent. If the consistency of the
     * volume is not a concern, and you prefer that the volume be made available immediately if it's impaired, you can
     * configure the volume to automatically enable I/O.
     */
    autoEnableIo?: pulumi.Input<boolean>;
    /**
     * The ID of the Availability Zone in which to create the volume. For example, ``us-east-1a``.
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * Indicates whether the volume should be encrypted. The effect of setting the encryption state to ``true`` depends on the
     * volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is
     * enabled. For more information, see [Encryption by
     * default](https://docs.aws.amazon.com/ebs/latest/userguide/work-with-ebs-encr.html#encryption-by-default) in the *Amazon
     * EBS User Guide*. Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more
     * information, see [Supported instance
     * types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html#ebs-encryption_supported_instances).
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of
     * IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume
     * and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each
     * volume type: + ``gp3``: 3,000 - 16,000 IOPS + ``io1``: 100 - 64,000 IOPS + ``io2``: 100 - 256,000 IOPS For ``io2``
     * volumes, you can achieve up to 256,000 IOPS on [instances built on the Nitro
     * System](https://docs.aws.amazon.com/ec2/latest/instancetypes/ec2-nitro-instances.html). On other instances, you can
     * achieve performance up to 32,000 IOPS. This parameter is required for ``io1`` and ``io2`` volumes. The default for
     * ``gp3`` volumes is 3,000 IOPS. This parameter is not supported for ``gp2``, ``st1``, ``sc1``, or ``standard`` volumes.
     */
    iops?: pulumi.Input<number>;
    /**
     * The identifier of the kms-key-long to use for Amazon EBS encryption. If ``KmsKeyId`` is specified, the encrypted state
     * must be ``true``. If you omit this property and your account is enabled for encryption by default, or *Encrypted* is set
     * to ``true``, then the volume is encrypted using the default key specified for your account. If your account does not
     * have a default key, then the volume is encrypted using the aws-managed-key. Alternatively, if you want to specify a
     * different key, you can specify one of the following: + Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab. + Key
     * alias. Specify the alias for the key, prefixed with ``alias/``. For example, for a key with the alias ``my_cmk``, use
     * ``alias/my_cmk``. Or to specify the aws-managed-key, use ``alias/aws/ebs``. + Key ARN. For example,
     * arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab. + Alias ARN. For example,
     * arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Indicates whether Amazon EBS Multi-Attach is enabled. CFNlong does not currently support updating a single-attach volume
     * to be multi-attach enabled, updating a multi-attach enabled volume to be single-attach, or updating the size or number
     * of I/O operations per second (IOPS) of a multi-attach enabled volume.
     */
    multiAttachEnabled?: pulumi.Input<boolean>;
    /**
     * The Amazon Resource Name (ARN) of the Outpost.
     */
    outpostArn?: pulumi.Input<string>;
    /**
     * The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the
     * default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size. The
     * following are the supported volumes sizes for each volume type: + ``gp2`` and ``gp3``: 1 - 16,384 GiB + ``io1``: 4 -
     * 16,384 GiB + ``io2``: 4 - 65,536 GiB + ``st1`` and ``sc1``: 125 - 16,384 GiB + ``standard``: 1 - 1024 GiB
     */
    size?: pulumi.Input<number>;
    /**
     * The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The tags to apply to the volume during creation.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2VolumeTag>[]>;
    /**
     * The throughput to provision for a volume, with a maximum of 1,000 MiB/s. This parameter is valid only for ``gp3``
     * volumes. The default value is 125. Valid Range: Minimum value of 125. Maximum value of 1000.
     */
    throughput?: pulumi.Input<number>;
    /**
     * The volume type. This parameter can be one of the following values: + General Purpose SSD: ``gp2`` | ``gp3`` +
     * Provisioned IOPS SSD: ``io1`` | ``io2`` + Throughput Optimized HDD: ``st1`` + Cold HDD: ``sc1`` + Magnetic: ``standard``
     * For more information, see [Amazon EBS volume
     * types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html). Default: ``gp2``
     */
    volumeType?: pulumi.Input<string>;
}
