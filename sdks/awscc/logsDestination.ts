// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogsDestination extends pulumi.CustomResource {
    /**
     * Get an existing LogsDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogsDestinationState, opts?: pulumi.CustomResourceOptions): LogsDestination {
        return new LogsDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/logsDestination:LogsDestination';

    /**
     * Returns true if the given object is an instance of LogsDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogsDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogsDestination.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The name of the destination resource
     */
    public readonly destinationName!: pulumi.Output<string>;
    /**
     * An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
     */
    public readonly destinationPolicy!: pulumi.Output<string>;
    /**
     * The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)
     */
    public readonly targetArn!: pulumi.Output<string>;

    /**
     * Create a LogsDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogsDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogsDestinationArgs | LogsDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogsDestinationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["destinationName"] = state ? state.destinationName : undefined;
            resourceInputs["destinationPolicy"] = state ? state.destinationPolicy : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["targetArn"] = state ? state.targetArn : undefined;
        } else {
            const args = argsOrState as LogsDestinationArgs | undefined;
            if ((!args || args.destinationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationName'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.targetArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetArn'");
            }
            resourceInputs["destinationName"] = args ? args.destinationName : undefined;
            resourceInputs["destinationPolicy"] = args ? args.destinationPolicy : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["targetArn"] = args ? args.targetArn : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogsDestination.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogsDestination resources.
 */
export interface LogsDestinationState {
    arn?: pulumi.Input<string>;
    /**
     * The name of the destination resource
     */
    destinationName?: pulumi.Input<string>;
    /**
     * An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
     */
    destinationPolicy?: pulumi.Input<string>;
    /**
     * The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)
     */
    targetArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogsDestination resource.
 */
export interface LogsDestinationArgs {
    /**
     * The name of the destination resource
     */
    destinationName: pulumi.Input<string>;
    /**
     * An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
     */
    destinationPolicy?: pulumi.Input<string>;
    /**
     * The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource
     */
    roleArn: pulumi.Input<string>;
    /**
     * The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)
     */
    targetArn: pulumi.Input<string>;
}
