// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EksAddon extends pulumi.CustomResource {
    /**
     * Get an existing EksAddon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EksAddonState, opts?: pulumi.CustomResourceOptions): EksAddon {
        return new EksAddon(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/eksAddon:EksAddon';

    /**
     * Returns true if the given object is an instance of EksAddon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EksAddon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EksAddon.__pulumiType;
    }

    /**
     * Name of Addon
     */
    public readonly addonName!: pulumi.Output<string>;
    /**
     * Version of Addon
     */
    public readonly addonVersion!: pulumi.Output<string>;
    /**
     * Amazon Resource Name (ARN) of the add-on
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Name of Cluster
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The configuration values to use with the add-on
     */
    public readonly configurationValues!: pulumi.Output<string>;
    /**
     * An array of pod identities to apply to this add-on.
     */
    public readonly podIdentityAssociations!: pulumi.Output<outputs.EksAddonPodIdentityAssociation[]>;
    /**
     * PreserveOnDelete parameter value
     */
    public readonly preserveOnDelete!: pulumi.Output<boolean>;
    /**
     * Resolve parameter value conflicts
     */
    public readonly resolveConflicts!: pulumi.Output<string>;
    /**
     * IAM role to bind to the add-on's service account
     */
    public readonly serviceAccountRoleArn!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.EksAddonTag[]>;

    /**
     * Create a EksAddon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EksAddonArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EksAddonArgs | EksAddonState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EksAddonState | undefined;
            resourceInputs["addonName"] = state ? state.addonName : undefined;
            resourceInputs["addonVersion"] = state ? state.addonVersion : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["configurationValues"] = state ? state.configurationValues : undefined;
            resourceInputs["podIdentityAssociations"] = state ? state.podIdentityAssociations : undefined;
            resourceInputs["preserveOnDelete"] = state ? state.preserveOnDelete : undefined;
            resourceInputs["resolveConflicts"] = state ? state.resolveConflicts : undefined;
            resourceInputs["serviceAccountRoleArn"] = state ? state.serviceAccountRoleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as EksAddonArgs | undefined;
            if ((!args || args.addonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addonName'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            resourceInputs["addonName"] = args ? args.addonName : undefined;
            resourceInputs["addonVersion"] = args ? args.addonVersion : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["configurationValues"] = args ? args.configurationValues : undefined;
            resourceInputs["podIdentityAssociations"] = args ? args.podIdentityAssociations : undefined;
            resourceInputs["preserveOnDelete"] = args ? args.preserveOnDelete : undefined;
            resourceInputs["resolveConflicts"] = args ? args.resolveConflicts : undefined;
            resourceInputs["serviceAccountRoleArn"] = args ? args.serviceAccountRoleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EksAddon.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EksAddon resources.
 */
export interface EksAddonState {
    /**
     * Name of Addon
     */
    addonName?: pulumi.Input<string>;
    /**
     * Version of Addon
     */
    addonVersion?: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the add-on
     */
    arn?: pulumi.Input<string>;
    /**
     * Name of Cluster
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The configuration values to use with the add-on
     */
    configurationValues?: pulumi.Input<string>;
    /**
     * An array of pod identities to apply to this add-on.
     */
    podIdentityAssociations?: pulumi.Input<pulumi.Input<inputs.EksAddonPodIdentityAssociation>[]>;
    /**
     * PreserveOnDelete parameter value
     */
    preserveOnDelete?: pulumi.Input<boolean>;
    /**
     * Resolve parameter value conflicts
     */
    resolveConflicts?: pulumi.Input<string>;
    /**
     * IAM role to bind to the add-on's service account
     */
    serviceAccountRoleArn?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EksAddonTag>[]>;
}

/**
 * The set of arguments for constructing a EksAddon resource.
 */
export interface EksAddonArgs {
    /**
     * Name of Addon
     */
    addonName: pulumi.Input<string>;
    /**
     * Version of Addon
     */
    addonVersion?: pulumi.Input<string>;
    /**
     * Name of Cluster
     */
    clusterName: pulumi.Input<string>;
    /**
     * The configuration values to use with the add-on
     */
    configurationValues?: pulumi.Input<string>;
    /**
     * An array of pod identities to apply to this add-on.
     */
    podIdentityAssociations?: pulumi.Input<pulumi.Input<inputs.EksAddonPodIdentityAssociation>[]>;
    /**
     * PreserveOnDelete parameter value
     */
    preserveOnDelete?: pulumi.Input<boolean>;
    /**
     * Resolve parameter value conflicts
     */
    resolveConflicts?: pulumi.Input<string>;
    /**
     * IAM role to bind to the add-on's service account
     */
    serviceAccountRoleArn?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EksAddonTag>[]>;
}
