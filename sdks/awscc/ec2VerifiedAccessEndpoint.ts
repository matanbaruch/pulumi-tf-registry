// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2VerifiedAccessEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing Ec2VerifiedAccessEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2VerifiedAccessEndpointState, opts?: pulumi.CustomResourceOptions): Ec2VerifiedAccessEndpoint {
        return new Ec2VerifiedAccessEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2VerifiedAccessEndpoint:Ec2VerifiedAccessEndpoint';

    /**
     * Returns true if the given object is an instance of Ec2VerifiedAccessEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2VerifiedAccessEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2VerifiedAccessEndpoint.__pulumiType;
    }

    /**
     * The DNS name for users to reach your application.
     */
    public readonly applicationDomain!: pulumi.Output<string>;
    /**
     * The type of attachment used to provide connectivity between the AWS Verified Access endpoint and the application.
     */
    public readonly attachmentType!: pulumi.Output<string>;
    /**
     * The creation time.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * A description for the AWS Verified Access endpoint.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Returned if endpoint has a device trust provider attached.
     */
    public /*out*/ readonly deviceValidationDomain!: pulumi.Output<string>;
    /**
     * The ARN of a public TLS/SSL certificate imported into or created with ACM.
     */
    public readonly domainCertificateArn!: pulumi.Output<string>;
    /**
     * A DNS name that is generated for the endpoint.
     */
    public /*out*/ readonly endpointDomain!: pulumi.Output<string>;
    /**
     * A custom identifier that gets prepended to a DNS name that is generated for the endpoint.
     */
    public readonly endpointDomainPrefix!: pulumi.Output<string>;
    /**
     * The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or
     * a network interface depending on the endpoint type specified.The type of AWS Verified Access endpoint. Incoming
     * application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type
     * specified.
     */
    public readonly endpointType!: pulumi.Output<string>;
    /**
     * The last updated time.
     */
    public /*out*/ readonly lastUpdatedTime!: pulumi.Output<string>;
    /**
     * The load balancer details if creating the AWS Verified Access endpoint as load-balancer type.
     */
    public readonly loadBalancerOptions!: pulumi.Output<outputs.Ec2VerifiedAccessEndpointLoadBalancerOptions>;
    /**
     * The options for network-interface type endpoint.
     */
    public readonly networkInterfaceOptions!: pulumi.Output<outputs.Ec2VerifiedAccessEndpointNetworkInterfaceOptions>;
    /**
     * The AWS Verified Access policy document.
     */
    public readonly policyDocument!: pulumi.Output<string>;
    /**
     * The status of the Verified Access policy.
     */
    public readonly policyEnabled!: pulumi.Output<boolean>;
    /**
     * The IDs of the security groups for the endpoint.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * The configuration options for customer provided KMS encryption.
     */
    public readonly sseSpecification!: pulumi.Output<outputs.Ec2VerifiedAccessEndpointSseSpecification>;
    /**
     * The endpoint status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2VerifiedAccessEndpointTag[]>;
    /**
     * The ID of the AWS Verified Access endpoint.
     */
    public /*out*/ readonly verifiedAccessEndpointId!: pulumi.Output<string>;
    /**
     * The ID of the AWS Verified Access group.
     */
    public readonly verifiedAccessGroupId!: pulumi.Output<string>;
    /**
     * The ID of the AWS Verified Access instance.
     */
    public /*out*/ readonly verifiedAccessInstanceId!: pulumi.Output<string>;

    /**
     * Create a Ec2VerifiedAccessEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2VerifiedAccessEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2VerifiedAccessEndpointArgs | Ec2VerifiedAccessEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2VerifiedAccessEndpointState | undefined;
            resourceInputs["applicationDomain"] = state ? state.applicationDomain : undefined;
            resourceInputs["attachmentType"] = state ? state.attachmentType : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceValidationDomain"] = state ? state.deviceValidationDomain : undefined;
            resourceInputs["domainCertificateArn"] = state ? state.domainCertificateArn : undefined;
            resourceInputs["endpointDomain"] = state ? state.endpointDomain : undefined;
            resourceInputs["endpointDomainPrefix"] = state ? state.endpointDomainPrefix : undefined;
            resourceInputs["endpointType"] = state ? state.endpointType : undefined;
            resourceInputs["lastUpdatedTime"] = state ? state.lastUpdatedTime : undefined;
            resourceInputs["loadBalancerOptions"] = state ? state.loadBalancerOptions : undefined;
            resourceInputs["networkInterfaceOptions"] = state ? state.networkInterfaceOptions : undefined;
            resourceInputs["policyDocument"] = state ? state.policyDocument : undefined;
            resourceInputs["policyEnabled"] = state ? state.policyEnabled : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["sseSpecification"] = state ? state.sseSpecification : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["verifiedAccessEndpointId"] = state ? state.verifiedAccessEndpointId : undefined;
            resourceInputs["verifiedAccessGroupId"] = state ? state.verifiedAccessGroupId : undefined;
            resourceInputs["verifiedAccessInstanceId"] = state ? state.verifiedAccessInstanceId : undefined;
        } else {
            const args = argsOrState as Ec2VerifiedAccessEndpointArgs | undefined;
            if ((!args || args.applicationDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationDomain'");
            }
            if ((!args || args.attachmentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attachmentType'");
            }
            if ((!args || args.domainCertificateArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainCertificateArn'");
            }
            if ((!args || args.endpointDomainPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointDomainPrefix'");
            }
            if ((!args || args.endpointType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointType'");
            }
            if ((!args || args.verifiedAccessGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'verifiedAccessGroupId'");
            }
            resourceInputs["applicationDomain"] = args ? args.applicationDomain : undefined;
            resourceInputs["attachmentType"] = args ? args.attachmentType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainCertificateArn"] = args ? args.domainCertificateArn : undefined;
            resourceInputs["endpointDomainPrefix"] = args ? args.endpointDomainPrefix : undefined;
            resourceInputs["endpointType"] = args ? args.endpointType : undefined;
            resourceInputs["loadBalancerOptions"] = args ? args.loadBalancerOptions : undefined;
            resourceInputs["networkInterfaceOptions"] = args ? args.networkInterfaceOptions : undefined;
            resourceInputs["policyDocument"] = args ? args.policyDocument : undefined;
            resourceInputs["policyEnabled"] = args ? args.policyEnabled : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["sseSpecification"] = args ? args.sseSpecification : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["verifiedAccessGroupId"] = args ? args.verifiedAccessGroupId : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["deviceValidationDomain"] = undefined /*out*/;
            resourceInputs["endpointDomain"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["verifiedAccessEndpointId"] = undefined /*out*/;
            resourceInputs["verifiedAccessInstanceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2VerifiedAccessEndpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2VerifiedAccessEndpoint resources.
 */
export interface Ec2VerifiedAccessEndpointState {
    /**
     * The DNS name for users to reach your application.
     */
    applicationDomain?: pulumi.Input<string>;
    /**
     * The type of attachment used to provide connectivity between the AWS Verified Access endpoint and the application.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * The creation time.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * A description for the AWS Verified Access endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * Returned if endpoint has a device trust provider attached.
     */
    deviceValidationDomain?: pulumi.Input<string>;
    /**
     * The ARN of a public TLS/SSL certificate imported into or created with ACM.
     */
    domainCertificateArn?: pulumi.Input<string>;
    /**
     * A DNS name that is generated for the endpoint.
     */
    endpointDomain?: pulumi.Input<string>;
    /**
     * A custom identifier that gets prepended to a DNS name that is generated for the endpoint.
     */
    endpointDomainPrefix?: pulumi.Input<string>;
    /**
     * The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or
     * a network interface depending on the endpoint type specified.The type of AWS Verified Access endpoint. Incoming
     * application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type
     * specified.
     */
    endpointType?: pulumi.Input<string>;
    /**
     * The last updated time.
     */
    lastUpdatedTime?: pulumi.Input<string>;
    /**
     * The load balancer details if creating the AWS Verified Access endpoint as load-balancer type.
     */
    loadBalancerOptions?: pulumi.Input<inputs.Ec2VerifiedAccessEndpointLoadBalancerOptions>;
    /**
     * The options for network-interface type endpoint.
     */
    networkInterfaceOptions?: pulumi.Input<inputs.Ec2VerifiedAccessEndpointNetworkInterfaceOptions>;
    /**
     * The AWS Verified Access policy document.
     */
    policyDocument?: pulumi.Input<string>;
    /**
     * The status of the Verified Access policy.
     */
    policyEnabled?: pulumi.Input<boolean>;
    /**
     * The IDs of the security groups for the endpoint.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The configuration options for customer provided KMS encryption.
     */
    sseSpecification?: pulumi.Input<inputs.Ec2VerifiedAccessEndpointSseSpecification>;
    /**
     * The endpoint status.
     */
    status?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2VerifiedAccessEndpointTag>[]>;
    /**
     * The ID of the AWS Verified Access endpoint.
     */
    verifiedAccessEndpointId?: pulumi.Input<string>;
    /**
     * The ID of the AWS Verified Access group.
     */
    verifiedAccessGroupId?: pulumi.Input<string>;
    /**
     * The ID of the AWS Verified Access instance.
     */
    verifiedAccessInstanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2VerifiedAccessEndpoint resource.
 */
export interface Ec2VerifiedAccessEndpointArgs {
    /**
     * The DNS name for users to reach your application.
     */
    applicationDomain: pulumi.Input<string>;
    /**
     * The type of attachment used to provide connectivity between the AWS Verified Access endpoint and the application.
     */
    attachmentType: pulumi.Input<string>;
    /**
     * A description for the AWS Verified Access endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * The ARN of a public TLS/SSL certificate imported into or created with ACM.
     */
    domainCertificateArn: pulumi.Input<string>;
    /**
     * A custom identifier that gets prepended to a DNS name that is generated for the endpoint.
     */
    endpointDomainPrefix: pulumi.Input<string>;
    /**
     * The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or
     * a network interface depending on the endpoint type specified.The type of AWS Verified Access endpoint. Incoming
     * application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type
     * specified.
     */
    endpointType: pulumi.Input<string>;
    /**
     * The load balancer details if creating the AWS Verified Access endpoint as load-balancer type.
     */
    loadBalancerOptions?: pulumi.Input<inputs.Ec2VerifiedAccessEndpointLoadBalancerOptions>;
    /**
     * The options for network-interface type endpoint.
     */
    networkInterfaceOptions?: pulumi.Input<inputs.Ec2VerifiedAccessEndpointNetworkInterfaceOptions>;
    /**
     * The AWS Verified Access policy document.
     */
    policyDocument?: pulumi.Input<string>;
    /**
     * The status of the Verified Access policy.
     */
    policyEnabled?: pulumi.Input<boolean>;
    /**
     * The IDs of the security groups for the endpoint.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The configuration options for customer provided KMS encryption.
     */
    sseSpecification?: pulumi.Input<inputs.Ec2VerifiedAccessEndpointSseSpecification>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2VerifiedAccessEndpointTag>[]>;
    /**
     * The ID of the AWS Verified Access group.
     */
    verifiedAccessGroupId: pulumi.Input<string>;
}
