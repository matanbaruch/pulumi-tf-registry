// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GlueSchemaVersion extends pulumi.CustomResource {
    /**
     * Get an existing GlueSchemaVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlueSchemaVersionState, opts?: pulumi.CustomResourceOptions): GlueSchemaVersion {
        return new GlueSchemaVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/glueSchemaVersion:GlueSchemaVersion';

    /**
     * Returns true if the given object is an instance of GlueSchemaVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlueSchemaVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlueSchemaVersion.__pulumiType;
    }

    /**
     * Identifier for the schema where the schema version will be created.
     */
    public readonly schema!: pulumi.Output<outputs.GlueSchemaVersionSchema>;
    /**
     * Complete definition of the schema in plain-text.
     */
    public readonly schemaDefinition!: pulumi.Output<string>;
    /**
     * Represents the version ID associated with the schema version.
     */
    public /*out*/ readonly versionId!: pulumi.Output<string>;

    /**
     * Create a GlueSchemaVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlueSchemaVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlueSchemaVersionArgs | GlueSchemaVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlueSchemaVersionState | undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["schemaDefinition"] = state ? state.schemaDefinition : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as GlueSchemaVersionArgs | undefined;
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if ((!args || args.schemaDefinition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaDefinition'");
            }
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["schemaDefinition"] = args ? args.schemaDefinition : undefined;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlueSchemaVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlueSchemaVersion resources.
 */
export interface GlueSchemaVersionState {
    /**
     * Identifier for the schema where the schema version will be created.
     */
    schema?: pulumi.Input<inputs.GlueSchemaVersionSchema>;
    /**
     * Complete definition of the schema in plain-text.
     */
    schemaDefinition?: pulumi.Input<string>;
    /**
     * Represents the version ID associated with the schema version.
     */
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GlueSchemaVersion resource.
 */
export interface GlueSchemaVersionArgs {
    /**
     * Identifier for the schema where the schema version will be created.
     */
    schema: pulumi.Input<inputs.GlueSchemaVersionSchema>;
    /**
     * Complete definition of the schema in plain-text.
     */
    schemaDefinition: pulumi.Input<string>;
}
