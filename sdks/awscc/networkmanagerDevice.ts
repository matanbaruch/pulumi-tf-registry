// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkmanagerDevice extends pulumi.CustomResource {
    /**
     * Get an existing NetworkmanagerDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkmanagerDeviceState, opts?: pulumi.CustomResourceOptions): NetworkmanagerDevice {
        return new NetworkmanagerDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/networkmanagerDevice:NetworkmanagerDevice';

    /**
     * Returns true if the given object is an instance of NetworkmanagerDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkmanagerDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkmanagerDevice.__pulumiType;
    }

    /**
     * The Amazon Web Services location of the device, if applicable.
     */
    public readonly awsLocation!: pulumi.Output<outputs.NetworkmanagerDeviceAwsLocation>;
    /**
     * The date and time that the device was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the device.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the device.
     */
    public /*out*/ readonly deviceArn!: pulumi.Output<string>;
    /**
     * The ID of the device.
     */
    public /*out*/ readonly deviceId!: pulumi.Output<string>;
    /**
     * The ID of the global network.
     */
    public readonly globalNetworkId!: pulumi.Output<string>;
    /**
     * The site location.
     */
    public readonly location!: pulumi.Output<outputs.NetworkmanagerDeviceLocation>;
    /**
     * The device model
     */
    public readonly model!: pulumi.Output<string>;
    /**
     * The device serial number.
     */
    public readonly serialNumber!: pulumi.Output<string>;
    /**
     * The site ID.
     */
    public readonly siteId!: pulumi.Output<string>;
    /**
     * The state of the device.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The tags for the device.
     */
    public readonly tags!: pulumi.Output<outputs.NetworkmanagerDeviceTag[]>;
    /**
     * The device type.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The device vendor.
     */
    public readonly vendor!: pulumi.Output<string>;

    /**
     * Create a NetworkmanagerDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkmanagerDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkmanagerDeviceArgs | NetworkmanagerDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkmanagerDeviceState | undefined;
            resourceInputs["awsLocation"] = state ? state.awsLocation : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceArn"] = state ? state.deviceArn : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["globalNetworkId"] = state ? state.globalNetworkId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vendor"] = state ? state.vendor : undefined;
        } else {
            const args = argsOrState as NetworkmanagerDeviceArgs | undefined;
            if ((!args || args.globalNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalNetworkId'");
            }
            resourceInputs["awsLocation"] = args ? args.awsLocation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["globalNetworkId"] = args ? args.globalNetworkId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["serialNumber"] = args ? args.serialNumber : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vendor"] = args ? args.vendor : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["deviceArn"] = undefined /*out*/;
            resourceInputs["deviceId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkmanagerDevice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkmanagerDevice resources.
 */
export interface NetworkmanagerDeviceState {
    /**
     * The Amazon Web Services location of the device, if applicable.
     */
    awsLocation?: pulumi.Input<inputs.NetworkmanagerDeviceAwsLocation>;
    /**
     * The date and time that the device was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the device.
     */
    description?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the device.
     */
    deviceArn?: pulumi.Input<string>;
    /**
     * The ID of the device.
     */
    deviceId?: pulumi.Input<string>;
    /**
     * The ID of the global network.
     */
    globalNetworkId?: pulumi.Input<string>;
    /**
     * The site location.
     */
    location?: pulumi.Input<inputs.NetworkmanagerDeviceLocation>;
    /**
     * The device model
     */
    model?: pulumi.Input<string>;
    /**
     * The device serial number.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * The site ID.
     */
    siteId?: pulumi.Input<string>;
    /**
     * The state of the device.
     */
    state?: pulumi.Input<string>;
    /**
     * The tags for the device.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerDeviceTag>[]>;
    /**
     * The device type.
     */
    type?: pulumi.Input<string>;
    /**
     * The device vendor.
     */
    vendor?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkmanagerDevice resource.
 */
export interface NetworkmanagerDeviceArgs {
    /**
     * The Amazon Web Services location of the device, if applicable.
     */
    awsLocation?: pulumi.Input<inputs.NetworkmanagerDeviceAwsLocation>;
    /**
     * The description of the device.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the global network.
     */
    globalNetworkId: pulumi.Input<string>;
    /**
     * The site location.
     */
    location?: pulumi.Input<inputs.NetworkmanagerDeviceLocation>;
    /**
     * The device model
     */
    model?: pulumi.Input<string>;
    /**
     * The device serial number.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * The site ID.
     */
    siteId?: pulumi.Input<string>;
    /**
     * The tags for the device.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerDeviceTag>[]>;
    /**
     * The device type.
     */
    type?: pulumi.Input<string>;
    /**
     * The device vendor.
     */
    vendor?: pulumi.Input<string>;
}
