// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2FlowLog extends pulumi.CustomResource {
    /**
     * Get an existing Ec2FlowLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2FlowLogState, opts?: pulumi.CustomResourceOptions): Ec2FlowLog {
        return new Ec2FlowLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2FlowLog:Ec2FlowLog';

    /**
     * Returns true if the given object is an instance of Ec2FlowLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2FlowLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2FlowLog.__pulumiType;
    }

    /**
     * The ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
     */
    public readonly deliverCrossAccountRole!: pulumi.Output<string>;
    /**
     * The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account. If
     * you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
     */
    public readonly deliverLogsPermissionArn!: pulumi.Output<string>;
    public readonly destinationOptions!: pulumi.Output<outputs.Ec2FlowLogDestinationOptions>;
    /**
     * The Flow Log ID
     */
    public /*out*/ readonly flowLogId!: pulumi.Output<string>;
    /**
     * Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch
     * Logs log group, an Amazon S3 bucket, or a Kinesis Firehose stream. The value specified for this parameter depends on the
     * value specified for LogDestinationType.
     */
    public readonly logDestination!: pulumi.Output<string>;
    /**
     * Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to
     * CloudWatch Logs or Amazon S3.
     */
    public readonly logDestinationType!: pulumi.Output<string>;
    /**
     * The fields to include in the flow log record, in the order in which they should appear.
     */
    public readonly logFormat!: pulumi.Output<string>;
    /**
     * The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. If you specify
     * LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
     */
    public readonly logGroupName!: pulumi.Output<string>;
    /**
     * The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can
     * specify 60 seconds (1 minute) or 600 seconds (10 minutes).
     */
    public readonly maxAggregationInterval!: pulumi.Output<number>;
    /**
     * The ID of the subnet, network interface, or VPC for which you want to create a flow log.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId
     * property, specify VPC for this property.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * The tags to apply to the flow logs.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2FlowLogTag[]>;
    /**
     * The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
     */
    public readonly trafficType!: pulumi.Output<string>;

    /**
     * Create a Ec2FlowLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2FlowLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2FlowLogArgs | Ec2FlowLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2FlowLogState | undefined;
            resourceInputs["deliverCrossAccountRole"] = state ? state.deliverCrossAccountRole : undefined;
            resourceInputs["deliverLogsPermissionArn"] = state ? state.deliverLogsPermissionArn : undefined;
            resourceInputs["destinationOptions"] = state ? state.destinationOptions : undefined;
            resourceInputs["flowLogId"] = state ? state.flowLogId : undefined;
            resourceInputs["logDestination"] = state ? state.logDestination : undefined;
            resourceInputs["logDestinationType"] = state ? state.logDestinationType : undefined;
            resourceInputs["logFormat"] = state ? state.logFormat : undefined;
            resourceInputs["logGroupName"] = state ? state.logGroupName : undefined;
            resourceInputs["maxAggregationInterval"] = state ? state.maxAggregationInterval : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trafficType"] = state ? state.trafficType : undefined;
        } else {
            const args = argsOrState as Ec2FlowLogArgs | undefined;
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["deliverCrossAccountRole"] = args ? args.deliverCrossAccountRole : undefined;
            resourceInputs["deliverLogsPermissionArn"] = args ? args.deliverLogsPermissionArn : undefined;
            resourceInputs["destinationOptions"] = args ? args.destinationOptions : undefined;
            resourceInputs["logDestination"] = args ? args.logDestination : undefined;
            resourceInputs["logDestinationType"] = args ? args.logDestinationType : undefined;
            resourceInputs["logFormat"] = args ? args.logFormat : undefined;
            resourceInputs["logGroupName"] = args ? args.logGroupName : undefined;
            resourceInputs["maxAggregationInterval"] = args ? args.maxAggregationInterval : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trafficType"] = args ? args.trafficType : undefined;
            resourceInputs["flowLogId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2FlowLog.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2FlowLog resources.
 */
export interface Ec2FlowLogState {
    /**
     * The ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
     */
    deliverCrossAccountRole?: pulumi.Input<string>;
    /**
     * The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account. If
     * you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
     */
    deliverLogsPermissionArn?: pulumi.Input<string>;
    destinationOptions?: pulumi.Input<inputs.Ec2FlowLogDestinationOptions>;
    /**
     * The Flow Log ID
     */
    flowLogId?: pulumi.Input<string>;
    /**
     * Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch
     * Logs log group, an Amazon S3 bucket, or a Kinesis Firehose stream. The value specified for this parameter depends on the
     * value specified for LogDestinationType.
     */
    logDestination?: pulumi.Input<string>;
    /**
     * Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to
     * CloudWatch Logs or Amazon S3.
     */
    logDestinationType?: pulumi.Input<string>;
    /**
     * The fields to include in the flow log record, in the order in which they should appear.
     */
    logFormat?: pulumi.Input<string>;
    /**
     * The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. If you specify
     * LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
     */
    logGroupName?: pulumi.Input<string>;
    /**
     * The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can
     * specify 60 seconds (1 minute) or 600 seconds (10 minutes).
     */
    maxAggregationInterval?: pulumi.Input<number>;
    /**
     * The ID of the subnet, network interface, or VPC for which you want to create a flow log.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId
     * property, specify VPC for this property.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The tags to apply to the flow logs.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2FlowLogTag>[]>;
    /**
     * The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
     */
    trafficType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2FlowLog resource.
 */
export interface Ec2FlowLogArgs {
    /**
     * The ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
     */
    deliverCrossAccountRole?: pulumi.Input<string>;
    /**
     * The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account. If
     * you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
     */
    deliverLogsPermissionArn?: pulumi.Input<string>;
    destinationOptions?: pulumi.Input<inputs.Ec2FlowLogDestinationOptions>;
    /**
     * Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch
     * Logs log group, an Amazon S3 bucket, or a Kinesis Firehose stream. The value specified for this parameter depends on the
     * value specified for LogDestinationType.
     */
    logDestination?: pulumi.Input<string>;
    /**
     * Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to
     * CloudWatch Logs or Amazon S3.
     */
    logDestinationType?: pulumi.Input<string>;
    /**
     * The fields to include in the flow log record, in the order in which they should appear.
     */
    logFormat?: pulumi.Input<string>;
    /**
     * The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. If you specify
     * LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
     */
    logGroupName?: pulumi.Input<string>;
    /**
     * The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can
     * specify 60 seconds (1 minute) or 600 seconds (10 minutes).
     */
    maxAggregationInterval?: pulumi.Input<number>;
    /**
     * The ID of the subnet, network interface, or VPC for which you want to create a flow log.
     */
    resourceId: pulumi.Input<string>;
    /**
     * The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId
     * property, specify VPC for this property.
     */
    resourceType: pulumi.Input<string>;
    /**
     * The tags to apply to the flow logs.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2FlowLogTag>[]>;
    /**
     * The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
     */
    trafficType?: pulumi.Input<string>;
}
