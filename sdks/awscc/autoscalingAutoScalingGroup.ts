// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutoscalingAutoScalingGroup extends pulumi.CustomResource {
    /**
     * Get an existing AutoscalingAutoScalingGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoscalingAutoScalingGroupState, opts?: pulumi.CustomResourceOptions): AutoscalingAutoScalingGroup {
        return new AutoscalingAutoScalingGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/autoscalingAutoScalingGroup:AutoscalingAutoScalingGroup';

    /**
     * Returns true if the given object is an instance of AutoscalingAutoScalingGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoscalingAutoScalingGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoscalingAutoScalingGroup.__pulumiType;
    }

    /**
     * The name of the Auto Scaling group. This name must be unique per Region per account. The name can contain any ASCII
     * character 33 to 126 including most punctuation characters, digits, and upper and lowercased letters. You cannot use a
     * colon (:) in the name.
     */
    public readonly autoScalingGroupName!: pulumi.Output<string>;
    /**
     * A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the
     * default VPC subnet in each Availability Zone when not using the ``VPCZoneIdentifier`` property, or for attaching a
     * network interface when an existing network interface ID is specified in a launch template.
     */
    public readonly availabilityZones!: pulumi.Output<string[]>;
    /**
     * Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is disabled. When you turn on
     * Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot Instance whenever Amazon EC2 notifies that a
     * Spot Instance is at an elevated risk of interruption. After launching a new instance, it then terminates an old
     * instance. For more information, see [Use Capacity Rebalancing to handle Amazon EC2 Spot
     * Interruptions](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html) in the
     * in the *Amazon EC2 Auto Scaling User Guide*.
     */
    public readonly capacityRebalance!: pulumi.Output<boolean>;
    /**
     * Reserved.
     */
    public readonly context!: pulumi.Output<string>;
    /**
     * *Only needed if you use simple scaling policies.* The amount of time, in seconds, between one scaling activity ending
     * and another one starting due to simple scaling policies. For more information, see [Scaling cooldowns for Amazon EC2
     * Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-scaling-cooldowns.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. Default: ``300`` seconds
     */
    public readonly cooldown!: pulumi.Output<string>;
    /**
     * The amount of time, in seconds, until a new instance is considered to have finished initializing and resource
     * consumption to become stable after it enters the ``InService`` state. During an instance refresh, Amazon EC2 Auto
     * Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance.
     * Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing
     * instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more
     * information, see [Set the default instance warmup for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. To manage various warm-up settings at the group level, we recommend that you set
     * the default instance warmup, *even if it is set to 0 seconds*. To remove a value that you previously set, include the
     * property but specify ``-1`` for the value. However, we strongly recommend keeping the default instance warmup enabled by
     * specifying a value of ``0`` or other nominal value. Default: None
     */
    public readonly defaultInstanceWarmup!: pulumi.Output<number>;
    /**
     * The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the capacity it
     * attempts to maintain. It can scale beyond this capacity if you configure automatic scaling. The number must be greater
     * than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not
     * specify a desired capacity when creating the stack, the default is the minimum size of the group. CloudFormation marks
     * the Auto Scaling group as successful (by setting its status to CREATE_COMPLETE) when the desired capacity is reached.
     * However, if a maximum Spot price is set in the launch template or launch configuration that you specified, then desired
     * capacity is not used as a criteria for success. Whether your request is fulfilled depends on Spot Instance capacity and
     * your maximum price.
     */
    public readonly desiredCapacity!: pulumi.Output<string>;
    /**
     * The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports
     * ``DesiredCapacityType`` for attribute-based instance type selection only. For more information, see [Create a mixed
     * instances group using attribute-based instance type
     * selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-mixed-instances-group-attribute-based-instance-type-selection.html)
     * in the *Amazon EC2 Auto Scaling User Guide*. By default, Amazon EC2 Auto Scaling specifies ``units``, which translates
     * into number of instances. Valid values: ``units`` | ``vcpu`` | ``memory-mib``
     */
    public readonly desiredCapacityType!: pulumi.Output<string>;
    /**
     * The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance
     * that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do
     * not immediately pass their health checks after they enter the ``InService`` state. For more information, see [Set the
     * health check grace period for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. Default: ``0`` seconds
     */
    public readonly healthCheckGracePeriod!: pulumi.Output<number>;
    /**
     * A comma-separated value string of one or more health check types. The valid values are ``EC2``, ``ELB``, and
     * ``VPC_LATTICE``. ``EC2`` is the default health check and cannot be disabled. For more information, see [Health checks
     * for instances in an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-health-checks.html) in the *Amazon EC2
     * Auto Scaling User Guide*. Only specify ``EC2`` if you must clear a value that was previously set.
     */
    public readonly healthCheckType!: pulumi.Output<string>;
    /**
     * The ID of the instance used to base the launch configuration on. For more information, see [Create an Auto Scaling group
     * using an EC2 instance](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. If you specify ``LaunchTemplate``, ``MixedInstancesPolicy``, or
     * ``LaunchConfigurationName``, don't specify ``InstanceId``.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * An instance maintenance policy. For more information, see [Set instance maintenance
     * policy](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html) in the
     * *Amazon EC2 Auto Scaling User Guide*.
     */
    public readonly instanceMaintenancePolicy!: pulumi.Output<outputs.AutoscalingAutoScalingGroupInstanceMaintenancePolicy>;
    /**
     * The name of the launch configuration to use to launch instances. Required only if you don't specify ``LaunchTemplate``,
     * ``MixedInstancesPolicy``, or ``InstanceId``.
     */
    public readonly launchConfigurationName!: pulumi.Output<string>;
    /**
     * Information used to specify the launch template and version to use to launch instances. You can alternatively associate
     * a launch template to the Auto Scaling group by specifying a ``MixedInstancesPolicy``. For more information about
     * creating launch templates, see [Create a launch template for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. If you omit this property, you must specify ``MixedInstancesPolicy``, ``LaunchConfigurationName``,
     * or ``InstanceId``.
     */
    public readonly launchTemplate!: pulumi.Output<outputs.AutoscalingAutoScalingGroupLaunchTemplate>;
    /**
     * One or more lifecycle hooks to add to the Auto Scaling group before instances are launched.
     */
    public readonly lifecycleHookSpecificationLists!: pulumi.Output<outputs.AutoscalingAutoScalingGroupLifecycleHookSpecificationList[]>;
    /**
     * A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers, Network Load
     * Balancers, and Gateway Load Balancers, specify the ``TargetGroupARNs`` property instead.
     */
    public readonly loadBalancerNames!: pulumi.Output<string[]>;
    /**
     * The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value
     * must be either 0 or a number equal to or greater than 86,400 seconds (1 day). For more information, see [Replace Auto
     * Scaling instances based on maximum instance
     * lifetime](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html) in the *Amazon EC2 Auto
     * Scaling User Guide*.
     */
    public readonly maxInstanceLifetime!: pulumi.Output<number>;
    /**
     * The maximum size of the group. With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may
     * need to go above ``MaxSize`` to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go
     * above ``MaxSize`` by more than your largest instance weight (weights that define how many units each instance
     * contributes to the desired capacity of the group).
     */
    public readonly maxSize!: pulumi.Output<string>;
    /**
     * Enables the monitoring of group metrics of an Auto Scaling group. By default, these metrics are disabled.
     */
    public readonly metricsCollections!: pulumi.Output<outputs.AutoscalingAutoScalingGroupMetricsCollection[]>;
    /**
     * The minimum size of the group.
     */
    public readonly minSize!: pulumi.Output<string>;
    /**
     * An embedded object that specifies a mixed instances policy. The policy includes properties that not only define the
     * distribution of On-Demand Instances and Spot Instances, the maximum price to pay for Spot Instances (optional), and how
     * the Auto Scaling group allocates instance types to fulfill On-Demand and Spot capacities, but also the properties that
     * specify the instance configuration information—the launch template and instance types. The policy can also include a
     * weight for each instance type and different launch templates for individual instance types. For more information, see
     * [Auto Scaling groups with multiple instance types and purchase
     * options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the
     * *Amazon EC2 Auto Scaling User Guide*.
     */
    public readonly mixedInstancesPolicy!: pulumi.Output<outputs.AutoscalingAutoScalingGroupMixedInstancesPolicy>;
    /**
     * Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.
     * For more information about preventing instances from terminating on scale in, see [Use instance scale-in
     * protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html) in the
     * *Amazon EC2 Auto Scaling User Guide*.
     */
    public readonly newInstancesProtectedFromScaleIn!: pulumi.Output<boolean>;
    /**
     * A structure that specifies an Amazon SNS notification configuration for the ``NotificationConfigurations`` property of
     * the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource. For an example template snippet, see [Configure Amazon EC2 Auto Scaling
     * resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ec2-auto-scaling.html). For more
     * information, see [Get Amazon SNS notifications when your Auto Scaling group
     * scales](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html) in the *Amazon EC2 Auto
     * Scaling User Guide*.
     */
    public readonly notificationConfiguration!: pulumi.Output<outputs.AutoscalingAutoScalingGroupNotificationConfiguration>;
    /**
     * Configures an Auto Scaling group to send notifications when specified events take place.
     */
    public readonly notificationConfigurations!: pulumi.Output<outputs.AutoscalingAutoScalingGroupNotificationConfiguration[]>;
    /**
     * The name of the placement group into which to launch your instances. For more information, see [Placement
     * groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the *Amazon EC2 User Guide for
     * Linux Instances*. A *cluster* placement group is a logical grouping of instances within a single Availability Zone. You
     * cannot specify multiple Availability Zones and a cluster placement group.
     */
    public readonly placementGroup!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS service on
     * your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named ``AWSServiceRoleForAutoScaling``,
     * which it creates if it does not exist. For more information, see [Service-linked
     * roles](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html) in the *Amazon EC2
     * Auto Scaling User Guide*.
     */
    public readonly serviceLinkedRoleArn!: pulumi.Output<string>;
    /**
     * One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2 instances it launches.
     * Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes, specify the tags in a launch template
     * but use caution. If the launch template specifies an instance tag with a key that is also specified for the Auto Scaling
     * group, Amazon EC2 Auto Scaling overrides the value of that instance tag with the value specified by the Auto Scaling
     * group. For more information, see [Tag Auto Scaling groups and
     * instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html) in the *Amazon EC2 Auto
     * Scaling User Guide*.
     */
    public readonly tags!: pulumi.Output<outputs.AutoscalingAutoScalingGroupTag[]>;
    /**
     * The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to associate with the Auto Scaling group.
     * Instances are registered as targets with the target groups. The target groups receive incoming traffic and route
     * requests to one or more registered targets. For more information, see [Use Elastic Load Balancing to distribute traffic
     * across the instances in your Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html) in the *Amazon EC2 Auto
     * Scaling User Guide*.
     */
    public readonly targetGroupArNs!: pulumi.Output<string[]>;
    /**
     * A policy or a list of policies that are used to select the instance to terminate. These policies are executed in the
     * order that you list them. For more information, see [Configure termination policies for Amazon EC2 Auto
     * Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. Valid values: ``Default`` | ``AllocationStrategy`` | ``ClosestToNextInstanceHour``
     * | ``NewestInstance`` | ``OldestInstance`` | ``OldestLaunchConfiguration`` | ``OldestLaunchTemplate`` |
     * ``arn:aws:lambda:region:account-id:function:my-function:my-alias``
     */
    public readonly terminationPolicies!: pulumi.Output<string[]>;
    /**
     * A list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created. If this
     * resource specifies public subnets and is also in a VPC that is defined in the same stack template, you must use the
     * [DependsOn attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) to
     * declare a dependency on the [VPC-gateway
     * attachment](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html).
     * When you update ``VPCZoneIdentifier``, this retains the same Auto Scaling group and replaces old instances with new
     * ones, according to the specified subnets. You can optionally specify how CloudFormation handles these updates by using
     * an [UpdatePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html). Required to
     * launch instances into a nondefault VPC. If you specify ``VPCZoneIdentifier`` with ``AvailabilityZones``, the subnets
     * that you specify for this property must reside in those Availability Zones.
     */
    public readonly vpcZoneIdentifiers!: pulumi.Output<string[]>;

    /**
     * Create a AutoscalingAutoScalingGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoscalingAutoScalingGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoscalingAutoScalingGroupArgs | AutoscalingAutoScalingGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoscalingAutoScalingGroupState | undefined;
            resourceInputs["autoScalingGroupName"] = state ? state.autoScalingGroupName : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["capacityRebalance"] = state ? state.capacityRebalance : undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["cooldown"] = state ? state.cooldown : undefined;
            resourceInputs["defaultInstanceWarmup"] = state ? state.defaultInstanceWarmup : undefined;
            resourceInputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            resourceInputs["desiredCapacityType"] = state ? state.desiredCapacityType : undefined;
            resourceInputs["healthCheckGracePeriod"] = state ? state.healthCheckGracePeriod : undefined;
            resourceInputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceMaintenancePolicy"] = state ? state.instanceMaintenancePolicy : undefined;
            resourceInputs["launchConfigurationName"] = state ? state.launchConfigurationName : undefined;
            resourceInputs["launchTemplate"] = state ? state.launchTemplate : undefined;
            resourceInputs["lifecycleHookSpecificationLists"] = state ? state.lifecycleHookSpecificationLists : undefined;
            resourceInputs["loadBalancerNames"] = state ? state.loadBalancerNames : undefined;
            resourceInputs["maxInstanceLifetime"] = state ? state.maxInstanceLifetime : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["metricsCollections"] = state ? state.metricsCollections : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["mixedInstancesPolicy"] = state ? state.mixedInstancesPolicy : undefined;
            resourceInputs["newInstancesProtectedFromScaleIn"] = state ? state.newInstancesProtectedFromScaleIn : undefined;
            resourceInputs["notificationConfiguration"] = state ? state.notificationConfiguration : undefined;
            resourceInputs["notificationConfigurations"] = state ? state.notificationConfigurations : undefined;
            resourceInputs["placementGroup"] = state ? state.placementGroup : undefined;
            resourceInputs["serviceLinkedRoleArn"] = state ? state.serviceLinkedRoleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetGroupArNs"] = state ? state.targetGroupArNs : undefined;
            resourceInputs["terminationPolicies"] = state ? state.terminationPolicies : undefined;
            resourceInputs["vpcZoneIdentifiers"] = state ? state.vpcZoneIdentifiers : undefined;
        } else {
            const args = argsOrState as AutoscalingAutoScalingGroupArgs | undefined;
            if ((!args || args.maxSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxSize'");
            }
            if ((!args || args.minSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minSize'");
            }
            resourceInputs["autoScalingGroupName"] = args ? args.autoScalingGroupName : undefined;
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["capacityRebalance"] = args ? args.capacityRebalance : undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["cooldown"] = args ? args.cooldown : undefined;
            resourceInputs["defaultInstanceWarmup"] = args ? args.defaultInstanceWarmup : undefined;
            resourceInputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            resourceInputs["desiredCapacityType"] = args ? args.desiredCapacityType : undefined;
            resourceInputs["healthCheckGracePeriod"] = args ? args.healthCheckGracePeriod : undefined;
            resourceInputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["instanceMaintenancePolicy"] = args ? args.instanceMaintenancePolicy : undefined;
            resourceInputs["launchConfigurationName"] = args ? args.launchConfigurationName : undefined;
            resourceInputs["launchTemplate"] = args ? args.launchTemplate : undefined;
            resourceInputs["lifecycleHookSpecificationLists"] = args ? args.lifecycleHookSpecificationLists : undefined;
            resourceInputs["loadBalancerNames"] = args ? args.loadBalancerNames : undefined;
            resourceInputs["maxInstanceLifetime"] = args ? args.maxInstanceLifetime : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["metricsCollections"] = args ? args.metricsCollections : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["mixedInstancesPolicy"] = args ? args.mixedInstancesPolicy : undefined;
            resourceInputs["newInstancesProtectedFromScaleIn"] = args ? args.newInstancesProtectedFromScaleIn : undefined;
            resourceInputs["notificationConfiguration"] = args ? args.notificationConfiguration : undefined;
            resourceInputs["notificationConfigurations"] = args ? args.notificationConfigurations : undefined;
            resourceInputs["placementGroup"] = args ? args.placementGroup : undefined;
            resourceInputs["serviceLinkedRoleArn"] = args ? args.serviceLinkedRoleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetGroupArNs"] = args ? args.targetGroupArNs : undefined;
            resourceInputs["terminationPolicies"] = args ? args.terminationPolicies : undefined;
            resourceInputs["vpcZoneIdentifiers"] = args ? args.vpcZoneIdentifiers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoscalingAutoScalingGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutoscalingAutoScalingGroup resources.
 */
export interface AutoscalingAutoScalingGroupState {
    /**
     * The name of the Auto Scaling group. This name must be unique per Region per account. The name can contain any ASCII
     * character 33 to 126 including most punctuation characters, digits, and upper and lowercased letters. You cannot use a
     * colon (:) in the name.
     */
    autoScalingGroupName?: pulumi.Input<string>;
    /**
     * A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the
     * default VPC subnet in each Availability Zone when not using the ``VPCZoneIdentifier`` property, or for attaching a
     * network interface when an existing network interface ID is specified in a launch template.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is disabled. When you turn on
     * Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot Instance whenever Amazon EC2 notifies that a
     * Spot Instance is at an elevated risk of interruption. After launching a new instance, it then terminates an old
     * instance. For more information, see [Use Capacity Rebalancing to handle Amazon EC2 Spot
     * Interruptions](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html) in the
     * in the *Amazon EC2 Auto Scaling User Guide*.
     */
    capacityRebalance?: pulumi.Input<boolean>;
    /**
     * Reserved.
     */
    context?: pulumi.Input<string>;
    /**
     * *Only needed if you use simple scaling policies.* The amount of time, in seconds, between one scaling activity ending
     * and another one starting due to simple scaling policies. For more information, see [Scaling cooldowns for Amazon EC2
     * Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-scaling-cooldowns.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. Default: ``300`` seconds
     */
    cooldown?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, until a new instance is considered to have finished initializing and resource
     * consumption to become stable after it enters the ``InService`` state. During an instance refresh, Amazon EC2 Auto
     * Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance.
     * Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing
     * instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more
     * information, see [Set the default instance warmup for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. To manage various warm-up settings at the group level, we recommend that you set
     * the default instance warmup, *even if it is set to 0 seconds*. To remove a value that you previously set, include the
     * property but specify ``-1`` for the value. However, we strongly recommend keeping the default instance warmup enabled by
     * specifying a value of ``0`` or other nominal value. Default: None
     */
    defaultInstanceWarmup?: pulumi.Input<number>;
    /**
     * The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the capacity it
     * attempts to maintain. It can scale beyond this capacity if you configure automatic scaling. The number must be greater
     * than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not
     * specify a desired capacity when creating the stack, the default is the minimum size of the group. CloudFormation marks
     * the Auto Scaling group as successful (by setting its status to CREATE_COMPLETE) when the desired capacity is reached.
     * However, if a maximum Spot price is set in the launch template or launch configuration that you specified, then desired
     * capacity is not used as a criteria for success. Whether your request is fulfilled depends on Spot Instance capacity and
     * your maximum price.
     */
    desiredCapacity?: pulumi.Input<string>;
    /**
     * The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports
     * ``DesiredCapacityType`` for attribute-based instance type selection only. For more information, see [Create a mixed
     * instances group using attribute-based instance type
     * selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-mixed-instances-group-attribute-based-instance-type-selection.html)
     * in the *Amazon EC2 Auto Scaling User Guide*. By default, Amazon EC2 Auto Scaling specifies ``units``, which translates
     * into number of instances. Valid values: ``units`` | ``vcpu`` | ``memory-mib``
     */
    desiredCapacityType?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance
     * that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do
     * not immediately pass their health checks after they enter the ``InService`` state. For more information, see [Set the
     * health check grace period for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. Default: ``0`` seconds
     */
    healthCheckGracePeriod?: pulumi.Input<number>;
    /**
     * A comma-separated value string of one or more health check types. The valid values are ``EC2``, ``ELB``, and
     * ``VPC_LATTICE``. ``EC2`` is the default health check and cannot be disabled. For more information, see [Health checks
     * for instances in an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-health-checks.html) in the *Amazon EC2
     * Auto Scaling User Guide*. Only specify ``EC2`` if you must clear a value that was previously set.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * The ID of the instance used to base the launch configuration on. For more information, see [Create an Auto Scaling group
     * using an EC2 instance](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. If you specify ``LaunchTemplate``, ``MixedInstancesPolicy``, or
     * ``LaunchConfigurationName``, don't specify ``InstanceId``.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * An instance maintenance policy. For more information, see [Set instance maintenance
     * policy](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html) in the
     * *Amazon EC2 Auto Scaling User Guide*.
     */
    instanceMaintenancePolicy?: pulumi.Input<inputs.AutoscalingAutoScalingGroupInstanceMaintenancePolicy>;
    /**
     * The name of the launch configuration to use to launch instances. Required only if you don't specify ``LaunchTemplate``,
     * ``MixedInstancesPolicy``, or ``InstanceId``.
     */
    launchConfigurationName?: pulumi.Input<string>;
    /**
     * Information used to specify the launch template and version to use to launch instances. You can alternatively associate
     * a launch template to the Auto Scaling group by specifying a ``MixedInstancesPolicy``. For more information about
     * creating launch templates, see [Create a launch template for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. If you omit this property, you must specify ``MixedInstancesPolicy``, ``LaunchConfigurationName``,
     * or ``InstanceId``.
     */
    launchTemplate?: pulumi.Input<inputs.AutoscalingAutoScalingGroupLaunchTemplate>;
    /**
     * One or more lifecycle hooks to add to the Auto Scaling group before instances are launched.
     */
    lifecycleHookSpecificationLists?: pulumi.Input<pulumi.Input<inputs.AutoscalingAutoScalingGroupLifecycleHookSpecificationList>[]>;
    /**
     * A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers, Network Load
     * Balancers, and Gateway Load Balancers, specify the ``TargetGroupARNs`` property instead.
     */
    loadBalancerNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value
     * must be either 0 or a number equal to or greater than 86,400 seconds (1 day). For more information, see [Replace Auto
     * Scaling instances based on maximum instance
     * lifetime](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html) in the *Amazon EC2 Auto
     * Scaling User Guide*.
     */
    maxInstanceLifetime?: pulumi.Input<number>;
    /**
     * The maximum size of the group. With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may
     * need to go above ``MaxSize`` to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go
     * above ``MaxSize`` by more than your largest instance weight (weights that define how many units each instance
     * contributes to the desired capacity of the group).
     */
    maxSize?: pulumi.Input<string>;
    /**
     * Enables the monitoring of group metrics of an Auto Scaling group. By default, these metrics are disabled.
     */
    metricsCollections?: pulumi.Input<pulumi.Input<inputs.AutoscalingAutoScalingGroupMetricsCollection>[]>;
    /**
     * The minimum size of the group.
     */
    minSize?: pulumi.Input<string>;
    /**
     * An embedded object that specifies a mixed instances policy. The policy includes properties that not only define the
     * distribution of On-Demand Instances and Spot Instances, the maximum price to pay for Spot Instances (optional), and how
     * the Auto Scaling group allocates instance types to fulfill On-Demand and Spot capacities, but also the properties that
     * specify the instance configuration information—the launch template and instance types. The policy can also include a
     * weight for each instance type and different launch templates for individual instance types. For more information, see
     * [Auto Scaling groups with multiple instance types and purchase
     * options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the
     * *Amazon EC2 Auto Scaling User Guide*.
     */
    mixedInstancesPolicy?: pulumi.Input<inputs.AutoscalingAutoScalingGroupMixedInstancesPolicy>;
    /**
     * Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.
     * For more information about preventing instances from terminating on scale in, see [Use instance scale-in
     * protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html) in the
     * *Amazon EC2 Auto Scaling User Guide*.
     */
    newInstancesProtectedFromScaleIn?: pulumi.Input<boolean>;
    /**
     * A structure that specifies an Amazon SNS notification configuration for the ``NotificationConfigurations`` property of
     * the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource. For an example template snippet, see [Configure Amazon EC2 Auto Scaling
     * resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ec2-auto-scaling.html). For more
     * information, see [Get Amazon SNS notifications when your Auto Scaling group
     * scales](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html) in the *Amazon EC2 Auto
     * Scaling User Guide*.
     */
    notificationConfiguration?: pulumi.Input<inputs.AutoscalingAutoScalingGroupNotificationConfiguration>;
    /**
     * Configures an Auto Scaling group to send notifications when specified events take place.
     */
    notificationConfigurations?: pulumi.Input<pulumi.Input<inputs.AutoscalingAutoScalingGroupNotificationConfiguration>[]>;
    /**
     * The name of the placement group into which to launch your instances. For more information, see [Placement
     * groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the *Amazon EC2 User Guide for
     * Linux Instances*. A *cluster* placement group is a logical grouping of instances within a single Availability Zone. You
     * cannot specify multiple Availability Zones and a cluster placement group.
     */
    placementGroup?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS service on
     * your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named ``AWSServiceRoleForAutoScaling``,
     * which it creates if it does not exist. For more information, see [Service-linked
     * roles](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html) in the *Amazon EC2
     * Auto Scaling User Guide*.
     */
    serviceLinkedRoleArn?: pulumi.Input<string>;
    /**
     * One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2 instances it launches.
     * Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes, specify the tags in a launch template
     * but use caution. If the launch template specifies an instance tag with a key that is also specified for the Auto Scaling
     * group, Amazon EC2 Auto Scaling overrides the value of that instance tag with the value specified by the Auto Scaling
     * group. For more information, see [Tag Auto Scaling groups and
     * instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html) in the *Amazon EC2 Auto
     * Scaling User Guide*.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AutoscalingAutoScalingGroupTag>[]>;
    /**
     * The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to associate with the Auto Scaling group.
     * Instances are registered as targets with the target groups. The target groups receive incoming traffic and route
     * requests to one or more registered targets. For more information, see [Use Elastic Load Balancing to distribute traffic
     * across the instances in your Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html) in the *Amazon EC2 Auto
     * Scaling User Guide*.
     */
    targetGroupArNs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A policy or a list of policies that are used to select the instance to terminate. These policies are executed in the
     * order that you list them. For more information, see [Configure termination policies for Amazon EC2 Auto
     * Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. Valid values: ``Default`` | ``AllocationStrategy`` | ``ClosestToNextInstanceHour``
     * | ``NewestInstance`` | ``OldestInstance`` | ``OldestLaunchConfiguration`` | ``OldestLaunchTemplate`` |
     * ``arn:aws:lambda:region:account-id:function:my-function:my-alias``
     */
    terminationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created. If this
     * resource specifies public subnets and is also in a VPC that is defined in the same stack template, you must use the
     * [DependsOn attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) to
     * declare a dependency on the [VPC-gateway
     * attachment](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html).
     * When you update ``VPCZoneIdentifier``, this retains the same Auto Scaling group and replaces old instances with new
     * ones, according to the specified subnets. You can optionally specify how CloudFormation handles these updates by using
     * an [UpdatePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html). Required to
     * launch instances into a nondefault VPC. If you specify ``VPCZoneIdentifier`` with ``AvailabilityZones``, the subnets
     * that you specify for this property must reside in those Availability Zones.
     */
    vpcZoneIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AutoscalingAutoScalingGroup resource.
 */
export interface AutoscalingAutoScalingGroupArgs {
    /**
     * The name of the Auto Scaling group. This name must be unique per Region per account. The name can contain any ASCII
     * character 33 to 126 including most punctuation characters, digits, and upper and lowercased letters. You cannot use a
     * colon (:) in the name.
     */
    autoScalingGroupName?: pulumi.Input<string>;
    /**
     * A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the
     * default VPC subnet in each Availability Zone when not using the ``VPCZoneIdentifier`` property, or for attaching a
     * network interface when an existing network interface ID is specified in a launch template.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is disabled. When you turn on
     * Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot Instance whenever Amazon EC2 notifies that a
     * Spot Instance is at an elevated risk of interruption. After launching a new instance, it then terminates an old
     * instance. For more information, see [Use Capacity Rebalancing to handle Amazon EC2 Spot
     * Interruptions](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html) in the
     * in the *Amazon EC2 Auto Scaling User Guide*.
     */
    capacityRebalance?: pulumi.Input<boolean>;
    /**
     * Reserved.
     */
    context?: pulumi.Input<string>;
    /**
     * *Only needed if you use simple scaling policies.* The amount of time, in seconds, between one scaling activity ending
     * and another one starting due to simple scaling policies. For more information, see [Scaling cooldowns for Amazon EC2
     * Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-scaling-cooldowns.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. Default: ``300`` seconds
     */
    cooldown?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, until a new instance is considered to have finished initializing and resource
     * consumption to become stable after it enters the ``InService`` state. During an instance refresh, Amazon EC2 Auto
     * Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance.
     * Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing
     * instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more
     * information, see [Set the default instance warmup for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. To manage various warm-up settings at the group level, we recommend that you set
     * the default instance warmup, *even if it is set to 0 seconds*. To remove a value that you previously set, include the
     * property but specify ``-1`` for the value. However, we strongly recommend keeping the default instance warmup enabled by
     * specifying a value of ``0`` or other nominal value. Default: None
     */
    defaultInstanceWarmup?: pulumi.Input<number>;
    /**
     * The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the capacity it
     * attempts to maintain. It can scale beyond this capacity if you configure automatic scaling. The number must be greater
     * than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not
     * specify a desired capacity when creating the stack, the default is the minimum size of the group. CloudFormation marks
     * the Auto Scaling group as successful (by setting its status to CREATE_COMPLETE) when the desired capacity is reached.
     * However, if a maximum Spot price is set in the launch template or launch configuration that you specified, then desired
     * capacity is not used as a criteria for success. Whether your request is fulfilled depends on Spot Instance capacity and
     * your maximum price.
     */
    desiredCapacity?: pulumi.Input<string>;
    /**
     * The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports
     * ``DesiredCapacityType`` for attribute-based instance type selection only. For more information, see [Create a mixed
     * instances group using attribute-based instance type
     * selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-mixed-instances-group-attribute-based-instance-type-selection.html)
     * in the *Amazon EC2 Auto Scaling User Guide*. By default, Amazon EC2 Auto Scaling specifies ``units``, which translates
     * into number of instances. Valid values: ``units`` | ``vcpu`` | ``memory-mib``
     */
    desiredCapacityType?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance
     * that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do
     * not immediately pass their health checks after they enter the ``InService`` state. For more information, see [Set the
     * health check grace period for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. Default: ``0`` seconds
     */
    healthCheckGracePeriod?: pulumi.Input<number>;
    /**
     * A comma-separated value string of one or more health check types. The valid values are ``EC2``, ``ELB``, and
     * ``VPC_LATTICE``. ``EC2`` is the default health check and cannot be disabled. For more information, see [Health checks
     * for instances in an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-health-checks.html) in the *Amazon EC2
     * Auto Scaling User Guide*. Only specify ``EC2`` if you must clear a value that was previously set.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * The ID of the instance used to base the launch configuration on. For more information, see [Create an Auto Scaling group
     * using an EC2 instance](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. If you specify ``LaunchTemplate``, ``MixedInstancesPolicy``, or
     * ``LaunchConfigurationName``, don't specify ``InstanceId``.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * An instance maintenance policy. For more information, see [Set instance maintenance
     * policy](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html) in the
     * *Amazon EC2 Auto Scaling User Guide*.
     */
    instanceMaintenancePolicy?: pulumi.Input<inputs.AutoscalingAutoScalingGroupInstanceMaintenancePolicy>;
    /**
     * The name of the launch configuration to use to launch instances. Required only if you don't specify ``LaunchTemplate``,
     * ``MixedInstancesPolicy``, or ``InstanceId``.
     */
    launchConfigurationName?: pulumi.Input<string>;
    /**
     * Information used to specify the launch template and version to use to launch instances. You can alternatively associate
     * a launch template to the Auto Scaling group by specifying a ``MixedInstancesPolicy``. For more information about
     * creating launch templates, see [Create a launch template for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. If you omit this property, you must specify ``MixedInstancesPolicy``, ``LaunchConfigurationName``,
     * or ``InstanceId``.
     */
    launchTemplate?: pulumi.Input<inputs.AutoscalingAutoScalingGroupLaunchTemplate>;
    /**
     * One or more lifecycle hooks to add to the Auto Scaling group before instances are launched.
     */
    lifecycleHookSpecificationLists?: pulumi.Input<pulumi.Input<inputs.AutoscalingAutoScalingGroupLifecycleHookSpecificationList>[]>;
    /**
     * A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers, Network Load
     * Balancers, and Gateway Load Balancers, specify the ``TargetGroupARNs`` property instead.
     */
    loadBalancerNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value
     * must be either 0 or a number equal to or greater than 86,400 seconds (1 day). For more information, see [Replace Auto
     * Scaling instances based on maximum instance
     * lifetime](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html) in the *Amazon EC2 Auto
     * Scaling User Guide*.
     */
    maxInstanceLifetime?: pulumi.Input<number>;
    /**
     * The maximum size of the group. With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may
     * need to go above ``MaxSize`` to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go
     * above ``MaxSize`` by more than your largest instance weight (weights that define how many units each instance
     * contributes to the desired capacity of the group).
     */
    maxSize: pulumi.Input<string>;
    /**
     * Enables the monitoring of group metrics of an Auto Scaling group. By default, these metrics are disabled.
     */
    metricsCollections?: pulumi.Input<pulumi.Input<inputs.AutoscalingAutoScalingGroupMetricsCollection>[]>;
    /**
     * The minimum size of the group.
     */
    minSize: pulumi.Input<string>;
    /**
     * An embedded object that specifies a mixed instances policy. The policy includes properties that not only define the
     * distribution of On-Demand Instances and Spot Instances, the maximum price to pay for Spot Instances (optional), and how
     * the Auto Scaling group allocates instance types to fulfill On-Demand and Spot capacities, but also the properties that
     * specify the instance configuration information—the launch template and instance types. The policy can also include a
     * weight for each instance type and different launch templates for individual instance types. For more information, see
     * [Auto Scaling groups with multiple instance types and purchase
     * options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the
     * *Amazon EC2 Auto Scaling User Guide*.
     */
    mixedInstancesPolicy?: pulumi.Input<inputs.AutoscalingAutoScalingGroupMixedInstancesPolicy>;
    /**
     * Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.
     * For more information about preventing instances from terminating on scale in, see [Use instance scale-in
     * protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html) in the
     * *Amazon EC2 Auto Scaling User Guide*.
     */
    newInstancesProtectedFromScaleIn?: pulumi.Input<boolean>;
    /**
     * A structure that specifies an Amazon SNS notification configuration for the ``NotificationConfigurations`` property of
     * the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource. For an example template snippet, see [Configure Amazon EC2 Auto Scaling
     * resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ec2-auto-scaling.html). For more
     * information, see [Get Amazon SNS notifications when your Auto Scaling group
     * scales](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html) in the *Amazon EC2 Auto
     * Scaling User Guide*.
     */
    notificationConfiguration?: pulumi.Input<inputs.AutoscalingAutoScalingGroupNotificationConfiguration>;
    /**
     * Configures an Auto Scaling group to send notifications when specified events take place.
     */
    notificationConfigurations?: pulumi.Input<pulumi.Input<inputs.AutoscalingAutoScalingGroupNotificationConfiguration>[]>;
    /**
     * The name of the placement group into which to launch your instances. For more information, see [Placement
     * groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the *Amazon EC2 User Guide for
     * Linux Instances*. A *cluster* placement group is a logical grouping of instances within a single Availability Zone. You
     * cannot specify multiple Availability Zones and a cluster placement group.
     */
    placementGroup?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS service on
     * your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named ``AWSServiceRoleForAutoScaling``,
     * which it creates if it does not exist. For more information, see [Service-linked
     * roles](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html) in the *Amazon EC2
     * Auto Scaling User Guide*.
     */
    serviceLinkedRoleArn?: pulumi.Input<string>;
    /**
     * One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2 instances it launches.
     * Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes, specify the tags in a launch template
     * but use caution. If the launch template specifies an instance tag with a key that is also specified for the Auto Scaling
     * group, Amazon EC2 Auto Scaling overrides the value of that instance tag with the value specified by the Auto Scaling
     * group. For more information, see [Tag Auto Scaling groups and
     * instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html) in the *Amazon EC2 Auto
     * Scaling User Guide*.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AutoscalingAutoScalingGroupTag>[]>;
    /**
     * The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to associate with the Auto Scaling group.
     * Instances are registered as targets with the target groups. The target groups receive incoming traffic and route
     * requests to one or more registered targets. For more information, see [Use Elastic Load Balancing to distribute traffic
     * across the instances in your Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html) in the *Amazon EC2 Auto
     * Scaling User Guide*.
     */
    targetGroupArNs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A policy or a list of policies that are used to select the instance to terminate. These policies are executed in the
     * order that you list them. For more information, see [Configure termination policies for Amazon EC2 Auto
     * Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. Valid values: ``Default`` | ``AllocationStrategy`` | ``ClosestToNextInstanceHour``
     * | ``NewestInstance`` | ``OldestInstance`` | ``OldestLaunchConfiguration`` | ``OldestLaunchTemplate`` |
     * ``arn:aws:lambda:region:account-id:function:my-function:my-alias``
     */
    terminationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created. If this
     * resource specifies public subnets and is also in a VPC that is defined in the same stack template, you must use the
     * [DependsOn attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) to
     * declare a dependency on the [VPC-gateway
     * attachment](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html).
     * When you update ``VPCZoneIdentifier``, this retains the same Auto Scaling group and replaces old instances with new
     * ones, according to the specified subnets. You can optionally specify how CloudFormation handles these updates by using
     * an [UpdatePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html). Required to
     * launch instances into a nondefault VPC. If you specify ``VPCZoneIdentifier`` with ``AvailabilityZones``, the subnets
     * that you specify for this property must reside in those Availability Zones.
     */
    vpcZoneIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
}
