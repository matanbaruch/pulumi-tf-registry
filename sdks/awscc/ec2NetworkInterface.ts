// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2NetworkInterface extends pulumi.CustomResource {
    /**
     * Get an existing Ec2NetworkInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2NetworkInterfaceState, opts?: pulumi.CustomResourceOptions): Ec2NetworkInterface {
        return new Ec2NetworkInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2NetworkInterface:Ec2NetworkInterface';

    /**
     * Returns true if the given object is an instance of Ec2NetworkInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2NetworkInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2NetworkInterface.__pulumiType;
    }

    public readonly connectionTrackingSpecification!: pulumi.Output<outputs.Ec2NetworkInterfaceConnectionTrackingSpecification>;
    /**
     * A description for the network interface.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * If you have instances or ENIs that rely on the IPv6 address not changing, to avoid disrupting traffic to instances or
     * ENIs, you can enable a primary IPv6 address. Enable this option to automatically assign an IPv6 associated with the ENI
     * attached to your instance to be the primary IPv6 address. When you enable an IPv6 address to be a primary IPv6, you
     * cannot disable it. Traffic will be routed to the primary IPv6 address until the instance is terminated or the ENI is
     * detached. If you have multiple IPv6 addresses associated with an ENI and you enable a primary IPv6 address, the first
     * IPv6 address associated with the ENI becomes the primary IPv6 address.
     */
    public readonly enablePrimaryIpv6!: pulumi.Output<boolean>;
    /**
     * A list of security group IDs associated with this network interface.
     */
    public readonly groupSets!: pulumi.Output<string[]>;
    /**
     * Indicates the type of network interface.
     */
    public readonly interfaceType!: pulumi.Output<string>;
    /**
     * The number of IPv4 prefixes to assign to a network interface. When you specify a number of IPv4 prefixes, Amazon EC2
     * selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By
     * default, these will be /28 prefixes. You can't specify a count of IPv4 prefixes if you've specified one of the
     * following: specific IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.
     */
    public readonly ipv4PrefixCount!: pulumi.Output<number>;
    /**
     * Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to automatically assign IPv4 prefixes, use the
     * Ipv4PrefixCount property and do not specify this property. Presently, only /28 prefixes are supported. You can't specify
     * IPv4 prefixes if you've specified one of the following: a count of IPv4 prefixes, specific private IPv4 addresses, or a
     * count of private IPv4 addresses.
     */
    public readonly ipv4Prefixes!: pulumi.Output<outputs.Ec2NetworkInterfaceIpv4Prefix[]>;
    /**
     * The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from
     * the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don't specify this property.
     */
    public readonly ipv6AddressCount!: pulumi.Output<number>;
    /**
     * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network
     * interface. If you're specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don't specify this
     * property.
     */
    public readonly ipv6Addresses!: pulumi.Output<outputs.Ec2NetworkInterfaceIpv6Address[]>;
    /**
     * The number of IPv6 prefixes to assign to a network interface. When you specify a number of IPv6 prefixes, Amazon EC2
     * selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By
     * default, these will be /80 prefixes. You can't specify a count of IPv6 prefixes if you've specified one of the
     * following: specific IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
     */
    public readonly ipv6PrefixCount!: pulumi.Output<number>;
    /**
     * Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to automatically assign IPv6 prefixes, use the
     * Ipv6PrefixCount property and do not specify this property. Presently, only /80 prefixes are supported. You can't specify
     * IPv6 prefixes if you've specified one of the following: a count of IPv6 prefixes, specific IPv6 addresses, or a count of
     * IPv6 addresses.
     */
    public readonly ipv6Prefixes!: pulumi.Output<outputs.Ec2NetworkInterfaceIpv6Prefix[]>;
    /**
     * Network interface id.
     */
    public /*out*/ readonly networkInterfaceId!: pulumi.Output<string>;
    /**
     * The primary IPv6 address
     */
    public /*out*/ readonly primaryIpv6Address!: pulumi.Output<string>;
    /**
     * Returns the primary private IP address of the network interface.
     */
    public /*out*/ readonly primaryPrivateIpAddress!: pulumi.Output<string>;
    /**
     * Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you
     * want to specify multiple private IP address, use the PrivateIpAddresses property.
     */
    public readonly privateIpAddress!: pulumi.Output<string>;
    /**
     * Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting
     * the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to
     * automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this
     * property.
     */
    public readonly privateIpAddresses!: pulumi.Output<outputs.Ec2NetworkInterfacePrivateIpAddress[]>;
    /**
     * The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary
     * IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option
     * and specify more than one private IP address using privateIpAddresses
     */
    public readonly secondaryPrivateIpAddressCount!: pulumi.Output<number>;
    /**
     * Returns the secondary private IP addresses of the network interface.
     */
    public /*out*/ readonly secondaryPrivateIpAddresses!: pulumi.Output<string[]>;
    /**
     * Indicates whether traffic to or from the instance is validated.
     */
    public readonly sourceDestCheck!: pulumi.Output<boolean>;
    /**
     * The ID of the subnet to associate with the network interface.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * An arbitrary set of tags (key-value pairs) for this network interface.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2NetworkInterfaceTag[]>;
    /**
     * The ID of the VPC
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Ec2NetworkInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2NetworkInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2NetworkInterfaceArgs | Ec2NetworkInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2NetworkInterfaceState | undefined;
            resourceInputs["connectionTrackingSpecification"] = state ? state.connectionTrackingSpecification : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enablePrimaryIpv6"] = state ? state.enablePrimaryIpv6 : undefined;
            resourceInputs["groupSets"] = state ? state.groupSets : undefined;
            resourceInputs["interfaceType"] = state ? state.interfaceType : undefined;
            resourceInputs["ipv4PrefixCount"] = state ? state.ipv4PrefixCount : undefined;
            resourceInputs["ipv4Prefixes"] = state ? state.ipv4Prefixes : undefined;
            resourceInputs["ipv6AddressCount"] = state ? state.ipv6AddressCount : undefined;
            resourceInputs["ipv6Addresses"] = state ? state.ipv6Addresses : undefined;
            resourceInputs["ipv6PrefixCount"] = state ? state.ipv6PrefixCount : undefined;
            resourceInputs["ipv6Prefixes"] = state ? state.ipv6Prefixes : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["primaryIpv6Address"] = state ? state.primaryIpv6Address : undefined;
            resourceInputs["primaryPrivateIpAddress"] = state ? state.primaryPrivateIpAddress : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["privateIpAddresses"] = state ? state.privateIpAddresses : undefined;
            resourceInputs["secondaryPrivateIpAddressCount"] = state ? state.secondaryPrivateIpAddressCount : undefined;
            resourceInputs["secondaryPrivateIpAddresses"] = state ? state.secondaryPrivateIpAddresses : undefined;
            resourceInputs["sourceDestCheck"] = state ? state.sourceDestCheck : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as Ec2NetworkInterfaceArgs | undefined;
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["connectionTrackingSpecification"] = args ? args.connectionTrackingSpecification : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enablePrimaryIpv6"] = args ? args.enablePrimaryIpv6 : undefined;
            resourceInputs["groupSets"] = args ? args.groupSets : undefined;
            resourceInputs["interfaceType"] = args ? args.interfaceType : undefined;
            resourceInputs["ipv4PrefixCount"] = args ? args.ipv4PrefixCount : undefined;
            resourceInputs["ipv4Prefixes"] = args ? args.ipv4Prefixes : undefined;
            resourceInputs["ipv6AddressCount"] = args ? args.ipv6AddressCount : undefined;
            resourceInputs["ipv6Addresses"] = args ? args.ipv6Addresses : undefined;
            resourceInputs["ipv6PrefixCount"] = args ? args.ipv6PrefixCount : undefined;
            resourceInputs["ipv6Prefixes"] = args ? args.ipv6Prefixes : undefined;
            resourceInputs["privateIpAddress"] = args ? args.privateIpAddress : undefined;
            resourceInputs["privateIpAddresses"] = args ? args.privateIpAddresses : undefined;
            resourceInputs["secondaryPrivateIpAddressCount"] = args ? args.secondaryPrivateIpAddressCount : undefined;
            resourceInputs["sourceDestCheck"] = args ? args.sourceDestCheck : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["networkInterfaceId"] = undefined /*out*/;
            resourceInputs["primaryIpv6Address"] = undefined /*out*/;
            resourceInputs["primaryPrivateIpAddress"] = undefined /*out*/;
            resourceInputs["secondaryPrivateIpAddresses"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2NetworkInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2NetworkInterface resources.
 */
export interface Ec2NetworkInterfaceState {
    connectionTrackingSpecification?: pulumi.Input<inputs.Ec2NetworkInterfaceConnectionTrackingSpecification>;
    /**
     * A description for the network interface.
     */
    description?: pulumi.Input<string>;
    /**
     * If you have instances or ENIs that rely on the IPv6 address not changing, to avoid disrupting traffic to instances or
     * ENIs, you can enable a primary IPv6 address. Enable this option to automatically assign an IPv6 associated with the ENI
     * attached to your instance to be the primary IPv6 address. When you enable an IPv6 address to be a primary IPv6, you
     * cannot disable it. Traffic will be routed to the primary IPv6 address until the instance is terminated or the ENI is
     * detached. If you have multiple IPv6 addresses associated with an ENI and you enable a primary IPv6 address, the first
     * IPv6 address associated with the ENI becomes the primary IPv6 address.
     */
    enablePrimaryIpv6?: pulumi.Input<boolean>;
    /**
     * A list of security group IDs associated with this network interface.
     */
    groupSets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates the type of network interface.
     */
    interfaceType?: pulumi.Input<string>;
    /**
     * The number of IPv4 prefixes to assign to a network interface. When you specify a number of IPv4 prefixes, Amazon EC2
     * selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By
     * default, these will be /28 prefixes. You can't specify a count of IPv4 prefixes if you've specified one of the
     * following: specific IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.
     */
    ipv4PrefixCount?: pulumi.Input<number>;
    /**
     * Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to automatically assign IPv4 prefixes, use the
     * Ipv4PrefixCount property and do not specify this property. Presently, only /28 prefixes are supported. You can't specify
     * IPv4 prefixes if you've specified one of the following: a count of IPv4 prefixes, specific private IPv4 addresses, or a
     * count of private IPv4 addresses.
     */
    ipv4Prefixes?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInterfaceIpv4Prefix>[]>;
    /**
     * The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from
     * the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don't specify this property.
     */
    ipv6AddressCount?: pulumi.Input<number>;
    /**
     * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network
     * interface. If you're specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don't specify this
     * property.
     */
    ipv6Addresses?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInterfaceIpv6Address>[]>;
    /**
     * The number of IPv6 prefixes to assign to a network interface. When you specify a number of IPv6 prefixes, Amazon EC2
     * selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By
     * default, these will be /80 prefixes. You can't specify a count of IPv6 prefixes if you've specified one of the
     * following: specific IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
     */
    ipv6PrefixCount?: pulumi.Input<number>;
    /**
     * Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to automatically assign IPv6 prefixes, use the
     * Ipv6PrefixCount property and do not specify this property. Presently, only /80 prefixes are supported. You can't specify
     * IPv6 prefixes if you've specified one of the following: a count of IPv6 prefixes, specific IPv6 addresses, or a count of
     * IPv6 addresses.
     */
    ipv6Prefixes?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInterfaceIpv6Prefix>[]>;
    /**
     * Network interface id.
     */
    networkInterfaceId?: pulumi.Input<string>;
    /**
     * The primary IPv6 address
     */
    primaryIpv6Address?: pulumi.Input<string>;
    /**
     * Returns the primary private IP address of the network interface.
     */
    primaryPrivateIpAddress?: pulumi.Input<string>;
    /**
     * Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you
     * want to specify multiple private IP address, use the PrivateIpAddresses property.
     */
    privateIpAddress?: pulumi.Input<string>;
    /**
     * Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting
     * the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to
     * automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this
     * property.
     */
    privateIpAddresses?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInterfacePrivateIpAddress>[]>;
    /**
     * The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary
     * IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option
     * and specify more than one private IP address using privateIpAddresses
     */
    secondaryPrivateIpAddressCount?: pulumi.Input<number>;
    /**
     * Returns the secondary private IP addresses of the network interface.
     */
    secondaryPrivateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether traffic to or from the instance is validated.
     */
    sourceDestCheck?: pulumi.Input<boolean>;
    /**
     * The ID of the subnet to associate with the network interface.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * An arbitrary set of tags (key-value pairs) for this network interface.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInterfaceTag>[]>;
    /**
     * The ID of the VPC
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2NetworkInterface resource.
 */
export interface Ec2NetworkInterfaceArgs {
    connectionTrackingSpecification?: pulumi.Input<inputs.Ec2NetworkInterfaceConnectionTrackingSpecification>;
    /**
     * A description for the network interface.
     */
    description?: pulumi.Input<string>;
    /**
     * If you have instances or ENIs that rely on the IPv6 address not changing, to avoid disrupting traffic to instances or
     * ENIs, you can enable a primary IPv6 address. Enable this option to automatically assign an IPv6 associated with the ENI
     * attached to your instance to be the primary IPv6 address. When you enable an IPv6 address to be a primary IPv6, you
     * cannot disable it. Traffic will be routed to the primary IPv6 address until the instance is terminated or the ENI is
     * detached. If you have multiple IPv6 addresses associated with an ENI and you enable a primary IPv6 address, the first
     * IPv6 address associated with the ENI becomes the primary IPv6 address.
     */
    enablePrimaryIpv6?: pulumi.Input<boolean>;
    /**
     * A list of security group IDs associated with this network interface.
     */
    groupSets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates the type of network interface.
     */
    interfaceType?: pulumi.Input<string>;
    /**
     * The number of IPv4 prefixes to assign to a network interface. When you specify a number of IPv4 prefixes, Amazon EC2
     * selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By
     * default, these will be /28 prefixes. You can't specify a count of IPv4 prefixes if you've specified one of the
     * following: specific IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.
     */
    ipv4PrefixCount?: pulumi.Input<number>;
    /**
     * Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to automatically assign IPv4 prefixes, use the
     * Ipv4PrefixCount property and do not specify this property. Presently, only /28 prefixes are supported. You can't specify
     * IPv4 prefixes if you've specified one of the following: a count of IPv4 prefixes, specific private IPv4 addresses, or a
     * count of private IPv4 addresses.
     */
    ipv4Prefixes?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInterfaceIpv4Prefix>[]>;
    /**
     * The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from
     * the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don't specify this property.
     */
    ipv6AddressCount?: pulumi.Input<number>;
    /**
     * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network
     * interface. If you're specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don't specify this
     * property.
     */
    ipv6Addresses?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInterfaceIpv6Address>[]>;
    /**
     * The number of IPv6 prefixes to assign to a network interface. When you specify a number of IPv6 prefixes, Amazon EC2
     * selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By
     * default, these will be /80 prefixes. You can't specify a count of IPv6 prefixes if you've specified one of the
     * following: specific IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
     */
    ipv6PrefixCount?: pulumi.Input<number>;
    /**
     * Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to automatically assign IPv6 prefixes, use the
     * Ipv6PrefixCount property and do not specify this property. Presently, only /80 prefixes are supported. You can't specify
     * IPv6 prefixes if you've specified one of the following: a count of IPv6 prefixes, specific IPv6 addresses, or a count of
     * IPv6 addresses.
     */
    ipv6Prefixes?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInterfaceIpv6Prefix>[]>;
    /**
     * Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you
     * want to specify multiple private IP address, use the PrivateIpAddresses property.
     */
    privateIpAddress?: pulumi.Input<string>;
    /**
     * Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting
     * the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to
     * automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this
     * property.
     */
    privateIpAddresses?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInterfacePrivateIpAddress>[]>;
    /**
     * The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary
     * IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option
     * and specify more than one private IP address using privateIpAddresses
     */
    secondaryPrivateIpAddressCount?: pulumi.Input<number>;
    /**
     * Indicates whether traffic to or from the instance is validated.
     */
    sourceDestCheck?: pulumi.Input<boolean>;
    /**
     * The ID of the subnet to associate with the network interface.
     */
    subnetId: pulumi.Input<string>;
    /**
     * An arbitrary set of tags (key-value pairs) for this network interface.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInterfaceTag>[]>;
}
