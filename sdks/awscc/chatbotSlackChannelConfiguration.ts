// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ChatbotSlackChannelConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing ChatbotSlackChannelConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ChatbotSlackChannelConfigurationState, opts?: pulumi.CustomResourceOptions): ChatbotSlackChannelConfiguration {
        return new ChatbotSlackChannelConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/chatbotSlackChannelConfiguration:ChatbotSlackChannelConfiguration';

    /**
     * Returns true if the given object is an instance of ChatbotSlackChannelConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ChatbotSlackChannelConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ChatbotSlackChannelConfiguration.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the configuration
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The name of the configuration
     */
    public readonly configurationName!: pulumi.Output<string>;
    /**
     * The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed 'AdministratorAccess' policy is
     * applied as a default if this is not set.
     */
    public readonly guardrailPolicies!: pulumi.Output<string[]>;
    /**
     * The ARN of the IAM role that defines the permissions for AWS Chatbot
     */
    public readonly iamRoleArn!: pulumi.Output<string>;
    /**
     * Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to
     * Amazon CloudWatch logs
     */
    public readonly loggingLevel!: pulumi.Output<string>;
    /**
     * The id of the Slack channel
     */
    public readonly slackChannelId!: pulumi.Output<string>;
    /**
     * The id of the Slack workspace
     */
    public readonly slackWorkspaceId!: pulumi.Output<string>;
    /**
     * ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.
     */
    public readonly snsTopicArns!: pulumi.Output<string[]>;
    /**
     * The tags to add to the configuration
     */
    public readonly tags!: pulumi.Output<outputs.ChatbotSlackChannelConfigurationTag[]>;
    /**
     * Enables use of a user role requirement in your chat configuration
     */
    public readonly userRoleRequired!: pulumi.Output<boolean>;

    /**
     * Create a ChatbotSlackChannelConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChatbotSlackChannelConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ChatbotSlackChannelConfigurationArgs | ChatbotSlackChannelConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ChatbotSlackChannelConfigurationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["configurationName"] = state ? state.configurationName : undefined;
            resourceInputs["guardrailPolicies"] = state ? state.guardrailPolicies : undefined;
            resourceInputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
            resourceInputs["loggingLevel"] = state ? state.loggingLevel : undefined;
            resourceInputs["slackChannelId"] = state ? state.slackChannelId : undefined;
            resourceInputs["slackWorkspaceId"] = state ? state.slackWorkspaceId : undefined;
            resourceInputs["snsTopicArns"] = state ? state.snsTopicArns : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userRoleRequired"] = state ? state.userRoleRequired : undefined;
        } else {
            const args = argsOrState as ChatbotSlackChannelConfigurationArgs | undefined;
            if ((!args || args.configurationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationName'");
            }
            if ((!args || args.iamRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iamRoleArn'");
            }
            if ((!args || args.slackChannelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slackChannelId'");
            }
            if ((!args || args.slackWorkspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slackWorkspaceId'");
            }
            resourceInputs["configurationName"] = args ? args.configurationName : undefined;
            resourceInputs["guardrailPolicies"] = args ? args.guardrailPolicies : undefined;
            resourceInputs["iamRoleArn"] = args ? args.iamRoleArn : undefined;
            resourceInputs["loggingLevel"] = args ? args.loggingLevel : undefined;
            resourceInputs["slackChannelId"] = args ? args.slackChannelId : undefined;
            resourceInputs["slackWorkspaceId"] = args ? args.slackWorkspaceId : undefined;
            resourceInputs["snsTopicArns"] = args ? args.snsTopicArns : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userRoleRequired"] = args ? args.userRoleRequired : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ChatbotSlackChannelConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ChatbotSlackChannelConfiguration resources.
 */
export interface ChatbotSlackChannelConfigurationState {
    /**
     * Amazon Resource Name (ARN) of the configuration
     */
    arn?: pulumi.Input<string>;
    /**
     * The name of the configuration
     */
    configurationName?: pulumi.Input<string>;
    /**
     * The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed 'AdministratorAccess' policy is
     * applied as a default if this is not set.
     */
    guardrailPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the IAM role that defines the permissions for AWS Chatbot
     */
    iamRoleArn?: pulumi.Input<string>;
    /**
     * Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to
     * Amazon CloudWatch logs
     */
    loggingLevel?: pulumi.Input<string>;
    /**
     * The id of the Slack channel
     */
    slackChannelId?: pulumi.Input<string>;
    /**
     * The id of the Slack workspace
     */
    slackWorkspaceId?: pulumi.Input<string>;
    /**
     * ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.
     */
    snsTopicArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tags to add to the configuration
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ChatbotSlackChannelConfigurationTag>[]>;
    /**
     * Enables use of a user role requirement in your chat configuration
     */
    userRoleRequired?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ChatbotSlackChannelConfiguration resource.
 */
export interface ChatbotSlackChannelConfigurationArgs {
    /**
     * The name of the configuration
     */
    configurationName: pulumi.Input<string>;
    /**
     * The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed 'AdministratorAccess' policy is
     * applied as a default if this is not set.
     */
    guardrailPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the IAM role that defines the permissions for AWS Chatbot
     */
    iamRoleArn: pulumi.Input<string>;
    /**
     * Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to
     * Amazon CloudWatch logs
     */
    loggingLevel?: pulumi.Input<string>;
    /**
     * The id of the Slack channel
     */
    slackChannelId: pulumi.Input<string>;
    /**
     * The id of the Slack workspace
     */
    slackWorkspaceId: pulumi.Input<string>;
    /**
     * ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.
     */
    snsTopicArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tags to add to the configuration
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ChatbotSlackChannelConfigurationTag>[]>;
    /**
     * Enables use of a user role requirement in your chat configuration
     */
    userRoleRequired?: pulumi.Input<boolean>;
}
