// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BedrockKnowledgeBase extends pulumi.CustomResource {
    /**
     * Get an existing BedrockKnowledgeBase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BedrockKnowledgeBaseState, opts?: pulumi.CustomResourceOptions): BedrockKnowledgeBase {
        return new BedrockKnowledgeBase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/bedrockKnowledgeBase:BedrockKnowledgeBase';

    /**
     * Returns true if the given object is an instance of BedrockKnowledgeBase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BedrockKnowledgeBase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BedrockKnowledgeBase.__pulumiType;
    }

    /**
     * The time at which the knowledge base was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description of the Resource.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * A list of reasons that the API operation on the knowledge base failed.
     */
    public /*out*/ readonly failureReasons!: pulumi.Output<string[]>;
    /**
     * The ARN of the knowledge base.
     */
    public /*out*/ readonly knowledgeBaseArn!: pulumi.Output<string>;
    /**
     * Contains details about the embeddings model used for the knowledge base.
     */
    public readonly knowledgeBaseConfiguration!: pulumi.Output<outputs.BedrockKnowledgeBaseKnowledgeBaseConfiguration>;
    /**
     * The unique identifier of the knowledge base.
     */
    public /*out*/ readonly knowledgeBaseId!: pulumi.Output<string>;
    /**
     * The name of the knowledge base.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ARN of the IAM role with permissions to invoke API operations on the knowledge base. The ARN must begin with
     * AmazonBedrockExecutionRoleForKnowledgeBase_
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * The status of a knowledge base.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The vector store service in which the knowledge base is stored.
     */
    public readonly storageConfiguration!: pulumi.Output<outputs.BedrockKnowledgeBaseStorageConfiguration>;
    /**
     * A map of tag keys and values
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * The time at which the knowledge base was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a BedrockKnowledgeBase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BedrockKnowledgeBaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BedrockKnowledgeBaseArgs | BedrockKnowledgeBaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BedrockKnowledgeBaseState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["failureReasons"] = state ? state.failureReasons : undefined;
            resourceInputs["knowledgeBaseArn"] = state ? state.knowledgeBaseArn : undefined;
            resourceInputs["knowledgeBaseConfiguration"] = state ? state.knowledgeBaseConfiguration : undefined;
            resourceInputs["knowledgeBaseId"] = state ? state.knowledgeBaseId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageConfiguration"] = state ? state.storageConfiguration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as BedrockKnowledgeBaseArgs | undefined;
            if ((!args || args.knowledgeBaseConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'knowledgeBaseConfiguration'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.storageConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageConfiguration'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["knowledgeBaseConfiguration"] = args ? args.knowledgeBaseConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["storageConfiguration"] = args ? args.storageConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["failureReasons"] = undefined /*out*/;
            resourceInputs["knowledgeBaseArn"] = undefined /*out*/;
            resourceInputs["knowledgeBaseId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BedrockKnowledgeBase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BedrockKnowledgeBase resources.
 */
export interface BedrockKnowledgeBaseState {
    /**
     * The time at which the knowledge base was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the Resource.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of reasons that the API operation on the knowledge base failed.
     */
    failureReasons?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the knowledge base.
     */
    knowledgeBaseArn?: pulumi.Input<string>;
    /**
     * Contains details about the embeddings model used for the knowledge base.
     */
    knowledgeBaseConfiguration?: pulumi.Input<inputs.BedrockKnowledgeBaseKnowledgeBaseConfiguration>;
    /**
     * The unique identifier of the knowledge base.
     */
    knowledgeBaseId?: pulumi.Input<string>;
    /**
     * The name of the knowledge base.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of the IAM role with permissions to invoke API operations on the knowledge base. The ARN must begin with
     * AmazonBedrockExecutionRoleForKnowledgeBase_
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The status of a knowledge base.
     */
    status?: pulumi.Input<string>;
    /**
     * The vector store service in which the knowledge base is stored.
     */
    storageConfiguration?: pulumi.Input<inputs.BedrockKnowledgeBaseStorageConfiguration>;
    /**
     * A map of tag keys and values
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time at which the knowledge base was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BedrockKnowledgeBase resource.
 */
export interface BedrockKnowledgeBaseArgs {
    /**
     * Description of the Resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Contains details about the embeddings model used for the knowledge base.
     */
    knowledgeBaseConfiguration: pulumi.Input<inputs.BedrockKnowledgeBaseKnowledgeBaseConfiguration>;
    /**
     * The name of the knowledge base.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of the IAM role with permissions to invoke API operations on the knowledge base. The ARN must begin with
     * AmazonBedrockExecutionRoleForKnowledgeBase_
     */
    roleArn: pulumi.Input<string>;
    /**
     * The vector store service in which the knowledge base is stored.
     */
    storageConfiguration: pulumi.Input<inputs.BedrockKnowledgeBaseStorageConfiguration>;
    /**
     * A map of tag keys and values
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
