// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SagemakerInferenceComponent extends pulumi.CustomResource {
    /**
     * Get an existing SagemakerInferenceComponent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SagemakerInferenceComponentState, opts?: pulumi.CustomResourceOptions): SagemakerInferenceComponent {
        return new SagemakerInferenceComponent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/sagemakerInferenceComponent:SagemakerInferenceComponent';

    /**
     * Returns true if the given object is an instance of SagemakerInferenceComponent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SagemakerInferenceComponent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SagemakerInferenceComponent.__pulumiType;
    }

    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the endpoint the inference component is associated with
     */
    public readonly endpointArn!: pulumi.Output<string>;
    /**
     * The name of the endpoint the inference component is associated with
     */
    public readonly endpointName!: pulumi.Output<string>;
    /**
     * The failure reason if the inference component is in a failed state
     */
    public /*out*/ readonly failureReason!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the inference component
     */
    public /*out*/ readonly inferenceComponentArn!: pulumi.Output<string>;
    /**
     * The name of the inference component
     */
    public readonly inferenceComponentName!: pulumi.Output<string>;
    public /*out*/ readonly inferenceComponentStatus!: pulumi.Output<string>;
    public /*out*/ readonly lastModifiedTime!: pulumi.Output<string>;
    /**
     * The runtime config for the inference component
     */
    public readonly runtimeConfig!: pulumi.Output<outputs.SagemakerInferenceComponentRuntimeConfig>;
    /**
     * The specification for the inference component
     */
    public readonly specification!: pulumi.Output<outputs.SagemakerInferenceComponentSpecification>;
    /**
     * An array of tags to apply to the resource
     */
    public readonly tags!: pulumi.Output<outputs.SagemakerInferenceComponentTag[]>;
    /**
     * The name of the endpoint variant the inference component is associated with
     */
    public readonly variantName!: pulumi.Output<string>;

    /**
     * Create a SagemakerInferenceComponent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SagemakerInferenceComponentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SagemakerInferenceComponentArgs | SagemakerInferenceComponentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SagemakerInferenceComponentState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["endpointArn"] = state ? state.endpointArn : undefined;
            resourceInputs["endpointName"] = state ? state.endpointName : undefined;
            resourceInputs["failureReason"] = state ? state.failureReason : undefined;
            resourceInputs["inferenceComponentArn"] = state ? state.inferenceComponentArn : undefined;
            resourceInputs["inferenceComponentName"] = state ? state.inferenceComponentName : undefined;
            resourceInputs["inferenceComponentStatus"] = state ? state.inferenceComponentStatus : undefined;
            resourceInputs["lastModifiedTime"] = state ? state.lastModifiedTime : undefined;
            resourceInputs["runtimeConfig"] = state ? state.runtimeConfig : undefined;
            resourceInputs["specification"] = state ? state.specification : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["variantName"] = state ? state.variantName : undefined;
        } else {
            const args = argsOrState as SagemakerInferenceComponentArgs | undefined;
            if ((!args || args.endpointName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointName'");
            }
            if ((!args || args.runtimeConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeConfig'");
            }
            if ((!args || args.specification === undefined) && !opts.urn) {
                throw new Error("Missing required property 'specification'");
            }
            if ((!args || args.variantName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'variantName'");
            }
            resourceInputs["endpointArn"] = args ? args.endpointArn : undefined;
            resourceInputs["endpointName"] = args ? args.endpointName : undefined;
            resourceInputs["inferenceComponentName"] = args ? args.inferenceComponentName : undefined;
            resourceInputs["runtimeConfig"] = args ? args.runtimeConfig : undefined;
            resourceInputs["specification"] = args ? args.specification : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["variantName"] = args ? args.variantName : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["failureReason"] = undefined /*out*/;
            resourceInputs["inferenceComponentArn"] = undefined /*out*/;
            resourceInputs["inferenceComponentStatus"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SagemakerInferenceComponent.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SagemakerInferenceComponent resources.
 */
export interface SagemakerInferenceComponentState {
    creationTime?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the endpoint the inference component is associated with
     */
    endpointArn?: pulumi.Input<string>;
    /**
     * The name of the endpoint the inference component is associated with
     */
    endpointName?: pulumi.Input<string>;
    /**
     * The failure reason if the inference component is in a failed state
     */
    failureReason?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the inference component
     */
    inferenceComponentArn?: pulumi.Input<string>;
    /**
     * The name of the inference component
     */
    inferenceComponentName?: pulumi.Input<string>;
    inferenceComponentStatus?: pulumi.Input<string>;
    lastModifiedTime?: pulumi.Input<string>;
    /**
     * The runtime config for the inference component
     */
    runtimeConfig?: pulumi.Input<inputs.SagemakerInferenceComponentRuntimeConfig>;
    /**
     * The specification for the inference component
     */
    specification?: pulumi.Input<inputs.SagemakerInferenceComponentSpecification>;
    /**
     * An array of tags to apply to the resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerInferenceComponentTag>[]>;
    /**
     * The name of the endpoint variant the inference component is associated with
     */
    variantName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SagemakerInferenceComponent resource.
 */
export interface SagemakerInferenceComponentArgs {
    /**
     * The Amazon Resource Name (ARN) of the endpoint the inference component is associated with
     */
    endpointArn?: pulumi.Input<string>;
    /**
     * The name of the endpoint the inference component is associated with
     */
    endpointName: pulumi.Input<string>;
    /**
     * The name of the inference component
     */
    inferenceComponentName?: pulumi.Input<string>;
    /**
     * The runtime config for the inference component
     */
    runtimeConfig: pulumi.Input<inputs.SagemakerInferenceComponentRuntimeConfig>;
    /**
     * The specification for the inference component
     */
    specification: pulumi.Input<inputs.SagemakerInferenceComponentSpecification>;
    /**
     * An array of tags to apply to the resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerInferenceComponentTag>[]>;
    /**
     * The name of the endpoint variant the inference component is associated with
     */
    variantName: pulumi.Input<string>;
}
