// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NimblestudioLaunchProfile extends pulumi.CustomResource {
    /**
     * Get an existing NimblestudioLaunchProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NimblestudioLaunchProfileState, opts?: pulumi.CustomResourceOptions): NimblestudioLaunchProfile {
        return new NimblestudioLaunchProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/nimblestudioLaunchProfile:NimblestudioLaunchProfile';

    /**
     * Returns true if the given object is an instance of NimblestudioLaunchProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NimblestudioLaunchProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NimblestudioLaunchProfile.__pulumiType;
    }

    /**
     * <p>The description.</p>
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * <p>Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the
     * specified instance types. </p>
     */
    public readonly ec2SubnetIds!: pulumi.Output<string[]>;
    public /*out*/ readonly launchProfileId!: pulumi.Output<string>;
    /**
     * <p>The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".</p>
     */
    public readonly launchProfileProtocolVersions!: pulumi.Output<string[]>;
    /**
     * <p>The name for the launch profile.</p>
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * <p>A configuration for a streaming session.</p>
     */
    public readonly streamConfiguration!: pulumi.Output<outputs.NimblestudioLaunchProfileStreamConfiguration>;
    /**
     * <p>Unique identifiers for a collection of studio components that can be used with this launch profile.</p>
     */
    public readonly studioComponentIds!: pulumi.Output<string[]>;
    /**
     * <p>The studio ID. </p>
     */
    public readonly studioId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a NimblestudioLaunchProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NimblestudioLaunchProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NimblestudioLaunchProfileArgs | NimblestudioLaunchProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NimblestudioLaunchProfileState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ec2SubnetIds"] = state ? state.ec2SubnetIds : undefined;
            resourceInputs["launchProfileId"] = state ? state.launchProfileId : undefined;
            resourceInputs["launchProfileProtocolVersions"] = state ? state.launchProfileProtocolVersions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["streamConfiguration"] = state ? state.streamConfiguration : undefined;
            resourceInputs["studioComponentIds"] = state ? state.studioComponentIds : undefined;
            resourceInputs["studioId"] = state ? state.studioId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as NimblestudioLaunchProfileArgs | undefined;
            if ((!args || args.ec2SubnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ec2SubnetIds'");
            }
            if ((!args || args.launchProfileProtocolVersions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchProfileProtocolVersions'");
            }
            if ((!args || args.streamConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamConfiguration'");
            }
            if ((!args || args.studioComponentIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'studioComponentIds'");
            }
            if ((!args || args.studioId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'studioId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ec2SubnetIds"] = args ? args.ec2SubnetIds : undefined;
            resourceInputs["launchProfileProtocolVersions"] = args ? args.launchProfileProtocolVersions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["streamConfiguration"] = args ? args.streamConfiguration : undefined;
            resourceInputs["studioComponentIds"] = args ? args.studioComponentIds : undefined;
            resourceInputs["studioId"] = args ? args.studioId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["launchProfileId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NimblestudioLaunchProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NimblestudioLaunchProfile resources.
 */
export interface NimblestudioLaunchProfileState {
    /**
     * <p>The description.</p>
     */
    description?: pulumi.Input<string>;
    /**
     * <p>Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the
     * specified instance types. </p>
     */
    ec2SubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    launchProfileId?: pulumi.Input<string>;
    /**
     * <p>The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".</p>
     */
    launchProfileProtocolVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * <p>The name for the launch profile.</p>
     */
    name?: pulumi.Input<string>;
    /**
     * <p>A configuration for a streaming session.</p>
     */
    streamConfiguration?: pulumi.Input<inputs.NimblestudioLaunchProfileStreamConfiguration>;
    /**
     * <p>Unique identifiers for a collection of studio components that can be used with this launch profile.</p>
     */
    studioComponentIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * <p>The studio ID. </p>
     */
    studioId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a NimblestudioLaunchProfile resource.
 */
export interface NimblestudioLaunchProfileArgs {
    /**
     * <p>The description.</p>
     */
    description?: pulumi.Input<string>;
    /**
     * <p>Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the
     * specified instance types. </p>
     */
    ec2SubnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * <p>The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".</p>
     */
    launchProfileProtocolVersions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * <p>The name for the launch profile.</p>
     */
    name?: pulumi.Input<string>;
    /**
     * <p>A configuration for a streaming session.</p>
     */
    streamConfiguration: pulumi.Input<inputs.NimblestudioLaunchProfileStreamConfiguration>;
    /**
     * <p>Unique identifiers for a collection of studio components that can be used with this launch profile.</p>
     */
    studioComponentIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * <p>The studio ID. </p>
     */
    studioId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
