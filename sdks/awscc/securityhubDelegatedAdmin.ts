// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SecurityhubDelegatedAdmin extends pulumi.CustomResource {
    /**
     * Get an existing SecurityhubDelegatedAdmin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityhubDelegatedAdminState, opts?: pulumi.CustomResourceOptions): SecurityhubDelegatedAdmin {
        return new SecurityhubDelegatedAdmin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/securityhubDelegatedAdmin:SecurityhubDelegatedAdmin';

    /**
     * Returns true if the given object is an instance of SecurityhubDelegatedAdmin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityhubDelegatedAdmin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityhubDelegatedAdmin.__pulumiType;
    }

    /**
     * The Amazon Web Services account identifier of the account to designate as the Security Hub administrator account
     */
    public readonly adminAccountId!: pulumi.Output<string>;
    /**
     * The identifier of the DelegatedAdmin being created and assigned as the unique identifier
     */
    public /*out*/ readonly delegatedAdminIdentifier!: pulumi.Output<string>;
    /**
     * The current status of the Security Hub administrator account. Indicates whether the account is currently enabled as a
     * Security Hub administrator
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a SecurityhubDelegatedAdmin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityhubDelegatedAdminArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityhubDelegatedAdminArgs | SecurityhubDelegatedAdminState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityhubDelegatedAdminState | undefined;
            resourceInputs["adminAccountId"] = state ? state.adminAccountId : undefined;
            resourceInputs["delegatedAdminIdentifier"] = state ? state.delegatedAdminIdentifier : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as SecurityhubDelegatedAdminArgs | undefined;
            if ((!args || args.adminAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminAccountId'");
            }
            resourceInputs["adminAccountId"] = args ? args.adminAccountId : undefined;
            resourceInputs["delegatedAdminIdentifier"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityhubDelegatedAdmin.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecurityhubDelegatedAdmin resources.
 */
export interface SecurityhubDelegatedAdminState {
    /**
     * The Amazon Web Services account identifier of the account to designate as the Security Hub administrator account
     */
    adminAccountId?: pulumi.Input<string>;
    /**
     * The identifier of the DelegatedAdmin being created and assigned as the unique identifier
     */
    delegatedAdminIdentifier?: pulumi.Input<string>;
    /**
     * The current status of the Security Hub administrator account. Indicates whether the account is currently enabled as a
     * Security Hub administrator
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityhubDelegatedAdmin resource.
 */
export interface SecurityhubDelegatedAdminArgs {
    /**
     * The Amazon Web Services account identifier of the account to designate as the Security Hub administrator account
     */
    adminAccountId: pulumi.Input<string>;
}
