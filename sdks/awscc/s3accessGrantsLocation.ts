// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class S3AccessGrantsLocation extends pulumi.CustomResource {
    /**
     * Get an existing S3AccessGrantsLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3AccessGrantsLocationState, opts?: pulumi.CustomResourceOptions): S3AccessGrantsLocation {
        return new S3AccessGrantsLocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/s3AccessGrantsLocation:S3AccessGrantsLocation';

    /**
     * Returns true if the given object is an instance of S3AccessGrantsLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3AccessGrantsLocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3AccessGrantsLocation.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the specified Access Grants location.
     */
    public /*out*/ readonly accessGrantsLocationArn!: pulumi.Output<string>;
    /**
     * The unique identifier for the specified Access Grants location.
     */
    public /*out*/ readonly accessGrantsLocationId!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the access grant location's associated IAM role.
     */
    public readonly iamRoleArn!: pulumi.Output<string>;
    /**
     * Descriptor for where the location actually points
     */
    public readonly locationScope!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.S3AccessGrantsLocationTag[]>;

    /**
     * Create a S3AccessGrantsLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: S3AccessGrantsLocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3AccessGrantsLocationArgs | S3AccessGrantsLocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3AccessGrantsLocationState | undefined;
            resourceInputs["accessGrantsLocationArn"] = state ? state.accessGrantsLocationArn : undefined;
            resourceInputs["accessGrantsLocationId"] = state ? state.accessGrantsLocationId : undefined;
            resourceInputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
            resourceInputs["locationScope"] = state ? state.locationScope : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as S3AccessGrantsLocationArgs | undefined;
            resourceInputs["iamRoleArn"] = args ? args.iamRoleArn : undefined;
            resourceInputs["locationScope"] = args ? args.locationScope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["accessGrantsLocationArn"] = undefined /*out*/;
            resourceInputs["accessGrantsLocationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(S3AccessGrantsLocation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3AccessGrantsLocation resources.
 */
export interface S3AccessGrantsLocationState {
    /**
     * The Amazon Resource Name (ARN) of the specified Access Grants location.
     */
    accessGrantsLocationArn?: pulumi.Input<string>;
    /**
     * The unique identifier for the specified Access Grants location.
     */
    accessGrantsLocationId?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the access grant location's associated IAM role.
     */
    iamRoleArn?: pulumi.Input<string>;
    /**
     * Descriptor for where the location actually points
     */
    locationScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.S3AccessGrantsLocationTag>[]>;
}

/**
 * The set of arguments for constructing a S3AccessGrantsLocation resource.
 */
export interface S3AccessGrantsLocationArgs {
    /**
     * The Amazon Resource Name (ARN) of the access grant location's associated IAM role.
     */
    iamRoleArn?: pulumi.Input<string>;
    /**
     * Descriptor for where the location actually points
     */
    locationScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.S3AccessGrantsLocationTag>[]>;
}
