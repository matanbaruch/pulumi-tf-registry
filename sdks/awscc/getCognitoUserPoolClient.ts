// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCognitoUserPoolClient(args: GetCognitoUserPoolClientArgs, opts?: pulumi.InvokeOptions): Promise<GetCognitoUserPoolClientResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getCognitoUserPoolClient:getCognitoUserPoolClient", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCognitoUserPoolClient.
 */
export interface GetCognitoUserPoolClientArgs {
    id: string;
}

/**
 * A collection of values returned by getCognitoUserPoolClient.
 */
export interface GetCognitoUserPoolClientResult {
    readonly accessTokenValidity: number;
    readonly allowedOAuthFlows: string[];
    readonly allowedOAuthFlowsUserPoolClient: boolean;
    readonly allowedOAuthScopes: string[];
    readonly analyticsConfiguration: outputs.GetCognitoUserPoolClientAnalyticsConfiguration;
    readonly authSessionValidity: number;
    readonly callbackUrLs: string[];
    readonly clientId: string;
    readonly clientName: string;
    readonly clientSecret: string;
    readonly defaultRedirectUri: string;
    readonly enablePropagateAdditionalUserContextData: boolean;
    readonly enableTokenRevocation: boolean;
    readonly explicitAuthFlows: string[];
    readonly generateSecret: boolean;
    readonly id: string;
    readonly idTokenValidity: number;
    readonly logoutUrLs: string[];
    readonly name: string;
    readonly preventUserExistenceErrors: string;
    readonly readAttributes: string[];
    readonly refreshTokenValidity: number;
    readonly supportedIdentityProviders: string[];
    readonly tokenValidityUnits: outputs.GetCognitoUserPoolClientTokenValidityUnits;
    readonly userPoolId: string;
    readonly writeAttributes: string[];
}
export function getCognitoUserPoolClientOutput(args: GetCognitoUserPoolClientOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCognitoUserPoolClientResult> {
    return pulumi.output(args).apply((a: any) => getCognitoUserPoolClient(a, opts))
}

/**
 * A collection of arguments for invoking getCognitoUserPoolClient.
 */
export interface GetCognitoUserPoolClientOutputArgs {
    id: pulumi.Input<string>;
}
