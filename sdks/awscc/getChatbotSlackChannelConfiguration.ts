// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getChatbotSlackChannelConfiguration(args: GetChatbotSlackChannelConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetChatbotSlackChannelConfigurationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getChatbotSlackChannelConfiguration:getChatbotSlackChannelConfiguration", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getChatbotSlackChannelConfiguration.
 */
export interface GetChatbotSlackChannelConfigurationArgs {
    id: string;
}

/**
 * A collection of values returned by getChatbotSlackChannelConfiguration.
 */
export interface GetChatbotSlackChannelConfigurationResult {
    readonly arn: string;
    readonly configurationName: string;
    readonly guardrailPolicies: string[];
    readonly iamRoleArn: string;
    readonly id: string;
    readonly loggingLevel: string;
    readonly slackChannelId: string;
    readonly slackWorkspaceId: string;
    readonly snsTopicArns: string[];
    readonly tags: outputs.GetChatbotSlackChannelConfigurationTag[];
    readonly userRoleRequired: boolean;
}
export function getChatbotSlackChannelConfigurationOutput(args: GetChatbotSlackChannelConfigurationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetChatbotSlackChannelConfigurationResult> {
    return pulumi.output(args).apply((a: any) => getChatbotSlackChannelConfiguration(a, opts))
}

/**
 * A collection of arguments for invoking getChatbotSlackChannelConfiguration.
 */
export interface GetChatbotSlackChannelConfigurationOutputArgs {
    id: pulumi.Input<string>;
}
