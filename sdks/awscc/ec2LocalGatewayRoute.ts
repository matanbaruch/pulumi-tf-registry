// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ec2LocalGatewayRoute extends pulumi.CustomResource {
    /**
     * Get an existing Ec2LocalGatewayRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2LocalGatewayRouteState, opts?: pulumi.CustomResourceOptions): Ec2LocalGatewayRoute {
        return new Ec2LocalGatewayRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2LocalGatewayRoute:Ec2LocalGatewayRoute';

    /**
     * Returns true if the given object is an instance of Ec2LocalGatewayRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2LocalGatewayRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2LocalGatewayRoute.__pulumiType;
    }

    /**
     * The CIDR block used for destination matches.
     */
    public readonly destinationCidrBlock!: pulumi.Output<string>;
    /**
     * The ID of the local gateway route table.
     */
    public readonly localGatewayRouteTableId!: pulumi.Output<string>;
    /**
     * The ID of the virtual interface group.
     */
    public readonly localGatewayVirtualInterfaceGroupId!: pulumi.Output<string>;
    /**
     * The ID of the network interface.
     */
    public readonly networkInterfaceId!: pulumi.Output<string>;
    /**
     * The state of the route.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The route type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Ec2LocalGatewayRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Ec2LocalGatewayRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2LocalGatewayRouteArgs | Ec2LocalGatewayRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2LocalGatewayRouteState | undefined;
            resourceInputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            resourceInputs["localGatewayRouteTableId"] = state ? state.localGatewayRouteTableId : undefined;
            resourceInputs["localGatewayVirtualInterfaceGroupId"] = state ? state.localGatewayVirtualInterfaceGroupId : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as Ec2LocalGatewayRouteArgs | undefined;
            resourceInputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            resourceInputs["localGatewayRouteTableId"] = args ? args.localGatewayRouteTableId : undefined;
            resourceInputs["localGatewayVirtualInterfaceGroupId"] = args ? args.localGatewayVirtualInterfaceGroupId : undefined;
            resourceInputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2LocalGatewayRoute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2LocalGatewayRoute resources.
 */
export interface Ec2LocalGatewayRouteState {
    /**
     * The CIDR block used for destination matches.
     */
    destinationCidrBlock?: pulumi.Input<string>;
    /**
     * The ID of the local gateway route table.
     */
    localGatewayRouteTableId?: pulumi.Input<string>;
    /**
     * The ID of the virtual interface group.
     */
    localGatewayVirtualInterfaceGroupId?: pulumi.Input<string>;
    /**
     * The ID of the network interface.
     */
    networkInterfaceId?: pulumi.Input<string>;
    /**
     * The state of the route.
     */
    state?: pulumi.Input<string>;
    /**
     * The route type.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2LocalGatewayRoute resource.
 */
export interface Ec2LocalGatewayRouteArgs {
    /**
     * The CIDR block used for destination matches.
     */
    destinationCidrBlock?: pulumi.Input<string>;
    /**
     * The ID of the local gateway route table.
     */
    localGatewayRouteTableId?: pulumi.Input<string>;
    /**
     * The ID of the virtual interface group.
     */
    localGatewayVirtualInterfaceGroupId?: pulumi.Input<string>;
    /**
     * The ID of the network interface.
     */
    networkInterfaceId?: pulumi.Input<string>;
}
