// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GuarddutyFilter extends pulumi.CustomResource {
    /**
     * Get an existing GuarddutyFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GuarddutyFilterState, opts?: pulumi.CustomResourceOptions): GuarddutyFilter {
        return new GuarddutyFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/guarddutyFilter:GuarddutyFilter';

    /**
     * Returns true if the given object is an instance of GuarddutyFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GuarddutyFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GuarddutyFilter.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly detectorId!: pulumi.Output<string>;
    public readonly findingCriteria!: pulumi.Output<outputs.GuarddutyFilterFindingCriteria>;
    public readonly name!: pulumi.Output<string>;
    public readonly rank!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<outputs.GuarddutyFilterTag[]>;

    /**
     * Create a GuarddutyFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GuarddutyFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GuarddutyFilterArgs | GuarddutyFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GuarddutyFilterState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectorId"] = state ? state.detectorId : undefined;
            resourceInputs["findingCriteria"] = state ? state.findingCriteria : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as GuarddutyFilterArgs | undefined;
            if ((!args || args.detectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'detectorId'");
            }
            if ((!args || args.findingCriteria === undefined) && !opts.urn) {
                throw new Error("Missing required property 'findingCriteria'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectorId"] = args ? args.detectorId : undefined;
            resourceInputs["findingCriteria"] = args ? args.findingCriteria : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GuarddutyFilter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GuarddutyFilter resources.
 */
export interface GuarddutyFilterState {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    detectorId?: pulumi.Input<string>;
    findingCriteria?: pulumi.Input<inputs.GuarddutyFilterFindingCriteria>;
    name?: pulumi.Input<string>;
    rank?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GuarddutyFilterTag>[]>;
}

/**
 * The set of arguments for constructing a GuarddutyFilter resource.
 */
export interface GuarddutyFilterArgs {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    detectorId: pulumi.Input<string>;
    findingCriteria: pulumi.Input<inputs.GuarddutyFilterFindingCriteria>;
    name?: pulumi.Input<string>;
    rank?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GuarddutyFilterTag>[]>;
}
