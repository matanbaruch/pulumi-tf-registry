// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EntityresolutionIdMappingWorkflow extends pulumi.CustomResource {
    /**
     * Get an existing EntityresolutionIdMappingWorkflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntityresolutionIdMappingWorkflowState, opts?: pulumi.CustomResourceOptions): EntityresolutionIdMappingWorkflow {
        return new EntityresolutionIdMappingWorkflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/entityresolutionIdMappingWorkflow:EntityresolutionIdMappingWorkflow';

    /**
     * Returns true if the given object is an instance of EntityresolutionIdMappingWorkflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EntityresolutionIdMappingWorkflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EntityresolutionIdMappingWorkflow.__pulumiType;
    }

    /**
     * The time of this IdMappingWorkflow got created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the IdMappingWorkflow
     */
    public readonly description!: pulumi.Output<string>;
    public readonly idMappingTechniques!: pulumi.Output<outputs.EntityresolutionIdMappingWorkflowIdMappingTechniques>;
    public readonly inputSourceConfigs!: pulumi.Output<outputs.EntityresolutionIdMappingWorkflowInputSourceConfig[]>;
    public readonly outputSourceConfigs!: pulumi.Output<outputs.EntityresolutionIdMappingWorkflowOutputSourceConfig[]>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.EntityresolutionIdMappingWorkflowTag[]>;
    /**
     * The time of this IdMappingWorkflow got last updated at
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The default IdMappingWorkflow arn
     */
    public /*out*/ readonly workflowArn!: pulumi.Output<string>;
    /**
     * The name of the IdMappingWorkflow
     */
    public readonly workflowName!: pulumi.Output<string>;

    /**
     * Create a EntityresolutionIdMappingWorkflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EntityresolutionIdMappingWorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntityresolutionIdMappingWorkflowArgs | EntityresolutionIdMappingWorkflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntityresolutionIdMappingWorkflowState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["idMappingTechniques"] = state ? state.idMappingTechniques : undefined;
            resourceInputs["inputSourceConfigs"] = state ? state.inputSourceConfigs : undefined;
            resourceInputs["outputSourceConfigs"] = state ? state.outputSourceConfigs : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["workflowArn"] = state ? state.workflowArn : undefined;
            resourceInputs["workflowName"] = state ? state.workflowName : undefined;
        } else {
            const args = argsOrState as EntityresolutionIdMappingWorkflowArgs | undefined;
            if ((!args || args.idMappingTechniques === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idMappingTechniques'");
            }
            if ((!args || args.inputSourceConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputSourceConfigs'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.workflowName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workflowName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["idMappingTechniques"] = args ? args.idMappingTechniques : undefined;
            resourceInputs["inputSourceConfigs"] = args ? args.inputSourceConfigs : undefined;
            resourceInputs["outputSourceConfigs"] = args ? args.outputSourceConfigs : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workflowName"] = args ? args.workflowName : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["workflowArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EntityresolutionIdMappingWorkflow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EntityresolutionIdMappingWorkflow resources.
 */
export interface EntityresolutionIdMappingWorkflowState {
    /**
     * The time of this IdMappingWorkflow got created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the IdMappingWorkflow
     */
    description?: pulumi.Input<string>;
    idMappingTechniques?: pulumi.Input<inputs.EntityresolutionIdMappingWorkflowIdMappingTechniques>;
    inputSourceConfigs?: pulumi.Input<pulumi.Input<inputs.EntityresolutionIdMappingWorkflowInputSourceConfig>[]>;
    outputSourceConfigs?: pulumi.Input<pulumi.Input<inputs.EntityresolutionIdMappingWorkflowOutputSourceConfig>[]>;
    roleArn?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.EntityresolutionIdMappingWorkflowTag>[]>;
    /**
     * The time of this IdMappingWorkflow got last updated at
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The default IdMappingWorkflow arn
     */
    workflowArn?: pulumi.Input<string>;
    /**
     * The name of the IdMappingWorkflow
     */
    workflowName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EntityresolutionIdMappingWorkflow resource.
 */
export interface EntityresolutionIdMappingWorkflowArgs {
    /**
     * The description of the IdMappingWorkflow
     */
    description?: pulumi.Input<string>;
    idMappingTechniques: pulumi.Input<inputs.EntityresolutionIdMappingWorkflowIdMappingTechniques>;
    inputSourceConfigs: pulumi.Input<pulumi.Input<inputs.EntityresolutionIdMappingWorkflowInputSourceConfig>[]>;
    outputSourceConfigs?: pulumi.Input<pulumi.Input<inputs.EntityresolutionIdMappingWorkflowOutputSourceConfig>[]>;
    roleArn: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.EntityresolutionIdMappingWorkflowTag>[]>;
    /**
     * The name of the IdMappingWorkflow
     */
    workflowName: pulumi.Input<string>;
}
