// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AthenaCapacityReservation extends pulumi.CustomResource {
    /**
     * Get an existing AthenaCapacityReservation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AthenaCapacityReservationState, opts?: pulumi.CustomResourceOptions): AthenaCapacityReservation {
        return new AthenaCapacityReservation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/athenaCapacityReservation:AthenaCapacityReservation';

    /**
     * Returns true if the given object is an instance of AthenaCapacityReservation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AthenaCapacityReservation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AthenaCapacityReservation.__pulumiType;
    }

    /**
     * The number of DPUs Athena has provisioned and allocated for the reservation
     */
    public /*out*/ readonly allocatedDpus!: pulumi.Output<number>;
    /**
     * The Amazon Resource Name (ARN) of the specified capacity reservation
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Assignment configuration to assign workgroups to a reservation
     */
    public readonly capacityAssignmentConfiguration!: pulumi.Output<outputs.AthenaCapacityReservationCapacityAssignmentConfiguration>;
    /**
     * The date and time the reservation was created.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The timestamp when the last successful allocated was made
     */
    public /*out*/ readonly lastSuccessfulAllocationTime!: pulumi.Output<string>;
    /**
     * The reservation name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The status of the reservation.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.AthenaCapacityReservationTag[]>;
    /**
     * The number of DPUs to request to be allocated to the reservation.
     */
    public readonly targetDpus!: pulumi.Output<number>;

    /**
     * Create a AthenaCapacityReservation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AthenaCapacityReservationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AthenaCapacityReservationArgs | AthenaCapacityReservationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AthenaCapacityReservationState | undefined;
            resourceInputs["allocatedDpus"] = state ? state.allocatedDpus : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["capacityAssignmentConfiguration"] = state ? state.capacityAssignmentConfiguration : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["lastSuccessfulAllocationTime"] = state ? state.lastSuccessfulAllocationTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetDpus"] = state ? state.targetDpus : undefined;
        } else {
            const args = argsOrState as AthenaCapacityReservationArgs | undefined;
            if ((!args || args.targetDpus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetDpus'");
            }
            resourceInputs["capacityAssignmentConfiguration"] = args ? args.capacityAssignmentConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetDpus"] = args ? args.targetDpus : undefined;
            resourceInputs["allocatedDpus"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["lastSuccessfulAllocationTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AthenaCapacityReservation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AthenaCapacityReservation resources.
 */
export interface AthenaCapacityReservationState {
    /**
     * The number of DPUs Athena has provisioned and allocated for the reservation
     */
    allocatedDpus?: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) of the specified capacity reservation
     */
    arn?: pulumi.Input<string>;
    /**
     * Assignment configuration to assign workgroups to a reservation
     */
    capacityAssignmentConfiguration?: pulumi.Input<inputs.AthenaCapacityReservationCapacityAssignmentConfiguration>;
    /**
     * The date and time the reservation was created.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The timestamp when the last successful allocated was made
     */
    lastSuccessfulAllocationTime?: pulumi.Input<string>;
    /**
     * The reservation name.
     */
    name?: pulumi.Input<string>;
    /**
     * The status of the reservation.
     */
    status?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AthenaCapacityReservationTag>[]>;
    /**
     * The number of DPUs to request to be allocated to the reservation.
     */
    targetDpus?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AthenaCapacityReservation resource.
 */
export interface AthenaCapacityReservationArgs {
    /**
     * Assignment configuration to assign workgroups to a reservation
     */
    capacityAssignmentConfiguration?: pulumi.Input<inputs.AthenaCapacityReservationCapacityAssignmentConfiguration>;
    /**
     * The reservation name.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AthenaCapacityReservationTag>[]>;
    /**
     * The number of DPUs to request to be allocated to the reservation.
     */
    targetDpus: pulumi.Input<number>;
}
