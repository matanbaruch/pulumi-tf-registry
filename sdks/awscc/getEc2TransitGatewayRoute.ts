// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getEc2TransitGatewayRoute(args: GetEc2TransitGatewayRouteArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2TransitGatewayRouteResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEc2TransitGatewayRoute:getEc2TransitGatewayRoute", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2TransitGatewayRoute.
 */
export interface GetEc2TransitGatewayRouteArgs {
    id: string;
}

/**
 * A collection of values returned by getEc2TransitGatewayRoute.
 */
export interface GetEc2TransitGatewayRouteResult {
    readonly blackhole: boolean;
    readonly destinationCidrBlock: string;
    readonly id: string;
    readonly transitGatewayAttachmentId: string;
    readonly transitGatewayRouteTableId: string;
}
export function getEc2TransitGatewayRouteOutput(args: GetEc2TransitGatewayRouteOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2TransitGatewayRouteResult> {
    return pulumi.output(args).apply((a: any) => getEc2TransitGatewayRoute(a, opts))
}

/**
 * A collection of arguments for invoking getEc2TransitGatewayRoute.
 */
export interface GetEc2TransitGatewayRouteOutputArgs {
    id: pulumi.Input<string>;
}
