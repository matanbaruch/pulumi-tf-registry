// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ImagebuilderImagePipeline extends pulumi.CustomResource {
    /**
     * Get an existing ImagebuilderImagePipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImagebuilderImagePipelineState, opts?: pulumi.CustomResourceOptions): ImagebuilderImagePipeline {
        return new ImagebuilderImagePipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/imagebuilderImagePipeline:ImagebuilderImagePipeline';

    /**
     * Returns true if the given object is an instance of ImagebuilderImagePipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImagebuilderImagePipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImagebuilderImagePipeline.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the image pipeline.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.
     */
    public readonly containerRecipeArn!: pulumi.Output<string>;
    /**
     * The description of the image pipeline.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the distribution configuration associated with this image pipeline.
     */
    public readonly distributionConfigurationArn!: pulumi.Output<string>;
    /**
     * Collects additional information about the image being created, including the operating system (OS) version and package
     * list.
     */
    public readonly enhancedImageMetadataEnabled!: pulumi.Output<boolean>;
    /**
     * The execution role name/ARN for the image build, if provided
     */
    public readonly executionRole!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.
     */
    public readonly imageRecipeArn!: pulumi.Output<string>;
    /**
     * Contains settings for vulnerability scans.
     */
    public readonly imageScanningConfiguration!: pulumi.Output<outputs.ImagebuilderImagePipelineImageScanningConfiguration>;
    /**
     * The image tests configuration of the image pipeline.
     */
    public readonly imageTestsConfiguration!: pulumi.Output<outputs.ImagebuilderImagePipelineImageTestsConfiguration>;
    /**
     * The Amazon Resource Name (ARN) of the infrastructure configuration associated with this image pipeline.
     */
    public readonly infrastructureConfigurationArn!: pulumi.Output<string>;
    /**
     * The name of the image pipeline.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The schedule of the image pipeline.
     */
    public readonly schedule!: pulumi.Output<outputs.ImagebuilderImagePipelineSchedule>;
    /**
     * The status of the image pipeline.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The tags of this image pipeline.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * Workflows to define the image build process
     */
    public readonly workflows!: pulumi.Output<outputs.ImagebuilderImagePipelineWorkflow[]>;

    /**
     * Create a ImagebuilderImagePipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ImagebuilderImagePipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImagebuilderImagePipelineArgs | ImagebuilderImagePipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImagebuilderImagePipelineState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["containerRecipeArn"] = state ? state.containerRecipeArn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["distributionConfigurationArn"] = state ? state.distributionConfigurationArn : undefined;
            resourceInputs["enhancedImageMetadataEnabled"] = state ? state.enhancedImageMetadataEnabled : undefined;
            resourceInputs["executionRole"] = state ? state.executionRole : undefined;
            resourceInputs["imageRecipeArn"] = state ? state.imageRecipeArn : undefined;
            resourceInputs["imageScanningConfiguration"] = state ? state.imageScanningConfiguration : undefined;
            resourceInputs["imageTestsConfiguration"] = state ? state.imageTestsConfiguration : undefined;
            resourceInputs["infrastructureConfigurationArn"] = state ? state.infrastructureConfigurationArn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workflows"] = state ? state.workflows : undefined;
        } else {
            const args = argsOrState as ImagebuilderImagePipelineArgs | undefined;
            resourceInputs["containerRecipeArn"] = args ? args.containerRecipeArn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["distributionConfigurationArn"] = args ? args.distributionConfigurationArn : undefined;
            resourceInputs["enhancedImageMetadataEnabled"] = args ? args.enhancedImageMetadataEnabled : undefined;
            resourceInputs["executionRole"] = args ? args.executionRole : undefined;
            resourceInputs["imageRecipeArn"] = args ? args.imageRecipeArn : undefined;
            resourceInputs["imageScanningConfiguration"] = args ? args.imageScanningConfiguration : undefined;
            resourceInputs["imageTestsConfiguration"] = args ? args.imageTestsConfiguration : undefined;
            resourceInputs["infrastructureConfigurationArn"] = args ? args.infrastructureConfigurationArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workflows"] = args ? args.workflows : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImagebuilderImagePipeline.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ImagebuilderImagePipeline resources.
 */
export interface ImagebuilderImagePipelineState {
    /**
     * The Amazon Resource Name (ARN) of the image pipeline.
     */
    arn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.
     */
    containerRecipeArn?: pulumi.Input<string>;
    /**
     * The description of the image pipeline.
     */
    description?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the distribution configuration associated with this image pipeline.
     */
    distributionConfigurationArn?: pulumi.Input<string>;
    /**
     * Collects additional information about the image being created, including the operating system (OS) version and package
     * list.
     */
    enhancedImageMetadataEnabled?: pulumi.Input<boolean>;
    /**
     * The execution role name/ARN for the image build, if provided
     */
    executionRole?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.
     */
    imageRecipeArn?: pulumi.Input<string>;
    /**
     * Contains settings for vulnerability scans.
     */
    imageScanningConfiguration?: pulumi.Input<inputs.ImagebuilderImagePipelineImageScanningConfiguration>;
    /**
     * The image tests configuration of the image pipeline.
     */
    imageTestsConfiguration?: pulumi.Input<inputs.ImagebuilderImagePipelineImageTestsConfiguration>;
    /**
     * The Amazon Resource Name (ARN) of the infrastructure configuration associated with this image pipeline.
     */
    infrastructureConfigurationArn?: pulumi.Input<string>;
    /**
     * The name of the image pipeline.
     */
    name?: pulumi.Input<string>;
    /**
     * The schedule of the image pipeline.
     */
    schedule?: pulumi.Input<inputs.ImagebuilderImagePipelineSchedule>;
    /**
     * The status of the image pipeline.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags of this image pipeline.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Workflows to define the image build process
     */
    workflows?: pulumi.Input<pulumi.Input<inputs.ImagebuilderImagePipelineWorkflow>[]>;
}

/**
 * The set of arguments for constructing a ImagebuilderImagePipeline resource.
 */
export interface ImagebuilderImagePipelineArgs {
    /**
     * The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.
     */
    containerRecipeArn?: pulumi.Input<string>;
    /**
     * The description of the image pipeline.
     */
    description?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the distribution configuration associated with this image pipeline.
     */
    distributionConfigurationArn?: pulumi.Input<string>;
    /**
     * Collects additional information about the image being created, including the operating system (OS) version and package
     * list.
     */
    enhancedImageMetadataEnabled?: pulumi.Input<boolean>;
    /**
     * The execution role name/ARN for the image build, if provided
     */
    executionRole?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.
     */
    imageRecipeArn?: pulumi.Input<string>;
    /**
     * Contains settings for vulnerability scans.
     */
    imageScanningConfiguration?: pulumi.Input<inputs.ImagebuilderImagePipelineImageScanningConfiguration>;
    /**
     * The image tests configuration of the image pipeline.
     */
    imageTestsConfiguration?: pulumi.Input<inputs.ImagebuilderImagePipelineImageTestsConfiguration>;
    /**
     * The Amazon Resource Name (ARN) of the infrastructure configuration associated with this image pipeline.
     */
    infrastructureConfigurationArn?: pulumi.Input<string>;
    /**
     * The name of the image pipeline.
     */
    name?: pulumi.Input<string>;
    /**
     * The schedule of the image pipeline.
     */
    schedule?: pulumi.Input<inputs.ImagebuilderImagePipelineSchedule>;
    /**
     * The status of the image pipeline.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags of this image pipeline.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Workflows to define the image build process
     */
    workflows?: pulumi.Input<pulumi.Input<inputs.ImagebuilderImagePipelineWorkflow>[]>;
}
