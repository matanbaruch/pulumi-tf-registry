// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EntityresolutionIdNamespace extends pulumi.CustomResource {
    /**
     * Get an existing EntityresolutionIdNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntityresolutionIdNamespaceState, opts?: pulumi.CustomResourceOptions): EntityresolutionIdNamespace {
        return new EntityresolutionIdNamespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/entityresolutionIdNamespace:EntityresolutionIdNamespace';

    /**
     * Returns true if the given object is an instance of EntityresolutionIdNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EntityresolutionIdNamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EntityresolutionIdNamespace.__pulumiType;
    }

    /**
     * The date and time when the IdNamespace was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly idMappingWorkflowProperties!: pulumi.Output<outputs.EntityresolutionIdNamespaceIdMappingWorkflowProperty[]>;
    /**
     * The arn associated with the IdNamespace
     */
    public /*out*/ readonly idNamespaceArn!: pulumi.Output<string>;
    public readonly idNamespaceName!: pulumi.Output<string>;
    public readonly inputSourceConfigs!: pulumi.Output<outputs.EntityresolutionIdNamespaceInputSourceConfig[]>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.EntityresolutionIdNamespaceTag[]>;
    public readonly type!: pulumi.Output<string>;
    /**
     * The date and time when the IdNamespace was updated
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a EntityresolutionIdNamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EntityresolutionIdNamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntityresolutionIdNamespaceArgs | EntityresolutionIdNamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntityresolutionIdNamespaceState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["idMappingWorkflowProperties"] = state ? state.idMappingWorkflowProperties : undefined;
            resourceInputs["idNamespaceArn"] = state ? state.idNamespaceArn : undefined;
            resourceInputs["idNamespaceName"] = state ? state.idNamespaceName : undefined;
            resourceInputs["inputSourceConfigs"] = state ? state.inputSourceConfigs : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as EntityresolutionIdNamespaceArgs | undefined;
            if ((!args || args.idNamespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idNamespaceName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["idMappingWorkflowProperties"] = args ? args.idMappingWorkflowProperties : undefined;
            resourceInputs["idNamespaceName"] = args ? args.idNamespaceName : undefined;
            resourceInputs["inputSourceConfigs"] = args ? args.inputSourceConfigs : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["idNamespaceArn"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EntityresolutionIdNamespace.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EntityresolutionIdNamespace resources.
 */
export interface EntityresolutionIdNamespaceState {
    /**
     * The date and time when the IdNamespace was created
     */
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    idMappingWorkflowProperties?: pulumi.Input<pulumi.Input<inputs.EntityresolutionIdNamespaceIdMappingWorkflowProperty>[]>;
    /**
     * The arn associated with the IdNamespace
     */
    idNamespaceArn?: pulumi.Input<string>;
    idNamespaceName?: pulumi.Input<string>;
    inputSourceConfigs?: pulumi.Input<pulumi.Input<inputs.EntityresolutionIdNamespaceInputSourceConfig>[]>;
    roleArn?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.EntityresolutionIdNamespaceTag>[]>;
    type?: pulumi.Input<string>;
    /**
     * The date and time when the IdNamespace was updated
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EntityresolutionIdNamespace resource.
 */
export interface EntityresolutionIdNamespaceArgs {
    description?: pulumi.Input<string>;
    idMappingWorkflowProperties?: pulumi.Input<pulumi.Input<inputs.EntityresolutionIdNamespaceIdMappingWorkflowProperty>[]>;
    idNamespaceName: pulumi.Input<string>;
    inputSourceConfigs?: pulumi.Input<pulumi.Input<inputs.EntityresolutionIdNamespaceInputSourceConfig>[]>;
    roleArn?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.EntityresolutionIdNamespaceTag>[]>;
    type: pulumi.Input<string>;
}
