// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApigatewayDomainName extends pulumi.CustomResource {
    /**
     * Get an existing ApigatewayDomainName resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApigatewayDomainNameState, opts?: pulumi.CustomResourceOptions): ApigatewayDomainName {
        return new ApigatewayDomainName(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/apigatewayDomainName:ApigatewayDomainName';

    /**
     * Returns true if the given object is an instance of ApigatewayDomainName.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApigatewayDomainName {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApigatewayDomainName.__pulumiType;
    }

    public readonly certificateArn!: pulumi.Output<string>;
    public /*out*/ readonly distributionDomainName!: pulumi.Output<string>;
    public /*out*/ readonly distributionHostedZoneId!: pulumi.Output<string>;
    public readonly domainName!: pulumi.Output<string>;
    public readonly endpointConfiguration!: pulumi.Output<outputs.ApigatewayDomainNameEndpointConfiguration>;
    public readonly mutualTlsAuthentication!: pulumi.Output<outputs.ApigatewayDomainNameMutualTlsAuthentication>;
    public readonly ownershipVerificationCertificateArn!: pulumi.Output<string>;
    public readonly regionalCertificateArn!: pulumi.Output<string>;
    public /*out*/ readonly regionalDomainName!: pulumi.Output<string>;
    public /*out*/ readonly regionalHostedZoneId!: pulumi.Output<string>;
    public readonly securityPolicy!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.ApigatewayDomainNameTag[]>;

    /**
     * Create a ApigatewayDomainName resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApigatewayDomainNameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApigatewayDomainNameArgs | ApigatewayDomainNameState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApigatewayDomainNameState | undefined;
            resourceInputs["certificateArn"] = state ? state.certificateArn : undefined;
            resourceInputs["distributionDomainName"] = state ? state.distributionDomainName : undefined;
            resourceInputs["distributionHostedZoneId"] = state ? state.distributionHostedZoneId : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["endpointConfiguration"] = state ? state.endpointConfiguration : undefined;
            resourceInputs["mutualTlsAuthentication"] = state ? state.mutualTlsAuthentication : undefined;
            resourceInputs["ownershipVerificationCertificateArn"] = state ? state.ownershipVerificationCertificateArn : undefined;
            resourceInputs["regionalCertificateArn"] = state ? state.regionalCertificateArn : undefined;
            resourceInputs["regionalDomainName"] = state ? state.regionalDomainName : undefined;
            resourceInputs["regionalHostedZoneId"] = state ? state.regionalHostedZoneId : undefined;
            resourceInputs["securityPolicy"] = state ? state.securityPolicy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ApigatewayDomainNameArgs | undefined;
            resourceInputs["certificateArn"] = args ? args.certificateArn : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["endpointConfiguration"] = args ? args.endpointConfiguration : undefined;
            resourceInputs["mutualTlsAuthentication"] = args ? args.mutualTlsAuthentication : undefined;
            resourceInputs["ownershipVerificationCertificateArn"] = args ? args.ownershipVerificationCertificateArn : undefined;
            resourceInputs["regionalCertificateArn"] = args ? args.regionalCertificateArn : undefined;
            resourceInputs["securityPolicy"] = args ? args.securityPolicy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["distributionDomainName"] = undefined /*out*/;
            resourceInputs["distributionHostedZoneId"] = undefined /*out*/;
            resourceInputs["regionalDomainName"] = undefined /*out*/;
            resourceInputs["regionalHostedZoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApigatewayDomainName.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApigatewayDomainName resources.
 */
export interface ApigatewayDomainNameState {
    certificateArn?: pulumi.Input<string>;
    distributionDomainName?: pulumi.Input<string>;
    distributionHostedZoneId?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    endpointConfiguration?: pulumi.Input<inputs.ApigatewayDomainNameEndpointConfiguration>;
    mutualTlsAuthentication?: pulumi.Input<inputs.ApigatewayDomainNameMutualTlsAuthentication>;
    ownershipVerificationCertificateArn?: pulumi.Input<string>;
    regionalCertificateArn?: pulumi.Input<string>;
    regionalDomainName?: pulumi.Input<string>;
    regionalHostedZoneId?: pulumi.Input<string>;
    securityPolicy?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ApigatewayDomainNameTag>[]>;
}

/**
 * The set of arguments for constructing a ApigatewayDomainName resource.
 */
export interface ApigatewayDomainNameArgs {
    certificateArn?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    endpointConfiguration?: pulumi.Input<inputs.ApigatewayDomainNameEndpointConfiguration>;
    mutualTlsAuthentication?: pulumi.Input<inputs.ApigatewayDomainNameMutualTlsAuthentication>;
    ownershipVerificationCertificateArn?: pulumi.Input<string>;
    regionalCertificateArn?: pulumi.Input<string>;
    securityPolicy?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ApigatewayDomainNameTag>[]>;
}
