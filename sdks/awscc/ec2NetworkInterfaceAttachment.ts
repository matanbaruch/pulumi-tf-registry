// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2NetworkInterfaceAttachment extends pulumi.CustomResource {
    /**
     * Get an existing Ec2NetworkInterfaceAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2NetworkInterfaceAttachmentState, opts?: pulumi.CustomResourceOptions): Ec2NetworkInterfaceAttachment {
        return new Ec2NetworkInterfaceAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2NetworkInterfaceAttachment:Ec2NetworkInterfaceAttachment';

    /**
     * Returns true if the given object is an instance of Ec2NetworkInterfaceAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2NetworkInterfaceAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2NetworkInterfaceAttachment.__pulumiType;
    }

    public /*out*/ readonly attachmentId!: pulumi.Output<string>;
    /**
     * Whether to delete the network interface when the instance terminates. By default, this value is set to ``true``.
     */
    public readonly deleteOnTermination!: pulumi.Output<boolean>;
    /**
     * The network interface's position in the attachment order. For example, the first attached network interface has a
     * ``DeviceIndex`` of 0.
     */
    public readonly deviceIndex!: pulumi.Output<string>;
    /**
     * Configures ENA Express for the network interface that this action attaches to the instance.
     */
    public readonly enaSrdSpecification!: pulumi.Output<outputs.Ec2NetworkInterfaceAttachmentEnaSrdSpecification>;
    /**
     * The ID of the instance to which you will attach the ENI.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The ID of the ENI that you want to attach.
     */
    public readonly networkInterfaceId!: pulumi.Output<string>;

    /**
     * Create a Ec2NetworkInterfaceAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2NetworkInterfaceAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2NetworkInterfaceAttachmentArgs | Ec2NetworkInterfaceAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2NetworkInterfaceAttachmentState | undefined;
            resourceInputs["attachmentId"] = state ? state.attachmentId : undefined;
            resourceInputs["deleteOnTermination"] = state ? state.deleteOnTermination : undefined;
            resourceInputs["deviceIndex"] = state ? state.deviceIndex : undefined;
            resourceInputs["enaSrdSpecification"] = state ? state.enaSrdSpecification : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
        } else {
            const args = argsOrState as Ec2NetworkInterfaceAttachmentArgs | undefined;
            if ((!args || args.deviceIndex === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceIndex'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.networkInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceId'");
            }
            resourceInputs["deleteOnTermination"] = args ? args.deleteOnTermination : undefined;
            resourceInputs["deviceIndex"] = args ? args.deviceIndex : undefined;
            resourceInputs["enaSrdSpecification"] = args ? args.enaSrdSpecification : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            resourceInputs["attachmentId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2NetworkInterfaceAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2NetworkInterfaceAttachment resources.
 */
export interface Ec2NetworkInterfaceAttachmentState {
    attachmentId?: pulumi.Input<string>;
    /**
     * Whether to delete the network interface when the instance terminates. By default, this value is set to ``true``.
     */
    deleteOnTermination?: pulumi.Input<boolean>;
    /**
     * The network interface's position in the attachment order. For example, the first attached network interface has a
     * ``DeviceIndex`` of 0.
     */
    deviceIndex?: pulumi.Input<string>;
    /**
     * Configures ENA Express for the network interface that this action attaches to the instance.
     */
    enaSrdSpecification?: pulumi.Input<inputs.Ec2NetworkInterfaceAttachmentEnaSrdSpecification>;
    /**
     * The ID of the instance to which you will attach the ENI.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The ID of the ENI that you want to attach.
     */
    networkInterfaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2NetworkInterfaceAttachment resource.
 */
export interface Ec2NetworkInterfaceAttachmentArgs {
    /**
     * Whether to delete the network interface when the instance terminates. By default, this value is set to ``true``.
     */
    deleteOnTermination?: pulumi.Input<boolean>;
    /**
     * The network interface's position in the attachment order. For example, the first attached network interface has a
     * ``DeviceIndex`` of 0.
     */
    deviceIndex: pulumi.Input<string>;
    /**
     * Configures ENA Express for the network interface that this action attaches to the instance.
     */
    enaSrdSpecification?: pulumi.Input<inputs.Ec2NetworkInterfaceAttachmentEnaSrdSpecification>;
    /**
     * The ID of the instance to which you will attach the ENI.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The ID of the ENI that you want to attach.
     */
    networkInterfaceId: pulumi.Input<string>;
}
