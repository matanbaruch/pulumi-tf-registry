// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedshiftserverlessNamespace extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftserverlessNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftserverlessNamespaceState, opts?: pulumi.CustomResourceOptions): RedshiftserverlessNamespace {
        return new RedshiftserverlessNamespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/redshiftserverlessNamespace:RedshiftserverlessNamespace';

    /**
     * Returns true if the given object is an instance of RedshiftserverlessNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftserverlessNamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftserverlessNamespace.__pulumiType;
    }

    /**
     * The ID of the AWS Key Management Service (KMS) key used to encrypt and store the namespace's admin credentials secret.
     * You can only use this parameter if manageAdminPassword is true.
     */
    public readonly adminPasswordSecretKmsKeyId!: pulumi.Output<string>;
    /**
     * The password associated with the admin user for the namespace that is being created. Password must be at least 8
     * characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase
     * letter and one decimal digit. You can't use adminUserPassword if manageAdminPassword is true.
     */
    public readonly adminUserPassword!: pulumi.Output<string>;
    /**
     * The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and
     * underscores are allowed. It should start with an alphabet.
     */
    public readonly adminUsername!: pulumi.Output<string>;
    /**
     * The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are
     * allowed. It should start with an alphabet.
     */
    public readonly dbName!: pulumi.Output<string>;
    /**
     * The default IAM role ARN for the namespace that is being created.
     */
    public readonly defaultIamRoleArn!: pulumi.Output<string>;
    /**
     * The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting
     * namespace
     */
    public readonly finalSnapshotName!: pulumi.Output<string>;
    /**
     * The number of days to retain automated snapshot in the destination region after they are copied from the source region.
     * If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1
     * and 3,653.
     */
    public readonly finalSnapshotRetentionPeriod!: pulumi.Output<number>;
    /**
     * A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services.
     * You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
     */
    public readonly iamRoles!: pulumi.Output<string[]>;
    /**
     * The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
     */
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * The collection of log types to be exported provided by the customer. Should only be one of the three supported log
     * types: userlog, useractivitylog and connectionlog
     */
    public readonly logExports!: pulumi.Output<string[]>;
    /**
     * If true, Amazon Redshift uses AWS Secrets Manager to manage the namespace's admin credentials. You can't use
     * adminUserPassword if manageAdminPassword is true. If manageAdminPassword is false or not set, Amazon Redshift uses
     * adminUserPassword for the admin user account's password.
     */
    public readonly manageAdminPassword!: pulumi.Output<boolean>;
    /**
     * Definition of Namespace resource.
     */
    public /*out*/ readonly namespace!: pulumi.Output<outputs.RedshiftserverlessNamespaceNamespace>;
    /**
     * A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace
     * operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be
     * unique for all namespaces within an AWS account.
     */
    public readonly namespaceName!: pulumi.Output<string>;
    /**
     * The resource policy document that will be attached to the namespace.
     */
    public readonly namespaceResourcePolicy!: pulumi.Output<string>;
    /**
     * The ARN for the Redshift application that integrates with IAM Identity Center.
     */
    public readonly redshiftIdcApplicationArn!: pulumi.Output<string>;
    /**
     * The snapshot copy configurations for the namespace.
     */
    public readonly snapshotCopyConfigurations!: pulumi.Output<outputs.RedshiftserverlessNamespaceSnapshotCopyConfiguration[]>;
    /**
     * The list of tags for the namespace.
     */
    public readonly tags!: pulumi.Output<outputs.RedshiftserverlessNamespaceTag[]>;

    /**
     * Create a RedshiftserverlessNamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftserverlessNamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftserverlessNamespaceArgs | RedshiftserverlessNamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftserverlessNamespaceState | undefined;
            resourceInputs["adminPasswordSecretKmsKeyId"] = state ? state.adminPasswordSecretKmsKeyId : undefined;
            resourceInputs["adminUserPassword"] = state ? state.adminUserPassword : undefined;
            resourceInputs["adminUsername"] = state ? state.adminUsername : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["defaultIamRoleArn"] = state ? state.defaultIamRoleArn : undefined;
            resourceInputs["finalSnapshotName"] = state ? state.finalSnapshotName : undefined;
            resourceInputs["finalSnapshotRetentionPeriod"] = state ? state.finalSnapshotRetentionPeriod : undefined;
            resourceInputs["iamRoles"] = state ? state.iamRoles : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["logExports"] = state ? state.logExports : undefined;
            resourceInputs["manageAdminPassword"] = state ? state.manageAdminPassword : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["namespaceResourcePolicy"] = state ? state.namespaceResourcePolicy : undefined;
            resourceInputs["redshiftIdcApplicationArn"] = state ? state.redshiftIdcApplicationArn : undefined;
            resourceInputs["snapshotCopyConfigurations"] = state ? state.snapshotCopyConfigurations : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as RedshiftserverlessNamespaceArgs | undefined;
            if ((!args || args.namespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            resourceInputs["adminPasswordSecretKmsKeyId"] = args ? args.adminPasswordSecretKmsKeyId : undefined;
            resourceInputs["adminUserPassword"] = args ? args.adminUserPassword : undefined;
            resourceInputs["adminUsername"] = args ? args.adminUsername : undefined;
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["defaultIamRoleArn"] = args ? args.defaultIamRoleArn : undefined;
            resourceInputs["finalSnapshotName"] = args ? args.finalSnapshotName : undefined;
            resourceInputs["finalSnapshotRetentionPeriod"] = args ? args.finalSnapshotRetentionPeriod : undefined;
            resourceInputs["iamRoles"] = args ? args.iamRoles : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["logExports"] = args ? args.logExports : undefined;
            resourceInputs["manageAdminPassword"] = args ? args.manageAdminPassword : undefined;
            resourceInputs["namespaceName"] = args ? args.namespaceName : undefined;
            resourceInputs["namespaceResourcePolicy"] = args ? args.namespaceResourcePolicy : undefined;
            resourceInputs["redshiftIdcApplicationArn"] = args ? args.redshiftIdcApplicationArn : undefined;
            resourceInputs["snapshotCopyConfigurations"] = args ? args.snapshotCopyConfigurations : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["namespace"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedshiftserverlessNamespace.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftserverlessNamespace resources.
 */
export interface RedshiftserverlessNamespaceState {
    /**
     * The ID of the AWS Key Management Service (KMS) key used to encrypt and store the namespace's admin credentials secret.
     * You can only use this parameter if manageAdminPassword is true.
     */
    adminPasswordSecretKmsKeyId?: pulumi.Input<string>;
    /**
     * The password associated with the admin user for the namespace that is being created. Password must be at least 8
     * characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase
     * letter and one decimal digit. You can't use adminUserPassword if manageAdminPassword is true.
     */
    adminUserPassword?: pulumi.Input<string>;
    /**
     * The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and
     * underscores are allowed. It should start with an alphabet.
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are
     * allowed. It should start with an alphabet.
     */
    dbName?: pulumi.Input<string>;
    /**
     * The default IAM role ARN for the namespace that is being created.
     */
    defaultIamRoleArn?: pulumi.Input<string>;
    /**
     * The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting
     * namespace
     */
    finalSnapshotName?: pulumi.Input<string>;
    /**
     * The number of days to retain automated snapshot in the destination region after they are copied from the source region.
     * If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1
     * and 3,653.
     */
    finalSnapshotRetentionPeriod?: pulumi.Input<number>;
    /**
     * A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services.
     * You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
     */
    iamRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The collection of log types to be exported provided by the customer. Should only be one of the three supported log
     * types: userlog, useractivitylog and connectionlog
     */
    logExports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, Amazon Redshift uses AWS Secrets Manager to manage the namespace's admin credentials. You can't use
     * adminUserPassword if manageAdminPassword is true. If manageAdminPassword is false or not set, Amazon Redshift uses
     * adminUserPassword for the admin user account's password.
     */
    manageAdminPassword?: pulumi.Input<boolean>;
    /**
     * Definition of Namespace resource.
     */
    namespace?: pulumi.Input<inputs.RedshiftserverlessNamespaceNamespace>;
    /**
     * A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace
     * operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be
     * unique for all namespaces within an AWS account.
     */
    namespaceName?: pulumi.Input<string>;
    /**
     * The resource policy document that will be attached to the namespace.
     */
    namespaceResourcePolicy?: pulumi.Input<string>;
    /**
     * The ARN for the Redshift application that integrates with IAM Identity Center.
     */
    redshiftIdcApplicationArn?: pulumi.Input<string>;
    /**
     * The snapshot copy configurations for the namespace.
     */
    snapshotCopyConfigurations?: pulumi.Input<pulumi.Input<inputs.RedshiftserverlessNamespaceSnapshotCopyConfiguration>[]>;
    /**
     * The list of tags for the namespace.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RedshiftserverlessNamespaceTag>[]>;
}

/**
 * The set of arguments for constructing a RedshiftserverlessNamespace resource.
 */
export interface RedshiftserverlessNamespaceArgs {
    /**
     * The ID of the AWS Key Management Service (KMS) key used to encrypt and store the namespace's admin credentials secret.
     * You can only use this parameter if manageAdminPassword is true.
     */
    adminPasswordSecretKmsKeyId?: pulumi.Input<string>;
    /**
     * The password associated with the admin user for the namespace that is being created. Password must be at least 8
     * characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase
     * letter and one decimal digit. You can't use adminUserPassword if manageAdminPassword is true.
     */
    adminUserPassword?: pulumi.Input<string>;
    /**
     * The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and
     * underscores are allowed. It should start with an alphabet.
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are
     * allowed. It should start with an alphabet.
     */
    dbName?: pulumi.Input<string>;
    /**
     * The default IAM role ARN for the namespace that is being created.
     */
    defaultIamRoleArn?: pulumi.Input<string>;
    /**
     * The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting
     * namespace
     */
    finalSnapshotName?: pulumi.Input<string>;
    /**
     * The number of days to retain automated snapshot in the destination region after they are copied from the source region.
     * If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1
     * and 3,653.
     */
    finalSnapshotRetentionPeriod?: pulumi.Input<number>;
    /**
     * A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services.
     * You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
     */
    iamRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The collection of log types to be exported provided by the customer. Should only be one of the three supported log
     * types: userlog, useractivitylog and connectionlog
     */
    logExports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, Amazon Redshift uses AWS Secrets Manager to manage the namespace's admin credentials. You can't use
     * adminUserPassword if manageAdminPassword is true. If manageAdminPassword is false or not set, Amazon Redshift uses
     * adminUserPassword for the admin user account's password.
     */
    manageAdminPassword?: pulumi.Input<boolean>;
    /**
     * A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace
     * operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be
     * unique for all namespaces within an AWS account.
     */
    namespaceName: pulumi.Input<string>;
    /**
     * The resource policy document that will be attached to the namespace.
     */
    namespaceResourcePolicy?: pulumi.Input<string>;
    /**
     * The ARN for the Redshift application that integrates with IAM Identity Center.
     */
    redshiftIdcApplicationArn?: pulumi.Input<string>;
    /**
     * The snapshot copy configurations for the namespace.
     */
    snapshotCopyConfigurations?: pulumi.Input<pulumi.Input<inputs.RedshiftserverlessNamespaceSnapshotCopyConfiguration>[]>;
    /**
     * The list of tags for the namespace.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RedshiftserverlessNamespaceTag>[]>;
}
