// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRumAppMonitor(args: GetRumAppMonitorArgs, opts?: pulumi.InvokeOptions): Promise<GetRumAppMonitorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getRumAppMonitor:getRumAppMonitor", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRumAppMonitor.
 */
export interface GetRumAppMonitorArgs {
    id: string;
}

/**
 * A collection of values returned by getRumAppMonitor.
 */
export interface GetRumAppMonitorResult {
    readonly appMonitorConfiguration: outputs.GetRumAppMonitorAppMonitorConfiguration;
    readonly appMonitorId: string;
    readonly customEvents: outputs.GetRumAppMonitorCustomEvents;
    readonly cwLogEnabled: boolean;
    readonly domain: string;
    readonly id: string;
    readonly name: string;
    readonly tags: outputs.GetRumAppMonitorTag[];
}
export function getRumAppMonitorOutput(args: GetRumAppMonitorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRumAppMonitorResult> {
    return pulumi.output(args).apply((a: any) => getRumAppMonitor(a, opts))
}

/**
 * A collection of arguments for invoking getRumAppMonitor.
 */
export interface GetRumAppMonitorOutputArgs {
    id: pulumi.Input<string>;
}
