// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RobomakerSimulationApplication extends pulumi.CustomResource {
    /**
     * Get an existing RobomakerSimulationApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RobomakerSimulationApplicationState, opts?: pulumi.CustomResourceOptions): RobomakerSimulationApplication {
        return new RobomakerSimulationApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/robomakerSimulationApplication:RobomakerSimulationApplication';

    /**
     * Returns true if the given object is an instance of RobomakerSimulationApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RobomakerSimulationApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RobomakerSimulationApplication.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The current revision id.
     */
    public readonly currentRevisionId!: pulumi.Output<string>;
    /**
     * The URI of the Docker image for the robot application.
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The name of the simulation application.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The rendering engine for the simulation application.
     */
    public readonly renderingEngine!: pulumi.Output<outputs.RobomakerSimulationApplicationRenderingEngine>;
    /**
     * The robot software suite used by the simulation application.
     */
    public readonly robotSoftwareSuite!: pulumi.Output<outputs.RobomakerSimulationApplicationRobotSoftwareSuite>;
    /**
     * The simulation software suite used by the simulation application.
     */
    public readonly simulationSoftwareSuite!: pulumi.Output<outputs.RobomakerSimulationApplicationSimulationSoftwareSuite>;
    /**
     * The sources of the simulation application.
     */
    public readonly sources!: pulumi.Output<outputs.RobomakerSimulationApplicationSource[]>;
    /**
     * A key-value pair to associate with a resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a RobomakerSimulationApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RobomakerSimulationApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RobomakerSimulationApplicationArgs | RobomakerSimulationApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RobomakerSimulationApplicationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["currentRevisionId"] = state ? state.currentRevisionId : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["renderingEngine"] = state ? state.renderingEngine : undefined;
            resourceInputs["robotSoftwareSuite"] = state ? state.robotSoftwareSuite : undefined;
            resourceInputs["simulationSoftwareSuite"] = state ? state.simulationSoftwareSuite : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as RobomakerSimulationApplicationArgs | undefined;
            if ((!args || args.robotSoftwareSuite === undefined) && !opts.urn) {
                throw new Error("Missing required property 'robotSoftwareSuite'");
            }
            if ((!args || args.simulationSoftwareSuite === undefined) && !opts.urn) {
                throw new Error("Missing required property 'simulationSoftwareSuite'");
            }
            resourceInputs["currentRevisionId"] = args ? args.currentRevisionId : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["renderingEngine"] = args ? args.renderingEngine : undefined;
            resourceInputs["robotSoftwareSuite"] = args ? args.robotSoftwareSuite : undefined;
            resourceInputs["simulationSoftwareSuite"] = args ? args.simulationSoftwareSuite : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RobomakerSimulationApplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RobomakerSimulationApplication resources.
 */
export interface RobomakerSimulationApplicationState {
    arn?: pulumi.Input<string>;
    /**
     * The current revision id.
     */
    currentRevisionId?: pulumi.Input<string>;
    /**
     * The URI of the Docker image for the robot application.
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the simulation application.
     */
    name?: pulumi.Input<string>;
    /**
     * The rendering engine for the simulation application.
     */
    renderingEngine?: pulumi.Input<inputs.RobomakerSimulationApplicationRenderingEngine>;
    /**
     * The robot software suite used by the simulation application.
     */
    robotSoftwareSuite?: pulumi.Input<inputs.RobomakerSimulationApplicationRobotSoftwareSuite>;
    /**
     * The simulation software suite used by the simulation application.
     */
    simulationSoftwareSuite?: pulumi.Input<inputs.RobomakerSimulationApplicationSimulationSoftwareSuite>;
    /**
     * The sources of the simulation application.
     */
    sources?: pulumi.Input<pulumi.Input<inputs.RobomakerSimulationApplicationSource>[]>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a RobomakerSimulationApplication resource.
 */
export interface RobomakerSimulationApplicationArgs {
    /**
     * The current revision id.
     */
    currentRevisionId?: pulumi.Input<string>;
    /**
     * The URI of the Docker image for the robot application.
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the simulation application.
     */
    name?: pulumi.Input<string>;
    /**
     * The rendering engine for the simulation application.
     */
    renderingEngine?: pulumi.Input<inputs.RobomakerSimulationApplicationRenderingEngine>;
    /**
     * The robot software suite used by the simulation application.
     */
    robotSoftwareSuite: pulumi.Input<inputs.RobomakerSimulationApplicationRobotSoftwareSuite>;
    /**
     * The simulation software suite used by the simulation application.
     */
    simulationSoftwareSuite: pulumi.Input<inputs.RobomakerSimulationApplicationSimulationSoftwareSuite>;
    /**
     * The sources of the simulation application.
     */
    sources?: pulumi.Input<pulumi.Input<inputs.RobomakerSimulationApplicationSource>[]>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
