// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WorkspaceswebPortal extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceswebPortal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceswebPortalState, opts?: pulumi.CustomResourceOptions): WorkspaceswebPortal {
        return new WorkspaceswebPortal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/workspaceswebPortal:WorkspaceswebPortal';

    /**
     * Returns true if the given object is an instance of WorkspaceswebPortal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspaceswebPortal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceswebPortal.__pulumiType;
    }

    public readonly additionalEncryptionContext!: pulumi.Output<{[key: string]: string}>;
    public readonly authenticationType!: pulumi.Output<string>;
    public readonly browserSettingsArn!: pulumi.Output<string>;
    public /*out*/ readonly browserType!: pulumi.Output<string>;
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    public readonly customerManagedKey!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly ipAccessSettingsArn!: pulumi.Output<string>;
    public readonly maxConcurrentSessions!: pulumi.Output<number>;
    public readonly networkSettingsArn!: pulumi.Output<string>;
    public /*out*/ readonly portalArn!: pulumi.Output<string>;
    public /*out*/ readonly portalEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly portalStatus!: pulumi.Output<string>;
    public /*out*/ readonly rendererType!: pulumi.Output<string>;
    public /*out*/ readonly serviceProviderSamlMetadata!: pulumi.Output<string>;
    public /*out*/ readonly statusReason!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.WorkspaceswebPortalTag[]>;
    public readonly trustStoreArn!: pulumi.Output<string>;
    public readonly userAccessLoggingSettingsArn!: pulumi.Output<string>;
    public readonly userSettingsArn!: pulumi.Output<string>;

    /**
     * Create a WorkspaceswebPortal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkspaceswebPortalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceswebPortalArgs | WorkspaceswebPortalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceswebPortalState | undefined;
            resourceInputs["additionalEncryptionContext"] = state ? state.additionalEncryptionContext : undefined;
            resourceInputs["authenticationType"] = state ? state.authenticationType : undefined;
            resourceInputs["browserSettingsArn"] = state ? state.browserSettingsArn : undefined;
            resourceInputs["browserType"] = state ? state.browserType : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["customerManagedKey"] = state ? state.customerManagedKey : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["ipAccessSettingsArn"] = state ? state.ipAccessSettingsArn : undefined;
            resourceInputs["maxConcurrentSessions"] = state ? state.maxConcurrentSessions : undefined;
            resourceInputs["networkSettingsArn"] = state ? state.networkSettingsArn : undefined;
            resourceInputs["portalArn"] = state ? state.portalArn : undefined;
            resourceInputs["portalEndpoint"] = state ? state.portalEndpoint : undefined;
            resourceInputs["portalStatus"] = state ? state.portalStatus : undefined;
            resourceInputs["rendererType"] = state ? state.rendererType : undefined;
            resourceInputs["serviceProviderSamlMetadata"] = state ? state.serviceProviderSamlMetadata : undefined;
            resourceInputs["statusReason"] = state ? state.statusReason : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trustStoreArn"] = state ? state.trustStoreArn : undefined;
            resourceInputs["userAccessLoggingSettingsArn"] = state ? state.userAccessLoggingSettingsArn : undefined;
            resourceInputs["userSettingsArn"] = state ? state.userSettingsArn : undefined;
        } else {
            const args = argsOrState as WorkspaceswebPortalArgs | undefined;
            resourceInputs["additionalEncryptionContext"] = args ? args.additionalEncryptionContext : undefined;
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["browserSettingsArn"] = args ? args.browserSettingsArn : undefined;
            resourceInputs["customerManagedKey"] = args ? args.customerManagedKey : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["ipAccessSettingsArn"] = args ? args.ipAccessSettingsArn : undefined;
            resourceInputs["maxConcurrentSessions"] = args ? args.maxConcurrentSessions : undefined;
            resourceInputs["networkSettingsArn"] = args ? args.networkSettingsArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trustStoreArn"] = args ? args.trustStoreArn : undefined;
            resourceInputs["userAccessLoggingSettingsArn"] = args ? args.userAccessLoggingSettingsArn : undefined;
            resourceInputs["userSettingsArn"] = args ? args.userSettingsArn : undefined;
            resourceInputs["browserType"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["portalArn"] = undefined /*out*/;
            resourceInputs["portalEndpoint"] = undefined /*out*/;
            resourceInputs["portalStatus"] = undefined /*out*/;
            resourceInputs["rendererType"] = undefined /*out*/;
            resourceInputs["serviceProviderSamlMetadata"] = undefined /*out*/;
            resourceInputs["statusReason"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkspaceswebPortal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkspaceswebPortal resources.
 */
export interface WorkspaceswebPortalState {
    additionalEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    authenticationType?: pulumi.Input<string>;
    browserSettingsArn?: pulumi.Input<string>;
    browserType?: pulumi.Input<string>;
    creationDate?: pulumi.Input<string>;
    customerManagedKey?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    ipAccessSettingsArn?: pulumi.Input<string>;
    maxConcurrentSessions?: pulumi.Input<number>;
    networkSettingsArn?: pulumi.Input<string>;
    portalArn?: pulumi.Input<string>;
    portalEndpoint?: pulumi.Input<string>;
    portalStatus?: pulumi.Input<string>;
    rendererType?: pulumi.Input<string>;
    serviceProviderSamlMetadata?: pulumi.Input<string>;
    statusReason?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.WorkspaceswebPortalTag>[]>;
    trustStoreArn?: pulumi.Input<string>;
    userAccessLoggingSettingsArn?: pulumi.Input<string>;
    userSettingsArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkspaceswebPortal resource.
 */
export interface WorkspaceswebPortalArgs {
    additionalEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    authenticationType?: pulumi.Input<string>;
    browserSettingsArn?: pulumi.Input<string>;
    customerManagedKey?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    ipAccessSettingsArn?: pulumi.Input<string>;
    maxConcurrentSessions?: pulumi.Input<number>;
    networkSettingsArn?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.WorkspaceswebPortalTag>[]>;
    trustStoreArn?: pulumi.Input<string>;
    userAccessLoggingSettingsArn?: pulumi.Input<string>;
    userSettingsArn?: pulumi.Input<string>;
}
