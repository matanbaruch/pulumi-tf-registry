// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HealthlakeFhirDatastore extends pulumi.CustomResource {
    /**
     * Get an existing HealthlakeFhirDatastore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthlakeFhirDatastoreState, opts?: pulumi.CustomResourceOptions): HealthlakeFhirDatastore {
        return new HealthlakeFhirDatastore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/healthlakeFhirDatastore:HealthlakeFhirDatastore';

    /**
     * Returns true if the given object is an instance of HealthlakeFhirDatastore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthlakeFhirDatastore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthlakeFhirDatastore.__pulumiType;
    }

    /**
     * The time that a Data Store was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<outputs.HealthlakeFhirDatastoreCreatedAt>;
    /**
     * The Amazon Resource Name used in the creation of the Data Store.
     */
    public /*out*/ readonly datastoreArn!: pulumi.Output<string>;
    /**
     * The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL.
     */
    public /*out*/ readonly datastoreEndpoint!: pulumi.Output<string>;
    /**
     * The AWS-generated ID number for the Data Store.
     */
    public /*out*/ readonly datastoreId!: pulumi.Output<string>;
    /**
     * The user-generated name for the Data Store.
     */
    public readonly datastoreName!: pulumi.Output<string>;
    /**
     * The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.
     */
    public /*out*/ readonly datastoreStatus!: pulumi.Output<string>;
    /**
     * The FHIR version. Only R4 version data is supported.
     */
    public readonly datastoreTypeVersion!: pulumi.Output<string>;
    /**
     * The identity provider configuration for the datastore
     */
    public readonly identityProviderConfiguration!: pulumi.Output<outputs.HealthlakeFhirDatastoreIdentityProviderConfiguration>;
    /**
     * The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
     */
    public readonly preloadDataConfig!: pulumi.Output<outputs.HealthlakeFhirDatastorePreloadDataConfig>;
    /**
     * The server-side encryption key configuration for a customer provided encryption key.
     */
    public readonly sseConfiguration!: pulumi.Output<outputs.HealthlakeFhirDatastoreSseConfiguration>;
    public readonly tags!: pulumi.Output<outputs.HealthlakeFhirDatastoreTag[]>;

    /**
     * Create a HealthlakeFhirDatastore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HealthlakeFhirDatastoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthlakeFhirDatastoreArgs | HealthlakeFhirDatastoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthlakeFhirDatastoreState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["datastoreArn"] = state ? state.datastoreArn : undefined;
            resourceInputs["datastoreEndpoint"] = state ? state.datastoreEndpoint : undefined;
            resourceInputs["datastoreId"] = state ? state.datastoreId : undefined;
            resourceInputs["datastoreName"] = state ? state.datastoreName : undefined;
            resourceInputs["datastoreStatus"] = state ? state.datastoreStatus : undefined;
            resourceInputs["datastoreTypeVersion"] = state ? state.datastoreTypeVersion : undefined;
            resourceInputs["identityProviderConfiguration"] = state ? state.identityProviderConfiguration : undefined;
            resourceInputs["preloadDataConfig"] = state ? state.preloadDataConfig : undefined;
            resourceInputs["sseConfiguration"] = state ? state.sseConfiguration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as HealthlakeFhirDatastoreArgs | undefined;
            if ((!args || args.datastoreTypeVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datastoreTypeVersion'");
            }
            resourceInputs["datastoreName"] = args ? args.datastoreName : undefined;
            resourceInputs["datastoreTypeVersion"] = args ? args.datastoreTypeVersion : undefined;
            resourceInputs["identityProviderConfiguration"] = args ? args.identityProviderConfiguration : undefined;
            resourceInputs["preloadDataConfig"] = args ? args.preloadDataConfig : undefined;
            resourceInputs["sseConfiguration"] = args ? args.sseConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["datastoreArn"] = undefined /*out*/;
            resourceInputs["datastoreEndpoint"] = undefined /*out*/;
            resourceInputs["datastoreId"] = undefined /*out*/;
            resourceInputs["datastoreStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthlakeFhirDatastore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthlakeFhirDatastore resources.
 */
export interface HealthlakeFhirDatastoreState {
    /**
     * The time that a Data Store was created.
     */
    createdAt?: pulumi.Input<inputs.HealthlakeFhirDatastoreCreatedAt>;
    /**
     * The Amazon Resource Name used in the creation of the Data Store.
     */
    datastoreArn?: pulumi.Input<string>;
    /**
     * The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL.
     */
    datastoreEndpoint?: pulumi.Input<string>;
    /**
     * The AWS-generated ID number for the Data Store.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * The user-generated name for the Data Store.
     */
    datastoreName?: pulumi.Input<string>;
    /**
     * The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.
     */
    datastoreStatus?: pulumi.Input<string>;
    /**
     * The FHIR version. Only R4 version data is supported.
     */
    datastoreTypeVersion?: pulumi.Input<string>;
    /**
     * The identity provider configuration for the datastore
     */
    identityProviderConfiguration?: pulumi.Input<inputs.HealthlakeFhirDatastoreIdentityProviderConfiguration>;
    /**
     * The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
     */
    preloadDataConfig?: pulumi.Input<inputs.HealthlakeFhirDatastorePreloadDataConfig>;
    /**
     * The server-side encryption key configuration for a customer provided encryption key.
     */
    sseConfiguration?: pulumi.Input<inputs.HealthlakeFhirDatastoreSseConfiguration>;
    tags?: pulumi.Input<pulumi.Input<inputs.HealthlakeFhirDatastoreTag>[]>;
}

/**
 * The set of arguments for constructing a HealthlakeFhirDatastore resource.
 */
export interface HealthlakeFhirDatastoreArgs {
    /**
     * The user-generated name for the Data Store.
     */
    datastoreName?: pulumi.Input<string>;
    /**
     * The FHIR version. Only R4 version data is supported.
     */
    datastoreTypeVersion: pulumi.Input<string>;
    /**
     * The identity provider configuration for the datastore
     */
    identityProviderConfiguration?: pulumi.Input<inputs.HealthlakeFhirDatastoreIdentityProviderConfiguration>;
    /**
     * The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
     */
    preloadDataConfig?: pulumi.Input<inputs.HealthlakeFhirDatastorePreloadDataConfig>;
    /**
     * The server-side encryption key configuration for a customer provided encryption key.
     */
    sseConfiguration?: pulumi.Input<inputs.HealthlakeFhirDatastoreSseConfiguration>;
    tags?: pulumi.Input<pulumi.Input<inputs.HealthlakeFhirDatastoreTag>[]>;
}
