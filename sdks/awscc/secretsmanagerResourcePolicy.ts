// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SecretsmanagerResourcePolicy extends pulumi.CustomResource {
    /**
     * Get an existing SecretsmanagerResourcePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretsmanagerResourcePolicyState, opts?: pulumi.CustomResourceOptions): SecretsmanagerResourcePolicy {
        return new SecretsmanagerResourcePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/secretsmanagerResourcePolicy:SecretsmanagerResourcePolicy';

    /**
     * Returns true if the given object is an instance of SecretsmanagerResourcePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretsmanagerResourcePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretsmanagerResourcePolicy.__pulumiType;
    }

    /**
     * Specifies whether to block resource-based policies that allow broad access to the secret.
     */
    public readonly blockPublicPolicy!: pulumi.Output<boolean>;
    /**
     * A JSON-formatted string for an AWS resource-based policy.
     */
    public readonly resourcePolicy!: pulumi.Output<string>;
    /**
     * The Arn of the secret.
     */
    public /*out*/ readonly resourcePolicyId!: pulumi.Output<string>;
    /**
     * The ARN or name of the secret to attach the resource-based policy.
     */
    public readonly secretId!: pulumi.Output<string>;

    /**
     * Create a SecretsmanagerResourcePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretsmanagerResourcePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretsmanagerResourcePolicyArgs | SecretsmanagerResourcePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretsmanagerResourcePolicyState | undefined;
            resourceInputs["blockPublicPolicy"] = state ? state.blockPublicPolicy : undefined;
            resourceInputs["resourcePolicy"] = state ? state.resourcePolicy : undefined;
            resourceInputs["resourcePolicyId"] = state ? state.resourcePolicyId : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
        } else {
            const args = argsOrState as SecretsmanagerResourcePolicyArgs | undefined;
            if ((!args || args.resourcePolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourcePolicy'");
            }
            if ((!args || args.secretId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretId'");
            }
            resourceInputs["blockPublicPolicy"] = args ? args.blockPublicPolicy : undefined;
            resourceInputs["resourcePolicy"] = args ? args.resourcePolicy : undefined;
            resourceInputs["secretId"] = args ? args.secretId : undefined;
            resourceInputs["resourcePolicyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretsmanagerResourcePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecretsmanagerResourcePolicy resources.
 */
export interface SecretsmanagerResourcePolicyState {
    /**
     * Specifies whether to block resource-based policies that allow broad access to the secret.
     */
    blockPublicPolicy?: pulumi.Input<boolean>;
    /**
     * A JSON-formatted string for an AWS resource-based policy.
     */
    resourcePolicy?: pulumi.Input<string>;
    /**
     * The Arn of the secret.
     */
    resourcePolicyId?: pulumi.Input<string>;
    /**
     * The ARN or name of the secret to attach the resource-based policy.
     */
    secretId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretsmanagerResourcePolicy resource.
 */
export interface SecretsmanagerResourcePolicyArgs {
    /**
     * Specifies whether to block resource-based policies that allow broad access to the secret.
     */
    blockPublicPolicy?: pulumi.Input<boolean>;
    /**
     * A JSON-formatted string for an AWS resource-based policy.
     */
    resourcePolicy: pulumi.Input<string>;
    /**
     * The ARN or name of the secret to attach the resource-based policy.
     */
    secretId: pulumi.Input<string>;
}
