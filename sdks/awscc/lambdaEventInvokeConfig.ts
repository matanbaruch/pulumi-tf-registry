// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LambdaEventInvokeConfig extends pulumi.CustomResource {
    /**
     * Get an existing LambdaEventInvokeConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LambdaEventInvokeConfigState, opts?: pulumi.CustomResourceOptions): LambdaEventInvokeConfig {
        return new LambdaEventInvokeConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lambdaEventInvokeConfig:LambdaEventInvokeConfig';

    /**
     * Returns true if the given object is an instance of LambdaEventInvokeConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LambdaEventInvokeConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LambdaEventInvokeConfig.__pulumiType;
    }

    /**
     * A destination for events after they have been sent to a function for processing.
     */
    public readonly destinationConfig!: pulumi.Output<outputs.LambdaEventInvokeConfigDestinationConfig>;
    /**
     * The name of the Lambda function.
     */
    public readonly functionName!: pulumi.Output<string>;
    /**
     * The maximum age of a request that Lambda sends to a function for processing.
     */
    public readonly maximumEventAgeInSeconds!: pulumi.Output<number>;
    /**
     * The maximum number of times to retry when the function returns an error.
     */
    public readonly maximumRetryAttempts!: pulumi.Output<number>;
    /**
     * The identifier of a version or alias.
     */
    public readonly qualifier!: pulumi.Output<string>;

    /**
     * Create a LambdaEventInvokeConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LambdaEventInvokeConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LambdaEventInvokeConfigArgs | LambdaEventInvokeConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LambdaEventInvokeConfigState | undefined;
            resourceInputs["destinationConfig"] = state ? state.destinationConfig : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["maximumEventAgeInSeconds"] = state ? state.maximumEventAgeInSeconds : undefined;
            resourceInputs["maximumRetryAttempts"] = state ? state.maximumRetryAttempts : undefined;
            resourceInputs["qualifier"] = state ? state.qualifier : undefined;
        } else {
            const args = argsOrState as LambdaEventInvokeConfigArgs | undefined;
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            if ((!args || args.qualifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'qualifier'");
            }
            resourceInputs["destinationConfig"] = args ? args.destinationConfig : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["maximumEventAgeInSeconds"] = args ? args.maximumEventAgeInSeconds : undefined;
            resourceInputs["maximumRetryAttempts"] = args ? args.maximumRetryAttempts : undefined;
            resourceInputs["qualifier"] = args ? args.qualifier : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LambdaEventInvokeConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LambdaEventInvokeConfig resources.
 */
export interface LambdaEventInvokeConfigState {
    /**
     * A destination for events after they have been sent to a function for processing.
     */
    destinationConfig?: pulumi.Input<inputs.LambdaEventInvokeConfigDestinationConfig>;
    /**
     * The name of the Lambda function.
     */
    functionName?: pulumi.Input<string>;
    /**
     * The maximum age of a request that Lambda sends to a function for processing.
     */
    maximumEventAgeInSeconds?: pulumi.Input<number>;
    /**
     * The maximum number of times to retry when the function returns an error.
     */
    maximumRetryAttempts?: pulumi.Input<number>;
    /**
     * The identifier of a version or alias.
     */
    qualifier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LambdaEventInvokeConfig resource.
 */
export interface LambdaEventInvokeConfigArgs {
    /**
     * A destination for events after they have been sent to a function for processing.
     */
    destinationConfig?: pulumi.Input<inputs.LambdaEventInvokeConfigDestinationConfig>;
    /**
     * The name of the Lambda function.
     */
    functionName: pulumi.Input<string>;
    /**
     * The maximum age of a request that Lambda sends to a function for processing.
     */
    maximumEventAgeInSeconds?: pulumi.Input<number>;
    /**
     * The maximum number of times to retry when the function returns an error.
     */
    maximumRetryAttempts?: pulumi.Input<number>;
    /**
     * The identifier of a version or alias.
     */
    qualifier: pulumi.Input<string>;
}
