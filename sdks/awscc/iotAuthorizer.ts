// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IotAuthorizer extends pulumi.CustomResource {
    /**
     * Get an existing IotAuthorizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotAuthorizerState, opts?: pulumi.CustomResourceOptions): IotAuthorizer {
        return new IotAuthorizer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/iotAuthorizer:IotAuthorizer';

    /**
     * Returns true if the given object is an instance of IotAuthorizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotAuthorizer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotAuthorizer.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authorizerFunctionArn!: pulumi.Output<string>;
    public readonly authorizerName!: pulumi.Output<string>;
    public readonly enableCachingForHttp!: pulumi.Output<boolean>;
    public readonly signingDisabled!: pulumi.Output<boolean>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.IotAuthorizerTag[]>;
    public readonly tokenKeyName!: pulumi.Output<string>;
    public readonly tokenSigningPublicKeys!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a IotAuthorizer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IotAuthorizerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotAuthorizerArgs | IotAuthorizerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotAuthorizerState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authorizerFunctionArn"] = state ? state.authorizerFunctionArn : undefined;
            resourceInputs["authorizerName"] = state ? state.authorizerName : undefined;
            resourceInputs["enableCachingForHttp"] = state ? state.enableCachingForHttp : undefined;
            resourceInputs["signingDisabled"] = state ? state.signingDisabled : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tokenKeyName"] = state ? state.tokenKeyName : undefined;
            resourceInputs["tokenSigningPublicKeys"] = state ? state.tokenSigningPublicKeys : undefined;
        } else {
            const args = argsOrState as IotAuthorizerArgs | undefined;
            if ((!args || args.authorizerFunctionArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizerFunctionArn'");
            }
            resourceInputs["authorizerFunctionArn"] = args ? args.authorizerFunctionArn : undefined;
            resourceInputs["authorizerName"] = args ? args.authorizerName : undefined;
            resourceInputs["enableCachingForHttp"] = args ? args.enableCachingForHttp : undefined;
            resourceInputs["signingDisabled"] = args ? args.signingDisabled : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tokenKeyName"] = args ? args.tokenKeyName : undefined;
            resourceInputs["tokenSigningPublicKeys"] = args ? args.tokenSigningPublicKeys : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IotAuthorizer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IotAuthorizer resources.
 */
export interface IotAuthorizerState {
    arn?: pulumi.Input<string>;
    authorizerFunctionArn?: pulumi.Input<string>;
    authorizerName?: pulumi.Input<string>;
    enableCachingForHttp?: pulumi.Input<boolean>;
    signingDisabled?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IotAuthorizerTag>[]>;
    tokenKeyName?: pulumi.Input<string>;
    tokenSigningPublicKeys?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a IotAuthorizer resource.
 */
export interface IotAuthorizerArgs {
    authorizerFunctionArn: pulumi.Input<string>;
    authorizerName?: pulumi.Input<string>;
    enableCachingForHttp?: pulumi.Input<boolean>;
    signingDisabled?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IotAuthorizerTag>[]>;
    tokenKeyName?: pulumi.Input<string>;
    tokenSigningPublicKeys?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
