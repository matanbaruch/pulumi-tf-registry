// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PersonalizeSolution extends pulumi.CustomResource {
    /**
     * Get an existing PersonalizeSolution resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PersonalizeSolutionState, opts?: pulumi.CustomResourceOptions): PersonalizeSolution {
        return new PersonalizeSolution(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/personalizeSolution:PersonalizeSolution';

    /**
     * Returns true if the given object is an instance of PersonalizeSolution.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PersonalizeSolution {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PersonalizeSolution.__pulumiType;
    }

    /**
     * The ARN of the dataset group that provides the training data.
     */
    public readonly datasetGroupArn!: pulumi.Output<string>;
    /**
     * When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for
     * example, 'click' or 'like') is used for training the model. If you do not provide an eventType, Amazon Personalize will
     * use all interactions for training with equal weight regardless of type.
     */
    public readonly eventType!: pulumi.Output<string>;
    /**
     * The name for the solution
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
     */
    public readonly performAutoMl!: pulumi.Output<boolean>;
    /**
     * Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When
     * performing AutoML, this parameter is always true and you should not set it to false.
     */
    public readonly performHpo!: pulumi.Output<boolean>;
    /**
     * The ARN of the recipe to use for model training. Only specified when performAutoML is false.
     */
    public readonly recipeArn!: pulumi.Output<string>;
    /**
     * The ARN of the solution
     */
    public /*out*/ readonly solutionArn!: pulumi.Output<string>;
    /**
     * The configuration to use with the solution. When performAutoML is set to true, Amazon Personalize only evaluates the
     * autoMLConfig section of the solution configuration.
     */
    public readonly solutionConfig!: pulumi.Output<outputs.PersonalizeSolutionSolutionConfig>;

    /**
     * Create a PersonalizeSolution resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PersonalizeSolutionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PersonalizeSolutionArgs | PersonalizeSolutionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PersonalizeSolutionState | undefined;
            resourceInputs["datasetGroupArn"] = state ? state.datasetGroupArn : undefined;
            resourceInputs["eventType"] = state ? state.eventType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["performAutoMl"] = state ? state.performAutoMl : undefined;
            resourceInputs["performHpo"] = state ? state.performHpo : undefined;
            resourceInputs["recipeArn"] = state ? state.recipeArn : undefined;
            resourceInputs["solutionArn"] = state ? state.solutionArn : undefined;
            resourceInputs["solutionConfig"] = state ? state.solutionConfig : undefined;
        } else {
            const args = argsOrState as PersonalizeSolutionArgs | undefined;
            if ((!args || args.datasetGroupArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasetGroupArn'");
            }
            resourceInputs["datasetGroupArn"] = args ? args.datasetGroupArn : undefined;
            resourceInputs["eventType"] = args ? args.eventType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["performAutoMl"] = args ? args.performAutoMl : undefined;
            resourceInputs["performHpo"] = args ? args.performHpo : undefined;
            resourceInputs["recipeArn"] = args ? args.recipeArn : undefined;
            resourceInputs["solutionConfig"] = args ? args.solutionConfig : undefined;
            resourceInputs["solutionArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PersonalizeSolution.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PersonalizeSolution resources.
 */
export interface PersonalizeSolutionState {
    /**
     * The ARN of the dataset group that provides the training data.
     */
    datasetGroupArn?: pulumi.Input<string>;
    /**
     * When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for
     * example, 'click' or 'like') is used for training the model. If you do not provide an eventType, Amazon Personalize will
     * use all interactions for training with equal weight regardless of type.
     */
    eventType?: pulumi.Input<string>;
    /**
     * The name for the solution
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
     */
    performAutoMl?: pulumi.Input<boolean>;
    /**
     * Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When
     * performing AutoML, this parameter is always true and you should not set it to false.
     */
    performHpo?: pulumi.Input<boolean>;
    /**
     * The ARN of the recipe to use for model training. Only specified when performAutoML is false.
     */
    recipeArn?: pulumi.Input<string>;
    /**
     * The ARN of the solution
     */
    solutionArn?: pulumi.Input<string>;
    /**
     * The configuration to use with the solution. When performAutoML is set to true, Amazon Personalize only evaluates the
     * autoMLConfig section of the solution configuration.
     */
    solutionConfig?: pulumi.Input<inputs.PersonalizeSolutionSolutionConfig>;
}

/**
 * The set of arguments for constructing a PersonalizeSolution resource.
 */
export interface PersonalizeSolutionArgs {
    /**
     * The ARN of the dataset group that provides the training data.
     */
    datasetGroupArn: pulumi.Input<string>;
    /**
     * When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for
     * example, 'click' or 'like') is used for training the model. If you do not provide an eventType, Amazon Personalize will
     * use all interactions for training with equal weight regardless of type.
     */
    eventType?: pulumi.Input<string>;
    /**
     * The name for the solution
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
     */
    performAutoMl?: pulumi.Input<boolean>;
    /**
     * Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When
     * performing AutoML, this parameter is always true and you should not set it to false.
     */
    performHpo?: pulumi.Input<boolean>;
    /**
     * The ARN of the recipe to use for model training. Only specified when performAutoML is false.
     */
    recipeArn?: pulumi.Input<string>;
    /**
     * The configuration to use with the solution. When performAutoML is set to true, Amazon Personalize only evaluates the
     * autoMLConfig section of the solution configuration.
     */
    solutionConfig?: pulumi.Input<inputs.PersonalizeSolutionSolutionConfig>;
}
