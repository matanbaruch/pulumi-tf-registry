// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ec2VpcEndpointConnectionNotification extends pulumi.CustomResource {
    /**
     * Get an existing Ec2VpcEndpointConnectionNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2VpcEndpointConnectionNotificationState, opts?: pulumi.CustomResourceOptions): Ec2VpcEndpointConnectionNotification {
        return new Ec2VpcEndpointConnectionNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2VpcEndpointConnectionNotification:Ec2VpcEndpointConnectionNotification';

    /**
     * Returns true if the given object is an instance of Ec2VpcEndpointConnectionNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2VpcEndpointConnectionNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2VpcEndpointConnectionNotification.__pulumiType;
    }

    /**
     * The endpoint events for which to receive notifications.
     */
    public readonly connectionEvents!: pulumi.Output<string[]>;
    /**
     * The ARN of the SNS topic for the notifications.
     */
    public readonly connectionNotificationArn!: pulumi.Output<string>;
    /**
     * The ID of the endpoint service.
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * VPC Endpoint Connection ID generated by service
     */
    public /*out*/ readonly vpcEndpointConnectionNotificationId!: pulumi.Output<string>;
    /**
     * The ID of the endpoint.
     */
    public readonly vpcEndpointId!: pulumi.Output<string>;

    /**
     * Create a Ec2VpcEndpointConnectionNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2VpcEndpointConnectionNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2VpcEndpointConnectionNotificationArgs | Ec2VpcEndpointConnectionNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2VpcEndpointConnectionNotificationState | undefined;
            resourceInputs["connectionEvents"] = state ? state.connectionEvents : undefined;
            resourceInputs["connectionNotificationArn"] = state ? state.connectionNotificationArn : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["vpcEndpointConnectionNotificationId"] = state ? state.vpcEndpointConnectionNotificationId : undefined;
            resourceInputs["vpcEndpointId"] = state ? state.vpcEndpointId : undefined;
        } else {
            const args = argsOrState as Ec2VpcEndpointConnectionNotificationArgs | undefined;
            if ((!args || args.connectionEvents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionEvents'");
            }
            if ((!args || args.connectionNotificationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionNotificationArn'");
            }
            resourceInputs["connectionEvents"] = args ? args.connectionEvents : undefined;
            resourceInputs["connectionNotificationArn"] = args ? args.connectionNotificationArn : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["vpcEndpointId"] = args ? args.vpcEndpointId : undefined;
            resourceInputs["vpcEndpointConnectionNotificationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2VpcEndpointConnectionNotification.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2VpcEndpointConnectionNotification resources.
 */
export interface Ec2VpcEndpointConnectionNotificationState {
    /**
     * The endpoint events for which to receive notifications.
     */
    connectionEvents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the SNS topic for the notifications.
     */
    connectionNotificationArn?: pulumi.Input<string>;
    /**
     * The ID of the endpoint service.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * VPC Endpoint Connection ID generated by service
     */
    vpcEndpointConnectionNotificationId?: pulumi.Input<string>;
    /**
     * The ID of the endpoint.
     */
    vpcEndpointId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2VpcEndpointConnectionNotification resource.
 */
export interface Ec2VpcEndpointConnectionNotificationArgs {
    /**
     * The endpoint events for which to receive notifications.
     */
    connectionEvents: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the SNS topic for the notifications.
     */
    connectionNotificationArn: pulumi.Input<string>;
    /**
     * The ID of the endpoint service.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * The ID of the endpoint.
     */
    vpcEndpointId?: pulumi.Input<string>;
}
