// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatazoneGroupProfile extends pulumi.CustomResource {
    /**
     * Get an existing DatazoneGroupProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatazoneGroupProfileState, opts?: pulumi.CustomResourceOptions): DatazoneGroupProfile {
        return new DatazoneGroupProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/datazoneGroupProfile:DatazoneGroupProfile';

    /**
     * Returns true if the given object is an instance of DatazoneGroupProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatazoneGroupProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatazoneGroupProfile.__pulumiType;
    }

    /**
     * The identifier of the Amazon DataZone domain in which the group profile is created.
     */
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    /**
     * The identifier of the Amazon DataZone domain in which the group profile would be created.
     */
    public readonly domainIdentifier!: pulumi.Output<string>;
    /**
     * The ID of the group.
     */
    public readonly groupIdentifier!: pulumi.Output<string>;
    /**
     * The group-name of the Group Profile.
     */
    public /*out*/ readonly groupName!: pulumi.Output<string>;
    /**
     * The ID of the Amazon DataZone group profile.
     */
    public /*out*/ readonly groupProfileId!: pulumi.Output<string>;
    /**
     * The status of the group profile.
     */
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a DatazoneGroupProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatazoneGroupProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatazoneGroupProfileArgs | DatazoneGroupProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatazoneGroupProfileState | undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["domainIdentifier"] = state ? state.domainIdentifier : undefined;
            resourceInputs["groupIdentifier"] = state ? state.groupIdentifier : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["groupProfileId"] = state ? state.groupProfileId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as DatazoneGroupProfileArgs | undefined;
            if ((!args || args.domainIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if ((!args || args.groupIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupIdentifier'");
            }
            resourceInputs["domainIdentifier"] = args ? args.domainIdentifier : undefined;
            resourceInputs["groupIdentifier"] = args ? args.groupIdentifier : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["groupName"] = undefined /*out*/;
            resourceInputs["groupProfileId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatazoneGroupProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatazoneGroupProfile resources.
 */
export interface DatazoneGroupProfileState {
    /**
     * The identifier of the Amazon DataZone domain in which the group profile is created.
     */
    domainId?: pulumi.Input<string>;
    /**
     * The identifier of the Amazon DataZone domain in which the group profile would be created.
     */
    domainIdentifier?: pulumi.Input<string>;
    /**
     * The ID of the group.
     */
    groupIdentifier?: pulumi.Input<string>;
    /**
     * The group-name of the Group Profile.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The ID of the Amazon DataZone group profile.
     */
    groupProfileId?: pulumi.Input<string>;
    /**
     * The status of the group profile.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatazoneGroupProfile resource.
 */
export interface DatazoneGroupProfileArgs {
    /**
     * The identifier of the Amazon DataZone domain in which the group profile would be created.
     */
    domainIdentifier: pulumi.Input<string>;
    /**
     * The ID of the group.
     */
    groupIdentifier: pulumi.Input<string>;
    /**
     * The status of the group profile.
     */
    status?: pulumi.Input<string>;
}
