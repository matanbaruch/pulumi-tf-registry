// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatazoneEnvironmentBlueprintConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing DatazoneEnvironmentBlueprintConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatazoneEnvironmentBlueprintConfigurationState, opts?: pulumi.CustomResourceOptions): DatazoneEnvironmentBlueprintConfiguration {
        return new DatazoneEnvironmentBlueprintConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/datazoneEnvironmentBlueprintConfiguration:DatazoneEnvironmentBlueprintConfiguration';

    /**
     * Returns true if the given object is an instance of DatazoneEnvironmentBlueprintConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatazoneEnvironmentBlueprintConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatazoneEnvironmentBlueprintConfiguration.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    public readonly domainIdentifier!: pulumi.Output<string>;
    public readonly enabledRegions!: pulumi.Output<string[]>;
    public /*out*/ readonly environmentBlueprintId!: pulumi.Output<string>;
    public readonly environmentBlueprintIdentifier!: pulumi.Output<string>;
    public readonly manageAccessRoleArn!: pulumi.Output<string>;
    public readonly provisioningRoleArn!: pulumi.Output<string>;
    public readonly regionalParameters!: pulumi.Output<outputs.DatazoneEnvironmentBlueprintConfigurationRegionalParameter[]>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a DatazoneEnvironmentBlueprintConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatazoneEnvironmentBlueprintConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatazoneEnvironmentBlueprintConfigurationArgs | DatazoneEnvironmentBlueprintConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatazoneEnvironmentBlueprintConfigurationState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["domainIdentifier"] = state ? state.domainIdentifier : undefined;
            resourceInputs["enabledRegions"] = state ? state.enabledRegions : undefined;
            resourceInputs["environmentBlueprintId"] = state ? state.environmentBlueprintId : undefined;
            resourceInputs["environmentBlueprintIdentifier"] = state ? state.environmentBlueprintIdentifier : undefined;
            resourceInputs["manageAccessRoleArn"] = state ? state.manageAccessRoleArn : undefined;
            resourceInputs["provisioningRoleArn"] = state ? state.provisioningRoleArn : undefined;
            resourceInputs["regionalParameters"] = state ? state.regionalParameters : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as DatazoneEnvironmentBlueprintConfigurationArgs | undefined;
            if ((!args || args.domainIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if ((!args || args.enabledRegions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabledRegions'");
            }
            if ((!args || args.environmentBlueprintIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentBlueprintIdentifier'");
            }
            resourceInputs["domainIdentifier"] = args ? args.domainIdentifier : undefined;
            resourceInputs["enabledRegions"] = args ? args.enabledRegions : undefined;
            resourceInputs["environmentBlueprintIdentifier"] = args ? args.environmentBlueprintIdentifier : undefined;
            resourceInputs["manageAccessRoleArn"] = args ? args.manageAccessRoleArn : undefined;
            resourceInputs["provisioningRoleArn"] = args ? args.provisioningRoleArn : undefined;
            resourceInputs["regionalParameters"] = args ? args.regionalParameters : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["environmentBlueprintId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatazoneEnvironmentBlueprintConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatazoneEnvironmentBlueprintConfiguration resources.
 */
export interface DatazoneEnvironmentBlueprintConfigurationState {
    createdAt?: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    domainIdentifier?: pulumi.Input<string>;
    enabledRegions?: pulumi.Input<pulumi.Input<string>[]>;
    environmentBlueprintId?: pulumi.Input<string>;
    environmentBlueprintIdentifier?: pulumi.Input<string>;
    manageAccessRoleArn?: pulumi.Input<string>;
    provisioningRoleArn?: pulumi.Input<string>;
    regionalParameters?: pulumi.Input<pulumi.Input<inputs.DatazoneEnvironmentBlueprintConfigurationRegionalParameter>[]>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatazoneEnvironmentBlueprintConfiguration resource.
 */
export interface DatazoneEnvironmentBlueprintConfigurationArgs {
    domainIdentifier: pulumi.Input<string>;
    enabledRegions: pulumi.Input<pulumi.Input<string>[]>;
    environmentBlueprintIdentifier: pulumi.Input<string>;
    manageAccessRoleArn?: pulumi.Input<string>;
    provisioningRoleArn?: pulumi.Input<string>;
    regionalParameters?: pulumi.Input<pulumi.Input<inputs.DatazoneEnvironmentBlueprintConfigurationRegionalParameter>[]>;
}
