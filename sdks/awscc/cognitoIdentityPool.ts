// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CognitoIdentityPool extends pulumi.CustomResource {
    /**
     * Get an existing CognitoIdentityPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CognitoIdentityPoolState, opts?: pulumi.CustomResourceOptions): CognitoIdentityPool {
        return new CognitoIdentityPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/cognitoIdentityPool:CognitoIdentityPool';

    /**
     * Returns true if the given object is an instance of CognitoIdentityPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CognitoIdentityPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CognitoIdentityPool.__pulumiType;
    }

    public readonly allowClassicFlow!: pulumi.Output<boolean>;
    public readonly allowUnauthenticatedIdentities!: pulumi.Output<boolean>;
    public readonly cognitoEvents!: pulumi.Output<string>;
    public readonly cognitoIdentityProviders!: pulumi.Output<outputs.CognitoIdentityPoolCognitoIdentityProvider[]>;
    public readonly cognitoStreams!: pulumi.Output<outputs.CognitoIdentityPoolCognitoStreams>;
    public readonly developerProviderName!: pulumi.Output<string>;
    public /*out*/ readonly identityPoolId!: pulumi.Output<string>;
    public readonly identityPoolName!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly identityPoolTags!: pulumi.Output<outputs.CognitoIdentityPoolIdentityPoolTag[]>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly openIdConnectProviderArNs!: pulumi.Output<string[]>;
    public readonly pushSync!: pulumi.Output<outputs.CognitoIdentityPoolPushSync>;
    public readonly samlProviderArNs!: pulumi.Output<string[]>;
    public readonly supportedLoginProviders!: pulumi.Output<string>;

    /**
     * Create a CognitoIdentityPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CognitoIdentityPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CognitoIdentityPoolArgs | CognitoIdentityPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CognitoIdentityPoolState | undefined;
            resourceInputs["allowClassicFlow"] = state ? state.allowClassicFlow : undefined;
            resourceInputs["allowUnauthenticatedIdentities"] = state ? state.allowUnauthenticatedIdentities : undefined;
            resourceInputs["cognitoEvents"] = state ? state.cognitoEvents : undefined;
            resourceInputs["cognitoIdentityProviders"] = state ? state.cognitoIdentityProviders : undefined;
            resourceInputs["cognitoStreams"] = state ? state.cognitoStreams : undefined;
            resourceInputs["developerProviderName"] = state ? state.developerProviderName : undefined;
            resourceInputs["identityPoolId"] = state ? state.identityPoolId : undefined;
            resourceInputs["identityPoolName"] = state ? state.identityPoolName : undefined;
            resourceInputs["identityPoolTags"] = state ? state.identityPoolTags : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openIdConnectProviderArNs"] = state ? state.openIdConnectProviderArNs : undefined;
            resourceInputs["pushSync"] = state ? state.pushSync : undefined;
            resourceInputs["samlProviderArNs"] = state ? state.samlProviderArNs : undefined;
            resourceInputs["supportedLoginProviders"] = state ? state.supportedLoginProviders : undefined;
        } else {
            const args = argsOrState as CognitoIdentityPoolArgs | undefined;
            if ((!args || args.allowUnauthenticatedIdentities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowUnauthenticatedIdentities'");
            }
            resourceInputs["allowClassicFlow"] = args ? args.allowClassicFlow : undefined;
            resourceInputs["allowUnauthenticatedIdentities"] = args ? args.allowUnauthenticatedIdentities : undefined;
            resourceInputs["cognitoEvents"] = args ? args.cognitoEvents : undefined;
            resourceInputs["cognitoIdentityProviders"] = args ? args.cognitoIdentityProviders : undefined;
            resourceInputs["cognitoStreams"] = args ? args.cognitoStreams : undefined;
            resourceInputs["developerProviderName"] = args ? args.developerProviderName : undefined;
            resourceInputs["identityPoolName"] = args ? args.identityPoolName : undefined;
            resourceInputs["identityPoolTags"] = args ? args.identityPoolTags : undefined;
            resourceInputs["openIdConnectProviderArNs"] = args ? args.openIdConnectProviderArNs : undefined;
            resourceInputs["pushSync"] = args ? args.pushSync : undefined;
            resourceInputs["samlProviderArNs"] = args ? args.samlProviderArNs : undefined;
            resourceInputs["supportedLoginProviders"] = args ? args.supportedLoginProviders : undefined;
            resourceInputs["identityPoolId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CognitoIdentityPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CognitoIdentityPool resources.
 */
export interface CognitoIdentityPoolState {
    allowClassicFlow?: pulumi.Input<boolean>;
    allowUnauthenticatedIdentities?: pulumi.Input<boolean>;
    cognitoEvents?: pulumi.Input<string>;
    cognitoIdentityProviders?: pulumi.Input<pulumi.Input<inputs.CognitoIdentityPoolCognitoIdentityProvider>[]>;
    cognitoStreams?: pulumi.Input<inputs.CognitoIdentityPoolCognitoStreams>;
    developerProviderName?: pulumi.Input<string>;
    identityPoolId?: pulumi.Input<string>;
    identityPoolName?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    identityPoolTags?: pulumi.Input<pulumi.Input<inputs.CognitoIdentityPoolIdentityPoolTag>[]>;
    name?: pulumi.Input<string>;
    openIdConnectProviderArNs?: pulumi.Input<pulumi.Input<string>[]>;
    pushSync?: pulumi.Input<inputs.CognitoIdentityPoolPushSync>;
    samlProviderArNs?: pulumi.Input<pulumi.Input<string>[]>;
    supportedLoginProviders?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CognitoIdentityPool resource.
 */
export interface CognitoIdentityPoolArgs {
    allowClassicFlow?: pulumi.Input<boolean>;
    allowUnauthenticatedIdentities: pulumi.Input<boolean>;
    cognitoEvents?: pulumi.Input<string>;
    cognitoIdentityProviders?: pulumi.Input<pulumi.Input<inputs.CognitoIdentityPoolCognitoIdentityProvider>[]>;
    cognitoStreams?: pulumi.Input<inputs.CognitoIdentityPoolCognitoStreams>;
    developerProviderName?: pulumi.Input<string>;
    identityPoolName?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    identityPoolTags?: pulumi.Input<pulumi.Input<inputs.CognitoIdentityPoolIdentityPoolTag>[]>;
    openIdConnectProviderArNs?: pulumi.Input<pulumi.Input<string>[]>;
    pushSync?: pulumi.Input<inputs.CognitoIdentityPoolPushSync>;
    samlProviderArNs?: pulumi.Input<pulumi.Input<string>[]>;
    supportedLoginProviders?: pulumi.Input<string>;
}
