// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MediaconnectBridge extends pulumi.CustomResource {
    /**
     * Get an existing MediaconnectBridge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MediaconnectBridgeState, opts?: pulumi.CustomResourceOptions): MediaconnectBridge {
        return new MediaconnectBridge(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/mediaconnectBridge:MediaconnectBridge';

    /**
     * Returns true if the given object is an instance of MediaconnectBridge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MediaconnectBridge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MediaconnectBridge.__pulumiType;
    }

    /**
     * The Amazon Resource Number (ARN) of the bridge.
     */
    public /*out*/ readonly bridgeArn!: pulumi.Output<string>;
    public /*out*/ readonly bridgeState!: pulumi.Output<string>;
    public readonly egressGatewayBridge!: pulumi.Output<outputs.MediaconnectBridgeEgressGatewayBridge>;
    public readonly ingressGatewayBridge!: pulumi.Output<outputs.MediaconnectBridgeIngressGatewayBridge>;
    /**
     * The name of the bridge.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The outputs on this bridge.
     */
    public readonly outputs!: pulumi.Output<outputs.MediaconnectBridgeOutput[]>;
    /**
     * The placement Amazon Resource Number (ARN) of the bridge.
     */
    public readonly placementArn!: pulumi.Output<string>;
    /**
     * The settings for source failover.
     */
    public readonly sourceFailoverConfig!: pulumi.Output<outputs.MediaconnectBridgeSourceFailoverConfig>;
    /**
     * The sources on this bridge.
     */
    public readonly sources!: pulumi.Output<outputs.MediaconnectBridgeSource[]>;

    /**
     * Create a MediaconnectBridge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MediaconnectBridgeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MediaconnectBridgeArgs | MediaconnectBridgeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MediaconnectBridgeState | undefined;
            resourceInputs["bridgeArn"] = state ? state.bridgeArn : undefined;
            resourceInputs["bridgeState"] = state ? state.bridgeState : undefined;
            resourceInputs["egressGatewayBridge"] = state ? state.egressGatewayBridge : undefined;
            resourceInputs["ingressGatewayBridge"] = state ? state.ingressGatewayBridge : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["placementArn"] = state ? state.placementArn : undefined;
            resourceInputs["sourceFailoverConfig"] = state ? state.sourceFailoverConfig : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
        } else {
            const args = argsOrState as MediaconnectBridgeArgs | undefined;
            if ((!args || args.placementArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'placementArn'");
            }
            if ((!args || args.sources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sources'");
            }
            resourceInputs["egressGatewayBridge"] = args ? args.egressGatewayBridge : undefined;
            resourceInputs["ingressGatewayBridge"] = args ? args.ingressGatewayBridge : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outputs"] = args ? args.outputs : undefined;
            resourceInputs["placementArn"] = args ? args.placementArn : undefined;
            resourceInputs["sourceFailoverConfig"] = args ? args.sourceFailoverConfig : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["bridgeArn"] = undefined /*out*/;
            resourceInputs["bridgeState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MediaconnectBridge.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MediaconnectBridge resources.
 */
export interface MediaconnectBridgeState {
    /**
     * The Amazon Resource Number (ARN) of the bridge.
     */
    bridgeArn?: pulumi.Input<string>;
    bridgeState?: pulumi.Input<string>;
    egressGatewayBridge?: pulumi.Input<inputs.MediaconnectBridgeEgressGatewayBridge>;
    ingressGatewayBridge?: pulumi.Input<inputs.MediaconnectBridgeIngressGatewayBridge>;
    /**
     * The name of the bridge.
     */
    name?: pulumi.Input<string>;
    /**
     * The outputs on this bridge.
     */
    outputs?: pulumi.Input<pulumi.Input<inputs.MediaconnectBridgeOutput>[]>;
    /**
     * The placement Amazon Resource Number (ARN) of the bridge.
     */
    placementArn?: pulumi.Input<string>;
    /**
     * The settings for source failover.
     */
    sourceFailoverConfig?: pulumi.Input<inputs.MediaconnectBridgeSourceFailoverConfig>;
    /**
     * The sources on this bridge.
     */
    sources?: pulumi.Input<pulumi.Input<inputs.MediaconnectBridgeSource>[]>;
}

/**
 * The set of arguments for constructing a MediaconnectBridge resource.
 */
export interface MediaconnectBridgeArgs {
    egressGatewayBridge?: pulumi.Input<inputs.MediaconnectBridgeEgressGatewayBridge>;
    ingressGatewayBridge?: pulumi.Input<inputs.MediaconnectBridgeIngressGatewayBridge>;
    /**
     * The name of the bridge.
     */
    name?: pulumi.Input<string>;
    /**
     * The outputs on this bridge.
     */
    outputs?: pulumi.Input<pulumi.Input<inputs.MediaconnectBridgeOutput>[]>;
    /**
     * The placement Amazon Resource Number (ARN) of the bridge.
     */
    placementArn: pulumi.Input<string>;
    /**
     * The settings for source failover.
     */
    sourceFailoverConfig?: pulumi.Input<inputs.MediaconnectBridgeSourceFailoverConfig>;
    /**
     * The sources on this bridge.
     */
    sources: pulumi.Input<pulumi.Input<inputs.MediaconnectBridgeSource>[]>;
}
