// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EvidentlyProject extends pulumi.CustomResource {
    /**
     * Get an existing EvidentlyProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EvidentlyProjectState, opts?: pulumi.CustomResourceOptions): EvidentlyProject {
        return new EvidentlyProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/evidentlyProject:EvidentlyProject';

    /**
     * Returns true if the given object is an instance of EvidentlyProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EvidentlyProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EvidentlyProject.__pulumiType;
    }

    public readonly appConfigResource!: pulumi.Output<outputs.EvidentlyProjectAppConfigResource>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Destinations for data.
     */
    public readonly dataDelivery!: pulumi.Output<outputs.EvidentlyProjectDataDelivery>;
    public readonly description!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.EvidentlyProjectTag[]>;

    /**
     * Create a EvidentlyProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EvidentlyProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EvidentlyProjectArgs | EvidentlyProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EvidentlyProjectState | undefined;
            resourceInputs["appConfigResource"] = state ? state.appConfigResource : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["dataDelivery"] = state ? state.dataDelivery : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as EvidentlyProjectArgs | undefined;
            resourceInputs["appConfigResource"] = args ? args.appConfigResource : undefined;
            resourceInputs["dataDelivery"] = args ? args.dataDelivery : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EvidentlyProject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EvidentlyProject resources.
 */
export interface EvidentlyProjectState {
    appConfigResource?: pulumi.Input<inputs.EvidentlyProjectAppConfigResource>;
    arn?: pulumi.Input<string>;
    /**
     * Destinations for data.
     */
    dataDelivery?: pulumi.Input<inputs.EvidentlyProjectDataDelivery>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EvidentlyProjectTag>[]>;
}

/**
 * The set of arguments for constructing a EvidentlyProject resource.
 */
export interface EvidentlyProjectArgs {
    appConfigResource?: pulumi.Input<inputs.EvidentlyProjectAppConfigResource>;
    /**
     * Destinations for data.
     */
    dataDelivery?: pulumi.Input<inputs.EvidentlyProjectDataDelivery>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EvidentlyProjectTag>[]>;
}
