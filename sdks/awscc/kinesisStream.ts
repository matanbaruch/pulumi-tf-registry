// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KinesisStream extends pulumi.CustomResource {
    /**
     * Get an existing KinesisStream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KinesisStreamState, opts?: pulumi.CustomResourceOptions): KinesisStream {
        return new KinesisStream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/kinesisStream:KinesisStream';

    /**
     * Returns true if the given object is an instance of KinesisStream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KinesisStream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KinesisStream.__pulumiType;
    }

    /**
     * The Amazon resource name (ARN) of the Kinesis stream
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The name of the Kinesis stream.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of hours for the data records that are stored in shards to remain accessible.
     */
    public readonly retentionPeriodHours!: pulumi.Output<number>;
    /**
     * The number of shards that the stream uses. Required when StreamMode = PROVISIONED is passed.
     */
    public readonly shardCount!: pulumi.Output<number>;
    /**
     * When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream.
     */
    public readonly streamEncryption!: pulumi.Output<outputs.KinesisStreamStreamEncryption>;
    /**
     * The mode in which the stream is running.
     */
    public readonly streamModeDetails!: pulumi.Output<outputs.KinesisStreamStreamModeDetails>;
    /**
     * An arbitrary set of tags (key–value pairs) to associate with the Kinesis stream.
     */
    public readonly tags!: pulumi.Output<outputs.KinesisStreamTag[]>;

    /**
     * Create a KinesisStream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KinesisStreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KinesisStreamArgs | KinesisStreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KinesisStreamState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["retentionPeriodHours"] = state ? state.retentionPeriodHours : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["streamEncryption"] = state ? state.streamEncryption : undefined;
            resourceInputs["streamModeDetails"] = state ? state.streamModeDetails : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as KinesisStreamArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["retentionPeriodHours"] = args ? args.retentionPeriodHours : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["streamEncryption"] = args ? args.streamEncryption : undefined;
            resourceInputs["streamModeDetails"] = args ? args.streamModeDetails : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KinesisStream.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KinesisStream resources.
 */
export interface KinesisStreamState {
    /**
     * The Amazon resource name (ARN) of the Kinesis stream
     */
    arn?: pulumi.Input<string>;
    /**
     * The name of the Kinesis stream.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of hours for the data records that are stored in shards to remain accessible.
     */
    retentionPeriodHours?: pulumi.Input<number>;
    /**
     * The number of shards that the stream uses. Required when StreamMode = PROVISIONED is passed.
     */
    shardCount?: pulumi.Input<number>;
    /**
     * When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream.
     */
    streamEncryption?: pulumi.Input<inputs.KinesisStreamStreamEncryption>;
    /**
     * The mode in which the stream is running.
     */
    streamModeDetails?: pulumi.Input<inputs.KinesisStreamStreamModeDetails>;
    /**
     * An arbitrary set of tags (key–value pairs) to associate with the Kinesis stream.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.KinesisStreamTag>[]>;
}

/**
 * The set of arguments for constructing a KinesisStream resource.
 */
export interface KinesisStreamArgs {
    /**
     * The name of the Kinesis stream.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of hours for the data records that are stored in shards to remain accessible.
     */
    retentionPeriodHours?: pulumi.Input<number>;
    /**
     * The number of shards that the stream uses. Required when StreamMode = PROVISIONED is passed.
     */
    shardCount?: pulumi.Input<number>;
    /**
     * When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream.
     */
    streamEncryption?: pulumi.Input<inputs.KinesisStreamStreamEncryption>;
    /**
     * The mode in which the stream is running.
     */
    streamModeDetails?: pulumi.Input<inputs.KinesisStreamStreamModeDetails>;
    /**
     * An arbitrary set of tags (key–value pairs) to associate with the Kinesis stream.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.KinesisStreamTag>[]>;
}
