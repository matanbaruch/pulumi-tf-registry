// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpclatticeService extends pulumi.CustomResource {
    /**
     * Get an existing VpclatticeService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpclatticeServiceState, opts?: pulumi.CustomResourceOptions): VpclatticeService {
        return new VpclatticeService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/vpclatticeService:VpclatticeService';

    /**
     * Returns true if the given object is an instance of VpclatticeService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpclatticeService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpclatticeService.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authType!: pulumi.Output<string>;
    public readonly certificateArn!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly customDomainName!: pulumi.Output<string>;
    public readonly dnsEntry!: pulumi.Output<outputs.VpclatticeServiceDnsEntry>;
    public /*out*/ readonly lastUpdatedAt!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly serviceId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.VpclatticeServiceTag[]>;

    /**
     * Create a VpclatticeService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpclatticeServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpclatticeServiceArgs | VpclatticeServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpclatticeServiceState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["certificateArn"] = state ? state.certificateArn : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customDomainName"] = state ? state.customDomainName : undefined;
            resourceInputs["dnsEntry"] = state ? state.dnsEntry : undefined;
            resourceInputs["lastUpdatedAt"] = state ? state.lastUpdatedAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as VpclatticeServiceArgs | undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["certificateArn"] = args ? args.certificateArn : undefined;
            resourceInputs["customDomainName"] = args ? args.customDomainName : undefined;
            resourceInputs["dnsEntry"] = args ? args.dnsEntry : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["lastUpdatedAt"] = undefined /*out*/;
            resourceInputs["serviceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpclatticeService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpclatticeService resources.
 */
export interface VpclatticeServiceState {
    arn?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    certificateArn?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    customDomainName?: pulumi.Input<string>;
    dnsEntry?: pulumi.Input<inputs.VpclatticeServiceDnsEntry>;
    lastUpdatedAt?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serviceId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VpclatticeServiceTag>[]>;
}

/**
 * The set of arguments for constructing a VpclatticeService resource.
 */
export interface VpclatticeServiceArgs {
    authType?: pulumi.Input<string>;
    certificateArn?: pulumi.Input<string>;
    customDomainName?: pulumi.Input<string>;
    dnsEntry?: pulumi.Input<inputs.VpclatticeServiceDnsEntry>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VpclatticeServiceTag>[]>;
}
