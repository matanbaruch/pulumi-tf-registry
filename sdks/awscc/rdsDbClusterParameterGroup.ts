// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RdsDbClusterParameterGroup extends pulumi.CustomResource {
    /**
     * Get an existing RdsDbClusterParameterGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsDbClusterParameterGroupState, opts?: pulumi.CustomResourceOptions): RdsDbClusterParameterGroup {
        return new RdsDbClusterParameterGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/rdsDbClusterParameterGroup:RdsDbClusterParameterGroup';

    /**
     * Returns true if the given object is an instance of RdsDbClusterParameterGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsDbClusterParameterGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsDbClusterParameterGroup.__pulumiType;
    }

    /**
     * The name of the DB cluster parameter group. Constraints: + Must not match the name of an existing DB cluster parameter
     * group. This value is stored as a lowercase string.
     */
    public readonly dbClusterParameterGroupName!: pulumi.Output<string>;
    /**
     * The description for the DB cluster parameter group.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB
     * cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version
     * compatible with that DB cluster parameter group family. *Aurora MySQL* Example: ``aurora-mysql5.7``, ``aurora-mysql8.0``
     * *Aurora PostgreSQL* Example: ``aurora-postgresql14`` *RDS for MySQL* Example: ``mysql8.0`` *RDS for PostgreSQL* Example:
     * ``postgres13`` To list all of the available parameter group families for a DB engine, use the following command: ``aws
     * rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine>`` For example, to
     * list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command: ``aws
     * rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql`` The
     * output contains duplicates. The following are the valid DB engine values: + ``aurora-mysql`` + ``aurora-postgresql`` +
     * ``mysql`` + ``postgres``
     */
    public readonly family!: pulumi.Output<string>;
    /**
     * Provides a list of parameters for the DB cluster parameter group.
     */
    public readonly parameters!: pulumi.Output<string>;
    /**
     * Tags to assign to the DB cluster parameter group.
     */
    public readonly tags!: pulumi.Output<outputs.RdsDbClusterParameterGroupTag[]>;

    /**
     * Create a RdsDbClusterParameterGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsDbClusterParameterGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsDbClusterParameterGroupArgs | RdsDbClusterParameterGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsDbClusterParameterGroupState | undefined;
            resourceInputs["dbClusterParameterGroupName"] = state ? state.dbClusterParameterGroupName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["family"] = state ? state.family : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as RdsDbClusterParameterGroupArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.family === undefined) && !opts.urn) {
                throw new Error("Missing required property 'family'");
            }
            if ((!args || args.parameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            resourceInputs["dbClusterParameterGroupName"] = args ? args.dbClusterParameterGroupName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["family"] = args ? args.family : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdsDbClusterParameterGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RdsDbClusterParameterGroup resources.
 */
export interface RdsDbClusterParameterGroupState {
    /**
     * The name of the DB cluster parameter group. Constraints: + Must not match the name of an existing DB cluster parameter
     * group. This value is stored as a lowercase string.
     */
    dbClusterParameterGroupName?: pulumi.Input<string>;
    /**
     * The description for the DB cluster parameter group.
     */
    description?: pulumi.Input<string>;
    /**
     * The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB
     * cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version
     * compatible with that DB cluster parameter group family. *Aurora MySQL* Example: ``aurora-mysql5.7``, ``aurora-mysql8.0``
     * *Aurora PostgreSQL* Example: ``aurora-postgresql14`` *RDS for MySQL* Example: ``mysql8.0`` *RDS for PostgreSQL* Example:
     * ``postgres13`` To list all of the available parameter group families for a DB engine, use the following command: ``aws
     * rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine>`` For example, to
     * list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command: ``aws
     * rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql`` The
     * output contains duplicates. The following are the valid DB engine values: + ``aurora-mysql`` + ``aurora-postgresql`` +
     * ``mysql`` + ``postgres``
     */
    family?: pulumi.Input<string>;
    /**
     * Provides a list of parameters for the DB cluster parameter group.
     */
    parameters?: pulumi.Input<string>;
    /**
     * Tags to assign to the DB cluster parameter group.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RdsDbClusterParameterGroupTag>[]>;
}

/**
 * The set of arguments for constructing a RdsDbClusterParameterGroup resource.
 */
export interface RdsDbClusterParameterGroupArgs {
    /**
     * The name of the DB cluster parameter group. Constraints: + Must not match the name of an existing DB cluster parameter
     * group. This value is stored as a lowercase string.
     */
    dbClusterParameterGroupName?: pulumi.Input<string>;
    /**
     * The description for the DB cluster parameter group.
     */
    description: pulumi.Input<string>;
    /**
     * The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB
     * cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version
     * compatible with that DB cluster parameter group family. *Aurora MySQL* Example: ``aurora-mysql5.7``, ``aurora-mysql8.0``
     * *Aurora PostgreSQL* Example: ``aurora-postgresql14`` *RDS for MySQL* Example: ``mysql8.0`` *RDS for PostgreSQL* Example:
     * ``postgres13`` To list all of the available parameter group families for a DB engine, use the following command: ``aws
     * rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine>`` For example, to
     * list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command: ``aws
     * rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql`` The
     * output contains duplicates. The following are the valid DB engine values: + ``aurora-mysql`` + ``aurora-postgresql`` +
     * ``mysql`` + ``postgres``
     */
    family: pulumi.Input<string>;
    /**
     * Provides a list of parameters for the DB cluster parameter group.
     */
    parameters: pulumi.Input<string>;
    /**
     * Tags to assign to the DB cluster parameter group.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RdsDbClusterParameterGroupTag>[]>;
}
