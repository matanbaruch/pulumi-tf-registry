// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TransferWorkflow extends pulumi.CustomResource {
    /**
     * Get an existing TransferWorkflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransferWorkflowState, opts?: pulumi.CustomResourceOptions): TransferWorkflow {
        return new TransferWorkflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/transferWorkflow:TransferWorkflow';

    /**
     * Returns true if the given object is an instance of TransferWorkflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransferWorkflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransferWorkflow.__pulumiType;
    }

    /**
     * Specifies the unique Amazon Resource Name (ARN) for the workflow.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A textual description for the workflow.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies the steps (actions) to take if any errors are encountered during execution of the workflow.
     */
    public readonly onExceptionSteps!: pulumi.Output<outputs.TransferWorkflowOnExceptionStep[]>;
    /**
     * Specifies the details for the steps that are in the specified workflow.
     */
    public readonly steps!: pulumi.Output<outputs.TransferWorkflowStep[]>;
    /**
     * Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any
     * purpose.
     */
    public readonly tags!: pulumi.Output<outputs.TransferWorkflowTag[]>;
    /**
     * A unique identifier for the workflow.
     */
    public /*out*/ readonly workflowId!: pulumi.Output<string>;

    /**
     * Create a TransferWorkflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransferWorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransferWorkflowArgs | TransferWorkflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransferWorkflowState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["onExceptionSteps"] = state ? state.onExceptionSteps : undefined;
            resourceInputs["steps"] = state ? state.steps : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workflowId"] = state ? state.workflowId : undefined;
        } else {
            const args = argsOrState as TransferWorkflowArgs | undefined;
            if ((!args || args.steps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'steps'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["onExceptionSteps"] = args ? args.onExceptionSteps : undefined;
            resourceInputs["steps"] = args ? args.steps : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["workflowId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransferWorkflow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TransferWorkflow resources.
 */
export interface TransferWorkflowState {
    /**
     * Specifies the unique Amazon Resource Name (ARN) for the workflow.
     */
    arn?: pulumi.Input<string>;
    /**
     * A textual description for the workflow.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the steps (actions) to take if any errors are encountered during execution of the workflow.
     */
    onExceptionSteps?: pulumi.Input<pulumi.Input<inputs.TransferWorkflowOnExceptionStep>[]>;
    /**
     * Specifies the details for the steps that are in the specified workflow.
     */
    steps?: pulumi.Input<pulumi.Input<inputs.TransferWorkflowStep>[]>;
    /**
     * Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any
     * purpose.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TransferWorkflowTag>[]>;
    /**
     * A unique identifier for the workflow.
     */
    workflowId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TransferWorkflow resource.
 */
export interface TransferWorkflowArgs {
    /**
     * A textual description for the workflow.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the steps (actions) to take if any errors are encountered during execution of the workflow.
     */
    onExceptionSteps?: pulumi.Input<pulumi.Input<inputs.TransferWorkflowOnExceptionStep>[]>;
    /**
     * Specifies the details for the steps that are in the specified workflow.
     */
    steps: pulumi.Input<pulumi.Input<inputs.TransferWorkflowStep>[]>;
    /**
     * Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any
     * purpose.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TransferWorkflowTag>[]>;
}
