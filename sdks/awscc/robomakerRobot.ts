// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RobomakerRobot extends pulumi.CustomResource {
    /**
     * Get an existing RobomakerRobot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RobomakerRobotState, opts?: pulumi.CustomResourceOptions): RobomakerRobot {
        return new RobomakerRobot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/robomakerRobot:RobomakerRobot';

    /**
     * Returns true if the given object is an instance of RobomakerRobot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RobomakerRobot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RobomakerRobot.__pulumiType;
    }

    /**
     * The target architecture of the robot.
     */
    public readonly architecture!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the fleet.
     */
    public readonly fleet!: pulumi.Output<string>;
    /**
     * The Greengrass group id.
     */
    public readonly greengrassGroupId!: pulumi.Output<string>;
    /**
     * The name for the robot.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A key-value pair to associate with a resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a RobomakerRobot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RobomakerRobotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RobomakerRobotArgs | RobomakerRobotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RobomakerRobotState | undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["fleet"] = state ? state.fleet : undefined;
            resourceInputs["greengrassGroupId"] = state ? state.greengrassGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as RobomakerRobotArgs | undefined;
            if ((!args || args.architecture === undefined) && !opts.urn) {
                throw new Error("Missing required property 'architecture'");
            }
            if ((!args || args.greengrassGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'greengrassGroupId'");
            }
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["fleet"] = args ? args.fleet : undefined;
            resourceInputs["greengrassGroupId"] = args ? args.greengrassGroupId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RobomakerRobot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RobomakerRobot resources.
 */
export interface RobomakerRobotState {
    /**
     * The target architecture of the robot.
     */
    architecture?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the fleet.
     */
    fleet?: pulumi.Input<string>;
    /**
     * The Greengrass group id.
     */
    greengrassGroupId?: pulumi.Input<string>;
    /**
     * The name for the robot.
     */
    name?: pulumi.Input<string>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a RobomakerRobot resource.
 */
export interface RobomakerRobotArgs {
    /**
     * The target architecture of the robot.
     */
    architecture: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the fleet.
     */
    fleet?: pulumi.Input<string>;
    /**
     * The Greengrass group id.
     */
    greengrassGroupId: pulumi.Input<string>;
    /**
     * The name for the robot.
     */
    name?: pulumi.Input<string>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
