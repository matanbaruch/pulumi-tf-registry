// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IotsitewiseAsset extends pulumi.CustomResource {
    /**
     * Get an existing IotsitewiseAsset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotsitewiseAssetState, opts?: pulumi.CustomResourceOptions): IotsitewiseAsset {
        return new IotsitewiseAsset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/iotsitewiseAsset:IotsitewiseAsset';

    /**
     * Returns true if the given object is an instance of IotsitewiseAsset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotsitewiseAsset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotsitewiseAsset.__pulumiType;
    }

    /**
     * The ARN of the asset
     */
    public /*out*/ readonly assetArn!: pulumi.Output<string>;
    /**
     * A description for the asset
     */
    public readonly assetDescription!: pulumi.Output<string>;
    /**
     * The External ID of the asset
     */
    public readonly assetExternalId!: pulumi.Output<string>;
    public readonly assetHierarchies!: pulumi.Output<outputs.IotsitewiseAssetAssetHierarchy[]>;
    /**
     * The ID of the asset
     */
    public /*out*/ readonly assetId!: pulumi.Output<string>;
    /**
     * The ID of the asset model from which to create the asset.
     */
    public readonly assetModelId!: pulumi.Output<string>;
    /**
     * A unique, friendly name for the asset.
     */
    public readonly assetName!: pulumi.Output<string>;
    public readonly assetProperties!: pulumi.Output<outputs.IotsitewiseAssetAssetProperty[]>;
    /**
     * A list of key-value pairs that contain metadata for the asset.
     */
    public readonly tags!: pulumi.Output<outputs.IotsitewiseAssetTag[]>;

    /**
     * Create a IotsitewiseAsset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IotsitewiseAssetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotsitewiseAssetArgs | IotsitewiseAssetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotsitewiseAssetState | undefined;
            resourceInputs["assetArn"] = state ? state.assetArn : undefined;
            resourceInputs["assetDescription"] = state ? state.assetDescription : undefined;
            resourceInputs["assetExternalId"] = state ? state.assetExternalId : undefined;
            resourceInputs["assetHierarchies"] = state ? state.assetHierarchies : undefined;
            resourceInputs["assetId"] = state ? state.assetId : undefined;
            resourceInputs["assetModelId"] = state ? state.assetModelId : undefined;
            resourceInputs["assetName"] = state ? state.assetName : undefined;
            resourceInputs["assetProperties"] = state ? state.assetProperties : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as IotsitewiseAssetArgs | undefined;
            if ((!args || args.assetModelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assetModelId'");
            }
            if ((!args || args.assetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assetName'");
            }
            resourceInputs["assetDescription"] = args ? args.assetDescription : undefined;
            resourceInputs["assetExternalId"] = args ? args.assetExternalId : undefined;
            resourceInputs["assetHierarchies"] = args ? args.assetHierarchies : undefined;
            resourceInputs["assetModelId"] = args ? args.assetModelId : undefined;
            resourceInputs["assetName"] = args ? args.assetName : undefined;
            resourceInputs["assetProperties"] = args ? args.assetProperties : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["assetArn"] = undefined /*out*/;
            resourceInputs["assetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IotsitewiseAsset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IotsitewiseAsset resources.
 */
export interface IotsitewiseAssetState {
    /**
     * The ARN of the asset
     */
    assetArn?: pulumi.Input<string>;
    /**
     * A description for the asset
     */
    assetDescription?: pulumi.Input<string>;
    /**
     * The External ID of the asset
     */
    assetExternalId?: pulumi.Input<string>;
    assetHierarchies?: pulumi.Input<pulumi.Input<inputs.IotsitewiseAssetAssetHierarchy>[]>;
    /**
     * The ID of the asset
     */
    assetId?: pulumi.Input<string>;
    /**
     * The ID of the asset model from which to create the asset.
     */
    assetModelId?: pulumi.Input<string>;
    /**
     * A unique, friendly name for the asset.
     */
    assetName?: pulumi.Input<string>;
    assetProperties?: pulumi.Input<pulumi.Input<inputs.IotsitewiseAssetAssetProperty>[]>;
    /**
     * A list of key-value pairs that contain metadata for the asset.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.IotsitewiseAssetTag>[]>;
}

/**
 * The set of arguments for constructing a IotsitewiseAsset resource.
 */
export interface IotsitewiseAssetArgs {
    /**
     * A description for the asset
     */
    assetDescription?: pulumi.Input<string>;
    /**
     * The External ID of the asset
     */
    assetExternalId?: pulumi.Input<string>;
    assetHierarchies?: pulumi.Input<pulumi.Input<inputs.IotsitewiseAssetAssetHierarchy>[]>;
    /**
     * The ID of the asset model from which to create the asset.
     */
    assetModelId: pulumi.Input<string>;
    /**
     * A unique, friendly name for the asset.
     */
    assetName: pulumi.Input<string>;
    assetProperties?: pulumi.Input<pulumi.Input<inputs.IotsitewiseAssetAssetProperty>[]>;
    /**
     * A list of key-value pairs that contain metadata for the asset.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.IotsitewiseAssetTag>[]>;
}
