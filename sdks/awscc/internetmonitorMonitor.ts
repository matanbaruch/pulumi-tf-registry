// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InternetmonitorMonitor extends pulumi.CustomResource {
    /**
     * Get an existing InternetmonitorMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InternetmonitorMonitorState, opts?: pulumi.CustomResourceOptions): InternetmonitorMonitor {
        return new InternetmonitorMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/internetmonitorMonitor:InternetmonitorMonitor';

    /**
     * Returns true if the given object is an instance of InternetmonitorMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InternetmonitorMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InternetmonitorMonitor.__pulumiType;
    }

    /**
     * The date value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly healthEventsConfig!: pulumi.Output<outputs.InternetmonitorMonitorHealthEventsConfig>;
    public readonly includeLinkedAccounts!: pulumi.Output<boolean>;
    public readonly internetMeasurementsLogDelivery!: pulumi.Output<outputs.InternetmonitorMonitorInternetMeasurementsLogDelivery>;
    public readonly linkedAccountId!: pulumi.Output<string>;
    public readonly maxCityNetworksToMonitor!: pulumi.Output<number>;
    /**
     * The date value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
     */
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;
    public /*out*/ readonly monitorArn!: pulumi.Output<string>;
    public readonly monitorName!: pulumi.Output<string>;
    public /*out*/ readonly processingStatus!: pulumi.Output<string>;
    public /*out*/ readonly processingStatusInfo!: pulumi.Output<string>;
    public readonly resources!: pulumi.Output<string[]>;
    public readonly resourcesToAdds!: pulumi.Output<string[]>;
    public readonly resourcesToRemoves!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.InternetmonitorMonitorTag[]>;
    public readonly trafficPercentageToMonitor!: pulumi.Output<number>;

    /**
     * Create a InternetmonitorMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InternetmonitorMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InternetmonitorMonitorArgs | InternetmonitorMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InternetmonitorMonitorState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["healthEventsConfig"] = state ? state.healthEventsConfig : undefined;
            resourceInputs["includeLinkedAccounts"] = state ? state.includeLinkedAccounts : undefined;
            resourceInputs["internetMeasurementsLogDelivery"] = state ? state.internetMeasurementsLogDelivery : undefined;
            resourceInputs["linkedAccountId"] = state ? state.linkedAccountId : undefined;
            resourceInputs["maxCityNetworksToMonitor"] = state ? state.maxCityNetworksToMonitor : undefined;
            resourceInputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            resourceInputs["monitorArn"] = state ? state.monitorArn : undefined;
            resourceInputs["monitorName"] = state ? state.monitorName : undefined;
            resourceInputs["processingStatus"] = state ? state.processingStatus : undefined;
            resourceInputs["processingStatusInfo"] = state ? state.processingStatusInfo : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["resourcesToAdds"] = state ? state.resourcesToAdds : undefined;
            resourceInputs["resourcesToRemoves"] = state ? state.resourcesToRemoves : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trafficPercentageToMonitor"] = state ? state.trafficPercentageToMonitor : undefined;
        } else {
            const args = argsOrState as InternetmonitorMonitorArgs | undefined;
            if ((!args || args.monitorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorName'");
            }
            resourceInputs["healthEventsConfig"] = args ? args.healthEventsConfig : undefined;
            resourceInputs["includeLinkedAccounts"] = args ? args.includeLinkedAccounts : undefined;
            resourceInputs["internetMeasurementsLogDelivery"] = args ? args.internetMeasurementsLogDelivery : undefined;
            resourceInputs["linkedAccountId"] = args ? args.linkedAccountId : undefined;
            resourceInputs["maxCityNetworksToMonitor"] = args ? args.maxCityNetworksToMonitor : undefined;
            resourceInputs["monitorName"] = args ? args.monitorName : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["resourcesToAdds"] = args ? args.resourcesToAdds : undefined;
            resourceInputs["resourcesToRemoves"] = args ? args.resourcesToRemoves : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trafficPercentageToMonitor"] = args ? args.trafficPercentageToMonitor : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["monitorArn"] = undefined /*out*/;
            resourceInputs["processingStatus"] = undefined /*out*/;
            resourceInputs["processingStatusInfo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InternetmonitorMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InternetmonitorMonitor resources.
 */
export interface InternetmonitorMonitorState {
    /**
     * The date value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
     */
    createdAt?: pulumi.Input<string>;
    healthEventsConfig?: pulumi.Input<inputs.InternetmonitorMonitorHealthEventsConfig>;
    includeLinkedAccounts?: pulumi.Input<boolean>;
    internetMeasurementsLogDelivery?: pulumi.Input<inputs.InternetmonitorMonitorInternetMeasurementsLogDelivery>;
    linkedAccountId?: pulumi.Input<string>;
    maxCityNetworksToMonitor?: pulumi.Input<number>;
    /**
     * The date value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
     */
    modifiedAt?: pulumi.Input<string>;
    monitorArn?: pulumi.Input<string>;
    monitorName?: pulumi.Input<string>;
    processingStatus?: pulumi.Input<string>;
    processingStatusInfo?: pulumi.Input<string>;
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    resourcesToAdds?: pulumi.Input<pulumi.Input<string>[]>;
    resourcesToRemoves?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.InternetmonitorMonitorTag>[]>;
    trafficPercentageToMonitor?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a InternetmonitorMonitor resource.
 */
export interface InternetmonitorMonitorArgs {
    healthEventsConfig?: pulumi.Input<inputs.InternetmonitorMonitorHealthEventsConfig>;
    includeLinkedAccounts?: pulumi.Input<boolean>;
    internetMeasurementsLogDelivery?: pulumi.Input<inputs.InternetmonitorMonitorInternetMeasurementsLogDelivery>;
    linkedAccountId?: pulumi.Input<string>;
    maxCityNetworksToMonitor?: pulumi.Input<number>;
    monitorName: pulumi.Input<string>;
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    resourcesToAdds?: pulumi.Input<pulumi.Input<string>[]>;
    resourcesToRemoves?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.InternetmonitorMonitorTag>[]>;
    trafficPercentageToMonitor?: pulumi.Input<number>;
}
