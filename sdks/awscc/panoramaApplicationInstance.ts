// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PanoramaApplicationInstance extends pulumi.CustomResource {
    /**
     * Get an existing PanoramaApplicationInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PanoramaApplicationInstanceState, opts?: pulumi.CustomResourceOptions): PanoramaApplicationInstance {
        return new PanoramaApplicationInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/panoramaApplicationInstance:PanoramaApplicationInstance';

    /**
     * Returns true if the given object is an instance of PanoramaApplicationInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PanoramaApplicationInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PanoramaApplicationInstance.__pulumiType;
    }

    public /*out*/ readonly applicationInstanceId!: pulumi.Output<string>;
    /**
     * The ID of an application instance to replace with the new instance.
     */
    public readonly applicationInstanceIdToReplace!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly createdTime!: pulumi.Output<number>;
    /**
     * The device's ID.
     */
    public readonly defaultRuntimeContextDevice!: pulumi.Output<string>;
    public /*out*/ readonly defaultRuntimeContextDeviceName!: pulumi.Output<string>;
    /**
     * A description for the application instance.
     */
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly healthStatus!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdatedTime!: pulumi.Output<number>;
    /**
     * Setting overrides for the application manifest.
     */
    public readonly manifestOverridesPayload!: pulumi.Output<outputs.PanoramaApplicationInstanceManifestOverridesPayload>;
    /**
     * The application's manifest document.
     */
    public readonly manifestPayload!: pulumi.Output<outputs.PanoramaApplicationInstanceManifestPayload>;
    /**
     * A name for the application instance.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ARN of a runtime role for the application instance.
     */
    public readonly runtimeRoleArn!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly statusDescription!: pulumi.Output<string>;
    /**
     * Tags for the application instance.
     */
    public readonly tags!: pulumi.Output<outputs.PanoramaApplicationInstanceTag[]>;

    /**
     * Create a PanoramaApplicationInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PanoramaApplicationInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PanoramaApplicationInstanceArgs | PanoramaApplicationInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PanoramaApplicationInstanceState | undefined;
            resourceInputs["applicationInstanceId"] = state ? state.applicationInstanceId : undefined;
            resourceInputs["applicationInstanceIdToReplace"] = state ? state.applicationInstanceIdToReplace : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["defaultRuntimeContextDevice"] = state ? state.defaultRuntimeContextDevice : undefined;
            resourceInputs["defaultRuntimeContextDeviceName"] = state ? state.defaultRuntimeContextDeviceName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["healthStatus"] = state ? state.healthStatus : undefined;
            resourceInputs["lastUpdatedTime"] = state ? state.lastUpdatedTime : undefined;
            resourceInputs["manifestOverridesPayload"] = state ? state.manifestOverridesPayload : undefined;
            resourceInputs["manifestPayload"] = state ? state.manifestPayload : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["runtimeRoleArn"] = state ? state.runtimeRoleArn : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusDescription"] = state ? state.statusDescription : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as PanoramaApplicationInstanceArgs | undefined;
            if ((!args || args.defaultRuntimeContextDevice === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultRuntimeContextDevice'");
            }
            if ((!args || args.manifestPayload === undefined) && !opts.urn) {
                throw new Error("Missing required property 'manifestPayload'");
            }
            resourceInputs["applicationInstanceIdToReplace"] = args ? args.applicationInstanceIdToReplace : undefined;
            resourceInputs["defaultRuntimeContextDevice"] = args ? args.defaultRuntimeContextDevice : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["manifestOverridesPayload"] = args ? args.manifestOverridesPayload : undefined;
            resourceInputs["manifestPayload"] = args ? args.manifestPayload : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["runtimeRoleArn"] = args ? args.runtimeRoleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["applicationInstanceId"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["defaultRuntimeContextDeviceName"] = undefined /*out*/;
            resourceInputs["healthStatus"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusDescription"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PanoramaApplicationInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PanoramaApplicationInstance resources.
 */
export interface PanoramaApplicationInstanceState {
    applicationInstanceId?: pulumi.Input<string>;
    /**
     * The ID of an application instance to replace with the new instance.
     */
    applicationInstanceIdToReplace?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    createdTime?: pulumi.Input<number>;
    /**
     * The device's ID.
     */
    defaultRuntimeContextDevice?: pulumi.Input<string>;
    defaultRuntimeContextDeviceName?: pulumi.Input<string>;
    /**
     * A description for the application instance.
     */
    description?: pulumi.Input<string>;
    healthStatus?: pulumi.Input<string>;
    lastUpdatedTime?: pulumi.Input<number>;
    /**
     * Setting overrides for the application manifest.
     */
    manifestOverridesPayload?: pulumi.Input<inputs.PanoramaApplicationInstanceManifestOverridesPayload>;
    /**
     * The application's manifest document.
     */
    manifestPayload?: pulumi.Input<inputs.PanoramaApplicationInstanceManifestPayload>;
    /**
     * A name for the application instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of a runtime role for the application instance.
     */
    runtimeRoleArn?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    statusDescription?: pulumi.Input<string>;
    /**
     * Tags for the application instance.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PanoramaApplicationInstanceTag>[]>;
}

/**
 * The set of arguments for constructing a PanoramaApplicationInstance resource.
 */
export interface PanoramaApplicationInstanceArgs {
    /**
     * The ID of an application instance to replace with the new instance.
     */
    applicationInstanceIdToReplace?: pulumi.Input<string>;
    /**
     * The device's ID.
     */
    defaultRuntimeContextDevice: pulumi.Input<string>;
    /**
     * A description for the application instance.
     */
    description?: pulumi.Input<string>;
    /**
     * Setting overrides for the application manifest.
     */
    manifestOverridesPayload?: pulumi.Input<inputs.PanoramaApplicationInstanceManifestOverridesPayload>;
    /**
     * The application's manifest document.
     */
    manifestPayload: pulumi.Input<inputs.PanoramaApplicationInstanceManifestPayload>;
    /**
     * A name for the application instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of a runtime role for the application instance.
     */
    runtimeRoleArn?: pulumi.Input<string>;
    /**
     * Tags for the application instance.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PanoramaApplicationInstanceTag>[]>;
}
