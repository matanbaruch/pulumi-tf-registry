// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CeCostCategory extends pulumi.CustomResource {
    /**
     * Get an existing CeCostCategory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CeCostCategoryState, opts?: pulumi.CustomResourceOptions): CeCostCategory {
        return new CeCostCategory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ceCostCategory:CeCostCategory';

    /**
     * Returns true if the given object is an instance of CeCostCategory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CeCostCategory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CeCostCategory.__pulumiType;
    }

    /**
     * Cost category ARN
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The default value for the cost category
     */
    public readonly defaultValue!: pulumi.Output<string>;
    /**
     * ISO 8601 date time with offset format
     */
    public /*out*/ readonly effectiveStart!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ruleVersion!: pulumi.Output<string>;
    /**
     * JSON array format of Expression in Billing and Cost Management API
     */
    public readonly rules!: pulumi.Output<string>;
    /**
     * Json array format of CostCategorySplitChargeRule in Billing and Cost Management API
     */
    public readonly splitChargeRules!: pulumi.Output<string>;

    /**
     * Create a CeCostCategory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CeCostCategoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CeCostCategoryArgs | CeCostCategoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CeCostCategoryState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["defaultValue"] = state ? state.defaultValue : undefined;
            resourceInputs["effectiveStart"] = state ? state.effectiveStart : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ruleVersion"] = state ? state.ruleVersion : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["splitChargeRules"] = state ? state.splitChargeRules : undefined;
        } else {
            const args = argsOrState as CeCostCategoryArgs | undefined;
            if ((!args || args.ruleVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleVersion'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["defaultValue"] = args ? args.defaultValue : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ruleVersion"] = args ? args.ruleVersion : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["splitChargeRules"] = args ? args.splitChargeRules : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["effectiveStart"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CeCostCategory.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CeCostCategory resources.
 */
export interface CeCostCategoryState {
    /**
     * Cost category ARN
     */
    arn?: pulumi.Input<string>;
    /**
     * The default value for the cost category
     */
    defaultValue?: pulumi.Input<string>;
    /**
     * ISO 8601 date time with offset format
     */
    effectiveStart?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ruleVersion?: pulumi.Input<string>;
    /**
     * JSON array format of Expression in Billing and Cost Management API
     */
    rules?: pulumi.Input<string>;
    /**
     * Json array format of CostCategorySplitChargeRule in Billing and Cost Management API
     */
    splitChargeRules?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CeCostCategory resource.
 */
export interface CeCostCategoryArgs {
    /**
     * The default value for the cost category
     */
    defaultValue?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ruleVersion: pulumi.Input<string>;
    /**
     * JSON array format of Expression in Billing and Cost Management API
     */
    rules: pulumi.Input<string>;
    /**
     * Json array format of CostCategorySplitChargeRule in Billing and Cost Management API
     */
    splitChargeRules?: pulumi.Input<string>;
}
