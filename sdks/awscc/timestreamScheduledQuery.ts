// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TimestreamScheduledQuery extends pulumi.CustomResource {
    /**
     * Get an existing TimestreamScheduledQuery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TimestreamScheduledQueryState, opts?: pulumi.CustomResourceOptions): TimestreamScheduledQuery {
        return new TimestreamScheduledQuery(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/timestreamScheduledQuery:TimestreamScheduledQuery';

    /**
     * Returns true if the given object is an instance of TimestreamScheduledQuery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TimestreamScheduledQuery {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TimestreamScheduledQuery.__pulumiType;
    }

    /**
     * Amazon Resource Name of the scheduled query that is generated upon creation.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Using a ClientToken makes the call to CreateScheduledQuery idempotent, in other words, making the same request
     * repeatedly will produce the same result. Making multiple identical CreateScheduledQuery requests has the same effect as
     * making a single request. If CreateScheduledQuery is called without a ClientToken, the Query SDK generates a ClientToken
     * on your behalf. After 8 hours, any request with the same ClientToken is treated as a new request.
     */
    public readonly clientToken!: pulumi.Output<string>;
    /**
     * Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query
     * results.
     */
    public readonly errorReportConfiguration!: pulumi.Output<outputs.TimestreamScheduledQueryErrorReportConfiguration>;
    /**
     * The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the
     * scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID,
     * key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration
     * uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
     */
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when
     * the state is updated or when you delete it.
     */
    public readonly notificationConfiguration!: pulumi.Output<outputs.TimestreamScheduledQueryNotificationConfiguration>;
    /**
     * The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The
     * named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is
     * scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of
     * @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on
     * 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01
     * 00:00:00 when invoking the query.
     */
    public readonly queryString!: pulumi.Output<string>;
    /**
     * Configuration for when the scheduled query is executed.
     */
    public readonly scheduleConfiguration!: pulumi.Output<outputs.TimestreamScheduledQueryScheduleConfiguration>;
    /**
     * The ARN for the IAM role that Timestream will assume when running the scheduled query.
     */
    public readonly scheduledQueryExecutionRoleArn!: pulumi.Output<string>;
    /**
     * The name of the scheduled query. Scheduled query names must be unique within each Region.
     */
    public readonly scheduledQueryName!: pulumi.Output<string>;
    /**
     * Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query
     * results.
     */
    public /*out*/ readonly sqErrorReportConfiguration!: pulumi.Output<string>;
    /**
     * The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the
     * scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID,
     * key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration
     * uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
     */
    public /*out*/ readonly sqKmsKeyId!: pulumi.Output<string>;
    /**
     * The name of the scheduled query. Scheduled query names must be unique within each Region.
     */
    public /*out*/ readonly sqName!: pulumi.Output<string>;
    /**
     * Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when
     * the state is updated or when you delete it.
     */
    public /*out*/ readonly sqNotificationConfiguration!: pulumi.Output<string>;
    /**
     * The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The
     * named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is
     * scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of
     * @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on
     * 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01
     * 00:00:00 when invoking the query.
     */
    public /*out*/ readonly sqQueryString!: pulumi.Output<string>;
    /**
     * Configuration for when the scheduled query is executed.
     */
    public /*out*/ readonly sqScheduleConfiguration!: pulumi.Output<string>;
    /**
     * The ARN for the IAM role that Timestream will assume when running the scheduled query.
     */
    public /*out*/ readonly sqScheduledQueryExecutionRoleArn!: pulumi.Output<string>;
    /**
     * Configuration of target store where scheduled query results are written to.
     */
    public /*out*/ readonly sqTargetConfiguration!: pulumi.Output<string>;
    /**
     * A list of key-value pairs to label the scheduled query.
     */
    public readonly tags!: pulumi.Output<outputs.TimestreamScheduledQueryTag[]>;
    /**
     * Configuration of target store where scheduled query results are written to.
     */
    public readonly targetConfiguration!: pulumi.Output<outputs.TimestreamScheduledQueryTargetConfiguration>;

    /**
     * Create a TimestreamScheduledQuery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TimestreamScheduledQueryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TimestreamScheduledQueryArgs | TimestreamScheduledQueryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TimestreamScheduledQueryState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["clientToken"] = state ? state.clientToken : undefined;
            resourceInputs["errorReportConfiguration"] = state ? state.errorReportConfiguration : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["notificationConfiguration"] = state ? state.notificationConfiguration : undefined;
            resourceInputs["queryString"] = state ? state.queryString : undefined;
            resourceInputs["scheduleConfiguration"] = state ? state.scheduleConfiguration : undefined;
            resourceInputs["scheduledQueryExecutionRoleArn"] = state ? state.scheduledQueryExecutionRoleArn : undefined;
            resourceInputs["scheduledQueryName"] = state ? state.scheduledQueryName : undefined;
            resourceInputs["sqErrorReportConfiguration"] = state ? state.sqErrorReportConfiguration : undefined;
            resourceInputs["sqKmsKeyId"] = state ? state.sqKmsKeyId : undefined;
            resourceInputs["sqName"] = state ? state.sqName : undefined;
            resourceInputs["sqNotificationConfiguration"] = state ? state.sqNotificationConfiguration : undefined;
            resourceInputs["sqQueryString"] = state ? state.sqQueryString : undefined;
            resourceInputs["sqScheduleConfiguration"] = state ? state.sqScheduleConfiguration : undefined;
            resourceInputs["sqScheduledQueryExecutionRoleArn"] = state ? state.sqScheduledQueryExecutionRoleArn : undefined;
            resourceInputs["sqTargetConfiguration"] = state ? state.sqTargetConfiguration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetConfiguration"] = state ? state.targetConfiguration : undefined;
        } else {
            const args = argsOrState as TimestreamScheduledQueryArgs | undefined;
            if ((!args || args.errorReportConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'errorReportConfiguration'");
            }
            if ((!args || args.notificationConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationConfiguration'");
            }
            if ((!args || args.queryString === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryString'");
            }
            if ((!args || args.scheduleConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduleConfiguration'");
            }
            if ((!args || args.scheduledQueryExecutionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduledQueryExecutionRoleArn'");
            }
            resourceInputs["clientToken"] = args ? args.clientToken : undefined;
            resourceInputs["errorReportConfiguration"] = args ? args.errorReportConfiguration : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["notificationConfiguration"] = args ? args.notificationConfiguration : undefined;
            resourceInputs["queryString"] = args ? args.queryString : undefined;
            resourceInputs["scheduleConfiguration"] = args ? args.scheduleConfiguration : undefined;
            resourceInputs["scheduledQueryExecutionRoleArn"] = args ? args.scheduledQueryExecutionRoleArn : undefined;
            resourceInputs["scheduledQueryName"] = args ? args.scheduledQueryName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetConfiguration"] = args ? args.targetConfiguration : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["sqErrorReportConfiguration"] = undefined /*out*/;
            resourceInputs["sqKmsKeyId"] = undefined /*out*/;
            resourceInputs["sqName"] = undefined /*out*/;
            resourceInputs["sqNotificationConfiguration"] = undefined /*out*/;
            resourceInputs["sqQueryString"] = undefined /*out*/;
            resourceInputs["sqScheduleConfiguration"] = undefined /*out*/;
            resourceInputs["sqScheduledQueryExecutionRoleArn"] = undefined /*out*/;
            resourceInputs["sqTargetConfiguration"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TimestreamScheduledQuery.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TimestreamScheduledQuery resources.
 */
export interface TimestreamScheduledQueryState {
    /**
     * Amazon Resource Name of the scheduled query that is generated upon creation.
     */
    arn?: pulumi.Input<string>;
    /**
     * Using a ClientToken makes the call to CreateScheduledQuery idempotent, in other words, making the same request
     * repeatedly will produce the same result. Making multiple identical CreateScheduledQuery requests has the same effect as
     * making a single request. If CreateScheduledQuery is called without a ClientToken, the Query SDK generates a ClientToken
     * on your behalf. After 8 hours, any request with the same ClientToken is treated as a new request.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query
     * results.
     */
    errorReportConfiguration?: pulumi.Input<inputs.TimestreamScheduledQueryErrorReportConfiguration>;
    /**
     * The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the
     * scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID,
     * key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration
     * uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when
     * the state is updated or when you delete it.
     */
    notificationConfiguration?: pulumi.Input<inputs.TimestreamScheduledQueryNotificationConfiguration>;
    /**
     * The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The
     * named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is
     * scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of
     * @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on
     * 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01
     * 00:00:00 when invoking the query.
     */
    queryString?: pulumi.Input<string>;
    /**
     * Configuration for when the scheduled query is executed.
     */
    scheduleConfiguration?: pulumi.Input<inputs.TimestreamScheduledQueryScheduleConfiguration>;
    /**
     * The ARN for the IAM role that Timestream will assume when running the scheduled query.
     */
    scheduledQueryExecutionRoleArn?: pulumi.Input<string>;
    /**
     * The name of the scheduled query. Scheduled query names must be unique within each Region.
     */
    scheduledQueryName?: pulumi.Input<string>;
    /**
     * Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query
     * results.
     */
    sqErrorReportConfiguration?: pulumi.Input<string>;
    /**
     * The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the
     * scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID,
     * key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration
     * uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
     */
    sqKmsKeyId?: pulumi.Input<string>;
    /**
     * The name of the scheduled query. Scheduled query names must be unique within each Region.
     */
    sqName?: pulumi.Input<string>;
    /**
     * Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when
     * the state is updated or when you delete it.
     */
    sqNotificationConfiguration?: pulumi.Input<string>;
    /**
     * The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The
     * named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is
     * scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of
     * @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on
     * 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01
     * 00:00:00 when invoking the query.
     */
    sqQueryString?: pulumi.Input<string>;
    /**
     * Configuration for when the scheduled query is executed.
     */
    sqScheduleConfiguration?: pulumi.Input<string>;
    /**
     * The ARN for the IAM role that Timestream will assume when running the scheduled query.
     */
    sqScheduledQueryExecutionRoleArn?: pulumi.Input<string>;
    /**
     * Configuration of target store where scheduled query results are written to.
     */
    sqTargetConfiguration?: pulumi.Input<string>;
    /**
     * A list of key-value pairs to label the scheduled query.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TimestreamScheduledQueryTag>[]>;
    /**
     * Configuration of target store where scheduled query results are written to.
     */
    targetConfiguration?: pulumi.Input<inputs.TimestreamScheduledQueryTargetConfiguration>;
}

/**
 * The set of arguments for constructing a TimestreamScheduledQuery resource.
 */
export interface TimestreamScheduledQueryArgs {
    /**
     * Using a ClientToken makes the call to CreateScheduledQuery idempotent, in other words, making the same request
     * repeatedly will produce the same result. Making multiple identical CreateScheduledQuery requests has the same effect as
     * making a single request. If CreateScheduledQuery is called without a ClientToken, the Query SDK generates a ClientToken
     * on your behalf. After 8 hours, any request with the same ClientToken is treated as a new request.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query
     * results.
     */
    errorReportConfiguration: pulumi.Input<inputs.TimestreamScheduledQueryErrorReportConfiguration>;
    /**
     * The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the
     * scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID,
     * key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration
     * uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when
     * the state is updated or when you delete it.
     */
    notificationConfiguration: pulumi.Input<inputs.TimestreamScheduledQueryNotificationConfiguration>;
    /**
     * The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The
     * named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is
     * scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of
     * @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on
     * 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01
     * 00:00:00 when invoking the query.
     */
    queryString: pulumi.Input<string>;
    /**
     * Configuration for when the scheduled query is executed.
     */
    scheduleConfiguration: pulumi.Input<inputs.TimestreamScheduledQueryScheduleConfiguration>;
    /**
     * The ARN for the IAM role that Timestream will assume when running the scheduled query.
     */
    scheduledQueryExecutionRoleArn: pulumi.Input<string>;
    /**
     * The name of the scheduled query. Scheduled query names must be unique within each Region.
     */
    scheduledQueryName?: pulumi.Input<string>;
    /**
     * A list of key-value pairs to label the scheduled query.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TimestreamScheduledQueryTag>[]>;
    /**
     * Configuration of target store where scheduled query results are written to.
     */
    targetConfiguration?: pulumi.Input<inputs.TimestreamScheduledQueryTargetConfiguration>;
}
