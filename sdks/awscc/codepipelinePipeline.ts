// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CodepipelinePipeline extends pulumi.CustomResource {
    /**
     * Get an existing CodepipelinePipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodepipelinePipelineState, opts?: pulumi.CustomResourceOptions): CodepipelinePipeline {
        return new CodepipelinePipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/codepipelinePipeline:CodepipelinePipeline';

    /**
     * Returns true if the given object is an instance of CodepipelinePipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CodepipelinePipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodepipelinePipeline.__pulumiType;
    }

    /**
     * The S3 bucket where artifacts for the pipeline are stored.
     */
    public readonly artifactStore!: pulumi.Output<outputs.CodepipelinePipelineArtifactStore>;
    /**
     * A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline
     * Region and for each cross-region action in the pipeline.
     */
    public readonly artifactStores!: pulumi.Output<outputs.CodepipelinePipelineArtifactStore[]>;
    /**
     * Represents the input of a DisableStageTransition action.
     */
    public readonly disableInboundStageTransitions!: pulumi.Output<outputs.CodepipelinePipelineDisableInboundStageTransition[]>;
    /**
     * The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
     */
    public readonly executionMode!: pulumi.Output<string>;
    /**
     * The name of the pipeline.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor
     * your pipeline features and cost to the needs of your applications.
     */
    public readonly pipelineType!: pulumi.Output<string>;
    /**
     * Indicates whether to rerun the CodePipeline pipeline after you update it.
     */
    public readonly restartExecutionOnUpdate!: pulumi.Output<boolean>;
    /**
     * The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to
     * assume roles for actions with an actionRoleArn
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * Represents information about a stage and its definition.
     */
    public readonly stages!: pulumi.Output<outputs.CodepipelinePipelineStage[]>;
    /**
     * Specifies the tags applied to the pipeline.
     */
    public readonly tags!: pulumi.Output<outputs.CodepipelinePipelineTag[]>;
    /**
     * The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline.
     */
    public readonly triggers!: pulumi.Output<outputs.CodepipelinePipelineTrigger[]>;
    /**
     * A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore
     * characters, and the values must match [A-Za-z0-9@\-_]+.
     */
    public readonly variables!: pulumi.Output<outputs.CodepipelinePipelineVariable[]>;
    /**
     * The version of the pipeline.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a CodepipelinePipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodepipelinePipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodepipelinePipelineArgs | CodepipelinePipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodepipelinePipelineState | undefined;
            resourceInputs["artifactStore"] = state ? state.artifactStore : undefined;
            resourceInputs["artifactStores"] = state ? state.artifactStores : undefined;
            resourceInputs["disableInboundStageTransitions"] = state ? state.disableInboundStageTransitions : undefined;
            resourceInputs["executionMode"] = state ? state.executionMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pipelineType"] = state ? state.pipelineType : undefined;
            resourceInputs["restartExecutionOnUpdate"] = state ? state.restartExecutionOnUpdate : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["stages"] = state ? state.stages : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
            resourceInputs["variables"] = state ? state.variables : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as CodepipelinePipelineArgs | undefined;
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.stages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stages'");
            }
            resourceInputs["artifactStore"] = args ? args.artifactStore : undefined;
            resourceInputs["artifactStores"] = args ? args.artifactStores : undefined;
            resourceInputs["disableInboundStageTransitions"] = args ? args.disableInboundStageTransitions : undefined;
            resourceInputs["executionMode"] = args ? args.executionMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pipelineType"] = args ? args.pipelineType : undefined;
            resourceInputs["restartExecutionOnUpdate"] = args ? args.restartExecutionOnUpdate : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["stages"] = args ? args.stages : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["variables"] = args ? args.variables : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodepipelinePipeline.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CodepipelinePipeline resources.
 */
export interface CodepipelinePipelineState {
    /**
     * The S3 bucket where artifacts for the pipeline are stored.
     */
    artifactStore?: pulumi.Input<inputs.CodepipelinePipelineArtifactStore>;
    /**
     * A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline
     * Region and for each cross-region action in the pipeline.
     */
    artifactStores?: pulumi.Input<pulumi.Input<inputs.CodepipelinePipelineArtifactStore>[]>;
    /**
     * Represents the input of a DisableStageTransition action.
     */
    disableInboundStageTransitions?: pulumi.Input<pulumi.Input<inputs.CodepipelinePipelineDisableInboundStageTransition>[]>;
    /**
     * The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
     */
    executionMode?: pulumi.Input<string>;
    /**
     * The name of the pipeline.
     */
    name?: pulumi.Input<string>;
    /**
     * CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor
     * your pipeline features and cost to the needs of your applications.
     */
    pipelineType?: pulumi.Input<string>;
    /**
     * Indicates whether to rerun the CodePipeline pipeline after you update it.
     */
    restartExecutionOnUpdate?: pulumi.Input<boolean>;
    /**
     * The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to
     * assume roles for actions with an actionRoleArn
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Represents information about a stage and its definition.
     */
    stages?: pulumi.Input<pulumi.Input<inputs.CodepipelinePipelineStage>[]>;
    /**
     * Specifies the tags applied to the pipeline.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CodepipelinePipelineTag>[]>;
    /**
     * The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline.
     */
    triggers?: pulumi.Input<pulumi.Input<inputs.CodepipelinePipelineTrigger>[]>;
    /**
     * A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore
     * characters, and the values must match [A-Za-z0-9@\-_]+.
     */
    variables?: pulumi.Input<pulumi.Input<inputs.CodepipelinePipelineVariable>[]>;
    /**
     * The version of the pipeline.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CodepipelinePipeline resource.
 */
export interface CodepipelinePipelineArgs {
    /**
     * The S3 bucket where artifacts for the pipeline are stored.
     */
    artifactStore?: pulumi.Input<inputs.CodepipelinePipelineArtifactStore>;
    /**
     * A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline
     * Region and for each cross-region action in the pipeline.
     */
    artifactStores?: pulumi.Input<pulumi.Input<inputs.CodepipelinePipelineArtifactStore>[]>;
    /**
     * Represents the input of a DisableStageTransition action.
     */
    disableInboundStageTransitions?: pulumi.Input<pulumi.Input<inputs.CodepipelinePipelineDisableInboundStageTransition>[]>;
    /**
     * The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
     */
    executionMode?: pulumi.Input<string>;
    /**
     * The name of the pipeline.
     */
    name?: pulumi.Input<string>;
    /**
     * CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor
     * your pipeline features and cost to the needs of your applications.
     */
    pipelineType?: pulumi.Input<string>;
    /**
     * Indicates whether to rerun the CodePipeline pipeline after you update it.
     */
    restartExecutionOnUpdate?: pulumi.Input<boolean>;
    /**
     * The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to
     * assume roles for actions with an actionRoleArn
     */
    roleArn: pulumi.Input<string>;
    /**
     * Represents information about a stage and its definition.
     */
    stages: pulumi.Input<pulumi.Input<inputs.CodepipelinePipelineStage>[]>;
    /**
     * Specifies the tags applied to the pipeline.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CodepipelinePipelineTag>[]>;
    /**
     * The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline.
     */
    triggers?: pulumi.Input<pulumi.Input<inputs.CodepipelinePipelineTrigger>[]>;
    /**
     * A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore
     * characters, and the values must match [A-Za-z0-9@\-_]+.
     */
    variables?: pulumi.Input<pulumi.Input<inputs.CodepipelinePipelineVariable>[]>;
}
