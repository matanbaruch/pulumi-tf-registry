// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LightsailDisk extends pulumi.CustomResource {
    /**
     * Get an existing LightsailDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LightsailDiskState, opts?: pulumi.CustomResourceOptions): LightsailDisk {
        return new LightsailDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lightsailDisk:LightsailDisk';

    /**
     * Returns true if the given object is an instance of LightsailDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LightsailDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LightsailDisk.__pulumiType;
    }

    /**
     * An array of objects representing the add-ons to enable for the new instance.
     */
    public readonly addOns!: pulumi.Output<outputs.LightsailDiskAddOn[]>;
    /**
     * Name of the attached Lightsail Instance
     */
    public /*out*/ readonly attachedTo!: pulumi.Output<string>;
    /**
     * Attachment State of the Lightsail disk
     */
    public /*out*/ readonly attachmentState!: pulumi.Output<string>;
    /**
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure
     * to add the include Availability Zones parameter to your request.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    public /*out*/ readonly diskArn!: pulumi.Output<string>;
    /**
     * The names to use for your new Lightsail disk.
     */
    public readonly diskName!: pulumi.Output<string>;
    /**
     * Iops of the Lightsail disk
     */
    public /*out*/ readonly iops!: pulumi.Output<number>;
    /**
     * Check is Disk is attached state
     */
    public /*out*/ readonly isAttached!: pulumi.Output<boolean>;
    /**
     * Location of a resource.
     */
    public readonly location!: pulumi.Output<outputs.LightsailDiskLocation>;
    /**
     * Path of the attached Disk
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * Resource type of Lightsail instance.
     */
    public /*out*/ readonly resourceType!: pulumi.Output<string>;
    /**
     * Size of the Lightsail disk
     */
    public readonly sizeInGb!: pulumi.Output<number>;
    /**
     * State of the Lightsail disk
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Support code to help identify any issues
     */
    public /*out*/ readonly supportCode!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.LightsailDiskTag[]>;

    /**
     * Create a LightsailDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LightsailDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LightsailDiskArgs | LightsailDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LightsailDiskState | undefined;
            resourceInputs["addOns"] = state ? state.addOns : undefined;
            resourceInputs["attachedTo"] = state ? state.attachedTo : undefined;
            resourceInputs["attachmentState"] = state ? state.attachmentState : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["diskArn"] = state ? state.diskArn : undefined;
            resourceInputs["diskName"] = state ? state.diskName : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["isAttached"] = state ? state.isAttached : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["sizeInGb"] = state ? state.sizeInGb : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["supportCode"] = state ? state.supportCode : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LightsailDiskArgs | undefined;
            if ((!args || args.diskName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskName'");
            }
            if ((!args || args.sizeInGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizeInGb'");
            }
            resourceInputs["addOns"] = args ? args.addOns : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["diskName"] = args ? args.diskName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["sizeInGb"] = args ? args.sizeInGb : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["attachedTo"] = undefined /*out*/;
            resourceInputs["attachmentState"] = undefined /*out*/;
            resourceInputs["diskArn"] = undefined /*out*/;
            resourceInputs["iops"] = undefined /*out*/;
            resourceInputs["isAttached"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["supportCode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LightsailDisk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LightsailDisk resources.
 */
export interface LightsailDiskState {
    /**
     * An array of objects representing the add-ons to enable for the new instance.
     */
    addOns?: pulumi.Input<pulumi.Input<inputs.LightsailDiskAddOn>[]>;
    /**
     * Name of the attached Lightsail Instance
     */
    attachedTo?: pulumi.Input<string>;
    /**
     * Attachment State of the Lightsail disk
     */
    attachmentState?: pulumi.Input<string>;
    /**
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure
     * to add the include Availability Zones parameter to your request.
     */
    availabilityZone?: pulumi.Input<string>;
    diskArn?: pulumi.Input<string>;
    /**
     * The names to use for your new Lightsail disk.
     */
    diskName?: pulumi.Input<string>;
    /**
     * Iops of the Lightsail disk
     */
    iops?: pulumi.Input<number>;
    /**
     * Check is Disk is attached state
     */
    isAttached?: pulumi.Input<boolean>;
    /**
     * Location of a resource.
     */
    location?: pulumi.Input<inputs.LightsailDiskLocation>;
    /**
     * Path of the attached Disk
     */
    path?: pulumi.Input<string>;
    /**
     * Resource type of Lightsail instance.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Size of the Lightsail disk
     */
    sizeInGb?: pulumi.Input<number>;
    /**
     * State of the Lightsail disk
     */
    state?: pulumi.Input<string>;
    /**
     * Support code to help identify any issues
     */
    supportCode?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LightsailDiskTag>[]>;
}

/**
 * The set of arguments for constructing a LightsailDisk resource.
 */
export interface LightsailDiskArgs {
    /**
     * An array of objects representing the add-ons to enable for the new instance.
     */
    addOns?: pulumi.Input<pulumi.Input<inputs.LightsailDiskAddOn>[]>;
    /**
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure
     * to add the include Availability Zones parameter to your request.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The names to use for your new Lightsail disk.
     */
    diskName: pulumi.Input<string>;
    /**
     * Location of a resource.
     */
    location?: pulumi.Input<inputs.LightsailDiskLocation>;
    /**
     * Size of the Lightsail disk
     */
    sizeInGb: pulumi.Input<number>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LightsailDiskTag>[]>;
}
