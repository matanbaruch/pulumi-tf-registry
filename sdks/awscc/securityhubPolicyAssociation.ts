// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SecurityhubPolicyAssociation extends pulumi.CustomResource {
    /**
     * Get an existing SecurityhubPolicyAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityhubPolicyAssociationState, opts?: pulumi.CustomResourceOptions): SecurityhubPolicyAssociation {
        return new SecurityhubPolicyAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/securityhubPolicyAssociation:SecurityhubPolicyAssociation';

    /**
     * Returns true if the given object is an instance of SecurityhubPolicyAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityhubPolicyAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityhubPolicyAssociation.__pulumiType;
    }

    /**
     * A unique identifier to indicates if the target has an association
     */
    public /*out*/ readonly associationIdentifier!: pulumi.Output<string>;
    /**
     * The current status of the association between the specified target and the configuration
     */
    public /*out*/ readonly associationStatus!: pulumi.Output<string>;
    /**
     * An explanation for a FAILED value for AssociationStatus
     */
    public /*out*/ readonly associationStatusMessage!: pulumi.Output<string>;
    /**
     * Indicates whether the association between the specified target and the configuration was directly applied by the
     * Security Hub delegated administrator or inherited from a parent
     */
    public /*out*/ readonly associationType!: pulumi.Output<string>;
    /**
     * The universally unique identifier (UUID) of the configuration policy or a value of SELF_MANAGED_SECURITY_HUB for a
     * self-managed configuration
     */
    public readonly configurationPolicyId!: pulumi.Output<string>;
    /**
     * The identifier of the target account, organizational unit, or the root
     */
    public readonly targetId!: pulumi.Output<string>;
    /**
     * Indicates whether the target is an AWS account, organizational unit, or the organization root
     */
    public readonly targetType!: pulumi.Output<string>;
    /**
     * The date and time, in UTC and ISO 8601 format, that the configuration policy association was last updated
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a SecurityhubPolicyAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityhubPolicyAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityhubPolicyAssociationArgs | SecurityhubPolicyAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityhubPolicyAssociationState | undefined;
            resourceInputs["associationIdentifier"] = state ? state.associationIdentifier : undefined;
            resourceInputs["associationStatus"] = state ? state.associationStatus : undefined;
            resourceInputs["associationStatusMessage"] = state ? state.associationStatusMessage : undefined;
            resourceInputs["associationType"] = state ? state.associationType : undefined;
            resourceInputs["configurationPolicyId"] = state ? state.configurationPolicyId : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as SecurityhubPolicyAssociationArgs | undefined;
            if ((!args || args.configurationPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationPolicyId'");
            }
            if ((!args || args.targetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            if ((!args || args.targetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetType'");
            }
            resourceInputs["configurationPolicyId"] = args ? args.configurationPolicyId : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["associationIdentifier"] = undefined /*out*/;
            resourceInputs["associationStatus"] = undefined /*out*/;
            resourceInputs["associationStatusMessage"] = undefined /*out*/;
            resourceInputs["associationType"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityhubPolicyAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecurityhubPolicyAssociation resources.
 */
export interface SecurityhubPolicyAssociationState {
    /**
     * A unique identifier to indicates if the target has an association
     */
    associationIdentifier?: pulumi.Input<string>;
    /**
     * The current status of the association between the specified target and the configuration
     */
    associationStatus?: pulumi.Input<string>;
    /**
     * An explanation for a FAILED value for AssociationStatus
     */
    associationStatusMessage?: pulumi.Input<string>;
    /**
     * Indicates whether the association between the specified target and the configuration was directly applied by the
     * Security Hub delegated administrator or inherited from a parent
     */
    associationType?: pulumi.Input<string>;
    /**
     * The universally unique identifier (UUID) of the configuration policy or a value of SELF_MANAGED_SECURITY_HUB for a
     * self-managed configuration
     */
    configurationPolicyId?: pulumi.Input<string>;
    /**
     * The identifier of the target account, organizational unit, or the root
     */
    targetId?: pulumi.Input<string>;
    /**
     * Indicates whether the target is an AWS account, organizational unit, or the organization root
     */
    targetType?: pulumi.Input<string>;
    /**
     * The date and time, in UTC and ISO 8601 format, that the configuration policy association was last updated
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityhubPolicyAssociation resource.
 */
export interface SecurityhubPolicyAssociationArgs {
    /**
     * The universally unique identifier (UUID) of the configuration policy or a value of SELF_MANAGED_SECURITY_HUB for a
     * self-managed configuration
     */
    configurationPolicyId: pulumi.Input<string>;
    /**
     * The identifier of the target account, organizational unit, or the root
     */
    targetId: pulumi.Input<string>;
    /**
     * Indicates whether the target is an AWS account, organizational unit, or the organization root
     */
    targetType: pulumi.Input<string>;
}
