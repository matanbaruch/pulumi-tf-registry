// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedshiftEventSubscription extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftEventSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftEventSubscriptionState, opts?: pulumi.CustomResourceOptions): RedshiftEventSubscription {
        return new RedshiftEventSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/redshiftEventSubscription:RedshiftEventSubscription';

    /**
     * Returns true if the given object is an instance of RedshiftEventSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftEventSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftEventSubscription.__pulumiType;
    }

    /**
     * The name of the Amazon Redshift event notification subscription.
     */
    public /*out*/ readonly custSubscriptionId!: pulumi.Output<string>;
    /**
     * The AWS account associated with the Amazon Redshift event notification subscription.
     */
    public /*out*/ readonly customerAwsId!: pulumi.Output<string>;
    /**
     * A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate
     * it.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Specifies the Amazon Redshift event categories to be published by the event notification subscription.
     */
    public readonly eventCategories!: pulumi.Output<string[]>;
    /**
     * The list of Amazon Redshift event categories specified in the event notification subscription.
     */
    public /*out*/ readonly eventCategoriesLists!: pulumi.Output<string[]>;
    /**
     * Specifies the Amazon Redshift event severity to be published by the event notification subscription.
     */
    public readonly severity!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications.
     */
    public readonly snsTopicArn!: pulumi.Output<string>;
    /**
     * A list of one or more identifiers of Amazon Redshift source objects.
     */
    public readonly sourceIds!: pulumi.Output<string[]>;
    /**
     * A list of the sources that publish events to the Amazon Redshift event notification subscription.
     */
    public /*out*/ readonly sourceIdsLists!: pulumi.Output<string[]>;
    /**
     * The type of source that will be generating the events.
     */
    public readonly sourceType!: pulumi.Output<string>;
    /**
     * The status of the Amazon Redshift event notification subscription.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The date and time the Amazon Redshift event notification subscription was created.
     */
    public /*out*/ readonly subscriptionCreationTime!: pulumi.Output<string>;
    /**
     * The name of the Amazon Redshift event notification subscription
     */
    public readonly subscriptionName!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.RedshiftEventSubscriptionTag[]>;

    /**
     * Create a RedshiftEventSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftEventSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftEventSubscriptionArgs | RedshiftEventSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftEventSubscriptionState | undefined;
            resourceInputs["custSubscriptionId"] = state ? state.custSubscriptionId : undefined;
            resourceInputs["customerAwsId"] = state ? state.customerAwsId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["eventCategories"] = state ? state.eventCategories : undefined;
            resourceInputs["eventCategoriesLists"] = state ? state.eventCategoriesLists : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["snsTopicArn"] = state ? state.snsTopicArn : undefined;
            resourceInputs["sourceIds"] = state ? state.sourceIds : undefined;
            resourceInputs["sourceIdsLists"] = state ? state.sourceIdsLists : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subscriptionCreationTime"] = state ? state.subscriptionCreationTime : undefined;
            resourceInputs["subscriptionName"] = state ? state.subscriptionName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as RedshiftEventSubscriptionArgs | undefined;
            if ((!args || args.subscriptionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionName'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventCategories"] = args ? args.eventCategories : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["snsTopicArn"] = args ? args.snsTopicArn : undefined;
            resourceInputs["sourceIds"] = args ? args.sourceIds : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["subscriptionName"] = args ? args.subscriptionName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["custSubscriptionId"] = undefined /*out*/;
            resourceInputs["customerAwsId"] = undefined /*out*/;
            resourceInputs["eventCategoriesLists"] = undefined /*out*/;
            resourceInputs["sourceIdsLists"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subscriptionCreationTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedshiftEventSubscription.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftEventSubscription resources.
 */
export interface RedshiftEventSubscriptionState {
    /**
     * The name of the Amazon Redshift event notification subscription.
     */
    custSubscriptionId?: pulumi.Input<string>;
    /**
     * The AWS account associated with the Amazon Redshift event notification subscription.
     */
    customerAwsId?: pulumi.Input<string>;
    /**
     * A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate
     * it.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the Amazon Redshift event categories to be published by the event notification subscription.
     */
    eventCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of Amazon Redshift event categories specified in the event notification subscription.
     */
    eventCategoriesLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the Amazon Redshift event severity to be published by the event notification subscription.
     */
    severity?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications.
     */
    snsTopicArn?: pulumi.Input<string>;
    /**
     * A list of one or more identifiers of Amazon Redshift source objects.
     */
    sourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of the sources that publish events to the Amazon Redshift event notification subscription.
     */
    sourceIdsLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of source that will be generating the events.
     */
    sourceType?: pulumi.Input<string>;
    /**
     * The status of the Amazon Redshift event notification subscription.
     */
    status?: pulumi.Input<string>;
    /**
     * The date and time the Amazon Redshift event notification subscription was created.
     */
    subscriptionCreationTime?: pulumi.Input<string>;
    /**
     * The name of the Amazon Redshift event notification subscription
     */
    subscriptionName?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RedshiftEventSubscriptionTag>[]>;
}

/**
 * The set of arguments for constructing a RedshiftEventSubscription resource.
 */
export interface RedshiftEventSubscriptionArgs {
    /**
     * A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate
     * it.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the Amazon Redshift event categories to be published by the event notification subscription.
     */
    eventCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the Amazon Redshift event severity to be published by the event notification subscription.
     */
    severity?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications.
     */
    snsTopicArn?: pulumi.Input<string>;
    /**
     * A list of one or more identifiers of Amazon Redshift source objects.
     */
    sourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of source that will be generating the events.
     */
    sourceType?: pulumi.Input<string>;
    /**
     * The name of the Amazon Redshift event notification subscription
     */
    subscriptionName: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RedshiftEventSubscriptionTag>[]>;
}
