// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Ec2Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2SubnetState, opts?: pulumi.CustomResourceOptions): Ec2Subnet {
        return new Ec2Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2Subnet:Ec2Subnet';

    /**
     * Returns true if the given object is an instance of Ec2Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2Subnet.__pulumiType;
    }

    /**
     * Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
     * If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
     */
    public readonly assignIpv6AddressOnCreation!: pulumi.Output<boolean>;
    /**
     * The Availability Zone of the subnet. If you update this property, you must also update the ``CidrBlock`` property.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * The AZ ID of the subnet.
     */
    public readonly availabilityZoneId!: pulumi.Output<string>;
    /**
     * The IPv4 CIDR block assigned to the subnet. If you update this property, we create a new subnet, and then delete the
     * existing one.
     */
    public readonly cidrBlock!: pulumi.Output<string>;
    /**
     * Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6
     * addresses for IPv4-only destinations. You must first configure a NAT gateway in a public subnet (separate from the
     * subnet containing the IPv6-only workloads). For example, the subnet containing the NAT gateway should have a
     * ``0.0.0.0/0`` route pointing to the internet gateway. For more information, see [Configure DNS64 and
     * NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-nat64-dns64.html#nat-gateway-nat64-dns64-walkthrough)
     * in the *User Guide*.
     */
    public readonly enableDns64!: pulumi.Output<boolean>;
    /**
     * Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network
     * interfaces in this subnet are the secondary network interface (eth1).
     */
    public readonly enableLniAtDeviceIndex!: pulumi.Output<number>;
    /**
     * An IPv4 IPAM pool ID for the subnet.
     */
    public readonly ipv4IpamPoolId!: pulumi.Output<string>;
    /**
     * An IPv4 netmask length for the subnet.
     */
    public readonly ipv4NetmaskLength!: pulumi.Output<number>;
    /**
     * The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
     */
    public readonly ipv6CidrBlock!: pulumi.Output<string>;
    /**
     * The IPv6 network ranges for the subnet, in CIDR notation.
     */
    public /*out*/ readonly ipv6CidrBlocks!: pulumi.Output<string[]>;
    /**
     * An IPv6 IPAM pool ID for the subnet.
     */
    public readonly ipv6IpamPoolId!: pulumi.Output<string>;
    /**
     * Indicates whether this is an IPv6 only subnet. For more information, see [Subnet
     * basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
     */
    public readonly ipv6Native!: pulumi.Output<boolean>;
    /**
     * An IPv6 netmask length for the subnet.
     */
    public readonly ipv6NetmaskLength!: pulumi.Output<number>;
    /**
     * Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``. AWS
     * charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP
     * addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing
     * page](https://docs.aws.amazon.com/vpc/pricing/).
     */
    public readonly mapPublicIpOnLaunch!: pulumi.Output<boolean>;
    public /*out*/ readonly networkAclAssociationId!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the Outpost.
     */
    public readonly outpostArn!: pulumi.Output<string>;
    /**
     * The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances
     * should be handled. For more information, see [Amazon EC2 instance hostname
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*. Available
     * options: + EnableResourceNameDnsAAAARecord (true | false) + EnableResourceNameDnsARecord (true | false) + HostnameType
     * (ip-name | resource-name)
     */
    public readonly privateDnsNameOptionsOnLaunch!: pulumi.Output<outputs.Ec2SubnetPrivateDnsNameOptionsOnLaunch>;
    public /*out*/ readonly subnetId!: pulumi.Output<string>;
    /**
     * Any tags assigned to the subnet.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2SubnetTag[]>;
    /**
     * The ID of the VPC the subnet is in. If you update this property, you must also update the ``CidrBlock`` property.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Ec2Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2SubnetArgs | Ec2SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2SubnetState | undefined;
            resourceInputs["assignIpv6AddressOnCreation"] = state ? state.assignIpv6AddressOnCreation : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["availabilityZoneId"] = state ? state.availabilityZoneId : undefined;
            resourceInputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            resourceInputs["enableDns64"] = state ? state.enableDns64 : undefined;
            resourceInputs["enableLniAtDeviceIndex"] = state ? state.enableLniAtDeviceIndex : undefined;
            resourceInputs["ipv4IpamPoolId"] = state ? state.ipv4IpamPoolId : undefined;
            resourceInputs["ipv4NetmaskLength"] = state ? state.ipv4NetmaskLength : undefined;
            resourceInputs["ipv6CidrBlock"] = state ? state.ipv6CidrBlock : undefined;
            resourceInputs["ipv6CidrBlocks"] = state ? state.ipv6CidrBlocks : undefined;
            resourceInputs["ipv6IpamPoolId"] = state ? state.ipv6IpamPoolId : undefined;
            resourceInputs["ipv6Native"] = state ? state.ipv6Native : undefined;
            resourceInputs["ipv6NetmaskLength"] = state ? state.ipv6NetmaskLength : undefined;
            resourceInputs["mapPublicIpOnLaunch"] = state ? state.mapPublicIpOnLaunch : undefined;
            resourceInputs["networkAclAssociationId"] = state ? state.networkAclAssociationId : undefined;
            resourceInputs["outpostArn"] = state ? state.outpostArn : undefined;
            resourceInputs["privateDnsNameOptionsOnLaunch"] = state ? state.privateDnsNameOptionsOnLaunch : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as Ec2SubnetArgs | undefined;
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["assignIpv6AddressOnCreation"] = args ? args.assignIpv6AddressOnCreation : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["availabilityZoneId"] = args ? args.availabilityZoneId : undefined;
            resourceInputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            resourceInputs["enableDns64"] = args ? args.enableDns64 : undefined;
            resourceInputs["enableLniAtDeviceIndex"] = args ? args.enableLniAtDeviceIndex : undefined;
            resourceInputs["ipv4IpamPoolId"] = args ? args.ipv4IpamPoolId : undefined;
            resourceInputs["ipv4NetmaskLength"] = args ? args.ipv4NetmaskLength : undefined;
            resourceInputs["ipv6CidrBlock"] = args ? args.ipv6CidrBlock : undefined;
            resourceInputs["ipv6IpamPoolId"] = args ? args.ipv6IpamPoolId : undefined;
            resourceInputs["ipv6Native"] = args ? args.ipv6Native : undefined;
            resourceInputs["ipv6NetmaskLength"] = args ? args.ipv6NetmaskLength : undefined;
            resourceInputs["mapPublicIpOnLaunch"] = args ? args.mapPublicIpOnLaunch : undefined;
            resourceInputs["outpostArn"] = args ? args.outpostArn : undefined;
            resourceInputs["privateDnsNameOptionsOnLaunch"] = args ? args.privateDnsNameOptionsOnLaunch : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["ipv6CidrBlocks"] = undefined /*out*/;
            resourceInputs["networkAclAssociationId"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2Subnet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2Subnet resources.
 */
export interface Ec2SubnetState {
    /**
     * Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
     * If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
     */
    assignIpv6AddressOnCreation?: pulumi.Input<boolean>;
    /**
     * The Availability Zone of the subnet. If you update this property, you must also update the ``CidrBlock`` property.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The AZ ID of the subnet.
     */
    availabilityZoneId?: pulumi.Input<string>;
    /**
     * The IPv4 CIDR block assigned to the subnet. If you update this property, we create a new subnet, and then delete the
     * existing one.
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6
     * addresses for IPv4-only destinations. You must first configure a NAT gateway in a public subnet (separate from the
     * subnet containing the IPv6-only workloads). For example, the subnet containing the NAT gateway should have a
     * ``0.0.0.0/0`` route pointing to the internet gateway. For more information, see [Configure DNS64 and
     * NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-nat64-dns64.html#nat-gateway-nat64-dns64-walkthrough)
     * in the *User Guide*.
     */
    enableDns64?: pulumi.Input<boolean>;
    /**
     * Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network
     * interfaces in this subnet are the secondary network interface (eth1).
     */
    enableLniAtDeviceIndex?: pulumi.Input<number>;
    /**
     * An IPv4 IPAM pool ID for the subnet.
     */
    ipv4IpamPoolId?: pulumi.Input<string>;
    /**
     * An IPv4 netmask length for the subnet.
     */
    ipv4NetmaskLength?: pulumi.Input<number>;
    /**
     * The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    /**
     * The IPv6 network ranges for the subnet, in CIDR notation.
     */
    ipv6CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An IPv6 IPAM pool ID for the subnet.
     */
    ipv6IpamPoolId?: pulumi.Input<string>;
    /**
     * Indicates whether this is an IPv6 only subnet. For more information, see [Subnet
     * basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
     */
    ipv6Native?: pulumi.Input<boolean>;
    /**
     * An IPv6 netmask length for the subnet.
     */
    ipv6NetmaskLength?: pulumi.Input<number>;
    /**
     * Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``. AWS
     * charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP
     * addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing
     * page](https://docs.aws.amazon.com/vpc/pricing/).
     */
    mapPublicIpOnLaunch?: pulumi.Input<boolean>;
    networkAclAssociationId?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Outpost.
     */
    outpostArn?: pulumi.Input<string>;
    /**
     * The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances
     * should be handled. For more information, see [Amazon EC2 instance hostname
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*. Available
     * options: + EnableResourceNameDnsAAAARecord (true | false) + EnableResourceNameDnsARecord (true | false) + HostnameType
     * (ip-name | resource-name)
     */
    privateDnsNameOptionsOnLaunch?: pulumi.Input<inputs.Ec2SubnetPrivateDnsNameOptionsOnLaunch>;
    subnetId?: pulumi.Input<string>;
    /**
     * Any tags assigned to the subnet.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2SubnetTag>[]>;
    /**
     * The ID of the VPC the subnet is in. If you update this property, you must also update the ``CidrBlock`` property.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2Subnet resource.
 */
export interface Ec2SubnetArgs {
    /**
     * Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
     * If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
     */
    assignIpv6AddressOnCreation?: pulumi.Input<boolean>;
    /**
     * The Availability Zone of the subnet. If you update this property, you must also update the ``CidrBlock`` property.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The AZ ID of the subnet.
     */
    availabilityZoneId?: pulumi.Input<string>;
    /**
     * The IPv4 CIDR block assigned to the subnet. If you update this property, we create a new subnet, and then delete the
     * existing one.
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6
     * addresses for IPv4-only destinations. You must first configure a NAT gateway in a public subnet (separate from the
     * subnet containing the IPv6-only workloads). For example, the subnet containing the NAT gateway should have a
     * ``0.0.0.0/0`` route pointing to the internet gateway. For more information, see [Configure DNS64 and
     * NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-nat64-dns64.html#nat-gateway-nat64-dns64-walkthrough)
     * in the *User Guide*.
     */
    enableDns64?: pulumi.Input<boolean>;
    /**
     * Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network
     * interfaces in this subnet are the secondary network interface (eth1).
     */
    enableLniAtDeviceIndex?: pulumi.Input<number>;
    /**
     * An IPv4 IPAM pool ID for the subnet.
     */
    ipv4IpamPoolId?: pulumi.Input<string>;
    /**
     * An IPv4 netmask length for the subnet.
     */
    ipv4NetmaskLength?: pulumi.Input<number>;
    /**
     * The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    /**
     * An IPv6 IPAM pool ID for the subnet.
     */
    ipv6IpamPoolId?: pulumi.Input<string>;
    /**
     * Indicates whether this is an IPv6 only subnet. For more information, see [Subnet
     * basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
     */
    ipv6Native?: pulumi.Input<boolean>;
    /**
     * An IPv6 netmask length for the subnet.
     */
    ipv6NetmaskLength?: pulumi.Input<number>;
    /**
     * Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``. AWS
     * charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP
     * addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing
     * page](https://docs.aws.amazon.com/vpc/pricing/).
     */
    mapPublicIpOnLaunch?: pulumi.Input<boolean>;
    /**
     * The Amazon Resource Name (ARN) of the Outpost.
     */
    outpostArn?: pulumi.Input<string>;
    /**
     * The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances
     * should be handled. For more information, see [Amazon EC2 instance hostname
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*. Available
     * options: + EnableResourceNameDnsAAAARecord (true | false) + EnableResourceNameDnsARecord (true | false) + HostnameType
     * (ip-name | resource-name)
     */
    privateDnsNameOptionsOnLaunch?: pulumi.Input<inputs.Ec2SubnetPrivateDnsNameOptionsOnLaunch>;
    /**
     * Any tags assigned to the subnet.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2SubnetTag>[]>;
    /**
     * The ID of the VPC the subnet is in. If you update this property, you must also update the ``CidrBlock`` property.
     */
    vpcId: pulumi.Input<string>;
}
