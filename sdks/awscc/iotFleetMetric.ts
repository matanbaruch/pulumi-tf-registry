// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IotFleetMetric extends pulumi.CustomResource {
    /**
     * Get an existing IotFleetMetric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotFleetMetricState, opts?: pulumi.CustomResourceOptions): IotFleetMetric {
        return new IotFleetMetric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/iotFleetMetric:IotFleetMetric';

    /**
     * Returns true if the given object is an instance of IotFleetMetric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotFleetMetric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotFleetMetric.__pulumiType;
    }

    /**
     * The aggregation field to perform aggregation and metric emission
     */
    public readonly aggregationField!: pulumi.Output<string>;
    /**
     * Aggregation types supported by Fleet Indexing
     */
    public readonly aggregationType!: pulumi.Output<outputs.IotFleetMetricAggregationType>;
    /**
     * The creation date of a fleet metric
     */
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    /**
     * The description of a fleet metric
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The index name of a fleet metric
     */
    public readonly indexName!: pulumi.Output<string>;
    /**
     * The last modified date of a fleet metric
     */
    public /*out*/ readonly lastModifiedDate!: pulumi.Output<string>;
    /**
     * The Amazon Resource Number (ARN) of a fleet metric metric
     */
    public /*out*/ readonly metricArn!: pulumi.Output<string>;
    /**
     * The name of the fleet metric
     */
    public readonly metricName!: pulumi.Output<string>;
    /**
     * The period of metric emission in seconds
     */
    public readonly period!: pulumi.Output<number>;
    /**
     * The Fleet Indexing query used by a fleet metric
     */
    public readonly queryString!: pulumi.Output<string>;
    /**
     * The version of a Fleet Indexing query used by a fleet metric
     */
    public readonly queryVersion!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource
     */
    public readonly tags!: pulumi.Output<outputs.IotFleetMetricTag[]>;
    /**
     * The unit of data points emitted by a fleet metric
     */
    public readonly unit!: pulumi.Output<string>;
    /**
     * The version of a fleet metric
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a IotFleetMetric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IotFleetMetricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotFleetMetricArgs | IotFleetMetricState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotFleetMetricState | undefined;
            resourceInputs["aggregationField"] = state ? state.aggregationField : undefined;
            resourceInputs["aggregationType"] = state ? state.aggregationType : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["indexName"] = state ? state.indexName : undefined;
            resourceInputs["lastModifiedDate"] = state ? state.lastModifiedDate : undefined;
            resourceInputs["metricArn"] = state ? state.metricArn : undefined;
            resourceInputs["metricName"] = state ? state.metricName : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["queryString"] = state ? state.queryString : undefined;
            resourceInputs["queryVersion"] = state ? state.queryVersion : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["unit"] = state ? state.unit : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as IotFleetMetricArgs | undefined;
            if ((!args || args.metricName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricName'");
            }
            resourceInputs["aggregationField"] = args ? args.aggregationField : undefined;
            resourceInputs["aggregationType"] = args ? args.aggregationType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["indexName"] = args ? args.indexName : undefined;
            resourceInputs["metricName"] = args ? args.metricName : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["queryString"] = args ? args.queryString : undefined;
            resourceInputs["queryVersion"] = args ? args.queryVersion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["unit"] = args ? args.unit : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["lastModifiedDate"] = undefined /*out*/;
            resourceInputs["metricArn"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IotFleetMetric.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IotFleetMetric resources.
 */
export interface IotFleetMetricState {
    /**
     * The aggregation field to perform aggregation and metric emission
     */
    aggregationField?: pulumi.Input<string>;
    /**
     * Aggregation types supported by Fleet Indexing
     */
    aggregationType?: pulumi.Input<inputs.IotFleetMetricAggregationType>;
    /**
     * The creation date of a fleet metric
     */
    creationDate?: pulumi.Input<string>;
    /**
     * The description of a fleet metric
     */
    description?: pulumi.Input<string>;
    /**
     * The index name of a fleet metric
     */
    indexName?: pulumi.Input<string>;
    /**
     * The last modified date of a fleet metric
     */
    lastModifiedDate?: pulumi.Input<string>;
    /**
     * The Amazon Resource Number (ARN) of a fleet metric metric
     */
    metricArn?: pulumi.Input<string>;
    /**
     * The name of the fleet metric
     */
    metricName?: pulumi.Input<string>;
    /**
     * The period of metric emission in seconds
     */
    period?: pulumi.Input<number>;
    /**
     * The Fleet Indexing query used by a fleet metric
     */
    queryString?: pulumi.Input<string>;
    /**
     * The version of a Fleet Indexing query used by a fleet metric
     */
    queryVersion?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.IotFleetMetricTag>[]>;
    /**
     * The unit of data points emitted by a fleet metric
     */
    unit?: pulumi.Input<string>;
    /**
     * The version of a fleet metric
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a IotFleetMetric resource.
 */
export interface IotFleetMetricArgs {
    /**
     * The aggregation field to perform aggregation and metric emission
     */
    aggregationField?: pulumi.Input<string>;
    /**
     * Aggregation types supported by Fleet Indexing
     */
    aggregationType?: pulumi.Input<inputs.IotFleetMetricAggregationType>;
    /**
     * The description of a fleet metric
     */
    description?: pulumi.Input<string>;
    /**
     * The index name of a fleet metric
     */
    indexName?: pulumi.Input<string>;
    /**
     * The name of the fleet metric
     */
    metricName: pulumi.Input<string>;
    /**
     * The period of metric emission in seconds
     */
    period?: pulumi.Input<number>;
    /**
     * The Fleet Indexing query used by a fleet metric
     */
    queryString?: pulumi.Input<string>;
    /**
     * The version of a Fleet Indexing query used by a fleet metric
     */
    queryVersion?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.IotFleetMetricTag>[]>;
    /**
     * The unit of data points emitted by a fleet metric
     */
    unit?: pulumi.Input<string>;
}
