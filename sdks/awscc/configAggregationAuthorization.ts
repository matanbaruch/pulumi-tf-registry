// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConfigAggregationAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing ConfigAggregationAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigAggregationAuthorizationState, opts?: pulumi.CustomResourceOptions): ConfigAggregationAuthorization {
        return new ConfigAggregationAuthorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/configAggregationAuthorization:ConfigAggregationAuthorization';

    /**
     * Returns true if the given object is an instance of ConfigAggregationAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigAggregationAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigAggregationAuthorization.__pulumiType;
    }

    /**
     * The ARN of the AggregationAuthorization.
     */
    public /*out*/ readonly aggregationAuthorizationArn!: pulumi.Output<string>;
    /**
     * The 12-digit account ID of the account authorized to aggregate data.
     */
    public readonly authorizedAccountId!: pulumi.Output<string>;
    /**
     * The region authorized to collect aggregated data.
     */
    public readonly authorizedAwsRegion!: pulumi.Output<string>;
    /**
     * The tags for the AggregationAuthorization.
     */
    public readonly tags!: pulumi.Output<outputs.ConfigAggregationAuthorizationTag[]>;

    /**
     * Create a ConfigAggregationAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigAggregationAuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigAggregationAuthorizationArgs | ConfigAggregationAuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigAggregationAuthorizationState | undefined;
            resourceInputs["aggregationAuthorizationArn"] = state ? state.aggregationAuthorizationArn : undefined;
            resourceInputs["authorizedAccountId"] = state ? state.authorizedAccountId : undefined;
            resourceInputs["authorizedAwsRegion"] = state ? state.authorizedAwsRegion : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ConfigAggregationAuthorizationArgs | undefined;
            if ((!args || args.authorizedAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizedAccountId'");
            }
            if ((!args || args.authorizedAwsRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizedAwsRegion'");
            }
            resourceInputs["authorizedAccountId"] = args ? args.authorizedAccountId : undefined;
            resourceInputs["authorizedAwsRegion"] = args ? args.authorizedAwsRegion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["aggregationAuthorizationArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigAggregationAuthorization.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigAggregationAuthorization resources.
 */
export interface ConfigAggregationAuthorizationState {
    /**
     * The ARN of the AggregationAuthorization.
     */
    aggregationAuthorizationArn?: pulumi.Input<string>;
    /**
     * The 12-digit account ID of the account authorized to aggregate data.
     */
    authorizedAccountId?: pulumi.Input<string>;
    /**
     * The region authorized to collect aggregated data.
     */
    authorizedAwsRegion?: pulumi.Input<string>;
    /**
     * The tags for the AggregationAuthorization.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ConfigAggregationAuthorizationTag>[]>;
}

/**
 * The set of arguments for constructing a ConfigAggregationAuthorization resource.
 */
export interface ConfigAggregationAuthorizationArgs {
    /**
     * The 12-digit account ID of the account authorized to aggregate data.
     */
    authorizedAccountId: pulumi.Input<string>;
    /**
     * The region authorized to collect aggregated data.
     */
    authorizedAwsRegion: pulumi.Input<string>;
    /**
     * The tags for the AggregationAuthorization.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ConfigAggregationAuthorizationTag>[]>;
}
