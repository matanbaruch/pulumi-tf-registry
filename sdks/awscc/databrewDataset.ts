// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabrewDataset extends pulumi.CustomResource {
    /**
     * Get an existing DatabrewDataset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabrewDatasetState, opts?: pulumi.CustomResourceOptions): DatabrewDataset {
        return new DatabrewDataset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/databrewDataset:DatabrewDataset';

    /**
     * Returns true if the given object is an instance of DatabrewDataset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabrewDataset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabrewDataset.__pulumiType;
    }

    /**
     * Dataset format
     */
    public readonly format!: pulumi.Output<string>;
    /**
     * Format options for dataset
     */
    public readonly formatOptions!: pulumi.Output<outputs.DatabrewDatasetFormatOptions>;
    /**
     * Input
     */
    public readonly input!: pulumi.Output<outputs.DatabrewDatasetInput>;
    /**
     * Dataset name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * PathOptions
     */
    public readonly pathOptions!: pulumi.Output<outputs.DatabrewDatasetPathOptions>;
    public readonly tags!: pulumi.Output<outputs.DatabrewDatasetTag[]>;

    /**
     * Create a DatabrewDataset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabrewDatasetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabrewDatasetArgs | DatabrewDatasetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabrewDatasetState | undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["formatOptions"] = state ? state.formatOptions : undefined;
            resourceInputs["input"] = state ? state.input : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pathOptions"] = state ? state.pathOptions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DatabrewDatasetArgs | undefined;
            if ((!args || args.input === undefined) && !opts.urn) {
                throw new Error("Missing required property 'input'");
            }
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["formatOptions"] = args ? args.formatOptions : undefined;
            resourceInputs["input"] = args ? args.input : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pathOptions"] = args ? args.pathOptions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabrewDataset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabrewDataset resources.
 */
export interface DatabrewDatasetState {
    /**
     * Dataset format
     */
    format?: pulumi.Input<string>;
    /**
     * Format options for dataset
     */
    formatOptions?: pulumi.Input<inputs.DatabrewDatasetFormatOptions>;
    /**
     * Input
     */
    input?: pulumi.Input<inputs.DatabrewDatasetInput>;
    /**
     * Dataset name
     */
    name?: pulumi.Input<string>;
    /**
     * PathOptions
     */
    pathOptions?: pulumi.Input<inputs.DatabrewDatasetPathOptions>;
    tags?: pulumi.Input<pulumi.Input<inputs.DatabrewDatasetTag>[]>;
}

/**
 * The set of arguments for constructing a DatabrewDataset resource.
 */
export interface DatabrewDatasetArgs {
    /**
     * Dataset format
     */
    format?: pulumi.Input<string>;
    /**
     * Format options for dataset
     */
    formatOptions?: pulumi.Input<inputs.DatabrewDatasetFormatOptions>;
    /**
     * Input
     */
    input: pulumi.Input<inputs.DatabrewDatasetInput>;
    /**
     * Dataset name
     */
    name?: pulumi.Input<string>;
    /**
     * PathOptions
     */
    pathOptions?: pulumi.Input<inputs.DatabrewDatasetPathOptions>;
    tags?: pulumi.Input<pulumi.Input<inputs.DatabrewDatasetTag>[]>;
}
