// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogsMetricFilter extends pulumi.CustomResource {
    /**
     * Get an existing LogsMetricFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogsMetricFilterState, opts?: pulumi.CustomResourceOptions): LogsMetricFilter {
        return new LogsMetricFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/logsMetricFilter:LogsMetricFilter';

    /**
     * Returns true if the given object is an instance of LogsMetricFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogsMetricFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogsMetricFilter.__pulumiType;
    }

    /**
     * The name of the metric filter.
     */
    public readonly filterName!: pulumi.Output<string>;
    /**
     * A filter pattern for extracting metric data out of ingested log events. For more information, see [Filter and Pattern
     * Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    public readonly filterPattern!: pulumi.Output<string>;
    /**
     * The name of an existing log group that you want to associate with this metric filter.
     */
    public readonly logGroupName!: pulumi.Output<string>;
    /**
     * The metric transformations.
     */
    public readonly metricTransformations!: pulumi.Output<outputs.LogsMetricFilterMetricTransformation[]>;

    /**
     * Create a LogsMetricFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogsMetricFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogsMetricFilterArgs | LogsMetricFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogsMetricFilterState | undefined;
            resourceInputs["filterName"] = state ? state.filterName : undefined;
            resourceInputs["filterPattern"] = state ? state.filterPattern : undefined;
            resourceInputs["logGroupName"] = state ? state.logGroupName : undefined;
            resourceInputs["metricTransformations"] = state ? state.metricTransformations : undefined;
        } else {
            const args = argsOrState as LogsMetricFilterArgs | undefined;
            if ((!args || args.filterPattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterPattern'");
            }
            if ((!args || args.logGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logGroupName'");
            }
            if ((!args || args.metricTransformations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricTransformations'");
            }
            resourceInputs["filterName"] = args ? args.filterName : undefined;
            resourceInputs["filterPattern"] = args ? args.filterPattern : undefined;
            resourceInputs["logGroupName"] = args ? args.logGroupName : undefined;
            resourceInputs["metricTransformations"] = args ? args.metricTransformations : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogsMetricFilter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogsMetricFilter resources.
 */
export interface LogsMetricFilterState {
    /**
     * The name of the metric filter.
     */
    filterName?: pulumi.Input<string>;
    /**
     * A filter pattern for extracting metric data out of ingested log events. For more information, see [Filter and Pattern
     * Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    filterPattern?: pulumi.Input<string>;
    /**
     * The name of an existing log group that you want to associate with this metric filter.
     */
    logGroupName?: pulumi.Input<string>;
    /**
     * The metric transformations.
     */
    metricTransformations?: pulumi.Input<pulumi.Input<inputs.LogsMetricFilterMetricTransformation>[]>;
}

/**
 * The set of arguments for constructing a LogsMetricFilter resource.
 */
export interface LogsMetricFilterArgs {
    /**
     * The name of the metric filter.
     */
    filterName?: pulumi.Input<string>;
    /**
     * A filter pattern for extracting metric data out of ingested log events. For more information, see [Filter and Pattern
     * Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    filterPattern: pulumi.Input<string>;
    /**
     * The name of an existing log group that you want to associate with this metric filter.
     */
    logGroupName: pulumi.Input<string>;
    /**
     * The metric transformations.
     */
    metricTransformations: pulumi.Input<pulumi.Input<inputs.LogsMetricFilterMetricTransformation>[]>;
}
