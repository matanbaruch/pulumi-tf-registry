// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CodegurureviewerRepositoryAssociation extends pulumi.CustomResource {
    /**
     * Get an existing CodegurureviewerRepositoryAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodegurureviewerRepositoryAssociationState, opts?: pulumi.CustomResourceOptions): CodegurureviewerRepositoryAssociation {
        return new CodegurureviewerRepositoryAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/codegurureviewerRepositoryAssociation:CodegurureviewerRepositoryAssociation';

    /**
     * Returns true if the given object is an instance of CodegurureviewerRepositoryAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CodegurureviewerRepositoryAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodegurureviewerRepositoryAssociation.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the repository association.
     */
    public /*out*/ readonly associationArn!: pulumi.Output<string>;
    /**
     * The name of the S3 bucket associated with an associated S3 repository. It must start with `codeguru-reviewer-`.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
     */
    public readonly connectionArn!: pulumi.Output<string>;
    /**
     * Name of the repository to be associated.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The owner of the repository. For a Bitbucket repository, this is the username for the account that owns the repository.
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * The tags associated with a repository association.
     */
    public readonly tags!: pulumi.Output<outputs.CodegurureviewerRepositoryAssociationTag[]>;
    /**
     * The type of repository to be associated.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a CodegurureviewerRepositoryAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodegurureviewerRepositoryAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodegurureviewerRepositoryAssociationArgs | CodegurureviewerRepositoryAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodegurureviewerRepositoryAssociationState | undefined;
            resourceInputs["associationArn"] = state ? state.associationArn : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["connectionArn"] = state ? state.connectionArn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CodegurureviewerRepositoryAssociationArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["connectionArn"] = args ? args.connectionArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["associationArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodegurureviewerRepositoryAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CodegurureviewerRepositoryAssociation resources.
 */
export interface CodegurureviewerRepositoryAssociationState {
    /**
     * The Amazon Resource Name (ARN) of the repository association.
     */
    associationArn?: pulumi.Input<string>;
    /**
     * The name of the S3 bucket associated with an associated S3 repository. It must start with `codeguru-reviewer-`.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
     */
    connectionArn?: pulumi.Input<string>;
    /**
     * Name of the repository to be associated.
     */
    name?: pulumi.Input<string>;
    /**
     * The owner of the repository. For a Bitbucket repository, this is the username for the account that owns the repository.
     */
    owner?: pulumi.Input<string>;
    /**
     * The tags associated with a repository association.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CodegurureviewerRepositoryAssociationTag>[]>;
    /**
     * The type of repository to be associated.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CodegurureviewerRepositoryAssociation resource.
 */
export interface CodegurureviewerRepositoryAssociationArgs {
    /**
     * The name of the S3 bucket associated with an associated S3 repository. It must start with `codeguru-reviewer-`.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
     */
    connectionArn?: pulumi.Input<string>;
    /**
     * Name of the repository to be associated.
     */
    name?: pulumi.Input<string>;
    /**
     * The owner of the repository. For a Bitbucket repository, this is the username for the account that owns the repository.
     */
    owner?: pulumi.Input<string>;
    /**
     * The tags associated with a repository association.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CodegurureviewerRepositoryAssociationTag>[]>;
    /**
     * The type of repository to be associated.
     */
    type: pulumi.Input<string>;
}
