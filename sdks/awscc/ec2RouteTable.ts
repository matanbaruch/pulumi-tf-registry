// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2RouteTable extends pulumi.CustomResource {
    /**
     * Get an existing Ec2RouteTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2RouteTableState, opts?: pulumi.CustomResourceOptions): Ec2RouteTable {
        return new Ec2RouteTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2RouteTable:Ec2RouteTable';

    /**
     * Returns true if the given object is an instance of Ec2RouteTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2RouteTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2RouteTable.__pulumiType;
    }

    public /*out*/ readonly routeTableId!: pulumi.Output<string>;
    /**
     * Any tags assigned to the route table.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2RouteTableTag[]>;
    /**
     * The ID of the VPC.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Ec2RouteTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2RouteTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2RouteTableArgs | Ec2RouteTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2RouteTableState | undefined;
            resourceInputs["routeTableId"] = state ? state.routeTableId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as Ec2RouteTableArgs | undefined;
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["routeTableId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2RouteTable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2RouteTable resources.
 */
export interface Ec2RouteTableState {
    routeTableId?: pulumi.Input<string>;
    /**
     * Any tags assigned to the route table.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2RouteTableTag>[]>;
    /**
     * The ID of the VPC.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2RouteTable resource.
 */
export interface Ec2RouteTableArgs {
    /**
     * Any tags assigned to the route table.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2RouteTableTag>[]>;
    /**
     * The ID of the VPC.
     */
    vpcId: pulumi.Input<string>;
}
