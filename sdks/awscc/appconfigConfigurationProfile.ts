// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppconfigConfigurationProfile extends pulumi.CustomResource {
    /**
     * Get an existing AppconfigConfigurationProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppconfigConfigurationProfileState, opts?: pulumi.CustomResourceOptions): AppconfigConfigurationProfile {
        return new AppconfigConfigurationProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/appconfigConfigurationProfile:AppconfigConfigurationProfile';

    /**
     * Returns true if the given object is an instance of AppconfigConfigurationProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppconfigConfigurationProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppconfigConfigurationProfile.__pulumiType;
    }

    /**
     * The application ID.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * The configuration profile ID
     */
    public /*out*/ readonly configurationProfileId!: pulumi.Output<string>;
    /**
     * A description of the configuration profile.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name of the AWS Key Management Service key to encrypt new configuration data versions in the AWS
     * AppConfig hosted configuration store. This attribute is only used for hosted configuration types. To encrypt data
     * managed in other configuration stores, see the documentation for how to specify an AWS KMS key for that particular
     * service.
     */
    public /*out*/ readonly kmsKeyArn!: pulumi.Output<string>;
    /**
     * The AWS Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or
     * updated.
     */
    public readonly kmsKeyIdentifier!: pulumi.Output<string>;
    /**
     * A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM)
     * document, an SSM Parameter Store parameter, or an Amazon S3 object.
     */
    public readonly locationUri!: pulumi.Output<string>;
    /**
     * A name for the configuration profile.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ARN of an IAM role with permission to access the configuration at the specified LocationUri.
     */
    public readonly retrievalRoleArn!: pulumi.Output<string>;
    /**
     * Metadata to assign to the configuration profile. Tags help organize and categorize your AWS AppConfig resources. Each
     * tag consists of a key and an optional value, both of which you define.
     */
    public readonly tags!: pulumi.Output<outputs.AppconfigConfigurationProfileTag[]>;
    /**
     * The type of configurations contained in the profile. When calling this API, enter one of the following values for Type:
     * AWS.AppConfig.FeatureFlags, AWS.Freeform
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * A list of methods for validating the configuration.
     */
    public readonly validators!: pulumi.Output<outputs.AppconfigConfigurationProfileValidator[]>;

    /**
     * Create a AppconfigConfigurationProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppconfigConfigurationProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppconfigConfigurationProfileArgs | AppconfigConfigurationProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppconfigConfigurationProfileState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["configurationProfileId"] = state ? state.configurationProfileId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["kmsKeyIdentifier"] = state ? state.kmsKeyIdentifier : undefined;
            resourceInputs["locationUri"] = state ? state.locationUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["retrievalRoleArn"] = state ? state.retrievalRoleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validators"] = state ? state.validators : undefined;
        } else {
            const args = argsOrState as AppconfigConfigurationProfileArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.locationUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationUri'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["kmsKeyIdentifier"] = args ? args.kmsKeyIdentifier : undefined;
            resourceInputs["locationUri"] = args ? args.locationUri : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["retrievalRoleArn"] = args ? args.retrievalRoleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["validators"] = args ? args.validators : undefined;
            resourceInputs["configurationProfileId"] = undefined /*out*/;
            resourceInputs["kmsKeyArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppconfigConfigurationProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppconfigConfigurationProfile resources.
 */
export interface AppconfigConfigurationProfileState {
    /**
     * The application ID.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * The configuration profile ID
     */
    configurationProfileId?: pulumi.Input<string>;
    /**
     * A description of the configuration profile.
     */
    description?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name of the AWS Key Management Service key to encrypt new configuration data versions in the AWS
     * AppConfig hosted configuration store. This attribute is only used for hosted configuration types. To encrypt data
     * managed in other configuration stores, see the documentation for how to specify an AWS KMS key for that particular
     * service.
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * The AWS Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or
     * updated.
     */
    kmsKeyIdentifier?: pulumi.Input<string>;
    /**
     * A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM)
     * document, an SSM Parameter Store parameter, or an Amazon S3 object.
     */
    locationUri?: pulumi.Input<string>;
    /**
     * A name for the configuration profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of an IAM role with permission to access the configuration at the specified LocationUri.
     */
    retrievalRoleArn?: pulumi.Input<string>;
    /**
     * Metadata to assign to the configuration profile. Tags help organize and categorize your AWS AppConfig resources. Each
     * tag consists of a key and an optional value, both of which you define.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AppconfigConfigurationProfileTag>[]>;
    /**
     * The type of configurations contained in the profile. When calling this API, enter one of the following values for Type:
     * AWS.AppConfig.FeatureFlags, AWS.Freeform
     */
    type?: pulumi.Input<string>;
    /**
     * A list of methods for validating the configuration.
     */
    validators?: pulumi.Input<pulumi.Input<inputs.AppconfigConfigurationProfileValidator>[]>;
}

/**
 * The set of arguments for constructing a AppconfigConfigurationProfile resource.
 */
export interface AppconfigConfigurationProfileArgs {
    /**
     * The application ID.
     */
    applicationId: pulumi.Input<string>;
    /**
     * A description of the configuration profile.
     */
    description?: pulumi.Input<string>;
    /**
     * The AWS Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or
     * updated.
     */
    kmsKeyIdentifier?: pulumi.Input<string>;
    /**
     * A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM)
     * document, an SSM Parameter Store parameter, or an Amazon S3 object.
     */
    locationUri: pulumi.Input<string>;
    /**
     * A name for the configuration profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of an IAM role with permission to access the configuration at the specified LocationUri.
     */
    retrievalRoleArn?: pulumi.Input<string>;
    /**
     * Metadata to assign to the configuration profile. Tags help organize and categorize your AWS AppConfig resources. Each
     * tag consists of a key and an optional value, both of which you define.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AppconfigConfigurationProfileTag>[]>;
    /**
     * The type of configurations contained in the profile. When calling this API, enter one of the following values for Type:
     * AWS.AppConfig.FeatureFlags, AWS.Freeform
     */
    type?: pulumi.Input<string>;
    /**
     * A list of methods for validating the configuration.
     */
    validators?: pulumi.Input<pulumi.Input<inputs.AppconfigConfigurationProfileValidator>[]>;
}
