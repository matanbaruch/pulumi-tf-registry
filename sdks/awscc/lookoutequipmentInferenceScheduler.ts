// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LookoutequipmentInferenceScheduler extends pulumi.CustomResource {
    /**
     * Get an existing LookoutequipmentInferenceScheduler resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LookoutequipmentInferenceSchedulerState, opts?: pulumi.CustomResourceOptions): LookoutequipmentInferenceScheduler {
        return new LookoutequipmentInferenceScheduler(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lookoutequipmentInferenceScheduler:LookoutequipmentInferenceScheduler';

    /**
     * Returns true if the given object is an instance of LookoutequipmentInferenceScheduler.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LookoutequipmentInferenceScheduler {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LookoutequipmentInferenceScheduler.__pulumiType;
    }

    /**
     * A period of time (in minutes) by which inference on the data is delayed after the data starts.
     */
    public readonly dataDelayOffsetInMinutes!: pulumi.Output<number>;
    /**
     * Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and
     * dataset location.
     */
    public readonly dataInputConfiguration!: pulumi.Output<outputs.LookoutequipmentInferenceSchedulerDataInputConfiguration>;
    /**
     * Specifies configuration information for the output results for the inference scheduler, including the S3 location for
     * the output.
     */
    public readonly dataOutputConfiguration!: pulumi.Output<outputs.LookoutequipmentInferenceSchedulerDataOutputConfiguration>;
    /**
     * How often data is uploaded to the source S3 bucket for the input data.
     */
    public readonly dataUploadFrequency!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the inference scheduler being created.
     */
    public /*out*/ readonly inferenceSchedulerArn!: pulumi.Output<string>;
    /**
     * The name of the inference scheduler being created.
     */
    public readonly inferenceSchedulerName!: pulumi.Output<string>;
    /**
     * The name of the previously trained ML model being used to create the inference scheduler.
     */
    public readonly modelName!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of a role with permission to access the data source being used for the inference.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * Provides the identifier of the AWS KMS customer master key (CMK) used to encrypt inference scheduler data by Amazon
     * Lookout for Equipment.
     */
    public readonly serverSideKmsKeyId!: pulumi.Output<string>;
    /**
     * Any tags associated with the inference scheduler.
     */
    public readonly tags!: pulumi.Output<outputs.LookoutequipmentInferenceSchedulerTag[]>;

    /**
     * Create a LookoutequipmentInferenceScheduler resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LookoutequipmentInferenceSchedulerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LookoutequipmentInferenceSchedulerArgs | LookoutequipmentInferenceSchedulerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LookoutequipmentInferenceSchedulerState | undefined;
            resourceInputs["dataDelayOffsetInMinutes"] = state ? state.dataDelayOffsetInMinutes : undefined;
            resourceInputs["dataInputConfiguration"] = state ? state.dataInputConfiguration : undefined;
            resourceInputs["dataOutputConfiguration"] = state ? state.dataOutputConfiguration : undefined;
            resourceInputs["dataUploadFrequency"] = state ? state.dataUploadFrequency : undefined;
            resourceInputs["inferenceSchedulerArn"] = state ? state.inferenceSchedulerArn : undefined;
            resourceInputs["inferenceSchedulerName"] = state ? state.inferenceSchedulerName : undefined;
            resourceInputs["modelName"] = state ? state.modelName : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["serverSideKmsKeyId"] = state ? state.serverSideKmsKeyId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LookoutequipmentInferenceSchedulerArgs | undefined;
            if ((!args || args.dataInputConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataInputConfiguration'");
            }
            if ((!args || args.dataOutputConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataOutputConfiguration'");
            }
            if ((!args || args.dataUploadFrequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataUploadFrequency'");
            }
            if ((!args || args.modelName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modelName'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["dataDelayOffsetInMinutes"] = args ? args.dataDelayOffsetInMinutes : undefined;
            resourceInputs["dataInputConfiguration"] = args ? args.dataInputConfiguration : undefined;
            resourceInputs["dataOutputConfiguration"] = args ? args.dataOutputConfiguration : undefined;
            resourceInputs["dataUploadFrequency"] = args ? args.dataUploadFrequency : undefined;
            resourceInputs["inferenceSchedulerName"] = args ? args.inferenceSchedulerName : undefined;
            resourceInputs["modelName"] = args ? args.modelName : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["serverSideKmsKeyId"] = args ? args.serverSideKmsKeyId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["inferenceSchedulerArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LookoutequipmentInferenceScheduler.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LookoutequipmentInferenceScheduler resources.
 */
export interface LookoutequipmentInferenceSchedulerState {
    /**
     * A period of time (in minutes) by which inference on the data is delayed after the data starts.
     */
    dataDelayOffsetInMinutes?: pulumi.Input<number>;
    /**
     * Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and
     * dataset location.
     */
    dataInputConfiguration?: pulumi.Input<inputs.LookoutequipmentInferenceSchedulerDataInputConfiguration>;
    /**
     * Specifies configuration information for the output results for the inference scheduler, including the S3 location for
     * the output.
     */
    dataOutputConfiguration?: pulumi.Input<inputs.LookoutequipmentInferenceSchedulerDataOutputConfiguration>;
    /**
     * How often data is uploaded to the source S3 bucket for the input data.
     */
    dataUploadFrequency?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the inference scheduler being created.
     */
    inferenceSchedulerArn?: pulumi.Input<string>;
    /**
     * The name of the inference scheduler being created.
     */
    inferenceSchedulerName?: pulumi.Input<string>;
    /**
     * The name of the previously trained ML model being used to create the inference scheduler.
     */
    modelName?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of a role with permission to access the data source being used for the inference.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Provides the identifier of the AWS KMS customer master key (CMK) used to encrypt inference scheduler data by Amazon
     * Lookout for Equipment.
     */
    serverSideKmsKeyId?: pulumi.Input<string>;
    /**
     * Any tags associated with the inference scheduler.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LookoutequipmentInferenceSchedulerTag>[]>;
}

/**
 * The set of arguments for constructing a LookoutequipmentInferenceScheduler resource.
 */
export interface LookoutequipmentInferenceSchedulerArgs {
    /**
     * A period of time (in minutes) by which inference on the data is delayed after the data starts.
     */
    dataDelayOffsetInMinutes?: pulumi.Input<number>;
    /**
     * Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and
     * dataset location.
     */
    dataInputConfiguration: pulumi.Input<inputs.LookoutequipmentInferenceSchedulerDataInputConfiguration>;
    /**
     * Specifies configuration information for the output results for the inference scheduler, including the S3 location for
     * the output.
     */
    dataOutputConfiguration: pulumi.Input<inputs.LookoutequipmentInferenceSchedulerDataOutputConfiguration>;
    /**
     * How often data is uploaded to the source S3 bucket for the input data.
     */
    dataUploadFrequency: pulumi.Input<string>;
    /**
     * The name of the inference scheduler being created.
     */
    inferenceSchedulerName?: pulumi.Input<string>;
    /**
     * The name of the previously trained ML model being used to create the inference scheduler.
     */
    modelName: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of a role with permission to access the data source being used for the inference.
     */
    roleArn: pulumi.Input<string>;
    /**
     * Provides the identifier of the AWS KMS customer master key (CMK) used to encrypt inference scheduler data by Amazon
     * Lookout for Equipment.
     */
    serverSideKmsKeyId?: pulumi.Input<string>;
    /**
     * Any tags associated with the inference scheduler.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LookoutequipmentInferenceSchedulerTag>[]>;
}
