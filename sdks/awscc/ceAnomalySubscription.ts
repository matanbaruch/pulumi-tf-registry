// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CeAnomalySubscription extends pulumi.CustomResource {
    /**
     * Get an existing CeAnomalySubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CeAnomalySubscriptionState, opts?: pulumi.CustomResourceOptions): CeAnomalySubscription {
        return new CeAnomalySubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ceAnomalySubscription:CeAnomalySubscription';

    /**
     * Returns true if the given object is an instance of CeAnomalySubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CeAnomalySubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CeAnomalySubscription.__pulumiType;
    }

    /**
     * The accountId
     */
    public /*out*/ readonly accountId!: pulumi.Output<string>;
    /**
     * The frequency at which anomaly reports are sent over email.
     */
    public readonly frequency!: pulumi.Output<string>;
    /**
     * A list of cost anomaly monitors.
     */
    public readonly monitorArnLists!: pulumi.Output<string[]>;
    /**
     * Tags to assign to subscription.
     */
    public readonly resourceTags!: pulumi.Output<outputs.CeAnomalySubscriptionResourceTag[]>;
    /**
     * A list of subscriber
     */
    public readonly subscribers!: pulumi.Output<outputs.CeAnomalySubscriptionSubscriber[]>;
    /**
     * Subscription ARN
     */
    public /*out*/ readonly subscriptionArn!: pulumi.Output<string>;
    /**
     * The name of the subscription.
     */
    public readonly subscriptionName!: pulumi.Output<string>;
    /**
     * The dollar value that triggers a notification if the threshold is exceeded.
     */
    public readonly threshold!: pulumi.Output<number>;
    /**
     * An Expression object in JSON String format used to specify the anomalies that you want to generate alerts for.
     */
    public readonly thresholdExpression!: pulumi.Output<string>;

    /**
     * Create a CeAnomalySubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CeAnomalySubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CeAnomalySubscriptionArgs | CeAnomalySubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CeAnomalySubscriptionState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["monitorArnLists"] = state ? state.monitorArnLists : undefined;
            resourceInputs["resourceTags"] = state ? state.resourceTags : undefined;
            resourceInputs["subscribers"] = state ? state.subscribers : undefined;
            resourceInputs["subscriptionArn"] = state ? state.subscriptionArn : undefined;
            resourceInputs["subscriptionName"] = state ? state.subscriptionName : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["thresholdExpression"] = state ? state.thresholdExpression : undefined;
        } else {
            const args = argsOrState as CeAnomalySubscriptionArgs | undefined;
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.monitorArnLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorArnLists'");
            }
            if ((!args || args.subscribers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscribers'");
            }
            if ((!args || args.subscriptionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionName'");
            }
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["monitorArnLists"] = args ? args.monitorArnLists : undefined;
            resourceInputs["resourceTags"] = args ? args.resourceTags : undefined;
            resourceInputs["subscribers"] = args ? args.subscribers : undefined;
            resourceInputs["subscriptionName"] = args ? args.subscriptionName : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["thresholdExpression"] = args ? args.thresholdExpression : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["subscriptionArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CeAnomalySubscription.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CeAnomalySubscription resources.
 */
export interface CeAnomalySubscriptionState {
    /**
     * The accountId
     */
    accountId?: pulumi.Input<string>;
    /**
     * The frequency at which anomaly reports are sent over email.
     */
    frequency?: pulumi.Input<string>;
    /**
     * A list of cost anomaly monitors.
     */
    monitorArnLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags to assign to subscription.
     */
    resourceTags?: pulumi.Input<pulumi.Input<inputs.CeAnomalySubscriptionResourceTag>[]>;
    /**
     * A list of subscriber
     */
    subscribers?: pulumi.Input<pulumi.Input<inputs.CeAnomalySubscriptionSubscriber>[]>;
    /**
     * Subscription ARN
     */
    subscriptionArn?: pulumi.Input<string>;
    /**
     * The name of the subscription.
     */
    subscriptionName?: pulumi.Input<string>;
    /**
     * The dollar value that triggers a notification if the threshold is exceeded.
     */
    threshold?: pulumi.Input<number>;
    /**
     * An Expression object in JSON String format used to specify the anomalies that you want to generate alerts for.
     */
    thresholdExpression?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CeAnomalySubscription resource.
 */
export interface CeAnomalySubscriptionArgs {
    /**
     * The frequency at which anomaly reports are sent over email.
     */
    frequency: pulumi.Input<string>;
    /**
     * A list of cost anomaly monitors.
     */
    monitorArnLists: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags to assign to subscription.
     */
    resourceTags?: pulumi.Input<pulumi.Input<inputs.CeAnomalySubscriptionResourceTag>[]>;
    /**
     * A list of subscriber
     */
    subscribers: pulumi.Input<pulumi.Input<inputs.CeAnomalySubscriptionSubscriber>[]>;
    /**
     * The name of the subscription.
     */
    subscriptionName: pulumi.Input<string>;
    /**
     * The dollar value that triggers a notification if the threshold is exceeded.
     */
    threshold?: pulumi.Input<number>;
    /**
     * An Expression object in JSON String format used to specify the anomalies that you want to generate alerts for.
     */
    thresholdExpression?: pulumi.Input<string>;
}
