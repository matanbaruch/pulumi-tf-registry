// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSsmAssociation(args: GetSsmAssociationArgs, opts?: pulumi.InvokeOptions): Promise<GetSsmAssociationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getSsmAssociation:getSsmAssociation", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSsmAssociation.
 */
export interface GetSsmAssociationArgs {
    id: string;
}

/**
 * A collection of values returned by getSsmAssociation.
 */
export interface GetSsmAssociationResult {
    readonly applyOnlyAtCronInterval: boolean;
    readonly associationId: string;
    readonly associationName: string;
    readonly automationTargetParameterName: string;
    readonly calendarNames: string[];
    readonly complianceSeverity: string;
    readonly documentVersion: string;
    readonly id: string;
    readonly instanceId: string;
    readonly maxConcurrency: string;
    readonly maxErrors: string;
    readonly name: string;
    readonly outputLocation: outputs.GetSsmAssociationOutputLocation;
    readonly parameters: {[key: string]: string[]};
    readonly scheduleExpression: string;
    readonly scheduleOffset: number;
    readonly syncCompliance: string;
    readonly targets: outputs.GetSsmAssociationTarget[];
    readonly waitForSuccessTimeoutSeconds: number;
}
export function getSsmAssociationOutput(args: GetSsmAssociationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSsmAssociationResult> {
    return pulumi.output(args).apply((a: any) => getSsmAssociation(a, opts))
}

/**
 * A collection of arguments for invoking getSsmAssociation.
 */
export interface GetSsmAssociationOutputArgs {
    id: pulumi.Input<string>;
}
