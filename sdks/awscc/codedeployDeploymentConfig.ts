// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CodedeployDeploymentConfig extends pulumi.CustomResource {
    /**
     * Get an existing CodedeployDeploymentConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodedeployDeploymentConfigState, opts?: pulumi.CustomResourceOptions): CodedeployDeploymentConfig {
        return new CodedeployDeploymentConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/codedeployDeploymentConfig:CodedeployDeploymentConfig';

    /**
     * Returns true if the given object is an instance of CodedeployDeploymentConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CodedeployDeploymentConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodedeployDeploymentConfig.__pulumiType;
    }

    /**
     * The destination platform type for the deployment (Lambda, Server, or ECS).
     */
    public readonly computePlatform!: pulumi.Output<string>;
    /**
     * A name for the deployment configuration. If you don't specify a name, AWS CloudFormation generates a unique physical ID
     * and uses that ID for the deployment configuration name. For more information, see Name Type.
     */
    public readonly deploymentConfigName!: pulumi.Output<string>;
    /**
     * The minimum number of healthy instances that should be available at any time during the deployment. There are two
     * parameters expected in the input: type and value.
     */
    public readonly minimumHealthyHosts!: pulumi.Output<outputs.CodedeployDeploymentConfigMinimumHealthyHosts>;
    /**
     * The configuration that specifies how the deployment traffic is routed.
     */
    public readonly trafficRoutingConfig!: pulumi.Output<outputs.CodedeployDeploymentConfigTrafficRoutingConfig>;
    /**
     * The zonal deployment config that specifies how the zonal deployment behaves
     */
    public readonly zonalConfig!: pulumi.Output<outputs.CodedeployDeploymentConfigZonalConfig>;

    /**
     * Create a CodedeployDeploymentConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CodedeployDeploymentConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodedeployDeploymentConfigArgs | CodedeployDeploymentConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodedeployDeploymentConfigState | undefined;
            resourceInputs["computePlatform"] = state ? state.computePlatform : undefined;
            resourceInputs["deploymentConfigName"] = state ? state.deploymentConfigName : undefined;
            resourceInputs["minimumHealthyHosts"] = state ? state.minimumHealthyHosts : undefined;
            resourceInputs["trafficRoutingConfig"] = state ? state.trafficRoutingConfig : undefined;
            resourceInputs["zonalConfig"] = state ? state.zonalConfig : undefined;
        } else {
            const args = argsOrState as CodedeployDeploymentConfigArgs | undefined;
            resourceInputs["computePlatform"] = args ? args.computePlatform : undefined;
            resourceInputs["deploymentConfigName"] = args ? args.deploymentConfigName : undefined;
            resourceInputs["minimumHealthyHosts"] = args ? args.minimumHealthyHosts : undefined;
            resourceInputs["trafficRoutingConfig"] = args ? args.trafficRoutingConfig : undefined;
            resourceInputs["zonalConfig"] = args ? args.zonalConfig : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodedeployDeploymentConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CodedeployDeploymentConfig resources.
 */
export interface CodedeployDeploymentConfigState {
    /**
     * The destination platform type for the deployment (Lambda, Server, or ECS).
     */
    computePlatform?: pulumi.Input<string>;
    /**
     * A name for the deployment configuration. If you don't specify a name, AWS CloudFormation generates a unique physical ID
     * and uses that ID for the deployment configuration name. For more information, see Name Type.
     */
    deploymentConfigName?: pulumi.Input<string>;
    /**
     * The minimum number of healthy instances that should be available at any time during the deployment. There are two
     * parameters expected in the input: type and value.
     */
    minimumHealthyHosts?: pulumi.Input<inputs.CodedeployDeploymentConfigMinimumHealthyHosts>;
    /**
     * The configuration that specifies how the deployment traffic is routed.
     */
    trafficRoutingConfig?: pulumi.Input<inputs.CodedeployDeploymentConfigTrafficRoutingConfig>;
    /**
     * The zonal deployment config that specifies how the zonal deployment behaves
     */
    zonalConfig?: pulumi.Input<inputs.CodedeployDeploymentConfigZonalConfig>;
}

/**
 * The set of arguments for constructing a CodedeployDeploymentConfig resource.
 */
export interface CodedeployDeploymentConfigArgs {
    /**
     * The destination platform type for the deployment (Lambda, Server, or ECS).
     */
    computePlatform?: pulumi.Input<string>;
    /**
     * A name for the deployment configuration. If you don't specify a name, AWS CloudFormation generates a unique physical ID
     * and uses that ID for the deployment configuration name. For more information, see Name Type.
     */
    deploymentConfigName?: pulumi.Input<string>;
    /**
     * The minimum number of healthy instances that should be available at any time during the deployment. There are two
     * parameters expected in the input: type and value.
     */
    minimumHealthyHosts?: pulumi.Input<inputs.CodedeployDeploymentConfigMinimumHealthyHosts>;
    /**
     * The configuration that specifies how the deployment traffic is routed.
     */
    trafficRoutingConfig?: pulumi.Input<inputs.CodedeployDeploymentConfigTrafficRoutingConfig>;
    /**
     * The zonal deployment config that specifies how the zonal deployment behaves
     */
    zonalConfig?: pulumi.Input<inputs.CodedeployDeploymentConfigZonalConfig>;
}
