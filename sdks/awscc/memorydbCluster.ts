// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MemorydbCluster extends pulumi.CustomResource {
    /**
     * Get an existing MemorydbCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MemorydbClusterState, opts?: pulumi.CustomResourceOptions): MemorydbCluster {
        return new MemorydbCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/memorydbCluster:MemorydbCluster';

    /**
     * Returns true if the given object is an instance of MemorydbCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MemorydbCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MemorydbCluster.__pulumiType;
    }

    /**
     * The name of the Access Control List to associate with the cluster.
     */
    public readonly aclName!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the cluster.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A flag that enables automatic minor version upgrade when set to true. You cannot modify the value of
     * AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set
     * AutoMinorVersionUpgrade to true when you create a cluster.
     */
    public readonly autoMinorVersionUpgrade!: pulumi.Output<boolean>;
    /**
     * The cluster endpoint.
     */
    public readonly clusterEndpoint!: pulumi.Output<outputs.MemorydbClusterClusterEndpoint>;
    /**
     * The name of the cluster. This value must be unique as it also serves as the cluster identifier.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Enables data tiering. Data tiering is only supported for clusters using the r6gd node type. This parameter must be set
     * when using r6gd nodes.
     */
    public readonly dataTiering!: pulumi.Output<string>;
    /**
     * An optional description of the cluster.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The Redis engine version used by the cluster.
     */
    public readonly engineVersion!: pulumi.Output<string>;
    /**
     * The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB
     * creates the snapshot, and then deletes the cluster immediately afterward.
     */
    public readonly finalSnapshotName!: pulumi.Output<string>;
    /**
     * The ID of the KMS key used to encrypt the cluster.
     */
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the
     * format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
     */
    public readonly maintenanceWindow!: pulumi.Output<string>;
    /**
     * The compute and memory capacity of the nodes in the cluster.
     */
    public readonly nodeType!: pulumi.Output<string>;
    /**
     * The number of replicas to apply to each shard. The limit is 5.
     */
    public readonly numReplicasPerShard!: pulumi.Output<number>;
    /**
     * The number of shards the cluster will contain.
     */
    public readonly numShards!: pulumi.Output<number>;
    /**
     * The name of the parameter group associated with the cluster.
     */
    public readonly parameterGroupName!: pulumi.Output<string>;
    /**
     * The status of the parameter group used by the cluster.
     */
    public /*out*/ readonly parameterGroupStatus!: pulumi.Output<string>;
    /**
     * The port number on which each member of the cluster accepts connections.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * One or more Amazon VPC security groups associated with this cluster.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * A list of Amazon Resource Names (ARN) that uniquely identify the RDB snapshot files stored in Amazon S3. The snapshot
     * files are used to populate the new cluster. The Amazon S3 object name in the ARN cannot contain any commas.
     */
    public readonly snapshotArns!: pulumi.Output<string[]>;
    /**
     * The name of a snapshot from which to restore data into the new cluster. The snapshot status changes to restoring while
     * the new cluster is being created.
     */
    public readonly snapshotName!: pulumi.Output<string>;
    /**
     * The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set
     * SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
     */
    public readonly snapshotRetentionLimit!: pulumi.Output<number>;
    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
     */
    public readonly snapshotWindow!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
     */
    public readonly snsTopicArn!: pulumi.Output<string>;
    /**
     * The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
     */
    public readonly snsTopicStatus!: pulumi.Output<string>;
    /**
     * The status of the cluster. For example, Available, Updating, Creating.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The name of the subnet group to be used for the cluster.
     */
    public readonly subnetGroupName!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this cluster.
     */
    public readonly tags!: pulumi.Output<outputs.MemorydbClusterTag[]>;
    /**
     * A flag that enables in-transit encryption when set to true. You cannot modify the value of TransitEncryptionEnabled
     * after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true
     * when you create a cluster.
     */
    public readonly tlsEnabled!: pulumi.Output<boolean>;

    /**
     * Create a MemorydbCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MemorydbClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MemorydbClusterArgs | MemorydbClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MemorydbClusterState | undefined;
            resourceInputs["aclName"] = state ? state.aclName : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            resourceInputs["clusterEndpoint"] = state ? state.clusterEndpoint : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["dataTiering"] = state ? state.dataTiering : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["finalSnapshotName"] = state ? state.finalSnapshotName : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["numReplicasPerShard"] = state ? state.numReplicasPerShard : undefined;
            resourceInputs["numShards"] = state ? state.numShards : undefined;
            resourceInputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            resourceInputs["parameterGroupStatus"] = state ? state.parameterGroupStatus : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["snapshotArns"] = state ? state.snapshotArns : undefined;
            resourceInputs["snapshotName"] = state ? state.snapshotName : undefined;
            resourceInputs["snapshotRetentionLimit"] = state ? state.snapshotRetentionLimit : undefined;
            resourceInputs["snapshotWindow"] = state ? state.snapshotWindow : undefined;
            resourceInputs["snsTopicArn"] = state ? state.snsTopicArn : undefined;
            resourceInputs["snsTopicStatus"] = state ? state.snsTopicStatus : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetGroupName"] = state ? state.subnetGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tlsEnabled"] = state ? state.tlsEnabled : undefined;
        } else {
            const args = argsOrState as MemorydbClusterArgs | undefined;
            if ((!args || args.aclName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclName'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.nodeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            resourceInputs["aclName"] = args ? args.aclName : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            resourceInputs["clusterEndpoint"] = args ? args.clusterEndpoint : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["dataTiering"] = args ? args.dataTiering : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["finalSnapshotName"] = args ? args.finalSnapshotName : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["numReplicasPerShard"] = args ? args.numReplicasPerShard : undefined;
            resourceInputs["numShards"] = args ? args.numShards : undefined;
            resourceInputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["snapshotArns"] = args ? args.snapshotArns : undefined;
            resourceInputs["snapshotName"] = args ? args.snapshotName : undefined;
            resourceInputs["snapshotRetentionLimit"] = args ? args.snapshotRetentionLimit : undefined;
            resourceInputs["snapshotWindow"] = args ? args.snapshotWindow : undefined;
            resourceInputs["snsTopicArn"] = args ? args.snsTopicArn : undefined;
            resourceInputs["snsTopicStatus"] = args ? args.snsTopicStatus : undefined;
            resourceInputs["subnetGroupName"] = args ? args.subnetGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tlsEnabled"] = args ? args.tlsEnabled : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["parameterGroupStatus"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MemorydbCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MemorydbCluster resources.
 */
export interface MemorydbClusterState {
    /**
     * The name of the Access Control List to associate with the cluster.
     */
    aclName?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the cluster.
     */
    arn?: pulumi.Input<string>;
    /**
     * A flag that enables automatic minor version upgrade when set to true. You cannot modify the value of
     * AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set
     * AutoMinorVersionUpgrade to true when you create a cluster.
     */
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    /**
     * The cluster endpoint.
     */
    clusterEndpoint?: pulumi.Input<inputs.MemorydbClusterClusterEndpoint>;
    /**
     * The name of the cluster. This value must be unique as it also serves as the cluster identifier.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Enables data tiering. Data tiering is only supported for clusters using the r6gd node type. This parameter must be set
     * when using r6gd nodes.
     */
    dataTiering?: pulumi.Input<string>;
    /**
     * An optional description of the cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * The Redis engine version used by the cluster.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB
     * creates the snapshot, and then deletes the cluster immediately afterward.
     */
    finalSnapshotName?: pulumi.Input<string>;
    /**
     * The ID of the KMS key used to encrypt the cluster.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the
     * format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
     */
    maintenanceWindow?: pulumi.Input<string>;
    /**
     * The compute and memory capacity of the nodes in the cluster.
     */
    nodeType?: pulumi.Input<string>;
    /**
     * The number of replicas to apply to each shard. The limit is 5.
     */
    numReplicasPerShard?: pulumi.Input<number>;
    /**
     * The number of shards the cluster will contain.
     */
    numShards?: pulumi.Input<number>;
    /**
     * The name of the parameter group associated with the cluster.
     */
    parameterGroupName?: pulumi.Input<string>;
    /**
     * The status of the parameter group used by the cluster.
     */
    parameterGroupStatus?: pulumi.Input<string>;
    /**
     * The port number on which each member of the cluster accepts connections.
     */
    port?: pulumi.Input<number>;
    /**
     * One or more Amazon VPC security groups associated with this cluster.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of Amazon Resource Names (ARN) that uniquely identify the RDB snapshot files stored in Amazon S3. The snapshot
     * files are used to populate the new cluster. The Amazon S3 object name in the ARN cannot contain any commas.
     */
    snapshotArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of a snapshot from which to restore data into the new cluster. The snapshot status changes to restoring while
     * the new cluster is being created.
     */
    snapshotName?: pulumi.Input<string>;
    /**
     * The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set
     * SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
     */
    snapshotRetentionLimit?: pulumi.Input<number>;
    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
     */
    snapshotWindow?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
     */
    snsTopicArn?: pulumi.Input<string>;
    /**
     * The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
     */
    snsTopicStatus?: pulumi.Input<string>;
    /**
     * The status of the cluster. For example, Available, Updating, Creating.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the subnet group to be used for the cluster.
     */
    subnetGroupName?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this cluster.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.MemorydbClusterTag>[]>;
    /**
     * A flag that enables in-transit encryption when set to true. You cannot modify the value of TransitEncryptionEnabled
     * after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true
     * when you create a cluster.
     */
    tlsEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MemorydbCluster resource.
 */
export interface MemorydbClusterArgs {
    /**
     * The name of the Access Control List to associate with the cluster.
     */
    aclName: pulumi.Input<string>;
    /**
     * A flag that enables automatic minor version upgrade when set to true. You cannot modify the value of
     * AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set
     * AutoMinorVersionUpgrade to true when you create a cluster.
     */
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    /**
     * The cluster endpoint.
     */
    clusterEndpoint?: pulumi.Input<inputs.MemorydbClusterClusterEndpoint>;
    /**
     * The name of the cluster. This value must be unique as it also serves as the cluster identifier.
     */
    clusterName: pulumi.Input<string>;
    /**
     * Enables data tiering. Data tiering is only supported for clusters using the r6gd node type. This parameter must be set
     * when using r6gd nodes.
     */
    dataTiering?: pulumi.Input<string>;
    /**
     * An optional description of the cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * The Redis engine version used by the cluster.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB
     * creates the snapshot, and then deletes the cluster immediately afterward.
     */
    finalSnapshotName?: pulumi.Input<string>;
    /**
     * The ID of the KMS key used to encrypt the cluster.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the
     * format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
     */
    maintenanceWindow?: pulumi.Input<string>;
    /**
     * The compute and memory capacity of the nodes in the cluster.
     */
    nodeType: pulumi.Input<string>;
    /**
     * The number of replicas to apply to each shard. The limit is 5.
     */
    numReplicasPerShard?: pulumi.Input<number>;
    /**
     * The number of shards the cluster will contain.
     */
    numShards?: pulumi.Input<number>;
    /**
     * The name of the parameter group associated with the cluster.
     */
    parameterGroupName?: pulumi.Input<string>;
    /**
     * The port number on which each member of the cluster accepts connections.
     */
    port?: pulumi.Input<number>;
    /**
     * One or more Amazon VPC security groups associated with this cluster.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of Amazon Resource Names (ARN) that uniquely identify the RDB snapshot files stored in Amazon S3. The snapshot
     * files are used to populate the new cluster. The Amazon S3 object name in the ARN cannot contain any commas.
     */
    snapshotArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of a snapshot from which to restore data into the new cluster. The snapshot status changes to restoring while
     * the new cluster is being created.
     */
    snapshotName?: pulumi.Input<string>;
    /**
     * The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set
     * SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
     */
    snapshotRetentionLimit?: pulumi.Input<number>;
    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
     */
    snapshotWindow?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
     */
    snsTopicArn?: pulumi.Input<string>;
    /**
     * The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
     */
    snsTopicStatus?: pulumi.Input<string>;
    /**
     * The name of the subnet group to be used for the cluster.
     */
    subnetGroupName?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this cluster.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.MemorydbClusterTag>[]>;
    /**
     * A flag that enables in-transit encryption when set to true. You cannot modify the value of TransitEncryptionEnabled
     * after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true
     * when you create a cluster.
     */
    tlsEnabled?: pulumi.Input<boolean>;
}
