// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatasyncLocationFsxLustre extends pulumi.CustomResource {
    /**
     * Get an existing DatasyncLocationFsxLustre resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasyncLocationFsxLustreState, opts?: pulumi.CustomResourceOptions): DatasyncLocationFsxLustre {
        return new DatasyncLocationFsxLustre(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/datasyncLocationFsxLustre:DatasyncLocationFsxLustre';

    /**
     * Returns true if the given object is an instance of DatasyncLocationFsxLustre.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasyncLocationFsxLustre {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasyncLocationFsxLustre.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) for the FSx for Lustre file system.
     */
    public readonly fsxFilesystemArn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon FSx for Lustre file system location that is created.
     */
    public /*out*/ readonly locationArn!: pulumi.Output<string>;
    /**
     * The URL of the FSx for Lustre location that was described.
     */
    public /*out*/ readonly locationUri!: pulumi.Output<string>;
    /**
     * The ARNs of the security groups that are to use to configure the FSx for Lustre file system.
     */
    public readonly securityGroupArns!: pulumi.Output<string[]>;
    /**
     * A subdirectory in the location's path.
     */
    public readonly subdirectory!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.DatasyncLocationFsxLustreTag[]>;

    /**
     * Create a DatasyncLocationFsxLustre resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasyncLocationFsxLustreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasyncLocationFsxLustreArgs | DatasyncLocationFsxLustreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasyncLocationFsxLustreState | undefined;
            resourceInputs["fsxFilesystemArn"] = state ? state.fsxFilesystemArn : undefined;
            resourceInputs["locationArn"] = state ? state.locationArn : undefined;
            resourceInputs["locationUri"] = state ? state.locationUri : undefined;
            resourceInputs["securityGroupArns"] = state ? state.securityGroupArns : undefined;
            resourceInputs["subdirectory"] = state ? state.subdirectory : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DatasyncLocationFsxLustreArgs | undefined;
            if ((!args || args.securityGroupArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupArns'");
            }
            resourceInputs["fsxFilesystemArn"] = args ? args.fsxFilesystemArn : undefined;
            resourceInputs["securityGroupArns"] = args ? args.securityGroupArns : undefined;
            resourceInputs["subdirectory"] = args ? args.subdirectory : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["locationArn"] = undefined /*out*/;
            resourceInputs["locationUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasyncLocationFsxLustre.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatasyncLocationFsxLustre resources.
 */
export interface DatasyncLocationFsxLustreState {
    /**
     * The Amazon Resource Name (ARN) for the FSx for Lustre file system.
     */
    fsxFilesystemArn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon FSx for Lustre file system location that is created.
     */
    locationArn?: pulumi.Input<string>;
    /**
     * The URL of the FSx for Lustre location that was described.
     */
    locationUri?: pulumi.Input<string>;
    /**
     * The ARNs of the security groups that are to use to configure the FSx for Lustre file system.
     */
    securityGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A subdirectory in the location's path.
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DatasyncLocationFsxLustreTag>[]>;
}

/**
 * The set of arguments for constructing a DatasyncLocationFsxLustre resource.
 */
export interface DatasyncLocationFsxLustreArgs {
    /**
     * The Amazon Resource Name (ARN) for the FSx for Lustre file system.
     */
    fsxFilesystemArn?: pulumi.Input<string>;
    /**
     * The ARNs of the security groups that are to use to configure the FSx for Lustre file system.
     */
    securityGroupArns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A subdirectory in the location's path.
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DatasyncLocationFsxLustreTag>[]>;
}
