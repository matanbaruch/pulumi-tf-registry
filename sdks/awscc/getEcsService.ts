// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEcsService(args: GetEcsServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetEcsServiceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEcsService:getEcsService", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEcsService.
 */
export interface GetEcsServiceArgs {
    id: string;
}

/**
 * A collection of values returned by getEcsService.
 */
export interface GetEcsServiceResult {
    readonly capacityProviderStrategies: outputs.GetEcsServiceCapacityProviderStrategy[];
    readonly cluster: string;
    readonly deploymentConfiguration: outputs.GetEcsServiceDeploymentConfiguration;
    readonly deploymentController: outputs.GetEcsServiceDeploymentController;
    readonly desiredCount: number;
    readonly enableEcsManagedTags: boolean;
    readonly enableExecuteCommand: boolean;
    readonly healthCheckGracePeriodSeconds: number;
    readonly id: string;
    readonly launchType: string;
    readonly loadBalancers: outputs.GetEcsServiceLoadBalancer[];
    readonly name: string;
    readonly networkConfiguration: outputs.GetEcsServiceNetworkConfiguration;
    readonly placementConstraints: outputs.GetEcsServicePlacementConstraint[];
    readonly placementStrategies: outputs.GetEcsServicePlacementStrategy[];
    readonly platformVersion: string;
    readonly propagateTags: string;
    readonly role: string;
    readonly schedulingStrategy: string;
    readonly serviceArn: string;
    readonly serviceConnectConfiguration: outputs.GetEcsServiceServiceConnectConfiguration;
    readonly serviceName: string;
    readonly serviceRegistries: outputs.GetEcsServiceServiceRegistry[];
    readonly tags: outputs.GetEcsServiceTag[];
    readonly taskDefinition: string;
    readonly volumeConfigurations: outputs.GetEcsServiceVolumeConfiguration[];
}
export function getEcsServiceOutput(args: GetEcsServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEcsServiceResult> {
    return pulumi.output(args).apply((a: any) => getEcsService(a, opts))
}

/**
 * A collection of arguments for invoking getEcsService.
 */
export interface GetEcsServiceOutputArgs {
    id: pulumi.Input<string>;
}
