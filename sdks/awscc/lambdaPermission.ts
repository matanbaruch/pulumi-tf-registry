// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LambdaPermission extends pulumi.CustomResource {
    /**
     * Get an existing LambdaPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LambdaPermissionState, opts?: pulumi.CustomResourceOptions): LambdaPermission {
        return new LambdaPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lambdaPermission:LambdaPermission';

    /**
     * Returns true if the given object is an instance of LambdaPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LambdaPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LambdaPermission.__pulumiType;
    }

    /**
     * The action that the principal can use on the function. For example, ``lambda:InvokeFunction`` or ``lambda:GetFunction``.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * For Alexa Smart Home functions, a token that the invoker must supply.
     */
    public readonly eventSourceToken!: pulumi.Output<string>;
    /**
     * The name or ARN of the Lambda function, version, or alias. **Name formats** + *Function name* – ``my-function``
     * (name-only), ``my-function:v1`` (with alias). + *Function ARN* –
     * ``arn:aws:lambda:us-west-2:123456789012:function:my-function``. + *Partial ARN* –
     * ``123456789012:function:my-function``. You can append a version number or alias to any of the formats. The length
     * constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in
     * length.
     */
    public readonly functionName!: pulumi.Output<string>;
    /**
     * The type of authentication that your function URL uses. Set to ``AWS_IAM`` if you want to restrict access to
     * authenticated users only. Set to ``NONE`` if you want to bypass IAM authentication to create a public endpoint. For more
     * information, see [Security and auth model for Lambda function
     * URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
     */
    public readonly functionUrlAuthType!: pulumi.Output<string>;
    public /*out*/ readonly permissionId!: pulumi.Output<string>;
    /**
     * The AWS-service or AWS-account that invokes the function. If you specify a service, use ``SourceArn`` or
     * ``SourceAccount`` to limit who can invoke the function through that service.
     */
    public readonly principal!: pulumi.Output<string>;
    /**
     * The identifier for your organization in AOlong. Use this to grant permissions to all the AWS-accounts under this
     * organization.
     */
    public readonly principalOrgId!: pulumi.Output<string>;
    /**
     * For AWS-service, the ID of the AWS-account that owns the resource. Use this together with ``SourceArn`` to ensure that
     * the specified account owns the resource. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated
     * by another account.
     */
    public readonly sourceAccount!: pulumi.Output<string>;
    /**
     * For AWS-services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS
     * topic. Note that Lambda configures the comparison using the ``StringLike`` operator.
     */
    public readonly sourceArn!: pulumi.Output<string>;

    /**
     * Create a LambdaPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LambdaPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LambdaPermissionArgs | LambdaPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LambdaPermissionState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["eventSourceToken"] = state ? state.eventSourceToken : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["functionUrlAuthType"] = state ? state.functionUrlAuthType : undefined;
            resourceInputs["permissionId"] = state ? state.permissionId : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["principalOrgId"] = state ? state.principalOrgId : undefined;
            resourceInputs["sourceAccount"] = state ? state.sourceAccount : undefined;
            resourceInputs["sourceArn"] = state ? state.sourceArn : undefined;
        } else {
            const args = argsOrState as LambdaPermissionArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["eventSourceToken"] = args ? args.eventSourceToken : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["functionUrlAuthType"] = args ? args.functionUrlAuthType : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["principalOrgId"] = args ? args.principalOrgId : undefined;
            resourceInputs["sourceAccount"] = args ? args.sourceAccount : undefined;
            resourceInputs["sourceArn"] = args ? args.sourceArn : undefined;
            resourceInputs["permissionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LambdaPermission.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LambdaPermission resources.
 */
export interface LambdaPermissionState {
    /**
     * The action that the principal can use on the function. For example, ``lambda:InvokeFunction`` or ``lambda:GetFunction``.
     */
    action?: pulumi.Input<string>;
    /**
     * For Alexa Smart Home functions, a token that the invoker must supply.
     */
    eventSourceToken?: pulumi.Input<string>;
    /**
     * The name or ARN of the Lambda function, version, or alias. **Name formats** + *Function name* – ``my-function``
     * (name-only), ``my-function:v1`` (with alias). + *Function ARN* –
     * ``arn:aws:lambda:us-west-2:123456789012:function:my-function``. + *Partial ARN* –
     * ``123456789012:function:my-function``. You can append a version number or alias to any of the formats. The length
     * constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in
     * length.
     */
    functionName?: pulumi.Input<string>;
    /**
     * The type of authentication that your function URL uses. Set to ``AWS_IAM`` if you want to restrict access to
     * authenticated users only. Set to ``NONE`` if you want to bypass IAM authentication to create a public endpoint. For more
     * information, see [Security and auth model for Lambda function
     * URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
     */
    functionUrlAuthType?: pulumi.Input<string>;
    permissionId?: pulumi.Input<string>;
    /**
     * The AWS-service or AWS-account that invokes the function. If you specify a service, use ``SourceArn`` or
     * ``SourceAccount`` to limit who can invoke the function through that service.
     */
    principal?: pulumi.Input<string>;
    /**
     * The identifier for your organization in AOlong. Use this to grant permissions to all the AWS-accounts under this
     * organization.
     */
    principalOrgId?: pulumi.Input<string>;
    /**
     * For AWS-service, the ID of the AWS-account that owns the resource. Use this together with ``SourceArn`` to ensure that
     * the specified account owns the resource. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated
     * by another account.
     */
    sourceAccount?: pulumi.Input<string>;
    /**
     * For AWS-services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS
     * topic. Note that Lambda configures the comparison using the ``StringLike`` operator.
     */
    sourceArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LambdaPermission resource.
 */
export interface LambdaPermissionArgs {
    /**
     * The action that the principal can use on the function. For example, ``lambda:InvokeFunction`` or ``lambda:GetFunction``.
     */
    action: pulumi.Input<string>;
    /**
     * For Alexa Smart Home functions, a token that the invoker must supply.
     */
    eventSourceToken?: pulumi.Input<string>;
    /**
     * The name or ARN of the Lambda function, version, or alias. **Name formats** + *Function name* – ``my-function``
     * (name-only), ``my-function:v1`` (with alias). + *Function ARN* –
     * ``arn:aws:lambda:us-west-2:123456789012:function:my-function``. + *Partial ARN* –
     * ``123456789012:function:my-function``. You can append a version number or alias to any of the formats. The length
     * constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in
     * length.
     */
    functionName: pulumi.Input<string>;
    /**
     * The type of authentication that your function URL uses. Set to ``AWS_IAM`` if you want to restrict access to
     * authenticated users only. Set to ``NONE`` if you want to bypass IAM authentication to create a public endpoint. For more
     * information, see [Security and auth model for Lambda function
     * URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
     */
    functionUrlAuthType?: pulumi.Input<string>;
    /**
     * The AWS-service or AWS-account that invokes the function. If you specify a service, use ``SourceArn`` or
     * ``SourceAccount`` to limit who can invoke the function through that service.
     */
    principal: pulumi.Input<string>;
    /**
     * The identifier for your organization in AOlong. Use this to grant permissions to all the AWS-accounts under this
     * organization.
     */
    principalOrgId?: pulumi.Input<string>;
    /**
     * For AWS-service, the ID of the AWS-account that owns the resource. Use this together with ``SourceArn`` to ensure that
     * the specified account owns the resource. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated
     * by another account.
     */
    sourceAccount?: pulumi.Input<string>;
    /**
     * For AWS-services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS
     * topic. Note that Lambda configures the comparison using the ``StringLike`` operator.
     */
    sourceArn?: pulumi.Input<string>;
}
