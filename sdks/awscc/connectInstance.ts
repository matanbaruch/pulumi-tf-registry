// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectInstance extends pulumi.CustomResource {
    /**
     * Get an existing ConnectInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectInstanceState, opts?: pulumi.CustomResourceOptions): ConnectInstance {
        return new ConnectInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/connectInstance:ConnectInstance';

    /**
     * Returns true if the given object is an instance of ConnectInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectInstance.__pulumiType;
    }

    /**
     * An instanceArn is automatically generated on creation based on instanceId.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The attributes for the instance.
     */
    public readonly attributes!: pulumi.Output<outputs.ConnectInstanceAttributes>;
    /**
     * Timestamp of instance creation logged as part of instance creation.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * Existing directoryId user wants to map to the new Connect instance.
     */
    public readonly directoryId!: pulumi.Output<string>;
    /**
     * Specifies the type of directory integration for new instance.
     */
    public readonly identityManagementType!: pulumi.Output<string>;
    /**
     * Alias of the new directory created as part of new instance creation.
     */
    public readonly instanceAlias!: pulumi.Output<string>;
    /**
     * An instanceId is automatically generated on creation and assigned as the unique identifier.
     */
    public /*out*/ readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies the creation status of new instance.
     */
    public /*out*/ readonly instanceStatus!: pulumi.Output<string>;
    /**
     * Service linked role created as part of instance creation.
     */
    public /*out*/ readonly serviceRole!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.ConnectInstanceTag[]>;

    /**
     * Create a ConnectInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectInstanceArgs | ConnectInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectInstanceState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["identityManagementType"] = state ? state.identityManagementType : undefined;
            resourceInputs["instanceAlias"] = state ? state.instanceAlias : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceStatus"] = state ? state.instanceStatus : undefined;
            resourceInputs["serviceRole"] = state ? state.serviceRole : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ConnectInstanceArgs | undefined;
            if ((!args || args.attributes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attributes'");
            }
            if ((!args || args.identityManagementType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityManagementType'");
            }
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["identityManagementType"] = args ? args.identityManagementType : undefined;
            resourceInputs["instanceAlias"] = args ? args.instanceAlias : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["instanceStatus"] = undefined /*out*/;
            resourceInputs["serviceRole"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectInstance resources.
 */
export interface ConnectInstanceState {
    /**
     * An instanceArn is automatically generated on creation based on instanceId.
     */
    arn?: pulumi.Input<string>;
    /**
     * The attributes for the instance.
     */
    attributes?: pulumi.Input<inputs.ConnectInstanceAttributes>;
    /**
     * Timestamp of instance creation logged as part of instance creation.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * Existing directoryId user wants to map to the new Connect instance.
     */
    directoryId?: pulumi.Input<string>;
    /**
     * Specifies the type of directory integration for new instance.
     */
    identityManagementType?: pulumi.Input<string>;
    /**
     * Alias of the new directory created as part of new instance creation.
     */
    instanceAlias?: pulumi.Input<string>;
    /**
     * An instanceId is automatically generated on creation and assigned as the unique identifier.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the creation status of new instance.
     */
    instanceStatus?: pulumi.Input<string>;
    /**
     * Service linked role created as part of instance creation.
     */
    serviceRole?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ConnectInstanceTag>[]>;
}

/**
 * The set of arguments for constructing a ConnectInstance resource.
 */
export interface ConnectInstanceArgs {
    /**
     * The attributes for the instance.
     */
    attributes: pulumi.Input<inputs.ConnectInstanceAttributes>;
    /**
     * Existing directoryId user wants to map to the new Connect instance.
     */
    directoryId?: pulumi.Input<string>;
    /**
     * Specifies the type of directory integration for new instance.
     */
    identityManagementType: pulumi.Input<string>;
    /**
     * Alias of the new directory created as part of new instance creation.
     */
    instanceAlias?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ConnectInstanceTag>[]>;
}
