// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkmanagerCoreNetwork extends pulumi.CustomResource {
    /**
     * Get an existing NetworkmanagerCoreNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkmanagerCoreNetworkState, opts?: pulumi.CustomResourceOptions): NetworkmanagerCoreNetwork {
        return new NetworkmanagerCoreNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/networkmanagerCoreNetwork:NetworkmanagerCoreNetwork';

    /**
     * Returns true if the given object is an instance of NetworkmanagerCoreNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkmanagerCoreNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkmanagerCoreNetwork.__pulumiType;
    }

    /**
     * The ARN (Amazon resource name) of core network
     */
    public /*out*/ readonly coreNetworkArn!: pulumi.Output<string>;
    /**
     * The Id of core network
     */
    public /*out*/ readonly coreNetworkId!: pulumi.Output<string>;
    /**
     * The creation time of core network
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of core network
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The edges within a core network.
     */
    public /*out*/ readonly edges!: pulumi.Output<outputs.NetworkmanagerCoreNetworkEdge[]>;
    /**
     * The ID of the global network that your core network is a part of.
     */
    public readonly globalNetworkId!: pulumi.Output<string>;
    /**
     * The network function groups within a core network.
     */
    public /*out*/ readonly networkFunctionGroups!: pulumi.Output<outputs.NetworkmanagerCoreNetworkNetworkFunctionGroup[]>;
    /**
     * Owner of the core network
     */
    public /*out*/ readonly ownerAccount!: pulumi.Output<string>;
    /**
     * Live policy document for the core network, you must provide PolicyDocument in Json Format
     */
    public readonly policyDocument!: pulumi.Output<string>;
    /**
     * The segments within a core network.
     */
    public /*out*/ readonly segments!: pulumi.Output<outputs.NetworkmanagerCoreNetworkSegment[]>;
    /**
     * The state of core network
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The tags for the global network.
     */
    public readonly tags!: pulumi.Output<outputs.NetworkmanagerCoreNetworkTag[]>;

    /**
     * Create a NetworkmanagerCoreNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkmanagerCoreNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkmanagerCoreNetworkArgs | NetworkmanagerCoreNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkmanagerCoreNetworkState | undefined;
            resourceInputs["coreNetworkArn"] = state ? state.coreNetworkArn : undefined;
            resourceInputs["coreNetworkId"] = state ? state.coreNetworkId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["edges"] = state ? state.edges : undefined;
            resourceInputs["globalNetworkId"] = state ? state.globalNetworkId : undefined;
            resourceInputs["networkFunctionGroups"] = state ? state.networkFunctionGroups : undefined;
            resourceInputs["ownerAccount"] = state ? state.ownerAccount : undefined;
            resourceInputs["policyDocument"] = state ? state.policyDocument : undefined;
            resourceInputs["segments"] = state ? state.segments : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as NetworkmanagerCoreNetworkArgs | undefined;
            if ((!args || args.globalNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalNetworkId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["globalNetworkId"] = args ? args.globalNetworkId : undefined;
            resourceInputs["policyDocument"] = args ? args.policyDocument : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["coreNetworkArn"] = undefined /*out*/;
            resourceInputs["coreNetworkId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["edges"] = undefined /*out*/;
            resourceInputs["networkFunctionGroups"] = undefined /*out*/;
            resourceInputs["ownerAccount"] = undefined /*out*/;
            resourceInputs["segments"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkmanagerCoreNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkmanagerCoreNetwork resources.
 */
export interface NetworkmanagerCoreNetworkState {
    /**
     * The ARN (Amazon resource name) of core network
     */
    coreNetworkArn?: pulumi.Input<string>;
    /**
     * The Id of core network
     */
    coreNetworkId?: pulumi.Input<string>;
    /**
     * The creation time of core network
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of core network
     */
    description?: pulumi.Input<string>;
    /**
     * The edges within a core network.
     */
    edges?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerCoreNetworkEdge>[]>;
    /**
     * The ID of the global network that your core network is a part of.
     */
    globalNetworkId?: pulumi.Input<string>;
    /**
     * The network function groups within a core network.
     */
    networkFunctionGroups?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerCoreNetworkNetworkFunctionGroup>[]>;
    /**
     * Owner of the core network
     */
    ownerAccount?: pulumi.Input<string>;
    /**
     * Live policy document for the core network, you must provide PolicyDocument in Json Format
     */
    policyDocument?: pulumi.Input<string>;
    /**
     * The segments within a core network.
     */
    segments?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerCoreNetworkSegment>[]>;
    /**
     * The state of core network
     */
    state?: pulumi.Input<string>;
    /**
     * The tags for the global network.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerCoreNetworkTag>[]>;
}

/**
 * The set of arguments for constructing a NetworkmanagerCoreNetwork resource.
 */
export interface NetworkmanagerCoreNetworkArgs {
    /**
     * The description of core network
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the global network that your core network is a part of.
     */
    globalNetworkId: pulumi.Input<string>;
    /**
     * Live policy document for the core network, you must provide PolicyDocument in Json Format
     */
    policyDocument?: pulumi.Input<string>;
    /**
     * The tags for the global network.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerCoreNetworkTag>[]>;
}
