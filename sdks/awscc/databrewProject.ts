// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabrewProject extends pulumi.CustomResource {
    /**
     * Get an existing DatabrewProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabrewProjectState, opts?: pulumi.CustomResourceOptions): DatabrewProject {
        return new DatabrewProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/databrewProject:DatabrewProject';

    /**
     * Returns true if the given object is an instance of DatabrewProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabrewProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabrewProject.__pulumiType;
    }

    /**
     * Dataset name
     */
    public readonly datasetName!: pulumi.Output<string>;
    /**
     * Project name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Recipe name
     */
    public readonly recipeName!: pulumi.Output<string>;
    /**
     * Role arn
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * Sample
     */
    public readonly sample!: pulumi.Output<outputs.DatabrewProjectSample>;
    public readonly tags!: pulumi.Output<outputs.DatabrewProjectTag[]>;

    /**
     * Create a DatabrewProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabrewProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabrewProjectArgs | DatabrewProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabrewProjectState | undefined;
            resourceInputs["datasetName"] = state ? state.datasetName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recipeName"] = state ? state.recipeName : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["sample"] = state ? state.sample : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DatabrewProjectArgs | undefined;
            if ((!args || args.datasetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasetName'");
            }
            if ((!args || args.recipeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recipeName'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["datasetName"] = args ? args.datasetName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recipeName"] = args ? args.recipeName : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["sample"] = args ? args.sample : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabrewProject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabrewProject resources.
 */
export interface DatabrewProjectState {
    /**
     * Dataset name
     */
    datasetName?: pulumi.Input<string>;
    /**
     * Project name
     */
    name?: pulumi.Input<string>;
    /**
     * Recipe name
     */
    recipeName?: pulumi.Input<string>;
    /**
     * Role arn
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Sample
     */
    sample?: pulumi.Input<inputs.DatabrewProjectSample>;
    tags?: pulumi.Input<pulumi.Input<inputs.DatabrewProjectTag>[]>;
}

/**
 * The set of arguments for constructing a DatabrewProject resource.
 */
export interface DatabrewProjectArgs {
    /**
     * Dataset name
     */
    datasetName: pulumi.Input<string>;
    /**
     * Project name
     */
    name?: pulumi.Input<string>;
    /**
     * Recipe name
     */
    recipeName: pulumi.Input<string>;
    /**
     * Role arn
     */
    roleArn: pulumi.Input<string>;
    /**
     * Sample
     */
    sample?: pulumi.Input<inputs.DatabrewProjectSample>;
    tags?: pulumi.Input<pulumi.Input<inputs.DatabrewProjectTag>[]>;
}
