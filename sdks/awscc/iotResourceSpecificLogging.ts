// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IotResourceSpecificLogging extends pulumi.CustomResource {
    /**
     * Get an existing IotResourceSpecificLogging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotResourceSpecificLoggingState, opts?: pulumi.CustomResourceOptions): IotResourceSpecificLogging {
        return new IotResourceSpecificLogging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/iotResourceSpecificLogging:IotResourceSpecificLogging';

    /**
     * Returns true if the given object is an instance of IotResourceSpecificLogging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotResourceSpecificLogging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotResourceSpecificLogging.__pulumiType;
    }

    /**
     * The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
     */
    public readonly logLevel!: pulumi.Output<string>;
    /**
     * Unique Id for a Target (TargetType:TargetName), this will be internally built to serve as primary identifier for a log
     * target.
     */
    public /*out*/ readonly targetId!: pulumi.Output<string>;
    /**
     * The target name.
     */
    public readonly targetName!: pulumi.Output<string>;
    /**
     * The target type. Value must be THING_GROUP, CLIENT_ID, SOURCE_IP, PRINCIPAL_ID, or EVENT_TYPE.
     */
    public readonly targetType!: pulumi.Output<string>;

    /**
     * Create a IotResourceSpecificLogging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IotResourceSpecificLoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotResourceSpecificLoggingArgs | IotResourceSpecificLoggingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotResourceSpecificLoggingState | undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
            resourceInputs["targetName"] = state ? state.targetName : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
        } else {
            const args = argsOrState as IotResourceSpecificLoggingArgs | undefined;
            if ((!args || args.logLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logLevel'");
            }
            if ((!args || args.targetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetName'");
            }
            if ((!args || args.targetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetType'");
            }
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["targetName"] = args ? args.targetName : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["targetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IotResourceSpecificLogging.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IotResourceSpecificLogging resources.
 */
export interface IotResourceSpecificLoggingState {
    /**
     * The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Unique Id for a Target (TargetType:TargetName), this will be internally built to serve as primary identifier for a log
     * target.
     */
    targetId?: pulumi.Input<string>;
    /**
     * The target name.
     */
    targetName?: pulumi.Input<string>;
    /**
     * The target type. Value must be THING_GROUP, CLIENT_ID, SOURCE_IP, PRINCIPAL_ID, or EVENT_TYPE.
     */
    targetType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IotResourceSpecificLogging resource.
 */
export interface IotResourceSpecificLoggingArgs {
    /**
     * The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
     */
    logLevel: pulumi.Input<string>;
    /**
     * The target name.
     */
    targetName: pulumi.Input<string>;
    /**
     * The target type. Value must be THING_GROUP, CLIENT_ID, SOURCE_IP, PRINCIPAL_ID, or EVENT_TYPE.
     */
    targetType: pulumi.Input<string>;
}
