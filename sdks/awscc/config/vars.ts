// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("awscc");

/**
 * This is the AWS access key. It must be provided, but it can also be sourced from the `AWS_ACCESS_KEY_ID` environment
 * variable, or via a shared credentials file if `profile` is specified.
 */
export declare const accessKey: string | undefined;
Object.defineProperty(exports, "accessKey", {
    get() {
        return __config.get("accessKey");
    },
    enumerable: true,
});

/**
 * An `assume_role` block (documented below). Only one `assume_role` block may be in the configuration.
 */
export declare const assumeRole: outputs.config.AssumeRole | undefined;
Object.defineProperty(exports, "assumeRole", {
    get() {
        return __config.getObject<outputs.config.AssumeRole>("assumeRole");
    },
    enumerable: true,
});

/**
 * An `assume_role_with_web_identity` block (documented below). Only one `assume_role_with_web_identity` block may be in
 * the configuration.
 */
export declare const assumeRoleWithWebIdentity: outputs.config.AssumeRoleWithWebIdentity | undefined;
Object.defineProperty(exports, "assumeRoleWithWebIdentity", {
    get() {
        return __config.getObject<outputs.config.AssumeRoleWithWebIdentity>("assumeRoleWithWebIdentity");
    },
    enumerable: true,
});

/**
 * An `endpoints` block (documented below). Only one `endpoints` block may be in the configuration.
 */
export declare const endpoints: outputs.config.Endpoints | undefined;
Object.defineProperty(exports, "endpoints", {
    get() {
        return __config.getObject<outputs.config.Endpoints>("endpoints");
    },
    enumerable: true,
});

/**
 * URL of a proxy to use for HTTP requests when accessing the AWS API. Can also be set using the `HTTP_PROXY` or
 * `http_proxy` environment variables.
 */
export declare const httpProxy: string | undefined;
Object.defineProperty(exports, "httpProxy", {
    get() {
        return __config.get("httpProxy");
    },
    enumerable: true,
});

/**
 * URL of a proxy to use for HTTPS requests when accessing the AWS API. Can also be set using the `HTTPS_PROXY` or
 * `https_proxy` environment variables.
 */
export declare const httpsProxy: string | undefined;
Object.defineProperty(exports, "httpsProxy", {
    get() {
        return __config.get("httpsProxy");
    },
    enumerable: true,
});

/**
 * Explicitly allow the provider to perform "insecure" SSL requests. If not set, defaults to `false`.
 */
export declare const insecure: boolean | undefined;
Object.defineProperty(exports, "insecure", {
    get() {
        return __config.getObject<boolean>("insecure");
    },
    enumerable: true,
});

/**
 * The maximum number of times an AWS API request is retried on failure. If not set, defaults to 25.
 */
export declare const maxRetries: number | undefined;
Object.defineProperty(exports, "maxRetries", {
    get() {
        return __config.getObject<number>("maxRetries");
    },
    enumerable: true,
});

/**
 * Comma-separated list of hosts that should not use HTTP or HTTPS proxies. Can also be set using the `NO_PROXY` or
 * `no_proxy` environment variables.
 */
export declare const noProxy: string | undefined;
Object.defineProperty(exports, "noProxy", {
    get() {
        return __config.get("noProxy");
    },
    enumerable: true,
});

/**
 * This is the AWS profile name as set in the shared credentials file.
 */
export declare const profile: string | undefined;
Object.defineProperty(exports, "profile", {
    get() {
        return __config.get("profile");
    },
    enumerable: true,
});

/**
 * This is the AWS region. It must be provided, but it can also be sourced from the `AWS_DEFAULT_REGION` environment
 * variables, via a shared config file, or from the EC2 Instance Metadata Service if used.
 */
export declare const region: string | undefined;
Object.defineProperty(exports, "region", {
    get() {
        return __config.get("region");
    },
    enumerable: true,
});

/**
 * Amazon Resource Name of the AWS CloudFormation service role that is used on your behalf to perform operations.
 */
export declare const roleArn: string | undefined;
Object.defineProperty(exports, "roleArn", {
    get() {
        return __config.get("roleArn");
    },
    enumerable: true,
});

/**
 * This is the AWS secret key. It must be provided, but it can also be sourced from the `AWS_SECRET_ACCESS_KEY` environment
 * variable, or via a shared credentials file if `profile` is specified.
 */
export declare const secretKey: string | undefined;
Object.defineProperty(exports, "secretKey", {
    get() {
        return __config.get("secretKey");
    },
    enumerable: true,
});

/**
 * List of paths to shared config files. If not set, defaults to `~/.aws/config`.
 */
export declare const sharedConfigFiles: string[] | undefined;
Object.defineProperty(exports, "sharedConfigFiles", {
    get() {
        return __config.getObject<string[]>("sharedConfigFiles");
    },
    enumerable: true,
});

/**
 * List of paths to shared credentials files. If not set, defaults to `~/.aws/credentials`.
 */
export declare const sharedCredentialsFiles: string[] | undefined;
Object.defineProperty(exports, "sharedCredentialsFiles", {
    get() {
        return __config.getObject<string[]>("sharedCredentialsFiles");
    },
    enumerable: true,
});

export declare const skipMedatadataApiCheck: boolean | undefined;
Object.defineProperty(exports, "skipMedatadataApiCheck", {
    get() {
        return __config.getObject<boolean>("skipMedatadataApiCheck");
    },
    enumerable: true,
});

export declare const skipMetadataApiCheck: boolean | undefined;
Object.defineProperty(exports, "skipMetadataApiCheck", {
    get() {
        return __config.getObject<boolean>("skipMetadataApiCheck");
    },
    enumerable: true,
});

/**
 * Session token for validating temporary credentials. Typically provided after successful identity federation or
 * Multi-Factor Authentication (MFA) login. With MFA login, this is the session token provided afterward, not the 6 digit
 * MFA code used to get temporary credentials. It can also be sourced from the `AWS_SESSION_TOKEN` environment variable.
 */
export declare const token: string | undefined;
Object.defineProperty(exports, "token", {
    get() {
        return __config.get("token");
    },
    enumerable: true,
});

/**
 * Product details to append to User-Agent string in all AWS API calls.
 */
export declare const userAgents: outputs.config.UserAgents[] | undefined;
Object.defineProperty(exports, "userAgents", {
    get() {
        return __config.getObject<outputs.config.UserAgents[]>("userAgents");
    },
    enumerable: true,
});

