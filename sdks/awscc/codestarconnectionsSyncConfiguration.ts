// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CodestarconnectionsSyncConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing CodestarconnectionsSyncConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodestarconnectionsSyncConfigurationState, opts?: pulumi.CustomResourceOptions): CodestarconnectionsSyncConfiguration {
        return new CodestarconnectionsSyncConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/codestarconnectionsSyncConfiguration:CodestarconnectionsSyncConfiguration';

    /**
     * Returns true if the given object is an instance of CodestarconnectionsSyncConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CodestarconnectionsSyncConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodestarconnectionsSyncConfiguration.__pulumiType;
    }

    /**
     * The name of the branch of the repository from which resources are to be synchronized,
     */
    public readonly branch!: pulumi.Output<string>;
    /**
     * The source provider repository path of the sync configuration file of the respective SyncType.
     */
    public readonly configFile!: pulumi.Output<string>;
    /**
     * the ID of the entity that owns the repository.
     */
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    /**
     * The name of the external provider where your third-party code repository is configured.
     */
    public /*out*/ readonly providerType!: pulumi.Output<string>;
    /**
     * Whether to enable or disable publishing of deployment status to source providers.
     */
    public readonly publishDeploymentStatus!: pulumi.Output<string>;
    /**
     * A UUID that uniquely identifies the RepositoryLink that the SyncConfig is associated with.
     */
    public readonly repositoryLinkId!: pulumi.Output<string>;
    /**
     * The name of the repository that is being synced to.
     */
    public /*out*/ readonly repositoryName!: pulumi.Output<string>;
    /**
     * The name of the resource that is being synchronized to the repository.
     */
    public readonly resourceName!: pulumi.Output<string>;
    /**
     * The IAM Role that allows AWS to update CloudFormation stacks based on content in the specified repository.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * The type of resource synchronization service that is to be configured, for example, CFN_STACK_SYNC.
     */
    public readonly syncType!: pulumi.Output<string>;
    /**
     * When to trigger Git sync to begin the stack update.
     */
    public readonly triggerResourceUpdateOn!: pulumi.Output<string>;

    /**
     * Create a CodestarconnectionsSyncConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodestarconnectionsSyncConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodestarconnectionsSyncConfigurationArgs | CodestarconnectionsSyncConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodestarconnectionsSyncConfigurationState | undefined;
            resourceInputs["branch"] = state ? state.branch : undefined;
            resourceInputs["configFile"] = state ? state.configFile : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["publishDeploymentStatus"] = state ? state.publishDeploymentStatus : undefined;
            resourceInputs["repositoryLinkId"] = state ? state.repositoryLinkId : undefined;
            resourceInputs["repositoryName"] = state ? state.repositoryName : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["syncType"] = state ? state.syncType : undefined;
            resourceInputs["triggerResourceUpdateOn"] = state ? state.triggerResourceUpdateOn : undefined;
        } else {
            const args = argsOrState as CodestarconnectionsSyncConfigurationArgs | undefined;
            if ((!args || args.branch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'branch'");
            }
            if ((!args || args.configFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configFile'");
            }
            if ((!args || args.repositoryLinkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryLinkId'");
            }
            if ((!args || args.resourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceName'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.syncType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncType'");
            }
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["configFile"] = args ? args.configFile : undefined;
            resourceInputs["publishDeploymentStatus"] = args ? args.publishDeploymentStatus : undefined;
            resourceInputs["repositoryLinkId"] = args ? args.repositoryLinkId : undefined;
            resourceInputs["resourceName"] = args ? args.resourceName : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["syncType"] = args ? args.syncType : undefined;
            resourceInputs["triggerResourceUpdateOn"] = args ? args.triggerResourceUpdateOn : undefined;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["providerType"] = undefined /*out*/;
            resourceInputs["repositoryName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodestarconnectionsSyncConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CodestarconnectionsSyncConfiguration resources.
 */
export interface CodestarconnectionsSyncConfigurationState {
    /**
     * The name of the branch of the repository from which resources are to be synchronized,
     */
    branch?: pulumi.Input<string>;
    /**
     * The source provider repository path of the sync configuration file of the respective SyncType.
     */
    configFile?: pulumi.Input<string>;
    /**
     * the ID of the entity that owns the repository.
     */
    ownerId?: pulumi.Input<string>;
    /**
     * The name of the external provider where your third-party code repository is configured.
     */
    providerType?: pulumi.Input<string>;
    /**
     * Whether to enable or disable publishing of deployment status to source providers.
     */
    publishDeploymentStatus?: pulumi.Input<string>;
    /**
     * A UUID that uniquely identifies the RepositoryLink that the SyncConfig is associated with.
     */
    repositoryLinkId?: pulumi.Input<string>;
    /**
     * The name of the repository that is being synced to.
     */
    repositoryName?: pulumi.Input<string>;
    /**
     * The name of the resource that is being synchronized to the repository.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The IAM Role that allows AWS to update CloudFormation stacks based on content in the specified repository.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The type of resource synchronization service that is to be configured, for example, CFN_STACK_SYNC.
     */
    syncType?: pulumi.Input<string>;
    /**
     * When to trigger Git sync to begin the stack update.
     */
    triggerResourceUpdateOn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CodestarconnectionsSyncConfiguration resource.
 */
export interface CodestarconnectionsSyncConfigurationArgs {
    /**
     * The name of the branch of the repository from which resources are to be synchronized,
     */
    branch: pulumi.Input<string>;
    /**
     * The source provider repository path of the sync configuration file of the respective SyncType.
     */
    configFile: pulumi.Input<string>;
    /**
     * Whether to enable or disable publishing of deployment status to source providers.
     */
    publishDeploymentStatus?: pulumi.Input<string>;
    /**
     * A UUID that uniquely identifies the RepositoryLink that the SyncConfig is associated with.
     */
    repositoryLinkId: pulumi.Input<string>;
    /**
     * The name of the resource that is being synchronized to the repository.
     */
    resourceName: pulumi.Input<string>;
    /**
     * The IAM Role that allows AWS to update CloudFormation stacks based on content in the specified repository.
     */
    roleArn: pulumi.Input<string>;
    /**
     * The type of resource synchronization service that is to be configured, for example, CFN_STACK_SYNC.
     */
    syncType: pulumi.Input<string>;
    /**
     * When to trigger Git sync to begin the stack update.
     */
    triggerResourceUpdateOn?: pulumi.Input<string>;
}
