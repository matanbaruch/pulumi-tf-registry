// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2NetworkInsightsAccessScope extends pulumi.CustomResource {
    /**
     * Get an existing Ec2NetworkInsightsAccessScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2NetworkInsightsAccessScopeState, opts?: pulumi.CustomResourceOptions): Ec2NetworkInsightsAccessScope {
        return new Ec2NetworkInsightsAccessScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2NetworkInsightsAccessScope:Ec2NetworkInsightsAccessScope';

    /**
     * Returns true if the given object is an instance of Ec2NetworkInsightsAccessScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2NetworkInsightsAccessScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2NetworkInsightsAccessScope.__pulumiType;
    }

    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    public readonly excludePaths!: pulumi.Output<outputs.Ec2NetworkInsightsAccessScopeExcludePath[]>;
    public readonly matchPaths!: pulumi.Output<outputs.Ec2NetworkInsightsAccessScopeMatchPath[]>;
    public /*out*/ readonly networkInsightsAccessScopeArn!: pulumi.Output<string>;
    public /*out*/ readonly networkInsightsAccessScopeId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.Ec2NetworkInsightsAccessScopeTag[]>;
    public /*out*/ readonly updatedDate!: pulumi.Output<string>;

    /**
     * Create a Ec2NetworkInsightsAccessScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Ec2NetworkInsightsAccessScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2NetworkInsightsAccessScopeArgs | Ec2NetworkInsightsAccessScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2NetworkInsightsAccessScopeState | undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["excludePaths"] = state ? state.excludePaths : undefined;
            resourceInputs["matchPaths"] = state ? state.matchPaths : undefined;
            resourceInputs["networkInsightsAccessScopeArn"] = state ? state.networkInsightsAccessScopeArn : undefined;
            resourceInputs["networkInsightsAccessScopeId"] = state ? state.networkInsightsAccessScopeId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedDate"] = state ? state.updatedDate : undefined;
        } else {
            const args = argsOrState as Ec2NetworkInsightsAccessScopeArgs | undefined;
            resourceInputs["excludePaths"] = args ? args.excludePaths : undefined;
            resourceInputs["matchPaths"] = args ? args.matchPaths : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["networkInsightsAccessScopeArn"] = undefined /*out*/;
            resourceInputs["networkInsightsAccessScopeId"] = undefined /*out*/;
            resourceInputs["updatedDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2NetworkInsightsAccessScope.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2NetworkInsightsAccessScope resources.
 */
export interface Ec2NetworkInsightsAccessScopeState {
    createdDate?: pulumi.Input<string>;
    excludePaths?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInsightsAccessScopeExcludePath>[]>;
    matchPaths?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInsightsAccessScopeMatchPath>[]>;
    networkInsightsAccessScopeArn?: pulumi.Input<string>;
    networkInsightsAccessScopeId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInsightsAccessScopeTag>[]>;
    updatedDate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2NetworkInsightsAccessScope resource.
 */
export interface Ec2NetworkInsightsAccessScopeArgs {
    excludePaths?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInsightsAccessScopeExcludePath>[]>;
    matchPaths?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInsightsAccessScopeMatchPath>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInsightsAccessScopeTag>[]>;
}
