// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2KeyPair extends pulumi.CustomResource {
    /**
     * Get an existing Ec2KeyPair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2KeyPairState, opts?: pulumi.CustomResourceOptions): Ec2KeyPair {
        return new Ec2KeyPair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2KeyPair:Ec2KeyPair';

    /**
     * Returns true if the given object is an instance of Ec2KeyPair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2KeyPair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2KeyPair.__pulumiType;
    }

    public /*out*/ readonly keyFingerprint!: pulumi.Output<string>;
    /**
     * The format of the key pair. Default: ``pem``
     */
    public readonly keyFormat!: pulumi.Output<string>;
    /**
     * A unique name for the key pair. Constraints: Up to 255 ASCII characters
     */
    public readonly keyName!: pulumi.Output<string>;
    public /*out*/ readonly keyPairId!: pulumi.Output<string>;
    /**
     * The type of key pair. Note that ED25519 keys are not supported for Windows instances. If the ``PublicKeyMaterial``
     * property is specified, the ``KeyType`` property is ignored, and the key type is inferred from the ``PublicKeyMaterial``
     * value. Default: ``rsa``
     */
    public readonly keyType!: pulumi.Output<string>;
    /**
     * The public key material. The ``PublicKeyMaterial`` property is used to import a key pair. If this property is not
     * specified, then a new key pair will be created.
     */
    public readonly publicKeyMaterial!: pulumi.Output<string>;
    /**
     * The tags to apply to the key pair.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2KeyPairTag[]>;

    /**
     * Create a Ec2KeyPair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2KeyPairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2KeyPairArgs | Ec2KeyPairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2KeyPairState | undefined;
            resourceInputs["keyFingerprint"] = state ? state.keyFingerprint : undefined;
            resourceInputs["keyFormat"] = state ? state.keyFormat : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["keyPairId"] = state ? state.keyPairId : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["publicKeyMaterial"] = state ? state.publicKeyMaterial : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as Ec2KeyPairArgs | undefined;
            if ((!args || args.keyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyName'");
            }
            resourceInputs["keyFormat"] = args ? args.keyFormat : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["publicKeyMaterial"] = args ? args.publicKeyMaterial : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["keyFingerprint"] = undefined /*out*/;
            resourceInputs["keyPairId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2KeyPair.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2KeyPair resources.
 */
export interface Ec2KeyPairState {
    keyFingerprint?: pulumi.Input<string>;
    /**
     * The format of the key pair. Default: ``pem``
     */
    keyFormat?: pulumi.Input<string>;
    /**
     * A unique name for the key pair. Constraints: Up to 255 ASCII characters
     */
    keyName?: pulumi.Input<string>;
    keyPairId?: pulumi.Input<string>;
    /**
     * The type of key pair. Note that ED25519 keys are not supported for Windows instances. If the ``PublicKeyMaterial``
     * property is specified, the ``KeyType`` property is ignored, and the key type is inferred from the ``PublicKeyMaterial``
     * value. Default: ``rsa``
     */
    keyType?: pulumi.Input<string>;
    /**
     * The public key material. The ``PublicKeyMaterial`` property is used to import a key pair. If this property is not
     * specified, then a new key pair will be created.
     */
    publicKeyMaterial?: pulumi.Input<string>;
    /**
     * The tags to apply to the key pair.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2KeyPairTag>[]>;
}

/**
 * The set of arguments for constructing a Ec2KeyPair resource.
 */
export interface Ec2KeyPairArgs {
    /**
     * The format of the key pair. Default: ``pem``
     */
    keyFormat?: pulumi.Input<string>;
    /**
     * A unique name for the key pair. Constraints: Up to 255 ASCII characters
     */
    keyName: pulumi.Input<string>;
    /**
     * The type of key pair. Note that ED25519 keys are not supported for Windows instances. If the ``PublicKeyMaterial``
     * property is specified, the ``KeyType`` property is ignored, and the key type is inferred from the ``PublicKeyMaterial``
     * value. Default: ``rsa``
     */
    keyType?: pulumi.Input<string>;
    /**
     * The public key material. The ``PublicKeyMaterial`` property is used to import a key pair. If this property is not
     * specified, then a new key pair will be created.
     */
    publicKeyMaterial?: pulumi.Input<string>;
    /**
     * The tags to apply to the key pair.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2KeyPairTag>[]>;
}
