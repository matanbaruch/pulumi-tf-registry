// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkmanagerLink extends pulumi.CustomResource {
    /**
     * Get an existing NetworkmanagerLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkmanagerLinkState, opts?: pulumi.CustomResourceOptions): NetworkmanagerLink {
        return new NetworkmanagerLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/networkmanagerLink:NetworkmanagerLink';

    /**
     * Returns true if the given object is an instance of NetworkmanagerLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkmanagerLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkmanagerLink.__pulumiType;
    }

    /**
     * The Bandwidth for the link.
     */
    public readonly bandwidth!: pulumi.Output<outputs.NetworkmanagerLinkBandwidth>;
    /**
     * The date and time that the device was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the link.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The ID of the global network.
     */
    public readonly globalNetworkId!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the link.
     */
    public /*out*/ readonly linkArn!: pulumi.Output<string>;
    /**
     * The ID of the link.
     */
    public /*out*/ readonly linkId!: pulumi.Output<string>;
    /**
     * The provider of the link.
     */
    public readonly providerName!: pulumi.Output<string>;
    /**
     * The ID of the site
     */
    public readonly siteId!: pulumi.Output<string>;
    /**
     * The state of the link.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The tags for the link.
     */
    public readonly tags!: pulumi.Output<outputs.NetworkmanagerLinkTag[]>;
    /**
     * The type of the link.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a NetworkmanagerLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkmanagerLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkmanagerLinkArgs | NetworkmanagerLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkmanagerLinkState | undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["globalNetworkId"] = state ? state.globalNetworkId : undefined;
            resourceInputs["linkArn"] = state ? state.linkArn : undefined;
            resourceInputs["linkId"] = state ? state.linkId : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NetworkmanagerLinkArgs | undefined;
            if ((!args || args.bandwidth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bandwidth'");
            }
            if ((!args || args.globalNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalNetworkId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["globalNetworkId"] = args ? args.globalNetworkId : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["linkArn"] = undefined /*out*/;
            resourceInputs["linkId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkmanagerLink.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkmanagerLink resources.
 */
export interface NetworkmanagerLinkState {
    /**
     * The Bandwidth for the link.
     */
    bandwidth?: pulumi.Input<inputs.NetworkmanagerLinkBandwidth>;
    /**
     * The date and time that the device was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the link.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the global network.
     */
    globalNetworkId?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the link.
     */
    linkArn?: pulumi.Input<string>;
    /**
     * The ID of the link.
     */
    linkId?: pulumi.Input<string>;
    /**
     * The provider of the link.
     */
    providerName?: pulumi.Input<string>;
    /**
     * The ID of the site
     */
    siteId?: pulumi.Input<string>;
    /**
     * The state of the link.
     */
    state?: pulumi.Input<string>;
    /**
     * The tags for the link.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerLinkTag>[]>;
    /**
     * The type of the link.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkmanagerLink resource.
 */
export interface NetworkmanagerLinkArgs {
    /**
     * The Bandwidth for the link.
     */
    bandwidth: pulumi.Input<inputs.NetworkmanagerLinkBandwidth>;
    /**
     * The description of the link.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the global network.
     */
    globalNetworkId: pulumi.Input<string>;
    /**
     * The provider of the link.
     */
    providerName?: pulumi.Input<string>;
    /**
     * The ID of the site
     */
    siteId: pulumi.Input<string>;
    /**
     * The tags for the link.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerLinkTag>[]>;
    /**
     * The type of the link.
     */
    type?: pulumi.Input<string>;
}
