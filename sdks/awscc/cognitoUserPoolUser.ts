// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CognitoUserPoolUser extends pulumi.CustomResource {
    /**
     * Get an existing CognitoUserPoolUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CognitoUserPoolUserState, opts?: pulumi.CustomResourceOptions): CognitoUserPoolUser {
        return new CognitoUserPoolUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/cognitoUserPoolUser:CognitoUserPoolUser';

    /**
     * Returns true if the given object is an instance of CognitoUserPoolUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CognitoUserPoolUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CognitoUserPoolUser.__pulumiType;
    }

    public readonly clientMetadata!: pulumi.Output<{[key: string]: string}>;
    public readonly desiredDeliveryMediums!: pulumi.Output<string[]>;
    public readonly forceAliasCreation!: pulumi.Output<boolean>;
    public readonly messageAction!: pulumi.Output<string>;
    public readonly userAttributes!: pulumi.Output<outputs.CognitoUserPoolUserUserAttribute[]>;
    public readonly userPoolId!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;
    public readonly validationDatas!: pulumi.Output<outputs.CognitoUserPoolUserValidationData[]>;

    /**
     * Create a CognitoUserPoolUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CognitoUserPoolUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CognitoUserPoolUserArgs | CognitoUserPoolUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CognitoUserPoolUserState | undefined;
            resourceInputs["clientMetadata"] = state ? state.clientMetadata : undefined;
            resourceInputs["desiredDeliveryMediums"] = state ? state.desiredDeliveryMediums : undefined;
            resourceInputs["forceAliasCreation"] = state ? state.forceAliasCreation : undefined;
            resourceInputs["messageAction"] = state ? state.messageAction : undefined;
            resourceInputs["userAttributes"] = state ? state.userAttributes : undefined;
            resourceInputs["userPoolId"] = state ? state.userPoolId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["validationDatas"] = state ? state.validationDatas : undefined;
        } else {
            const args = argsOrState as CognitoUserPoolUserArgs | undefined;
            if ((!args || args.userPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPoolId'");
            }
            resourceInputs["clientMetadata"] = args ? args.clientMetadata : undefined;
            resourceInputs["desiredDeliveryMediums"] = args ? args.desiredDeliveryMediums : undefined;
            resourceInputs["forceAliasCreation"] = args ? args.forceAliasCreation : undefined;
            resourceInputs["messageAction"] = args ? args.messageAction : undefined;
            resourceInputs["userAttributes"] = args ? args.userAttributes : undefined;
            resourceInputs["userPoolId"] = args ? args.userPoolId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["validationDatas"] = args ? args.validationDatas : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CognitoUserPoolUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CognitoUserPoolUser resources.
 */
export interface CognitoUserPoolUserState {
    clientMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    desiredDeliveryMediums?: pulumi.Input<pulumi.Input<string>[]>;
    forceAliasCreation?: pulumi.Input<boolean>;
    messageAction?: pulumi.Input<string>;
    userAttributes?: pulumi.Input<pulumi.Input<inputs.CognitoUserPoolUserUserAttribute>[]>;
    userPoolId?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    validationDatas?: pulumi.Input<pulumi.Input<inputs.CognitoUserPoolUserValidationData>[]>;
}

/**
 * The set of arguments for constructing a CognitoUserPoolUser resource.
 */
export interface CognitoUserPoolUserArgs {
    clientMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    desiredDeliveryMediums?: pulumi.Input<pulumi.Input<string>[]>;
    forceAliasCreation?: pulumi.Input<boolean>;
    messageAction?: pulumi.Input<string>;
    userAttributes?: pulumi.Input<pulumi.Input<inputs.CognitoUserPoolUserUserAttribute>[]>;
    userPoolId: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    validationDatas?: pulumi.Input<pulumi.Input<inputs.CognitoUserPoolUserValidationData>[]>;
}
