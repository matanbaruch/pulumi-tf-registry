// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppsyncResolver extends pulumi.CustomResource {
    /**
     * Get an existing AppsyncResolver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppsyncResolverState, opts?: pulumi.CustomResourceOptions): AppsyncResolver {
        return new AppsyncResolver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/appsyncResolver:AppsyncResolver';

    /**
     * Returns true if the given object is an instance of AppsyncResolver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppsyncResolver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppsyncResolver.__pulumiType;
    }

    /**
     * The APSYlong GraphQL API to which you want to attach this resolver.
     */
    public readonly apiId!: pulumi.Output<string>;
    /**
     * The caching configuration for the resolver.
     */
    public readonly cachingConfig!: pulumi.Output<outputs.AppsyncResolverCachingConfig>;
    /**
     * The ``resolver`` code that contains the request and response functions. When code is used, the ``runtime`` is required.
     * The runtime value must be ``APPSYNC_JS``.
     */
    public readonly code!: pulumi.Output<string>;
    /**
     * The Amazon S3 endpoint.
     */
    public readonly codeS3Location!: pulumi.Output<string>;
    /**
     * The resolver data source name.
     */
    public readonly dataSourceName!: pulumi.Output<string>;
    /**
     * The GraphQL field on a type that invokes the resolver.
     */
    public readonly fieldName!: pulumi.Output<string>;
    /**
     * The resolver type. + *UNIT*: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT
     * resolver to run a GraphQL query against a single data source. + *PIPELINE*: A PIPELINE resolver type. You can use a
     * PIPELINE resolver to invoke a series of ``Function`` objects in a serial manner. You can use a pipeline resolver to run
     * a GraphQL query against multiple data sources.
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * The maximum number of resolver request inputs that will be sent to a single LAMlong function in a ``BatchInvoke``
     * operation.
     */
    public readonly maxBatchSize!: pulumi.Output<number>;
    /**
     * Enables or disables enhanced resolver metrics for specified resolvers. Note that ``MetricsConfig`` won't be used unless
     * the ``resolverLevelMetricsBehavior`` value is set to ``PER_RESOLVER_METRICS``. If the ``resolverLevelMetricsBehavior``
     * is set to ``FULL_REQUEST_RESOLVER_METRICS`` instead, ``MetricsConfig`` will be ignored. However, you can still set its
     * value.
     */
    public readonly metricsConfig!: pulumi.Output<string>;
    /**
     * Functions linked with the pipeline resolver.
     */
    public readonly pipelineConfig!: pulumi.Output<outputs.AppsyncResolverPipelineConfig>;
    /**
     * The request mapping template. Request mapping templates are optional when using a Lambda data source. For all other data
     * sources, a request mapping template is required.
     */
    public readonly requestMappingTemplate!: pulumi.Output<string>;
    /**
     * The location of a request mapping template in an S3 bucket. Use this if you want to provision with a template file in S3
     * rather than embedding it in your CFNshort template.
     */
    public readonly requestMappingTemplateS3Location!: pulumi.Output<string>;
    public /*out*/ readonly resolverArn!: pulumi.Output<string>;
    /**
     * The response mapping template.
     */
    public readonly responseMappingTemplate!: pulumi.Output<string>;
    /**
     * The location of a response mapping template in an S3 bucket. Use this if you want to provision with a template file in
     * S3 rather than embedding it in your CFNshort template.
     */
    public readonly responseMappingTemplateS3Location!: pulumi.Output<string>;
    /**
     * Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to
     * use. Note that if a runtime is specified, code must also be specified.
     */
    public readonly runtime!: pulumi.Output<outputs.AppsyncResolverRuntime>;
    /**
     * The ``SyncConfig`` for a resolver attached to a versioned data source.
     */
    public readonly syncConfig!: pulumi.Output<outputs.AppsyncResolverSyncConfig>;
    /**
     * The GraphQL type that invokes this resolver.
     */
    public readonly typeName!: pulumi.Output<string>;

    /**
     * Create a AppsyncResolver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppsyncResolverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppsyncResolverArgs | AppsyncResolverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppsyncResolverState | undefined;
            resourceInputs["apiId"] = state ? state.apiId : undefined;
            resourceInputs["cachingConfig"] = state ? state.cachingConfig : undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["codeS3Location"] = state ? state.codeS3Location : undefined;
            resourceInputs["dataSourceName"] = state ? state.dataSourceName : undefined;
            resourceInputs["fieldName"] = state ? state.fieldName : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["maxBatchSize"] = state ? state.maxBatchSize : undefined;
            resourceInputs["metricsConfig"] = state ? state.metricsConfig : undefined;
            resourceInputs["pipelineConfig"] = state ? state.pipelineConfig : undefined;
            resourceInputs["requestMappingTemplate"] = state ? state.requestMappingTemplate : undefined;
            resourceInputs["requestMappingTemplateS3Location"] = state ? state.requestMappingTemplateS3Location : undefined;
            resourceInputs["resolverArn"] = state ? state.resolverArn : undefined;
            resourceInputs["responseMappingTemplate"] = state ? state.responseMappingTemplate : undefined;
            resourceInputs["responseMappingTemplateS3Location"] = state ? state.responseMappingTemplateS3Location : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["syncConfig"] = state ? state.syncConfig : undefined;
            resourceInputs["typeName"] = state ? state.typeName : undefined;
        } else {
            const args = argsOrState as AppsyncResolverArgs | undefined;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.fieldName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fieldName'");
            }
            if ((!args || args.typeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'typeName'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["cachingConfig"] = args ? args.cachingConfig : undefined;
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["codeS3Location"] = args ? args.codeS3Location : undefined;
            resourceInputs["dataSourceName"] = args ? args.dataSourceName : undefined;
            resourceInputs["fieldName"] = args ? args.fieldName : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["maxBatchSize"] = args ? args.maxBatchSize : undefined;
            resourceInputs["metricsConfig"] = args ? args.metricsConfig : undefined;
            resourceInputs["pipelineConfig"] = args ? args.pipelineConfig : undefined;
            resourceInputs["requestMappingTemplate"] = args ? args.requestMappingTemplate : undefined;
            resourceInputs["requestMappingTemplateS3Location"] = args ? args.requestMappingTemplateS3Location : undefined;
            resourceInputs["responseMappingTemplate"] = args ? args.responseMappingTemplate : undefined;
            resourceInputs["responseMappingTemplateS3Location"] = args ? args.responseMappingTemplateS3Location : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["syncConfig"] = args ? args.syncConfig : undefined;
            resourceInputs["typeName"] = args ? args.typeName : undefined;
            resourceInputs["resolverArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppsyncResolver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppsyncResolver resources.
 */
export interface AppsyncResolverState {
    /**
     * The APSYlong GraphQL API to which you want to attach this resolver.
     */
    apiId?: pulumi.Input<string>;
    /**
     * The caching configuration for the resolver.
     */
    cachingConfig?: pulumi.Input<inputs.AppsyncResolverCachingConfig>;
    /**
     * The ``resolver`` code that contains the request and response functions. When code is used, the ``runtime`` is required.
     * The runtime value must be ``APPSYNC_JS``.
     */
    code?: pulumi.Input<string>;
    /**
     * The Amazon S3 endpoint.
     */
    codeS3Location?: pulumi.Input<string>;
    /**
     * The resolver data source name.
     */
    dataSourceName?: pulumi.Input<string>;
    /**
     * The GraphQL field on a type that invokes the resolver.
     */
    fieldName?: pulumi.Input<string>;
    /**
     * The resolver type. + *UNIT*: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT
     * resolver to run a GraphQL query against a single data source. + *PIPELINE*: A PIPELINE resolver type. You can use a
     * PIPELINE resolver to invoke a series of ``Function`` objects in a serial manner. You can use a pipeline resolver to run
     * a GraphQL query against multiple data sources.
     */
    kind?: pulumi.Input<string>;
    /**
     * The maximum number of resolver request inputs that will be sent to a single LAMlong function in a ``BatchInvoke``
     * operation.
     */
    maxBatchSize?: pulumi.Input<number>;
    /**
     * Enables or disables enhanced resolver metrics for specified resolvers. Note that ``MetricsConfig`` won't be used unless
     * the ``resolverLevelMetricsBehavior`` value is set to ``PER_RESOLVER_METRICS``. If the ``resolverLevelMetricsBehavior``
     * is set to ``FULL_REQUEST_RESOLVER_METRICS`` instead, ``MetricsConfig`` will be ignored. However, you can still set its
     * value.
     */
    metricsConfig?: pulumi.Input<string>;
    /**
     * Functions linked with the pipeline resolver.
     */
    pipelineConfig?: pulumi.Input<inputs.AppsyncResolverPipelineConfig>;
    /**
     * The request mapping template. Request mapping templates are optional when using a Lambda data source. For all other data
     * sources, a request mapping template is required.
     */
    requestMappingTemplate?: pulumi.Input<string>;
    /**
     * The location of a request mapping template in an S3 bucket. Use this if you want to provision with a template file in S3
     * rather than embedding it in your CFNshort template.
     */
    requestMappingTemplateS3Location?: pulumi.Input<string>;
    resolverArn?: pulumi.Input<string>;
    /**
     * The response mapping template.
     */
    responseMappingTemplate?: pulumi.Input<string>;
    /**
     * The location of a response mapping template in an S3 bucket. Use this if you want to provision with a template file in
     * S3 rather than embedding it in your CFNshort template.
     */
    responseMappingTemplateS3Location?: pulumi.Input<string>;
    /**
     * Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to
     * use. Note that if a runtime is specified, code must also be specified.
     */
    runtime?: pulumi.Input<inputs.AppsyncResolverRuntime>;
    /**
     * The ``SyncConfig`` for a resolver attached to a versioned data source.
     */
    syncConfig?: pulumi.Input<inputs.AppsyncResolverSyncConfig>;
    /**
     * The GraphQL type that invokes this resolver.
     */
    typeName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppsyncResolver resource.
 */
export interface AppsyncResolverArgs {
    /**
     * The APSYlong GraphQL API to which you want to attach this resolver.
     */
    apiId: pulumi.Input<string>;
    /**
     * The caching configuration for the resolver.
     */
    cachingConfig?: pulumi.Input<inputs.AppsyncResolverCachingConfig>;
    /**
     * The ``resolver`` code that contains the request and response functions. When code is used, the ``runtime`` is required.
     * The runtime value must be ``APPSYNC_JS``.
     */
    code?: pulumi.Input<string>;
    /**
     * The Amazon S3 endpoint.
     */
    codeS3Location?: pulumi.Input<string>;
    /**
     * The resolver data source name.
     */
    dataSourceName?: pulumi.Input<string>;
    /**
     * The GraphQL field on a type that invokes the resolver.
     */
    fieldName: pulumi.Input<string>;
    /**
     * The resolver type. + *UNIT*: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT
     * resolver to run a GraphQL query against a single data source. + *PIPELINE*: A PIPELINE resolver type. You can use a
     * PIPELINE resolver to invoke a series of ``Function`` objects in a serial manner. You can use a pipeline resolver to run
     * a GraphQL query against multiple data sources.
     */
    kind?: pulumi.Input<string>;
    /**
     * The maximum number of resolver request inputs that will be sent to a single LAMlong function in a ``BatchInvoke``
     * operation.
     */
    maxBatchSize?: pulumi.Input<number>;
    /**
     * Enables or disables enhanced resolver metrics for specified resolvers. Note that ``MetricsConfig`` won't be used unless
     * the ``resolverLevelMetricsBehavior`` value is set to ``PER_RESOLVER_METRICS``. If the ``resolverLevelMetricsBehavior``
     * is set to ``FULL_REQUEST_RESOLVER_METRICS`` instead, ``MetricsConfig`` will be ignored. However, you can still set its
     * value.
     */
    metricsConfig?: pulumi.Input<string>;
    /**
     * Functions linked with the pipeline resolver.
     */
    pipelineConfig?: pulumi.Input<inputs.AppsyncResolverPipelineConfig>;
    /**
     * The request mapping template. Request mapping templates are optional when using a Lambda data source. For all other data
     * sources, a request mapping template is required.
     */
    requestMappingTemplate?: pulumi.Input<string>;
    /**
     * The location of a request mapping template in an S3 bucket. Use this if you want to provision with a template file in S3
     * rather than embedding it in your CFNshort template.
     */
    requestMappingTemplateS3Location?: pulumi.Input<string>;
    /**
     * The response mapping template.
     */
    responseMappingTemplate?: pulumi.Input<string>;
    /**
     * The location of a response mapping template in an S3 bucket. Use this if you want to provision with a template file in
     * S3 rather than embedding it in your CFNshort template.
     */
    responseMappingTemplateS3Location?: pulumi.Input<string>;
    /**
     * Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to
     * use. Note that if a runtime is specified, code must also be specified.
     */
    runtime?: pulumi.Input<inputs.AppsyncResolverRuntime>;
    /**
     * The ``SyncConfig`` for a resolver attached to a versioned data source.
     */
    syncConfig?: pulumi.Input<inputs.AppsyncResolverSyncConfig>;
    /**
     * The GraphQL type that invokes this resolver.
     */
    typeName: pulumi.Input<string>;
}
