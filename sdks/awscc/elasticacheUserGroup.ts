// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElasticacheUserGroup extends pulumi.CustomResource {
    /**
     * Get an existing ElasticacheUserGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticacheUserGroupState, opts?: pulumi.CustomResourceOptions): ElasticacheUserGroup {
        return new ElasticacheUserGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/elasticacheUserGroup:ElasticacheUserGroup';

    /**
     * Returns true if the given object is an instance of ElasticacheUserGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticacheUserGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticacheUserGroup.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the user account.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Must be redis.
     */
    public readonly engine!: pulumi.Output<string>;
    /**
     * Indicates user group status. Can be "creating", "active", "modifying", "deleting".
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this user.
     */
    public readonly tags!: pulumi.Output<outputs.ElasticacheUserGroupTag[]>;
    /**
     * The ID of the user group.
     */
    public readonly userGroupId!: pulumi.Output<string>;
    /**
     * List of users associated to this user group.
     */
    public readonly userIds!: pulumi.Output<string[]>;

    /**
     * Create a ElasticacheUserGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticacheUserGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticacheUserGroupArgs | ElasticacheUserGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticacheUserGroupState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userGroupId"] = state ? state.userGroupId : undefined;
            resourceInputs["userIds"] = state ? state.userIds : undefined;
        } else {
            const args = argsOrState as ElasticacheUserGroupArgs | undefined;
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.userGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userGroupId'");
            }
            if ((!args || args.userIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userIds'");
            }
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userGroupId"] = args ? args.userGroupId : undefined;
            resourceInputs["userIds"] = args ? args.userIds : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElasticacheUserGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticacheUserGroup resources.
 */
export interface ElasticacheUserGroupState {
    /**
     * The Amazon Resource Name (ARN) of the user account.
     */
    arn?: pulumi.Input<string>;
    /**
     * Must be redis.
     */
    engine?: pulumi.Input<string>;
    /**
     * Indicates user group status. Can be "creating", "active", "modifying", "deleting".
     */
    status?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this user.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ElasticacheUserGroupTag>[]>;
    /**
     * The ID of the user group.
     */
    userGroupId?: pulumi.Input<string>;
    /**
     * List of users associated to this user group.
     */
    userIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ElasticacheUserGroup resource.
 */
export interface ElasticacheUserGroupArgs {
    /**
     * Must be redis.
     */
    engine: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this user.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ElasticacheUserGroupTag>[]>;
    /**
     * The ID of the user group.
     */
    userGroupId: pulumi.Input<string>;
    /**
     * List of users associated to this user group.
     */
    userIds: pulumi.Input<pulumi.Input<string>[]>;
}
