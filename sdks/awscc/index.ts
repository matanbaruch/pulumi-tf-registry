// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessanalyzerAnalyzerArgs, AccessanalyzerAnalyzerState } from "./accessanalyzerAnalyzer";
export type AccessanalyzerAnalyzer = import("./accessanalyzerAnalyzer").AccessanalyzerAnalyzer;
export const AccessanalyzerAnalyzer: typeof import("./accessanalyzerAnalyzer").AccessanalyzerAnalyzer = null as any;
utilities.lazyLoad(exports, ["AccessanalyzerAnalyzer"], () => require("./accessanalyzerAnalyzer"));

export { AcmpcaCertificateArgs, AcmpcaCertificateState } from "./acmpcaCertificate";
export type AcmpcaCertificate = import("./acmpcaCertificate").AcmpcaCertificate;
export const AcmpcaCertificate: typeof import("./acmpcaCertificate").AcmpcaCertificate = null as any;
utilities.lazyLoad(exports, ["AcmpcaCertificate"], () => require("./acmpcaCertificate"));

export { AcmpcaCertificateAuthorityArgs, AcmpcaCertificateAuthorityState } from "./acmpcaCertificateAuthority";
export type AcmpcaCertificateAuthority = import("./acmpcaCertificateAuthority").AcmpcaCertificateAuthority;
export const AcmpcaCertificateAuthority: typeof import("./acmpcaCertificateAuthority").AcmpcaCertificateAuthority = null as any;
utilities.lazyLoad(exports, ["AcmpcaCertificateAuthority"], () => require("./acmpcaCertificateAuthority"));

export { AcmpcaCertificateAuthorityActivationArgs, AcmpcaCertificateAuthorityActivationState } from "./acmpcaCertificateAuthorityActivation";
export type AcmpcaCertificateAuthorityActivation = import("./acmpcaCertificateAuthorityActivation").AcmpcaCertificateAuthorityActivation;
export const AcmpcaCertificateAuthorityActivation: typeof import("./acmpcaCertificateAuthorityActivation").AcmpcaCertificateAuthorityActivation = null as any;
utilities.lazyLoad(exports, ["AcmpcaCertificateAuthorityActivation"], () => require("./acmpcaCertificateAuthorityActivation"));

export { AcmpcaPermissionArgs, AcmpcaPermissionState } from "./acmpcaPermission";
export type AcmpcaPermission = import("./acmpcaPermission").AcmpcaPermission;
export const AcmpcaPermission: typeof import("./acmpcaPermission").AcmpcaPermission = null as any;
utilities.lazyLoad(exports, ["AcmpcaPermission"], () => require("./acmpcaPermission"));

export { AmplifyAppArgs, AmplifyAppState } from "./amplifyApp";
export type AmplifyApp = import("./amplifyApp").AmplifyApp;
export const AmplifyApp: typeof import("./amplifyApp").AmplifyApp = null as any;
utilities.lazyLoad(exports, ["AmplifyApp"], () => require("./amplifyApp"));

export { AmplifyBranchArgs, AmplifyBranchState } from "./amplifyBranch";
export type AmplifyBranch = import("./amplifyBranch").AmplifyBranch;
export const AmplifyBranch: typeof import("./amplifyBranch").AmplifyBranch = null as any;
utilities.lazyLoad(exports, ["AmplifyBranch"], () => require("./amplifyBranch"));

export { AmplifyDomainArgs, AmplifyDomainState } from "./amplifyDomain";
export type AmplifyDomain = import("./amplifyDomain").AmplifyDomain;
export const AmplifyDomain: typeof import("./amplifyDomain").AmplifyDomain = null as any;
utilities.lazyLoad(exports, ["AmplifyDomain"], () => require("./amplifyDomain"));

export { ApigatewayAccountArgs, ApigatewayAccountState } from "./apigatewayAccount";
export type ApigatewayAccount = import("./apigatewayAccount").ApigatewayAccount;
export const ApigatewayAccount: typeof import("./apigatewayAccount").ApigatewayAccount = null as any;
utilities.lazyLoad(exports, ["ApigatewayAccount"], () => require("./apigatewayAccount"));

export { ApigatewayApiKeyArgs, ApigatewayApiKeyState } from "./apigatewayApiKey";
export type ApigatewayApiKey = import("./apigatewayApiKey").ApigatewayApiKey;
export const ApigatewayApiKey: typeof import("./apigatewayApiKey").ApigatewayApiKey = null as any;
utilities.lazyLoad(exports, ["ApigatewayApiKey"], () => require("./apigatewayApiKey"));

export { ApigatewayAuthorizerArgs, ApigatewayAuthorizerState } from "./apigatewayAuthorizer";
export type ApigatewayAuthorizer = import("./apigatewayAuthorizer").ApigatewayAuthorizer;
export const ApigatewayAuthorizer: typeof import("./apigatewayAuthorizer").ApigatewayAuthorizer = null as any;
utilities.lazyLoad(exports, ["ApigatewayAuthorizer"], () => require("./apigatewayAuthorizer"));

export { ApigatewayBasePathMappingArgs, ApigatewayBasePathMappingState } from "./apigatewayBasePathMapping";
export type ApigatewayBasePathMapping = import("./apigatewayBasePathMapping").ApigatewayBasePathMapping;
export const ApigatewayBasePathMapping: typeof import("./apigatewayBasePathMapping").ApigatewayBasePathMapping = null as any;
utilities.lazyLoad(exports, ["ApigatewayBasePathMapping"], () => require("./apigatewayBasePathMapping"));

export { ApigatewayClientCertificateArgs, ApigatewayClientCertificateState } from "./apigatewayClientCertificate";
export type ApigatewayClientCertificate = import("./apigatewayClientCertificate").ApigatewayClientCertificate;
export const ApigatewayClientCertificate: typeof import("./apigatewayClientCertificate").ApigatewayClientCertificate = null as any;
utilities.lazyLoad(exports, ["ApigatewayClientCertificate"], () => require("./apigatewayClientCertificate"));

export { ApigatewayDeploymentArgs, ApigatewayDeploymentState } from "./apigatewayDeployment";
export type ApigatewayDeployment = import("./apigatewayDeployment").ApigatewayDeployment;
export const ApigatewayDeployment: typeof import("./apigatewayDeployment").ApigatewayDeployment = null as any;
utilities.lazyLoad(exports, ["ApigatewayDeployment"], () => require("./apigatewayDeployment"));

export { ApigatewayDocumentationPartArgs, ApigatewayDocumentationPartState } from "./apigatewayDocumentationPart";
export type ApigatewayDocumentationPart = import("./apigatewayDocumentationPart").ApigatewayDocumentationPart;
export const ApigatewayDocumentationPart: typeof import("./apigatewayDocumentationPart").ApigatewayDocumentationPart = null as any;
utilities.lazyLoad(exports, ["ApigatewayDocumentationPart"], () => require("./apigatewayDocumentationPart"));

export { ApigatewayDocumentationVersionArgs, ApigatewayDocumentationVersionState } from "./apigatewayDocumentationVersion";
export type ApigatewayDocumentationVersion = import("./apigatewayDocumentationVersion").ApigatewayDocumentationVersion;
export const ApigatewayDocumentationVersion: typeof import("./apigatewayDocumentationVersion").ApigatewayDocumentationVersion = null as any;
utilities.lazyLoad(exports, ["ApigatewayDocumentationVersion"], () => require("./apigatewayDocumentationVersion"));

export { ApigatewayDomainNameArgs, ApigatewayDomainNameState } from "./apigatewayDomainName";
export type ApigatewayDomainName = import("./apigatewayDomainName").ApigatewayDomainName;
export const ApigatewayDomainName: typeof import("./apigatewayDomainName").ApigatewayDomainName = null as any;
utilities.lazyLoad(exports, ["ApigatewayDomainName"], () => require("./apigatewayDomainName"));

export { ApigatewayGatewayResponseArgs, ApigatewayGatewayResponseState } from "./apigatewayGatewayResponse";
export type ApigatewayGatewayResponse = import("./apigatewayGatewayResponse").ApigatewayGatewayResponse;
export const ApigatewayGatewayResponse: typeof import("./apigatewayGatewayResponse").ApigatewayGatewayResponse = null as any;
utilities.lazyLoad(exports, ["ApigatewayGatewayResponse"], () => require("./apigatewayGatewayResponse"));

export { ApigatewayMethodArgs, ApigatewayMethodState } from "./apigatewayMethod";
export type ApigatewayMethod = import("./apigatewayMethod").ApigatewayMethod;
export const ApigatewayMethod: typeof import("./apigatewayMethod").ApigatewayMethod = null as any;
utilities.lazyLoad(exports, ["ApigatewayMethod"], () => require("./apigatewayMethod"));

export { ApigatewayModelArgs, ApigatewayModelState } from "./apigatewayModel";
export type ApigatewayModel = import("./apigatewayModel").ApigatewayModel;
export const ApigatewayModel: typeof import("./apigatewayModel").ApigatewayModel = null as any;
utilities.lazyLoad(exports, ["ApigatewayModel"], () => require("./apigatewayModel"));

export { ApigatewayRequestValidatorArgs, ApigatewayRequestValidatorState } from "./apigatewayRequestValidator";
export type ApigatewayRequestValidator = import("./apigatewayRequestValidator").ApigatewayRequestValidator;
export const ApigatewayRequestValidator: typeof import("./apigatewayRequestValidator").ApigatewayRequestValidator = null as any;
utilities.lazyLoad(exports, ["ApigatewayRequestValidator"], () => require("./apigatewayRequestValidator"));

export { ApigatewayResourceArgs, ApigatewayResourceState } from "./apigatewayResource";
export type ApigatewayResource = import("./apigatewayResource").ApigatewayResource;
export const ApigatewayResource: typeof import("./apigatewayResource").ApigatewayResource = null as any;
utilities.lazyLoad(exports, ["ApigatewayResource"], () => require("./apigatewayResource"));

export { ApigatewayRestApiArgs, ApigatewayRestApiState } from "./apigatewayRestApi";
export type ApigatewayRestApi = import("./apigatewayRestApi").ApigatewayRestApi;
export const ApigatewayRestApi: typeof import("./apigatewayRestApi").ApigatewayRestApi = null as any;
utilities.lazyLoad(exports, ["ApigatewayRestApi"], () => require("./apigatewayRestApi"));

export { ApigatewayStageArgs, ApigatewayStageState } from "./apigatewayStage";
export type ApigatewayStage = import("./apigatewayStage").ApigatewayStage;
export const ApigatewayStage: typeof import("./apigatewayStage").ApigatewayStage = null as any;
utilities.lazyLoad(exports, ["ApigatewayStage"], () => require("./apigatewayStage"));

export { ApigatewayUsagePlanArgs, ApigatewayUsagePlanState } from "./apigatewayUsagePlan";
export type ApigatewayUsagePlan = import("./apigatewayUsagePlan").ApigatewayUsagePlan;
export const ApigatewayUsagePlan: typeof import("./apigatewayUsagePlan").ApigatewayUsagePlan = null as any;
utilities.lazyLoad(exports, ["ApigatewayUsagePlan"], () => require("./apigatewayUsagePlan"));

export { ApigatewayUsagePlanKeyArgs, ApigatewayUsagePlanKeyState } from "./apigatewayUsagePlanKey";
export type ApigatewayUsagePlanKey = import("./apigatewayUsagePlanKey").ApigatewayUsagePlanKey;
export const ApigatewayUsagePlanKey: typeof import("./apigatewayUsagePlanKey").ApigatewayUsagePlanKey = null as any;
utilities.lazyLoad(exports, ["ApigatewayUsagePlanKey"], () => require("./apigatewayUsagePlanKey"));

export { ApigatewayVpcLinkArgs, ApigatewayVpcLinkState } from "./apigatewayVpcLink";
export type ApigatewayVpcLink = import("./apigatewayVpcLink").ApigatewayVpcLink;
export const ApigatewayVpcLink: typeof import("./apigatewayVpcLink").ApigatewayVpcLink = null as any;
utilities.lazyLoad(exports, ["ApigatewayVpcLink"], () => require("./apigatewayVpcLink"));

export { Apigatewayv2ApiArgs, Apigatewayv2ApiState } from "./apigatewayv2Api";
export type Apigatewayv2Api = import("./apigatewayv2Api").Apigatewayv2Api;
export const Apigatewayv2Api: typeof import("./apigatewayv2Api").Apigatewayv2Api = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2Api"], () => require("./apigatewayv2Api"));

export { Apigatewayv2ApiMappingArgs, Apigatewayv2ApiMappingState } from "./apigatewayv2ApiMapping";
export type Apigatewayv2ApiMapping = import("./apigatewayv2ApiMapping").Apigatewayv2ApiMapping;
export const Apigatewayv2ApiMapping: typeof import("./apigatewayv2ApiMapping").Apigatewayv2ApiMapping = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2ApiMapping"], () => require("./apigatewayv2ApiMapping"));

export { Apigatewayv2AuthorizerArgs, Apigatewayv2AuthorizerState } from "./apigatewayv2Authorizer";
export type Apigatewayv2Authorizer = import("./apigatewayv2Authorizer").Apigatewayv2Authorizer;
export const Apigatewayv2Authorizer: typeof import("./apigatewayv2Authorizer").Apigatewayv2Authorizer = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2Authorizer"], () => require("./apigatewayv2Authorizer"));

export { Apigatewayv2DeploymentArgs, Apigatewayv2DeploymentState } from "./apigatewayv2Deployment";
export type Apigatewayv2Deployment = import("./apigatewayv2Deployment").Apigatewayv2Deployment;
export const Apigatewayv2Deployment: typeof import("./apigatewayv2Deployment").Apigatewayv2Deployment = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2Deployment"], () => require("./apigatewayv2Deployment"));

export { Apigatewayv2DomainNameArgs, Apigatewayv2DomainNameState } from "./apigatewayv2DomainName";
export type Apigatewayv2DomainName = import("./apigatewayv2DomainName").Apigatewayv2DomainName;
export const Apigatewayv2DomainName: typeof import("./apigatewayv2DomainName").Apigatewayv2DomainName = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2DomainName"], () => require("./apigatewayv2DomainName"));

export { Apigatewayv2IntegrationResponseArgs, Apigatewayv2IntegrationResponseState } from "./apigatewayv2IntegrationResponse";
export type Apigatewayv2IntegrationResponse = import("./apigatewayv2IntegrationResponse").Apigatewayv2IntegrationResponse;
export const Apigatewayv2IntegrationResponse: typeof import("./apigatewayv2IntegrationResponse").Apigatewayv2IntegrationResponse = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2IntegrationResponse"], () => require("./apigatewayv2IntegrationResponse"));

export { Apigatewayv2ModelArgs, Apigatewayv2ModelState } from "./apigatewayv2Model";
export type Apigatewayv2Model = import("./apigatewayv2Model").Apigatewayv2Model;
export const Apigatewayv2Model: typeof import("./apigatewayv2Model").Apigatewayv2Model = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2Model"], () => require("./apigatewayv2Model"));

export { Apigatewayv2RouteArgs, Apigatewayv2RouteState } from "./apigatewayv2Route";
export type Apigatewayv2Route = import("./apigatewayv2Route").Apigatewayv2Route;
export const Apigatewayv2Route: typeof import("./apigatewayv2Route").Apigatewayv2Route = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2Route"], () => require("./apigatewayv2Route"));

export { Apigatewayv2RouteResponseArgs, Apigatewayv2RouteResponseState } from "./apigatewayv2RouteResponse";
export type Apigatewayv2RouteResponse = import("./apigatewayv2RouteResponse").Apigatewayv2RouteResponse;
export const Apigatewayv2RouteResponse: typeof import("./apigatewayv2RouteResponse").Apigatewayv2RouteResponse = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2RouteResponse"], () => require("./apigatewayv2RouteResponse"));

export { Apigatewayv2VpcLinkArgs, Apigatewayv2VpcLinkState } from "./apigatewayv2VpcLink";
export type Apigatewayv2VpcLink = import("./apigatewayv2VpcLink").Apigatewayv2VpcLink;
export const Apigatewayv2VpcLink: typeof import("./apigatewayv2VpcLink").Apigatewayv2VpcLink = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2VpcLink"], () => require("./apigatewayv2VpcLink"));

export { AppconfigApplicationArgs, AppconfigApplicationState } from "./appconfigApplication";
export type AppconfigApplication = import("./appconfigApplication").AppconfigApplication;
export const AppconfigApplication: typeof import("./appconfigApplication").AppconfigApplication = null as any;
utilities.lazyLoad(exports, ["AppconfigApplication"], () => require("./appconfigApplication"));

export { AppconfigConfigurationProfileArgs, AppconfigConfigurationProfileState } from "./appconfigConfigurationProfile";
export type AppconfigConfigurationProfile = import("./appconfigConfigurationProfile").AppconfigConfigurationProfile;
export const AppconfigConfigurationProfile: typeof import("./appconfigConfigurationProfile").AppconfigConfigurationProfile = null as any;
utilities.lazyLoad(exports, ["AppconfigConfigurationProfile"], () => require("./appconfigConfigurationProfile"));

export { AppconfigEnvironmentArgs, AppconfigEnvironmentState } from "./appconfigEnvironment";
export type AppconfigEnvironment = import("./appconfigEnvironment").AppconfigEnvironment;
export const AppconfigEnvironment: typeof import("./appconfigEnvironment").AppconfigEnvironment = null as any;
utilities.lazyLoad(exports, ["AppconfigEnvironment"], () => require("./appconfigEnvironment"));

export { AppconfigExtensionAssociationArgs, AppconfigExtensionAssociationState } from "./appconfigExtensionAssociation";
export type AppconfigExtensionAssociation = import("./appconfigExtensionAssociation").AppconfigExtensionAssociation;
export const AppconfigExtensionAssociation: typeof import("./appconfigExtensionAssociation").AppconfigExtensionAssociation = null as any;
utilities.lazyLoad(exports, ["AppconfigExtensionAssociation"], () => require("./appconfigExtensionAssociation"));

export { AppconfigHostedConfigurationVersionArgs, AppconfigHostedConfigurationVersionState } from "./appconfigHostedConfigurationVersion";
export type AppconfigHostedConfigurationVersion = import("./appconfigHostedConfigurationVersion").AppconfigHostedConfigurationVersion;
export const AppconfigHostedConfigurationVersion: typeof import("./appconfigHostedConfigurationVersion").AppconfigHostedConfigurationVersion = null as any;
utilities.lazyLoad(exports, ["AppconfigHostedConfigurationVersion"], () => require("./appconfigHostedConfigurationVersion"));

export { AppflowConnectorArgs, AppflowConnectorState } from "./appflowConnector";
export type AppflowConnector = import("./appflowConnector").AppflowConnector;
export const AppflowConnector: typeof import("./appflowConnector").AppflowConnector = null as any;
utilities.lazyLoad(exports, ["AppflowConnector"], () => require("./appflowConnector"));

export { AppflowConnectorProfileArgs, AppflowConnectorProfileState } from "./appflowConnectorProfile";
export type AppflowConnectorProfile = import("./appflowConnectorProfile").AppflowConnectorProfile;
export const AppflowConnectorProfile: typeof import("./appflowConnectorProfile").AppflowConnectorProfile = null as any;
utilities.lazyLoad(exports, ["AppflowConnectorProfile"], () => require("./appflowConnectorProfile"));

export { AppflowFlowArgs, AppflowFlowState } from "./appflowFlow";
export type AppflowFlow = import("./appflowFlow").AppflowFlow;
export const AppflowFlow: typeof import("./appflowFlow").AppflowFlow = null as any;
utilities.lazyLoad(exports, ["AppflowFlow"], () => require("./appflowFlow"));

export { AppintegrationsApplicationArgs, AppintegrationsApplicationState } from "./appintegrationsApplication";
export type AppintegrationsApplication = import("./appintegrationsApplication").AppintegrationsApplication;
export const AppintegrationsApplication: typeof import("./appintegrationsApplication").AppintegrationsApplication = null as any;
utilities.lazyLoad(exports, ["AppintegrationsApplication"], () => require("./appintegrationsApplication"));

export { AppintegrationsEventIntegrationArgs, AppintegrationsEventIntegrationState } from "./appintegrationsEventIntegration";
export type AppintegrationsEventIntegration = import("./appintegrationsEventIntegration").AppintegrationsEventIntegration;
export const AppintegrationsEventIntegration: typeof import("./appintegrationsEventIntegration").AppintegrationsEventIntegration = null as any;
utilities.lazyLoad(exports, ["AppintegrationsEventIntegration"], () => require("./appintegrationsEventIntegration"));

export { ApplicationautoscalingScalableTargetArgs, ApplicationautoscalingScalableTargetState } from "./applicationautoscalingScalableTarget";
export type ApplicationautoscalingScalableTarget = import("./applicationautoscalingScalableTarget").ApplicationautoscalingScalableTarget;
export const ApplicationautoscalingScalableTarget: typeof import("./applicationautoscalingScalableTarget").ApplicationautoscalingScalableTarget = null as any;
utilities.lazyLoad(exports, ["ApplicationautoscalingScalableTarget"], () => require("./applicationautoscalingScalableTarget"));

export { ApplicationautoscalingScalingPolicyArgs, ApplicationautoscalingScalingPolicyState } from "./applicationautoscalingScalingPolicy";
export type ApplicationautoscalingScalingPolicy = import("./applicationautoscalingScalingPolicy").ApplicationautoscalingScalingPolicy;
export const ApplicationautoscalingScalingPolicy: typeof import("./applicationautoscalingScalingPolicy").ApplicationautoscalingScalingPolicy = null as any;
utilities.lazyLoad(exports, ["ApplicationautoscalingScalingPolicy"], () => require("./applicationautoscalingScalingPolicy"));

export { ApplicationinsightsApplicationArgs, ApplicationinsightsApplicationState } from "./applicationinsightsApplication";
export type ApplicationinsightsApplication = import("./applicationinsightsApplication").ApplicationinsightsApplication;
export const ApplicationinsightsApplication: typeof import("./applicationinsightsApplication").ApplicationinsightsApplication = null as any;
utilities.lazyLoad(exports, ["ApplicationinsightsApplication"], () => require("./applicationinsightsApplication"));

export { ApplicationsignalsServiceLevelObjectiveArgs, ApplicationsignalsServiceLevelObjectiveState } from "./applicationsignalsServiceLevelObjective";
export type ApplicationsignalsServiceLevelObjective = import("./applicationsignalsServiceLevelObjective").ApplicationsignalsServiceLevelObjective;
export const ApplicationsignalsServiceLevelObjective: typeof import("./applicationsignalsServiceLevelObjective").ApplicationsignalsServiceLevelObjective = null as any;
utilities.lazyLoad(exports, ["ApplicationsignalsServiceLevelObjective"], () => require("./applicationsignalsServiceLevelObjective"));

export { ApprunnerAutoScalingConfigurationArgs, ApprunnerAutoScalingConfigurationState } from "./apprunnerAutoScalingConfiguration";
export type ApprunnerAutoScalingConfiguration = import("./apprunnerAutoScalingConfiguration").ApprunnerAutoScalingConfiguration;
export const ApprunnerAutoScalingConfiguration: typeof import("./apprunnerAutoScalingConfiguration").ApprunnerAutoScalingConfiguration = null as any;
utilities.lazyLoad(exports, ["ApprunnerAutoScalingConfiguration"], () => require("./apprunnerAutoScalingConfiguration"));

export { ApprunnerObservabilityConfigurationArgs, ApprunnerObservabilityConfigurationState } from "./apprunnerObservabilityConfiguration";
export type ApprunnerObservabilityConfiguration = import("./apprunnerObservabilityConfiguration").ApprunnerObservabilityConfiguration;
export const ApprunnerObservabilityConfiguration: typeof import("./apprunnerObservabilityConfiguration").ApprunnerObservabilityConfiguration = null as any;
utilities.lazyLoad(exports, ["ApprunnerObservabilityConfiguration"], () => require("./apprunnerObservabilityConfiguration"));

export { ApprunnerServiceArgs, ApprunnerServiceState } from "./apprunnerService";
export type ApprunnerService = import("./apprunnerService").ApprunnerService;
export const ApprunnerService: typeof import("./apprunnerService").ApprunnerService = null as any;
utilities.lazyLoad(exports, ["ApprunnerService"], () => require("./apprunnerService"));

export { ApprunnerVpcConnectorArgs, ApprunnerVpcConnectorState } from "./apprunnerVpcConnector";
export type ApprunnerVpcConnector = import("./apprunnerVpcConnector").ApprunnerVpcConnector;
export const ApprunnerVpcConnector: typeof import("./apprunnerVpcConnector").ApprunnerVpcConnector = null as any;
utilities.lazyLoad(exports, ["ApprunnerVpcConnector"], () => require("./apprunnerVpcConnector"));

export { ApprunnerVpcIngressConnectionArgs, ApprunnerVpcIngressConnectionState } from "./apprunnerVpcIngressConnection";
export type ApprunnerVpcIngressConnection = import("./apprunnerVpcIngressConnection").ApprunnerVpcIngressConnection;
export const ApprunnerVpcIngressConnection: typeof import("./apprunnerVpcIngressConnection").ApprunnerVpcIngressConnection = null as any;
utilities.lazyLoad(exports, ["ApprunnerVpcIngressConnection"], () => require("./apprunnerVpcIngressConnection"));

export { AppstreamAppBlockArgs, AppstreamAppBlockState } from "./appstreamAppBlock";
export type AppstreamAppBlock = import("./appstreamAppBlock").AppstreamAppBlock;
export const AppstreamAppBlock: typeof import("./appstreamAppBlock").AppstreamAppBlock = null as any;
utilities.lazyLoad(exports, ["AppstreamAppBlock"], () => require("./appstreamAppBlock"));

export { AppstreamAppBlockBuilderArgs, AppstreamAppBlockBuilderState } from "./appstreamAppBlockBuilder";
export type AppstreamAppBlockBuilder = import("./appstreamAppBlockBuilder").AppstreamAppBlockBuilder;
export const AppstreamAppBlockBuilder: typeof import("./appstreamAppBlockBuilder").AppstreamAppBlockBuilder = null as any;
utilities.lazyLoad(exports, ["AppstreamAppBlockBuilder"], () => require("./appstreamAppBlockBuilder"));

export { AppstreamApplicationArgs, AppstreamApplicationState } from "./appstreamApplication";
export type AppstreamApplication = import("./appstreamApplication").AppstreamApplication;
export const AppstreamApplication: typeof import("./appstreamApplication").AppstreamApplication = null as any;
utilities.lazyLoad(exports, ["AppstreamApplication"], () => require("./appstreamApplication"));

export { AppstreamApplicationEntitlementAssociationArgs, AppstreamApplicationEntitlementAssociationState } from "./appstreamApplicationEntitlementAssociation";
export type AppstreamApplicationEntitlementAssociation = import("./appstreamApplicationEntitlementAssociation").AppstreamApplicationEntitlementAssociation;
export const AppstreamApplicationEntitlementAssociation: typeof import("./appstreamApplicationEntitlementAssociation").AppstreamApplicationEntitlementAssociation = null as any;
utilities.lazyLoad(exports, ["AppstreamApplicationEntitlementAssociation"], () => require("./appstreamApplicationEntitlementAssociation"));

export { AppstreamApplicationFleetAssociationArgs, AppstreamApplicationFleetAssociationState } from "./appstreamApplicationFleetAssociation";
export type AppstreamApplicationFleetAssociation = import("./appstreamApplicationFleetAssociation").AppstreamApplicationFleetAssociation;
export const AppstreamApplicationFleetAssociation: typeof import("./appstreamApplicationFleetAssociation").AppstreamApplicationFleetAssociation = null as any;
utilities.lazyLoad(exports, ["AppstreamApplicationFleetAssociation"], () => require("./appstreamApplicationFleetAssociation"));

export { AppstreamDirectoryConfigArgs, AppstreamDirectoryConfigState } from "./appstreamDirectoryConfig";
export type AppstreamDirectoryConfig = import("./appstreamDirectoryConfig").AppstreamDirectoryConfig;
export const AppstreamDirectoryConfig: typeof import("./appstreamDirectoryConfig").AppstreamDirectoryConfig = null as any;
utilities.lazyLoad(exports, ["AppstreamDirectoryConfig"], () => require("./appstreamDirectoryConfig"));

export { AppstreamEntitlementArgs, AppstreamEntitlementState } from "./appstreamEntitlement";
export type AppstreamEntitlement = import("./appstreamEntitlement").AppstreamEntitlement;
export const AppstreamEntitlement: typeof import("./appstreamEntitlement").AppstreamEntitlement = null as any;
utilities.lazyLoad(exports, ["AppstreamEntitlement"], () => require("./appstreamEntitlement"));

export { AppstreamImageBuilderArgs, AppstreamImageBuilderState } from "./appstreamImageBuilder";
export type AppstreamImageBuilder = import("./appstreamImageBuilder").AppstreamImageBuilder;
export const AppstreamImageBuilder: typeof import("./appstreamImageBuilder").AppstreamImageBuilder = null as any;
utilities.lazyLoad(exports, ["AppstreamImageBuilder"], () => require("./appstreamImageBuilder"));

export { AppsyncDomainNameArgs, AppsyncDomainNameState } from "./appsyncDomainName";
export type AppsyncDomainName = import("./appsyncDomainName").AppsyncDomainName;
export const AppsyncDomainName: typeof import("./appsyncDomainName").AppsyncDomainName = null as any;
utilities.lazyLoad(exports, ["AppsyncDomainName"], () => require("./appsyncDomainName"));

export { AppsyncDomainNameApiAssociationArgs, AppsyncDomainNameApiAssociationState } from "./appsyncDomainNameApiAssociation";
export type AppsyncDomainNameApiAssociation = import("./appsyncDomainNameApiAssociation").AppsyncDomainNameApiAssociation;
export const AppsyncDomainNameApiAssociation: typeof import("./appsyncDomainNameApiAssociation").AppsyncDomainNameApiAssociation = null as any;
utilities.lazyLoad(exports, ["AppsyncDomainNameApiAssociation"], () => require("./appsyncDomainNameApiAssociation"));

export { AppsyncFunctionConfigurationArgs, AppsyncFunctionConfigurationState } from "./appsyncFunctionConfiguration";
export type AppsyncFunctionConfiguration = import("./appsyncFunctionConfiguration").AppsyncFunctionConfiguration;
export const AppsyncFunctionConfiguration: typeof import("./appsyncFunctionConfiguration").AppsyncFunctionConfiguration = null as any;
utilities.lazyLoad(exports, ["AppsyncFunctionConfiguration"], () => require("./appsyncFunctionConfiguration"));

export { AppsyncResolverArgs, AppsyncResolverState } from "./appsyncResolver";
export type AppsyncResolver = import("./appsyncResolver").AppsyncResolver;
export const AppsyncResolver: typeof import("./appsyncResolver").AppsyncResolver = null as any;
utilities.lazyLoad(exports, ["AppsyncResolver"], () => require("./appsyncResolver"));

export { AppsyncSourceApiAssociationArgs, AppsyncSourceApiAssociationState } from "./appsyncSourceApiAssociation";
export type AppsyncSourceApiAssociation = import("./appsyncSourceApiAssociation").AppsyncSourceApiAssociation;
export const AppsyncSourceApiAssociation: typeof import("./appsyncSourceApiAssociation").AppsyncSourceApiAssociation = null as any;
utilities.lazyLoad(exports, ["AppsyncSourceApiAssociation"], () => require("./appsyncSourceApiAssociation"));

export { ApptestTestCaseArgs, ApptestTestCaseState } from "./apptestTestCase";
export type ApptestTestCase = import("./apptestTestCase").ApptestTestCase;
export const ApptestTestCase: typeof import("./apptestTestCase").ApptestTestCase = null as any;
utilities.lazyLoad(exports, ["ApptestTestCase"], () => require("./apptestTestCase"));

export { ApsRuleGroupsNamespaceArgs, ApsRuleGroupsNamespaceState } from "./apsRuleGroupsNamespace";
export type ApsRuleGroupsNamespace = import("./apsRuleGroupsNamespace").ApsRuleGroupsNamespace;
export const ApsRuleGroupsNamespace: typeof import("./apsRuleGroupsNamespace").ApsRuleGroupsNamespace = null as any;
utilities.lazyLoad(exports, ["ApsRuleGroupsNamespace"], () => require("./apsRuleGroupsNamespace"));

export { ApsScraperArgs, ApsScraperState } from "./apsScraper";
export type ApsScraper = import("./apsScraper").ApsScraper;
export const ApsScraper: typeof import("./apsScraper").ApsScraper = null as any;
utilities.lazyLoad(exports, ["ApsScraper"], () => require("./apsScraper"));

export { ApsWorkspaceArgs, ApsWorkspaceState } from "./apsWorkspace";
export type ApsWorkspace = import("./apsWorkspace").ApsWorkspace;
export const ApsWorkspace: typeof import("./apsWorkspace").ApsWorkspace = null as any;
utilities.lazyLoad(exports, ["ApsWorkspace"], () => require("./apsWorkspace"));

export { ArczonalshiftAutoshiftObserverNotificationStatusArgs, ArczonalshiftAutoshiftObserverNotificationStatusState } from "./arczonalshiftAutoshiftObserverNotificationStatus";
export type ArczonalshiftAutoshiftObserverNotificationStatus = import("./arczonalshiftAutoshiftObserverNotificationStatus").ArczonalshiftAutoshiftObserverNotificationStatus;
export const ArczonalshiftAutoshiftObserverNotificationStatus: typeof import("./arczonalshiftAutoshiftObserverNotificationStatus").ArczonalshiftAutoshiftObserverNotificationStatus = null as any;
utilities.lazyLoad(exports, ["ArczonalshiftAutoshiftObserverNotificationStatus"], () => require("./arczonalshiftAutoshiftObserverNotificationStatus"));

export { ArczonalshiftZonalAutoshiftConfigurationArgs, ArczonalshiftZonalAutoshiftConfigurationState } from "./arczonalshiftZonalAutoshiftConfiguration";
export type ArczonalshiftZonalAutoshiftConfiguration = import("./arczonalshiftZonalAutoshiftConfiguration").ArczonalshiftZonalAutoshiftConfiguration;
export const ArczonalshiftZonalAutoshiftConfiguration: typeof import("./arczonalshiftZonalAutoshiftConfiguration").ArczonalshiftZonalAutoshiftConfiguration = null as any;
utilities.lazyLoad(exports, ["ArczonalshiftZonalAutoshiftConfiguration"], () => require("./arczonalshiftZonalAutoshiftConfiguration"));

export { AthenaCapacityReservationArgs, AthenaCapacityReservationState } from "./athenaCapacityReservation";
export type AthenaCapacityReservation = import("./athenaCapacityReservation").AthenaCapacityReservation;
export const AthenaCapacityReservation: typeof import("./athenaCapacityReservation").AthenaCapacityReservation = null as any;
utilities.lazyLoad(exports, ["AthenaCapacityReservation"], () => require("./athenaCapacityReservation"));

export { AthenaDataCatalogArgs, AthenaDataCatalogState } from "./athenaDataCatalog";
export type AthenaDataCatalog = import("./athenaDataCatalog").AthenaDataCatalog;
export const AthenaDataCatalog: typeof import("./athenaDataCatalog").AthenaDataCatalog = null as any;
utilities.lazyLoad(exports, ["AthenaDataCatalog"], () => require("./athenaDataCatalog"));

export { AthenaNamedQueryArgs, AthenaNamedQueryState } from "./athenaNamedQuery";
export type AthenaNamedQuery = import("./athenaNamedQuery").AthenaNamedQuery;
export const AthenaNamedQuery: typeof import("./athenaNamedQuery").AthenaNamedQuery = null as any;
utilities.lazyLoad(exports, ["AthenaNamedQuery"], () => require("./athenaNamedQuery"));

export { AthenaPreparedStatementArgs, AthenaPreparedStatementState } from "./athenaPreparedStatement";
export type AthenaPreparedStatement = import("./athenaPreparedStatement").AthenaPreparedStatement;
export const AthenaPreparedStatement: typeof import("./athenaPreparedStatement").AthenaPreparedStatement = null as any;
utilities.lazyLoad(exports, ["AthenaPreparedStatement"], () => require("./athenaPreparedStatement"));

export { AthenaWorkGroupArgs, AthenaWorkGroupState } from "./athenaWorkGroup";
export type AthenaWorkGroup = import("./athenaWorkGroup").AthenaWorkGroup;
export const AthenaWorkGroup: typeof import("./athenaWorkGroup").AthenaWorkGroup = null as any;
utilities.lazyLoad(exports, ["AthenaWorkGroup"], () => require("./athenaWorkGroup"));

export { AuditmanagerAssessmentArgs, AuditmanagerAssessmentState } from "./auditmanagerAssessment";
export type AuditmanagerAssessment = import("./auditmanagerAssessment").AuditmanagerAssessment;
export const AuditmanagerAssessment: typeof import("./auditmanagerAssessment").AuditmanagerAssessment = null as any;
utilities.lazyLoad(exports, ["AuditmanagerAssessment"], () => require("./auditmanagerAssessment"));

export { AutoscalingAutoScalingGroupArgs, AutoscalingAutoScalingGroupState } from "./autoscalingAutoScalingGroup";
export type AutoscalingAutoScalingGroup = import("./autoscalingAutoScalingGroup").AutoscalingAutoScalingGroup;
export const AutoscalingAutoScalingGroup: typeof import("./autoscalingAutoScalingGroup").AutoscalingAutoScalingGroup = null as any;
utilities.lazyLoad(exports, ["AutoscalingAutoScalingGroup"], () => require("./autoscalingAutoScalingGroup"));

export { AutoscalingLaunchConfigurationArgs, AutoscalingLaunchConfigurationState } from "./autoscalingLaunchConfiguration";
export type AutoscalingLaunchConfiguration = import("./autoscalingLaunchConfiguration").AutoscalingLaunchConfiguration;
export const AutoscalingLaunchConfiguration: typeof import("./autoscalingLaunchConfiguration").AutoscalingLaunchConfiguration = null as any;
utilities.lazyLoad(exports, ["AutoscalingLaunchConfiguration"], () => require("./autoscalingLaunchConfiguration"));

export { AutoscalingLifecycleHookArgs, AutoscalingLifecycleHookState } from "./autoscalingLifecycleHook";
export type AutoscalingLifecycleHook = import("./autoscalingLifecycleHook").AutoscalingLifecycleHook;
export const AutoscalingLifecycleHook: typeof import("./autoscalingLifecycleHook").AutoscalingLifecycleHook = null as any;
utilities.lazyLoad(exports, ["AutoscalingLifecycleHook"], () => require("./autoscalingLifecycleHook"));

export { AutoscalingScalingPolicyArgs, AutoscalingScalingPolicyState } from "./autoscalingScalingPolicy";
export type AutoscalingScalingPolicy = import("./autoscalingScalingPolicy").AutoscalingScalingPolicy;
export const AutoscalingScalingPolicy: typeof import("./autoscalingScalingPolicy").AutoscalingScalingPolicy = null as any;
utilities.lazyLoad(exports, ["AutoscalingScalingPolicy"], () => require("./autoscalingScalingPolicy"));

export { AutoscalingScheduledActionArgs, AutoscalingScheduledActionState } from "./autoscalingScheduledAction";
export type AutoscalingScheduledAction = import("./autoscalingScheduledAction").AutoscalingScheduledAction;
export const AutoscalingScheduledAction: typeof import("./autoscalingScheduledAction").AutoscalingScheduledAction = null as any;
utilities.lazyLoad(exports, ["AutoscalingScheduledAction"], () => require("./autoscalingScheduledAction"));

export { AutoscalingWarmPoolArgs, AutoscalingWarmPoolState } from "./autoscalingWarmPool";
export type AutoscalingWarmPool = import("./autoscalingWarmPool").AutoscalingWarmPool;
export const AutoscalingWarmPool: typeof import("./autoscalingWarmPool").AutoscalingWarmPool = null as any;
utilities.lazyLoad(exports, ["AutoscalingWarmPool"], () => require("./autoscalingWarmPool"));

export { B2biCapabilityArgs, B2biCapabilityState } from "./b2biCapability";
export type B2biCapability = import("./b2biCapability").B2biCapability;
export const B2biCapability: typeof import("./b2biCapability").B2biCapability = null as any;
utilities.lazyLoad(exports, ["B2biCapability"], () => require("./b2biCapability"));

export { B2biPartnershipArgs, B2biPartnershipState } from "./b2biPartnership";
export type B2biPartnership = import("./b2biPartnership").B2biPartnership;
export const B2biPartnership: typeof import("./b2biPartnership").B2biPartnership = null as any;
utilities.lazyLoad(exports, ["B2biPartnership"], () => require("./b2biPartnership"));

export { B2biProfileArgs, B2biProfileState } from "./b2biProfile";
export type B2biProfile = import("./b2biProfile").B2biProfile;
export const B2biProfile: typeof import("./b2biProfile").B2biProfile = null as any;
utilities.lazyLoad(exports, ["B2biProfile"], () => require("./b2biProfile"));

export { B2biTransformerArgs, B2biTransformerState } from "./b2biTransformer";
export type B2biTransformer = import("./b2biTransformer").B2biTransformer;
export const B2biTransformer: typeof import("./b2biTransformer").B2biTransformer = null as any;
utilities.lazyLoad(exports, ["B2biTransformer"], () => require("./b2biTransformer"));

export { BackupBackupPlanArgs, BackupBackupPlanState } from "./backupBackupPlan";
export type BackupBackupPlan = import("./backupBackupPlan").BackupBackupPlan;
export const BackupBackupPlan: typeof import("./backupBackupPlan").BackupBackupPlan = null as any;
utilities.lazyLoad(exports, ["BackupBackupPlan"], () => require("./backupBackupPlan"));

export { BackupBackupSelectionArgs, BackupBackupSelectionState } from "./backupBackupSelection";
export type BackupBackupSelection = import("./backupBackupSelection").BackupBackupSelection;
export const BackupBackupSelection: typeof import("./backupBackupSelection").BackupBackupSelection = null as any;
utilities.lazyLoad(exports, ["BackupBackupSelection"], () => require("./backupBackupSelection"));

export { BackupBackupVaultArgs, BackupBackupVaultState } from "./backupBackupVault";
export type BackupBackupVault = import("./backupBackupVault").BackupBackupVault;
export const BackupBackupVault: typeof import("./backupBackupVault").BackupBackupVault = null as any;
utilities.lazyLoad(exports, ["BackupBackupVault"], () => require("./backupBackupVault"));

export { BackupFrameworkArgs, BackupFrameworkState } from "./backupFramework";
export type BackupFramework = import("./backupFramework").BackupFramework;
export const BackupFramework: typeof import("./backupFramework").BackupFramework = null as any;
utilities.lazyLoad(exports, ["BackupFramework"], () => require("./backupFramework"));

export { BackupReportPlanArgs, BackupReportPlanState } from "./backupReportPlan";
export type BackupReportPlan = import("./backupReportPlan").BackupReportPlan;
export const BackupReportPlan: typeof import("./backupReportPlan").BackupReportPlan = null as any;
utilities.lazyLoad(exports, ["BackupReportPlan"], () => require("./backupReportPlan"));

export { BackupRestoreTestingPlanArgs, BackupRestoreTestingPlanState } from "./backupRestoreTestingPlan";
export type BackupRestoreTestingPlan = import("./backupRestoreTestingPlan").BackupRestoreTestingPlan;
export const BackupRestoreTestingPlan: typeof import("./backupRestoreTestingPlan").BackupRestoreTestingPlan = null as any;
utilities.lazyLoad(exports, ["BackupRestoreTestingPlan"], () => require("./backupRestoreTestingPlan"));

export { BackupRestoreTestingSelectionArgs, BackupRestoreTestingSelectionState } from "./backupRestoreTestingSelection";
export type BackupRestoreTestingSelection = import("./backupRestoreTestingSelection").BackupRestoreTestingSelection;
export const BackupRestoreTestingSelection: typeof import("./backupRestoreTestingSelection").BackupRestoreTestingSelection = null as any;
utilities.lazyLoad(exports, ["BackupRestoreTestingSelection"], () => require("./backupRestoreTestingSelection"));

export { BackupgatewayHypervisorArgs, BackupgatewayHypervisorState } from "./backupgatewayHypervisor";
export type BackupgatewayHypervisor = import("./backupgatewayHypervisor").BackupgatewayHypervisor;
export const BackupgatewayHypervisor: typeof import("./backupgatewayHypervisor").BackupgatewayHypervisor = null as any;
utilities.lazyLoad(exports, ["BackupgatewayHypervisor"], () => require("./backupgatewayHypervisor"));

export { BatchComputeEnvironmentArgs, BatchComputeEnvironmentState } from "./batchComputeEnvironment";
export type BatchComputeEnvironment = import("./batchComputeEnvironment").BatchComputeEnvironment;
export const BatchComputeEnvironment: typeof import("./batchComputeEnvironment").BatchComputeEnvironment = null as any;
utilities.lazyLoad(exports, ["BatchComputeEnvironment"], () => require("./batchComputeEnvironment"));

export { BatchJobQueueArgs, BatchJobQueueState } from "./batchJobQueue";
export type BatchJobQueue = import("./batchJobQueue").BatchJobQueue;
export const BatchJobQueue: typeof import("./batchJobQueue").BatchJobQueue = null as any;
utilities.lazyLoad(exports, ["BatchJobQueue"], () => require("./batchJobQueue"));

export { BatchSchedulingPolicyArgs, BatchSchedulingPolicyState } from "./batchSchedulingPolicy";
export type BatchSchedulingPolicy = import("./batchSchedulingPolicy").BatchSchedulingPolicy;
export const BatchSchedulingPolicy: typeof import("./batchSchedulingPolicy").BatchSchedulingPolicy = null as any;
utilities.lazyLoad(exports, ["BatchSchedulingPolicy"], () => require("./batchSchedulingPolicy"));

export { BedrockAgentArgs, BedrockAgentState } from "./bedrockAgent";
export type BedrockAgent = import("./bedrockAgent").BedrockAgent;
export const BedrockAgent: typeof import("./bedrockAgent").BedrockAgent = null as any;
utilities.lazyLoad(exports, ["BedrockAgent"], () => require("./bedrockAgent"));

export { BedrockAgentAliasArgs, BedrockAgentAliasState } from "./bedrockAgentAlias";
export type BedrockAgentAlias = import("./bedrockAgentAlias").BedrockAgentAlias;
export const BedrockAgentAlias: typeof import("./bedrockAgentAlias").BedrockAgentAlias = null as any;
utilities.lazyLoad(exports, ["BedrockAgentAlias"], () => require("./bedrockAgentAlias"));

export { BedrockDataSourceArgs, BedrockDataSourceState } from "./bedrockDataSource";
export type BedrockDataSource = import("./bedrockDataSource").BedrockDataSource;
export const BedrockDataSource: typeof import("./bedrockDataSource").BedrockDataSource = null as any;
utilities.lazyLoad(exports, ["BedrockDataSource"], () => require("./bedrockDataSource"));

export { BedrockFlowAliasArgs, BedrockFlowAliasState } from "./bedrockFlowAlias";
export type BedrockFlowAlias = import("./bedrockFlowAlias").BedrockFlowAlias;
export const BedrockFlowAlias: typeof import("./bedrockFlowAlias").BedrockFlowAlias = null as any;
utilities.lazyLoad(exports, ["BedrockFlowAlias"], () => require("./bedrockFlowAlias"));

export { BedrockFlowVersionArgs, BedrockFlowVersionState } from "./bedrockFlowVersion";
export type BedrockFlowVersion = import("./bedrockFlowVersion").BedrockFlowVersion;
export const BedrockFlowVersion: typeof import("./bedrockFlowVersion").BedrockFlowVersion = null as any;
utilities.lazyLoad(exports, ["BedrockFlowVersion"], () => require("./bedrockFlowVersion"));

export { BedrockGuardrailArgs, BedrockGuardrailState } from "./bedrockGuardrail";
export type BedrockGuardrail = import("./bedrockGuardrail").BedrockGuardrail;
export const BedrockGuardrail: typeof import("./bedrockGuardrail").BedrockGuardrail = null as any;
utilities.lazyLoad(exports, ["BedrockGuardrail"], () => require("./bedrockGuardrail"));

export { BedrockGuardrailVersionArgs, BedrockGuardrailVersionState } from "./bedrockGuardrailVersion";
export type BedrockGuardrailVersion = import("./bedrockGuardrailVersion").BedrockGuardrailVersion;
export const BedrockGuardrailVersion: typeof import("./bedrockGuardrailVersion").BedrockGuardrailVersion = null as any;
utilities.lazyLoad(exports, ["BedrockGuardrailVersion"], () => require("./bedrockGuardrailVersion"));

export { BedrockKnowledgeBaseArgs, BedrockKnowledgeBaseState } from "./bedrockKnowledgeBase";
export type BedrockKnowledgeBase = import("./bedrockKnowledgeBase").BedrockKnowledgeBase;
export const BedrockKnowledgeBase: typeof import("./bedrockKnowledgeBase").BedrockKnowledgeBase = null as any;
utilities.lazyLoad(exports, ["BedrockKnowledgeBase"], () => require("./bedrockKnowledgeBase"));

export { BedrockPromptArgs, BedrockPromptState } from "./bedrockPrompt";
export type BedrockPrompt = import("./bedrockPrompt").BedrockPrompt;
export const BedrockPrompt: typeof import("./bedrockPrompt").BedrockPrompt = null as any;
utilities.lazyLoad(exports, ["BedrockPrompt"], () => require("./bedrockPrompt"));

export { BedrockPromptVersionArgs, BedrockPromptVersionState } from "./bedrockPromptVersion";
export type BedrockPromptVersion = import("./bedrockPromptVersion").BedrockPromptVersion;
export const BedrockPromptVersion: typeof import("./bedrockPromptVersion").BedrockPromptVersion = null as any;
utilities.lazyLoad(exports, ["BedrockPromptVersion"], () => require("./bedrockPromptVersion"));

export { BillingconductorBillingGroupArgs, BillingconductorBillingGroupState } from "./billingconductorBillingGroup";
export type BillingconductorBillingGroup = import("./billingconductorBillingGroup").BillingconductorBillingGroup;
export const BillingconductorBillingGroup: typeof import("./billingconductorBillingGroup").BillingconductorBillingGroup = null as any;
utilities.lazyLoad(exports, ["BillingconductorBillingGroup"], () => require("./billingconductorBillingGroup"));

export { BillingconductorCustomLineItemArgs, BillingconductorCustomLineItemState } from "./billingconductorCustomLineItem";
export type BillingconductorCustomLineItem = import("./billingconductorCustomLineItem").BillingconductorCustomLineItem;
export const BillingconductorCustomLineItem: typeof import("./billingconductorCustomLineItem").BillingconductorCustomLineItem = null as any;
utilities.lazyLoad(exports, ["BillingconductorCustomLineItem"], () => require("./billingconductorCustomLineItem"));

export { BillingconductorPricingPlanArgs, BillingconductorPricingPlanState } from "./billingconductorPricingPlan";
export type BillingconductorPricingPlan = import("./billingconductorPricingPlan").BillingconductorPricingPlan;
export const BillingconductorPricingPlan: typeof import("./billingconductorPricingPlan").BillingconductorPricingPlan = null as any;
utilities.lazyLoad(exports, ["BillingconductorPricingPlan"], () => require("./billingconductorPricingPlan"));

export { BillingconductorPricingRuleArgs, BillingconductorPricingRuleState } from "./billingconductorPricingRule";
export type BillingconductorPricingRule = import("./billingconductorPricingRule").BillingconductorPricingRule;
export const BillingconductorPricingRule: typeof import("./billingconductorPricingRule").BillingconductorPricingRule = null as any;
utilities.lazyLoad(exports, ["BillingconductorPricingRule"], () => require("./billingconductorPricingRule"));

export { BudgetsBudgetsActionArgs, BudgetsBudgetsActionState } from "./budgetsBudgetsAction";
export type BudgetsBudgetsAction = import("./budgetsBudgetsAction").BudgetsBudgetsAction;
export const BudgetsBudgetsAction: typeof import("./budgetsBudgetsAction").BudgetsBudgetsAction = null as any;
utilities.lazyLoad(exports, ["BudgetsBudgetsAction"], () => require("./budgetsBudgetsAction"));

export { CassandraKeyspaceArgs, CassandraKeyspaceState } from "./cassandraKeyspace";
export type CassandraKeyspace = import("./cassandraKeyspace").CassandraKeyspace;
export const CassandraKeyspace: typeof import("./cassandraKeyspace").CassandraKeyspace = null as any;
utilities.lazyLoad(exports, ["CassandraKeyspace"], () => require("./cassandraKeyspace"));

export { CassandraTableArgs, CassandraTableState } from "./cassandraTable";
export type CassandraTable = import("./cassandraTable").CassandraTable;
export const CassandraTable: typeof import("./cassandraTable").CassandraTable = null as any;
utilities.lazyLoad(exports, ["CassandraTable"], () => require("./cassandraTable"));

export { CeAnomalyMonitorArgs, CeAnomalyMonitorState } from "./ceAnomalyMonitor";
export type CeAnomalyMonitor = import("./ceAnomalyMonitor").CeAnomalyMonitor;
export const CeAnomalyMonitor: typeof import("./ceAnomalyMonitor").CeAnomalyMonitor = null as any;
utilities.lazyLoad(exports, ["CeAnomalyMonitor"], () => require("./ceAnomalyMonitor"));

export { CeAnomalySubscriptionArgs, CeAnomalySubscriptionState } from "./ceAnomalySubscription";
export type CeAnomalySubscription = import("./ceAnomalySubscription").CeAnomalySubscription;
export const CeAnomalySubscription: typeof import("./ceAnomalySubscription").CeAnomalySubscription = null as any;
utilities.lazyLoad(exports, ["CeAnomalySubscription"], () => require("./ceAnomalySubscription"));

export { CeCostCategoryArgs, CeCostCategoryState } from "./ceCostCategory";
export type CeCostCategory = import("./ceCostCategory").CeCostCategory;
export const CeCostCategory: typeof import("./ceCostCategory").CeCostCategory = null as any;
utilities.lazyLoad(exports, ["CeCostCategory"], () => require("./ceCostCategory"));

export { CertificatemanagerAccountArgs, CertificatemanagerAccountState } from "./certificatemanagerAccount";
export type CertificatemanagerAccount = import("./certificatemanagerAccount").CertificatemanagerAccount;
export const CertificatemanagerAccount: typeof import("./certificatemanagerAccount").CertificatemanagerAccount = null as any;
utilities.lazyLoad(exports, ["CertificatemanagerAccount"], () => require("./certificatemanagerAccount"));

export { ChatbotMicrosoftTeamsChannelConfigurationArgs, ChatbotMicrosoftTeamsChannelConfigurationState } from "./chatbotMicrosoftTeamsChannelConfiguration";
export type ChatbotMicrosoftTeamsChannelConfiguration = import("./chatbotMicrosoftTeamsChannelConfiguration").ChatbotMicrosoftTeamsChannelConfiguration;
export const ChatbotMicrosoftTeamsChannelConfiguration: typeof import("./chatbotMicrosoftTeamsChannelConfiguration").ChatbotMicrosoftTeamsChannelConfiguration = null as any;
utilities.lazyLoad(exports, ["ChatbotMicrosoftTeamsChannelConfiguration"], () => require("./chatbotMicrosoftTeamsChannelConfiguration"));

export { ChatbotSlackChannelConfigurationArgs, ChatbotSlackChannelConfigurationState } from "./chatbotSlackChannelConfiguration";
export type ChatbotSlackChannelConfiguration = import("./chatbotSlackChannelConfiguration").ChatbotSlackChannelConfiguration;
export const ChatbotSlackChannelConfiguration: typeof import("./chatbotSlackChannelConfiguration").ChatbotSlackChannelConfiguration = null as any;
utilities.lazyLoad(exports, ["ChatbotSlackChannelConfiguration"], () => require("./chatbotSlackChannelConfiguration"));

export { CleanroomsAnalysisTemplateArgs, CleanroomsAnalysisTemplateState } from "./cleanroomsAnalysisTemplate";
export type CleanroomsAnalysisTemplate = import("./cleanroomsAnalysisTemplate").CleanroomsAnalysisTemplate;
export const CleanroomsAnalysisTemplate: typeof import("./cleanroomsAnalysisTemplate").CleanroomsAnalysisTemplate = null as any;
utilities.lazyLoad(exports, ["CleanroomsAnalysisTemplate"], () => require("./cleanroomsAnalysisTemplate"));

export { CleanroomsCollaborationArgs, CleanroomsCollaborationState } from "./cleanroomsCollaboration";
export type CleanroomsCollaboration = import("./cleanroomsCollaboration").CleanroomsCollaboration;
export const CleanroomsCollaboration: typeof import("./cleanroomsCollaboration").CleanroomsCollaboration = null as any;
utilities.lazyLoad(exports, ["CleanroomsCollaboration"], () => require("./cleanroomsCollaboration"));

export { CleanroomsConfiguredTableArgs, CleanroomsConfiguredTableState } from "./cleanroomsConfiguredTable";
export type CleanroomsConfiguredTable = import("./cleanroomsConfiguredTable").CleanroomsConfiguredTable;
export const CleanroomsConfiguredTable: typeof import("./cleanroomsConfiguredTable").CleanroomsConfiguredTable = null as any;
utilities.lazyLoad(exports, ["CleanroomsConfiguredTable"], () => require("./cleanroomsConfiguredTable"));

export { CleanroomsConfiguredTableAssociationArgs, CleanroomsConfiguredTableAssociationState } from "./cleanroomsConfiguredTableAssociation";
export type CleanroomsConfiguredTableAssociation = import("./cleanroomsConfiguredTableAssociation").CleanroomsConfiguredTableAssociation;
export const CleanroomsConfiguredTableAssociation: typeof import("./cleanroomsConfiguredTableAssociation").CleanroomsConfiguredTableAssociation = null as any;
utilities.lazyLoad(exports, ["CleanroomsConfiguredTableAssociation"], () => require("./cleanroomsConfiguredTableAssociation"));

export { CleanroomsIdMappingTableArgs, CleanroomsIdMappingTableState } from "./cleanroomsIdMappingTable";
export type CleanroomsIdMappingTable = import("./cleanroomsIdMappingTable").CleanroomsIdMappingTable;
export const CleanroomsIdMappingTable: typeof import("./cleanroomsIdMappingTable").CleanroomsIdMappingTable = null as any;
utilities.lazyLoad(exports, ["CleanroomsIdMappingTable"], () => require("./cleanroomsIdMappingTable"));

export { CleanroomsMembershipArgs, CleanroomsMembershipState } from "./cleanroomsMembership";
export type CleanroomsMembership = import("./cleanroomsMembership").CleanroomsMembership;
export const CleanroomsMembership: typeof import("./cleanroomsMembership").CleanroomsMembership = null as any;
utilities.lazyLoad(exports, ["CleanroomsMembership"], () => require("./cleanroomsMembership"));

export { CleanroomsPrivacyBudgetTemplateArgs, CleanroomsPrivacyBudgetTemplateState } from "./cleanroomsPrivacyBudgetTemplate";
export type CleanroomsPrivacyBudgetTemplate = import("./cleanroomsPrivacyBudgetTemplate").CleanroomsPrivacyBudgetTemplate;
export const CleanroomsPrivacyBudgetTemplate: typeof import("./cleanroomsPrivacyBudgetTemplate").CleanroomsPrivacyBudgetTemplate = null as any;
utilities.lazyLoad(exports, ["CleanroomsPrivacyBudgetTemplate"], () => require("./cleanroomsPrivacyBudgetTemplate"));

export { CleanroomsmlTrainingDatasetArgs, CleanroomsmlTrainingDatasetState } from "./cleanroomsmlTrainingDataset";
export type CleanroomsmlTrainingDataset = import("./cleanroomsmlTrainingDataset").CleanroomsmlTrainingDataset;
export const CleanroomsmlTrainingDataset: typeof import("./cleanroomsmlTrainingDataset").CleanroomsmlTrainingDataset = null as any;
utilities.lazyLoad(exports, ["CleanroomsmlTrainingDataset"], () => require("./cleanroomsmlTrainingDataset"));

export { CloudformationHookDefaultVersionArgs, CloudformationHookDefaultVersionState } from "./cloudformationHookDefaultVersion";
export type CloudformationHookDefaultVersion = import("./cloudformationHookDefaultVersion").CloudformationHookDefaultVersion;
export const CloudformationHookDefaultVersion: typeof import("./cloudformationHookDefaultVersion").CloudformationHookDefaultVersion = null as any;
utilities.lazyLoad(exports, ["CloudformationHookDefaultVersion"], () => require("./cloudformationHookDefaultVersion"));

export { CloudformationHookTypeConfigArgs, CloudformationHookTypeConfigState } from "./cloudformationHookTypeConfig";
export type CloudformationHookTypeConfig = import("./cloudformationHookTypeConfig").CloudformationHookTypeConfig;
export const CloudformationHookTypeConfig: typeof import("./cloudformationHookTypeConfig").CloudformationHookTypeConfig = null as any;
utilities.lazyLoad(exports, ["CloudformationHookTypeConfig"], () => require("./cloudformationHookTypeConfig"));

export { CloudformationHookVersionArgs, CloudformationHookVersionState } from "./cloudformationHookVersion";
export type CloudformationHookVersion = import("./cloudformationHookVersion").CloudformationHookVersion;
export const CloudformationHookVersion: typeof import("./cloudformationHookVersion").CloudformationHookVersion = null as any;
utilities.lazyLoad(exports, ["CloudformationHookVersion"], () => require("./cloudformationHookVersion"));

export { CloudformationModuleDefaultVersionArgs, CloudformationModuleDefaultVersionState } from "./cloudformationModuleDefaultVersion";
export type CloudformationModuleDefaultVersion = import("./cloudformationModuleDefaultVersion").CloudformationModuleDefaultVersion;
export const CloudformationModuleDefaultVersion: typeof import("./cloudformationModuleDefaultVersion").CloudformationModuleDefaultVersion = null as any;
utilities.lazyLoad(exports, ["CloudformationModuleDefaultVersion"], () => require("./cloudformationModuleDefaultVersion"));

export { CloudformationModuleVersionArgs, CloudformationModuleVersionState } from "./cloudformationModuleVersion";
export type CloudformationModuleVersion = import("./cloudformationModuleVersion").CloudformationModuleVersion;
export const CloudformationModuleVersion: typeof import("./cloudformationModuleVersion").CloudformationModuleVersion = null as any;
utilities.lazyLoad(exports, ["CloudformationModuleVersion"], () => require("./cloudformationModuleVersion"));

export { CloudformationPublicTypeVersionArgs, CloudformationPublicTypeVersionState } from "./cloudformationPublicTypeVersion";
export type CloudformationPublicTypeVersion = import("./cloudformationPublicTypeVersion").CloudformationPublicTypeVersion;
export const CloudformationPublicTypeVersion: typeof import("./cloudformationPublicTypeVersion").CloudformationPublicTypeVersion = null as any;
utilities.lazyLoad(exports, ["CloudformationPublicTypeVersion"], () => require("./cloudformationPublicTypeVersion"));

export { CloudformationPublisherArgs, CloudformationPublisherState } from "./cloudformationPublisher";
export type CloudformationPublisher = import("./cloudformationPublisher").CloudformationPublisher;
export const CloudformationPublisher: typeof import("./cloudformationPublisher").CloudformationPublisher = null as any;
utilities.lazyLoad(exports, ["CloudformationPublisher"], () => require("./cloudformationPublisher"));

export { CloudformationResourceDefaultVersionArgs, CloudformationResourceDefaultVersionState } from "./cloudformationResourceDefaultVersion";
export type CloudformationResourceDefaultVersion = import("./cloudformationResourceDefaultVersion").CloudformationResourceDefaultVersion;
export const CloudformationResourceDefaultVersion: typeof import("./cloudformationResourceDefaultVersion").CloudformationResourceDefaultVersion = null as any;
utilities.lazyLoad(exports, ["CloudformationResourceDefaultVersion"], () => require("./cloudformationResourceDefaultVersion"));

export { CloudformationResourceVersionArgs, CloudformationResourceVersionState } from "./cloudformationResourceVersion";
export type CloudformationResourceVersion = import("./cloudformationResourceVersion").CloudformationResourceVersion;
export const CloudformationResourceVersion: typeof import("./cloudformationResourceVersion").CloudformationResourceVersion = null as any;
utilities.lazyLoad(exports, ["CloudformationResourceVersion"], () => require("./cloudformationResourceVersion"));

export { CloudformationStackArgs, CloudformationStackState } from "./cloudformationStack";
export type CloudformationStack = import("./cloudformationStack").CloudformationStack;
export const CloudformationStack: typeof import("./cloudformationStack").CloudformationStack = null as any;
utilities.lazyLoad(exports, ["CloudformationStack"], () => require("./cloudformationStack"));

export { CloudformationStackSetArgs, CloudformationStackSetState } from "./cloudformationStackSet";
export type CloudformationStackSet = import("./cloudformationStackSet").CloudformationStackSet;
export const CloudformationStackSet: typeof import("./cloudformationStackSet").CloudformationStackSet = null as any;
utilities.lazyLoad(exports, ["CloudformationStackSet"], () => require("./cloudformationStackSet"));

export { CloudformationTypeActivationArgs, CloudformationTypeActivationState } from "./cloudformationTypeActivation";
export type CloudformationTypeActivation = import("./cloudformationTypeActivation").CloudformationTypeActivation;
export const CloudformationTypeActivation: typeof import("./cloudformationTypeActivation").CloudformationTypeActivation = null as any;
utilities.lazyLoad(exports, ["CloudformationTypeActivation"], () => require("./cloudformationTypeActivation"));

export { CloudfrontCachePolicyArgs, CloudfrontCachePolicyState } from "./cloudfrontCachePolicy";
export type CloudfrontCachePolicy = import("./cloudfrontCachePolicy").CloudfrontCachePolicy;
export const CloudfrontCachePolicy: typeof import("./cloudfrontCachePolicy").CloudfrontCachePolicy = null as any;
utilities.lazyLoad(exports, ["CloudfrontCachePolicy"], () => require("./cloudfrontCachePolicy"));

export { CloudfrontCloudfrontOriginAccessIdentityArgs, CloudfrontCloudfrontOriginAccessIdentityState } from "./cloudfrontCloudfrontOriginAccessIdentity";
export type CloudfrontCloudfrontOriginAccessIdentity = import("./cloudfrontCloudfrontOriginAccessIdentity").CloudfrontCloudfrontOriginAccessIdentity;
export const CloudfrontCloudfrontOriginAccessIdentity: typeof import("./cloudfrontCloudfrontOriginAccessIdentity").CloudfrontCloudfrontOriginAccessIdentity = null as any;
utilities.lazyLoad(exports, ["CloudfrontCloudfrontOriginAccessIdentity"], () => require("./cloudfrontCloudfrontOriginAccessIdentity"));

export { CloudfrontContinuousDeploymentPolicyArgs, CloudfrontContinuousDeploymentPolicyState } from "./cloudfrontContinuousDeploymentPolicy";
export type CloudfrontContinuousDeploymentPolicy = import("./cloudfrontContinuousDeploymentPolicy").CloudfrontContinuousDeploymentPolicy;
export const CloudfrontContinuousDeploymentPolicy: typeof import("./cloudfrontContinuousDeploymentPolicy").CloudfrontContinuousDeploymentPolicy = null as any;
utilities.lazyLoad(exports, ["CloudfrontContinuousDeploymentPolicy"], () => require("./cloudfrontContinuousDeploymentPolicy"));

export { CloudfrontFunctionArgs, CloudfrontFunctionState } from "./cloudfrontFunction";
export type CloudfrontFunction = import("./cloudfrontFunction").CloudfrontFunction;
export const CloudfrontFunction: typeof import("./cloudfrontFunction").CloudfrontFunction = null as any;
utilities.lazyLoad(exports, ["CloudfrontFunction"], () => require("./cloudfrontFunction"));

export { CloudfrontKeyGroupArgs, CloudfrontKeyGroupState } from "./cloudfrontKeyGroup";
export type CloudfrontKeyGroup = import("./cloudfrontKeyGroup").CloudfrontKeyGroup;
export const CloudfrontKeyGroup: typeof import("./cloudfrontKeyGroup").CloudfrontKeyGroup = null as any;
utilities.lazyLoad(exports, ["CloudfrontKeyGroup"], () => require("./cloudfrontKeyGroup"));

export { CloudfrontKeyValueStoreArgs, CloudfrontKeyValueStoreState } from "./cloudfrontKeyValueStore";
export type CloudfrontKeyValueStore = import("./cloudfrontKeyValueStore").CloudfrontKeyValueStore;
export const CloudfrontKeyValueStore: typeof import("./cloudfrontKeyValueStore").CloudfrontKeyValueStore = null as any;
utilities.lazyLoad(exports, ["CloudfrontKeyValueStore"], () => require("./cloudfrontKeyValueStore"));

export { CloudfrontMonitoringSubscriptionArgs, CloudfrontMonitoringSubscriptionState } from "./cloudfrontMonitoringSubscription";
export type CloudfrontMonitoringSubscription = import("./cloudfrontMonitoringSubscription").CloudfrontMonitoringSubscription;
export const CloudfrontMonitoringSubscription: typeof import("./cloudfrontMonitoringSubscription").CloudfrontMonitoringSubscription = null as any;
utilities.lazyLoad(exports, ["CloudfrontMonitoringSubscription"], () => require("./cloudfrontMonitoringSubscription"));

export { CloudfrontOriginAccessControlArgs, CloudfrontOriginAccessControlState } from "./cloudfrontOriginAccessControl";
export type CloudfrontOriginAccessControl = import("./cloudfrontOriginAccessControl").CloudfrontOriginAccessControl;
export const CloudfrontOriginAccessControl: typeof import("./cloudfrontOriginAccessControl").CloudfrontOriginAccessControl = null as any;
utilities.lazyLoad(exports, ["CloudfrontOriginAccessControl"], () => require("./cloudfrontOriginAccessControl"));

export { CloudfrontOriginRequestPolicyArgs, CloudfrontOriginRequestPolicyState } from "./cloudfrontOriginRequestPolicy";
export type CloudfrontOriginRequestPolicy = import("./cloudfrontOriginRequestPolicy").CloudfrontOriginRequestPolicy;
export const CloudfrontOriginRequestPolicy: typeof import("./cloudfrontOriginRequestPolicy").CloudfrontOriginRequestPolicy = null as any;
utilities.lazyLoad(exports, ["CloudfrontOriginRequestPolicy"], () => require("./cloudfrontOriginRequestPolicy"));

export { CloudfrontPublicKeyArgs, CloudfrontPublicKeyState } from "./cloudfrontPublicKey";
export type CloudfrontPublicKey = import("./cloudfrontPublicKey").CloudfrontPublicKey;
export const CloudfrontPublicKey: typeof import("./cloudfrontPublicKey").CloudfrontPublicKey = null as any;
utilities.lazyLoad(exports, ["CloudfrontPublicKey"], () => require("./cloudfrontPublicKey"));

export { CloudfrontRealtimeLogConfigArgs, CloudfrontRealtimeLogConfigState } from "./cloudfrontRealtimeLogConfig";
export type CloudfrontRealtimeLogConfig = import("./cloudfrontRealtimeLogConfig").CloudfrontRealtimeLogConfig;
export const CloudfrontRealtimeLogConfig: typeof import("./cloudfrontRealtimeLogConfig").CloudfrontRealtimeLogConfig = null as any;
utilities.lazyLoad(exports, ["CloudfrontRealtimeLogConfig"], () => require("./cloudfrontRealtimeLogConfig"));

export { CloudfrontResponseHeadersPolicyArgs, CloudfrontResponseHeadersPolicyState } from "./cloudfrontResponseHeadersPolicy";
export type CloudfrontResponseHeadersPolicy = import("./cloudfrontResponseHeadersPolicy").CloudfrontResponseHeadersPolicy;
export const CloudfrontResponseHeadersPolicy: typeof import("./cloudfrontResponseHeadersPolicy").CloudfrontResponseHeadersPolicy = null as any;
utilities.lazyLoad(exports, ["CloudfrontResponseHeadersPolicy"], () => require("./cloudfrontResponseHeadersPolicy"));

export { CloudtrailChannelArgs, CloudtrailChannelState } from "./cloudtrailChannel";
export type CloudtrailChannel = import("./cloudtrailChannel").CloudtrailChannel;
export const CloudtrailChannel: typeof import("./cloudtrailChannel").CloudtrailChannel = null as any;
utilities.lazyLoad(exports, ["CloudtrailChannel"], () => require("./cloudtrailChannel"));

export { CloudtrailEventDataStoreArgs, CloudtrailEventDataStoreState } from "./cloudtrailEventDataStore";
export type CloudtrailEventDataStore = import("./cloudtrailEventDataStore").CloudtrailEventDataStore;
export const CloudtrailEventDataStore: typeof import("./cloudtrailEventDataStore").CloudtrailEventDataStore = null as any;
utilities.lazyLoad(exports, ["CloudtrailEventDataStore"], () => require("./cloudtrailEventDataStore"));

export { CloudtrailResourcePolicyArgs, CloudtrailResourcePolicyState } from "./cloudtrailResourcePolicy";
export type CloudtrailResourcePolicy = import("./cloudtrailResourcePolicy").CloudtrailResourcePolicy;
export const CloudtrailResourcePolicy: typeof import("./cloudtrailResourcePolicy").CloudtrailResourcePolicy = null as any;
utilities.lazyLoad(exports, ["CloudtrailResourcePolicy"], () => require("./cloudtrailResourcePolicy"));

export { CloudtrailTrailArgs, CloudtrailTrailState } from "./cloudtrailTrail";
export type CloudtrailTrail = import("./cloudtrailTrail").CloudtrailTrail;
export const CloudtrailTrail: typeof import("./cloudtrailTrail").CloudtrailTrail = null as any;
utilities.lazyLoad(exports, ["CloudtrailTrail"], () => require("./cloudtrailTrail"));

export { CloudwatchAlarmArgs, CloudwatchAlarmState } from "./cloudwatchAlarm";
export type CloudwatchAlarm = import("./cloudwatchAlarm").CloudwatchAlarm;
export const CloudwatchAlarm: typeof import("./cloudwatchAlarm").CloudwatchAlarm = null as any;
utilities.lazyLoad(exports, ["CloudwatchAlarm"], () => require("./cloudwatchAlarm"));

export { CloudwatchCompositeAlarmArgs, CloudwatchCompositeAlarmState } from "./cloudwatchCompositeAlarm";
export type CloudwatchCompositeAlarm = import("./cloudwatchCompositeAlarm").CloudwatchCompositeAlarm;
export const CloudwatchCompositeAlarm: typeof import("./cloudwatchCompositeAlarm").CloudwatchCompositeAlarm = null as any;
utilities.lazyLoad(exports, ["CloudwatchCompositeAlarm"], () => require("./cloudwatchCompositeAlarm"));

export { CloudwatchDashboardArgs, CloudwatchDashboardState } from "./cloudwatchDashboard";
export type CloudwatchDashboard = import("./cloudwatchDashboard").CloudwatchDashboard;
export const CloudwatchDashboard: typeof import("./cloudwatchDashboard").CloudwatchDashboard = null as any;
utilities.lazyLoad(exports, ["CloudwatchDashboard"], () => require("./cloudwatchDashboard"));

export { CloudwatchMetricStreamArgs, CloudwatchMetricStreamState } from "./cloudwatchMetricStream";
export type CloudwatchMetricStream = import("./cloudwatchMetricStream").CloudwatchMetricStream;
export const CloudwatchMetricStream: typeof import("./cloudwatchMetricStream").CloudwatchMetricStream = null as any;
utilities.lazyLoad(exports, ["CloudwatchMetricStream"], () => require("./cloudwatchMetricStream"));

export { CodeartifactDomainArgs, CodeartifactDomainState } from "./codeartifactDomain";
export type CodeartifactDomain = import("./codeartifactDomain").CodeartifactDomain;
export const CodeartifactDomain: typeof import("./codeartifactDomain").CodeartifactDomain = null as any;
utilities.lazyLoad(exports, ["CodeartifactDomain"], () => require("./codeartifactDomain"));

export { CodeartifactPackageGroupArgs, CodeartifactPackageGroupState } from "./codeartifactPackageGroup";
export type CodeartifactPackageGroup = import("./codeartifactPackageGroup").CodeartifactPackageGroup;
export const CodeartifactPackageGroup: typeof import("./codeartifactPackageGroup").CodeartifactPackageGroup = null as any;
utilities.lazyLoad(exports, ["CodeartifactPackageGroup"], () => require("./codeartifactPackageGroup"));

export { CodeartifactRepositoryArgs, CodeartifactRepositoryState } from "./codeartifactRepository";
export type CodeartifactRepository = import("./codeartifactRepository").CodeartifactRepository;
export const CodeartifactRepository: typeof import("./codeartifactRepository").CodeartifactRepository = null as any;
utilities.lazyLoad(exports, ["CodeartifactRepository"], () => require("./codeartifactRepository"));

export { CodebuildFleetArgs, CodebuildFleetState } from "./codebuildFleet";
export type CodebuildFleet = import("./codebuildFleet").CodebuildFleet;
export const CodebuildFleet: typeof import("./codebuildFleet").CodebuildFleet = null as any;
utilities.lazyLoad(exports, ["CodebuildFleet"], () => require("./codebuildFleet"));

export { CodeconnectionsConnectionArgs, CodeconnectionsConnectionState } from "./codeconnectionsConnection";
export type CodeconnectionsConnection = import("./codeconnectionsConnection").CodeconnectionsConnection;
export const CodeconnectionsConnection: typeof import("./codeconnectionsConnection").CodeconnectionsConnection = null as any;
utilities.lazyLoad(exports, ["CodeconnectionsConnection"], () => require("./codeconnectionsConnection"));

export { CodedeployApplicationArgs, CodedeployApplicationState } from "./codedeployApplication";
export type CodedeployApplication = import("./codedeployApplication").CodedeployApplication;
export const CodedeployApplication: typeof import("./codedeployApplication").CodedeployApplication = null as any;
utilities.lazyLoad(exports, ["CodedeployApplication"], () => require("./codedeployApplication"));

export { CodedeployDeploymentConfigArgs, CodedeployDeploymentConfigState } from "./codedeployDeploymentConfig";
export type CodedeployDeploymentConfig = import("./codedeployDeploymentConfig").CodedeployDeploymentConfig;
export const CodedeployDeploymentConfig: typeof import("./codedeployDeploymentConfig").CodedeployDeploymentConfig = null as any;
utilities.lazyLoad(exports, ["CodedeployDeploymentConfig"], () => require("./codedeployDeploymentConfig"));

export { CodeguruprofilerProfilingGroupArgs, CodeguruprofilerProfilingGroupState } from "./codeguruprofilerProfilingGroup";
export type CodeguruprofilerProfilingGroup = import("./codeguruprofilerProfilingGroup").CodeguruprofilerProfilingGroup;
export const CodeguruprofilerProfilingGroup: typeof import("./codeguruprofilerProfilingGroup").CodeguruprofilerProfilingGroup = null as any;
utilities.lazyLoad(exports, ["CodeguruprofilerProfilingGroup"], () => require("./codeguruprofilerProfilingGroup"));

export { CodegurureviewerRepositoryAssociationArgs, CodegurureviewerRepositoryAssociationState } from "./codegurureviewerRepositoryAssociation";
export type CodegurureviewerRepositoryAssociation = import("./codegurureviewerRepositoryAssociation").CodegurureviewerRepositoryAssociation;
export const CodegurureviewerRepositoryAssociation: typeof import("./codegurureviewerRepositoryAssociation").CodegurureviewerRepositoryAssociation = null as any;
utilities.lazyLoad(exports, ["CodegurureviewerRepositoryAssociation"], () => require("./codegurureviewerRepositoryAssociation"));

export { CodepipelineCustomActionTypeArgs, CodepipelineCustomActionTypeState } from "./codepipelineCustomActionType";
export type CodepipelineCustomActionType = import("./codepipelineCustomActionType").CodepipelineCustomActionType;
export const CodepipelineCustomActionType: typeof import("./codepipelineCustomActionType").CodepipelineCustomActionType = null as any;
utilities.lazyLoad(exports, ["CodepipelineCustomActionType"], () => require("./codepipelineCustomActionType"));

export { CodepipelinePipelineArgs, CodepipelinePipelineState } from "./codepipelinePipeline";
export type CodepipelinePipeline = import("./codepipelinePipeline").CodepipelinePipeline;
export const CodepipelinePipeline: typeof import("./codepipelinePipeline").CodepipelinePipeline = null as any;
utilities.lazyLoad(exports, ["CodepipelinePipeline"], () => require("./codepipelinePipeline"));

export { CodestarconnectionsConnectionArgs, CodestarconnectionsConnectionState } from "./codestarconnectionsConnection";
export type CodestarconnectionsConnection = import("./codestarconnectionsConnection").CodestarconnectionsConnection;
export const CodestarconnectionsConnection: typeof import("./codestarconnectionsConnection").CodestarconnectionsConnection = null as any;
utilities.lazyLoad(exports, ["CodestarconnectionsConnection"], () => require("./codestarconnectionsConnection"));

export { CodestarconnectionsRepositoryLinkArgs, CodestarconnectionsRepositoryLinkState } from "./codestarconnectionsRepositoryLink";
export type CodestarconnectionsRepositoryLink = import("./codestarconnectionsRepositoryLink").CodestarconnectionsRepositoryLink;
export const CodestarconnectionsRepositoryLink: typeof import("./codestarconnectionsRepositoryLink").CodestarconnectionsRepositoryLink = null as any;
utilities.lazyLoad(exports, ["CodestarconnectionsRepositoryLink"], () => require("./codestarconnectionsRepositoryLink"));

export { CodestarconnectionsSyncConfigurationArgs, CodestarconnectionsSyncConfigurationState } from "./codestarconnectionsSyncConfiguration";
export type CodestarconnectionsSyncConfiguration = import("./codestarconnectionsSyncConfiguration").CodestarconnectionsSyncConfiguration;
export const CodestarconnectionsSyncConfiguration: typeof import("./codestarconnectionsSyncConfiguration").CodestarconnectionsSyncConfiguration = null as any;
utilities.lazyLoad(exports, ["CodestarconnectionsSyncConfiguration"], () => require("./codestarconnectionsSyncConfiguration"));

export { CodestarnotificationsNotificationRuleArgs, CodestarnotificationsNotificationRuleState } from "./codestarnotificationsNotificationRule";
export type CodestarnotificationsNotificationRule = import("./codestarnotificationsNotificationRule").CodestarnotificationsNotificationRule;
export const CodestarnotificationsNotificationRule: typeof import("./codestarnotificationsNotificationRule").CodestarnotificationsNotificationRule = null as any;
utilities.lazyLoad(exports, ["CodestarnotificationsNotificationRule"], () => require("./codestarnotificationsNotificationRule"));

export { CognitoIdentityPoolArgs, CognitoIdentityPoolState } from "./cognitoIdentityPool";
export type CognitoIdentityPool = import("./cognitoIdentityPool").CognitoIdentityPool;
export const CognitoIdentityPool: typeof import("./cognitoIdentityPool").CognitoIdentityPool = null as any;
utilities.lazyLoad(exports, ["CognitoIdentityPool"], () => require("./cognitoIdentityPool"));

export { CognitoIdentityPoolPrincipalTagArgs, CognitoIdentityPoolPrincipalTagState } from "./cognitoIdentityPoolPrincipalTag";
export type CognitoIdentityPoolPrincipalTag = import("./cognitoIdentityPoolPrincipalTag").CognitoIdentityPoolPrincipalTag;
export const CognitoIdentityPoolPrincipalTag: typeof import("./cognitoIdentityPoolPrincipalTag").CognitoIdentityPoolPrincipalTag = null as any;
utilities.lazyLoad(exports, ["CognitoIdentityPoolPrincipalTag"], () => require("./cognitoIdentityPoolPrincipalTag"));

export { CognitoIdentityPoolRoleAttachmentArgs, CognitoIdentityPoolRoleAttachmentState } from "./cognitoIdentityPoolRoleAttachment";
export type CognitoIdentityPoolRoleAttachment = import("./cognitoIdentityPoolRoleAttachment").CognitoIdentityPoolRoleAttachment;
export const CognitoIdentityPoolRoleAttachment: typeof import("./cognitoIdentityPoolRoleAttachment").CognitoIdentityPoolRoleAttachment = null as any;
utilities.lazyLoad(exports, ["CognitoIdentityPoolRoleAttachment"], () => require("./cognitoIdentityPoolRoleAttachment"));

export { CognitoLogDeliveryConfigurationArgs, CognitoLogDeliveryConfigurationState } from "./cognitoLogDeliveryConfiguration";
export type CognitoLogDeliveryConfiguration = import("./cognitoLogDeliveryConfiguration").CognitoLogDeliveryConfiguration;
export const CognitoLogDeliveryConfiguration: typeof import("./cognitoLogDeliveryConfiguration").CognitoLogDeliveryConfiguration = null as any;
utilities.lazyLoad(exports, ["CognitoLogDeliveryConfiguration"], () => require("./cognitoLogDeliveryConfiguration"));

export { CognitoUserPoolClientArgs, CognitoUserPoolClientState } from "./cognitoUserPoolClient";
export type CognitoUserPoolClient = import("./cognitoUserPoolClient").CognitoUserPoolClient;
export const CognitoUserPoolClient: typeof import("./cognitoUserPoolClient").CognitoUserPoolClient = null as any;
utilities.lazyLoad(exports, ["CognitoUserPoolClient"], () => require("./cognitoUserPoolClient"));

export { CognitoUserPoolGroupArgs, CognitoUserPoolGroupState } from "./cognitoUserPoolGroup";
export type CognitoUserPoolGroup = import("./cognitoUserPoolGroup").CognitoUserPoolGroup;
export const CognitoUserPoolGroup: typeof import("./cognitoUserPoolGroup").CognitoUserPoolGroup = null as any;
utilities.lazyLoad(exports, ["CognitoUserPoolGroup"], () => require("./cognitoUserPoolGroup"));

export { CognitoUserPoolResourceServerArgs, CognitoUserPoolResourceServerState } from "./cognitoUserPoolResourceServer";
export type CognitoUserPoolResourceServer = import("./cognitoUserPoolResourceServer").CognitoUserPoolResourceServer;
export const CognitoUserPoolResourceServer: typeof import("./cognitoUserPoolResourceServer").CognitoUserPoolResourceServer = null as any;
utilities.lazyLoad(exports, ["CognitoUserPoolResourceServer"], () => require("./cognitoUserPoolResourceServer"));

export { CognitoUserPoolRiskConfigurationAttachmentArgs, CognitoUserPoolRiskConfigurationAttachmentState } from "./cognitoUserPoolRiskConfigurationAttachment";
export type CognitoUserPoolRiskConfigurationAttachment = import("./cognitoUserPoolRiskConfigurationAttachment").CognitoUserPoolRiskConfigurationAttachment;
export const CognitoUserPoolRiskConfigurationAttachment: typeof import("./cognitoUserPoolRiskConfigurationAttachment").CognitoUserPoolRiskConfigurationAttachment = null as any;
utilities.lazyLoad(exports, ["CognitoUserPoolRiskConfigurationAttachment"], () => require("./cognitoUserPoolRiskConfigurationAttachment"));

export { CognitoUserPoolUiCustomizationAttachmentArgs, CognitoUserPoolUiCustomizationAttachmentState } from "./cognitoUserPoolUiCustomizationAttachment";
export type CognitoUserPoolUiCustomizationAttachment = import("./cognitoUserPoolUiCustomizationAttachment").CognitoUserPoolUiCustomizationAttachment;
export const CognitoUserPoolUiCustomizationAttachment: typeof import("./cognitoUserPoolUiCustomizationAttachment").CognitoUserPoolUiCustomizationAttachment = null as any;
utilities.lazyLoad(exports, ["CognitoUserPoolUiCustomizationAttachment"], () => require("./cognitoUserPoolUiCustomizationAttachment"));

export { CognitoUserPoolUserArgs, CognitoUserPoolUserState } from "./cognitoUserPoolUser";
export type CognitoUserPoolUser = import("./cognitoUserPoolUser").CognitoUserPoolUser;
export const CognitoUserPoolUser: typeof import("./cognitoUserPoolUser").CognitoUserPoolUser = null as any;
utilities.lazyLoad(exports, ["CognitoUserPoolUser"], () => require("./cognitoUserPoolUser"));

export { CognitoUserPoolUserToGroupAttachmentArgs, CognitoUserPoolUserToGroupAttachmentState } from "./cognitoUserPoolUserToGroupAttachment";
export type CognitoUserPoolUserToGroupAttachment = import("./cognitoUserPoolUserToGroupAttachment").CognitoUserPoolUserToGroupAttachment;
export const CognitoUserPoolUserToGroupAttachment: typeof import("./cognitoUserPoolUserToGroupAttachment").CognitoUserPoolUserToGroupAttachment = null as any;
utilities.lazyLoad(exports, ["CognitoUserPoolUserToGroupAttachment"], () => require("./cognitoUserPoolUserToGroupAttachment"));

export { ComprehendDocumentClassifierArgs, ComprehendDocumentClassifierState } from "./comprehendDocumentClassifier";
export type ComprehendDocumentClassifier = import("./comprehendDocumentClassifier").ComprehendDocumentClassifier;
export const ComprehendDocumentClassifier: typeof import("./comprehendDocumentClassifier").ComprehendDocumentClassifier = null as any;
utilities.lazyLoad(exports, ["ComprehendDocumentClassifier"], () => require("./comprehendDocumentClassifier"));

export { ComprehendFlywheelArgs, ComprehendFlywheelState } from "./comprehendFlywheel";
export type ComprehendFlywheel = import("./comprehendFlywheel").ComprehendFlywheel;
export const ComprehendFlywheel: typeof import("./comprehendFlywheel").ComprehendFlywheel = null as any;
utilities.lazyLoad(exports, ["ComprehendFlywheel"], () => require("./comprehendFlywheel"));

export { ConfigAggregationAuthorizationArgs, ConfigAggregationAuthorizationState } from "./configAggregationAuthorization";
export type ConfigAggregationAuthorization = import("./configAggregationAuthorization").ConfigAggregationAuthorization;
export const ConfigAggregationAuthorization: typeof import("./configAggregationAuthorization").ConfigAggregationAuthorization = null as any;
utilities.lazyLoad(exports, ["ConfigAggregationAuthorization"], () => require("./configAggregationAuthorization"));

export { ConfigConfigRuleArgs, ConfigConfigRuleState } from "./configConfigRule";
export type ConfigConfigRule = import("./configConfigRule").ConfigConfigRule;
export const ConfigConfigRule: typeof import("./configConfigRule").ConfigConfigRule = null as any;
utilities.lazyLoad(exports, ["ConfigConfigRule"], () => require("./configConfigRule"));

export { ConfigConfigurationAggregatorArgs, ConfigConfigurationAggregatorState } from "./configConfigurationAggregator";
export type ConfigConfigurationAggregator = import("./configConfigurationAggregator").ConfigConfigurationAggregator;
export const ConfigConfigurationAggregator: typeof import("./configConfigurationAggregator").ConfigConfigurationAggregator = null as any;
utilities.lazyLoad(exports, ["ConfigConfigurationAggregator"], () => require("./configConfigurationAggregator"));

export { ConfigConformancePackArgs, ConfigConformancePackState } from "./configConformancePack";
export type ConfigConformancePack = import("./configConformancePack").ConfigConformancePack;
export const ConfigConformancePack: typeof import("./configConformancePack").ConfigConformancePack = null as any;
utilities.lazyLoad(exports, ["ConfigConformancePack"], () => require("./configConformancePack"));

export { ConfigOrganizationConformancePackArgs, ConfigOrganizationConformancePackState } from "./configOrganizationConformancePack";
export type ConfigOrganizationConformancePack = import("./configOrganizationConformancePack").ConfigOrganizationConformancePack;
export const ConfigOrganizationConformancePack: typeof import("./configOrganizationConformancePack").ConfigOrganizationConformancePack = null as any;
utilities.lazyLoad(exports, ["ConfigOrganizationConformancePack"], () => require("./configOrganizationConformancePack"));

export { ConfigStoredQueryArgs, ConfigStoredQueryState } from "./configStoredQuery";
export type ConfigStoredQuery = import("./configStoredQuery").ConfigStoredQuery;
export const ConfigStoredQuery: typeof import("./configStoredQuery").ConfigStoredQuery = null as any;
utilities.lazyLoad(exports, ["ConfigStoredQuery"], () => require("./configStoredQuery"));

export { ConnectApprovedOriginArgs, ConnectApprovedOriginState } from "./connectApprovedOrigin";
export type ConnectApprovedOrigin = import("./connectApprovedOrigin").ConnectApprovedOrigin;
export const ConnectApprovedOrigin: typeof import("./connectApprovedOrigin").ConnectApprovedOrigin = null as any;
utilities.lazyLoad(exports, ["ConnectApprovedOrigin"], () => require("./connectApprovedOrigin"));

export { ConnectContactFlowArgs, ConnectContactFlowState } from "./connectContactFlow";
export type ConnectContactFlow = import("./connectContactFlow").ConnectContactFlow;
export const ConnectContactFlow: typeof import("./connectContactFlow").ConnectContactFlow = null as any;
utilities.lazyLoad(exports, ["ConnectContactFlow"], () => require("./connectContactFlow"));

export { ConnectContactFlowModuleArgs, ConnectContactFlowModuleState } from "./connectContactFlowModule";
export type ConnectContactFlowModule = import("./connectContactFlowModule").ConnectContactFlowModule;
export const ConnectContactFlowModule: typeof import("./connectContactFlowModule").ConnectContactFlowModule = null as any;
utilities.lazyLoad(exports, ["ConnectContactFlowModule"], () => require("./connectContactFlowModule"));

export { ConnectHoursOfOperationArgs, ConnectHoursOfOperationState } from "./connectHoursOfOperation";
export type ConnectHoursOfOperation = import("./connectHoursOfOperation").ConnectHoursOfOperation;
export const ConnectHoursOfOperation: typeof import("./connectHoursOfOperation").ConnectHoursOfOperation = null as any;
utilities.lazyLoad(exports, ["ConnectHoursOfOperation"], () => require("./connectHoursOfOperation"));

export { ConnectInstanceArgs, ConnectInstanceState } from "./connectInstance";
export type ConnectInstance = import("./connectInstance").ConnectInstance;
export const ConnectInstance: typeof import("./connectInstance").ConnectInstance = null as any;
utilities.lazyLoad(exports, ["ConnectInstance"], () => require("./connectInstance"));

export { ConnectInstanceStorageConfigArgs, ConnectInstanceStorageConfigState } from "./connectInstanceStorageConfig";
export type ConnectInstanceStorageConfig = import("./connectInstanceStorageConfig").ConnectInstanceStorageConfig;
export const ConnectInstanceStorageConfig: typeof import("./connectInstanceStorageConfig").ConnectInstanceStorageConfig = null as any;
utilities.lazyLoad(exports, ["ConnectInstanceStorageConfig"], () => require("./connectInstanceStorageConfig"));

export { ConnectIntegrationAssociationArgs, ConnectIntegrationAssociationState } from "./connectIntegrationAssociation";
export type ConnectIntegrationAssociation = import("./connectIntegrationAssociation").ConnectIntegrationAssociation;
export const ConnectIntegrationAssociation: typeof import("./connectIntegrationAssociation").ConnectIntegrationAssociation = null as any;
utilities.lazyLoad(exports, ["ConnectIntegrationAssociation"], () => require("./connectIntegrationAssociation"));

export { ConnectPhoneNumberArgs, ConnectPhoneNumberState } from "./connectPhoneNumber";
export type ConnectPhoneNumber = import("./connectPhoneNumber").ConnectPhoneNumber;
export const ConnectPhoneNumber: typeof import("./connectPhoneNumber").ConnectPhoneNumber = null as any;
utilities.lazyLoad(exports, ["ConnectPhoneNumber"], () => require("./connectPhoneNumber"));

export { ConnectPredefinedAttributeArgs, ConnectPredefinedAttributeState } from "./connectPredefinedAttribute";
export type ConnectPredefinedAttribute = import("./connectPredefinedAttribute").ConnectPredefinedAttribute;
export const ConnectPredefinedAttribute: typeof import("./connectPredefinedAttribute").ConnectPredefinedAttribute = null as any;
utilities.lazyLoad(exports, ["ConnectPredefinedAttribute"], () => require("./connectPredefinedAttribute"));

export { ConnectPromptArgs, ConnectPromptState } from "./connectPrompt";
export type ConnectPrompt = import("./connectPrompt").ConnectPrompt;
export const ConnectPrompt: typeof import("./connectPrompt").ConnectPrompt = null as any;
utilities.lazyLoad(exports, ["ConnectPrompt"], () => require("./connectPrompt"));

export { ConnectQueueArgs, ConnectQueueState } from "./connectQueue";
export type ConnectQueue = import("./connectQueue").ConnectQueue;
export const ConnectQueue: typeof import("./connectQueue").ConnectQueue = null as any;
utilities.lazyLoad(exports, ["ConnectQueue"], () => require("./connectQueue"));

export { ConnectQuickConnectArgs, ConnectQuickConnectState } from "./connectQuickConnect";
export type ConnectQuickConnect = import("./connectQuickConnect").ConnectQuickConnect;
export const ConnectQuickConnect: typeof import("./connectQuickConnect").ConnectQuickConnect = null as any;
utilities.lazyLoad(exports, ["ConnectQuickConnect"], () => require("./connectQuickConnect"));

export { ConnectRoutingProfileArgs, ConnectRoutingProfileState } from "./connectRoutingProfile";
export type ConnectRoutingProfile = import("./connectRoutingProfile").ConnectRoutingProfile;
export const ConnectRoutingProfile: typeof import("./connectRoutingProfile").ConnectRoutingProfile = null as any;
utilities.lazyLoad(exports, ["ConnectRoutingProfile"], () => require("./connectRoutingProfile"));

export { ConnectSecurityKeyArgs, ConnectSecurityKeyState } from "./connectSecurityKey";
export type ConnectSecurityKey = import("./connectSecurityKey").ConnectSecurityKey;
export const ConnectSecurityKey: typeof import("./connectSecurityKey").ConnectSecurityKey = null as any;
utilities.lazyLoad(exports, ["ConnectSecurityKey"], () => require("./connectSecurityKey"));

export { ConnectSecurityProfileArgs, ConnectSecurityProfileState } from "./connectSecurityProfile";
export type ConnectSecurityProfile = import("./connectSecurityProfile").ConnectSecurityProfile;
export const ConnectSecurityProfile: typeof import("./connectSecurityProfile").ConnectSecurityProfile = null as any;
utilities.lazyLoad(exports, ["ConnectSecurityProfile"], () => require("./connectSecurityProfile"));

export { ConnectTaskTemplateArgs, ConnectTaskTemplateState } from "./connectTaskTemplate";
export type ConnectTaskTemplate = import("./connectTaskTemplate").ConnectTaskTemplate;
export const ConnectTaskTemplate: typeof import("./connectTaskTemplate").ConnectTaskTemplate = null as any;
utilities.lazyLoad(exports, ["ConnectTaskTemplate"], () => require("./connectTaskTemplate"));

export { ConnectTrafficDistributionGroupArgs, ConnectTrafficDistributionGroupState } from "./connectTrafficDistributionGroup";
export type ConnectTrafficDistributionGroup = import("./connectTrafficDistributionGroup").ConnectTrafficDistributionGroup;
export const ConnectTrafficDistributionGroup: typeof import("./connectTrafficDistributionGroup").ConnectTrafficDistributionGroup = null as any;
utilities.lazyLoad(exports, ["ConnectTrafficDistributionGroup"], () => require("./connectTrafficDistributionGroup"));

export { ConnectUserArgs, ConnectUserState } from "./connectUser";
export type ConnectUser = import("./connectUser").ConnectUser;
export const ConnectUser: typeof import("./connectUser").ConnectUser = null as any;
utilities.lazyLoad(exports, ["ConnectUser"], () => require("./connectUser"));

export { ConnectUserHierarchyGroupArgs, ConnectUserHierarchyGroupState } from "./connectUserHierarchyGroup";
export type ConnectUserHierarchyGroup = import("./connectUserHierarchyGroup").ConnectUserHierarchyGroup;
export const ConnectUserHierarchyGroup: typeof import("./connectUserHierarchyGroup").ConnectUserHierarchyGroup = null as any;
utilities.lazyLoad(exports, ["ConnectUserHierarchyGroup"], () => require("./connectUserHierarchyGroup"));

export { ConnectViewArgs, ConnectViewState } from "./connectView";
export type ConnectView = import("./connectView").ConnectView;
export const ConnectView: typeof import("./connectView").ConnectView = null as any;
utilities.lazyLoad(exports, ["ConnectView"], () => require("./connectView"));

export { ConnectViewVersionArgs, ConnectViewVersionState } from "./connectViewVersion";
export type ConnectViewVersion = import("./connectViewVersion").ConnectViewVersion;
export const ConnectViewVersion: typeof import("./connectViewVersion").ConnectViewVersion = null as any;
utilities.lazyLoad(exports, ["ConnectViewVersion"], () => require("./connectViewVersion"));

export { ConnectcampaignsCampaignArgs, ConnectcampaignsCampaignState } from "./connectcampaignsCampaign";
export type ConnectcampaignsCampaign = import("./connectcampaignsCampaign").ConnectcampaignsCampaign;
export const ConnectcampaignsCampaign: typeof import("./connectcampaignsCampaign").ConnectcampaignsCampaign = null as any;
utilities.lazyLoad(exports, ["ConnectcampaignsCampaign"], () => require("./connectcampaignsCampaign"));

export { ControltowerEnabledControlArgs, ControltowerEnabledControlState } from "./controltowerEnabledControl";
export type ControltowerEnabledControl = import("./controltowerEnabledControl").ControltowerEnabledControl;
export const ControltowerEnabledControl: typeof import("./controltowerEnabledControl").ControltowerEnabledControl = null as any;
utilities.lazyLoad(exports, ["ControltowerEnabledControl"], () => require("./controltowerEnabledControl"));

export { CurReportDefinitionArgs, CurReportDefinitionState } from "./curReportDefinition";
export type CurReportDefinition = import("./curReportDefinition").CurReportDefinition;
export const CurReportDefinition: typeof import("./curReportDefinition").CurReportDefinition = null as any;
utilities.lazyLoad(exports, ["CurReportDefinition"], () => require("./curReportDefinition"));

export { CustomerprofilesCalculatedAttributeDefinitionArgs, CustomerprofilesCalculatedAttributeDefinitionState } from "./customerprofilesCalculatedAttributeDefinition";
export type CustomerprofilesCalculatedAttributeDefinition = import("./customerprofilesCalculatedAttributeDefinition").CustomerprofilesCalculatedAttributeDefinition;
export const CustomerprofilesCalculatedAttributeDefinition: typeof import("./customerprofilesCalculatedAttributeDefinition").CustomerprofilesCalculatedAttributeDefinition = null as any;
utilities.lazyLoad(exports, ["CustomerprofilesCalculatedAttributeDefinition"], () => require("./customerprofilesCalculatedAttributeDefinition"));

export { CustomerprofilesDomainArgs, CustomerprofilesDomainState } from "./customerprofilesDomain";
export type CustomerprofilesDomain = import("./customerprofilesDomain").CustomerprofilesDomain;
export const CustomerprofilesDomain: typeof import("./customerprofilesDomain").CustomerprofilesDomain = null as any;
utilities.lazyLoad(exports, ["CustomerprofilesDomain"], () => require("./customerprofilesDomain"));

export { CustomerprofilesEventStreamArgs, CustomerprofilesEventStreamState } from "./customerprofilesEventStream";
export type CustomerprofilesEventStream = import("./customerprofilesEventStream").CustomerprofilesEventStream;
export const CustomerprofilesEventStream: typeof import("./customerprofilesEventStream").CustomerprofilesEventStream = null as any;
utilities.lazyLoad(exports, ["CustomerprofilesEventStream"], () => require("./customerprofilesEventStream"));

export { CustomerprofilesIntegrationArgs, CustomerprofilesIntegrationState } from "./customerprofilesIntegration";
export type CustomerprofilesIntegration = import("./customerprofilesIntegration").CustomerprofilesIntegration;
export const CustomerprofilesIntegration: typeof import("./customerprofilesIntegration").CustomerprofilesIntegration = null as any;
utilities.lazyLoad(exports, ["CustomerprofilesIntegration"], () => require("./customerprofilesIntegration"));

export { CustomerprofilesObjectTypeArgs, CustomerprofilesObjectTypeState } from "./customerprofilesObjectType";
export type CustomerprofilesObjectType = import("./customerprofilesObjectType").CustomerprofilesObjectType;
export const CustomerprofilesObjectType: typeof import("./customerprofilesObjectType").CustomerprofilesObjectType = null as any;
utilities.lazyLoad(exports, ["CustomerprofilesObjectType"], () => require("./customerprofilesObjectType"));

export { DatabrewDatasetArgs, DatabrewDatasetState } from "./databrewDataset";
export type DatabrewDataset = import("./databrewDataset").DatabrewDataset;
export const DatabrewDataset: typeof import("./databrewDataset").DatabrewDataset = null as any;
utilities.lazyLoad(exports, ["DatabrewDataset"], () => require("./databrewDataset"));

export { DatabrewJobArgs, DatabrewJobState } from "./databrewJob";
export type DatabrewJob = import("./databrewJob").DatabrewJob;
export const DatabrewJob: typeof import("./databrewJob").DatabrewJob = null as any;
utilities.lazyLoad(exports, ["DatabrewJob"], () => require("./databrewJob"));

export { DatabrewProjectArgs, DatabrewProjectState } from "./databrewProject";
export type DatabrewProject = import("./databrewProject").DatabrewProject;
export const DatabrewProject: typeof import("./databrewProject").DatabrewProject = null as any;
utilities.lazyLoad(exports, ["DatabrewProject"], () => require("./databrewProject"));

export { DatabrewRulesetArgs, DatabrewRulesetState } from "./databrewRuleset";
export type DatabrewRuleset = import("./databrewRuleset").DatabrewRuleset;
export const DatabrewRuleset: typeof import("./databrewRuleset").DatabrewRuleset = null as any;
utilities.lazyLoad(exports, ["DatabrewRuleset"], () => require("./databrewRuleset"));

export { DatabrewScheduleArgs, DatabrewScheduleState } from "./databrewSchedule";
export type DatabrewSchedule = import("./databrewSchedule").DatabrewSchedule;
export const DatabrewSchedule: typeof import("./databrewSchedule").DatabrewSchedule = null as any;
utilities.lazyLoad(exports, ["DatabrewSchedule"], () => require("./databrewSchedule"));

export { DatapipelinePipelineArgs, DatapipelinePipelineState } from "./datapipelinePipeline";
export type DatapipelinePipeline = import("./datapipelinePipeline").DatapipelinePipeline;
export const DatapipelinePipeline: typeof import("./datapipelinePipeline").DatapipelinePipeline = null as any;
utilities.lazyLoad(exports, ["DatapipelinePipeline"], () => require("./datapipelinePipeline"));

export { DatasyncAgentArgs, DatasyncAgentState } from "./datasyncAgent";
export type DatasyncAgent = import("./datasyncAgent").DatasyncAgent;
export const DatasyncAgent: typeof import("./datasyncAgent").DatasyncAgent = null as any;
utilities.lazyLoad(exports, ["DatasyncAgent"], () => require("./datasyncAgent"));

export { DatasyncLocationAzureBlobArgs, DatasyncLocationAzureBlobState } from "./datasyncLocationAzureBlob";
export type DatasyncLocationAzureBlob = import("./datasyncLocationAzureBlob").DatasyncLocationAzureBlob;
export const DatasyncLocationAzureBlob: typeof import("./datasyncLocationAzureBlob").DatasyncLocationAzureBlob = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationAzureBlob"], () => require("./datasyncLocationAzureBlob"));

export { DatasyncLocationEfsArgs, DatasyncLocationEfsState } from "./datasyncLocationEfs";
export type DatasyncLocationEfs = import("./datasyncLocationEfs").DatasyncLocationEfs;
export const DatasyncLocationEfs: typeof import("./datasyncLocationEfs").DatasyncLocationEfs = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationEfs"], () => require("./datasyncLocationEfs"));

export { DatasyncLocationFsxLustreArgs, DatasyncLocationFsxLustreState } from "./datasyncLocationFsxLustre";
export type DatasyncLocationFsxLustre = import("./datasyncLocationFsxLustre").DatasyncLocationFsxLustre;
export const DatasyncLocationFsxLustre: typeof import("./datasyncLocationFsxLustre").DatasyncLocationFsxLustre = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationFsxLustre"], () => require("./datasyncLocationFsxLustre"));

export { DatasyncLocationFsxOntapArgs, DatasyncLocationFsxOntapState } from "./datasyncLocationFsxOntap";
export type DatasyncLocationFsxOntap = import("./datasyncLocationFsxOntap").DatasyncLocationFsxOntap;
export const DatasyncLocationFsxOntap: typeof import("./datasyncLocationFsxOntap").DatasyncLocationFsxOntap = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationFsxOntap"], () => require("./datasyncLocationFsxOntap"));

export { DatasyncLocationFsxOpenZfsArgs, DatasyncLocationFsxOpenZfsState } from "./datasyncLocationFsxOpenZfs";
export type DatasyncLocationFsxOpenZfs = import("./datasyncLocationFsxOpenZfs").DatasyncLocationFsxOpenZfs;
export const DatasyncLocationFsxOpenZfs: typeof import("./datasyncLocationFsxOpenZfs").DatasyncLocationFsxOpenZfs = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationFsxOpenZfs"], () => require("./datasyncLocationFsxOpenZfs"));

export { DatasyncLocationFsxWindowsArgs, DatasyncLocationFsxWindowsState } from "./datasyncLocationFsxWindows";
export type DatasyncLocationFsxWindows = import("./datasyncLocationFsxWindows").DatasyncLocationFsxWindows;
export const DatasyncLocationFsxWindows: typeof import("./datasyncLocationFsxWindows").DatasyncLocationFsxWindows = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationFsxWindows"], () => require("./datasyncLocationFsxWindows"));

export { DatasyncLocationHdfsArgs, DatasyncLocationHdfsState } from "./datasyncLocationHdfs";
export type DatasyncLocationHdfs = import("./datasyncLocationHdfs").DatasyncLocationHdfs;
export const DatasyncLocationHdfs: typeof import("./datasyncLocationHdfs").DatasyncLocationHdfs = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationHdfs"], () => require("./datasyncLocationHdfs"));

export { DatasyncLocationNfsArgs, DatasyncLocationNfsState } from "./datasyncLocationNfs";
export type DatasyncLocationNfs = import("./datasyncLocationNfs").DatasyncLocationNfs;
export const DatasyncLocationNfs: typeof import("./datasyncLocationNfs").DatasyncLocationNfs = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationNfs"], () => require("./datasyncLocationNfs"));

export { DatasyncLocationObjectStorageArgs, DatasyncLocationObjectStorageState } from "./datasyncLocationObjectStorage";
export type DatasyncLocationObjectStorage = import("./datasyncLocationObjectStorage").DatasyncLocationObjectStorage;
export const DatasyncLocationObjectStorage: typeof import("./datasyncLocationObjectStorage").DatasyncLocationObjectStorage = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationObjectStorage"], () => require("./datasyncLocationObjectStorage"));

export { DatasyncLocationS3Args, DatasyncLocationS3State } from "./datasyncLocationS3";
export type DatasyncLocationS3 = import("./datasyncLocationS3").DatasyncLocationS3;
export const DatasyncLocationS3: typeof import("./datasyncLocationS3").DatasyncLocationS3 = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationS3"], () => require("./datasyncLocationS3"));

export { DatasyncLocationSmbArgs, DatasyncLocationSmbState } from "./datasyncLocationSmb";
export type DatasyncLocationSmb = import("./datasyncLocationSmb").DatasyncLocationSmb;
export const DatasyncLocationSmb: typeof import("./datasyncLocationSmb").DatasyncLocationSmb = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationSmb"], () => require("./datasyncLocationSmb"));

export { DatasyncStorageSystemArgs, DatasyncStorageSystemState } from "./datasyncStorageSystem";
export type DatasyncStorageSystem = import("./datasyncStorageSystem").DatasyncStorageSystem;
export const DatasyncStorageSystem: typeof import("./datasyncStorageSystem").DatasyncStorageSystem = null as any;
utilities.lazyLoad(exports, ["DatasyncStorageSystem"], () => require("./datasyncStorageSystem"));

export { DatasyncTaskArgs, DatasyncTaskState } from "./datasyncTask";
export type DatasyncTask = import("./datasyncTask").DatasyncTask;
export const DatasyncTask: typeof import("./datasyncTask").DatasyncTask = null as any;
utilities.lazyLoad(exports, ["DatasyncTask"], () => require("./datasyncTask"));

export { DatazoneDataSourceArgs, DatazoneDataSourceState } from "./datazoneDataSource";
export type DatazoneDataSource = import("./datazoneDataSource").DatazoneDataSource;
export const DatazoneDataSource: typeof import("./datazoneDataSource").DatazoneDataSource = null as any;
utilities.lazyLoad(exports, ["DatazoneDataSource"], () => require("./datazoneDataSource"));

export { DatazoneDomainArgs, DatazoneDomainState } from "./datazoneDomain";
export type DatazoneDomain = import("./datazoneDomain").DatazoneDomain;
export const DatazoneDomain: typeof import("./datazoneDomain").DatazoneDomain = null as any;
utilities.lazyLoad(exports, ["DatazoneDomain"], () => require("./datazoneDomain"));

export { DatazoneEnvironmentArgs, DatazoneEnvironmentState } from "./datazoneEnvironment";
export type DatazoneEnvironment = import("./datazoneEnvironment").DatazoneEnvironment;
export const DatazoneEnvironment: typeof import("./datazoneEnvironment").DatazoneEnvironment = null as any;
utilities.lazyLoad(exports, ["DatazoneEnvironment"], () => require("./datazoneEnvironment"));

export { DatazoneEnvironmentBlueprintConfigurationArgs, DatazoneEnvironmentBlueprintConfigurationState } from "./datazoneEnvironmentBlueprintConfiguration";
export type DatazoneEnvironmentBlueprintConfiguration = import("./datazoneEnvironmentBlueprintConfiguration").DatazoneEnvironmentBlueprintConfiguration;
export const DatazoneEnvironmentBlueprintConfiguration: typeof import("./datazoneEnvironmentBlueprintConfiguration").DatazoneEnvironmentBlueprintConfiguration = null as any;
utilities.lazyLoad(exports, ["DatazoneEnvironmentBlueprintConfiguration"], () => require("./datazoneEnvironmentBlueprintConfiguration"));

export { DatazoneEnvironmentProfileArgs, DatazoneEnvironmentProfileState } from "./datazoneEnvironmentProfile";
export type DatazoneEnvironmentProfile = import("./datazoneEnvironmentProfile").DatazoneEnvironmentProfile;
export const DatazoneEnvironmentProfile: typeof import("./datazoneEnvironmentProfile").DatazoneEnvironmentProfile = null as any;
utilities.lazyLoad(exports, ["DatazoneEnvironmentProfile"], () => require("./datazoneEnvironmentProfile"));

export { DatazoneGroupProfileArgs, DatazoneGroupProfileState } from "./datazoneGroupProfile";
export type DatazoneGroupProfile = import("./datazoneGroupProfile").DatazoneGroupProfile;
export const DatazoneGroupProfile: typeof import("./datazoneGroupProfile").DatazoneGroupProfile = null as any;
utilities.lazyLoad(exports, ["DatazoneGroupProfile"], () => require("./datazoneGroupProfile"));

export { DatazoneProjectArgs, DatazoneProjectState } from "./datazoneProject";
export type DatazoneProject = import("./datazoneProject").DatazoneProject;
export const DatazoneProject: typeof import("./datazoneProject").DatazoneProject = null as any;
utilities.lazyLoad(exports, ["DatazoneProject"], () => require("./datazoneProject"));

export { DatazoneProjectMembershipArgs, DatazoneProjectMembershipState } from "./datazoneProjectMembership";
export type DatazoneProjectMembership = import("./datazoneProjectMembership").DatazoneProjectMembership;
export const DatazoneProjectMembership: typeof import("./datazoneProjectMembership").DatazoneProjectMembership = null as any;
utilities.lazyLoad(exports, ["DatazoneProjectMembership"], () => require("./datazoneProjectMembership"));

export { DatazoneSubscriptionTargetArgs, DatazoneSubscriptionTargetState } from "./datazoneSubscriptionTarget";
export type DatazoneSubscriptionTarget = import("./datazoneSubscriptionTarget").DatazoneSubscriptionTarget;
export const DatazoneSubscriptionTarget: typeof import("./datazoneSubscriptionTarget").DatazoneSubscriptionTarget = null as any;
utilities.lazyLoad(exports, ["DatazoneSubscriptionTarget"], () => require("./datazoneSubscriptionTarget"));

export { DatazoneUserProfileArgs, DatazoneUserProfileState } from "./datazoneUserProfile";
export type DatazoneUserProfile = import("./datazoneUserProfile").DatazoneUserProfile;
export const DatazoneUserProfile: typeof import("./datazoneUserProfile").DatazoneUserProfile = null as any;
utilities.lazyLoad(exports, ["DatazoneUserProfile"], () => require("./datazoneUserProfile"));

export { DeadlineFarmArgs, DeadlineFarmState } from "./deadlineFarm";
export type DeadlineFarm = import("./deadlineFarm").DeadlineFarm;
export const DeadlineFarm: typeof import("./deadlineFarm").DeadlineFarm = null as any;
utilities.lazyLoad(exports, ["DeadlineFarm"], () => require("./deadlineFarm"));

export { DeadlineFleetArgs, DeadlineFleetState } from "./deadlineFleet";
export type DeadlineFleet = import("./deadlineFleet").DeadlineFleet;
export const DeadlineFleet: typeof import("./deadlineFleet").DeadlineFleet = null as any;
utilities.lazyLoad(exports, ["DeadlineFleet"], () => require("./deadlineFleet"));

export { DeadlineLicenseEndpointArgs, DeadlineLicenseEndpointState } from "./deadlineLicenseEndpoint";
export type DeadlineLicenseEndpoint = import("./deadlineLicenseEndpoint").DeadlineLicenseEndpoint;
export const DeadlineLicenseEndpoint: typeof import("./deadlineLicenseEndpoint").DeadlineLicenseEndpoint = null as any;
utilities.lazyLoad(exports, ["DeadlineLicenseEndpoint"], () => require("./deadlineLicenseEndpoint"));

export { DeadlineMeteredProductArgs, DeadlineMeteredProductState } from "./deadlineMeteredProduct";
export type DeadlineMeteredProduct = import("./deadlineMeteredProduct").DeadlineMeteredProduct;
export const DeadlineMeteredProduct: typeof import("./deadlineMeteredProduct").DeadlineMeteredProduct = null as any;
utilities.lazyLoad(exports, ["DeadlineMeteredProduct"], () => require("./deadlineMeteredProduct"));

export { DeadlineMonitorArgs, DeadlineMonitorState } from "./deadlineMonitor";
export type DeadlineMonitor = import("./deadlineMonitor").DeadlineMonitor;
export const DeadlineMonitor: typeof import("./deadlineMonitor").DeadlineMonitor = null as any;
utilities.lazyLoad(exports, ["DeadlineMonitor"], () => require("./deadlineMonitor"));

export { DeadlineQueueArgs, DeadlineQueueState } from "./deadlineQueue";
export type DeadlineQueue = import("./deadlineQueue").DeadlineQueue;
export const DeadlineQueue: typeof import("./deadlineQueue").DeadlineQueue = null as any;
utilities.lazyLoad(exports, ["DeadlineQueue"], () => require("./deadlineQueue"));

export { DeadlineQueueEnvironmentArgs, DeadlineQueueEnvironmentState } from "./deadlineQueueEnvironment";
export type DeadlineQueueEnvironment = import("./deadlineQueueEnvironment").DeadlineQueueEnvironment;
export const DeadlineQueueEnvironment: typeof import("./deadlineQueueEnvironment").DeadlineQueueEnvironment = null as any;
utilities.lazyLoad(exports, ["DeadlineQueueEnvironment"], () => require("./deadlineQueueEnvironment"));

export { DeadlineQueueFleetAssociationArgs, DeadlineQueueFleetAssociationState } from "./deadlineQueueFleetAssociation";
export type DeadlineQueueFleetAssociation = import("./deadlineQueueFleetAssociation").DeadlineQueueFleetAssociation;
export const DeadlineQueueFleetAssociation: typeof import("./deadlineQueueFleetAssociation").DeadlineQueueFleetAssociation = null as any;
utilities.lazyLoad(exports, ["DeadlineQueueFleetAssociation"], () => require("./deadlineQueueFleetAssociation"));

export { DeadlineStorageProfileArgs, DeadlineStorageProfileState } from "./deadlineStorageProfile";
export type DeadlineStorageProfile = import("./deadlineStorageProfile").DeadlineStorageProfile;
export const DeadlineStorageProfile: typeof import("./deadlineStorageProfile").DeadlineStorageProfile = null as any;
utilities.lazyLoad(exports, ["DeadlineStorageProfile"], () => require("./deadlineStorageProfile"));

export { DetectiveGraphArgs, DetectiveGraphState } from "./detectiveGraph";
export type DetectiveGraph = import("./detectiveGraph").DetectiveGraph;
export const DetectiveGraph: typeof import("./detectiveGraph").DetectiveGraph = null as any;
utilities.lazyLoad(exports, ["DetectiveGraph"], () => require("./detectiveGraph"));

export { DetectiveMemberInvitationArgs, DetectiveMemberInvitationState } from "./detectiveMemberInvitation";
export type DetectiveMemberInvitation = import("./detectiveMemberInvitation").DetectiveMemberInvitation;
export const DetectiveMemberInvitation: typeof import("./detectiveMemberInvitation").DetectiveMemberInvitation = null as any;
utilities.lazyLoad(exports, ["DetectiveMemberInvitation"], () => require("./detectiveMemberInvitation"));

export { DetectiveOrganizationAdminArgs, DetectiveOrganizationAdminState } from "./detectiveOrganizationAdmin";
export type DetectiveOrganizationAdmin = import("./detectiveOrganizationAdmin").DetectiveOrganizationAdmin;
export const DetectiveOrganizationAdmin: typeof import("./detectiveOrganizationAdmin").DetectiveOrganizationAdmin = null as any;
utilities.lazyLoad(exports, ["DetectiveOrganizationAdmin"], () => require("./detectiveOrganizationAdmin"));

export { DevopsguruLogAnomalyDetectionIntegrationArgs, DevopsguruLogAnomalyDetectionIntegrationState } from "./devopsguruLogAnomalyDetectionIntegration";
export type DevopsguruLogAnomalyDetectionIntegration = import("./devopsguruLogAnomalyDetectionIntegration").DevopsguruLogAnomalyDetectionIntegration;
export const DevopsguruLogAnomalyDetectionIntegration: typeof import("./devopsguruLogAnomalyDetectionIntegration").DevopsguruLogAnomalyDetectionIntegration = null as any;
utilities.lazyLoad(exports, ["DevopsguruLogAnomalyDetectionIntegration"], () => require("./devopsguruLogAnomalyDetectionIntegration"));

export { DevopsguruNotificationChannelArgs, DevopsguruNotificationChannelState } from "./devopsguruNotificationChannel";
export type DevopsguruNotificationChannel = import("./devopsguruNotificationChannel").DevopsguruNotificationChannel;
export const DevopsguruNotificationChannel: typeof import("./devopsguruNotificationChannel").DevopsguruNotificationChannel = null as any;
utilities.lazyLoad(exports, ["DevopsguruNotificationChannel"], () => require("./devopsguruNotificationChannel"));

export { DevopsguruResourceCollectionArgs, DevopsguruResourceCollectionState } from "./devopsguruResourceCollection";
export type DevopsguruResourceCollection = import("./devopsguruResourceCollection").DevopsguruResourceCollection;
export const DevopsguruResourceCollection: typeof import("./devopsguruResourceCollection").DevopsguruResourceCollection = null as any;
utilities.lazyLoad(exports, ["DevopsguruResourceCollection"], () => require("./devopsguruResourceCollection"));

export { DirectoryserviceSimpleAdArgs, DirectoryserviceSimpleAdState } from "./directoryserviceSimpleAd";
export type DirectoryserviceSimpleAd = import("./directoryserviceSimpleAd").DirectoryserviceSimpleAd;
export const DirectoryserviceSimpleAd: typeof import("./directoryserviceSimpleAd").DirectoryserviceSimpleAd = null as any;
utilities.lazyLoad(exports, ["DirectoryserviceSimpleAd"], () => require("./directoryserviceSimpleAd"));

export { DmsDataProviderArgs, DmsDataProviderState } from "./dmsDataProvider";
export type DmsDataProvider = import("./dmsDataProvider").DmsDataProvider;
export const DmsDataProvider: typeof import("./dmsDataProvider").DmsDataProvider = null as any;
utilities.lazyLoad(exports, ["DmsDataProvider"], () => require("./dmsDataProvider"));

export { DmsInstanceProfileArgs, DmsInstanceProfileState } from "./dmsInstanceProfile";
export type DmsInstanceProfile = import("./dmsInstanceProfile").DmsInstanceProfile;
export const DmsInstanceProfile: typeof import("./dmsInstanceProfile").DmsInstanceProfile = null as any;
utilities.lazyLoad(exports, ["DmsInstanceProfile"], () => require("./dmsInstanceProfile"));

export { DmsMigrationProjectArgs, DmsMigrationProjectState } from "./dmsMigrationProject";
export type DmsMigrationProject = import("./dmsMigrationProject").DmsMigrationProject;
export const DmsMigrationProject: typeof import("./dmsMigrationProject").DmsMigrationProject = null as any;
utilities.lazyLoad(exports, ["DmsMigrationProject"], () => require("./dmsMigrationProject"));

export { DmsReplicationConfigArgs, DmsReplicationConfigState } from "./dmsReplicationConfig";
export type DmsReplicationConfig = import("./dmsReplicationConfig").DmsReplicationConfig;
export const DmsReplicationConfig: typeof import("./dmsReplicationConfig").DmsReplicationConfig = null as any;
utilities.lazyLoad(exports, ["DmsReplicationConfig"], () => require("./dmsReplicationConfig"));

export { DocdbelasticClusterArgs, DocdbelasticClusterState } from "./docdbelasticCluster";
export type DocdbelasticCluster = import("./docdbelasticCluster").DocdbelasticCluster;
export const DocdbelasticCluster: typeof import("./docdbelasticCluster").DocdbelasticCluster = null as any;
utilities.lazyLoad(exports, ["DocdbelasticCluster"], () => require("./docdbelasticCluster"));

export { DynamodbGlobalTableArgs, DynamodbGlobalTableState } from "./dynamodbGlobalTable";
export type DynamodbGlobalTable = import("./dynamodbGlobalTable").DynamodbGlobalTable;
export const DynamodbGlobalTable: typeof import("./dynamodbGlobalTable").DynamodbGlobalTable = null as any;
utilities.lazyLoad(exports, ["DynamodbGlobalTable"], () => require("./dynamodbGlobalTable"));

export { DynamodbTableArgs, DynamodbTableState } from "./dynamodbTable";
export type DynamodbTable = import("./dynamodbTable").DynamodbTable;
export const DynamodbTable: typeof import("./dynamodbTable").DynamodbTable = null as any;
utilities.lazyLoad(exports, ["DynamodbTable"], () => require("./dynamodbTable"));

export { Ec2CapacityReservationArgs, Ec2CapacityReservationState } from "./ec2CapacityReservation";
export type Ec2CapacityReservation = import("./ec2CapacityReservation").Ec2CapacityReservation;
export const Ec2CapacityReservation: typeof import("./ec2CapacityReservation").Ec2CapacityReservation = null as any;
utilities.lazyLoad(exports, ["Ec2CapacityReservation"], () => require("./ec2CapacityReservation"));

export { Ec2CapacityReservationFleetArgs, Ec2CapacityReservationFleetState } from "./ec2CapacityReservationFleet";
export type Ec2CapacityReservationFleet = import("./ec2CapacityReservationFleet").Ec2CapacityReservationFleet;
export const Ec2CapacityReservationFleet: typeof import("./ec2CapacityReservationFleet").Ec2CapacityReservationFleet = null as any;
utilities.lazyLoad(exports, ["Ec2CapacityReservationFleet"], () => require("./ec2CapacityReservationFleet"));

export { Ec2CarrierGatewayArgs, Ec2CarrierGatewayState } from "./ec2CarrierGateway";
export type Ec2CarrierGateway = import("./ec2CarrierGateway").Ec2CarrierGateway;
export const Ec2CarrierGateway: typeof import("./ec2CarrierGateway").Ec2CarrierGateway = null as any;
utilities.lazyLoad(exports, ["Ec2CarrierGateway"], () => require("./ec2CarrierGateway"));

export { Ec2CustomerGatewayArgs, Ec2CustomerGatewayState } from "./ec2CustomerGateway";
export type Ec2CustomerGateway = import("./ec2CustomerGateway").Ec2CustomerGateway;
export const Ec2CustomerGateway: typeof import("./ec2CustomerGateway").Ec2CustomerGateway = null as any;
utilities.lazyLoad(exports, ["Ec2CustomerGateway"], () => require("./ec2CustomerGateway"));

export { Ec2DhcpOptionsArgs, Ec2DhcpOptionsState } from "./ec2DhcpOptions";
export type Ec2DhcpOptions = import("./ec2DhcpOptions").Ec2DhcpOptions;
export const Ec2DhcpOptions: typeof import("./ec2DhcpOptions").Ec2DhcpOptions = null as any;
utilities.lazyLoad(exports, ["Ec2DhcpOptions"], () => require("./ec2DhcpOptions"));

export { Ec2Ec2FleetArgs, Ec2Ec2FleetState } from "./ec2Ec2Fleet";
export type Ec2Ec2Fleet = import("./ec2Ec2Fleet").Ec2Ec2Fleet;
export const Ec2Ec2Fleet: typeof import("./ec2Ec2Fleet").Ec2Ec2Fleet = null as any;
utilities.lazyLoad(exports, ["Ec2Ec2Fleet"], () => require("./ec2Ec2Fleet"));

export { Ec2EgressOnlyInternetGatewayArgs, Ec2EgressOnlyInternetGatewayState } from "./ec2EgressOnlyInternetGateway";
export type Ec2EgressOnlyInternetGateway = import("./ec2EgressOnlyInternetGateway").Ec2EgressOnlyInternetGateway;
export const Ec2EgressOnlyInternetGateway: typeof import("./ec2EgressOnlyInternetGateway").Ec2EgressOnlyInternetGateway = null as any;
utilities.lazyLoad(exports, ["Ec2EgressOnlyInternetGateway"], () => require("./ec2EgressOnlyInternetGateway"));

export { Ec2EipArgs, Ec2EipState } from "./ec2Eip";
export type Ec2Eip = import("./ec2Eip").Ec2Eip;
export const Ec2Eip: typeof import("./ec2Eip").Ec2Eip = null as any;
utilities.lazyLoad(exports, ["Ec2Eip"], () => require("./ec2Eip"));

export { Ec2EipAssociationArgs, Ec2EipAssociationState } from "./ec2EipAssociation";
export type Ec2EipAssociation = import("./ec2EipAssociation").Ec2EipAssociation;
export const Ec2EipAssociation: typeof import("./ec2EipAssociation").Ec2EipAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2EipAssociation"], () => require("./ec2EipAssociation"));

export { Ec2EnclaveCertificateIamRoleAssociationArgs, Ec2EnclaveCertificateIamRoleAssociationState } from "./ec2EnclaveCertificateIamRoleAssociation";
export type Ec2EnclaveCertificateIamRoleAssociation = import("./ec2EnclaveCertificateIamRoleAssociation").Ec2EnclaveCertificateIamRoleAssociation;
export const Ec2EnclaveCertificateIamRoleAssociation: typeof import("./ec2EnclaveCertificateIamRoleAssociation").Ec2EnclaveCertificateIamRoleAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2EnclaveCertificateIamRoleAssociation"], () => require("./ec2EnclaveCertificateIamRoleAssociation"));

export { Ec2FlowLogArgs, Ec2FlowLogState } from "./ec2FlowLog";
export type Ec2FlowLog = import("./ec2FlowLog").Ec2FlowLog;
export const Ec2FlowLog: typeof import("./ec2FlowLog").Ec2FlowLog = null as any;
utilities.lazyLoad(exports, ["Ec2FlowLog"], () => require("./ec2FlowLog"));

export { Ec2GatewayRouteTableAssociationArgs, Ec2GatewayRouteTableAssociationState } from "./ec2GatewayRouteTableAssociation";
export type Ec2GatewayRouteTableAssociation = import("./ec2GatewayRouteTableAssociation").Ec2GatewayRouteTableAssociation;
export const Ec2GatewayRouteTableAssociation: typeof import("./ec2GatewayRouteTableAssociation").Ec2GatewayRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2GatewayRouteTableAssociation"], () => require("./ec2GatewayRouteTableAssociation"));

export { Ec2HostArgs, Ec2HostState } from "./ec2Host";
export type Ec2Host = import("./ec2Host").Ec2Host;
export const Ec2Host: typeof import("./ec2Host").Ec2Host = null as any;
utilities.lazyLoad(exports, ["Ec2Host"], () => require("./ec2Host"));

export { Ec2InstanceArgs, Ec2InstanceState } from "./ec2Instance";
export type Ec2Instance = import("./ec2Instance").Ec2Instance;
export const Ec2Instance: typeof import("./ec2Instance").Ec2Instance = null as any;
utilities.lazyLoad(exports, ["Ec2Instance"], () => require("./ec2Instance"));

export { Ec2InstanceConnectEndpointArgs, Ec2InstanceConnectEndpointState } from "./ec2InstanceConnectEndpoint";
export type Ec2InstanceConnectEndpoint = import("./ec2InstanceConnectEndpoint").Ec2InstanceConnectEndpoint;
export const Ec2InstanceConnectEndpoint: typeof import("./ec2InstanceConnectEndpoint").Ec2InstanceConnectEndpoint = null as any;
utilities.lazyLoad(exports, ["Ec2InstanceConnectEndpoint"], () => require("./ec2InstanceConnectEndpoint"));

export { Ec2InternetGatewayArgs, Ec2InternetGatewayState } from "./ec2InternetGateway";
export type Ec2InternetGateway = import("./ec2InternetGateway").Ec2InternetGateway;
export const Ec2InternetGateway: typeof import("./ec2InternetGateway").Ec2InternetGateway = null as any;
utilities.lazyLoad(exports, ["Ec2InternetGateway"], () => require("./ec2InternetGateway"));

export { Ec2IpamArgs, Ec2IpamState } from "./ec2Ipam";
export type Ec2Ipam = import("./ec2Ipam").Ec2Ipam;
export const Ec2Ipam: typeof import("./ec2Ipam").Ec2Ipam = null as any;
utilities.lazyLoad(exports, ["Ec2Ipam"], () => require("./ec2Ipam"));

export { Ec2IpamAllocationArgs, Ec2IpamAllocationState } from "./ec2IpamAllocation";
export type Ec2IpamAllocation = import("./ec2IpamAllocation").Ec2IpamAllocation;
export const Ec2IpamAllocation: typeof import("./ec2IpamAllocation").Ec2IpamAllocation = null as any;
utilities.lazyLoad(exports, ["Ec2IpamAllocation"], () => require("./ec2IpamAllocation"));

export { Ec2IpamPoolArgs, Ec2IpamPoolState } from "./ec2IpamPool";
export type Ec2IpamPool = import("./ec2IpamPool").Ec2IpamPool;
export const Ec2IpamPool: typeof import("./ec2IpamPool").Ec2IpamPool = null as any;
utilities.lazyLoad(exports, ["Ec2IpamPool"], () => require("./ec2IpamPool"));

export { Ec2IpamPoolCidrArgs, Ec2IpamPoolCidrState } from "./ec2IpamPoolCidr";
export type Ec2IpamPoolCidr = import("./ec2IpamPoolCidr").Ec2IpamPoolCidr;
export const Ec2IpamPoolCidr: typeof import("./ec2IpamPoolCidr").Ec2IpamPoolCidr = null as any;
utilities.lazyLoad(exports, ["Ec2IpamPoolCidr"], () => require("./ec2IpamPoolCidr"));

export { Ec2IpamResourceDiscoveryArgs, Ec2IpamResourceDiscoveryState } from "./ec2IpamResourceDiscovery";
export type Ec2IpamResourceDiscovery = import("./ec2IpamResourceDiscovery").Ec2IpamResourceDiscovery;
export const Ec2IpamResourceDiscovery: typeof import("./ec2IpamResourceDiscovery").Ec2IpamResourceDiscovery = null as any;
utilities.lazyLoad(exports, ["Ec2IpamResourceDiscovery"], () => require("./ec2IpamResourceDiscovery"));

export { Ec2IpamResourceDiscoveryAssociationArgs, Ec2IpamResourceDiscoveryAssociationState } from "./ec2IpamResourceDiscoveryAssociation";
export type Ec2IpamResourceDiscoveryAssociation = import("./ec2IpamResourceDiscoveryAssociation").Ec2IpamResourceDiscoveryAssociation;
export const Ec2IpamResourceDiscoveryAssociation: typeof import("./ec2IpamResourceDiscoveryAssociation").Ec2IpamResourceDiscoveryAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2IpamResourceDiscoveryAssociation"], () => require("./ec2IpamResourceDiscoveryAssociation"));

export { Ec2IpamScopeArgs, Ec2IpamScopeState } from "./ec2IpamScope";
export type Ec2IpamScope = import("./ec2IpamScope").Ec2IpamScope;
export const Ec2IpamScope: typeof import("./ec2IpamScope").Ec2IpamScope = null as any;
utilities.lazyLoad(exports, ["Ec2IpamScope"], () => require("./ec2IpamScope"));

export { Ec2KeyPairArgs, Ec2KeyPairState } from "./ec2KeyPair";
export type Ec2KeyPair = import("./ec2KeyPair").Ec2KeyPair;
export const Ec2KeyPair: typeof import("./ec2KeyPair").Ec2KeyPair = null as any;
utilities.lazyLoad(exports, ["Ec2KeyPair"], () => require("./ec2KeyPair"));

export { Ec2LaunchTemplateArgs, Ec2LaunchTemplateState } from "./ec2LaunchTemplate";
export type Ec2LaunchTemplate = import("./ec2LaunchTemplate").Ec2LaunchTemplate;
export const Ec2LaunchTemplate: typeof import("./ec2LaunchTemplate").Ec2LaunchTemplate = null as any;
utilities.lazyLoad(exports, ["Ec2LaunchTemplate"], () => require("./ec2LaunchTemplate"));

export { Ec2LocalGatewayRouteArgs, Ec2LocalGatewayRouteState } from "./ec2LocalGatewayRoute";
export type Ec2LocalGatewayRoute = import("./ec2LocalGatewayRoute").Ec2LocalGatewayRoute;
export const Ec2LocalGatewayRoute: typeof import("./ec2LocalGatewayRoute").Ec2LocalGatewayRoute = null as any;
utilities.lazyLoad(exports, ["Ec2LocalGatewayRoute"], () => require("./ec2LocalGatewayRoute"));

export { Ec2LocalGatewayRouteTableArgs, Ec2LocalGatewayRouteTableState } from "./ec2LocalGatewayRouteTable";
export type Ec2LocalGatewayRouteTable = import("./ec2LocalGatewayRouteTable").Ec2LocalGatewayRouteTable;
export const Ec2LocalGatewayRouteTable: typeof import("./ec2LocalGatewayRouteTable").Ec2LocalGatewayRouteTable = null as any;
utilities.lazyLoad(exports, ["Ec2LocalGatewayRouteTable"], () => require("./ec2LocalGatewayRouteTable"));

export { Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationArgs, Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationState } from "./ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation";
export type Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation = import("./ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation").Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation;
export const Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation: typeof import("./ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation").Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation"], () => require("./ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation"));

export { Ec2LocalGatewayRouteTableVpcAssociationArgs, Ec2LocalGatewayRouteTableVpcAssociationState } from "./ec2LocalGatewayRouteTableVpcAssociation";
export type Ec2LocalGatewayRouteTableVpcAssociation = import("./ec2LocalGatewayRouteTableVpcAssociation").Ec2LocalGatewayRouteTableVpcAssociation;
export const Ec2LocalGatewayRouteTableVpcAssociation: typeof import("./ec2LocalGatewayRouteTableVpcAssociation").Ec2LocalGatewayRouteTableVpcAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2LocalGatewayRouteTableVpcAssociation"], () => require("./ec2LocalGatewayRouteTableVpcAssociation"));

export { Ec2NatGatewayArgs, Ec2NatGatewayState } from "./ec2NatGateway";
export type Ec2NatGateway = import("./ec2NatGateway").Ec2NatGateway;
export const Ec2NatGateway: typeof import("./ec2NatGateway").Ec2NatGateway = null as any;
utilities.lazyLoad(exports, ["Ec2NatGateway"], () => require("./ec2NatGateway"));

export { Ec2NetworkAclArgs, Ec2NetworkAclState } from "./ec2NetworkAcl";
export type Ec2NetworkAcl = import("./ec2NetworkAcl").Ec2NetworkAcl;
export const Ec2NetworkAcl: typeof import("./ec2NetworkAcl").Ec2NetworkAcl = null as any;
utilities.lazyLoad(exports, ["Ec2NetworkAcl"], () => require("./ec2NetworkAcl"));

export { Ec2NetworkInsightsAccessScopeArgs, Ec2NetworkInsightsAccessScopeState } from "./ec2NetworkInsightsAccessScope";
export type Ec2NetworkInsightsAccessScope = import("./ec2NetworkInsightsAccessScope").Ec2NetworkInsightsAccessScope;
export const Ec2NetworkInsightsAccessScope: typeof import("./ec2NetworkInsightsAccessScope").Ec2NetworkInsightsAccessScope = null as any;
utilities.lazyLoad(exports, ["Ec2NetworkInsightsAccessScope"], () => require("./ec2NetworkInsightsAccessScope"));

export { Ec2NetworkInsightsAccessScopeAnalysisArgs, Ec2NetworkInsightsAccessScopeAnalysisState } from "./ec2NetworkInsightsAccessScopeAnalysis";
export type Ec2NetworkInsightsAccessScopeAnalysis = import("./ec2NetworkInsightsAccessScopeAnalysis").Ec2NetworkInsightsAccessScopeAnalysis;
export const Ec2NetworkInsightsAccessScopeAnalysis: typeof import("./ec2NetworkInsightsAccessScopeAnalysis").Ec2NetworkInsightsAccessScopeAnalysis = null as any;
utilities.lazyLoad(exports, ["Ec2NetworkInsightsAccessScopeAnalysis"], () => require("./ec2NetworkInsightsAccessScopeAnalysis"));

export { Ec2NetworkInsightsAnalysisArgs, Ec2NetworkInsightsAnalysisState } from "./ec2NetworkInsightsAnalysis";
export type Ec2NetworkInsightsAnalysis = import("./ec2NetworkInsightsAnalysis").Ec2NetworkInsightsAnalysis;
export const Ec2NetworkInsightsAnalysis: typeof import("./ec2NetworkInsightsAnalysis").Ec2NetworkInsightsAnalysis = null as any;
utilities.lazyLoad(exports, ["Ec2NetworkInsightsAnalysis"], () => require("./ec2NetworkInsightsAnalysis"));

export { Ec2NetworkInsightsPathArgs, Ec2NetworkInsightsPathState } from "./ec2NetworkInsightsPath";
export type Ec2NetworkInsightsPath = import("./ec2NetworkInsightsPath").Ec2NetworkInsightsPath;
export const Ec2NetworkInsightsPath: typeof import("./ec2NetworkInsightsPath").Ec2NetworkInsightsPath = null as any;
utilities.lazyLoad(exports, ["Ec2NetworkInsightsPath"], () => require("./ec2NetworkInsightsPath"));

export { Ec2NetworkInterfaceArgs, Ec2NetworkInterfaceState } from "./ec2NetworkInterface";
export type Ec2NetworkInterface = import("./ec2NetworkInterface").Ec2NetworkInterface;
export const Ec2NetworkInterface: typeof import("./ec2NetworkInterface").Ec2NetworkInterface = null as any;
utilities.lazyLoad(exports, ["Ec2NetworkInterface"], () => require("./ec2NetworkInterface"));

export { Ec2NetworkInterfaceAttachmentArgs, Ec2NetworkInterfaceAttachmentState } from "./ec2NetworkInterfaceAttachment";
export type Ec2NetworkInterfaceAttachment = import("./ec2NetworkInterfaceAttachment").Ec2NetworkInterfaceAttachment;
export const Ec2NetworkInterfaceAttachment: typeof import("./ec2NetworkInterfaceAttachment").Ec2NetworkInterfaceAttachment = null as any;
utilities.lazyLoad(exports, ["Ec2NetworkInterfaceAttachment"], () => require("./ec2NetworkInterfaceAttachment"));

export { Ec2NetworkPerformanceMetricSubscriptionArgs, Ec2NetworkPerformanceMetricSubscriptionState } from "./ec2NetworkPerformanceMetricSubscription";
export type Ec2NetworkPerformanceMetricSubscription = import("./ec2NetworkPerformanceMetricSubscription").Ec2NetworkPerformanceMetricSubscription;
export const Ec2NetworkPerformanceMetricSubscription: typeof import("./ec2NetworkPerformanceMetricSubscription").Ec2NetworkPerformanceMetricSubscription = null as any;
utilities.lazyLoad(exports, ["Ec2NetworkPerformanceMetricSubscription"], () => require("./ec2NetworkPerformanceMetricSubscription"));

export { Ec2PlacementGroupArgs, Ec2PlacementGroupState } from "./ec2PlacementGroup";
export type Ec2PlacementGroup = import("./ec2PlacementGroup").Ec2PlacementGroup;
export const Ec2PlacementGroup: typeof import("./ec2PlacementGroup").Ec2PlacementGroup = null as any;
utilities.lazyLoad(exports, ["Ec2PlacementGroup"], () => require("./ec2PlacementGroup"));

export { Ec2PrefixListArgs, Ec2PrefixListState } from "./ec2PrefixList";
export type Ec2PrefixList = import("./ec2PrefixList").Ec2PrefixList;
export const Ec2PrefixList: typeof import("./ec2PrefixList").Ec2PrefixList = null as any;
utilities.lazyLoad(exports, ["Ec2PrefixList"], () => require("./ec2PrefixList"));

export { Ec2RouteArgs, Ec2RouteState } from "./ec2Route";
export type Ec2Route = import("./ec2Route").Ec2Route;
export const Ec2Route: typeof import("./ec2Route").Ec2Route = null as any;
utilities.lazyLoad(exports, ["Ec2Route"], () => require("./ec2Route"));

export { Ec2RouteTableArgs, Ec2RouteTableState } from "./ec2RouteTable";
export type Ec2RouteTable = import("./ec2RouteTable").Ec2RouteTable;
export const Ec2RouteTable: typeof import("./ec2RouteTable").Ec2RouteTable = null as any;
utilities.lazyLoad(exports, ["Ec2RouteTable"], () => require("./ec2RouteTable"));

export { Ec2SecurityGroupArgs, Ec2SecurityGroupState } from "./ec2SecurityGroup";
export type Ec2SecurityGroup = import("./ec2SecurityGroup").Ec2SecurityGroup;
export const Ec2SecurityGroup: typeof import("./ec2SecurityGroup").Ec2SecurityGroup = null as any;
utilities.lazyLoad(exports, ["Ec2SecurityGroup"], () => require("./ec2SecurityGroup"));

export { Ec2SecurityGroupEgressArgs, Ec2SecurityGroupEgressState } from "./ec2SecurityGroupEgress";
export type Ec2SecurityGroupEgress = import("./ec2SecurityGroupEgress").Ec2SecurityGroupEgress;
export const Ec2SecurityGroupEgress: typeof import("./ec2SecurityGroupEgress").Ec2SecurityGroupEgress = null as any;
utilities.lazyLoad(exports, ["Ec2SecurityGroupEgress"], () => require("./ec2SecurityGroupEgress"));

export { Ec2SecurityGroupIngressArgs, Ec2SecurityGroupIngressState } from "./ec2SecurityGroupIngress";
export type Ec2SecurityGroupIngress = import("./ec2SecurityGroupIngress").Ec2SecurityGroupIngress;
export const Ec2SecurityGroupIngress: typeof import("./ec2SecurityGroupIngress").Ec2SecurityGroupIngress = null as any;
utilities.lazyLoad(exports, ["Ec2SecurityGroupIngress"], () => require("./ec2SecurityGroupIngress"));

export { Ec2SnapshotBlockPublicAccessArgs, Ec2SnapshotBlockPublicAccessState } from "./ec2SnapshotBlockPublicAccess";
export type Ec2SnapshotBlockPublicAccess = import("./ec2SnapshotBlockPublicAccess").Ec2SnapshotBlockPublicAccess;
export const Ec2SnapshotBlockPublicAccess: typeof import("./ec2SnapshotBlockPublicAccess").Ec2SnapshotBlockPublicAccess = null as any;
utilities.lazyLoad(exports, ["Ec2SnapshotBlockPublicAccess"], () => require("./ec2SnapshotBlockPublicAccess"));

export { Ec2SpotFleetArgs, Ec2SpotFleetState } from "./ec2SpotFleet";
export type Ec2SpotFleet = import("./ec2SpotFleet").Ec2SpotFleet;
export const Ec2SpotFleet: typeof import("./ec2SpotFleet").Ec2SpotFleet = null as any;
utilities.lazyLoad(exports, ["Ec2SpotFleet"], () => require("./ec2SpotFleet"));

export { Ec2SubnetArgs, Ec2SubnetState } from "./ec2Subnet";
export type Ec2Subnet = import("./ec2Subnet").Ec2Subnet;
export const Ec2Subnet: typeof import("./ec2Subnet").Ec2Subnet = null as any;
utilities.lazyLoad(exports, ["Ec2Subnet"], () => require("./ec2Subnet"));

export { Ec2SubnetCidrBlockArgs, Ec2SubnetCidrBlockState } from "./ec2SubnetCidrBlock";
export type Ec2SubnetCidrBlock = import("./ec2SubnetCidrBlock").Ec2SubnetCidrBlock;
export const Ec2SubnetCidrBlock: typeof import("./ec2SubnetCidrBlock").Ec2SubnetCidrBlock = null as any;
utilities.lazyLoad(exports, ["Ec2SubnetCidrBlock"], () => require("./ec2SubnetCidrBlock"));

export { Ec2SubnetNetworkAclAssociationArgs, Ec2SubnetNetworkAclAssociationState } from "./ec2SubnetNetworkAclAssociation";
export type Ec2SubnetNetworkAclAssociation = import("./ec2SubnetNetworkAclAssociation").Ec2SubnetNetworkAclAssociation;
export const Ec2SubnetNetworkAclAssociation: typeof import("./ec2SubnetNetworkAclAssociation").Ec2SubnetNetworkAclAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2SubnetNetworkAclAssociation"], () => require("./ec2SubnetNetworkAclAssociation"));

export { Ec2SubnetRouteTableAssociationArgs, Ec2SubnetRouteTableAssociationState } from "./ec2SubnetRouteTableAssociation";
export type Ec2SubnetRouteTableAssociation = import("./ec2SubnetRouteTableAssociation").Ec2SubnetRouteTableAssociation;
export const Ec2SubnetRouteTableAssociation: typeof import("./ec2SubnetRouteTableAssociation").Ec2SubnetRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2SubnetRouteTableAssociation"], () => require("./ec2SubnetRouteTableAssociation"));

export { Ec2TransitGatewayArgs, Ec2TransitGatewayState } from "./ec2TransitGateway";
export type Ec2TransitGateway = import("./ec2TransitGateway").Ec2TransitGateway;
export const Ec2TransitGateway: typeof import("./ec2TransitGateway").Ec2TransitGateway = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGateway"], () => require("./ec2TransitGateway"));

export { Ec2TransitGatewayAttachmentArgs, Ec2TransitGatewayAttachmentState } from "./ec2TransitGatewayAttachment";
export type Ec2TransitGatewayAttachment = import("./ec2TransitGatewayAttachment").Ec2TransitGatewayAttachment;
export const Ec2TransitGatewayAttachment: typeof import("./ec2TransitGatewayAttachment").Ec2TransitGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayAttachment"], () => require("./ec2TransitGatewayAttachment"));

export { Ec2TransitGatewayConnectArgs, Ec2TransitGatewayConnectState } from "./ec2TransitGatewayConnect";
export type Ec2TransitGatewayConnect = import("./ec2TransitGatewayConnect").Ec2TransitGatewayConnect;
export const Ec2TransitGatewayConnect: typeof import("./ec2TransitGatewayConnect").Ec2TransitGatewayConnect = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayConnect"], () => require("./ec2TransitGatewayConnect"));

export { Ec2TransitGatewayMulticastDomainArgs, Ec2TransitGatewayMulticastDomainState } from "./ec2TransitGatewayMulticastDomain";
export type Ec2TransitGatewayMulticastDomain = import("./ec2TransitGatewayMulticastDomain").Ec2TransitGatewayMulticastDomain;
export const Ec2TransitGatewayMulticastDomain: typeof import("./ec2TransitGatewayMulticastDomain").Ec2TransitGatewayMulticastDomain = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayMulticastDomain"], () => require("./ec2TransitGatewayMulticastDomain"));

export { Ec2TransitGatewayMulticastDomainAssociationArgs, Ec2TransitGatewayMulticastDomainAssociationState } from "./ec2TransitGatewayMulticastDomainAssociation";
export type Ec2TransitGatewayMulticastDomainAssociation = import("./ec2TransitGatewayMulticastDomainAssociation").Ec2TransitGatewayMulticastDomainAssociation;
export const Ec2TransitGatewayMulticastDomainAssociation: typeof import("./ec2TransitGatewayMulticastDomainAssociation").Ec2TransitGatewayMulticastDomainAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayMulticastDomainAssociation"], () => require("./ec2TransitGatewayMulticastDomainAssociation"));

export { Ec2TransitGatewayMulticastGroupMemberArgs, Ec2TransitGatewayMulticastGroupMemberState } from "./ec2TransitGatewayMulticastGroupMember";
export type Ec2TransitGatewayMulticastGroupMember = import("./ec2TransitGatewayMulticastGroupMember").Ec2TransitGatewayMulticastGroupMember;
export const Ec2TransitGatewayMulticastGroupMember: typeof import("./ec2TransitGatewayMulticastGroupMember").Ec2TransitGatewayMulticastGroupMember = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayMulticastGroupMember"], () => require("./ec2TransitGatewayMulticastGroupMember"));

export { Ec2TransitGatewayMulticastGroupSourceArgs, Ec2TransitGatewayMulticastGroupSourceState } from "./ec2TransitGatewayMulticastGroupSource";
export type Ec2TransitGatewayMulticastGroupSource = import("./ec2TransitGatewayMulticastGroupSource").Ec2TransitGatewayMulticastGroupSource;
export const Ec2TransitGatewayMulticastGroupSource: typeof import("./ec2TransitGatewayMulticastGroupSource").Ec2TransitGatewayMulticastGroupSource = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayMulticastGroupSource"], () => require("./ec2TransitGatewayMulticastGroupSource"));

export { Ec2TransitGatewayPeeringAttachmentArgs, Ec2TransitGatewayPeeringAttachmentState } from "./ec2TransitGatewayPeeringAttachment";
export type Ec2TransitGatewayPeeringAttachment = import("./ec2TransitGatewayPeeringAttachment").Ec2TransitGatewayPeeringAttachment;
export const Ec2TransitGatewayPeeringAttachment: typeof import("./ec2TransitGatewayPeeringAttachment").Ec2TransitGatewayPeeringAttachment = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayPeeringAttachment"], () => require("./ec2TransitGatewayPeeringAttachment"));

export { Ec2TransitGatewayRouteArgs, Ec2TransitGatewayRouteState } from "./ec2TransitGatewayRoute";
export type Ec2TransitGatewayRoute = import("./ec2TransitGatewayRoute").Ec2TransitGatewayRoute;
export const Ec2TransitGatewayRoute: typeof import("./ec2TransitGatewayRoute").Ec2TransitGatewayRoute = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayRoute"], () => require("./ec2TransitGatewayRoute"));

export { Ec2TransitGatewayRouteTableArgs, Ec2TransitGatewayRouteTableState } from "./ec2TransitGatewayRouteTable";
export type Ec2TransitGatewayRouteTable = import("./ec2TransitGatewayRouteTable").Ec2TransitGatewayRouteTable;
export const Ec2TransitGatewayRouteTable: typeof import("./ec2TransitGatewayRouteTable").Ec2TransitGatewayRouteTable = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayRouteTable"], () => require("./ec2TransitGatewayRouteTable"));

export { Ec2TransitGatewayRouteTableAssociationArgs, Ec2TransitGatewayRouteTableAssociationState } from "./ec2TransitGatewayRouteTableAssociation";
export type Ec2TransitGatewayRouteTableAssociation = import("./ec2TransitGatewayRouteTableAssociation").Ec2TransitGatewayRouteTableAssociation;
export const Ec2TransitGatewayRouteTableAssociation: typeof import("./ec2TransitGatewayRouteTableAssociation").Ec2TransitGatewayRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayRouteTableAssociation"], () => require("./ec2TransitGatewayRouteTableAssociation"));

export { Ec2TransitGatewayRouteTablePropagationArgs, Ec2TransitGatewayRouteTablePropagationState } from "./ec2TransitGatewayRouteTablePropagation";
export type Ec2TransitGatewayRouteTablePropagation = import("./ec2TransitGatewayRouteTablePropagation").Ec2TransitGatewayRouteTablePropagation;
export const Ec2TransitGatewayRouteTablePropagation: typeof import("./ec2TransitGatewayRouteTablePropagation").Ec2TransitGatewayRouteTablePropagation = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayRouteTablePropagation"], () => require("./ec2TransitGatewayRouteTablePropagation"));

export { Ec2TransitGatewayVpcAttachmentArgs, Ec2TransitGatewayVpcAttachmentState } from "./ec2TransitGatewayVpcAttachment";
export type Ec2TransitGatewayVpcAttachment = import("./ec2TransitGatewayVpcAttachment").Ec2TransitGatewayVpcAttachment;
export const Ec2TransitGatewayVpcAttachment: typeof import("./ec2TransitGatewayVpcAttachment").Ec2TransitGatewayVpcAttachment = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayVpcAttachment"], () => require("./ec2TransitGatewayVpcAttachment"));

export { Ec2VerifiedAccessEndpointArgs, Ec2VerifiedAccessEndpointState } from "./ec2VerifiedAccessEndpoint";
export type Ec2VerifiedAccessEndpoint = import("./ec2VerifiedAccessEndpoint").Ec2VerifiedAccessEndpoint;
export const Ec2VerifiedAccessEndpoint: typeof import("./ec2VerifiedAccessEndpoint").Ec2VerifiedAccessEndpoint = null as any;
utilities.lazyLoad(exports, ["Ec2VerifiedAccessEndpoint"], () => require("./ec2VerifiedAccessEndpoint"));

export { Ec2VerifiedAccessGroupArgs, Ec2VerifiedAccessGroupState } from "./ec2VerifiedAccessGroup";
export type Ec2VerifiedAccessGroup = import("./ec2VerifiedAccessGroup").Ec2VerifiedAccessGroup;
export const Ec2VerifiedAccessGroup: typeof import("./ec2VerifiedAccessGroup").Ec2VerifiedAccessGroup = null as any;
utilities.lazyLoad(exports, ["Ec2VerifiedAccessGroup"], () => require("./ec2VerifiedAccessGroup"));

export { Ec2VerifiedAccessInstanceArgs, Ec2VerifiedAccessInstanceState } from "./ec2VerifiedAccessInstance";
export type Ec2VerifiedAccessInstance = import("./ec2VerifiedAccessInstance").Ec2VerifiedAccessInstance;
export const Ec2VerifiedAccessInstance: typeof import("./ec2VerifiedAccessInstance").Ec2VerifiedAccessInstance = null as any;
utilities.lazyLoad(exports, ["Ec2VerifiedAccessInstance"], () => require("./ec2VerifiedAccessInstance"));

export { Ec2VerifiedAccessTrustProviderArgs, Ec2VerifiedAccessTrustProviderState } from "./ec2VerifiedAccessTrustProvider";
export type Ec2VerifiedAccessTrustProvider = import("./ec2VerifiedAccessTrustProvider").Ec2VerifiedAccessTrustProvider;
export const Ec2VerifiedAccessTrustProvider: typeof import("./ec2VerifiedAccessTrustProvider").Ec2VerifiedAccessTrustProvider = null as any;
utilities.lazyLoad(exports, ["Ec2VerifiedAccessTrustProvider"], () => require("./ec2VerifiedAccessTrustProvider"));

export { Ec2VolumeArgs, Ec2VolumeState } from "./ec2Volume";
export type Ec2Volume = import("./ec2Volume").Ec2Volume;
export const Ec2Volume: typeof import("./ec2Volume").Ec2Volume = null as any;
utilities.lazyLoad(exports, ["Ec2Volume"], () => require("./ec2Volume"));

export { Ec2VolumeAttachmentArgs, Ec2VolumeAttachmentState } from "./ec2VolumeAttachment";
export type Ec2VolumeAttachment = import("./ec2VolumeAttachment").Ec2VolumeAttachment;
export const Ec2VolumeAttachment: typeof import("./ec2VolumeAttachment").Ec2VolumeAttachment = null as any;
utilities.lazyLoad(exports, ["Ec2VolumeAttachment"], () => require("./ec2VolumeAttachment"));

export { Ec2VpcArgs, Ec2VpcState } from "./ec2Vpc";
export type Ec2Vpc = import("./ec2Vpc").Ec2Vpc;
export const Ec2Vpc: typeof import("./ec2Vpc").Ec2Vpc = null as any;
utilities.lazyLoad(exports, ["Ec2Vpc"], () => require("./ec2Vpc"));

export { Ec2VpcCidrBlockArgs, Ec2VpcCidrBlockState } from "./ec2VpcCidrBlock";
export type Ec2VpcCidrBlock = import("./ec2VpcCidrBlock").Ec2VpcCidrBlock;
export const Ec2VpcCidrBlock: typeof import("./ec2VpcCidrBlock").Ec2VpcCidrBlock = null as any;
utilities.lazyLoad(exports, ["Ec2VpcCidrBlock"], () => require("./ec2VpcCidrBlock"));

export { Ec2VpcEndpointArgs, Ec2VpcEndpointState } from "./ec2VpcEndpoint";
export type Ec2VpcEndpoint = import("./ec2VpcEndpoint").Ec2VpcEndpoint;
export const Ec2VpcEndpoint: typeof import("./ec2VpcEndpoint").Ec2VpcEndpoint = null as any;
utilities.lazyLoad(exports, ["Ec2VpcEndpoint"], () => require("./ec2VpcEndpoint"));

export { Ec2VpcEndpointConnectionNotificationArgs, Ec2VpcEndpointConnectionNotificationState } from "./ec2VpcEndpointConnectionNotification";
export type Ec2VpcEndpointConnectionNotification = import("./ec2VpcEndpointConnectionNotification").Ec2VpcEndpointConnectionNotification;
export const Ec2VpcEndpointConnectionNotification: typeof import("./ec2VpcEndpointConnectionNotification").Ec2VpcEndpointConnectionNotification = null as any;
utilities.lazyLoad(exports, ["Ec2VpcEndpointConnectionNotification"], () => require("./ec2VpcEndpointConnectionNotification"));

export { Ec2VpcEndpointServiceArgs, Ec2VpcEndpointServiceState } from "./ec2VpcEndpointService";
export type Ec2VpcEndpointService = import("./ec2VpcEndpointService").Ec2VpcEndpointService;
export const Ec2VpcEndpointService: typeof import("./ec2VpcEndpointService").Ec2VpcEndpointService = null as any;
utilities.lazyLoad(exports, ["Ec2VpcEndpointService"], () => require("./ec2VpcEndpointService"));

export { Ec2VpcEndpointServicePermissionsArgs, Ec2VpcEndpointServicePermissionsState } from "./ec2VpcEndpointServicePermissions";
export type Ec2VpcEndpointServicePermissions = import("./ec2VpcEndpointServicePermissions").Ec2VpcEndpointServicePermissions;
export const Ec2VpcEndpointServicePermissions: typeof import("./ec2VpcEndpointServicePermissions").Ec2VpcEndpointServicePermissions = null as any;
utilities.lazyLoad(exports, ["Ec2VpcEndpointServicePermissions"], () => require("./ec2VpcEndpointServicePermissions"));

export { Ec2VpcGatewayAttachmentArgs, Ec2VpcGatewayAttachmentState } from "./ec2VpcGatewayAttachment";
export type Ec2VpcGatewayAttachment = import("./ec2VpcGatewayAttachment").Ec2VpcGatewayAttachment;
export const Ec2VpcGatewayAttachment: typeof import("./ec2VpcGatewayAttachment").Ec2VpcGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["Ec2VpcGatewayAttachment"], () => require("./ec2VpcGatewayAttachment"));

export { Ec2VpcPeeringConnectionArgs, Ec2VpcPeeringConnectionState } from "./ec2VpcPeeringConnection";
export type Ec2VpcPeeringConnection = import("./ec2VpcPeeringConnection").Ec2VpcPeeringConnection;
export const Ec2VpcPeeringConnection: typeof import("./ec2VpcPeeringConnection").Ec2VpcPeeringConnection = null as any;
utilities.lazyLoad(exports, ["Ec2VpcPeeringConnection"], () => require("./ec2VpcPeeringConnection"));

export { Ec2VpcdhcpOptionsAssociationArgs, Ec2VpcdhcpOptionsAssociationState } from "./ec2VpcdhcpOptionsAssociation";
export type Ec2VpcdhcpOptionsAssociation = import("./ec2VpcdhcpOptionsAssociation").Ec2VpcdhcpOptionsAssociation;
export const Ec2VpcdhcpOptionsAssociation: typeof import("./ec2VpcdhcpOptionsAssociation").Ec2VpcdhcpOptionsAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2VpcdhcpOptionsAssociation"], () => require("./ec2VpcdhcpOptionsAssociation"));

export { Ec2VpnConnectionArgs, Ec2VpnConnectionState } from "./ec2VpnConnection";
export type Ec2VpnConnection = import("./ec2VpnConnection").Ec2VpnConnection;
export const Ec2VpnConnection: typeof import("./ec2VpnConnection").Ec2VpnConnection = null as any;
utilities.lazyLoad(exports, ["Ec2VpnConnection"], () => require("./ec2VpnConnection"));

export { Ec2VpnConnectionRouteArgs, Ec2VpnConnectionRouteState } from "./ec2VpnConnectionRoute";
export type Ec2VpnConnectionRoute = import("./ec2VpnConnectionRoute").Ec2VpnConnectionRoute;
export const Ec2VpnConnectionRoute: typeof import("./ec2VpnConnectionRoute").Ec2VpnConnectionRoute = null as any;
utilities.lazyLoad(exports, ["Ec2VpnConnectionRoute"], () => require("./ec2VpnConnectionRoute"));

export { Ec2VpnGatewayArgs, Ec2VpnGatewayState } from "./ec2VpnGateway";
export type Ec2VpnGateway = import("./ec2VpnGateway").Ec2VpnGateway;
export const Ec2VpnGateway: typeof import("./ec2VpnGateway").Ec2VpnGateway = null as any;
utilities.lazyLoad(exports, ["Ec2VpnGateway"], () => require("./ec2VpnGateway"));

export { EcrPublicRepositoryArgs, EcrPublicRepositoryState } from "./ecrPublicRepository";
export type EcrPublicRepository = import("./ecrPublicRepository").EcrPublicRepository;
export const EcrPublicRepository: typeof import("./ecrPublicRepository").EcrPublicRepository = null as any;
utilities.lazyLoad(exports, ["EcrPublicRepository"], () => require("./ecrPublicRepository"));

export { EcrPullThroughCacheRuleArgs, EcrPullThroughCacheRuleState } from "./ecrPullThroughCacheRule";
export type EcrPullThroughCacheRule = import("./ecrPullThroughCacheRule").EcrPullThroughCacheRule;
export const EcrPullThroughCacheRule: typeof import("./ecrPullThroughCacheRule").EcrPullThroughCacheRule = null as any;
utilities.lazyLoad(exports, ["EcrPullThroughCacheRule"], () => require("./ecrPullThroughCacheRule"));

export { EcrRegistryPolicyArgs, EcrRegistryPolicyState } from "./ecrRegistryPolicy";
export type EcrRegistryPolicy = import("./ecrRegistryPolicy").EcrRegistryPolicy;
export const EcrRegistryPolicy: typeof import("./ecrRegistryPolicy").EcrRegistryPolicy = null as any;
utilities.lazyLoad(exports, ["EcrRegistryPolicy"], () => require("./ecrRegistryPolicy"));

export { EcrReplicationConfigurationArgs, EcrReplicationConfigurationState } from "./ecrReplicationConfiguration";
export type EcrReplicationConfiguration = import("./ecrReplicationConfiguration").EcrReplicationConfiguration;
export const EcrReplicationConfiguration: typeof import("./ecrReplicationConfiguration").EcrReplicationConfiguration = null as any;
utilities.lazyLoad(exports, ["EcrReplicationConfiguration"], () => require("./ecrReplicationConfiguration"));

export { EcrRepositoryArgs, EcrRepositoryState } from "./ecrRepository";
export type EcrRepository = import("./ecrRepository").EcrRepository;
export const EcrRepository: typeof import("./ecrRepository").EcrRepository = null as any;
utilities.lazyLoad(exports, ["EcrRepository"], () => require("./ecrRepository"));

export { EcrRepositoryCreationTemplateArgs, EcrRepositoryCreationTemplateState } from "./ecrRepositoryCreationTemplate";
export type EcrRepositoryCreationTemplate = import("./ecrRepositoryCreationTemplate").EcrRepositoryCreationTemplate;
export const EcrRepositoryCreationTemplate: typeof import("./ecrRepositoryCreationTemplate").EcrRepositoryCreationTemplate = null as any;
utilities.lazyLoad(exports, ["EcrRepositoryCreationTemplate"], () => require("./ecrRepositoryCreationTemplate"));

export { EcsCapacityProviderArgs, EcsCapacityProviderState } from "./ecsCapacityProvider";
export type EcsCapacityProvider = import("./ecsCapacityProvider").EcsCapacityProvider;
export const EcsCapacityProvider: typeof import("./ecsCapacityProvider").EcsCapacityProvider = null as any;
utilities.lazyLoad(exports, ["EcsCapacityProvider"], () => require("./ecsCapacityProvider"));

export { EcsClusterArgs, EcsClusterState } from "./ecsCluster";
export type EcsCluster = import("./ecsCluster").EcsCluster;
export const EcsCluster: typeof import("./ecsCluster").EcsCluster = null as any;
utilities.lazyLoad(exports, ["EcsCluster"], () => require("./ecsCluster"));

export { EcsClusterCapacityProviderAssociationsArgs, EcsClusterCapacityProviderAssociationsState } from "./ecsClusterCapacityProviderAssociations";
export type EcsClusterCapacityProviderAssociations = import("./ecsClusterCapacityProviderAssociations").EcsClusterCapacityProviderAssociations;
export const EcsClusterCapacityProviderAssociations: typeof import("./ecsClusterCapacityProviderAssociations").EcsClusterCapacityProviderAssociations = null as any;
utilities.lazyLoad(exports, ["EcsClusterCapacityProviderAssociations"], () => require("./ecsClusterCapacityProviderAssociations"));

export { EcsPrimaryTaskSetArgs, EcsPrimaryTaskSetState } from "./ecsPrimaryTaskSet";
export type EcsPrimaryTaskSet = import("./ecsPrimaryTaskSet").EcsPrimaryTaskSet;
export const EcsPrimaryTaskSet: typeof import("./ecsPrimaryTaskSet").EcsPrimaryTaskSet = null as any;
utilities.lazyLoad(exports, ["EcsPrimaryTaskSet"], () => require("./ecsPrimaryTaskSet"));

export { EcsServiceArgs, EcsServiceState } from "./ecsService";
export type EcsService = import("./ecsService").EcsService;
export const EcsService: typeof import("./ecsService").EcsService = null as any;
utilities.lazyLoad(exports, ["EcsService"], () => require("./ecsService"));

export { EcsTaskDefinitionArgs, EcsTaskDefinitionState } from "./ecsTaskDefinition";
export type EcsTaskDefinition = import("./ecsTaskDefinition").EcsTaskDefinition;
export const EcsTaskDefinition: typeof import("./ecsTaskDefinition").EcsTaskDefinition = null as any;
utilities.lazyLoad(exports, ["EcsTaskDefinition"], () => require("./ecsTaskDefinition"));

export { EcsTaskSetArgs, EcsTaskSetState } from "./ecsTaskSet";
export type EcsTaskSet = import("./ecsTaskSet").EcsTaskSet;
export const EcsTaskSet: typeof import("./ecsTaskSet").EcsTaskSet = null as any;
utilities.lazyLoad(exports, ["EcsTaskSet"], () => require("./ecsTaskSet"));

export { EfsAccessPointArgs, EfsAccessPointState } from "./efsAccessPoint";
export type EfsAccessPoint = import("./efsAccessPoint").EfsAccessPoint;
export const EfsAccessPoint: typeof import("./efsAccessPoint").EfsAccessPoint = null as any;
utilities.lazyLoad(exports, ["EfsAccessPoint"], () => require("./efsAccessPoint"));

export { EfsFileSystemArgs, EfsFileSystemState } from "./efsFileSystem";
export type EfsFileSystem = import("./efsFileSystem").EfsFileSystem;
export const EfsFileSystem: typeof import("./efsFileSystem").EfsFileSystem = null as any;
utilities.lazyLoad(exports, ["EfsFileSystem"], () => require("./efsFileSystem"));

export { EfsMountTargetArgs, EfsMountTargetState } from "./efsMountTarget";
export type EfsMountTarget = import("./efsMountTarget").EfsMountTarget;
export const EfsMountTarget: typeof import("./efsMountTarget").EfsMountTarget = null as any;
utilities.lazyLoad(exports, ["EfsMountTarget"], () => require("./efsMountTarget"));

export { EksAccessEntryArgs, EksAccessEntryState } from "./eksAccessEntry";
export type EksAccessEntry = import("./eksAccessEntry").EksAccessEntry;
export const EksAccessEntry: typeof import("./eksAccessEntry").EksAccessEntry = null as any;
utilities.lazyLoad(exports, ["EksAccessEntry"], () => require("./eksAccessEntry"));

export { EksAddonArgs, EksAddonState } from "./eksAddon";
export type EksAddon = import("./eksAddon").EksAddon;
export const EksAddon: typeof import("./eksAddon").EksAddon = null as any;
utilities.lazyLoad(exports, ["EksAddon"], () => require("./eksAddon"));

export { EksClusterArgs, EksClusterState } from "./eksCluster";
export type EksCluster = import("./eksCluster").EksCluster;
export const EksCluster: typeof import("./eksCluster").EksCluster = null as any;
utilities.lazyLoad(exports, ["EksCluster"], () => require("./eksCluster"));

export { EksFargateProfileArgs, EksFargateProfileState } from "./eksFargateProfile";
export type EksFargateProfile = import("./eksFargateProfile").EksFargateProfile;
export const EksFargateProfile: typeof import("./eksFargateProfile").EksFargateProfile = null as any;
utilities.lazyLoad(exports, ["EksFargateProfile"], () => require("./eksFargateProfile"));

export { EksIdentityProviderConfigArgs, EksIdentityProviderConfigState } from "./eksIdentityProviderConfig";
export type EksIdentityProviderConfig = import("./eksIdentityProviderConfig").EksIdentityProviderConfig;
export const EksIdentityProviderConfig: typeof import("./eksIdentityProviderConfig").EksIdentityProviderConfig = null as any;
utilities.lazyLoad(exports, ["EksIdentityProviderConfig"], () => require("./eksIdentityProviderConfig"));

export { EksPodIdentityAssociationArgs, EksPodIdentityAssociationState } from "./eksPodIdentityAssociation";
export type EksPodIdentityAssociation = import("./eksPodIdentityAssociation").EksPodIdentityAssociation;
export const EksPodIdentityAssociation: typeof import("./eksPodIdentityAssociation").EksPodIdentityAssociation = null as any;
utilities.lazyLoad(exports, ["EksPodIdentityAssociation"], () => require("./eksPodIdentityAssociation"));

export { ElasticacheGlobalReplicationGroupArgs, ElasticacheGlobalReplicationGroupState } from "./elasticacheGlobalReplicationGroup";
export type ElasticacheGlobalReplicationGroup = import("./elasticacheGlobalReplicationGroup").ElasticacheGlobalReplicationGroup;
export const ElasticacheGlobalReplicationGroup: typeof import("./elasticacheGlobalReplicationGroup").ElasticacheGlobalReplicationGroup = null as any;
utilities.lazyLoad(exports, ["ElasticacheGlobalReplicationGroup"], () => require("./elasticacheGlobalReplicationGroup"));

export { ElasticacheParameterGroupArgs, ElasticacheParameterGroupState } from "./elasticacheParameterGroup";
export type ElasticacheParameterGroup = import("./elasticacheParameterGroup").ElasticacheParameterGroup;
export const ElasticacheParameterGroup: typeof import("./elasticacheParameterGroup").ElasticacheParameterGroup = null as any;
utilities.lazyLoad(exports, ["ElasticacheParameterGroup"], () => require("./elasticacheParameterGroup"));

export { ElasticacheServerlessCacheArgs, ElasticacheServerlessCacheState } from "./elasticacheServerlessCache";
export type ElasticacheServerlessCache = import("./elasticacheServerlessCache").ElasticacheServerlessCache;
export const ElasticacheServerlessCache: typeof import("./elasticacheServerlessCache").ElasticacheServerlessCache = null as any;
utilities.lazyLoad(exports, ["ElasticacheServerlessCache"], () => require("./elasticacheServerlessCache"));

export { ElasticacheSubnetGroupArgs, ElasticacheSubnetGroupState } from "./elasticacheSubnetGroup";
export type ElasticacheSubnetGroup = import("./elasticacheSubnetGroup").ElasticacheSubnetGroup;
export const ElasticacheSubnetGroup: typeof import("./elasticacheSubnetGroup").ElasticacheSubnetGroup = null as any;
utilities.lazyLoad(exports, ["ElasticacheSubnetGroup"], () => require("./elasticacheSubnetGroup"));

export { ElasticacheUserArgs, ElasticacheUserState } from "./elasticacheUser";
export type ElasticacheUser = import("./elasticacheUser").ElasticacheUser;
export const ElasticacheUser: typeof import("./elasticacheUser").ElasticacheUser = null as any;
utilities.lazyLoad(exports, ["ElasticacheUser"], () => require("./elasticacheUser"));

export { ElasticacheUserGroupArgs, ElasticacheUserGroupState } from "./elasticacheUserGroup";
export type ElasticacheUserGroup = import("./elasticacheUserGroup").ElasticacheUserGroup;
export const ElasticacheUserGroup: typeof import("./elasticacheUserGroup").ElasticacheUserGroup = null as any;
utilities.lazyLoad(exports, ["ElasticacheUserGroup"], () => require("./elasticacheUserGroup"));

export { ElasticbeanstalkApplicationArgs, ElasticbeanstalkApplicationState } from "./elasticbeanstalkApplication";
export type ElasticbeanstalkApplication = import("./elasticbeanstalkApplication").ElasticbeanstalkApplication;
export const ElasticbeanstalkApplication: typeof import("./elasticbeanstalkApplication").ElasticbeanstalkApplication = null as any;
utilities.lazyLoad(exports, ["ElasticbeanstalkApplication"], () => require("./elasticbeanstalkApplication"));

export { ElasticbeanstalkApplicationVersionArgs, ElasticbeanstalkApplicationVersionState } from "./elasticbeanstalkApplicationVersion";
export type ElasticbeanstalkApplicationVersion = import("./elasticbeanstalkApplicationVersion").ElasticbeanstalkApplicationVersion;
export const ElasticbeanstalkApplicationVersion: typeof import("./elasticbeanstalkApplicationVersion").ElasticbeanstalkApplicationVersion = null as any;
utilities.lazyLoad(exports, ["ElasticbeanstalkApplicationVersion"], () => require("./elasticbeanstalkApplicationVersion"));

export { ElasticbeanstalkConfigurationTemplateArgs, ElasticbeanstalkConfigurationTemplateState } from "./elasticbeanstalkConfigurationTemplate";
export type ElasticbeanstalkConfigurationTemplate = import("./elasticbeanstalkConfigurationTemplate").ElasticbeanstalkConfigurationTemplate;
export const ElasticbeanstalkConfigurationTemplate: typeof import("./elasticbeanstalkConfigurationTemplate").ElasticbeanstalkConfigurationTemplate = null as any;
utilities.lazyLoad(exports, ["ElasticbeanstalkConfigurationTemplate"], () => require("./elasticbeanstalkConfigurationTemplate"));

export { ElasticbeanstalkEnvironmentArgs, ElasticbeanstalkEnvironmentState } from "./elasticbeanstalkEnvironment";
export type ElasticbeanstalkEnvironment = import("./elasticbeanstalkEnvironment").ElasticbeanstalkEnvironment;
export const ElasticbeanstalkEnvironment: typeof import("./elasticbeanstalkEnvironment").ElasticbeanstalkEnvironment = null as any;
utilities.lazyLoad(exports, ["ElasticbeanstalkEnvironment"], () => require("./elasticbeanstalkEnvironment"));

export { Elasticloadbalancingv2LoadBalancerArgs, Elasticloadbalancingv2LoadBalancerState } from "./elasticloadbalancingv2LoadBalancer";
export type Elasticloadbalancingv2LoadBalancer = import("./elasticloadbalancingv2LoadBalancer").Elasticloadbalancingv2LoadBalancer;
export const Elasticloadbalancingv2LoadBalancer: typeof import("./elasticloadbalancingv2LoadBalancer").Elasticloadbalancingv2LoadBalancer = null as any;
utilities.lazyLoad(exports, ["Elasticloadbalancingv2LoadBalancer"], () => require("./elasticloadbalancingv2LoadBalancer"));

export { Elasticloadbalancingv2TargetGroupArgs, Elasticloadbalancingv2TargetGroupState } from "./elasticloadbalancingv2TargetGroup";
export type Elasticloadbalancingv2TargetGroup = import("./elasticloadbalancingv2TargetGroup").Elasticloadbalancingv2TargetGroup;
export const Elasticloadbalancingv2TargetGroup: typeof import("./elasticloadbalancingv2TargetGroup").Elasticloadbalancingv2TargetGroup = null as any;
utilities.lazyLoad(exports, ["Elasticloadbalancingv2TargetGroup"], () => require("./elasticloadbalancingv2TargetGroup"));

export { Elasticloadbalancingv2TrustStoreArgs, Elasticloadbalancingv2TrustStoreState } from "./elasticloadbalancingv2TrustStore";
export type Elasticloadbalancingv2TrustStore = import("./elasticloadbalancingv2TrustStore").Elasticloadbalancingv2TrustStore;
export const Elasticloadbalancingv2TrustStore: typeof import("./elasticloadbalancingv2TrustStore").Elasticloadbalancingv2TrustStore = null as any;
utilities.lazyLoad(exports, ["Elasticloadbalancingv2TrustStore"], () => require("./elasticloadbalancingv2TrustStore"));

export { Elasticloadbalancingv2TrustStoreRevocationArgs, Elasticloadbalancingv2TrustStoreRevocationState } from "./elasticloadbalancingv2TrustStoreRevocation";
export type Elasticloadbalancingv2TrustStoreRevocation = import("./elasticloadbalancingv2TrustStoreRevocation").Elasticloadbalancingv2TrustStoreRevocation;
export const Elasticloadbalancingv2TrustStoreRevocation: typeof import("./elasticloadbalancingv2TrustStoreRevocation").Elasticloadbalancingv2TrustStoreRevocation = null as any;
utilities.lazyLoad(exports, ["Elasticloadbalancingv2TrustStoreRevocation"], () => require("./elasticloadbalancingv2TrustStoreRevocation"));

export { EmrSecurityConfigurationArgs, EmrSecurityConfigurationState } from "./emrSecurityConfiguration";
export type EmrSecurityConfiguration = import("./emrSecurityConfiguration").EmrSecurityConfiguration;
export const EmrSecurityConfiguration: typeof import("./emrSecurityConfiguration").EmrSecurityConfiguration = null as any;
utilities.lazyLoad(exports, ["EmrSecurityConfiguration"], () => require("./emrSecurityConfiguration"));

export { EmrStudioArgs, EmrStudioState } from "./emrStudio";
export type EmrStudio = import("./emrStudio").EmrStudio;
export const EmrStudio: typeof import("./emrStudio").EmrStudio = null as any;
utilities.lazyLoad(exports, ["EmrStudio"], () => require("./emrStudio"));

export { EmrStudioSessionMappingArgs, EmrStudioSessionMappingState } from "./emrStudioSessionMapping";
export type EmrStudioSessionMapping = import("./emrStudioSessionMapping").EmrStudioSessionMapping;
export const EmrStudioSessionMapping: typeof import("./emrStudioSessionMapping").EmrStudioSessionMapping = null as any;
utilities.lazyLoad(exports, ["EmrStudioSessionMapping"], () => require("./emrStudioSessionMapping"));

export { EmrWalWorkspaceArgs, EmrWalWorkspaceState } from "./emrWalWorkspace";
export type EmrWalWorkspace = import("./emrWalWorkspace").EmrWalWorkspace;
export const EmrWalWorkspace: typeof import("./emrWalWorkspace").EmrWalWorkspace = null as any;
utilities.lazyLoad(exports, ["EmrWalWorkspace"], () => require("./emrWalWorkspace"));

export { EmrserverlessApplicationArgs, EmrserverlessApplicationState } from "./emrserverlessApplication";
export type EmrserverlessApplication = import("./emrserverlessApplication").EmrserverlessApplication;
export const EmrserverlessApplication: typeof import("./emrserverlessApplication").EmrserverlessApplication = null as any;
utilities.lazyLoad(exports, ["EmrserverlessApplication"], () => require("./emrserverlessApplication"));

export { EntityresolutionIdMappingWorkflowArgs, EntityresolutionIdMappingWorkflowState } from "./entityresolutionIdMappingWorkflow";
export type EntityresolutionIdMappingWorkflow = import("./entityresolutionIdMappingWorkflow").EntityresolutionIdMappingWorkflow;
export const EntityresolutionIdMappingWorkflow: typeof import("./entityresolutionIdMappingWorkflow").EntityresolutionIdMappingWorkflow = null as any;
utilities.lazyLoad(exports, ["EntityresolutionIdMappingWorkflow"], () => require("./entityresolutionIdMappingWorkflow"));

export { EntityresolutionIdNamespaceArgs, EntityresolutionIdNamespaceState } from "./entityresolutionIdNamespace";
export type EntityresolutionIdNamespace = import("./entityresolutionIdNamespace").EntityresolutionIdNamespace;
export const EntityresolutionIdNamespace: typeof import("./entityresolutionIdNamespace").EntityresolutionIdNamespace = null as any;
utilities.lazyLoad(exports, ["EntityresolutionIdNamespace"], () => require("./entityresolutionIdNamespace"));

export { EntityresolutionMatchingWorkflowArgs, EntityresolutionMatchingWorkflowState } from "./entityresolutionMatchingWorkflow";
export type EntityresolutionMatchingWorkflow = import("./entityresolutionMatchingWorkflow").EntityresolutionMatchingWorkflow;
export const EntityresolutionMatchingWorkflow: typeof import("./entityresolutionMatchingWorkflow").EntityresolutionMatchingWorkflow = null as any;
utilities.lazyLoad(exports, ["EntityresolutionMatchingWorkflow"], () => require("./entityresolutionMatchingWorkflow"));

export { EntityresolutionPolicyStatementArgs, EntityresolutionPolicyStatementState } from "./entityresolutionPolicyStatement";
export type EntityresolutionPolicyStatement = import("./entityresolutionPolicyStatement").EntityresolutionPolicyStatement;
export const EntityresolutionPolicyStatement: typeof import("./entityresolutionPolicyStatement").EntityresolutionPolicyStatement = null as any;
utilities.lazyLoad(exports, ["EntityresolutionPolicyStatement"], () => require("./entityresolutionPolicyStatement"));

export { EntityresolutionSchemaMappingArgs, EntityresolutionSchemaMappingState } from "./entityresolutionSchemaMapping";
export type EntityresolutionSchemaMapping = import("./entityresolutionSchemaMapping").EntityresolutionSchemaMapping;
export const EntityresolutionSchemaMapping: typeof import("./entityresolutionSchemaMapping").EntityresolutionSchemaMapping = null as any;
utilities.lazyLoad(exports, ["EntityresolutionSchemaMapping"], () => require("./entityresolutionSchemaMapping"));

export { EventsApiDestinationArgs, EventsApiDestinationState } from "./eventsApiDestination";
export type EventsApiDestination = import("./eventsApiDestination").EventsApiDestination;
export const EventsApiDestination: typeof import("./eventsApiDestination").EventsApiDestination = null as any;
utilities.lazyLoad(exports, ["EventsApiDestination"], () => require("./eventsApiDestination"));

export { EventsArchiveArgs, EventsArchiveState } from "./eventsArchive";
export type EventsArchive = import("./eventsArchive").EventsArchive;
export const EventsArchive: typeof import("./eventsArchive").EventsArchive = null as any;
utilities.lazyLoad(exports, ["EventsArchive"], () => require("./eventsArchive"));

export { EventsEndpointArgs, EventsEndpointState } from "./eventsEndpoint";
export type EventsEndpoint = import("./eventsEndpoint").EventsEndpoint;
export const EventsEndpoint: typeof import("./eventsEndpoint").EventsEndpoint = null as any;
utilities.lazyLoad(exports, ["EventsEndpoint"], () => require("./eventsEndpoint"));

export { EventsEventBusArgs, EventsEventBusState } from "./eventsEventBus";
export type EventsEventBus = import("./eventsEventBus").EventsEventBus;
export const EventsEventBus: typeof import("./eventsEventBus").EventsEventBus = null as any;
utilities.lazyLoad(exports, ["EventsEventBus"], () => require("./eventsEventBus"));

export { EventsRuleArgs, EventsRuleState } from "./eventsRule";
export type EventsRule = import("./eventsRule").EventsRule;
export const EventsRule: typeof import("./eventsRule").EventsRule = null as any;
utilities.lazyLoad(exports, ["EventsRule"], () => require("./eventsRule"));

export { EventschemasDiscovererArgs, EventschemasDiscovererState } from "./eventschemasDiscoverer";
export type EventschemasDiscoverer = import("./eventschemasDiscoverer").EventschemasDiscoverer;
export const EventschemasDiscoverer: typeof import("./eventschemasDiscoverer").EventschemasDiscoverer = null as any;
utilities.lazyLoad(exports, ["EventschemasDiscoverer"], () => require("./eventschemasDiscoverer"));

export { EventschemasRegistryArgs, EventschemasRegistryState } from "./eventschemasRegistry";
export type EventschemasRegistry = import("./eventschemasRegistry").EventschemasRegistry;
export const EventschemasRegistry: typeof import("./eventschemasRegistry").EventschemasRegistry = null as any;
utilities.lazyLoad(exports, ["EventschemasRegistry"], () => require("./eventschemasRegistry"));

export { EventschemasRegistryPolicyArgs, EventschemasRegistryPolicyState } from "./eventschemasRegistryPolicy";
export type EventschemasRegistryPolicy = import("./eventschemasRegistryPolicy").EventschemasRegistryPolicy;
export const EventschemasRegistryPolicy: typeof import("./eventschemasRegistryPolicy").EventschemasRegistryPolicy = null as any;
utilities.lazyLoad(exports, ["EventschemasRegistryPolicy"], () => require("./eventschemasRegistryPolicy"));

export { EventschemasSchemaArgs, EventschemasSchemaState } from "./eventschemasSchema";
export type EventschemasSchema = import("./eventschemasSchema").EventschemasSchema;
export const EventschemasSchema: typeof import("./eventschemasSchema").EventschemasSchema = null as any;
utilities.lazyLoad(exports, ["EventschemasSchema"], () => require("./eventschemasSchema"));

export { EvidentlyExperimentArgs, EvidentlyExperimentState } from "./evidentlyExperiment";
export type EvidentlyExperiment = import("./evidentlyExperiment").EvidentlyExperiment;
export const EvidentlyExperiment: typeof import("./evidentlyExperiment").EvidentlyExperiment = null as any;
utilities.lazyLoad(exports, ["EvidentlyExperiment"], () => require("./evidentlyExperiment"));

export { EvidentlyFeatureArgs, EvidentlyFeatureState } from "./evidentlyFeature";
export type EvidentlyFeature = import("./evidentlyFeature").EvidentlyFeature;
export const EvidentlyFeature: typeof import("./evidentlyFeature").EvidentlyFeature = null as any;
utilities.lazyLoad(exports, ["EvidentlyFeature"], () => require("./evidentlyFeature"));

export { EvidentlyLaunchArgs, EvidentlyLaunchState } from "./evidentlyLaunch";
export type EvidentlyLaunch = import("./evidentlyLaunch").EvidentlyLaunch;
export const EvidentlyLaunch: typeof import("./evidentlyLaunch").EvidentlyLaunch = null as any;
utilities.lazyLoad(exports, ["EvidentlyLaunch"], () => require("./evidentlyLaunch"));

export { EvidentlyProjectArgs, EvidentlyProjectState } from "./evidentlyProject";
export type EvidentlyProject = import("./evidentlyProject").EvidentlyProject;
export const EvidentlyProject: typeof import("./evidentlyProject").EvidentlyProject = null as any;
utilities.lazyLoad(exports, ["EvidentlyProject"], () => require("./evidentlyProject"));

export { EvidentlySegmentArgs, EvidentlySegmentState } from "./evidentlySegment";
export type EvidentlySegment = import("./evidentlySegment").EvidentlySegment;
export const EvidentlySegment: typeof import("./evidentlySegment").EvidentlySegment = null as any;
utilities.lazyLoad(exports, ["EvidentlySegment"], () => require("./evidentlySegment"));

export { FinspaceEnvironmentArgs, FinspaceEnvironmentState } from "./finspaceEnvironment";
export type FinspaceEnvironment = import("./finspaceEnvironment").FinspaceEnvironment;
export const FinspaceEnvironment: typeof import("./finspaceEnvironment").FinspaceEnvironment = null as any;
utilities.lazyLoad(exports, ["FinspaceEnvironment"], () => require("./finspaceEnvironment"));

export { FisExperimentTemplateArgs, FisExperimentTemplateState } from "./fisExperimentTemplate";
export type FisExperimentTemplate = import("./fisExperimentTemplate").FisExperimentTemplate;
export const FisExperimentTemplate: typeof import("./fisExperimentTemplate").FisExperimentTemplate = null as any;
utilities.lazyLoad(exports, ["FisExperimentTemplate"], () => require("./fisExperimentTemplate"));

export { FisTargetAccountConfigurationArgs, FisTargetAccountConfigurationState } from "./fisTargetAccountConfiguration";
export type FisTargetAccountConfiguration = import("./fisTargetAccountConfiguration").FisTargetAccountConfiguration;
export const FisTargetAccountConfiguration: typeof import("./fisTargetAccountConfiguration").FisTargetAccountConfiguration = null as any;
utilities.lazyLoad(exports, ["FisTargetAccountConfiguration"], () => require("./fisTargetAccountConfiguration"));

export { FmsNotificationChannelArgs, FmsNotificationChannelState } from "./fmsNotificationChannel";
export type FmsNotificationChannel = import("./fmsNotificationChannel").FmsNotificationChannel;
export const FmsNotificationChannel: typeof import("./fmsNotificationChannel").FmsNotificationChannel = null as any;
utilities.lazyLoad(exports, ["FmsNotificationChannel"], () => require("./fmsNotificationChannel"));

export { FmsPolicyArgs, FmsPolicyState } from "./fmsPolicy";
export type FmsPolicy = import("./fmsPolicy").FmsPolicy;
export const FmsPolicy: typeof import("./fmsPolicy").FmsPolicy = null as any;
utilities.lazyLoad(exports, ["FmsPolicy"], () => require("./fmsPolicy"));

export { FmsResourceSetArgs, FmsResourceSetState } from "./fmsResourceSet";
export type FmsResourceSet = import("./fmsResourceSet").FmsResourceSet;
export const FmsResourceSet: typeof import("./fmsResourceSet").FmsResourceSet = null as any;
utilities.lazyLoad(exports, ["FmsResourceSet"], () => require("./fmsResourceSet"));

export { ForecastDatasetArgs, ForecastDatasetState } from "./forecastDataset";
export type ForecastDataset = import("./forecastDataset").ForecastDataset;
export const ForecastDataset: typeof import("./forecastDataset").ForecastDataset = null as any;
utilities.lazyLoad(exports, ["ForecastDataset"], () => require("./forecastDataset"));

export { ForecastDatasetGroupArgs, ForecastDatasetGroupState } from "./forecastDatasetGroup";
export type ForecastDatasetGroup = import("./forecastDatasetGroup").ForecastDatasetGroup;
export const ForecastDatasetGroup: typeof import("./forecastDatasetGroup").ForecastDatasetGroup = null as any;
utilities.lazyLoad(exports, ["ForecastDatasetGroup"], () => require("./forecastDatasetGroup"));

export { FrauddetectorDetectorArgs, FrauddetectorDetectorState } from "./frauddetectorDetector";
export type FrauddetectorDetector = import("./frauddetectorDetector").FrauddetectorDetector;
export const FrauddetectorDetector: typeof import("./frauddetectorDetector").FrauddetectorDetector = null as any;
utilities.lazyLoad(exports, ["FrauddetectorDetector"], () => require("./frauddetectorDetector"));

export { FrauddetectorEntityTypeArgs, FrauddetectorEntityTypeState } from "./frauddetectorEntityType";
export type FrauddetectorEntityType = import("./frauddetectorEntityType").FrauddetectorEntityType;
export const FrauddetectorEntityType: typeof import("./frauddetectorEntityType").FrauddetectorEntityType = null as any;
utilities.lazyLoad(exports, ["FrauddetectorEntityType"], () => require("./frauddetectorEntityType"));

export { FrauddetectorEventTypeArgs, FrauddetectorEventTypeState } from "./frauddetectorEventType";
export type FrauddetectorEventType = import("./frauddetectorEventType").FrauddetectorEventType;
export const FrauddetectorEventType: typeof import("./frauddetectorEventType").FrauddetectorEventType = null as any;
utilities.lazyLoad(exports, ["FrauddetectorEventType"], () => require("./frauddetectorEventType"));

export { FrauddetectorLabelArgs, FrauddetectorLabelState } from "./frauddetectorLabel";
export type FrauddetectorLabel = import("./frauddetectorLabel").FrauddetectorLabel;
export const FrauddetectorLabel: typeof import("./frauddetectorLabel").FrauddetectorLabel = null as any;
utilities.lazyLoad(exports, ["FrauddetectorLabel"], () => require("./frauddetectorLabel"));

export { FrauddetectorListArgs, FrauddetectorListState } from "./frauddetectorList";
export type FrauddetectorList = import("./frauddetectorList").FrauddetectorList;
export const FrauddetectorList: typeof import("./frauddetectorList").FrauddetectorList = null as any;
utilities.lazyLoad(exports, ["FrauddetectorList"], () => require("./frauddetectorList"));

export { FrauddetectorOutcomeArgs, FrauddetectorOutcomeState } from "./frauddetectorOutcome";
export type FrauddetectorOutcome = import("./frauddetectorOutcome").FrauddetectorOutcome;
export const FrauddetectorOutcome: typeof import("./frauddetectorOutcome").FrauddetectorOutcome = null as any;
utilities.lazyLoad(exports, ["FrauddetectorOutcome"], () => require("./frauddetectorOutcome"));

export { FrauddetectorVariableArgs, FrauddetectorVariableState } from "./frauddetectorVariable";
export type FrauddetectorVariable = import("./frauddetectorVariable").FrauddetectorVariable;
export const FrauddetectorVariable: typeof import("./frauddetectorVariable").FrauddetectorVariable = null as any;
utilities.lazyLoad(exports, ["FrauddetectorVariable"], () => require("./frauddetectorVariable"));

export { FsxDataRepositoryAssociationArgs, FsxDataRepositoryAssociationState } from "./fsxDataRepositoryAssociation";
export type FsxDataRepositoryAssociation = import("./fsxDataRepositoryAssociation").FsxDataRepositoryAssociation;
export const FsxDataRepositoryAssociation: typeof import("./fsxDataRepositoryAssociation").FsxDataRepositoryAssociation = null as any;
utilities.lazyLoad(exports, ["FsxDataRepositoryAssociation"], () => require("./fsxDataRepositoryAssociation"));

export { GameliftAliasArgs, GameliftAliasState } from "./gameliftAlias";
export type GameliftAlias = import("./gameliftAlias").GameliftAlias;
export const GameliftAlias: typeof import("./gameliftAlias").GameliftAlias = null as any;
utilities.lazyLoad(exports, ["GameliftAlias"], () => require("./gameliftAlias"));

export { GameliftBuildArgs, GameliftBuildState } from "./gameliftBuild";
export type GameliftBuild = import("./gameliftBuild").GameliftBuild;
export const GameliftBuild: typeof import("./gameliftBuild").GameliftBuild = null as any;
utilities.lazyLoad(exports, ["GameliftBuild"], () => require("./gameliftBuild"));

export { GameliftContainerGroupDefinitionArgs, GameliftContainerGroupDefinitionState } from "./gameliftContainerGroupDefinition";
export type GameliftContainerGroupDefinition = import("./gameliftContainerGroupDefinition").GameliftContainerGroupDefinition;
export const GameliftContainerGroupDefinition: typeof import("./gameliftContainerGroupDefinition").GameliftContainerGroupDefinition = null as any;
utilities.lazyLoad(exports, ["GameliftContainerGroupDefinition"], () => require("./gameliftContainerGroupDefinition"));

export { GameliftFleetArgs, GameliftFleetState } from "./gameliftFleet";
export type GameliftFleet = import("./gameliftFleet").GameliftFleet;
export const GameliftFleet: typeof import("./gameliftFleet").GameliftFleet = null as any;
utilities.lazyLoad(exports, ["GameliftFleet"], () => require("./gameliftFleet"));

export { GameliftGameServerGroupArgs, GameliftGameServerGroupState } from "./gameliftGameServerGroup";
export type GameliftGameServerGroup = import("./gameliftGameServerGroup").GameliftGameServerGroup;
export const GameliftGameServerGroup: typeof import("./gameliftGameServerGroup").GameliftGameServerGroup = null as any;
utilities.lazyLoad(exports, ["GameliftGameServerGroup"], () => require("./gameliftGameServerGroup"));

export { GameliftGameSessionQueueArgs, GameliftGameSessionQueueState } from "./gameliftGameSessionQueue";
export type GameliftGameSessionQueue = import("./gameliftGameSessionQueue").GameliftGameSessionQueue;
export const GameliftGameSessionQueue: typeof import("./gameliftGameSessionQueue").GameliftGameSessionQueue = null as any;
utilities.lazyLoad(exports, ["GameliftGameSessionQueue"], () => require("./gameliftGameSessionQueue"));

export { GameliftLocationArgs, GameliftLocationState } from "./gameliftLocation";
export type GameliftLocation = import("./gameliftLocation").GameliftLocation;
export const GameliftLocation: typeof import("./gameliftLocation").GameliftLocation = null as any;
utilities.lazyLoad(exports, ["GameliftLocation"], () => require("./gameliftLocation"));

export { GameliftMatchmakingConfigurationArgs, GameliftMatchmakingConfigurationState } from "./gameliftMatchmakingConfiguration";
export type GameliftMatchmakingConfiguration = import("./gameliftMatchmakingConfiguration").GameliftMatchmakingConfiguration;
export const GameliftMatchmakingConfiguration: typeof import("./gameliftMatchmakingConfiguration").GameliftMatchmakingConfiguration = null as any;
utilities.lazyLoad(exports, ["GameliftMatchmakingConfiguration"], () => require("./gameliftMatchmakingConfiguration"));

export { GameliftMatchmakingRuleSetArgs, GameliftMatchmakingRuleSetState } from "./gameliftMatchmakingRuleSet";
export type GameliftMatchmakingRuleSet = import("./gameliftMatchmakingRuleSet").GameliftMatchmakingRuleSet;
export const GameliftMatchmakingRuleSet: typeof import("./gameliftMatchmakingRuleSet").GameliftMatchmakingRuleSet = null as any;
utilities.lazyLoad(exports, ["GameliftMatchmakingRuleSet"], () => require("./gameliftMatchmakingRuleSet"));

export { GameliftScriptArgs, GameliftScriptState } from "./gameliftScript";
export type GameliftScript = import("./gameliftScript").GameliftScript;
export const GameliftScript: typeof import("./gameliftScript").GameliftScript = null as any;
utilities.lazyLoad(exports, ["GameliftScript"], () => require("./gameliftScript"));

export { GetAccessanalyzerAnalyzerArgs, GetAccessanalyzerAnalyzerResult, GetAccessanalyzerAnalyzerOutputArgs } from "./getAccessanalyzerAnalyzer";
export const getAccessanalyzerAnalyzer: typeof import("./getAccessanalyzerAnalyzer").getAccessanalyzerAnalyzer = null as any;
export const getAccessanalyzerAnalyzerOutput: typeof import("./getAccessanalyzerAnalyzer").getAccessanalyzerAnalyzerOutput = null as any;
utilities.lazyLoad(exports, ["getAccessanalyzerAnalyzer","getAccessanalyzerAnalyzerOutput"], () => require("./getAccessanalyzerAnalyzer"));

export { GetAccessanalyzerAnalyzersResult } from "./getAccessanalyzerAnalyzers";
export const getAccessanalyzerAnalyzers: typeof import("./getAccessanalyzerAnalyzers").getAccessanalyzerAnalyzers = null as any;
export const getAccessanalyzerAnalyzersOutput: typeof import("./getAccessanalyzerAnalyzers").getAccessanalyzerAnalyzersOutput = null as any;
utilities.lazyLoad(exports, ["getAccessanalyzerAnalyzers","getAccessanalyzerAnalyzersOutput"], () => require("./getAccessanalyzerAnalyzers"));

export { GetAcmpcaCertificateArgs, GetAcmpcaCertificateResult, GetAcmpcaCertificateOutputArgs } from "./getAcmpcaCertificate";
export const getAcmpcaCertificate: typeof import("./getAcmpcaCertificate").getAcmpcaCertificate = null as any;
export const getAcmpcaCertificateOutput: typeof import("./getAcmpcaCertificate").getAcmpcaCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getAcmpcaCertificate","getAcmpcaCertificateOutput"], () => require("./getAcmpcaCertificate"));

export { GetAcmpcaCertificateAuthoritiesResult } from "./getAcmpcaCertificateAuthorities";
export const getAcmpcaCertificateAuthorities: typeof import("./getAcmpcaCertificateAuthorities").getAcmpcaCertificateAuthorities = null as any;
export const getAcmpcaCertificateAuthoritiesOutput: typeof import("./getAcmpcaCertificateAuthorities").getAcmpcaCertificateAuthoritiesOutput = null as any;
utilities.lazyLoad(exports, ["getAcmpcaCertificateAuthorities","getAcmpcaCertificateAuthoritiesOutput"], () => require("./getAcmpcaCertificateAuthorities"));

export { GetAcmpcaCertificateAuthorityArgs, GetAcmpcaCertificateAuthorityResult, GetAcmpcaCertificateAuthorityOutputArgs } from "./getAcmpcaCertificateAuthority";
export const getAcmpcaCertificateAuthority: typeof import("./getAcmpcaCertificateAuthority").getAcmpcaCertificateAuthority = null as any;
export const getAcmpcaCertificateAuthorityOutput: typeof import("./getAcmpcaCertificateAuthority").getAcmpcaCertificateAuthorityOutput = null as any;
utilities.lazyLoad(exports, ["getAcmpcaCertificateAuthority","getAcmpcaCertificateAuthorityOutput"], () => require("./getAcmpcaCertificateAuthority"));

export { GetAcmpcaCertificateAuthorityActivationArgs, GetAcmpcaCertificateAuthorityActivationResult, GetAcmpcaCertificateAuthorityActivationOutputArgs } from "./getAcmpcaCertificateAuthorityActivation";
export const getAcmpcaCertificateAuthorityActivation: typeof import("./getAcmpcaCertificateAuthorityActivation").getAcmpcaCertificateAuthorityActivation = null as any;
export const getAcmpcaCertificateAuthorityActivationOutput: typeof import("./getAcmpcaCertificateAuthorityActivation").getAcmpcaCertificateAuthorityActivationOutput = null as any;
utilities.lazyLoad(exports, ["getAcmpcaCertificateAuthorityActivation","getAcmpcaCertificateAuthorityActivationOutput"], () => require("./getAcmpcaCertificateAuthorityActivation"));

export { GetAcmpcaPermissionArgs, GetAcmpcaPermissionResult, GetAcmpcaPermissionOutputArgs } from "./getAcmpcaPermission";
export const getAcmpcaPermission: typeof import("./getAcmpcaPermission").getAcmpcaPermission = null as any;
export const getAcmpcaPermissionOutput: typeof import("./getAcmpcaPermission").getAcmpcaPermissionOutput = null as any;
utilities.lazyLoad(exports, ["getAcmpcaPermission","getAcmpcaPermissionOutput"], () => require("./getAcmpcaPermission"));

export { GetAmplifyAppArgs, GetAmplifyAppResult, GetAmplifyAppOutputArgs } from "./getAmplifyApp";
export const getAmplifyApp: typeof import("./getAmplifyApp").getAmplifyApp = null as any;
export const getAmplifyAppOutput: typeof import("./getAmplifyApp").getAmplifyAppOutput = null as any;
utilities.lazyLoad(exports, ["getAmplifyApp","getAmplifyAppOutput"], () => require("./getAmplifyApp"));

export { GetAmplifyAppsResult } from "./getAmplifyApps";
export const getAmplifyApps: typeof import("./getAmplifyApps").getAmplifyApps = null as any;
export const getAmplifyAppsOutput: typeof import("./getAmplifyApps").getAmplifyAppsOutput = null as any;
utilities.lazyLoad(exports, ["getAmplifyApps","getAmplifyAppsOutput"], () => require("./getAmplifyApps"));

export { GetAmplifyBranchArgs, GetAmplifyBranchResult, GetAmplifyBranchOutputArgs } from "./getAmplifyBranch";
export const getAmplifyBranch: typeof import("./getAmplifyBranch").getAmplifyBranch = null as any;
export const getAmplifyBranchOutput: typeof import("./getAmplifyBranch").getAmplifyBranchOutput = null as any;
utilities.lazyLoad(exports, ["getAmplifyBranch","getAmplifyBranchOutput"], () => require("./getAmplifyBranch"));

export { GetAmplifyDomainArgs, GetAmplifyDomainResult, GetAmplifyDomainOutputArgs } from "./getAmplifyDomain";
export const getAmplifyDomain: typeof import("./getAmplifyDomain").getAmplifyDomain = null as any;
export const getAmplifyDomainOutput: typeof import("./getAmplifyDomain").getAmplifyDomainOutput = null as any;
utilities.lazyLoad(exports, ["getAmplifyDomain","getAmplifyDomainOutput"], () => require("./getAmplifyDomain"));

export { GetAmplifyDomainsResult } from "./getAmplifyDomains";
export const getAmplifyDomains: typeof import("./getAmplifyDomains").getAmplifyDomains = null as any;
export const getAmplifyDomainsOutput: typeof import("./getAmplifyDomains").getAmplifyDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getAmplifyDomains","getAmplifyDomainsOutput"], () => require("./getAmplifyDomains"));

export { GetApigatewayAccountArgs, GetApigatewayAccountResult, GetApigatewayAccountOutputArgs } from "./getApigatewayAccount";
export const getApigatewayAccount: typeof import("./getApigatewayAccount").getApigatewayAccount = null as any;
export const getApigatewayAccountOutput: typeof import("./getApigatewayAccount").getApigatewayAccountOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayAccount","getApigatewayAccountOutput"], () => require("./getApigatewayAccount"));

export { GetApigatewayApiKeyArgs, GetApigatewayApiKeyResult, GetApigatewayApiKeyOutputArgs } from "./getApigatewayApiKey";
export const getApigatewayApiKey: typeof import("./getApigatewayApiKey").getApigatewayApiKey = null as any;
export const getApigatewayApiKeyOutput: typeof import("./getApigatewayApiKey").getApigatewayApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayApiKey","getApigatewayApiKeyOutput"], () => require("./getApigatewayApiKey"));

export { GetApigatewayApiKeysResult } from "./getApigatewayApiKeys";
export const getApigatewayApiKeys: typeof import("./getApigatewayApiKeys").getApigatewayApiKeys = null as any;
export const getApigatewayApiKeysOutput: typeof import("./getApigatewayApiKeys").getApigatewayApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayApiKeys","getApigatewayApiKeysOutput"], () => require("./getApigatewayApiKeys"));

export { GetApigatewayAuthorizerArgs, GetApigatewayAuthorizerResult, GetApigatewayAuthorizerOutputArgs } from "./getApigatewayAuthorizer";
export const getApigatewayAuthorizer: typeof import("./getApigatewayAuthorizer").getApigatewayAuthorizer = null as any;
export const getApigatewayAuthorizerOutput: typeof import("./getApigatewayAuthorizer").getApigatewayAuthorizerOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayAuthorizer","getApigatewayAuthorizerOutput"], () => require("./getApigatewayAuthorizer"));

export { GetApigatewayBasePathMappingArgs, GetApigatewayBasePathMappingResult, GetApigatewayBasePathMappingOutputArgs } from "./getApigatewayBasePathMapping";
export const getApigatewayBasePathMapping: typeof import("./getApigatewayBasePathMapping").getApigatewayBasePathMapping = null as any;
export const getApigatewayBasePathMappingOutput: typeof import("./getApigatewayBasePathMapping").getApigatewayBasePathMappingOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayBasePathMapping","getApigatewayBasePathMappingOutput"], () => require("./getApigatewayBasePathMapping"));

export { GetApigatewayClientCertificateArgs, GetApigatewayClientCertificateResult, GetApigatewayClientCertificateOutputArgs } from "./getApigatewayClientCertificate";
export const getApigatewayClientCertificate: typeof import("./getApigatewayClientCertificate").getApigatewayClientCertificate = null as any;
export const getApigatewayClientCertificateOutput: typeof import("./getApigatewayClientCertificate").getApigatewayClientCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayClientCertificate","getApigatewayClientCertificateOutput"], () => require("./getApigatewayClientCertificate"));

export { GetApigatewayClientCertificatesResult } from "./getApigatewayClientCertificates";
export const getApigatewayClientCertificates: typeof import("./getApigatewayClientCertificates").getApigatewayClientCertificates = null as any;
export const getApigatewayClientCertificatesOutput: typeof import("./getApigatewayClientCertificates").getApigatewayClientCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayClientCertificates","getApigatewayClientCertificatesOutput"], () => require("./getApigatewayClientCertificates"));

export { GetApigatewayDeploymentArgs, GetApigatewayDeploymentResult, GetApigatewayDeploymentOutputArgs } from "./getApigatewayDeployment";
export const getApigatewayDeployment: typeof import("./getApigatewayDeployment").getApigatewayDeployment = null as any;
export const getApigatewayDeploymentOutput: typeof import("./getApigatewayDeployment").getApigatewayDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayDeployment","getApigatewayDeploymentOutput"], () => require("./getApigatewayDeployment"));

export { GetApigatewayDocumentationPartArgs, GetApigatewayDocumentationPartResult, GetApigatewayDocumentationPartOutputArgs } from "./getApigatewayDocumentationPart";
export const getApigatewayDocumentationPart: typeof import("./getApigatewayDocumentationPart").getApigatewayDocumentationPart = null as any;
export const getApigatewayDocumentationPartOutput: typeof import("./getApigatewayDocumentationPart").getApigatewayDocumentationPartOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayDocumentationPart","getApigatewayDocumentationPartOutput"], () => require("./getApigatewayDocumentationPart"));

export { GetApigatewayDocumentationVersionArgs, GetApigatewayDocumentationVersionResult, GetApigatewayDocumentationVersionOutputArgs } from "./getApigatewayDocumentationVersion";
export const getApigatewayDocumentationVersion: typeof import("./getApigatewayDocumentationVersion").getApigatewayDocumentationVersion = null as any;
export const getApigatewayDocumentationVersionOutput: typeof import("./getApigatewayDocumentationVersion").getApigatewayDocumentationVersionOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayDocumentationVersion","getApigatewayDocumentationVersionOutput"], () => require("./getApigatewayDocumentationVersion"));

export { GetApigatewayDomainNameArgs, GetApigatewayDomainNameResult, GetApigatewayDomainNameOutputArgs } from "./getApigatewayDomainName";
export const getApigatewayDomainName: typeof import("./getApigatewayDomainName").getApigatewayDomainName = null as any;
export const getApigatewayDomainNameOutput: typeof import("./getApigatewayDomainName").getApigatewayDomainNameOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayDomainName","getApigatewayDomainNameOutput"], () => require("./getApigatewayDomainName"));

export { GetApigatewayDomainNamesResult } from "./getApigatewayDomainNames";
export const getApigatewayDomainNames: typeof import("./getApigatewayDomainNames").getApigatewayDomainNames = null as any;
export const getApigatewayDomainNamesOutput: typeof import("./getApigatewayDomainNames").getApigatewayDomainNamesOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayDomainNames","getApigatewayDomainNamesOutput"], () => require("./getApigatewayDomainNames"));

export { GetApigatewayGatewayResponseArgs, GetApigatewayGatewayResponseResult, GetApigatewayGatewayResponseOutputArgs } from "./getApigatewayGatewayResponse";
export const getApigatewayGatewayResponse: typeof import("./getApigatewayGatewayResponse").getApigatewayGatewayResponse = null as any;
export const getApigatewayGatewayResponseOutput: typeof import("./getApigatewayGatewayResponse").getApigatewayGatewayResponseOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayGatewayResponse","getApigatewayGatewayResponseOutput"], () => require("./getApigatewayGatewayResponse"));

export { GetApigatewayMethodArgs, GetApigatewayMethodResult, GetApigatewayMethodOutputArgs } from "./getApigatewayMethod";
export const getApigatewayMethod: typeof import("./getApigatewayMethod").getApigatewayMethod = null as any;
export const getApigatewayMethodOutput: typeof import("./getApigatewayMethod").getApigatewayMethodOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayMethod","getApigatewayMethodOutput"], () => require("./getApigatewayMethod"));

export { GetApigatewayModelArgs, GetApigatewayModelResult, GetApigatewayModelOutputArgs } from "./getApigatewayModel";
export const getApigatewayModel: typeof import("./getApigatewayModel").getApigatewayModel = null as any;
export const getApigatewayModelOutput: typeof import("./getApigatewayModel").getApigatewayModelOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayModel","getApigatewayModelOutput"], () => require("./getApigatewayModel"));

export { GetApigatewayRequestValidatorArgs, GetApigatewayRequestValidatorResult, GetApigatewayRequestValidatorOutputArgs } from "./getApigatewayRequestValidator";
export const getApigatewayRequestValidator: typeof import("./getApigatewayRequestValidator").getApigatewayRequestValidator = null as any;
export const getApigatewayRequestValidatorOutput: typeof import("./getApigatewayRequestValidator").getApigatewayRequestValidatorOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayRequestValidator","getApigatewayRequestValidatorOutput"], () => require("./getApigatewayRequestValidator"));

export { GetApigatewayResourceArgs, GetApigatewayResourceResult, GetApigatewayResourceOutputArgs } from "./getApigatewayResource";
export const getApigatewayResource: typeof import("./getApigatewayResource").getApigatewayResource = null as any;
export const getApigatewayResourceOutput: typeof import("./getApigatewayResource").getApigatewayResourceOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayResource","getApigatewayResourceOutput"], () => require("./getApigatewayResource"));

export { GetApigatewayRestApiArgs, GetApigatewayRestApiResult, GetApigatewayRestApiOutputArgs } from "./getApigatewayRestApi";
export const getApigatewayRestApi: typeof import("./getApigatewayRestApi").getApigatewayRestApi = null as any;
export const getApigatewayRestApiOutput: typeof import("./getApigatewayRestApi").getApigatewayRestApiOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayRestApi","getApigatewayRestApiOutput"], () => require("./getApigatewayRestApi"));

export { GetApigatewayRestApisResult } from "./getApigatewayRestApis";
export const getApigatewayRestApis: typeof import("./getApigatewayRestApis").getApigatewayRestApis = null as any;
export const getApigatewayRestApisOutput: typeof import("./getApigatewayRestApis").getApigatewayRestApisOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayRestApis","getApigatewayRestApisOutput"], () => require("./getApigatewayRestApis"));

export { GetApigatewayStageArgs, GetApigatewayStageResult, GetApigatewayStageOutputArgs } from "./getApigatewayStage";
export const getApigatewayStage: typeof import("./getApigatewayStage").getApigatewayStage = null as any;
export const getApigatewayStageOutput: typeof import("./getApigatewayStage").getApigatewayStageOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayStage","getApigatewayStageOutput"], () => require("./getApigatewayStage"));

export { GetApigatewayUsagePlanArgs, GetApigatewayUsagePlanResult, GetApigatewayUsagePlanOutputArgs } from "./getApigatewayUsagePlan";
export const getApigatewayUsagePlan: typeof import("./getApigatewayUsagePlan").getApigatewayUsagePlan = null as any;
export const getApigatewayUsagePlanOutput: typeof import("./getApigatewayUsagePlan").getApigatewayUsagePlanOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayUsagePlan","getApigatewayUsagePlanOutput"], () => require("./getApigatewayUsagePlan"));

export { GetApigatewayUsagePlanKeyArgs, GetApigatewayUsagePlanKeyResult, GetApigatewayUsagePlanKeyOutputArgs } from "./getApigatewayUsagePlanKey";
export const getApigatewayUsagePlanKey: typeof import("./getApigatewayUsagePlanKey").getApigatewayUsagePlanKey = null as any;
export const getApigatewayUsagePlanKeyOutput: typeof import("./getApigatewayUsagePlanKey").getApigatewayUsagePlanKeyOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayUsagePlanKey","getApigatewayUsagePlanKeyOutput"], () => require("./getApigatewayUsagePlanKey"));

export { GetApigatewayUsagePlansResult } from "./getApigatewayUsagePlans";
export const getApigatewayUsagePlans: typeof import("./getApigatewayUsagePlans").getApigatewayUsagePlans = null as any;
export const getApigatewayUsagePlansOutput: typeof import("./getApigatewayUsagePlans").getApigatewayUsagePlansOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayUsagePlans","getApigatewayUsagePlansOutput"], () => require("./getApigatewayUsagePlans"));

export { GetApigatewayVpcLinkArgs, GetApigatewayVpcLinkResult, GetApigatewayVpcLinkOutputArgs } from "./getApigatewayVpcLink";
export const getApigatewayVpcLink: typeof import("./getApigatewayVpcLink").getApigatewayVpcLink = null as any;
export const getApigatewayVpcLinkOutput: typeof import("./getApigatewayVpcLink").getApigatewayVpcLinkOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayVpcLink","getApigatewayVpcLinkOutput"], () => require("./getApigatewayVpcLink"));

export { GetApigatewayVpcLinksResult } from "./getApigatewayVpcLinks";
export const getApigatewayVpcLinks: typeof import("./getApigatewayVpcLinks").getApigatewayVpcLinks = null as any;
export const getApigatewayVpcLinksOutput: typeof import("./getApigatewayVpcLinks").getApigatewayVpcLinksOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayVpcLinks","getApigatewayVpcLinksOutput"], () => require("./getApigatewayVpcLinks"));

export { GetApigatewayv2ApiArgs, GetApigatewayv2ApiResult, GetApigatewayv2ApiOutputArgs } from "./getApigatewayv2Api";
export const getApigatewayv2Api: typeof import("./getApigatewayv2Api").getApigatewayv2Api = null as any;
export const getApigatewayv2ApiOutput: typeof import("./getApigatewayv2Api").getApigatewayv2ApiOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2Api","getApigatewayv2ApiOutput"], () => require("./getApigatewayv2Api"));

export { GetApigatewayv2ApiMappingArgs, GetApigatewayv2ApiMappingResult, GetApigatewayv2ApiMappingOutputArgs } from "./getApigatewayv2ApiMapping";
export const getApigatewayv2ApiMapping: typeof import("./getApigatewayv2ApiMapping").getApigatewayv2ApiMapping = null as any;
export const getApigatewayv2ApiMappingOutput: typeof import("./getApigatewayv2ApiMapping").getApigatewayv2ApiMappingOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2ApiMapping","getApigatewayv2ApiMappingOutput"], () => require("./getApigatewayv2ApiMapping"));

export { GetApigatewayv2ApiMappingsResult } from "./getApigatewayv2ApiMappings";
export const getApigatewayv2ApiMappings: typeof import("./getApigatewayv2ApiMappings").getApigatewayv2ApiMappings = null as any;
export const getApigatewayv2ApiMappingsOutput: typeof import("./getApigatewayv2ApiMappings").getApigatewayv2ApiMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2ApiMappings","getApigatewayv2ApiMappingsOutput"], () => require("./getApigatewayv2ApiMappings"));

export { GetApigatewayv2ApisResult } from "./getApigatewayv2Apis";
export const getApigatewayv2Apis: typeof import("./getApigatewayv2Apis").getApigatewayv2Apis = null as any;
export const getApigatewayv2ApisOutput: typeof import("./getApigatewayv2Apis").getApigatewayv2ApisOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2Apis","getApigatewayv2ApisOutput"], () => require("./getApigatewayv2Apis"));

export { GetApigatewayv2AuthorizerArgs, GetApigatewayv2AuthorizerResult, GetApigatewayv2AuthorizerOutputArgs } from "./getApigatewayv2Authorizer";
export const getApigatewayv2Authorizer: typeof import("./getApigatewayv2Authorizer").getApigatewayv2Authorizer = null as any;
export const getApigatewayv2AuthorizerOutput: typeof import("./getApigatewayv2Authorizer").getApigatewayv2AuthorizerOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2Authorizer","getApigatewayv2AuthorizerOutput"], () => require("./getApigatewayv2Authorizer"));

export { GetApigatewayv2DeploymentArgs, GetApigatewayv2DeploymentResult, GetApigatewayv2DeploymentOutputArgs } from "./getApigatewayv2Deployment";
export const getApigatewayv2Deployment: typeof import("./getApigatewayv2Deployment").getApigatewayv2Deployment = null as any;
export const getApigatewayv2DeploymentOutput: typeof import("./getApigatewayv2Deployment").getApigatewayv2DeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2Deployment","getApigatewayv2DeploymentOutput"], () => require("./getApigatewayv2Deployment"));

export { GetApigatewayv2DomainNameArgs, GetApigatewayv2DomainNameResult, GetApigatewayv2DomainNameOutputArgs } from "./getApigatewayv2DomainName";
export const getApigatewayv2DomainName: typeof import("./getApigatewayv2DomainName").getApigatewayv2DomainName = null as any;
export const getApigatewayv2DomainNameOutput: typeof import("./getApigatewayv2DomainName").getApigatewayv2DomainNameOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2DomainName","getApigatewayv2DomainNameOutput"], () => require("./getApigatewayv2DomainName"));

export { GetApigatewayv2DomainNamesResult } from "./getApigatewayv2DomainNames";
export const getApigatewayv2DomainNames: typeof import("./getApigatewayv2DomainNames").getApigatewayv2DomainNames = null as any;
export const getApigatewayv2DomainNamesOutput: typeof import("./getApigatewayv2DomainNames").getApigatewayv2DomainNamesOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2DomainNames","getApigatewayv2DomainNamesOutput"], () => require("./getApigatewayv2DomainNames"));

export { GetApigatewayv2IntegrationResponseArgs, GetApigatewayv2IntegrationResponseResult, GetApigatewayv2IntegrationResponseOutputArgs } from "./getApigatewayv2IntegrationResponse";
export const getApigatewayv2IntegrationResponse: typeof import("./getApigatewayv2IntegrationResponse").getApigatewayv2IntegrationResponse = null as any;
export const getApigatewayv2IntegrationResponseOutput: typeof import("./getApigatewayv2IntegrationResponse").getApigatewayv2IntegrationResponseOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2IntegrationResponse","getApigatewayv2IntegrationResponseOutput"], () => require("./getApigatewayv2IntegrationResponse"));

export { GetApigatewayv2IntegrationResponsesResult } from "./getApigatewayv2IntegrationResponses";
export const getApigatewayv2IntegrationResponses: typeof import("./getApigatewayv2IntegrationResponses").getApigatewayv2IntegrationResponses = null as any;
export const getApigatewayv2IntegrationResponsesOutput: typeof import("./getApigatewayv2IntegrationResponses").getApigatewayv2IntegrationResponsesOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2IntegrationResponses","getApigatewayv2IntegrationResponsesOutput"], () => require("./getApigatewayv2IntegrationResponses"));

export { GetApigatewayv2ModelArgs, GetApigatewayv2ModelResult, GetApigatewayv2ModelOutputArgs } from "./getApigatewayv2Model";
export const getApigatewayv2Model: typeof import("./getApigatewayv2Model").getApigatewayv2Model = null as any;
export const getApigatewayv2ModelOutput: typeof import("./getApigatewayv2Model").getApigatewayv2ModelOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2Model","getApigatewayv2ModelOutput"], () => require("./getApigatewayv2Model"));

export { GetApigatewayv2RouteArgs, GetApigatewayv2RouteResult, GetApigatewayv2RouteOutputArgs } from "./getApigatewayv2Route";
export const getApigatewayv2Route: typeof import("./getApigatewayv2Route").getApigatewayv2Route = null as any;
export const getApigatewayv2RouteOutput: typeof import("./getApigatewayv2Route").getApigatewayv2RouteOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2Route","getApigatewayv2RouteOutput"], () => require("./getApigatewayv2Route"));

export { GetApigatewayv2RouteResponseArgs, GetApigatewayv2RouteResponseResult, GetApigatewayv2RouteResponseOutputArgs } from "./getApigatewayv2RouteResponse";
export const getApigatewayv2RouteResponse: typeof import("./getApigatewayv2RouteResponse").getApigatewayv2RouteResponse = null as any;
export const getApigatewayv2RouteResponseOutput: typeof import("./getApigatewayv2RouteResponse").getApigatewayv2RouteResponseOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2RouteResponse","getApigatewayv2RouteResponseOutput"], () => require("./getApigatewayv2RouteResponse"));

export { GetApigatewayv2RouteResponsesResult } from "./getApigatewayv2RouteResponses";
export const getApigatewayv2RouteResponses: typeof import("./getApigatewayv2RouteResponses").getApigatewayv2RouteResponses = null as any;
export const getApigatewayv2RouteResponsesOutput: typeof import("./getApigatewayv2RouteResponses").getApigatewayv2RouteResponsesOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2RouteResponses","getApigatewayv2RouteResponsesOutput"], () => require("./getApigatewayv2RouteResponses"));

export { GetApigatewayv2VpcLinkArgs, GetApigatewayv2VpcLinkResult, GetApigatewayv2VpcLinkOutputArgs } from "./getApigatewayv2VpcLink";
export const getApigatewayv2VpcLink: typeof import("./getApigatewayv2VpcLink").getApigatewayv2VpcLink = null as any;
export const getApigatewayv2VpcLinkOutput: typeof import("./getApigatewayv2VpcLink").getApigatewayv2VpcLinkOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2VpcLink","getApigatewayv2VpcLinkOutput"], () => require("./getApigatewayv2VpcLink"));

export { GetApigatewayv2VpcLinksResult } from "./getApigatewayv2VpcLinks";
export const getApigatewayv2VpcLinks: typeof import("./getApigatewayv2VpcLinks").getApigatewayv2VpcLinks = null as any;
export const getApigatewayv2VpcLinksOutput: typeof import("./getApigatewayv2VpcLinks").getApigatewayv2VpcLinksOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2VpcLinks","getApigatewayv2VpcLinksOutput"], () => require("./getApigatewayv2VpcLinks"));

export { GetAppconfigApplicationArgs, GetAppconfigApplicationResult, GetAppconfigApplicationOutputArgs } from "./getAppconfigApplication";
export const getAppconfigApplication: typeof import("./getAppconfigApplication").getAppconfigApplication = null as any;
export const getAppconfigApplicationOutput: typeof import("./getAppconfigApplication").getAppconfigApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getAppconfigApplication","getAppconfigApplicationOutput"], () => require("./getAppconfigApplication"));

export { GetAppconfigApplicationsResult } from "./getAppconfigApplications";
export const getAppconfigApplications: typeof import("./getAppconfigApplications").getAppconfigApplications = null as any;
export const getAppconfigApplicationsOutput: typeof import("./getAppconfigApplications").getAppconfigApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getAppconfigApplications","getAppconfigApplicationsOutput"], () => require("./getAppconfigApplications"));

export { GetAppconfigConfigurationProfileArgs, GetAppconfigConfigurationProfileResult, GetAppconfigConfigurationProfileOutputArgs } from "./getAppconfigConfigurationProfile";
export const getAppconfigConfigurationProfile: typeof import("./getAppconfigConfigurationProfile").getAppconfigConfigurationProfile = null as any;
export const getAppconfigConfigurationProfileOutput: typeof import("./getAppconfigConfigurationProfile").getAppconfigConfigurationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAppconfigConfigurationProfile","getAppconfigConfigurationProfileOutput"], () => require("./getAppconfigConfigurationProfile"));

export { GetAppconfigEnvironmentArgs, GetAppconfigEnvironmentResult, GetAppconfigEnvironmentOutputArgs } from "./getAppconfigEnvironment";
export const getAppconfigEnvironment: typeof import("./getAppconfigEnvironment").getAppconfigEnvironment = null as any;
export const getAppconfigEnvironmentOutput: typeof import("./getAppconfigEnvironment").getAppconfigEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getAppconfigEnvironment","getAppconfigEnvironmentOutput"], () => require("./getAppconfigEnvironment"));

export { GetAppconfigExtensionAssociationArgs, GetAppconfigExtensionAssociationResult, GetAppconfigExtensionAssociationOutputArgs } from "./getAppconfigExtensionAssociation";
export const getAppconfigExtensionAssociation: typeof import("./getAppconfigExtensionAssociation").getAppconfigExtensionAssociation = null as any;
export const getAppconfigExtensionAssociationOutput: typeof import("./getAppconfigExtensionAssociation").getAppconfigExtensionAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getAppconfigExtensionAssociation","getAppconfigExtensionAssociationOutput"], () => require("./getAppconfigExtensionAssociation"));

export { GetAppconfigExtensionAssociationsResult } from "./getAppconfigExtensionAssociations";
export const getAppconfigExtensionAssociations: typeof import("./getAppconfigExtensionAssociations").getAppconfigExtensionAssociations = null as any;
export const getAppconfigExtensionAssociationsOutput: typeof import("./getAppconfigExtensionAssociations").getAppconfigExtensionAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getAppconfigExtensionAssociations","getAppconfigExtensionAssociationsOutput"], () => require("./getAppconfigExtensionAssociations"));

export { GetAppconfigHostedConfigurationVersionArgs, GetAppconfigHostedConfigurationVersionResult, GetAppconfigHostedConfigurationVersionOutputArgs } from "./getAppconfigHostedConfigurationVersion";
export const getAppconfigHostedConfigurationVersion: typeof import("./getAppconfigHostedConfigurationVersion").getAppconfigHostedConfigurationVersion = null as any;
export const getAppconfigHostedConfigurationVersionOutput: typeof import("./getAppconfigHostedConfigurationVersion").getAppconfigHostedConfigurationVersionOutput = null as any;
utilities.lazyLoad(exports, ["getAppconfigHostedConfigurationVersion","getAppconfigHostedConfigurationVersionOutput"], () => require("./getAppconfigHostedConfigurationVersion"));

export { GetAppflowConnectorArgs, GetAppflowConnectorResult, GetAppflowConnectorOutputArgs } from "./getAppflowConnector";
export const getAppflowConnector: typeof import("./getAppflowConnector").getAppflowConnector = null as any;
export const getAppflowConnectorOutput: typeof import("./getAppflowConnector").getAppflowConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getAppflowConnector","getAppflowConnectorOutput"], () => require("./getAppflowConnector"));

export { GetAppflowConnectorProfileArgs, GetAppflowConnectorProfileResult, GetAppflowConnectorProfileOutputArgs } from "./getAppflowConnectorProfile";
export const getAppflowConnectorProfile: typeof import("./getAppflowConnectorProfile").getAppflowConnectorProfile = null as any;
export const getAppflowConnectorProfileOutput: typeof import("./getAppflowConnectorProfile").getAppflowConnectorProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAppflowConnectorProfile","getAppflowConnectorProfileOutput"], () => require("./getAppflowConnectorProfile"));

export { GetAppflowConnectorProfilesResult } from "./getAppflowConnectorProfiles";
export const getAppflowConnectorProfiles: typeof import("./getAppflowConnectorProfiles").getAppflowConnectorProfiles = null as any;
export const getAppflowConnectorProfilesOutput: typeof import("./getAppflowConnectorProfiles").getAppflowConnectorProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getAppflowConnectorProfiles","getAppflowConnectorProfilesOutput"], () => require("./getAppflowConnectorProfiles"));

export { GetAppflowConnectorsResult } from "./getAppflowConnectors";
export const getAppflowConnectors: typeof import("./getAppflowConnectors").getAppflowConnectors = null as any;
export const getAppflowConnectorsOutput: typeof import("./getAppflowConnectors").getAppflowConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getAppflowConnectors","getAppflowConnectorsOutput"], () => require("./getAppflowConnectors"));

export { GetAppflowFlowArgs, GetAppflowFlowResult, GetAppflowFlowOutputArgs } from "./getAppflowFlow";
export const getAppflowFlow: typeof import("./getAppflowFlow").getAppflowFlow = null as any;
export const getAppflowFlowOutput: typeof import("./getAppflowFlow").getAppflowFlowOutput = null as any;
utilities.lazyLoad(exports, ["getAppflowFlow","getAppflowFlowOutput"], () => require("./getAppflowFlow"));

export { GetAppflowFlowsResult } from "./getAppflowFlows";
export const getAppflowFlows: typeof import("./getAppflowFlows").getAppflowFlows = null as any;
export const getAppflowFlowsOutput: typeof import("./getAppflowFlows").getAppflowFlowsOutput = null as any;
utilities.lazyLoad(exports, ["getAppflowFlows","getAppflowFlowsOutput"], () => require("./getAppflowFlows"));

export { GetAppintegrationsApplicationArgs, GetAppintegrationsApplicationResult, GetAppintegrationsApplicationOutputArgs } from "./getAppintegrationsApplication";
export const getAppintegrationsApplication: typeof import("./getAppintegrationsApplication").getAppintegrationsApplication = null as any;
export const getAppintegrationsApplicationOutput: typeof import("./getAppintegrationsApplication").getAppintegrationsApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getAppintegrationsApplication","getAppintegrationsApplicationOutput"], () => require("./getAppintegrationsApplication"));

export { GetAppintegrationsApplicationsResult } from "./getAppintegrationsApplications";
export const getAppintegrationsApplications: typeof import("./getAppintegrationsApplications").getAppintegrationsApplications = null as any;
export const getAppintegrationsApplicationsOutput: typeof import("./getAppintegrationsApplications").getAppintegrationsApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getAppintegrationsApplications","getAppintegrationsApplicationsOutput"], () => require("./getAppintegrationsApplications"));

export { GetAppintegrationsEventIntegrationArgs, GetAppintegrationsEventIntegrationResult, GetAppintegrationsEventIntegrationOutputArgs } from "./getAppintegrationsEventIntegration";
export const getAppintegrationsEventIntegration: typeof import("./getAppintegrationsEventIntegration").getAppintegrationsEventIntegration = null as any;
export const getAppintegrationsEventIntegrationOutput: typeof import("./getAppintegrationsEventIntegration").getAppintegrationsEventIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getAppintegrationsEventIntegration","getAppintegrationsEventIntegrationOutput"], () => require("./getAppintegrationsEventIntegration"));

export { GetAppintegrationsEventIntegrationsResult } from "./getAppintegrationsEventIntegrations";
export const getAppintegrationsEventIntegrations: typeof import("./getAppintegrationsEventIntegrations").getAppintegrationsEventIntegrations = null as any;
export const getAppintegrationsEventIntegrationsOutput: typeof import("./getAppintegrationsEventIntegrations").getAppintegrationsEventIntegrationsOutput = null as any;
utilities.lazyLoad(exports, ["getAppintegrationsEventIntegrations","getAppintegrationsEventIntegrationsOutput"], () => require("./getAppintegrationsEventIntegrations"));

export { GetApplicationautoscalingScalableTargetArgs, GetApplicationautoscalingScalableTargetResult, GetApplicationautoscalingScalableTargetOutputArgs } from "./getApplicationautoscalingScalableTarget";
export const getApplicationautoscalingScalableTarget: typeof import("./getApplicationautoscalingScalableTarget").getApplicationautoscalingScalableTarget = null as any;
export const getApplicationautoscalingScalableTargetOutput: typeof import("./getApplicationautoscalingScalableTarget").getApplicationautoscalingScalableTargetOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationautoscalingScalableTarget","getApplicationautoscalingScalableTargetOutput"], () => require("./getApplicationautoscalingScalableTarget"));

export { GetApplicationautoscalingScalableTargetsResult } from "./getApplicationautoscalingScalableTargets";
export const getApplicationautoscalingScalableTargets: typeof import("./getApplicationautoscalingScalableTargets").getApplicationautoscalingScalableTargets = null as any;
export const getApplicationautoscalingScalableTargetsOutput: typeof import("./getApplicationautoscalingScalableTargets").getApplicationautoscalingScalableTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationautoscalingScalableTargets","getApplicationautoscalingScalableTargetsOutput"], () => require("./getApplicationautoscalingScalableTargets"));

export { GetApplicationautoscalingScalingPolicyArgs, GetApplicationautoscalingScalingPolicyResult, GetApplicationautoscalingScalingPolicyOutputArgs } from "./getApplicationautoscalingScalingPolicy";
export const getApplicationautoscalingScalingPolicy: typeof import("./getApplicationautoscalingScalingPolicy").getApplicationautoscalingScalingPolicy = null as any;
export const getApplicationautoscalingScalingPolicyOutput: typeof import("./getApplicationautoscalingScalingPolicy").getApplicationautoscalingScalingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationautoscalingScalingPolicy","getApplicationautoscalingScalingPolicyOutput"], () => require("./getApplicationautoscalingScalingPolicy"));

export { GetApplicationinsightsApplicationArgs, GetApplicationinsightsApplicationResult, GetApplicationinsightsApplicationOutputArgs } from "./getApplicationinsightsApplication";
export const getApplicationinsightsApplication: typeof import("./getApplicationinsightsApplication").getApplicationinsightsApplication = null as any;
export const getApplicationinsightsApplicationOutput: typeof import("./getApplicationinsightsApplication").getApplicationinsightsApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationinsightsApplication","getApplicationinsightsApplicationOutput"], () => require("./getApplicationinsightsApplication"));

export { GetApplicationinsightsApplicationsResult } from "./getApplicationinsightsApplications";
export const getApplicationinsightsApplications: typeof import("./getApplicationinsightsApplications").getApplicationinsightsApplications = null as any;
export const getApplicationinsightsApplicationsOutput: typeof import("./getApplicationinsightsApplications").getApplicationinsightsApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationinsightsApplications","getApplicationinsightsApplicationsOutput"], () => require("./getApplicationinsightsApplications"));

export { GetApplicationsignalsServiceLevelObjectiveArgs, GetApplicationsignalsServiceLevelObjectiveResult, GetApplicationsignalsServiceLevelObjectiveOutputArgs } from "./getApplicationsignalsServiceLevelObjective";
export const getApplicationsignalsServiceLevelObjective: typeof import("./getApplicationsignalsServiceLevelObjective").getApplicationsignalsServiceLevelObjective = null as any;
export const getApplicationsignalsServiceLevelObjectiveOutput: typeof import("./getApplicationsignalsServiceLevelObjective").getApplicationsignalsServiceLevelObjectiveOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationsignalsServiceLevelObjective","getApplicationsignalsServiceLevelObjectiveOutput"], () => require("./getApplicationsignalsServiceLevelObjective"));

export { GetApplicationsignalsServiceLevelObjectivesResult } from "./getApplicationsignalsServiceLevelObjectives";
export const getApplicationsignalsServiceLevelObjectives: typeof import("./getApplicationsignalsServiceLevelObjectives").getApplicationsignalsServiceLevelObjectives = null as any;
export const getApplicationsignalsServiceLevelObjectivesOutput: typeof import("./getApplicationsignalsServiceLevelObjectives").getApplicationsignalsServiceLevelObjectivesOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationsignalsServiceLevelObjectives","getApplicationsignalsServiceLevelObjectivesOutput"], () => require("./getApplicationsignalsServiceLevelObjectives"));

export { GetApprunnerAutoScalingConfigurationArgs, GetApprunnerAutoScalingConfigurationResult, GetApprunnerAutoScalingConfigurationOutputArgs } from "./getApprunnerAutoScalingConfiguration";
export const getApprunnerAutoScalingConfiguration: typeof import("./getApprunnerAutoScalingConfiguration").getApprunnerAutoScalingConfiguration = null as any;
export const getApprunnerAutoScalingConfigurationOutput: typeof import("./getApprunnerAutoScalingConfiguration").getApprunnerAutoScalingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getApprunnerAutoScalingConfiguration","getApprunnerAutoScalingConfigurationOutput"], () => require("./getApprunnerAutoScalingConfiguration"));

export { GetApprunnerAutoScalingConfigurationsResult } from "./getApprunnerAutoScalingConfigurations";
export const getApprunnerAutoScalingConfigurations: typeof import("./getApprunnerAutoScalingConfigurations").getApprunnerAutoScalingConfigurations = null as any;
export const getApprunnerAutoScalingConfigurationsOutput: typeof import("./getApprunnerAutoScalingConfigurations").getApprunnerAutoScalingConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getApprunnerAutoScalingConfigurations","getApprunnerAutoScalingConfigurationsOutput"], () => require("./getApprunnerAutoScalingConfigurations"));

export { GetApprunnerObservabilityConfigurationArgs, GetApprunnerObservabilityConfigurationResult, GetApprunnerObservabilityConfigurationOutputArgs } from "./getApprunnerObservabilityConfiguration";
export const getApprunnerObservabilityConfiguration: typeof import("./getApprunnerObservabilityConfiguration").getApprunnerObservabilityConfiguration = null as any;
export const getApprunnerObservabilityConfigurationOutput: typeof import("./getApprunnerObservabilityConfiguration").getApprunnerObservabilityConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getApprunnerObservabilityConfiguration","getApprunnerObservabilityConfigurationOutput"], () => require("./getApprunnerObservabilityConfiguration"));

export { GetApprunnerObservabilityConfigurationsResult } from "./getApprunnerObservabilityConfigurations";
export const getApprunnerObservabilityConfigurations: typeof import("./getApprunnerObservabilityConfigurations").getApprunnerObservabilityConfigurations = null as any;
export const getApprunnerObservabilityConfigurationsOutput: typeof import("./getApprunnerObservabilityConfigurations").getApprunnerObservabilityConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getApprunnerObservabilityConfigurations","getApprunnerObservabilityConfigurationsOutput"], () => require("./getApprunnerObservabilityConfigurations"));

export { GetApprunnerServiceArgs, GetApprunnerServiceResult, GetApprunnerServiceOutputArgs } from "./getApprunnerService";
export const getApprunnerService: typeof import("./getApprunnerService").getApprunnerService = null as any;
export const getApprunnerServiceOutput: typeof import("./getApprunnerService").getApprunnerServiceOutput = null as any;
utilities.lazyLoad(exports, ["getApprunnerService","getApprunnerServiceOutput"], () => require("./getApprunnerService"));

export { GetApprunnerServicesResult } from "./getApprunnerServices";
export const getApprunnerServices: typeof import("./getApprunnerServices").getApprunnerServices = null as any;
export const getApprunnerServicesOutput: typeof import("./getApprunnerServices").getApprunnerServicesOutput = null as any;
utilities.lazyLoad(exports, ["getApprunnerServices","getApprunnerServicesOutput"], () => require("./getApprunnerServices"));

export { GetApprunnerVpcConnectorArgs, GetApprunnerVpcConnectorResult, GetApprunnerVpcConnectorOutputArgs } from "./getApprunnerVpcConnector";
export const getApprunnerVpcConnector: typeof import("./getApprunnerVpcConnector").getApprunnerVpcConnector = null as any;
export const getApprunnerVpcConnectorOutput: typeof import("./getApprunnerVpcConnector").getApprunnerVpcConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getApprunnerVpcConnector","getApprunnerVpcConnectorOutput"], () => require("./getApprunnerVpcConnector"));

export { GetApprunnerVpcConnectorsResult } from "./getApprunnerVpcConnectors";
export const getApprunnerVpcConnectors: typeof import("./getApprunnerVpcConnectors").getApprunnerVpcConnectors = null as any;
export const getApprunnerVpcConnectorsOutput: typeof import("./getApprunnerVpcConnectors").getApprunnerVpcConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getApprunnerVpcConnectors","getApprunnerVpcConnectorsOutput"], () => require("./getApprunnerVpcConnectors"));

export { GetApprunnerVpcIngressConnectionArgs, GetApprunnerVpcIngressConnectionResult, GetApprunnerVpcIngressConnectionOutputArgs } from "./getApprunnerVpcIngressConnection";
export const getApprunnerVpcIngressConnection: typeof import("./getApprunnerVpcIngressConnection").getApprunnerVpcIngressConnection = null as any;
export const getApprunnerVpcIngressConnectionOutput: typeof import("./getApprunnerVpcIngressConnection").getApprunnerVpcIngressConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getApprunnerVpcIngressConnection","getApprunnerVpcIngressConnectionOutput"], () => require("./getApprunnerVpcIngressConnection"));

export { GetApprunnerVpcIngressConnectionsResult } from "./getApprunnerVpcIngressConnections";
export const getApprunnerVpcIngressConnections: typeof import("./getApprunnerVpcIngressConnections").getApprunnerVpcIngressConnections = null as any;
export const getApprunnerVpcIngressConnectionsOutput: typeof import("./getApprunnerVpcIngressConnections").getApprunnerVpcIngressConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getApprunnerVpcIngressConnections","getApprunnerVpcIngressConnectionsOutput"], () => require("./getApprunnerVpcIngressConnections"));

export { GetAppstreamAppBlockArgs, GetAppstreamAppBlockResult, GetAppstreamAppBlockOutputArgs } from "./getAppstreamAppBlock";
export const getAppstreamAppBlock: typeof import("./getAppstreamAppBlock").getAppstreamAppBlock = null as any;
export const getAppstreamAppBlockOutput: typeof import("./getAppstreamAppBlock").getAppstreamAppBlockOutput = null as any;
utilities.lazyLoad(exports, ["getAppstreamAppBlock","getAppstreamAppBlockOutput"], () => require("./getAppstreamAppBlock"));

export { GetAppstreamAppBlockBuilderArgs, GetAppstreamAppBlockBuilderResult, GetAppstreamAppBlockBuilderOutputArgs } from "./getAppstreamAppBlockBuilder";
export const getAppstreamAppBlockBuilder: typeof import("./getAppstreamAppBlockBuilder").getAppstreamAppBlockBuilder = null as any;
export const getAppstreamAppBlockBuilderOutput: typeof import("./getAppstreamAppBlockBuilder").getAppstreamAppBlockBuilderOutput = null as any;
utilities.lazyLoad(exports, ["getAppstreamAppBlockBuilder","getAppstreamAppBlockBuilderOutput"], () => require("./getAppstreamAppBlockBuilder"));

export { GetAppstreamAppBlockBuildersResult } from "./getAppstreamAppBlockBuilders";
export const getAppstreamAppBlockBuilders: typeof import("./getAppstreamAppBlockBuilders").getAppstreamAppBlockBuilders = null as any;
export const getAppstreamAppBlockBuildersOutput: typeof import("./getAppstreamAppBlockBuilders").getAppstreamAppBlockBuildersOutput = null as any;
utilities.lazyLoad(exports, ["getAppstreamAppBlockBuilders","getAppstreamAppBlockBuildersOutput"], () => require("./getAppstreamAppBlockBuilders"));

export { GetAppstreamApplicationArgs, GetAppstreamApplicationResult, GetAppstreamApplicationOutputArgs } from "./getAppstreamApplication";
export const getAppstreamApplication: typeof import("./getAppstreamApplication").getAppstreamApplication = null as any;
export const getAppstreamApplicationOutput: typeof import("./getAppstreamApplication").getAppstreamApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getAppstreamApplication","getAppstreamApplicationOutput"], () => require("./getAppstreamApplication"));

export { GetAppstreamApplicationEntitlementAssociationArgs, GetAppstreamApplicationEntitlementAssociationResult, GetAppstreamApplicationEntitlementAssociationOutputArgs } from "./getAppstreamApplicationEntitlementAssociation";
export const getAppstreamApplicationEntitlementAssociation: typeof import("./getAppstreamApplicationEntitlementAssociation").getAppstreamApplicationEntitlementAssociation = null as any;
export const getAppstreamApplicationEntitlementAssociationOutput: typeof import("./getAppstreamApplicationEntitlementAssociation").getAppstreamApplicationEntitlementAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getAppstreamApplicationEntitlementAssociation","getAppstreamApplicationEntitlementAssociationOutput"], () => require("./getAppstreamApplicationEntitlementAssociation"));

export { GetAppstreamApplicationFleetAssociationArgs, GetAppstreamApplicationFleetAssociationResult, GetAppstreamApplicationFleetAssociationOutputArgs } from "./getAppstreamApplicationFleetAssociation";
export const getAppstreamApplicationFleetAssociation: typeof import("./getAppstreamApplicationFleetAssociation").getAppstreamApplicationFleetAssociation = null as any;
export const getAppstreamApplicationFleetAssociationOutput: typeof import("./getAppstreamApplicationFleetAssociation").getAppstreamApplicationFleetAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getAppstreamApplicationFleetAssociation","getAppstreamApplicationFleetAssociationOutput"], () => require("./getAppstreamApplicationFleetAssociation"));

export { GetAppstreamDirectoryConfigArgs, GetAppstreamDirectoryConfigResult, GetAppstreamDirectoryConfigOutputArgs } from "./getAppstreamDirectoryConfig";
export const getAppstreamDirectoryConfig: typeof import("./getAppstreamDirectoryConfig").getAppstreamDirectoryConfig = null as any;
export const getAppstreamDirectoryConfigOutput: typeof import("./getAppstreamDirectoryConfig").getAppstreamDirectoryConfigOutput = null as any;
utilities.lazyLoad(exports, ["getAppstreamDirectoryConfig","getAppstreamDirectoryConfigOutput"], () => require("./getAppstreamDirectoryConfig"));

export { GetAppstreamDirectoryConfigsResult } from "./getAppstreamDirectoryConfigs";
export const getAppstreamDirectoryConfigs: typeof import("./getAppstreamDirectoryConfigs").getAppstreamDirectoryConfigs = null as any;
export const getAppstreamDirectoryConfigsOutput: typeof import("./getAppstreamDirectoryConfigs").getAppstreamDirectoryConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getAppstreamDirectoryConfigs","getAppstreamDirectoryConfigsOutput"], () => require("./getAppstreamDirectoryConfigs"));

export { GetAppstreamEntitlementArgs, GetAppstreamEntitlementResult, GetAppstreamEntitlementOutputArgs } from "./getAppstreamEntitlement";
export const getAppstreamEntitlement: typeof import("./getAppstreamEntitlement").getAppstreamEntitlement = null as any;
export const getAppstreamEntitlementOutput: typeof import("./getAppstreamEntitlement").getAppstreamEntitlementOutput = null as any;
utilities.lazyLoad(exports, ["getAppstreamEntitlement","getAppstreamEntitlementOutput"], () => require("./getAppstreamEntitlement"));

export { GetAppstreamImageBuilderArgs, GetAppstreamImageBuilderResult, GetAppstreamImageBuilderOutputArgs } from "./getAppstreamImageBuilder";
export const getAppstreamImageBuilder: typeof import("./getAppstreamImageBuilder").getAppstreamImageBuilder = null as any;
export const getAppstreamImageBuilderOutput: typeof import("./getAppstreamImageBuilder").getAppstreamImageBuilderOutput = null as any;
utilities.lazyLoad(exports, ["getAppstreamImageBuilder","getAppstreamImageBuilderOutput"], () => require("./getAppstreamImageBuilder"));

export { GetAppstreamImageBuildersResult } from "./getAppstreamImageBuilders";
export const getAppstreamImageBuilders: typeof import("./getAppstreamImageBuilders").getAppstreamImageBuilders = null as any;
export const getAppstreamImageBuildersOutput: typeof import("./getAppstreamImageBuilders").getAppstreamImageBuildersOutput = null as any;
utilities.lazyLoad(exports, ["getAppstreamImageBuilders","getAppstreamImageBuildersOutput"], () => require("./getAppstreamImageBuilders"));

export { GetAppsyncDomainNameArgs, GetAppsyncDomainNameResult, GetAppsyncDomainNameOutputArgs } from "./getAppsyncDomainName";
export const getAppsyncDomainName: typeof import("./getAppsyncDomainName").getAppsyncDomainName = null as any;
export const getAppsyncDomainNameOutput: typeof import("./getAppsyncDomainName").getAppsyncDomainNameOutput = null as any;
utilities.lazyLoad(exports, ["getAppsyncDomainName","getAppsyncDomainNameOutput"], () => require("./getAppsyncDomainName"));

export { GetAppsyncDomainNameApiAssociationArgs, GetAppsyncDomainNameApiAssociationResult, GetAppsyncDomainNameApiAssociationOutputArgs } from "./getAppsyncDomainNameApiAssociation";
export const getAppsyncDomainNameApiAssociation: typeof import("./getAppsyncDomainNameApiAssociation").getAppsyncDomainNameApiAssociation = null as any;
export const getAppsyncDomainNameApiAssociationOutput: typeof import("./getAppsyncDomainNameApiAssociation").getAppsyncDomainNameApiAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getAppsyncDomainNameApiAssociation","getAppsyncDomainNameApiAssociationOutput"], () => require("./getAppsyncDomainNameApiAssociation"));

export { GetAppsyncDomainNamesResult } from "./getAppsyncDomainNames";
export const getAppsyncDomainNames: typeof import("./getAppsyncDomainNames").getAppsyncDomainNames = null as any;
export const getAppsyncDomainNamesOutput: typeof import("./getAppsyncDomainNames").getAppsyncDomainNamesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsyncDomainNames","getAppsyncDomainNamesOutput"], () => require("./getAppsyncDomainNames"));

export { GetAppsyncFunctionConfigurationArgs, GetAppsyncFunctionConfigurationResult, GetAppsyncFunctionConfigurationOutputArgs } from "./getAppsyncFunctionConfiguration";
export const getAppsyncFunctionConfiguration: typeof import("./getAppsyncFunctionConfiguration").getAppsyncFunctionConfiguration = null as any;
export const getAppsyncFunctionConfigurationOutput: typeof import("./getAppsyncFunctionConfiguration").getAppsyncFunctionConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getAppsyncFunctionConfiguration","getAppsyncFunctionConfigurationOutput"], () => require("./getAppsyncFunctionConfiguration"));

export { GetAppsyncResolverArgs, GetAppsyncResolverResult, GetAppsyncResolverOutputArgs } from "./getAppsyncResolver";
export const getAppsyncResolver: typeof import("./getAppsyncResolver").getAppsyncResolver = null as any;
export const getAppsyncResolverOutput: typeof import("./getAppsyncResolver").getAppsyncResolverOutput = null as any;
utilities.lazyLoad(exports, ["getAppsyncResolver","getAppsyncResolverOutput"], () => require("./getAppsyncResolver"));

export { GetAppsyncSourceApiAssociationArgs, GetAppsyncSourceApiAssociationResult, GetAppsyncSourceApiAssociationOutputArgs } from "./getAppsyncSourceApiAssociation";
export const getAppsyncSourceApiAssociation: typeof import("./getAppsyncSourceApiAssociation").getAppsyncSourceApiAssociation = null as any;
export const getAppsyncSourceApiAssociationOutput: typeof import("./getAppsyncSourceApiAssociation").getAppsyncSourceApiAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getAppsyncSourceApiAssociation","getAppsyncSourceApiAssociationOutput"], () => require("./getAppsyncSourceApiAssociation"));

export { GetApptestTestCaseArgs, GetApptestTestCaseResult, GetApptestTestCaseOutputArgs } from "./getApptestTestCase";
export const getApptestTestCase: typeof import("./getApptestTestCase").getApptestTestCase = null as any;
export const getApptestTestCaseOutput: typeof import("./getApptestTestCase").getApptestTestCaseOutput = null as any;
utilities.lazyLoad(exports, ["getApptestTestCase","getApptestTestCaseOutput"], () => require("./getApptestTestCase"));

export { GetApptestTestCasesResult } from "./getApptestTestCases";
export const getApptestTestCases: typeof import("./getApptestTestCases").getApptestTestCases = null as any;
export const getApptestTestCasesOutput: typeof import("./getApptestTestCases").getApptestTestCasesOutput = null as any;
utilities.lazyLoad(exports, ["getApptestTestCases","getApptestTestCasesOutput"], () => require("./getApptestTestCases"));

export { GetApsRuleGroupsNamespaceArgs, GetApsRuleGroupsNamespaceResult, GetApsRuleGroupsNamespaceOutputArgs } from "./getApsRuleGroupsNamespace";
export const getApsRuleGroupsNamespace: typeof import("./getApsRuleGroupsNamespace").getApsRuleGroupsNamespace = null as any;
export const getApsRuleGroupsNamespaceOutput: typeof import("./getApsRuleGroupsNamespace").getApsRuleGroupsNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getApsRuleGroupsNamespace","getApsRuleGroupsNamespaceOutput"], () => require("./getApsRuleGroupsNamespace"));

export { GetApsScraperArgs, GetApsScraperResult, GetApsScraperOutputArgs } from "./getApsScraper";
export const getApsScraper: typeof import("./getApsScraper").getApsScraper = null as any;
export const getApsScraperOutput: typeof import("./getApsScraper").getApsScraperOutput = null as any;
utilities.lazyLoad(exports, ["getApsScraper","getApsScraperOutput"], () => require("./getApsScraper"));

export { GetApsScrapersResult } from "./getApsScrapers";
export const getApsScrapers: typeof import("./getApsScrapers").getApsScrapers = null as any;
export const getApsScrapersOutput: typeof import("./getApsScrapers").getApsScrapersOutput = null as any;
utilities.lazyLoad(exports, ["getApsScrapers","getApsScrapersOutput"], () => require("./getApsScrapers"));

export { GetApsWorkspaceArgs, GetApsWorkspaceResult, GetApsWorkspaceOutputArgs } from "./getApsWorkspace";
export const getApsWorkspace: typeof import("./getApsWorkspace").getApsWorkspace = null as any;
export const getApsWorkspaceOutput: typeof import("./getApsWorkspace").getApsWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getApsWorkspace","getApsWorkspaceOutput"], () => require("./getApsWorkspace"));

export { GetApsWorkspacesResult } from "./getApsWorkspaces";
export const getApsWorkspaces: typeof import("./getApsWorkspaces").getApsWorkspaces = null as any;
export const getApsWorkspacesOutput: typeof import("./getApsWorkspaces").getApsWorkspacesOutput = null as any;
utilities.lazyLoad(exports, ["getApsWorkspaces","getApsWorkspacesOutput"], () => require("./getApsWorkspaces"));

export { GetArczonalshiftAutoshiftObserverNotificationStatusArgs, GetArczonalshiftAutoshiftObserverNotificationStatusResult, GetArczonalshiftAutoshiftObserverNotificationStatusOutputArgs } from "./getArczonalshiftAutoshiftObserverNotificationStatus";
export const getArczonalshiftAutoshiftObserverNotificationStatus: typeof import("./getArczonalshiftAutoshiftObserverNotificationStatus").getArczonalshiftAutoshiftObserverNotificationStatus = null as any;
export const getArczonalshiftAutoshiftObserverNotificationStatusOutput: typeof import("./getArczonalshiftAutoshiftObserverNotificationStatus").getArczonalshiftAutoshiftObserverNotificationStatusOutput = null as any;
utilities.lazyLoad(exports, ["getArczonalshiftAutoshiftObserverNotificationStatus","getArczonalshiftAutoshiftObserverNotificationStatusOutput"], () => require("./getArczonalshiftAutoshiftObserverNotificationStatus"));

export { GetArczonalshiftAutoshiftObserverNotificationStatusesResult } from "./getArczonalshiftAutoshiftObserverNotificationStatuses";
export const getArczonalshiftAutoshiftObserverNotificationStatuses: typeof import("./getArczonalshiftAutoshiftObserverNotificationStatuses").getArczonalshiftAutoshiftObserverNotificationStatuses = null as any;
export const getArczonalshiftAutoshiftObserverNotificationStatusesOutput: typeof import("./getArczonalshiftAutoshiftObserverNotificationStatuses").getArczonalshiftAutoshiftObserverNotificationStatusesOutput = null as any;
utilities.lazyLoad(exports, ["getArczonalshiftAutoshiftObserverNotificationStatuses","getArczonalshiftAutoshiftObserverNotificationStatusesOutput"], () => require("./getArczonalshiftAutoshiftObserverNotificationStatuses"));

export { GetArczonalshiftZonalAutoshiftConfigurationArgs, GetArczonalshiftZonalAutoshiftConfigurationResult, GetArczonalshiftZonalAutoshiftConfigurationOutputArgs } from "./getArczonalshiftZonalAutoshiftConfiguration";
export const getArczonalshiftZonalAutoshiftConfiguration: typeof import("./getArczonalshiftZonalAutoshiftConfiguration").getArczonalshiftZonalAutoshiftConfiguration = null as any;
export const getArczonalshiftZonalAutoshiftConfigurationOutput: typeof import("./getArczonalshiftZonalAutoshiftConfiguration").getArczonalshiftZonalAutoshiftConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getArczonalshiftZonalAutoshiftConfiguration","getArczonalshiftZonalAutoshiftConfigurationOutput"], () => require("./getArczonalshiftZonalAutoshiftConfiguration"));

export { GetArczonalshiftZonalAutoshiftConfigurationsResult } from "./getArczonalshiftZonalAutoshiftConfigurations";
export const getArczonalshiftZonalAutoshiftConfigurations: typeof import("./getArczonalshiftZonalAutoshiftConfigurations").getArczonalshiftZonalAutoshiftConfigurations = null as any;
export const getArczonalshiftZonalAutoshiftConfigurationsOutput: typeof import("./getArczonalshiftZonalAutoshiftConfigurations").getArczonalshiftZonalAutoshiftConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getArczonalshiftZonalAutoshiftConfigurations","getArczonalshiftZonalAutoshiftConfigurationsOutput"], () => require("./getArczonalshiftZonalAutoshiftConfigurations"));

export { GetAthenaCapacityReservationArgs, GetAthenaCapacityReservationResult, GetAthenaCapacityReservationOutputArgs } from "./getAthenaCapacityReservation";
export const getAthenaCapacityReservation: typeof import("./getAthenaCapacityReservation").getAthenaCapacityReservation = null as any;
export const getAthenaCapacityReservationOutput: typeof import("./getAthenaCapacityReservation").getAthenaCapacityReservationOutput = null as any;
utilities.lazyLoad(exports, ["getAthenaCapacityReservation","getAthenaCapacityReservationOutput"], () => require("./getAthenaCapacityReservation"));

export { GetAthenaCapacityReservationsResult } from "./getAthenaCapacityReservations";
export const getAthenaCapacityReservations: typeof import("./getAthenaCapacityReservations").getAthenaCapacityReservations = null as any;
export const getAthenaCapacityReservationsOutput: typeof import("./getAthenaCapacityReservations").getAthenaCapacityReservationsOutput = null as any;
utilities.lazyLoad(exports, ["getAthenaCapacityReservations","getAthenaCapacityReservationsOutput"], () => require("./getAthenaCapacityReservations"));

export { GetAthenaDataCatalogArgs, GetAthenaDataCatalogResult, GetAthenaDataCatalogOutputArgs } from "./getAthenaDataCatalog";
export const getAthenaDataCatalog: typeof import("./getAthenaDataCatalog").getAthenaDataCatalog = null as any;
export const getAthenaDataCatalogOutput: typeof import("./getAthenaDataCatalog").getAthenaDataCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getAthenaDataCatalog","getAthenaDataCatalogOutput"], () => require("./getAthenaDataCatalog"));

export { GetAthenaDataCatalogsResult } from "./getAthenaDataCatalogs";
export const getAthenaDataCatalogs: typeof import("./getAthenaDataCatalogs").getAthenaDataCatalogs = null as any;
export const getAthenaDataCatalogsOutput: typeof import("./getAthenaDataCatalogs").getAthenaDataCatalogsOutput = null as any;
utilities.lazyLoad(exports, ["getAthenaDataCatalogs","getAthenaDataCatalogsOutput"], () => require("./getAthenaDataCatalogs"));

export { GetAthenaNamedQueriesResult } from "./getAthenaNamedQueries";
export const getAthenaNamedQueries: typeof import("./getAthenaNamedQueries").getAthenaNamedQueries = null as any;
export const getAthenaNamedQueriesOutput: typeof import("./getAthenaNamedQueries").getAthenaNamedQueriesOutput = null as any;
utilities.lazyLoad(exports, ["getAthenaNamedQueries","getAthenaNamedQueriesOutput"], () => require("./getAthenaNamedQueries"));

export { GetAthenaNamedQueryArgs, GetAthenaNamedQueryResult, GetAthenaNamedQueryOutputArgs } from "./getAthenaNamedQuery";
export const getAthenaNamedQuery: typeof import("./getAthenaNamedQuery").getAthenaNamedQuery = null as any;
export const getAthenaNamedQueryOutput: typeof import("./getAthenaNamedQuery").getAthenaNamedQueryOutput = null as any;
utilities.lazyLoad(exports, ["getAthenaNamedQuery","getAthenaNamedQueryOutput"], () => require("./getAthenaNamedQuery"));

export { GetAthenaPreparedStatementArgs, GetAthenaPreparedStatementResult, GetAthenaPreparedStatementOutputArgs } from "./getAthenaPreparedStatement";
export const getAthenaPreparedStatement: typeof import("./getAthenaPreparedStatement").getAthenaPreparedStatement = null as any;
export const getAthenaPreparedStatementOutput: typeof import("./getAthenaPreparedStatement").getAthenaPreparedStatementOutput = null as any;
utilities.lazyLoad(exports, ["getAthenaPreparedStatement","getAthenaPreparedStatementOutput"], () => require("./getAthenaPreparedStatement"));

export { GetAthenaWorkGroupArgs, GetAthenaWorkGroupResult, GetAthenaWorkGroupOutputArgs } from "./getAthenaWorkGroup";
export const getAthenaWorkGroup: typeof import("./getAthenaWorkGroup").getAthenaWorkGroup = null as any;
export const getAthenaWorkGroupOutput: typeof import("./getAthenaWorkGroup").getAthenaWorkGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAthenaWorkGroup","getAthenaWorkGroupOutput"], () => require("./getAthenaWorkGroup"));

export { GetAthenaWorkGroupsResult } from "./getAthenaWorkGroups";
export const getAthenaWorkGroups: typeof import("./getAthenaWorkGroups").getAthenaWorkGroups = null as any;
export const getAthenaWorkGroupsOutput: typeof import("./getAthenaWorkGroups").getAthenaWorkGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAthenaWorkGroups","getAthenaWorkGroupsOutput"], () => require("./getAthenaWorkGroups"));

export { GetAuditmanagerAssessmentArgs, GetAuditmanagerAssessmentResult, GetAuditmanagerAssessmentOutputArgs } from "./getAuditmanagerAssessment";
export const getAuditmanagerAssessment: typeof import("./getAuditmanagerAssessment").getAuditmanagerAssessment = null as any;
export const getAuditmanagerAssessmentOutput: typeof import("./getAuditmanagerAssessment").getAuditmanagerAssessmentOutput = null as any;
utilities.lazyLoad(exports, ["getAuditmanagerAssessment","getAuditmanagerAssessmentOutput"], () => require("./getAuditmanagerAssessment"));

export { GetAuditmanagerAssessmentsResult } from "./getAuditmanagerAssessments";
export const getAuditmanagerAssessments: typeof import("./getAuditmanagerAssessments").getAuditmanagerAssessments = null as any;
export const getAuditmanagerAssessmentsOutput: typeof import("./getAuditmanagerAssessments").getAuditmanagerAssessmentsOutput = null as any;
utilities.lazyLoad(exports, ["getAuditmanagerAssessments","getAuditmanagerAssessmentsOutput"], () => require("./getAuditmanagerAssessments"));

export { GetAutoscalingAutoScalingGroupArgs, GetAutoscalingAutoScalingGroupResult, GetAutoscalingAutoScalingGroupOutputArgs } from "./getAutoscalingAutoScalingGroup";
export const getAutoscalingAutoScalingGroup: typeof import("./getAutoscalingAutoScalingGroup").getAutoscalingAutoScalingGroup = null as any;
export const getAutoscalingAutoScalingGroupOutput: typeof import("./getAutoscalingAutoScalingGroup").getAutoscalingAutoScalingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingAutoScalingGroup","getAutoscalingAutoScalingGroupOutput"], () => require("./getAutoscalingAutoScalingGroup"));

export { GetAutoscalingAutoScalingGroupsResult } from "./getAutoscalingAutoScalingGroups";
export const getAutoscalingAutoScalingGroups: typeof import("./getAutoscalingAutoScalingGroups").getAutoscalingAutoScalingGroups = null as any;
export const getAutoscalingAutoScalingGroupsOutput: typeof import("./getAutoscalingAutoScalingGroups").getAutoscalingAutoScalingGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingAutoScalingGroups","getAutoscalingAutoScalingGroupsOutput"], () => require("./getAutoscalingAutoScalingGroups"));

export { GetAutoscalingLaunchConfigurationArgs, GetAutoscalingLaunchConfigurationResult, GetAutoscalingLaunchConfigurationOutputArgs } from "./getAutoscalingLaunchConfiguration";
export const getAutoscalingLaunchConfiguration: typeof import("./getAutoscalingLaunchConfiguration").getAutoscalingLaunchConfiguration = null as any;
export const getAutoscalingLaunchConfigurationOutput: typeof import("./getAutoscalingLaunchConfiguration").getAutoscalingLaunchConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingLaunchConfiguration","getAutoscalingLaunchConfigurationOutput"], () => require("./getAutoscalingLaunchConfiguration"));

export { GetAutoscalingLaunchConfigurationsResult } from "./getAutoscalingLaunchConfigurations";
export const getAutoscalingLaunchConfigurations: typeof import("./getAutoscalingLaunchConfigurations").getAutoscalingLaunchConfigurations = null as any;
export const getAutoscalingLaunchConfigurationsOutput: typeof import("./getAutoscalingLaunchConfigurations").getAutoscalingLaunchConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingLaunchConfigurations","getAutoscalingLaunchConfigurationsOutput"], () => require("./getAutoscalingLaunchConfigurations"));

export { GetAutoscalingLifecycleHookArgs, GetAutoscalingLifecycleHookResult, GetAutoscalingLifecycleHookOutputArgs } from "./getAutoscalingLifecycleHook";
export const getAutoscalingLifecycleHook: typeof import("./getAutoscalingLifecycleHook").getAutoscalingLifecycleHook = null as any;
export const getAutoscalingLifecycleHookOutput: typeof import("./getAutoscalingLifecycleHook").getAutoscalingLifecycleHookOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingLifecycleHook","getAutoscalingLifecycleHookOutput"], () => require("./getAutoscalingLifecycleHook"));

export { GetAutoscalingLifecycleHooksResult } from "./getAutoscalingLifecycleHooks";
export const getAutoscalingLifecycleHooks: typeof import("./getAutoscalingLifecycleHooks").getAutoscalingLifecycleHooks = null as any;
export const getAutoscalingLifecycleHooksOutput: typeof import("./getAutoscalingLifecycleHooks").getAutoscalingLifecycleHooksOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingLifecycleHooks","getAutoscalingLifecycleHooksOutput"], () => require("./getAutoscalingLifecycleHooks"));

export { GetAutoscalingScalingPoliciesResult } from "./getAutoscalingScalingPolicies";
export const getAutoscalingScalingPolicies: typeof import("./getAutoscalingScalingPolicies").getAutoscalingScalingPolicies = null as any;
export const getAutoscalingScalingPoliciesOutput: typeof import("./getAutoscalingScalingPolicies").getAutoscalingScalingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingScalingPolicies","getAutoscalingScalingPoliciesOutput"], () => require("./getAutoscalingScalingPolicies"));

export { GetAutoscalingScalingPolicyArgs, GetAutoscalingScalingPolicyResult, GetAutoscalingScalingPolicyOutputArgs } from "./getAutoscalingScalingPolicy";
export const getAutoscalingScalingPolicy: typeof import("./getAutoscalingScalingPolicy").getAutoscalingScalingPolicy = null as any;
export const getAutoscalingScalingPolicyOutput: typeof import("./getAutoscalingScalingPolicy").getAutoscalingScalingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingScalingPolicy","getAutoscalingScalingPolicyOutput"], () => require("./getAutoscalingScalingPolicy"));

export { GetAutoscalingScheduledActionArgs, GetAutoscalingScheduledActionResult, GetAutoscalingScheduledActionOutputArgs } from "./getAutoscalingScheduledAction";
export const getAutoscalingScheduledAction: typeof import("./getAutoscalingScheduledAction").getAutoscalingScheduledAction = null as any;
export const getAutoscalingScheduledActionOutput: typeof import("./getAutoscalingScheduledAction").getAutoscalingScheduledActionOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingScheduledAction","getAutoscalingScheduledActionOutput"], () => require("./getAutoscalingScheduledAction"));

export { GetAutoscalingScheduledActionsResult } from "./getAutoscalingScheduledActions";
export const getAutoscalingScheduledActions: typeof import("./getAutoscalingScheduledActions").getAutoscalingScheduledActions = null as any;
export const getAutoscalingScheduledActionsOutput: typeof import("./getAutoscalingScheduledActions").getAutoscalingScheduledActionsOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingScheduledActions","getAutoscalingScheduledActionsOutput"], () => require("./getAutoscalingScheduledActions"));

export { GetAutoscalingWarmPoolArgs, GetAutoscalingWarmPoolResult, GetAutoscalingWarmPoolOutputArgs } from "./getAutoscalingWarmPool";
export const getAutoscalingWarmPool: typeof import("./getAutoscalingWarmPool").getAutoscalingWarmPool = null as any;
export const getAutoscalingWarmPoolOutput: typeof import("./getAutoscalingWarmPool").getAutoscalingWarmPoolOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingWarmPool","getAutoscalingWarmPoolOutput"], () => require("./getAutoscalingWarmPool"));

export { GetB2biCapabilitiesResult } from "./getB2biCapabilities";
export const getB2biCapabilities: typeof import("./getB2biCapabilities").getB2biCapabilities = null as any;
export const getB2biCapabilitiesOutput: typeof import("./getB2biCapabilities").getB2biCapabilitiesOutput = null as any;
utilities.lazyLoad(exports, ["getB2biCapabilities","getB2biCapabilitiesOutput"], () => require("./getB2biCapabilities"));

export { GetB2biCapabilityArgs, GetB2biCapabilityResult, GetB2biCapabilityOutputArgs } from "./getB2biCapability";
export const getB2biCapability: typeof import("./getB2biCapability").getB2biCapability = null as any;
export const getB2biCapabilityOutput: typeof import("./getB2biCapability").getB2biCapabilityOutput = null as any;
utilities.lazyLoad(exports, ["getB2biCapability","getB2biCapabilityOutput"], () => require("./getB2biCapability"));

export { GetB2biPartnershipArgs, GetB2biPartnershipResult, GetB2biPartnershipOutputArgs } from "./getB2biPartnership";
export const getB2biPartnership: typeof import("./getB2biPartnership").getB2biPartnership = null as any;
export const getB2biPartnershipOutput: typeof import("./getB2biPartnership").getB2biPartnershipOutput = null as any;
utilities.lazyLoad(exports, ["getB2biPartnership","getB2biPartnershipOutput"], () => require("./getB2biPartnership"));

export { GetB2biPartnershipsResult } from "./getB2biPartnerships";
export const getB2biPartnerships: typeof import("./getB2biPartnerships").getB2biPartnerships = null as any;
export const getB2biPartnershipsOutput: typeof import("./getB2biPartnerships").getB2biPartnershipsOutput = null as any;
utilities.lazyLoad(exports, ["getB2biPartnerships","getB2biPartnershipsOutput"], () => require("./getB2biPartnerships"));

export { GetB2biProfileArgs, GetB2biProfileResult, GetB2biProfileOutputArgs } from "./getB2biProfile";
export const getB2biProfile: typeof import("./getB2biProfile").getB2biProfile = null as any;
export const getB2biProfileOutput: typeof import("./getB2biProfile").getB2biProfileOutput = null as any;
utilities.lazyLoad(exports, ["getB2biProfile","getB2biProfileOutput"], () => require("./getB2biProfile"));

export { GetB2biProfilesResult } from "./getB2biProfiles";
export const getB2biProfiles: typeof import("./getB2biProfiles").getB2biProfiles = null as any;
export const getB2biProfilesOutput: typeof import("./getB2biProfiles").getB2biProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getB2biProfiles","getB2biProfilesOutput"], () => require("./getB2biProfiles"));

export { GetB2biTransformerArgs, GetB2biTransformerResult, GetB2biTransformerOutputArgs } from "./getB2biTransformer";
export const getB2biTransformer: typeof import("./getB2biTransformer").getB2biTransformer = null as any;
export const getB2biTransformerOutput: typeof import("./getB2biTransformer").getB2biTransformerOutput = null as any;
utilities.lazyLoad(exports, ["getB2biTransformer","getB2biTransformerOutput"], () => require("./getB2biTransformer"));

export { GetB2biTransformersResult } from "./getB2biTransformers";
export const getB2biTransformers: typeof import("./getB2biTransformers").getB2biTransformers = null as any;
export const getB2biTransformersOutput: typeof import("./getB2biTransformers").getB2biTransformersOutput = null as any;
utilities.lazyLoad(exports, ["getB2biTransformers","getB2biTransformersOutput"], () => require("./getB2biTransformers"));

export { GetBackupBackupPlanArgs, GetBackupBackupPlanResult, GetBackupBackupPlanOutputArgs } from "./getBackupBackupPlan";
export const getBackupBackupPlan: typeof import("./getBackupBackupPlan").getBackupBackupPlan = null as any;
export const getBackupBackupPlanOutput: typeof import("./getBackupBackupPlan").getBackupBackupPlanOutput = null as any;
utilities.lazyLoad(exports, ["getBackupBackupPlan","getBackupBackupPlanOutput"], () => require("./getBackupBackupPlan"));

export { GetBackupBackupPlansResult } from "./getBackupBackupPlans";
export const getBackupBackupPlans: typeof import("./getBackupBackupPlans").getBackupBackupPlans = null as any;
export const getBackupBackupPlansOutput: typeof import("./getBackupBackupPlans").getBackupBackupPlansOutput = null as any;
utilities.lazyLoad(exports, ["getBackupBackupPlans","getBackupBackupPlansOutput"], () => require("./getBackupBackupPlans"));

export { GetBackupBackupSelectionArgs, GetBackupBackupSelectionResult, GetBackupBackupSelectionOutputArgs } from "./getBackupBackupSelection";
export const getBackupBackupSelection: typeof import("./getBackupBackupSelection").getBackupBackupSelection = null as any;
export const getBackupBackupSelectionOutput: typeof import("./getBackupBackupSelection").getBackupBackupSelectionOutput = null as any;
utilities.lazyLoad(exports, ["getBackupBackupSelection","getBackupBackupSelectionOutput"], () => require("./getBackupBackupSelection"));

export { GetBackupBackupSelectionsResult } from "./getBackupBackupSelections";
export const getBackupBackupSelections: typeof import("./getBackupBackupSelections").getBackupBackupSelections = null as any;
export const getBackupBackupSelectionsOutput: typeof import("./getBackupBackupSelections").getBackupBackupSelectionsOutput = null as any;
utilities.lazyLoad(exports, ["getBackupBackupSelections","getBackupBackupSelectionsOutput"], () => require("./getBackupBackupSelections"));

export { GetBackupBackupVaultArgs, GetBackupBackupVaultResult, GetBackupBackupVaultOutputArgs } from "./getBackupBackupVault";
export const getBackupBackupVault: typeof import("./getBackupBackupVault").getBackupBackupVault = null as any;
export const getBackupBackupVaultOutput: typeof import("./getBackupBackupVault").getBackupBackupVaultOutput = null as any;
utilities.lazyLoad(exports, ["getBackupBackupVault","getBackupBackupVaultOutput"], () => require("./getBackupBackupVault"));

export { GetBackupBackupVaultsResult } from "./getBackupBackupVaults";
export const getBackupBackupVaults: typeof import("./getBackupBackupVaults").getBackupBackupVaults = null as any;
export const getBackupBackupVaultsOutput: typeof import("./getBackupBackupVaults").getBackupBackupVaultsOutput = null as any;
utilities.lazyLoad(exports, ["getBackupBackupVaults","getBackupBackupVaultsOutput"], () => require("./getBackupBackupVaults"));

export { GetBackupFrameworkArgs, GetBackupFrameworkResult, GetBackupFrameworkOutputArgs } from "./getBackupFramework";
export const getBackupFramework: typeof import("./getBackupFramework").getBackupFramework = null as any;
export const getBackupFrameworkOutput: typeof import("./getBackupFramework").getBackupFrameworkOutput = null as any;
utilities.lazyLoad(exports, ["getBackupFramework","getBackupFrameworkOutput"], () => require("./getBackupFramework"));

export { GetBackupFrameworksResult } from "./getBackupFrameworks";
export const getBackupFrameworks: typeof import("./getBackupFrameworks").getBackupFrameworks = null as any;
export const getBackupFrameworksOutput: typeof import("./getBackupFrameworks").getBackupFrameworksOutput = null as any;
utilities.lazyLoad(exports, ["getBackupFrameworks","getBackupFrameworksOutput"], () => require("./getBackupFrameworks"));

export { GetBackupReportPlanArgs, GetBackupReportPlanResult, GetBackupReportPlanOutputArgs } from "./getBackupReportPlan";
export const getBackupReportPlan: typeof import("./getBackupReportPlan").getBackupReportPlan = null as any;
export const getBackupReportPlanOutput: typeof import("./getBackupReportPlan").getBackupReportPlanOutput = null as any;
utilities.lazyLoad(exports, ["getBackupReportPlan","getBackupReportPlanOutput"], () => require("./getBackupReportPlan"));

export { GetBackupReportPlansResult } from "./getBackupReportPlans";
export const getBackupReportPlans: typeof import("./getBackupReportPlans").getBackupReportPlans = null as any;
export const getBackupReportPlansOutput: typeof import("./getBackupReportPlans").getBackupReportPlansOutput = null as any;
utilities.lazyLoad(exports, ["getBackupReportPlans","getBackupReportPlansOutput"], () => require("./getBackupReportPlans"));

export { GetBackupRestoreTestingPlanArgs, GetBackupRestoreTestingPlanResult, GetBackupRestoreTestingPlanOutputArgs } from "./getBackupRestoreTestingPlan";
export const getBackupRestoreTestingPlan: typeof import("./getBackupRestoreTestingPlan").getBackupRestoreTestingPlan = null as any;
export const getBackupRestoreTestingPlanOutput: typeof import("./getBackupRestoreTestingPlan").getBackupRestoreTestingPlanOutput = null as any;
utilities.lazyLoad(exports, ["getBackupRestoreTestingPlan","getBackupRestoreTestingPlanOutput"], () => require("./getBackupRestoreTestingPlan"));

export { GetBackupRestoreTestingPlansResult } from "./getBackupRestoreTestingPlans";
export const getBackupRestoreTestingPlans: typeof import("./getBackupRestoreTestingPlans").getBackupRestoreTestingPlans = null as any;
export const getBackupRestoreTestingPlansOutput: typeof import("./getBackupRestoreTestingPlans").getBackupRestoreTestingPlansOutput = null as any;
utilities.lazyLoad(exports, ["getBackupRestoreTestingPlans","getBackupRestoreTestingPlansOutput"], () => require("./getBackupRestoreTestingPlans"));

export { GetBackupRestoreTestingSelectionArgs, GetBackupRestoreTestingSelectionResult, GetBackupRestoreTestingSelectionOutputArgs } from "./getBackupRestoreTestingSelection";
export const getBackupRestoreTestingSelection: typeof import("./getBackupRestoreTestingSelection").getBackupRestoreTestingSelection = null as any;
export const getBackupRestoreTestingSelectionOutput: typeof import("./getBackupRestoreTestingSelection").getBackupRestoreTestingSelectionOutput = null as any;
utilities.lazyLoad(exports, ["getBackupRestoreTestingSelection","getBackupRestoreTestingSelectionOutput"], () => require("./getBackupRestoreTestingSelection"));

export { GetBackupRestoreTestingSelectionsResult } from "./getBackupRestoreTestingSelections";
export const getBackupRestoreTestingSelections: typeof import("./getBackupRestoreTestingSelections").getBackupRestoreTestingSelections = null as any;
export const getBackupRestoreTestingSelectionsOutput: typeof import("./getBackupRestoreTestingSelections").getBackupRestoreTestingSelectionsOutput = null as any;
utilities.lazyLoad(exports, ["getBackupRestoreTestingSelections","getBackupRestoreTestingSelectionsOutput"], () => require("./getBackupRestoreTestingSelections"));

export { GetBackupgatewayHypervisorArgs, GetBackupgatewayHypervisorResult, GetBackupgatewayHypervisorOutputArgs } from "./getBackupgatewayHypervisor";
export const getBackupgatewayHypervisor: typeof import("./getBackupgatewayHypervisor").getBackupgatewayHypervisor = null as any;
export const getBackupgatewayHypervisorOutput: typeof import("./getBackupgatewayHypervisor").getBackupgatewayHypervisorOutput = null as any;
utilities.lazyLoad(exports, ["getBackupgatewayHypervisor","getBackupgatewayHypervisorOutput"], () => require("./getBackupgatewayHypervisor"));

export { GetBackupgatewayHypervisorsResult } from "./getBackupgatewayHypervisors";
export const getBackupgatewayHypervisors: typeof import("./getBackupgatewayHypervisors").getBackupgatewayHypervisors = null as any;
export const getBackupgatewayHypervisorsOutput: typeof import("./getBackupgatewayHypervisors").getBackupgatewayHypervisorsOutput = null as any;
utilities.lazyLoad(exports, ["getBackupgatewayHypervisors","getBackupgatewayHypervisorsOutput"], () => require("./getBackupgatewayHypervisors"));

export { GetBatchComputeEnvironmentArgs, GetBatchComputeEnvironmentResult, GetBatchComputeEnvironmentOutputArgs } from "./getBatchComputeEnvironment";
export const getBatchComputeEnvironment: typeof import("./getBatchComputeEnvironment").getBatchComputeEnvironment = null as any;
export const getBatchComputeEnvironmentOutput: typeof import("./getBatchComputeEnvironment").getBatchComputeEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getBatchComputeEnvironment","getBatchComputeEnvironmentOutput"], () => require("./getBatchComputeEnvironment"));

export { GetBatchComputeEnvironmentsResult } from "./getBatchComputeEnvironments";
export const getBatchComputeEnvironments: typeof import("./getBatchComputeEnvironments").getBatchComputeEnvironments = null as any;
export const getBatchComputeEnvironmentsOutput: typeof import("./getBatchComputeEnvironments").getBatchComputeEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getBatchComputeEnvironments","getBatchComputeEnvironmentsOutput"], () => require("./getBatchComputeEnvironments"));

export { GetBatchJobQueueArgs, GetBatchJobQueueResult, GetBatchJobQueueOutputArgs } from "./getBatchJobQueue";
export const getBatchJobQueue: typeof import("./getBatchJobQueue").getBatchJobQueue = null as any;
export const getBatchJobQueueOutput: typeof import("./getBatchJobQueue").getBatchJobQueueOutput = null as any;
utilities.lazyLoad(exports, ["getBatchJobQueue","getBatchJobQueueOutput"], () => require("./getBatchJobQueue"));

export { GetBatchJobQueuesResult } from "./getBatchJobQueues";
export const getBatchJobQueues: typeof import("./getBatchJobQueues").getBatchJobQueues = null as any;
export const getBatchJobQueuesOutput: typeof import("./getBatchJobQueues").getBatchJobQueuesOutput = null as any;
utilities.lazyLoad(exports, ["getBatchJobQueues","getBatchJobQueuesOutput"], () => require("./getBatchJobQueues"));

export { GetBatchSchedulingPoliciesResult } from "./getBatchSchedulingPolicies";
export const getBatchSchedulingPolicies: typeof import("./getBatchSchedulingPolicies").getBatchSchedulingPolicies = null as any;
export const getBatchSchedulingPoliciesOutput: typeof import("./getBatchSchedulingPolicies").getBatchSchedulingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getBatchSchedulingPolicies","getBatchSchedulingPoliciesOutput"], () => require("./getBatchSchedulingPolicies"));

export { GetBatchSchedulingPolicyArgs, GetBatchSchedulingPolicyResult, GetBatchSchedulingPolicyOutputArgs } from "./getBatchSchedulingPolicy";
export const getBatchSchedulingPolicy: typeof import("./getBatchSchedulingPolicy").getBatchSchedulingPolicy = null as any;
export const getBatchSchedulingPolicyOutput: typeof import("./getBatchSchedulingPolicy").getBatchSchedulingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBatchSchedulingPolicy","getBatchSchedulingPolicyOutput"], () => require("./getBatchSchedulingPolicy"));

export { GetBedrockAgentArgs, GetBedrockAgentResult, GetBedrockAgentOutputArgs } from "./getBedrockAgent";
export const getBedrockAgent: typeof import("./getBedrockAgent").getBedrockAgent = null as any;
export const getBedrockAgentOutput: typeof import("./getBedrockAgent").getBedrockAgentOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockAgent","getBedrockAgentOutput"], () => require("./getBedrockAgent"));

export { GetBedrockAgentAliasArgs, GetBedrockAgentAliasResult, GetBedrockAgentAliasOutputArgs } from "./getBedrockAgentAlias";
export const getBedrockAgentAlias: typeof import("./getBedrockAgentAlias").getBedrockAgentAlias = null as any;
export const getBedrockAgentAliasOutput: typeof import("./getBedrockAgentAlias").getBedrockAgentAliasOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockAgentAlias","getBedrockAgentAliasOutput"], () => require("./getBedrockAgentAlias"));

export { GetBedrockAgentsResult } from "./getBedrockAgents";
export const getBedrockAgents: typeof import("./getBedrockAgents").getBedrockAgents = null as any;
export const getBedrockAgentsOutput: typeof import("./getBedrockAgents").getBedrockAgentsOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockAgents","getBedrockAgentsOutput"], () => require("./getBedrockAgents"));

export { GetBedrockDataSourceArgs, GetBedrockDataSourceResult, GetBedrockDataSourceOutputArgs } from "./getBedrockDataSource";
export const getBedrockDataSource: typeof import("./getBedrockDataSource").getBedrockDataSource = null as any;
export const getBedrockDataSourceOutput: typeof import("./getBedrockDataSource").getBedrockDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockDataSource","getBedrockDataSourceOutput"], () => require("./getBedrockDataSource"));

export { GetBedrockFlowAliasArgs, GetBedrockFlowAliasResult, GetBedrockFlowAliasOutputArgs } from "./getBedrockFlowAlias";
export const getBedrockFlowAlias: typeof import("./getBedrockFlowAlias").getBedrockFlowAlias = null as any;
export const getBedrockFlowAliasOutput: typeof import("./getBedrockFlowAlias").getBedrockFlowAliasOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockFlowAlias","getBedrockFlowAliasOutput"], () => require("./getBedrockFlowAlias"));

export { GetBedrockFlowVersionArgs, GetBedrockFlowVersionResult, GetBedrockFlowVersionOutputArgs } from "./getBedrockFlowVersion";
export const getBedrockFlowVersion: typeof import("./getBedrockFlowVersion").getBedrockFlowVersion = null as any;
export const getBedrockFlowVersionOutput: typeof import("./getBedrockFlowVersion").getBedrockFlowVersionOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockFlowVersion","getBedrockFlowVersionOutput"], () => require("./getBedrockFlowVersion"));

export { GetBedrockGuardrailArgs, GetBedrockGuardrailResult, GetBedrockGuardrailOutputArgs } from "./getBedrockGuardrail";
export const getBedrockGuardrail: typeof import("./getBedrockGuardrail").getBedrockGuardrail = null as any;
export const getBedrockGuardrailOutput: typeof import("./getBedrockGuardrail").getBedrockGuardrailOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockGuardrail","getBedrockGuardrailOutput"], () => require("./getBedrockGuardrail"));

export { GetBedrockGuardrailVersionArgs, GetBedrockGuardrailVersionResult, GetBedrockGuardrailVersionOutputArgs } from "./getBedrockGuardrailVersion";
export const getBedrockGuardrailVersion: typeof import("./getBedrockGuardrailVersion").getBedrockGuardrailVersion = null as any;
export const getBedrockGuardrailVersionOutput: typeof import("./getBedrockGuardrailVersion").getBedrockGuardrailVersionOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockGuardrailVersion","getBedrockGuardrailVersionOutput"], () => require("./getBedrockGuardrailVersion"));

export { GetBedrockGuardrailsResult } from "./getBedrockGuardrails";
export const getBedrockGuardrails: typeof import("./getBedrockGuardrails").getBedrockGuardrails = null as any;
export const getBedrockGuardrailsOutput: typeof import("./getBedrockGuardrails").getBedrockGuardrailsOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockGuardrails","getBedrockGuardrailsOutput"], () => require("./getBedrockGuardrails"));

export { GetBedrockKnowledgeBaseArgs, GetBedrockKnowledgeBaseResult, GetBedrockKnowledgeBaseOutputArgs } from "./getBedrockKnowledgeBase";
export const getBedrockKnowledgeBase: typeof import("./getBedrockKnowledgeBase").getBedrockKnowledgeBase = null as any;
export const getBedrockKnowledgeBaseOutput: typeof import("./getBedrockKnowledgeBase").getBedrockKnowledgeBaseOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockKnowledgeBase","getBedrockKnowledgeBaseOutput"], () => require("./getBedrockKnowledgeBase"));

export { GetBedrockKnowledgeBasesResult } from "./getBedrockKnowledgeBases";
export const getBedrockKnowledgeBases: typeof import("./getBedrockKnowledgeBases").getBedrockKnowledgeBases = null as any;
export const getBedrockKnowledgeBasesOutput: typeof import("./getBedrockKnowledgeBases").getBedrockKnowledgeBasesOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockKnowledgeBases","getBedrockKnowledgeBasesOutput"], () => require("./getBedrockKnowledgeBases"));

export { GetBedrockPromptArgs, GetBedrockPromptResult, GetBedrockPromptOutputArgs } from "./getBedrockPrompt";
export const getBedrockPrompt: typeof import("./getBedrockPrompt").getBedrockPrompt = null as any;
export const getBedrockPromptOutput: typeof import("./getBedrockPrompt").getBedrockPromptOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockPrompt","getBedrockPromptOutput"], () => require("./getBedrockPrompt"));

export { GetBedrockPromptVersionArgs, GetBedrockPromptVersionResult, GetBedrockPromptVersionOutputArgs } from "./getBedrockPromptVersion";
export const getBedrockPromptVersion: typeof import("./getBedrockPromptVersion").getBedrockPromptVersion = null as any;
export const getBedrockPromptVersionOutput: typeof import("./getBedrockPromptVersion").getBedrockPromptVersionOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockPromptVersion","getBedrockPromptVersionOutput"], () => require("./getBedrockPromptVersion"));

export { GetBedrockPromptsResult } from "./getBedrockPrompts";
export const getBedrockPrompts: typeof import("./getBedrockPrompts").getBedrockPrompts = null as any;
export const getBedrockPromptsOutput: typeof import("./getBedrockPrompts").getBedrockPromptsOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockPrompts","getBedrockPromptsOutput"], () => require("./getBedrockPrompts"));

export { GetBillingconductorBillingGroupArgs, GetBillingconductorBillingGroupResult, GetBillingconductorBillingGroupOutputArgs } from "./getBillingconductorBillingGroup";
export const getBillingconductorBillingGroup: typeof import("./getBillingconductorBillingGroup").getBillingconductorBillingGroup = null as any;
export const getBillingconductorBillingGroupOutput: typeof import("./getBillingconductorBillingGroup").getBillingconductorBillingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getBillingconductorBillingGroup","getBillingconductorBillingGroupOutput"], () => require("./getBillingconductorBillingGroup"));

export { GetBillingconductorBillingGroupsResult } from "./getBillingconductorBillingGroups";
export const getBillingconductorBillingGroups: typeof import("./getBillingconductorBillingGroups").getBillingconductorBillingGroups = null as any;
export const getBillingconductorBillingGroupsOutput: typeof import("./getBillingconductorBillingGroups").getBillingconductorBillingGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getBillingconductorBillingGroups","getBillingconductorBillingGroupsOutput"], () => require("./getBillingconductorBillingGroups"));

export { GetBillingconductorCustomLineItemArgs, GetBillingconductorCustomLineItemResult, GetBillingconductorCustomLineItemOutputArgs } from "./getBillingconductorCustomLineItem";
export const getBillingconductorCustomLineItem: typeof import("./getBillingconductorCustomLineItem").getBillingconductorCustomLineItem = null as any;
export const getBillingconductorCustomLineItemOutput: typeof import("./getBillingconductorCustomLineItem").getBillingconductorCustomLineItemOutput = null as any;
utilities.lazyLoad(exports, ["getBillingconductorCustomLineItem","getBillingconductorCustomLineItemOutput"], () => require("./getBillingconductorCustomLineItem"));

export { GetBillingconductorCustomLineItemsResult } from "./getBillingconductorCustomLineItems";
export const getBillingconductorCustomLineItems: typeof import("./getBillingconductorCustomLineItems").getBillingconductorCustomLineItems = null as any;
export const getBillingconductorCustomLineItemsOutput: typeof import("./getBillingconductorCustomLineItems").getBillingconductorCustomLineItemsOutput = null as any;
utilities.lazyLoad(exports, ["getBillingconductorCustomLineItems","getBillingconductorCustomLineItemsOutput"], () => require("./getBillingconductorCustomLineItems"));

export { GetBillingconductorPricingPlanArgs, GetBillingconductorPricingPlanResult, GetBillingconductorPricingPlanOutputArgs } from "./getBillingconductorPricingPlan";
export const getBillingconductorPricingPlan: typeof import("./getBillingconductorPricingPlan").getBillingconductorPricingPlan = null as any;
export const getBillingconductorPricingPlanOutput: typeof import("./getBillingconductorPricingPlan").getBillingconductorPricingPlanOutput = null as any;
utilities.lazyLoad(exports, ["getBillingconductorPricingPlan","getBillingconductorPricingPlanOutput"], () => require("./getBillingconductorPricingPlan"));

export { GetBillingconductorPricingPlansResult } from "./getBillingconductorPricingPlans";
export const getBillingconductorPricingPlans: typeof import("./getBillingconductorPricingPlans").getBillingconductorPricingPlans = null as any;
export const getBillingconductorPricingPlansOutput: typeof import("./getBillingconductorPricingPlans").getBillingconductorPricingPlansOutput = null as any;
utilities.lazyLoad(exports, ["getBillingconductorPricingPlans","getBillingconductorPricingPlansOutput"], () => require("./getBillingconductorPricingPlans"));

export { GetBillingconductorPricingRuleArgs, GetBillingconductorPricingRuleResult, GetBillingconductorPricingRuleOutputArgs } from "./getBillingconductorPricingRule";
export const getBillingconductorPricingRule: typeof import("./getBillingconductorPricingRule").getBillingconductorPricingRule = null as any;
export const getBillingconductorPricingRuleOutput: typeof import("./getBillingconductorPricingRule").getBillingconductorPricingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getBillingconductorPricingRule","getBillingconductorPricingRuleOutput"], () => require("./getBillingconductorPricingRule"));

export { GetBillingconductorPricingRulesResult } from "./getBillingconductorPricingRules";
export const getBillingconductorPricingRules: typeof import("./getBillingconductorPricingRules").getBillingconductorPricingRules = null as any;
export const getBillingconductorPricingRulesOutput: typeof import("./getBillingconductorPricingRules").getBillingconductorPricingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getBillingconductorPricingRules","getBillingconductorPricingRulesOutput"], () => require("./getBillingconductorPricingRules"));

export { GetBudgetsBudgetsActionArgs, GetBudgetsBudgetsActionResult, GetBudgetsBudgetsActionOutputArgs } from "./getBudgetsBudgetsAction";
export const getBudgetsBudgetsAction: typeof import("./getBudgetsBudgetsAction").getBudgetsBudgetsAction = null as any;
export const getBudgetsBudgetsActionOutput: typeof import("./getBudgetsBudgetsAction").getBudgetsBudgetsActionOutput = null as any;
utilities.lazyLoad(exports, ["getBudgetsBudgetsAction","getBudgetsBudgetsActionOutput"], () => require("./getBudgetsBudgetsAction"));

export { GetBudgetsBudgetsActionsResult } from "./getBudgetsBudgetsActions";
export const getBudgetsBudgetsActions: typeof import("./getBudgetsBudgetsActions").getBudgetsBudgetsActions = null as any;
export const getBudgetsBudgetsActionsOutput: typeof import("./getBudgetsBudgetsActions").getBudgetsBudgetsActionsOutput = null as any;
utilities.lazyLoad(exports, ["getBudgetsBudgetsActions","getBudgetsBudgetsActionsOutput"], () => require("./getBudgetsBudgetsActions"));

export { GetCassandraKeyspaceArgs, GetCassandraKeyspaceResult, GetCassandraKeyspaceOutputArgs } from "./getCassandraKeyspace";
export const getCassandraKeyspace: typeof import("./getCassandraKeyspace").getCassandraKeyspace = null as any;
export const getCassandraKeyspaceOutput: typeof import("./getCassandraKeyspace").getCassandraKeyspaceOutput = null as any;
utilities.lazyLoad(exports, ["getCassandraKeyspace","getCassandraKeyspaceOutput"], () => require("./getCassandraKeyspace"));

export { GetCassandraKeyspacesResult } from "./getCassandraKeyspaces";
export const getCassandraKeyspaces: typeof import("./getCassandraKeyspaces").getCassandraKeyspaces = null as any;
export const getCassandraKeyspacesOutput: typeof import("./getCassandraKeyspaces").getCassandraKeyspacesOutput = null as any;
utilities.lazyLoad(exports, ["getCassandraKeyspaces","getCassandraKeyspacesOutput"], () => require("./getCassandraKeyspaces"));

export { GetCassandraTableArgs, GetCassandraTableResult, GetCassandraTableOutputArgs } from "./getCassandraTable";
export const getCassandraTable: typeof import("./getCassandraTable").getCassandraTable = null as any;
export const getCassandraTableOutput: typeof import("./getCassandraTable").getCassandraTableOutput = null as any;
utilities.lazyLoad(exports, ["getCassandraTable","getCassandraTableOutput"], () => require("./getCassandraTable"));

export { GetCassandraTablesResult } from "./getCassandraTables";
export const getCassandraTables: typeof import("./getCassandraTables").getCassandraTables = null as any;
export const getCassandraTablesOutput: typeof import("./getCassandraTables").getCassandraTablesOutput = null as any;
utilities.lazyLoad(exports, ["getCassandraTables","getCassandraTablesOutput"], () => require("./getCassandraTables"));

export { GetCeAnomalyMonitorArgs, GetCeAnomalyMonitorResult, GetCeAnomalyMonitorOutputArgs } from "./getCeAnomalyMonitor";
export const getCeAnomalyMonitor: typeof import("./getCeAnomalyMonitor").getCeAnomalyMonitor = null as any;
export const getCeAnomalyMonitorOutput: typeof import("./getCeAnomalyMonitor").getCeAnomalyMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getCeAnomalyMonitor","getCeAnomalyMonitorOutput"], () => require("./getCeAnomalyMonitor"));

export { GetCeAnomalyMonitorsResult } from "./getCeAnomalyMonitors";
export const getCeAnomalyMonitors: typeof import("./getCeAnomalyMonitors").getCeAnomalyMonitors = null as any;
export const getCeAnomalyMonitorsOutput: typeof import("./getCeAnomalyMonitors").getCeAnomalyMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getCeAnomalyMonitors","getCeAnomalyMonitorsOutput"], () => require("./getCeAnomalyMonitors"));

export { GetCeAnomalySubscriptionArgs, GetCeAnomalySubscriptionResult, GetCeAnomalySubscriptionOutputArgs } from "./getCeAnomalySubscription";
export const getCeAnomalySubscription: typeof import("./getCeAnomalySubscription").getCeAnomalySubscription = null as any;
export const getCeAnomalySubscriptionOutput: typeof import("./getCeAnomalySubscription").getCeAnomalySubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getCeAnomalySubscription","getCeAnomalySubscriptionOutput"], () => require("./getCeAnomalySubscription"));

export { GetCeAnomalySubscriptionsResult } from "./getCeAnomalySubscriptions";
export const getCeAnomalySubscriptions: typeof import("./getCeAnomalySubscriptions").getCeAnomalySubscriptions = null as any;
export const getCeAnomalySubscriptionsOutput: typeof import("./getCeAnomalySubscriptions").getCeAnomalySubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getCeAnomalySubscriptions","getCeAnomalySubscriptionsOutput"], () => require("./getCeAnomalySubscriptions"));

export { GetCeCostCategoriesResult } from "./getCeCostCategories";
export const getCeCostCategories: typeof import("./getCeCostCategories").getCeCostCategories = null as any;
export const getCeCostCategoriesOutput: typeof import("./getCeCostCategories").getCeCostCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getCeCostCategories","getCeCostCategoriesOutput"], () => require("./getCeCostCategories"));

export { GetCeCostCategoryArgs, GetCeCostCategoryResult, GetCeCostCategoryOutputArgs } from "./getCeCostCategory";
export const getCeCostCategory: typeof import("./getCeCostCategory").getCeCostCategory = null as any;
export const getCeCostCategoryOutput: typeof import("./getCeCostCategory").getCeCostCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getCeCostCategory","getCeCostCategoryOutput"], () => require("./getCeCostCategory"));

export { GetCertificatemanagerAccountArgs, GetCertificatemanagerAccountResult, GetCertificatemanagerAccountOutputArgs } from "./getCertificatemanagerAccount";
export const getCertificatemanagerAccount: typeof import("./getCertificatemanagerAccount").getCertificatemanagerAccount = null as any;
export const getCertificatemanagerAccountOutput: typeof import("./getCertificatemanagerAccount").getCertificatemanagerAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatemanagerAccount","getCertificatemanagerAccountOutput"], () => require("./getCertificatemanagerAccount"));

export { GetChatbotMicrosoftTeamsChannelConfigurationArgs, GetChatbotMicrosoftTeamsChannelConfigurationResult, GetChatbotMicrosoftTeamsChannelConfigurationOutputArgs } from "./getChatbotMicrosoftTeamsChannelConfiguration";
export const getChatbotMicrosoftTeamsChannelConfiguration: typeof import("./getChatbotMicrosoftTeamsChannelConfiguration").getChatbotMicrosoftTeamsChannelConfiguration = null as any;
export const getChatbotMicrosoftTeamsChannelConfigurationOutput: typeof import("./getChatbotMicrosoftTeamsChannelConfiguration").getChatbotMicrosoftTeamsChannelConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getChatbotMicrosoftTeamsChannelConfiguration","getChatbotMicrosoftTeamsChannelConfigurationOutput"], () => require("./getChatbotMicrosoftTeamsChannelConfiguration"));

export { GetChatbotMicrosoftTeamsChannelConfigurationsResult } from "./getChatbotMicrosoftTeamsChannelConfigurations";
export const getChatbotMicrosoftTeamsChannelConfigurations: typeof import("./getChatbotMicrosoftTeamsChannelConfigurations").getChatbotMicrosoftTeamsChannelConfigurations = null as any;
export const getChatbotMicrosoftTeamsChannelConfigurationsOutput: typeof import("./getChatbotMicrosoftTeamsChannelConfigurations").getChatbotMicrosoftTeamsChannelConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getChatbotMicrosoftTeamsChannelConfigurations","getChatbotMicrosoftTeamsChannelConfigurationsOutput"], () => require("./getChatbotMicrosoftTeamsChannelConfigurations"));

export { GetChatbotSlackChannelConfigurationArgs, GetChatbotSlackChannelConfigurationResult, GetChatbotSlackChannelConfigurationOutputArgs } from "./getChatbotSlackChannelConfiguration";
export const getChatbotSlackChannelConfiguration: typeof import("./getChatbotSlackChannelConfiguration").getChatbotSlackChannelConfiguration = null as any;
export const getChatbotSlackChannelConfigurationOutput: typeof import("./getChatbotSlackChannelConfiguration").getChatbotSlackChannelConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getChatbotSlackChannelConfiguration","getChatbotSlackChannelConfigurationOutput"], () => require("./getChatbotSlackChannelConfiguration"));

export { GetChatbotSlackChannelConfigurationsResult } from "./getChatbotSlackChannelConfigurations";
export const getChatbotSlackChannelConfigurations: typeof import("./getChatbotSlackChannelConfigurations").getChatbotSlackChannelConfigurations = null as any;
export const getChatbotSlackChannelConfigurationsOutput: typeof import("./getChatbotSlackChannelConfigurations").getChatbotSlackChannelConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getChatbotSlackChannelConfigurations","getChatbotSlackChannelConfigurationsOutput"], () => require("./getChatbotSlackChannelConfigurations"));

export { GetCleanroomsAnalysisTemplateArgs, GetCleanroomsAnalysisTemplateResult, GetCleanroomsAnalysisTemplateOutputArgs } from "./getCleanroomsAnalysisTemplate";
export const getCleanroomsAnalysisTemplate: typeof import("./getCleanroomsAnalysisTemplate").getCleanroomsAnalysisTemplate = null as any;
export const getCleanroomsAnalysisTemplateOutput: typeof import("./getCleanroomsAnalysisTemplate").getCleanroomsAnalysisTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCleanroomsAnalysisTemplate","getCleanroomsAnalysisTemplateOutput"], () => require("./getCleanroomsAnalysisTemplate"));

export { GetCleanroomsCollaborationArgs, GetCleanroomsCollaborationResult, GetCleanroomsCollaborationOutputArgs } from "./getCleanroomsCollaboration";
export const getCleanroomsCollaboration: typeof import("./getCleanroomsCollaboration").getCleanroomsCollaboration = null as any;
export const getCleanroomsCollaborationOutput: typeof import("./getCleanroomsCollaboration").getCleanroomsCollaborationOutput = null as any;
utilities.lazyLoad(exports, ["getCleanroomsCollaboration","getCleanroomsCollaborationOutput"], () => require("./getCleanroomsCollaboration"));

export { GetCleanroomsCollaborationsResult } from "./getCleanroomsCollaborations";
export const getCleanroomsCollaborations: typeof import("./getCleanroomsCollaborations").getCleanroomsCollaborations = null as any;
export const getCleanroomsCollaborationsOutput: typeof import("./getCleanroomsCollaborations").getCleanroomsCollaborationsOutput = null as any;
utilities.lazyLoad(exports, ["getCleanroomsCollaborations","getCleanroomsCollaborationsOutput"], () => require("./getCleanroomsCollaborations"));

export { GetCleanroomsConfiguredTableArgs, GetCleanroomsConfiguredTableResult, GetCleanroomsConfiguredTableOutputArgs } from "./getCleanroomsConfiguredTable";
export const getCleanroomsConfiguredTable: typeof import("./getCleanroomsConfiguredTable").getCleanroomsConfiguredTable = null as any;
export const getCleanroomsConfiguredTableOutput: typeof import("./getCleanroomsConfiguredTable").getCleanroomsConfiguredTableOutput = null as any;
utilities.lazyLoad(exports, ["getCleanroomsConfiguredTable","getCleanroomsConfiguredTableOutput"], () => require("./getCleanroomsConfiguredTable"));

export { GetCleanroomsConfiguredTableAssociationArgs, GetCleanroomsConfiguredTableAssociationResult, GetCleanroomsConfiguredTableAssociationOutputArgs } from "./getCleanroomsConfiguredTableAssociation";
export const getCleanroomsConfiguredTableAssociation: typeof import("./getCleanroomsConfiguredTableAssociation").getCleanroomsConfiguredTableAssociation = null as any;
export const getCleanroomsConfiguredTableAssociationOutput: typeof import("./getCleanroomsConfiguredTableAssociation").getCleanroomsConfiguredTableAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getCleanroomsConfiguredTableAssociation","getCleanroomsConfiguredTableAssociationOutput"], () => require("./getCleanroomsConfiguredTableAssociation"));

export { GetCleanroomsConfiguredTablesResult } from "./getCleanroomsConfiguredTables";
export const getCleanroomsConfiguredTables: typeof import("./getCleanroomsConfiguredTables").getCleanroomsConfiguredTables = null as any;
export const getCleanroomsConfiguredTablesOutput: typeof import("./getCleanroomsConfiguredTables").getCleanroomsConfiguredTablesOutput = null as any;
utilities.lazyLoad(exports, ["getCleanroomsConfiguredTables","getCleanroomsConfiguredTablesOutput"], () => require("./getCleanroomsConfiguredTables"));

export { GetCleanroomsIdMappingTableArgs, GetCleanroomsIdMappingTableResult, GetCleanroomsIdMappingTableOutputArgs } from "./getCleanroomsIdMappingTable";
export const getCleanroomsIdMappingTable: typeof import("./getCleanroomsIdMappingTable").getCleanroomsIdMappingTable = null as any;
export const getCleanroomsIdMappingTableOutput: typeof import("./getCleanroomsIdMappingTable").getCleanroomsIdMappingTableOutput = null as any;
utilities.lazyLoad(exports, ["getCleanroomsIdMappingTable","getCleanroomsIdMappingTableOutput"], () => require("./getCleanroomsIdMappingTable"));

export { GetCleanroomsMembershipArgs, GetCleanroomsMembershipResult, GetCleanroomsMembershipOutputArgs } from "./getCleanroomsMembership";
export const getCleanroomsMembership: typeof import("./getCleanroomsMembership").getCleanroomsMembership = null as any;
export const getCleanroomsMembershipOutput: typeof import("./getCleanroomsMembership").getCleanroomsMembershipOutput = null as any;
utilities.lazyLoad(exports, ["getCleanroomsMembership","getCleanroomsMembershipOutput"], () => require("./getCleanroomsMembership"));

export { GetCleanroomsMembershipsResult } from "./getCleanroomsMemberships";
export const getCleanroomsMemberships: typeof import("./getCleanroomsMemberships").getCleanroomsMemberships = null as any;
export const getCleanroomsMembershipsOutput: typeof import("./getCleanroomsMemberships").getCleanroomsMembershipsOutput = null as any;
utilities.lazyLoad(exports, ["getCleanroomsMemberships","getCleanroomsMembershipsOutput"], () => require("./getCleanroomsMemberships"));

export { GetCleanroomsPrivacyBudgetTemplateArgs, GetCleanroomsPrivacyBudgetTemplateResult, GetCleanroomsPrivacyBudgetTemplateOutputArgs } from "./getCleanroomsPrivacyBudgetTemplate";
export const getCleanroomsPrivacyBudgetTemplate: typeof import("./getCleanroomsPrivacyBudgetTemplate").getCleanroomsPrivacyBudgetTemplate = null as any;
export const getCleanroomsPrivacyBudgetTemplateOutput: typeof import("./getCleanroomsPrivacyBudgetTemplate").getCleanroomsPrivacyBudgetTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCleanroomsPrivacyBudgetTemplate","getCleanroomsPrivacyBudgetTemplateOutput"], () => require("./getCleanroomsPrivacyBudgetTemplate"));

export { GetCleanroomsmlTrainingDatasetArgs, GetCleanroomsmlTrainingDatasetResult, GetCleanroomsmlTrainingDatasetOutputArgs } from "./getCleanroomsmlTrainingDataset";
export const getCleanroomsmlTrainingDataset: typeof import("./getCleanroomsmlTrainingDataset").getCleanroomsmlTrainingDataset = null as any;
export const getCleanroomsmlTrainingDatasetOutput: typeof import("./getCleanroomsmlTrainingDataset").getCleanroomsmlTrainingDatasetOutput = null as any;
utilities.lazyLoad(exports, ["getCleanroomsmlTrainingDataset","getCleanroomsmlTrainingDatasetOutput"], () => require("./getCleanroomsmlTrainingDataset"));

export { GetCleanroomsmlTrainingDatasetsResult } from "./getCleanroomsmlTrainingDatasets";
export const getCleanroomsmlTrainingDatasets: typeof import("./getCleanroomsmlTrainingDatasets").getCleanroomsmlTrainingDatasets = null as any;
export const getCleanroomsmlTrainingDatasetsOutput: typeof import("./getCleanroomsmlTrainingDatasets").getCleanroomsmlTrainingDatasetsOutput = null as any;
utilities.lazyLoad(exports, ["getCleanroomsmlTrainingDatasets","getCleanroomsmlTrainingDatasetsOutput"], () => require("./getCleanroomsmlTrainingDatasets"));

export { GetCloudformationHookDefaultVersionArgs, GetCloudformationHookDefaultVersionResult, GetCloudformationHookDefaultVersionOutputArgs } from "./getCloudformationHookDefaultVersion";
export const getCloudformationHookDefaultVersion: typeof import("./getCloudformationHookDefaultVersion").getCloudformationHookDefaultVersion = null as any;
export const getCloudformationHookDefaultVersionOutput: typeof import("./getCloudformationHookDefaultVersion").getCloudformationHookDefaultVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationHookDefaultVersion","getCloudformationHookDefaultVersionOutput"], () => require("./getCloudformationHookDefaultVersion"));

export { GetCloudformationHookDefaultVersionsResult } from "./getCloudformationHookDefaultVersions";
export const getCloudformationHookDefaultVersions: typeof import("./getCloudformationHookDefaultVersions").getCloudformationHookDefaultVersions = null as any;
export const getCloudformationHookDefaultVersionsOutput: typeof import("./getCloudformationHookDefaultVersions").getCloudformationHookDefaultVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationHookDefaultVersions","getCloudformationHookDefaultVersionsOutput"], () => require("./getCloudformationHookDefaultVersions"));

export { GetCloudformationHookTypeConfigArgs, GetCloudformationHookTypeConfigResult, GetCloudformationHookTypeConfigOutputArgs } from "./getCloudformationHookTypeConfig";
export const getCloudformationHookTypeConfig: typeof import("./getCloudformationHookTypeConfig").getCloudformationHookTypeConfig = null as any;
export const getCloudformationHookTypeConfigOutput: typeof import("./getCloudformationHookTypeConfig").getCloudformationHookTypeConfigOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationHookTypeConfig","getCloudformationHookTypeConfigOutput"], () => require("./getCloudformationHookTypeConfig"));

export { GetCloudformationHookTypeConfigsResult } from "./getCloudformationHookTypeConfigs";
export const getCloudformationHookTypeConfigs: typeof import("./getCloudformationHookTypeConfigs").getCloudformationHookTypeConfigs = null as any;
export const getCloudformationHookTypeConfigsOutput: typeof import("./getCloudformationHookTypeConfigs").getCloudformationHookTypeConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationHookTypeConfigs","getCloudformationHookTypeConfigsOutput"], () => require("./getCloudformationHookTypeConfigs"));

export { GetCloudformationHookVersionArgs, GetCloudformationHookVersionResult, GetCloudformationHookVersionOutputArgs } from "./getCloudformationHookVersion";
export const getCloudformationHookVersion: typeof import("./getCloudformationHookVersion").getCloudformationHookVersion = null as any;
export const getCloudformationHookVersionOutput: typeof import("./getCloudformationHookVersion").getCloudformationHookVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationHookVersion","getCloudformationHookVersionOutput"], () => require("./getCloudformationHookVersion"));

export { GetCloudformationHookVersionsResult } from "./getCloudformationHookVersions";
export const getCloudformationHookVersions: typeof import("./getCloudformationHookVersions").getCloudformationHookVersions = null as any;
export const getCloudformationHookVersionsOutput: typeof import("./getCloudformationHookVersions").getCloudformationHookVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationHookVersions","getCloudformationHookVersionsOutput"], () => require("./getCloudformationHookVersions"));

export { GetCloudformationModuleDefaultVersionArgs, GetCloudformationModuleDefaultVersionResult, GetCloudformationModuleDefaultVersionOutputArgs } from "./getCloudformationModuleDefaultVersion";
export const getCloudformationModuleDefaultVersion: typeof import("./getCloudformationModuleDefaultVersion").getCloudformationModuleDefaultVersion = null as any;
export const getCloudformationModuleDefaultVersionOutput: typeof import("./getCloudformationModuleDefaultVersion").getCloudformationModuleDefaultVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationModuleDefaultVersion","getCloudformationModuleDefaultVersionOutput"], () => require("./getCloudformationModuleDefaultVersion"));

export { GetCloudformationModuleDefaultVersionsResult } from "./getCloudformationModuleDefaultVersions";
export const getCloudformationModuleDefaultVersions: typeof import("./getCloudformationModuleDefaultVersions").getCloudformationModuleDefaultVersions = null as any;
export const getCloudformationModuleDefaultVersionsOutput: typeof import("./getCloudformationModuleDefaultVersions").getCloudformationModuleDefaultVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationModuleDefaultVersions","getCloudformationModuleDefaultVersionsOutput"], () => require("./getCloudformationModuleDefaultVersions"));

export { GetCloudformationModuleVersionArgs, GetCloudformationModuleVersionResult, GetCloudformationModuleVersionOutputArgs } from "./getCloudformationModuleVersion";
export const getCloudformationModuleVersion: typeof import("./getCloudformationModuleVersion").getCloudformationModuleVersion = null as any;
export const getCloudformationModuleVersionOutput: typeof import("./getCloudformationModuleVersion").getCloudformationModuleVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationModuleVersion","getCloudformationModuleVersionOutput"], () => require("./getCloudformationModuleVersion"));

export { GetCloudformationPublicTypeVersionArgs, GetCloudformationPublicTypeVersionResult, GetCloudformationPublicTypeVersionOutputArgs } from "./getCloudformationPublicTypeVersion";
export const getCloudformationPublicTypeVersion: typeof import("./getCloudformationPublicTypeVersion").getCloudformationPublicTypeVersion = null as any;
export const getCloudformationPublicTypeVersionOutput: typeof import("./getCloudformationPublicTypeVersion").getCloudformationPublicTypeVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationPublicTypeVersion","getCloudformationPublicTypeVersionOutput"], () => require("./getCloudformationPublicTypeVersion"));

export { GetCloudformationPublicTypeVersionsResult } from "./getCloudformationPublicTypeVersions";
export const getCloudformationPublicTypeVersions: typeof import("./getCloudformationPublicTypeVersions").getCloudformationPublicTypeVersions = null as any;
export const getCloudformationPublicTypeVersionsOutput: typeof import("./getCloudformationPublicTypeVersions").getCloudformationPublicTypeVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationPublicTypeVersions","getCloudformationPublicTypeVersionsOutput"], () => require("./getCloudformationPublicTypeVersions"));

export { GetCloudformationPublisherArgs, GetCloudformationPublisherResult, GetCloudformationPublisherOutputArgs } from "./getCloudformationPublisher";
export const getCloudformationPublisher: typeof import("./getCloudformationPublisher").getCloudformationPublisher = null as any;
export const getCloudformationPublisherOutput: typeof import("./getCloudformationPublisher").getCloudformationPublisherOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationPublisher","getCloudformationPublisherOutput"], () => require("./getCloudformationPublisher"));

export { GetCloudformationPublishersResult } from "./getCloudformationPublishers";
export const getCloudformationPublishers: typeof import("./getCloudformationPublishers").getCloudformationPublishers = null as any;
export const getCloudformationPublishersOutput: typeof import("./getCloudformationPublishers").getCloudformationPublishersOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationPublishers","getCloudformationPublishersOutput"], () => require("./getCloudformationPublishers"));

export { GetCloudformationResourceDefaultVersionArgs, GetCloudformationResourceDefaultVersionResult, GetCloudformationResourceDefaultVersionOutputArgs } from "./getCloudformationResourceDefaultVersion";
export const getCloudformationResourceDefaultVersion: typeof import("./getCloudformationResourceDefaultVersion").getCloudformationResourceDefaultVersion = null as any;
export const getCloudformationResourceDefaultVersionOutput: typeof import("./getCloudformationResourceDefaultVersion").getCloudformationResourceDefaultVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationResourceDefaultVersion","getCloudformationResourceDefaultVersionOutput"], () => require("./getCloudformationResourceDefaultVersion"));

export { GetCloudformationResourceDefaultVersionsResult } from "./getCloudformationResourceDefaultVersions";
export const getCloudformationResourceDefaultVersions: typeof import("./getCloudformationResourceDefaultVersions").getCloudformationResourceDefaultVersions = null as any;
export const getCloudformationResourceDefaultVersionsOutput: typeof import("./getCloudformationResourceDefaultVersions").getCloudformationResourceDefaultVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationResourceDefaultVersions","getCloudformationResourceDefaultVersionsOutput"], () => require("./getCloudformationResourceDefaultVersions"));

export { GetCloudformationResourceVersionArgs, GetCloudformationResourceVersionResult, GetCloudformationResourceVersionOutputArgs } from "./getCloudformationResourceVersion";
export const getCloudformationResourceVersion: typeof import("./getCloudformationResourceVersion").getCloudformationResourceVersion = null as any;
export const getCloudformationResourceVersionOutput: typeof import("./getCloudformationResourceVersion").getCloudformationResourceVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationResourceVersion","getCloudformationResourceVersionOutput"], () => require("./getCloudformationResourceVersion"));

export { GetCloudformationResourceVersionsResult } from "./getCloudformationResourceVersions";
export const getCloudformationResourceVersions: typeof import("./getCloudformationResourceVersions").getCloudformationResourceVersions = null as any;
export const getCloudformationResourceVersionsOutput: typeof import("./getCloudformationResourceVersions").getCloudformationResourceVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationResourceVersions","getCloudformationResourceVersionsOutput"], () => require("./getCloudformationResourceVersions"));

export { GetCloudformationStackArgs, GetCloudformationStackResult, GetCloudformationStackOutputArgs } from "./getCloudformationStack";
export const getCloudformationStack: typeof import("./getCloudformationStack").getCloudformationStack = null as any;
export const getCloudformationStackOutput: typeof import("./getCloudformationStack").getCloudformationStackOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationStack","getCloudformationStackOutput"], () => require("./getCloudformationStack"));

export { GetCloudformationStackSetArgs, GetCloudformationStackSetResult, GetCloudformationStackSetOutputArgs } from "./getCloudformationStackSet";
export const getCloudformationStackSet: typeof import("./getCloudformationStackSet").getCloudformationStackSet = null as any;
export const getCloudformationStackSetOutput: typeof import("./getCloudformationStackSet").getCloudformationStackSetOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationStackSet","getCloudformationStackSetOutput"], () => require("./getCloudformationStackSet"));

export { GetCloudformationStackSetsResult } from "./getCloudformationStackSets";
export const getCloudformationStackSets: typeof import("./getCloudformationStackSets").getCloudformationStackSets = null as any;
export const getCloudformationStackSetsOutput: typeof import("./getCloudformationStackSets").getCloudformationStackSetsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationStackSets","getCloudformationStackSetsOutput"], () => require("./getCloudformationStackSets"));

export { GetCloudformationStacksResult } from "./getCloudformationStacks";
export const getCloudformationStacks: typeof import("./getCloudformationStacks").getCloudformationStacks = null as any;
export const getCloudformationStacksOutput: typeof import("./getCloudformationStacks").getCloudformationStacksOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationStacks","getCloudformationStacksOutput"], () => require("./getCloudformationStacks"));

export { GetCloudformationTypeActivationArgs, GetCloudformationTypeActivationResult, GetCloudformationTypeActivationOutputArgs } from "./getCloudformationTypeActivation";
export const getCloudformationTypeActivation: typeof import("./getCloudformationTypeActivation").getCloudformationTypeActivation = null as any;
export const getCloudformationTypeActivationOutput: typeof import("./getCloudformationTypeActivation").getCloudformationTypeActivationOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationTypeActivation","getCloudformationTypeActivationOutput"], () => require("./getCloudformationTypeActivation"));

export { GetCloudformationTypeActivationsResult } from "./getCloudformationTypeActivations";
export const getCloudformationTypeActivations: typeof import("./getCloudformationTypeActivations").getCloudformationTypeActivations = null as any;
export const getCloudformationTypeActivationsOutput: typeof import("./getCloudformationTypeActivations").getCloudformationTypeActivationsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationTypeActivations","getCloudformationTypeActivationsOutput"], () => require("./getCloudformationTypeActivations"));

export { GetCloudfrontCachePoliciesResult } from "./getCloudfrontCachePolicies";
export const getCloudfrontCachePolicies: typeof import("./getCloudfrontCachePolicies").getCloudfrontCachePolicies = null as any;
export const getCloudfrontCachePoliciesOutput: typeof import("./getCloudfrontCachePolicies").getCloudfrontCachePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontCachePolicies","getCloudfrontCachePoliciesOutput"], () => require("./getCloudfrontCachePolicies"));

export { GetCloudfrontCachePolicyArgs, GetCloudfrontCachePolicyResult, GetCloudfrontCachePolicyOutputArgs } from "./getCloudfrontCachePolicy";
export const getCloudfrontCachePolicy: typeof import("./getCloudfrontCachePolicy").getCloudfrontCachePolicy = null as any;
export const getCloudfrontCachePolicyOutput: typeof import("./getCloudfrontCachePolicy").getCloudfrontCachePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontCachePolicy","getCloudfrontCachePolicyOutput"], () => require("./getCloudfrontCachePolicy"));

export { GetCloudfrontCloudfrontOriginAccessIdentitiesResult } from "./getCloudfrontCloudfrontOriginAccessIdentities";
export const getCloudfrontCloudfrontOriginAccessIdentities: typeof import("./getCloudfrontCloudfrontOriginAccessIdentities").getCloudfrontCloudfrontOriginAccessIdentities = null as any;
export const getCloudfrontCloudfrontOriginAccessIdentitiesOutput: typeof import("./getCloudfrontCloudfrontOriginAccessIdentities").getCloudfrontCloudfrontOriginAccessIdentitiesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontCloudfrontOriginAccessIdentities","getCloudfrontCloudfrontOriginAccessIdentitiesOutput"], () => require("./getCloudfrontCloudfrontOriginAccessIdentities"));

export { GetCloudfrontCloudfrontOriginAccessIdentityArgs, GetCloudfrontCloudfrontOriginAccessIdentityResult, GetCloudfrontCloudfrontOriginAccessIdentityOutputArgs } from "./getCloudfrontCloudfrontOriginAccessIdentity";
export const getCloudfrontCloudfrontOriginAccessIdentity: typeof import("./getCloudfrontCloudfrontOriginAccessIdentity").getCloudfrontCloudfrontOriginAccessIdentity = null as any;
export const getCloudfrontCloudfrontOriginAccessIdentityOutput: typeof import("./getCloudfrontCloudfrontOriginAccessIdentity").getCloudfrontCloudfrontOriginAccessIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontCloudfrontOriginAccessIdentity","getCloudfrontCloudfrontOriginAccessIdentityOutput"], () => require("./getCloudfrontCloudfrontOriginAccessIdentity"));

export { GetCloudfrontContinuousDeploymentPoliciesResult } from "./getCloudfrontContinuousDeploymentPolicies";
export const getCloudfrontContinuousDeploymentPolicies: typeof import("./getCloudfrontContinuousDeploymentPolicies").getCloudfrontContinuousDeploymentPolicies = null as any;
export const getCloudfrontContinuousDeploymentPoliciesOutput: typeof import("./getCloudfrontContinuousDeploymentPolicies").getCloudfrontContinuousDeploymentPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontContinuousDeploymentPolicies","getCloudfrontContinuousDeploymentPoliciesOutput"], () => require("./getCloudfrontContinuousDeploymentPolicies"));

export { GetCloudfrontContinuousDeploymentPolicyArgs, GetCloudfrontContinuousDeploymentPolicyResult, GetCloudfrontContinuousDeploymentPolicyOutputArgs } from "./getCloudfrontContinuousDeploymentPolicy";
export const getCloudfrontContinuousDeploymentPolicy: typeof import("./getCloudfrontContinuousDeploymentPolicy").getCloudfrontContinuousDeploymentPolicy = null as any;
export const getCloudfrontContinuousDeploymentPolicyOutput: typeof import("./getCloudfrontContinuousDeploymentPolicy").getCloudfrontContinuousDeploymentPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontContinuousDeploymentPolicy","getCloudfrontContinuousDeploymentPolicyOutput"], () => require("./getCloudfrontContinuousDeploymentPolicy"));

export { GetCloudfrontDistributionsResult } from "./getCloudfrontDistributions";
export const getCloudfrontDistributions: typeof import("./getCloudfrontDistributions").getCloudfrontDistributions = null as any;
export const getCloudfrontDistributionsOutput: typeof import("./getCloudfrontDistributions").getCloudfrontDistributionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontDistributions","getCloudfrontDistributionsOutput"], () => require("./getCloudfrontDistributions"));

export { GetCloudfrontFunctionArgs, GetCloudfrontFunctionResult, GetCloudfrontFunctionOutputArgs } from "./getCloudfrontFunction";
export const getCloudfrontFunction: typeof import("./getCloudfrontFunction").getCloudfrontFunction = null as any;
export const getCloudfrontFunctionOutput: typeof import("./getCloudfrontFunction").getCloudfrontFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontFunction","getCloudfrontFunctionOutput"], () => require("./getCloudfrontFunction"));

export { GetCloudfrontFunctionsResult } from "./getCloudfrontFunctions";
export const getCloudfrontFunctions: typeof import("./getCloudfrontFunctions").getCloudfrontFunctions = null as any;
export const getCloudfrontFunctionsOutput: typeof import("./getCloudfrontFunctions").getCloudfrontFunctionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontFunctions","getCloudfrontFunctionsOutput"], () => require("./getCloudfrontFunctions"));

export { GetCloudfrontKeyGroupArgs, GetCloudfrontKeyGroupResult, GetCloudfrontKeyGroupOutputArgs } from "./getCloudfrontKeyGroup";
export const getCloudfrontKeyGroup: typeof import("./getCloudfrontKeyGroup").getCloudfrontKeyGroup = null as any;
export const getCloudfrontKeyGroupOutput: typeof import("./getCloudfrontKeyGroup").getCloudfrontKeyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontKeyGroup","getCloudfrontKeyGroupOutput"], () => require("./getCloudfrontKeyGroup"));

export { GetCloudfrontKeyGroupsResult } from "./getCloudfrontKeyGroups";
export const getCloudfrontKeyGroups: typeof import("./getCloudfrontKeyGroups").getCloudfrontKeyGroups = null as any;
export const getCloudfrontKeyGroupsOutput: typeof import("./getCloudfrontKeyGroups").getCloudfrontKeyGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontKeyGroups","getCloudfrontKeyGroupsOutput"], () => require("./getCloudfrontKeyGroups"));

export { GetCloudfrontKeyValueStoreArgs, GetCloudfrontKeyValueStoreResult, GetCloudfrontKeyValueStoreOutputArgs } from "./getCloudfrontKeyValueStore";
export const getCloudfrontKeyValueStore: typeof import("./getCloudfrontKeyValueStore").getCloudfrontKeyValueStore = null as any;
export const getCloudfrontKeyValueStoreOutput: typeof import("./getCloudfrontKeyValueStore").getCloudfrontKeyValueStoreOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontKeyValueStore","getCloudfrontKeyValueStoreOutput"], () => require("./getCloudfrontKeyValueStore"));

export { GetCloudfrontKeyValueStoresResult } from "./getCloudfrontKeyValueStores";
export const getCloudfrontKeyValueStores: typeof import("./getCloudfrontKeyValueStores").getCloudfrontKeyValueStores = null as any;
export const getCloudfrontKeyValueStoresOutput: typeof import("./getCloudfrontKeyValueStores").getCloudfrontKeyValueStoresOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontKeyValueStores","getCloudfrontKeyValueStoresOutput"], () => require("./getCloudfrontKeyValueStores"));

export { GetCloudfrontMonitoringSubscriptionArgs, GetCloudfrontMonitoringSubscriptionResult, GetCloudfrontMonitoringSubscriptionOutputArgs } from "./getCloudfrontMonitoringSubscription";
export const getCloudfrontMonitoringSubscription: typeof import("./getCloudfrontMonitoringSubscription").getCloudfrontMonitoringSubscription = null as any;
export const getCloudfrontMonitoringSubscriptionOutput: typeof import("./getCloudfrontMonitoringSubscription").getCloudfrontMonitoringSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontMonitoringSubscription","getCloudfrontMonitoringSubscriptionOutput"], () => require("./getCloudfrontMonitoringSubscription"));

export { GetCloudfrontOriginAccessControlArgs, GetCloudfrontOriginAccessControlResult, GetCloudfrontOriginAccessControlOutputArgs } from "./getCloudfrontOriginAccessControl";
export const getCloudfrontOriginAccessControl: typeof import("./getCloudfrontOriginAccessControl").getCloudfrontOriginAccessControl = null as any;
export const getCloudfrontOriginAccessControlOutput: typeof import("./getCloudfrontOriginAccessControl").getCloudfrontOriginAccessControlOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontOriginAccessControl","getCloudfrontOriginAccessControlOutput"], () => require("./getCloudfrontOriginAccessControl"));

export { GetCloudfrontOriginAccessControlsResult } from "./getCloudfrontOriginAccessControls";
export const getCloudfrontOriginAccessControls: typeof import("./getCloudfrontOriginAccessControls").getCloudfrontOriginAccessControls = null as any;
export const getCloudfrontOriginAccessControlsOutput: typeof import("./getCloudfrontOriginAccessControls").getCloudfrontOriginAccessControlsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontOriginAccessControls","getCloudfrontOriginAccessControlsOutput"], () => require("./getCloudfrontOriginAccessControls"));

export { GetCloudfrontOriginRequestPoliciesResult } from "./getCloudfrontOriginRequestPolicies";
export const getCloudfrontOriginRequestPolicies: typeof import("./getCloudfrontOriginRequestPolicies").getCloudfrontOriginRequestPolicies = null as any;
export const getCloudfrontOriginRequestPoliciesOutput: typeof import("./getCloudfrontOriginRequestPolicies").getCloudfrontOriginRequestPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontOriginRequestPolicies","getCloudfrontOriginRequestPoliciesOutput"], () => require("./getCloudfrontOriginRequestPolicies"));

export { GetCloudfrontOriginRequestPolicyArgs, GetCloudfrontOriginRequestPolicyResult, GetCloudfrontOriginRequestPolicyOutputArgs } from "./getCloudfrontOriginRequestPolicy";
export const getCloudfrontOriginRequestPolicy: typeof import("./getCloudfrontOriginRequestPolicy").getCloudfrontOriginRequestPolicy = null as any;
export const getCloudfrontOriginRequestPolicyOutput: typeof import("./getCloudfrontOriginRequestPolicy").getCloudfrontOriginRequestPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontOriginRequestPolicy","getCloudfrontOriginRequestPolicyOutput"], () => require("./getCloudfrontOriginRequestPolicy"));

export { GetCloudfrontPublicKeyArgs, GetCloudfrontPublicKeyResult, GetCloudfrontPublicKeyOutputArgs } from "./getCloudfrontPublicKey";
export const getCloudfrontPublicKey: typeof import("./getCloudfrontPublicKey").getCloudfrontPublicKey = null as any;
export const getCloudfrontPublicKeyOutput: typeof import("./getCloudfrontPublicKey").getCloudfrontPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontPublicKey","getCloudfrontPublicKeyOutput"], () => require("./getCloudfrontPublicKey"));

export { GetCloudfrontPublicKeysResult } from "./getCloudfrontPublicKeys";
export const getCloudfrontPublicKeys: typeof import("./getCloudfrontPublicKeys").getCloudfrontPublicKeys = null as any;
export const getCloudfrontPublicKeysOutput: typeof import("./getCloudfrontPublicKeys").getCloudfrontPublicKeysOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontPublicKeys","getCloudfrontPublicKeysOutput"], () => require("./getCloudfrontPublicKeys"));

export { GetCloudfrontRealtimeLogConfigArgs, GetCloudfrontRealtimeLogConfigResult, GetCloudfrontRealtimeLogConfigOutputArgs } from "./getCloudfrontRealtimeLogConfig";
export const getCloudfrontRealtimeLogConfig: typeof import("./getCloudfrontRealtimeLogConfig").getCloudfrontRealtimeLogConfig = null as any;
export const getCloudfrontRealtimeLogConfigOutput: typeof import("./getCloudfrontRealtimeLogConfig").getCloudfrontRealtimeLogConfigOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontRealtimeLogConfig","getCloudfrontRealtimeLogConfigOutput"], () => require("./getCloudfrontRealtimeLogConfig"));

export { GetCloudfrontRealtimeLogConfigsResult } from "./getCloudfrontRealtimeLogConfigs";
export const getCloudfrontRealtimeLogConfigs: typeof import("./getCloudfrontRealtimeLogConfigs").getCloudfrontRealtimeLogConfigs = null as any;
export const getCloudfrontRealtimeLogConfigsOutput: typeof import("./getCloudfrontRealtimeLogConfigs").getCloudfrontRealtimeLogConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontRealtimeLogConfigs","getCloudfrontRealtimeLogConfigsOutput"], () => require("./getCloudfrontRealtimeLogConfigs"));

export { GetCloudfrontResponseHeadersPoliciesResult } from "./getCloudfrontResponseHeadersPolicies";
export const getCloudfrontResponseHeadersPolicies: typeof import("./getCloudfrontResponseHeadersPolicies").getCloudfrontResponseHeadersPolicies = null as any;
export const getCloudfrontResponseHeadersPoliciesOutput: typeof import("./getCloudfrontResponseHeadersPolicies").getCloudfrontResponseHeadersPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontResponseHeadersPolicies","getCloudfrontResponseHeadersPoliciesOutput"], () => require("./getCloudfrontResponseHeadersPolicies"));

export { GetCloudfrontResponseHeadersPolicyArgs, GetCloudfrontResponseHeadersPolicyResult, GetCloudfrontResponseHeadersPolicyOutputArgs } from "./getCloudfrontResponseHeadersPolicy";
export const getCloudfrontResponseHeadersPolicy: typeof import("./getCloudfrontResponseHeadersPolicy").getCloudfrontResponseHeadersPolicy = null as any;
export const getCloudfrontResponseHeadersPolicyOutput: typeof import("./getCloudfrontResponseHeadersPolicy").getCloudfrontResponseHeadersPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontResponseHeadersPolicy","getCloudfrontResponseHeadersPolicyOutput"], () => require("./getCloudfrontResponseHeadersPolicy"));

export { GetCloudtrailChannelArgs, GetCloudtrailChannelResult, GetCloudtrailChannelOutputArgs } from "./getCloudtrailChannel";
export const getCloudtrailChannel: typeof import("./getCloudtrailChannel").getCloudtrailChannel = null as any;
export const getCloudtrailChannelOutput: typeof import("./getCloudtrailChannel").getCloudtrailChannelOutput = null as any;
utilities.lazyLoad(exports, ["getCloudtrailChannel","getCloudtrailChannelOutput"], () => require("./getCloudtrailChannel"));

export { GetCloudtrailChannelsResult } from "./getCloudtrailChannels";
export const getCloudtrailChannels: typeof import("./getCloudtrailChannels").getCloudtrailChannels = null as any;
export const getCloudtrailChannelsOutput: typeof import("./getCloudtrailChannels").getCloudtrailChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudtrailChannels","getCloudtrailChannelsOutput"], () => require("./getCloudtrailChannels"));

export { GetCloudtrailEventDataStoreArgs, GetCloudtrailEventDataStoreResult, GetCloudtrailEventDataStoreOutputArgs } from "./getCloudtrailEventDataStore";
export const getCloudtrailEventDataStore: typeof import("./getCloudtrailEventDataStore").getCloudtrailEventDataStore = null as any;
export const getCloudtrailEventDataStoreOutput: typeof import("./getCloudtrailEventDataStore").getCloudtrailEventDataStoreOutput = null as any;
utilities.lazyLoad(exports, ["getCloudtrailEventDataStore","getCloudtrailEventDataStoreOutput"], () => require("./getCloudtrailEventDataStore"));

export { GetCloudtrailEventDataStoresResult } from "./getCloudtrailEventDataStores";
export const getCloudtrailEventDataStores: typeof import("./getCloudtrailEventDataStores").getCloudtrailEventDataStores = null as any;
export const getCloudtrailEventDataStoresOutput: typeof import("./getCloudtrailEventDataStores").getCloudtrailEventDataStoresOutput = null as any;
utilities.lazyLoad(exports, ["getCloudtrailEventDataStores","getCloudtrailEventDataStoresOutput"], () => require("./getCloudtrailEventDataStores"));

export { GetCloudtrailResourcePolicyArgs, GetCloudtrailResourcePolicyResult, GetCloudtrailResourcePolicyOutputArgs } from "./getCloudtrailResourcePolicy";
export const getCloudtrailResourcePolicy: typeof import("./getCloudtrailResourcePolicy").getCloudtrailResourcePolicy = null as any;
export const getCloudtrailResourcePolicyOutput: typeof import("./getCloudtrailResourcePolicy").getCloudtrailResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudtrailResourcePolicy","getCloudtrailResourcePolicyOutput"], () => require("./getCloudtrailResourcePolicy"));

export { GetCloudtrailTrailArgs, GetCloudtrailTrailResult, GetCloudtrailTrailOutputArgs } from "./getCloudtrailTrail";
export const getCloudtrailTrail: typeof import("./getCloudtrailTrail").getCloudtrailTrail = null as any;
export const getCloudtrailTrailOutput: typeof import("./getCloudtrailTrail").getCloudtrailTrailOutput = null as any;
utilities.lazyLoad(exports, ["getCloudtrailTrail","getCloudtrailTrailOutput"], () => require("./getCloudtrailTrail"));

export { GetCloudtrailTrailsResult } from "./getCloudtrailTrails";
export const getCloudtrailTrails: typeof import("./getCloudtrailTrails").getCloudtrailTrails = null as any;
export const getCloudtrailTrailsOutput: typeof import("./getCloudtrailTrails").getCloudtrailTrailsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudtrailTrails","getCloudtrailTrailsOutput"], () => require("./getCloudtrailTrails"));

export { GetCloudwatchAlarmArgs, GetCloudwatchAlarmResult, GetCloudwatchAlarmOutputArgs } from "./getCloudwatchAlarm";
export const getCloudwatchAlarm: typeof import("./getCloudwatchAlarm").getCloudwatchAlarm = null as any;
export const getCloudwatchAlarmOutput: typeof import("./getCloudwatchAlarm").getCloudwatchAlarmOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchAlarm","getCloudwatchAlarmOutput"], () => require("./getCloudwatchAlarm"));

export { GetCloudwatchAlarmsResult } from "./getCloudwatchAlarms";
export const getCloudwatchAlarms: typeof import("./getCloudwatchAlarms").getCloudwatchAlarms = null as any;
export const getCloudwatchAlarmsOutput: typeof import("./getCloudwatchAlarms").getCloudwatchAlarmsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchAlarms","getCloudwatchAlarmsOutput"], () => require("./getCloudwatchAlarms"));

export { GetCloudwatchCompositeAlarmArgs, GetCloudwatchCompositeAlarmResult, GetCloudwatchCompositeAlarmOutputArgs } from "./getCloudwatchCompositeAlarm";
export const getCloudwatchCompositeAlarm: typeof import("./getCloudwatchCompositeAlarm").getCloudwatchCompositeAlarm = null as any;
export const getCloudwatchCompositeAlarmOutput: typeof import("./getCloudwatchCompositeAlarm").getCloudwatchCompositeAlarmOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchCompositeAlarm","getCloudwatchCompositeAlarmOutput"], () => require("./getCloudwatchCompositeAlarm"));

export { GetCloudwatchCompositeAlarmsResult } from "./getCloudwatchCompositeAlarms";
export const getCloudwatchCompositeAlarms: typeof import("./getCloudwatchCompositeAlarms").getCloudwatchCompositeAlarms = null as any;
export const getCloudwatchCompositeAlarmsOutput: typeof import("./getCloudwatchCompositeAlarms").getCloudwatchCompositeAlarmsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchCompositeAlarms","getCloudwatchCompositeAlarmsOutput"], () => require("./getCloudwatchCompositeAlarms"));

export { GetCloudwatchDashboardArgs, GetCloudwatchDashboardResult, GetCloudwatchDashboardOutputArgs } from "./getCloudwatchDashboard";
export const getCloudwatchDashboard: typeof import("./getCloudwatchDashboard").getCloudwatchDashboard = null as any;
export const getCloudwatchDashboardOutput: typeof import("./getCloudwatchDashboard").getCloudwatchDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchDashboard","getCloudwatchDashboardOutput"], () => require("./getCloudwatchDashboard"));

export { GetCloudwatchDashboardsResult } from "./getCloudwatchDashboards";
export const getCloudwatchDashboards: typeof import("./getCloudwatchDashboards").getCloudwatchDashboards = null as any;
export const getCloudwatchDashboardsOutput: typeof import("./getCloudwatchDashboards").getCloudwatchDashboardsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchDashboards","getCloudwatchDashboardsOutput"], () => require("./getCloudwatchDashboards"));

export { GetCloudwatchMetricStreamArgs, GetCloudwatchMetricStreamResult, GetCloudwatchMetricStreamOutputArgs } from "./getCloudwatchMetricStream";
export const getCloudwatchMetricStream: typeof import("./getCloudwatchMetricStream").getCloudwatchMetricStream = null as any;
export const getCloudwatchMetricStreamOutput: typeof import("./getCloudwatchMetricStream").getCloudwatchMetricStreamOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchMetricStream","getCloudwatchMetricStreamOutput"], () => require("./getCloudwatchMetricStream"));

export { GetCloudwatchMetricStreamsResult } from "./getCloudwatchMetricStreams";
export const getCloudwatchMetricStreams: typeof import("./getCloudwatchMetricStreams").getCloudwatchMetricStreams = null as any;
export const getCloudwatchMetricStreamsOutput: typeof import("./getCloudwatchMetricStreams").getCloudwatchMetricStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchMetricStreams","getCloudwatchMetricStreamsOutput"], () => require("./getCloudwatchMetricStreams"));

export { GetCodeartifactDomainArgs, GetCodeartifactDomainResult, GetCodeartifactDomainOutputArgs } from "./getCodeartifactDomain";
export const getCodeartifactDomain: typeof import("./getCodeartifactDomain").getCodeartifactDomain = null as any;
export const getCodeartifactDomainOutput: typeof import("./getCodeartifactDomain").getCodeartifactDomainOutput = null as any;
utilities.lazyLoad(exports, ["getCodeartifactDomain","getCodeartifactDomainOutput"], () => require("./getCodeartifactDomain"));

export { GetCodeartifactDomainsResult } from "./getCodeartifactDomains";
export const getCodeartifactDomains: typeof import("./getCodeartifactDomains").getCodeartifactDomains = null as any;
export const getCodeartifactDomainsOutput: typeof import("./getCodeartifactDomains").getCodeartifactDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getCodeartifactDomains","getCodeartifactDomainsOutput"], () => require("./getCodeartifactDomains"));

export { GetCodeartifactPackageGroupArgs, GetCodeartifactPackageGroupResult, GetCodeartifactPackageGroupOutputArgs } from "./getCodeartifactPackageGroup";
export const getCodeartifactPackageGroup: typeof import("./getCodeartifactPackageGroup").getCodeartifactPackageGroup = null as any;
export const getCodeartifactPackageGroupOutput: typeof import("./getCodeartifactPackageGroup").getCodeartifactPackageGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCodeartifactPackageGroup","getCodeartifactPackageGroupOutput"], () => require("./getCodeartifactPackageGroup"));

export { GetCodeartifactRepositoriesResult } from "./getCodeartifactRepositories";
export const getCodeartifactRepositories: typeof import("./getCodeartifactRepositories").getCodeartifactRepositories = null as any;
export const getCodeartifactRepositoriesOutput: typeof import("./getCodeartifactRepositories").getCodeartifactRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getCodeartifactRepositories","getCodeartifactRepositoriesOutput"], () => require("./getCodeartifactRepositories"));

export { GetCodeartifactRepositoryArgs, GetCodeartifactRepositoryResult, GetCodeartifactRepositoryOutputArgs } from "./getCodeartifactRepository";
export const getCodeartifactRepository: typeof import("./getCodeartifactRepository").getCodeartifactRepository = null as any;
export const getCodeartifactRepositoryOutput: typeof import("./getCodeartifactRepository").getCodeartifactRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getCodeartifactRepository","getCodeartifactRepositoryOutput"], () => require("./getCodeartifactRepository"));

export { GetCodebuildFleetArgs, GetCodebuildFleetResult, GetCodebuildFleetOutputArgs } from "./getCodebuildFleet";
export const getCodebuildFleet: typeof import("./getCodebuildFleet").getCodebuildFleet = null as any;
export const getCodebuildFleetOutput: typeof import("./getCodebuildFleet").getCodebuildFleetOutput = null as any;
utilities.lazyLoad(exports, ["getCodebuildFleet","getCodebuildFleetOutput"], () => require("./getCodebuildFleet"));

export { GetCodebuildFleetsResult } from "./getCodebuildFleets";
export const getCodebuildFleets: typeof import("./getCodebuildFleets").getCodebuildFleets = null as any;
export const getCodebuildFleetsOutput: typeof import("./getCodebuildFleets").getCodebuildFleetsOutput = null as any;
utilities.lazyLoad(exports, ["getCodebuildFleets","getCodebuildFleetsOutput"], () => require("./getCodebuildFleets"));

export { GetCodeconnectionsConnectionArgs, GetCodeconnectionsConnectionResult, GetCodeconnectionsConnectionOutputArgs } from "./getCodeconnectionsConnection";
export const getCodeconnectionsConnection: typeof import("./getCodeconnectionsConnection").getCodeconnectionsConnection = null as any;
export const getCodeconnectionsConnectionOutput: typeof import("./getCodeconnectionsConnection").getCodeconnectionsConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getCodeconnectionsConnection","getCodeconnectionsConnectionOutput"], () => require("./getCodeconnectionsConnection"));

export { GetCodeconnectionsConnectionsResult } from "./getCodeconnectionsConnections";
export const getCodeconnectionsConnections: typeof import("./getCodeconnectionsConnections").getCodeconnectionsConnections = null as any;
export const getCodeconnectionsConnectionsOutput: typeof import("./getCodeconnectionsConnections").getCodeconnectionsConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getCodeconnectionsConnections","getCodeconnectionsConnectionsOutput"], () => require("./getCodeconnectionsConnections"));

export { GetCodedeployApplicationArgs, GetCodedeployApplicationResult, GetCodedeployApplicationOutputArgs } from "./getCodedeployApplication";
export const getCodedeployApplication: typeof import("./getCodedeployApplication").getCodedeployApplication = null as any;
export const getCodedeployApplicationOutput: typeof import("./getCodedeployApplication").getCodedeployApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getCodedeployApplication","getCodedeployApplicationOutput"], () => require("./getCodedeployApplication"));

export { GetCodedeployApplicationsResult } from "./getCodedeployApplications";
export const getCodedeployApplications: typeof import("./getCodedeployApplications").getCodedeployApplications = null as any;
export const getCodedeployApplicationsOutput: typeof import("./getCodedeployApplications").getCodedeployApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getCodedeployApplications","getCodedeployApplicationsOutput"], () => require("./getCodedeployApplications"));

export { GetCodedeployDeploymentConfigArgs, GetCodedeployDeploymentConfigResult, GetCodedeployDeploymentConfigOutputArgs } from "./getCodedeployDeploymentConfig";
export const getCodedeployDeploymentConfig: typeof import("./getCodedeployDeploymentConfig").getCodedeployDeploymentConfig = null as any;
export const getCodedeployDeploymentConfigOutput: typeof import("./getCodedeployDeploymentConfig").getCodedeployDeploymentConfigOutput = null as any;
utilities.lazyLoad(exports, ["getCodedeployDeploymentConfig","getCodedeployDeploymentConfigOutput"], () => require("./getCodedeployDeploymentConfig"));

export { GetCodedeployDeploymentConfigsResult } from "./getCodedeployDeploymentConfigs";
export const getCodedeployDeploymentConfigs: typeof import("./getCodedeployDeploymentConfigs").getCodedeployDeploymentConfigs = null as any;
export const getCodedeployDeploymentConfigsOutput: typeof import("./getCodedeployDeploymentConfigs").getCodedeployDeploymentConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getCodedeployDeploymentConfigs","getCodedeployDeploymentConfigsOutput"], () => require("./getCodedeployDeploymentConfigs"));

export { GetCodeguruprofilerProfilingGroupArgs, GetCodeguruprofilerProfilingGroupResult, GetCodeguruprofilerProfilingGroupOutputArgs } from "./getCodeguruprofilerProfilingGroup";
export const getCodeguruprofilerProfilingGroup: typeof import("./getCodeguruprofilerProfilingGroup").getCodeguruprofilerProfilingGroup = null as any;
export const getCodeguruprofilerProfilingGroupOutput: typeof import("./getCodeguruprofilerProfilingGroup").getCodeguruprofilerProfilingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCodeguruprofilerProfilingGroup","getCodeguruprofilerProfilingGroupOutput"], () => require("./getCodeguruprofilerProfilingGroup"));

export { GetCodeguruprofilerProfilingGroupsResult } from "./getCodeguruprofilerProfilingGroups";
export const getCodeguruprofilerProfilingGroups: typeof import("./getCodeguruprofilerProfilingGroups").getCodeguruprofilerProfilingGroups = null as any;
export const getCodeguruprofilerProfilingGroupsOutput: typeof import("./getCodeguruprofilerProfilingGroups").getCodeguruprofilerProfilingGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCodeguruprofilerProfilingGroups","getCodeguruprofilerProfilingGroupsOutput"], () => require("./getCodeguruprofilerProfilingGroups"));

export { GetCodegurureviewerRepositoryAssociationArgs, GetCodegurureviewerRepositoryAssociationResult, GetCodegurureviewerRepositoryAssociationOutputArgs } from "./getCodegurureviewerRepositoryAssociation";
export const getCodegurureviewerRepositoryAssociation: typeof import("./getCodegurureviewerRepositoryAssociation").getCodegurureviewerRepositoryAssociation = null as any;
export const getCodegurureviewerRepositoryAssociationOutput: typeof import("./getCodegurureviewerRepositoryAssociation").getCodegurureviewerRepositoryAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getCodegurureviewerRepositoryAssociation","getCodegurureviewerRepositoryAssociationOutput"], () => require("./getCodegurureviewerRepositoryAssociation"));

export { GetCodegurureviewerRepositoryAssociationsResult } from "./getCodegurureviewerRepositoryAssociations";
export const getCodegurureviewerRepositoryAssociations: typeof import("./getCodegurureviewerRepositoryAssociations").getCodegurureviewerRepositoryAssociations = null as any;
export const getCodegurureviewerRepositoryAssociationsOutput: typeof import("./getCodegurureviewerRepositoryAssociations").getCodegurureviewerRepositoryAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getCodegurureviewerRepositoryAssociations","getCodegurureviewerRepositoryAssociationsOutput"], () => require("./getCodegurureviewerRepositoryAssociations"));

export { GetCodepipelineCustomActionTypeArgs, GetCodepipelineCustomActionTypeResult, GetCodepipelineCustomActionTypeOutputArgs } from "./getCodepipelineCustomActionType";
export const getCodepipelineCustomActionType: typeof import("./getCodepipelineCustomActionType").getCodepipelineCustomActionType = null as any;
export const getCodepipelineCustomActionTypeOutput: typeof import("./getCodepipelineCustomActionType").getCodepipelineCustomActionTypeOutput = null as any;
utilities.lazyLoad(exports, ["getCodepipelineCustomActionType","getCodepipelineCustomActionTypeOutput"], () => require("./getCodepipelineCustomActionType"));

export { GetCodepipelineCustomActionTypesResult } from "./getCodepipelineCustomActionTypes";
export const getCodepipelineCustomActionTypes: typeof import("./getCodepipelineCustomActionTypes").getCodepipelineCustomActionTypes = null as any;
export const getCodepipelineCustomActionTypesOutput: typeof import("./getCodepipelineCustomActionTypes").getCodepipelineCustomActionTypesOutput = null as any;
utilities.lazyLoad(exports, ["getCodepipelineCustomActionTypes","getCodepipelineCustomActionTypesOutput"], () => require("./getCodepipelineCustomActionTypes"));

export { GetCodepipelinePipelineArgs, GetCodepipelinePipelineResult, GetCodepipelinePipelineOutputArgs } from "./getCodepipelinePipeline";
export const getCodepipelinePipeline: typeof import("./getCodepipelinePipeline").getCodepipelinePipeline = null as any;
export const getCodepipelinePipelineOutput: typeof import("./getCodepipelinePipeline").getCodepipelinePipelineOutput = null as any;
utilities.lazyLoad(exports, ["getCodepipelinePipeline","getCodepipelinePipelineOutput"], () => require("./getCodepipelinePipeline"));

export { GetCodepipelinePipelinesResult } from "./getCodepipelinePipelines";
export const getCodepipelinePipelines: typeof import("./getCodepipelinePipelines").getCodepipelinePipelines = null as any;
export const getCodepipelinePipelinesOutput: typeof import("./getCodepipelinePipelines").getCodepipelinePipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getCodepipelinePipelines","getCodepipelinePipelinesOutput"], () => require("./getCodepipelinePipelines"));

export { GetCodestarconnectionsConnectionArgs, GetCodestarconnectionsConnectionResult, GetCodestarconnectionsConnectionOutputArgs } from "./getCodestarconnectionsConnection";
export const getCodestarconnectionsConnection: typeof import("./getCodestarconnectionsConnection").getCodestarconnectionsConnection = null as any;
export const getCodestarconnectionsConnectionOutput: typeof import("./getCodestarconnectionsConnection").getCodestarconnectionsConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getCodestarconnectionsConnection","getCodestarconnectionsConnectionOutput"], () => require("./getCodestarconnectionsConnection"));

export { GetCodestarconnectionsConnectionsResult } from "./getCodestarconnectionsConnections";
export const getCodestarconnectionsConnections: typeof import("./getCodestarconnectionsConnections").getCodestarconnectionsConnections = null as any;
export const getCodestarconnectionsConnectionsOutput: typeof import("./getCodestarconnectionsConnections").getCodestarconnectionsConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getCodestarconnectionsConnections","getCodestarconnectionsConnectionsOutput"], () => require("./getCodestarconnectionsConnections"));

export { GetCodestarconnectionsRepositoryLinkArgs, GetCodestarconnectionsRepositoryLinkResult, GetCodestarconnectionsRepositoryLinkOutputArgs } from "./getCodestarconnectionsRepositoryLink";
export const getCodestarconnectionsRepositoryLink: typeof import("./getCodestarconnectionsRepositoryLink").getCodestarconnectionsRepositoryLink = null as any;
export const getCodestarconnectionsRepositoryLinkOutput: typeof import("./getCodestarconnectionsRepositoryLink").getCodestarconnectionsRepositoryLinkOutput = null as any;
utilities.lazyLoad(exports, ["getCodestarconnectionsRepositoryLink","getCodestarconnectionsRepositoryLinkOutput"], () => require("./getCodestarconnectionsRepositoryLink"));

export { GetCodestarconnectionsRepositoryLinksResult } from "./getCodestarconnectionsRepositoryLinks";
export const getCodestarconnectionsRepositoryLinks: typeof import("./getCodestarconnectionsRepositoryLinks").getCodestarconnectionsRepositoryLinks = null as any;
export const getCodestarconnectionsRepositoryLinksOutput: typeof import("./getCodestarconnectionsRepositoryLinks").getCodestarconnectionsRepositoryLinksOutput = null as any;
utilities.lazyLoad(exports, ["getCodestarconnectionsRepositoryLinks","getCodestarconnectionsRepositoryLinksOutput"], () => require("./getCodestarconnectionsRepositoryLinks"));

export { GetCodestarconnectionsSyncConfigurationArgs, GetCodestarconnectionsSyncConfigurationResult, GetCodestarconnectionsSyncConfigurationOutputArgs } from "./getCodestarconnectionsSyncConfiguration";
export const getCodestarconnectionsSyncConfiguration: typeof import("./getCodestarconnectionsSyncConfiguration").getCodestarconnectionsSyncConfiguration = null as any;
export const getCodestarconnectionsSyncConfigurationOutput: typeof import("./getCodestarconnectionsSyncConfiguration").getCodestarconnectionsSyncConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getCodestarconnectionsSyncConfiguration","getCodestarconnectionsSyncConfigurationOutput"], () => require("./getCodestarconnectionsSyncConfiguration"));

export { GetCodestarconnectionsSyncConfigurationsResult } from "./getCodestarconnectionsSyncConfigurations";
export const getCodestarconnectionsSyncConfigurations: typeof import("./getCodestarconnectionsSyncConfigurations").getCodestarconnectionsSyncConfigurations = null as any;
export const getCodestarconnectionsSyncConfigurationsOutput: typeof import("./getCodestarconnectionsSyncConfigurations").getCodestarconnectionsSyncConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getCodestarconnectionsSyncConfigurations","getCodestarconnectionsSyncConfigurationsOutput"], () => require("./getCodestarconnectionsSyncConfigurations"));

export { GetCodestarnotificationsNotificationRuleArgs, GetCodestarnotificationsNotificationRuleResult, GetCodestarnotificationsNotificationRuleOutputArgs } from "./getCodestarnotificationsNotificationRule";
export const getCodestarnotificationsNotificationRule: typeof import("./getCodestarnotificationsNotificationRule").getCodestarnotificationsNotificationRule = null as any;
export const getCodestarnotificationsNotificationRuleOutput: typeof import("./getCodestarnotificationsNotificationRule").getCodestarnotificationsNotificationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCodestarnotificationsNotificationRule","getCodestarnotificationsNotificationRuleOutput"], () => require("./getCodestarnotificationsNotificationRule"));

export { GetCodestarnotificationsNotificationRulesResult } from "./getCodestarnotificationsNotificationRules";
export const getCodestarnotificationsNotificationRules: typeof import("./getCodestarnotificationsNotificationRules").getCodestarnotificationsNotificationRules = null as any;
export const getCodestarnotificationsNotificationRulesOutput: typeof import("./getCodestarnotificationsNotificationRules").getCodestarnotificationsNotificationRulesOutput = null as any;
utilities.lazyLoad(exports, ["getCodestarnotificationsNotificationRules","getCodestarnotificationsNotificationRulesOutput"], () => require("./getCodestarnotificationsNotificationRules"));

export { GetCognitoIdentityPoolArgs, GetCognitoIdentityPoolResult, GetCognitoIdentityPoolOutputArgs } from "./getCognitoIdentityPool";
export const getCognitoIdentityPool: typeof import("./getCognitoIdentityPool").getCognitoIdentityPool = null as any;
export const getCognitoIdentityPoolOutput: typeof import("./getCognitoIdentityPool").getCognitoIdentityPoolOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoIdentityPool","getCognitoIdentityPoolOutput"], () => require("./getCognitoIdentityPool"));

export { GetCognitoIdentityPoolPrincipalTagArgs, GetCognitoIdentityPoolPrincipalTagResult, GetCognitoIdentityPoolPrincipalTagOutputArgs } from "./getCognitoIdentityPoolPrincipalTag";
export const getCognitoIdentityPoolPrincipalTag: typeof import("./getCognitoIdentityPoolPrincipalTag").getCognitoIdentityPoolPrincipalTag = null as any;
export const getCognitoIdentityPoolPrincipalTagOutput: typeof import("./getCognitoIdentityPoolPrincipalTag").getCognitoIdentityPoolPrincipalTagOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoIdentityPoolPrincipalTag","getCognitoIdentityPoolPrincipalTagOutput"], () => require("./getCognitoIdentityPoolPrincipalTag"));

export { GetCognitoIdentityPoolRoleAttachmentArgs, GetCognitoIdentityPoolRoleAttachmentResult, GetCognitoIdentityPoolRoleAttachmentOutputArgs } from "./getCognitoIdentityPoolRoleAttachment";
export const getCognitoIdentityPoolRoleAttachment: typeof import("./getCognitoIdentityPoolRoleAttachment").getCognitoIdentityPoolRoleAttachment = null as any;
export const getCognitoIdentityPoolRoleAttachmentOutput: typeof import("./getCognitoIdentityPoolRoleAttachment").getCognitoIdentityPoolRoleAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoIdentityPoolRoleAttachment","getCognitoIdentityPoolRoleAttachmentOutput"], () => require("./getCognitoIdentityPoolRoleAttachment"));

export { GetCognitoIdentityPoolsResult } from "./getCognitoIdentityPools";
export const getCognitoIdentityPools: typeof import("./getCognitoIdentityPools").getCognitoIdentityPools = null as any;
export const getCognitoIdentityPoolsOutput: typeof import("./getCognitoIdentityPools").getCognitoIdentityPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoIdentityPools","getCognitoIdentityPoolsOutput"], () => require("./getCognitoIdentityPools"));

export { GetCognitoLogDeliveryConfigurationArgs, GetCognitoLogDeliveryConfigurationResult, GetCognitoLogDeliveryConfigurationOutputArgs } from "./getCognitoLogDeliveryConfiguration";
export const getCognitoLogDeliveryConfiguration: typeof import("./getCognitoLogDeliveryConfiguration").getCognitoLogDeliveryConfiguration = null as any;
export const getCognitoLogDeliveryConfigurationOutput: typeof import("./getCognitoLogDeliveryConfiguration").getCognitoLogDeliveryConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoLogDeliveryConfiguration","getCognitoLogDeliveryConfigurationOutput"], () => require("./getCognitoLogDeliveryConfiguration"));

export { GetCognitoUserPoolClientArgs, GetCognitoUserPoolClientResult, GetCognitoUserPoolClientOutputArgs } from "./getCognitoUserPoolClient";
export const getCognitoUserPoolClient: typeof import("./getCognitoUserPoolClient").getCognitoUserPoolClient = null as any;
export const getCognitoUserPoolClientOutput: typeof import("./getCognitoUserPoolClient").getCognitoUserPoolClientOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserPoolClient","getCognitoUserPoolClientOutput"], () => require("./getCognitoUserPoolClient"));

export { GetCognitoUserPoolGroupArgs, GetCognitoUserPoolGroupResult, GetCognitoUserPoolGroupOutputArgs } from "./getCognitoUserPoolGroup";
export const getCognitoUserPoolGroup: typeof import("./getCognitoUserPoolGroup").getCognitoUserPoolGroup = null as any;
export const getCognitoUserPoolGroupOutput: typeof import("./getCognitoUserPoolGroup").getCognitoUserPoolGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserPoolGroup","getCognitoUserPoolGroupOutput"], () => require("./getCognitoUserPoolGroup"));

export { GetCognitoUserPoolResourceServerArgs, GetCognitoUserPoolResourceServerResult, GetCognitoUserPoolResourceServerOutputArgs } from "./getCognitoUserPoolResourceServer";
export const getCognitoUserPoolResourceServer: typeof import("./getCognitoUserPoolResourceServer").getCognitoUserPoolResourceServer = null as any;
export const getCognitoUserPoolResourceServerOutput: typeof import("./getCognitoUserPoolResourceServer").getCognitoUserPoolResourceServerOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserPoolResourceServer","getCognitoUserPoolResourceServerOutput"], () => require("./getCognitoUserPoolResourceServer"));

export { GetCognitoUserPoolRiskConfigurationAttachmentArgs, GetCognitoUserPoolRiskConfigurationAttachmentResult, GetCognitoUserPoolRiskConfigurationAttachmentOutputArgs } from "./getCognitoUserPoolRiskConfigurationAttachment";
export const getCognitoUserPoolRiskConfigurationAttachment: typeof import("./getCognitoUserPoolRiskConfigurationAttachment").getCognitoUserPoolRiskConfigurationAttachment = null as any;
export const getCognitoUserPoolRiskConfigurationAttachmentOutput: typeof import("./getCognitoUserPoolRiskConfigurationAttachment").getCognitoUserPoolRiskConfigurationAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserPoolRiskConfigurationAttachment","getCognitoUserPoolRiskConfigurationAttachmentOutput"], () => require("./getCognitoUserPoolRiskConfigurationAttachment"));

export { GetCognitoUserPoolUiCustomizationAttachmentArgs, GetCognitoUserPoolUiCustomizationAttachmentResult, GetCognitoUserPoolUiCustomizationAttachmentOutputArgs } from "./getCognitoUserPoolUiCustomizationAttachment";
export const getCognitoUserPoolUiCustomizationAttachment: typeof import("./getCognitoUserPoolUiCustomizationAttachment").getCognitoUserPoolUiCustomizationAttachment = null as any;
export const getCognitoUserPoolUiCustomizationAttachmentOutput: typeof import("./getCognitoUserPoolUiCustomizationAttachment").getCognitoUserPoolUiCustomizationAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserPoolUiCustomizationAttachment","getCognitoUserPoolUiCustomizationAttachmentOutput"], () => require("./getCognitoUserPoolUiCustomizationAttachment"));

export { GetCognitoUserPoolUserArgs, GetCognitoUserPoolUserResult, GetCognitoUserPoolUserOutputArgs } from "./getCognitoUserPoolUser";
export const getCognitoUserPoolUser: typeof import("./getCognitoUserPoolUser").getCognitoUserPoolUser = null as any;
export const getCognitoUserPoolUserOutput: typeof import("./getCognitoUserPoolUser").getCognitoUserPoolUserOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserPoolUser","getCognitoUserPoolUserOutput"], () => require("./getCognitoUserPoolUser"));

export { GetCognitoUserPoolUserToGroupAttachmentArgs, GetCognitoUserPoolUserToGroupAttachmentResult, GetCognitoUserPoolUserToGroupAttachmentOutputArgs } from "./getCognitoUserPoolUserToGroupAttachment";
export const getCognitoUserPoolUserToGroupAttachment: typeof import("./getCognitoUserPoolUserToGroupAttachment").getCognitoUserPoolUserToGroupAttachment = null as any;
export const getCognitoUserPoolUserToGroupAttachmentOutput: typeof import("./getCognitoUserPoolUserToGroupAttachment").getCognitoUserPoolUserToGroupAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserPoolUserToGroupAttachment","getCognitoUserPoolUserToGroupAttachmentOutput"], () => require("./getCognitoUserPoolUserToGroupAttachment"));

export { GetComprehendDocumentClassifierArgs, GetComprehendDocumentClassifierResult, GetComprehendDocumentClassifierOutputArgs } from "./getComprehendDocumentClassifier";
export const getComprehendDocumentClassifier: typeof import("./getComprehendDocumentClassifier").getComprehendDocumentClassifier = null as any;
export const getComprehendDocumentClassifierOutput: typeof import("./getComprehendDocumentClassifier").getComprehendDocumentClassifierOutput = null as any;
utilities.lazyLoad(exports, ["getComprehendDocumentClassifier","getComprehendDocumentClassifierOutput"], () => require("./getComprehendDocumentClassifier"));

export { GetComprehendDocumentClassifiersResult } from "./getComprehendDocumentClassifiers";
export const getComprehendDocumentClassifiers: typeof import("./getComprehendDocumentClassifiers").getComprehendDocumentClassifiers = null as any;
export const getComprehendDocumentClassifiersOutput: typeof import("./getComprehendDocumentClassifiers").getComprehendDocumentClassifiersOutput = null as any;
utilities.lazyLoad(exports, ["getComprehendDocumentClassifiers","getComprehendDocumentClassifiersOutput"], () => require("./getComprehendDocumentClassifiers"));

export { GetComprehendFlywheelArgs, GetComprehendFlywheelResult, GetComprehendFlywheelOutputArgs } from "./getComprehendFlywheel";
export const getComprehendFlywheel: typeof import("./getComprehendFlywheel").getComprehendFlywheel = null as any;
export const getComprehendFlywheelOutput: typeof import("./getComprehendFlywheel").getComprehendFlywheelOutput = null as any;
utilities.lazyLoad(exports, ["getComprehendFlywheel","getComprehendFlywheelOutput"], () => require("./getComprehendFlywheel"));

export { GetComprehendFlywheelsResult } from "./getComprehendFlywheels";
export const getComprehendFlywheels: typeof import("./getComprehendFlywheels").getComprehendFlywheels = null as any;
export const getComprehendFlywheelsOutput: typeof import("./getComprehendFlywheels").getComprehendFlywheelsOutput = null as any;
utilities.lazyLoad(exports, ["getComprehendFlywheels","getComprehendFlywheelsOutput"], () => require("./getComprehendFlywheels"));

export { GetConfigAggregationAuthorizationArgs, GetConfigAggregationAuthorizationResult, GetConfigAggregationAuthorizationOutputArgs } from "./getConfigAggregationAuthorization";
export const getConfigAggregationAuthorization: typeof import("./getConfigAggregationAuthorization").getConfigAggregationAuthorization = null as any;
export const getConfigAggregationAuthorizationOutput: typeof import("./getConfigAggregationAuthorization").getConfigAggregationAuthorizationOutput = null as any;
utilities.lazyLoad(exports, ["getConfigAggregationAuthorization","getConfigAggregationAuthorizationOutput"], () => require("./getConfigAggregationAuthorization"));

export { GetConfigAggregationAuthorizationsResult } from "./getConfigAggregationAuthorizations";
export const getConfigAggregationAuthorizations: typeof import("./getConfigAggregationAuthorizations").getConfigAggregationAuthorizations = null as any;
export const getConfigAggregationAuthorizationsOutput: typeof import("./getConfigAggregationAuthorizations").getConfigAggregationAuthorizationsOutput = null as any;
utilities.lazyLoad(exports, ["getConfigAggregationAuthorizations","getConfigAggregationAuthorizationsOutput"], () => require("./getConfigAggregationAuthorizations"));

export { GetConfigConfigRuleArgs, GetConfigConfigRuleResult, GetConfigConfigRuleOutputArgs } from "./getConfigConfigRule";
export const getConfigConfigRule: typeof import("./getConfigConfigRule").getConfigConfigRule = null as any;
export const getConfigConfigRuleOutput: typeof import("./getConfigConfigRule").getConfigConfigRuleOutput = null as any;
utilities.lazyLoad(exports, ["getConfigConfigRule","getConfigConfigRuleOutput"], () => require("./getConfigConfigRule"));

export { GetConfigConfigRulesResult } from "./getConfigConfigRules";
export const getConfigConfigRules: typeof import("./getConfigConfigRules").getConfigConfigRules = null as any;
export const getConfigConfigRulesOutput: typeof import("./getConfigConfigRules").getConfigConfigRulesOutput = null as any;
utilities.lazyLoad(exports, ["getConfigConfigRules","getConfigConfigRulesOutput"], () => require("./getConfigConfigRules"));

export { GetConfigConfigurationAggregatorArgs, GetConfigConfigurationAggregatorResult, GetConfigConfigurationAggregatorOutputArgs } from "./getConfigConfigurationAggregator";
export const getConfigConfigurationAggregator: typeof import("./getConfigConfigurationAggregator").getConfigConfigurationAggregator = null as any;
export const getConfigConfigurationAggregatorOutput: typeof import("./getConfigConfigurationAggregator").getConfigConfigurationAggregatorOutput = null as any;
utilities.lazyLoad(exports, ["getConfigConfigurationAggregator","getConfigConfigurationAggregatorOutput"], () => require("./getConfigConfigurationAggregator"));

export { GetConfigConfigurationAggregatorsResult } from "./getConfigConfigurationAggregators";
export const getConfigConfigurationAggregators: typeof import("./getConfigConfigurationAggregators").getConfigConfigurationAggregators = null as any;
export const getConfigConfigurationAggregatorsOutput: typeof import("./getConfigConfigurationAggregators").getConfigConfigurationAggregatorsOutput = null as any;
utilities.lazyLoad(exports, ["getConfigConfigurationAggregators","getConfigConfigurationAggregatorsOutput"], () => require("./getConfigConfigurationAggregators"));

export { GetConfigConformancePackArgs, GetConfigConformancePackResult, GetConfigConformancePackOutputArgs } from "./getConfigConformancePack";
export const getConfigConformancePack: typeof import("./getConfigConformancePack").getConfigConformancePack = null as any;
export const getConfigConformancePackOutput: typeof import("./getConfigConformancePack").getConfigConformancePackOutput = null as any;
utilities.lazyLoad(exports, ["getConfigConformancePack","getConfigConformancePackOutput"], () => require("./getConfigConformancePack"));

export { GetConfigConformancePacksResult } from "./getConfigConformancePacks";
export const getConfigConformancePacks: typeof import("./getConfigConformancePacks").getConfigConformancePacks = null as any;
export const getConfigConformancePacksOutput: typeof import("./getConfigConformancePacks").getConfigConformancePacksOutput = null as any;
utilities.lazyLoad(exports, ["getConfigConformancePacks","getConfigConformancePacksOutput"], () => require("./getConfigConformancePacks"));

export { GetConfigOrganizationConformancePackArgs, GetConfigOrganizationConformancePackResult, GetConfigOrganizationConformancePackOutputArgs } from "./getConfigOrganizationConformancePack";
export const getConfigOrganizationConformancePack: typeof import("./getConfigOrganizationConformancePack").getConfigOrganizationConformancePack = null as any;
export const getConfigOrganizationConformancePackOutput: typeof import("./getConfigOrganizationConformancePack").getConfigOrganizationConformancePackOutput = null as any;
utilities.lazyLoad(exports, ["getConfigOrganizationConformancePack","getConfigOrganizationConformancePackOutput"], () => require("./getConfigOrganizationConformancePack"));

export { GetConfigOrganizationConformancePacksResult } from "./getConfigOrganizationConformancePacks";
export const getConfigOrganizationConformancePacks: typeof import("./getConfigOrganizationConformancePacks").getConfigOrganizationConformancePacks = null as any;
export const getConfigOrganizationConformancePacksOutput: typeof import("./getConfigOrganizationConformancePacks").getConfigOrganizationConformancePacksOutput = null as any;
utilities.lazyLoad(exports, ["getConfigOrganizationConformancePacks","getConfigOrganizationConformancePacksOutput"], () => require("./getConfigOrganizationConformancePacks"));

export { GetConfigStoredQueriesResult } from "./getConfigStoredQueries";
export const getConfigStoredQueries: typeof import("./getConfigStoredQueries").getConfigStoredQueries = null as any;
export const getConfigStoredQueriesOutput: typeof import("./getConfigStoredQueries").getConfigStoredQueriesOutput = null as any;
utilities.lazyLoad(exports, ["getConfigStoredQueries","getConfigStoredQueriesOutput"], () => require("./getConfigStoredQueries"));

export { GetConfigStoredQueryArgs, GetConfigStoredQueryResult, GetConfigStoredQueryOutputArgs } from "./getConfigStoredQuery";
export const getConfigStoredQuery: typeof import("./getConfigStoredQuery").getConfigStoredQuery = null as any;
export const getConfigStoredQueryOutput: typeof import("./getConfigStoredQuery").getConfigStoredQueryOutput = null as any;
utilities.lazyLoad(exports, ["getConfigStoredQuery","getConfigStoredQueryOutput"], () => require("./getConfigStoredQuery"));

export { GetConnectApprovedOriginArgs, GetConnectApprovedOriginResult, GetConnectApprovedOriginOutputArgs } from "./getConnectApprovedOrigin";
export const getConnectApprovedOrigin: typeof import("./getConnectApprovedOrigin").getConnectApprovedOrigin = null as any;
export const getConnectApprovedOriginOutput: typeof import("./getConnectApprovedOrigin").getConnectApprovedOriginOutput = null as any;
utilities.lazyLoad(exports, ["getConnectApprovedOrigin","getConnectApprovedOriginOutput"], () => require("./getConnectApprovedOrigin"));

export { GetConnectApprovedOriginsResult } from "./getConnectApprovedOrigins";
export const getConnectApprovedOrigins: typeof import("./getConnectApprovedOrigins").getConnectApprovedOrigins = null as any;
export const getConnectApprovedOriginsOutput: typeof import("./getConnectApprovedOrigins").getConnectApprovedOriginsOutput = null as any;
utilities.lazyLoad(exports, ["getConnectApprovedOrigins","getConnectApprovedOriginsOutput"], () => require("./getConnectApprovedOrigins"));

export { GetConnectContactFlowArgs, GetConnectContactFlowResult, GetConnectContactFlowOutputArgs } from "./getConnectContactFlow";
export const getConnectContactFlow: typeof import("./getConnectContactFlow").getConnectContactFlow = null as any;
export const getConnectContactFlowOutput: typeof import("./getConnectContactFlow").getConnectContactFlowOutput = null as any;
utilities.lazyLoad(exports, ["getConnectContactFlow","getConnectContactFlowOutput"], () => require("./getConnectContactFlow"));

export { GetConnectContactFlowModuleArgs, GetConnectContactFlowModuleResult, GetConnectContactFlowModuleOutputArgs } from "./getConnectContactFlowModule";
export const getConnectContactFlowModule: typeof import("./getConnectContactFlowModule").getConnectContactFlowModule = null as any;
export const getConnectContactFlowModuleOutput: typeof import("./getConnectContactFlowModule").getConnectContactFlowModuleOutput = null as any;
utilities.lazyLoad(exports, ["getConnectContactFlowModule","getConnectContactFlowModuleOutput"], () => require("./getConnectContactFlowModule"));

export { GetConnectHoursOfOperationArgs, GetConnectHoursOfOperationResult, GetConnectHoursOfOperationOutputArgs } from "./getConnectHoursOfOperation";
export const getConnectHoursOfOperation: typeof import("./getConnectHoursOfOperation").getConnectHoursOfOperation = null as any;
export const getConnectHoursOfOperationOutput: typeof import("./getConnectHoursOfOperation").getConnectHoursOfOperationOutput = null as any;
utilities.lazyLoad(exports, ["getConnectHoursOfOperation","getConnectHoursOfOperationOutput"], () => require("./getConnectHoursOfOperation"));

export { GetConnectInstanceArgs, GetConnectInstanceResult, GetConnectInstanceOutputArgs } from "./getConnectInstance";
export const getConnectInstance: typeof import("./getConnectInstance").getConnectInstance = null as any;
export const getConnectInstanceOutput: typeof import("./getConnectInstance").getConnectInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getConnectInstance","getConnectInstanceOutput"], () => require("./getConnectInstance"));

export { GetConnectInstanceStorageConfigArgs, GetConnectInstanceStorageConfigResult, GetConnectInstanceStorageConfigOutputArgs } from "./getConnectInstanceStorageConfig";
export const getConnectInstanceStorageConfig: typeof import("./getConnectInstanceStorageConfig").getConnectInstanceStorageConfig = null as any;
export const getConnectInstanceStorageConfigOutput: typeof import("./getConnectInstanceStorageConfig").getConnectInstanceStorageConfigOutput = null as any;
utilities.lazyLoad(exports, ["getConnectInstanceStorageConfig","getConnectInstanceStorageConfigOutput"], () => require("./getConnectInstanceStorageConfig"));

export { GetConnectInstanceStorageConfigsResult } from "./getConnectInstanceStorageConfigs";
export const getConnectInstanceStorageConfigs: typeof import("./getConnectInstanceStorageConfigs").getConnectInstanceStorageConfigs = null as any;
export const getConnectInstanceStorageConfigsOutput: typeof import("./getConnectInstanceStorageConfigs").getConnectInstanceStorageConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getConnectInstanceStorageConfigs","getConnectInstanceStorageConfigsOutput"], () => require("./getConnectInstanceStorageConfigs"));

export { GetConnectInstancesResult } from "./getConnectInstances";
export const getConnectInstances: typeof import("./getConnectInstances").getConnectInstances = null as any;
export const getConnectInstancesOutput: typeof import("./getConnectInstances").getConnectInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getConnectInstances","getConnectInstancesOutput"], () => require("./getConnectInstances"));

export { GetConnectIntegrationAssociationArgs, GetConnectIntegrationAssociationResult, GetConnectIntegrationAssociationOutputArgs } from "./getConnectIntegrationAssociation";
export const getConnectIntegrationAssociation: typeof import("./getConnectIntegrationAssociation").getConnectIntegrationAssociation = null as any;
export const getConnectIntegrationAssociationOutput: typeof import("./getConnectIntegrationAssociation").getConnectIntegrationAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getConnectIntegrationAssociation","getConnectIntegrationAssociationOutput"], () => require("./getConnectIntegrationAssociation"));

export { GetConnectPhoneNumberArgs, GetConnectPhoneNumberResult, GetConnectPhoneNumberOutputArgs } from "./getConnectPhoneNumber";
export const getConnectPhoneNumber: typeof import("./getConnectPhoneNumber").getConnectPhoneNumber = null as any;
export const getConnectPhoneNumberOutput: typeof import("./getConnectPhoneNumber").getConnectPhoneNumberOutput = null as any;
utilities.lazyLoad(exports, ["getConnectPhoneNumber","getConnectPhoneNumberOutput"], () => require("./getConnectPhoneNumber"));

export { GetConnectPredefinedAttributeArgs, GetConnectPredefinedAttributeResult, GetConnectPredefinedAttributeOutputArgs } from "./getConnectPredefinedAttribute";
export const getConnectPredefinedAttribute: typeof import("./getConnectPredefinedAttribute").getConnectPredefinedAttribute = null as any;
export const getConnectPredefinedAttributeOutput: typeof import("./getConnectPredefinedAttribute").getConnectPredefinedAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getConnectPredefinedAttribute","getConnectPredefinedAttributeOutput"], () => require("./getConnectPredefinedAttribute"));

export { GetConnectPromptArgs, GetConnectPromptResult, GetConnectPromptOutputArgs } from "./getConnectPrompt";
export const getConnectPrompt: typeof import("./getConnectPrompt").getConnectPrompt = null as any;
export const getConnectPromptOutput: typeof import("./getConnectPrompt").getConnectPromptOutput = null as any;
utilities.lazyLoad(exports, ["getConnectPrompt","getConnectPromptOutput"], () => require("./getConnectPrompt"));

export { GetConnectQueueArgs, GetConnectQueueResult, GetConnectQueueOutputArgs } from "./getConnectQueue";
export const getConnectQueue: typeof import("./getConnectQueue").getConnectQueue = null as any;
export const getConnectQueueOutput: typeof import("./getConnectQueue").getConnectQueueOutput = null as any;
utilities.lazyLoad(exports, ["getConnectQueue","getConnectQueueOutput"], () => require("./getConnectQueue"));

export { GetConnectQuickConnectArgs, GetConnectQuickConnectResult, GetConnectQuickConnectOutputArgs } from "./getConnectQuickConnect";
export const getConnectQuickConnect: typeof import("./getConnectQuickConnect").getConnectQuickConnect = null as any;
export const getConnectQuickConnectOutput: typeof import("./getConnectQuickConnect").getConnectQuickConnectOutput = null as any;
utilities.lazyLoad(exports, ["getConnectQuickConnect","getConnectQuickConnectOutput"], () => require("./getConnectQuickConnect"));

export { GetConnectRoutingProfileArgs, GetConnectRoutingProfileResult, GetConnectRoutingProfileOutputArgs } from "./getConnectRoutingProfile";
export const getConnectRoutingProfile: typeof import("./getConnectRoutingProfile").getConnectRoutingProfile = null as any;
export const getConnectRoutingProfileOutput: typeof import("./getConnectRoutingProfile").getConnectRoutingProfileOutput = null as any;
utilities.lazyLoad(exports, ["getConnectRoutingProfile","getConnectRoutingProfileOutput"], () => require("./getConnectRoutingProfile"));

export { GetConnectSecurityKeyArgs, GetConnectSecurityKeyResult, GetConnectSecurityKeyOutputArgs } from "./getConnectSecurityKey";
export const getConnectSecurityKey: typeof import("./getConnectSecurityKey").getConnectSecurityKey = null as any;
export const getConnectSecurityKeyOutput: typeof import("./getConnectSecurityKey").getConnectSecurityKeyOutput = null as any;
utilities.lazyLoad(exports, ["getConnectSecurityKey","getConnectSecurityKeyOutput"], () => require("./getConnectSecurityKey"));

export { GetConnectSecurityKeysResult } from "./getConnectSecurityKeys";
export const getConnectSecurityKeys: typeof import("./getConnectSecurityKeys").getConnectSecurityKeys = null as any;
export const getConnectSecurityKeysOutput: typeof import("./getConnectSecurityKeys").getConnectSecurityKeysOutput = null as any;
utilities.lazyLoad(exports, ["getConnectSecurityKeys","getConnectSecurityKeysOutput"], () => require("./getConnectSecurityKeys"));

export { GetConnectSecurityProfileArgs, GetConnectSecurityProfileResult, GetConnectSecurityProfileOutputArgs } from "./getConnectSecurityProfile";
export const getConnectSecurityProfile: typeof import("./getConnectSecurityProfile").getConnectSecurityProfile = null as any;
export const getConnectSecurityProfileOutput: typeof import("./getConnectSecurityProfile").getConnectSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getConnectSecurityProfile","getConnectSecurityProfileOutput"], () => require("./getConnectSecurityProfile"));

export { GetConnectTaskTemplateArgs, GetConnectTaskTemplateResult, GetConnectTaskTemplateOutputArgs } from "./getConnectTaskTemplate";
export const getConnectTaskTemplate: typeof import("./getConnectTaskTemplate").getConnectTaskTemplate = null as any;
export const getConnectTaskTemplateOutput: typeof import("./getConnectTaskTemplate").getConnectTaskTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getConnectTaskTemplate","getConnectTaskTemplateOutput"], () => require("./getConnectTaskTemplate"));

export { GetConnectTrafficDistributionGroupArgs, GetConnectTrafficDistributionGroupResult, GetConnectTrafficDistributionGroupOutputArgs } from "./getConnectTrafficDistributionGroup";
export const getConnectTrafficDistributionGroup: typeof import("./getConnectTrafficDistributionGroup").getConnectTrafficDistributionGroup = null as any;
export const getConnectTrafficDistributionGroupOutput: typeof import("./getConnectTrafficDistributionGroup").getConnectTrafficDistributionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getConnectTrafficDistributionGroup","getConnectTrafficDistributionGroupOutput"], () => require("./getConnectTrafficDistributionGroup"));

export { GetConnectTrafficDistributionGroupsResult } from "./getConnectTrafficDistributionGroups";
export const getConnectTrafficDistributionGroups: typeof import("./getConnectTrafficDistributionGroups").getConnectTrafficDistributionGroups = null as any;
export const getConnectTrafficDistributionGroupsOutput: typeof import("./getConnectTrafficDistributionGroups").getConnectTrafficDistributionGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getConnectTrafficDistributionGroups","getConnectTrafficDistributionGroupsOutput"], () => require("./getConnectTrafficDistributionGroups"));

export { GetConnectUserArgs, GetConnectUserResult, GetConnectUserOutputArgs } from "./getConnectUser";
export const getConnectUser: typeof import("./getConnectUser").getConnectUser = null as any;
export const getConnectUserOutput: typeof import("./getConnectUser").getConnectUserOutput = null as any;
utilities.lazyLoad(exports, ["getConnectUser","getConnectUserOutput"], () => require("./getConnectUser"));

export { GetConnectUserHierarchyGroupArgs, GetConnectUserHierarchyGroupResult, GetConnectUserHierarchyGroupOutputArgs } from "./getConnectUserHierarchyGroup";
export const getConnectUserHierarchyGroup: typeof import("./getConnectUserHierarchyGroup").getConnectUserHierarchyGroup = null as any;
export const getConnectUserHierarchyGroupOutput: typeof import("./getConnectUserHierarchyGroup").getConnectUserHierarchyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getConnectUserHierarchyGroup","getConnectUserHierarchyGroupOutput"], () => require("./getConnectUserHierarchyGroup"));

export { GetConnectViewArgs, GetConnectViewResult, GetConnectViewOutputArgs } from "./getConnectView";
export const getConnectView: typeof import("./getConnectView").getConnectView = null as any;
export const getConnectViewOutput: typeof import("./getConnectView").getConnectViewOutput = null as any;
utilities.lazyLoad(exports, ["getConnectView","getConnectViewOutput"], () => require("./getConnectView"));

export { GetConnectViewVersionArgs, GetConnectViewVersionResult, GetConnectViewVersionOutputArgs } from "./getConnectViewVersion";
export const getConnectViewVersion: typeof import("./getConnectViewVersion").getConnectViewVersion = null as any;
export const getConnectViewVersionOutput: typeof import("./getConnectViewVersion").getConnectViewVersionOutput = null as any;
utilities.lazyLoad(exports, ["getConnectViewVersion","getConnectViewVersionOutput"], () => require("./getConnectViewVersion"));

export { GetConnectcampaignsCampaignArgs, GetConnectcampaignsCampaignResult, GetConnectcampaignsCampaignOutputArgs } from "./getConnectcampaignsCampaign";
export const getConnectcampaignsCampaign: typeof import("./getConnectcampaignsCampaign").getConnectcampaignsCampaign = null as any;
export const getConnectcampaignsCampaignOutput: typeof import("./getConnectcampaignsCampaign").getConnectcampaignsCampaignOutput = null as any;
utilities.lazyLoad(exports, ["getConnectcampaignsCampaign","getConnectcampaignsCampaignOutput"], () => require("./getConnectcampaignsCampaign"));

export { GetConnectcampaignsCampaignsResult } from "./getConnectcampaignsCampaigns";
export const getConnectcampaignsCampaigns: typeof import("./getConnectcampaignsCampaigns").getConnectcampaignsCampaigns = null as any;
export const getConnectcampaignsCampaignsOutput: typeof import("./getConnectcampaignsCampaigns").getConnectcampaignsCampaignsOutput = null as any;
utilities.lazyLoad(exports, ["getConnectcampaignsCampaigns","getConnectcampaignsCampaignsOutput"], () => require("./getConnectcampaignsCampaigns"));

export { GetControltowerEnabledControlArgs, GetControltowerEnabledControlResult, GetControltowerEnabledControlOutputArgs } from "./getControltowerEnabledControl";
export const getControltowerEnabledControl: typeof import("./getControltowerEnabledControl").getControltowerEnabledControl = null as any;
export const getControltowerEnabledControlOutput: typeof import("./getControltowerEnabledControl").getControltowerEnabledControlOutput = null as any;
utilities.lazyLoad(exports, ["getControltowerEnabledControl","getControltowerEnabledControlOutput"], () => require("./getControltowerEnabledControl"));

export { GetCurReportDefinitionArgs, GetCurReportDefinitionResult, GetCurReportDefinitionOutputArgs } from "./getCurReportDefinition";
export const getCurReportDefinition: typeof import("./getCurReportDefinition").getCurReportDefinition = null as any;
export const getCurReportDefinitionOutput: typeof import("./getCurReportDefinition").getCurReportDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getCurReportDefinition","getCurReportDefinitionOutput"], () => require("./getCurReportDefinition"));

export { GetCurReportDefinitionsResult } from "./getCurReportDefinitions";
export const getCurReportDefinitions: typeof import("./getCurReportDefinitions").getCurReportDefinitions = null as any;
export const getCurReportDefinitionsOutput: typeof import("./getCurReportDefinitions").getCurReportDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getCurReportDefinitions","getCurReportDefinitionsOutput"], () => require("./getCurReportDefinitions"));

export { GetCustomerprofilesCalculatedAttributeDefinitionArgs, GetCustomerprofilesCalculatedAttributeDefinitionResult, GetCustomerprofilesCalculatedAttributeDefinitionOutputArgs } from "./getCustomerprofilesCalculatedAttributeDefinition";
export const getCustomerprofilesCalculatedAttributeDefinition: typeof import("./getCustomerprofilesCalculatedAttributeDefinition").getCustomerprofilesCalculatedAttributeDefinition = null as any;
export const getCustomerprofilesCalculatedAttributeDefinitionOutput: typeof import("./getCustomerprofilesCalculatedAttributeDefinition").getCustomerprofilesCalculatedAttributeDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerprofilesCalculatedAttributeDefinition","getCustomerprofilesCalculatedAttributeDefinitionOutput"], () => require("./getCustomerprofilesCalculatedAttributeDefinition"));

export { GetCustomerprofilesDomainArgs, GetCustomerprofilesDomainResult, GetCustomerprofilesDomainOutputArgs } from "./getCustomerprofilesDomain";
export const getCustomerprofilesDomain: typeof import("./getCustomerprofilesDomain").getCustomerprofilesDomain = null as any;
export const getCustomerprofilesDomainOutput: typeof import("./getCustomerprofilesDomain").getCustomerprofilesDomainOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerprofilesDomain","getCustomerprofilesDomainOutput"], () => require("./getCustomerprofilesDomain"));

export { GetCustomerprofilesEventStreamArgs, GetCustomerprofilesEventStreamResult, GetCustomerprofilesEventStreamOutputArgs } from "./getCustomerprofilesEventStream";
export const getCustomerprofilesEventStream: typeof import("./getCustomerprofilesEventStream").getCustomerprofilesEventStream = null as any;
export const getCustomerprofilesEventStreamOutput: typeof import("./getCustomerprofilesEventStream").getCustomerprofilesEventStreamOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerprofilesEventStream","getCustomerprofilesEventStreamOutput"], () => require("./getCustomerprofilesEventStream"));

export { GetCustomerprofilesIntegrationArgs, GetCustomerprofilesIntegrationResult, GetCustomerprofilesIntegrationOutputArgs } from "./getCustomerprofilesIntegration";
export const getCustomerprofilesIntegration: typeof import("./getCustomerprofilesIntegration").getCustomerprofilesIntegration = null as any;
export const getCustomerprofilesIntegrationOutput: typeof import("./getCustomerprofilesIntegration").getCustomerprofilesIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerprofilesIntegration","getCustomerprofilesIntegrationOutput"], () => require("./getCustomerprofilesIntegration"));

export { GetCustomerprofilesObjectTypeArgs, GetCustomerprofilesObjectTypeResult, GetCustomerprofilesObjectTypeOutputArgs } from "./getCustomerprofilesObjectType";
export const getCustomerprofilesObjectType: typeof import("./getCustomerprofilesObjectType").getCustomerprofilesObjectType = null as any;
export const getCustomerprofilesObjectTypeOutput: typeof import("./getCustomerprofilesObjectType").getCustomerprofilesObjectTypeOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerprofilesObjectType","getCustomerprofilesObjectTypeOutput"], () => require("./getCustomerprofilesObjectType"));

export { GetDatabrewDatasetArgs, GetDatabrewDatasetResult, GetDatabrewDatasetOutputArgs } from "./getDatabrewDataset";
export const getDatabrewDataset: typeof import("./getDatabrewDataset").getDatabrewDataset = null as any;
export const getDatabrewDatasetOutput: typeof import("./getDatabrewDataset").getDatabrewDatasetOutput = null as any;
utilities.lazyLoad(exports, ["getDatabrewDataset","getDatabrewDatasetOutput"], () => require("./getDatabrewDataset"));

export { GetDatabrewDatasetsResult } from "./getDatabrewDatasets";
export const getDatabrewDatasets: typeof import("./getDatabrewDatasets").getDatabrewDatasets = null as any;
export const getDatabrewDatasetsOutput: typeof import("./getDatabrewDatasets").getDatabrewDatasetsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabrewDatasets","getDatabrewDatasetsOutput"], () => require("./getDatabrewDatasets"));

export { GetDatabrewJobArgs, GetDatabrewJobResult, GetDatabrewJobOutputArgs } from "./getDatabrewJob";
export const getDatabrewJob: typeof import("./getDatabrewJob").getDatabrewJob = null as any;
export const getDatabrewJobOutput: typeof import("./getDatabrewJob").getDatabrewJobOutput = null as any;
utilities.lazyLoad(exports, ["getDatabrewJob","getDatabrewJobOutput"], () => require("./getDatabrewJob"));

export { GetDatabrewJobsResult } from "./getDatabrewJobs";
export const getDatabrewJobs: typeof import("./getDatabrewJobs").getDatabrewJobs = null as any;
export const getDatabrewJobsOutput: typeof import("./getDatabrewJobs").getDatabrewJobsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabrewJobs","getDatabrewJobsOutput"], () => require("./getDatabrewJobs"));

export { GetDatabrewProjectArgs, GetDatabrewProjectResult, GetDatabrewProjectOutputArgs } from "./getDatabrewProject";
export const getDatabrewProject: typeof import("./getDatabrewProject").getDatabrewProject = null as any;
export const getDatabrewProjectOutput: typeof import("./getDatabrewProject").getDatabrewProjectOutput = null as any;
utilities.lazyLoad(exports, ["getDatabrewProject","getDatabrewProjectOutput"], () => require("./getDatabrewProject"));

export { GetDatabrewProjectsResult } from "./getDatabrewProjects";
export const getDatabrewProjects: typeof import("./getDatabrewProjects").getDatabrewProjects = null as any;
export const getDatabrewProjectsOutput: typeof import("./getDatabrewProjects").getDatabrewProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabrewProjects","getDatabrewProjectsOutput"], () => require("./getDatabrewProjects"));

export { GetDatabrewRecipesResult } from "./getDatabrewRecipes";
export const getDatabrewRecipes: typeof import("./getDatabrewRecipes").getDatabrewRecipes = null as any;
export const getDatabrewRecipesOutput: typeof import("./getDatabrewRecipes").getDatabrewRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabrewRecipes","getDatabrewRecipesOutput"], () => require("./getDatabrewRecipes"));

export { GetDatabrewRulesetArgs, GetDatabrewRulesetResult, GetDatabrewRulesetOutputArgs } from "./getDatabrewRuleset";
export const getDatabrewRuleset: typeof import("./getDatabrewRuleset").getDatabrewRuleset = null as any;
export const getDatabrewRulesetOutput: typeof import("./getDatabrewRuleset").getDatabrewRulesetOutput = null as any;
utilities.lazyLoad(exports, ["getDatabrewRuleset","getDatabrewRulesetOutput"], () => require("./getDatabrewRuleset"));

export { GetDatabrewRulesetsResult } from "./getDatabrewRulesets";
export const getDatabrewRulesets: typeof import("./getDatabrewRulesets").getDatabrewRulesets = null as any;
export const getDatabrewRulesetsOutput: typeof import("./getDatabrewRulesets").getDatabrewRulesetsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabrewRulesets","getDatabrewRulesetsOutput"], () => require("./getDatabrewRulesets"));

export { GetDatabrewScheduleArgs, GetDatabrewScheduleResult, GetDatabrewScheduleOutputArgs } from "./getDatabrewSchedule";
export const getDatabrewSchedule: typeof import("./getDatabrewSchedule").getDatabrewSchedule = null as any;
export const getDatabrewScheduleOutput: typeof import("./getDatabrewSchedule").getDatabrewScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getDatabrewSchedule","getDatabrewScheduleOutput"], () => require("./getDatabrewSchedule"));

export { GetDatabrewSchedulesResult } from "./getDatabrewSchedules";
export const getDatabrewSchedules: typeof import("./getDatabrewSchedules").getDatabrewSchedules = null as any;
export const getDatabrewSchedulesOutput: typeof import("./getDatabrewSchedules").getDatabrewSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabrewSchedules","getDatabrewSchedulesOutput"], () => require("./getDatabrewSchedules"));

export { GetDatapipelinePipelineArgs, GetDatapipelinePipelineResult, GetDatapipelinePipelineOutputArgs } from "./getDatapipelinePipeline";
export const getDatapipelinePipeline: typeof import("./getDatapipelinePipeline").getDatapipelinePipeline = null as any;
export const getDatapipelinePipelineOutput: typeof import("./getDatapipelinePipeline").getDatapipelinePipelineOutput = null as any;
utilities.lazyLoad(exports, ["getDatapipelinePipeline","getDatapipelinePipelineOutput"], () => require("./getDatapipelinePipeline"));

export { GetDatapipelinePipelinesResult } from "./getDatapipelinePipelines";
export const getDatapipelinePipelines: typeof import("./getDatapipelinePipelines").getDatapipelinePipelines = null as any;
export const getDatapipelinePipelinesOutput: typeof import("./getDatapipelinePipelines").getDatapipelinePipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getDatapipelinePipelines","getDatapipelinePipelinesOutput"], () => require("./getDatapipelinePipelines"));

export { GetDatasyncAgentArgs, GetDatasyncAgentResult, GetDatasyncAgentOutputArgs } from "./getDatasyncAgent";
export const getDatasyncAgent: typeof import("./getDatasyncAgent").getDatasyncAgent = null as any;
export const getDatasyncAgentOutput: typeof import("./getDatasyncAgent").getDatasyncAgentOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncAgent","getDatasyncAgentOutput"], () => require("./getDatasyncAgent"));

export { GetDatasyncAgentsResult } from "./getDatasyncAgents";
export const getDatasyncAgents: typeof import("./getDatasyncAgents").getDatasyncAgents = null as any;
export const getDatasyncAgentsOutput: typeof import("./getDatasyncAgents").getDatasyncAgentsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncAgents","getDatasyncAgentsOutput"], () => require("./getDatasyncAgents"));

export { GetDatasyncLocationAzureBlobArgs, GetDatasyncLocationAzureBlobResult, GetDatasyncLocationAzureBlobOutputArgs } from "./getDatasyncLocationAzureBlob";
export const getDatasyncLocationAzureBlob: typeof import("./getDatasyncLocationAzureBlob").getDatasyncLocationAzureBlob = null as any;
export const getDatasyncLocationAzureBlobOutput: typeof import("./getDatasyncLocationAzureBlob").getDatasyncLocationAzureBlobOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationAzureBlob","getDatasyncLocationAzureBlobOutput"], () => require("./getDatasyncLocationAzureBlob"));

export { GetDatasyncLocationAzureBlobsResult } from "./getDatasyncLocationAzureBlobs";
export const getDatasyncLocationAzureBlobs: typeof import("./getDatasyncLocationAzureBlobs").getDatasyncLocationAzureBlobs = null as any;
export const getDatasyncLocationAzureBlobsOutput: typeof import("./getDatasyncLocationAzureBlobs").getDatasyncLocationAzureBlobsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationAzureBlobs","getDatasyncLocationAzureBlobsOutput"], () => require("./getDatasyncLocationAzureBlobs"));

export { GetDatasyncLocationEfsArgs, GetDatasyncLocationEfsResult, GetDatasyncLocationEfsOutputArgs } from "./getDatasyncLocationEfs";
export const getDatasyncLocationEfs: typeof import("./getDatasyncLocationEfs").getDatasyncLocationEfs = null as any;
export const getDatasyncLocationEfsOutput: typeof import("./getDatasyncLocationEfs").getDatasyncLocationEfsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationEfs","getDatasyncLocationEfsOutput"], () => require("./getDatasyncLocationEfs"));

export { GetDatasyncLocationEfsPluralResult } from "./getDatasyncLocationEfsPlural";
export const getDatasyncLocationEfsPlural: typeof import("./getDatasyncLocationEfsPlural").getDatasyncLocationEfsPlural = null as any;
export const getDatasyncLocationEfsPluralOutput: typeof import("./getDatasyncLocationEfsPlural").getDatasyncLocationEfsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationEfsPlural","getDatasyncLocationEfsPluralOutput"], () => require("./getDatasyncLocationEfsPlural"));

export { GetDatasyncLocationFsxLustreArgs, GetDatasyncLocationFsxLustreResult, GetDatasyncLocationFsxLustreOutputArgs } from "./getDatasyncLocationFsxLustre";
export const getDatasyncLocationFsxLustre: typeof import("./getDatasyncLocationFsxLustre").getDatasyncLocationFsxLustre = null as any;
export const getDatasyncLocationFsxLustreOutput: typeof import("./getDatasyncLocationFsxLustre").getDatasyncLocationFsxLustreOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationFsxLustre","getDatasyncLocationFsxLustreOutput"], () => require("./getDatasyncLocationFsxLustre"));

export { GetDatasyncLocationFsxLustresResult } from "./getDatasyncLocationFsxLustres";
export const getDatasyncLocationFsxLustres: typeof import("./getDatasyncLocationFsxLustres").getDatasyncLocationFsxLustres = null as any;
export const getDatasyncLocationFsxLustresOutput: typeof import("./getDatasyncLocationFsxLustres").getDatasyncLocationFsxLustresOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationFsxLustres","getDatasyncLocationFsxLustresOutput"], () => require("./getDatasyncLocationFsxLustres"));

export { GetDatasyncLocationFsxOntapArgs, GetDatasyncLocationFsxOntapResult, GetDatasyncLocationFsxOntapOutputArgs } from "./getDatasyncLocationFsxOntap";
export const getDatasyncLocationFsxOntap: typeof import("./getDatasyncLocationFsxOntap").getDatasyncLocationFsxOntap = null as any;
export const getDatasyncLocationFsxOntapOutput: typeof import("./getDatasyncLocationFsxOntap").getDatasyncLocationFsxOntapOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationFsxOntap","getDatasyncLocationFsxOntapOutput"], () => require("./getDatasyncLocationFsxOntap"));

export { GetDatasyncLocationFsxOntapsResult } from "./getDatasyncLocationFsxOntaps";
export const getDatasyncLocationFsxOntaps: typeof import("./getDatasyncLocationFsxOntaps").getDatasyncLocationFsxOntaps = null as any;
export const getDatasyncLocationFsxOntapsOutput: typeof import("./getDatasyncLocationFsxOntaps").getDatasyncLocationFsxOntapsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationFsxOntaps","getDatasyncLocationFsxOntapsOutput"], () => require("./getDatasyncLocationFsxOntaps"));

export { GetDatasyncLocationFsxOpenZfsArgs, GetDatasyncLocationFsxOpenZfsResult, GetDatasyncLocationFsxOpenZfsOutputArgs } from "./getDatasyncLocationFsxOpenZfs";
export const getDatasyncLocationFsxOpenZfs: typeof import("./getDatasyncLocationFsxOpenZfs").getDatasyncLocationFsxOpenZfs = null as any;
export const getDatasyncLocationFsxOpenZfsOutput: typeof import("./getDatasyncLocationFsxOpenZfs").getDatasyncLocationFsxOpenZfsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationFsxOpenZfs","getDatasyncLocationFsxOpenZfsOutput"], () => require("./getDatasyncLocationFsxOpenZfs"));

export { GetDatasyncLocationFsxOpenZfsPluralResult } from "./getDatasyncLocationFsxOpenZfsPlural";
export const getDatasyncLocationFsxOpenZfsPlural: typeof import("./getDatasyncLocationFsxOpenZfsPlural").getDatasyncLocationFsxOpenZfsPlural = null as any;
export const getDatasyncLocationFsxOpenZfsPluralOutput: typeof import("./getDatasyncLocationFsxOpenZfsPlural").getDatasyncLocationFsxOpenZfsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationFsxOpenZfsPlural","getDatasyncLocationFsxOpenZfsPluralOutput"], () => require("./getDatasyncLocationFsxOpenZfsPlural"));

export { GetDatasyncLocationFsxWindowsArgs, GetDatasyncLocationFsxWindowsResult, GetDatasyncLocationFsxWindowsOutputArgs } from "./getDatasyncLocationFsxWindows";
export const getDatasyncLocationFsxWindows: typeof import("./getDatasyncLocationFsxWindows").getDatasyncLocationFsxWindows = null as any;
export const getDatasyncLocationFsxWindowsOutput: typeof import("./getDatasyncLocationFsxWindows").getDatasyncLocationFsxWindowsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationFsxWindows","getDatasyncLocationFsxWindowsOutput"], () => require("./getDatasyncLocationFsxWindows"));

export { GetDatasyncLocationFsxWindowsPluralResult } from "./getDatasyncLocationFsxWindowsPlural";
export const getDatasyncLocationFsxWindowsPlural: typeof import("./getDatasyncLocationFsxWindowsPlural").getDatasyncLocationFsxWindowsPlural = null as any;
export const getDatasyncLocationFsxWindowsPluralOutput: typeof import("./getDatasyncLocationFsxWindowsPlural").getDatasyncLocationFsxWindowsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationFsxWindowsPlural","getDatasyncLocationFsxWindowsPluralOutput"], () => require("./getDatasyncLocationFsxWindowsPlural"));

export { GetDatasyncLocationHdfsArgs, GetDatasyncLocationHdfsResult, GetDatasyncLocationHdfsOutputArgs } from "./getDatasyncLocationHdfs";
export const getDatasyncLocationHdfs: typeof import("./getDatasyncLocationHdfs").getDatasyncLocationHdfs = null as any;
export const getDatasyncLocationHdfsOutput: typeof import("./getDatasyncLocationHdfs").getDatasyncLocationHdfsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationHdfs","getDatasyncLocationHdfsOutput"], () => require("./getDatasyncLocationHdfs"));

export { GetDatasyncLocationHdfsPluralResult } from "./getDatasyncLocationHdfsPlural";
export const getDatasyncLocationHdfsPlural: typeof import("./getDatasyncLocationHdfsPlural").getDatasyncLocationHdfsPlural = null as any;
export const getDatasyncLocationHdfsPluralOutput: typeof import("./getDatasyncLocationHdfsPlural").getDatasyncLocationHdfsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationHdfsPlural","getDatasyncLocationHdfsPluralOutput"], () => require("./getDatasyncLocationHdfsPlural"));

export { GetDatasyncLocationNfsArgs, GetDatasyncLocationNfsResult, GetDatasyncLocationNfsOutputArgs } from "./getDatasyncLocationNfs";
export const getDatasyncLocationNfs: typeof import("./getDatasyncLocationNfs").getDatasyncLocationNfs = null as any;
export const getDatasyncLocationNfsOutput: typeof import("./getDatasyncLocationNfs").getDatasyncLocationNfsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationNfs","getDatasyncLocationNfsOutput"], () => require("./getDatasyncLocationNfs"));

export { GetDatasyncLocationNfsPluralResult } from "./getDatasyncLocationNfsPlural";
export const getDatasyncLocationNfsPlural: typeof import("./getDatasyncLocationNfsPlural").getDatasyncLocationNfsPlural = null as any;
export const getDatasyncLocationNfsPluralOutput: typeof import("./getDatasyncLocationNfsPlural").getDatasyncLocationNfsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationNfsPlural","getDatasyncLocationNfsPluralOutput"], () => require("./getDatasyncLocationNfsPlural"));

export { GetDatasyncLocationObjectStorageArgs, GetDatasyncLocationObjectStorageResult, GetDatasyncLocationObjectStorageOutputArgs } from "./getDatasyncLocationObjectStorage";
export const getDatasyncLocationObjectStorage: typeof import("./getDatasyncLocationObjectStorage").getDatasyncLocationObjectStorage = null as any;
export const getDatasyncLocationObjectStorageOutput: typeof import("./getDatasyncLocationObjectStorage").getDatasyncLocationObjectStorageOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationObjectStorage","getDatasyncLocationObjectStorageOutput"], () => require("./getDatasyncLocationObjectStorage"));

export { GetDatasyncLocationObjectStoragesResult } from "./getDatasyncLocationObjectStorages";
export const getDatasyncLocationObjectStorages: typeof import("./getDatasyncLocationObjectStorages").getDatasyncLocationObjectStorages = null as any;
export const getDatasyncLocationObjectStoragesOutput: typeof import("./getDatasyncLocationObjectStorages").getDatasyncLocationObjectStoragesOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationObjectStorages","getDatasyncLocationObjectStoragesOutput"], () => require("./getDatasyncLocationObjectStorages"));

export { GetDatasyncLocationS3Args, GetDatasyncLocationS3Result, GetDatasyncLocationS3OutputArgs } from "./getDatasyncLocationS3";
export const getDatasyncLocationS3: typeof import("./getDatasyncLocationS3").getDatasyncLocationS3 = null as any;
export const getDatasyncLocationS3Output: typeof import("./getDatasyncLocationS3").getDatasyncLocationS3Output = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationS3","getDatasyncLocationS3Output"], () => require("./getDatasyncLocationS3"));

export { GetDatasyncLocationS3sResult } from "./getDatasyncLocationS3s";
export const getDatasyncLocationS3s: typeof import("./getDatasyncLocationS3s").getDatasyncLocationS3s = null as any;
export const getDatasyncLocationS3sOutput: typeof import("./getDatasyncLocationS3s").getDatasyncLocationS3sOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationS3s","getDatasyncLocationS3sOutput"], () => require("./getDatasyncLocationS3s"));

export { GetDatasyncLocationSmbArgs, GetDatasyncLocationSmbResult, GetDatasyncLocationSmbOutputArgs } from "./getDatasyncLocationSmb";
export const getDatasyncLocationSmb: typeof import("./getDatasyncLocationSmb").getDatasyncLocationSmb = null as any;
export const getDatasyncLocationSmbOutput: typeof import("./getDatasyncLocationSmb").getDatasyncLocationSmbOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationSmb","getDatasyncLocationSmbOutput"], () => require("./getDatasyncLocationSmb"));

export { GetDatasyncLocationSmbsResult } from "./getDatasyncLocationSmbs";
export const getDatasyncLocationSmbs: typeof import("./getDatasyncLocationSmbs").getDatasyncLocationSmbs = null as any;
export const getDatasyncLocationSmbsOutput: typeof import("./getDatasyncLocationSmbs").getDatasyncLocationSmbsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncLocationSmbs","getDatasyncLocationSmbsOutput"], () => require("./getDatasyncLocationSmbs"));

export { GetDatasyncStorageSystemArgs, GetDatasyncStorageSystemResult, GetDatasyncStorageSystemOutputArgs } from "./getDatasyncStorageSystem";
export const getDatasyncStorageSystem: typeof import("./getDatasyncStorageSystem").getDatasyncStorageSystem = null as any;
export const getDatasyncStorageSystemOutput: typeof import("./getDatasyncStorageSystem").getDatasyncStorageSystemOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncStorageSystem","getDatasyncStorageSystemOutput"], () => require("./getDatasyncStorageSystem"));

export { GetDatasyncStorageSystemsResult } from "./getDatasyncStorageSystems";
export const getDatasyncStorageSystems: typeof import("./getDatasyncStorageSystems").getDatasyncStorageSystems = null as any;
export const getDatasyncStorageSystemsOutput: typeof import("./getDatasyncStorageSystems").getDatasyncStorageSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncStorageSystems","getDatasyncStorageSystemsOutput"], () => require("./getDatasyncStorageSystems"));

export { GetDatasyncTaskArgs, GetDatasyncTaskResult, GetDatasyncTaskOutputArgs } from "./getDatasyncTask";
export const getDatasyncTask: typeof import("./getDatasyncTask").getDatasyncTask = null as any;
export const getDatasyncTaskOutput: typeof import("./getDatasyncTask").getDatasyncTaskOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncTask","getDatasyncTaskOutput"], () => require("./getDatasyncTask"));

export { GetDatasyncTasksResult } from "./getDatasyncTasks";
export const getDatasyncTasks: typeof import("./getDatasyncTasks").getDatasyncTasks = null as any;
export const getDatasyncTasksOutput: typeof import("./getDatasyncTasks").getDatasyncTasksOutput = null as any;
utilities.lazyLoad(exports, ["getDatasyncTasks","getDatasyncTasksOutput"], () => require("./getDatasyncTasks"));

export { GetDatazoneDataSourceArgs, GetDatazoneDataSourceResult, GetDatazoneDataSourceOutputArgs } from "./getDatazoneDataSource";
export const getDatazoneDataSource: typeof import("./getDatazoneDataSource").getDatazoneDataSource = null as any;
export const getDatazoneDataSourceOutput: typeof import("./getDatazoneDataSource").getDatazoneDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getDatazoneDataSource","getDatazoneDataSourceOutput"], () => require("./getDatazoneDataSource"));

export { GetDatazoneDomainArgs, GetDatazoneDomainResult, GetDatazoneDomainOutputArgs } from "./getDatazoneDomain";
export const getDatazoneDomain: typeof import("./getDatazoneDomain").getDatazoneDomain = null as any;
export const getDatazoneDomainOutput: typeof import("./getDatazoneDomain").getDatazoneDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDatazoneDomain","getDatazoneDomainOutput"], () => require("./getDatazoneDomain"));

export { GetDatazoneDomainsResult } from "./getDatazoneDomains";
export const getDatazoneDomains: typeof import("./getDatazoneDomains").getDatazoneDomains = null as any;
export const getDatazoneDomainsOutput: typeof import("./getDatazoneDomains").getDatazoneDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDatazoneDomains","getDatazoneDomainsOutput"], () => require("./getDatazoneDomains"));

export { GetDatazoneEnvironmentArgs, GetDatazoneEnvironmentResult, GetDatazoneEnvironmentOutputArgs } from "./getDatazoneEnvironment";
export const getDatazoneEnvironment: typeof import("./getDatazoneEnvironment").getDatazoneEnvironment = null as any;
export const getDatazoneEnvironmentOutput: typeof import("./getDatazoneEnvironment").getDatazoneEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getDatazoneEnvironment","getDatazoneEnvironmentOutput"], () => require("./getDatazoneEnvironment"));

export { GetDatazoneEnvironmentBlueprintConfigurationArgs, GetDatazoneEnvironmentBlueprintConfigurationResult, GetDatazoneEnvironmentBlueprintConfigurationOutputArgs } from "./getDatazoneEnvironmentBlueprintConfiguration";
export const getDatazoneEnvironmentBlueprintConfiguration: typeof import("./getDatazoneEnvironmentBlueprintConfiguration").getDatazoneEnvironmentBlueprintConfiguration = null as any;
export const getDatazoneEnvironmentBlueprintConfigurationOutput: typeof import("./getDatazoneEnvironmentBlueprintConfiguration").getDatazoneEnvironmentBlueprintConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getDatazoneEnvironmentBlueprintConfiguration","getDatazoneEnvironmentBlueprintConfigurationOutput"], () => require("./getDatazoneEnvironmentBlueprintConfiguration"));

export { GetDatazoneEnvironmentProfileArgs, GetDatazoneEnvironmentProfileResult, GetDatazoneEnvironmentProfileOutputArgs } from "./getDatazoneEnvironmentProfile";
export const getDatazoneEnvironmentProfile: typeof import("./getDatazoneEnvironmentProfile").getDatazoneEnvironmentProfile = null as any;
export const getDatazoneEnvironmentProfileOutput: typeof import("./getDatazoneEnvironmentProfile").getDatazoneEnvironmentProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDatazoneEnvironmentProfile","getDatazoneEnvironmentProfileOutput"], () => require("./getDatazoneEnvironmentProfile"));

export { GetDatazoneGroupProfileArgs, GetDatazoneGroupProfileResult, GetDatazoneGroupProfileOutputArgs } from "./getDatazoneGroupProfile";
export const getDatazoneGroupProfile: typeof import("./getDatazoneGroupProfile").getDatazoneGroupProfile = null as any;
export const getDatazoneGroupProfileOutput: typeof import("./getDatazoneGroupProfile").getDatazoneGroupProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDatazoneGroupProfile","getDatazoneGroupProfileOutput"], () => require("./getDatazoneGroupProfile"));

export { GetDatazoneProjectArgs, GetDatazoneProjectResult, GetDatazoneProjectOutputArgs } from "./getDatazoneProject";
export const getDatazoneProject: typeof import("./getDatazoneProject").getDatazoneProject = null as any;
export const getDatazoneProjectOutput: typeof import("./getDatazoneProject").getDatazoneProjectOutput = null as any;
utilities.lazyLoad(exports, ["getDatazoneProject","getDatazoneProjectOutput"], () => require("./getDatazoneProject"));

export { GetDatazoneProjectMembershipArgs, GetDatazoneProjectMembershipResult, GetDatazoneProjectMembershipOutputArgs } from "./getDatazoneProjectMembership";
export const getDatazoneProjectMembership: typeof import("./getDatazoneProjectMembership").getDatazoneProjectMembership = null as any;
export const getDatazoneProjectMembershipOutput: typeof import("./getDatazoneProjectMembership").getDatazoneProjectMembershipOutput = null as any;
utilities.lazyLoad(exports, ["getDatazoneProjectMembership","getDatazoneProjectMembershipOutput"], () => require("./getDatazoneProjectMembership"));

export { GetDatazoneSubscriptionTargetArgs, GetDatazoneSubscriptionTargetResult, GetDatazoneSubscriptionTargetOutputArgs } from "./getDatazoneSubscriptionTarget";
export const getDatazoneSubscriptionTarget: typeof import("./getDatazoneSubscriptionTarget").getDatazoneSubscriptionTarget = null as any;
export const getDatazoneSubscriptionTargetOutput: typeof import("./getDatazoneSubscriptionTarget").getDatazoneSubscriptionTargetOutput = null as any;
utilities.lazyLoad(exports, ["getDatazoneSubscriptionTarget","getDatazoneSubscriptionTargetOutput"], () => require("./getDatazoneSubscriptionTarget"));

export { GetDatazoneUserProfileArgs, GetDatazoneUserProfileResult, GetDatazoneUserProfileOutputArgs } from "./getDatazoneUserProfile";
export const getDatazoneUserProfile: typeof import("./getDatazoneUserProfile").getDatazoneUserProfile = null as any;
export const getDatazoneUserProfileOutput: typeof import("./getDatazoneUserProfile").getDatazoneUserProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDatazoneUserProfile","getDatazoneUserProfileOutput"], () => require("./getDatazoneUserProfile"));

export { GetDeadlineFarmArgs, GetDeadlineFarmResult, GetDeadlineFarmOutputArgs } from "./getDeadlineFarm";
export const getDeadlineFarm: typeof import("./getDeadlineFarm").getDeadlineFarm = null as any;
export const getDeadlineFarmOutput: typeof import("./getDeadlineFarm").getDeadlineFarmOutput = null as any;
utilities.lazyLoad(exports, ["getDeadlineFarm","getDeadlineFarmOutput"], () => require("./getDeadlineFarm"));

export { GetDeadlineFarmsResult } from "./getDeadlineFarms";
export const getDeadlineFarms: typeof import("./getDeadlineFarms").getDeadlineFarms = null as any;
export const getDeadlineFarmsOutput: typeof import("./getDeadlineFarms").getDeadlineFarmsOutput = null as any;
utilities.lazyLoad(exports, ["getDeadlineFarms","getDeadlineFarmsOutput"], () => require("./getDeadlineFarms"));

export { GetDeadlineFleetArgs, GetDeadlineFleetResult, GetDeadlineFleetOutputArgs } from "./getDeadlineFleet";
export const getDeadlineFleet: typeof import("./getDeadlineFleet").getDeadlineFleet = null as any;
export const getDeadlineFleetOutput: typeof import("./getDeadlineFleet").getDeadlineFleetOutput = null as any;
utilities.lazyLoad(exports, ["getDeadlineFleet","getDeadlineFleetOutput"], () => require("./getDeadlineFleet"));

export { GetDeadlineLicenseEndpointArgs, GetDeadlineLicenseEndpointResult, GetDeadlineLicenseEndpointOutputArgs } from "./getDeadlineLicenseEndpoint";
export const getDeadlineLicenseEndpoint: typeof import("./getDeadlineLicenseEndpoint").getDeadlineLicenseEndpoint = null as any;
export const getDeadlineLicenseEndpointOutput: typeof import("./getDeadlineLicenseEndpoint").getDeadlineLicenseEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDeadlineLicenseEndpoint","getDeadlineLicenseEndpointOutput"], () => require("./getDeadlineLicenseEndpoint"));

export { GetDeadlineLicenseEndpointsResult } from "./getDeadlineLicenseEndpoints";
export const getDeadlineLicenseEndpoints: typeof import("./getDeadlineLicenseEndpoints").getDeadlineLicenseEndpoints = null as any;
export const getDeadlineLicenseEndpointsOutput: typeof import("./getDeadlineLicenseEndpoints").getDeadlineLicenseEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getDeadlineLicenseEndpoints","getDeadlineLicenseEndpointsOutput"], () => require("./getDeadlineLicenseEndpoints"));

export { GetDeadlineMeteredProductArgs, GetDeadlineMeteredProductResult, GetDeadlineMeteredProductOutputArgs } from "./getDeadlineMeteredProduct";
export const getDeadlineMeteredProduct: typeof import("./getDeadlineMeteredProduct").getDeadlineMeteredProduct = null as any;
export const getDeadlineMeteredProductOutput: typeof import("./getDeadlineMeteredProduct").getDeadlineMeteredProductOutput = null as any;
utilities.lazyLoad(exports, ["getDeadlineMeteredProduct","getDeadlineMeteredProductOutput"], () => require("./getDeadlineMeteredProduct"));

export { GetDeadlineMonitorArgs, GetDeadlineMonitorResult, GetDeadlineMonitorOutputArgs } from "./getDeadlineMonitor";
export const getDeadlineMonitor: typeof import("./getDeadlineMonitor").getDeadlineMonitor = null as any;
export const getDeadlineMonitorOutput: typeof import("./getDeadlineMonitor").getDeadlineMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getDeadlineMonitor","getDeadlineMonitorOutput"], () => require("./getDeadlineMonitor"));

export { GetDeadlineMonitorsResult } from "./getDeadlineMonitors";
export const getDeadlineMonitors: typeof import("./getDeadlineMonitors").getDeadlineMonitors = null as any;
export const getDeadlineMonitorsOutput: typeof import("./getDeadlineMonitors").getDeadlineMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getDeadlineMonitors","getDeadlineMonitorsOutput"], () => require("./getDeadlineMonitors"));

export { GetDeadlineQueueArgs, GetDeadlineQueueResult, GetDeadlineQueueOutputArgs } from "./getDeadlineQueue";
export const getDeadlineQueue: typeof import("./getDeadlineQueue").getDeadlineQueue = null as any;
export const getDeadlineQueueOutput: typeof import("./getDeadlineQueue").getDeadlineQueueOutput = null as any;
utilities.lazyLoad(exports, ["getDeadlineQueue","getDeadlineQueueOutput"], () => require("./getDeadlineQueue"));

export { GetDeadlineQueueEnvironmentArgs, GetDeadlineQueueEnvironmentResult, GetDeadlineQueueEnvironmentOutputArgs } from "./getDeadlineQueueEnvironment";
export const getDeadlineQueueEnvironment: typeof import("./getDeadlineQueueEnvironment").getDeadlineQueueEnvironment = null as any;
export const getDeadlineQueueEnvironmentOutput: typeof import("./getDeadlineQueueEnvironment").getDeadlineQueueEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getDeadlineQueueEnvironment","getDeadlineQueueEnvironmentOutput"], () => require("./getDeadlineQueueEnvironment"));

export { GetDeadlineQueueFleetAssociationArgs, GetDeadlineQueueFleetAssociationResult, GetDeadlineQueueFleetAssociationOutputArgs } from "./getDeadlineQueueFleetAssociation";
export const getDeadlineQueueFleetAssociation: typeof import("./getDeadlineQueueFleetAssociation").getDeadlineQueueFleetAssociation = null as any;
export const getDeadlineQueueFleetAssociationOutput: typeof import("./getDeadlineQueueFleetAssociation").getDeadlineQueueFleetAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getDeadlineQueueFleetAssociation","getDeadlineQueueFleetAssociationOutput"], () => require("./getDeadlineQueueFleetAssociation"));

export { GetDeadlineStorageProfileArgs, GetDeadlineStorageProfileResult, GetDeadlineStorageProfileOutputArgs } from "./getDeadlineStorageProfile";
export const getDeadlineStorageProfile: typeof import("./getDeadlineStorageProfile").getDeadlineStorageProfile = null as any;
export const getDeadlineStorageProfileOutput: typeof import("./getDeadlineStorageProfile").getDeadlineStorageProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDeadlineStorageProfile","getDeadlineStorageProfileOutput"], () => require("./getDeadlineStorageProfile"));

export { GetDetectiveGraphArgs, GetDetectiveGraphResult, GetDetectiveGraphOutputArgs } from "./getDetectiveGraph";
export const getDetectiveGraph: typeof import("./getDetectiveGraph").getDetectiveGraph = null as any;
export const getDetectiveGraphOutput: typeof import("./getDetectiveGraph").getDetectiveGraphOutput = null as any;
utilities.lazyLoad(exports, ["getDetectiveGraph","getDetectiveGraphOutput"], () => require("./getDetectiveGraph"));

export { GetDetectiveGraphsResult } from "./getDetectiveGraphs";
export const getDetectiveGraphs: typeof import("./getDetectiveGraphs").getDetectiveGraphs = null as any;
export const getDetectiveGraphsOutput: typeof import("./getDetectiveGraphs").getDetectiveGraphsOutput = null as any;
utilities.lazyLoad(exports, ["getDetectiveGraphs","getDetectiveGraphsOutput"], () => require("./getDetectiveGraphs"));

export { GetDetectiveMemberInvitationArgs, GetDetectiveMemberInvitationResult, GetDetectiveMemberInvitationOutputArgs } from "./getDetectiveMemberInvitation";
export const getDetectiveMemberInvitation: typeof import("./getDetectiveMemberInvitation").getDetectiveMemberInvitation = null as any;
export const getDetectiveMemberInvitationOutput: typeof import("./getDetectiveMemberInvitation").getDetectiveMemberInvitationOutput = null as any;
utilities.lazyLoad(exports, ["getDetectiveMemberInvitation","getDetectiveMemberInvitationOutput"], () => require("./getDetectiveMemberInvitation"));

export { GetDetectiveMemberInvitationsResult } from "./getDetectiveMemberInvitations";
export const getDetectiveMemberInvitations: typeof import("./getDetectiveMemberInvitations").getDetectiveMemberInvitations = null as any;
export const getDetectiveMemberInvitationsOutput: typeof import("./getDetectiveMemberInvitations").getDetectiveMemberInvitationsOutput = null as any;
utilities.lazyLoad(exports, ["getDetectiveMemberInvitations","getDetectiveMemberInvitationsOutput"], () => require("./getDetectiveMemberInvitations"));

export { GetDetectiveOrganizationAdminArgs, GetDetectiveOrganizationAdminResult, GetDetectiveOrganizationAdminOutputArgs } from "./getDetectiveOrganizationAdmin";
export const getDetectiveOrganizationAdmin: typeof import("./getDetectiveOrganizationAdmin").getDetectiveOrganizationAdmin = null as any;
export const getDetectiveOrganizationAdminOutput: typeof import("./getDetectiveOrganizationAdmin").getDetectiveOrganizationAdminOutput = null as any;
utilities.lazyLoad(exports, ["getDetectiveOrganizationAdmin","getDetectiveOrganizationAdminOutput"], () => require("./getDetectiveOrganizationAdmin"));

export { GetDetectiveOrganizationAdminsResult } from "./getDetectiveOrganizationAdmins";
export const getDetectiveOrganizationAdmins: typeof import("./getDetectiveOrganizationAdmins").getDetectiveOrganizationAdmins = null as any;
export const getDetectiveOrganizationAdminsOutput: typeof import("./getDetectiveOrganizationAdmins").getDetectiveOrganizationAdminsOutput = null as any;
utilities.lazyLoad(exports, ["getDetectiveOrganizationAdmins","getDetectiveOrganizationAdminsOutput"], () => require("./getDetectiveOrganizationAdmins"));

export { GetDevopsguruLogAnomalyDetectionIntegrationArgs, GetDevopsguruLogAnomalyDetectionIntegrationResult, GetDevopsguruLogAnomalyDetectionIntegrationOutputArgs } from "./getDevopsguruLogAnomalyDetectionIntegration";
export const getDevopsguruLogAnomalyDetectionIntegration: typeof import("./getDevopsguruLogAnomalyDetectionIntegration").getDevopsguruLogAnomalyDetectionIntegration = null as any;
export const getDevopsguruLogAnomalyDetectionIntegrationOutput: typeof import("./getDevopsguruLogAnomalyDetectionIntegration").getDevopsguruLogAnomalyDetectionIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsguruLogAnomalyDetectionIntegration","getDevopsguruLogAnomalyDetectionIntegrationOutput"], () => require("./getDevopsguruLogAnomalyDetectionIntegration"));

export { GetDevopsguruLogAnomalyDetectionIntegrationsResult } from "./getDevopsguruLogAnomalyDetectionIntegrations";
export const getDevopsguruLogAnomalyDetectionIntegrations: typeof import("./getDevopsguruLogAnomalyDetectionIntegrations").getDevopsguruLogAnomalyDetectionIntegrations = null as any;
export const getDevopsguruLogAnomalyDetectionIntegrationsOutput: typeof import("./getDevopsguruLogAnomalyDetectionIntegrations").getDevopsguruLogAnomalyDetectionIntegrationsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsguruLogAnomalyDetectionIntegrations","getDevopsguruLogAnomalyDetectionIntegrationsOutput"], () => require("./getDevopsguruLogAnomalyDetectionIntegrations"));

export { GetDevopsguruNotificationChannelArgs, GetDevopsguruNotificationChannelResult, GetDevopsguruNotificationChannelOutputArgs } from "./getDevopsguruNotificationChannel";
export const getDevopsguruNotificationChannel: typeof import("./getDevopsguruNotificationChannel").getDevopsguruNotificationChannel = null as any;
export const getDevopsguruNotificationChannelOutput: typeof import("./getDevopsguruNotificationChannel").getDevopsguruNotificationChannelOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsguruNotificationChannel","getDevopsguruNotificationChannelOutput"], () => require("./getDevopsguruNotificationChannel"));

export { GetDevopsguruNotificationChannelsResult } from "./getDevopsguruNotificationChannels";
export const getDevopsguruNotificationChannels: typeof import("./getDevopsguruNotificationChannels").getDevopsguruNotificationChannels = null as any;
export const getDevopsguruNotificationChannelsOutput: typeof import("./getDevopsguruNotificationChannels").getDevopsguruNotificationChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsguruNotificationChannels","getDevopsguruNotificationChannelsOutput"], () => require("./getDevopsguruNotificationChannels"));

export { GetDevopsguruResourceCollectionArgs, GetDevopsguruResourceCollectionResult, GetDevopsguruResourceCollectionOutputArgs } from "./getDevopsguruResourceCollection";
export const getDevopsguruResourceCollection: typeof import("./getDevopsguruResourceCollection").getDevopsguruResourceCollection = null as any;
export const getDevopsguruResourceCollectionOutput: typeof import("./getDevopsguruResourceCollection").getDevopsguruResourceCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsguruResourceCollection","getDevopsguruResourceCollectionOutput"], () => require("./getDevopsguruResourceCollection"));

export { GetDevopsguruResourceCollectionsResult } from "./getDevopsguruResourceCollections";
export const getDevopsguruResourceCollections: typeof import("./getDevopsguruResourceCollections").getDevopsguruResourceCollections = null as any;
export const getDevopsguruResourceCollectionsOutput: typeof import("./getDevopsguruResourceCollections").getDevopsguruResourceCollectionsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsguruResourceCollections","getDevopsguruResourceCollectionsOutput"], () => require("./getDevopsguruResourceCollections"));

export { GetDirectoryserviceSimpleAdArgs, GetDirectoryserviceSimpleAdResult, GetDirectoryserviceSimpleAdOutputArgs } from "./getDirectoryserviceSimpleAd";
export const getDirectoryserviceSimpleAd: typeof import("./getDirectoryserviceSimpleAd").getDirectoryserviceSimpleAd = null as any;
export const getDirectoryserviceSimpleAdOutput: typeof import("./getDirectoryserviceSimpleAd").getDirectoryserviceSimpleAdOutput = null as any;
utilities.lazyLoad(exports, ["getDirectoryserviceSimpleAd","getDirectoryserviceSimpleAdOutput"], () => require("./getDirectoryserviceSimpleAd"));

export { GetDirectoryserviceSimpleAdsResult } from "./getDirectoryserviceSimpleAds";
export const getDirectoryserviceSimpleAds: typeof import("./getDirectoryserviceSimpleAds").getDirectoryserviceSimpleAds = null as any;
export const getDirectoryserviceSimpleAdsOutput: typeof import("./getDirectoryserviceSimpleAds").getDirectoryserviceSimpleAdsOutput = null as any;
utilities.lazyLoad(exports, ["getDirectoryserviceSimpleAds","getDirectoryserviceSimpleAdsOutput"], () => require("./getDirectoryserviceSimpleAds"));

export { GetDmsDataProviderArgs, GetDmsDataProviderResult, GetDmsDataProviderOutputArgs } from "./getDmsDataProvider";
export const getDmsDataProvider: typeof import("./getDmsDataProvider").getDmsDataProvider = null as any;
export const getDmsDataProviderOutput: typeof import("./getDmsDataProvider").getDmsDataProviderOutput = null as any;
utilities.lazyLoad(exports, ["getDmsDataProvider","getDmsDataProviderOutput"], () => require("./getDmsDataProvider"));

export { GetDmsDataProvidersResult } from "./getDmsDataProviders";
export const getDmsDataProviders: typeof import("./getDmsDataProviders").getDmsDataProviders = null as any;
export const getDmsDataProvidersOutput: typeof import("./getDmsDataProviders").getDmsDataProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getDmsDataProviders","getDmsDataProvidersOutput"], () => require("./getDmsDataProviders"));

export { GetDmsInstanceProfileArgs, GetDmsInstanceProfileResult, GetDmsInstanceProfileOutputArgs } from "./getDmsInstanceProfile";
export const getDmsInstanceProfile: typeof import("./getDmsInstanceProfile").getDmsInstanceProfile = null as any;
export const getDmsInstanceProfileOutput: typeof import("./getDmsInstanceProfile").getDmsInstanceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDmsInstanceProfile","getDmsInstanceProfileOutput"], () => require("./getDmsInstanceProfile"));

export { GetDmsInstanceProfilesResult } from "./getDmsInstanceProfiles";
export const getDmsInstanceProfiles: typeof import("./getDmsInstanceProfiles").getDmsInstanceProfiles = null as any;
export const getDmsInstanceProfilesOutput: typeof import("./getDmsInstanceProfiles").getDmsInstanceProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getDmsInstanceProfiles","getDmsInstanceProfilesOutput"], () => require("./getDmsInstanceProfiles"));

export { GetDmsMigrationProjectArgs, GetDmsMigrationProjectResult, GetDmsMigrationProjectOutputArgs } from "./getDmsMigrationProject";
export const getDmsMigrationProject: typeof import("./getDmsMigrationProject").getDmsMigrationProject = null as any;
export const getDmsMigrationProjectOutput: typeof import("./getDmsMigrationProject").getDmsMigrationProjectOutput = null as any;
utilities.lazyLoad(exports, ["getDmsMigrationProject","getDmsMigrationProjectOutput"], () => require("./getDmsMigrationProject"));

export { GetDmsMigrationProjectsResult } from "./getDmsMigrationProjects";
export const getDmsMigrationProjects: typeof import("./getDmsMigrationProjects").getDmsMigrationProjects = null as any;
export const getDmsMigrationProjectsOutput: typeof import("./getDmsMigrationProjects").getDmsMigrationProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getDmsMigrationProjects","getDmsMigrationProjectsOutput"], () => require("./getDmsMigrationProjects"));

export { GetDmsReplicationConfigArgs, GetDmsReplicationConfigResult, GetDmsReplicationConfigOutputArgs } from "./getDmsReplicationConfig";
export const getDmsReplicationConfig: typeof import("./getDmsReplicationConfig").getDmsReplicationConfig = null as any;
export const getDmsReplicationConfigOutput: typeof import("./getDmsReplicationConfig").getDmsReplicationConfigOutput = null as any;
utilities.lazyLoad(exports, ["getDmsReplicationConfig","getDmsReplicationConfigOutput"], () => require("./getDmsReplicationConfig"));

export { GetDmsReplicationConfigsResult } from "./getDmsReplicationConfigs";
export const getDmsReplicationConfigs: typeof import("./getDmsReplicationConfigs").getDmsReplicationConfigs = null as any;
export const getDmsReplicationConfigsOutput: typeof import("./getDmsReplicationConfigs").getDmsReplicationConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getDmsReplicationConfigs","getDmsReplicationConfigsOutput"], () => require("./getDmsReplicationConfigs"));

export { GetDocdbelasticClusterArgs, GetDocdbelasticClusterResult, GetDocdbelasticClusterOutputArgs } from "./getDocdbelasticCluster";
export const getDocdbelasticCluster: typeof import("./getDocdbelasticCluster").getDocdbelasticCluster = null as any;
export const getDocdbelasticClusterOutput: typeof import("./getDocdbelasticCluster").getDocdbelasticClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDocdbelasticCluster","getDocdbelasticClusterOutput"], () => require("./getDocdbelasticCluster"));

export { GetDocdbelasticClustersResult } from "./getDocdbelasticClusters";
export const getDocdbelasticClusters: typeof import("./getDocdbelasticClusters").getDocdbelasticClusters = null as any;
export const getDocdbelasticClustersOutput: typeof import("./getDocdbelasticClusters").getDocdbelasticClustersOutput = null as any;
utilities.lazyLoad(exports, ["getDocdbelasticClusters","getDocdbelasticClustersOutput"], () => require("./getDocdbelasticClusters"));

export { GetDynamodbGlobalTableArgs, GetDynamodbGlobalTableResult, GetDynamodbGlobalTableOutputArgs } from "./getDynamodbGlobalTable";
export const getDynamodbGlobalTable: typeof import("./getDynamodbGlobalTable").getDynamodbGlobalTable = null as any;
export const getDynamodbGlobalTableOutput: typeof import("./getDynamodbGlobalTable").getDynamodbGlobalTableOutput = null as any;
utilities.lazyLoad(exports, ["getDynamodbGlobalTable","getDynamodbGlobalTableOutput"], () => require("./getDynamodbGlobalTable"));

export { GetDynamodbGlobalTablesResult } from "./getDynamodbGlobalTables";
export const getDynamodbGlobalTables: typeof import("./getDynamodbGlobalTables").getDynamodbGlobalTables = null as any;
export const getDynamodbGlobalTablesOutput: typeof import("./getDynamodbGlobalTables").getDynamodbGlobalTablesOutput = null as any;
utilities.lazyLoad(exports, ["getDynamodbGlobalTables","getDynamodbGlobalTablesOutput"], () => require("./getDynamodbGlobalTables"));

export { GetDynamodbTableArgs, GetDynamodbTableResult, GetDynamodbTableOutputArgs } from "./getDynamodbTable";
export const getDynamodbTable: typeof import("./getDynamodbTable").getDynamodbTable = null as any;
export const getDynamodbTableOutput: typeof import("./getDynamodbTable").getDynamodbTableOutput = null as any;
utilities.lazyLoad(exports, ["getDynamodbTable","getDynamodbTableOutput"], () => require("./getDynamodbTable"));

export { GetDynamodbTablesResult } from "./getDynamodbTables";
export const getDynamodbTables: typeof import("./getDynamodbTables").getDynamodbTables = null as any;
export const getDynamodbTablesOutput: typeof import("./getDynamodbTables").getDynamodbTablesOutput = null as any;
utilities.lazyLoad(exports, ["getDynamodbTables","getDynamodbTablesOutput"], () => require("./getDynamodbTables"));

export { GetEc2CapacityReservationArgs, GetEc2CapacityReservationResult, GetEc2CapacityReservationOutputArgs } from "./getEc2CapacityReservation";
export const getEc2CapacityReservation: typeof import("./getEc2CapacityReservation").getEc2CapacityReservation = null as any;
export const getEc2CapacityReservationOutput: typeof import("./getEc2CapacityReservation").getEc2CapacityReservationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2CapacityReservation","getEc2CapacityReservationOutput"], () => require("./getEc2CapacityReservation"));

export { GetEc2CapacityReservationFleetArgs, GetEc2CapacityReservationFleetResult, GetEc2CapacityReservationFleetOutputArgs } from "./getEc2CapacityReservationFleet";
export const getEc2CapacityReservationFleet: typeof import("./getEc2CapacityReservationFleet").getEc2CapacityReservationFleet = null as any;
export const getEc2CapacityReservationFleetOutput: typeof import("./getEc2CapacityReservationFleet").getEc2CapacityReservationFleetOutput = null as any;
utilities.lazyLoad(exports, ["getEc2CapacityReservationFleet","getEc2CapacityReservationFleetOutput"], () => require("./getEc2CapacityReservationFleet"));

export { GetEc2CapacityReservationFleetsResult } from "./getEc2CapacityReservationFleets";
export const getEc2CapacityReservationFleets: typeof import("./getEc2CapacityReservationFleets").getEc2CapacityReservationFleets = null as any;
export const getEc2CapacityReservationFleetsOutput: typeof import("./getEc2CapacityReservationFleets").getEc2CapacityReservationFleetsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2CapacityReservationFleets","getEc2CapacityReservationFleetsOutput"], () => require("./getEc2CapacityReservationFleets"));

export { GetEc2CapacityReservationsResult } from "./getEc2CapacityReservations";
export const getEc2CapacityReservations: typeof import("./getEc2CapacityReservations").getEc2CapacityReservations = null as any;
export const getEc2CapacityReservationsOutput: typeof import("./getEc2CapacityReservations").getEc2CapacityReservationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2CapacityReservations","getEc2CapacityReservationsOutput"], () => require("./getEc2CapacityReservations"));

export { GetEc2CarrierGatewayArgs, GetEc2CarrierGatewayResult, GetEc2CarrierGatewayOutputArgs } from "./getEc2CarrierGateway";
export const getEc2CarrierGateway: typeof import("./getEc2CarrierGateway").getEc2CarrierGateway = null as any;
export const getEc2CarrierGatewayOutput: typeof import("./getEc2CarrierGateway").getEc2CarrierGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getEc2CarrierGateway","getEc2CarrierGatewayOutput"], () => require("./getEc2CarrierGateway"));

export { GetEc2CarrierGatewaysResult } from "./getEc2CarrierGateways";
export const getEc2CarrierGateways: typeof import("./getEc2CarrierGateways").getEc2CarrierGateways = null as any;
export const getEc2CarrierGatewaysOutput: typeof import("./getEc2CarrierGateways").getEc2CarrierGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getEc2CarrierGateways","getEc2CarrierGatewaysOutput"], () => require("./getEc2CarrierGateways"));

export { GetEc2CustomerGatewayArgs, GetEc2CustomerGatewayResult, GetEc2CustomerGatewayOutputArgs } from "./getEc2CustomerGateway";
export const getEc2CustomerGateway: typeof import("./getEc2CustomerGateway").getEc2CustomerGateway = null as any;
export const getEc2CustomerGatewayOutput: typeof import("./getEc2CustomerGateway").getEc2CustomerGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getEc2CustomerGateway","getEc2CustomerGatewayOutput"], () => require("./getEc2CustomerGateway"));

export { GetEc2CustomerGatewaysResult } from "./getEc2CustomerGateways";
export const getEc2CustomerGateways: typeof import("./getEc2CustomerGateways").getEc2CustomerGateways = null as any;
export const getEc2CustomerGatewaysOutput: typeof import("./getEc2CustomerGateways").getEc2CustomerGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getEc2CustomerGateways","getEc2CustomerGatewaysOutput"], () => require("./getEc2CustomerGateways"));

export { GetEc2DhcpOptionsArgs, GetEc2DhcpOptionsResult, GetEc2DhcpOptionsOutputArgs } from "./getEc2DhcpOptions";
export const getEc2DhcpOptions: typeof import("./getEc2DhcpOptions").getEc2DhcpOptions = null as any;
export const getEc2DhcpOptionsOutput: typeof import("./getEc2DhcpOptions").getEc2DhcpOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2DhcpOptions","getEc2DhcpOptionsOutput"], () => require("./getEc2DhcpOptions"));

export { GetEc2DhcpOptionsPluralResult } from "./getEc2DhcpOptionsPlural";
export const getEc2DhcpOptionsPlural: typeof import("./getEc2DhcpOptionsPlural").getEc2DhcpOptionsPlural = null as any;
export const getEc2DhcpOptionsPluralOutput: typeof import("./getEc2DhcpOptionsPlural").getEc2DhcpOptionsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getEc2DhcpOptionsPlural","getEc2DhcpOptionsPluralOutput"], () => require("./getEc2DhcpOptionsPlural"));

export { GetEc2Ec2FleetArgs, GetEc2Ec2FleetResult, GetEc2Ec2FleetOutputArgs } from "./getEc2Ec2Fleet";
export const getEc2Ec2Fleet: typeof import("./getEc2Ec2Fleet").getEc2Ec2Fleet = null as any;
export const getEc2Ec2FleetOutput: typeof import("./getEc2Ec2Fleet").getEc2Ec2FleetOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Ec2Fleet","getEc2Ec2FleetOutput"], () => require("./getEc2Ec2Fleet"));

export { GetEc2Ec2FleetsResult } from "./getEc2Ec2Fleets";
export const getEc2Ec2Fleets: typeof import("./getEc2Ec2Fleets").getEc2Ec2Fleets = null as any;
export const getEc2Ec2FleetsOutput: typeof import("./getEc2Ec2Fleets").getEc2Ec2FleetsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Ec2Fleets","getEc2Ec2FleetsOutput"], () => require("./getEc2Ec2Fleets"));

export { GetEc2EgressOnlyInternetGatewayArgs, GetEc2EgressOnlyInternetGatewayResult, GetEc2EgressOnlyInternetGatewayOutputArgs } from "./getEc2EgressOnlyInternetGateway";
export const getEc2EgressOnlyInternetGateway: typeof import("./getEc2EgressOnlyInternetGateway").getEc2EgressOnlyInternetGateway = null as any;
export const getEc2EgressOnlyInternetGatewayOutput: typeof import("./getEc2EgressOnlyInternetGateway").getEc2EgressOnlyInternetGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getEc2EgressOnlyInternetGateway","getEc2EgressOnlyInternetGatewayOutput"], () => require("./getEc2EgressOnlyInternetGateway"));

export { GetEc2EgressOnlyInternetGatewaysResult } from "./getEc2EgressOnlyInternetGateways";
export const getEc2EgressOnlyInternetGateways: typeof import("./getEc2EgressOnlyInternetGateways").getEc2EgressOnlyInternetGateways = null as any;
export const getEc2EgressOnlyInternetGatewaysOutput: typeof import("./getEc2EgressOnlyInternetGateways").getEc2EgressOnlyInternetGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getEc2EgressOnlyInternetGateways","getEc2EgressOnlyInternetGatewaysOutput"], () => require("./getEc2EgressOnlyInternetGateways"));

export { GetEc2EipArgs, GetEc2EipResult, GetEc2EipOutputArgs } from "./getEc2Eip";
export const getEc2Eip: typeof import("./getEc2Eip").getEc2Eip = null as any;
export const getEc2EipOutput: typeof import("./getEc2Eip").getEc2EipOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Eip","getEc2EipOutput"], () => require("./getEc2Eip"));

export { GetEc2EipAssociationArgs, GetEc2EipAssociationResult, GetEc2EipAssociationOutputArgs } from "./getEc2EipAssociation";
export const getEc2EipAssociation: typeof import("./getEc2EipAssociation").getEc2EipAssociation = null as any;
export const getEc2EipAssociationOutput: typeof import("./getEc2EipAssociation").getEc2EipAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2EipAssociation","getEc2EipAssociationOutput"], () => require("./getEc2EipAssociation"));

export { GetEc2EipAssociationsResult } from "./getEc2EipAssociations";
export const getEc2EipAssociations: typeof import("./getEc2EipAssociations").getEc2EipAssociations = null as any;
export const getEc2EipAssociationsOutput: typeof import("./getEc2EipAssociations").getEc2EipAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2EipAssociations","getEc2EipAssociationsOutput"], () => require("./getEc2EipAssociations"));

export { GetEc2EipsResult } from "./getEc2Eips";
export const getEc2Eips: typeof import("./getEc2Eips").getEc2Eips = null as any;
export const getEc2EipsOutput: typeof import("./getEc2Eips").getEc2EipsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Eips","getEc2EipsOutput"], () => require("./getEc2Eips"));

export { GetEc2EnclaveCertificateIamRoleAssociationArgs, GetEc2EnclaveCertificateIamRoleAssociationResult, GetEc2EnclaveCertificateIamRoleAssociationOutputArgs } from "./getEc2EnclaveCertificateIamRoleAssociation";
export const getEc2EnclaveCertificateIamRoleAssociation: typeof import("./getEc2EnclaveCertificateIamRoleAssociation").getEc2EnclaveCertificateIamRoleAssociation = null as any;
export const getEc2EnclaveCertificateIamRoleAssociationOutput: typeof import("./getEc2EnclaveCertificateIamRoleAssociation").getEc2EnclaveCertificateIamRoleAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2EnclaveCertificateIamRoleAssociation","getEc2EnclaveCertificateIamRoleAssociationOutput"], () => require("./getEc2EnclaveCertificateIamRoleAssociation"));

export { GetEc2EnclaveCertificateIamRoleAssociationsResult } from "./getEc2EnclaveCertificateIamRoleAssociations";
export const getEc2EnclaveCertificateIamRoleAssociations: typeof import("./getEc2EnclaveCertificateIamRoleAssociations").getEc2EnclaveCertificateIamRoleAssociations = null as any;
export const getEc2EnclaveCertificateIamRoleAssociationsOutput: typeof import("./getEc2EnclaveCertificateIamRoleAssociations").getEc2EnclaveCertificateIamRoleAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2EnclaveCertificateIamRoleAssociations","getEc2EnclaveCertificateIamRoleAssociationsOutput"], () => require("./getEc2EnclaveCertificateIamRoleAssociations"));

export { GetEc2FlowLogArgs, GetEc2FlowLogResult, GetEc2FlowLogOutputArgs } from "./getEc2FlowLog";
export const getEc2FlowLog: typeof import("./getEc2FlowLog").getEc2FlowLog = null as any;
export const getEc2FlowLogOutput: typeof import("./getEc2FlowLog").getEc2FlowLogOutput = null as any;
utilities.lazyLoad(exports, ["getEc2FlowLog","getEc2FlowLogOutput"], () => require("./getEc2FlowLog"));

export { GetEc2FlowLogsResult } from "./getEc2FlowLogs";
export const getEc2FlowLogs: typeof import("./getEc2FlowLogs").getEc2FlowLogs = null as any;
export const getEc2FlowLogsOutput: typeof import("./getEc2FlowLogs").getEc2FlowLogsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2FlowLogs","getEc2FlowLogsOutput"], () => require("./getEc2FlowLogs"));

export { GetEc2GatewayRouteTableAssociationArgs, GetEc2GatewayRouteTableAssociationResult, GetEc2GatewayRouteTableAssociationOutputArgs } from "./getEc2GatewayRouteTableAssociation";
export const getEc2GatewayRouteTableAssociation: typeof import("./getEc2GatewayRouteTableAssociation").getEc2GatewayRouteTableAssociation = null as any;
export const getEc2GatewayRouteTableAssociationOutput: typeof import("./getEc2GatewayRouteTableAssociation").getEc2GatewayRouteTableAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2GatewayRouteTableAssociation","getEc2GatewayRouteTableAssociationOutput"], () => require("./getEc2GatewayRouteTableAssociation"));

export { GetEc2HostArgs, GetEc2HostResult, GetEc2HostOutputArgs } from "./getEc2Host";
export const getEc2Host: typeof import("./getEc2Host").getEc2Host = null as any;
export const getEc2HostOutput: typeof import("./getEc2Host").getEc2HostOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Host","getEc2HostOutput"], () => require("./getEc2Host"));

export { GetEc2HostsResult } from "./getEc2Hosts";
export const getEc2Hosts: typeof import("./getEc2Hosts").getEc2Hosts = null as any;
export const getEc2HostsOutput: typeof import("./getEc2Hosts").getEc2HostsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Hosts","getEc2HostsOutput"], () => require("./getEc2Hosts"));

export { GetEc2InstanceArgs, GetEc2InstanceResult, GetEc2InstanceOutputArgs } from "./getEc2Instance";
export const getEc2Instance: typeof import("./getEc2Instance").getEc2Instance = null as any;
export const getEc2InstanceOutput: typeof import("./getEc2Instance").getEc2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Instance","getEc2InstanceOutput"], () => require("./getEc2Instance"));

export { GetEc2InstanceConnectEndpointArgs, GetEc2InstanceConnectEndpointResult, GetEc2InstanceConnectEndpointOutputArgs } from "./getEc2InstanceConnectEndpoint";
export const getEc2InstanceConnectEndpoint: typeof import("./getEc2InstanceConnectEndpoint").getEc2InstanceConnectEndpoint = null as any;
export const getEc2InstanceConnectEndpointOutput: typeof import("./getEc2InstanceConnectEndpoint").getEc2InstanceConnectEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEc2InstanceConnectEndpoint","getEc2InstanceConnectEndpointOutput"], () => require("./getEc2InstanceConnectEndpoint"));

export { GetEc2InstanceConnectEndpointsResult } from "./getEc2InstanceConnectEndpoints";
export const getEc2InstanceConnectEndpoints: typeof import("./getEc2InstanceConnectEndpoints").getEc2InstanceConnectEndpoints = null as any;
export const getEc2InstanceConnectEndpointsOutput: typeof import("./getEc2InstanceConnectEndpoints").getEc2InstanceConnectEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2InstanceConnectEndpoints","getEc2InstanceConnectEndpointsOutput"], () => require("./getEc2InstanceConnectEndpoints"));

export { GetEc2InstancesResult } from "./getEc2Instances";
export const getEc2Instances: typeof import("./getEc2Instances").getEc2Instances = null as any;
export const getEc2InstancesOutput: typeof import("./getEc2Instances").getEc2InstancesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Instances","getEc2InstancesOutput"], () => require("./getEc2Instances"));

export { GetEc2InternetGatewayArgs, GetEc2InternetGatewayResult, GetEc2InternetGatewayOutputArgs } from "./getEc2InternetGateway";
export const getEc2InternetGateway: typeof import("./getEc2InternetGateway").getEc2InternetGateway = null as any;
export const getEc2InternetGatewayOutput: typeof import("./getEc2InternetGateway").getEc2InternetGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getEc2InternetGateway","getEc2InternetGatewayOutput"], () => require("./getEc2InternetGateway"));

export { GetEc2InternetGatewaysResult } from "./getEc2InternetGateways";
export const getEc2InternetGateways: typeof import("./getEc2InternetGateways").getEc2InternetGateways = null as any;
export const getEc2InternetGatewaysOutput: typeof import("./getEc2InternetGateways").getEc2InternetGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getEc2InternetGateways","getEc2InternetGatewaysOutput"], () => require("./getEc2InternetGateways"));

export { GetEc2IpamArgs, GetEc2IpamResult, GetEc2IpamOutputArgs } from "./getEc2Ipam";
export const getEc2Ipam: typeof import("./getEc2Ipam").getEc2Ipam = null as any;
export const getEc2IpamOutput: typeof import("./getEc2Ipam").getEc2IpamOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Ipam","getEc2IpamOutput"], () => require("./getEc2Ipam"));

export { GetEc2IpamAllocationArgs, GetEc2IpamAllocationResult, GetEc2IpamAllocationOutputArgs } from "./getEc2IpamAllocation";
export const getEc2IpamAllocation: typeof import("./getEc2IpamAllocation").getEc2IpamAllocation = null as any;
export const getEc2IpamAllocationOutput: typeof import("./getEc2IpamAllocation").getEc2IpamAllocationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2IpamAllocation","getEc2IpamAllocationOutput"], () => require("./getEc2IpamAllocation"));

export { GetEc2IpamPoolArgs, GetEc2IpamPoolResult, GetEc2IpamPoolOutputArgs } from "./getEc2IpamPool";
export const getEc2IpamPool: typeof import("./getEc2IpamPool").getEc2IpamPool = null as any;
export const getEc2IpamPoolOutput: typeof import("./getEc2IpamPool").getEc2IpamPoolOutput = null as any;
utilities.lazyLoad(exports, ["getEc2IpamPool","getEc2IpamPoolOutput"], () => require("./getEc2IpamPool"));

export { GetEc2IpamPoolCidrArgs, GetEc2IpamPoolCidrResult, GetEc2IpamPoolCidrOutputArgs } from "./getEc2IpamPoolCidr";
export const getEc2IpamPoolCidr: typeof import("./getEc2IpamPoolCidr").getEc2IpamPoolCidr = null as any;
export const getEc2IpamPoolCidrOutput: typeof import("./getEc2IpamPoolCidr").getEc2IpamPoolCidrOutput = null as any;
utilities.lazyLoad(exports, ["getEc2IpamPoolCidr","getEc2IpamPoolCidrOutput"], () => require("./getEc2IpamPoolCidr"));

export { GetEc2IpamPoolsResult } from "./getEc2IpamPools";
export const getEc2IpamPools: typeof import("./getEc2IpamPools").getEc2IpamPools = null as any;
export const getEc2IpamPoolsOutput: typeof import("./getEc2IpamPools").getEc2IpamPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2IpamPools","getEc2IpamPoolsOutput"], () => require("./getEc2IpamPools"));

export { GetEc2IpamResourceDiscoveriesResult } from "./getEc2IpamResourceDiscoveries";
export const getEc2IpamResourceDiscoveries: typeof import("./getEc2IpamResourceDiscoveries").getEc2IpamResourceDiscoveries = null as any;
export const getEc2IpamResourceDiscoveriesOutput: typeof import("./getEc2IpamResourceDiscoveries").getEc2IpamResourceDiscoveriesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2IpamResourceDiscoveries","getEc2IpamResourceDiscoveriesOutput"], () => require("./getEc2IpamResourceDiscoveries"));

export { GetEc2IpamResourceDiscoveryArgs, GetEc2IpamResourceDiscoveryResult, GetEc2IpamResourceDiscoveryOutputArgs } from "./getEc2IpamResourceDiscovery";
export const getEc2IpamResourceDiscovery: typeof import("./getEc2IpamResourceDiscovery").getEc2IpamResourceDiscovery = null as any;
export const getEc2IpamResourceDiscoveryOutput: typeof import("./getEc2IpamResourceDiscovery").getEc2IpamResourceDiscoveryOutput = null as any;
utilities.lazyLoad(exports, ["getEc2IpamResourceDiscovery","getEc2IpamResourceDiscoveryOutput"], () => require("./getEc2IpamResourceDiscovery"));

export { GetEc2IpamResourceDiscoveryAssociationArgs, GetEc2IpamResourceDiscoveryAssociationResult, GetEc2IpamResourceDiscoveryAssociationOutputArgs } from "./getEc2IpamResourceDiscoveryAssociation";
export const getEc2IpamResourceDiscoveryAssociation: typeof import("./getEc2IpamResourceDiscoveryAssociation").getEc2IpamResourceDiscoveryAssociation = null as any;
export const getEc2IpamResourceDiscoveryAssociationOutput: typeof import("./getEc2IpamResourceDiscoveryAssociation").getEc2IpamResourceDiscoveryAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2IpamResourceDiscoveryAssociation","getEc2IpamResourceDiscoveryAssociationOutput"], () => require("./getEc2IpamResourceDiscoveryAssociation"));

export { GetEc2IpamResourceDiscoveryAssociationsResult } from "./getEc2IpamResourceDiscoveryAssociations";
export const getEc2IpamResourceDiscoveryAssociations: typeof import("./getEc2IpamResourceDiscoveryAssociations").getEc2IpamResourceDiscoveryAssociations = null as any;
export const getEc2IpamResourceDiscoveryAssociationsOutput: typeof import("./getEc2IpamResourceDiscoveryAssociations").getEc2IpamResourceDiscoveryAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2IpamResourceDiscoveryAssociations","getEc2IpamResourceDiscoveryAssociationsOutput"], () => require("./getEc2IpamResourceDiscoveryAssociations"));

export { GetEc2IpamScopeArgs, GetEc2IpamScopeResult, GetEc2IpamScopeOutputArgs } from "./getEc2IpamScope";
export const getEc2IpamScope: typeof import("./getEc2IpamScope").getEc2IpamScope = null as any;
export const getEc2IpamScopeOutput: typeof import("./getEc2IpamScope").getEc2IpamScopeOutput = null as any;
utilities.lazyLoad(exports, ["getEc2IpamScope","getEc2IpamScopeOutput"], () => require("./getEc2IpamScope"));

export { GetEc2IpamScopesResult } from "./getEc2IpamScopes";
export const getEc2IpamScopes: typeof import("./getEc2IpamScopes").getEc2IpamScopes = null as any;
export const getEc2IpamScopesOutput: typeof import("./getEc2IpamScopes").getEc2IpamScopesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2IpamScopes","getEc2IpamScopesOutput"], () => require("./getEc2IpamScopes"));

export { GetEc2IpamsResult } from "./getEc2Ipams";
export const getEc2Ipams: typeof import("./getEc2Ipams").getEc2Ipams = null as any;
export const getEc2IpamsOutput: typeof import("./getEc2Ipams").getEc2IpamsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Ipams","getEc2IpamsOutput"], () => require("./getEc2Ipams"));

export { GetEc2KeyPairArgs, GetEc2KeyPairResult, GetEc2KeyPairOutputArgs } from "./getEc2KeyPair";
export const getEc2KeyPair: typeof import("./getEc2KeyPair").getEc2KeyPair = null as any;
export const getEc2KeyPairOutput: typeof import("./getEc2KeyPair").getEc2KeyPairOutput = null as any;
utilities.lazyLoad(exports, ["getEc2KeyPair","getEc2KeyPairOutput"], () => require("./getEc2KeyPair"));

export { GetEc2KeyPairsResult } from "./getEc2KeyPairs";
export const getEc2KeyPairs: typeof import("./getEc2KeyPairs").getEc2KeyPairs = null as any;
export const getEc2KeyPairsOutput: typeof import("./getEc2KeyPairs").getEc2KeyPairsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2KeyPairs","getEc2KeyPairsOutput"], () => require("./getEc2KeyPairs"));

export { GetEc2LaunchTemplateArgs, GetEc2LaunchTemplateResult, GetEc2LaunchTemplateOutputArgs } from "./getEc2LaunchTemplate";
export const getEc2LaunchTemplate: typeof import("./getEc2LaunchTemplate").getEc2LaunchTemplate = null as any;
export const getEc2LaunchTemplateOutput: typeof import("./getEc2LaunchTemplate").getEc2LaunchTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LaunchTemplate","getEc2LaunchTemplateOutput"], () => require("./getEc2LaunchTemplate"));

export { GetEc2LaunchTemplatesResult } from "./getEc2LaunchTemplates";
export const getEc2LaunchTemplates: typeof import("./getEc2LaunchTemplates").getEc2LaunchTemplates = null as any;
export const getEc2LaunchTemplatesOutput: typeof import("./getEc2LaunchTemplates").getEc2LaunchTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LaunchTemplates","getEc2LaunchTemplatesOutput"], () => require("./getEc2LaunchTemplates"));

export { GetEc2LocalGatewayRouteArgs, GetEc2LocalGatewayRouteResult, GetEc2LocalGatewayRouteOutputArgs } from "./getEc2LocalGatewayRoute";
export const getEc2LocalGatewayRoute: typeof import("./getEc2LocalGatewayRoute").getEc2LocalGatewayRoute = null as any;
export const getEc2LocalGatewayRouteOutput: typeof import("./getEc2LocalGatewayRoute").getEc2LocalGatewayRouteOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayRoute","getEc2LocalGatewayRouteOutput"], () => require("./getEc2LocalGatewayRoute"));

export { GetEc2LocalGatewayRouteTableArgs, GetEc2LocalGatewayRouteTableResult, GetEc2LocalGatewayRouteTableOutputArgs } from "./getEc2LocalGatewayRouteTable";
export const getEc2LocalGatewayRouteTable: typeof import("./getEc2LocalGatewayRouteTable").getEc2LocalGatewayRouteTable = null as any;
export const getEc2LocalGatewayRouteTableOutput: typeof import("./getEc2LocalGatewayRouteTable").getEc2LocalGatewayRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayRouteTable","getEc2LocalGatewayRouteTableOutput"], () => require("./getEc2LocalGatewayRouteTable"));

export { GetEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociationArgs, GetEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociationResult, GetEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociationOutputArgs } from "./getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociation";
export const getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociation: typeof import("./getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociation").getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociation = null as any;
export const getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput: typeof import("./getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociation").getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociation","getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput"], () => require("./getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociation"));

export { GetEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult } from "./getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociations";
export const getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociations: typeof import("./getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociations").getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociations = null as any;
export const getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput: typeof import("./getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociations").getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociations","getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput"], () => require("./getEc2LocalGatewayRouteTableVirtualInterfaceGroupAssociations"));

export { GetEc2LocalGatewayRouteTableVpcAssociationArgs, GetEc2LocalGatewayRouteTableVpcAssociationResult, GetEc2LocalGatewayRouteTableVpcAssociationOutputArgs } from "./getEc2LocalGatewayRouteTableVpcAssociation";
export const getEc2LocalGatewayRouteTableVpcAssociation: typeof import("./getEc2LocalGatewayRouteTableVpcAssociation").getEc2LocalGatewayRouteTableVpcAssociation = null as any;
export const getEc2LocalGatewayRouteTableVpcAssociationOutput: typeof import("./getEc2LocalGatewayRouteTableVpcAssociation").getEc2LocalGatewayRouteTableVpcAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayRouteTableVpcAssociation","getEc2LocalGatewayRouteTableVpcAssociationOutput"], () => require("./getEc2LocalGatewayRouteTableVpcAssociation"));

export { GetEc2LocalGatewayRouteTableVpcAssociationsResult } from "./getEc2LocalGatewayRouteTableVpcAssociations";
export const getEc2LocalGatewayRouteTableVpcAssociations: typeof import("./getEc2LocalGatewayRouteTableVpcAssociations").getEc2LocalGatewayRouteTableVpcAssociations = null as any;
export const getEc2LocalGatewayRouteTableVpcAssociationsOutput: typeof import("./getEc2LocalGatewayRouteTableVpcAssociations").getEc2LocalGatewayRouteTableVpcAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayRouteTableVpcAssociations","getEc2LocalGatewayRouteTableVpcAssociationsOutput"], () => require("./getEc2LocalGatewayRouteTableVpcAssociations"));

export { GetEc2LocalGatewayRouteTablesResult } from "./getEc2LocalGatewayRouteTables";
export const getEc2LocalGatewayRouteTables: typeof import("./getEc2LocalGatewayRouteTables").getEc2LocalGatewayRouteTables = null as any;
export const getEc2LocalGatewayRouteTablesOutput: typeof import("./getEc2LocalGatewayRouteTables").getEc2LocalGatewayRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayRouteTables","getEc2LocalGatewayRouteTablesOutput"], () => require("./getEc2LocalGatewayRouteTables"));

export { GetEc2LocalGatewayRoutesResult } from "./getEc2LocalGatewayRoutes";
export const getEc2LocalGatewayRoutes: typeof import("./getEc2LocalGatewayRoutes").getEc2LocalGatewayRoutes = null as any;
export const getEc2LocalGatewayRoutesOutput: typeof import("./getEc2LocalGatewayRoutes").getEc2LocalGatewayRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayRoutes","getEc2LocalGatewayRoutesOutput"], () => require("./getEc2LocalGatewayRoutes"));

export { GetEc2NatGatewayArgs, GetEc2NatGatewayResult, GetEc2NatGatewayOutputArgs } from "./getEc2NatGateway";
export const getEc2NatGateway: typeof import("./getEc2NatGateway").getEc2NatGateway = null as any;
export const getEc2NatGatewayOutput: typeof import("./getEc2NatGateway").getEc2NatGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NatGateway","getEc2NatGatewayOutput"], () => require("./getEc2NatGateway"));

export { GetEc2NatGatewaysResult } from "./getEc2NatGateways";
export const getEc2NatGateways: typeof import("./getEc2NatGateways").getEc2NatGateways = null as any;
export const getEc2NatGatewaysOutput: typeof import("./getEc2NatGateways").getEc2NatGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NatGateways","getEc2NatGatewaysOutput"], () => require("./getEc2NatGateways"));

export { GetEc2NetworkAclArgs, GetEc2NetworkAclResult, GetEc2NetworkAclOutputArgs } from "./getEc2NetworkAcl";
export const getEc2NetworkAcl: typeof import("./getEc2NetworkAcl").getEc2NetworkAcl = null as any;
export const getEc2NetworkAclOutput: typeof import("./getEc2NetworkAcl").getEc2NetworkAclOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkAcl","getEc2NetworkAclOutput"], () => require("./getEc2NetworkAcl"));

export { GetEc2NetworkAclsResult } from "./getEc2NetworkAcls";
export const getEc2NetworkAcls: typeof import("./getEc2NetworkAcls").getEc2NetworkAcls = null as any;
export const getEc2NetworkAclsOutput: typeof import("./getEc2NetworkAcls").getEc2NetworkAclsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkAcls","getEc2NetworkAclsOutput"], () => require("./getEc2NetworkAcls"));

export { GetEc2NetworkInsightsAccessScopeArgs, GetEc2NetworkInsightsAccessScopeResult, GetEc2NetworkInsightsAccessScopeOutputArgs } from "./getEc2NetworkInsightsAccessScope";
export const getEc2NetworkInsightsAccessScope: typeof import("./getEc2NetworkInsightsAccessScope").getEc2NetworkInsightsAccessScope = null as any;
export const getEc2NetworkInsightsAccessScopeOutput: typeof import("./getEc2NetworkInsightsAccessScope").getEc2NetworkInsightsAccessScopeOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInsightsAccessScope","getEc2NetworkInsightsAccessScopeOutput"], () => require("./getEc2NetworkInsightsAccessScope"));

export { GetEc2NetworkInsightsAccessScopeAnalysesResult } from "./getEc2NetworkInsightsAccessScopeAnalyses";
export const getEc2NetworkInsightsAccessScopeAnalyses: typeof import("./getEc2NetworkInsightsAccessScopeAnalyses").getEc2NetworkInsightsAccessScopeAnalyses = null as any;
export const getEc2NetworkInsightsAccessScopeAnalysesOutput: typeof import("./getEc2NetworkInsightsAccessScopeAnalyses").getEc2NetworkInsightsAccessScopeAnalysesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInsightsAccessScopeAnalyses","getEc2NetworkInsightsAccessScopeAnalysesOutput"], () => require("./getEc2NetworkInsightsAccessScopeAnalyses"));

export { GetEc2NetworkInsightsAccessScopeAnalysisArgs, GetEc2NetworkInsightsAccessScopeAnalysisResult, GetEc2NetworkInsightsAccessScopeAnalysisOutputArgs } from "./getEc2NetworkInsightsAccessScopeAnalysis";
export const getEc2NetworkInsightsAccessScopeAnalysis: typeof import("./getEc2NetworkInsightsAccessScopeAnalysis").getEc2NetworkInsightsAccessScopeAnalysis = null as any;
export const getEc2NetworkInsightsAccessScopeAnalysisOutput: typeof import("./getEc2NetworkInsightsAccessScopeAnalysis").getEc2NetworkInsightsAccessScopeAnalysisOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInsightsAccessScopeAnalysis","getEc2NetworkInsightsAccessScopeAnalysisOutput"], () => require("./getEc2NetworkInsightsAccessScopeAnalysis"));

export { GetEc2NetworkInsightsAccessScopesResult } from "./getEc2NetworkInsightsAccessScopes";
export const getEc2NetworkInsightsAccessScopes: typeof import("./getEc2NetworkInsightsAccessScopes").getEc2NetworkInsightsAccessScopes = null as any;
export const getEc2NetworkInsightsAccessScopesOutput: typeof import("./getEc2NetworkInsightsAccessScopes").getEc2NetworkInsightsAccessScopesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInsightsAccessScopes","getEc2NetworkInsightsAccessScopesOutput"], () => require("./getEc2NetworkInsightsAccessScopes"));

export { GetEc2NetworkInsightsAnalysesResult } from "./getEc2NetworkInsightsAnalyses";
export const getEc2NetworkInsightsAnalyses: typeof import("./getEc2NetworkInsightsAnalyses").getEc2NetworkInsightsAnalyses = null as any;
export const getEc2NetworkInsightsAnalysesOutput: typeof import("./getEc2NetworkInsightsAnalyses").getEc2NetworkInsightsAnalysesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInsightsAnalyses","getEc2NetworkInsightsAnalysesOutput"], () => require("./getEc2NetworkInsightsAnalyses"));

export { GetEc2NetworkInsightsAnalysisArgs, GetEc2NetworkInsightsAnalysisResult, GetEc2NetworkInsightsAnalysisOutputArgs } from "./getEc2NetworkInsightsAnalysis";
export const getEc2NetworkInsightsAnalysis: typeof import("./getEc2NetworkInsightsAnalysis").getEc2NetworkInsightsAnalysis = null as any;
export const getEc2NetworkInsightsAnalysisOutput: typeof import("./getEc2NetworkInsightsAnalysis").getEc2NetworkInsightsAnalysisOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInsightsAnalysis","getEc2NetworkInsightsAnalysisOutput"], () => require("./getEc2NetworkInsightsAnalysis"));

export { GetEc2NetworkInsightsPathArgs, GetEc2NetworkInsightsPathResult, GetEc2NetworkInsightsPathOutputArgs } from "./getEc2NetworkInsightsPath";
export const getEc2NetworkInsightsPath: typeof import("./getEc2NetworkInsightsPath").getEc2NetworkInsightsPath = null as any;
export const getEc2NetworkInsightsPathOutput: typeof import("./getEc2NetworkInsightsPath").getEc2NetworkInsightsPathOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInsightsPath","getEc2NetworkInsightsPathOutput"], () => require("./getEc2NetworkInsightsPath"));

export { GetEc2NetworkInsightsPathsResult } from "./getEc2NetworkInsightsPaths";
export const getEc2NetworkInsightsPaths: typeof import("./getEc2NetworkInsightsPaths").getEc2NetworkInsightsPaths = null as any;
export const getEc2NetworkInsightsPathsOutput: typeof import("./getEc2NetworkInsightsPaths").getEc2NetworkInsightsPathsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInsightsPaths","getEc2NetworkInsightsPathsOutput"], () => require("./getEc2NetworkInsightsPaths"));

export { GetEc2NetworkInterfaceArgs, GetEc2NetworkInterfaceResult, GetEc2NetworkInterfaceOutputArgs } from "./getEc2NetworkInterface";
export const getEc2NetworkInterface: typeof import("./getEc2NetworkInterface").getEc2NetworkInterface = null as any;
export const getEc2NetworkInterfaceOutput: typeof import("./getEc2NetworkInterface").getEc2NetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInterface","getEc2NetworkInterfaceOutput"], () => require("./getEc2NetworkInterface"));

export { GetEc2NetworkInterfaceAttachmentArgs, GetEc2NetworkInterfaceAttachmentResult, GetEc2NetworkInterfaceAttachmentOutputArgs } from "./getEc2NetworkInterfaceAttachment";
export const getEc2NetworkInterfaceAttachment: typeof import("./getEc2NetworkInterfaceAttachment").getEc2NetworkInterfaceAttachment = null as any;
export const getEc2NetworkInterfaceAttachmentOutput: typeof import("./getEc2NetworkInterfaceAttachment").getEc2NetworkInterfaceAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInterfaceAttachment","getEc2NetworkInterfaceAttachmentOutput"], () => require("./getEc2NetworkInterfaceAttachment"));

export { GetEc2NetworkInterfaceAttachmentsResult } from "./getEc2NetworkInterfaceAttachments";
export const getEc2NetworkInterfaceAttachments: typeof import("./getEc2NetworkInterfaceAttachments").getEc2NetworkInterfaceAttachments = null as any;
export const getEc2NetworkInterfaceAttachmentsOutput: typeof import("./getEc2NetworkInterfaceAttachments").getEc2NetworkInterfaceAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInterfaceAttachments","getEc2NetworkInterfaceAttachmentsOutput"], () => require("./getEc2NetworkInterfaceAttachments"));

export { GetEc2NetworkInterfacesResult } from "./getEc2NetworkInterfaces";
export const getEc2NetworkInterfaces: typeof import("./getEc2NetworkInterfaces").getEc2NetworkInterfaces = null as any;
export const getEc2NetworkInterfacesOutput: typeof import("./getEc2NetworkInterfaces").getEc2NetworkInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInterfaces","getEc2NetworkInterfacesOutput"], () => require("./getEc2NetworkInterfaces"));

export { GetEc2NetworkPerformanceMetricSubscriptionArgs, GetEc2NetworkPerformanceMetricSubscriptionResult, GetEc2NetworkPerformanceMetricSubscriptionOutputArgs } from "./getEc2NetworkPerformanceMetricSubscription";
export const getEc2NetworkPerformanceMetricSubscription: typeof import("./getEc2NetworkPerformanceMetricSubscription").getEc2NetworkPerformanceMetricSubscription = null as any;
export const getEc2NetworkPerformanceMetricSubscriptionOutput: typeof import("./getEc2NetworkPerformanceMetricSubscription").getEc2NetworkPerformanceMetricSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkPerformanceMetricSubscription","getEc2NetworkPerformanceMetricSubscriptionOutput"], () => require("./getEc2NetworkPerformanceMetricSubscription"));

export { GetEc2NetworkPerformanceMetricSubscriptionsResult } from "./getEc2NetworkPerformanceMetricSubscriptions";
export const getEc2NetworkPerformanceMetricSubscriptions: typeof import("./getEc2NetworkPerformanceMetricSubscriptions").getEc2NetworkPerformanceMetricSubscriptions = null as any;
export const getEc2NetworkPerformanceMetricSubscriptionsOutput: typeof import("./getEc2NetworkPerformanceMetricSubscriptions").getEc2NetworkPerformanceMetricSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkPerformanceMetricSubscriptions","getEc2NetworkPerformanceMetricSubscriptionsOutput"], () => require("./getEc2NetworkPerformanceMetricSubscriptions"));

export { GetEc2PlacementGroupArgs, GetEc2PlacementGroupResult, GetEc2PlacementGroupOutputArgs } from "./getEc2PlacementGroup";
export const getEc2PlacementGroup: typeof import("./getEc2PlacementGroup").getEc2PlacementGroup = null as any;
export const getEc2PlacementGroupOutput: typeof import("./getEc2PlacementGroup").getEc2PlacementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEc2PlacementGroup","getEc2PlacementGroupOutput"], () => require("./getEc2PlacementGroup"));

export { GetEc2PlacementGroupsResult } from "./getEc2PlacementGroups";
export const getEc2PlacementGroups: typeof import("./getEc2PlacementGroups").getEc2PlacementGroups = null as any;
export const getEc2PlacementGroupsOutput: typeof import("./getEc2PlacementGroups").getEc2PlacementGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2PlacementGroups","getEc2PlacementGroupsOutput"], () => require("./getEc2PlacementGroups"));

export { GetEc2PrefixListArgs, GetEc2PrefixListResult, GetEc2PrefixListOutputArgs } from "./getEc2PrefixList";
export const getEc2PrefixList: typeof import("./getEc2PrefixList").getEc2PrefixList = null as any;
export const getEc2PrefixListOutput: typeof import("./getEc2PrefixList").getEc2PrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getEc2PrefixList","getEc2PrefixListOutput"], () => require("./getEc2PrefixList"));

export { GetEc2PrefixListsResult } from "./getEc2PrefixLists";
export const getEc2PrefixLists: typeof import("./getEc2PrefixLists").getEc2PrefixLists = null as any;
export const getEc2PrefixListsOutput: typeof import("./getEc2PrefixLists").getEc2PrefixListsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2PrefixLists","getEc2PrefixListsOutput"], () => require("./getEc2PrefixLists"));

export { GetEc2RouteArgs, GetEc2RouteResult, GetEc2RouteOutputArgs } from "./getEc2Route";
export const getEc2Route: typeof import("./getEc2Route").getEc2Route = null as any;
export const getEc2RouteOutput: typeof import("./getEc2Route").getEc2RouteOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Route","getEc2RouteOutput"], () => require("./getEc2Route"));

export { GetEc2RouteTableArgs, GetEc2RouteTableResult, GetEc2RouteTableOutputArgs } from "./getEc2RouteTable";
export const getEc2RouteTable: typeof import("./getEc2RouteTable").getEc2RouteTable = null as any;
export const getEc2RouteTableOutput: typeof import("./getEc2RouteTable").getEc2RouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getEc2RouteTable","getEc2RouteTableOutput"], () => require("./getEc2RouteTable"));

export { GetEc2RouteTablesResult } from "./getEc2RouteTables";
export const getEc2RouteTables: typeof import("./getEc2RouteTables").getEc2RouteTables = null as any;
export const getEc2RouteTablesOutput: typeof import("./getEc2RouteTables").getEc2RouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2RouteTables","getEc2RouteTablesOutput"], () => require("./getEc2RouteTables"));

export { GetEc2SecurityGroupArgs, GetEc2SecurityGroupResult, GetEc2SecurityGroupOutputArgs } from "./getEc2SecurityGroup";
export const getEc2SecurityGroup: typeof import("./getEc2SecurityGroup").getEc2SecurityGroup = null as any;
export const getEc2SecurityGroupOutput: typeof import("./getEc2SecurityGroup").getEc2SecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SecurityGroup","getEc2SecurityGroupOutput"], () => require("./getEc2SecurityGroup"));

export { GetEc2SecurityGroupEgressArgs, GetEc2SecurityGroupEgressResult, GetEc2SecurityGroupEgressOutputArgs } from "./getEc2SecurityGroupEgress";
export const getEc2SecurityGroupEgress: typeof import("./getEc2SecurityGroupEgress").getEc2SecurityGroupEgress = null as any;
export const getEc2SecurityGroupEgressOutput: typeof import("./getEc2SecurityGroupEgress").getEc2SecurityGroupEgressOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SecurityGroupEgress","getEc2SecurityGroupEgressOutput"], () => require("./getEc2SecurityGroupEgress"));

export { GetEc2SecurityGroupEgressesResult } from "./getEc2SecurityGroupEgresses";
export const getEc2SecurityGroupEgresses: typeof import("./getEc2SecurityGroupEgresses").getEc2SecurityGroupEgresses = null as any;
export const getEc2SecurityGroupEgressesOutput: typeof import("./getEc2SecurityGroupEgresses").getEc2SecurityGroupEgressesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SecurityGroupEgresses","getEc2SecurityGroupEgressesOutput"], () => require("./getEc2SecurityGroupEgresses"));

export { GetEc2SecurityGroupIngressArgs, GetEc2SecurityGroupIngressResult, GetEc2SecurityGroupIngressOutputArgs } from "./getEc2SecurityGroupIngress";
export const getEc2SecurityGroupIngress: typeof import("./getEc2SecurityGroupIngress").getEc2SecurityGroupIngress = null as any;
export const getEc2SecurityGroupIngressOutput: typeof import("./getEc2SecurityGroupIngress").getEc2SecurityGroupIngressOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SecurityGroupIngress","getEc2SecurityGroupIngressOutput"], () => require("./getEc2SecurityGroupIngress"));

export { GetEc2SecurityGroupIngressesResult } from "./getEc2SecurityGroupIngresses";
export const getEc2SecurityGroupIngresses: typeof import("./getEc2SecurityGroupIngresses").getEc2SecurityGroupIngresses = null as any;
export const getEc2SecurityGroupIngressesOutput: typeof import("./getEc2SecurityGroupIngresses").getEc2SecurityGroupIngressesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SecurityGroupIngresses","getEc2SecurityGroupIngressesOutput"], () => require("./getEc2SecurityGroupIngresses"));

export { GetEc2SecurityGroupsResult } from "./getEc2SecurityGroups";
export const getEc2SecurityGroups: typeof import("./getEc2SecurityGroups").getEc2SecurityGroups = null as any;
export const getEc2SecurityGroupsOutput: typeof import("./getEc2SecurityGroups").getEc2SecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SecurityGroups","getEc2SecurityGroupsOutput"], () => require("./getEc2SecurityGroups"));

export { GetEc2SnapshotBlockPublicAccessArgs, GetEc2SnapshotBlockPublicAccessResult, GetEc2SnapshotBlockPublicAccessOutputArgs } from "./getEc2SnapshotBlockPublicAccess";
export const getEc2SnapshotBlockPublicAccess: typeof import("./getEc2SnapshotBlockPublicAccess").getEc2SnapshotBlockPublicAccess = null as any;
export const getEc2SnapshotBlockPublicAccessOutput: typeof import("./getEc2SnapshotBlockPublicAccess").getEc2SnapshotBlockPublicAccessOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SnapshotBlockPublicAccess","getEc2SnapshotBlockPublicAccessOutput"], () => require("./getEc2SnapshotBlockPublicAccess"));

export { GetEc2SnapshotBlockPublicAccessesResult } from "./getEc2SnapshotBlockPublicAccesses";
export const getEc2SnapshotBlockPublicAccesses: typeof import("./getEc2SnapshotBlockPublicAccesses").getEc2SnapshotBlockPublicAccesses = null as any;
export const getEc2SnapshotBlockPublicAccessesOutput: typeof import("./getEc2SnapshotBlockPublicAccesses").getEc2SnapshotBlockPublicAccessesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SnapshotBlockPublicAccesses","getEc2SnapshotBlockPublicAccessesOutput"], () => require("./getEc2SnapshotBlockPublicAccesses"));

export { GetEc2SpotFleetArgs, GetEc2SpotFleetResult, GetEc2SpotFleetOutputArgs } from "./getEc2SpotFleet";
export const getEc2SpotFleet: typeof import("./getEc2SpotFleet").getEc2SpotFleet = null as any;
export const getEc2SpotFleetOutput: typeof import("./getEc2SpotFleet").getEc2SpotFleetOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SpotFleet","getEc2SpotFleetOutput"], () => require("./getEc2SpotFleet"));

export { GetEc2SpotFleetsResult } from "./getEc2SpotFleets";
export const getEc2SpotFleets: typeof import("./getEc2SpotFleets").getEc2SpotFleets = null as any;
export const getEc2SpotFleetsOutput: typeof import("./getEc2SpotFleets").getEc2SpotFleetsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SpotFleets","getEc2SpotFleetsOutput"], () => require("./getEc2SpotFleets"));

export { GetEc2SubnetArgs, GetEc2SubnetResult, GetEc2SubnetOutputArgs } from "./getEc2Subnet";
export const getEc2Subnet: typeof import("./getEc2Subnet").getEc2Subnet = null as any;
export const getEc2SubnetOutput: typeof import("./getEc2Subnet").getEc2SubnetOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Subnet","getEc2SubnetOutput"], () => require("./getEc2Subnet"));

export { GetEc2SubnetCidrBlockArgs, GetEc2SubnetCidrBlockResult, GetEc2SubnetCidrBlockOutputArgs } from "./getEc2SubnetCidrBlock";
export const getEc2SubnetCidrBlock: typeof import("./getEc2SubnetCidrBlock").getEc2SubnetCidrBlock = null as any;
export const getEc2SubnetCidrBlockOutput: typeof import("./getEc2SubnetCidrBlock").getEc2SubnetCidrBlockOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SubnetCidrBlock","getEc2SubnetCidrBlockOutput"], () => require("./getEc2SubnetCidrBlock"));

export { GetEc2SubnetCidrBlocksResult } from "./getEc2SubnetCidrBlocks";
export const getEc2SubnetCidrBlocks: typeof import("./getEc2SubnetCidrBlocks").getEc2SubnetCidrBlocks = null as any;
export const getEc2SubnetCidrBlocksOutput: typeof import("./getEc2SubnetCidrBlocks").getEc2SubnetCidrBlocksOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SubnetCidrBlocks","getEc2SubnetCidrBlocksOutput"], () => require("./getEc2SubnetCidrBlocks"));

export { GetEc2SubnetNetworkAclAssociationArgs, GetEc2SubnetNetworkAclAssociationResult, GetEc2SubnetNetworkAclAssociationOutputArgs } from "./getEc2SubnetNetworkAclAssociation";
export const getEc2SubnetNetworkAclAssociation: typeof import("./getEc2SubnetNetworkAclAssociation").getEc2SubnetNetworkAclAssociation = null as any;
export const getEc2SubnetNetworkAclAssociationOutput: typeof import("./getEc2SubnetNetworkAclAssociation").getEc2SubnetNetworkAclAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SubnetNetworkAclAssociation","getEc2SubnetNetworkAclAssociationOutput"], () => require("./getEc2SubnetNetworkAclAssociation"));

export { GetEc2SubnetNetworkAclAssociationsResult } from "./getEc2SubnetNetworkAclAssociations";
export const getEc2SubnetNetworkAclAssociations: typeof import("./getEc2SubnetNetworkAclAssociations").getEc2SubnetNetworkAclAssociations = null as any;
export const getEc2SubnetNetworkAclAssociationsOutput: typeof import("./getEc2SubnetNetworkAclAssociations").getEc2SubnetNetworkAclAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SubnetNetworkAclAssociations","getEc2SubnetNetworkAclAssociationsOutput"], () => require("./getEc2SubnetNetworkAclAssociations"));

export { GetEc2SubnetRouteTableAssociationArgs, GetEc2SubnetRouteTableAssociationResult, GetEc2SubnetRouteTableAssociationOutputArgs } from "./getEc2SubnetRouteTableAssociation";
export const getEc2SubnetRouteTableAssociation: typeof import("./getEc2SubnetRouteTableAssociation").getEc2SubnetRouteTableAssociation = null as any;
export const getEc2SubnetRouteTableAssociationOutput: typeof import("./getEc2SubnetRouteTableAssociation").getEc2SubnetRouteTableAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SubnetRouteTableAssociation","getEc2SubnetRouteTableAssociationOutput"], () => require("./getEc2SubnetRouteTableAssociation"));

export { GetEc2SubnetRouteTableAssociationsResult } from "./getEc2SubnetRouteTableAssociations";
export const getEc2SubnetRouteTableAssociations: typeof import("./getEc2SubnetRouteTableAssociations").getEc2SubnetRouteTableAssociations = null as any;
export const getEc2SubnetRouteTableAssociationsOutput: typeof import("./getEc2SubnetRouteTableAssociations").getEc2SubnetRouteTableAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SubnetRouteTableAssociations","getEc2SubnetRouteTableAssociationsOutput"], () => require("./getEc2SubnetRouteTableAssociations"));

export { GetEc2SubnetsResult } from "./getEc2Subnets";
export const getEc2Subnets: typeof import("./getEc2Subnets").getEc2Subnets = null as any;
export const getEc2SubnetsOutput: typeof import("./getEc2Subnets").getEc2SubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Subnets","getEc2SubnetsOutput"], () => require("./getEc2Subnets"));

export { GetEc2TransitGatewayArgs, GetEc2TransitGatewayResult, GetEc2TransitGatewayOutputArgs } from "./getEc2TransitGateway";
export const getEc2TransitGateway: typeof import("./getEc2TransitGateway").getEc2TransitGateway = null as any;
export const getEc2TransitGatewayOutput: typeof import("./getEc2TransitGateway").getEc2TransitGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGateway","getEc2TransitGatewayOutput"], () => require("./getEc2TransitGateway"));

export { GetEc2TransitGatewayAttachmentArgs, GetEc2TransitGatewayAttachmentResult, GetEc2TransitGatewayAttachmentOutputArgs } from "./getEc2TransitGatewayAttachment";
export const getEc2TransitGatewayAttachment: typeof import("./getEc2TransitGatewayAttachment").getEc2TransitGatewayAttachment = null as any;
export const getEc2TransitGatewayAttachmentOutput: typeof import("./getEc2TransitGatewayAttachment").getEc2TransitGatewayAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayAttachment","getEc2TransitGatewayAttachmentOutput"], () => require("./getEc2TransitGatewayAttachment"));

export { GetEc2TransitGatewayAttachmentsResult } from "./getEc2TransitGatewayAttachments";
export const getEc2TransitGatewayAttachments: typeof import("./getEc2TransitGatewayAttachments").getEc2TransitGatewayAttachments = null as any;
export const getEc2TransitGatewayAttachmentsOutput: typeof import("./getEc2TransitGatewayAttachments").getEc2TransitGatewayAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayAttachments","getEc2TransitGatewayAttachmentsOutput"], () => require("./getEc2TransitGatewayAttachments"));

export { GetEc2TransitGatewayConnectArgs, GetEc2TransitGatewayConnectResult, GetEc2TransitGatewayConnectOutputArgs } from "./getEc2TransitGatewayConnect";
export const getEc2TransitGatewayConnect: typeof import("./getEc2TransitGatewayConnect").getEc2TransitGatewayConnect = null as any;
export const getEc2TransitGatewayConnectOutput: typeof import("./getEc2TransitGatewayConnect").getEc2TransitGatewayConnectOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayConnect","getEc2TransitGatewayConnectOutput"], () => require("./getEc2TransitGatewayConnect"));

export { GetEc2TransitGatewayConnectsResult } from "./getEc2TransitGatewayConnects";
export const getEc2TransitGatewayConnects: typeof import("./getEc2TransitGatewayConnects").getEc2TransitGatewayConnects = null as any;
export const getEc2TransitGatewayConnectsOutput: typeof import("./getEc2TransitGatewayConnects").getEc2TransitGatewayConnectsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayConnects","getEc2TransitGatewayConnectsOutput"], () => require("./getEc2TransitGatewayConnects"));

export { GetEc2TransitGatewayMulticastDomainArgs, GetEc2TransitGatewayMulticastDomainResult, GetEc2TransitGatewayMulticastDomainOutputArgs } from "./getEc2TransitGatewayMulticastDomain";
export const getEc2TransitGatewayMulticastDomain: typeof import("./getEc2TransitGatewayMulticastDomain").getEc2TransitGatewayMulticastDomain = null as any;
export const getEc2TransitGatewayMulticastDomainOutput: typeof import("./getEc2TransitGatewayMulticastDomain").getEc2TransitGatewayMulticastDomainOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayMulticastDomain","getEc2TransitGatewayMulticastDomainOutput"], () => require("./getEc2TransitGatewayMulticastDomain"));

export { GetEc2TransitGatewayMulticastDomainAssociationArgs, GetEc2TransitGatewayMulticastDomainAssociationResult, GetEc2TransitGatewayMulticastDomainAssociationOutputArgs } from "./getEc2TransitGatewayMulticastDomainAssociation";
export const getEc2TransitGatewayMulticastDomainAssociation: typeof import("./getEc2TransitGatewayMulticastDomainAssociation").getEc2TransitGatewayMulticastDomainAssociation = null as any;
export const getEc2TransitGatewayMulticastDomainAssociationOutput: typeof import("./getEc2TransitGatewayMulticastDomainAssociation").getEc2TransitGatewayMulticastDomainAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayMulticastDomainAssociation","getEc2TransitGatewayMulticastDomainAssociationOutput"], () => require("./getEc2TransitGatewayMulticastDomainAssociation"));

export { GetEc2TransitGatewayMulticastDomainAssociationsResult } from "./getEc2TransitGatewayMulticastDomainAssociations";
export const getEc2TransitGatewayMulticastDomainAssociations: typeof import("./getEc2TransitGatewayMulticastDomainAssociations").getEc2TransitGatewayMulticastDomainAssociations = null as any;
export const getEc2TransitGatewayMulticastDomainAssociationsOutput: typeof import("./getEc2TransitGatewayMulticastDomainAssociations").getEc2TransitGatewayMulticastDomainAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayMulticastDomainAssociations","getEc2TransitGatewayMulticastDomainAssociationsOutput"], () => require("./getEc2TransitGatewayMulticastDomainAssociations"));

export { GetEc2TransitGatewayMulticastDomainsResult } from "./getEc2TransitGatewayMulticastDomains";
export const getEc2TransitGatewayMulticastDomains: typeof import("./getEc2TransitGatewayMulticastDomains").getEc2TransitGatewayMulticastDomains = null as any;
export const getEc2TransitGatewayMulticastDomainsOutput: typeof import("./getEc2TransitGatewayMulticastDomains").getEc2TransitGatewayMulticastDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayMulticastDomains","getEc2TransitGatewayMulticastDomainsOutput"], () => require("./getEc2TransitGatewayMulticastDomains"));

export { GetEc2TransitGatewayMulticastGroupMemberArgs, GetEc2TransitGatewayMulticastGroupMemberResult, GetEc2TransitGatewayMulticastGroupMemberOutputArgs } from "./getEc2TransitGatewayMulticastGroupMember";
export const getEc2TransitGatewayMulticastGroupMember: typeof import("./getEc2TransitGatewayMulticastGroupMember").getEc2TransitGatewayMulticastGroupMember = null as any;
export const getEc2TransitGatewayMulticastGroupMemberOutput: typeof import("./getEc2TransitGatewayMulticastGroupMember").getEc2TransitGatewayMulticastGroupMemberOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayMulticastGroupMember","getEc2TransitGatewayMulticastGroupMemberOutput"], () => require("./getEc2TransitGatewayMulticastGroupMember"));

export { GetEc2TransitGatewayMulticastGroupMembersResult } from "./getEc2TransitGatewayMulticastGroupMembers";
export const getEc2TransitGatewayMulticastGroupMembers: typeof import("./getEc2TransitGatewayMulticastGroupMembers").getEc2TransitGatewayMulticastGroupMembers = null as any;
export const getEc2TransitGatewayMulticastGroupMembersOutput: typeof import("./getEc2TransitGatewayMulticastGroupMembers").getEc2TransitGatewayMulticastGroupMembersOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayMulticastGroupMembers","getEc2TransitGatewayMulticastGroupMembersOutput"], () => require("./getEc2TransitGatewayMulticastGroupMembers"));

export { GetEc2TransitGatewayMulticastGroupSourceArgs, GetEc2TransitGatewayMulticastGroupSourceResult, GetEc2TransitGatewayMulticastGroupSourceOutputArgs } from "./getEc2TransitGatewayMulticastGroupSource";
export const getEc2TransitGatewayMulticastGroupSource: typeof import("./getEc2TransitGatewayMulticastGroupSource").getEc2TransitGatewayMulticastGroupSource = null as any;
export const getEc2TransitGatewayMulticastGroupSourceOutput: typeof import("./getEc2TransitGatewayMulticastGroupSource").getEc2TransitGatewayMulticastGroupSourceOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayMulticastGroupSource","getEc2TransitGatewayMulticastGroupSourceOutput"], () => require("./getEc2TransitGatewayMulticastGroupSource"));

export { GetEc2TransitGatewayMulticastGroupSourcesResult } from "./getEc2TransitGatewayMulticastGroupSources";
export const getEc2TransitGatewayMulticastGroupSources: typeof import("./getEc2TransitGatewayMulticastGroupSources").getEc2TransitGatewayMulticastGroupSources = null as any;
export const getEc2TransitGatewayMulticastGroupSourcesOutput: typeof import("./getEc2TransitGatewayMulticastGroupSources").getEc2TransitGatewayMulticastGroupSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayMulticastGroupSources","getEc2TransitGatewayMulticastGroupSourcesOutput"], () => require("./getEc2TransitGatewayMulticastGroupSources"));

export { GetEc2TransitGatewayPeeringAttachmentArgs, GetEc2TransitGatewayPeeringAttachmentResult, GetEc2TransitGatewayPeeringAttachmentOutputArgs } from "./getEc2TransitGatewayPeeringAttachment";
export const getEc2TransitGatewayPeeringAttachment: typeof import("./getEc2TransitGatewayPeeringAttachment").getEc2TransitGatewayPeeringAttachment = null as any;
export const getEc2TransitGatewayPeeringAttachmentOutput: typeof import("./getEc2TransitGatewayPeeringAttachment").getEc2TransitGatewayPeeringAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayPeeringAttachment","getEc2TransitGatewayPeeringAttachmentOutput"], () => require("./getEc2TransitGatewayPeeringAttachment"));

export { GetEc2TransitGatewayPeeringAttachmentsResult } from "./getEc2TransitGatewayPeeringAttachments";
export const getEc2TransitGatewayPeeringAttachments: typeof import("./getEc2TransitGatewayPeeringAttachments").getEc2TransitGatewayPeeringAttachments = null as any;
export const getEc2TransitGatewayPeeringAttachmentsOutput: typeof import("./getEc2TransitGatewayPeeringAttachments").getEc2TransitGatewayPeeringAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayPeeringAttachments","getEc2TransitGatewayPeeringAttachmentsOutput"], () => require("./getEc2TransitGatewayPeeringAttachments"));

export { GetEc2TransitGatewayRouteArgs, GetEc2TransitGatewayRouteResult, GetEc2TransitGatewayRouteOutputArgs } from "./getEc2TransitGatewayRoute";
export const getEc2TransitGatewayRoute: typeof import("./getEc2TransitGatewayRoute").getEc2TransitGatewayRoute = null as any;
export const getEc2TransitGatewayRouteOutput: typeof import("./getEc2TransitGatewayRoute").getEc2TransitGatewayRouteOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayRoute","getEc2TransitGatewayRouteOutput"], () => require("./getEc2TransitGatewayRoute"));

export { GetEc2TransitGatewayRouteTableArgs, GetEc2TransitGatewayRouteTableResult, GetEc2TransitGatewayRouteTableOutputArgs } from "./getEc2TransitGatewayRouteTable";
export const getEc2TransitGatewayRouteTable: typeof import("./getEc2TransitGatewayRouteTable").getEc2TransitGatewayRouteTable = null as any;
export const getEc2TransitGatewayRouteTableOutput: typeof import("./getEc2TransitGatewayRouteTable").getEc2TransitGatewayRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayRouteTable","getEc2TransitGatewayRouteTableOutput"], () => require("./getEc2TransitGatewayRouteTable"));

export { GetEc2TransitGatewayRouteTableAssociationArgs, GetEc2TransitGatewayRouteTableAssociationResult, GetEc2TransitGatewayRouteTableAssociationOutputArgs } from "./getEc2TransitGatewayRouteTableAssociation";
export const getEc2TransitGatewayRouteTableAssociation: typeof import("./getEc2TransitGatewayRouteTableAssociation").getEc2TransitGatewayRouteTableAssociation = null as any;
export const getEc2TransitGatewayRouteTableAssociationOutput: typeof import("./getEc2TransitGatewayRouteTableAssociation").getEc2TransitGatewayRouteTableAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayRouteTableAssociation","getEc2TransitGatewayRouteTableAssociationOutput"], () => require("./getEc2TransitGatewayRouteTableAssociation"));

export { GetEc2TransitGatewayRouteTablePropagationArgs, GetEc2TransitGatewayRouteTablePropagationResult, GetEc2TransitGatewayRouteTablePropagationOutputArgs } from "./getEc2TransitGatewayRouteTablePropagation";
export const getEc2TransitGatewayRouteTablePropagation: typeof import("./getEc2TransitGatewayRouteTablePropagation").getEc2TransitGatewayRouteTablePropagation = null as any;
export const getEc2TransitGatewayRouteTablePropagationOutput: typeof import("./getEc2TransitGatewayRouteTablePropagation").getEc2TransitGatewayRouteTablePropagationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayRouteTablePropagation","getEc2TransitGatewayRouteTablePropagationOutput"], () => require("./getEc2TransitGatewayRouteTablePropagation"));

export { GetEc2TransitGatewayRouteTablesResult } from "./getEc2TransitGatewayRouteTables";
export const getEc2TransitGatewayRouteTables: typeof import("./getEc2TransitGatewayRouteTables").getEc2TransitGatewayRouteTables = null as any;
export const getEc2TransitGatewayRouteTablesOutput: typeof import("./getEc2TransitGatewayRouteTables").getEc2TransitGatewayRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayRouteTables","getEc2TransitGatewayRouteTablesOutput"], () => require("./getEc2TransitGatewayRouteTables"));

export { GetEc2TransitGatewayVpcAttachmentArgs, GetEc2TransitGatewayVpcAttachmentResult, GetEc2TransitGatewayVpcAttachmentOutputArgs } from "./getEc2TransitGatewayVpcAttachment";
export const getEc2TransitGatewayVpcAttachment: typeof import("./getEc2TransitGatewayVpcAttachment").getEc2TransitGatewayVpcAttachment = null as any;
export const getEc2TransitGatewayVpcAttachmentOutput: typeof import("./getEc2TransitGatewayVpcAttachment").getEc2TransitGatewayVpcAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayVpcAttachment","getEc2TransitGatewayVpcAttachmentOutput"], () => require("./getEc2TransitGatewayVpcAttachment"));

export { GetEc2TransitGatewayVpcAttachmentsResult } from "./getEc2TransitGatewayVpcAttachments";
export const getEc2TransitGatewayVpcAttachments: typeof import("./getEc2TransitGatewayVpcAttachments").getEc2TransitGatewayVpcAttachments = null as any;
export const getEc2TransitGatewayVpcAttachmentsOutput: typeof import("./getEc2TransitGatewayVpcAttachments").getEc2TransitGatewayVpcAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayVpcAttachments","getEc2TransitGatewayVpcAttachmentsOutput"], () => require("./getEc2TransitGatewayVpcAttachments"));

export { GetEc2TransitGatewaysResult } from "./getEc2TransitGateways";
export const getEc2TransitGateways: typeof import("./getEc2TransitGateways").getEc2TransitGateways = null as any;
export const getEc2TransitGatewaysOutput: typeof import("./getEc2TransitGateways").getEc2TransitGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGateways","getEc2TransitGatewaysOutput"], () => require("./getEc2TransitGateways"));

export { GetEc2VerifiedAccessEndpointArgs, GetEc2VerifiedAccessEndpointResult, GetEc2VerifiedAccessEndpointOutputArgs } from "./getEc2VerifiedAccessEndpoint";
export const getEc2VerifiedAccessEndpoint: typeof import("./getEc2VerifiedAccessEndpoint").getEc2VerifiedAccessEndpoint = null as any;
export const getEc2VerifiedAccessEndpointOutput: typeof import("./getEc2VerifiedAccessEndpoint").getEc2VerifiedAccessEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VerifiedAccessEndpoint","getEc2VerifiedAccessEndpointOutput"], () => require("./getEc2VerifiedAccessEndpoint"));

export { GetEc2VerifiedAccessEndpointsResult } from "./getEc2VerifiedAccessEndpoints";
export const getEc2VerifiedAccessEndpoints: typeof import("./getEc2VerifiedAccessEndpoints").getEc2VerifiedAccessEndpoints = null as any;
export const getEc2VerifiedAccessEndpointsOutput: typeof import("./getEc2VerifiedAccessEndpoints").getEc2VerifiedAccessEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VerifiedAccessEndpoints","getEc2VerifiedAccessEndpointsOutput"], () => require("./getEc2VerifiedAccessEndpoints"));

export { GetEc2VerifiedAccessGroupArgs, GetEc2VerifiedAccessGroupResult, GetEc2VerifiedAccessGroupOutputArgs } from "./getEc2VerifiedAccessGroup";
export const getEc2VerifiedAccessGroup: typeof import("./getEc2VerifiedAccessGroup").getEc2VerifiedAccessGroup = null as any;
export const getEc2VerifiedAccessGroupOutput: typeof import("./getEc2VerifiedAccessGroup").getEc2VerifiedAccessGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VerifiedAccessGroup","getEc2VerifiedAccessGroupOutput"], () => require("./getEc2VerifiedAccessGroup"));

export { GetEc2VerifiedAccessGroupsResult } from "./getEc2VerifiedAccessGroups";
export const getEc2VerifiedAccessGroups: typeof import("./getEc2VerifiedAccessGroups").getEc2VerifiedAccessGroups = null as any;
export const getEc2VerifiedAccessGroupsOutput: typeof import("./getEc2VerifiedAccessGroups").getEc2VerifiedAccessGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VerifiedAccessGroups","getEc2VerifiedAccessGroupsOutput"], () => require("./getEc2VerifiedAccessGroups"));

export { GetEc2VerifiedAccessInstanceArgs, GetEc2VerifiedAccessInstanceResult, GetEc2VerifiedAccessInstanceOutputArgs } from "./getEc2VerifiedAccessInstance";
export const getEc2VerifiedAccessInstance: typeof import("./getEc2VerifiedAccessInstance").getEc2VerifiedAccessInstance = null as any;
export const getEc2VerifiedAccessInstanceOutput: typeof import("./getEc2VerifiedAccessInstance").getEc2VerifiedAccessInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VerifiedAccessInstance","getEc2VerifiedAccessInstanceOutput"], () => require("./getEc2VerifiedAccessInstance"));

export { GetEc2VerifiedAccessInstancesResult } from "./getEc2VerifiedAccessInstances";
export const getEc2VerifiedAccessInstances: typeof import("./getEc2VerifiedAccessInstances").getEc2VerifiedAccessInstances = null as any;
export const getEc2VerifiedAccessInstancesOutput: typeof import("./getEc2VerifiedAccessInstances").getEc2VerifiedAccessInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VerifiedAccessInstances","getEc2VerifiedAccessInstancesOutput"], () => require("./getEc2VerifiedAccessInstances"));

export { GetEc2VerifiedAccessTrustProviderArgs, GetEc2VerifiedAccessTrustProviderResult, GetEc2VerifiedAccessTrustProviderOutputArgs } from "./getEc2VerifiedAccessTrustProvider";
export const getEc2VerifiedAccessTrustProvider: typeof import("./getEc2VerifiedAccessTrustProvider").getEc2VerifiedAccessTrustProvider = null as any;
export const getEc2VerifiedAccessTrustProviderOutput: typeof import("./getEc2VerifiedAccessTrustProvider").getEc2VerifiedAccessTrustProviderOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VerifiedAccessTrustProvider","getEc2VerifiedAccessTrustProviderOutput"], () => require("./getEc2VerifiedAccessTrustProvider"));

export { GetEc2VerifiedAccessTrustProvidersResult } from "./getEc2VerifiedAccessTrustProviders";
export const getEc2VerifiedAccessTrustProviders: typeof import("./getEc2VerifiedAccessTrustProviders").getEc2VerifiedAccessTrustProviders = null as any;
export const getEc2VerifiedAccessTrustProvidersOutput: typeof import("./getEc2VerifiedAccessTrustProviders").getEc2VerifiedAccessTrustProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VerifiedAccessTrustProviders","getEc2VerifiedAccessTrustProvidersOutput"], () => require("./getEc2VerifiedAccessTrustProviders"));

export { GetEc2VolumeArgs, GetEc2VolumeResult, GetEc2VolumeOutputArgs } from "./getEc2Volume";
export const getEc2Volume: typeof import("./getEc2Volume").getEc2Volume = null as any;
export const getEc2VolumeOutput: typeof import("./getEc2Volume").getEc2VolumeOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Volume","getEc2VolumeOutput"], () => require("./getEc2Volume"));

export { GetEc2VolumeAttachmentArgs, GetEc2VolumeAttachmentResult, GetEc2VolumeAttachmentOutputArgs } from "./getEc2VolumeAttachment";
export const getEc2VolumeAttachment: typeof import("./getEc2VolumeAttachment").getEc2VolumeAttachment = null as any;
export const getEc2VolumeAttachmentOutput: typeof import("./getEc2VolumeAttachment").getEc2VolumeAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VolumeAttachment","getEc2VolumeAttachmentOutput"], () => require("./getEc2VolumeAttachment"));

export { GetEc2VolumeAttachmentsResult } from "./getEc2VolumeAttachments";
export const getEc2VolumeAttachments: typeof import("./getEc2VolumeAttachments").getEc2VolumeAttachments = null as any;
export const getEc2VolumeAttachmentsOutput: typeof import("./getEc2VolumeAttachments").getEc2VolumeAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VolumeAttachments","getEc2VolumeAttachmentsOutput"], () => require("./getEc2VolumeAttachments"));

export { GetEc2VolumesResult } from "./getEc2Volumes";
export const getEc2Volumes: typeof import("./getEc2Volumes").getEc2Volumes = null as any;
export const getEc2VolumesOutput: typeof import("./getEc2Volumes").getEc2VolumesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Volumes","getEc2VolumesOutput"], () => require("./getEc2Volumes"));

export { GetEc2VpcArgs, GetEc2VpcResult, GetEc2VpcOutputArgs } from "./getEc2Vpc";
export const getEc2Vpc: typeof import("./getEc2Vpc").getEc2Vpc = null as any;
export const getEc2VpcOutput: typeof import("./getEc2Vpc").getEc2VpcOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Vpc","getEc2VpcOutput"], () => require("./getEc2Vpc"));

export { GetEc2VpcCidrBlockArgs, GetEc2VpcCidrBlockResult, GetEc2VpcCidrBlockOutputArgs } from "./getEc2VpcCidrBlock";
export const getEc2VpcCidrBlock: typeof import("./getEc2VpcCidrBlock").getEc2VpcCidrBlock = null as any;
export const getEc2VpcCidrBlockOutput: typeof import("./getEc2VpcCidrBlock").getEc2VpcCidrBlockOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcCidrBlock","getEc2VpcCidrBlockOutput"], () => require("./getEc2VpcCidrBlock"));

export { GetEc2VpcEndpointArgs, GetEc2VpcEndpointResult, GetEc2VpcEndpointOutputArgs } from "./getEc2VpcEndpoint";
export const getEc2VpcEndpoint: typeof import("./getEc2VpcEndpoint").getEc2VpcEndpoint = null as any;
export const getEc2VpcEndpointOutput: typeof import("./getEc2VpcEndpoint").getEc2VpcEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcEndpoint","getEc2VpcEndpointOutput"], () => require("./getEc2VpcEndpoint"));

export { GetEc2VpcEndpointConnectionNotificationArgs, GetEc2VpcEndpointConnectionNotificationResult, GetEc2VpcEndpointConnectionNotificationOutputArgs } from "./getEc2VpcEndpointConnectionNotification";
export const getEc2VpcEndpointConnectionNotification: typeof import("./getEc2VpcEndpointConnectionNotification").getEc2VpcEndpointConnectionNotification = null as any;
export const getEc2VpcEndpointConnectionNotificationOutput: typeof import("./getEc2VpcEndpointConnectionNotification").getEc2VpcEndpointConnectionNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcEndpointConnectionNotification","getEc2VpcEndpointConnectionNotificationOutput"], () => require("./getEc2VpcEndpointConnectionNotification"));

export { GetEc2VpcEndpointConnectionNotificationsResult } from "./getEc2VpcEndpointConnectionNotifications";
export const getEc2VpcEndpointConnectionNotifications: typeof import("./getEc2VpcEndpointConnectionNotifications").getEc2VpcEndpointConnectionNotifications = null as any;
export const getEc2VpcEndpointConnectionNotificationsOutput: typeof import("./getEc2VpcEndpointConnectionNotifications").getEc2VpcEndpointConnectionNotificationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcEndpointConnectionNotifications","getEc2VpcEndpointConnectionNotificationsOutput"], () => require("./getEc2VpcEndpointConnectionNotifications"));

export { GetEc2VpcEndpointServiceArgs, GetEc2VpcEndpointServiceResult, GetEc2VpcEndpointServiceOutputArgs } from "./getEc2VpcEndpointService";
export const getEc2VpcEndpointService: typeof import("./getEc2VpcEndpointService").getEc2VpcEndpointService = null as any;
export const getEc2VpcEndpointServiceOutput: typeof import("./getEc2VpcEndpointService").getEc2VpcEndpointServiceOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcEndpointService","getEc2VpcEndpointServiceOutput"], () => require("./getEc2VpcEndpointService"));

export { GetEc2VpcEndpointServicePermissionsArgs, GetEc2VpcEndpointServicePermissionsResult, GetEc2VpcEndpointServicePermissionsOutputArgs } from "./getEc2VpcEndpointServicePermissions";
export const getEc2VpcEndpointServicePermissions: typeof import("./getEc2VpcEndpointServicePermissions").getEc2VpcEndpointServicePermissions = null as any;
export const getEc2VpcEndpointServicePermissionsOutput: typeof import("./getEc2VpcEndpointServicePermissions").getEc2VpcEndpointServicePermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcEndpointServicePermissions","getEc2VpcEndpointServicePermissionsOutput"], () => require("./getEc2VpcEndpointServicePermissions"));

export { GetEc2VpcEndpointServicePermissionsPluralResult } from "./getEc2VpcEndpointServicePermissionsPlural";
export const getEc2VpcEndpointServicePermissionsPlural: typeof import("./getEc2VpcEndpointServicePermissionsPlural").getEc2VpcEndpointServicePermissionsPlural = null as any;
export const getEc2VpcEndpointServicePermissionsPluralOutput: typeof import("./getEc2VpcEndpointServicePermissionsPlural").getEc2VpcEndpointServicePermissionsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcEndpointServicePermissionsPlural","getEc2VpcEndpointServicePermissionsPluralOutput"], () => require("./getEc2VpcEndpointServicePermissionsPlural"));

export { GetEc2VpcEndpointServicesResult } from "./getEc2VpcEndpointServices";
export const getEc2VpcEndpointServices: typeof import("./getEc2VpcEndpointServices").getEc2VpcEndpointServices = null as any;
export const getEc2VpcEndpointServicesOutput: typeof import("./getEc2VpcEndpointServices").getEc2VpcEndpointServicesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcEndpointServices","getEc2VpcEndpointServicesOutput"], () => require("./getEc2VpcEndpointServices"));

export { GetEc2VpcEndpointsResult } from "./getEc2VpcEndpoints";
export const getEc2VpcEndpoints: typeof import("./getEc2VpcEndpoints").getEc2VpcEndpoints = null as any;
export const getEc2VpcEndpointsOutput: typeof import("./getEc2VpcEndpoints").getEc2VpcEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcEndpoints","getEc2VpcEndpointsOutput"], () => require("./getEc2VpcEndpoints"));

export { GetEc2VpcGatewayAttachmentArgs, GetEc2VpcGatewayAttachmentResult, GetEc2VpcGatewayAttachmentOutputArgs } from "./getEc2VpcGatewayAttachment";
export const getEc2VpcGatewayAttachment: typeof import("./getEc2VpcGatewayAttachment").getEc2VpcGatewayAttachment = null as any;
export const getEc2VpcGatewayAttachmentOutput: typeof import("./getEc2VpcGatewayAttachment").getEc2VpcGatewayAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcGatewayAttachment","getEc2VpcGatewayAttachmentOutput"], () => require("./getEc2VpcGatewayAttachment"));

export { GetEc2VpcGatewayAttachmentsResult } from "./getEc2VpcGatewayAttachments";
export const getEc2VpcGatewayAttachments: typeof import("./getEc2VpcGatewayAttachments").getEc2VpcGatewayAttachments = null as any;
export const getEc2VpcGatewayAttachmentsOutput: typeof import("./getEc2VpcGatewayAttachments").getEc2VpcGatewayAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcGatewayAttachments","getEc2VpcGatewayAttachmentsOutput"], () => require("./getEc2VpcGatewayAttachments"));

export { GetEc2VpcPeeringConnectionArgs, GetEc2VpcPeeringConnectionResult, GetEc2VpcPeeringConnectionOutputArgs } from "./getEc2VpcPeeringConnection";
export const getEc2VpcPeeringConnection: typeof import("./getEc2VpcPeeringConnection").getEc2VpcPeeringConnection = null as any;
export const getEc2VpcPeeringConnectionOutput: typeof import("./getEc2VpcPeeringConnection").getEc2VpcPeeringConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcPeeringConnection","getEc2VpcPeeringConnectionOutput"], () => require("./getEc2VpcPeeringConnection"));

export { GetEc2VpcPeeringConnectionsResult } from "./getEc2VpcPeeringConnections";
export const getEc2VpcPeeringConnections: typeof import("./getEc2VpcPeeringConnections").getEc2VpcPeeringConnections = null as any;
export const getEc2VpcPeeringConnectionsOutput: typeof import("./getEc2VpcPeeringConnections").getEc2VpcPeeringConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcPeeringConnections","getEc2VpcPeeringConnectionsOutput"], () => require("./getEc2VpcPeeringConnections"));

export { GetEc2VpcdhcpOptionsAssociationArgs, GetEc2VpcdhcpOptionsAssociationResult, GetEc2VpcdhcpOptionsAssociationOutputArgs } from "./getEc2VpcdhcpOptionsAssociation";
export const getEc2VpcdhcpOptionsAssociation: typeof import("./getEc2VpcdhcpOptionsAssociation").getEc2VpcdhcpOptionsAssociation = null as any;
export const getEc2VpcdhcpOptionsAssociationOutput: typeof import("./getEc2VpcdhcpOptionsAssociation").getEc2VpcdhcpOptionsAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcdhcpOptionsAssociation","getEc2VpcdhcpOptionsAssociationOutput"], () => require("./getEc2VpcdhcpOptionsAssociation"));

export { GetEc2VpcdhcpOptionsAssociationsResult } from "./getEc2VpcdhcpOptionsAssociations";
export const getEc2VpcdhcpOptionsAssociations: typeof import("./getEc2VpcdhcpOptionsAssociations").getEc2VpcdhcpOptionsAssociations = null as any;
export const getEc2VpcdhcpOptionsAssociationsOutput: typeof import("./getEc2VpcdhcpOptionsAssociations").getEc2VpcdhcpOptionsAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpcdhcpOptionsAssociations","getEc2VpcdhcpOptionsAssociationsOutput"], () => require("./getEc2VpcdhcpOptionsAssociations"));

export { GetEc2VpcsResult } from "./getEc2Vpcs";
export const getEc2Vpcs: typeof import("./getEc2Vpcs").getEc2Vpcs = null as any;
export const getEc2VpcsOutput: typeof import("./getEc2Vpcs").getEc2VpcsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Vpcs","getEc2VpcsOutput"], () => require("./getEc2Vpcs"));

export { GetEc2VpnConnectionArgs, GetEc2VpnConnectionResult, GetEc2VpnConnectionOutputArgs } from "./getEc2VpnConnection";
export const getEc2VpnConnection: typeof import("./getEc2VpnConnection").getEc2VpnConnection = null as any;
export const getEc2VpnConnectionOutput: typeof import("./getEc2VpnConnection").getEc2VpnConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpnConnection","getEc2VpnConnectionOutput"], () => require("./getEc2VpnConnection"));

export { GetEc2VpnConnectionRouteArgs, GetEc2VpnConnectionRouteResult, GetEc2VpnConnectionRouteOutputArgs } from "./getEc2VpnConnectionRoute";
export const getEc2VpnConnectionRoute: typeof import("./getEc2VpnConnectionRoute").getEc2VpnConnectionRoute = null as any;
export const getEc2VpnConnectionRouteOutput: typeof import("./getEc2VpnConnectionRoute").getEc2VpnConnectionRouteOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpnConnectionRoute","getEc2VpnConnectionRouteOutput"], () => require("./getEc2VpnConnectionRoute"));

export { GetEc2VpnConnectionRoutesResult } from "./getEc2VpnConnectionRoutes";
export const getEc2VpnConnectionRoutes: typeof import("./getEc2VpnConnectionRoutes").getEc2VpnConnectionRoutes = null as any;
export const getEc2VpnConnectionRoutesOutput: typeof import("./getEc2VpnConnectionRoutes").getEc2VpnConnectionRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpnConnectionRoutes","getEc2VpnConnectionRoutesOutput"], () => require("./getEc2VpnConnectionRoutes"));

export { GetEc2VpnConnectionsResult } from "./getEc2VpnConnections";
export const getEc2VpnConnections: typeof import("./getEc2VpnConnections").getEc2VpnConnections = null as any;
export const getEc2VpnConnectionsOutput: typeof import("./getEc2VpnConnections").getEc2VpnConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpnConnections","getEc2VpnConnectionsOutput"], () => require("./getEc2VpnConnections"));

export { GetEc2VpnGatewayArgs, GetEc2VpnGatewayResult, GetEc2VpnGatewayOutputArgs } from "./getEc2VpnGateway";
export const getEc2VpnGateway: typeof import("./getEc2VpnGateway").getEc2VpnGateway = null as any;
export const getEc2VpnGatewayOutput: typeof import("./getEc2VpnGateway").getEc2VpnGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpnGateway","getEc2VpnGatewayOutput"], () => require("./getEc2VpnGateway"));

export { GetEc2VpnGatewaysResult } from "./getEc2VpnGateways";
export const getEc2VpnGateways: typeof import("./getEc2VpnGateways").getEc2VpnGateways = null as any;
export const getEc2VpnGatewaysOutput: typeof import("./getEc2VpnGateways").getEc2VpnGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getEc2VpnGateways","getEc2VpnGatewaysOutput"], () => require("./getEc2VpnGateways"));

export { GetEcrPublicRepositoriesResult } from "./getEcrPublicRepositories";
export const getEcrPublicRepositories: typeof import("./getEcrPublicRepositories").getEcrPublicRepositories = null as any;
export const getEcrPublicRepositoriesOutput: typeof import("./getEcrPublicRepositories").getEcrPublicRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getEcrPublicRepositories","getEcrPublicRepositoriesOutput"], () => require("./getEcrPublicRepositories"));

export { GetEcrPublicRepositoryArgs, GetEcrPublicRepositoryResult, GetEcrPublicRepositoryOutputArgs } from "./getEcrPublicRepository";
export const getEcrPublicRepository: typeof import("./getEcrPublicRepository").getEcrPublicRepository = null as any;
export const getEcrPublicRepositoryOutput: typeof import("./getEcrPublicRepository").getEcrPublicRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getEcrPublicRepository","getEcrPublicRepositoryOutput"], () => require("./getEcrPublicRepository"));

export { GetEcrPullThroughCacheRuleArgs, GetEcrPullThroughCacheRuleResult, GetEcrPullThroughCacheRuleOutputArgs } from "./getEcrPullThroughCacheRule";
export const getEcrPullThroughCacheRule: typeof import("./getEcrPullThroughCacheRule").getEcrPullThroughCacheRule = null as any;
export const getEcrPullThroughCacheRuleOutput: typeof import("./getEcrPullThroughCacheRule").getEcrPullThroughCacheRuleOutput = null as any;
utilities.lazyLoad(exports, ["getEcrPullThroughCacheRule","getEcrPullThroughCacheRuleOutput"], () => require("./getEcrPullThroughCacheRule"));

export { GetEcrPullThroughCacheRulesResult } from "./getEcrPullThroughCacheRules";
export const getEcrPullThroughCacheRules: typeof import("./getEcrPullThroughCacheRules").getEcrPullThroughCacheRules = null as any;
export const getEcrPullThroughCacheRulesOutput: typeof import("./getEcrPullThroughCacheRules").getEcrPullThroughCacheRulesOutput = null as any;
utilities.lazyLoad(exports, ["getEcrPullThroughCacheRules","getEcrPullThroughCacheRulesOutput"], () => require("./getEcrPullThroughCacheRules"));

export { GetEcrRegistryPoliciesResult } from "./getEcrRegistryPolicies";
export const getEcrRegistryPolicies: typeof import("./getEcrRegistryPolicies").getEcrRegistryPolicies = null as any;
export const getEcrRegistryPoliciesOutput: typeof import("./getEcrRegistryPolicies").getEcrRegistryPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getEcrRegistryPolicies","getEcrRegistryPoliciesOutput"], () => require("./getEcrRegistryPolicies"));

export { GetEcrRegistryPolicyArgs, GetEcrRegistryPolicyResult, GetEcrRegistryPolicyOutputArgs } from "./getEcrRegistryPolicy";
export const getEcrRegistryPolicy: typeof import("./getEcrRegistryPolicy").getEcrRegistryPolicy = null as any;
export const getEcrRegistryPolicyOutput: typeof import("./getEcrRegistryPolicy").getEcrRegistryPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEcrRegistryPolicy","getEcrRegistryPolicyOutput"], () => require("./getEcrRegistryPolicy"));

export { GetEcrReplicationConfigurationArgs, GetEcrReplicationConfigurationResult, GetEcrReplicationConfigurationOutputArgs } from "./getEcrReplicationConfiguration";
export const getEcrReplicationConfiguration: typeof import("./getEcrReplicationConfiguration").getEcrReplicationConfiguration = null as any;
export const getEcrReplicationConfigurationOutput: typeof import("./getEcrReplicationConfiguration").getEcrReplicationConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getEcrReplicationConfiguration","getEcrReplicationConfigurationOutput"], () => require("./getEcrReplicationConfiguration"));

export { GetEcrReplicationConfigurationsResult } from "./getEcrReplicationConfigurations";
export const getEcrReplicationConfigurations: typeof import("./getEcrReplicationConfigurations").getEcrReplicationConfigurations = null as any;
export const getEcrReplicationConfigurationsOutput: typeof import("./getEcrReplicationConfigurations").getEcrReplicationConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getEcrReplicationConfigurations","getEcrReplicationConfigurationsOutput"], () => require("./getEcrReplicationConfigurations"));

export { GetEcrRepositoriesResult } from "./getEcrRepositories";
export const getEcrRepositories: typeof import("./getEcrRepositories").getEcrRepositories = null as any;
export const getEcrRepositoriesOutput: typeof import("./getEcrRepositories").getEcrRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getEcrRepositories","getEcrRepositoriesOutput"], () => require("./getEcrRepositories"));

export { GetEcrRepositoryArgs, GetEcrRepositoryResult, GetEcrRepositoryOutputArgs } from "./getEcrRepository";
export const getEcrRepository: typeof import("./getEcrRepository").getEcrRepository = null as any;
export const getEcrRepositoryOutput: typeof import("./getEcrRepository").getEcrRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getEcrRepository","getEcrRepositoryOutput"], () => require("./getEcrRepository"));

export { GetEcrRepositoryCreationTemplateArgs, GetEcrRepositoryCreationTemplateResult, GetEcrRepositoryCreationTemplateOutputArgs } from "./getEcrRepositoryCreationTemplate";
export const getEcrRepositoryCreationTemplate: typeof import("./getEcrRepositoryCreationTemplate").getEcrRepositoryCreationTemplate = null as any;
export const getEcrRepositoryCreationTemplateOutput: typeof import("./getEcrRepositoryCreationTemplate").getEcrRepositoryCreationTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getEcrRepositoryCreationTemplate","getEcrRepositoryCreationTemplateOutput"], () => require("./getEcrRepositoryCreationTemplate"));

export { GetEcrRepositoryCreationTemplatesResult } from "./getEcrRepositoryCreationTemplates";
export const getEcrRepositoryCreationTemplates: typeof import("./getEcrRepositoryCreationTemplates").getEcrRepositoryCreationTemplates = null as any;
export const getEcrRepositoryCreationTemplatesOutput: typeof import("./getEcrRepositoryCreationTemplates").getEcrRepositoryCreationTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getEcrRepositoryCreationTemplates","getEcrRepositoryCreationTemplatesOutput"], () => require("./getEcrRepositoryCreationTemplates"));

export { GetEcsCapacityProviderArgs, GetEcsCapacityProviderResult, GetEcsCapacityProviderOutputArgs } from "./getEcsCapacityProvider";
export const getEcsCapacityProvider: typeof import("./getEcsCapacityProvider").getEcsCapacityProvider = null as any;
export const getEcsCapacityProviderOutput: typeof import("./getEcsCapacityProvider").getEcsCapacityProviderOutput = null as any;
utilities.lazyLoad(exports, ["getEcsCapacityProvider","getEcsCapacityProviderOutput"], () => require("./getEcsCapacityProvider"));

export { GetEcsCapacityProvidersResult } from "./getEcsCapacityProviders";
export const getEcsCapacityProviders: typeof import("./getEcsCapacityProviders").getEcsCapacityProviders = null as any;
export const getEcsCapacityProvidersOutput: typeof import("./getEcsCapacityProviders").getEcsCapacityProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getEcsCapacityProviders","getEcsCapacityProvidersOutput"], () => require("./getEcsCapacityProviders"));

export { GetEcsClusterArgs, GetEcsClusterResult, GetEcsClusterOutputArgs } from "./getEcsCluster";
export const getEcsCluster: typeof import("./getEcsCluster").getEcsCluster = null as any;
export const getEcsClusterOutput: typeof import("./getEcsCluster").getEcsClusterOutput = null as any;
utilities.lazyLoad(exports, ["getEcsCluster","getEcsClusterOutput"], () => require("./getEcsCluster"));

export { GetEcsClusterCapacityProviderAssociationsArgs, GetEcsClusterCapacityProviderAssociationsResult, GetEcsClusterCapacityProviderAssociationsOutputArgs } from "./getEcsClusterCapacityProviderAssociations";
export const getEcsClusterCapacityProviderAssociations: typeof import("./getEcsClusterCapacityProviderAssociations").getEcsClusterCapacityProviderAssociations = null as any;
export const getEcsClusterCapacityProviderAssociationsOutput: typeof import("./getEcsClusterCapacityProviderAssociations").getEcsClusterCapacityProviderAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsClusterCapacityProviderAssociations","getEcsClusterCapacityProviderAssociationsOutput"], () => require("./getEcsClusterCapacityProviderAssociations"));

export { GetEcsClusterCapacityProviderAssociationsPluralResult } from "./getEcsClusterCapacityProviderAssociationsPlural";
export const getEcsClusterCapacityProviderAssociationsPlural: typeof import("./getEcsClusterCapacityProviderAssociationsPlural").getEcsClusterCapacityProviderAssociationsPlural = null as any;
export const getEcsClusterCapacityProviderAssociationsPluralOutput: typeof import("./getEcsClusterCapacityProviderAssociationsPlural").getEcsClusterCapacityProviderAssociationsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getEcsClusterCapacityProviderAssociationsPlural","getEcsClusterCapacityProviderAssociationsPluralOutput"], () => require("./getEcsClusterCapacityProviderAssociationsPlural"));

export { GetEcsClustersResult } from "./getEcsClusters";
export const getEcsClusters: typeof import("./getEcsClusters").getEcsClusters = null as any;
export const getEcsClustersOutput: typeof import("./getEcsClusters").getEcsClustersOutput = null as any;
utilities.lazyLoad(exports, ["getEcsClusters","getEcsClustersOutput"], () => require("./getEcsClusters"));

export { GetEcsPrimaryTaskSetArgs, GetEcsPrimaryTaskSetResult, GetEcsPrimaryTaskSetOutputArgs } from "./getEcsPrimaryTaskSet";
export const getEcsPrimaryTaskSet: typeof import("./getEcsPrimaryTaskSet").getEcsPrimaryTaskSet = null as any;
export const getEcsPrimaryTaskSetOutput: typeof import("./getEcsPrimaryTaskSet").getEcsPrimaryTaskSetOutput = null as any;
utilities.lazyLoad(exports, ["getEcsPrimaryTaskSet","getEcsPrimaryTaskSetOutput"], () => require("./getEcsPrimaryTaskSet"));

export { GetEcsServiceArgs, GetEcsServiceResult, GetEcsServiceOutputArgs } from "./getEcsService";
export const getEcsService: typeof import("./getEcsService").getEcsService = null as any;
export const getEcsServiceOutput: typeof import("./getEcsService").getEcsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getEcsService","getEcsServiceOutput"], () => require("./getEcsService"));

export { GetEcsServicesResult } from "./getEcsServices";
export const getEcsServices: typeof import("./getEcsServices").getEcsServices = null as any;
export const getEcsServicesOutput: typeof import("./getEcsServices").getEcsServicesOutput = null as any;
utilities.lazyLoad(exports, ["getEcsServices","getEcsServicesOutput"], () => require("./getEcsServices"));

export { GetEcsTaskDefinitionArgs, GetEcsTaskDefinitionResult, GetEcsTaskDefinitionOutputArgs } from "./getEcsTaskDefinition";
export const getEcsTaskDefinition: typeof import("./getEcsTaskDefinition").getEcsTaskDefinition = null as any;
export const getEcsTaskDefinitionOutput: typeof import("./getEcsTaskDefinition").getEcsTaskDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getEcsTaskDefinition","getEcsTaskDefinitionOutput"], () => require("./getEcsTaskDefinition"));

export { GetEcsTaskDefinitionsResult } from "./getEcsTaskDefinitions";
export const getEcsTaskDefinitions: typeof import("./getEcsTaskDefinitions").getEcsTaskDefinitions = null as any;
export const getEcsTaskDefinitionsOutput: typeof import("./getEcsTaskDefinitions").getEcsTaskDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsTaskDefinitions","getEcsTaskDefinitionsOutput"], () => require("./getEcsTaskDefinitions"));

export { GetEcsTaskSetArgs, GetEcsTaskSetResult, GetEcsTaskSetOutputArgs } from "./getEcsTaskSet";
export const getEcsTaskSet: typeof import("./getEcsTaskSet").getEcsTaskSet = null as any;
export const getEcsTaskSetOutput: typeof import("./getEcsTaskSet").getEcsTaskSetOutput = null as any;
utilities.lazyLoad(exports, ["getEcsTaskSet","getEcsTaskSetOutput"], () => require("./getEcsTaskSet"));

export { GetEfsAccessPointArgs, GetEfsAccessPointResult, GetEfsAccessPointOutputArgs } from "./getEfsAccessPoint";
export const getEfsAccessPoint: typeof import("./getEfsAccessPoint").getEfsAccessPoint = null as any;
export const getEfsAccessPointOutput: typeof import("./getEfsAccessPoint").getEfsAccessPointOutput = null as any;
utilities.lazyLoad(exports, ["getEfsAccessPoint","getEfsAccessPointOutput"], () => require("./getEfsAccessPoint"));

export { GetEfsAccessPointsResult } from "./getEfsAccessPoints";
export const getEfsAccessPoints: typeof import("./getEfsAccessPoints").getEfsAccessPoints = null as any;
export const getEfsAccessPointsOutput: typeof import("./getEfsAccessPoints").getEfsAccessPointsOutput = null as any;
utilities.lazyLoad(exports, ["getEfsAccessPoints","getEfsAccessPointsOutput"], () => require("./getEfsAccessPoints"));

export { GetEfsFileSystemArgs, GetEfsFileSystemResult, GetEfsFileSystemOutputArgs } from "./getEfsFileSystem";
export const getEfsFileSystem: typeof import("./getEfsFileSystem").getEfsFileSystem = null as any;
export const getEfsFileSystemOutput: typeof import("./getEfsFileSystem").getEfsFileSystemOutput = null as any;
utilities.lazyLoad(exports, ["getEfsFileSystem","getEfsFileSystemOutput"], () => require("./getEfsFileSystem"));

export { GetEfsFileSystemsResult } from "./getEfsFileSystems";
export const getEfsFileSystems: typeof import("./getEfsFileSystems").getEfsFileSystems = null as any;
export const getEfsFileSystemsOutput: typeof import("./getEfsFileSystems").getEfsFileSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getEfsFileSystems","getEfsFileSystemsOutput"], () => require("./getEfsFileSystems"));

export { GetEfsMountTargetArgs, GetEfsMountTargetResult, GetEfsMountTargetOutputArgs } from "./getEfsMountTarget";
export const getEfsMountTarget: typeof import("./getEfsMountTarget").getEfsMountTarget = null as any;
export const getEfsMountTargetOutput: typeof import("./getEfsMountTarget").getEfsMountTargetOutput = null as any;
utilities.lazyLoad(exports, ["getEfsMountTarget","getEfsMountTargetOutput"], () => require("./getEfsMountTarget"));

export { GetEksAccessEntryArgs, GetEksAccessEntryResult, GetEksAccessEntryOutputArgs } from "./getEksAccessEntry";
export const getEksAccessEntry: typeof import("./getEksAccessEntry").getEksAccessEntry = null as any;
export const getEksAccessEntryOutput: typeof import("./getEksAccessEntry").getEksAccessEntryOutput = null as any;
utilities.lazyLoad(exports, ["getEksAccessEntry","getEksAccessEntryOutput"], () => require("./getEksAccessEntry"));

export { GetEksAddonArgs, GetEksAddonResult, GetEksAddonOutputArgs } from "./getEksAddon";
export const getEksAddon: typeof import("./getEksAddon").getEksAddon = null as any;
export const getEksAddonOutput: typeof import("./getEksAddon").getEksAddonOutput = null as any;
utilities.lazyLoad(exports, ["getEksAddon","getEksAddonOutput"], () => require("./getEksAddon"));

export { GetEksClusterArgs, GetEksClusterResult, GetEksClusterOutputArgs } from "./getEksCluster";
export const getEksCluster: typeof import("./getEksCluster").getEksCluster = null as any;
export const getEksClusterOutput: typeof import("./getEksCluster").getEksClusterOutput = null as any;
utilities.lazyLoad(exports, ["getEksCluster","getEksClusterOutput"], () => require("./getEksCluster"));

export { GetEksClustersResult } from "./getEksClusters";
export const getEksClusters: typeof import("./getEksClusters").getEksClusters = null as any;
export const getEksClustersOutput: typeof import("./getEksClusters").getEksClustersOutput = null as any;
utilities.lazyLoad(exports, ["getEksClusters","getEksClustersOutput"], () => require("./getEksClusters"));

export { GetEksFargateProfileArgs, GetEksFargateProfileResult, GetEksFargateProfileOutputArgs } from "./getEksFargateProfile";
export const getEksFargateProfile: typeof import("./getEksFargateProfile").getEksFargateProfile = null as any;
export const getEksFargateProfileOutput: typeof import("./getEksFargateProfile").getEksFargateProfileOutput = null as any;
utilities.lazyLoad(exports, ["getEksFargateProfile","getEksFargateProfileOutput"], () => require("./getEksFargateProfile"));

export { GetEksIdentityProviderConfigArgs, GetEksIdentityProviderConfigResult, GetEksIdentityProviderConfigOutputArgs } from "./getEksIdentityProviderConfig";
export const getEksIdentityProviderConfig: typeof import("./getEksIdentityProviderConfig").getEksIdentityProviderConfig = null as any;
export const getEksIdentityProviderConfigOutput: typeof import("./getEksIdentityProviderConfig").getEksIdentityProviderConfigOutput = null as any;
utilities.lazyLoad(exports, ["getEksIdentityProviderConfig","getEksIdentityProviderConfigOutput"], () => require("./getEksIdentityProviderConfig"));

export { GetEksPodIdentityAssociationArgs, GetEksPodIdentityAssociationResult, GetEksPodIdentityAssociationOutputArgs } from "./getEksPodIdentityAssociation";
export const getEksPodIdentityAssociation: typeof import("./getEksPodIdentityAssociation").getEksPodIdentityAssociation = null as any;
export const getEksPodIdentityAssociationOutput: typeof import("./getEksPodIdentityAssociation").getEksPodIdentityAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEksPodIdentityAssociation","getEksPodIdentityAssociationOutput"], () => require("./getEksPodIdentityAssociation"));

export { GetElasticacheGlobalReplicationGroupArgs, GetElasticacheGlobalReplicationGroupResult, GetElasticacheGlobalReplicationGroupOutputArgs } from "./getElasticacheGlobalReplicationGroup";
export const getElasticacheGlobalReplicationGroup: typeof import("./getElasticacheGlobalReplicationGroup").getElasticacheGlobalReplicationGroup = null as any;
export const getElasticacheGlobalReplicationGroupOutput: typeof import("./getElasticacheGlobalReplicationGroup").getElasticacheGlobalReplicationGroupOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheGlobalReplicationGroup","getElasticacheGlobalReplicationGroupOutput"], () => require("./getElasticacheGlobalReplicationGroup"));

export { GetElasticacheGlobalReplicationGroupsResult } from "./getElasticacheGlobalReplicationGroups";
export const getElasticacheGlobalReplicationGroups: typeof import("./getElasticacheGlobalReplicationGroups").getElasticacheGlobalReplicationGroups = null as any;
export const getElasticacheGlobalReplicationGroupsOutput: typeof import("./getElasticacheGlobalReplicationGroups").getElasticacheGlobalReplicationGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheGlobalReplicationGroups","getElasticacheGlobalReplicationGroupsOutput"], () => require("./getElasticacheGlobalReplicationGroups"));

export { GetElasticacheParameterGroupArgs, GetElasticacheParameterGroupResult, GetElasticacheParameterGroupOutputArgs } from "./getElasticacheParameterGroup";
export const getElasticacheParameterGroup: typeof import("./getElasticacheParameterGroup").getElasticacheParameterGroup = null as any;
export const getElasticacheParameterGroupOutput: typeof import("./getElasticacheParameterGroup").getElasticacheParameterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheParameterGroup","getElasticacheParameterGroupOutput"], () => require("./getElasticacheParameterGroup"));

export { GetElasticacheParameterGroupsResult } from "./getElasticacheParameterGroups";
export const getElasticacheParameterGroups: typeof import("./getElasticacheParameterGroups").getElasticacheParameterGroups = null as any;
export const getElasticacheParameterGroupsOutput: typeof import("./getElasticacheParameterGroups").getElasticacheParameterGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheParameterGroups","getElasticacheParameterGroupsOutput"], () => require("./getElasticacheParameterGroups"));

export { GetElasticacheServerlessCacheArgs, GetElasticacheServerlessCacheResult, GetElasticacheServerlessCacheOutputArgs } from "./getElasticacheServerlessCache";
export const getElasticacheServerlessCache: typeof import("./getElasticacheServerlessCache").getElasticacheServerlessCache = null as any;
export const getElasticacheServerlessCacheOutput: typeof import("./getElasticacheServerlessCache").getElasticacheServerlessCacheOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheServerlessCache","getElasticacheServerlessCacheOutput"], () => require("./getElasticacheServerlessCache"));

export { GetElasticacheServerlessCachesResult } from "./getElasticacheServerlessCaches";
export const getElasticacheServerlessCaches: typeof import("./getElasticacheServerlessCaches").getElasticacheServerlessCaches = null as any;
export const getElasticacheServerlessCachesOutput: typeof import("./getElasticacheServerlessCaches").getElasticacheServerlessCachesOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheServerlessCaches","getElasticacheServerlessCachesOutput"], () => require("./getElasticacheServerlessCaches"));

export { GetElasticacheSubnetGroupArgs, GetElasticacheSubnetGroupResult, GetElasticacheSubnetGroupOutputArgs } from "./getElasticacheSubnetGroup";
export const getElasticacheSubnetGroup: typeof import("./getElasticacheSubnetGroup").getElasticacheSubnetGroup = null as any;
export const getElasticacheSubnetGroupOutput: typeof import("./getElasticacheSubnetGroup").getElasticacheSubnetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheSubnetGroup","getElasticacheSubnetGroupOutput"], () => require("./getElasticacheSubnetGroup"));

export { GetElasticacheSubnetGroupsResult } from "./getElasticacheSubnetGroups";
export const getElasticacheSubnetGroups: typeof import("./getElasticacheSubnetGroups").getElasticacheSubnetGroups = null as any;
export const getElasticacheSubnetGroupsOutput: typeof import("./getElasticacheSubnetGroups").getElasticacheSubnetGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheSubnetGroups","getElasticacheSubnetGroupsOutput"], () => require("./getElasticacheSubnetGroups"));

export { GetElasticacheUserArgs, GetElasticacheUserResult, GetElasticacheUserOutputArgs } from "./getElasticacheUser";
export const getElasticacheUser: typeof import("./getElasticacheUser").getElasticacheUser = null as any;
export const getElasticacheUserOutput: typeof import("./getElasticacheUser").getElasticacheUserOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheUser","getElasticacheUserOutput"], () => require("./getElasticacheUser"));

export { GetElasticacheUserGroupArgs, GetElasticacheUserGroupResult, GetElasticacheUserGroupOutputArgs } from "./getElasticacheUserGroup";
export const getElasticacheUserGroup: typeof import("./getElasticacheUserGroup").getElasticacheUserGroup = null as any;
export const getElasticacheUserGroupOutput: typeof import("./getElasticacheUserGroup").getElasticacheUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheUserGroup","getElasticacheUserGroupOutput"], () => require("./getElasticacheUserGroup"));

export { GetElasticacheUserGroupsResult } from "./getElasticacheUserGroups";
export const getElasticacheUserGroups: typeof import("./getElasticacheUserGroups").getElasticacheUserGroups = null as any;
export const getElasticacheUserGroupsOutput: typeof import("./getElasticacheUserGroups").getElasticacheUserGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheUserGroups","getElasticacheUserGroupsOutput"], () => require("./getElasticacheUserGroups"));

export { GetElasticacheUsersResult } from "./getElasticacheUsers";
export const getElasticacheUsers: typeof import("./getElasticacheUsers").getElasticacheUsers = null as any;
export const getElasticacheUsersOutput: typeof import("./getElasticacheUsers").getElasticacheUsersOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheUsers","getElasticacheUsersOutput"], () => require("./getElasticacheUsers"));

export { GetElasticbeanstalkApplicationArgs, GetElasticbeanstalkApplicationResult, GetElasticbeanstalkApplicationOutputArgs } from "./getElasticbeanstalkApplication";
export const getElasticbeanstalkApplication: typeof import("./getElasticbeanstalkApplication").getElasticbeanstalkApplication = null as any;
export const getElasticbeanstalkApplicationOutput: typeof import("./getElasticbeanstalkApplication").getElasticbeanstalkApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getElasticbeanstalkApplication","getElasticbeanstalkApplicationOutput"], () => require("./getElasticbeanstalkApplication"));

export { GetElasticbeanstalkApplicationVersionArgs, GetElasticbeanstalkApplicationVersionResult, GetElasticbeanstalkApplicationVersionOutputArgs } from "./getElasticbeanstalkApplicationVersion";
export const getElasticbeanstalkApplicationVersion: typeof import("./getElasticbeanstalkApplicationVersion").getElasticbeanstalkApplicationVersion = null as any;
export const getElasticbeanstalkApplicationVersionOutput: typeof import("./getElasticbeanstalkApplicationVersion").getElasticbeanstalkApplicationVersionOutput = null as any;
utilities.lazyLoad(exports, ["getElasticbeanstalkApplicationVersion","getElasticbeanstalkApplicationVersionOutput"], () => require("./getElasticbeanstalkApplicationVersion"));

export { GetElasticbeanstalkApplicationVersionsResult } from "./getElasticbeanstalkApplicationVersions";
export const getElasticbeanstalkApplicationVersions: typeof import("./getElasticbeanstalkApplicationVersions").getElasticbeanstalkApplicationVersions = null as any;
export const getElasticbeanstalkApplicationVersionsOutput: typeof import("./getElasticbeanstalkApplicationVersions").getElasticbeanstalkApplicationVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticbeanstalkApplicationVersions","getElasticbeanstalkApplicationVersionsOutput"], () => require("./getElasticbeanstalkApplicationVersions"));

export { GetElasticbeanstalkApplicationsResult } from "./getElasticbeanstalkApplications";
export const getElasticbeanstalkApplications: typeof import("./getElasticbeanstalkApplications").getElasticbeanstalkApplications = null as any;
export const getElasticbeanstalkApplicationsOutput: typeof import("./getElasticbeanstalkApplications").getElasticbeanstalkApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticbeanstalkApplications","getElasticbeanstalkApplicationsOutput"], () => require("./getElasticbeanstalkApplications"));

export { GetElasticbeanstalkConfigurationTemplateArgs, GetElasticbeanstalkConfigurationTemplateResult, GetElasticbeanstalkConfigurationTemplateOutputArgs } from "./getElasticbeanstalkConfigurationTemplate";
export const getElasticbeanstalkConfigurationTemplate: typeof import("./getElasticbeanstalkConfigurationTemplate").getElasticbeanstalkConfigurationTemplate = null as any;
export const getElasticbeanstalkConfigurationTemplateOutput: typeof import("./getElasticbeanstalkConfigurationTemplate").getElasticbeanstalkConfigurationTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getElasticbeanstalkConfigurationTemplate","getElasticbeanstalkConfigurationTemplateOutput"], () => require("./getElasticbeanstalkConfigurationTemplate"));

export { GetElasticbeanstalkConfigurationTemplatesResult } from "./getElasticbeanstalkConfigurationTemplates";
export const getElasticbeanstalkConfigurationTemplates: typeof import("./getElasticbeanstalkConfigurationTemplates").getElasticbeanstalkConfigurationTemplates = null as any;
export const getElasticbeanstalkConfigurationTemplatesOutput: typeof import("./getElasticbeanstalkConfigurationTemplates").getElasticbeanstalkConfigurationTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getElasticbeanstalkConfigurationTemplates","getElasticbeanstalkConfigurationTemplatesOutput"], () => require("./getElasticbeanstalkConfigurationTemplates"));

export { GetElasticbeanstalkEnvironmentArgs, GetElasticbeanstalkEnvironmentResult, GetElasticbeanstalkEnvironmentOutputArgs } from "./getElasticbeanstalkEnvironment";
export const getElasticbeanstalkEnvironment: typeof import("./getElasticbeanstalkEnvironment").getElasticbeanstalkEnvironment = null as any;
export const getElasticbeanstalkEnvironmentOutput: typeof import("./getElasticbeanstalkEnvironment").getElasticbeanstalkEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getElasticbeanstalkEnvironment","getElasticbeanstalkEnvironmentOutput"], () => require("./getElasticbeanstalkEnvironment"));

export { GetElasticbeanstalkEnvironmentsResult } from "./getElasticbeanstalkEnvironments";
export const getElasticbeanstalkEnvironments: typeof import("./getElasticbeanstalkEnvironments").getElasticbeanstalkEnvironments = null as any;
export const getElasticbeanstalkEnvironmentsOutput: typeof import("./getElasticbeanstalkEnvironments").getElasticbeanstalkEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticbeanstalkEnvironments","getElasticbeanstalkEnvironmentsOutput"], () => require("./getElasticbeanstalkEnvironments"));

export { GetElasticloadbalancingv2LoadBalancerArgs, GetElasticloadbalancingv2LoadBalancerResult, GetElasticloadbalancingv2LoadBalancerOutputArgs } from "./getElasticloadbalancingv2LoadBalancer";
export const getElasticloadbalancingv2LoadBalancer: typeof import("./getElasticloadbalancingv2LoadBalancer").getElasticloadbalancingv2LoadBalancer = null as any;
export const getElasticloadbalancingv2LoadBalancerOutput: typeof import("./getElasticloadbalancingv2LoadBalancer").getElasticloadbalancingv2LoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getElasticloadbalancingv2LoadBalancer","getElasticloadbalancingv2LoadBalancerOutput"], () => require("./getElasticloadbalancingv2LoadBalancer"));

export { GetElasticloadbalancingv2LoadBalancersResult } from "./getElasticloadbalancingv2LoadBalancers";
export const getElasticloadbalancingv2LoadBalancers: typeof import("./getElasticloadbalancingv2LoadBalancers").getElasticloadbalancingv2LoadBalancers = null as any;
export const getElasticloadbalancingv2LoadBalancersOutput: typeof import("./getElasticloadbalancingv2LoadBalancers").getElasticloadbalancingv2LoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getElasticloadbalancingv2LoadBalancers","getElasticloadbalancingv2LoadBalancersOutput"], () => require("./getElasticloadbalancingv2LoadBalancers"));

export { GetElasticloadbalancingv2TargetGroupArgs, GetElasticloadbalancingv2TargetGroupResult, GetElasticloadbalancingv2TargetGroupOutputArgs } from "./getElasticloadbalancingv2TargetGroup";
export const getElasticloadbalancingv2TargetGroup: typeof import("./getElasticloadbalancingv2TargetGroup").getElasticloadbalancingv2TargetGroup = null as any;
export const getElasticloadbalancingv2TargetGroupOutput: typeof import("./getElasticloadbalancingv2TargetGroup").getElasticloadbalancingv2TargetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getElasticloadbalancingv2TargetGroup","getElasticloadbalancingv2TargetGroupOutput"], () => require("./getElasticloadbalancingv2TargetGroup"));

export { GetElasticloadbalancingv2TargetGroupsResult } from "./getElasticloadbalancingv2TargetGroups";
export const getElasticloadbalancingv2TargetGroups: typeof import("./getElasticloadbalancingv2TargetGroups").getElasticloadbalancingv2TargetGroups = null as any;
export const getElasticloadbalancingv2TargetGroupsOutput: typeof import("./getElasticloadbalancingv2TargetGroups").getElasticloadbalancingv2TargetGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticloadbalancingv2TargetGroups","getElasticloadbalancingv2TargetGroupsOutput"], () => require("./getElasticloadbalancingv2TargetGroups"));

export { GetElasticloadbalancingv2TrustStoreArgs, GetElasticloadbalancingv2TrustStoreResult, GetElasticloadbalancingv2TrustStoreOutputArgs } from "./getElasticloadbalancingv2TrustStore";
export const getElasticloadbalancingv2TrustStore: typeof import("./getElasticloadbalancingv2TrustStore").getElasticloadbalancingv2TrustStore = null as any;
export const getElasticloadbalancingv2TrustStoreOutput: typeof import("./getElasticloadbalancingv2TrustStore").getElasticloadbalancingv2TrustStoreOutput = null as any;
utilities.lazyLoad(exports, ["getElasticloadbalancingv2TrustStore","getElasticloadbalancingv2TrustStoreOutput"], () => require("./getElasticloadbalancingv2TrustStore"));

export { GetElasticloadbalancingv2TrustStoreRevocationArgs, GetElasticloadbalancingv2TrustStoreRevocationResult, GetElasticloadbalancingv2TrustStoreRevocationOutputArgs } from "./getElasticloadbalancingv2TrustStoreRevocation";
export const getElasticloadbalancingv2TrustStoreRevocation: typeof import("./getElasticloadbalancingv2TrustStoreRevocation").getElasticloadbalancingv2TrustStoreRevocation = null as any;
export const getElasticloadbalancingv2TrustStoreRevocationOutput: typeof import("./getElasticloadbalancingv2TrustStoreRevocation").getElasticloadbalancingv2TrustStoreRevocationOutput = null as any;
utilities.lazyLoad(exports, ["getElasticloadbalancingv2TrustStoreRevocation","getElasticloadbalancingv2TrustStoreRevocationOutput"], () => require("./getElasticloadbalancingv2TrustStoreRevocation"));

export { GetElasticloadbalancingv2TrustStoresResult } from "./getElasticloadbalancingv2TrustStores";
export const getElasticloadbalancingv2TrustStores: typeof import("./getElasticloadbalancingv2TrustStores").getElasticloadbalancingv2TrustStores = null as any;
export const getElasticloadbalancingv2TrustStoresOutput: typeof import("./getElasticloadbalancingv2TrustStores").getElasticloadbalancingv2TrustStoresOutput = null as any;
utilities.lazyLoad(exports, ["getElasticloadbalancingv2TrustStores","getElasticloadbalancingv2TrustStoresOutput"], () => require("./getElasticloadbalancingv2TrustStores"));

export { GetEmrSecurityConfigurationArgs, GetEmrSecurityConfigurationResult, GetEmrSecurityConfigurationOutputArgs } from "./getEmrSecurityConfiguration";
export const getEmrSecurityConfiguration: typeof import("./getEmrSecurityConfiguration").getEmrSecurityConfiguration = null as any;
export const getEmrSecurityConfigurationOutput: typeof import("./getEmrSecurityConfiguration").getEmrSecurityConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getEmrSecurityConfiguration","getEmrSecurityConfigurationOutput"], () => require("./getEmrSecurityConfiguration"));

export { GetEmrSecurityConfigurationsResult } from "./getEmrSecurityConfigurations";
export const getEmrSecurityConfigurations: typeof import("./getEmrSecurityConfigurations").getEmrSecurityConfigurations = null as any;
export const getEmrSecurityConfigurationsOutput: typeof import("./getEmrSecurityConfigurations").getEmrSecurityConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getEmrSecurityConfigurations","getEmrSecurityConfigurationsOutput"], () => require("./getEmrSecurityConfigurations"));

export { GetEmrStudioArgs, GetEmrStudioResult, GetEmrStudioOutputArgs } from "./getEmrStudio";
export const getEmrStudio: typeof import("./getEmrStudio").getEmrStudio = null as any;
export const getEmrStudioOutput: typeof import("./getEmrStudio").getEmrStudioOutput = null as any;
utilities.lazyLoad(exports, ["getEmrStudio","getEmrStudioOutput"], () => require("./getEmrStudio"));

export { GetEmrStudioSessionMappingArgs, GetEmrStudioSessionMappingResult, GetEmrStudioSessionMappingOutputArgs } from "./getEmrStudioSessionMapping";
export const getEmrStudioSessionMapping: typeof import("./getEmrStudioSessionMapping").getEmrStudioSessionMapping = null as any;
export const getEmrStudioSessionMappingOutput: typeof import("./getEmrStudioSessionMapping").getEmrStudioSessionMappingOutput = null as any;
utilities.lazyLoad(exports, ["getEmrStudioSessionMapping","getEmrStudioSessionMappingOutput"], () => require("./getEmrStudioSessionMapping"));

export { GetEmrStudioSessionMappingsResult } from "./getEmrStudioSessionMappings";
export const getEmrStudioSessionMappings: typeof import("./getEmrStudioSessionMappings").getEmrStudioSessionMappings = null as any;
export const getEmrStudioSessionMappingsOutput: typeof import("./getEmrStudioSessionMappings").getEmrStudioSessionMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getEmrStudioSessionMappings","getEmrStudioSessionMappingsOutput"], () => require("./getEmrStudioSessionMappings"));

export { GetEmrStudiosResult } from "./getEmrStudios";
export const getEmrStudios: typeof import("./getEmrStudios").getEmrStudios = null as any;
export const getEmrStudiosOutput: typeof import("./getEmrStudios").getEmrStudiosOutput = null as any;
utilities.lazyLoad(exports, ["getEmrStudios","getEmrStudiosOutput"], () => require("./getEmrStudios"));

export { GetEmrWalWorkspaceArgs, GetEmrWalWorkspaceResult, GetEmrWalWorkspaceOutputArgs } from "./getEmrWalWorkspace";
export const getEmrWalWorkspace: typeof import("./getEmrWalWorkspace").getEmrWalWorkspace = null as any;
export const getEmrWalWorkspaceOutput: typeof import("./getEmrWalWorkspace").getEmrWalWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getEmrWalWorkspace","getEmrWalWorkspaceOutput"], () => require("./getEmrWalWorkspace"));

export { GetEmrWalWorkspacesResult } from "./getEmrWalWorkspaces";
export const getEmrWalWorkspaces: typeof import("./getEmrWalWorkspaces").getEmrWalWorkspaces = null as any;
export const getEmrWalWorkspacesOutput: typeof import("./getEmrWalWorkspaces").getEmrWalWorkspacesOutput = null as any;
utilities.lazyLoad(exports, ["getEmrWalWorkspaces","getEmrWalWorkspacesOutput"], () => require("./getEmrWalWorkspaces"));

export { GetEmrcontainersVirtualClustersResult } from "./getEmrcontainersVirtualClusters";
export const getEmrcontainersVirtualClusters: typeof import("./getEmrcontainersVirtualClusters").getEmrcontainersVirtualClusters = null as any;
export const getEmrcontainersVirtualClustersOutput: typeof import("./getEmrcontainersVirtualClusters").getEmrcontainersVirtualClustersOutput = null as any;
utilities.lazyLoad(exports, ["getEmrcontainersVirtualClusters","getEmrcontainersVirtualClustersOutput"], () => require("./getEmrcontainersVirtualClusters"));

export { GetEmrserverlessApplicationArgs, GetEmrserverlessApplicationResult, GetEmrserverlessApplicationOutputArgs } from "./getEmrserverlessApplication";
export const getEmrserverlessApplication: typeof import("./getEmrserverlessApplication").getEmrserverlessApplication = null as any;
export const getEmrserverlessApplicationOutput: typeof import("./getEmrserverlessApplication").getEmrserverlessApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getEmrserverlessApplication","getEmrserverlessApplicationOutput"], () => require("./getEmrserverlessApplication"));

export { GetEmrserverlessApplicationsResult } from "./getEmrserverlessApplications";
export const getEmrserverlessApplications: typeof import("./getEmrserverlessApplications").getEmrserverlessApplications = null as any;
export const getEmrserverlessApplicationsOutput: typeof import("./getEmrserverlessApplications").getEmrserverlessApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getEmrserverlessApplications","getEmrserverlessApplicationsOutput"], () => require("./getEmrserverlessApplications"));

export { GetEntityresolutionIdMappingWorkflowArgs, GetEntityresolutionIdMappingWorkflowResult, GetEntityresolutionIdMappingWorkflowOutputArgs } from "./getEntityresolutionIdMappingWorkflow";
export const getEntityresolutionIdMappingWorkflow: typeof import("./getEntityresolutionIdMappingWorkflow").getEntityresolutionIdMappingWorkflow = null as any;
export const getEntityresolutionIdMappingWorkflowOutput: typeof import("./getEntityresolutionIdMappingWorkflow").getEntityresolutionIdMappingWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getEntityresolutionIdMappingWorkflow","getEntityresolutionIdMappingWorkflowOutput"], () => require("./getEntityresolutionIdMappingWorkflow"));

export { GetEntityresolutionIdMappingWorkflowsResult } from "./getEntityresolutionIdMappingWorkflows";
export const getEntityresolutionIdMappingWorkflows: typeof import("./getEntityresolutionIdMappingWorkflows").getEntityresolutionIdMappingWorkflows = null as any;
export const getEntityresolutionIdMappingWorkflowsOutput: typeof import("./getEntityresolutionIdMappingWorkflows").getEntityresolutionIdMappingWorkflowsOutput = null as any;
utilities.lazyLoad(exports, ["getEntityresolutionIdMappingWorkflows","getEntityresolutionIdMappingWorkflowsOutput"], () => require("./getEntityresolutionIdMappingWorkflows"));

export { GetEntityresolutionIdNamespaceArgs, GetEntityresolutionIdNamespaceResult, GetEntityresolutionIdNamespaceOutputArgs } from "./getEntityresolutionIdNamespace";
export const getEntityresolutionIdNamespace: typeof import("./getEntityresolutionIdNamespace").getEntityresolutionIdNamespace = null as any;
export const getEntityresolutionIdNamespaceOutput: typeof import("./getEntityresolutionIdNamespace").getEntityresolutionIdNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getEntityresolutionIdNamespace","getEntityresolutionIdNamespaceOutput"], () => require("./getEntityresolutionIdNamespace"));

export { GetEntityresolutionIdNamespacesResult } from "./getEntityresolutionIdNamespaces";
export const getEntityresolutionIdNamespaces: typeof import("./getEntityresolutionIdNamespaces").getEntityresolutionIdNamespaces = null as any;
export const getEntityresolutionIdNamespacesOutput: typeof import("./getEntityresolutionIdNamespaces").getEntityresolutionIdNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getEntityresolutionIdNamespaces","getEntityresolutionIdNamespacesOutput"], () => require("./getEntityresolutionIdNamespaces"));

export { GetEntityresolutionMatchingWorkflowArgs, GetEntityresolutionMatchingWorkflowResult, GetEntityresolutionMatchingWorkflowOutputArgs } from "./getEntityresolutionMatchingWorkflow";
export const getEntityresolutionMatchingWorkflow: typeof import("./getEntityresolutionMatchingWorkflow").getEntityresolutionMatchingWorkflow = null as any;
export const getEntityresolutionMatchingWorkflowOutput: typeof import("./getEntityresolutionMatchingWorkflow").getEntityresolutionMatchingWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getEntityresolutionMatchingWorkflow","getEntityresolutionMatchingWorkflowOutput"], () => require("./getEntityresolutionMatchingWorkflow"));

export { GetEntityresolutionMatchingWorkflowsResult } from "./getEntityresolutionMatchingWorkflows";
export const getEntityresolutionMatchingWorkflows: typeof import("./getEntityresolutionMatchingWorkflows").getEntityresolutionMatchingWorkflows = null as any;
export const getEntityresolutionMatchingWorkflowsOutput: typeof import("./getEntityresolutionMatchingWorkflows").getEntityresolutionMatchingWorkflowsOutput = null as any;
utilities.lazyLoad(exports, ["getEntityresolutionMatchingWorkflows","getEntityresolutionMatchingWorkflowsOutput"], () => require("./getEntityresolutionMatchingWorkflows"));

export { GetEntityresolutionPolicyStatementArgs, GetEntityresolutionPolicyStatementResult, GetEntityresolutionPolicyStatementOutputArgs } from "./getEntityresolutionPolicyStatement";
export const getEntityresolutionPolicyStatement: typeof import("./getEntityresolutionPolicyStatement").getEntityresolutionPolicyStatement = null as any;
export const getEntityresolutionPolicyStatementOutput: typeof import("./getEntityresolutionPolicyStatement").getEntityresolutionPolicyStatementOutput = null as any;
utilities.lazyLoad(exports, ["getEntityresolutionPolicyStatement","getEntityresolutionPolicyStatementOutput"], () => require("./getEntityresolutionPolicyStatement"));

export { GetEntityresolutionSchemaMappingArgs, GetEntityresolutionSchemaMappingResult, GetEntityresolutionSchemaMappingOutputArgs } from "./getEntityresolutionSchemaMapping";
export const getEntityresolutionSchemaMapping: typeof import("./getEntityresolutionSchemaMapping").getEntityresolutionSchemaMapping = null as any;
export const getEntityresolutionSchemaMappingOutput: typeof import("./getEntityresolutionSchemaMapping").getEntityresolutionSchemaMappingOutput = null as any;
utilities.lazyLoad(exports, ["getEntityresolutionSchemaMapping","getEntityresolutionSchemaMappingOutput"], () => require("./getEntityresolutionSchemaMapping"));

export { GetEntityresolutionSchemaMappingsResult } from "./getEntityresolutionSchemaMappings";
export const getEntityresolutionSchemaMappings: typeof import("./getEntityresolutionSchemaMappings").getEntityresolutionSchemaMappings = null as any;
export const getEntityresolutionSchemaMappingsOutput: typeof import("./getEntityresolutionSchemaMappings").getEntityresolutionSchemaMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getEntityresolutionSchemaMappings","getEntityresolutionSchemaMappingsOutput"], () => require("./getEntityresolutionSchemaMappings"));

export { GetEventsApiDestinationArgs, GetEventsApiDestinationResult, GetEventsApiDestinationOutputArgs } from "./getEventsApiDestination";
export const getEventsApiDestination: typeof import("./getEventsApiDestination").getEventsApiDestination = null as any;
export const getEventsApiDestinationOutput: typeof import("./getEventsApiDestination").getEventsApiDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getEventsApiDestination","getEventsApiDestinationOutput"], () => require("./getEventsApiDestination"));

export { GetEventsApiDestinationsResult } from "./getEventsApiDestinations";
export const getEventsApiDestinations: typeof import("./getEventsApiDestinations").getEventsApiDestinations = null as any;
export const getEventsApiDestinationsOutput: typeof import("./getEventsApiDestinations").getEventsApiDestinationsOutput = null as any;
utilities.lazyLoad(exports, ["getEventsApiDestinations","getEventsApiDestinationsOutput"], () => require("./getEventsApiDestinations"));

export { GetEventsArchiveArgs, GetEventsArchiveResult, GetEventsArchiveOutputArgs } from "./getEventsArchive";
export const getEventsArchive: typeof import("./getEventsArchive").getEventsArchive = null as any;
export const getEventsArchiveOutput: typeof import("./getEventsArchive").getEventsArchiveOutput = null as any;
utilities.lazyLoad(exports, ["getEventsArchive","getEventsArchiveOutput"], () => require("./getEventsArchive"));

export { GetEventsArchivesResult } from "./getEventsArchives";
export const getEventsArchives: typeof import("./getEventsArchives").getEventsArchives = null as any;
export const getEventsArchivesOutput: typeof import("./getEventsArchives").getEventsArchivesOutput = null as any;
utilities.lazyLoad(exports, ["getEventsArchives","getEventsArchivesOutput"], () => require("./getEventsArchives"));

export { GetEventsConnectionsResult } from "./getEventsConnections";
export const getEventsConnections: typeof import("./getEventsConnections").getEventsConnections = null as any;
export const getEventsConnectionsOutput: typeof import("./getEventsConnections").getEventsConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getEventsConnections","getEventsConnectionsOutput"], () => require("./getEventsConnections"));

export { GetEventsEndpointArgs, GetEventsEndpointResult, GetEventsEndpointOutputArgs } from "./getEventsEndpoint";
export const getEventsEndpoint: typeof import("./getEventsEndpoint").getEventsEndpoint = null as any;
export const getEventsEndpointOutput: typeof import("./getEventsEndpoint").getEventsEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEventsEndpoint","getEventsEndpointOutput"], () => require("./getEventsEndpoint"));

export { GetEventsEndpointsResult } from "./getEventsEndpoints";
export const getEventsEndpoints: typeof import("./getEventsEndpoints").getEventsEndpoints = null as any;
export const getEventsEndpointsOutput: typeof import("./getEventsEndpoints").getEventsEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getEventsEndpoints","getEventsEndpointsOutput"], () => require("./getEventsEndpoints"));

export { GetEventsEventBusArgs, GetEventsEventBusResult, GetEventsEventBusOutputArgs } from "./getEventsEventBus";
export const getEventsEventBus: typeof import("./getEventsEventBus").getEventsEventBus = null as any;
export const getEventsEventBusOutput: typeof import("./getEventsEventBus").getEventsEventBusOutput = null as any;
utilities.lazyLoad(exports, ["getEventsEventBus","getEventsEventBusOutput"], () => require("./getEventsEventBus"));

export { GetEventsEventBusesResult } from "./getEventsEventBuses";
export const getEventsEventBuses: typeof import("./getEventsEventBuses").getEventsEventBuses = null as any;
export const getEventsEventBusesOutput: typeof import("./getEventsEventBuses").getEventsEventBusesOutput = null as any;
utilities.lazyLoad(exports, ["getEventsEventBuses","getEventsEventBusesOutput"], () => require("./getEventsEventBuses"));

export { GetEventsRuleArgs, GetEventsRuleResult, GetEventsRuleOutputArgs } from "./getEventsRule";
export const getEventsRule: typeof import("./getEventsRule").getEventsRule = null as any;
export const getEventsRuleOutput: typeof import("./getEventsRule").getEventsRuleOutput = null as any;
utilities.lazyLoad(exports, ["getEventsRule","getEventsRuleOutput"], () => require("./getEventsRule"));

export { GetEventsRulesResult } from "./getEventsRules";
export const getEventsRules: typeof import("./getEventsRules").getEventsRules = null as any;
export const getEventsRulesOutput: typeof import("./getEventsRules").getEventsRulesOutput = null as any;
utilities.lazyLoad(exports, ["getEventsRules","getEventsRulesOutput"], () => require("./getEventsRules"));

export { GetEventschemasDiscovererArgs, GetEventschemasDiscovererResult, GetEventschemasDiscovererOutputArgs } from "./getEventschemasDiscoverer";
export const getEventschemasDiscoverer: typeof import("./getEventschemasDiscoverer").getEventschemasDiscoverer = null as any;
export const getEventschemasDiscovererOutput: typeof import("./getEventschemasDiscoverer").getEventschemasDiscovererOutput = null as any;
utilities.lazyLoad(exports, ["getEventschemasDiscoverer","getEventschemasDiscovererOutput"], () => require("./getEventschemasDiscoverer"));

export { GetEventschemasDiscoverersResult } from "./getEventschemasDiscoverers";
export const getEventschemasDiscoverers: typeof import("./getEventschemasDiscoverers").getEventschemasDiscoverers = null as any;
export const getEventschemasDiscoverersOutput: typeof import("./getEventschemasDiscoverers").getEventschemasDiscoverersOutput = null as any;
utilities.lazyLoad(exports, ["getEventschemasDiscoverers","getEventschemasDiscoverersOutput"], () => require("./getEventschemasDiscoverers"));

export { GetEventschemasRegistriesResult } from "./getEventschemasRegistries";
export const getEventschemasRegistries: typeof import("./getEventschemasRegistries").getEventschemasRegistries = null as any;
export const getEventschemasRegistriesOutput: typeof import("./getEventschemasRegistries").getEventschemasRegistriesOutput = null as any;
utilities.lazyLoad(exports, ["getEventschemasRegistries","getEventschemasRegistriesOutput"], () => require("./getEventschemasRegistries"));

export { GetEventschemasRegistryArgs, GetEventschemasRegistryResult, GetEventschemasRegistryOutputArgs } from "./getEventschemasRegistry";
export const getEventschemasRegistry: typeof import("./getEventschemasRegistry").getEventschemasRegistry = null as any;
export const getEventschemasRegistryOutput: typeof import("./getEventschemasRegistry").getEventschemasRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getEventschemasRegistry","getEventschemasRegistryOutput"], () => require("./getEventschemasRegistry"));

export { GetEventschemasRegistryPolicyArgs, GetEventschemasRegistryPolicyResult, GetEventschemasRegistryPolicyOutputArgs } from "./getEventschemasRegistryPolicy";
export const getEventschemasRegistryPolicy: typeof import("./getEventschemasRegistryPolicy").getEventschemasRegistryPolicy = null as any;
export const getEventschemasRegistryPolicyOutput: typeof import("./getEventschemasRegistryPolicy").getEventschemasRegistryPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEventschemasRegistryPolicy","getEventschemasRegistryPolicyOutput"], () => require("./getEventschemasRegistryPolicy"));

export { GetEventschemasSchemaArgs, GetEventschemasSchemaResult, GetEventschemasSchemaOutputArgs } from "./getEventschemasSchema";
export const getEventschemasSchema: typeof import("./getEventschemasSchema").getEventschemasSchema = null as any;
export const getEventschemasSchemaOutput: typeof import("./getEventschemasSchema").getEventschemasSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getEventschemasSchema","getEventschemasSchemaOutput"], () => require("./getEventschemasSchema"));

export { GetEvidentlyExperimentArgs, GetEvidentlyExperimentResult, GetEvidentlyExperimentOutputArgs } from "./getEvidentlyExperiment";
export const getEvidentlyExperiment: typeof import("./getEvidentlyExperiment").getEvidentlyExperiment = null as any;
export const getEvidentlyExperimentOutput: typeof import("./getEvidentlyExperiment").getEvidentlyExperimentOutput = null as any;
utilities.lazyLoad(exports, ["getEvidentlyExperiment","getEvidentlyExperimentOutput"], () => require("./getEvidentlyExperiment"));

export { GetEvidentlyFeatureArgs, GetEvidentlyFeatureResult, GetEvidentlyFeatureOutputArgs } from "./getEvidentlyFeature";
export const getEvidentlyFeature: typeof import("./getEvidentlyFeature").getEvidentlyFeature = null as any;
export const getEvidentlyFeatureOutput: typeof import("./getEvidentlyFeature").getEvidentlyFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getEvidentlyFeature","getEvidentlyFeatureOutput"], () => require("./getEvidentlyFeature"));

export { GetEvidentlyLaunchArgs, GetEvidentlyLaunchResult, GetEvidentlyLaunchOutputArgs } from "./getEvidentlyLaunch";
export const getEvidentlyLaunch: typeof import("./getEvidentlyLaunch").getEvidentlyLaunch = null as any;
export const getEvidentlyLaunchOutput: typeof import("./getEvidentlyLaunch").getEvidentlyLaunchOutput = null as any;
utilities.lazyLoad(exports, ["getEvidentlyLaunch","getEvidentlyLaunchOutput"], () => require("./getEvidentlyLaunch"));

export { GetEvidentlyProjectArgs, GetEvidentlyProjectResult, GetEvidentlyProjectOutputArgs } from "./getEvidentlyProject";
export const getEvidentlyProject: typeof import("./getEvidentlyProject").getEvidentlyProject = null as any;
export const getEvidentlyProjectOutput: typeof import("./getEvidentlyProject").getEvidentlyProjectOutput = null as any;
utilities.lazyLoad(exports, ["getEvidentlyProject","getEvidentlyProjectOutput"], () => require("./getEvidentlyProject"));

export { GetEvidentlySegmentArgs, GetEvidentlySegmentResult, GetEvidentlySegmentOutputArgs } from "./getEvidentlySegment";
export const getEvidentlySegment: typeof import("./getEvidentlySegment").getEvidentlySegment = null as any;
export const getEvidentlySegmentOutput: typeof import("./getEvidentlySegment").getEvidentlySegmentOutput = null as any;
utilities.lazyLoad(exports, ["getEvidentlySegment","getEvidentlySegmentOutput"], () => require("./getEvidentlySegment"));

export { GetEvidentlySegmentsResult } from "./getEvidentlySegments";
export const getEvidentlySegments: typeof import("./getEvidentlySegments").getEvidentlySegments = null as any;
export const getEvidentlySegmentsOutput: typeof import("./getEvidentlySegments").getEvidentlySegmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEvidentlySegments","getEvidentlySegmentsOutput"], () => require("./getEvidentlySegments"));

export { GetFinspaceEnvironmentArgs, GetFinspaceEnvironmentResult, GetFinspaceEnvironmentOutputArgs } from "./getFinspaceEnvironment";
export const getFinspaceEnvironment: typeof import("./getFinspaceEnvironment").getFinspaceEnvironment = null as any;
export const getFinspaceEnvironmentOutput: typeof import("./getFinspaceEnvironment").getFinspaceEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getFinspaceEnvironment","getFinspaceEnvironmentOutput"], () => require("./getFinspaceEnvironment"));

export { GetFinspaceEnvironmentsResult } from "./getFinspaceEnvironments";
export const getFinspaceEnvironments: typeof import("./getFinspaceEnvironments").getFinspaceEnvironments = null as any;
export const getFinspaceEnvironmentsOutput: typeof import("./getFinspaceEnvironments").getFinspaceEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getFinspaceEnvironments","getFinspaceEnvironmentsOutput"], () => require("./getFinspaceEnvironments"));

export { GetFisExperimentTemplateArgs, GetFisExperimentTemplateResult, GetFisExperimentTemplateOutputArgs } from "./getFisExperimentTemplate";
export const getFisExperimentTemplate: typeof import("./getFisExperimentTemplate").getFisExperimentTemplate = null as any;
export const getFisExperimentTemplateOutput: typeof import("./getFisExperimentTemplate").getFisExperimentTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getFisExperimentTemplate","getFisExperimentTemplateOutput"], () => require("./getFisExperimentTemplate"));

export { GetFisExperimentTemplatesResult } from "./getFisExperimentTemplates";
export const getFisExperimentTemplates: typeof import("./getFisExperimentTemplates").getFisExperimentTemplates = null as any;
export const getFisExperimentTemplatesOutput: typeof import("./getFisExperimentTemplates").getFisExperimentTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getFisExperimentTemplates","getFisExperimentTemplatesOutput"], () => require("./getFisExperimentTemplates"));

export { GetFisTargetAccountConfigurationArgs, GetFisTargetAccountConfigurationResult, GetFisTargetAccountConfigurationOutputArgs } from "./getFisTargetAccountConfiguration";
export const getFisTargetAccountConfiguration: typeof import("./getFisTargetAccountConfiguration").getFisTargetAccountConfiguration = null as any;
export const getFisTargetAccountConfigurationOutput: typeof import("./getFisTargetAccountConfiguration").getFisTargetAccountConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getFisTargetAccountConfiguration","getFisTargetAccountConfigurationOutput"], () => require("./getFisTargetAccountConfiguration"));

export { GetFmsNotificationChannelArgs, GetFmsNotificationChannelResult, GetFmsNotificationChannelOutputArgs } from "./getFmsNotificationChannel";
export const getFmsNotificationChannel: typeof import("./getFmsNotificationChannel").getFmsNotificationChannel = null as any;
export const getFmsNotificationChannelOutput: typeof import("./getFmsNotificationChannel").getFmsNotificationChannelOutput = null as any;
utilities.lazyLoad(exports, ["getFmsNotificationChannel","getFmsNotificationChannelOutput"], () => require("./getFmsNotificationChannel"));

export { GetFmsNotificationChannelsResult } from "./getFmsNotificationChannels";
export const getFmsNotificationChannels: typeof import("./getFmsNotificationChannels").getFmsNotificationChannels = null as any;
export const getFmsNotificationChannelsOutput: typeof import("./getFmsNotificationChannels").getFmsNotificationChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getFmsNotificationChannels","getFmsNotificationChannelsOutput"], () => require("./getFmsNotificationChannels"));

export { GetFmsPoliciesResult } from "./getFmsPolicies";
export const getFmsPolicies: typeof import("./getFmsPolicies").getFmsPolicies = null as any;
export const getFmsPoliciesOutput: typeof import("./getFmsPolicies").getFmsPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getFmsPolicies","getFmsPoliciesOutput"], () => require("./getFmsPolicies"));

export { GetFmsPolicyArgs, GetFmsPolicyResult, GetFmsPolicyOutputArgs } from "./getFmsPolicy";
export const getFmsPolicy: typeof import("./getFmsPolicy").getFmsPolicy = null as any;
export const getFmsPolicyOutput: typeof import("./getFmsPolicy").getFmsPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFmsPolicy","getFmsPolicyOutput"], () => require("./getFmsPolicy"));

export { GetFmsResourceSetArgs, GetFmsResourceSetResult, GetFmsResourceSetOutputArgs } from "./getFmsResourceSet";
export const getFmsResourceSet: typeof import("./getFmsResourceSet").getFmsResourceSet = null as any;
export const getFmsResourceSetOutput: typeof import("./getFmsResourceSet").getFmsResourceSetOutput = null as any;
utilities.lazyLoad(exports, ["getFmsResourceSet","getFmsResourceSetOutput"], () => require("./getFmsResourceSet"));

export { GetFmsResourceSetsResult } from "./getFmsResourceSets";
export const getFmsResourceSets: typeof import("./getFmsResourceSets").getFmsResourceSets = null as any;
export const getFmsResourceSetsOutput: typeof import("./getFmsResourceSets").getFmsResourceSetsOutput = null as any;
utilities.lazyLoad(exports, ["getFmsResourceSets","getFmsResourceSetsOutput"], () => require("./getFmsResourceSets"));

export { GetForecastDatasetArgs, GetForecastDatasetResult, GetForecastDatasetOutputArgs } from "./getForecastDataset";
export const getForecastDataset: typeof import("./getForecastDataset").getForecastDataset = null as any;
export const getForecastDatasetOutput: typeof import("./getForecastDataset").getForecastDatasetOutput = null as any;
utilities.lazyLoad(exports, ["getForecastDataset","getForecastDatasetOutput"], () => require("./getForecastDataset"));

export { GetForecastDatasetGroupArgs, GetForecastDatasetGroupResult, GetForecastDatasetGroupOutputArgs } from "./getForecastDatasetGroup";
export const getForecastDatasetGroup: typeof import("./getForecastDatasetGroup").getForecastDatasetGroup = null as any;
export const getForecastDatasetGroupOutput: typeof import("./getForecastDatasetGroup").getForecastDatasetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getForecastDatasetGroup","getForecastDatasetGroupOutput"], () => require("./getForecastDatasetGroup"));

export { GetForecastDatasetGroupsResult } from "./getForecastDatasetGroups";
export const getForecastDatasetGroups: typeof import("./getForecastDatasetGroups").getForecastDatasetGroups = null as any;
export const getForecastDatasetGroupsOutput: typeof import("./getForecastDatasetGroups").getForecastDatasetGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getForecastDatasetGroups","getForecastDatasetGroupsOutput"], () => require("./getForecastDatasetGroups"));

export { GetForecastDatasetsResult } from "./getForecastDatasets";
export const getForecastDatasets: typeof import("./getForecastDatasets").getForecastDatasets = null as any;
export const getForecastDatasetsOutput: typeof import("./getForecastDatasets").getForecastDatasetsOutput = null as any;
utilities.lazyLoad(exports, ["getForecastDatasets","getForecastDatasetsOutput"], () => require("./getForecastDatasets"));

export { GetFrauddetectorDetectorArgs, GetFrauddetectorDetectorResult, GetFrauddetectorDetectorOutputArgs } from "./getFrauddetectorDetector";
export const getFrauddetectorDetector: typeof import("./getFrauddetectorDetector").getFrauddetectorDetector = null as any;
export const getFrauddetectorDetectorOutput: typeof import("./getFrauddetectorDetector").getFrauddetectorDetectorOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorDetector","getFrauddetectorDetectorOutput"], () => require("./getFrauddetectorDetector"));

export { GetFrauddetectorDetectorsResult } from "./getFrauddetectorDetectors";
export const getFrauddetectorDetectors: typeof import("./getFrauddetectorDetectors").getFrauddetectorDetectors = null as any;
export const getFrauddetectorDetectorsOutput: typeof import("./getFrauddetectorDetectors").getFrauddetectorDetectorsOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorDetectors","getFrauddetectorDetectorsOutput"], () => require("./getFrauddetectorDetectors"));

export { GetFrauddetectorEntityTypeArgs, GetFrauddetectorEntityTypeResult, GetFrauddetectorEntityTypeOutputArgs } from "./getFrauddetectorEntityType";
export const getFrauddetectorEntityType: typeof import("./getFrauddetectorEntityType").getFrauddetectorEntityType = null as any;
export const getFrauddetectorEntityTypeOutput: typeof import("./getFrauddetectorEntityType").getFrauddetectorEntityTypeOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorEntityType","getFrauddetectorEntityTypeOutput"], () => require("./getFrauddetectorEntityType"));

export { GetFrauddetectorEntityTypesResult } from "./getFrauddetectorEntityTypes";
export const getFrauddetectorEntityTypes: typeof import("./getFrauddetectorEntityTypes").getFrauddetectorEntityTypes = null as any;
export const getFrauddetectorEntityTypesOutput: typeof import("./getFrauddetectorEntityTypes").getFrauddetectorEntityTypesOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorEntityTypes","getFrauddetectorEntityTypesOutput"], () => require("./getFrauddetectorEntityTypes"));

export { GetFrauddetectorEventTypeArgs, GetFrauddetectorEventTypeResult, GetFrauddetectorEventTypeOutputArgs } from "./getFrauddetectorEventType";
export const getFrauddetectorEventType: typeof import("./getFrauddetectorEventType").getFrauddetectorEventType = null as any;
export const getFrauddetectorEventTypeOutput: typeof import("./getFrauddetectorEventType").getFrauddetectorEventTypeOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorEventType","getFrauddetectorEventTypeOutput"], () => require("./getFrauddetectorEventType"));

export { GetFrauddetectorEventTypesResult } from "./getFrauddetectorEventTypes";
export const getFrauddetectorEventTypes: typeof import("./getFrauddetectorEventTypes").getFrauddetectorEventTypes = null as any;
export const getFrauddetectorEventTypesOutput: typeof import("./getFrauddetectorEventTypes").getFrauddetectorEventTypesOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorEventTypes","getFrauddetectorEventTypesOutput"], () => require("./getFrauddetectorEventTypes"));

export { GetFrauddetectorLabelArgs, GetFrauddetectorLabelResult, GetFrauddetectorLabelOutputArgs } from "./getFrauddetectorLabel";
export const getFrauddetectorLabel: typeof import("./getFrauddetectorLabel").getFrauddetectorLabel = null as any;
export const getFrauddetectorLabelOutput: typeof import("./getFrauddetectorLabel").getFrauddetectorLabelOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorLabel","getFrauddetectorLabelOutput"], () => require("./getFrauddetectorLabel"));

export { GetFrauddetectorLabelsResult } from "./getFrauddetectorLabels";
export const getFrauddetectorLabels: typeof import("./getFrauddetectorLabels").getFrauddetectorLabels = null as any;
export const getFrauddetectorLabelsOutput: typeof import("./getFrauddetectorLabels").getFrauddetectorLabelsOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorLabels","getFrauddetectorLabelsOutput"], () => require("./getFrauddetectorLabels"));

export { GetFrauddetectorListArgs, GetFrauddetectorListResult, GetFrauddetectorListOutputArgs } from "./getFrauddetectorList";
export const getFrauddetectorList: typeof import("./getFrauddetectorList").getFrauddetectorList = null as any;
export const getFrauddetectorListOutput: typeof import("./getFrauddetectorList").getFrauddetectorListOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorList","getFrauddetectorListOutput"], () => require("./getFrauddetectorList"));

export { GetFrauddetectorListsResult } from "./getFrauddetectorLists";
export const getFrauddetectorLists: typeof import("./getFrauddetectorLists").getFrauddetectorLists = null as any;
export const getFrauddetectorListsOutput: typeof import("./getFrauddetectorLists").getFrauddetectorListsOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorLists","getFrauddetectorListsOutput"], () => require("./getFrauddetectorLists"));

export { GetFrauddetectorOutcomeArgs, GetFrauddetectorOutcomeResult, GetFrauddetectorOutcomeOutputArgs } from "./getFrauddetectorOutcome";
export const getFrauddetectorOutcome: typeof import("./getFrauddetectorOutcome").getFrauddetectorOutcome = null as any;
export const getFrauddetectorOutcomeOutput: typeof import("./getFrauddetectorOutcome").getFrauddetectorOutcomeOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorOutcome","getFrauddetectorOutcomeOutput"], () => require("./getFrauddetectorOutcome"));

export { GetFrauddetectorOutcomesResult } from "./getFrauddetectorOutcomes";
export const getFrauddetectorOutcomes: typeof import("./getFrauddetectorOutcomes").getFrauddetectorOutcomes = null as any;
export const getFrauddetectorOutcomesOutput: typeof import("./getFrauddetectorOutcomes").getFrauddetectorOutcomesOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorOutcomes","getFrauddetectorOutcomesOutput"], () => require("./getFrauddetectorOutcomes"));

export { GetFrauddetectorVariableArgs, GetFrauddetectorVariableResult, GetFrauddetectorVariableOutputArgs } from "./getFrauddetectorVariable";
export const getFrauddetectorVariable: typeof import("./getFrauddetectorVariable").getFrauddetectorVariable = null as any;
export const getFrauddetectorVariableOutput: typeof import("./getFrauddetectorVariable").getFrauddetectorVariableOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorVariable","getFrauddetectorVariableOutput"], () => require("./getFrauddetectorVariable"));

export { GetFrauddetectorVariablesResult } from "./getFrauddetectorVariables";
export const getFrauddetectorVariables: typeof import("./getFrauddetectorVariables").getFrauddetectorVariables = null as any;
export const getFrauddetectorVariablesOutput: typeof import("./getFrauddetectorVariables").getFrauddetectorVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getFrauddetectorVariables","getFrauddetectorVariablesOutput"], () => require("./getFrauddetectorVariables"));

export { GetFsxDataRepositoryAssociationArgs, GetFsxDataRepositoryAssociationResult, GetFsxDataRepositoryAssociationOutputArgs } from "./getFsxDataRepositoryAssociation";
export const getFsxDataRepositoryAssociation: typeof import("./getFsxDataRepositoryAssociation").getFsxDataRepositoryAssociation = null as any;
export const getFsxDataRepositoryAssociationOutput: typeof import("./getFsxDataRepositoryAssociation").getFsxDataRepositoryAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getFsxDataRepositoryAssociation","getFsxDataRepositoryAssociationOutput"], () => require("./getFsxDataRepositoryAssociation"));

export { GetFsxDataRepositoryAssociationsResult } from "./getFsxDataRepositoryAssociations";
export const getFsxDataRepositoryAssociations: typeof import("./getFsxDataRepositoryAssociations").getFsxDataRepositoryAssociations = null as any;
export const getFsxDataRepositoryAssociationsOutput: typeof import("./getFsxDataRepositoryAssociations").getFsxDataRepositoryAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getFsxDataRepositoryAssociations","getFsxDataRepositoryAssociationsOutput"], () => require("./getFsxDataRepositoryAssociations"));

export { GetGameliftAliasArgs, GetGameliftAliasResult, GetGameliftAliasOutputArgs } from "./getGameliftAlias";
export const getGameliftAlias: typeof import("./getGameliftAlias").getGameliftAlias = null as any;
export const getGameliftAliasOutput: typeof import("./getGameliftAlias").getGameliftAliasOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftAlias","getGameliftAliasOutput"], () => require("./getGameliftAlias"));

export { GetGameliftAliasesResult } from "./getGameliftAliases";
export const getGameliftAliases: typeof import("./getGameliftAliases").getGameliftAliases = null as any;
export const getGameliftAliasesOutput: typeof import("./getGameliftAliases").getGameliftAliasesOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftAliases","getGameliftAliasesOutput"], () => require("./getGameliftAliases"));

export { GetGameliftBuildArgs, GetGameliftBuildResult, GetGameliftBuildOutputArgs } from "./getGameliftBuild";
export const getGameliftBuild: typeof import("./getGameliftBuild").getGameliftBuild = null as any;
export const getGameliftBuildOutput: typeof import("./getGameliftBuild").getGameliftBuildOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftBuild","getGameliftBuildOutput"], () => require("./getGameliftBuild"));

export { GetGameliftBuildsResult } from "./getGameliftBuilds";
export const getGameliftBuilds: typeof import("./getGameliftBuilds").getGameliftBuilds = null as any;
export const getGameliftBuildsOutput: typeof import("./getGameliftBuilds").getGameliftBuildsOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftBuilds","getGameliftBuildsOutput"], () => require("./getGameliftBuilds"));

export { GetGameliftContainerGroupDefinitionArgs, GetGameliftContainerGroupDefinitionResult, GetGameliftContainerGroupDefinitionOutputArgs } from "./getGameliftContainerGroupDefinition";
export const getGameliftContainerGroupDefinition: typeof import("./getGameliftContainerGroupDefinition").getGameliftContainerGroupDefinition = null as any;
export const getGameliftContainerGroupDefinitionOutput: typeof import("./getGameliftContainerGroupDefinition").getGameliftContainerGroupDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftContainerGroupDefinition","getGameliftContainerGroupDefinitionOutput"], () => require("./getGameliftContainerGroupDefinition"));

export { GetGameliftContainerGroupDefinitionsResult } from "./getGameliftContainerGroupDefinitions";
export const getGameliftContainerGroupDefinitions: typeof import("./getGameliftContainerGroupDefinitions").getGameliftContainerGroupDefinitions = null as any;
export const getGameliftContainerGroupDefinitionsOutput: typeof import("./getGameliftContainerGroupDefinitions").getGameliftContainerGroupDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftContainerGroupDefinitions","getGameliftContainerGroupDefinitionsOutput"], () => require("./getGameliftContainerGroupDefinitions"));

export { GetGameliftFleetArgs, GetGameliftFleetResult, GetGameliftFleetOutputArgs } from "./getGameliftFleet";
export const getGameliftFleet: typeof import("./getGameliftFleet").getGameliftFleet = null as any;
export const getGameliftFleetOutput: typeof import("./getGameliftFleet").getGameliftFleetOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftFleet","getGameliftFleetOutput"], () => require("./getGameliftFleet"));

export { GetGameliftFleetsResult } from "./getGameliftFleets";
export const getGameliftFleets: typeof import("./getGameliftFleets").getGameliftFleets = null as any;
export const getGameliftFleetsOutput: typeof import("./getGameliftFleets").getGameliftFleetsOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftFleets","getGameliftFleetsOutput"], () => require("./getGameliftFleets"));

export { GetGameliftGameServerGroupArgs, GetGameliftGameServerGroupResult, GetGameliftGameServerGroupOutputArgs } from "./getGameliftGameServerGroup";
export const getGameliftGameServerGroup: typeof import("./getGameliftGameServerGroup").getGameliftGameServerGroup = null as any;
export const getGameliftGameServerGroupOutput: typeof import("./getGameliftGameServerGroup").getGameliftGameServerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftGameServerGroup","getGameliftGameServerGroupOutput"], () => require("./getGameliftGameServerGroup"));

export { GetGameliftGameServerGroupsResult } from "./getGameliftGameServerGroups";
export const getGameliftGameServerGroups: typeof import("./getGameliftGameServerGroups").getGameliftGameServerGroups = null as any;
export const getGameliftGameServerGroupsOutput: typeof import("./getGameliftGameServerGroups").getGameliftGameServerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftGameServerGroups","getGameliftGameServerGroupsOutput"], () => require("./getGameliftGameServerGroups"));

export { GetGameliftGameSessionQueueArgs, GetGameliftGameSessionQueueResult, GetGameliftGameSessionQueueOutputArgs } from "./getGameliftGameSessionQueue";
export const getGameliftGameSessionQueue: typeof import("./getGameliftGameSessionQueue").getGameliftGameSessionQueue = null as any;
export const getGameliftGameSessionQueueOutput: typeof import("./getGameliftGameSessionQueue").getGameliftGameSessionQueueOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftGameSessionQueue","getGameliftGameSessionQueueOutput"], () => require("./getGameliftGameSessionQueue"));

export { GetGameliftGameSessionQueuesResult } from "./getGameliftGameSessionQueues";
export const getGameliftGameSessionQueues: typeof import("./getGameliftGameSessionQueues").getGameliftGameSessionQueues = null as any;
export const getGameliftGameSessionQueuesOutput: typeof import("./getGameliftGameSessionQueues").getGameliftGameSessionQueuesOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftGameSessionQueues","getGameliftGameSessionQueuesOutput"], () => require("./getGameliftGameSessionQueues"));

export { GetGameliftLocationArgs, GetGameliftLocationResult, GetGameliftLocationOutputArgs } from "./getGameliftLocation";
export const getGameliftLocation: typeof import("./getGameliftLocation").getGameliftLocation = null as any;
export const getGameliftLocationOutput: typeof import("./getGameliftLocation").getGameliftLocationOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftLocation","getGameliftLocationOutput"], () => require("./getGameliftLocation"));

export { GetGameliftLocationsResult } from "./getGameliftLocations";
export const getGameliftLocations: typeof import("./getGameliftLocations").getGameliftLocations = null as any;
export const getGameliftLocationsOutput: typeof import("./getGameliftLocations").getGameliftLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftLocations","getGameliftLocationsOutput"], () => require("./getGameliftLocations"));

export { GetGameliftMatchmakingConfigurationArgs, GetGameliftMatchmakingConfigurationResult, GetGameliftMatchmakingConfigurationOutputArgs } from "./getGameliftMatchmakingConfiguration";
export const getGameliftMatchmakingConfiguration: typeof import("./getGameliftMatchmakingConfiguration").getGameliftMatchmakingConfiguration = null as any;
export const getGameliftMatchmakingConfigurationOutput: typeof import("./getGameliftMatchmakingConfiguration").getGameliftMatchmakingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftMatchmakingConfiguration","getGameliftMatchmakingConfigurationOutput"], () => require("./getGameliftMatchmakingConfiguration"));

export { GetGameliftMatchmakingConfigurationsResult } from "./getGameliftMatchmakingConfigurations";
export const getGameliftMatchmakingConfigurations: typeof import("./getGameliftMatchmakingConfigurations").getGameliftMatchmakingConfigurations = null as any;
export const getGameliftMatchmakingConfigurationsOutput: typeof import("./getGameliftMatchmakingConfigurations").getGameliftMatchmakingConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftMatchmakingConfigurations","getGameliftMatchmakingConfigurationsOutput"], () => require("./getGameliftMatchmakingConfigurations"));

export { GetGameliftMatchmakingRuleSetArgs, GetGameliftMatchmakingRuleSetResult, GetGameliftMatchmakingRuleSetOutputArgs } from "./getGameliftMatchmakingRuleSet";
export const getGameliftMatchmakingRuleSet: typeof import("./getGameliftMatchmakingRuleSet").getGameliftMatchmakingRuleSet = null as any;
export const getGameliftMatchmakingRuleSetOutput: typeof import("./getGameliftMatchmakingRuleSet").getGameliftMatchmakingRuleSetOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftMatchmakingRuleSet","getGameliftMatchmakingRuleSetOutput"], () => require("./getGameliftMatchmakingRuleSet"));

export { GetGameliftMatchmakingRuleSetsResult } from "./getGameliftMatchmakingRuleSets";
export const getGameliftMatchmakingRuleSets: typeof import("./getGameliftMatchmakingRuleSets").getGameliftMatchmakingRuleSets = null as any;
export const getGameliftMatchmakingRuleSetsOutput: typeof import("./getGameliftMatchmakingRuleSets").getGameliftMatchmakingRuleSetsOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftMatchmakingRuleSets","getGameliftMatchmakingRuleSetsOutput"], () => require("./getGameliftMatchmakingRuleSets"));

export { GetGameliftScriptArgs, GetGameliftScriptResult, GetGameliftScriptOutputArgs } from "./getGameliftScript";
export const getGameliftScript: typeof import("./getGameliftScript").getGameliftScript = null as any;
export const getGameliftScriptOutput: typeof import("./getGameliftScript").getGameliftScriptOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftScript","getGameliftScriptOutput"], () => require("./getGameliftScript"));

export { GetGameliftScriptsResult } from "./getGameliftScripts";
export const getGameliftScripts: typeof import("./getGameliftScripts").getGameliftScripts = null as any;
export const getGameliftScriptsOutput: typeof import("./getGameliftScripts").getGameliftScriptsOutput = null as any;
utilities.lazyLoad(exports, ["getGameliftScripts","getGameliftScriptsOutput"], () => require("./getGameliftScripts"));

export { GetGlobalacceleratorAcceleratorArgs, GetGlobalacceleratorAcceleratorResult, GetGlobalacceleratorAcceleratorOutputArgs } from "./getGlobalacceleratorAccelerator";
export const getGlobalacceleratorAccelerator: typeof import("./getGlobalacceleratorAccelerator").getGlobalacceleratorAccelerator = null as any;
export const getGlobalacceleratorAcceleratorOutput: typeof import("./getGlobalacceleratorAccelerator").getGlobalacceleratorAcceleratorOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalacceleratorAccelerator","getGlobalacceleratorAcceleratorOutput"], () => require("./getGlobalacceleratorAccelerator"));

export { GetGlobalacceleratorAcceleratorsResult } from "./getGlobalacceleratorAccelerators";
export const getGlobalacceleratorAccelerators: typeof import("./getGlobalacceleratorAccelerators").getGlobalacceleratorAccelerators = null as any;
export const getGlobalacceleratorAcceleratorsOutput: typeof import("./getGlobalacceleratorAccelerators").getGlobalacceleratorAcceleratorsOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalacceleratorAccelerators","getGlobalacceleratorAcceleratorsOutput"], () => require("./getGlobalacceleratorAccelerators"));

export { GetGlobalacceleratorCrossAccountAttachmentArgs, GetGlobalacceleratorCrossAccountAttachmentResult, GetGlobalacceleratorCrossAccountAttachmentOutputArgs } from "./getGlobalacceleratorCrossAccountAttachment";
export const getGlobalacceleratorCrossAccountAttachment: typeof import("./getGlobalacceleratorCrossAccountAttachment").getGlobalacceleratorCrossAccountAttachment = null as any;
export const getGlobalacceleratorCrossAccountAttachmentOutput: typeof import("./getGlobalacceleratorCrossAccountAttachment").getGlobalacceleratorCrossAccountAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalacceleratorCrossAccountAttachment","getGlobalacceleratorCrossAccountAttachmentOutput"], () => require("./getGlobalacceleratorCrossAccountAttachment"));

export { GetGlobalacceleratorCrossAccountAttachmentsResult } from "./getGlobalacceleratorCrossAccountAttachments";
export const getGlobalacceleratorCrossAccountAttachments: typeof import("./getGlobalacceleratorCrossAccountAttachments").getGlobalacceleratorCrossAccountAttachments = null as any;
export const getGlobalacceleratorCrossAccountAttachmentsOutput: typeof import("./getGlobalacceleratorCrossAccountAttachments").getGlobalacceleratorCrossAccountAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalacceleratorCrossAccountAttachments","getGlobalacceleratorCrossAccountAttachmentsOutput"], () => require("./getGlobalacceleratorCrossAccountAttachments"));

export { GetGlobalacceleratorEndpointGroupArgs, GetGlobalacceleratorEndpointGroupResult, GetGlobalacceleratorEndpointGroupOutputArgs } from "./getGlobalacceleratorEndpointGroup";
export const getGlobalacceleratorEndpointGroup: typeof import("./getGlobalacceleratorEndpointGroup").getGlobalacceleratorEndpointGroup = null as any;
export const getGlobalacceleratorEndpointGroupOutput: typeof import("./getGlobalacceleratorEndpointGroup").getGlobalacceleratorEndpointGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalacceleratorEndpointGroup","getGlobalacceleratorEndpointGroupOutput"], () => require("./getGlobalacceleratorEndpointGroup"));

export { GetGlobalacceleratorEndpointGroupsResult } from "./getGlobalacceleratorEndpointGroups";
export const getGlobalacceleratorEndpointGroups: typeof import("./getGlobalacceleratorEndpointGroups").getGlobalacceleratorEndpointGroups = null as any;
export const getGlobalacceleratorEndpointGroupsOutput: typeof import("./getGlobalacceleratorEndpointGroups").getGlobalacceleratorEndpointGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalacceleratorEndpointGroups","getGlobalacceleratorEndpointGroupsOutput"], () => require("./getGlobalacceleratorEndpointGroups"));

export { GetGlobalacceleratorListenerArgs, GetGlobalacceleratorListenerResult, GetGlobalacceleratorListenerOutputArgs } from "./getGlobalacceleratorListener";
export const getGlobalacceleratorListener: typeof import("./getGlobalacceleratorListener").getGlobalacceleratorListener = null as any;
export const getGlobalacceleratorListenerOutput: typeof import("./getGlobalacceleratorListener").getGlobalacceleratorListenerOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalacceleratorListener","getGlobalacceleratorListenerOutput"], () => require("./getGlobalacceleratorListener"));

export { GetGlobalacceleratorListenersResult } from "./getGlobalacceleratorListeners";
export const getGlobalacceleratorListeners: typeof import("./getGlobalacceleratorListeners").getGlobalacceleratorListeners = null as any;
export const getGlobalacceleratorListenersOutput: typeof import("./getGlobalacceleratorListeners").getGlobalacceleratorListenersOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalacceleratorListeners","getGlobalacceleratorListenersOutput"], () => require("./getGlobalacceleratorListeners"));

export { GetGlueDatabaseArgs, GetGlueDatabaseResult, GetGlueDatabaseOutputArgs } from "./getGlueDatabase";
export const getGlueDatabase: typeof import("./getGlueDatabase").getGlueDatabase = null as any;
export const getGlueDatabaseOutput: typeof import("./getGlueDatabase").getGlueDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getGlueDatabase","getGlueDatabaseOutput"], () => require("./getGlueDatabase"));

export { GetGlueDatabasesResult } from "./getGlueDatabases";
export const getGlueDatabases: typeof import("./getGlueDatabases").getGlueDatabases = null as any;
export const getGlueDatabasesOutput: typeof import("./getGlueDatabases").getGlueDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getGlueDatabases","getGlueDatabasesOutput"], () => require("./getGlueDatabases"));

export { GetGlueRegistriesResult } from "./getGlueRegistries";
export const getGlueRegistries: typeof import("./getGlueRegistries").getGlueRegistries = null as any;
export const getGlueRegistriesOutput: typeof import("./getGlueRegistries").getGlueRegistriesOutput = null as any;
utilities.lazyLoad(exports, ["getGlueRegistries","getGlueRegistriesOutput"], () => require("./getGlueRegistries"));

export { GetGlueRegistryArgs, GetGlueRegistryResult, GetGlueRegistryOutputArgs } from "./getGlueRegistry";
export const getGlueRegistry: typeof import("./getGlueRegistry").getGlueRegistry = null as any;
export const getGlueRegistryOutput: typeof import("./getGlueRegistry").getGlueRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getGlueRegistry","getGlueRegistryOutput"], () => require("./getGlueRegistry"));

export { GetGlueSchemaArgs, GetGlueSchemaResult, GetGlueSchemaOutputArgs } from "./getGlueSchema";
export const getGlueSchema: typeof import("./getGlueSchema").getGlueSchema = null as any;
export const getGlueSchemaOutput: typeof import("./getGlueSchema").getGlueSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getGlueSchema","getGlueSchemaOutput"], () => require("./getGlueSchema"));

export { GetGlueSchemaVersionArgs, GetGlueSchemaVersionResult, GetGlueSchemaVersionOutputArgs } from "./getGlueSchemaVersion";
export const getGlueSchemaVersion: typeof import("./getGlueSchemaVersion").getGlueSchemaVersion = null as any;
export const getGlueSchemaVersionOutput: typeof import("./getGlueSchemaVersion").getGlueSchemaVersionOutput = null as any;
utilities.lazyLoad(exports, ["getGlueSchemaVersion","getGlueSchemaVersionOutput"], () => require("./getGlueSchemaVersion"));

export { GetGlueSchemaVersionMetadataArgs, GetGlueSchemaVersionMetadataResult, GetGlueSchemaVersionMetadataOutputArgs } from "./getGlueSchemaVersionMetadata";
export const getGlueSchemaVersionMetadata: typeof import("./getGlueSchemaVersionMetadata").getGlueSchemaVersionMetadata = null as any;
export const getGlueSchemaVersionMetadataOutput: typeof import("./getGlueSchemaVersionMetadata").getGlueSchemaVersionMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getGlueSchemaVersionMetadata","getGlueSchemaVersionMetadataOutput"], () => require("./getGlueSchemaVersionMetadata"));

export { GetGlueSchemasResult } from "./getGlueSchemas";
export const getGlueSchemas: typeof import("./getGlueSchemas").getGlueSchemas = null as any;
export const getGlueSchemasOutput: typeof import("./getGlueSchemas").getGlueSchemasOutput = null as any;
utilities.lazyLoad(exports, ["getGlueSchemas","getGlueSchemasOutput"], () => require("./getGlueSchemas"));

export { GetGlueTriggerArgs, GetGlueTriggerResult, GetGlueTriggerOutputArgs } from "./getGlueTrigger";
export const getGlueTrigger: typeof import("./getGlueTrigger").getGlueTrigger = null as any;
export const getGlueTriggerOutput: typeof import("./getGlueTrigger").getGlueTriggerOutput = null as any;
utilities.lazyLoad(exports, ["getGlueTrigger","getGlueTriggerOutput"], () => require("./getGlueTrigger"));

export { GetGlueTriggersResult } from "./getGlueTriggers";
export const getGlueTriggers: typeof import("./getGlueTriggers").getGlueTriggers = null as any;
export const getGlueTriggersOutput: typeof import("./getGlueTriggers").getGlueTriggersOutput = null as any;
utilities.lazyLoad(exports, ["getGlueTriggers","getGlueTriggersOutput"], () => require("./getGlueTriggers"));

export { GetGrafanaWorkspaceArgs, GetGrafanaWorkspaceResult, GetGrafanaWorkspaceOutputArgs } from "./getGrafanaWorkspace";
export const getGrafanaWorkspace: typeof import("./getGrafanaWorkspace").getGrafanaWorkspace = null as any;
export const getGrafanaWorkspaceOutput: typeof import("./getGrafanaWorkspace").getGrafanaWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getGrafanaWorkspace","getGrafanaWorkspaceOutput"], () => require("./getGrafanaWorkspace"));

export { GetGrafanaWorkspacesResult } from "./getGrafanaWorkspaces";
export const getGrafanaWorkspaces: typeof import("./getGrafanaWorkspaces").getGrafanaWorkspaces = null as any;
export const getGrafanaWorkspacesOutput: typeof import("./getGrafanaWorkspaces").getGrafanaWorkspacesOutput = null as any;
utilities.lazyLoad(exports, ["getGrafanaWorkspaces","getGrafanaWorkspacesOutput"], () => require("./getGrafanaWorkspaces"));

export { GetGreengrassv2ComponentVersionArgs, GetGreengrassv2ComponentVersionResult, GetGreengrassv2ComponentVersionOutputArgs } from "./getGreengrassv2ComponentVersion";
export const getGreengrassv2ComponentVersion: typeof import("./getGreengrassv2ComponentVersion").getGreengrassv2ComponentVersion = null as any;
export const getGreengrassv2ComponentVersionOutput: typeof import("./getGreengrassv2ComponentVersion").getGreengrassv2ComponentVersionOutput = null as any;
utilities.lazyLoad(exports, ["getGreengrassv2ComponentVersion","getGreengrassv2ComponentVersionOutput"], () => require("./getGreengrassv2ComponentVersion"));

export { GetGreengrassv2DeploymentArgs, GetGreengrassv2DeploymentResult, GetGreengrassv2DeploymentOutputArgs } from "./getGreengrassv2Deployment";
export const getGreengrassv2Deployment: typeof import("./getGreengrassv2Deployment").getGreengrassv2Deployment = null as any;
export const getGreengrassv2DeploymentOutput: typeof import("./getGreengrassv2Deployment").getGreengrassv2DeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getGreengrassv2Deployment","getGreengrassv2DeploymentOutput"], () => require("./getGreengrassv2Deployment"));

export { GetGreengrassv2DeploymentsResult } from "./getGreengrassv2Deployments";
export const getGreengrassv2Deployments: typeof import("./getGreengrassv2Deployments").getGreengrassv2Deployments = null as any;
export const getGreengrassv2DeploymentsOutput: typeof import("./getGreengrassv2Deployments").getGreengrassv2DeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getGreengrassv2Deployments","getGreengrassv2DeploymentsOutput"], () => require("./getGreengrassv2Deployments"));

export { GetGroundstationConfigArgs, GetGroundstationConfigResult, GetGroundstationConfigOutputArgs } from "./getGroundstationConfig";
export const getGroundstationConfig: typeof import("./getGroundstationConfig").getGroundstationConfig = null as any;
export const getGroundstationConfigOutput: typeof import("./getGroundstationConfig").getGroundstationConfigOutput = null as any;
utilities.lazyLoad(exports, ["getGroundstationConfig","getGroundstationConfigOutput"], () => require("./getGroundstationConfig"));

export { GetGroundstationConfigsResult } from "./getGroundstationConfigs";
export const getGroundstationConfigs: typeof import("./getGroundstationConfigs").getGroundstationConfigs = null as any;
export const getGroundstationConfigsOutput: typeof import("./getGroundstationConfigs").getGroundstationConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getGroundstationConfigs","getGroundstationConfigsOutput"], () => require("./getGroundstationConfigs"));

export { GetGroundstationDataflowEndpointGroupArgs, GetGroundstationDataflowEndpointGroupResult, GetGroundstationDataflowEndpointGroupOutputArgs } from "./getGroundstationDataflowEndpointGroup";
export const getGroundstationDataflowEndpointGroup: typeof import("./getGroundstationDataflowEndpointGroup").getGroundstationDataflowEndpointGroup = null as any;
export const getGroundstationDataflowEndpointGroupOutput: typeof import("./getGroundstationDataflowEndpointGroup").getGroundstationDataflowEndpointGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroundstationDataflowEndpointGroup","getGroundstationDataflowEndpointGroupOutput"], () => require("./getGroundstationDataflowEndpointGroup"));

export { GetGroundstationDataflowEndpointGroupsResult } from "./getGroundstationDataflowEndpointGroups";
export const getGroundstationDataflowEndpointGroups: typeof import("./getGroundstationDataflowEndpointGroups").getGroundstationDataflowEndpointGroups = null as any;
export const getGroundstationDataflowEndpointGroupsOutput: typeof import("./getGroundstationDataflowEndpointGroups").getGroundstationDataflowEndpointGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroundstationDataflowEndpointGroups","getGroundstationDataflowEndpointGroupsOutput"], () => require("./getGroundstationDataflowEndpointGroups"));

export { GetGroundstationMissionProfileArgs, GetGroundstationMissionProfileResult, GetGroundstationMissionProfileOutputArgs } from "./getGroundstationMissionProfile";
export const getGroundstationMissionProfile: typeof import("./getGroundstationMissionProfile").getGroundstationMissionProfile = null as any;
export const getGroundstationMissionProfileOutput: typeof import("./getGroundstationMissionProfile").getGroundstationMissionProfileOutput = null as any;
utilities.lazyLoad(exports, ["getGroundstationMissionProfile","getGroundstationMissionProfileOutput"], () => require("./getGroundstationMissionProfile"));

export { GetGroundstationMissionProfilesResult } from "./getGroundstationMissionProfiles";
export const getGroundstationMissionProfiles: typeof import("./getGroundstationMissionProfiles").getGroundstationMissionProfiles = null as any;
export const getGroundstationMissionProfilesOutput: typeof import("./getGroundstationMissionProfiles").getGroundstationMissionProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getGroundstationMissionProfiles","getGroundstationMissionProfilesOutput"], () => require("./getGroundstationMissionProfiles"));

export { GetGuarddutyDetectorArgs, GetGuarddutyDetectorResult, GetGuarddutyDetectorOutputArgs } from "./getGuarddutyDetector";
export const getGuarddutyDetector: typeof import("./getGuarddutyDetector").getGuarddutyDetector = null as any;
export const getGuarddutyDetectorOutput: typeof import("./getGuarddutyDetector").getGuarddutyDetectorOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyDetector","getGuarddutyDetectorOutput"], () => require("./getGuarddutyDetector"));

export { GetGuarddutyDetectorsResult } from "./getGuarddutyDetectors";
export const getGuarddutyDetectors: typeof import("./getGuarddutyDetectors").getGuarddutyDetectors = null as any;
export const getGuarddutyDetectorsOutput: typeof import("./getGuarddutyDetectors").getGuarddutyDetectorsOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyDetectors","getGuarddutyDetectorsOutput"], () => require("./getGuarddutyDetectors"));

export { GetGuarddutyFilterArgs, GetGuarddutyFilterResult, GetGuarddutyFilterOutputArgs } from "./getGuarddutyFilter";
export const getGuarddutyFilter: typeof import("./getGuarddutyFilter").getGuarddutyFilter = null as any;
export const getGuarddutyFilterOutput: typeof import("./getGuarddutyFilter").getGuarddutyFilterOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyFilter","getGuarddutyFilterOutput"], () => require("./getGuarddutyFilter"));

export { GetGuarddutyFiltersResult } from "./getGuarddutyFilters";
export const getGuarddutyFilters: typeof import("./getGuarddutyFilters").getGuarddutyFilters = null as any;
export const getGuarddutyFiltersOutput: typeof import("./getGuarddutyFilters").getGuarddutyFiltersOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyFilters","getGuarddutyFiltersOutput"], () => require("./getGuarddutyFilters"));

export { GetGuarddutyIpSetArgs, GetGuarddutyIpSetResult, GetGuarddutyIpSetOutputArgs } from "./getGuarddutyIpSet";
export const getGuarddutyIpSet: typeof import("./getGuarddutyIpSet").getGuarddutyIpSet = null as any;
export const getGuarddutyIpSetOutput: typeof import("./getGuarddutyIpSet").getGuarddutyIpSetOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyIpSet","getGuarddutyIpSetOutput"], () => require("./getGuarddutyIpSet"));

export { GetGuarddutyIpSetsResult } from "./getGuarddutyIpSets";
export const getGuarddutyIpSets: typeof import("./getGuarddutyIpSets").getGuarddutyIpSets = null as any;
export const getGuarddutyIpSetsOutput: typeof import("./getGuarddutyIpSets").getGuarddutyIpSetsOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyIpSets","getGuarddutyIpSetsOutput"], () => require("./getGuarddutyIpSets"));

export { GetGuarddutyMalwareProtectionPlanArgs, GetGuarddutyMalwareProtectionPlanResult, GetGuarddutyMalwareProtectionPlanOutputArgs } from "./getGuarddutyMalwareProtectionPlan";
export const getGuarddutyMalwareProtectionPlan: typeof import("./getGuarddutyMalwareProtectionPlan").getGuarddutyMalwareProtectionPlan = null as any;
export const getGuarddutyMalwareProtectionPlanOutput: typeof import("./getGuarddutyMalwareProtectionPlan").getGuarddutyMalwareProtectionPlanOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyMalwareProtectionPlan","getGuarddutyMalwareProtectionPlanOutput"], () => require("./getGuarddutyMalwareProtectionPlan"));

export { GetGuarddutyMalwareProtectionPlansResult } from "./getGuarddutyMalwareProtectionPlans";
export const getGuarddutyMalwareProtectionPlans: typeof import("./getGuarddutyMalwareProtectionPlans").getGuarddutyMalwareProtectionPlans = null as any;
export const getGuarddutyMalwareProtectionPlansOutput: typeof import("./getGuarddutyMalwareProtectionPlans").getGuarddutyMalwareProtectionPlansOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyMalwareProtectionPlans","getGuarddutyMalwareProtectionPlansOutput"], () => require("./getGuarddutyMalwareProtectionPlans"));

export { GetGuarddutyMasterArgs, GetGuarddutyMasterResult, GetGuarddutyMasterOutputArgs } from "./getGuarddutyMaster";
export const getGuarddutyMaster: typeof import("./getGuarddutyMaster").getGuarddutyMaster = null as any;
export const getGuarddutyMasterOutput: typeof import("./getGuarddutyMaster").getGuarddutyMasterOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyMaster","getGuarddutyMasterOutput"], () => require("./getGuarddutyMaster"));

export { GetGuarddutyMastersResult } from "./getGuarddutyMasters";
export const getGuarddutyMasters: typeof import("./getGuarddutyMasters").getGuarddutyMasters = null as any;
export const getGuarddutyMastersOutput: typeof import("./getGuarddutyMasters").getGuarddutyMastersOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyMasters","getGuarddutyMastersOutput"], () => require("./getGuarddutyMasters"));

export { GetGuarddutyMemberArgs, GetGuarddutyMemberResult, GetGuarddutyMemberOutputArgs } from "./getGuarddutyMember";
export const getGuarddutyMember: typeof import("./getGuarddutyMember").getGuarddutyMember = null as any;
export const getGuarddutyMemberOutput: typeof import("./getGuarddutyMember").getGuarddutyMemberOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyMember","getGuarddutyMemberOutput"], () => require("./getGuarddutyMember"));

export { GetGuarddutyMembersResult } from "./getGuarddutyMembers";
export const getGuarddutyMembers: typeof import("./getGuarddutyMembers").getGuarddutyMembers = null as any;
export const getGuarddutyMembersOutput: typeof import("./getGuarddutyMembers").getGuarddutyMembersOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyMembers","getGuarddutyMembersOutput"], () => require("./getGuarddutyMembers"));

export { GetGuarddutyThreatIntelSetArgs, GetGuarddutyThreatIntelSetResult, GetGuarddutyThreatIntelSetOutputArgs } from "./getGuarddutyThreatIntelSet";
export const getGuarddutyThreatIntelSet: typeof import("./getGuarddutyThreatIntelSet").getGuarddutyThreatIntelSet = null as any;
export const getGuarddutyThreatIntelSetOutput: typeof import("./getGuarddutyThreatIntelSet").getGuarddutyThreatIntelSetOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyThreatIntelSet","getGuarddutyThreatIntelSetOutput"], () => require("./getGuarddutyThreatIntelSet"));

export { GetGuarddutyThreatIntelSetsResult } from "./getGuarddutyThreatIntelSets";
export const getGuarddutyThreatIntelSets: typeof import("./getGuarddutyThreatIntelSets").getGuarddutyThreatIntelSets = null as any;
export const getGuarddutyThreatIntelSetsOutput: typeof import("./getGuarddutyThreatIntelSets").getGuarddutyThreatIntelSetsOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyThreatIntelSets","getGuarddutyThreatIntelSetsOutput"], () => require("./getGuarddutyThreatIntelSets"));

export { GetHealthimagingDatastoreArgs, GetHealthimagingDatastoreResult, GetHealthimagingDatastoreOutputArgs } from "./getHealthimagingDatastore";
export const getHealthimagingDatastore: typeof import("./getHealthimagingDatastore").getHealthimagingDatastore = null as any;
export const getHealthimagingDatastoreOutput: typeof import("./getHealthimagingDatastore").getHealthimagingDatastoreOutput = null as any;
utilities.lazyLoad(exports, ["getHealthimagingDatastore","getHealthimagingDatastoreOutput"], () => require("./getHealthimagingDatastore"));

export { GetHealthimagingDatastoresResult } from "./getHealthimagingDatastores";
export const getHealthimagingDatastores: typeof import("./getHealthimagingDatastores").getHealthimagingDatastores = null as any;
export const getHealthimagingDatastoresOutput: typeof import("./getHealthimagingDatastores").getHealthimagingDatastoresOutput = null as any;
utilities.lazyLoad(exports, ["getHealthimagingDatastores","getHealthimagingDatastoresOutput"], () => require("./getHealthimagingDatastores"));

export { GetHealthlakeFhirDatastoreArgs, GetHealthlakeFhirDatastoreResult, GetHealthlakeFhirDatastoreOutputArgs } from "./getHealthlakeFhirDatastore";
export const getHealthlakeFhirDatastore: typeof import("./getHealthlakeFhirDatastore").getHealthlakeFhirDatastore = null as any;
export const getHealthlakeFhirDatastoreOutput: typeof import("./getHealthlakeFhirDatastore").getHealthlakeFhirDatastoreOutput = null as any;
utilities.lazyLoad(exports, ["getHealthlakeFhirDatastore","getHealthlakeFhirDatastoreOutput"], () => require("./getHealthlakeFhirDatastore"));

export { GetHealthlakeFhirDatastoresResult } from "./getHealthlakeFhirDatastores";
export const getHealthlakeFhirDatastores: typeof import("./getHealthlakeFhirDatastores").getHealthlakeFhirDatastores = null as any;
export const getHealthlakeFhirDatastoresOutput: typeof import("./getHealthlakeFhirDatastores").getHealthlakeFhirDatastoresOutput = null as any;
utilities.lazyLoad(exports, ["getHealthlakeFhirDatastores","getHealthlakeFhirDatastoresOutput"], () => require("./getHealthlakeFhirDatastores"));

export { GetIamGroupArgs, GetIamGroupResult, GetIamGroupOutputArgs } from "./getIamGroup";
export const getIamGroup: typeof import("./getIamGroup").getIamGroup = null as any;
export const getIamGroupOutput: typeof import("./getIamGroup").getIamGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroup","getIamGroupOutput"], () => require("./getIamGroup"));

export { GetIamGroupPolicyArgs, GetIamGroupPolicyResult, GetIamGroupPolicyOutputArgs } from "./getIamGroupPolicy";
export const getIamGroupPolicy: typeof import("./getIamGroupPolicy").getIamGroupPolicy = null as any;
export const getIamGroupPolicyOutput: typeof import("./getIamGroupPolicy").getIamGroupPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroupPolicy","getIamGroupPolicyOutput"], () => require("./getIamGroupPolicy"));

export { GetIamGroupsResult } from "./getIamGroups";
export const getIamGroups: typeof import("./getIamGroups").getIamGroups = null as any;
export const getIamGroupsOutput: typeof import("./getIamGroups").getIamGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroups","getIamGroupsOutput"], () => require("./getIamGroups"));

export { GetIamInstanceProfileArgs, GetIamInstanceProfileResult, GetIamInstanceProfileOutputArgs } from "./getIamInstanceProfile";
export const getIamInstanceProfile: typeof import("./getIamInstanceProfile").getIamInstanceProfile = null as any;
export const getIamInstanceProfileOutput: typeof import("./getIamInstanceProfile").getIamInstanceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getIamInstanceProfile","getIamInstanceProfileOutput"], () => require("./getIamInstanceProfile"));

export { GetIamInstanceProfilesResult } from "./getIamInstanceProfiles";
export const getIamInstanceProfiles: typeof import("./getIamInstanceProfiles").getIamInstanceProfiles = null as any;
export const getIamInstanceProfilesOutput: typeof import("./getIamInstanceProfiles").getIamInstanceProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getIamInstanceProfiles","getIamInstanceProfilesOutput"], () => require("./getIamInstanceProfiles"));

export { GetIamManagedPoliciesResult } from "./getIamManagedPolicies";
export const getIamManagedPolicies: typeof import("./getIamManagedPolicies").getIamManagedPolicies = null as any;
export const getIamManagedPoliciesOutput: typeof import("./getIamManagedPolicies").getIamManagedPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIamManagedPolicies","getIamManagedPoliciesOutput"], () => require("./getIamManagedPolicies"));

export { GetIamManagedPolicyArgs, GetIamManagedPolicyResult, GetIamManagedPolicyOutputArgs } from "./getIamManagedPolicy";
export const getIamManagedPolicy: typeof import("./getIamManagedPolicy").getIamManagedPolicy = null as any;
export const getIamManagedPolicyOutput: typeof import("./getIamManagedPolicy").getIamManagedPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamManagedPolicy","getIamManagedPolicyOutput"], () => require("./getIamManagedPolicy"));

export { GetIamOidcProviderArgs, GetIamOidcProviderResult, GetIamOidcProviderOutputArgs } from "./getIamOidcProvider";
export const getIamOidcProvider: typeof import("./getIamOidcProvider").getIamOidcProvider = null as any;
export const getIamOidcProviderOutput: typeof import("./getIamOidcProvider").getIamOidcProviderOutput = null as any;
utilities.lazyLoad(exports, ["getIamOidcProvider","getIamOidcProviderOutput"], () => require("./getIamOidcProvider"));

export { GetIamOidcProvidersResult } from "./getIamOidcProviders";
export const getIamOidcProviders: typeof import("./getIamOidcProviders").getIamOidcProviders = null as any;
export const getIamOidcProvidersOutput: typeof import("./getIamOidcProviders").getIamOidcProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getIamOidcProviders","getIamOidcProvidersOutput"], () => require("./getIamOidcProviders"));

export { GetIamRoleArgs, GetIamRoleResult, GetIamRoleOutputArgs } from "./getIamRole";
export const getIamRole: typeof import("./getIamRole").getIamRole = null as any;
export const getIamRoleOutput: typeof import("./getIamRole").getIamRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIamRole","getIamRoleOutput"], () => require("./getIamRole"));

export { GetIamRolePolicyArgs, GetIamRolePolicyResult, GetIamRolePolicyOutputArgs } from "./getIamRolePolicy";
export const getIamRolePolicy: typeof import("./getIamRolePolicy").getIamRolePolicy = null as any;
export const getIamRolePolicyOutput: typeof import("./getIamRolePolicy").getIamRolePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamRolePolicy","getIamRolePolicyOutput"], () => require("./getIamRolePolicy"));

export { GetIamRolesResult } from "./getIamRoles";
export const getIamRoles: typeof import("./getIamRoles").getIamRoles = null as any;
export const getIamRolesOutput: typeof import("./getIamRoles").getIamRolesOutput = null as any;
utilities.lazyLoad(exports, ["getIamRoles","getIamRolesOutput"], () => require("./getIamRoles"));

export { GetIamSamlProviderArgs, GetIamSamlProviderResult, GetIamSamlProviderOutputArgs } from "./getIamSamlProvider";
export const getIamSamlProvider: typeof import("./getIamSamlProvider").getIamSamlProvider = null as any;
export const getIamSamlProviderOutput: typeof import("./getIamSamlProvider").getIamSamlProviderOutput = null as any;
utilities.lazyLoad(exports, ["getIamSamlProvider","getIamSamlProviderOutput"], () => require("./getIamSamlProvider"));

export { GetIamSamlProvidersResult } from "./getIamSamlProviders";
export const getIamSamlProviders: typeof import("./getIamSamlProviders").getIamSamlProviders = null as any;
export const getIamSamlProvidersOutput: typeof import("./getIamSamlProviders").getIamSamlProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getIamSamlProviders","getIamSamlProvidersOutput"], () => require("./getIamSamlProviders"));

export { GetIamServerCertificateArgs, GetIamServerCertificateResult, GetIamServerCertificateOutputArgs } from "./getIamServerCertificate";
export const getIamServerCertificate: typeof import("./getIamServerCertificate").getIamServerCertificate = null as any;
export const getIamServerCertificateOutput: typeof import("./getIamServerCertificate").getIamServerCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getIamServerCertificate","getIamServerCertificateOutput"], () => require("./getIamServerCertificate"));

export { GetIamServerCertificatesResult } from "./getIamServerCertificates";
export const getIamServerCertificates: typeof import("./getIamServerCertificates").getIamServerCertificates = null as any;
export const getIamServerCertificatesOutput: typeof import("./getIamServerCertificates").getIamServerCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getIamServerCertificates","getIamServerCertificatesOutput"], () => require("./getIamServerCertificates"));

export { GetIamServiceLinkedRoleArgs, GetIamServiceLinkedRoleResult, GetIamServiceLinkedRoleOutputArgs } from "./getIamServiceLinkedRole";
export const getIamServiceLinkedRole: typeof import("./getIamServiceLinkedRole").getIamServiceLinkedRole = null as any;
export const getIamServiceLinkedRoleOutput: typeof import("./getIamServiceLinkedRole").getIamServiceLinkedRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIamServiceLinkedRole","getIamServiceLinkedRoleOutput"], () => require("./getIamServiceLinkedRole"));

export { GetIamUserArgs, GetIamUserResult, GetIamUserOutputArgs } from "./getIamUser";
export const getIamUser: typeof import("./getIamUser").getIamUser = null as any;
export const getIamUserOutput: typeof import("./getIamUser").getIamUserOutput = null as any;
utilities.lazyLoad(exports, ["getIamUser","getIamUserOutput"], () => require("./getIamUser"));

export { GetIamUserPolicyArgs, GetIamUserPolicyResult, GetIamUserPolicyOutputArgs } from "./getIamUserPolicy";
export const getIamUserPolicy: typeof import("./getIamUserPolicy").getIamUserPolicy = null as any;
export const getIamUserPolicyOutput: typeof import("./getIamUserPolicy").getIamUserPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamUserPolicy","getIamUserPolicyOutput"], () => require("./getIamUserPolicy"));

export { GetIamUsersResult } from "./getIamUsers";
export const getIamUsers: typeof import("./getIamUsers").getIamUsers = null as any;
export const getIamUsersOutput: typeof import("./getIamUsers").getIamUsersOutput = null as any;
utilities.lazyLoad(exports, ["getIamUsers","getIamUsersOutput"], () => require("./getIamUsers"));

export { GetIamVirtualMfaDeviceArgs, GetIamVirtualMfaDeviceResult, GetIamVirtualMfaDeviceOutputArgs } from "./getIamVirtualMfaDevice";
export const getIamVirtualMfaDevice: typeof import("./getIamVirtualMfaDevice").getIamVirtualMfaDevice = null as any;
export const getIamVirtualMfaDeviceOutput: typeof import("./getIamVirtualMfaDevice").getIamVirtualMfaDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getIamVirtualMfaDevice","getIamVirtualMfaDeviceOutput"], () => require("./getIamVirtualMfaDevice"));

export { GetIamVirtualMfaDevicesResult } from "./getIamVirtualMfaDevices";
export const getIamVirtualMfaDevices: typeof import("./getIamVirtualMfaDevices").getIamVirtualMfaDevices = null as any;
export const getIamVirtualMfaDevicesOutput: typeof import("./getIamVirtualMfaDevices").getIamVirtualMfaDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getIamVirtualMfaDevices","getIamVirtualMfaDevicesOutput"], () => require("./getIamVirtualMfaDevices"));

export { GetIdentitystoreGroupArgs, GetIdentitystoreGroupResult, GetIdentitystoreGroupOutputArgs } from "./getIdentitystoreGroup";
export const getIdentitystoreGroup: typeof import("./getIdentitystoreGroup").getIdentitystoreGroup = null as any;
export const getIdentitystoreGroupOutput: typeof import("./getIdentitystoreGroup").getIdentitystoreGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIdentitystoreGroup","getIdentitystoreGroupOutput"], () => require("./getIdentitystoreGroup"));

export { GetIdentitystoreGroupMembershipArgs, GetIdentitystoreGroupMembershipResult, GetIdentitystoreGroupMembershipOutputArgs } from "./getIdentitystoreGroupMembership";
export const getIdentitystoreGroupMembership: typeof import("./getIdentitystoreGroupMembership").getIdentitystoreGroupMembership = null as any;
export const getIdentitystoreGroupMembershipOutput: typeof import("./getIdentitystoreGroupMembership").getIdentitystoreGroupMembershipOutput = null as any;
utilities.lazyLoad(exports, ["getIdentitystoreGroupMembership","getIdentitystoreGroupMembershipOutput"], () => require("./getIdentitystoreGroupMembership"));

export { GetImagebuilderComponentArgs, GetImagebuilderComponentResult, GetImagebuilderComponentOutputArgs } from "./getImagebuilderComponent";
export const getImagebuilderComponent: typeof import("./getImagebuilderComponent").getImagebuilderComponent = null as any;
export const getImagebuilderComponentOutput: typeof import("./getImagebuilderComponent").getImagebuilderComponentOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderComponent","getImagebuilderComponentOutput"], () => require("./getImagebuilderComponent"));

export { GetImagebuilderContainerRecipeArgs, GetImagebuilderContainerRecipeResult, GetImagebuilderContainerRecipeOutputArgs } from "./getImagebuilderContainerRecipe";
export const getImagebuilderContainerRecipe: typeof import("./getImagebuilderContainerRecipe").getImagebuilderContainerRecipe = null as any;
export const getImagebuilderContainerRecipeOutput: typeof import("./getImagebuilderContainerRecipe").getImagebuilderContainerRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderContainerRecipe","getImagebuilderContainerRecipeOutput"], () => require("./getImagebuilderContainerRecipe"));

export { GetImagebuilderContainerRecipesResult } from "./getImagebuilderContainerRecipes";
export const getImagebuilderContainerRecipes: typeof import("./getImagebuilderContainerRecipes").getImagebuilderContainerRecipes = null as any;
export const getImagebuilderContainerRecipesOutput: typeof import("./getImagebuilderContainerRecipes").getImagebuilderContainerRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderContainerRecipes","getImagebuilderContainerRecipesOutput"], () => require("./getImagebuilderContainerRecipes"));

export { GetImagebuilderDistributionConfigurationArgs, GetImagebuilderDistributionConfigurationResult, GetImagebuilderDistributionConfigurationOutputArgs } from "./getImagebuilderDistributionConfiguration";
export const getImagebuilderDistributionConfiguration: typeof import("./getImagebuilderDistributionConfiguration").getImagebuilderDistributionConfiguration = null as any;
export const getImagebuilderDistributionConfigurationOutput: typeof import("./getImagebuilderDistributionConfiguration").getImagebuilderDistributionConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderDistributionConfiguration","getImagebuilderDistributionConfigurationOutput"], () => require("./getImagebuilderDistributionConfiguration"));

export { GetImagebuilderDistributionConfigurationsResult } from "./getImagebuilderDistributionConfigurations";
export const getImagebuilderDistributionConfigurations: typeof import("./getImagebuilderDistributionConfigurations").getImagebuilderDistributionConfigurations = null as any;
export const getImagebuilderDistributionConfigurationsOutput: typeof import("./getImagebuilderDistributionConfigurations").getImagebuilderDistributionConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderDistributionConfigurations","getImagebuilderDistributionConfigurationsOutput"], () => require("./getImagebuilderDistributionConfigurations"));

export { GetImagebuilderImageArgs, GetImagebuilderImageResult, GetImagebuilderImageOutputArgs } from "./getImagebuilderImage";
export const getImagebuilderImage: typeof import("./getImagebuilderImage").getImagebuilderImage = null as any;
export const getImagebuilderImageOutput: typeof import("./getImagebuilderImage").getImagebuilderImageOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderImage","getImagebuilderImageOutput"], () => require("./getImagebuilderImage"));

export { GetImagebuilderImagePipelineArgs, GetImagebuilderImagePipelineResult, GetImagebuilderImagePipelineOutputArgs } from "./getImagebuilderImagePipeline";
export const getImagebuilderImagePipeline: typeof import("./getImagebuilderImagePipeline").getImagebuilderImagePipeline = null as any;
export const getImagebuilderImagePipelineOutput: typeof import("./getImagebuilderImagePipeline").getImagebuilderImagePipelineOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderImagePipeline","getImagebuilderImagePipelineOutput"], () => require("./getImagebuilderImagePipeline"));

export { GetImagebuilderImagePipelinesResult } from "./getImagebuilderImagePipelines";
export const getImagebuilderImagePipelines: typeof import("./getImagebuilderImagePipelines").getImagebuilderImagePipelines = null as any;
export const getImagebuilderImagePipelinesOutput: typeof import("./getImagebuilderImagePipelines").getImagebuilderImagePipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderImagePipelines","getImagebuilderImagePipelinesOutput"], () => require("./getImagebuilderImagePipelines"));

export { GetImagebuilderImageRecipeArgs, GetImagebuilderImageRecipeResult, GetImagebuilderImageRecipeOutputArgs } from "./getImagebuilderImageRecipe";
export const getImagebuilderImageRecipe: typeof import("./getImagebuilderImageRecipe").getImagebuilderImageRecipe = null as any;
export const getImagebuilderImageRecipeOutput: typeof import("./getImagebuilderImageRecipe").getImagebuilderImageRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderImageRecipe","getImagebuilderImageRecipeOutput"], () => require("./getImagebuilderImageRecipe"));

export { GetImagebuilderImageRecipesResult } from "./getImagebuilderImageRecipes";
export const getImagebuilderImageRecipes: typeof import("./getImagebuilderImageRecipes").getImagebuilderImageRecipes = null as any;
export const getImagebuilderImageRecipesOutput: typeof import("./getImagebuilderImageRecipes").getImagebuilderImageRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderImageRecipes","getImagebuilderImageRecipesOutput"], () => require("./getImagebuilderImageRecipes"));

export { GetImagebuilderInfrastructureConfigurationArgs, GetImagebuilderInfrastructureConfigurationResult, GetImagebuilderInfrastructureConfigurationOutputArgs } from "./getImagebuilderInfrastructureConfiguration";
export const getImagebuilderInfrastructureConfiguration: typeof import("./getImagebuilderInfrastructureConfiguration").getImagebuilderInfrastructureConfiguration = null as any;
export const getImagebuilderInfrastructureConfigurationOutput: typeof import("./getImagebuilderInfrastructureConfiguration").getImagebuilderInfrastructureConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderInfrastructureConfiguration","getImagebuilderInfrastructureConfigurationOutput"], () => require("./getImagebuilderInfrastructureConfiguration"));

export { GetImagebuilderInfrastructureConfigurationsResult } from "./getImagebuilderInfrastructureConfigurations";
export const getImagebuilderInfrastructureConfigurations: typeof import("./getImagebuilderInfrastructureConfigurations").getImagebuilderInfrastructureConfigurations = null as any;
export const getImagebuilderInfrastructureConfigurationsOutput: typeof import("./getImagebuilderInfrastructureConfigurations").getImagebuilderInfrastructureConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderInfrastructureConfigurations","getImagebuilderInfrastructureConfigurationsOutput"], () => require("./getImagebuilderInfrastructureConfigurations"));

export { GetImagebuilderLifecyclePoliciesResult } from "./getImagebuilderLifecyclePolicies";
export const getImagebuilderLifecyclePolicies: typeof import("./getImagebuilderLifecyclePolicies").getImagebuilderLifecyclePolicies = null as any;
export const getImagebuilderLifecyclePoliciesOutput: typeof import("./getImagebuilderLifecyclePolicies").getImagebuilderLifecyclePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderLifecyclePolicies","getImagebuilderLifecyclePoliciesOutput"], () => require("./getImagebuilderLifecyclePolicies"));

export { GetImagebuilderLifecyclePolicyArgs, GetImagebuilderLifecyclePolicyResult, GetImagebuilderLifecyclePolicyOutputArgs } from "./getImagebuilderLifecyclePolicy";
export const getImagebuilderLifecyclePolicy: typeof import("./getImagebuilderLifecyclePolicy").getImagebuilderLifecyclePolicy = null as any;
export const getImagebuilderLifecyclePolicyOutput: typeof import("./getImagebuilderLifecyclePolicy").getImagebuilderLifecyclePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderLifecyclePolicy","getImagebuilderLifecyclePolicyOutput"], () => require("./getImagebuilderLifecyclePolicy"));

export { GetImagebuilderWorkflowArgs, GetImagebuilderWorkflowResult, GetImagebuilderWorkflowOutputArgs } from "./getImagebuilderWorkflow";
export const getImagebuilderWorkflow: typeof import("./getImagebuilderWorkflow").getImagebuilderWorkflow = null as any;
export const getImagebuilderWorkflowOutput: typeof import("./getImagebuilderWorkflow").getImagebuilderWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderWorkflow","getImagebuilderWorkflowOutput"], () => require("./getImagebuilderWorkflow"));

export { GetInspectorAssessmentTargetArgs, GetInspectorAssessmentTargetResult, GetInspectorAssessmentTargetOutputArgs } from "./getInspectorAssessmentTarget";
export const getInspectorAssessmentTarget: typeof import("./getInspectorAssessmentTarget").getInspectorAssessmentTarget = null as any;
export const getInspectorAssessmentTargetOutput: typeof import("./getInspectorAssessmentTarget").getInspectorAssessmentTargetOutput = null as any;
utilities.lazyLoad(exports, ["getInspectorAssessmentTarget","getInspectorAssessmentTargetOutput"], () => require("./getInspectorAssessmentTarget"));

export { GetInspectorAssessmentTargetsResult } from "./getInspectorAssessmentTargets";
export const getInspectorAssessmentTargets: typeof import("./getInspectorAssessmentTargets").getInspectorAssessmentTargets = null as any;
export const getInspectorAssessmentTargetsOutput: typeof import("./getInspectorAssessmentTargets").getInspectorAssessmentTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getInspectorAssessmentTargets","getInspectorAssessmentTargetsOutput"], () => require("./getInspectorAssessmentTargets"));

export { GetInspectorAssessmentTemplateArgs, GetInspectorAssessmentTemplateResult, GetInspectorAssessmentTemplateOutputArgs } from "./getInspectorAssessmentTemplate";
export const getInspectorAssessmentTemplate: typeof import("./getInspectorAssessmentTemplate").getInspectorAssessmentTemplate = null as any;
export const getInspectorAssessmentTemplateOutput: typeof import("./getInspectorAssessmentTemplate").getInspectorAssessmentTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getInspectorAssessmentTemplate","getInspectorAssessmentTemplateOutput"], () => require("./getInspectorAssessmentTemplate"));

export { GetInspectorAssessmentTemplatesResult } from "./getInspectorAssessmentTemplates";
export const getInspectorAssessmentTemplates: typeof import("./getInspectorAssessmentTemplates").getInspectorAssessmentTemplates = null as any;
export const getInspectorAssessmentTemplatesOutput: typeof import("./getInspectorAssessmentTemplates").getInspectorAssessmentTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getInspectorAssessmentTemplates","getInspectorAssessmentTemplatesOutput"], () => require("./getInspectorAssessmentTemplates"));

export { GetInspectorResourceGroupArgs, GetInspectorResourceGroupResult, GetInspectorResourceGroupOutputArgs } from "./getInspectorResourceGroup";
export const getInspectorResourceGroup: typeof import("./getInspectorResourceGroup").getInspectorResourceGroup = null as any;
export const getInspectorResourceGroupOutput: typeof import("./getInspectorResourceGroup").getInspectorResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getInspectorResourceGroup","getInspectorResourceGroupOutput"], () => require("./getInspectorResourceGroup"));

export { GetInspectorv2CisScanConfigurationArgs, GetInspectorv2CisScanConfigurationResult, GetInspectorv2CisScanConfigurationOutputArgs } from "./getInspectorv2CisScanConfiguration";
export const getInspectorv2CisScanConfiguration: typeof import("./getInspectorv2CisScanConfiguration").getInspectorv2CisScanConfiguration = null as any;
export const getInspectorv2CisScanConfigurationOutput: typeof import("./getInspectorv2CisScanConfiguration").getInspectorv2CisScanConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getInspectorv2CisScanConfiguration","getInspectorv2CisScanConfigurationOutput"], () => require("./getInspectorv2CisScanConfiguration"));

export { GetInspectorv2CisScanConfigurationsResult } from "./getInspectorv2CisScanConfigurations";
export const getInspectorv2CisScanConfigurations: typeof import("./getInspectorv2CisScanConfigurations").getInspectorv2CisScanConfigurations = null as any;
export const getInspectorv2CisScanConfigurationsOutput: typeof import("./getInspectorv2CisScanConfigurations").getInspectorv2CisScanConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getInspectorv2CisScanConfigurations","getInspectorv2CisScanConfigurationsOutput"], () => require("./getInspectorv2CisScanConfigurations"));

export { GetInspectorv2FilterArgs, GetInspectorv2FilterResult, GetInspectorv2FilterOutputArgs } from "./getInspectorv2Filter";
export const getInspectorv2Filter: typeof import("./getInspectorv2Filter").getInspectorv2Filter = null as any;
export const getInspectorv2FilterOutput: typeof import("./getInspectorv2Filter").getInspectorv2FilterOutput = null as any;
utilities.lazyLoad(exports, ["getInspectorv2Filter","getInspectorv2FilterOutput"], () => require("./getInspectorv2Filter"));

export { GetInspectorv2FiltersResult } from "./getInspectorv2Filters";
export const getInspectorv2Filters: typeof import("./getInspectorv2Filters").getInspectorv2Filters = null as any;
export const getInspectorv2FiltersOutput: typeof import("./getInspectorv2Filters").getInspectorv2FiltersOutput = null as any;
utilities.lazyLoad(exports, ["getInspectorv2Filters","getInspectorv2FiltersOutput"], () => require("./getInspectorv2Filters"));

export { GetInternetmonitorMonitorArgs, GetInternetmonitorMonitorResult, GetInternetmonitorMonitorOutputArgs } from "./getInternetmonitorMonitor";
export const getInternetmonitorMonitor: typeof import("./getInternetmonitorMonitor").getInternetmonitorMonitor = null as any;
export const getInternetmonitorMonitorOutput: typeof import("./getInternetmonitorMonitor").getInternetmonitorMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getInternetmonitorMonitor","getInternetmonitorMonitorOutput"], () => require("./getInternetmonitorMonitor"));

export { GetInternetmonitorMonitorsResult } from "./getInternetmonitorMonitors";
export const getInternetmonitorMonitors: typeof import("./getInternetmonitorMonitors").getInternetmonitorMonitors = null as any;
export const getInternetmonitorMonitorsOutput: typeof import("./getInternetmonitorMonitors").getInternetmonitorMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getInternetmonitorMonitors","getInternetmonitorMonitorsOutput"], () => require("./getInternetmonitorMonitors"));

export { GetIotAccountAuditConfigurationArgs, GetIotAccountAuditConfigurationResult, GetIotAccountAuditConfigurationOutputArgs } from "./getIotAccountAuditConfiguration";
export const getIotAccountAuditConfiguration: typeof import("./getIotAccountAuditConfiguration").getIotAccountAuditConfiguration = null as any;
export const getIotAccountAuditConfigurationOutput: typeof import("./getIotAccountAuditConfiguration").getIotAccountAuditConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getIotAccountAuditConfiguration","getIotAccountAuditConfigurationOutput"], () => require("./getIotAccountAuditConfiguration"));

export { GetIotAccountAuditConfigurationsResult } from "./getIotAccountAuditConfigurations";
export const getIotAccountAuditConfigurations: typeof import("./getIotAccountAuditConfigurations").getIotAccountAuditConfigurations = null as any;
export const getIotAccountAuditConfigurationsOutput: typeof import("./getIotAccountAuditConfigurations").getIotAccountAuditConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getIotAccountAuditConfigurations","getIotAccountAuditConfigurationsOutput"], () => require("./getIotAccountAuditConfigurations"));

export { GetIotAuthorizerArgs, GetIotAuthorizerResult, GetIotAuthorizerOutputArgs } from "./getIotAuthorizer";
export const getIotAuthorizer: typeof import("./getIotAuthorizer").getIotAuthorizer = null as any;
export const getIotAuthorizerOutput: typeof import("./getIotAuthorizer").getIotAuthorizerOutput = null as any;
utilities.lazyLoad(exports, ["getIotAuthorizer","getIotAuthorizerOutput"], () => require("./getIotAuthorizer"));

export { GetIotAuthorizersResult } from "./getIotAuthorizers";
export const getIotAuthorizers: typeof import("./getIotAuthorizers").getIotAuthorizers = null as any;
export const getIotAuthorizersOutput: typeof import("./getIotAuthorizers").getIotAuthorizersOutput = null as any;
utilities.lazyLoad(exports, ["getIotAuthorizers","getIotAuthorizersOutput"], () => require("./getIotAuthorizers"));

export { GetIotBillingGroupArgs, GetIotBillingGroupResult, GetIotBillingGroupOutputArgs } from "./getIotBillingGroup";
export const getIotBillingGroup: typeof import("./getIotBillingGroup").getIotBillingGroup = null as any;
export const getIotBillingGroupOutput: typeof import("./getIotBillingGroup").getIotBillingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIotBillingGroup","getIotBillingGroupOutput"], () => require("./getIotBillingGroup"));

export { GetIotBillingGroupsResult } from "./getIotBillingGroups";
export const getIotBillingGroups: typeof import("./getIotBillingGroups").getIotBillingGroups = null as any;
export const getIotBillingGroupsOutput: typeof import("./getIotBillingGroups").getIotBillingGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIotBillingGroups","getIotBillingGroupsOutput"], () => require("./getIotBillingGroups"));

export { GetIotCaCertificateArgs, GetIotCaCertificateResult, GetIotCaCertificateOutputArgs } from "./getIotCaCertificate";
export const getIotCaCertificate: typeof import("./getIotCaCertificate").getIotCaCertificate = null as any;
export const getIotCaCertificateOutput: typeof import("./getIotCaCertificate").getIotCaCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getIotCaCertificate","getIotCaCertificateOutput"], () => require("./getIotCaCertificate"));

export { GetIotCaCertificatesResult } from "./getIotCaCertificates";
export const getIotCaCertificates: typeof import("./getIotCaCertificates").getIotCaCertificates = null as any;
export const getIotCaCertificatesOutput: typeof import("./getIotCaCertificates").getIotCaCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getIotCaCertificates","getIotCaCertificatesOutput"], () => require("./getIotCaCertificates"));

export { GetIotCertificateArgs, GetIotCertificateResult, GetIotCertificateOutputArgs } from "./getIotCertificate";
export const getIotCertificate: typeof import("./getIotCertificate").getIotCertificate = null as any;
export const getIotCertificateOutput: typeof import("./getIotCertificate").getIotCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getIotCertificate","getIotCertificateOutput"], () => require("./getIotCertificate"));

export { GetIotCertificateProviderArgs, GetIotCertificateProviderResult, GetIotCertificateProviderOutputArgs } from "./getIotCertificateProvider";
export const getIotCertificateProvider: typeof import("./getIotCertificateProvider").getIotCertificateProvider = null as any;
export const getIotCertificateProviderOutput: typeof import("./getIotCertificateProvider").getIotCertificateProviderOutput = null as any;
utilities.lazyLoad(exports, ["getIotCertificateProvider","getIotCertificateProviderOutput"], () => require("./getIotCertificateProvider"));

export { GetIotCertificateProvidersResult } from "./getIotCertificateProviders";
export const getIotCertificateProviders: typeof import("./getIotCertificateProviders").getIotCertificateProviders = null as any;
export const getIotCertificateProvidersOutput: typeof import("./getIotCertificateProviders").getIotCertificateProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getIotCertificateProviders","getIotCertificateProvidersOutput"], () => require("./getIotCertificateProviders"));

export { GetIotCertificatesResult } from "./getIotCertificates";
export const getIotCertificates: typeof import("./getIotCertificates").getIotCertificates = null as any;
export const getIotCertificatesOutput: typeof import("./getIotCertificates").getIotCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getIotCertificates","getIotCertificatesOutput"], () => require("./getIotCertificates"));

export { GetIotCustomMetricArgs, GetIotCustomMetricResult, GetIotCustomMetricOutputArgs } from "./getIotCustomMetric";
export const getIotCustomMetric: typeof import("./getIotCustomMetric").getIotCustomMetric = null as any;
export const getIotCustomMetricOutput: typeof import("./getIotCustomMetric").getIotCustomMetricOutput = null as any;
utilities.lazyLoad(exports, ["getIotCustomMetric","getIotCustomMetricOutput"], () => require("./getIotCustomMetric"));

export { GetIotCustomMetricsResult } from "./getIotCustomMetrics";
export const getIotCustomMetrics: typeof import("./getIotCustomMetrics").getIotCustomMetrics = null as any;
export const getIotCustomMetricsOutput: typeof import("./getIotCustomMetrics").getIotCustomMetricsOutput = null as any;
utilities.lazyLoad(exports, ["getIotCustomMetrics","getIotCustomMetricsOutput"], () => require("./getIotCustomMetrics"));

export { GetIotDimensionArgs, GetIotDimensionResult, GetIotDimensionOutputArgs } from "./getIotDimension";
export const getIotDimension: typeof import("./getIotDimension").getIotDimension = null as any;
export const getIotDimensionOutput: typeof import("./getIotDimension").getIotDimensionOutput = null as any;
utilities.lazyLoad(exports, ["getIotDimension","getIotDimensionOutput"], () => require("./getIotDimension"));

export { GetIotDimensionsResult } from "./getIotDimensions";
export const getIotDimensions: typeof import("./getIotDimensions").getIotDimensions = null as any;
export const getIotDimensionsOutput: typeof import("./getIotDimensions").getIotDimensionsOutput = null as any;
utilities.lazyLoad(exports, ["getIotDimensions","getIotDimensionsOutput"], () => require("./getIotDimensions"));

export { GetIotDomainConfigurationArgs, GetIotDomainConfigurationResult, GetIotDomainConfigurationOutputArgs } from "./getIotDomainConfiguration";
export const getIotDomainConfiguration: typeof import("./getIotDomainConfiguration").getIotDomainConfiguration = null as any;
export const getIotDomainConfigurationOutput: typeof import("./getIotDomainConfiguration").getIotDomainConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getIotDomainConfiguration","getIotDomainConfigurationOutput"], () => require("./getIotDomainConfiguration"));

export { GetIotDomainConfigurationsResult } from "./getIotDomainConfigurations";
export const getIotDomainConfigurations: typeof import("./getIotDomainConfigurations").getIotDomainConfigurations = null as any;
export const getIotDomainConfigurationsOutput: typeof import("./getIotDomainConfigurations").getIotDomainConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getIotDomainConfigurations","getIotDomainConfigurationsOutput"], () => require("./getIotDomainConfigurations"));

export { GetIotFleetMetricArgs, GetIotFleetMetricResult, GetIotFleetMetricOutputArgs } from "./getIotFleetMetric";
export const getIotFleetMetric: typeof import("./getIotFleetMetric").getIotFleetMetric = null as any;
export const getIotFleetMetricOutput: typeof import("./getIotFleetMetric").getIotFleetMetricOutput = null as any;
utilities.lazyLoad(exports, ["getIotFleetMetric","getIotFleetMetricOutput"], () => require("./getIotFleetMetric"));

export { GetIotFleetMetricsResult } from "./getIotFleetMetrics";
export const getIotFleetMetrics: typeof import("./getIotFleetMetrics").getIotFleetMetrics = null as any;
export const getIotFleetMetricsOutput: typeof import("./getIotFleetMetrics").getIotFleetMetricsOutput = null as any;
utilities.lazyLoad(exports, ["getIotFleetMetrics","getIotFleetMetricsOutput"], () => require("./getIotFleetMetrics"));

export { GetIotJobTemplateArgs, GetIotJobTemplateResult, GetIotJobTemplateOutputArgs } from "./getIotJobTemplate";
export const getIotJobTemplate: typeof import("./getIotJobTemplate").getIotJobTemplate = null as any;
export const getIotJobTemplateOutput: typeof import("./getIotJobTemplate").getIotJobTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getIotJobTemplate","getIotJobTemplateOutput"], () => require("./getIotJobTemplate"));

export { GetIotJobTemplatesResult } from "./getIotJobTemplates";
export const getIotJobTemplates: typeof import("./getIotJobTemplates").getIotJobTemplates = null as any;
export const getIotJobTemplatesOutput: typeof import("./getIotJobTemplates").getIotJobTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getIotJobTemplates","getIotJobTemplatesOutput"], () => require("./getIotJobTemplates"));

export { GetIotLoggingArgs, GetIotLoggingResult, GetIotLoggingOutputArgs } from "./getIotLogging";
export const getIotLogging: typeof import("./getIotLogging").getIotLogging = null as any;
export const getIotLoggingOutput: typeof import("./getIotLogging").getIotLoggingOutput = null as any;
utilities.lazyLoad(exports, ["getIotLogging","getIotLoggingOutput"], () => require("./getIotLogging"));

export { GetIotLoggingsResult } from "./getIotLoggings";
export const getIotLoggings: typeof import("./getIotLoggings").getIotLoggings = null as any;
export const getIotLoggingsOutput: typeof import("./getIotLoggings").getIotLoggingsOutput = null as any;
utilities.lazyLoad(exports, ["getIotLoggings","getIotLoggingsOutput"], () => require("./getIotLoggings"));

export { GetIotMitigationActionArgs, GetIotMitigationActionResult, GetIotMitigationActionOutputArgs } from "./getIotMitigationAction";
export const getIotMitigationAction: typeof import("./getIotMitigationAction").getIotMitigationAction = null as any;
export const getIotMitigationActionOutput: typeof import("./getIotMitigationAction").getIotMitigationActionOutput = null as any;
utilities.lazyLoad(exports, ["getIotMitigationAction","getIotMitigationActionOutput"], () => require("./getIotMitigationAction"));

export { GetIotMitigationActionsResult } from "./getIotMitigationActions";
export const getIotMitigationActions: typeof import("./getIotMitigationActions").getIotMitigationActions = null as any;
export const getIotMitigationActionsOutput: typeof import("./getIotMitigationActions").getIotMitigationActionsOutput = null as any;
utilities.lazyLoad(exports, ["getIotMitigationActions","getIotMitigationActionsOutput"], () => require("./getIotMitigationActions"));

export { GetIotPoliciesResult } from "./getIotPolicies";
export const getIotPolicies: typeof import("./getIotPolicies").getIotPolicies = null as any;
export const getIotPoliciesOutput: typeof import("./getIotPolicies").getIotPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIotPolicies","getIotPoliciesOutput"], () => require("./getIotPolicies"));

export { GetIotPolicyArgs, GetIotPolicyResult, GetIotPolicyOutputArgs } from "./getIotPolicy";
export const getIotPolicy: typeof import("./getIotPolicy").getIotPolicy = null as any;
export const getIotPolicyOutput: typeof import("./getIotPolicy").getIotPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIotPolicy","getIotPolicyOutput"], () => require("./getIotPolicy"));

export { GetIotProvisioningTemplateArgs, GetIotProvisioningTemplateResult, GetIotProvisioningTemplateOutputArgs } from "./getIotProvisioningTemplate";
export const getIotProvisioningTemplate: typeof import("./getIotProvisioningTemplate").getIotProvisioningTemplate = null as any;
export const getIotProvisioningTemplateOutput: typeof import("./getIotProvisioningTemplate").getIotProvisioningTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getIotProvisioningTemplate","getIotProvisioningTemplateOutput"], () => require("./getIotProvisioningTemplate"));

export { GetIotProvisioningTemplatesResult } from "./getIotProvisioningTemplates";
export const getIotProvisioningTemplates: typeof import("./getIotProvisioningTemplates").getIotProvisioningTemplates = null as any;
export const getIotProvisioningTemplatesOutput: typeof import("./getIotProvisioningTemplates").getIotProvisioningTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getIotProvisioningTemplates","getIotProvisioningTemplatesOutput"], () => require("./getIotProvisioningTemplates"));

export { GetIotResourceSpecificLoggingArgs, GetIotResourceSpecificLoggingResult, GetIotResourceSpecificLoggingOutputArgs } from "./getIotResourceSpecificLogging";
export const getIotResourceSpecificLogging: typeof import("./getIotResourceSpecificLogging").getIotResourceSpecificLogging = null as any;
export const getIotResourceSpecificLoggingOutput: typeof import("./getIotResourceSpecificLogging").getIotResourceSpecificLoggingOutput = null as any;
utilities.lazyLoad(exports, ["getIotResourceSpecificLogging","getIotResourceSpecificLoggingOutput"], () => require("./getIotResourceSpecificLogging"));

export { GetIotResourceSpecificLoggingsResult } from "./getIotResourceSpecificLoggings";
export const getIotResourceSpecificLoggings: typeof import("./getIotResourceSpecificLoggings").getIotResourceSpecificLoggings = null as any;
export const getIotResourceSpecificLoggingsOutput: typeof import("./getIotResourceSpecificLoggings").getIotResourceSpecificLoggingsOutput = null as any;
utilities.lazyLoad(exports, ["getIotResourceSpecificLoggings","getIotResourceSpecificLoggingsOutput"], () => require("./getIotResourceSpecificLoggings"));

export { GetIotRoleAliasArgs, GetIotRoleAliasResult, GetIotRoleAliasOutputArgs } from "./getIotRoleAlias";
export const getIotRoleAlias: typeof import("./getIotRoleAlias").getIotRoleAlias = null as any;
export const getIotRoleAliasOutput: typeof import("./getIotRoleAlias").getIotRoleAliasOutput = null as any;
utilities.lazyLoad(exports, ["getIotRoleAlias","getIotRoleAliasOutput"], () => require("./getIotRoleAlias"));

export { GetIotRoleAliasesResult } from "./getIotRoleAliases";
export const getIotRoleAliases: typeof import("./getIotRoleAliases").getIotRoleAliases = null as any;
export const getIotRoleAliasesOutput: typeof import("./getIotRoleAliases").getIotRoleAliasesOutput = null as any;
utilities.lazyLoad(exports, ["getIotRoleAliases","getIotRoleAliasesOutput"], () => require("./getIotRoleAliases"));

export { GetIotScheduledAuditArgs, GetIotScheduledAuditResult, GetIotScheduledAuditOutputArgs } from "./getIotScheduledAudit";
export const getIotScheduledAudit: typeof import("./getIotScheduledAudit").getIotScheduledAudit = null as any;
export const getIotScheduledAuditOutput: typeof import("./getIotScheduledAudit").getIotScheduledAuditOutput = null as any;
utilities.lazyLoad(exports, ["getIotScheduledAudit","getIotScheduledAuditOutput"], () => require("./getIotScheduledAudit"));

export { GetIotScheduledAuditsResult } from "./getIotScheduledAudits";
export const getIotScheduledAudits: typeof import("./getIotScheduledAudits").getIotScheduledAudits = null as any;
export const getIotScheduledAuditsOutput: typeof import("./getIotScheduledAudits").getIotScheduledAuditsOutput = null as any;
utilities.lazyLoad(exports, ["getIotScheduledAudits","getIotScheduledAuditsOutput"], () => require("./getIotScheduledAudits"));

export { GetIotSecurityProfileArgs, GetIotSecurityProfileResult, GetIotSecurityProfileOutputArgs } from "./getIotSecurityProfile";
export const getIotSecurityProfile: typeof import("./getIotSecurityProfile").getIotSecurityProfile = null as any;
export const getIotSecurityProfileOutput: typeof import("./getIotSecurityProfile").getIotSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getIotSecurityProfile","getIotSecurityProfileOutput"], () => require("./getIotSecurityProfile"));

export { GetIotSecurityProfilesResult } from "./getIotSecurityProfiles";
export const getIotSecurityProfiles: typeof import("./getIotSecurityProfiles").getIotSecurityProfiles = null as any;
export const getIotSecurityProfilesOutput: typeof import("./getIotSecurityProfiles").getIotSecurityProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getIotSecurityProfiles","getIotSecurityProfilesOutput"], () => require("./getIotSecurityProfiles"));

export { GetIotSoftwarePackageArgs, GetIotSoftwarePackageResult, GetIotSoftwarePackageOutputArgs } from "./getIotSoftwarePackage";
export const getIotSoftwarePackage: typeof import("./getIotSoftwarePackage").getIotSoftwarePackage = null as any;
export const getIotSoftwarePackageOutput: typeof import("./getIotSoftwarePackage").getIotSoftwarePackageOutput = null as any;
utilities.lazyLoad(exports, ["getIotSoftwarePackage","getIotSoftwarePackageOutput"], () => require("./getIotSoftwarePackage"));

export { GetIotSoftwarePackageVersionArgs, GetIotSoftwarePackageVersionResult, GetIotSoftwarePackageVersionOutputArgs } from "./getIotSoftwarePackageVersion";
export const getIotSoftwarePackageVersion: typeof import("./getIotSoftwarePackageVersion").getIotSoftwarePackageVersion = null as any;
export const getIotSoftwarePackageVersionOutput: typeof import("./getIotSoftwarePackageVersion").getIotSoftwarePackageVersionOutput = null as any;
utilities.lazyLoad(exports, ["getIotSoftwarePackageVersion","getIotSoftwarePackageVersionOutput"], () => require("./getIotSoftwarePackageVersion"));

export { GetIotSoftwarePackageVersionsResult } from "./getIotSoftwarePackageVersions";
export const getIotSoftwarePackageVersions: typeof import("./getIotSoftwarePackageVersions").getIotSoftwarePackageVersions = null as any;
export const getIotSoftwarePackageVersionsOutput: typeof import("./getIotSoftwarePackageVersions").getIotSoftwarePackageVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getIotSoftwarePackageVersions","getIotSoftwarePackageVersionsOutput"], () => require("./getIotSoftwarePackageVersions"));

export { GetIotSoftwarePackagesResult } from "./getIotSoftwarePackages";
export const getIotSoftwarePackages: typeof import("./getIotSoftwarePackages").getIotSoftwarePackages = null as any;
export const getIotSoftwarePackagesOutput: typeof import("./getIotSoftwarePackages").getIotSoftwarePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getIotSoftwarePackages","getIotSoftwarePackagesOutput"], () => require("./getIotSoftwarePackages"));

export { GetIotThingArgs, GetIotThingResult, GetIotThingOutputArgs } from "./getIotThing";
export const getIotThing: typeof import("./getIotThing").getIotThing = null as any;
export const getIotThingOutput: typeof import("./getIotThing").getIotThingOutput = null as any;
utilities.lazyLoad(exports, ["getIotThing","getIotThingOutput"], () => require("./getIotThing"));

export { GetIotThingGroupArgs, GetIotThingGroupResult, GetIotThingGroupOutputArgs } from "./getIotThingGroup";
export const getIotThingGroup: typeof import("./getIotThingGroup").getIotThingGroup = null as any;
export const getIotThingGroupOutput: typeof import("./getIotThingGroup").getIotThingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIotThingGroup","getIotThingGroupOutput"], () => require("./getIotThingGroup"));

export { GetIotThingGroupsResult } from "./getIotThingGroups";
export const getIotThingGroups: typeof import("./getIotThingGroups").getIotThingGroups = null as any;
export const getIotThingGroupsOutput: typeof import("./getIotThingGroups").getIotThingGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIotThingGroups","getIotThingGroupsOutput"], () => require("./getIotThingGroups"));

export { GetIotThingTypeArgs, GetIotThingTypeResult, GetIotThingTypeOutputArgs } from "./getIotThingType";
export const getIotThingType: typeof import("./getIotThingType").getIotThingType = null as any;
export const getIotThingTypeOutput: typeof import("./getIotThingType").getIotThingTypeOutput = null as any;
utilities.lazyLoad(exports, ["getIotThingType","getIotThingTypeOutput"], () => require("./getIotThingType"));

export { GetIotThingTypesResult } from "./getIotThingTypes";
export const getIotThingTypes: typeof import("./getIotThingTypes").getIotThingTypes = null as any;
export const getIotThingTypesOutput: typeof import("./getIotThingTypes").getIotThingTypesOutput = null as any;
utilities.lazyLoad(exports, ["getIotThingTypes","getIotThingTypesOutput"], () => require("./getIotThingTypes"));

export { GetIotThingsResult } from "./getIotThings";
export const getIotThings: typeof import("./getIotThings").getIotThings = null as any;
export const getIotThingsOutput: typeof import("./getIotThings").getIotThingsOutput = null as any;
utilities.lazyLoad(exports, ["getIotThings","getIotThingsOutput"], () => require("./getIotThings"));

export { GetIotTopicRuleArgs, GetIotTopicRuleResult, GetIotTopicRuleOutputArgs } from "./getIotTopicRule";
export const getIotTopicRule: typeof import("./getIotTopicRule").getIotTopicRule = null as any;
export const getIotTopicRuleOutput: typeof import("./getIotTopicRule").getIotTopicRuleOutput = null as any;
utilities.lazyLoad(exports, ["getIotTopicRule","getIotTopicRuleOutput"], () => require("./getIotTopicRule"));

export { GetIotTopicRuleDestinationArgs, GetIotTopicRuleDestinationResult, GetIotTopicRuleDestinationOutputArgs } from "./getIotTopicRuleDestination";
export const getIotTopicRuleDestination: typeof import("./getIotTopicRuleDestination").getIotTopicRuleDestination = null as any;
export const getIotTopicRuleDestinationOutput: typeof import("./getIotTopicRuleDestination").getIotTopicRuleDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getIotTopicRuleDestination","getIotTopicRuleDestinationOutput"], () => require("./getIotTopicRuleDestination"));

export { GetIotTopicRuleDestinationsResult } from "./getIotTopicRuleDestinations";
export const getIotTopicRuleDestinations: typeof import("./getIotTopicRuleDestinations").getIotTopicRuleDestinations = null as any;
export const getIotTopicRuleDestinationsOutput: typeof import("./getIotTopicRuleDestinations").getIotTopicRuleDestinationsOutput = null as any;
utilities.lazyLoad(exports, ["getIotTopicRuleDestinations","getIotTopicRuleDestinationsOutput"], () => require("./getIotTopicRuleDestinations"));

export { GetIotTopicRulesResult } from "./getIotTopicRules";
export const getIotTopicRules: typeof import("./getIotTopicRules").getIotTopicRules = null as any;
export const getIotTopicRulesOutput: typeof import("./getIotTopicRules").getIotTopicRulesOutput = null as any;
utilities.lazyLoad(exports, ["getIotTopicRules","getIotTopicRulesOutput"], () => require("./getIotTopicRules"));

export { GetIotanalyticsChannelArgs, GetIotanalyticsChannelResult, GetIotanalyticsChannelOutputArgs } from "./getIotanalyticsChannel";
export const getIotanalyticsChannel: typeof import("./getIotanalyticsChannel").getIotanalyticsChannel = null as any;
export const getIotanalyticsChannelOutput: typeof import("./getIotanalyticsChannel").getIotanalyticsChannelOutput = null as any;
utilities.lazyLoad(exports, ["getIotanalyticsChannel","getIotanalyticsChannelOutput"], () => require("./getIotanalyticsChannel"));

export { GetIotanalyticsChannelsResult } from "./getIotanalyticsChannels";
export const getIotanalyticsChannels: typeof import("./getIotanalyticsChannels").getIotanalyticsChannels = null as any;
export const getIotanalyticsChannelsOutput: typeof import("./getIotanalyticsChannels").getIotanalyticsChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getIotanalyticsChannels","getIotanalyticsChannelsOutput"], () => require("./getIotanalyticsChannels"));

export { GetIotanalyticsDatasetArgs, GetIotanalyticsDatasetResult, GetIotanalyticsDatasetOutputArgs } from "./getIotanalyticsDataset";
export const getIotanalyticsDataset: typeof import("./getIotanalyticsDataset").getIotanalyticsDataset = null as any;
export const getIotanalyticsDatasetOutput: typeof import("./getIotanalyticsDataset").getIotanalyticsDatasetOutput = null as any;
utilities.lazyLoad(exports, ["getIotanalyticsDataset","getIotanalyticsDatasetOutput"], () => require("./getIotanalyticsDataset"));

export { GetIotanalyticsDatasetsResult } from "./getIotanalyticsDatasets";
export const getIotanalyticsDatasets: typeof import("./getIotanalyticsDatasets").getIotanalyticsDatasets = null as any;
export const getIotanalyticsDatasetsOutput: typeof import("./getIotanalyticsDatasets").getIotanalyticsDatasetsOutput = null as any;
utilities.lazyLoad(exports, ["getIotanalyticsDatasets","getIotanalyticsDatasetsOutput"], () => require("./getIotanalyticsDatasets"));

export { GetIotanalyticsDatastoreArgs, GetIotanalyticsDatastoreResult, GetIotanalyticsDatastoreOutputArgs } from "./getIotanalyticsDatastore";
export const getIotanalyticsDatastore: typeof import("./getIotanalyticsDatastore").getIotanalyticsDatastore = null as any;
export const getIotanalyticsDatastoreOutput: typeof import("./getIotanalyticsDatastore").getIotanalyticsDatastoreOutput = null as any;
utilities.lazyLoad(exports, ["getIotanalyticsDatastore","getIotanalyticsDatastoreOutput"], () => require("./getIotanalyticsDatastore"));

export { GetIotanalyticsDatastoresResult } from "./getIotanalyticsDatastores";
export const getIotanalyticsDatastores: typeof import("./getIotanalyticsDatastores").getIotanalyticsDatastores = null as any;
export const getIotanalyticsDatastoresOutput: typeof import("./getIotanalyticsDatastores").getIotanalyticsDatastoresOutput = null as any;
utilities.lazyLoad(exports, ["getIotanalyticsDatastores","getIotanalyticsDatastoresOutput"], () => require("./getIotanalyticsDatastores"));

export { GetIotanalyticsPipelineArgs, GetIotanalyticsPipelineResult, GetIotanalyticsPipelineOutputArgs } from "./getIotanalyticsPipeline";
export const getIotanalyticsPipeline: typeof import("./getIotanalyticsPipeline").getIotanalyticsPipeline = null as any;
export const getIotanalyticsPipelineOutput: typeof import("./getIotanalyticsPipeline").getIotanalyticsPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getIotanalyticsPipeline","getIotanalyticsPipelineOutput"], () => require("./getIotanalyticsPipeline"));

export { GetIotanalyticsPipelinesResult } from "./getIotanalyticsPipelines";
export const getIotanalyticsPipelines: typeof import("./getIotanalyticsPipelines").getIotanalyticsPipelines = null as any;
export const getIotanalyticsPipelinesOutput: typeof import("./getIotanalyticsPipelines").getIotanalyticsPipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getIotanalyticsPipelines","getIotanalyticsPipelinesOutput"], () => require("./getIotanalyticsPipelines"));

export { GetIotcoredeviceadvisorSuiteDefinitionArgs, GetIotcoredeviceadvisorSuiteDefinitionResult, GetIotcoredeviceadvisorSuiteDefinitionOutputArgs } from "./getIotcoredeviceadvisorSuiteDefinition";
export const getIotcoredeviceadvisorSuiteDefinition: typeof import("./getIotcoredeviceadvisorSuiteDefinition").getIotcoredeviceadvisorSuiteDefinition = null as any;
export const getIotcoredeviceadvisorSuiteDefinitionOutput: typeof import("./getIotcoredeviceadvisorSuiteDefinition").getIotcoredeviceadvisorSuiteDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getIotcoredeviceadvisorSuiteDefinition","getIotcoredeviceadvisorSuiteDefinitionOutput"], () => require("./getIotcoredeviceadvisorSuiteDefinition"));

export { GetIotcoredeviceadvisorSuiteDefinitionsResult } from "./getIotcoredeviceadvisorSuiteDefinitions";
export const getIotcoredeviceadvisorSuiteDefinitions: typeof import("./getIotcoredeviceadvisorSuiteDefinitions").getIotcoredeviceadvisorSuiteDefinitions = null as any;
export const getIotcoredeviceadvisorSuiteDefinitionsOutput: typeof import("./getIotcoredeviceadvisorSuiteDefinitions").getIotcoredeviceadvisorSuiteDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getIotcoredeviceadvisorSuiteDefinitions","getIotcoredeviceadvisorSuiteDefinitionsOutput"], () => require("./getIotcoredeviceadvisorSuiteDefinitions"));

export { GetIoteventsAlarmModelArgs, GetIoteventsAlarmModelResult, GetIoteventsAlarmModelOutputArgs } from "./getIoteventsAlarmModel";
export const getIoteventsAlarmModel: typeof import("./getIoteventsAlarmModel").getIoteventsAlarmModel = null as any;
export const getIoteventsAlarmModelOutput: typeof import("./getIoteventsAlarmModel").getIoteventsAlarmModelOutput = null as any;
utilities.lazyLoad(exports, ["getIoteventsAlarmModel","getIoteventsAlarmModelOutput"], () => require("./getIoteventsAlarmModel"));

export { GetIoteventsAlarmModelsResult } from "./getIoteventsAlarmModels";
export const getIoteventsAlarmModels: typeof import("./getIoteventsAlarmModels").getIoteventsAlarmModels = null as any;
export const getIoteventsAlarmModelsOutput: typeof import("./getIoteventsAlarmModels").getIoteventsAlarmModelsOutput = null as any;
utilities.lazyLoad(exports, ["getIoteventsAlarmModels","getIoteventsAlarmModelsOutput"], () => require("./getIoteventsAlarmModels"));

export { GetIoteventsDetectorModelArgs, GetIoteventsDetectorModelResult, GetIoteventsDetectorModelOutputArgs } from "./getIoteventsDetectorModel";
export const getIoteventsDetectorModel: typeof import("./getIoteventsDetectorModel").getIoteventsDetectorModel = null as any;
export const getIoteventsDetectorModelOutput: typeof import("./getIoteventsDetectorModel").getIoteventsDetectorModelOutput = null as any;
utilities.lazyLoad(exports, ["getIoteventsDetectorModel","getIoteventsDetectorModelOutput"], () => require("./getIoteventsDetectorModel"));

export { GetIoteventsDetectorModelsResult } from "./getIoteventsDetectorModels";
export const getIoteventsDetectorModels: typeof import("./getIoteventsDetectorModels").getIoteventsDetectorModels = null as any;
export const getIoteventsDetectorModelsOutput: typeof import("./getIoteventsDetectorModels").getIoteventsDetectorModelsOutput = null as any;
utilities.lazyLoad(exports, ["getIoteventsDetectorModels","getIoteventsDetectorModelsOutput"], () => require("./getIoteventsDetectorModels"));

export { GetIoteventsInputArgs, GetIoteventsInputResult, GetIoteventsInputOutputArgs } from "./getIoteventsInput";
export const getIoteventsInput: typeof import("./getIoteventsInput").getIoteventsInput = null as any;
export const getIoteventsInputOutput: typeof import("./getIoteventsInput").getIoteventsInputOutput = null as any;
utilities.lazyLoad(exports, ["getIoteventsInput","getIoteventsInputOutput"], () => require("./getIoteventsInput"));

export { GetIoteventsInputsResult } from "./getIoteventsInputs";
export const getIoteventsInputs: typeof import("./getIoteventsInputs").getIoteventsInputs = null as any;
export const getIoteventsInputsOutput: typeof import("./getIoteventsInputs").getIoteventsInputsOutput = null as any;
utilities.lazyLoad(exports, ["getIoteventsInputs","getIoteventsInputsOutput"], () => require("./getIoteventsInputs"));

export { GetIotfleethubApplicationArgs, GetIotfleethubApplicationResult, GetIotfleethubApplicationOutputArgs } from "./getIotfleethubApplication";
export const getIotfleethubApplication: typeof import("./getIotfleethubApplication").getIotfleethubApplication = null as any;
export const getIotfleethubApplicationOutput: typeof import("./getIotfleethubApplication").getIotfleethubApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getIotfleethubApplication","getIotfleethubApplicationOutput"], () => require("./getIotfleethubApplication"));

export { GetIotfleethubApplicationsResult } from "./getIotfleethubApplications";
export const getIotfleethubApplications: typeof import("./getIotfleethubApplications").getIotfleethubApplications = null as any;
export const getIotfleethubApplicationsOutput: typeof import("./getIotfleethubApplications").getIotfleethubApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getIotfleethubApplications","getIotfleethubApplicationsOutput"], () => require("./getIotfleethubApplications"));

export { GetIotfleetwiseCampaignArgs, GetIotfleetwiseCampaignResult, GetIotfleetwiseCampaignOutputArgs } from "./getIotfleetwiseCampaign";
export const getIotfleetwiseCampaign: typeof import("./getIotfleetwiseCampaign").getIotfleetwiseCampaign = null as any;
export const getIotfleetwiseCampaignOutput: typeof import("./getIotfleetwiseCampaign").getIotfleetwiseCampaignOutput = null as any;
utilities.lazyLoad(exports, ["getIotfleetwiseCampaign","getIotfleetwiseCampaignOutput"], () => require("./getIotfleetwiseCampaign"));

export { GetIotfleetwiseCampaignsResult } from "./getIotfleetwiseCampaigns";
export const getIotfleetwiseCampaigns: typeof import("./getIotfleetwiseCampaigns").getIotfleetwiseCampaigns = null as any;
export const getIotfleetwiseCampaignsOutput: typeof import("./getIotfleetwiseCampaigns").getIotfleetwiseCampaignsOutput = null as any;
utilities.lazyLoad(exports, ["getIotfleetwiseCampaigns","getIotfleetwiseCampaignsOutput"], () => require("./getIotfleetwiseCampaigns"));

export { GetIotfleetwiseFleetArgs, GetIotfleetwiseFleetResult, GetIotfleetwiseFleetOutputArgs } from "./getIotfleetwiseFleet";
export const getIotfleetwiseFleet: typeof import("./getIotfleetwiseFleet").getIotfleetwiseFleet = null as any;
export const getIotfleetwiseFleetOutput: typeof import("./getIotfleetwiseFleet").getIotfleetwiseFleetOutput = null as any;
utilities.lazyLoad(exports, ["getIotfleetwiseFleet","getIotfleetwiseFleetOutput"], () => require("./getIotfleetwiseFleet"));

export { GetIotfleetwiseFleetsResult } from "./getIotfleetwiseFleets";
export const getIotfleetwiseFleets: typeof import("./getIotfleetwiseFleets").getIotfleetwiseFleets = null as any;
export const getIotfleetwiseFleetsOutput: typeof import("./getIotfleetwiseFleets").getIotfleetwiseFleetsOutput = null as any;
utilities.lazyLoad(exports, ["getIotfleetwiseFleets","getIotfleetwiseFleetsOutput"], () => require("./getIotfleetwiseFleets"));

export { GetIotfleetwiseModelManifestArgs, GetIotfleetwiseModelManifestResult, GetIotfleetwiseModelManifestOutputArgs } from "./getIotfleetwiseModelManifest";
export const getIotfleetwiseModelManifest: typeof import("./getIotfleetwiseModelManifest").getIotfleetwiseModelManifest = null as any;
export const getIotfleetwiseModelManifestOutput: typeof import("./getIotfleetwiseModelManifest").getIotfleetwiseModelManifestOutput = null as any;
utilities.lazyLoad(exports, ["getIotfleetwiseModelManifest","getIotfleetwiseModelManifestOutput"], () => require("./getIotfleetwiseModelManifest"));

export { GetIotfleetwiseModelManifestsResult } from "./getIotfleetwiseModelManifests";
export const getIotfleetwiseModelManifests: typeof import("./getIotfleetwiseModelManifests").getIotfleetwiseModelManifests = null as any;
export const getIotfleetwiseModelManifestsOutput: typeof import("./getIotfleetwiseModelManifests").getIotfleetwiseModelManifestsOutput = null as any;
utilities.lazyLoad(exports, ["getIotfleetwiseModelManifests","getIotfleetwiseModelManifestsOutput"], () => require("./getIotfleetwiseModelManifests"));

export { GetIotfleetwiseSignalCatalogArgs, GetIotfleetwiseSignalCatalogResult, GetIotfleetwiseSignalCatalogOutputArgs } from "./getIotfleetwiseSignalCatalog";
export const getIotfleetwiseSignalCatalog: typeof import("./getIotfleetwiseSignalCatalog").getIotfleetwiseSignalCatalog = null as any;
export const getIotfleetwiseSignalCatalogOutput: typeof import("./getIotfleetwiseSignalCatalog").getIotfleetwiseSignalCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getIotfleetwiseSignalCatalog","getIotfleetwiseSignalCatalogOutput"], () => require("./getIotfleetwiseSignalCatalog"));

export { GetIotfleetwiseSignalCatalogsResult } from "./getIotfleetwiseSignalCatalogs";
export const getIotfleetwiseSignalCatalogs: typeof import("./getIotfleetwiseSignalCatalogs").getIotfleetwiseSignalCatalogs = null as any;
export const getIotfleetwiseSignalCatalogsOutput: typeof import("./getIotfleetwiseSignalCatalogs").getIotfleetwiseSignalCatalogsOutput = null as any;
utilities.lazyLoad(exports, ["getIotfleetwiseSignalCatalogs","getIotfleetwiseSignalCatalogsOutput"], () => require("./getIotfleetwiseSignalCatalogs"));

export { GetIotfleetwiseVehicleArgs, GetIotfleetwiseVehicleResult, GetIotfleetwiseVehicleOutputArgs } from "./getIotfleetwiseVehicle";
export const getIotfleetwiseVehicle: typeof import("./getIotfleetwiseVehicle").getIotfleetwiseVehicle = null as any;
export const getIotfleetwiseVehicleOutput: typeof import("./getIotfleetwiseVehicle").getIotfleetwiseVehicleOutput = null as any;
utilities.lazyLoad(exports, ["getIotfleetwiseVehicle","getIotfleetwiseVehicleOutput"], () => require("./getIotfleetwiseVehicle"));

export { GetIotfleetwiseVehiclesResult } from "./getIotfleetwiseVehicles";
export const getIotfleetwiseVehicles: typeof import("./getIotfleetwiseVehicles").getIotfleetwiseVehicles = null as any;
export const getIotfleetwiseVehiclesOutput: typeof import("./getIotfleetwiseVehicles").getIotfleetwiseVehiclesOutput = null as any;
utilities.lazyLoad(exports, ["getIotfleetwiseVehicles","getIotfleetwiseVehiclesOutput"], () => require("./getIotfleetwiseVehicles"));

export { GetIotsitewiseAccessPoliciesResult } from "./getIotsitewiseAccessPolicies";
export const getIotsitewiseAccessPolicies: typeof import("./getIotsitewiseAccessPolicies").getIotsitewiseAccessPolicies = null as any;
export const getIotsitewiseAccessPoliciesOutput: typeof import("./getIotsitewiseAccessPolicies").getIotsitewiseAccessPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewiseAccessPolicies","getIotsitewiseAccessPoliciesOutput"], () => require("./getIotsitewiseAccessPolicies"));

export { GetIotsitewiseAccessPolicyArgs, GetIotsitewiseAccessPolicyResult, GetIotsitewiseAccessPolicyOutputArgs } from "./getIotsitewiseAccessPolicy";
export const getIotsitewiseAccessPolicy: typeof import("./getIotsitewiseAccessPolicy").getIotsitewiseAccessPolicy = null as any;
export const getIotsitewiseAccessPolicyOutput: typeof import("./getIotsitewiseAccessPolicy").getIotsitewiseAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewiseAccessPolicy","getIotsitewiseAccessPolicyOutput"], () => require("./getIotsitewiseAccessPolicy"));

export { GetIotsitewiseAssetArgs, GetIotsitewiseAssetResult, GetIotsitewiseAssetOutputArgs } from "./getIotsitewiseAsset";
export const getIotsitewiseAsset: typeof import("./getIotsitewiseAsset").getIotsitewiseAsset = null as any;
export const getIotsitewiseAssetOutput: typeof import("./getIotsitewiseAsset").getIotsitewiseAssetOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewiseAsset","getIotsitewiseAssetOutput"], () => require("./getIotsitewiseAsset"));

export { GetIotsitewiseAssetModelArgs, GetIotsitewiseAssetModelResult, GetIotsitewiseAssetModelOutputArgs } from "./getIotsitewiseAssetModel";
export const getIotsitewiseAssetModel: typeof import("./getIotsitewiseAssetModel").getIotsitewiseAssetModel = null as any;
export const getIotsitewiseAssetModelOutput: typeof import("./getIotsitewiseAssetModel").getIotsitewiseAssetModelOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewiseAssetModel","getIotsitewiseAssetModelOutput"], () => require("./getIotsitewiseAssetModel"));

export { GetIotsitewiseAssetModelsResult } from "./getIotsitewiseAssetModels";
export const getIotsitewiseAssetModels: typeof import("./getIotsitewiseAssetModels").getIotsitewiseAssetModels = null as any;
export const getIotsitewiseAssetModelsOutput: typeof import("./getIotsitewiseAssetModels").getIotsitewiseAssetModelsOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewiseAssetModels","getIotsitewiseAssetModelsOutput"], () => require("./getIotsitewiseAssetModels"));

export { GetIotsitewiseAssetsResult } from "./getIotsitewiseAssets";
export const getIotsitewiseAssets: typeof import("./getIotsitewiseAssets").getIotsitewiseAssets = null as any;
export const getIotsitewiseAssetsOutput: typeof import("./getIotsitewiseAssets").getIotsitewiseAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewiseAssets","getIotsitewiseAssetsOutput"], () => require("./getIotsitewiseAssets"));

export { GetIotsitewiseDashboardArgs, GetIotsitewiseDashboardResult, GetIotsitewiseDashboardOutputArgs } from "./getIotsitewiseDashboard";
export const getIotsitewiseDashboard: typeof import("./getIotsitewiseDashboard").getIotsitewiseDashboard = null as any;
export const getIotsitewiseDashboardOutput: typeof import("./getIotsitewiseDashboard").getIotsitewiseDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewiseDashboard","getIotsitewiseDashboardOutput"], () => require("./getIotsitewiseDashboard"));

export { GetIotsitewiseDashboardsResult } from "./getIotsitewiseDashboards";
export const getIotsitewiseDashboards: typeof import("./getIotsitewiseDashboards").getIotsitewiseDashboards = null as any;
export const getIotsitewiseDashboardsOutput: typeof import("./getIotsitewiseDashboards").getIotsitewiseDashboardsOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewiseDashboards","getIotsitewiseDashboardsOutput"], () => require("./getIotsitewiseDashboards"));

export { GetIotsitewiseGatewayArgs, GetIotsitewiseGatewayResult, GetIotsitewiseGatewayOutputArgs } from "./getIotsitewiseGateway";
export const getIotsitewiseGateway: typeof import("./getIotsitewiseGateway").getIotsitewiseGateway = null as any;
export const getIotsitewiseGatewayOutput: typeof import("./getIotsitewiseGateway").getIotsitewiseGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewiseGateway","getIotsitewiseGatewayOutput"], () => require("./getIotsitewiseGateway"));

export { GetIotsitewiseGatewaysResult } from "./getIotsitewiseGateways";
export const getIotsitewiseGateways: typeof import("./getIotsitewiseGateways").getIotsitewiseGateways = null as any;
export const getIotsitewiseGatewaysOutput: typeof import("./getIotsitewiseGateways").getIotsitewiseGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewiseGateways","getIotsitewiseGatewaysOutput"], () => require("./getIotsitewiseGateways"));

export { GetIotsitewisePortalArgs, GetIotsitewisePortalResult, GetIotsitewisePortalOutputArgs } from "./getIotsitewisePortal";
export const getIotsitewisePortal: typeof import("./getIotsitewisePortal").getIotsitewisePortal = null as any;
export const getIotsitewisePortalOutput: typeof import("./getIotsitewisePortal").getIotsitewisePortalOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewisePortal","getIotsitewisePortalOutput"], () => require("./getIotsitewisePortal"));

export { GetIotsitewisePortalsResult } from "./getIotsitewisePortals";
export const getIotsitewisePortals: typeof import("./getIotsitewisePortals").getIotsitewisePortals = null as any;
export const getIotsitewisePortalsOutput: typeof import("./getIotsitewisePortals").getIotsitewisePortalsOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewisePortals","getIotsitewisePortalsOutput"], () => require("./getIotsitewisePortals"));

export { GetIotsitewiseProjectArgs, GetIotsitewiseProjectResult, GetIotsitewiseProjectOutputArgs } from "./getIotsitewiseProject";
export const getIotsitewiseProject: typeof import("./getIotsitewiseProject").getIotsitewiseProject = null as any;
export const getIotsitewiseProjectOutput: typeof import("./getIotsitewiseProject").getIotsitewiseProjectOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewiseProject","getIotsitewiseProjectOutput"], () => require("./getIotsitewiseProject"));

export { GetIotsitewiseProjectsResult } from "./getIotsitewiseProjects";
export const getIotsitewiseProjects: typeof import("./getIotsitewiseProjects").getIotsitewiseProjects = null as any;
export const getIotsitewiseProjectsOutput: typeof import("./getIotsitewiseProjects").getIotsitewiseProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getIotsitewiseProjects","getIotsitewiseProjectsOutput"], () => require("./getIotsitewiseProjects"));

export { GetIottwinmakerSceneArgs, GetIottwinmakerSceneResult, GetIottwinmakerSceneOutputArgs } from "./getIottwinmakerScene";
export const getIottwinmakerScene: typeof import("./getIottwinmakerScene").getIottwinmakerScene = null as any;
export const getIottwinmakerSceneOutput: typeof import("./getIottwinmakerScene").getIottwinmakerSceneOutput = null as any;
utilities.lazyLoad(exports, ["getIottwinmakerScene","getIottwinmakerSceneOutput"], () => require("./getIottwinmakerScene"));

export { GetIottwinmakerSyncJobArgs, GetIottwinmakerSyncJobResult, GetIottwinmakerSyncJobOutputArgs } from "./getIottwinmakerSyncJob";
export const getIottwinmakerSyncJob: typeof import("./getIottwinmakerSyncJob").getIottwinmakerSyncJob = null as any;
export const getIottwinmakerSyncJobOutput: typeof import("./getIottwinmakerSyncJob").getIottwinmakerSyncJobOutput = null as any;
utilities.lazyLoad(exports, ["getIottwinmakerSyncJob","getIottwinmakerSyncJobOutput"], () => require("./getIottwinmakerSyncJob"));

export { GetIottwinmakerWorkspaceArgs, GetIottwinmakerWorkspaceResult, GetIottwinmakerWorkspaceOutputArgs } from "./getIottwinmakerWorkspace";
export const getIottwinmakerWorkspace: typeof import("./getIottwinmakerWorkspace").getIottwinmakerWorkspace = null as any;
export const getIottwinmakerWorkspaceOutput: typeof import("./getIottwinmakerWorkspace").getIottwinmakerWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getIottwinmakerWorkspace","getIottwinmakerWorkspaceOutput"], () => require("./getIottwinmakerWorkspace"));

export { GetIottwinmakerWorkspacesResult } from "./getIottwinmakerWorkspaces";
export const getIottwinmakerWorkspaces: typeof import("./getIottwinmakerWorkspaces").getIottwinmakerWorkspaces = null as any;
export const getIottwinmakerWorkspacesOutput: typeof import("./getIottwinmakerWorkspaces").getIottwinmakerWorkspacesOutput = null as any;
utilities.lazyLoad(exports, ["getIottwinmakerWorkspaces","getIottwinmakerWorkspacesOutput"], () => require("./getIottwinmakerWorkspaces"));

export { GetIotwirelessDestinationArgs, GetIotwirelessDestinationResult, GetIotwirelessDestinationOutputArgs } from "./getIotwirelessDestination";
export const getIotwirelessDestination: typeof import("./getIotwirelessDestination").getIotwirelessDestination = null as any;
export const getIotwirelessDestinationOutput: typeof import("./getIotwirelessDestination").getIotwirelessDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessDestination","getIotwirelessDestinationOutput"], () => require("./getIotwirelessDestination"));

export { GetIotwirelessDestinationsResult } from "./getIotwirelessDestinations";
export const getIotwirelessDestinations: typeof import("./getIotwirelessDestinations").getIotwirelessDestinations = null as any;
export const getIotwirelessDestinationsOutput: typeof import("./getIotwirelessDestinations").getIotwirelessDestinationsOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessDestinations","getIotwirelessDestinationsOutput"], () => require("./getIotwirelessDestinations"));

export { GetIotwirelessDeviceProfileArgs, GetIotwirelessDeviceProfileResult, GetIotwirelessDeviceProfileOutputArgs } from "./getIotwirelessDeviceProfile";
export const getIotwirelessDeviceProfile: typeof import("./getIotwirelessDeviceProfile").getIotwirelessDeviceProfile = null as any;
export const getIotwirelessDeviceProfileOutput: typeof import("./getIotwirelessDeviceProfile").getIotwirelessDeviceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessDeviceProfile","getIotwirelessDeviceProfileOutput"], () => require("./getIotwirelessDeviceProfile"));

export { GetIotwirelessDeviceProfilesResult } from "./getIotwirelessDeviceProfiles";
export const getIotwirelessDeviceProfiles: typeof import("./getIotwirelessDeviceProfiles").getIotwirelessDeviceProfiles = null as any;
export const getIotwirelessDeviceProfilesOutput: typeof import("./getIotwirelessDeviceProfiles").getIotwirelessDeviceProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessDeviceProfiles","getIotwirelessDeviceProfilesOutput"], () => require("./getIotwirelessDeviceProfiles"));

export { GetIotwirelessFuotaTaskArgs, GetIotwirelessFuotaTaskResult, GetIotwirelessFuotaTaskOutputArgs } from "./getIotwirelessFuotaTask";
export const getIotwirelessFuotaTask: typeof import("./getIotwirelessFuotaTask").getIotwirelessFuotaTask = null as any;
export const getIotwirelessFuotaTaskOutput: typeof import("./getIotwirelessFuotaTask").getIotwirelessFuotaTaskOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessFuotaTask","getIotwirelessFuotaTaskOutput"], () => require("./getIotwirelessFuotaTask"));

export { GetIotwirelessFuotaTasksResult } from "./getIotwirelessFuotaTasks";
export const getIotwirelessFuotaTasks: typeof import("./getIotwirelessFuotaTasks").getIotwirelessFuotaTasks = null as any;
export const getIotwirelessFuotaTasksOutput: typeof import("./getIotwirelessFuotaTasks").getIotwirelessFuotaTasksOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessFuotaTasks","getIotwirelessFuotaTasksOutput"], () => require("./getIotwirelessFuotaTasks"));

export { GetIotwirelessMulticastGroupArgs, GetIotwirelessMulticastGroupResult, GetIotwirelessMulticastGroupOutputArgs } from "./getIotwirelessMulticastGroup";
export const getIotwirelessMulticastGroup: typeof import("./getIotwirelessMulticastGroup").getIotwirelessMulticastGroup = null as any;
export const getIotwirelessMulticastGroupOutput: typeof import("./getIotwirelessMulticastGroup").getIotwirelessMulticastGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessMulticastGroup","getIotwirelessMulticastGroupOutput"], () => require("./getIotwirelessMulticastGroup"));

export { GetIotwirelessMulticastGroupsResult } from "./getIotwirelessMulticastGroups";
export const getIotwirelessMulticastGroups: typeof import("./getIotwirelessMulticastGroups").getIotwirelessMulticastGroups = null as any;
export const getIotwirelessMulticastGroupsOutput: typeof import("./getIotwirelessMulticastGroups").getIotwirelessMulticastGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessMulticastGroups","getIotwirelessMulticastGroupsOutput"], () => require("./getIotwirelessMulticastGroups"));

export { GetIotwirelessNetworkAnalyzerConfigurationArgs, GetIotwirelessNetworkAnalyzerConfigurationResult, GetIotwirelessNetworkAnalyzerConfigurationOutputArgs } from "./getIotwirelessNetworkAnalyzerConfiguration";
export const getIotwirelessNetworkAnalyzerConfiguration: typeof import("./getIotwirelessNetworkAnalyzerConfiguration").getIotwirelessNetworkAnalyzerConfiguration = null as any;
export const getIotwirelessNetworkAnalyzerConfigurationOutput: typeof import("./getIotwirelessNetworkAnalyzerConfiguration").getIotwirelessNetworkAnalyzerConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessNetworkAnalyzerConfiguration","getIotwirelessNetworkAnalyzerConfigurationOutput"], () => require("./getIotwirelessNetworkAnalyzerConfiguration"));

export { GetIotwirelessNetworkAnalyzerConfigurationsResult } from "./getIotwirelessNetworkAnalyzerConfigurations";
export const getIotwirelessNetworkAnalyzerConfigurations: typeof import("./getIotwirelessNetworkAnalyzerConfigurations").getIotwirelessNetworkAnalyzerConfigurations = null as any;
export const getIotwirelessNetworkAnalyzerConfigurationsOutput: typeof import("./getIotwirelessNetworkAnalyzerConfigurations").getIotwirelessNetworkAnalyzerConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessNetworkAnalyzerConfigurations","getIotwirelessNetworkAnalyzerConfigurationsOutput"], () => require("./getIotwirelessNetworkAnalyzerConfigurations"));

export { GetIotwirelessPartnerAccountArgs, GetIotwirelessPartnerAccountResult, GetIotwirelessPartnerAccountOutputArgs } from "./getIotwirelessPartnerAccount";
export const getIotwirelessPartnerAccount: typeof import("./getIotwirelessPartnerAccount").getIotwirelessPartnerAccount = null as any;
export const getIotwirelessPartnerAccountOutput: typeof import("./getIotwirelessPartnerAccount").getIotwirelessPartnerAccountOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessPartnerAccount","getIotwirelessPartnerAccountOutput"], () => require("./getIotwirelessPartnerAccount"));

export { GetIotwirelessPartnerAccountsResult } from "./getIotwirelessPartnerAccounts";
export const getIotwirelessPartnerAccounts: typeof import("./getIotwirelessPartnerAccounts").getIotwirelessPartnerAccounts = null as any;
export const getIotwirelessPartnerAccountsOutput: typeof import("./getIotwirelessPartnerAccounts").getIotwirelessPartnerAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessPartnerAccounts","getIotwirelessPartnerAccountsOutput"], () => require("./getIotwirelessPartnerAccounts"));

export { GetIotwirelessServiceProfileArgs, GetIotwirelessServiceProfileResult, GetIotwirelessServiceProfileOutputArgs } from "./getIotwirelessServiceProfile";
export const getIotwirelessServiceProfile: typeof import("./getIotwirelessServiceProfile").getIotwirelessServiceProfile = null as any;
export const getIotwirelessServiceProfileOutput: typeof import("./getIotwirelessServiceProfile").getIotwirelessServiceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessServiceProfile","getIotwirelessServiceProfileOutput"], () => require("./getIotwirelessServiceProfile"));

export { GetIotwirelessServiceProfilesResult } from "./getIotwirelessServiceProfiles";
export const getIotwirelessServiceProfiles: typeof import("./getIotwirelessServiceProfiles").getIotwirelessServiceProfiles = null as any;
export const getIotwirelessServiceProfilesOutput: typeof import("./getIotwirelessServiceProfiles").getIotwirelessServiceProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessServiceProfiles","getIotwirelessServiceProfilesOutput"], () => require("./getIotwirelessServiceProfiles"));

export { GetIotwirelessTaskDefinitionArgs, GetIotwirelessTaskDefinitionResult, GetIotwirelessTaskDefinitionOutputArgs } from "./getIotwirelessTaskDefinition";
export const getIotwirelessTaskDefinition: typeof import("./getIotwirelessTaskDefinition").getIotwirelessTaskDefinition = null as any;
export const getIotwirelessTaskDefinitionOutput: typeof import("./getIotwirelessTaskDefinition").getIotwirelessTaskDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessTaskDefinition","getIotwirelessTaskDefinitionOutput"], () => require("./getIotwirelessTaskDefinition"));

export { GetIotwirelessTaskDefinitionsResult } from "./getIotwirelessTaskDefinitions";
export const getIotwirelessTaskDefinitions: typeof import("./getIotwirelessTaskDefinitions").getIotwirelessTaskDefinitions = null as any;
export const getIotwirelessTaskDefinitionsOutput: typeof import("./getIotwirelessTaskDefinitions").getIotwirelessTaskDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessTaskDefinitions","getIotwirelessTaskDefinitionsOutput"], () => require("./getIotwirelessTaskDefinitions"));

export { GetIotwirelessWirelessDeviceArgs, GetIotwirelessWirelessDeviceResult, GetIotwirelessWirelessDeviceOutputArgs } from "./getIotwirelessWirelessDevice";
export const getIotwirelessWirelessDevice: typeof import("./getIotwirelessWirelessDevice").getIotwirelessWirelessDevice = null as any;
export const getIotwirelessWirelessDeviceOutput: typeof import("./getIotwirelessWirelessDevice").getIotwirelessWirelessDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessWirelessDevice","getIotwirelessWirelessDeviceOutput"], () => require("./getIotwirelessWirelessDevice"));

export { GetIotwirelessWirelessDeviceImportTaskArgs, GetIotwirelessWirelessDeviceImportTaskResult, GetIotwirelessWirelessDeviceImportTaskOutputArgs } from "./getIotwirelessWirelessDeviceImportTask";
export const getIotwirelessWirelessDeviceImportTask: typeof import("./getIotwirelessWirelessDeviceImportTask").getIotwirelessWirelessDeviceImportTask = null as any;
export const getIotwirelessWirelessDeviceImportTaskOutput: typeof import("./getIotwirelessWirelessDeviceImportTask").getIotwirelessWirelessDeviceImportTaskOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessWirelessDeviceImportTask","getIotwirelessWirelessDeviceImportTaskOutput"], () => require("./getIotwirelessWirelessDeviceImportTask"));

export { GetIotwirelessWirelessDeviceImportTasksResult } from "./getIotwirelessWirelessDeviceImportTasks";
export const getIotwirelessWirelessDeviceImportTasks: typeof import("./getIotwirelessWirelessDeviceImportTasks").getIotwirelessWirelessDeviceImportTasks = null as any;
export const getIotwirelessWirelessDeviceImportTasksOutput: typeof import("./getIotwirelessWirelessDeviceImportTasks").getIotwirelessWirelessDeviceImportTasksOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessWirelessDeviceImportTasks","getIotwirelessWirelessDeviceImportTasksOutput"], () => require("./getIotwirelessWirelessDeviceImportTasks"));

export { GetIotwirelessWirelessDevicesResult } from "./getIotwirelessWirelessDevices";
export const getIotwirelessWirelessDevices: typeof import("./getIotwirelessWirelessDevices").getIotwirelessWirelessDevices = null as any;
export const getIotwirelessWirelessDevicesOutput: typeof import("./getIotwirelessWirelessDevices").getIotwirelessWirelessDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessWirelessDevices","getIotwirelessWirelessDevicesOutput"], () => require("./getIotwirelessWirelessDevices"));

export { GetIotwirelessWirelessGatewayArgs, GetIotwirelessWirelessGatewayResult, GetIotwirelessWirelessGatewayOutputArgs } from "./getIotwirelessWirelessGateway";
export const getIotwirelessWirelessGateway: typeof import("./getIotwirelessWirelessGateway").getIotwirelessWirelessGateway = null as any;
export const getIotwirelessWirelessGatewayOutput: typeof import("./getIotwirelessWirelessGateway").getIotwirelessWirelessGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessWirelessGateway","getIotwirelessWirelessGatewayOutput"], () => require("./getIotwirelessWirelessGateway"));

export { GetIotwirelessWirelessGatewaysResult } from "./getIotwirelessWirelessGateways";
export const getIotwirelessWirelessGateways: typeof import("./getIotwirelessWirelessGateways").getIotwirelessWirelessGateways = null as any;
export const getIotwirelessWirelessGatewaysOutput: typeof import("./getIotwirelessWirelessGateways").getIotwirelessWirelessGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getIotwirelessWirelessGateways","getIotwirelessWirelessGatewaysOutput"], () => require("./getIotwirelessWirelessGateways"));

export { GetIvsChannelArgs, GetIvsChannelResult, GetIvsChannelOutputArgs } from "./getIvsChannel";
export const getIvsChannel: typeof import("./getIvsChannel").getIvsChannel = null as any;
export const getIvsChannelOutput: typeof import("./getIvsChannel").getIvsChannelOutput = null as any;
utilities.lazyLoad(exports, ["getIvsChannel","getIvsChannelOutput"], () => require("./getIvsChannel"));

export { GetIvsChannelsResult } from "./getIvsChannels";
export const getIvsChannels: typeof import("./getIvsChannels").getIvsChannels = null as any;
export const getIvsChannelsOutput: typeof import("./getIvsChannels").getIvsChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getIvsChannels","getIvsChannelsOutput"], () => require("./getIvsChannels"));

export { GetIvsEncoderConfigurationArgs, GetIvsEncoderConfigurationResult, GetIvsEncoderConfigurationOutputArgs } from "./getIvsEncoderConfiguration";
export const getIvsEncoderConfiguration: typeof import("./getIvsEncoderConfiguration").getIvsEncoderConfiguration = null as any;
export const getIvsEncoderConfigurationOutput: typeof import("./getIvsEncoderConfiguration").getIvsEncoderConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getIvsEncoderConfiguration","getIvsEncoderConfigurationOutput"], () => require("./getIvsEncoderConfiguration"));

export { GetIvsEncoderConfigurationsResult } from "./getIvsEncoderConfigurations";
export const getIvsEncoderConfigurations: typeof import("./getIvsEncoderConfigurations").getIvsEncoderConfigurations = null as any;
export const getIvsEncoderConfigurationsOutput: typeof import("./getIvsEncoderConfigurations").getIvsEncoderConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getIvsEncoderConfigurations","getIvsEncoderConfigurationsOutput"], () => require("./getIvsEncoderConfigurations"));

export { GetIvsPlaybackKeyPairArgs, GetIvsPlaybackKeyPairResult, GetIvsPlaybackKeyPairOutputArgs } from "./getIvsPlaybackKeyPair";
export const getIvsPlaybackKeyPair: typeof import("./getIvsPlaybackKeyPair").getIvsPlaybackKeyPair = null as any;
export const getIvsPlaybackKeyPairOutput: typeof import("./getIvsPlaybackKeyPair").getIvsPlaybackKeyPairOutput = null as any;
utilities.lazyLoad(exports, ["getIvsPlaybackKeyPair","getIvsPlaybackKeyPairOutput"], () => require("./getIvsPlaybackKeyPair"));

export { GetIvsPlaybackKeyPairsResult } from "./getIvsPlaybackKeyPairs";
export const getIvsPlaybackKeyPairs: typeof import("./getIvsPlaybackKeyPairs").getIvsPlaybackKeyPairs = null as any;
export const getIvsPlaybackKeyPairsOutput: typeof import("./getIvsPlaybackKeyPairs").getIvsPlaybackKeyPairsOutput = null as any;
utilities.lazyLoad(exports, ["getIvsPlaybackKeyPairs","getIvsPlaybackKeyPairsOutput"], () => require("./getIvsPlaybackKeyPairs"));

export { GetIvsPlaybackRestrictionPoliciesResult } from "./getIvsPlaybackRestrictionPolicies";
export const getIvsPlaybackRestrictionPolicies: typeof import("./getIvsPlaybackRestrictionPolicies").getIvsPlaybackRestrictionPolicies = null as any;
export const getIvsPlaybackRestrictionPoliciesOutput: typeof import("./getIvsPlaybackRestrictionPolicies").getIvsPlaybackRestrictionPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIvsPlaybackRestrictionPolicies","getIvsPlaybackRestrictionPoliciesOutput"], () => require("./getIvsPlaybackRestrictionPolicies"));

export { GetIvsPlaybackRestrictionPolicyArgs, GetIvsPlaybackRestrictionPolicyResult, GetIvsPlaybackRestrictionPolicyOutputArgs } from "./getIvsPlaybackRestrictionPolicy";
export const getIvsPlaybackRestrictionPolicy: typeof import("./getIvsPlaybackRestrictionPolicy").getIvsPlaybackRestrictionPolicy = null as any;
export const getIvsPlaybackRestrictionPolicyOutput: typeof import("./getIvsPlaybackRestrictionPolicy").getIvsPlaybackRestrictionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIvsPlaybackRestrictionPolicy","getIvsPlaybackRestrictionPolicyOutput"], () => require("./getIvsPlaybackRestrictionPolicy"));

export { GetIvsPublicKeyArgs, GetIvsPublicKeyResult, GetIvsPublicKeyOutputArgs } from "./getIvsPublicKey";
export const getIvsPublicKey: typeof import("./getIvsPublicKey").getIvsPublicKey = null as any;
export const getIvsPublicKeyOutput: typeof import("./getIvsPublicKey").getIvsPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getIvsPublicKey","getIvsPublicKeyOutput"], () => require("./getIvsPublicKey"));

export { GetIvsPublicKeysResult } from "./getIvsPublicKeys";
export const getIvsPublicKeys: typeof import("./getIvsPublicKeys").getIvsPublicKeys = null as any;
export const getIvsPublicKeysOutput: typeof import("./getIvsPublicKeys").getIvsPublicKeysOutput = null as any;
utilities.lazyLoad(exports, ["getIvsPublicKeys","getIvsPublicKeysOutput"], () => require("./getIvsPublicKeys"));

export { GetIvsRecordingConfigurationArgs, GetIvsRecordingConfigurationResult, GetIvsRecordingConfigurationOutputArgs } from "./getIvsRecordingConfiguration";
export const getIvsRecordingConfiguration: typeof import("./getIvsRecordingConfiguration").getIvsRecordingConfiguration = null as any;
export const getIvsRecordingConfigurationOutput: typeof import("./getIvsRecordingConfiguration").getIvsRecordingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getIvsRecordingConfiguration","getIvsRecordingConfigurationOutput"], () => require("./getIvsRecordingConfiguration"));

export { GetIvsRecordingConfigurationsResult } from "./getIvsRecordingConfigurations";
export const getIvsRecordingConfigurations: typeof import("./getIvsRecordingConfigurations").getIvsRecordingConfigurations = null as any;
export const getIvsRecordingConfigurationsOutput: typeof import("./getIvsRecordingConfigurations").getIvsRecordingConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getIvsRecordingConfigurations","getIvsRecordingConfigurationsOutput"], () => require("./getIvsRecordingConfigurations"));

export { GetIvsStageArgs, GetIvsStageResult, GetIvsStageOutputArgs } from "./getIvsStage";
export const getIvsStage: typeof import("./getIvsStage").getIvsStage = null as any;
export const getIvsStageOutput: typeof import("./getIvsStage").getIvsStageOutput = null as any;
utilities.lazyLoad(exports, ["getIvsStage","getIvsStageOutput"], () => require("./getIvsStage"));

export { GetIvsStagesResult } from "./getIvsStages";
export const getIvsStages: typeof import("./getIvsStages").getIvsStages = null as any;
export const getIvsStagesOutput: typeof import("./getIvsStages").getIvsStagesOutput = null as any;
utilities.lazyLoad(exports, ["getIvsStages","getIvsStagesOutput"], () => require("./getIvsStages"));

export { GetIvsStorageConfigurationArgs, GetIvsStorageConfigurationResult, GetIvsStorageConfigurationOutputArgs } from "./getIvsStorageConfiguration";
export const getIvsStorageConfiguration: typeof import("./getIvsStorageConfiguration").getIvsStorageConfiguration = null as any;
export const getIvsStorageConfigurationOutput: typeof import("./getIvsStorageConfiguration").getIvsStorageConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getIvsStorageConfiguration","getIvsStorageConfigurationOutput"], () => require("./getIvsStorageConfiguration"));

export { GetIvsStorageConfigurationsResult } from "./getIvsStorageConfigurations";
export const getIvsStorageConfigurations: typeof import("./getIvsStorageConfigurations").getIvsStorageConfigurations = null as any;
export const getIvsStorageConfigurationsOutput: typeof import("./getIvsStorageConfigurations").getIvsStorageConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getIvsStorageConfigurations","getIvsStorageConfigurationsOutput"], () => require("./getIvsStorageConfigurations"));

export { GetIvsStreamKeyArgs, GetIvsStreamKeyResult, GetIvsStreamKeyOutputArgs } from "./getIvsStreamKey";
export const getIvsStreamKey: typeof import("./getIvsStreamKey").getIvsStreamKey = null as any;
export const getIvsStreamKeyOutput: typeof import("./getIvsStreamKey").getIvsStreamKeyOutput = null as any;
utilities.lazyLoad(exports, ["getIvsStreamKey","getIvsStreamKeyOutput"], () => require("./getIvsStreamKey"));

export { GetIvschatLoggingConfigurationArgs, GetIvschatLoggingConfigurationResult, GetIvschatLoggingConfigurationOutputArgs } from "./getIvschatLoggingConfiguration";
export const getIvschatLoggingConfiguration: typeof import("./getIvschatLoggingConfiguration").getIvschatLoggingConfiguration = null as any;
export const getIvschatLoggingConfigurationOutput: typeof import("./getIvschatLoggingConfiguration").getIvschatLoggingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getIvschatLoggingConfiguration","getIvschatLoggingConfigurationOutput"], () => require("./getIvschatLoggingConfiguration"));

export { GetIvschatLoggingConfigurationsResult } from "./getIvschatLoggingConfigurations";
export const getIvschatLoggingConfigurations: typeof import("./getIvschatLoggingConfigurations").getIvschatLoggingConfigurations = null as any;
export const getIvschatLoggingConfigurationsOutput: typeof import("./getIvschatLoggingConfigurations").getIvschatLoggingConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getIvschatLoggingConfigurations","getIvschatLoggingConfigurationsOutput"], () => require("./getIvschatLoggingConfigurations"));

export { GetIvschatRoomArgs, GetIvschatRoomResult, GetIvschatRoomOutputArgs } from "./getIvschatRoom";
export const getIvschatRoom: typeof import("./getIvschatRoom").getIvschatRoom = null as any;
export const getIvschatRoomOutput: typeof import("./getIvschatRoom").getIvschatRoomOutput = null as any;
utilities.lazyLoad(exports, ["getIvschatRoom","getIvschatRoomOutput"], () => require("./getIvschatRoom"));

export { GetIvschatRoomsResult } from "./getIvschatRooms";
export const getIvschatRooms: typeof import("./getIvschatRooms").getIvschatRooms = null as any;
export const getIvschatRoomsOutput: typeof import("./getIvschatRooms").getIvschatRoomsOutput = null as any;
utilities.lazyLoad(exports, ["getIvschatRooms","getIvschatRoomsOutput"], () => require("./getIvschatRooms"));

export { GetKafkaconnectConnectorArgs, GetKafkaconnectConnectorResult, GetKafkaconnectConnectorOutputArgs } from "./getKafkaconnectConnector";
export const getKafkaconnectConnector: typeof import("./getKafkaconnectConnector").getKafkaconnectConnector = null as any;
export const getKafkaconnectConnectorOutput: typeof import("./getKafkaconnectConnector").getKafkaconnectConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaconnectConnector","getKafkaconnectConnectorOutput"], () => require("./getKafkaconnectConnector"));

export { GetKafkaconnectConnectorsResult } from "./getKafkaconnectConnectors";
export const getKafkaconnectConnectors: typeof import("./getKafkaconnectConnectors").getKafkaconnectConnectors = null as any;
export const getKafkaconnectConnectorsOutput: typeof import("./getKafkaconnectConnectors").getKafkaconnectConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaconnectConnectors","getKafkaconnectConnectorsOutput"], () => require("./getKafkaconnectConnectors"));

export { GetKafkaconnectCustomPluginArgs, GetKafkaconnectCustomPluginResult, GetKafkaconnectCustomPluginOutputArgs } from "./getKafkaconnectCustomPlugin";
export const getKafkaconnectCustomPlugin: typeof import("./getKafkaconnectCustomPlugin").getKafkaconnectCustomPlugin = null as any;
export const getKafkaconnectCustomPluginOutput: typeof import("./getKafkaconnectCustomPlugin").getKafkaconnectCustomPluginOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaconnectCustomPlugin","getKafkaconnectCustomPluginOutput"], () => require("./getKafkaconnectCustomPlugin"));

export { GetKafkaconnectCustomPluginsResult } from "./getKafkaconnectCustomPlugins";
export const getKafkaconnectCustomPlugins: typeof import("./getKafkaconnectCustomPlugins").getKafkaconnectCustomPlugins = null as any;
export const getKafkaconnectCustomPluginsOutput: typeof import("./getKafkaconnectCustomPlugins").getKafkaconnectCustomPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaconnectCustomPlugins","getKafkaconnectCustomPluginsOutput"], () => require("./getKafkaconnectCustomPlugins"));

export { GetKafkaconnectWorkerConfigurationArgs, GetKafkaconnectWorkerConfigurationResult, GetKafkaconnectWorkerConfigurationOutputArgs } from "./getKafkaconnectWorkerConfiguration";
export const getKafkaconnectWorkerConfiguration: typeof import("./getKafkaconnectWorkerConfiguration").getKafkaconnectWorkerConfiguration = null as any;
export const getKafkaconnectWorkerConfigurationOutput: typeof import("./getKafkaconnectWorkerConfiguration").getKafkaconnectWorkerConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaconnectWorkerConfiguration","getKafkaconnectWorkerConfigurationOutput"], () => require("./getKafkaconnectWorkerConfiguration"));

export { GetKafkaconnectWorkerConfigurationsResult } from "./getKafkaconnectWorkerConfigurations";
export const getKafkaconnectWorkerConfigurations: typeof import("./getKafkaconnectWorkerConfigurations").getKafkaconnectWorkerConfigurations = null as any;
export const getKafkaconnectWorkerConfigurationsOutput: typeof import("./getKafkaconnectWorkerConfigurations").getKafkaconnectWorkerConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaconnectWorkerConfigurations","getKafkaconnectWorkerConfigurationsOutput"], () => require("./getKafkaconnectWorkerConfigurations"));

export { GetKendraDataSourceArgs, GetKendraDataSourceResult, GetKendraDataSourceOutputArgs } from "./getKendraDataSource";
export const getKendraDataSource: typeof import("./getKendraDataSource").getKendraDataSource = null as any;
export const getKendraDataSourceOutput: typeof import("./getKendraDataSource").getKendraDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getKendraDataSource","getKendraDataSourceOutput"], () => require("./getKendraDataSource"));

export { GetKendraDataSourcesResult } from "./getKendraDataSources";
export const getKendraDataSources: typeof import("./getKendraDataSources").getKendraDataSources = null as any;
export const getKendraDataSourcesOutput: typeof import("./getKendraDataSources").getKendraDataSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getKendraDataSources","getKendraDataSourcesOutput"], () => require("./getKendraDataSources"));

export { GetKendraFaqArgs, GetKendraFaqResult, GetKendraFaqOutputArgs } from "./getKendraFaq";
export const getKendraFaq: typeof import("./getKendraFaq").getKendraFaq = null as any;
export const getKendraFaqOutput: typeof import("./getKendraFaq").getKendraFaqOutput = null as any;
utilities.lazyLoad(exports, ["getKendraFaq","getKendraFaqOutput"], () => require("./getKendraFaq"));

export { GetKendraFaqsResult } from "./getKendraFaqs";
export const getKendraFaqs: typeof import("./getKendraFaqs").getKendraFaqs = null as any;
export const getKendraFaqsOutput: typeof import("./getKendraFaqs").getKendraFaqsOutput = null as any;
utilities.lazyLoad(exports, ["getKendraFaqs","getKendraFaqsOutput"], () => require("./getKendraFaqs"));

export { GetKendraIndexArgs, GetKendraIndexResult, GetKendraIndexOutputArgs } from "./getKendraIndex";
export const getKendraIndex: typeof import("./getKendraIndex").getKendraIndex = null as any;
export const getKendraIndexOutput: typeof import("./getKendraIndex").getKendraIndexOutput = null as any;
utilities.lazyLoad(exports, ["getKendraIndex","getKendraIndexOutput"], () => require("./getKendraIndex"));

export { GetKendraIndicesResult } from "./getKendraIndices";
export const getKendraIndices: typeof import("./getKendraIndices").getKendraIndices = null as any;
export const getKendraIndicesOutput: typeof import("./getKendraIndices").getKendraIndicesOutput = null as any;
utilities.lazyLoad(exports, ["getKendraIndices","getKendraIndicesOutput"], () => require("./getKendraIndices"));

export { GetKendrarankingExecutionPlanArgs, GetKendrarankingExecutionPlanResult, GetKendrarankingExecutionPlanOutputArgs } from "./getKendrarankingExecutionPlan";
export const getKendrarankingExecutionPlan: typeof import("./getKendrarankingExecutionPlan").getKendrarankingExecutionPlan = null as any;
export const getKendrarankingExecutionPlanOutput: typeof import("./getKendrarankingExecutionPlan").getKendrarankingExecutionPlanOutput = null as any;
utilities.lazyLoad(exports, ["getKendrarankingExecutionPlan","getKendrarankingExecutionPlanOutput"], () => require("./getKendrarankingExecutionPlan"));

export { GetKendrarankingExecutionPlansResult } from "./getKendrarankingExecutionPlans";
export const getKendrarankingExecutionPlans: typeof import("./getKendrarankingExecutionPlans").getKendrarankingExecutionPlans = null as any;
export const getKendrarankingExecutionPlansOutput: typeof import("./getKendrarankingExecutionPlans").getKendrarankingExecutionPlansOutput = null as any;
utilities.lazyLoad(exports, ["getKendrarankingExecutionPlans","getKendrarankingExecutionPlansOutput"], () => require("./getKendrarankingExecutionPlans"));

export { GetKinesisStreamArgs, GetKinesisStreamResult, GetKinesisStreamOutputArgs } from "./getKinesisStream";
export const getKinesisStream: typeof import("./getKinesisStream").getKinesisStream = null as any;
export const getKinesisStreamOutput: typeof import("./getKinesisStream").getKinesisStreamOutput = null as any;
utilities.lazyLoad(exports, ["getKinesisStream","getKinesisStreamOutput"], () => require("./getKinesisStream"));

export { GetKinesisStreamsResult } from "./getKinesisStreams";
export const getKinesisStreams: typeof import("./getKinesisStreams").getKinesisStreams = null as any;
export const getKinesisStreamsOutput: typeof import("./getKinesisStreams").getKinesisStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getKinesisStreams","getKinesisStreamsOutput"], () => require("./getKinesisStreams"));

export { GetKinesisanalyticsv2ApplicationArgs, GetKinesisanalyticsv2ApplicationResult, GetKinesisanalyticsv2ApplicationOutputArgs } from "./getKinesisanalyticsv2Application";
export const getKinesisanalyticsv2Application: typeof import("./getKinesisanalyticsv2Application").getKinesisanalyticsv2Application = null as any;
export const getKinesisanalyticsv2ApplicationOutput: typeof import("./getKinesisanalyticsv2Application").getKinesisanalyticsv2ApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getKinesisanalyticsv2Application","getKinesisanalyticsv2ApplicationOutput"], () => require("./getKinesisanalyticsv2Application"));

export { GetKinesisanalyticsv2ApplicationsResult } from "./getKinesisanalyticsv2Applications";
export const getKinesisanalyticsv2Applications: typeof import("./getKinesisanalyticsv2Applications").getKinesisanalyticsv2Applications = null as any;
export const getKinesisanalyticsv2ApplicationsOutput: typeof import("./getKinesisanalyticsv2Applications").getKinesisanalyticsv2ApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getKinesisanalyticsv2Applications","getKinesisanalyticsv2ApplicationsOutput"], () => require("./getKinesisanalyticsv2Applications"));

export { GetKinesisfirehoseDeliveryStreamArgs, GetKinesisfirehoseDeliveryStreamResult, GetKinesisfirehoseDeliveryStreamOutputArgs } from "./getKinesisfirehoseDeliveryStream";
export const getKinesisfirehoseDeliveryStream: typeof import("./getKinesisfirehoseDeliveryStream").getKinesisfirehoseDeliveryStream = null as any;
export const getKinesisfirehoseDeliveryStreamOutput: typeof import("./getKinesisfirehoseDeliveryStream").getKinesisfirehoseDeliveryStreamOutput = null as any;
utilities.lazyLoad(exports, ["getKinesisfirehoseDeliveryStream","getKinesisfirehoseDeliveryStreamOutput"], () => require("./getKinesisfirehoseDeliveryStream"));

export { GetKinesisfirehoseDeliveryStreamsResult } from "./getKinesisfirehoseDeliveryStreams";
export const getKinesisfirehoseDeliveryStreams: typeof import("./getKinesisfirehoseDeliveryStreams").getKinesisfirehoseDeliveryStreams = null as any;
export const getKinesisfirehoseDeliveryStreamsOutput: typeof import("./getKinesisfirehoseDeliveryStreams").getKinesisfirehoseDeliveryStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getKinesisfirehoseDeliveryStreams","getKinesisfirehoseDeliveryStreamsOutput"], () => require("./getKinesisfirehoseDeliveryStreams"));

export { GetKinesisvideoSignalingChannelArgs, GetKinesisvideoSignalingChannelResult, GetKinesisvideoSignalingChannelOutputArgs } from "./getKinesisvideoSignalingChannel";
export const getKinesisvideoSignalingChannel: typeof import("./getKinesisvideoSignalingChannel").getKinesisvideoSignalingChannel = null as any;
export const getKinesisvideoSignalingChannelOutput: typeof import("./getKinesisvideoSignalingChannel").getKinesisvideoSignalingChannelOutput = null as any;
utilities.lazyLoad(exports, ["getKinesisvideoSignalingChannel","getKinesisvideoSignalingChannelOutput"], () => require("./getKinesisvideoSignalingChannel"));

export { GetKinesisvideoStreamArgs, GetKinesisvideoStreamResult, GetKinesisvideoStreamOutputArgs } from "./getKinesisvideoStream";
export const getKinesisvideoStream: typeof import("./getKinesisvideoStream").getKinesisvideoStream = null as any;
export const getKinesisvideoStreamOutput: typeof import("./getKinesisvideoStream").getKinesisvideoStreamOutput = null as any;
utilities.lazyLoad(exports, ["getKinesisvideoStream","getKinesisvideoStreamOutput"], () => require("./getKinesisvideoStream"));

export { GetKmsAliasArgs, GetKmsAliasResult, GetKmsAliasOutputArgs } from "./getKmsAlias";
export const getKmsAlias: typeof import("./getKmsAlias").getKmsAlias = null as any;
export const getKmsAliasOutput: typeof import("./getKmsAlias").getKmsAliasOutput = null as any;
utilities.lazyLoad(exports, ["getKmsAlias","getKmsAliasOutput"], () => require("./getKmsAlias"));

export { GetKmsAliasesResult } from "./getKmsAliases";
export const getKmsAliases: typeof import("./getKmsAliases").getKmsAliases = null as any;
export const getKmsAliasesOutput: typeof import("./getKmsAliases").getKmsAliasesOutput = null as any;
utilities.lazyLoad(exports, ["getKmsAliases","getKmsAliasesOutput"], () => require("./getKmsAliases"));

export { GetKmsKeyArgs, GetKmsKeyResult, GetKmsKeyOutputArgs } from "./getKmsKey";
export const getKmsKey: typeof import("./getKmsKey").getKmsKey = null as any;
export const getKmsKeyOutput: typeof import("./getKmsKey").getKmsKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKey","getKmsKeyOutput"], () => require("./getKmsKey"));

export { GetKmsKeysResult } from "./getKmsKeys";
export const getKmsKeys: typeof import("./getKmsKeys").getKmsKeys = null as any;
export const getKmsKeysOutput: typeof import("./getKmsKeys").getKmsKeysOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKeys","getKmsKeysOutput"], () => require("./getKmsKeys"));

export { GetKmsReplicaKeyArgs, GetKmsReplicaKeyResult, GetKmsReplicaKeyOutputArgs } from "./getKmsReplicaKey";
export const getKmsReplicaKey: typeof import("./getKmsReplicaKey").getKmsReplicaKey = null as any;
export const getKmsReplicaKeyOutput: typeof import("./getKmsReplicaKey").getKmsReplicaKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsReplicaKey","getKmsReplicaKeyOutput"], () => require("./getKmsReplicaKey"));

export { GetKmsReplicaKeysResult } from "./getKmsReplicaKeys";
export const getKmsReplicaKeys: typeof import("./getKmsReplicaKeys").getKmsReplicaKeys = null as any;
export const getKmsReplicaKeysOutput: typeof import("./getKmsReplicaKeys").getKmsReplicaKeysOutput = null as any;
utilities.lazyLoad(exports, ["getKmsReplicaKeys","getKmsReplicaKeysOutput"], () => require("./getKmsReplicaKeys"));

export { GetLakeformationDataCellsFilterArgs, GetLakeformationDataCellsFilterResult, GetLakeformationDataCellsFilterOutputArgs } from "./getLakeformationDataCellsFilter";
export const getLakeformationDataCellsFilter: typeof import("./getLakeformationDataCellsFilter").getLakeformationDataCellsFilter = null as any;
export const getLakeformationDataCellsFilterOutput: typeof import("./getLakeformationDataCellsFilter").getLakeformationDataCellsFilterOutput = null as any;
utilities.lazyLoad(exports, ["getLakeformationDataCellsFilter","getLakeformationDataCellsFilterOutput"], () => require("./getLakeformationDataCellsFilter"));

export { GetLakeformationDataCellsFiltersResult } from "./getLakeformationDataCellsFilters";
export const getLakeformationDataCellsFilters: typeof import("./getLakeformationDataCellsFilters").getLakeformationDataCellsFilters = null as any;
export const getLakeformationDataCellsFiltersOutput: typeof import("./getLakeformationDataCellsFilters").getLakeformationDataCellsFiltersOutput = null as any;
utilities.lazyLoad(exports, ["getLakeformationDataCellsFilters","getLakeformationDataCellsFiltersOutput"], () => require("./getLakeformationDataCellsFilters"));

export { GetLakeformationPrincipalPermissionsArgs, GetLakeformationPrincipalPermissionsResult, GetLakeformationPrincipalPermissionsOutputArgs } from "./getLakeformationPrincipalPermissions";
export const getLakeformationPrincipalPermissions: typeof import("./getLakeformationPrincipalPermissions").getLakeformationPrincipalPermissions = null as any;
export const getLakeformationPrincipalPermissionsOutput: typeof import("./getLakeformationPrincipalPermissions").getLakeformationPrincipalPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getLakeformationPrincipalPermissions","getLakeformationPrincipalPermissionsOutput"], () => require("./getLakeformationPrincipalPermissions"));

export { GetLakeformationTagArgs, GetLakeformationTagResult, GetLakeformationTagOutputArgs } from "./getLakeformationTag";
export const getLakeformationTag: typeof import("./getLakeformationTag").getLakeformationTag = null as any;
export const getLakeformationTagOutput: typeof import("./getLakeformationTag").getLakeformationTagOutput = null as any;
utilities.lazyLoad(exports, ["getLakeformationTag","getLakeformationTagOutput"], () => require("./getLakeformationTag"));

export { GetLakeformationTagAssociationArgs, GetLakeformationTagAssociationResult, GetLakeformationTagAssociationOutputArgs } from "./getLakeformationTagAssociation";
export const getLakeformationTagAssociation: typeof import("./getLakeformationTagAssociation").getLakeformationTagAssociation = null as any;
export const getLakeformationTagAssociationOutput: typeof import("./getLakeformationTagAssociation").getLakeformationTagAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getLakeformationTagAssociation","getLakeformationTagAssociationOutput"], () => require("./getLakeformationTagAssociation"));

export { GetLakeformationTagsResult } from "./getLakeformationTags";
export const getLakeformationTags: typeof import("./getLakeformationTags").getLakeformationTags = null as any;
export const getLakeformationTagsOutput: typeof import("./getLakeformationTags").getLakeformationTagsOutput = null as any;
utilities.lazyLoad(exports, ["getLakeformationTags","getLakeformationTagsOutput"], () => require("./getLakeformationTags"));

export { GetLambdaAliasArgs, GetLambdaAliasResult, GetLambdaAliasOutputArgs } from "./getLambdaAlias";
export const getLambdaAlias: typeof import("./getLambdaAlias").getLambdaAlias = null as any;
export const getLambdaAliasOutput: typeof import("./getLambdaAlias").getLambdaAliasOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaAlias","getLambdaAliasOutput"], () => require("./getLambdaAlias"));

export { GetLambdaCodeSigningConfigArgs, GetLambdaCodeSigningConfigResult, GetLambdaCodeSigningConfigOutputArgs } from "./getLambdaCodeSigningConfig";
export const getLambdaCodeSigningConfig: typeof import("./getLambdaCodeSigningConfig").getLambdaCodeSigningConfig = null as any;
export const getLambdaCodeSigningConfigOutput: typeof import("./getLambdaCodeSigningConfig").getLambdaCodeSigningConfigOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaCodeSigningConfig","getLambdaCodeSigningConfigOutput"], () => require("./getLambdaCodeSigningConfig"));

export { GetLambdaCodeSigningConfigsResult } from "./getLambdaCodeSigningConfigs";
export const getLambdaCodeSigningConfigs: typeof import("./getLambdaCodeSigningConfigs").getLambdaCodeSigningConfigs = null as any;
export const getLambdaCodeSigningConfigsOutput: typeof import("./getLambdaCodeSigningConfigs").getLambdaCodeSigningConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaCodeSigningConfigs","getLambdaCodeSigningConfigsOutput"], () => require("./getLambdaCodeSigningConfigs"));

export { GetLambdaEventInvokeConfigArgs, GetLambdaEventInvokeConfigResult, GetLambdaEventInvokeConfigOutputArgs } from "./getLambdaEventInvokeConfig";
export const getLambdaEventInvokeConfig: typeof import("./getLambdaEventInvokeConfig").getLambdaEventInvokeConfig = null as any;
export const getLambdaEventInvokeConfigOutput: typeof import("./getLambdaEventInvokeConfig").getLambdaEventInvokeConfigOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaEventInvokeConfig","getLambdaEventInvokeConfigOutput"], () => require("./getLambdaEventInvokeConfig"));

export { GetLambdaEventSourceMappingArgs, GetLambdaEventSourceMappingResult, GetLambdaEventSourceMappingOutputArgs } from "./getLambdaEventSourceMapping";
export const getLambdaEventSourceMapping: typeof import("./getLambdaEventSourceMapping").getLambdaEventSourceMapping = null as any;
export const getLambdaEventSourceMappingOutput: typeof import("./getLambdaEventSourceMapping").getLambdaEventSourceMappingOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaEventSourceMapping","getLambdaEventSourceMappingOutput"], () => require("./getLambdaEventSourceMapping"));

export { GetLambdaEventSourceMappingsResult } from "./getLambdaEventSourceMappings";
export const getLambdaEventSourceMappings: typeof import("./getLambdaEventSourceMappings").getLambdaEventSourceMappings = null as any;
export const getLambdaEventSourceMappingsOutput: typeof import("./getLambdaEventSourceMappings").getLambdaEventSourceMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaEventSourceMappings","getLambdaEventSourceMappingsOutput"], () => require("./getLambdaEventSourceMappings"));

export { GetLambdaFunctionArgs, GetLambdaFunctionResult, GetLambdaFunctionOutputArgs } from "./getLambdaFunction";
export const getLambdaFunction: typeof import("./getLambdaFunction").getLambdaFunction = null as any;
export const getLambdaFunctionOutput: typeof import("./getLambdaFunction").getLambdaFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaFunction","getLambdaFunctionOutput"], () => require("./getLambdaFunction"));

export { GetLambdaFunctionsResult } from "./getLambdaFunctions";
export const getLambdaFunctions: typeof import("./getLambdaFunctions").getLambdaFunctions = null as any;
export const getLambdaFunctionsOutput: typeof import("./getLambdaFunctions").getLambdaFunctionsOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaFunctions","getLambdaFunctionsOutput"], () => require("./getLambdaFunctions"));

export { GetLambdaLayerVersionArgs, GetLambdaLayerVersionResult, GetLambdaLayerVersionOutputArgs } from "./getLambdaLayerVersion";
export const getLambdaLayerVersion: typeof import("./getLambdaLayerVersion").getLambdaLayerVersion = null as any;
export const getLambdaLayerVersionOutput: typeof import("./getLambdaLayerVersion").getLambdaLayerVersionOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaLayerVersion","getLambdaLayerVersionOutput"], () => require("./getLambdaLayerVersion"));

export { GetLambdaLayerVersionPermissionArgs, GetLambdaLayerVersionPermissionResult, GetLambdaLayerVersionPermissionOutputArgs } from "./getLambdaLayerVersionPermission";
export const getLambdaLayerVersionPermission: typeof import("./getLambdaLayerVersionPermission").getLambdaLayerVersionPermission = null as any;
export const getLambdaLayerVersionPermissionOutput: typeof import("./getLambdaLayerVersionPermission").getLambdaLayerVersionPermissionOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaLayerVersionPermission","getLambdaLayerVersionPermissionOutput"], () => require("./getLambdaLayerVersionPermission"));

export { GetLambdaLayerVersionPermissionsResult } from "./getLambdaLayerVersionPermissions";
export const getLambdaLayerVersionPermissions: typeof import("./getLambdaLayerVersionPermissions").getLambdaLayerVersionPermissions = null as any;
export const getLambdaLayerVersionPermissionsOutput: typeof import("./getLambdaLayerVersionPermissions").getLambdaLayerVersionPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaLayerVersionPermissions","getLambdaLayerVersionPermissionsOutput"], () => require("./getLambdaLayerVersionPermissions"));

export { GetLambdaLayerVersionsResult } from "./getLambdaLayerVersions";
export const getLambdaLayerVersions: typeof import("./getLambdaLayerVersions").getLambdaLayerVersions = null as any;
export const getLambdaLayerVersionsOutput: typeof import("./getLambdaLayerVersions").getLambdaLayerVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaLayerVersions","getLambdaLayerVersionsOutput"], () => require("./getLambdaLayerVersions"));

export { GetLambdaPermissionArgs, GetLambdaPermissionResult, GetLambdaPermissionOutputArgs } from "./getLambdaPermission";
export const getLambdaPermission: typeof import("./getLambdaPermission").getLambdaPermission = null as any;
export const getLambdaPermissionOutput: typeof import("./getLambdaPermission").getLambdaPermissionOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaPermission","getLambdaPermissionOutput"], () => require("./getLambdaPermission"));

export { GetLambdaUrlArgs, GetLambdaUrlResult, GetLambdaUrlOutputArgs } from "./getLambdaUrl";
export const getLambdaUrl: typeof import("./getLambdaUrl").getLambdaUrl = null as any;
export const getLambdaUrlOutput: typeof import("./getLambdaUrl").getLambdaUrlOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaUrl","getLambdaUrlOutput"], () => require("./getLambdaUrl"));

export { GetLambdaVersionArgs, GetLambdaVersionResult, GetLambdaVersionOutputArgs } from "./getLambdaVersion";
export const getLambdaVersion: typeof import("./getLambdaVersion").getLambdaVersion = null as any;
export const getLambdaVersionOutput: typeof import("./getLambdaVersion").getLambdaVersionOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaVersion","getLambdaVersionOutput"], () => require("./getLambdaVersion"));

export { GetLaunchwizardDeploymentArgs, GetLaunchwizardDeploymentResult, GetLaunchwizardDeploymentOutputArgs } from "./getLaunchwizardDeployment";
export const getLaunchwizardDeployment: typeof import("./getLaunchwizardDeployment").getLaunchwizardDeployment = null as any;
export const getLaunchwizardDeploymentOutput: typeof import("./getLaunchwizardDeployment").getLaunchwizardDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchwizardDeployment","getLaunchwizardDeploymentOutput"], () => require("./getLaunchwizardDeployment"));

export { GetLaunchwizardDeploymentsResult } from "./getLaunchwizardDeployments";
export const getLaunchwizardDeployments: typeof import("./getLaunchwizardDeployments").getLaunchwizardDeployments = null as any;
export const getLaunchwizardDeploymentsOutput: typeof import("./getLaunchwizardDeployments").getLaunchwizardDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchwizardDeployments","getLaunchwizardDeploymentsOutput"], () => require("./getLaunchwizardDeployments"));

export { GetLexBotArgs, GetLexBotResult, GetLexBotOutputArgs } from "./getLexBot";
export const getLexBot: typeof import("./getLexBot").getLexBot = null as any;
export const getLexBotOutput: typeof import("./getLexBot").getLexBotOutput = null as any;
utilities.lazyLoad(exports, ["getLexBot","getLexBotOutput"], () => require("./getLexBot"));

export { GetLexBotAliasArgs, GetLexBotAliasResult, GetLexBotAliasOutputArgs } from "./getLexBotAlias";
export const getLexBotAlias: typeof import("./getLexBotAlias").getLexBotAlias = null as any;
export const getLexBotAliasOutput: typeof import("./getLexBotAlias").getLexBotAliasOutput = null as any;
utilities.lazyLoad(exports, ["getLexBotAlias","getLexBotAliasOutput"], () => require("./getLexBotAlias"));

export { GetLexBotAliasesResult } from "./getLexBotAliases";
export const getLexBotAliases: typeof import("./getLexBotAliases").getLexBotAliases = null as any;
export const getLexBotAliasesOutput: typeof import("./getLexBotAliases").getLexBotAliasesOutput = null as any;
utilities.lazyLoad(exports, ["getLexBotAliases","getLexBotAliasesOutput"], () => require("./getLexBotAliases"));

export { GetLexBotVersionArgs, GetLexBotVersionResult, GetLexBotVersionOutputArgs } from "./getLexBotVersion";
export const getLexBotVersion: typeof import("./getLexBotVersion").getLexBotVersion = null as any;
export const getLexBotVersionOutput: typeof import("./getLexBotVersion").getLexBotVersionOutput = null as any;
utilities.lazyLoad(exports, ["getLexBotVersion","getLexBotVersionOutput"], () => require("./getLexBotVersion"));

export { GetLexBotVersionsResult } from "./getLexBotVersions";
export const getLexBotVersions: typeof import("./getLexBotVersions").getLexBotVersions = null as any;
export const getLexBotVersionsOutput: typeof import("./getLexBotVersions").getLexBotVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getLexBotVersions","getLexBotVersionsOutput"], () => require("./getLexBotVersions"));

export { GetLexBotsResult } from "./getLexBots";
export const getLexBots: typeof import("./getLexBots").getLexBots = null as any;
export const getLexBotsOutput: typeof import("./getLexBots").getLexBotsOutput = null as any;
utilities.lazyLoad(exports, ["getLexBots","getLexBotsOutput"], () => require("./getLexBots"));

export { GetLexResourcePoliciesResult } from "./getLexResourcePolicies";
export const getLexResourcePolicies: typeof import("./getLexResourcePolicies").getLexResourcePolicies = null as any;
export const getLexResourcePoliciesOutput: typeof import("./getLexResourcePolicies").getLexResourcePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getLexResourcePolicies","getLexResourcePoliciesOutput"], () => require("./getLexResourcePolicies"));

export { GetLexResourcePolicyArgs, GetLexResourcePolicyResult, GetLexResourcePolicyOutputArgs } from "./getLexResourcePolicy";
export const getLexResourcePolicy: typeof import("./getLexResourcePolicy").getLexResourcePolicy = null as any;
export const getLexResourcePolicyOutput: typeof import("./getLexResourcePolicy").getLexResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLexResourcePolicy","getLexResourcePolicyOutput"], () => require("./getLexResourcePolicy"));

export { GetLicensemanagerGrantArgs, GetLicensemanagerGrantResult, GetLicensemanagerGrantOutputArgs } from "./getLicensemanagerGrant";
export const getLicensemanagerGrant: typeof import("./getLicensemanagerGrant").getLicensemanagerGrant = null as any;
export const getLicensemanagerGrantOutput: typeof import("./getLicensemanagerGrant").getLicensemanagerGrantOutput = null as any;
utilities.lazyLoad(exports, ["getLicensemanagerGrant","getLicensemanagerGrantOutput"], () => require("./getLicensemanagerGrant"));

export { GetLicensemanagerGrantsResult } from "./getLicensemanagerGrants";
export const getLicensemanagerGrants: typeof import("./getLicensemanagerGrants").getLicensemanagerGrants = null as any;
export const getLicensemanagerGrantsOutput: typeof import("./getLicensemanagerGrants").getLicensemanagerGrantsOutput = null as any;
utilities.lazyLoad(exports, ["getLicensemanagerGrants","getLicensemanagerGrantsOutput"], () => require("./getLicensemanagerGrants"));

export { GetLicensemanagerLicenseArgs, GetLicensemanagerLicenseResult, GetLicensemanagerLicenseOutputArgs } from "./getLicensemanagerLicense";
export const getLicensemanagerLicense: typeof import("./getLicensemanagerLicense").getLicensemanagerLicense = null as any;
export const getLicensemanagerLicenseOutput: typeof import("./getLicensemanagerLicense").getLicensemanagerLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getLicensemanagerLicense","getLicensemanagerLicenseOutput"], () => require("./getLicensemanagerLicense"));

export { GetLicensemanagerLicensesResult } from "./getLicensemanagerLicenses";
export const getLicensemanagerLicenses: typeof import("./getLicensemanagerLicenses").getLicensemanagerLicenses = null as any;
export const getLicensemanagerLicensesOutput: typeof import("./getLicensemanagerLicenses").getLicensemanagerLicensesOutput = null as any;
utilities.lazyLoad(exports, ["getLicensemanagerLicenses","getLicensemanagerLicensesOutput"], () => require("./getLicensemanagerLicenses"));

export { GetLightsailAlarmArgs, GetLightsailAlarmResult, GetLightsailAlarmOutputArgs } from "./getLightsailAlarm";
export const getLightsailAlarm: typeof import("./getLightsailAlarm").getLightsailAlarm = null as any;
export const getLightsailAlarmOutput: typeof import("./getLightsailAlarm").getLightsailAlarmOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailAlarm","getLightsailAlarmOutput"], () => require("./getLightsailAlarm"));

export { GetLightsailAlarmsResult } from "./getLightsailAlarms";
export const getLightsailAlarms: typeof import("./getLightsailAlarms").getLightsailAlarms = null as any;
export const getLightsailAlarmsOutput: typeof import("./getLightsailAlarms").getLightsailAlarmsOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailAlarms","getLightsailAlarmsOutput"], () => require("./getLightsailAlarms"));

export { GetLightsailBucketArgs, GetLightsailBucketResult, GetLightsailBucketOutputArgs } from "./getLightsailBucket";
export const getLightsailBucket: typeof import("./getLightsailBucket").getLightsailBucket = null as any;
export const getLightsailBucketOutput: typeof import("./getLightsailBucket").getLightsailBucketOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailBucket","getLightsailBucketOutput"], () => require("./getLightsailBucket"));

export { GetLightsailBucketsResult } from "./getLightsailBuckets";
export const getLightsailBuckets: typeof import("./getLightsailBuckets").getLightsailBuckets = null as any;
export const getLightsailBucketsOutput: typeof import("./getLightsailBuckets").getLightsailBucketsOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailBuckets","getLightsailBucketsOutput"], () => require("./getLightsailBuckets"));

export { GetLightsailCertificateArgs, GetLightsailCertificateResult, GetLightsailCertificateOutputArgs } from "./getLightsailCertificate";
export const getLightsailCertificate: typeof import("./getLightsailCertificate").getLightsailCertificate = null as any;
export const getLightsailCertificateOutput: typeof import("./getLightsailCertificate").getLightsailCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailCertificate","getLightsailCertificateOutput"], () => require("./getLightsailCertificate"));

export { GetLightsailCertificatesResult } from "./getLightsailCertificates";
export const getLightsailCertificates: typeof import("./getLightsailCertificates").getLightsailCertificates = null as any;
export const getLightsailCertificatesOutput: typeof import("./getLightsailCertificates").getLightsailCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailCertificates","getLightsailCertificatesOutput"], () => require("./getLightsailCertificates"));

export { GetLightsailContainerArgs, GetLightsailContainerResult, GetLightsailContainerOutputArgs } from "./getLightsailContainer";
export const getLightsailContainer: typeof import("./getLightsailContainer").getLightsailContainer = null as any;
export const getLightsailContainerOutput: typeof import("./getLightsailContainer").getLightsailContainerOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailContainer","getLightsailContainerOutput"], () => require("./getLightsailContainer"));

export { GetLightsailContainersResult } from "./getLightsailContainers";
export const getLightsailContainers: typeof import("./getLightsailContainers").getLightsailContainers = null as any;
export const getLightsailContainersOutput: typeof import("./getLightsailContainers").getLightsailContainersOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailContainers","getLightsailContainersOutput"], () => require("./getLightsailContainers"));

export { GetLightsailDatabaseArgs, GetLightsailDatabaseResult, GetLightsailDatabaseOutputArgs } from "./getLightsailDatabase";
export const getLightsailDatabase: typeof import("./getLightsailDatabase").getLightsailDatabase = null as any;
export const getLightsailDatabaseOutput: typeof import("./getLightsailDatabase").getLightsailDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailDatabase","getLightsailDatabaseOutput"], () => require("./getLightsailDatabase"));

export { GetLightsailDatabasesResult } from "./getLightsailDatabases";
export const getLightsailDatabases: typeof import("./getLightsailDatabases").getLightsailDatabases = null as any;
export const getLightsailDatabasesOutput: typeof import("./getLightsailDatabases").getLightsailDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailDatabases","getLightsailDatabasesOutput"], () => require("./getLightsailDatabases"));

export { GetLightsailDiskArgs, GetLightsailDiskResult, GetLightsailDiskOutputArgs } from "./getLightsailDisk";
export const getLightsailDisk: typeof import("./getLightsailDisk").getLightsailDisk = null as any;
export const getLightsailDiskOutput: typeof import("./getLightsailDisk").getLightsailDiskOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailDisk","getLightsailDiskOutput"], () => require("./getLightsailDisk"));

export { GetLightsailDisksResult } from "./getLightsailDisks";
export const getLightsailDisks: typeof import("./getLightsailDisks").getLightsailDisks = null as any;
export const getLightsailDisksOutput: typeof import("./getLightsailDisks").getLightsailDisksOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailDisks","getLightsailDisksOutput"], () => require("./getLightsailDisks"));

export { GetLightsailDistributionArgs, GetLightsailDistributionResult, GetLightsailDistributionOutputArgs } from "./getLightsailDistribution";
export const getLightsailDistribution: typeof import("./getLightsailDistribution").getLightsailDistribution = null as any;
export const getLightsailDistributionOutput: typeof import("./getLightsailDistribution").getLightsailDistributionOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailDistribution","getLightsailDistributionOutput"], () => require("./getLightsailDistribution"));

export { GetLightsailDistributionsResult } from "./getLightsailDistributions";
export const getLightsailDistributions: typeof import("./getLightsailDistributions").getLightsailDistributions = null as any;
export const getLightsailDistributionsOutput: typeof import("./getLightsailDistributions").getLightsailDistributionsOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailDistributions","getLightsailDistributionsOutput"], () => require("./getLightsailDistributions"));

export { GetLightsailInstanceArgs, GetLightsailInstanceResult, GetLightsailInstanceOutputArgs } from "./getLightsailInstance";
export const getLightsailInstance: typeof import("./getLightsailInstance").getLightsailInstance = null as any;
export const getLightsailInstanceOutput: typeof import("./getLightsailInstance").getLightsailInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailInstance","getLightsailInstanceOutput"], () => require("./getLightsailInstance"));

export { GetLightsailInstancesResult } from "./getLightsailInstances";
export const getLightsailInstances: typeof import("./getLightsailInstances").getLightsailInstances = null as any;
export const getLightsailInstancesOutput: typeof import("./getLightsailInstances").getLightsailInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailInstances","getLightsailInstancesOutput"], () => require("./getLightsailInstances"));

export { GetLightsailLoadBalancerArgs, GetLightsailLoadBalancerResult, GetLightsailLoadBalancerOutputArgs } from "./getLightsailLoadBalancer";
export const getLightsailLoadBalancer: typeof import("./getLightsailLoadBalancer").getLightsailLoadBalancer = null as any;
export const getLightsailLoadBalancerOutput: typeof import("./getLightsailLoadBalancer").getLightsailLoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailLoadBalancer","getLightsailLoadBalancerOutput"], () => require("./getLightsailLoadBalancer"));

export { GetLightsailLoadBalancerTlsCertificateArgs, GetLightsailLoadBalancerTlsCertificateResult, GetLightsailLoadBalancerTlsCertificateOutputArgs } from "./getLightsailLoadBalancerTlsCertificate";
export const getLightsailLoadBalancerTlsCertificate: typeof import("./getLightsailLoadBalancerTlsCertificate").getLightsailLoadBalancerTlsCertificate = null as any;
export const getLightsailLoadBalancerTlsCertificateOutput: typeof import("./getLightsailLoadBalancerTlsCertificate").getLightsailLoadBalancerTlsCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailLoadBalancerTlsCertificate","getLightsailLoadBalancerTlsCertificateOutput"], () => require("./getLightsailLoadBalancerTlsCertificate"));

export { GetLightsailLoadBalancerTlsCertificatesResult } from "./getLightsailLoadBalancerTlsCertificates";
export const getLightsailLoadBalancerTlsCertificates: typeof import("./getLightsailLoadBalancerTlsCertificates").getLightsailLoadBalancerTlsCertificates = null as any;
export const getLightsailLoadBalancerTlsCertificatesOutput: typeof import("./getLightsailLoadBalancerTlsCertificates").getLightsailLoadBalancerTlsCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailLoadBalancerTlsCertificates","getLightsailLoadBalancerTlsCertificatesOutput"], () => require("./getLightsailLoadBalancerTlsCertificates"));

export { GetLightsailLoadBalancersResult } from "./getLightsailLoadBalancers";
export const getLightsailLoadBalancers: typeof import("./getLightsailLoadBalancers").getLightsailLoadBalancers = null as any;
export const getLightsailLoadBalancersOutput: typeof import("./getLightsailLoadBalancers").getLightsailLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailLoadBalancers","getLightsailLoadBalancersOutput"], () => require("./getLightsailLoadBalancers"));

export { GetLightsailStaticIpArgs, GetLightsailStaticIpResult, GetLightsailStaticIpOutputArgs } from "./getLightsailStaticIp";
export const getLightsailStaticIp: typeof import("./getLightsailStaticIp").getLightsailStaticIp = null as any;
export const getLightsailStaticIpOutput: typeof import("./getLightsailStaticIp").getLightsailStaticIpOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailStaticIp","getLightsailStaticIpOutput"], () => require("./getLightsailStaticIp"));

export { GetLightsailStaticIpsResult } from "./getLightsailStaticIps";
export const getLightsailStaticIps: typeof import("./getLightsailStaticIps").getLightsailStaticIps = null as any;
export const getLightsailStaticIpsOutput: typeof import("./getLightsailStaticIps").getLightsailStaticIpsOutput = null as any;
utilities.lazyLoad(exports, ["getLightsailStaticIps","getLightsailStaticIpsOutput"], () => require("./getLightsailStaticIps"));

export { GetLocationApiKeyArgs, GetLocationApiKeyResult, GetLocationApiKeyOutputArgs } from "./getLocationApiKey";
export const getLocationApiKey: typeof import("./getLocationApiKey").getLocationApiKey = null as any;
export const getLocationApiKeyOutput: typeof import("./getLocationApiKey").getLocationApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getLocationApiKey","getLocationApiKeyOutput"], () => require("./getLocationApiKey"));

export { GetLocationApiKeysResult } from "./getLocationApiKeys";
export const getLocationApiKeys: typeof import("./getLocationApiKeys").getLocationApiKeys = null as any;
export const getLocationApiKeysOutput: typeof import("./getLocationApiKeys").getLocationApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getLocationApiKeys","getLocationApiKeysOutput"], () => require("./getLocationApiKeys"));

export { GetLocationGeofenceCollectionArgs, GetLocationGeofenceCollectionResult, GetLocationGeofenceCollectionOutputArgs } from "./getLocationGeofenceCollection";
export const getLocationGeofenceCollection: typeof import("./getLocationGeofenceCollection").getLocationGeofenceCollection = null as any;
export const getLocationGeofenceCollectionOutput: typeof import("./getLocationGeofenceCollection").getLocationGeofenceCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getLocationGeofenceCollection","getLocationGeofenceCollectionOutput"], () => require("./getLocationGeofenceCollection"));

export { GetLocationGeofenceCollectionsResult } from "./getLocationGeofenceCollections";
export const getLocationGeofenceCollections: typeof import("./getLocationGeofenceCollections").getLocationGeofenceCollections = null as any;
export const getLocationGeofenceCollectionsOutput: typeof import("./getLocationGeofenceCollections").getLocationGeofenceCollectionsOutput = null as any;
utilities.lazyLoad(exports, ["getLocationGeofenceCollections","getLocationGeofenceCollectionsOutput"], () => require("./getLocationGeofenceCollections"));

export { GetLocationMapArgs, GetLocationMapResult, GetLocationMapOutputArgs } from "./getLocationMap";
export const getLocationMap: typeof import("./getLocationMap").getLocationMap = null as any;
export const getLocationMapOutput: typeof import("./getLocationMap").getLocationMapOutput = null as any;
utilities.lazyLoad(exports, ["getLocationMap","getLocationMapOutput"], () => require("./getLocationMap"));

export { GetLocationMapsResult } from "./getLocationMaps";
export const getLocationMaps: typeof import("./getLocationMaps").getLocationMaps = null as any;
export const getLocationMapsOutput: typeof import("./getLocationMaps").getLocationMapsOutput = null as any;
utilities.lazyLoad(exports, ["getLocationMaps","getLocationMapsOutput"], () => require("./getLocationMaps"));

export { GetLocationPlaceIndexArgs, GetLocationPlaceIndexResult, GetLocationPlaceIndexOutputArgs } from "./getLocationPlaceIndex";
export const getLocationPlaceIndex: typeof import("./getLocationPlaceIndex").getLocationPlaceIndex = null as any;
export const getLocationPlaceIndexOutput: typeof import("./getLocationPlaceIndex").getLocationPlaceIndexOutput = null as any;
utilities.lazyLoad(exports, ["getLocationPlaceIndex","getLocationPlaceIndexOutput"], () => require("./getLocationPlaceIndex"));

export { GetLocationPlaceIndicesResult } from "./getLocationPlaceIndices";
export const getLocationPlaceIndices: typeof import("./getLocationPlaceIndices").getLocationPlaceIndices = null as any;
export const getLocationPlaceIndicesOutput: typeof import("./getLocationPlaceIndices").getLocationPlaceIndicesOutput = null as any;
utilities.lazyLoad(exports, ["getLocationPlaceIndices","getLocationPlaceIndicesOutput"], () => require("./getLocationPlaceIndices"));

export { GetLocationRouteCalculatorArgs, GetLocationRouteCalculatorResult, GetLocationRouteCalculatorOutputArgs } from "./getLocationRouteCalculator";
export const getLocationRouteCalculator: typeof import("./getLocationRouteCalculator").getLocationRouteCalculator = null as any;
export const getLocationRouteCalculatorOutput: typeof import("./getLocationRouteCalculator").getLocationRouteCalculatorOutput = null as any;
utilities.lazyLoad(exports, ["getLocationRouteCalculator","getLocationRouteCalculatorOutput"], () => require("./getLocationRouteCalculator"));

export { GetLocationRouteCalculatorsResult } from "./getLocationRouteCalculators";
export const getLocationRouteCalculators: typeof import("./getLocationRouteCalculators").getLocationRouteCalculators = null as any;
export const getLocationRouteCalculatorsOutput: typeof import("./getLocationRouteCalculators").getLocationRouteCalculatorsOutput = null as any;
utilities.lazyLoad(exports, ["getLocationRouteCalculators","getLocationRouteCalculatorsOutput"], () => require("./getLocationRouteCalculators"));

export { GetLocationTrackerArgs, GetLocationTrackerResult, GetLocationTrackerOutputArgs } from "./getLocationTracker";
export const getLocationTracker: typeof import("./getLocationTracker").getLocationTracker = null as any;
export const getLocationTrackerOutput: typeof import("./getLocationTracker").getLocationTrackerOutput = null as any;
utilities.lazyLoad(exports, ["getLocationTracker","getLocationTrackerOutput"], () => require("./getLocationTracker"));

export { GetLocationTrackerConsumerArgs, GetLocationTrackerConsumerResult, GetLocationTrackerConsumerOutputArgs } from "./getLocationTrackerConsumer";
export const getLocationTrackerConsumer: typeof import("./getLocationTrackerConsumer").getLocationTrackerConsumer = null as any;
export const getLocationTrackerConsumerOutput: typeof import("./getLocationTrackerConsumer").getLocationTrackerConsumerOutput = null as any;
utilities.lazyLoad(exports, ["getLocationTrackerConsumer","getLocationTrackerConsumerOutput"], () => require("./getLocationTrackerConsumer"));

export { GetLocationTrackerConsumersResult } from "./getLocationTrackerConsumers";
export const getLocationTrackerConsumers: typeof import("./getLocationTrackerConsumers").getLocationTrackerConsumers = null as any;
export const getLocationTrackerConsumersOutput: typeof import("./getLocationTrackerConsumers").getLocationTrackerConsumersOutput = null as any;
utilities.lazyLoad(exports, ["getLocationTrackerConsumers","getLocationTrackerConsumersOutput"], () => require("./getLocationTrackerConsumers"));

export { GetLocationTrackersResult } from "./getLocationTrackers";
export const getLocationTrackers: typeof import("./getLocationTrackers").getLocationTrackers = null as any;
export const getLocationTrackersOutput: typeof import("./getLocationTrackers").getLocationTrackersOutput = null as any;
utilities.lazyLoad(exports, ["getLocationTrackers","getLocationTrackersOutput"], () => require("./getLocationTrackers"));

export { GetLogsAccountPolicyArgs, GetLogsAccountPolicyResult, GetLogsAccountPolicyOutputArgs } from "./getLogsAccountPolicy";
export const getLogsAccountPolicy: typeof import("./getLogsAccountPolicy").getLogsAccountPolicy = null as any;
export const getLogsAccountPolicyOutput: typeof import("./getLogsAccountPolicy").getLogsAccountPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLogsAccountPolicy","getLogsAccountPolicyOutput"], () => require("./getLogsAccountPolicy"));

export { GetLogsDeliveriesResult } from "./getLogsDeliveries";
export const getLogsDeliveries: typeof import("./getLogsDeliveries").getLogsDeliveries = null as any;
export const getLogsDeliveriesOutput: typeof import("./getLogsDeliveries").getLogsDeliveriesOutput = null as any;
utilities.lazyLoad(exports, ["getLogsDeliveries","getLogsDeliveriesOutput"], () => require("./getLogsDeliveries"));

export { GetLogsDeliveryArgs, GetLogsDeliveryResult, GetLogsDeliveryOutputArgs } from "./getLogsDelivery";
export const getLogsDelivery: typeof import("./getLogsDelivery").getLogsDelivery = null as any;
export const getLogsDeliveryOutput: typeof import("./getLogsDelivery").getLogsDeliveryOutput = null as any;
utilities.lazyLoad(exports, ["getLogsDelivery","getLogsDeliveryOutput"], () => require("./getLogsDelivery"));

export { GetLogsDeliveryDestinationArgs, GetLogsDeliveryDestinationResult, GetLogsDeliveryDestinationOutputArgs } from "./getLogsDeliveryDestination";
export const getLogsDeliveryDestination: typeof import("./getLogsDeliveryDestination").getLogsDeliveryDestination = null as any;
export const getLogsDeliveryDestinationOutput: typeof import("./getLogsDeliveryDestination").getLogsDeliveryDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getLogsDeliveryDestination","getLogsDeliveryDestinationOutput"], () => require("./getLogsDeliveryDestination"));

export { GetLogsDeliveryDestinationsResult } from "./getLogsDeliveryDestinations";
export const getLogsDeliveryDestinations: typeof import("./getLogsDeliveryDestinations").getLogsDeliveryDestinations = null as any;
export const getLogsDeliveryDestinationsOutput: typeof import("./getLogsDeliveryDestinations").getLogsDeliveryDestinationsOutput = null as any;
utilities.lazyLoad(exports, ["getLogsDeliveryDestinations","getLogsDeliveryDestinationsOutput"], () => require("./getLogsDeliveryDestinations"));

export { GetLogsDeliverySourceArgs, GetLogsDeliverySourceResult, GetLogsDeliverySourceOutputArgs } from "./getLogsDeliverySource";
export const getLogsDeliverySource: typeof import("./getLogsDeliverySource").getLogsDeliverySource = null as any;
export const getLogsDeliverySourceOutput: typeof import("./getLogsDeliverySource").getLogsDeliverySourceOutput = null as any;
utilities.lazyLoad(exports, ["getLogsDeliverySource","getLogsDeliverySourceOutput"], () => require("./getLogsDeliverySource"));

export { GetLogsDeliverySourcesResult } from "./getLogsDeliverySources";
export const getLogsDeliverySources: typeof import("./getLogsDeliverySources").getLogsDeliverySources = null as any;
export const getLogsDeliverySourcesOutput: typeof import("./getLogsDeliverySources").getLogsDeliverySourcesOutput = null as any;
utilities.lazyLoad(exports, ["getLogsDeliverySources","getLogsDeliverySourcesOutput"], () => require("./getLogsDeliverySources"));

export { GetLogsDestinationArgs, GetLogsDestinationResult, GetLogsDestinationOutputArgs } from "./getLogsDestination";
export const getLogsDestination: typeof import("./getLogsDestination").getLogsDestination = null as any;
export const getLogsDestinationOutput: typeof import("./getLogsDestination").getLogsDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getLogsDestination","getLogsDestinationOutput"], () => require("./getLogsDestination"));

export { GetLogsDestinationsResult } from "./getLogsDestinations";
export const getLogsDestinations: typeof import("./getLogsDestinations").getLogsDestinations = null as any;
export const getLogsDestinationsOutput: typeof import("./getLogsDestinations").getLogsDestinationsOutput = null as any;
utilities.lazyLoad(exports, ["getLogsDestinations","getLogsDestinationsOutput"], () => require("./getLogsDestinations"));

export { GetLogsLogAnomalyDetectorArgs, GetLogsLogAnomalyDetectorResult, GetLogsLogAnomalyDetectorOutputArgs } from "./getLogsLogAnomalyDetector";
export const getLogsLogAnomalyDetector: typeof import("./getLogsLogAnomalyDetector").getLogsLogAnomalyDetector = null as any;
export const getLogsLogAnomalyDetectorOutput: typeof import("./getLogsLogAnomalyDetector").getLogsLogAnomalyDetectorOutput = null as any;
utilities.lazyLoad(exports, ["getLogsLogAnomalyDetector","getLogsLogAnomalyDetectorOutput"], () => require("./getLogsLogAnomalyDetector"));

export { GetLogsLogAnomalyDetectorsResult } from "./getLogsLogAnomalyDetectors";
export const getLogsLogAnomalyDetectors: typeof import("./getLogsLogAnomalyDetectors").getLogsLogAnomalyDetectors = null as any;
export const getLogsLogAnomalyDetectorsOutput: typeof import("./getLogsLogAnomalyDetectors").getLogsLogAnomalyDetectorsOutput = null as any;
utilities.lazyLoad(exports, ["getLogsLogAnomalyDetectors","getLogsLogAnomalyDetectorsOutput"], () => require("./getLogsLogAnomalyDetectors"));

export { GetLogsLogGroupArgs, GetLogsLogGroupResult, GetLogsLogGroupOutputArgs } from "./getLogsLogGroup";
export const getLogsLogGroup: typeof import("./getLogsLogGroup").getLogsLogGroup = null as any;
export const getLogsLogGroupOutput: typeof import("./getLogsLogGroup").getLogsLogGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLogsLogGroup","getLogsLogGroupOutput"], () => require("./getLogsLogGroup"));

export { GetLogsLogGroupsResult } from "./getLogsLogGroups";
export const getLogsLogGroups: typeof import("./getLogsLogGroups").getLogsLogGroups = null as any;
export const getLogsLogGroupsOutput: typeof import("./getLogsLogGroups").getLogsLogGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getLogsLogGroups","getLogsLogGroupsOutput"], () => require("./getLogsLogGroups"));

export { GetLogsLogStreamArgs, GetLogsLogStreamResult, GetLogsLogStreamOutputArgs } from "./getLogsLogStream";
export const getLogsLogStream: typeof import("./getLogsLogStream").getLogsLogStream = null as any;
export const getLogsLogStreamOutput: typeof import("./getLogsLogStream").getLogsLogStreamOutput = null as any;
utilities.lazyLoad(exports, ["getLogsLogStream","getLogsLogStreamOutput"], () => require("./getLogsLogStream"));

export { GetLogsMetricFilterArgs, GetLogsMetricFilterResult, GetLogsMetricFilterOutputArgs } from "./getLogsMetricFilter";
export const getLogsMetricFilter: typeof import("./getLogsMetricFilter").getLogsMetricFilter = null as any;
export const getLogsMetricFilterOutput: typeof import("./getLogsMetricFilter").getLogsMetricFilterOutput = null as any;
utilities.lazyLoad(exports, ["getLogsMetricFilter","getLogsMetricFilterOutput"], () => require("./getLogsMetricFilter"));

export { GetLogsMetricFiltersResult } from "./getLogsMetricFilters";
export const getLogsMetricFilters: typeof import("./getLogsMetricFilters").getLogsMetricFilters = null as any;
export const getLogsMetricFiltersOutput: typeof import("./getLogsMetricFilters").getLogsMetricFiltersOutput = null as any;
utilities.lazyLoad(exports, ["getLogsMetricFilters","getLogsMetricFiltersOutput"], () => require("./getLogsMetricFilters"));

export { GetLogsQueryDefinitionArgs, GetLogsQueryDefinitionResult, GetLogsQueryDefinitionOutputArgs } from "./getLogsQueryDefinition";
export const getLogsQueryDefinition: typeof import("./getLogsQueryDefinition").getLogsQueryDefinition = null as any;
export const getLogsQueryDefinitionOutput: typeof import("./getLogsQueryDefinition").getLogsQueryDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getLogsQueryDefinition","getLogsQueryDefinitionOutput"], () => require("./getLogsQueryDefinition"));

export { GetLogsQueryDefinitionsResult } from "./getLogsQueryDefinitions";
export const getLogsQueryDefinitions: typeof import("./getLogsQueryDefinitions").getLogsQueryDefinitions = null as any;
export const getLogsQueryDefinitionsOutput: typeof import("./getLogsQueryDefinitions").getLogsQueryDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getLogsQueryDefinitions","getLogsQueryDefinitionsOutput"], () => require("./getLogsQueryDefinitions"));

export { GetLogsResourcePoliciesResult } from "./getLogsResourcePolicies";
export const getLogsResourcePolicies: typeof import("./getLogsResourcePolicies").getLogsResourcePolicies = null as any;
export const getLogsResourcePoliciesOutput: typeof import("./getLogsResourcePolicies").getLogsResourcePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getLogsResourcePolicies","getLogsResourcePoliciesOutput"], () => require("./getLogsResourcePolicies"));

export { GetLogsResourcePolicyArgs, GetLogsResourcePolicyResult, GetLogsResourcePolicyOutputArgs } from "./getLogsResourcePolicy";
export const getLogsResourcePolicy: typeof import("./getLogsResourcePolicy").getLogsResourcePolicy = null as any;
export const getLogsResourcePolicyOutput: typeof import("./getLogsResourcePolicy").getLogsResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLogsResourcePolicy","getLogsResourcePolicyOutput"], () => require("./getLogsResourcePolicy"));

export { GetLogsSubscriptionFilterArgs, GetLogsSubscriptionFilterResult, GetLogsSubscriptionFilterOutputArgs } from "./getLogsSubscriptionFilter";
export const getLogsSubscriptionFilter: typeof import("./getLogsSubscriptionFilter").getLogsSubscriptionFilter = null as any;
export const getLogsSubscriptionFilterOutput: typeof import("./getLogsSubscriptionFilter").getLogsSubscriptionFilterOutput = null as any;
utilities.lazyLoad(exports, ["getLogsSubscriptionFilter","getLogsSubscriptionFilterOutput"], () => require("./getLogsSubscriptionFilter"));

export { GetLookoutequipmentInferenceSchedulerArgs, GetLookoutequipmentInferenceSchedulerResult, GetLookoutequipmentInferenceSchedulerOutputArgs } from "./getLookoutequipmentInferenceScheduler";
export const getLookoutequipmentInferenceScheduler: typeof import("./getLookoutequipmentInferenceScheduler").getLookoutequipmentInferenceScheduler = null as any;
export const getLookoutequipmentInferenceSchedulerOutput: typeof import("./getLookoutequipmentInferenceScheduler").getLookoutequipmentInferenceSchedulerOutput = null as any;
utilities.lazyLoad(exports, ["getLookoutequipmentInferenceScheduler","getLookoutequipmentInferenceSchedulerOutput"], () => require("./getLookoutequipmentInferenceScheduler"));

export { GetLookoutequipmentInferenceSchedulersResult } from "./getLookoutequipmentInferenceSchedulers";
export const getLookoutequipmentInferenceSchedulers: typeof import("./getLookoutequipmentInferenceSchedulers").getLookoutequipmentInferenceSchedulers = null as any;
export const getLookoutequipmentInferenceSchedulersOutput: typeof import("./getLookoutequipmentInferenceSchedulers").getLookoutequipmentInferenceSchedulersOutput = null as any;
utilities.lazyLoad(exports, ["getLookoutequipmentInferenceSchedulers","getLookoutequipmentInferenceSchedulersOutput"], () => require("./getLookoutequipmentInferenceSchedulers"));

export { GetLookoutmetricsAlertArgs, GetLookoutmetricsAlertResult, GetLookoutmetricsAlertOutputArgs } from "./getLookoutmetricsAlert";
export const getLookoutmetricsAlert: typeof import("./getLookoutmetricsAlert").getLookoutmetricsAlert = null as any;
export const getLookoutmetricsAlertOutput: typeof import("./getLookoutmetricsAlert").getLookoutmetricsAlertOutput = null as any;
utilities.lazyLoad(exports, ["getLookoutmetricsAlert","getLookoutmetricsAlertOutput"], () => require("./getLookoutmetricsAlert"));

export { GetLookoutmetricsAlertsResult } from "./getLookoutmetricsAlerts";
export const getLookoutmetricsAlerts: typeof import("./getLookoutmetricsAlerts").getLookoutmetricsAlerts = null as any;
export const getLookoutmetricsAlertsOutput: typeof import("./getLookoutmetricsAlerts").getLookoutmetricsAlertsOutput = null as any;
utilities.lazyLoad(exports, ["getLookoutmetricsAlerts","getLookoutmetricsAlertsOutput"], () => require("./getLookoutmetricsAlerts"));

export { GetLookoutmetricsAnomalyDetectorArgs, GetLookoutmetricsAnomalyDetectorResult, GetLookoutmetricsAnomalyDetectorOutputArgs } from "./getLookoutmetricsAnomalyDetector";
export const getLookoutmetricsAnomalyDetector: typeof import("./getLookoutmetricsAnomalyDetector").getLookoutmetricsAnomalyDetector = null as any;
export const getLookoutmetricsAnomalyDetectorOutput: typeof import("./getLookoutmetricsAnomalyDetector").getLookoutmetricsAnomalyDetectorOutput = null as any;
utilities.lazyLoad(exports, ["getLookoutmetricsAnomalyDetector","getLookoutmetricsAnomalyDetectorOutput"], () => require("./getLookoutmetricsAnomalyDetector"));

export { GetLookoutmetricsAnomalyDetectorsResult } from "./getLookoutmetricsAnomalyDetectors";
export const getLookoutmetricsAnomalyDetectors: typeof import("./getLookoutmetricsAnomalyDetectors").getLookoutmetricsAnomalyDetectors = null as any;
export const getLookoutmetricsAnomalyDetectorsOutput: typeof import("./getLookoutmetricsAnomalyDetectors").getLookoutmetricsAnomalyDetectorsOutput = null as any;
utilities.lazyLoad(exports, ["getLookoutmetricsAnomalyDetectors","getLookoutmetricsAnomalyDetectorsOutput"], () => require("./getLookoutmetricsAnomalyDetectors"));

export { GetLookoutvisionProjectArgs, GetLookoutvisionProjectResult, GetLookoutvisionProjectOutputArgs } from "./getLookoutvisionProject";
export const getLookoutvisionProject: typeof import("./getLookoutvisionProject").getLookoutvisionProject = null as any;
export const getLookoutvisionProjectOutput: typeof import("./getLookoutvisionProject").getLookoutvisionProjectOutput = null as any;
utilities.lazyLoad(exports, ["getLookoutvisionProject","getLookoutvisionProjectOutput"], () => require("./getLookoutvisionProject"));

export { GetLookoutvisionProjectsResult } from "./getLookoutvisionProjects";
export const getLookoutvisionProjects: typeof import("./getLookoutvisionProjects").getLookoutvisionProjects = null as any;
export const getLookoutvisionProjectsOutput: typeof import("./getLookoutvisionProjects").getLookoutvisionProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getLookoutvisionProjects","getLookoutvisionProjectsOutput"], () => require("./getLookoutvisionProjects"));

export { GetM2ApplicationArgs, GetM2ApplicationResult, GetM2ApplicationOutputArgs } from "./getM2Application";
export const getM2Application: typeof import("./getM2Application").getM2Application = null as any;
export const getM2ApplicationOutput: typeof import("./getM2Application").getM2ApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getM2Application","getM2ApplicationOutput"], () => require("./getM2Application"));

export { GetM2ApplicationsResult } from "./getM2Applications";
export const getM2Applications: typeof import("./getM2Applications").getM2Applications = null as any;
export const getM2ApplicationsOutput: typeof import("./getM2Applications").getM2ApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getM2Applications","getM2ApplicationsOutput"], () => require("./getM2Applications"));

export { GetM2EnvironmentArgs, GetM2EnvironmentResult, GetM2EnvironmentOutputArgs } from "./getM2Environment";
export const getM2Environment: typeof import("./getM2Environment").getM2Environment = null as any;
export const getM2EnvironmentOutput: typeof import("./getM2Environment").getM2EnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getM2Environment","getM2EnvironmentOutput"], () => require("./getM2Environment"));

export { GetM2EnvironmentsResult } from "./getM2Environments";
export const getM2Environments: typeof import("./getM2Environments").getM2Environments = null as any;
export const getM2EnvironmentsOutput: typeof import("./getM2Environments").getM2EnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getM2Environments","getM2EnvironmentsOutput"], () => require("./getM2Environments"));

export { GetMacieAllowListArgs, GetMacieAllowListResult, GetMacieAllowListOutputArgs } from "./getMacieAllowList";
export const getMacieAllowList: typeof import("./getMacieAllowList").getMacieAllowList = null as any;
export const getMacieAllowListOutput: typeof import("./getMacieAllowList").getMacieAllowListOutput = null as any;
utilities.lazyLoad(exports, ["getMacieAllowList","getMacieAllowListOutput"], () => require("./getMacieAllowList"));

export { GetMacieAllowListsResult } from "./getMacieAllowLists";
export const getMacieAllowLists: typeof import("./getMacieAllowLists").getMacieAllowLists = null as any;
export const getMacieAllowListsOutput: typeof import("./getMacieAllowLists").getMacieAllowListsOutput = null as any;
utilities.lazyLoad(exports, ["getMacieAllowLists","getMacieAllowListsOutput"], () => require("./getMacieAllowLists"));

export { GetMacieCustomDataIdentifierArgs, GetMacieCustomDataIdentifierResult, GetMacieCustomDataIdentifierOutputArgs } from "./getMacieCustomDataIdentifier";
export const getMacieCustomDataIdentifier: typeof import("./getMacieCustomDataIdentifier").getMacieCustomDataIdentifier = null as any;
export const getMacieCustomDataIdentifierOutput: typeof import("./getMacieCustomDataIdentifier").getMacieCustomDataIdentifierOutput = null as any;
utilities.lazyLoad(exports, ["getMacieCustomDataIdentifier","getMacieCustomDataIdentifierOutput"], () => require("./getMacieCustomDataIdentifier"));

export { GetMacieCustomDataIdentifiersResult } from "./getMacieCustomDataIdentifiers";
export const getMacieCustomDataIdentifiers: typeof import("./getMacieCustomDataIdentifiers").getMacieCustomDataIdentifiers = null as any;
export const getMacieCustomDataIdentifiersOutput: typeof import("./getMacieCustomDataIdentifiers").getMacieCustomDataIdentifiersOutput = null as any;
utilities.lazyLoad(exports, ["getMacieCustomDataIdentifiers","getMacieCustomDataIdentifiersOutput"], () => require("./getMacieCustomDataIdentifiers"));

export { GetMacieFindingsFilterArgs, GetMacieFindingsFilterResult, GetMacieFindingsFilterOutputArgs } from "./getMacieFindingsFilter";
export const getMacieFindingsFilter: typeof import("./getMacieFindingsFilter").getMacieFindingsFilter = null as any;
export const getMacieFindingsFilterOutput: typeof import("./getMacieFindingsFilter").getMacieFindingsFilterOutput = null as any;
utilities.lazyLoad(exports, ["getMacieFindingsFilter","getMacieFindingsFilterOutput"], () => require("./getMacieFindingsFilter"));

export { GetMacieFindingsFiltersResult } from "./getMacieFindingsFilters";
export const getMacieFindingsFilters: typeof import("./getMacieFindingsFilters").getMacieFindingsFilters = null as any;
export const getMacieFindingsFiltersOutput: typeof import("./getMacieFindingsFilters").getMacieFindingsFiltersOutput = null as any;
utilities.lazyLoad(exports, ["getMacieFindingsFilters","getMacieFindingsFiltersOutput"], () => require("./getMacieFindingsFilters"));

export { GetMacieSessionArgs, GetMacieSessionResult, GetMacieSessionOutputArgs } from "./getMacieSession";
export const getMacieSession: typeof import("./getMacieSession").getMacieSession = null as any;
export const getMacieSessionOutput: typeof import("./getMacieSession").getMacieSessionOutput = null as any;
utilities.lazyLoad(exports, ["getMacieSession","getMacieSessionOutput"], () => require("./getMacieSession"));

export { GetMacieSessionsResult } from "./getMacieSessions";
export const getMacieSessions: typeof import("./getMacieSessions").getMacieSessions = null as any;
export const getMacieSessionsOutput: typeof import("./getMacieSessions").getMacieSessionsOutput = null as any;
utilities.lazyLoad(exports, ["getMacieSessions","getMacieSessionsOutput"], () => require("./getMacieSessions"));

export { GetManagedblockchainAccessorArgs, GetManagedblockchainAccessorResult, GetManagedblockchainAccessorOutputArgs } from "./getManagedblockchainAccessor";
export const getManagedblockchainAccessor: typeof import("./getManagedblockchainAccessor").getManagedblockchainAccessor = null as any;
export const getManagedblockchainAccessorOutput: typeof import("./getManagedblockchainAccessor").getManagedblockchainAccessorOutput = null as any;
utilities.lazyLoad(exports, ["getManagedblockchainAccessor","getManagedblockchainAccessorOutput"], () => require("./getManagedblockchainAccessor"));

export { GetManagedblockchainAccessorsResult } from "./getManagedblockchainAccessors";
export const getManagedblockchainAccessors: typeof import("./getManagedblockchainAccessors").getManagedblockchainAccessors = null as any;
export const getManagedblockchainAccessorsOutput: typeof import("./getManagedblockchainAccessors").getManagedblockchainAccessorsOutput = null as any;
utilities.lazyLoad(exports, ["getManagedblockchainAccessors","getManagedblockchainAccessorsOutput"], () => require("./getManagedblockchainAccessors"));

export { GetMediaconnectBridgeArgs, GetMediaconnectBridgeResult, GetMediaconnectBridgeOutputArgs } from "./getMediaconnectBridge";
export const getMediaconnectBridge: typeof import("./getMediaconnectBridge").getMediaconnectBridge = null as any;
export const getMediaconnectBridgeOutput: typeof import("./getMediaconnectBridge").getMediaconnectBridgeOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectBridge","getMediaconnectBridgeOutput"], () => require("./getMediaconnectBridge"));

export { GetMediaconnectBridgeOutputArgs, GetMediaconnectBridgeOutputResult, GetMediaconnectBridgeOutputOutputArgs } from "./getMediaconnectBridgeOutput";
export const getMediaconnectBridgeOutput: typeof import("./getMediaconnectBridgeOutput").getMediaconnectBridgeOutput = null as any;
export const getMediaconnectBridgeOutputOutput: typeof import("./getMediaconnectBridgeOutput").getMediaconnectBridgeOutputOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectBridgeOutput","getMediaconnectBridgeOutputOutput"], () => require("./getMediaconnectBridgeOutput"));

export { GetMediaconnectBridgeSourceArgs, GetMediaconnectBridgeSourceResult, GetMediaconnectBridgeSourceOutputArgs } from "./getMediaconnectBridgeSource";
export const getMediaconnectBridgeSource: typeof import("./getMediaconnectBridgeSource").getMediaconnectBridgeSource = null as any;
export const getMediaconnectBridgeSourceOutput: typeof import("./getMediaconnectBridgeSource").getMediaconnectBridgeSourceOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectBridgeSource","getMediaconnectBridgeSourceOutput"], () => require("./getMediaconnectBridgeSource"));

export { GetMediaconnectBridgesResult } from "./getMediaconnectBridges";
export const getMediaconnectBridges: typeof import("./getMediaconnectBridges").getMediaconnectBridges = null as any;
export const getMediaconnectBridgesOutput: typeof import("./getMediaconnectBridges").getMediaconnectBridgesOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectBridges","getMediaconnectBridgesOutput"], () => require("./getMediaconnectBridges"));

export { GetMediaconnectFlowArgs, GetMediaconnectFlowResult, GetMediaconnectFlowOutputArgs } from "./getMediaconnectFlow";
export const getMediaconnectFlow: typeof import("./getMediaconnectFlow").getMediaconnectFlow = null as any;
export const getMediaconnectFlowOutput: typeof import("./getMediaconnectFlow").getMediaconnectFlowOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectFlow","getMediaconnectFlowOutput"], () => require("./getMediaconnectFlow"));

export { GetMediaconnectFlowEntitlementArgs, GetMediaconnectFlowEntitlementResult, GetMediaconnectFlowEntitlementOutputArgs } from "./getMediaconnectFlowEntitlement";
export const getMediaconnectFlowEntitlement: typeof import("./getMediaconnectFlowEntitlement").getMediaconnectFlowEntitlement = null as any;
export const getMediaconnectFlowEntitlementOutput: typeof import("./getMediaconnectFlowEntitlement").getMediaconnectFlowEntitlementOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectFlowEntitlement","getMediaconnectFlowEntitlementOutput"], () => require("./getMediaconnectFlowEntitlement"));

export { GetMediaconnectFlowEntitlementsResult } from "./getMediaconnectFlowEntitlements";
export const getMediaconnectFlowEntitlements: typeof import("./getMediaconnectFlowEntitlements").getMediaconnectFlowEntitlements = null as any;
export const getMediaconnectFlowEntitlementsOutput: typeof import("./getMediaconnectFlowEntitlements").getMediaconnectFlowEntitlementsOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectFlowEntitlements","getMediaconnectFlowEntitlementsOutput"], () => require("./getMediaconnectFlowEntitlements"));

export { GetMediaconnectFlowOutputArgs, GetMediaconnectFlowOutputResult, GetMediaconnectFlowOutputOutputArgs } from "./getMediaconnectFlowOutput";
export const getMediaconnectFlowOutput: typeof import("./getMediaconnectFlowOutput").getMediaconnectFlowOutput = null as any;
export const getMediaconnectFlowOutputOutput: typeof import("./getMediaconnectFlowOutput").getMediaconnectFlowOutputOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectFlowOutput","getMediaconnectFlowOutputOutput"], () => require("./getMediaconnectFlowOutput"));

export { GetMediaconnectFlowOutputsResult } from "./getMediaconnectFlowOutputs";
export const getMediaconnectFlowOutputs: typeof import("./getMediaconnectFlowOutputs").getMediaconnectFlowOutputs = null as any;
export const getMediaconnectFlowOutputsOutput: typeof import("./getMediaconnectFlowOutputs").getMediaconnectFlowOutputsOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectFlowOutputs","getMediaconnectFlowOutputsOutput"], () => require("./getMediaconnectFlowOutputs"));

export { GetMediaconnectFlowSourceArgs, GetMediaconnectFlowSourceResult, GetMediaconnectFlowSourceOutputArgs } from "./getMediaconnectFlowSource";
export const getMediaconnectFlowSource: typeof import("./getMediaconnectFlowSource").getMediaconnectFlowSource = null as any;
export const getMediaconnectFlowSourceOutput: typeof import("./getMediaconnectFlowSource").getMediaconnectFlowSourceOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectFlowSource","getMediaconnectFlowSourceOutput"], () => require("./getMediaconnectFlowSource"));

export { GetMediaconnectFlowSourcesResult } from "./getMediaconnectFlowSources";
export const getMediaconnectFlowSources: typeof import("./getMediaconnectFlowSources").getMediaconnectFlowSources = null as any;
export const getMediaconnectFlowSourcesOutput: typeof import("./getMediaconnectFlowSources").getMediaconnectFlowSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectFlowSources","getMediaconnectFlowSourcesOutput"], () => require("./getMediaconnectFlowSources"));

export { GetMediaconnectFlowVpcInterfaceArgs, GetMediaconnectFlowVpcInterfaceResult, GetMediaconnectFlowVpcInterfaceOutputArgs } from "./getMediaconnectFlowVpcInterface";
export const getMediaconnectFlowVpcInterface: typeof import("./getMediaconnectFlowVpcInterface").getMediaconnectFlowVpcInterface = null as any;
export const getMediaconnectFlowVpcInterfaceOutput: typeof import("./getMediaconnectFlowVpcInterface").getMediaconnectFlowVpcInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectFlowVpcInterface","getMediaconnectFlowVpcInterfaceOutput"], () => require("./getMediaconnectFlowVpcInterface"));

export { GetMediaconnectFlowVpcInterfacesResult } from "./getMediaconnectFlowVpcInterfaces";
export const getMediaconnectFlowVpcInterfaces: typeof import("./getMediaconnectFlowVpcInterfaces").getMediaconnectFlowVpcInterfaces = null as any;
export const getMediaconnectFlowVpcInterfacesOutput: typeof import("./getMediaconnectFlowVpcInterfaces").getMediaconnectFlowVpcInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectFlowVpcInterfaces","getMediaconnectFlowVpcInterfacesOutput"], () => require("./getMediaconnectFlowVpcInterfaces"));

export { GetMediaconnectFlowsResult } from "./getMediaconnectFlows";
export const getMediaconnectFlows: typeof import("./getMediaconnectFlows").getMediaconnectFlows = null as any;
export const getMediaconnectFlowsOutput: typeof import("./getMediaconnectFlows").getMediaconnectFlowsOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectFlows","getMediaconnectFlowsOutput"], () => require("./getMediaconnectFlows"));

export { GetMediaconnectGatewayArgs, GetMediaconnectGatewayResult, GetMediaconnectGatewayOutputArgs } from "./getMediaconnectGateway";
export const getMediaconnectGateway: typeof import("./getMediaconnectGateway").getMediaconnectGateway = null as any;
export const getMediaconnectGatewayOutput: typeof import("./getMediaconnectGateway").getMediaconnectGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectGateway","getMediaconnectGatewayOutput"], () => require("./getMediaconnectGateway"));

export { GetMediaconnectGatewaysResult } from "./getMediaconnectGateways";
export const getMediaconnectGateways: typeof import("./getMediaconnectGateways").getMediaconnectGateways = null as any;
export const getMediaconnectGatewaysOutput: typeof import("./getMediaconnectGateways").getMediaconnectGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getMediaconnectGateways","getMediaconnectGatewaysOutput"], () => require("./getMediaconnectGateways"));

export { GetMedialiveMultiplexArgs, GetMedialiveMultiplexResult, GetMedialiveMultiplexOutputArgs } from "./getMedialiveMultiplex";
export const getMedialiveMultiplex: typeof import("./getMedialiveMultiplex").getMedialiveMultiplex = null as any;
export const getMedialiveMultiplexOutput: typeof import("./getMedialiveMultiplex").getMedialiveMultiplexOutput = null as any;
utilities.lazyLoad(exports, ["getMedialiveMultiplex","getMedialiveMultiplexOutput"], () => require("./getMedialiveMultiplex"));

export { GetMedialiveMultiplexesResult } from "./getMedialiveMultiplexes";
export const getMedialiveMultiplexes: typeof import("./getMedialiveMultiplexes").getMedialiveMultiplexes = null as any;
export const getMedialiveMultiplexesOutput: typeof import("./getMedialiveMultiplexes").getMedialiveMultiplexesOutput = null as any;
utilities.lazyLoad(exports, ["getMedialiveMultiplexes","getMedialiveMultiplexesOutput"], () => require("./getMedialiveMultiplexes"));

export { GetMedialiveMultiplexprogramArgs, GetMedialiveMultiplexprogramResult, GetMedialiveMultiplexprogramOutputArgs } from "./getMedialiveMultiplexprogram";
export const getMedialiveMultiplexprogram: typeof import("./getMedialiveMultiplexprogram").getMedialiveMultiplexprogram = null as any;
export const getMedialiveMultiplexprogramOutput: typeof import("./getMedialiveMultiplexprogram").getMedialiveMultiplexprogramOutput = null as any;
utilities.lazyLoad(exports, ["getMedialiveMultiplexprogram","getMedialiveMultiplexprogramOutput"], () => require("./getMedialiveMultiplexprogram"));

export { GetMediapackageAssetArgs, GetMediapackageAssetResult, GetMediapackageAssetOutputArgs } from "./getMediapackageAsset";
export const getMediapackageAsset: typeof import("./getMediapackageAsset").getMediapackageAsset = null as any;
export const getMediapackageAssetOutput: typeof import("./getMediapackageAsset").getMediapackageAssetOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackageAsset","getMediapackageAssetOutput"], () => require("./getMediapackageAsset"));

export { GetMediapackageAssetsResult } from "./getMediapackageAssets";
export const getMediapackageAssets: typeof import("./getMediapackageAssets").getMediapackageAssets = null as any;
export const getMediapackageAssetsOutput: typeof import("./getMediapackageAssets").getMediapackageAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackageAssets","getMediapackageAssetsOutput"], () => require("./getMediapackageAssets"));

export { GetMediapackageChannelsResult } from "./getMediapackageChannels";
export const getMediapackageChannels: typeof import("./getMediapackageChannels").getMediapackageChannels = null as any;
export const getMediapackageChannelsOutput: typeof import("./getMediapackageChannels").getMediapackageChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackageChannels","getMediapackageChannelsOutput"], () => require("./getMediapackageChannels"));

export { GetMediapackageOriginEndpointsResult } from "./getMediapackageOriginEndpoints";
export const getMediapackageOriginEndpoints: typeof import("./getMediapackageOriginEndpoints").getMediapackageOriginEndpoints = null as any;
export const getMediapackageOriginEndpointsOutput: typeof import("./getMediapackageOriginEndpoints").getMediapackageOriginEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackageOriginEndpoints","getMediapackageOriginEndpointsOutput"], () => require("./getMediapackageOriginEndpoints"));

export { GetMediapackagePackagingConfigurationArgs, GetMediapackagePackagingConfigurationResult, GetMediapackagePackagingConfigurationOutputArgs } from "./getMediapackagePackagingConfiguration";
export const getMediapackagePackagingConfiguration: typeof import("./getMediapackagePackagingConfiguration").getMediapackagePackagingConfiguration = null as any;
export const getMediapackagePackagingConfigurationOutput: typeof import("./getMediapackagePackagingConfiguration").getMediapackagePackagingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackagePackagingConfiguration","getMediapackagePackagingConfigurationOutput"], () => require("./getMediapackagePackagingConfiguration"));

export { GetMediapackagePackagingConfigurationsResult } from "./getMediapackagePackagingConfigurations";
export const getMediapackagePackagingConfigurations: typeof import("./getMediapackagePackagingConfigurations").getMediapackagePackagingConfigurations = null as any;
export const getMediapackagePackagingConfigurationsOutput: typeof import("./getMediapackagePackagingConfigurations").getMediapackagePackagingConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackagePackagingConfigurations","getMediapackagePackagingConfigurationsOutput"], () => require("./getMediapackagePackagingConfigurations"));

export { GetMediapackagePackagingGroupArgs, GetMediapackagePackagingGroupResult, GetMediapackagePackagingGroupOutputArgs } from "./getMediapackagePackagingGroup";
export const getMediapackagePackagingGroup: typeof import("./getMediapackagePackagingGroup").getMediapackagePackagingGroup = null as any;
export const getMediapackagePackagingGroupOutput: typeof import("./getMediapackagePackagingGroup").getMediapackagePackagingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackagePackagingGroup","getMediapackagePackagingGroupOutput"], () => require("./getMediapackagePackagingGroup"));

export { GetMediapackagePackagingGroupsResult } from "./getMediapackagePackagingGroups";
export const getMediapackagePackagingGroups: typeof import("./getMediapackagePackagingGroups").getMediapackagePackagingGroups = null as any;
export const getMediapackagePackagingGroupsOutput: typeof import("./getMediapackagePackagingGroups").getMediapackagePackagingGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackagePackagingGroups","getMediapackagePackagingGroupsOutput"], () => require("./getMediapackagePackagingGroups"));

export { GetMediapackagev2ChannelArgs, GetMediapackagev2ChannelResult, GetMediapackagev2ChannelOutputArgs } from "./getMediapackagev2Channel";
export const getMediapackagev2Channel: typeof import("./getMediapackagev2Channel").getMediapackagev2Channel = null as any;
export const getMediapackagev2ChannelOutput: typeof import("./getMediapackagev2Channel").getMediapackagev2ChannelOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackagev2Channel","getMediapackagev2ChannelOutput"], () => require("./getMediapackagev2Channel"));

export { GetMediapackagev2ChannelGroupArgs, GetMediapackagev2ChannelGroupResult, GetMediapackagev2ChannelGroupOutputArgs } from "./getMediapackagev2ChannelGroup";
export const getMediapackagev2ChannelGroup: typeof import("./getMediapackagev2ChannelGroup").getMediapackagev2ChannelGroup = null as any;
export const getMediapackagev2ChannelGroupOutput: typeof import("./getMediapackagev2ChannelGroup").getMediapackagev2ChannelGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackagev2ChannelGroup","getMediapackagev2ChannelGroupOutput"], () => require("./getMediapackagev2ChannelGroup"));

export { GetMediapackagev2ChannelGroupsResult } from "./getMediapackagev2ChannelGroups";
export const getMediapackagev2ChannelGroups: typeof import("./getMediapackagev2ChannelGroups").getMediapackagev2ChannelGroups = null as any;
export const getMediapackagev2ChannelGroupsOutput: typeof import("./getMediapackagev2ChannelGroups").getMediapackagev2ChannelGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackagev2ChannelGroups","getMediapackagev2ChannelGroupsOutput"], () => require("./getMediapackagev2ChannelGroups"));

export { GetMediapackagev2ChannelPolicyArgs, GetMediapackagev2ChannelPolicyResult, GetMediapackagev2ChannelPolicyOutputArgs } from "./getMediapackagev2ChannelPolicy";
export const getMediapackagev2ChannelPolicy: typeof import("./getMediapackagev2ChannelPolicy").getMediapackagev2ChannelPolicy = null as any;
export const getMediapackagev2ChannelPolicyOutput: typeof import("./getMediapackagev2ChannelPolicy").getMediapackagev2ChannelPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackagev2ChannelPolicy","getMediapackagev2ChannelPolicyOutput"], () => require("./getMediapackagev2ChannelPolicy"));

export { GetMediapackagev2OriginEndpointArgs, GetMediapackagev2OriginEndpointResult, GetMediapackagev2OriginEndpointOutputArgs } from "./getMediapackagev2OriginEndpoint";
export const getMediapackagev2OriginEndpoint: typeof import("./getMediapackagev2OriginEndpoint").getMediapackagev2OriginEndpoint = null as any;
export const getMediapackagev2OriginEndpointOutput: typeof import("./getMediapackagev2OriginEndpoint").getMediapackagev2OriginEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackagev2OriginEndpoint","getMediapackagev2OriginEndpointOutput"], () => require("./getMediapackagev2OriginEndpoint"));

export { GetMediapackagev2OriginEndpointPolicyArgs, GetMediapackagev2OriginEndpointPolicyResult, GetMediapackagev2OriginEndpointPolicyOutputArgs } from "./getMediapackagev2OriginEndpointPolicy";
export const getMediapackagev2OriginEndpointPolicy: typeof import("./getMediapackagev2OriginEndpointPolicy").getMediapackagev2OriginEndpointPolicy = null as any;
export const getMediapackagev2OriginEndpointPolicyOutput: typeof import("./getMediapackagev2OriginEndpointPolicy").getMediapackagev2OriginEndpointPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMediapackagev2OriginEndpointPolicy","getMediapackagev2OriginEndpointPolicyOutput"], () => require("./getMediapackagev2OriginEndpointPolicy"));

export { GetMediatailorChannelArgs, GetMediatailorChannelResult, GetMediatailorChannelOutputArgs } from "./getMediatailorChannel";
export const getMediatailorChannel: typeof import("./getMediatailorChannel").getMediatailorChannel = null as any;
export const getMediatailorChannelOutput: typeof import("./getMediatailorChannel").getMediatailorChannelOutput = null as any;
utilities.lazyLoad(exports, ["getMediatailorChannel","getMediatailorChannelOutput"], () => require("./getMediatailorChannel"));

export { GetMediatailorChannelPolicyArgs, GetMediatailorChannelPolicyResult, GetMediatailorChannelPolicyOutputArgs } from "./getMediatailorChannelPolicy";
export const getMediatailorChannelPolicy: typeof import("./getMediatailorChannelPolicy").getMediatailorChannelPolicy = null as any;
export const getMediatailorChannelPolicyOutput: typeof import("./getMediatailorChannelPolicy").getMediatailorChannelPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMediatailorChannelPolicy","getMediatailorChannelPolicyOutput"], () => require("./getMediatailorChannelPolicy"));

export { GetMediatailorChannelsResult } from "./getMediatailorChannels";
export const getMediatailorChannels: typeof import("./getMediatailorChannels").getMediatailorChannels = null as any;
export const getMediatailorChannelsOutput: typeof import("./getMediatailorChannels").getMediatailorChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getMediatailorChannels","getMediatailorChannelsOutput"], () => require("./getMediatailorChannels"));

export { GetMediatailorLiveSourceArgs, GetMediatailorLiveSourceResult, GetMediatailorLiveSourceOutputArgs } from "./getMediatailorLiveSource";
export const getMediatailorLiveSource: typeof import("./getMediatailorLiveSource").getMediatailorLiveSource = null as any;
export const getMediatailorLiveSourceOutput: typeof import("./getMediatailorLiveSource").getMediatailorLiveSourceOutput = null as any;
utilities.lazyLoad(exports, ["getMediatailorLiveSource","getMediatailorLiveSourceOutput"], () => require("./getMediatailorLiveSource"));

export { GetMediatailorSourceLocationArgs, GetMediatailorSourceLocationResult, GetMediatailorSourceLocationOutputArgs } from "./getMediatailorSourceLocation";
export const getMediatailorSourceLocation: typeof import("./getMediatailorSourceLocation").getMediatailorSourceLocation = null as any;
export const getMediatailorSourceLocationOutput: typeof import("./getMediatailorSourceLocation").getMediatailorSourceLocationOutput = null as any;
utilities.lazyLoad(exports, ["getMediatailorSourceLocation","getMediatailorSourceLocationOutput"], () => require("./getMediatailorSourceLocation"));

export { GetMediatailorSourceLocationsResult } from "./getMediatailorSourceLocations";
export const getMediatailorSourceLocations: typeof import("./getMediatailorSourceLocations").getMediatailorSourceLocations = null as any;
export const getMediatailorSourceLocationsOutput: typeof import("./getMediatailorSourceLocations").getMediatailorSourceLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getMediatailorSourceLocations","getMediatailorSourceLocationsOutput"], () => require("./getMediatailorSourceLocations"));

export { GetMediatailorVodSourceArgs, GetMediatailorVodSourceResult, GetMediatailorVodSourceOutputArgs } from "./getMediatailorVodSource";
export const getMediatailorVodSource: typeof import("./getMediatailorVodSource").getMediatailorVodSource = null as any;
export const getMediatailorVodSourceOutput: typeof import("./getMediatailorVodSource").getMediatailorVodSourceOutput = null as any;
utilities.lazyLoad(exports, ["getMediatailorVodSource","getMediatailorVodSourceOutput"], () => require("./getMediatailorVodSource"));

export { GetMemorydbAclArgs, GetMemorydbAclResult, GetMemorydbAclOutputArgs } from "./getMemorydbAcl";
export const getMemorydbAcl: typeof import("./getMemorydbAcl").getMemorydbAcl = null as any;
export const getMemorydbAclOutput: typeof import("./getMemorydbAcl").getMemorydbAclOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbAcl","getMemorydbAclOutput"], () => require("./getMemorydbAcl"));

export { GetMemorydbAclsResult } from "./getMemorydbAcls";
export const getMemorydbAcls: typeof import("./getMemorydbAcls").getMemorydbAcls = null as any;
export const getMemorydbAclsOutput: typeof import("./getMemorydbAcls").getMemorydbAclsOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbAcls","getMemorydbAclsOutput"], () => require("./getMemorydbAcls"));

export { GetMemorydbClusterArgs, GetMemorydbClusterResult, GetMemorydbClusterOutputArgs } from "./getMemorydbCluster";
export const getMemorydbCluster: typeof import("./getMemorydbCluster").getMemorydbCluster = null as any;
export const getMemorydbClusterOutput: typeof import("./getMemorydbCluster").getMemorydbClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbCluster","getMemorydbClusterOutput"], () => require("./getMemorydbCluster"));

export { GetMemorydbClustersResult } from "./getMemorydbClusters";
export const getMemorydbClusters: typeof import("./getMemorydbClusters").getMemorydbClusters = null as any;
export const getMemorydbClustersOutput: typeof import("./getMemorydbClusters").getMemorydbClustersOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbClusters","getMemorydbClustersOutput"], () => require("./getMemorydbClusters"));

export { GetMemorydbParameterGroupArgs, GetMemorydbParameterGroupResult, GetMemorydbParameterGroupOutputArgs } from "./getMemorydbParameterGroup";
export const getMemorydbParameterGroup: typeof import("./getMemorydbParameterGroup").getMemorydbParameterGroup = null as any;
export const getMemorydbParameterGroupOutput: typeof import("./getMemorydbParameterGroup").getMemorydbParameterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbParameterGroup","getMemorydbParameterGroupOutput"], () => require("./getMemorydbParameterGroup"));

export { GetMemorydbParameterGroupsResult } from "./getMemorydbParameterGroups";
export const getMemorydbParameterGroups: typeof import("./getMemorydbParameterGroups").getMemorydbParameterGroups = null as any;
export const getMemorydbParameterGroupsOutput: typeof import("./getMemorydbParameterGroups").getMemorydbParameterGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbParameterGroups","getMemorydbParameterGroupsOutput"], () => require("./getMemorydbParameterGroups"));

export { GetMemorydbSubnetGroupArgs, GetMemorydbSubnetGroupResult, GetMemorydbSubnetGroupOutputArgs } from "./getMemorydbSubnetGroup";
export const getMemorydbSubnetGroup: typeof import("./getMemorydbSubnetGroup").getMemorydbSubnetGroup = null as any;
export const getMemorydbSubnetGroupOutput: typeof import("./getMemorydbSubnetGroup").getMemorydbSubnetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbSubnetGroup","getMemorydbSubnetGroupOutput"], () => require("./getMemorydbSubnetGroup"));

export { GetMemorydbSubnetGroupsResult } from "./getMemorydbSubnetGroups";
export const getMemorydbSubnetGroups: typeof import("./getMemorydbSubnetGroups").getMemorydbSubnetGroups = null as any;
export const getMemorydbSubnetGroupsOutput: typeof import("./getMemorydbSubnetGroups").getMemorydbSubnetGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbSubnetGroups","getMemorydbSubnetGroupsOutput"], () => require("./getMemorydbSubnetGroups"));

export { GetMemorydbUserArgs, GetMemorydbUserResult, GetMemorydbUserOutputArgs } from "./getMemorydbUser";
export const getMemorydbUser: typeof import("./getMemorydbUser").getMemorydbUser = null as any;
export const getMemorydbUserOutput: typeof import("./getMemorydbUser").getMemorydbUserOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbUser","getMemorydbUserOutput"], () => require("./getMemorydbUser"));

export { GetMemorydbUsersResult } from "./getMemorydbUsers";
export const getMemorydbUsers: typeof import("./getMemorydbUsers").getMemorydbUsers = null as any;
export const getMemorydbUsersOutput: typeof import("./getMemorydbUsers").getMemorydbUsersOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbUsers","getMemorydbUsersOutput"], () => require("./getMemorydbUsers"));

export { GetMskBatchScramSecretArgs, GetMskBatchScramSecretResult, GetMskBatchScramSecretOutputArgs } from "./getMskBatchScramSecret";
export const getMskBatchScramSecret: typeof import("./getMskBatchScramSecret").getMskBatchScramSecret = null as any;
export const getMskBatchScramSecretOutput: typeof import("./getMskBatchScramSecret").getMskBatchScramSecretOutput = null as any;
utilities.lazyLoad(exports, ["getMskBatchScramSecret","getMskBatchScramSecretOutput"], () => require("./getMskBatchScramSecret"));

export { GetMskClusterArgs, GetMskClusterResult, GetMskClusterOutputArgs } from "./getMskCluster";
export const getMskCluster: typeof import("./getMskCluster").getMskCluster = null as any;
export const getMskClusterOutput: typeof import("./getMskCluster").getMskClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMskCluster","getMskClusterOutput"], () => require("./getMskCluster"));

export { GetMskClusterPolicyArgs, GetMskClusterPolicyResult, GetMskClusterPolicyOutputArgs } from "./getMskClusterPolicy";
export const getMskClusterPolicy: typeof import("./getMskClusterPolicy").getMskClusterPolicy = null as any;
export const getMskClusterPolicyOutput: typeof import("./getMskClusterPolicy").getMskClusterPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMskClusterPolicy","getMskClusterPolicyOutput"], () => require("./getMskClusterPolicy"));

export { GetMskClustersResult } from "./getMskClusters";
export const getMskClusters: typeof import("./getMskClusters").getMskClusters = null as any;
export const getMskClustersOutput: typeof import("./getMskClusters").getMskClustersOutput = null as any;
utilities.lazyLoad(exports, ["getMskClusters","getMskClustersOutput"], () => require("./getMskClusters"));

export { GetMskConfigurationArgs, GetMskConfigurationResult, GetMskConfigurationOutputArgs } from "./getMskConfiguration";
export const getMskConfiguration: typeof import("./getMskConfiguration").getMskConfiguration = null as any;
export const getMskConfigurationOutput: typeof import("./getMskConfiguration").getMskConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getMskConfiguration","getMskConfigurationOutput"], () => require("./getMskConfiguration"));

export { GetMskConfigurationsResult } from "./getMskConfigurations";
export const getMskConfigurations: typeof import("./getMskConfigurations").getMskConfigurations = null as any;
export const getMskConfigurationsOutput: typeof import("./getMskConfigurations").getMskConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getMskConfigurations","getMskConfigurationsOutput"], () => require("./getMskConfigurations"));

export { GetMskReplicatorArgs, GetMskReplicatorResult, GetMskReplicatorOutputArgs } from "./getMskReplicator";
export const getMskReplicator: typeof import("./getMskReplicator").getMskReplicator = null as any;
export const getMskReplicatorOutput: typeof import("./getMskReplicator").getMskReplicatorOutput = null as any;
utilities.lazyLoad(exports, ["getMskReplicator","getMskReplicatorOutput"], () => require("./getMskReplicator"));

export { GetMskReplicatorsResult } from "./getMskReplicators";
export const getMskReplicators: typeof import("./getMskReplicators").getMskReplicators = null as any;
export const getMskReplicatorsOutput: typeof import("./getMskReplicators").getMskReplicatorsOutput = null as any;
utilities.lazyLoad(exports, ["getMskReplicators","getMskReplicatorsOutput"], () => require("./getMskReplicators"));

export { GetMskServerlessClusterArgs, GetMskServerlessClusterResult, GetMskServerlessClusterOutputArgs } from "./getMskServerlessCluster";
export const getMskServerlessCluster: typeof import("./getMskServerlessCluster").getMskServerlessCluster = null as any;
export const getMskServerlessClusterOutput: typeof import("./getMskServerlessCluster").getMskServerlessClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMskServerlessCluster","getMskServerlessClusterOutput"], () => require("./getMskServerlessCluster"));

export { GetMskServerlessClustersResult } from "./getMskServerlessClusters";
export const getMskServerlessClusters: typeof import("./getMskServerlessClusters").getMskServerlessClusters = null as any;
export const getMskServerlessClustersOutput: typeof import("./getMskServerlessClusters").getMskServerlessClustersOutput = null as any;
utilities.lazyLoad(exports, ["getMskServerlessClusters","getMskServerlessClustersOutput"], () => require("./getMskServerlessClusters"));

export { GetMskVpcConnectionArgs, GetMskVpcConnectionResult, GetMskVpcConnectionOutputArgs } from "./getMskVpcConnection";
export const getMskVpcConnection: typeof import("./getMskVpcConnection").getMskVpcConnection = null as any;
export const getMskVpcConnectionOutput: typeof import("./getMskVpcConnection").getMskVpcConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getMskVpcConnection","getMskVpcConnectionOutput"], () => require("./getMskVpcConnection"));

export { GetMskVpcConnectionsResult } from "./getMskVpcConnections";
export const getMskVpcConnections: typeof import("./getMskVpcConnections").getMskVpcConnections = null as any;
export const getMskVpcConnectionsOutput: typeof import("./getMskVpcConnections").getMskVpcConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getMskVpcConnections","getMskVpcConnectionsOutput"], () => require("./getMskVpcConnections"));

export { GetMwaaEnvironmentArgs, GetMwaaEnvironmentResult, GetMwaaEnvironmentOutputArgs } from "./getMwaaEnvironment";
export const getMwaaEnvironment: typeof import("./getMwaaEnvironment").getMwaaEnvironment = null as any;
export const getMwaaEnvironmentOutput: typeof import("./getMwaaEnvironment").getMwaaEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getMwaaEnvironment","getMwaaEnvironmentOutput"], () => require("./getMwaaEnvironment"));

export { GetMwaaEnvironmentsResult } from "./getMwaaEnvironments";
export const getMwaaEnvironments: typeof import("./getMwaaEnvironments").getMwaaEnvironments = null as any;
export const getMwaaEnvironmentsOutput: typeof import("./getMwaaEnvironments").getMwaaEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getMwaaEnvironments","getMwaaEnvironmentsOutput"], () => require("./getMwaaEnvironments"));

export { GetNeptuneDbClusterArgs, GetNeptuneDbClusterResult, GetNeptuneDbClusterOutputArgs } from "./getNeptuneDbCluster";
export const getNeptuneDbCluster: typeof import("./getNeptuneDbCluster").getNeptuneDbCluster = null as any;
export const getNeptuneDbClusterOutput: typeof import("./getNeptuneDbCluster").getNeptuneDbClusterOutput = null as any;
utilities.lazyLoad(exports, ["getNeptuneDbCluster","getNeptuneDbClusterOutput"], () => require("./getNeptuneDbCluster"));

export { GetNeptuneDbClustersResult } from "./getNeptuneDbClusters";
export const getNeptuneDbClusters: typeof import("./getNeptuneDbClusters").getNeptuneDbClusters = null as any;
export const getNeptuneDbClustersOutput: typeof import("./getNeptuneDbClusters").getNeptuneDbClustersOutput = null as any;
utilities.lazyLoad(exports, ["getNeptuneDbClusters","getNeptuneDbClustersOutput"], () => require("./getNeptuneDbClusters"));

export { GetNeptunegraphGraphArgs, GetNeptunegraphGraphResult, GetNeptunegraphGraphOutputArgs } from "./getNeptunegraphGraph";
export const getNeptunegraphGraph: typeof import("./getNeptunegraphGraph").getNeptunegraphGraph = null as any;
export const getNeptunegraphGraphOutput: typeof import("./getNeptunegraphGraph").getNeptunegraphGraphOutput = null as any;
utilities.lazyLoad(exports, ["getNeptunegraphGraph","getNeptunegraphGraphOutput"], () => require("./getNeptunegraphGraph"));

export { GetNeptunegraphGraphsResult } from "./getNeptunegraphGraphs";
export const getNeptunegraphGraphs: typeof import("./getNeptunegraphGraphs").getNeptunegraphGraphs = null as any;
export const getNeptunegraphGraphsOutput: typeof import("./getNeptunegraphGraphs").getNeptunegraphGraphsOutput = null as any;
utilities.lazyLoad(exports, ["getNeptunegraphGraphs","getNeptunegraphGraphsOutput"], () => require("./getNeptunegraphGraphs"));

export { GetNeptunegraphPrivateGraphEndpointArgs, GetNeptunegraphPrivateGraphEndpointResult, GetNeptunegraphPrivateGraphEndpointOutputArgs } from "./getNeptunegraphPrivateGraphEndpoint";
export const getNeptunegraphPrivateGraphEndpoint: typeof import("./getNeptunegraphPrivateGraphEndpoint").getNeptunegraphPrivateGraphEndpoint = null as any;
export const getNeptunegraphPrivateGraphEndpointOutput: typeof import("./getNeptunegraphPrivateGraphEndpoint").getNeptunegraphPrivateGraphEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getNeptunegraphPrivateGraphEndpoint","getNeptunegraphPrivateGraphEndpointOutput"], () => require("./getNeptunegraphPrivateGraphEndpoint"));

export { GetNeptunegraphPrivateGraphEndpointsResult } from "./getNeptunegraphPrivateGraphEndpoints";
export const getNeptunegraphPrivateGraphEndpoints: typeof import("./getNeptunegraphPrivateGraphEndpoints").getNeptunegraphPrivateGraphEndpoints = null as any;
export const getNeptunegraphPrivateGraphEndpointsOutput: typeof import("./getNeptunegraphPrivateGraphEndpoints").getNeptunegraphPrivateGraphEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getNeptunegraphPrivateGraphEndpoints","getNeptunegraphPrivateGraphEndpointsOutput"], () => require("./getNeptunegraphPrivateGraphEndpoints"));

export { GetNetworkfirewallFirewallArgs, GetNetworkfirewallFirewallResult, GetNetworkfirewallFirewallOutputArgs } from "./getNetworkfirewallFirewall";
export const getNetworkfirewallFirewall: typeof import("./getNetworkfirewallFirewall").getNetworkfirewallFirewall = null as any;
export const getNetworkfirewallFirewallOutput: typeof import("./getNetworkfirewallFirewall").getNetworkfirewallFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallFirewall","getNetworkfirewallFirewallOutput"], () => require("./getNetworkfirewallFirewall"));

export { GetNetworkfirewallFirewallPoliciesResult } from "./getNetworkfirewallFirewallPolicies";
export const getNetworkfirewallFirewallPolicies: typeof import("./getNetworkfirewallFirewallPolicies").getNetworkfirewallFirewallPolicies = null as any;
export const getNetworkfirewallFirewallPoliciesOutput: typeof import("./getNetworkfirewallFirewallPolicies").getNetworkfirewallFirewallPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallFirewallPolicies","getNetworkfirewallFirewallPoliciesOutput"], () => require("./getNetworkfirewallFirewallPolicies"));

export { GetNetworkfirewallFirewallPolicyArgs, GetNetworkfirewallFirewallPolicyResult, GetNetworkfirewallFirewallPolicyOutputArgs } from "./getNetworkfirewallFirewallPolicy";
export const getNetworkfirewallFirewallPolicy: typeof import("./getNetworkfirewallFirewallPolicy").getNetworkfirewallFirewallPolicy = null as any;
export const getNetworkfirewallFirewallPolicyOutput: typeof import("./getNetworkfirewallFirewallPolicy").getNetworkfirewallFirewallPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallFirewallPolicy","getNetworkfirewallFirewallPolicyOutput"], () => require("./getNetworkfirewallFirewallPolicy"));

export { GetNetworkfirewallFirewallsResult } from "./getNetworkfirewallFirewalls";
export const getNetworkfirewallFirewalls: typeof import("./getNetworkfirewallFirewalls").getNetworkfirewallFirewalls = null as any;
export const getNetworkfirewallFirewallsOutput: typeof import("./getNetworkfirewallFirewalls").getNetworkfirewallFirewallsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallFirewalls","getNetworkfirewallFirewallsOutput"], () => require("./getNetworkfirewallFirewalls"));

export { GetNetworkfirewallLoggingConfigurationArgs, GetNetworkfirewallLoggingConfigurationResult, GetNetworkfirewallLoggingConfigurationOutputArgs } from "./getNetworkfirewallLoggingConfiguration";
export const getNetworkfirewallLoggingConfiguration: typeof import("./getNetworkfirewallLoggingConfiguration").getNetworkfirewallLoggingConfiguration = null as any;
export const getNetworkfirewallLoggingConfigurationOutput: typeof import("./getNetworkfirewallLoggingConfiguration").getNetworkfirewallLoggingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallLoggingConfiguration","getNetworkfirewallLoggingConfigurationOutput"], () => require("./getNetworkfirewallLoggingConfiguration"));

export { GetNetworkfirewallLoggingConfigurationsResult } from "./getNetworkfirewallLoggingConfigurations";
export const getNetworkfirewallLoggingConfigurations: typeof import("./getNetworkfirewallLoggingConfigurations").getNetworkfirewallLoggingConfigurations = null as any;
export const getNetworkfirewallLoggingConfigurationsOutput: typeof import("./getNetworkfirewallLoggingConfigurations").getNetworkfirewallLoggingConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallLoggingConfigurations","getNetworkfirewallLoggingConfigurationsOutput"], () => require("./getNetworkfirewallLoggingConfigurations"));

export { GetNetworkfirewallRuleGroupArgs, GetNetworkfirewallRuleGroupResult, GetNetworkfirewallRuleGroupOutputArgs } from "./getNetworkfirewallRuleGroup";
export const getNetworkfirewallRuleGroup: typeof import("./getNetworkfirewallRuleGroup").getNetworkfirewallRuleGroup = null as any;
export const getNetworkfirewallRuleGroupOutput: typeof import("./getNetworkfirewallRuleGroup").getNetworkfirewallRuleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallRuleGroup","getNetworkfirewallRuleGroupOutput"], () => require("./getNetworkfirewallRuleGroup"));

export { GetNetworkfirewallRuleGroupsResult } from "./getNetworkfirewallRuleGroups";
export const getNetworkfirewallRuleGroups: typeof import("./getNetworkfirewallRuleGroups").getNetworkfirewallRuleGroups = null as any;
export const getNetworkfirewallRuleGroupsOutput: typeof import("./getNetworkfirewallRuleGroups").getNetworkfirewallRuleGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallRuleGroups","getNetworkfirewallRuleGroupsOutput"], () => require("./getNetworkfirewallRuleGroups"));

export { GetNetworkfirewallTlsInspectionConfigurationArgs, GetNetworkfirewallTlsInspectionConfigurationResult, GetNetworkfirewallTlsInspectionConfigurationOutputArgs } from "./getNetworkfirewallTlsInspectionConfiguration";
export const getNetworkfirewallTlsInspectionConfiguration: typeof import("./getNetworkfirewallTlsInspectionConfiguration").getNetworkfirewallTlsInspectionConfiguration = null as any;
export const getNetworkfirewallTlsInspectionConfigurationOutput: typeof import("./getNetworkfirewallTlsInspectionConfiguration").getNetworkfirewallTlsInspectionConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallTlsInspectionConfiguration","getNetworkfirewallTlsInspectionConfigurationOutput"], () => require("./getNetworkfirewallTlsInspectionConfiguration"));

export { GetNetworkfirewallTlsInspectionConfigurationsResult } from "./getNetworkfirewallTlsInspectionConfigurations";
export const getNetworkfirewallTlsInspectionConfigurations: typeof import("./getNetworkfirewallTlsInspectionConfigurations").getNetworkfirewallTlsInspectionConfigurations = null as any;
export const getNetworkfirewallTlsInspectionConfigurationsOutput: typeof import("./getNetworkfirewallTlsInspectionConfigurations").getNetworkfirewallTlsInspectionConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallTlsInspectionConfigurations","getNetworkfirewallTlsInspectionConfigurationsOutput"], () => require("./getNetworkfirewallTlsInspectionConfigurations"));

export { GetNetworkmanagerConnectAttachmentArgs, GetNetworkmanagerConnectAttachmentResult, GetNetworkmanagerConnectAttachmentOutputArgs } from "./getNetworkmanagerConnectAttachment";
export const getNetworkmanagerConnectAttachment: typeof import("./getNetworkmanagerConnectAttachment").getNetworkmanagerConnectAttachment = null as any;
export const getNetworkmanagerConnectAttachmentOutput: typeof import("./getNetworkmanagerConnectAttachment").getNetworkmanagerConnectAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerConnectAttachment","getNetworkmanagerConnectAttachmentOutput"], () => require("./getNetworkmanagerConnectAttachment"));

export { GetNetworkmanagerConnectAttachmentsResult } from "./getNetworkmanagerConnectAttachments";
export const getNetworkmanagerConnectAttachments: typeof import("./getNetworkmanagerConnectAttachments").getNetworkmanagerConnectAttachments = null as any;
export const getNetworkmanagerConnectAttachmentsOutput: typeof import("./getNetworkmanagerConnectAttachments").getNetworkmanagerConnectAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerConnectAttachments","getNetworkmanagerConnectAttachmentsOutput"], () => require("./getNetworkmanagerConnectAttachments"));

export { GetNetworkmanagerConnectPeerArgs, GetNetworkmanagerConnectPeerResult, GetNetworkmanagerConnectPeerOutputArgs } from "./getNetworkmanagerConnectPeer";
export const getNetworkmanagerConnectPeer: typeof import("./getNetworkmanagerConnectPeer").getNetworkmanagerConnectPeer = null as any;
export const getNetworkmanagerConnectPeerOutput: typeof import("./getNetworkmanagerConnectPeer").getNetworkmanagerConnectPeerOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerConnectPeer","getNetworkmanagerConnectPeerOutput"], () => require("./getNetworkmanagerConnectPeer"));

export { GetNetworkmanagerConnectPeersResult } from "./getNetworkmanagerConnectPeers";
export const getNetworkmanagerConnectPeers: typeof import("./getNetworkmanagerConnectPeers").getNetworkmanagerConnectPeers = null as any;
export const getNetworkmanagerConnectPeersOutput: typeof import("./getNetworkmanagerConnectPeers").getNetworkmanagerConnectPeersOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerConnectPeers","getNetworkmanagerConnectPeersOutput"], () => require("./getNetworkmanagerConnectPeers"));

export { GetNetworkmanagerCoreNetworkArgs, GetNetworkmanagerCoreNetworkResult, GetNetworkmanagerCoreNetworkOutputArgs } from "./getNetworkmanagerCoreNetwork";
export const getNetworkmanagerCoreNetwork: typeof import("./getNetworkmanagerCoreNetwork").getNetworkmanagerCoreNetwork = null as any;
export const getNetworkmanagerCoreNetworkOutput: typeof import("./getNetworkmanagerCoreNetwork").getNetworkmanagerCoreNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerCoreNetwork","getNetworkmanagerCoreNetworkOutput"], () => require("./getNetworkmanagerCoreNetwork"));

export { GetNetworkmanagerCoreNetworksResult } from "./getNetworkmanagerCoreNetworks";
export const getNetworkmanagerCoreNetworks: typeof import("./getNetworkmanagerCoreNetworks").getNetworkmanagerCoreNetworks = null as any;
export const getNetworkmanagerCoreNetworksOutput: typeof import("./getNetworkmanagerCoreNetworks").getNetworkmanagerCoreNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerCoreNetworks","getNetworkmanagerCoreNetworksOutput"], () => require("./getNetworkmanagerCoreNetworks"));

export { GetNetworkmanagerCustomerGatewayAssociationArgs, GetNetworkmanagerCustomerGatewayAssociationResult, GetNetworkmanagerCustomerGatewayAssociationOutputArgs } from "./getNetworkmanagerCustomerGatewayAssociation";
export const getNetworkmanagerCustomerGatewayAssociation: typeof import("./getNetworkmanagerCustomerGatewayAssociation").getNetworkmanagerCustomerGatewayAssociation = null as any;
export const getNetworkmanagerCustomerGatewayAssociationOutput: typeof import("./getNetworkmanagerCustomerGatewayAssociation").getNetworkmanagerCustomerGatewayAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerCustomerGatewayAssociation","getNetworkmanagerCustomerGatewayAssociationOutput"], () => require("./getNetworkmanagerCustomerGatewayAssociation"));

export { GetNetworkmanagerDeviceArgs, GetNetworkmanagerDeviceResult, GetNetworkmanagerDeviceOutputArgs } from "./getNetworkmanagerDevice";
export const getNetworkmanagerDevice: typeof import("./getNetworkmanagerDevice").getNetworkmanagerDevice = null as any;
export const getNetworkmanagerDeviceOutput: typeof import("./getNetworkmanagerDevice").getNetworkmanagerDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerDevice","getNetworkmanagerDeviceOutput"], () => require("./getNetworkmanagerDevice"));

export { GetNetworkmanagerGlobalNetworkArgs, GetNetworkmanagerGlobalNetworkResult, GetNetworkmanagerGlobalNetworkOutputArgs } from "./getNetworkmanagerGlobalNetwork";
export const getNetworkmanagerGlobalNetwork: typeof import("./getNetworkmanagerGlobalNetwork").getNetworkmanagerGlobalNetwork = null as any;
export const getNetworkmanagerGlobalNetworkOutput: typeof import("./getNetworkmanagerGlobalNetwork").getNetworkmanagerGlobalNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerGlobalNetwork","getNetworkmanagerGlobalNetworkOutput"], () => require("./getNetworkmanagerGlobalNetwork"));

export { GetNetworkmanagerGlobalNetworksResult } from "./getNetworkmanagerGlobalNetworks";
export const getNetworkmanagerGlobalNetworks: typeof import("./getNetworkmanagerGlobalNetworks").getNetworkmanagerGlobalNetworks = null as any;
export const getNetworkmanagerGlobalNetworksOutput: typeof import("./getNetworkmanagerGlobalNetworks").getNetworkmanagerGlobalNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerGlobalNetworks","getNetworkmanagerGlobalNetworksOutput"], () => require("./getNetworkmanagerGlobalNetworks"));

export { GetNetworkmanagerLinkArgs, GetNetworkmanagerLinkResult, GetNetworkmanagerLinkOutputArgs } from "./getNetworkmanagerLink";
export const getNetworkmanagerLink: typeof import("./getNetworkmanagerLink").getNetworkmanagerLink = null as any;
export const getNetworkmanagerLinkOutput: typeof import("./getNetworkmanagerLink").getNetworkmanagerLinkOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerLink","getNetworkmanagerLinkOutput"], () => require("./getNetworkmanagerLink"));

export { GetNetworkmanagerLinkAssociationArgs, GetNetworkmanagerLinkAssociationResult, GetNetworkmanagerLinkAssociationOutputArgs } from "./getNetworkmanagerLinkAssociation";
export const getNetworkmanagerLinkAssociation: typeof import("./getNetworkmanagerLinkAssociation").getNetworkmanagerLinkAssociation = null as any;
export const getNetworkmanagerLinkAssociationOutput: typeof import("./getNetworkmanagerLinkAssociation").getNetworkmanagerLinkAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerLinkAssociation","getNetworkmanagerLinkAssociationOutput"], () => require("./getNetworkmanagerLinkAssociation"));

export { GetNetworkmanagerSiteArgs, GetNetworkmanagerSiteResult, GetNetworkmanagerSiteOutputArgs } from "./getNetworkmanagerSite";
export const getNetworkmanagerSite: typeof import("./getNetworkmanagerSite").getNetworkmanagerSite = null as any;
export const getNetworkmanagerSiteOutput: typeof import("./getNetworkmanagerSite").getNetworkmanagerSiteOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerSite","getNetworkmanagerSiteOutput"], () => require("./getNetworkmanagerSite"));

export { GetNetworkmanagerSiteToSiteVpnAttachmentArgs, GetNetworkmanagerSiteToSiteVpnAttachmentResult, GetNetworkmanagerSiteToSiteVpnAttachmentOutputArgs } from "./getNetworkmanagerSiteToSiteVpnAttachment";
export const getNetworkmanagerSiteToSiteVpnAttachment: typeof import("./getNetworkmanagerSiteToSiteVpnAttachment").getNetworkmanagerSiteToSiteVpnAttachment = null as any;
export const getNetworkmanagerSiteToSiteVpnAttachmentOutput: typeof import("./getNetworkmanagerSiteToSiteVpnAttachment").getNetworkmanagerSiteToSiteVpnAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerSiteToSiteVpnAttachment","getNetworkmanagerSiteToSiteVpnAttachmentOutput"], () => require("./getNetworkmanagerSiteToSiteVpnAttachment"));

export { GetNetworkmanagerSiteToSiteVpnAttachmentsResult } from "./getNetworkmanagerSiteToSiteVpnAttachments";
export const getNetworkmanagerSiteToSiteVpnAttachments: typeof import("./getNetworkmanagerSiteToSiteVpnAttachments").getNetworkmanagerSiteToSiteVpnAttachments = null as any;
export const getNetworkmanagerSiteToSiteVpnAttachmentsOutput: typeof import("./getNetworkmanagerSiteToSiteVpnAttachments").getNetworkmanagerSiteToSiteVpnAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerSiteToSiteVpnAttachments","getNetworkmanagerSiteToSiteVpnAttachmentsOutput"], () => require("./getNetworkmanagerSiteToSiteVpnAttachments"));

export { GetNetworkmanagerTransitGatewayPeeringArgs, GetNetworkmanagerTransitGatewayPeeringResult, GetNetworkmanagerTransitGatewayPeeringOutputArgs } from "./getNetworkmanagerTransitGatewayPeering";
export const getNetworkmanagerTransitGatewayPeering: typeof import("./getNetworkmanagerTransitGatewayPeering").getNetworkmanagerTransitGatewayPeering = null as any;
export const getNetworkmanagerTransitGatewayPeeringOutput: typeof import("./getNetworkmanagerTransitGatewayPeering").getNetworkmanagerTransitGatewayPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerTransitGatewayPeering","getNetworkmanagerTransitGatewayPeeringOutput"], () => require("./getNetworkmanagerTransitGatewayPeering"));

export { GetNetworkmanagerTransitGatewayPeeringsResult } from "./getNetworkmanagerTransitGatewayPeerings";
export const getNetworkmanagerTransitGatewayPeerings: typeof import("./getNetworkmanagerTransitGatewayPeerings").getNetworkmanagerTransitGatewayPeerings = null as any;
export const getNetworkmanagerTransitGatewayPeeringsOutput: typeof import("./getNetworkmanagerTransitGatewayPeerings").getNetworkmanagerTransitGatewayPeeringsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerTransitGatewayPeerings","getNetworkmanagerTransitGatewayPeeringsOutput"], () => require("./getNetworkmanagerTransitGatewayPeerings"));

export { GetNetworkmanagerTransitGatewayRegistrationArgs, GetNetworkmanagerTransitGatewayRegistrationResult, GetNetworkmanagerTransitGatewayRegistrationOutputArgs } from "./getNetworkmanagerTransitGatewayRegistration";
export const getNetworkmanagerTransitGatewayRegistration: typeof import("./getNetworkmanagerTransitGatewayRegistration").getNetworkmanagerTransitGatewayRegistration = null as any;
export const getNetworkmanagerTransitGatewayRegistrationOutput: typeof import("./getNetworkmanagerTransitGatewayRegistration").getNetworkmanagerTransitGatewayRegistrationOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerTransitGatewayRegistration","getNetworkmanagerTransitGatewayRegistrationOutput"], () => require("./getNetworkmanagerTransitGatewayRegistration"));

export { GetNetworkmanagerTransitGatewayRouteTableAttachmentArgs, GetNetworkmanagerTransitGatewayRouteTableAttachmentResult, GetNetworkmanagerTransitGatewayRouteTableAttachmentOutputArgs } from "./getNetworkmanagerTransitGatewayRouteTableAttachment";
export const getNetworkmanagerTransitGatewayRouteTableAttachment: typeof import("./getNetworkmanagerTransitGatewayRouteTableAttachment").getNetworkmanagerTransitGatewayRouteTableAttachment = null as any;
export const getNetworkmanagerTransitGatewayRouteTableAttachmentOutput: typeof import("./getNetworkmanagerTransitGatewayRouteTableAttachment").getNetworkmanagerTransitGatewayRouteTableAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerTransitGatewayRouteTableAttachment","getNetworkmanagerTransitGatewayRouteTableAttachmentOutput"], () => require("./getNetworkmanagerTransitGatewayRouteTableAttachment"));

export { GetNetworkmanagerTransitGatewayRouteTableAttachmentsResult } from "./getNetworkmanagerTransitGatewayRouteTableAttachments";
export const getNetworkmanagerTransitGatewayRouteTableAttachments: typeof import("./getNetworkmanagerTransitGatewayRouteTableAttachments").getNetworkmanagerTransitGatewayRouteTableAttachments = null as any;
export const getNetworkmanagerTransitGatewayRouteTableAttachmentsOutput: typeof import("./getNetworkmanagerTransitGatewayRouteTableAttachments").getNetworkmanagerTransitGatewayRouteTableAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerTransitGatewayRouteTableAttachments","getNetworkmanagerTransitGatewayRouteTableAttachmentsOutput"], () => require("./getNetworkmanagerTransitGatewayRouteTableAttachments"));

export { GetNetworkmanagerVpcAttachmentArgs, GetNetworkmanagerVpcAttachmentResult, GetNetworkmanagerVpcAttachmentOutputArgs } from "./getNetworkmanagerVpcAttachment";
export const getNetworkmanagerVpcAttachment: typeof import("./getNetworkmanagerVpcAttachment").getNetworkmanagerVpcAttachment = null as any;
export const getNetworkmanagerVpcAttachmentOutput: typeof import("./getNetworkmanagerVpcAttachment").getNetworkmanagerVpcAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerVpcAttachment","getNetworkmanagerVpcAttachmentOutput"], () => require("./getNetworkmanagerVpcAttachment"));

export { GetNetworkmanagerVpcAttachmentsResult } from "./getNetworkmanagerVpcAttachments";
export const getNetworkmanagerVpcAttachments: typeof import("./getNetworkmanagerVpcAttachments").getNetworkmanagerVpcAttachments = null as any;
export const getNetworkmanagerVpcAttachmentsOutput: typeof import("./getNetworkmanagerVpcAttachments").getNetworkmanagerVpcAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerVpcAttachments","getNetworkmanagerVpcAttachmentsOutput"], () => require("./getNetworkmanagerVpcAttachments"));

export { GetNimblestudioLaunchProfileArgs, GetNimblestudioLaunchProfileResult, GetNimblestudioLaunchProfileOutputArgs } from "./getNimblestudioLaunchProfile";
export const getNimblestudioLaunchProfile: typeof import("./getNimblestudioLaunchProfile").getNimblestudioLaunchProfile = null as any;
export const getNimblestudioLaunchProfileOutput: typeof import("./getNimblestudioLaunchProfile").getNimblestudioLaunchProfileOutput = null as any;
utilities.lazyLoad(exports, ["getNimblestudioLaunchProfile","getNimblestudioLaunchProfileOutput"], () => require("./getNimblestudioLaunchProfile"));

export { GetNimblestudioStreamingImageArgs, GetNimblestudioStreamingImageResult, GetNimblestudioStreamingImageOutputArgs } from "./getNimblestudioStreamingImage";
export const getNimblestudioStreamingImage: typeof import("./getNimblestudioStreamingImage").getNimblestudioStreamingImage = null as any;
export const getNimblestudioStreamingImageOutput: typeof import("./getNimblestudioStreamingImage").getNimblestudioStreamingImageOutput = null as any;
utilities.lazyLoad(exports, ["getNimblestudioStreamingImage","getNimblestudioStreamingImageOutput"], () => require("./getNimblestudioStreamingImage"));

export { GetNimblestudioStudioArgs, GetNimblestudioStudioResult, GetNimblestudioStudioOutputArgs } from "./getNimblestudioStudio";
export const getNimblestudioStudio: typeof import("./getNimblestudioStudio").getNimblestudioStudio = null as any;
export const getNimblestudioStudioOutput: typeof import("./getNimblestudioStudio").getNimblestudioStudioOutput = null as any;
utilities.lazyLoad(exports, ["getNimblestudioStudio","getNimblestudioStudioOutput"], () => require("./getNimblestudioStudio"));

export { GetNimblestudioStudioComponentArgs, GetNimblestudioStudioComponentResult, GetNimblestudioStudioComponentOutputArgs } from "./getNimblestudioStudioComponent";
export const getNimblestudioStudioComponent: typeof import("./getNimblestudioStudioComponent").getNimblestudioStudioComponent = null as any;
export const getNimblestudioStudioComponentOutput: typeof import("./getNimblestudioStudioComponent").getNimblestudioStudioComponentOutput = null as any;
utilities.lazyLoad(exports, ["getNimblestudioStudioComponent","getNimblestudioStudioComponentOutput"], () => require("./getNimblestudioStudioComponent"));

export { GetNimblestudioStudiosResult } from "./getNimblestudioStudios";
export const getNimblestudioStudios: typeof import("./getNimblestudioStudios").getNimblestudioStudios = null as any;
export const getNimblestudioStudiosOutput: typeof import("./getNimblestudioStudios").getNimblestudioStudiosOutput = null as any;
utilities.lazyLoad(exports, ["getNimblestudioStudios","getNimblestudioStudiosOutput"], () => require("./getNimblestudioStudios"));

export { GetOamLinkArgs, GetOamLinkResult, GetOamLinkOutputArgs } from "./getOamLink";
export const getOamLink: typeof import("./getOamLink").getOamLink = null as any;
export const getOamLinkOutput: typeof import("./getOamLink").getOamLinkOutput = null as any;
utilities.lazyLoad(exports, ["getOamLink","getOamLinkOutput"], () => require("./getOamLink"));

export { GetOamLinksResult } from "./getOamLinks";
export const getOamLinks: typeof import("./getOamLinks").getOamLinks = null as any;
export const getOamLinksOutput: typeof import("./getOamLinks").getOamLinksOutput = null as any;
utilities.lazyLoad(exports, ["getOamLinks","getOamLinksOutput"], () => require("./getOamLinks"));

export { GetOamSinkArgs, GetOamSinkResult, GetOamSinkOutputArgs } from "./getOamSink";
export const getOamSink: typeof import("./getOamSink").getOamSink = null as any;
export const getOamSinkOutput: typeof import("./getOamSink").getOamSinkOutput = null as any;
utilities.lazyLoad(exports, ["getOamSink","getOamSinkOutput"], () => require("./getOamSink"));

export { GetOamSinksResult } from "./getOamSinks";
export const getOamSinks: typeof import("./getOamSinks").getOamSinks = null as any;
export const getOamSinksOutput: typeof import("./getOamSinks").getOamSinksOutput = null as any;
utilities.lazyLoad(exports, ["getOamSinks","getOamSinksOutput"], () => require("./getOamSinks"));

export { GetOmicsReferenceStoreArgs, GetOmicsReferenceStoreResult, GetOmicsReferenceStoreOutputArgs } from "./getOmicsReferenceStore";
export const getOmicsReferenceStore: typeof import("./getOmicsReferenceStore").getOmicsReferenceStore = null as any;
export const getOmicsReferenceStoreOutput: typeof import("./getOmicsReferenceStore").getOmicsReferenceStoreOutput = null as any;
utilities.lazyLoad(exports, ["getOmicsReferenceStore","getOmicsReferenceStoreOutput"], () => require("./getOmicsReferenceStore"));

export { GetOmicsReferenceStoresResult } from "./getOmicsReferenceStores";
export const getOmicsReferenceStores: typeof import("./getOmicsReferenceStores").getOmicsReferenceStores = null as any;
export const getOmicsReferenceStoresOutput: typeof import("./getOmicsReferenceStores").getOmicsReferenceStoresOutput = null as any;
utilities.lazyLoad(exports, ["getOmicsReferenceStores","getOmicsReferenceStoresOutput"], () => require("./getOmicsReferenceStores"));

export { GetOmicsRunGroupArgs, GetOmicsRunGroupResult, GetOmicsRunGroupOutputArgs } from "./getOmicsRunGroup";
export const getOmicsRunGroup: typeof import("./getOmicsRunGroup").getOmicsRunGroup = null as any;
export const getOmicsRunGroupOutput: typeof import("./getOmicsRunGroup").getOmicsRunGroupOutput = null as any;
utilities.lazyLoad(exports, ["getOmicsRunGroup","getOmicsRunGroupOutput"], () => require("./getOmicsRunGroup"));

export { GetOmicsRunGroupsResult } from "./getOmicsRunGroups";
export const getOmicsRunGroups: typeof import("./getOmicsRunGroups").getOmicsRunGroups = null as any;
export const getOmicsRunGroupsOutput: typeof import("./getOmicsRunGroups").getOmicsRunGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getOmicsRunGroups","getOmicsRunGroupsOutput"], () => require("./getOmicsRunGroups"));

export { GetOmicsSequenceStoreArgs, GetOmicsSequenceStoreResult, GetOmicsSequenceStoreOutputArgs } from "./getOmicsSequenceStore";
export const getOmicsSequenceStore: typeof import("./getOmicsSequenceStore").getOmicsSequenceStore = null as any;
export const getOmicsSequenceStoreOutput: typeof import("./getOmicsSequenceStore").getOmicsSequenceStoreOutput = null as any;
utilities.lazyLoad(exports, ["getOmicsSequenceStore","getOmicsSequenceStoreOutput"], () => require("./getOmicsSequenceStore"));

export { GetOmicsSequenceStoresResult } from "./getOmicsSequenceStores";
export const getOmicsSequenceStores: typeof import("./getOmicsSequenceStores").getOmicsSequenceStores = null as any;
export const getOmicsSequenceStoresOutput: typeof import("./getOmicsSequenceStores").getOmicsSequenceStoresOutput = null as any;
utilities.lazyLoad(exports, ["getOmicsSequenceStores","getOmicsSequenceStoresOutput"], () => require("./getOmicsSequenceStores"));

export { GetOmicsVariantStoreArgs, GetOmicsVariantStoreResult, GetOmicsVariantStoreOutputArgs } from "./getOmicsVariantStore";
export const getOmicsVariantStore: typeof import("./getOmicsVariantStore").getOmicsVariantStore = null as any;
export const getOmicsVariantStoreOutput: typeof import("./getOmicsVariantStore").getOmicsVariantStoreOutput = null as any;
utilities.lazyLoad(exports, ["getOmicsVariantStore","getOmicsVariantStoreOutput"], () => require("./getOmicsVariantStore"));

export { GetOmicsVariantStoresResult } from "./getOmicsVariantStores";
export const getOmicsVariantStores: typeof import("./getOmicsVariantStores").getOmicsVariantStores = null as any;
export const getOmicsVariantStoresOutput: typeof import("./getOmicsVariantStores").getOmicsVariantStoresOutput = null as any;
utilities.lazyLoad(exports, ["getOmicsVariantStores","getOmicsVariantStoresOutput"], () => require("./getOmicsVariantStores"));

export { GetOmicsWorkflowArgs, GetOmicsWorkflowResult, GetOmicsWorkflowOutputArgs } from "./getOmicsWorkflow";
export const getOmicsWorkflow: typeof import("./getOmicsWorkflow").getOmicsWorkflow = null as any;
export const getOmicsWorkflowOutput: typeof import("./getOmicsWorkflow").getOmicsWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getOmicsWorkflow","getOmicsWorkflowOutput"], () => require("./getOmicsWorkflow"));

export { GetOmicsWorkflowsResult } from "./getOmicsWorkflows";
export const getOmicsWorkflows: typeof import("./getOmicsWorkflows").getOmicsWorkflows = null as any;
export const getOmicsWorkflowsOutput: typeof import("./getOmicsWorkflows").getOmicsWorkflowsOutput = null as any;
utilities.lazyLoad(exports, ["getOmicsWorkflows","getOmicsWorkflowsOutput"], () => require("./getOmicsWorkflows"));

export { GetOpensearchserverlessAccessPolicyArgs, GetOpensearchserverlessAccessPolicyResult, GetOpensearchserverlessAccessPolicyOutputArgs } from "./getOpensearchserverlessAccessPolicy";
export const getOpensearchserverlessAccessPolicy: typeof import("./getOpensearchserverlessAccessPolicy").getOpensearchserverlessAccessPolicy = null as any;
export const getOpensearchserverlessAccessPolicyOutput: typeof import("./getOpensearchserverlessAccessPolicy").getOpensearchserverlessAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessAccessPolicy","getOpensearchserverlessAccessPolicyOutput"], () => require("./getOpensearchserverlessAccessPolicy"));

export { GetOpensearchserverlessCollectionArgs, GetOpensearchserverlessCollectionResult, GetOpensearchserverlessCollectionOutputArgs } from "./getOpensearchserverlessCollection";
export const getOpensearchserverlessCollection: typeof import("./getOpensearchserverlessCollection").getOpensearchserverlessCollection = null as any;
export const getOpensearchserverlessCollectionOutput: typeof import("./getOpensearchserverlessCollection").getOpensearchserverlessCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessCollection","getOpensearchserverlessCollectionOutput"], () => require("./getOpensearchserverlessCollection"));

export { GetOpensearchserverlessCollectionsResult } from "./getOpensearchserverlessCollections";
export const getOpensearchserverlessCollections: typeof import("./getOpensearchserverlessCollections").getOpensearchserverlessCollections = null as any;
export const getOpensearchserverlessCollectionsOutput: typeof import("./getOpensearchserverlessCollections").getOpensearchserverlessCollectionsOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessCollections","getOpensearchserverlessCollectionsOutput"], () => require("./getOpensearchserverlessCollections"));

export { GetOpensearchserverlessLifecyclePolicyArgs, GetOpensearchserverlessLifecyclePolicyResult, GetOpensearchserverlessLifecyclePolicyOutputArgs } from "./getOpensearchserverlessLifecyclePolicy";
export const getOpensearchserverlessLifecyclePolicy: typeof import("./getOpensearchserverlessLifecyclePolicy").getOpensearchserverlessLifecyclePolicy = null as any;
export const getOpensearchserverlessLifecyclePolicyOutput: typeof import("./getOpensearchserverlessLifecyclePolicy").getOpensearchserverlessLifecyclePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessLifecyclePolicy","getOpensearchserverlessLifecyclePolicyOutput"], () => require("./getOpensearchserverlessLifecyclePolicy"));

export { GetOpensearchserverlessSecurityConfigArgs, GetOpensearchserverlessSecurityConfigResult, GetOpensearchserverlessSecurityConfigOutputArgs } from "./getOpensearchserverlessSecurityConfig";
export const getOpensearchserverlessSecurityConfig: typeof import("./getOpensearchserverlessSecurityConfig").getOpensearchserverlessSecurityConfig = null as any;
export const getOpensearchserverlessSecurityConfigOutput: typeof import("./getOpensearchserverlessSecurityConfig").getOpensearchserverlessSecurityConfigOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessSecurityConfig","getOpensearchserverlessSecurityConfigOutput"], () => require("./getOpensearchserverlessSecurityConfig"));

export { GetOpensearchserverlessSecurityPolicyArgs, GetOpensearchserverlessSecurityPolicyResult, GetOpensearchserverlessSecurityPolicyOutputArgs } from "./getOpensearchserverlessSecurityPolicy";
export const getOpensearchserverlessSecurityPolicy: typeof import("./getOpensearchserverlessSecurityPolicy").getOpensearchserverlessSecurityPolicy = null as any;
export const getOpensearchserverlessSecurityPolicyOutput: typeof import("./getOpensearchserverlessSecurityPolicy").getOpensearchserverlessSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessSecurityPolicy","getOpensearchserverlessSecurityPolicyOutput"], () => require("./getOpensearchserverlessSecurityPolicy"));

export { GetOpensearchserverlessVpcEndpointArgs, GetOpensearchserverlessVpcEndpointResult, GetOpensearchserverlessVpcEndpointOutputArgs } from "./getOpensearchserverlessVpcEndpoint";
export const getOpensearchserverlessVpcEndpoint: typeof import("./getOpensearchserverlessVpcEndpoint").getOpensearchserverlessVpcEndpoint = null as any;
export const getOpensearchserverlessVpcEndpointOutput: typeof import("./getOpensearchserverlessVpcEndpoint").getOpensearchserverlessVpcEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessVpcEndpoint","getOpensearchserverlessVpcEndpointOutput"], () => require("./getOpensearchserverlessVpcEndpoint"));

export { GetOpensearchserverlessVpcEndpointsResult } from "./getOpensearchserverlessVpcEndpoints";
export const getOpensearchserverlessVpcEndpoints: typeof import("./getOpensearchserverlessVpcEndpoints").getOpensearchserverlessVpcEndpoints = null as any;
export const getOpensearchserverlessVpcEndpointsOutput: typeof import("./getOpensearchserverlessVpcEndpoints").getOpensearchserverlessVpcEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessVpcEndpoints","getOpensearchserverlessVpcEndpointsOutput"], () => require("./getOpensearchserverlessVpcEndpoints"));

export { GetOpensearchserviceDomainArgs, GetOpensearchserviceDomainResult, GetOpensearchserviceDomainOutputArgs } from "./getOpensearchserviceDomain";
export const getOpensearchserviceDomain: typeof import("./getOpensearchserviceDomain").getOpensearchserviceDomain = null as any;
export const getOpensearchserviceDomainOutput: typeof import("./getOpensearchserviceDomain").getOpensearchserviceDomainOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserviceDomain","getOpensearchserviceDomainOutput"], () => require("./getOpensearchserviceDomain"));

export { GetOpsworkscmServerArgs, GetOpsworkscmServerResult, GetOpsworkscmServerOutputArgs } from "./getOpsworkscmServer";
export const getOpsworkscmServer: typeof import("./getOpsworkscmServer").getOpsworkscmServer = null as any;
export const getOpsworkscmServerOutput: typeof import("./getOpsworkscmServer").getOpsworkscmServerOutput = null as any;
utilities.lazyLoad(exports, ["getOpsworkscmServer","getOpsworkscmServerOutput"], () => require("./getOpsworkscmServer"));

export { GetOpsworkscmServersResult } from "./getOpsworkscmServers";
export const getOpsworkscmServers: typeof import("./getOpsworkscmServers").getOpsworkscmServers = null as any;
export const getOpsworkscmServersOutput: typeof import("./getOpsworkscmServers").getOpsworkscmServersOutput = null as any;
utilities.lazyLoad(exports, ["getOpsworkscmServers","getOpsworkscmServersOutput"], () => require("./getOpsworkscmServers"));

export { GetOrganizationsAccountArgs, GetOrganizationsAccountResult, GetOrganizationsAccountOutputArgs } from "./getOrganizationsAccount";
export const getOrganizationsAccount: typeof import("./getOrganizationsAccount").getOrganizationsAccount = null as any;
export const getOrganizationsAccountOutput: typeof import("./getOrganizationsAccount").getOrganizationsAccountOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsAccount","getOrganizationsAccountOutput"], () => require("./getOrganizationsAccount"));

export { GetOrganizationsAccountsResult } from "./getOrganizationsAccounts";
export const getOrganizationsAccounts: typeof import("./getOrganizationsAccounts").getOrganizationsAccounts = null as any;
export const getOrganizationsAccountsOutput: typeof import("./getOrganizationsAccounts").getOrganizationsAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsAccounts","getOrganizationsAccountsOutput"], () => require("./getOrganizationsAccounts"));

export { GetOrganizationsOrganizationArgs, GetOrganizationsOrganizationResult, GetOrganizationsOrganizationOutputArgs } from "./getOrganizationsOrganization";
export const getOrganizationsOrganization: typeof import("./getOrganizationsOrganization").getOrganizationsOrganization = null as any;
export const getOrganizationsOrganizationOutput: typeof import("./getOrganizationsOrganization").getOrganizationsOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsOrganization","getOrganizationsOrganizationOutput"], () => require("./getOrganizationsOrganization"));

export { GetOrganizationsOrganizationalUnitArgs, GetOrganizationsOrganizationalUnitResult, GetOrganizationsOrganizationalUnitOutputArgs } from "./getOrganizationsOrganizationalUnit";
export const getOrganizationsOrganizationalUnit: typeof import("./getOrganizationsOrganizationalUnit").getOrganizationsOrganizationalUnit = null as any;
export const getOrganizationsOrganizationalUnitOutput: typeof import("./getOrganizationsOrganizationalUnit").getOrganizationsOrganizationalUnitOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsOrganizationalUnit","getOrganizationsOrganizationalUnitOutput"], () => require("./getOrganizationsOrganizationalUnit"));

export { GetOrganizationsOrganizationsResult } from "./getOrganizationsOrganizations";
export const getOrganizationsOrganizations: typeof import("./getOrganizationsOrganizations").getOrganizationsOrganizations = null as any;
export const getOrganizationsOrganizationsOutput: typeof import("./getOrganizationsOrganizations").getOrganizationsOrganizationsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsOrganizations","getOrganizationsOrganizationsOutput"], () => require("./getOrganizationsOrganizations"));

export { GetOrganizationsPolicyArgs, GetOrganizationsPolicyResult, GetOrganizationsPolicyOutputArgs } from "./getOrganizationsPolicy";
export const getOrganizationsPolicy: typeof import("./getOrganizationsPolicy").getOrganizationsPolicy = null as any;
export const getOrganizationsPolicyOutput: typeof import("./getOrganizationsPolicy").getOrganizationsPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsPolicy","getOrganizationsPolicyOutput"], () => require("./getOrganizationsPolicy"));

export { GetOrganizationsResourcePoliciesResult } from "./getOrganizationsResourcePolicies";
export const getOrganizationsResourcePolicies: typeof import("./getOrganizationsResourcePolicies").getOrganizationsResourcePolicies = null as any;
export const getOrganizationsResourcePoliciesOutput: typeof import("./getOrganizationsResourcePolicies").getOrganizationsResourcePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsResourcePolicies","getOrganizationsResourcePoliciesOutput"], () => require("./getOrganizationsResourcePolicies"));

export { GetOrganizationsResourcePolicyArgs, GetOrganizationsResourcePolicyResult, GetOrganizationsResourcePolicyOutputArgs } from "./getOrganizationsResourcePolicy";
export const getOrganizationsResourcePolicy: typeof import("./getOrganizationsResourcePolicy").getOrganizationsResourcePolicy = null as any;
export const getOrganizationsResourcePolicyOutput: typeof import("./getOrganizationsResourcePolicy").getOrganizationsResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsResourcePolicy","getOrganizationsResourcePolicyOutput"], () => require("./getOrganizationsResourcePolicy"));

export { GetOsisPipelineArgs, GetOsisPipelineResult, GetOsisPipelineOutputArgs } from "./getOsisPipeline";
export const getOsisPipeline: typeof import("./getOsisPipeline").getOsisPipeline = null as any;
export const getOsisPipelineOutput: typeof import("./getOsisPipeline").getOsisPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getOsisPipeline","getOsisPipelineOutput"], () => require("./getOsisPipeline"));

export { GetOsisPipelinesResult } from "./getOsisPipelines";
export const getOsisPipelines: typeof import("./getOsisPipelines").getOsisPipelines = null as any;
export const getOsisPipelinesOutput: typeof import("./getOsisPipelines").getOsisPipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getOsisPipelines","getOsisPipelinesOutput"], () => require("./getOsisPipelines"));

export { GetPanoramaApplicationInstanceArgs, GetPanoramaApplicationInstanceResult, GetPanoramaApplicationInstanceOutputArgs } from "./getPanoramaApplicationInstance";
export const getPanoramaApplicationInstance: typeof import("./getPanoramaApplicationInstance").getPanoramaApplicationInstance = null as any;
export const getPanoramaApplicationInstanceOutput: typeof import("./getPanoramaApplicationInstance").getPanoramaApplicationInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getPanoramaApplicationInstance","getPanoramaApplicationInstanceOutput"], () => require("./getPanoramaApplicationInstance"));

export { GetPanoramaApplicationInstancesResult } from "./getPanoramaApplicationInstances";
export const getPanoramaApplicationInstances: typeof import("./getPanoramaApplicationInstances").getPanoramaApplicationInstances = null as any;
export const getPanoramaApplicationInstancesOutput: typeof import("./getPanoramaApplicationInstances").getPanoramaApplicationInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getPanoramaApplicationInstances","getPanoramaApplicationInstancesOutput"], () => require("./getPanoramaApplicationInstances"));

export { GetPanoramaPackageArgs, GetPanoramaPackageResult, GetPanoramaPackageOutputArgs } from "./getPanoramaPackage";
export const getPanoramaPackage: typeof import("./getPanoramaPackage").getPanoramaPackage = null as any;
export const getPanoramaPackageOutput: typeof import("./getPanoramaPackage").getPanoramaPackageOutput = null as any;
utilities.lazyLoad(exports, ["getPanoramaPackage","getPanoramaPackageOutput"], () => require("./getPanoramaPackage"));

export { GetPanoramaPackageVersionArgs, GetPanoramaPackageVersionResult, GetPanoramaPackageVersionOutputArgs } from "./getPanoramaPackageVersion";
export const getPanoramaPackageVersion: typeof import("./getPanoramaPackageVersion").getPanoramaPackageVersion = null as any;
export const getPanoramaPackageVersionOutput: typeof import("./getPanoramaPackageVersion").getPanoramaPackageVersionOutput = null as any;
utilities.lazyLoad(exports, ["getPanoramaPackageVersion","getPanoramaPackageVersionOutput"], () => require("./getPanoramaPackageVersion"));

export { GetPanoramaPackagesResult } from "./getPanoramaPackages";
export const getPanoramaPackages: typeof import("./getPanoramaPackages").getPanoramaPackages = null as any;
export const getPanoramaPackagesOutput: typeof import("./getPanoramaPackages").getPanoramaPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getPanoramaPackages","getPanoramaPackagesOutput"], () => require("./getPanoramaPackages"));

export { GetPaymentcryptographyAliasArgs, GetPaymentcryptographyAliasResult, GetPaymentcryptographyAliasOutputArgs } from "./getPaymentcryptographyAlias";
export const getPaymentcryptographyAlias: typeof import("./getPaymentcryptographyAlias").getPaymentcryptographyAlias = null as any;
export const getPaymentcryptographyAliasOutput: typeof import("./getPaymentcryptographyAlias").getPaymentcryptographyAliasOutput = null as any;
utilities.lazyLoad(exports, ["getPaymentcryptographyAlias","getPaymentcryptographyAliasOutput"], () => require("./getPaymentcryptographyAlias"));

export { GetPaymentcryptographyAliasesResult } from "./getPaymentcryptographyAliases";
export const getPaymentcryptographyAliases: typeof import("./getPaymentcryptographyAliases").getPaymentcryptographyAliases = null as any;
export const getPaymentcryptographyAliasesOutput: typeof import("./getPaymentcryptographyAliases").getPaymentcryptographyAliasesOutput = null as any;
utilities.lazyLoad(exports, ["getPaymentcryptographyAliases","getPaymentcryptographyAliasesOutput"], () => require("./getPaymentcryptographyAliases"));

export { GetPaymentcryptographyKeyArgs, GetPaymentcryptographyKeyResult, GetPaymentcryptographyKeyOutputArgs } from "./getPaymentcryptographyKey";
export const getPaymentcryptographyKey: typeof import("./getPaymentcryptographyKey").getPaymentcryptographyKey = null as any;
export const getPaymentcryptographyKeyOutput: typeof import("./getPaymentcryptographyKey").getPaymentcryptographyKeyOutput = null as any;
utilities.lazyLoad(exports, ["getPaymentcryptographyKey","getPaymentcryptographyKeyOutput"], () => require("./getPaymentcryptographyKey"));

export { GetPaymentcryptographyKeysResult } from "./getPaymentcryptographyKeys";
export const getPaymentcryptographyKeys: typeof import("./getPaymentcryptographyKeys").getPaymentcryptographyKeys = null as any;
export const getPaymentcryptographyKeysOutput: typeof import("./getPaymentcryptographyKeys").getPaymentcryptographyKeysOutput = null as any;
utilities.lazyLoad(exports, ["getPaymentcryptographyKeys","getPaymentcryptographyKeysOutput"], () => require("./getPaymentcryptographyKeys"));

export { GetPcaconnectoradConnectorArgs, GetPcaconnectoradConnectorResult, GetPcaconnectoradConnectorOutputArgs } from "./getPcaconnectoradConnector";
export const getPcaconnectoradConnector: typeof import("./getPcaconnectoradConnector").getPcaconnectoradConnector = null as any;
export const getPcaconnectoradConnectorOutput: typeof import("./getPcaconnectoradConnector").getPcaconnectoradConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getPcaconnectoradConnector","getPcaconnectoradConnectorOutput"], () => require("./getPcaconnectoradConnector"));

export { GetPcaconnectoradConnectorsResult } from "./getPcaconnectoradConnectors";
export const getPcaconnectoradConnectors: typeof import("./getPcaconnectoradConnectors").getPcaconnectoradConnectors = null as any;
export const getPcaconnectoradConnectorsOutput: typeof import("./getPcaconnectoradConnectors").getPcaconnectoradConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getPcaconnectoradConnectors","getPcaconnectoradConnectorsOutput"], () => require("./getPcaconnectoradConnectors"));

export { GetPcaconnectoradDirectoryRegistrationArgs, GetPcaconnectoradDirectoryRegistrationResult, GetPcaconnectoradDirectoryRegistrationOutputArgs } from "./getPcaconnectoradDirectoryRegistration";
export const getPcaconnectoradDirectoryRegistration: typeof import("./getPcaconnectoradDirectoryRegistration").getPcaconnectoradDirectoryRegistration = null as any;
export const getPcaconnectoradDirectoryRegistrationOutput: typeof import("./getPcaconnectoradDirectoryRegistration").getPcaconnectoradDirectoryRegistrationOutput = null as any;
utilities.lazyLoad(exports, ["getPcaconnectoradDirectoryRegistration","getPcaconnectoradDirectoryRegistrationOutput"], () => require("./getPcaconnectoradDirectoryRegistration"));

export { GetPcaconnectoradDirectoryRegistrationsResult } from "./getPcaconnectoradDirectoryRegistrations";
export const getPcaconnectoradDirectoryRegistrations: typeof import("./getPcaconnectoradDirectoryRegistrations").getPcaconnectoradDirectoryRegistrations = null as any;
export const getPcaconnectoradDirectoryRegistrationsOutput: typeof import("./getPcaconnectoradDirectoryRegistrations").getPcaconnectoradDirectoryRegistrationsOutput = null as any;
utilities.lazyLoad(exports, ["getPcaconnectoradDirectoryRegistrations","getPcaconnectoradDirectoryRegistrationsOutput"], () => require("./getPcaconnectoradDirectoryRegistrations"));

export { GetPcaconnectoradServicePrincipalNameArgs, GetPcaconnectoradServicePrincipalNameResult, GetPcaconnectoradServicePrincipalNameOutputArgs } from "./getPcaconnectoradServicePrincipalName";
export const getPcaconnectoradServicePrincipalName: typeof import("./getPcaconnectoradServicePrincipalName").getPcaconnectoradServicePrincipalName = null as any;
export const getPcaconnectoradServicePrincipalNameOutput: typeof import("./getPcaconnectoradServicePrincipalName").getPcaconnectoradServicePrincipalNameOutput = null as any;
utilities.lazyLoad(exports, ["getPcaconnectoradServicePrincipalName","getPcaconnectoradServicePrincipalNameOutput"], () => require("./getPcaconnectoradServicePrincipalName"));

export { GetPcaconnectoradTemplateArgs, GetPcaconnectoradTemplateResult, GetPcaconnectoradTemplateOutputArgs } from "./getPcaconnectoradTemplate";
export const getPcaconnectoradTemplate: typeof import("./getPcaconnectoradTemplate").getPcaconnectoradTemplate = null as any;
export const getPcaconnectoradTemplateOutput: typeof import("./getPcaconnectoradTemplate").getPcaconnectoradTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getPcaconnectoradTemplate","getPcaconnectoradTemplateOutput"], () => require("./getPcaconnectoradTemplate"));

export { GetPcaconnectoradTemplateGroupAccessControlEntryArgs, GetPcaconnectoradTemplateGroupAccessControlEntryResult, GetPcaconnectoradTemplateGroupAccessControlEntryOutputArgs } from "./getPcaconnectoradTemplateGroupAccessControlEntry";
export const getPcaconnectoradTemplateGroupAccessControlEntry: typeof import("./getPcaconnectoradTemplateGroupAccessControlEntry").getPcaconnectoradTemplateGroupAccessControlEntry = null as any;
export const getPcaconnectoradTemplateGroupAccessControlEntryOutput: typeof import("./getPcaconnectoradTemplateGroupAccessControlEntry").getPcaconnectoradTemplateGroupAccessControlEntryOutput = null as any;
utilities.lazyLoad(exports, ["getPcaconnectoradTemplateGroupAccessControlEntry","getPcaconnectoradTemplateGroupAccessControlEntryOutput"], () => require("./getPcaconnectoradTemplateGroupAccessControlEntry"));

export { GetPersonalizeDatasetArgs, GetPersonalizeDatasetResult, GetPersonalizeDatasetOutputArgs } from "./getPersonalizeDataset";
export const getPersonalizeDataset: typeof import("./getPersonalizeDataset").getPersonalizeDataset = null as any;
export const getPersonalizeDatasetOutput: typeof import("./getPersonalizeDataset").getPersonalizeDatasetOutput = null as any;
utilities.lazyLoad(exports, ["getPersonalizeDataset","getPersonalizeDatasetOutput"], () => require("./getPersonalizeDataset"));

export { GetPersonalizeDatasetGroupArgs, GetPersonalizeDatasetGroupResult, GetPersonalizeDatasetGroupOutputArgs } from "./getPersonalizeDatasetGroup";
export const getPersonalizeDatasetGroup: typeof import("./getPersonalizeDatasetGroup").getPersonalizeDatasetGroup = null as any;
export const getPersonalizeDatasetGroupOutput: typeof import("./getPersonalizeDatasetGroup").getPersonalizeDatasetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPersonalizeDatasetGroup","getPersonalizeDatasetGroupOutput"], () => require("./getPersonalizeDatasetGroup"));

export { GetPersonalizeDatasetGroupsResult } from "./getPersonalizeDatasetGroups";
export const getPersonalizeDatasetGroups: typeof import("./getPersonalizeDatasetGroups").getPersonalizeDatasetGroups = null as any;
export const getPersonalizeDatasetGroupsOutput: typeof import("./getPersonalizeDatasetGroups").getPersonalizeDatasetGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getPersonalizeDatasetGroups","getPersonalizeDatasetGroupsOutput"], () => require("./getPersonalizeDatasetGroups"));

export { GetPersonalizeDatasetsResult } from "./getPersonalizeDatasets";
export const getPersonalizeDatasets: typeof import("./getPersonalizeDatasets").getPersonalizeDatasets = null as any;
export const getPersonalizeDatasetsOutput: typeof import("./getPersonalizeDatasets").getPersonalizeDatasetsOutput = null as any;
utilities.lazyLoad(exports, ["getPersonalizeDatasets","getPersonalizeDatasetsOutput"], () => require("./getPersonalizeDatasets"));

export { GetPersonalizeSchemaArgs, GetPersonalizeSchemaResult, GetPersonalizeSchemaOutputArgs } from "./getPersonalizeSchema";
export const getPersonalizeSchema: typeof import("./getPersonalizeSchema").getPersonalizeSchema = null as any;
export const getPersonalizeSchemaOutput: typeof import("./getPersonalizeSchema").getPersonalizeSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getPersonalizeSchema","getPersonalizeSchemaOutput"], () => require("./getPersonalizeSchema"));

export { GetPersonalizeSchemasResult } from "./getPersonalizeSchemas";
export const getPersonalizeSchemas: typeof import("./getPersonalizeSchemas").getPersonalizeSchemas = null as any;
export const getPersonalizeSchemasOutput: typeof import("./getPersonalizeSchemas").getPersonalizeSchemasOutput = null as any;
utilities.lazyLoad(exports, ["getPersonalizeSchemas","getPersonalizeSchemasOutput"], () => require("./getPersonalizeSchemas"));

export { GetPersonalizeSolutionArgs, GetPersonalizeSolutionResult, GetPersonalizeSolutionOutputArgs } from "./getPersonalizeSolution";
export const getPersonalizeSolution: typeof import("./getPersonalizeSolution").getPersonalizeSolution = null as any;
export const getPersonalizeSolutionOutput: typeof import("./getPersonalizeSolution").getPersonalizeSolutionOutput = null as any;
utilities.lazyLoad(exports, ["getPersonalizeSolution","getPersonalizeSolutionOutput"], () => require("./getPersonalizeSolution"));

export { GetPersonalizeSolutionsResult } from "./getPersonalizeSolutions";
export const getPersonalizeSolutions: typeof import("./getPersonalizeSolutions").getPersonalizeSolutions = null as any;
export const getPersonalizeSolutionsOutput: typeof import("./getPersonalizeSolutions").getPersonalizeSolutionsOutput = null as any;
utilities.lazyLoad(exports, ["getPersonalizeSolutions","getPersonalizeSolutionsOutput"], () => require("./getPersonalizeSolutions"));

export { GetPinpointInAppTemplateArgs, GetPinpointInAppTemplateResult, GetPinpointInAppTemplateOutputArgs } from "./getPinpointInAppTemplate";
export const getPinpointInAppTemplate: typeof import("./getPinpointInAppTemplate").getPinpointInAppTemplate = null as any;
export const getPinpointInAppTemplateOutput: typeof import("./getPinpointInAppTemplate").getPinpointInAppTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getPinpointInAppTemplate","getPinpointInAppTemplateOutput"], () => require("./getPinpointInAppTemplate"));

export { GetPinpointInAppTemplatesResult } from "./getPinpointInAppTemplates";
export const getPinpointInAppTemplates: typeof import("./getPinpointInAppTemplates").getPinpointInAppTemplates = null as any;
export const getPinpointInAppTemplatesOutput: typeof import("./getPinpointInAppTemplates").getPinpointInAppTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getPinpointInAppTemplates","getPinpointInAppTemplatesOutput"], () => require("./getPinpointInAppTemplates"));

export { GetPipesPipeArgs, GetPipesPipeResult, GetPipesPipeOutputArgs } from "./getPipesPipe";
export const getPipesPipe: typeof import("./getPipesPipe").getPipesPipe = null as any;
export const getPipesPipeOutput: typeof import("./getPipesPipe").getPipesPipeOutput = null as any;
utilities.lazyLoad(exports, ["getPipesPipe","getPipesPipeOutput"], () => require("./getPipesPipe"));

export { GetPipesPipesResult } from "./getPipesPipes";
export const getPipesPipes: typeof import("./getPipesPipes").getPipesPipes = null as any;
export const getPipesPipesOutput: typeof import("./getPipesPipes").getPipesPipesOutput = null as any;
utilities.lazyLoad(exports, ["getPipesPipes","getPipesPipesOutput"], () => require("./getPipesPipes"));

export { GetProtonEnvironmentAccountConnectionArgs, GetProtonEnvironmentAccountConnectionResult, GetProtonEnvironmentAccountConnectionOutputArgs } from "./getProtonEnvironmentAccountConnection";
export const getProtonEnvironmentAccountConnection: typeof import("./getProtonEnvironmentAccountConnection").getProtonEnvironmentAccountConnection = null as any;
export const getProtonEnvironmentAccountConnectionOutput: typeof import("./getProtonEnvironmentAccountConnection").getProtonEnvironmentAccountConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getProtonEnvironmentAccountConnection","getProtonEnvironmentAccountConnectionOutput"], () => require("./getProtonEnvironmentAccountConnection"));

export { GetProtonEnvironmentAccountConnectionsResult } from "./getProtonEnvironmentAccountConnections";
export const getProtonEnvironmentAccountConnections: typeof import("./getProtonEnvironmentAccountConnections").getProtonEnvironmentAccountConnections = null as any;
export const getProtonEnvironmentAccountConnectionsOutput: typeof import("./getProtonEnvironmentAccountConnections").getProtonEnvironmentAccountConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getProtonEnvironmentAccountConnections","getProtonEnvironmentAccountConnectionsOutput"], () => require("./getProtonEnvironmentAccountConnections"));

export { GetProtonEnvironmentTemplateArgs, GetProtonEnvironmentTemplateResult, GetProtonEnvironmentTemplateOutputArgs } from "./getProtonEnvironmentTemplate";
export const getProtonEnvironmentTemplate: typeof import("./getProtonEnvironmentTemplate").getProtonEnvironmentTemplate = null as any;
export const getProtonEnvironmentTemplateOutput: typeof import("./getProtonEnvironmentTemplate").getProtonEnvironmentTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getProtonEnvironmentTemplate","getProtonEnvironmentTemplateOutput"], () => require("./getProtonEnvironmentTemplate"));

export { GetProtonEnvironmentTemplatesResult } from "./getProtonEnvironmentTemplates";
export const getProtonEnvironmentTemplates: typeof import("./getProtonEnvironmentTemplates").getProtonEnvironmentTemplates = null as any;
export const getProtonEnvironmentTemplatesOutput: typeof import("./getProtonEnvironmentTemplates").getProtonEnvironmentTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getProtonEnvironmentTemplates","getProtonEnvironmentTemplatesOutput"], () => require("./getProtonEnvironmentTemplates"));

export { GetProtonServiceTemplateArgs, GetProtonServiceTemplateResult, GetProtonServiceTemplateOutputArgs } from "./getProtonServiceTemplate";
export const getProtonServiceTemplate: typeof import("./getProtonServiceTemplate").getProtonServiceTemplate = null as any;
export const getProtonServiceTemplateOutput: typeof import("./getProtonServiceTemplate").getProtonServiceTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getProtonServiceTemplate","getProtonServiceTemplateOutput"], () => require("./getProtonServiceTemplate"));

export { GetProtonServiceTemplatesResult } from "./getProtonServiceTemplates";
export const getProtonServiceTemplates: typeof import("./getProtonServiceTemplates").getProtonServiceTemplates = null as any;
export const getProtonServiceTemplatesOutput: typeof import("./getProtonServiceTemplates").getProtonServiceTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getProtonServiceTemplates","getProtonServiceTemplatesOutput"], () => require("./getProtonServiceTemplates"));

export { GetQbusinessApplicationArgs, GetQbusinessApplicationResult, GetQbusinessApplicationOutputArgs } from "./getQbusinessApplication";
export const getQbusinessApplication: typeof import("./getQbusinessApplication").getQbusinessApplication = null as any;
export const getQbusinessApplicationOutput: typeof import("./getQbusinessApplication").getQbusinessApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getQbusinessApplication","getQbusinessApplicationOutput"], () => require("./getQbusinessApplication"));

export { GetQbusinessApplicationsResult } from "./getQbusinessApplications";
export const getQbusinessApplications: typeof import("./getQbusinessApplications").getQbusinessApplications = null as any;
export const getQbusinessApplicationsOutput: typeof import("./getQbusinessApplications").getQbusinessApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getQbusinessApplications","getQbusinessApplicationsOutput"], () => require("./getQbusinessApplications"));

export { GetQbusinessDataSourceArgs, GetQbusinessDataSourceResult, GetQbusinessDataSourceOutputArgs } from "./getQbusinessDataSource";
export const getQbusinessDataSource: typeof import("./getQbusinessDataSource").getQbusinessDataSource = null as any;
export const getQbusinessDataSourceOutput: typeof import("./getQbusinessDataSource").getQbusinessDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getQbusinessDataSource","getQbusinessDataSourceOutput"], () => require("./getQbusinessDataSource"));

export { GetQbusinessIndexArgs, GetQbusinessIndexResult, GetQbusinessIndexOutputArgs } from "./getQbusinessIndex";
export const getQbusinessIndex: typeof import("./getQbusinessIndex").getQbusinessIndex = null as any;
export const getQbusinessIndexOutput: typeof import("./getQbusinessIndex").getQbusinessIndexOutput = null as any;
utilities.lazyLoad(exports, ["getQbusinessIndex","getQbusinessIndexOutput"], () => require("./getQbusinessIndex"));

export { GetQbusinessPluginArgs, GetQbusinessPluginResult, GetQbusinessPluginOutputArgs } from "./getQbusinessPlugin";
export const getQbusinessPlugin: typeof import("./getQbusinessPlugin").getQbusinessPlugin = null as any;
export const getQbusinessPluginOutput: typeof import("./getQbusinessPlugin").getQbusinessPluginOutput = null as any;
utilities.lazyLoad(exports, ["getQbusinessPlugin","getQbusinessPluginOutput"], () => require("./getQbusinessPlugin"));

export { GetQbusinessRetrieverArgs, GetQbusinessRetrieverResult, GetQbusinessRetrieverOutputArgs } from "./getQbusinessRetriever";
export const getQbusinessRetriever: typeof import("./getQbusinessRetriever").getQbusinessRetriever = null as any;
export const getQbusinessRetrieverOutput: typeof import("./getQbusinessRetriever").getQbusinessRetrieverOutput = null as any;
utilities.lazyLoad(exports, ["getQbusinessRetriever","getQbusinessRetrieverOutput"], () => require("./getQbusinessRetriever"));

export { GetQbusinessWebExperienceArgs, GetQbusinessWebExperienceResult, GetQbusinessWebExperienceOutputArgs } from "./getQbusinessWebExperience";
export const getQbusinessWebExperience: typeof import("./getQbusinessWebExperience").getQbusinessWebExperience = null as any;
export const getQbusinessWebExperienceOutput: typeof import("./getQbusinessWebExperience").getQbusinessWebExperienceOutput = null as any;
utilities.lazyLoad(exports, ["getQbusinessWebExperience","getQbusinessWebExperienceOutput"], () => require("./getQbusinessWebExperience"));

export { GetQldbStreamArgs, GetQldbStreamResult, GetQldbStreamOutputArgs } from "./getQldbStream";
export const getQldbStream: typeof import("./getQldbStream").getQldbStream = null as any;
export const getQldbStreamOutput: typeof import("./getQldbStream").getQldbStreamOutput = null as any;
utilities.lazyLoad(exports, ["getQldbStream","getQldbStreamOutput"], () => require("./getQldbStream"));

export { GetQldbStreamsResult } from "./getQldbStreams";
export const getQldbStreams: typeof import("./getQldbStreams").getQldbStreams = null as any;
export const getQldbStreamsOutput: typeof import("./getQldbStreams").getQldbStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getQldbStreams","getQldbStreamsOutput"], () => require("./getQldbStreams"));

export { GetQuicksightAnalysesResult } from "./getQuicksightAnalyses";
export const getQuicksightAnalyses: typeof import("./getQuicksightAnalyses").getQuicksightAnalyses = null as any;
export const getQuicksightAnalysesOutput: typeof import("./getQuicksightAnalyses").getQuicksightAnalysesOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightAnalyses","getQuicksightAnalysesOutput"], () => require("./getQuicksightAnalyses"));

export { GetQuicksightAnalysisArgs, GetQuicksightAnalysisResult, GetQuicksightAnalysisOutputArgs } from "./getQuicksightAnalysis";
export const getQuicksightAnalysis: typeof import("./getQuicksightAnalysis").getQuicksightAnalysis = null as any;
export const getQuicksightAnalysisOutput: typeof import("./getQuicksightAnalysis").getQuicksightAnalysisOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightAnalysis","getQuicksightAnalysisOutput"], () => require("./getQuicksightAnalysis"));

export { GetQuicksightDashboardArgs, GetQuicksightDashboardResult, GetQuicksightDashboardOutputArgs } from "./getQuicksightDashboard";
export const getQuicksightDashboard: typeof import("./getQuicksightDashboard").getQuicksightDashboard = null as any;
export const getQuicksightDashboardOutput: typeof import("./getQuicksightDashboard").getQuicksightDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightDashboard","getQuicksightDashboardOutput"], () => require("./getQuicksightDashboard"));

export { GetQuicksightDataSetArgs, GetQuicksightDataSetResult, GetQuicksightDataSetOutputArgs } from "./getQuicksightDataSet";
export const getQuicksightDataSet: typeof import("./getQuicksightDataSet").getQuicksightDataSet = null as any;
export const getQuicksightDataSetOutput: typeof import("./getQuicksightDataSet").getQuicksightDataSetOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightDataSet","getQuicksightDataSetOutput"], () => require("./getQuicksightDataSet"));

export { GetQuicksightDataSetsResult } from "./getQuicksightDataSets";
export const getQuicksightDataSets: typeof import("./getQuicksightDataSets").getQuicksightDataSets = null as any;
export const getQuicksightDataSetsOutput: typeof import("./getQuicksightDataSets").getQuicksightDataSetsOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightDataSets","getQuicksightDataSetsOutput"], () => require("./getQuicksightDataSets"));

export { GetQuicksightDataSourceArgs, GetQuicksightDataSourceResult, GetQuicksightDataSourceOutputArgs } from "./getQuicksightDataSource";
export const getQuicksightDataSource: typeof import("./getQuicksightDataSource").getQuicksightDataSource = null as any;
export const getQuicksightDataSourceOutput: typeof import("./getQuicksightDataSource").getQuicksightDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightDataSource","getQuicksightDataSourceOutput"], () => require("./getQuicksightDataSource"));

export { GetQuicksightDataSourcesResult } from "./getQuicksightDataSources";
export const getQuicksightDataSources: typeof import("./getQuicksightDataSources").getQuicksightDataSources = null as any;
export const getQuicksightDataSourcesOutput: typeof import("./getQuicksightDataSources").getQuicksightDataSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightDataSources","getQuicksightDataSourcesOutput"], () => require("./getQuicksightDataSources"));

export { GetQuicksightRefreshScheduleArgs, GetQuicksightRefreshScheduleResult, GetQuicksightRefreshScheduleOutputArgs } from "./getQuicksightRefreshSchedule";
export const getQuicksightRefreshSchedule: typeof import("./getQuicksightRefreshSchedule").getQuicksightRefreshSchedule = null as any;
export const getQuicksightRefreshScheduleOutput: typeof import("./getQuicksightRefreshSchedule").getQuicksightRefreshScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightRefreshSchedule","getQuicksightRefreshScheduleOutput"], () => require("./getQuicksightRefreshSchedule"));

export { GetQuicksightRefreshSchedulesResult } from "./getQuicksightRefreshSchedules";
export const getQuicksightRefreshSchedules: typeof import("./getQuicksightRefreshSchedules").getQuicksightRefreshSchedules = null as any;
export const getQuicksightRefreshSchedulesOutput: typeof import("./getQuicksightRefreshSchedules").getQuicksightRefreshSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightRefreshSchedules","getQuicksightRefreshSchedulesOutput"], () => require("./getQuicksightRefreshSchedules"));

export { GetQuicksightTemplateArgs, GetQuicksightTemplateResult, GetQuicksightTemplateOutputArgs } from "./getQuicksightTemplate";
export const getQuicksightTemplate: typeof import("./getQuicksightTemplate").getQuicksightTemplate = null as any;
export const getQuicksightTemplateOutput: typeof import("./getQuicksightTemplate").getQuicksightTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightTemplate","getQuicksightTemplateOutput"], () => require("./getQuicksightTemplate"));

export { GetQuicksightThemeArgs, GetQuicksightThemeResult, GetQuicksightThemeOutputArgs } from "./getQuicksightTheme";
export const getQuicksightTheme: typeof import("./getQuicksightTheme").getQuicksightTheme = null as any;
export const getQuicksightThemeOutput: typeof import("./getQuicksightTheme").getQuicksightThemeOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightTheme","getQuicksightThemeOutput"], () => require("./getQuicksightTheme"));

export { GetQuicksightTopicArgs, GetQuicksightTopicResult, GetQuicksightTopicOutputArgs } from "./getQuicksightTopic";
export const getQuicksightTopic: typeof import("./getQuicksightTopic").getQuicksightTopic = null as any;
export const getQuicksightTopicOutput: typeof import("./getQuicksightTopic").getQuicksightTopicOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightTopic","getQuicksightTopicOutput"], () => require("./getQuicksightTopic"));

export { GetQuicksightTopicsResult } from "./getQuicksightTopics";
export const getQuicksightTopics: typeof import("./getQuicksightTopics").getQuicksightTopics = null as any;
export const getQuicksightTopicsOutput: typeof import("./getQuicksightTopics").getQuicksightTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightTopics","getQuicksightTopicsOutput"], () => require("./getQuicksightTopics"));

export { GetQuicksightVpcConnectionArgs, GetQuicksightVpcConnectionResult, GetQuicksightVpcConnectionOutputArgs } from "./getQuicksightVpcConnection";
export const getQuicksightVpcConnection: typeof import("./getQuicksightVpcConnection").getQuicksightVpcConnection = null as any;
export const getQuicksightVpcConnectionOutput: typeof import("./getQuicksightVpcConnection").getQuicksightVpcConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightVpcConnection","getQuicksightVpcConnectionOutput"], () => require("./getQuicksightVpcConnection"));

export { GetQuicksightVpcConnectionsResult } from "./getQuicksightVpcConnections";
export const getQuicksightVpcConnections: typeof import("./getQuicksightVpcConnections").getQuicksightVpcConnections = null as any;
export const getQuicksightVpcConnectionsOutput: typeof import("./getQuicksightVpcConnections").getQuicksightVpcConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightVpcConnections","getQuicksightVpcConnectionsOutput"], () => require("./getQuicksightVpcConnections"));

export { GetRamPermissionArgs, GetRamPermissionResult, GetRamPermissionOutputArgs } from "./getRamPermission";
export const getRamPermission: typeof import("./getRamPermission").getRamPermission = null as any;
export const getRamPermissionOutput: typeof import("./getRamPermission").getRamPermissionOutput = null as any;
utilities.lazyLoad(exports, ["getRamPermission","getRamPermissionOutput"], () => require("./getRamPermission"));

export { GetRamPermissionsResult } from "./getRamPermissions";
export const getRamPermissions: typeof import("./getRamPermissions").getRamPermissions = null as any;
export const getRamPermissionsOutput: typeof import("./getRamPermissions").getRamPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getRamPermissions","getRamPermissionsOutput"], () => require("./getRamPermissions"));

export { GetRdsCustomDbEngineVersionArgs, GetRdsCustomDbEngineVersionResult, GetRdsCustomDbEngineVersionOutputArgs } from "./getRdsCustomDbEngineVersion";
export const getRdsCustomDbEngineVersion: typeof import("./getRdsCustomDbEngineVersion").getRdsCustomDbEngineVersion = null as any;
export const getRdsCustomDbEngineVersionOutput: typeof import("./getRdsCustomDbEngineVersion").getRdsCustomDbEngineVersionOutput = null as any;
utilities.lazyLoad(exports, ["getRdsCustomDbEngineVersion","getRdsCustomDbEngineVersionOutput"], () => require("./getRdsCustomDbEngineVersion"));

export { GetRdsCustomDbEngineVersionsResult } from "./getRdsCustomDbEngineVersions";
export const getRdsCustomDbEngineVersions: typeof import("./getRdsCustomDbEngineVersions").getRdsCustomDbEngineVersions = null as any;
export const getRdsCustomDbEngineVersionsOutput: typeof import("./getRdsCustomDbEngineVersions").getRdsCustomDbEngineVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsCustomDbEngineVersions","getRdsCustomDbEngineVersionsOutput"], () => require("./getRdsCustomDbEngineVersions"));

export { GetRdsDbClusterArgs, GetRdsDbClusterResult, GetRdsDbClusterOutputArgs } from "./getRdsDbCluster";
export const getRdsDbCluster: typeof import("./getRdsDbCluster").getRdsDbCluster = null as any;
export const getRdsDbClusterOutput: typeof import("./getRdsDbCluster").getRdsDbClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbCluster","getRdsDbClusterOutput"], () => require("./getRdsDbCluster"));

export { GetRdsDbClusterParameterGroupArgs, GetRdsDbClusterParameterGroupResult, GetRdsDbClusterParameterGroupOutputArgs } from "./getRdsDbClusterParameterGroup";
export const getRdsDbClusterParameterGroup: typeof import("./getRdsDbClusterParameterGroup").getRdsDbClusterParameterGroup = null as any;
export const getRdsDbClusterParameterGroupOutput: typeof import("./getRdsDbClusterParameterGroup").getRdsDbClusterParameterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbClusterParameterGroup","getRdsDbClusterParameterGroupOutput"], () => require("./getRdsDbClusterParameterGroup"));

export { GetRdsDbClusterParameterGroupsResult } from "./getRdsDbClusterParameterGroups";
export const getRdsDbClusterParameterGroups: typeof import("./getRdsDbClusterParameterGroups").getRdsDbClusterParameterGroups = null as any;
export const getRdsDbClusterParameterGroupsOutput: typeof import("./getRdsDbClusterParameterGroups").getRdsDbClusterParameterGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbClusterParameterGroups","getRdsDbClusterParameterGroupsOutput"], () => require("./getRdsDbClusterParameterGroups"));

export { GetRdsDbClustersResult } from "./getRdsDbClusters";
export const getRdsDbClusters: typeof import("./getRdsDbClusters").getRdsDbClusters = null as any;
export const getRdsDbClustersOutput: typeof import("./getRdsDbClusters").getRdsDbClustersOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbClusters","getRdsDbClustersOutput"], () => require("./getRdsDbClusters"));

export { GetRdsDbInstanceArgs, GetRdsDbInstanceResult, GetRdsDbInstanceOutputArgs } from "./getRdsDbInstance";
export const getRdsDbInstance: typeof import("./getRdsDbInstance").getRdsDbInstance = null as any;
export const getRdsDbInstanceOutput: typeof import("./getRdsDbInstance").getRdsDbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbInstance","getRdsDbInstanceOutput"], () => require("./getRdsDbInstance"));

export { GetRdsDbInstancesResult } from "./getRdsDbInstances";
export const getRdsDbInstances: typeof import("./getRdsDbInstances").getRdsDbInstances = null as any;
export const getRdsDbInstancesOutput: typeof import("./getRdsDbInstances").getRdsDbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbInstances","getRdsDbInstancesOutput"], () => require("./getRdsDbInstances"));

export { GetRdsDbParameterGroupArgs, GetRdsDbParameterGroupResult, GetRdsDbParameterGroupOutputArgs } from "./getRdsDbParameterGroup";
export const getRdsDbParameterGroup: typeof import("./getRdsDbParameterGroup").getRdsDbParameterGroup = null as any;
export const getRdsDbParameterGroupOutput: typeof import("./getRdsDbParameterGroup").getRdsDbParameterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbParameterGroup","getRdsDbParameterGroupOutput"], () => require("./getRdsDbParameterGroup"));

export { GetRdsDbParameterGroupsResult } from "./getRdsDbParameterGroups";
export const getRdsDbParameterGroups: typeof import("./getRdsDbParameterGroups").getRdsDbParameterGroups = null as any;
export const getRdsDbParameterGroupsOutput: typeof import("./getRdsDbParameterGroups").getRdsDbParameterGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbParameterGroups","getRdsDbParameterGroupsOutput"], () => require("./getRdsDbParameterGroups"));

export { GetRdsDbProxiesResult } from "./getRdsDbProxies";
export const getRdsDbProxies: typeof import("./getRdsDbProxies").getRdsDbProxies = null as any;
export const getRdsDbProxiesOutput: typeof import("./getRdsDbProxies").getRdsDbProxiesOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbProxies","getRdsDbProxiesOutput"], () => require("./getRdsDbProxies"));

export { GetRdsDbProxyArgs, GetRdsDbProxyResult, GetRdsDbProxyOutputArgs } from "./getRdsDbProxy";
export const getRdsDbProxy: typeof import("./getRdsDbProxy").getRdsDbProxy = null as any;
export const getRdsDbProxyOutput: typeof import("./getRdsDbProxy").getRdsDbProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbProxy","getRdsDbProxyOutput"], () => require("./getRdsDbProxy"));

export { GetRdsDbProxyEndpointArgs, GetRdsDbProxyEndpointResult, GetRdsDbProxyEndpointOutputArgs } from "./getRdsDbProxyEndpoint";
export const getRdsDbProxyEndpoint: typeof import("./getRdsDbProxyEndpoint").getRdsDbProxyEndpoint = null as any;
export const getRdsDbProxyEndpointOutput: typeof import("./getRdsDbProxyEndpoint").getRdsDbProxyEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbProxyEndpoint","getRdsDbProxyEndpointOutput"], () => require("./getRdsDbProxyEndpoint"));

export { GetRdsDbProxyEndpointsResult } from "./getRdsDbProxyEndpoints";
export const getRdsDbProxyEndpoints: typeof import("./getRdsDbProxyEndpoints").getRdsDbProxyEndpoints = null as any;
export const getRdsDbProxyEndpointsOutput: typeof import("./getRdsDbProxyEndpoints").getRdsDbProxyEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbProxyEndpoints","getRdsDbProxyEndpointsOutput"], () => require("./getRdsDbProxyEndpoints"));

export { GetRdsDbProxyTargetGroupArgs, GetRdsDbProxyTargetGroupResult, GetRdsDbProxyTargetGroupOutputArgs } from "./getRdsDbProxyTargetGroup";
export const getRdsDbProxyTargetGroup: typeof import("./getRdsDbProxyTargetGroup").getRdsDbProxyTargetGroup = null as any;
export const getRdsDbProxyTargetGroupOutput: typeof import("./getRdsDbProxyTargetGroup").getRdsDbProxyTargetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbProxyTargetGroup","getRdsDbProxyTargetGroupOutput"], () => require("./getRdsDbProxyTargetGroup"));

export { GetRdsDbProxyTargetGroupsResult } from "./getRdsDbProxyTargetGroups";
export const getRdsDbProxyTargetGroups: typeof import("./getRdsDbProxyTargetGroups").getRdsDbProxyTargetGroups = null as any;
export const getRdsDbProxyTargetGroupsOutput: typeof import("./getRdsDbProxyTargetGroups").getRdsDbProxyTargetGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbProxyTargetGroups","getRdsDbProxyTargetGroupsOutput"], () => require("./getRdsDbProxyTargetGroups"));

export { GetRdsDbSubnetGroupArgs, GetRdsDbSubnetGroupResult, GetRdsDbSubnetGroupOutputArgs } from "./getRdsDbSubnetGroup";
export const getRdsDbSubnetGroup: typeof import("./getRdsDbSubnetGroup").getRdsDbSubnetGroup = null as any;
export const getRdsDbSubnetGroupOutput: typeof import("./getRdsDbSubnetGroup").getRdsDbSubnetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbSubnetGroup","getRdsDbSubnetGroupOutput"], () => require("./getRdsDbSubnetGroup"));

export { GetRdsDbSubnetGroupsResult } from "./getRdsDbSubnetGroups";
export const getRdsDbSubnetGroups: typeof import("./getRdsDbSubnetGroups").getRdsDbSubnetGroups = null as any;
export const getRdsDbSubnetGroupsOutput: typeof import("./getRdsDbSubnetGroups").getRdsDbSubnetGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsDbSubnetGroups","getRdsDbSubnetGroupsOutput"], () => require("./getRdsDbSubnetGroups"));

export { GetRdsEventSubscriptionArgs, GetRdsEventSubscriptionResult, GetRdsEventSubscriptionOutputArgs } from "./getRdsEventSubscription";
export const getRdsEventSubscription: typeof import("./getRdsEventSubscription").getRdsEventSubscription = null as any;
export const getRdsEventSubscriptionOutput: typeof import("./getRdsEventSubscription").getRdsEventSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getRdsEventSubscription","getRdsEventSubscriptionOutput"], () => require("./getRdsEventSubscription"));

export { GetRdsEventSubscriptionsResult } from "./getRdsEventSubscriptions";
export const getRdsEventSubscriptions: typeof import("./getRdsEventSubscriptions").getRdsEventSubscriptions = null as any;
export const getRdsEventSubscriptionsOutput: typeof import("./getRdsEventSubscriptions").getRdsEventSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsEventSubscriptions","getRdsEventSubscriptionsOutput"], () => require("./getRdsEventSubscriptions"));

export { GetRdsGlobalClusterArgs, GetRdsGlobalClusterResult, GetRdsGlobalClusterOutputArgs } from "./getRdsGlobalCluster";
export const getRdsGlobalCluster: typeof import("./getRdsGlobalCluster").getRdsGlobalCluster = null as any;
export const getRdsGlobalClusterOutput: typeof import("./getRdsGlobalCluster").getRdsGlobalClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRdsGlobalCluster","getRdsGlobalClusterOutput"], () => require("./getRdsGlobalCluster"));

export { GetRdsGlobalClustersResult } from "./getRdsGlobalClusters";
export const getRdsGlobalClusters: typeof import("./getRdsGlobalClusters").getRdsGlobalClusters = null as any;
export const getRdsGlobalClustersOutput: typeof import("./getRdsGlobalClusters").getRdsGlobalClustersOutput = null as any;
utilities.lazyLoad(exports, ["getRdsGlobalClusters","getRdsGlobalClustersOutput"], () => require("./getRdsGlobalClusters"));

export { GetRdsIntegrationArgs, GetRdsIntegrationResult, GetRdsIntegrationOutputArgs } from "./getRdsIntegration";
export const getRdsIntegration: typeof import("./getRdsIntegration").getRdsIntegration = null as any;
export const getRdsIntegrationOutput: typeof import("./getRdsIntegration").getRdsIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getRdsIntegration","getRdsIntegrationOutput"], () => require("./getRdsIntegration"));

export { GetRdsIntegrationsResult } from "./getRdsIntegrations";
export const getRdsIntegrations: typeof import("./getRdsIntegrations").getRdsIntegrations = null as any;
export const getRdsIntegrationsOutput: typeof import("./getRdsIntegrations").getRdsIntegrationsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsIntegrations","getRdsIntegrationsOutput"], () => require("./getRdsIntegrations"));

export { GetRdsOptionGroupArgs, GetRdsOptionGroupResult, GetRdsOptionGroupOutputArgs } from "./getRdsOptionGroup";
export const getRdsOptionGroup: typeof import("./getRdsOptionGroup").getRdsOptionGroup = null as any;
export const getRdsOptionGroupOutput: typeof import("./getRdsOptionGroup").getRdsOptionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRdsOptionGroup","getRdsOptionGroupOutput"], () => require("./getRdsOptionGroup"));

export { GetRdsOptionGroupsResult } from "./getRdsOptionGroups";
export const getRdsOptionGroups: typeof import("./getRdsOptionGroups").getRdsOptionGroups = null as any;
export const getRdsOptionGroupsOutput: typeof import("./getRdsOptionGroups").getRdsOptionGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsOptionGroups","getRdsOptionGroupsOutput"], () => require("./getRdsOptionGroups"));

export { GetRedshiftClusterArgs, GetRedshiftClusterResult, GetRedshiftClusterOutputArgs } from "./getRedshiftCluster";
export const getRedshiftCluster: typeof import("./getRedshiftCluster").getRedshiftCluster = null as any;
export const getRedshiftClusterOutput: typeof import("./getRedshiftCluster").getRedshiftClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftCluster","getRedshiftClusterOutput"], () => require("./getRedshiftCluster"));

export { GetRedshiftClusterParameterGroupArgs, GetRedshiftClusterParameterGroupResult, GetRedshiftClusterParameterGroupOutputArgs } from "./getRedshiftClusterParameterGroup";
export const getRedshiftClusterParameterGroup: typeof import("./getRedshiftClusterParameterGroup").getRedshiftClusterParameterGroup = null as any;
export const getRedshiftClusterParameterGroupOutput: typeof import("./getRedshiftClusterParameterGroup").getRedshiftClusterParameterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftClusterParameterGroup","getRedshiftClusterParameterGroupOutput"], () => require("./getRedshiftClusterParameterGroup"));

export { GetRedshiftClusterParameterGroupsResult } from "./getRedshiftClusterParameterGroups";
export const getRedshiftClusterParameterGroups: typeof import("./getRedshiftClusterParameterGroups").getRedshiftClusterParameterGroups = null as any;
export const getRedshiftClusterParameterGroupsOutput: typeof import("./getRedshiftClusterParameterGroups").getRedshiftClusterParameterGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftClusterParameterGroups","getRedshiftClusterParameterGroupsOutput"], () => require("./getRedshiftClusterParameterGroups"));

export { GetRedshiftClusterSubnetGroupArgs, GetRedshiftClusterSubnetGroupResult, GetRedshiftClusterSubnetGroupOutputArgs } from "./getRedshiftClusterSubnetGroup";
export const getRedshiftClusterSubnetGroup: typeof import("./getRedshiftClusterSubnetGroup").getRedshiftClusterSubnetGroup = null as any;
export const getRedshiftClusterSubnetGroupOutput: typeof import("./getRedshiftClusterSubnetGroup").getRedshiftClusterSubnetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftClusterSubnetGroup","getRedshiftClusterSubnetGroupOutput"], () => require("./getRedshiftClusterSubnetGroup"));

export { GetRedshiftClusterSubnetGroupsResult } from "./getRedshiftClusterSubnetGroups";
export const getRedshiftClusterSubnetGroups: typeof import("./getRedshiftClusterSubnetGroups").getRedshiftClusterSubnetGroups = null as any;
export const getRedshiftClusterSubnetGroupsOutput: typeof import("./getRedshiftClusterSubnetGroups").getRedshiftClusterSubnetGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftClusterSubnetGroups","getRedshiftClusterSubnetGroupsOutput"], () => require("./getRedshiftClusterSubnetGroups"));

export { GetRedshiftClustersResult } from "./getRedshiftClusters";
export const getRedshiftClusters: typeof import("./getRedshiftClusters").getRedshiftClusters = null as any;
export const getRedshiftClustersOutput: typeof import("./getRedshiftClusters").getRedshiftClustersOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftClusters","getRedshiftClustersOutput"], () => require("./getRedshiftClusters"));

export { GetRedshiftEndpointAccessArgs, GetRedshiftEndpointAccessResult, GetRedshiftEndpointAccessOutputArgs } from "./getRedshiftEndpointAccess";
export const getRedshiftEndpointAccess: typeof import("./getRedshiftEndpointAccess").getRedshiftEndpointAccess = null as any;
export const getRedshiftEndpointAccessOutput: typeof import("./getRedshiftEndpointAccess").getRedshiftEndpointAccessOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftEndpointAccess","getRedshiftEndpointAccessOutput"], () => require("./getRedshiftEndpointAccess"));

export { GetRedshiftEndpointAccessesResult } from "./getRedshiftEndpointAccesses";
export const getRedshiftEndpointAccesses: typeof import("./getRedshiftEndpointAccesses").getRedshiftEndpointAccesses = null as any;
export const getRedshiftEndpointAccessesOutput: typeof import("./getRedshiftEndpointAccesses").getRedshiftEndpointAccessesOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftEndpointAccesses","getRedshiftEndpointAccessesOutput"], () => require("./getRedshiftEndpointAccesses"));

export { GetRedshiftEndpointAuthorizationArgs, GetRedshiftEndpointAuthorizationResult, GetRedshiftEndpointAuthorizationOutputArgs } from "./getRedshiftEndpointAuthorization";
export const getRedshiftEndpointAuthorization: typeof import("./getRedshiftEndpointAuthorization").getRedshiftEndpointAuthorization = null as any;
export const getRedshiftEndpointAuthorizationOutput: typeof import("./getRedshiftEndpointAuthorization").getRedshiftEndpointAuthorizationOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftEndpointAuthorization","getRedshiftEndpointAuthorizationOutput"], () => require("./getRedshiftEndpointAuthorization"));

export { GetRedshiftEndpointAuthorizationsResult } from "./getRedshiftEndpointAuthorizations";
export const getRedshiftEndpointAuthorizations: typeof import("./getRedshiftEndpointAuthorizations").getRedshiftEndpointAuthorizations = null as any;
export const getRedshiftEndpointAuthorizationsOutput: typeof import("./getRedshiftEndpointAuthorizations").getRedshiftEndpointAuthorizationsOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftEndpointAuthorizations","getRedshiftEndpointAuthorizationsOutput"], () => require("./getRedshiftEndpointAuthorizations"));

export { GetRedshiftEventSubscriptionArgs, GetRedshiftEventSubscriptionResult, GetRedshiftEventSubscriptionOutputArgs } from "./getRedshiftEventSubscription";
export const getRedshiftEventSubscription: typeof import("./getRedshiftEventSubscription").getRedshiftEventSubscription = null as any;
export const getRedshiftEventSubscriptionOutput: typeof import("./getRedshiftEventSubscription").getRedshiftEventSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftEventSubscription","getRedshiftEventSubscriptionOutput"], () => require("./getRedshiftEventSubscription"));

export { GetRedshiftEventSubscriptionsResult } from "./getRedshiftEventSubscriptions";
export const getRedshiftEventSubscriptions: typeof import("./getRedshiftEventSubscriptions").getRedshiftEventSubscriptions = null as any;
export const getRedshiftEventSubscriptionsOutput: typeof import("./getRedshiftEventSubscriptions").getRedshiftEventSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftEventSubscriptions","getRedshiftEventSubscriptionsOutput"], () => require("./getRedshiftEventSubscriptions"));

export { GetRedshiftScheduledActionArgs, GetRedshiftScheduledActionResult, GetRedshiftScheduledActionOutputArgs } from "./getRedshiftScheduledAction";
export const getRedshiftScheduledAction: typeof import("./getRedshiftScheduledAction").getRedshiftScheduledAction = null as any;
export const getRedshiftScheduledActionOutput: typeof import("./getRedshiftScheduledAction").getRedshiftScheduledActionOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftScheduledAction","getRedshiftScheduledActionOutput"], () => require("./getRedshiftScheduledAction"));

export { GetRedshiftScheduledActionsResult } from "./getRedshiftScheduledActions";
export const getRedshiftScheduledActions: typeof import("./getRedshiftScheduledActions").getRedshiftScheduledActions = null as any;
export const getRedshiftScheduledActionsOutput: typeof import("./getRedshiftScheduledActions").getRedshiftScheduledActionsOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftScheduledActions","getRedshiftScheduledActionsOutput"], () => require("./getRedshiftScheduledActions"));

export { GetRedshiftserverlessNamespaceArgs, GetRedshiftserverlessNamespaceResult, GetRedshiftserverlessNamespaceOutputArgs } from "./getRedshiftserverlessNamespace";
export const getRedshiftserverlessNamespace: typeof import("./getRedshiftserverlessNamespace").getRedshiftserverlessNamespace = null as any;
export const getRedshiftserverlessNamespaceOutput: typeof import("./getRedshiftserverlessNamespace").getRedshiftserverlessNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftserverlessNamespace","getRedshiftserverlessNamespaceOutput"], () => require("./getRedshiftserverlessNamespace"));

export { GetRedshiftserverlessNamespacesResult } from "./getRedshiftserverlessNamespaces";
export const getRedshiftserverlessNamespaces: typeof import("./getRedshiftserverlessNamespaces").getRedshiftserverlessNamespaces = null as any;
export const getRedshiftserverlessNamespacesOutput: typeof import("./getRedshiftserverlessNamespaces").getRedshiftserverlessNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftserverlessNamespaces","getRedshiftserverlessNamespacesOutput"], () => require("./getRedshiftserverlessNamespaces"));

export { GetRedshiftserverlessWorkgroupArgs, GetRedshiftserverlessWorkgroupResult, GetRedshiftserverlessWorkgroupOutputArgs } from "./getRedshiftserverlessWorkgroup";
export const getRedshiftserverlessWorkgroup: typeof import("./getRedshiftserverlessWorkgroup").getRedshiftserverlessWorkgroup = null as any;
export const getRedshiftserverlessWorkgroupOutput: typeof import("./getRedshiftserverlessWorkgroup").getRedshiftserverlessWorkgroupOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftserverlessWorkgroup","getRedshiftserverlessWorkgroupOutput"], () => require("./getRedshiftserverlessWorkgroup"));

export { GetRedshiftserverlessWorkgroupsResult } from "./getRedshiftserverlessWorkgroups";
export const getRedshiftserverlessWorkgroups: typeof import("./getRedshiftserverlessWorkgroups").getRedshiftserverlessWorkgroups = null as any;
export const getRedshiftserverlessWorkgroupsOutput: typeof import("./getRedshiftserverlessWorkgroups").getRedshiftserverlessWorkgroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftserverlessWorkgroups","getRedshiftserverlessWorkgroupsOutput"], () => require("./getRedshiftserverlessWorkgroups"));

export { GetRefactorspacesApplicationArgs, GetRefactorspacesApplicationResult, GetRefactorspacesApplicationOutputArgs } from "./getRefactorspacesApplication";
export const getRefactorspacesApplication: typeof import("./getRefactorspacesApplication").getRefactorspacesApplication = null as any;
export const getRefactorspacesApplicationOutput: typeof import("./getRefactorspacesApplication").getRefactorspacesApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getRefactorspacesApplication","getRefactorspacesApplicationOutput"], () => require("./getRefactorspacesApplication"));

export { GetRefactorspacesEnvironmentArgs, GetRefactorspacesEnvironmentResult, GetRefactorspacesEnvironmentOutputArgs } from "./getRefactorspacesEnvironment";
export const getRefactorspacesEnvironment: typeof import("./getRefactorspacesEnvironment").getRefactorspacesEnvironment = null as any;
export const getRefactorspacesEnvironmentOutput: typeof import("./getRefactorspacesEnvironment").getRefactorspacesEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getRefactorspacesEnvironment","getRefactorspacesEnvironmentOutput"], () => require("./getRefactorspacesEnvironment"));

export { GetRefactorspacesEnvironmentsResult } from "./getRefactorspacesEnvironments";
export const getRefactorspacesEnvironments: typeof import("./getRefactorspacesEnvironments").getRefactorspacesEnvironments = null as any;
export const getRefactorspacesEnvironmentsOutput: typeof import("./getRefactorspacesEnvironments").getRefactorspacesEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getRefactorspacesEnvironments","getRefactorspacesEnvironmentsOutput"], () => require("./getRefactorspacesEnvironments"));

export { GetRefactorspacesRouteArgs, GetRefactorspacesRouteResult, GetRefactorspacesRouteOutputArgs } from "./getRefactorspacesRoute";
export const getRefactorspacesRoute: typeof import("./getRefactorspacesRoute").getRefactorspacesRoute = null as any;
export const getRefactorspacesRouteOutput: typeof import("./getRefactorspacesRoute").getRefactorspacesRouteOutput = null as any;
utilities.lazyLoad(exports, ["getRefactorspacesRoute","getRefactorspacesRouteOutput"], () => require("./getRefactorspacesRoute"));

export { GetRefactorspacesServiceArgs, GetRefactorspacesServiceResult, GetRefactorspacesServiceOutputArgs } from "./getRefactorspacesService";
export const getRefactorspacesService: typeof import("./getRefactorspacesService").getRefactorspacesService = null as any;
export const getRefactorspacesServiceOutput: typeof import("./getRefactorspacesService").getRefactorspacesServiceOutput = null as any;
utilities.lazyLoad(exports, ["getRefactorspacesService","getRefactorspacesServiceOutput"], () => require("./getRefactorspacesService"));

export { GetRekognitionCollectionArgs, GetRekognitionCollectionResult, GetRekognitionCollectionOutputArgs } from "./getRekognitionCollection";
export const getRekognitionCollection: typeof import("./getRekognitionCollection").getRekognitionCollection = null as any;
export const getRekognitionCollectionOutput: typeof import("./getRekognitionCollection").getRekognitionCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getRekognitionCollection","getRekognitionCollectionOutput"], () => require("./getRekognitionCollection"));

export { GetRekognitionCollectionsResult } from "./getRekognitionCollections";
export const getRekognitionCollections: typeof import("./getRekognitionCollections").getRekognitionCollections = null as any;
export const getRekognitionCollectionsOutput: typeof import("./getRekognitionCollections").getRekognitionCollectionsOutput = null as any;
utilities.lazyLoad(exports, ["getRekognitionCollections","getRekognitionCollectionsOutput"], () => require("./getRekognitionCollections"));

export { GetRekognitionProjectArgs, GetRekognitionProjectResult, GetRekognitionProjectOutputArgs } from "./getRekognitionProject";
export const getRekognitionProject: typeof import("./getRekognitionProject").getRekognitionProject = null as any;
export const getRekognitionProjectOutput: typeof import("./getRekognitionProject").getRekognitionProjectOutput = null as any;
utilities.lazyLoad(exports, ["getRekognitionProject","getRekognitionProjectOutput"], () => require("./getRekognitionProject"));

export { GetRekognitionProjectsResult } from "./getRekognitionProjects";
export const getRekognitionProjects: typeof import("./getRekognitionProjects").getRekognitionProjects = null as any;
export const getRekognitionProjectsOutput: typeof import("./getRekognitionProjects").getRekognitionProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getRekognitionProjects","getRekognitionProjectsOutput"], () => require("./getRekognitionProjects"));

export { GetResiliencehubAppArgs, GetResiliencehubAppResult, GetResiliencehubAppOutputArgs } from "./getResiliencehubApp";
export const getResiliencehubApp: typeof import("./getResiliencehubApp").getResiliencehubApp = null as any;
export const getResiliencehubAppOutput: typeof import("./getResiliencehubApp").getResiliencehubAppOutput = null as any;
utilities.lazyLoad(exports, ["getResiliencehubApp","getResiliencehubAppOutput"], () => require("./getResiliencehubApp"));

export { GetResiliencehubAppsResult } from "./getResiliencehubApps";
export const getResiliencehubApps: typeof import("./getResiliencehubApps").getResiliencehubApps = null as any;
export const getResiliencehubAppsOutput: typeof import("./getResiliencehubApps").getResiliencehubAppsOutput = null as any;
utilities.lazyLoad(exports, ["getResiliencehubApps","getResiliencehubAppsOutput"], () => require("./getResiliencehubApps"));

export { GetResiliencehubResiliencyPoliciesResult } from "./getResiliencehubResiliencyPolicies";
export const getResiliencehubResiliencyPolicies: typeof import("./getResiliencehubResiliencyPolicies").getResiliencehubResiliencyPolicies = null as any;
export const getResiliencehubResiliencyPoliciesOutput: typeof import("./getResiliencehubResiliencyPolicies").getResiliencehubResiliencyPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getResiliencehubResiliencyPolicies","getResiliencehubResiliencyPoliciesOutput"], () => require("./getResiliencehubResiliencyPolicies"));

export { GetResiliencehubResiliencyPolicyArgs, GetResiliencehubResiliencyPolicyResult, GetResiliencehubResiliencyPolicyOutputArgs } from "./getResiliencehubResiliencyPolicy";
export const getResiliencehubResiliencyPolicy: typeof import("./getResiliencehubResiliencyPolicy").getResiliencehubResiliencyPolicy = null as any;
export const getResiliencehubResiliencyPolicyOutput: typeof import("./getResiliencehubResiliencyPolicy").getResiliencehubResiliencyPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getResiliencehubResiliencyPolicy","getResiliencehubResiliencyPolicyOutput"], () => require("./getResiliencehubResiliencyPolicy"));

export { GetResourceexplorer2DefaultViewAssociationArgs, GetResourceexplorer2DefaultViewAssociationResult, GetResourceexplorer2DefaultViewAssociationOutputArgs } from "./getResourceexplorer2DefaultViewAssociation";
export const getResourceexplorer2DefaultViewAssociation: typeof import("./getResourceexplorer2DefaultViewAssociation").getResourceexplorer2DefaultViewAssociation = null as any;
export const getResourceexplorer2DefaultViewAssociationOutput: typeof import("./getResourceexplorer2DefaultViewAssociation").getResourceexplorer2DefaultViewAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getResourceexplorer2DefaultViewAssociation","getResourceexplorer2DefaultViewAssociationOutput"], () => require("./getResourceexplorer2DefaultViewAssociation"));

export { GetResourceexplorer2IndexArgs, GetResourceexplorer2IndexResult, GetResourceexplorer2IndexOutputArgs } from "./getResourceexplorer2Index";
export const getResourceexplorer2Index: typeof import("./getResourceexplorer2Index").getResourceexplorer2Index = null as any;
export const getResourceexplorer2IndexOutput: typeof import("./getResourceexplorer2Index").getResourceexplorer2IndexOutput = null as any;
utilities.lazyLoad(exports, ["getResourceexplorer2Index","getResourceexplorer2IndexOutput"], () => require("./getResourceexplorer2Index"));

export { GetResourceexplorer2IndicesResult } from "./getResourceexplorer2Indices";
export const getResourceexplorer2Indices: typeof import("./getResourceexplorer2Indices").getResourceexplorer2Indices = null as any;
export const getResourceexplorer2IndicesOutput: typeof import("./getResourceexplorer2Indices").getResourceexplorer2IndicesOutput = null as any;
utilities.lazyLoad(exports, ["getResourceexplorer2Indices","getResourceexplorer2IndicesOutput"], () => require("./getResourceexplorer2Indices"));

export { GetResourceexplorer2ViewArgs, GetResourceexplorer2ViewResult, GetResourceexplorer2ViewOutputArgs } from "./getResourceexplorer2View";
export const getResourceexplorer2View: typeof import("./getResourceexplorer2View").getResourceexplorer2View = null as any;
export const getResourceexplorer2ViewOutput: typeof import("./getResourceexplorer2View").getResourceexplorer2ViewOutput = null as any;
utilities.lazyLoad(exports, ["getResourceexplorer2View","getResourceexplorer2ViewOutput"], () => require("./getResourceexplorer2View"));

export { GetResourceexplorer2ViewsResult } from "./getResourceexplorer2Views";
export const getResourceexplorer2Views: typeof import("./getResourceexplorer2Views").getResourceexplorer2Views = null as any;
export const getResourceexplorer2ViewsOutput: typeof import("./getResourceexplorer2Views").getResourceexplorer2ViewsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceexplorer2Views","getResourceexplorer2ViewsOutput"], () => require("./getResourceexplorer2Views"));

export { GetResourcegroupsGroupArgs, GetResourcegroupsGroupResult, GetResourcegroupsGroupOutputArgs } from "./getResourcegroupsGroup";
export const getResourcegroupsGroup: typeof import("./getResourcegroupsGroup").getResourcegroupsGroup = null as any;
export const getResourcegroupsGroupOutput: typeof import("./getResourcegroupsGroup").getResourcegroupsGroupOutput = null as any;
utilities.lazyLoad(exports, ["getResourcegroupsGroup","getResourcegroupsGroupOutput"], () => require("./getResourcegroupsGroup"));

export { GetResourcegroupsGroupsResult } from "./getResourcegroupsGroups";
export const getResourcegroupsGroups: typeof import("./getResourcegroupsGroups").getResourcegroupsGroups = null as any;
export const getResourcegroupsGroupsOutput: typeof import("./getResourcegroupsGroups").getResourcegroupsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getResourcegroupsGroups","getResourcegroupsGroupsOutput"], () => require("./getResourcegroupsGroups"));

export { GetRobomakerFleetArgs, GetRobomakerFleetResult, GetRobomakerFleetOutputArgs } from "./getRobomakerFleet";
export const getRobomakerFleet: typeof import("./getRobomakerFleet").getRobomakerFleet = null as any;
export const getRobomakerFleetOutput: typeof import("./getRobomakerFleet").getRobomakerFleetOutput = null as any;
utilities.lazyLoad(exports, ["getRobomakerFleet","getRobomakerFleetOutput"], () => require("./getRobomakerFleet"));

export { GetRobomakerFleetsResult } from "./getRobomakerFleets";
export const getRobomakerFleets: typeof import("./getRobomakerFleets").getRobomakerFleets = null as any;
export const getRobomakerFleetsOutput: typeof import("./getRobomakerFleets").getRobomakerFleetsOutput = null as any;
utilities.lazyLoad(exports, ["getRobomakerFleets","getRobomakerFleetsOutput"], () => require("./getRobomakerFleets"));

export { GetRobomakerRobotArgs, GetRobomakerRobotResult, GetRobomakerRobotOutputArgs } from "./getRobomakerRobot";
export const getRobomakerRobot: typeof import("./getRobomakerRobot").getRobomakerRobot = null as any;
export const getRobomakerRobotOutput: typeof import("./getRobomakerRobot").getRobomakerRobotOutput = null as any;
utilities.lazyLoad(exports, ["getRobomakerRobot","getRobomakerRobotOutput"], () => require("./getRobomakerRobot"));

export { GetRobomakerRobotApplicationArgs, GetRobomakerRobotApplicationResult, GetRobomakerRobotApplicationOutputArgs } from "./getRobomakerRobotApplication";
export const getRobomakerRobotApplication: typeof import("./getRobomakerRobotApplication").getRobomakerRobotApplication = null as any;
export const getRobomakerRobotApplicationOutput: typeof import("./getRobomakerRobotApplication").getRobomakerRobotApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getRobomakerRobotApplication","getRobomakerRobotApplicationOutput"], () => require("./getRobomakerRobotApplication"));

export { GetRobomakerRobotApplicationVersionArgs, GetRobomakerRobotApplicationVersionResult, GetRobomakerRobotApplicationVersionOutputArgs } from "./getRobomakerRobotApplicationVersion";
export const getRobomakerRobotApplicationVersion: typeof import("./getRobomakerRobotApplicationVersion").getRobomakerRobotApplicationVersion = null as any;
export const getRobomakerRobotApplicationVersionOutput: typeof import("./getRobomakerRobotApplicationVersion").getRobomakerRobotApplicationVersionOutput = null as any;
utilities.lazyLoad(exports, ["getRobomakerRobotApplicationVersion","getRobomakerRobotApplicationVersionOutput"], () => require("./getRobomakerRobotApplicationVersion"));

export { GetRobomakerRobotApplicationsResult } from "./getRobomakerRobotApplications";
export const getRobomakerRobotApplications: typeof import("./getRobomakerRobotApplications").getRobomakerRobotApplications = null as any;
export const getRobomakerRobotApplicationsOutput: typeof import("./getRobomakerRobotApplications").getRobomakerRobotApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getRobomakerRobotApplications","getRobomakerRobotApplicationsOutput"], () => require("./getRobomakerRobotApplications"));

export { GetRobomakerRobotsResult } from "./getRobomakerRobots";
export const getRobomakerRobots: typeof import("./getRobomakerRobots").getRobomakerRobots = null as any;
export const getRobomakerRobotsOutput: typeof import("./getRobomakerRobots").getRobomakerRobotsOutput = null as any;
utilities.lazyLoad(exports, ["getRobomakerRobots","getRobomakerRobotsOutput"], () => require("./getRobomakerRobots"));

export { GetRobomakerSimulationApplicationArgs, GetRobomakerSimulationApplicationResult, GetRobomakerSimulationApplicationOutputArgs } from "./getRobomakerSimulationApplication";
export const getRobomakerSimulationApplication: typeof import("./getRobomakerSimulationApplication").getRobomakerSimulationApplication = null as any;
export const getRobomakerSimulationApplicationOutput: typeof import("./getRobomakerSimulationApplication").getRobomakerSimulationApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getRobomakerSimulationApplication","getRobomakerSimulationApplicationOutput"], () => require("./getRobomakerSimulationApplication"));

export { GetRobomakerSimulationApplicationVersionArgs, GetRobomakerSimulationApplicationVersionResult, GetRobomakerSimulationApplicationVersionOutputArgs } from "./getRobomakerSimulationApplicationVersion";
export const getRobomakerSimulationApplicationVersion: typeof import("./getRobomakerSimulationApplicationVersion").getRobomakerSimulationApplicationVersion = null as any;
export const getRobomakerSimulationApplicationVersionOutput: typeof import("./getRobomakerSimulationApplicationVersion").getRobomakerSimulationApplicationVersionOutput = null as any;
utilities.lazyLoad(exports, ["getRobomakerSimulationApplicationVersion","getRobomakerSimulationApplicationVersionOutput"], () => require("./getRobomakerSimulationApplicationVersion"));

export { GetRobomakerSimulationApplicationsResult } from "./getRobomakerSimulationApplications";
export const getRobomakerSimulationApplications: typeof import("./getRobomakerSimulationApplications").getRobomakerSimulationApplications = null as any;
export const getRobomakerSimulationApplicationsOutput: typeof import("./getRobomakerSimulationApplications").getRobomakerSimulationApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getRobomakerSimulationApplications","getRobomakerSimulationApplicationsOutput"], () => require("./getRobomakerSimulationApplications"));

export { GetRolesanywhereCrlArgs, GetRolesanywhereCrlResult, GetRolesanywhereCrlOutputArgs } from "./getRolesanywhereCrl";
export const getRolesanywhereCrl: typeof import("./getRolesanywhereCrl").getRolesanywhereCrl = null as any;
export const getRolesanywhereCrlOutput: typeof import("./getRolesanywhereCrl").getRolesanywhereCrlOutput = null as any;
utilities.lazyLoad(exports, ["getRolesanywhereCrl","getRolesanywhereCrlOutput"], () => require("./getRolesanywhereCrl"));

export { GetRolesanywhereCrlsResult } from "./getRolesanywhereCrls";
export const getRolesanywhereCrls: typeof import("./getRolesanywhereCrls").getRolesanywhereCrls = null as any;
export const getRolesanywhereCrlsOutput: typeof import("./getRolesanywhereCrls").getRolesanywhereCrlsOutput = null as any;
utilities.lazyLoad(exports, ["getRolesanywhereCrls","getRolesanywhereCrlsOutput"], () => require("./getRolesanywhereCrls"));

export { GetRolesanywhereProfileArgs, GetRolesanywhereProfileResult, GetRolesanywhereProfileOutputArgs } from "./getRolesanywhereProfile";
export const getRolesanywhereProfile: typeof import("./getRolesanywhereProfile").getRolesanywhereProfile = null as any;
export const getRolesanywhereProfileOutput: typeof import("./getRolesanywhereProfile").getRolesanywhereProfileOutput = null as any;
utilities.lazyLoad(exports, ["getRolesanywhereProfile","getRolesanywhereProfileOutput"], () => require("./getRolesanywhereProfile"));

export { GetRolesanywhereProfilesResult } from "./getRolesanywhereProfiles";
export const getRolesanywhereProfiles: typeof import("./getRolesanywhereProfiles").getRolesanywhereProfiles = null as any;
export const getRolesanywhereProfilesOutput: typeof import("./getRolesanywhereProfiles").getRolesanywhereProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getRolesanywhereProfiles","getRolesanywhereProfilesOutput"], () => require("./getRolesanywhereProfiles"));

export { GetRolesanywhereTrustAnchorArgs, GetRolesanywhereTrustAnchorResult, GetRolesanywhereTrustAnchorOutputArgs } from "./getRolesanywhereTrustAnchor";
export const getRolesanywhereTrustAnchor: typeof import("./getRolesanywhereTrustAnchor").getRolesanywhereTrustAnchor = null as any;
export const getRolesanywhereTrustAnchorOutput: typeof import("./getRolesanywhereTrustAnchor").getRolesanywhereTrustAnchorOutput = null as any;
utilities.lazyLoad(exports, ["getRolesanywhereTrustAnchor","getRolesanywhereTrustAnchorOutput"], () => require("./getRolesanywhereTrustAnchor"));

export { GetRolesanywhereTrustAnchorsResult } from "./getRolesanywhereTrustAnchors";
export const getRolesanywhereTrustAnchors: typeof import("./getRolesanywhereTrustAnchors").getRolesanywhereTrustAnchors = null as any;
export const getRolesanywhereTrustAnchorsOutput: typeof import("./getRolesanywhereTrustAnchors").getRolesanywhereTrustAnchorsOutput = null as any;
utilities.lazyLoad(exports, ["getRolesanywhereTrustAnchors","getRolesanywhereTrustAnchorsOutput"], () => require("./getRolesanywhereTrustAnchors"));

export { GetRoute53CidrCollectionArgs, GetRoute53CidrCollectionResult, GetRoute53CidrCollectionOutputArgs } from "./getRoute53CidrCollection";
export const getRoute53CidrCollection: typeof import("./getRoute53CidrCollection").getRoute53CidrCollection = null as any;
export const getRoute53CidrCollectionOutput: typeof import("./getRoute53CidrCollection").getRoute53CidrCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53CidrCollection","getRoute53CidrCollectionOutput"], () => require("./getRoute53CidrCollection"));

export { GetRoute53CidrCollectionsResult } from "./getRoute53CidrCollections";
export const getRoute53CidrCollections: typeof import("./getRoute53CidrCollections").getRoute53CidrCollections = null as any;
export const getRoute53CidrCollectionsOutput: typeof import("./getRoute53CidrCollections").getRoute53CidrCollectionsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53CidrCollections","getRoute53CidrCollectionsOutput"], () => require("./getRoute53CidrCollections"));

export { GetRoute53DnssecArgs, GetRoute53DnssecResult, GetRoute53DnssecOutputArgs } from "./getRoute53Dnssec";
export const getRoute53Dnssec: typeof import("./getRoute53Dnssec").getRoute53Dnssec = null as any;
export const getRoute53DnssecOutput: typeof import("./getRoute53Dnssec").getRoute53DnssecOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53Dnssec","getRoute53DnssecOutput"], () => require("./getRoute53Dnssec"));

export { GetRoute53DnssecsResult } from "./getRoute53Dnssecs";
export const getRoute53Dnssecs: typeof import("./getRoute53Dnssecs").getRoute53Dnssecs = null as any;
export const getRoute53DnssecsOutput: typeof import("./getRoute53Dnssecs").getRoute53DnssecsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53Dnssecs","getRoute53DnssecsOutput"], () => require("./getRoute53Dnssecs"));

export { GetRoute53HealthCheckArgs, GetRoute53HealthCheckResult, GetRoute53HealthCheckOutputArgs } from "./getRoute53HealthCheck";
export const getRoute53HealthCheck: typeof import("./getRoute53HealthCheck").getRoute53HealthCheck = null as any;
export const getRoute53HealthCheckOutput: typeof import("./getRoute53HealthCheck").getRoute53HealthCheckOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53HealthCheck","getRoute53HealthCheckOutput"], () => require("./getRoute53HealthCheck"));

export { GetRoute53HealthChecksResult } from "./getRoute53HealthChecks";
export const getRoute53HealthChecks: typeof import("./getRoute53HealthChecks").getRoute53HealthChecks = null as any;
export const getRoute53HealthChecksOutput: typeof import("./getRoute53HealthChecks").getRoute53HealthChecksOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53HealthChecks","getRoute53HealthChecksOutput"], () => require("./getRoute53HealthChecks"));

export { GetRoute53HostedZoneArgs, GetRoute53HostedZoneResult, GetRoute53HostedZoneOutputArgs } from "./getRoute53HostedZone";
export const getRoute53HostedZone: typeof import("./getRoute53HostedZone").getRoute53HostedZone = null as any;
export const getRoute53HostedZoneOutput: typeof import("./getRoute53HostedZone").getRoute53HostedZoneOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53HostedZone","getRoute53HostedZoneOutput"], () => require("./getRoute53HostedZone"));

export { GetRoute53HostedZonesResult } from "./getRoute53HostedZones";
export const getRoute53HostedZones: typeof import("./getRoute53HostedZones").getRoute53HostedZones = null as any;
export const getRoute53HostedZonesOutput: typeof import("./getRoute53HostedZones").getRoute53HostedZonesOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53HostedZones","getRoute53HostedZonesOutput"], () => require("./getRoute53HostedZones"));

export { GetRoute53KeySigningKeyArgs, GetRoute53KeySigningKeyResult, GetRoute53KeySigningKeyOutputArgs } from "./getRoute53KeySigningKey";
export const getRoute53KeySigningKey: typeof import("./getRoute53KeySigningKey").getRoute53KeySigningKey = null as any;
export const getRoute53KeySigningKeyOutput: typeof import("./getRoute53KeySigningKey").getRoute53KeySigningKeyOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53KeySigningKey","getRoute53KeySigningKeyOutput"], () => require("./getRoute53KeySigningKey"));

export { GetRoute53KeySigningKeysResult } from "./getRoute53KeySigningKeys";
export const getRoute53KeySigningKeys: typeof import("./getRoute53KeySigningKeys").getRoute53KeySigningKeys = null as any;
export const getRoute53KeySigningKeysOutput: typeof import("./getRoute53KeySigningKeys").getRoute53KeySigningKeysOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53KeySigningKeys","getRoute53KeySigningKeysOutput"], () => require("./getRoute53KeySigningKeys"));

export { GetRoute53profilesProfileArgs, GetRoute53profilesProfileResult, GetRoute53profilesProfileOutputArgs } from "./getRoute53profilesProfile";
export const getRoute53profilesProfile: typeof import("./getRoute53profilesProfile").getRoute53profilesProfile = null as any;
export const getRoute53profilesProfileOutput: typeof import("./getRoute53profilesProfile").getRoute53profilesProfileOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53profilesProfile","getRoute53profilesProfileOutput"], () => require("./getRoute53profilesProfile"));

export { GetRoute53profilesProfileAssociationArgs, GetRoute53profilesProfileAssociationResult, GetRoute53profilesProfileAssociationOutputArgs } from "./getRoute53profilesProfileAssociation";
export const getRoute53profilesProfileAssociation: typeof import("./getRoute53profilesProfileAssociation").getRoute53profilesProfileAssociation = null as any;
export const getRoute53profilesProfileAssociationOutput: typeof import("./getRoute53profilesProfileAssociation").getRoute53profilesProfileAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53profilesProfileAssociation","getRoute53profilesProfileAssociationOutput"], () => require("./getRoute53profilesProfileAssociation"));

export { GetRoute53profilesProfileAssociationsResult } from "./getRoute53profilesProfileAssociations";
export const getRoute53profilesProfileAssociations: typeof import("./getRoute53profilesProfileAssociations").getRoute53profilesProfileAssociations = null as any;
export const getRoute53profilesProfileAssociationsOutput: typeof import("./getRoute53profilesProfileAssociations").getRoute53profilesProfileAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53profilesProfileAssociations","getRoute53profilesProfileAssociationsOutput"], () => require("./getRoute53profilesProfileAssociations"));

export { GetRoute53profilesProfileResourceAssociationArgs, GetRoute53profilesProfileResourceAssociationResult, GetRoute53profilesProfileResourceAssociationOutputArgs } from "./getRoute53profilesProfileResourceAssociation";
export const getRoute53profilesProfileResourceAssociation: typeof import("./getRoute53profilesProfileResourceAssociation").getRoute53profilesProfileResourceAssociation = null as any;
export const getRoute53profilesProfileResourceAssociationOutput: typeof import("./getRoute53profilesProfileResourceAssociation").getRoute53profilesProfileResourceAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53profilesProfileResourceAssociation","getRoute53profilesProfileResourceAssociationOutput"], () => require("./getRoute53profilesProfileResourceAssociation"));

export { GetRoute53profilesProfilesResult } from "./getRoute53profilesProfiles";
export const getRoute53profilesProfiles: typeof import("./getRoute53profilesProfiles").getRoute53profilesProfiles = null as any;
export const getRoute53profilesProfilesOutput: typeof import("./getRoute53profilesProfiles").getRoute53profilesProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53profilesProfiles","getRoute53profilesProfilesOutput"], () => require("./getRoute53profilesProfiles"));

export { GetRoute53recoverycontrolClusterArgs, GetRoute53recoverycontrolClusterResult, GetRoute53recoverycontrolClusterOutputArgs } from "./getRoute53recoverycontrolCluster";
export const getRoute53recoverycontrolCluster: typeof import("./getRoute53recoverycontrolCluster").getRoute53recoverycontrolCluster = null as any;
export const getRoute53recoverycontrolClusterOutput: typeof import("./getRoute53recoverycontrolCluster").getRoute53recoverycontrolClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoverycontrolCluster","getRoute53recoverycontrolClusterOutput"], () => require("./getRoute53recoverycontrolCluster"));

export { GetRoute53recoverycontrolClustersResult } from "./getRoute53recoverycontrolClusters";
export const getRoute53recoverycontrolClusters: typeof import("./getRoute53recoverycontrolClusters").getRoute53recoverycontrolClusters = null as any;
export const getRoute53recoverycontrolClustersOutput: typeof import("./getRoute53recoverycontrolClusters").getRoute53recoverycontrolClustersOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoverycontrolClusters","getRoute53recoverycontrolClustersOutput"], () => require("./getRoute53recoverycontrolClusters"));

export { GetRoute53recoverycontrolControlPanelArgs, GetRoute53recoverycontrolControlPanelResult, GetRoute53recoverycontrolControlPanelOutputArgs } from "./getRoute53recoverycontrolControlPanel";
export const getRoute53recoverycontrolControlPanel: typeof import("./getRoute53recoverycontrolControlPanel").getRoute53recoverycontrolControlPanel = null as any;
export const getRoute53recoverycontrolControlPanelOutput: typeof import("./getRoute53recoverycontrolControlPanel").getRoute53recoverycontrolControlPanelOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoverycontrolControlPanel","getRoute53recoverycontrolControlPanelOutput"], () => require("./getRoute53recoverycontrolControlPanel"));

export { GetRoute53recoverycontrolControlPanelsResult } from "./getRoute53recoverycontrolControlPanels";
export const getRoute53recoverycontrolControlPanels: typeof import("./getRoute53recoverycontrolControlPanels").getRoute53recoverycontrolControlPanels = null as any;
export const getRoute53recoverycontrolControlPanelsOutput: typeof import("./getRoute53recoverycontrolControlPanels").getRoute53recoverycontrolControlPanelsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoverycontrolControlPanels","getRoute53recoverycontrolControlPanelsOutput"], () => require("./getRoute53recoverycontrolControlPanels"));

export { GetRoute53recoverycontrolRoutingControlArgs, GetRoute53recoverycontrolRoutingControlResult, GetRoute53recoverycontrolRoutingControlOutputArgs } from "./getRoute53recoverycontrolRoutingControl";
export const getRoute53recoverycontrolRoutingControl: typeof import("./getRoute53recoverycontrolRoutingControl").getRoute53recoverycontrolRoutingControl = null as any;
export const getRoute53recoverycontrolRoutingControlOutput: typeof import("./getRoute53recoverycontrolRoutingControl").getRoute53recoverycontrolRoutingControlOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoverycontrolRoutingControl","getRoute53recoverycontrolRoutingControlOutput"], () => require("./getRoute53recoverycontrolRoutingControl"));

export { GetRoute53recoverycontrolSafetyRuleArgs, GetRoute53recoverycontrolSafetyRuleResult, GetRoute53recoverycontrolSafetyRuleOutputArgs } from "./getRoute53recoverycontrolSafetyRule";
export const getRoute53recoverycontrolSafetyRule: typeof import("./getRoute53recoverycontrolSafetyRule").getRoute53recoverycontrolSafetyRule = null as any;
export const getRoute53recoverycontrolSafetyRuleOutput: typeof import("./getRoute53recoverycontrolSafetyRule").getRoute53recoverycontrolSafetyRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoverycontrolSafetyRule","getRoute53recoverycontrolSafetyRuleOutput"], () => require("./getRoute53recoverycontrolSafetyRule"));

export { GetRoute53recoveryreadinessCellArgs, GetRoute53recoveryreadinessCellResult, GetRoute53recoveryreadinessCellOutputArgs } from "./getRoute53recoveryreadinessCell";
export const getRoute53recoveryreadinessCell: typeof import("./getRoute53recoveryreadinessCell").getRoute53recoveryreadinessCell = null as any;
export const getRoute53recoveryreadinessCellOutput: typeof import("./getRoute53recoveryreadinessCell").getRoute53recoveryreadinessCellOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoveryreadinessCell","getRoute53recoveryreadinessCellOutput"], () => require("./getRoute53recoveryreadinessCell"));

export { GetRoute53recoveryreadinessCellsResult } from "./getRoute53recoveryreadinessCells";
export const getRoute53recoveryreadinessCells: typeof import("./getRoute53recoveryreadinessCells").getRoute53recoveryreadinessCells = null as any;
export const getRoute53recoveryreadinessCellsOutput: typeof import("./getRoute53recoveryreadinessCells").getRoute53recoveryreadinessCellsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoveryreadinessCells","getRoute53recoveryreadinessCellsOutput"], () => require("./getRoute53recoveryreadinessCells"));

export { GetRoute53recoveryreadinessReadinessCheckArgs, GetRoute53recoveryreadinessReadinessCheckResult, GetRoute53recoveryreadinessReadinessCheckOutputArgs } from "./getRoute53recoveryreadinessReadinessCheck";
export const getRoute53recoveryreadinessReadinessCheck: typeof import("./getRoute53recoveryreadinessReadinessCheck").getRoute53recoveryreadinessReadinessCheck = null as any;
export const getRoute53recoveryreadinessReadinessCheckOutput: typeof import("./getRoute53recoveryreadinessReadinessCheck").getRoute53recoveryreadinessReadinessCheckOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoveryreadinessReadinessCheck","getRoute53recoveryreadinessReadinessCheckOutput"], () => require("./getRoute53recoveryreadinessReadinessCheck"));

export { GetRoute53recoveryreadinessReadinessChecksResult } from "./getRoute53recoveryreadinessReadinessChecks";
export const getRoute53recoveryreadinessReadinessChecks: typeof import("./getRoute53recoveryreadinessReadinessChecks").getRoute53recoveryreadinessReadinessChecks = null as any;
export const getRoute53recoveryreadinessReadinessChecksOutput: typeof import("./getRoute53recoveryreadinessReadinessChecks").getRoute53recoveryreadinessReadinessChecksOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoveryreadinessReadinessChecks","getRoute53recoveryreadinessReadinessChecksOutput"], () => require("./getRoute53recoveryreadinessReadinessChecks"));

export { GetRoute53recoveryreadinessRecoveryGroupArgs, GetRoute53recoveryreadinessRecoveryGroupResult, GetRoute53recoveryreadinessRecoveryGroupOutputArgs } from "./getRoute53recoveryreadinessRecoveryGroup";
export const getRoute53recoveryreadinessRecoveryGroup: typeof import("./getRoute53recoveryreadinessRecoveryGroup").getRoute53recoveryreadinessRecoveryGroup = null as any;
export const getRoute53recoveryreadinessRecoveryGroupOutput: typeof import("./getRoute53recoveryreadinessRecoveryGroup").getRoute53recoveryreadinessRecoveryGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoveryreadinessRecoveryGroup","getRoute53recoveryreadinessRecoveryGroupOutput"], () => require("./getRoute53recoveryreadinessRecoveryGroup"));

export { GetRoute53recoveryreadinessRecoveryGroupsResult } from "./getRoute53recoveryreadinessRecoveryGroups";
export const getRoute53recoveryreadinessRecoveryGroups: typeof import("./getRoute53recoveryreadinessRecoveryGroups").getRoute53recoveryreadinessRecoveryGroups = null as any;
export const getRoute53recoveryreadinessRecoveryGroupsOutput: typeof import("./getRoute53recoveryreadinessRecoveryGroups").getRoute53recoveryreadinessRecoveryGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoveryreadinessRecoveryGroups","getRoute53recoveryreadinessRecoveryGroupsOutput"], () => require("./getRoute53recoveryreadinessRecoveryGroups"));

export { GetRoute53recoveryreadinessResourceSetArgs, GetRoute53recoveryreadinessResourceSetResult, GetRoute53recoveryreadinessResourceSetOutputArgs } from "./getRoute53recoveryreadinessResourceSet";
export const getRoute53recoveryreadinessResourceSet: typeof import("./getRoute53recoveryreadinessResourceSet").getRoute53recoveryreadinessResourceSet = null as any;
export const getRoute53recoveryreadinessResourceSetOutput: typeof import("./getRoute53recoveryreadinessResourceSet").getRoute53recoveryreadinessResourceSetOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoveryreadinessResourceSet","getRoute53recoveryreadinessResourceSetOutput"], () => require("./getRoute53recoveryreadinessResourceSet"));

export { GetRoute53recoveryreadinessResourceSetsResult } from "./getRoute53recoveryreadinessResourceSets";
export const getRoute53recoveryreadinessResourceSets: typeof import("./getRoute53recoveryreadinessResourceSets").getRoute53recoveryreadinessResourceSets = null as any;
export const getRoute53recoveryreadinessResourceSetsOutput: typeof import("./getRoute53recoveryreadinessResourceSets").getRoute53recoveryreadinessResourceSetsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53recoveryreadinessResourceSets","getRoute53recoveryreadinessResourceSetsOutput"], () => require("./getRoute53recoveryreadinessResourceSets"));

export { GetRoute53resolverFirewallDomainListArgs, GetRoute53resolverFirewallDomainListResult, GetRoute53resolverFirewallDomainListOutputArgs } from "./getRoute53resolverFirewallDomainList";
export const getRoute53resolverFirewallDomainList: typeof import("./getRoute53resolverFirewallDomainList").getRoute53resolverFirewallDomainList = null as any;
export const getRoute53resolverFirewallDomainListOutput: typeof import("./getRoute53resolverFirewallDomainList").getRoute53resolverFirewallDomainListOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverFirewallDomainList","getRoute53resolverFirewallDomainListOutput"], () => require("./getRoute53resolverFirewallDomainList"));

export { GetRoute53resolverFirewallDomainListsResult } from "./getRoute53resolverFirewallDomainLists";
export const getRoute53resolverFirewallDomainLists: typeof import("./getRoute53resolverFirewallDomainLists").getRoute53resolverFirewallDomainLists = null as any;
export const getRoute53resolverFirewallDomainListsOutput: typeof import("./getRoute53resolverFirewallDomainLists").getRoute53resolverFirewallDomainListsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverFirewallDomainLists","getRoute53resolverFirewallDomainListsOutput"], () => require("./getRoute53resolverFirewallDomainLists"));

export { GetRoute53resolverFirewallRuleGroupArgs, GetRoute53resolverFirewallRuleGroupResult, GetRoute53resolverFirewallRuleGroupOutputArgs } from "./getRoute53resolverFirewallRuleGroup";
export const getRoute53resolverFirewallRuleGroup: typeof import("./getRoute53resolverFirewallRuleGroup").getRoute53resolverFirewallRuleGroup = null as any;
export const getRoute53resolverFirewallRuleGroupOutput: typeof import("./getRoute53resolverFirewallRuleGroup").getRoute53resolverFirewallRuleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverFirewallRuleGroup","getRoute53resolverFirewallRuleGroupOutput"], () => require("./getRoute53resolverFirewallRuleGroup"));

export { GetRoute53resolverFirewallRuleGroupAssociationArgs, GetRoute53resolverFirewallRuleGroupAssociationResult, GetRoute53resolverFirewallRuleGroupAssociationOutputArgs } from "./getRoute53resolverFirewallRuleGroupAssociation";
export const getRoute53resolverFirewallRuleGroupAssociation: typeof import("./getRoute53resolverFirewallRuleGroupAssociation").getRoute53resolverFirewallRuleGroupAssociation = null as any;
export const getRoute53resolverFirewallRuleGroupAssociationOutput: typeof import("./getRoute53resolverFirewallRuleGroupAssociation").getRoute53resolverFirewallRuleGroupAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverFirewallRuleGroupAssociation","getRoute53resolverFirewallRuleGroupAssociationOutput"], () => require("./getRoute53resolverFirewallRuleGroupAssociation"));

export { GetRoute53resolverFirewallRuleGroupAssociationsResult } from "./getRoute53resolverFirewallRuleGroupAssociations";
export const getRoute53resolverFirewallRuleGroupAssociations: typeof import("./getRoute53resolverFirewallRuleGroupAssociations").getRoute53resolverFirewallRuleGroupAssociations = null as any;
export const getRoute53resolverFirewallRuleGroupAssociationsOutput: typeof import("./getRoute53resolverFirewallRuleGroupAssociations").getRoute53resolverFirewallRuleGroupAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverFirewallRuleGroupAssociations","getRoute53resolverFirewallRuleGroupAssociationsOutput"], () => require("./getRoute53resolverFirewallRuleGroupAssociations"));

export { GetRoute53resolverFirewallRuleGroupsResult } from "./getRoute53resolverFirewallRuleGroups";
export const getRoute53resolverFirewallRuleGroups: typeof import("./getRoute53resolverFirewallRuleGroups").getRoute53resolverFirewallRuleGroups = null as any;
export const getRoute53resolverFirewallRuleGroupsOutput: typeof import("./getRoute53resolverFirewallRuleGroups").getRoute53resolverFirewallRuleGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverFirewallRuleGroups","getRoute53resolverFirewallRuleGroupsOutput"], () => require("./getRoute53resolverFirewallRuleGroups"));

export { GetRoute53resolverOutpostResolverArgs, GetRoute53resolverOutpostResolverResult, GetRoute53resolverOutpostResolverOutputArgs } from "./getRoute53resolverOutpostResolver";
export const getRoute53resolverOutpostResolver: typeof import("./getRoute53resolverOutpostResolver").getRoute53resolverOutpostResolver = null as any;
export const getRoute53resolverOutpostResolverOutput: typeof import("./getRoute53resolverOutpostResolver").getRoute53resolverOutpostResolverOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverOutpostResolver","getRoute53resolverOutpostResolverOutput"], () => require("./getRoute53resolverOutpostResolver"));

export { GetRoute53resolverOutpostResolversResult } from "./getRoute53resolverOutpostResolvers";
export const getRoute53resolverOutpostResolvers: typeof import("./getRoute53resolverOutpostResolvers").getRoute53resolverOutpostResolvers = null as any;
export const getRoute53resolverOutpostResolversOutput: typeof import("./getRoute53resolverOutpostResolvers").getRoute53resolverOutpostResolversOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverOutpostResolvers","getRoute53resolverOutpostResolversOutput"], () => require("./getRoute53resolverOutpostResolvers"));

export { GetRoute53resolverResolverConfigArgs, GetRoute53resolverResolverConfigResult, GetRoute53resolverResolverConfigOutputArgs } from "./getRoute53resolverResolverConfig";
export const getRoute53resolverResolverConfig: typeof import("./getRoute53resolverResolverConfig").getRoute53resolverResolverConfig = null as any;
export const getRoute53resolverResolverConfigOutput: typeof import("./getRoute53resolverResolverConfig").getRoute53resolverResolverConfigOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverResolverConfig","getRoute53resolverResolverConfigOutput"], () => require("./getRoute53resolverResolverConfig"));

export { GetRoute53resolverResolverConfigsResult } from "./getRoute53resolverResolverConfigs";
export const getRoute53resolverResolverConfigs: typeof import("./getRoute53resolverResolverConfigs").getRoute53resolverResolverConfigs = null as any;
export const getRoute53resolverResolverConfigsOutput: typeof import("./getRoute53resolverResolverConfigs").getRoute53resolverResolverConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverResolverConfigs","getRoute53resolverResolverConfigsOutput"], () => require("./getRoute53resolverResolverConfigs"));

export { GetRoute53resolverResolverDnssecConfigArgs, GetRoute53resolverResolverDnssecConfigResult, GetRoute53resolverResolverDnssecConfigOutputArgs } from "./getRoute53resolverResolverDnssecConfig";
export const getRoute53resolverResolverDnssecConfig: typeof import("./getRoute53resolverResolverDnssecConfig").getRoute53resolverResolverDnssecConfig = null as any;
export const getRoute53resolverResolverDnssecConfigOutput: typeof import("./getRoute53resolverResolverDnssecConfig").getRoute53resolverResolverDnssecConfigOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverResolverDnssecConfig","getRoute53resolverResolverDnssecConfigOutput"], () => require("./getRoute53resolverResolverDnssecConfig"));

export { GetRoute53resolverResolverDnssecConfigsResult } from "./getRoute53resolverResolverDnssecConfigs";
export const getRoute53resolverResolverDnssecConfigs: typeof import("./getRoute53resolverResolverDnssecConfigs").getRoute53resolverResolverDnssecConfigs = null as any;
export const getRoute53resolverResolverDnssecConfigsOutput: typeof import("./getRoute53resolverResolverDnssecConfigs").getRoute53resolverResolverDnssecConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverResolverDnssecConfigs","getRoute53resolverResolverDnssecConfigsOutput"], () => require("./getRoute53resolverResolverDnssecConfigs"));

export { GetRoute53resolverResolverQueryLoggingConfigArgs, GetRoute53resolverResolverQueryLoggingConfigResult, GetRoute53resolverResolverQueryLoggingConfigOutputArgs } from "./getRoute53resolverResolverQueryLoggingConfig";
export const getRoute53resolverResolverQueryLoggingConfig: typeof import("./getRoute53resolverResolverQueryLoggingConfig").getRoute53resolverResolverQueryLoggingConfig = null as any;
export const getRoute53resolverResolverQueryLoggingConfigOutput: typeof import("./getRoute53resolverResolverQueryLoggingConfig").getRoute53resolverResolverQueryLoggingConfigOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverResolverQueryLoggingConfig","getRoute53resolverResolverQueryLoggingConfigOutput"], () => require("./getRoute53resolverResolverQueryLoggingConfig"));

export { GetRoute53resolverResolverQueryLoggingConfigAssociationArgs, GetRoute53resolverResolverQueryLoggingConfigAssociationResult, GetRoute53resolverResolverQueryLoggingConfigAssociationOutputArgs } from "./getRoute53resolverResolverQueryLoggingConfigAssociation";
export const getRoute53resolverResolverQueryLoggingConfigAssociation: typeof import("./getRoute53resolverResolverQueryLoggingConfigAssociation").getRoute53resolverResolverQueryLoggingConfigAssociation = null as any;
export const getRoute53resolverResolverQueryLoggingConfigAssociationOutput: typeof import("./getRoute53resolverResolverQueryLoggingConfigAssociation").getRoute53resolverResolverQueryLoggingConfigAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverResolverQueryLoggingConfigAssociation","getRoute53resolverResolverQueryLoggingConfigAssociationOutput"], () => require("./getRoute53resolverResolverQueryLoggingConfigAssociation"));

export { GetRoute53resolverResolverQueryLoggingConfigAssociationsResult } from "./getRoute53resolverResolverQueryLoggingConfigAssociations";
export const getRoute53resolverResolverQueryLoggingConfigAssociations: typeof import("./getRoute53resolverResolverQueryLoggingConfigAssociations").getRoute53resolverResolverQueryLoggingConfigAssociations = null as any;
export const getRoute53resolverResolverQueryLoggingConfigAssociationsOutput: typeof import("./getRoute53resolverResolverQueryLoggingConfigAssociations").getRoute53resolverResolverQueryLoggingConfigAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverResolverQueryLoggingConfigAssociations","getRoute53resolverResolverQueryLoggingConfigAssociationsOutput"], () => require("./getRoute53resolverResolverQueryLoggingConfigAssociations"));

export { GetRoute53resolverResolverQueryLoggingConfigsResult } from "./getRoute53resolverResolverQueryLoggingConfigs";
export const getRoute53resolverResolverQueryLoggingConfigs: typeof import("./getRoute53resolverResolverQueryLoggingConfigs").getRoute53resolverResolverQueryLoggingConfigs = null as any;
export const getRoute53resolverResolverQueryLoggingConfigsOutput: typeof import("./getRoute53resolverResolverQueryLoggingConfigs").getRoute53resolverResolverQueryLoggingConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverResolverQueryLoggingConfigs","getRoute53resolverResolverQueryLoggingConfigsOutput"], () => require("./getRoute53resolverResolverQueryLoggingConfigs"));

export { GetRoute53resolverResolverRuleArgs, GetRoute53resolverResolverRuleResult, GetRoute53resolverResolverRuleOutputArgs } from "./getRoute53resolverResolverRule";
export const getRoute53resolverResolverRule: typeof import("./getRoute53resolverResolverRule").getRoute53resolverResolverRule = null as any;
export const getRoute53resolverResolverRuleOutput: typeof import("./getRoute53resolverResolverRule").getRoute53resolverResolverRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverResolverRule","getRoute53resolverResolverRuleOutput"], () => require("./getRoute53resolverResolverRule"));

export { GetRoute53resolverResolverRuleAssociationArgs, GetRoute53resolverResolverRuleAssociationResult, GetRoute53resolverResolverRuleAssociationOutputArgs } from "./getRoute53resolverResolverRuleAssociation";
export const getRoute53resolverResolverRuleAssociation: typeof import("./getRoute53resolverResolverRuleAssociation").getRoute53resolverResolverRuleAssociation = null as any;
export const getRoute53resolverResolverRuleAssociationOutput: typeof import("./getRoute53resolverResolverRuleAssociation").getRoute53resolverResolverRuleAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverResolverRuleAssociation","getRoute53resolverResolverRuleAssociationOutput"], () => require("./getRoute53resolverResolverRuleAssociation"));

export { GetRoute53resolverResolverRuleAssociationsResult } from "./getRoute53resolverResolverRuleAssociations";
export const getRoute53resolverResolverRuleAssociations: typeof import("./getRoute53resolverResolverRuleAssociations").getRoute53resolverResolverRuleAssociations = null as any;
export const getRoute53resolverResolverRuleAssociationsOutput: typeof import("./getRoute53resolverResolverRuleAssociations").getRoute53resolverResolverRuleAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverResolverRuleAssociations","getRoute53resolverResolverRuleAssociationsOutput"], () => require("./getRoute53resolverResolverRuleAssociations"));

export { GetRoute53resolverResolverRulesResult } from "./getRoute53resolverResolverRules";
export const getRoute53resolverResolverRules: typeof import("./getRoute53resolverResolverRules").getRoute53resolverResolverRules = null as any;
export const getRoute53resolverResolverRulesOutput: typeof import("./getRoute53resolverResolverRules").getRoute53resolverResolverRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53resolverResolverRules","getRoute53resolverResolverRulesOutput"], () => require("./getRoute53resolverResolverRules"));

export { GetRumAppMonitorArgs, GetRumAppMonitorResult, GetRumAppMonitorOutputArgs } from "./getRumAppMonitor";
export const getRumAppMonitor: typeof import("./getRumAppMonitor").getRumAppMonitor = null as any;
export const getRumAppMonitorOutput: typeof import("./getRumAppMonitor").getRumAppMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getRumAppMonitor","getRumAppMonitorOutput"], () => require("./getRumAppMonitor"));

export { GetRumAppMonitorsResult } from "./getRumAppMonitors";
export const getRumAppMonitors: typeof import("./getRumAppMonitors").getRumAppMonitors = null as any;
export const getRumAppMonitorsOutput: typeof import("./getRumAppMonitors").getRumAppMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getRumAppMonitors","getRumAppMonitorsOutput"], () => require("./getRumAppMonitors"));

export { GetS3AccessGrantArgs, GetS3AccessGrantResult, GetS3AccessGrantOutputArgs } from "./getS3AccessGrant";
export const getS3AccessGrant: typeof import("./getS3AccessGrant").getS3AccessGrant = null as any;
export const getS3AccessGrantOutput: typeof import("./getS3AccessGrant").getS3AccessGrantOutput = null as any;
utilities.lazyLoad(exports, ["getS3AccessGrant","getS3AccessGrantOutput"], () => require("./getS3AccessGrant"));

export { GetS3AccessGrantsResult } from "./getS3AccessGrants";
export const getS3AccessGrants: typeof import("./getS3AccessGrants").getS3AccessGrants = null as any;
export const getS3AccessGrantsOutput: typeof import("./getS3AccessGrants").getS3AccessGrantsOutput = null as any;
utilities.lazyLoad(exports, ["getS3AccessGrants","getS3AccessGrantsOutput"], () => require("./getS3AccessGrants"));

export { GetS3AccessGrantsInstanceArgs, GetS3AccessGrantsInstanceResult, GetS3AccessGrantsInstanceOutputArgs } from "./getS3AccessGrantsInstance";
export const getS3AccessGrantsInstance: typeof import("./getS3AccessGrantsInstance").getS3AccessGrantsInstance = null as any;
export const getS3AccessGrantsInstanceOutput: typeof import("./getS3AccessGrantsInstance").getS3AccessGrantsInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getS3AccessGrantsInstance","getS3AccessGrantsInstanceOutput"], () => require("./getS3AccessGrantsInstance"));

export { GetS3AccessGrantsInstancesResult } from "./getS3AccessGrantsInstances";
export const getS3AccessGrantsInstances: typeof import("./getS3AccessGrantsInstances").getS3AccessGrantsInstances = null as any;
export const getS3AccessGrantsInstancesOutput: typeof import("./getS3AccessGrantsInstances").getS3AccessGrantsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getS3AccessGrantsInstances","getS3AccessGrantsInstancesOutput"], () => require("./getS3AccessGrantsInstances"));

export { GetS3AccessGrantsLocationArgs, GetS3AccessGrantsLocationResult, GetS3AccessGrantsLocationOutputArgs } from "./getS3AccessGrantsLocation";
export const getS3AccessGrantsLocation: typeof import("./getS3AccessGrantsLocation").getS3AccessGrantsLocation = null as any;
export const getS3AccessGrantsLocationOutput: typeof import("./getS3AccessGrantsLocation").getS3AccessGrantsLocationOutput = null as any;
utilities.lazyLoad(exports, ["getS3AccessGrantsLocation","getS3AccessGrantsLocationOutput"], () => require("./getS3AccessGrantsLocation"));

export { GetS3AccessGrantsLocationsResult } from "./getS3AccessGrantsLocations";
export const getS3AccessGrantsLocations: typeof import("./getS3AccessGrantsLocations").getS3AccessGrantsLocations = null as any;
export const getS3AccessGrantsLocationsOutput: typeof import("./getS3AccessGrantsLocations").getS3AccessGrantsLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getS3AccessGrantsLocations","getS3AccessGrantsLocationsOutput"], () => require("./getS3AccessGrantsLocations"));

export { GetS3AccessPointArgs, GetS3AccessPointResult, GetS3AccessPointOutputArgs } from "./getS3AccessPoint";
export const getS3AccessPoint: typeof import("./getS3AccessPoint").getS3AccessPoint = null as any;
export const getS3AccessPointOutput: typeof import("./getS3AccessPoint").getS3AccessPointOutput = null as any;
utilities.lazyLoad(exports, ["getS3AccessPoint","getS3AccessPointOutput"], () => require("./getS3AccessPoint"));

export { GetS3AccessPointsResult } from "./getS3AccessPoints";
export const getS3AccessPoints: typeof import("./getS3AccessPoints").getS3AccessPoints = null as any;
export const getS3AccessPointsOutput: typeof import("./getS3AccessPoints").getS3AccessPointsOutput = null as any;
utilities.lazyLoad(exports, ["getS3AccessPoints","getS3AccessPointsOutput"], () => require("./getS3AccessPoints"));

export { GetS3BucketArgs, GetS3BucketResult, GetS3BucketOutputArgs } from "./getS3Bucket";
export const getS3Bucket: typeof import("./getS3Bucket").getS3Bucket = null as any;
export const getS3BucketOutput: typeof import("./getS3Bucket").getS3BucketOutput = null as any;
utilities.lazyLoad(exports, ["getS3Bucket","getS3BucketOutput"], () => require("./getS3Bucket"));

export { GetS3BucketPoliciesResult } from "./getS3BucketPolicies";
export const getS3BucketPolicies: typeof import("./getS3BucketPolicies").getS3BucketPolicies = null as any;
export const getS3BucketPoliciesOutput: typeof import("./getS3BucketPolicies").getS3BucketPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getS3BucketPolicies","getS3BucketPoliciesOutput"], () => require("./getS3BucketPolicies"));

export { GetS3BucketPolicyArgs, GetS3BucketPolicyResult, GetS3BucketPolicyOutputArgs } from "./getS3BucketPolicy";
export const getS3BucketPolicy: typeof import("./getS3BucketPolicy").getS3BucketPolicy = null as any;
export const getS3BucketPolicyOutput: typeof import("./getS3BucketPolicy").getS3BucketPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getS3BucketPolicy","getS3BucketPolicyOutput"], () => require("./getS3BucketPolicy"));

export { GetS3BucketsResult } from "./getS3Buckets";
export const getS3Buckets: typeof import("./getS3Buckets").getS3Buckets = null as any;
export const getS3BucketsOutput: typeof import("./getS3Buckets").getS3BucketsOutput = null as any;
utilities.lazyLoad(exports, ["getS3Buckets","getS3BucketsOutput"], () => require("./getS3Buckets"));

export { GetS3MultiRegionAccessPointArgs, GetS3MultiRegionAccessPointResult, GetS3MultiRegionAccessPointOutputArgs } from "./getS3MultiRegionAccessPoint";
export const getS3MultiRegionAccessPoint: typeof import("./getS3MultiRegionAccessPoint").getS3MultiRegionAccessPoint = null as any;
export const getS3MultiRegionAccessPointOutput: typeof import("./getS3MultiRegionAccessPoint").getS3MultiRegionAccessPointOutput = null as any;
utilities.lazyLoad(exports, ["getS3MultiRegionAccessPoint","getS3MultiRegionAccessPointOutput"], () => require("./getS3MultiRegionAccessPoint"));

export { GetS3MultiRegionAccessPointPoliciesResult } from "./getS3MultiRegionAccessPointPolicies";
export const getS3MultiRegionAccessPointPolicies: typeof import("./getS3MultiRegionAccessPointPolicies").getS3MultiRegionAccessPointPolicies = null as any;
export const getS3MultiRegionAccessPointPoliciesOutput: typeof import("./getS3MultiRegionAccessPointPolicies").getS3MultiRegionAccessPointPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getS3MultiRegionAccessPointPolicies","getS3MultiRegionAccessPointPoliciesOutput"], () => require("./getS3MultiRegionAccessPointPolicies"));

export { GetS3MultiRegionAccessPointPolicyArgs, GetS3MultiRegionAccessPointPolicyResult, GetS3MultiRegionAccessPointPolicyOutputArgs } from "./getS3MultiRegionAccessPointPolicy";
export const getS3MultiRegionAccessPointPolicy: typeof import("./getS3MultiRegionAccessPointPolicy").getS3MultiRegionAccessPointPolicy = null as any;
export const getS3MultiRegionAccessPointPolicyOutput: typeof import("./getS3MultiRegionAccessPointPolicy").getS3MultiRegionAccessPointPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getS3MultiRegionAccessPointPolicy","getS3MultiRegionAccessPointPolicyOutput"], () => require("./getS3MultiRegionAccessPointPolicy"));

export { GetS3MultiRegionAccessPointsResult } from "./getS3MultiRegionAccessPoints";
export const getS3MultiRegionAccessPoints: typeof import("./getS3MultiRegionAccessPoints").getS3MultiRegionAccessPoints = null as any;
export const getS3MultiRegionAccessPointsOutput: typeof import("./getS3MultiRegionAccessPoints").getS3MultiRegionAccessPointsOutput = null as any;
utilities.lazyLoad(exports, ["getS3MultiRegionAccessPoints","getS3MultiRegionAccessPointsOutput"], () => require("./getS3MultiRegionAccessPoints"));

export { GetS3StorageLensArgs, GetS3StorageLensResult, GetS3StorageLensOutputArgs } from "./getS3StorageLens";
export const getS3StorageLens: typeof import("./getS3StorageLens").getS3StorageLens = null as any;
export const getS3StorageLensOutput: typeof import("./getS3StorageLens").getS3StorageLensOutput = null as any;
utilities.lazyLoad(exports, ["getS3StorageLens","getS3StorageLensOutput"], () => require("./getS3StorageLens"));

export { GetS3StorageLensGroupArgs, GetS3StorageLensGroupResult, GetS3StorageLensGroupOutputArgs } from "./getS3StorageLensGroup";
export const getS3StorageLensGroup: typeof import("./getS3StorageLensGroup").getS3StorageLensGroup = null as any;
export const getS3StorageLensGroupOutput: typeof import("./getS3StorageLensGroup").getS3StorageLensGroupOutput = null as any;
utilities.lazyLoad(exports, ["getS3StorageLensGroup","getS3StorageLensGroupOutput"], () => require("./getS3StorageLensGroup"));

export { GetS3StorageLensGroupsResult } from "./getS3StorageLensGroups";
export const getS3StorageLensGroups: typeof import("./getS3StorageLensGroups").getS3StorageLensGroups = null as any;
export const getS3StorageLensGroupsOutput: typeof import("./getS3StorageLensGroups").getS3StorageLensGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getS3StorageLensGroups","getS3StorageLensGroupsOutput"], () => require("./getS3StorageLensGroups"));

export { GetS3StorageLensesResult } from "./getS3StorageLenses";
export const getS3StorageLenses: typeof import("./getS3StorageLenses").getS3StorageLenses = null as any;
export const getS3StorageLensesOutput: typeof import("./getS3StorageLenses").getS3StorageLensesOutput = null as any;
utilities.lazyLoad(exports, ["getS3StorageLenses","getS3StorageLensesOutput"], () => require("./getS3StorageLenses"));

export { GetS3expressBucketPoliciesResult } from "./getS3expressBucketPolicies";
export const getS3expressBucketPolicies: typeof import("./getS3expressBucketPolicies").getS3expressBucketPolicies = null as any;
export const getS3expressBucketPoliciesOutput: typeof import("./getS3expressBucketPolicies").getS3expressBucketPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getS3expressBucketPolicies","getS3expressBucketPoliciesOutput"], () => require("./getS3expressBucketPolicies"));

export { GetS3expressBucketPolicyArgs, GetS3expressBucketPolicyResult, GetS3expressBucketPolicyOutputArgs } from "./getS3expressBucketPolicy";
export const getS3expressBucketPolicy: typeof import("./getS3expressBucketPolicy").getS3expressBucketPolicy = null as any;
export const getS3expressBucketPolicyOutput: typeof import("./getS3expressBucketPolicy").getS3expressBucketPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getS3expressBucketPolicy","getS3expressBucketPolicyOutput"], () => require("./getS3expressBucketPolicy"));

export { GetS3expressDirectoryBucketArgs, GetS3expressDirectoryBucketResult, GetS3expressDirectoryBucketOutputArgs } from "./getS3expressDirectoryBucket";
export const getS3expressDirectoryBucket: typeof import("./getS3expressDirectoryBucket").getS3expressDirectoryBucket = null as any;
export const getS3expressDirectoryBucketOutput: typeof import("./getS3expressDirectoryBucket").getS3expressDirectoryBucketOutput = null as any;
utilities.lazyLoad(exports, ["getS3expressDirectoryBucket","getS3expressDirectoryBucketOutput"], () => require("./getS3expressDirectoryBucket"));

export { GetS3expressDirectoryBucketsResult } from "./getS3expressDirectoryBuckets";
export const getS3expressDirectoryBuckets: typeof import("./getS3expressDirectoryBuckets").getS3expressDirectoryBuckets = null as any;
export const getS3expressDirectoryBucketsOutput: typeof import("./getS3expressDirectoryBuckets").getS3expressDirectoryBucketsOutput = null as any;
utilities.lazyLoad(exports, ["getS3expressDirectoryBuckets","getS3expressDirectoryBucketsOutput"], () => require("./getS3expressDirectoryBuckets"));

export { GetS3objectlambdaAccessPointArgs, GetS3objectlambdaAccessPointResult, GetS3objectlambdaAccessPointOutputArgs } from "./getS3objectlambdaAccessPoint";
export const getS3objectlambdaAccessPoint: typeof import("./getS3objectlambdaAccessPoint").getS3objectlambdaAccessPoint = null as any;
export const getS3objectlambdaAccessPointOutput: typeof import("./getS3objectlambdaAccessPoint").getS3objectlambdaAccessPointOutput = null as any;
utilities.lazyLoad(exports, ["getS3objectlambdaAccessPoint","getS3objectlambdaAccessPointOutput"], () => require("./getS3objectlambdaAccessPoint"));

export { GetS3objectlambdaAccessPointPolicyArgs, GetS3objectlambdaAccessPointPolicyResult, GetS3objectlambdaAccessPointPolicyOutputArgs } from "./getS3objectlambdaAccessPointPolicy";
export const getS3objectlambdaAccessPointPolicy: typeof import("./getS3objectlambdaAccessPointPolicy").getS3objectlambdaAccessPointPolicy = null as any;
export const getS3objectlambdaAccessPointPolicyOutput: typeof import("./getS3objectlambdaAccessPointPolicy").getS3objectlambdaAccessPointPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getS3objectlambdaAccessPointPolicy","getS3objectlambdaAccessPointPolicyOutput"], () => require("./getS3objectlambdaAccessPointPolicy"));

export { GetS3objectlambdaAccessPointsResult } from "./getS3objectlambdaAccessPoints";
export const getS3objectlambdaAccessPoints: typeof import("./getS3objectlambdaAccessPoints").getS3objectlambdaAccessPoints = null as any;
export const getS3objectlambdaAccessPointsOutput: typeof import("./getS3objectlambdaAccessPoints").getS3objectlambdaAccessPointsOutput = null as any;
utilities.lazyLoad(exports, ["getS3objectlambdaAccessPoints","getS3objectlambdaAccessPointsOutput"], () => require("./getS3objectlambdaAccessPoints"));

export { GetS3outpostsAccessPointArgs, GetS3outpostsAccessPointResult, GetS3outpostsAccessPointOutputArgs } from "./getS3outpostsAccessPoint";
export const getS3outpostsAccessPoint: typeof import("./getS3outpostsAccessPoint").getS3outpostsAccessPoint = null as any;
export const getS3outpostsAccessPointOutput: typeof import("./getS3outpostsAccessPoint").getS3outpostsAccessPointOutput = null as any;
utilities.lazyLoad(exports, ["getS3outpostsAccessPoint","getS3outpostsAccessPointOutput"], () => require("./getS3outpostsAccessPoint"));

export { GetS3outpostsAccessPointsResult } from "./getS3outpostsAccessPoints";
export const getS3outpostsAccessPoints: typeof import("./getS3outpostsAccessPoints").getS3outpostsAccessPoints = null as any;
export const getS3outpostsAccessPointsOutput: typeof import("./getS3outpostsAccessPoints").getS3outpostsAccessPointsOutput = null as any;
utilities.lazyLoad(exports, ["getS3outpostsAccessPoints","getS3outpostsAccessPointsOutput"], () => require("./getS3outpostsAccessPoints"));

export { GetS3outpostsBucketArgs, GetS3outpostsBucketResult, GetS3outpostsBucketOutputArgs } from "./getS3outpostsBucket";
export const getS3outpostsBucket: typeof import("./getS3outpostsBucket").getS3outpostsBucket = null as any;
export const getS3outpostsBucketOutput: typeof import("./getS3outpostsBucket").getS3outpostsBucketOutput = null as any;
utilities.lazyLoad(exports, ["getS3outpostsBucket","getS3outpostsBucketOutput"], () => require("./getS3outpostsBucket"));

export { GetS3outpostsBucketPolicyArgs, GetS3outpostsBucketPolicyResult, GetS3outpostsBucketPolicyOutputArgs } from "./getS3outpostsBucketPolicy";
export const getS3outpostsBucketPolicy: typeof import("./getS3outpostsBucketPolicy").getS3outpostsBucketPolicy = null as any;
export const getS3outpostsBucketPolicyOutput: typeof import("./getS3outpostsBucketPolicy").getS3outpostsBucketPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getS3outpostsBucketPolicy","getS3outpostsBucketPolicyOutput"], () => require("./getS3outpostsBucketPolicy"));

export { GetS3outpostsEndpointArgs, GetS3outpostsEndpointResult, GetS3outpostsEndpointOutputArgs } from "./getS3outpostsEndpoint";
export const getS3outpostsEndpoint: typeof import("./getS3outpostsEndpoint").getS3outpostsEndpoint = null as any;
export const getS3outpostsEndpointOutput: typeof import("./getS3outpostsEndpoint").getS3outpostsEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getS3outpostsEndpoint","getS3outpostsEndpointOutput"], () => require("./getS3outpostsEndpoint"));

export { GetS3outpostsEndpointsResult } from "./getS3outpostsEndpoints";
export const getS3outpostsEndpoints: typeof import("./getS3outpostsEndpoints").getS3outpostsEndpoints = null as any;
export const getS3outpostsEndpointsOutput: typeof import("./getS3outpostsEndpoints").getS3outpostsEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getS3outpostsEndpoints","getS3outpostsEndpointsOutput"], () => require("./getS3outpostsEndpoints"));

export { GetSagemakerAppArgs, GetSagemakerAppResult, GetSagemakerAppOutputArgs } from "./getSagemakerApp";
export const getSagemakerApp: typeof import("./getSagemakerApp").getSagemakerApp = null as any;
export const getSagemakerAppOutput: typeof import("./getSagemakerApp").getSagemakerAppOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerApp","getSagemakerAppOutput"], () => require("./getSagemakerApp"));

export { GetSagemakerAppImageConfigArgs, GetSagemakerAppImageConfigResult, GetSagemakerAppImageConfigOutputArgs } from "./getSagemakerAppImageConfig";
export const getSagemakerAppImageConfig: typeof import("./getSagemakerAppImageConfig").getSagemakerAppImageConfig = null as any;
export const getSagemakerAppImageConfigOutput: typeof import("./getSagemakerAppImageConfig").getSagemakerAppImageConfigOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerAppImageConfig","getSagemakerAppImageConfigOutput"], () => require("./getSagemakerAppImageConfig"));

export { GetSagemakerAppImageConfigsResult } from "./getSagemakerAppImageConfigs";
export const getSagemakerAppImageConfigs: typeof import("./getSagemakerAppImageConfigs").getSagemakerAppImageConfigs = null as any;
export const getSagemakerAppImageConfigsOutput: typeof import("./getSagemakerAppImageConfigs").getSagemakerAppImageConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerAppImageConfigs","getSagemakerAppImageConfigsOutput"], () => require("./getSagemakerAppImageConfigs"));

export { GetSagemakerAppsResult } from "./getSagemakerApps";
export const getSagemakerApps: typeof import("./getSagemakerApps").getSagemakerApps = null as any;
export const getSagemakerAppsOutput: typeof import("./getSagemakerApps").getSagemakerAppsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerApps","getSagemakerAppsOutput"], () => require("./getSagemakerApps"));

export { GetSagemakerDataQualityJobDefinitionArgs, GetSagemakerDataQualityJobDefinitionResult, GetSagemakerDataQualityJobDefinitionOutputArgs } from "./getSagemakerDataQualityJobDefinition";
export const getSagemakerDataQualityJobDefinition: typeof import("./getSagemakerDataQualityJobDefinition").getSagemakerDataQualityJobDefinition = null as any;
export const getSagemakerDataQualityJobDefinitionOutput: typeof import("./getSagemakerDataQualityJobDefinition").getSagemakerDataQualityJobDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerDataQualityJobDefinition","getSagemakerDataQualityJobDefinitionOutput"], () => require("./getSagemakerDataQualityJobDefinition"));

export { GetSagemakerDataQualityJobDefinitionsResult } from "./getSagemakerDataQualityJobDefinitions";
export const getSagemakerDataQualityJobDefinitions: typeof import("./getSagemakerDataQualityJobDefinitions").getSagemakerDataQualityJobDefinitions = null as any;
export const getSagemakerDataQualityJobDefinitionsOutput: typeof import("./getSagemakerDataQualityJobDefinitions").getSagemakerDataQualityJobDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerDataQualityJobDefinitions","getSagemakerDataQualityJobDefinitionsOutput"], () => require("./getSagemakerDataQualityJobDefinitions"));

export { GetSagemakerDeviceArgs, GetSagemakerDeviceResult, GetSagemakerDeviceOutputArgs } from "./getSagemakerDevice";
export const getSagemakerDevice: typeof import("./getSagemakerDevice").getSagemakerDevice = null as any;
export const getSagemakerDeviceOutput: typeof import("./getSagemakerDevice").getSagemakerDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerDevice","getSagemakerDeviceOutput"], () => require("./getSagemakerDevice"));

export { GetSagemakerDeviceFleetArgs, GetSagemakerDeviceFleetResult, GetSagemakerDeviceFleetOutputArgs } from "./getSagemakerDeviceFleet";
export const getSagemakerDeviceFleet: typeof import("./getSagemakerDeviceFleet").getSagemakerDeviceFleet = null as any;
export const getSagemakerDeviceFleetOutput: typeof import("./getSagemakerDeviceFleet").getSagemakerDeviceFleetOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerDeviceFleet","getSagemakerDeviceFleetOutput"], () => require("./getSagemakerDeviceFleet"));

export { GetSagemakerDomainArgs, GetSagemakerDomainResult, GetSagemakerDomainOutputArgs } from "./getSagemakerDomain";
export const getSagemakerDomain: typeof import("./getSagemakerDomain").getSagemakerDomain = null as any;
export const getSagemakerDomainOutput: typeof import("./getSagemakerDomain").getSagemakerDomainOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerDomain","getSagemakerDomainOutput"], () => require("./getSagemakerDomain"));

export { GetSagemakerDomainsResult } from "./getSagemakerDomains";
export const getSagemakerDomains: typeof import("./getSagemakerDomains").getSagemakerDomains = null as any;
export const getSagemakerDomainsOutput: typeof import("./getSagemakerDomains").getSagemakerDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerDomains","getSagemakerDomainsOutput"], () => require("./getSagemakerDomains"));

export { GetSagemakerFeatureGroupArgs, GetSagemakerFeatureGroupResult, GetSagemakerFeatureGroupOutputArgs } from "./getSagemakerFeatureGroup";
export const getSagemakerFeatureGroup: typeof import("./getSagemakerFeatureGroup").getSagemakerFeatureGroup = null as any;
export const getSagemakerFeatureGroupOutput: typeof import("./getSagemakerFeatureGroup").getSagemakerFeatureGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerFeatureGroup","getSagemakerFeatureGroupOutput"], () => require("./getSagemakerFeatureGroup"));

export { GetSagemakerFeatureGroupsResult } from "./getSagemakerFeatureGroups";
export const getSagemakerFeatureGroups: typeof import("./getSagemakerFeatureGroups").getSagemakerFeatureGroups = null as any;
export const getSagemakerFeatureGroupsOutput: typeof import("./getSagemakerFeatureGroups").getSagemakerFeatureGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerFeatureGroups","getSagemakerFeatureGroupsOutput"], () => require("./getSagemakerFeatureGroups"));

export { GetSagemakerImageArgs, GetSagemakerImageResult, GetSagemakerImageOutputArgs } from "./getSagemakerImage";
export const getSagemakerImage: typeof import("./getSagemakerImage").getSagemakerImage = null as any;
export const getSagemakerImageOutput: typeof import("./getSagemakerImage").getSagemakerImageOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerImage","getSagemakerImageOutput"], () => require("./getSagemakerImage"));

export { GetSagemakerImageVersionArgs, GetSagemakerImageVersionResult, GetSagemakerImageVersionOutputArgs } from "./getSagemakerImageVersion";
export const getSagemakerImageVersion: typeof import("./getSagemakerImageVersion").getSagemakerImageVersion = null as any;
export const getSagemakerImageVersionOutput: typeof import("./getSagemakerImageVersion").getSagemakerImageVersionOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerImageVersion","getSagemakerImageVersionOutput"], () => require("./getSagemakerImageVersion"));

export { GetSagemakerImagesResult } from "./getSagemakerImages";
export const getSagemakerImages: typeof import("./getSagemakerImages").getSagemakerImages = null as any;
export const getSagemakerImagesOutput: typeof import("./getSagemakerImages").getSagemakerImagesOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerImages","getSagemakerImagesOutput"], () => require("./getSagemakerImages"));

export { GetSagemakerInferenceComponentArgs, GetSagemakerInferenceComponentResult, GetSagemakerInferenceComponentOutputArgs } from "./getSagemakerInferenceComponent";
export const getSagemakerInferenceComponent: typeof import("./getSagemakerInferenceComponent").getSagemakerInferenceComponent = null as any;
export const getSagemakerInferenceComponentOutput: typeof import("./getSagemakerInferenceComponent").getSagemakerInferenceComponentOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerInferenceComponent","getSagemakerInferenceComponentOutput"], () => require("./getSagemakerInferenceComponent"));

export { GetSagemakerInferenceComponentsResult } from "./getSagemakerInferenceComponents";
export const getSagemakerInferenceComponents: typeof import("./getSagemakerInferenceComponents").getSagemakerInferenceComponents = null as any;
export const getSagemakerInferenceComponentsOutput: typeof import("./getSagemakerInferenceComponents").getSagemakerInferenceComponentsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerInferenceComponents","getSagemakerInferenceComponentsOutput"], () => require("./getSagemakerInferenceComponents"));

export { GetSagemakerInferenceExperimentArgs, GetSagemakerInferenceExperimentResult, GetSagemakerInferenceExperimentOutputArgs } from "./getSagemakerInferenceExperiment";
export const getSagemakerInferenceExperiment: typeof import("./getSagemakerInferenceExperiment").getSagemakerInferenceExperiment = null as any;
export const getSagemakerInferenceExperimentOutput: typeof import("./getSagemakerInferenceExperiment").getSagemakerInferenceExperimentOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerInferenceExperiment","getSagemakerInferenceExperimentOutput"], () => require("./getSagemakerInferenceExperiment"));

export { GetSagemakerInferenceExperimentsResult } from "./getSagemakerInferenceExperiments";
export const getSagemakerInferenceExperiments: typeof import("./getSagemakerInferenceExperiments").getSagemakerInferenceExperiments = null as any;
export const getSagemakerInferenceExperimentsOutput: typeof import("./getSagemakerInferenceExperiments").getSagemakerInferenceExperimentsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerInferenceExperiments","getSagemakerInferenceExperimentsOutput"], () => require("./getSagemakerInferenceExperiments"));

export { GetSagemakerMlflowTrackingServerArgs, GetSagemakerMlflowTrackingServerResult, GetSagemakerMlflowTrackingServerOutputArgs } from "./getSagemakerMlflowTrackingServer";
export const getSagemakerMlflowTrackingServer: typeof import("./getSagemakerMlflowTrackingServer").getSagemakerMlflowTrackingServer = null as any;
export const getSagemakerMlflowTrackingServerOutput: typeof import("./getSagemakerMlflowTrackingServer").getSagemakerMlflowTrackingServerOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerMlflowTrackingServer","getSagemakerMlflowTrackingServerOutput"], () => require("./getSagemakerMlflowTrackingServer"));

export { GetSagemakerMlflowTrackingServersResult } from "./getSagemakerMlflowTrackingServers";
export const getSagemakerMlflowTrackingServers: typeof import("./getSagemakerMlflowTrackingServers").getSagemakerMlflowTrackingServers = null as any;
export const getSagemakerMlflowTrackingServersOutput: typeof import("./getSagemakerMlflowTrackingServers").getSagemakerMlflowTrackingServersOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerMlflowTrackingServers","getSagemakerMlflowTrackingServersOutput"], () => require("./getSagemakerMlflowTrackingServers"));

export { GetSagemakerModelBiasJobDefinitionArgs, GetSagemakerModelBiasJobDefinitionResult, GetSagemakerModelBiasJobDefinitionOutputArgs } from "./getSagemakerModelBiasJobDefinition";
export const getSagemakerModelBiasJobDefinition: typeof import("./getSagemakerModelBiasJobDefinition").getSagemakerModelBiasJobDefinition = null as any;
export const getSagemakerModelBiasJobDefinitionOutput: typeof import("./getSagemakerModelBiasJobDefinition").getSagemakerModelBiasJobDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerModelBiasJobDefinition","getSagemakerModelBiasJobDefinitionOutput"], () => require("./getSagemakerModelBiasJobDefinition"));

export { GetSagemakerModelBiasJobDefinitionsResult } from "./getSagemakerModelBiasJobDefinitions";
export const getSagemakerModelBiasJobDefinitions: typeof import("./getSagemakerModelBiasJobDefinitions").getSagemakerModelBiasJobDefinitions = null as any;
export const getSagemakerModelBiasJobDefinitionsOutput: typeof import("./getSagemakerModelBiasJobDefinitions").getSagemakerModelBiasJobDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerModelBiasJobDefinitions","getSagemakerModelBiasJobDefinitionsOutput"], () => require("./getSagemakerModelBiasJobDefinitions"));

export { GetSagemakerModelExplainabilityJobDefinitionArgs, GetSagemakerModelExplainabilityJobDefinitionResult, GetSagemakerModelExplainabilityJobDefinitionOutputArgs } from "./getSagemakerModelExplainabilityJobDefinition";
export const getSagemakerModelExplainabilityJobDefinition: typeof import("./getSagemakerModelExplainabilityJobDefinition").getSagemakerModelExplainabilityJobDefinition = null as any;
export const getSagemakerModelExplainabilityJobDefinitionOutput: typeof import("./getSagemakerModelExplainabilityJobDefinition").getSagemakerModelExplainabilityJobDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerModelExplainabilityJobDefinition","getSagemakerModelExplainabilityJobDefinitionOutput"], () => require("./getSagemakerModelExplainabilityJobDefinition"));

export { GetSagemakerModelExplainabilityJobDefinitionsResult } from "./getSagemakerModelExplainabilityJobDefinitions";
export const getSagemakerModelExplainabilityJobDefinitions: typeof import("./getSagemakerModelExplainabilityJobDefinitions").getSagemakerModelExplainabilityJobDefinitions = null as any;
export const getSagemakerModelExplainabilityJobDefinitionsOutput: typeof import("./getSagemakerModelExplainabilityJobDefinitions").getSagemakerModelExplainabilityJobDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerModelExplainabilityJobDefinitions","getSagemakerModelExplainabilityJobDefinitionsOutput"], () => require("./getSagemakerModelExplainabilityJobDefinitions"));

export { GetSagemakerModelPackageArgs, GetSagemakerModelPackageResult, GetSagemakerModelPackageOutputArgs } from "./getSagemakerModelPackage";
export const getSagemakerModelPackage: typeof import("./getSagemakerModelPackage").getSagemakerModelPackage = null as any;
export const getSagemakerModelPackageOutput: typeof import("./getSagemakerModelPackage").getSagemakerModelPackageOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerModelPackage","getSagemakerModelPackageOutput"], () => require("./getSagemakerModelPackage"));

export { GetSagemakerModelPackageGroupArgs, GetSagemakerModelPackageGroupResult, GetSagemakerModelPackageGroupOutputArgs } from "./getSagemakerModelPackageGroup";
export const getSagemakerModelPackageGroup: typeof import("./getSagemakerModelPackageGroup").getSagemakerModelPackageGroup = null as any;
export const getSagemakerModelPackageGroupOutput: typeof import("./getSagemakerModelPackageGroup").getSagemakerModelPackageGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerModelPackageGroup","getSagemakerModelPackageGroupOutput"], () => require("./getSagemakerModelPackageGroup"));

export { GetSagemakerModelPackageGroupsResult } from "./getSagemakerModelPackageGroups";
export const getSagemakerModelPackageGroups: typeof import("./getSagemakerModelPackageGroups").getSagemakerModelPackageGroups = null as any;
export const getSagemakerModelPackageGroupsOutput: typeof import("./getSagemakerModelPackageGroups").getSagemakerModelPackageGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerModelPackageGroups","getSagemakerModelPackageGroupsOutput"], () => require("./getSagemakerModelPackageGroups"));

export { GetSagemakerModelPackagesResult } from "./getSagemakerModelPackages";
export const getSagemakerModelPackages: typeof import("./getSagemakerModelPackages").getSagemakerModelPackages = null as any;
export const getSagemakerModelPackagesOutput: typeof import("./getSagemakerModelPackages").getSagemakerModelPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerModelPackages","getSagemakerModelPackagesOutput"], () => require("./getSagemakerModelPackages"));

export { GetSagemakerModelQualityJobDefinitionArgs, GetSagemakerModelQualityJobDefinitionResult, GetSagemakerModelQualityJobDefinitionOutputArgs } from "./getSagemakerModelQualityJobDefinition";
export const getSagemakerModelQualityJobDefinition: typeof import("./getSagemakerModelQualityJobDefinition").getSagemakerModelQualityJobDefinition = null as any;
export const getSagemakerModelQualityJobDefinitionOutput: typeof import("./getSagemakerModelQualityJobDefinition").getSagemakerModelQualityJobDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerModelQualityJobDefinition","getSagemakerModelQualityJobDefinitionOutput"], () => require("./getSagemakerModelQualityJobDefinition"));

export { GetSagemakerModelQualityJobDefinitionsResult } from "./getSagemakerModelQualityJobDefinitions";
export const getSagemakerModelQualityJobDefinitions: typeof import("./getSagemakerModelQualityJobDefinitions").getSagemakerModelQualityJobDefinitions = null as any;
export const getSagemakerModelQualityJobDefinitionsOutput: typeof import("./getSagemakerModelQualityJobDefinitions").getSagemakerModelQualityJobDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerModelQualityJobDefinitions","getSagemakerModelQualityJobDefinitionsOutput"], () => require("./getSagemakerModelQualityJobDefinitions"));

export { GetSagemakerMonitoringScheduleArgs, GetSagemakerMonitoringScheduleResult, GetSagemakerMonitoringScheduleOutputArgs } from "./getSagemakerMonitoringSchedule";
export const getSagemakerMonitoringSchedule: typeof import("./getSagemakerMonitoringSchedule").getSagemakerMonitoringSchedule = null as any;
export const getSagemakerMonitoringScheduleOutput: typeof import("./getSagemakerMonitoringSchedule").getSagemakerMonitoringScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerMonitoringSchedule","getSagemakerMonitoringScheduleOutput"], () => require("./getSagemakerMonitoringSchedule"));

export { GetSagemakerMonitoringSchedulesResult } from "./getSagemakerMonitoringSchedules";
export const getSagemakerMonitoringSchedules: typeof import("./getSagemakerMonitoringSchedules").getSagemakerMonitoringSchedules = null as any;
export const getSagemakerMonitoringSchedulesOutput: typeof import("./getSagemakerMonitoringSchedules").getSagemakerMonitoringSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerMonitoringSchedules","getSagemakerMonitoringSchedulesOutput"], () => require("./getSagemakerMonitoringSchedules"));

export { GetSagemakerPipelineArgs, GetSagemakerPipelineResult, GetSagemakerPipelineOutputArgs } from "./getSagemakerPipeline";
export const getSagemakerPipeline: typeof import("./getSagemakerPipeline").getSagemakerPipeline = null as any;
export const getSagemakerPipelineOutput: typeof import("./getSagemakerPipeline").getSagemakerPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerPipeline","getSagemakerPipelineOutput"], () => require("./getSagemakerPipeline"));

export { GetSagemakerPipelinesResult } from "./getSagemakerPipelines";
export const getSagemakerPipelines: typeof import("./getSagemakerPipelines").getSagemakerPipelines = null as any;
export const getSagemakerPipelinesOutput: typeof import("./getSagemakerPipelines").getSagemakerPipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerPipelines","getSagemakerPipelinesOutput"], () => require("./getSagemakerPipelines"));

export { GetSagemakerProjectArgs, GetSagemakerProjectResult, GetSagemakerProjectOutputArgs } from "./getSagemakerProject";
export const getSagemakerProject: typeof import("./getSagemakerProject").getSagemakerProject = null as any;
export const getSagemakerProjectOutput: typeof import("./getSagemakerProject").getSagemakerProjectOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerProject","getSagemakerProjectOutput"], () => require("./getSagemakerProject"));

export { GetSagemakerProjectsResult } from "./getSagemakerProjects";
export const getSagemakerProjects: typeof import("./getSagemakerProjects").getSagemakerProjects = null as any;
export const getSagemakerProjectsOutput: typeof import("./getSagemakerProjects").getSagemakerProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerProjects","getSagemakerProjectsOutput"], () => require("./getSagemakerProjects"));

export { GetSagemakerSpaceArgs, GetSagemakerSpaceResult, GetSagemakerSpaceOutputArgs } from "./getSagemakerSpace";
export const getSagemakerSpace: typeof import("./getSagemakerSpace").getSagemakerSpace = null as any;
export const getSagemakerSpaceOutput: typeof import("./getSagemakerSpace").getSagemakerSpaceOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerSpace","getSagemakerSpaceOutput"], () => require("./getSagemakerSpace"));

export { GetSagemakerSpacesResult } from "./getSagemakerSpaces";
export const getSagemakerSpaces: typeof import("./getSagemakerSpaces").getSagemakerSpaces = null as any;
export const getSagemakerSpacesOutput: typeof import("./getSagemakerSpaces").getSagemakerSpacesOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerSpaces","getSagemakerSpacesOutput"], () => require("./getSagemakerSpaces"));

export { GetSagemakerStudioLifecycleConfigArgs, GetSagemakerStudioLifecycleConfigResult, GetSagemakerStudioLifecycleConfigOutputArgs } from "./getSagemakerStudioLifecycleConfig";
export const getSagemakerStudioLifecycleConfig: typeof import("./getSagemakerStudioLifecycleConfig").getSagemakerStudioLifecycleConfig = null as any;
export const getSagemakerStudioLifecycleConfigOutput: typeof import("./getSagemakerStudioLifecycleConfig").getSagemakerStudioLifecycleConfigOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerStudioLifecycleConfig","getSagemakerStudioLifecycleConfigOutput"], () => require("./getSagemakerStudioLifecycleConfig"));

export { GetSagemakerStudioLifecycleConfigsResult } from "./getSagemakerStudioLifecycleConfigs";
export const getSagemakerStudioLifecycleConfigs: typeof import("./getSagemakerStudioLifecycleConfigs").getSagemakerStudioLifecycleConfigs = null as any;
export const getSagemakerStudioLifecycleConfigsOutput: typeof import("./getSagemakerStudioLifecycleConfigs").getSagemakerStudioLifecycleConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerStudioLifecycleConfigs","getSagemakerStudioLifecycleConfigsOutput"], () => require("./getSagemakerStudioLifecycleConfigs"));

export { GetSagemakerUserProfileArgs, GetSagemakerUserProfileResult, GetSagemakerUserProfileOutputArgs } from "./getSagemakerUserProfile";
export const getSagemakerUserProfile: typeof import("./getSagemakerUserProfile").getSagemakerUserProfile = null as any;
export const getSagemakerUserProfileOutput: typeof import("./getSagemakerUserProfile").getSagemakerUserProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerUserProfile","getSagemakerUserProfileOutput"], () => require("./getSagemakerUserProfile"));

export { GetSagemakerUserProfilesResult } from "./getSagemakerUserProfiles";
export const getSagemakerUserProfiles: typeof import("./getSagemakerUserProfiles").getSagemakerUserProfiles = null as any;
export const getSagemakerUserProfilesOutput: typeof import("./getSagemakerUserProfiles").getSagemakerUserProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerUserProfiles","getSagemakerUserProfilesOutput"], () => require("./getSagemakerUserProfiles"));

export { GetSchedulerScheduleGroupArgs, GetSchedulerScheduleGroupResult, GetSchedulerScheduleGroupOutputArgs } from "./getSchedulerScheduleGroup";
export const getSchedulerScheduleGroup: typeof import("./getSchedulerScheduleGroup").getSchedulerScheduleGroup = null as any;
export const getSchedulerScheduleGroupOutput: typeof import("./getSchedulerScheduleGroup").getSchedulerScheduleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSchedulerScheduleGroup","getSchedulerScheduleGroupOutput"], () => require("./getSchedulerScheduleGroup"));

export { GetSchedulerScheduleGroupsResult } from "./getSchedulerScheduleGroups";
export const getSchedulerScheduleGroups: typeof import("./getSchedulerScheduleGroups").getSchedulerScheduleGroups = null as any;
export const getSchedulerScheduleGroupsOutput: typeof import("./getSchedulerScheduleGroups").getSchedulerScheduleGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSchedulerScheduleGroups","getSchedulerScheduleGroupsOutput"], () => require("./getSchedulerScheduleGroups"));

export { GetSecretsmanagerResourcePoliciesResult } from "./getSecretsmanagerResourcePolicies";
export const getSecretsmanagerResourcePolicies: typeof import("./getSecretsmanagerResourcePolicies").getSecretsmanagerResourcePolicies = null as any;
export const getSecretsmanagerResourcePoliciesOutput: typeof import("./getSecretsmanagerResourcePolicies").getSecretsmanagerResourcePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsmanagerResourcePolicies","getSecretsmanagerResourcePoliciesOutput"], () => require("./getSecretsmanagerResourcePolicies"));

export { GetSecretsmanagerResourcePolicyArgs, GetSecretsmanagerResourcePolicyResult, GetSecretsmanagerResourcePolicyOutputArgs } from "./getSecretsmanagerResourcePolicy";
export const getSecretsmanagerResourcePolicy: typeof import("./getSecretsmanagerResourcePolicy").getSecretsmanagerResourcePolicy = null as any;
export const getSecretsmanagerResourcePolicyOutput: typeof import("./getSecretsmanagerResourcePolicy").getSecretsmanagerResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsmanagerResourcePolicy","getSecretsmanagerResourcePolicyOutput"], () => require("./getSecretsmanagerResourcePolicy"));

export { GetSecretsmanagerSecretArgs, GetSecretsmanagerSecretResult, GetSecretsmanagerSecretOutputArgs } from "./getSecretsmanagerSecret";
export const getSecretsmanagerSecret: typeof import("./getSecretsmanagerSecret").getSecretsmanagerSecret = null as any;
export const getSecretsmanagerSecretOutput: typeof import("./getSecretsmanagerSecret").getSecretsmanagerSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsmanagerSecret","getSecretsmanagerSecretOutput"], () => require("./getSecretsmanagerSecret"));

export { GetSecretsmanagerSecretsResult } from "./getSecretsmanagerSecrets";
export const getSecretsmanagerSecrets: typeof import("./getSecretsmanagerSecrets").getSecretsmanagerSecrets = null as any;
export const getSecretsmanagerSecretsOutput: typeof import("./getSecretsmanagerSecrets").getSecretsmanagerSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsmanagerSecrets","getSecretsmanagerSecretsOutput"], () => require("./getSecretsmanagerSecrets"));

export { GetSecurityhubConfigurationPoliciesResult } from "./getSecurityhubConfigurationPolicies";
export const getSecurityhubConfigurationPolicies: typeof import("./getSecurityhubConfigurationPolicies").getSecurityhubConfigurationPolicies = null as any;
export const getSecurityhubConfigurationPoliciesOutput: typeof import("./getSecurityhubConfigurationPolicies").getSecurityhubConfigurationPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubConfigurationPolicies","getSecurityhubConfigurationPoliciesOutput"], () => require("./getSecurityhubConfigurationPolicies"));

export { GetSecurityhubConfigurationPolicyArgs, GetSecurityhubConfigurationPolicyResult, GetSecurityhubConfigurationPolicyOutputArgs } from "./getSecurityhubConfigurationPolicy";
export const getSecurityhubConfigurationPolicy: typeof import("./getSecurityhubConfigurationPolicy").getSecurityhubConfigurationPolicy = null as any;
export const getSecurityhubConfigurationPolicyOutput: typeof import("./getSecurityhubConfigurationPolicy").getSecurityhubConfigurationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubConfigurationPolicy","getSecurityhubConfigurationPolicyOutput"], () => require("./getSecurityhubConfigurationPolicy"));

export { GetSecurityhubDelegatedAdminArgs, GetSecurityhubDelegatedAdminResult, GetSecurityhubDelegatedAdminOutputArgs } from "./getSecurityhubDelegatedAdmin";
export const getSecurityhubDelegatedAdmin: typeof import("./getSecurityhubDelegatedAdmin").getSecurityhubDelegatedAdmin = null as any;
export const getSecurityhubDelegatedAdminOutput: typeof import("./getSecurityhubDelegatedAdmin").getSecurityhubDelegatedAdminOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubDelegatedAdmin","getSecurityhubDelegatedAdminOutput"], () => require("./getSecurityhubDelegatedAdmin"));

export { GetSecurityhubDelegatedAdminsResult } from "./getSecurityhubDelegatedAdmins";
export const getSecurityhubDelegatedAdmins: typeof import("./getSecurityhubDelegatedAdmins").getSecurityhubDelegatedAdmins = null as any;
export const getSecurityhubDelegatedAdminsOutput: typeof import("./getSecurityhubDelegatedAdmins").getSecurityhubDelegatedAdminsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubDelegatedAdmins","getSecurityhubDelegatedAdminsOutput"], () => require("./getSecurityhubDelegatedAdmins"));

export { GetSecurityhubFindingAggregatorArgs, GetSecurityhubFindingAggregatorResult, GetSecurityhubFindingAggregatorOutputArgs } from "./getSecurityhubFindingAggregator";
export const getSecurityhubFindingAggregator: typeof import("./getSecurityhubFindingAggregator").getSecurityhubFindingAggregator = null as any;
export const getSecurityhubFindingAggregatorOutput: typeof import("./getSecurityhubFindingAggregator").getSecurityhubFindingAggregatorOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubFindingAggregator","getSecurityhubFindingAggregatorOutput"], () => require("./getSecurityhubFindingAggregator"));

export { GetSecurityhubFindingAggregatorsResult } from "./getSecurityhubFindingAggregators";
export const getSecurityhubFindingAggregators: typeof import("./getSecurityhubFindingAggregators").getSecurityhubFindingAggregators = null as any;
export const getSecurityhubFindingAggregatorsOutput: typeof import("./getSecurityhubFindingAggregators").getSecurityhubFindingAggregatorsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubFindingAggregators","getSecurityhubFindingAggregatorsOutput"], () => require("./getSecurityhubFindingAggregators"));

export { GetSecurityhubHubArgs, GetSecurityhubHubResult, GetSecurityhubHubOutputArgs } from "./getSecurityhubHub";
export const getSecurityhubHub: typeof import("./getSecurityhubHub").getSecurityhubHub = null as any;
export const getSecurityhubHubOutput: typeof import("./getSecurityhubHub").getSecurityhubHubOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubHub","getSecurityhubHubOutput"], () => require("./getSecurityhubHub"));

export { GetSecurityhubHubsResult } from "./getSecurityhubHubs";
export const getSecurityhubHubs: typeof import("./getSecurityhubHubs").getSecurityhubHubs = null as any;
export const getSecurityhubHubsOutput: typeof import("./getSecurityhubHubs").getSecurityhubHubsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubHubs","getSecurityhubHubsOutput"], () => require("./getSecurityhubHubs"));

export { GetSecurityhubInsightArgs, GetSecurityhubInsightResult, GetSecurityhubInsightOutputArgs } from "./getSecurityhubInsight";
export const getSecurityhubInsight: typeof import("./getSecurityhubInsight").getSecurityhubInsight = null as any;
export const getSecurityhubInsightOutput: typeof import("./getSecurityhubInsight").getSecurityhubInsightOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubInsight","getSecurityhubInsightOutput"], () => require("./getSecurityhubInsight"));

export { GetSecurityhubInsightsResult } from "./getSecurityhubInsights";
export const getSecurityhubInsights: typeof import("./getSecurityhubInsights").getSecurityhubInsights = null as any;
export const getSecurityhubInsightsOutput: typeof import("./getSecurityhubInsights").getSecurityhubInsightsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubInsights","getSecurityhubInsightsOutput"], () => require("./getSecurityhubInsights"));

export { GetSecurityhubOrganizationConfigurationArgs, GetSecurityhubOrganizationConfigurationResult, GetSecurityhubOrganizationConfigurationOutputArgs } from "./getSecurityhubOrganizationConfiguration";
export const getSecurityhubOrganizationConfiguration: typeof import("./getSecurityhubOrganizationConfiguration").getSecurityhubOrganizationConfiguration = null as any;
export const getSecurityhubOrganizationConfigurationOutput: typeof import("./getSecurityhubOrganizationConfiguration").getSecurityhubOrganizationConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubOrganizationConfiguration","getSecurityhubOrganizationConfigurationOutput"], () => require("./getSecurityhubOrganizationConfiguration"));

export { GetSecurityhubOrganizationConfigurationsResult } from "./getSecurityhubOrganizationConfigurations";
export const getSecurityhubOrganizationConfigurations: typeof import("./getSecurityhubOrganizationConfigurations").getSecurityhubOrganizationConfigurations = null as any;
export const getSecurityhubOrganizationConfigurationsOutput: typeof import("./getSecurityhubOrganizationConfigurations").getSecurityhubOrganizationConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubOrganizationConfigurations","getSecurityhubOrganizationConfigurationsOutput"], () => require("./getSecurityhubOrganizationConfigurations"));

export { GetSecurityhubPolicyAssociationArgs, GetSecurityhubPolicyAssociationResult, GetSecurityhubPolicyAssociationOutputArgs } from "./getSecurityhubPolicyAssociation";
export const getSecurityhubPolicyAssociation: typeof import("./getSecurityhubPolicyAssociation").getSecurityhubPolicyAssociation = null as any;
export const getSecurityhubPolicyAssociationOutput: typeof import("./getSecurityhubPolicyAssociation").getSecurityhubPolicyAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubPolicyAssociation","getSecurityhubPolicyAssociationOutput"], () => require("./getSecurityhubPolicyAssociation"));

export { GetSecurityhubPolicyAssociationsResult } from "./getSecurityhubPolicyAssociations";
export const getSecurityhubPolicyAssociations: typeof import("./getSecurityhubPolicyAssociations").getSecurityhubPolicyAssociations = null as any;
export const getSecurityhubPolicyAssociationsOutput: typeof import("./getSecurityhubPolicyAssociations").getSecurityhubPolicyAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubPolicyAssociations","getSecurityhubPolicyAssociationsOutput"], () => require("./getSecurityhubPolicyAssociations"));

export { GetSecurityhubProductSubscriptionArgs, GetSecurityhubProductSubscriptionResult, GetSecurityhubProductSubscriptionOutputArgs } from "./getSecurityhubProductSubscription";
export const getSecurityhubProductSubscription: typeof import("./getSecurityhubProductSubscription").getSecurityhubProductSubscription = null as any;
export const getSecurityhubProductSubscriptionOutput: typeof import("./getSecurityhubProductSubscription").getSecurityhubProductSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubProductSubscription","getSecurityhubProductSubscriptionOutput"], () => require("./getSecurityhubProductSubscription"));

export { GetSecurityhubProductSubscriptionsResult } from "./getSecurityhubProductSubscriptions";
export const getSecurityhubProductSubscriptions: typeof import("./getSecurityhubProductSubscriptions").getSecurityhubProductSubscriptions = null as any;
export const getSecurityhubProductSubscriptionsOutput: typeof import("./getSecurityhubProductSubscriptions").getSecurityhubProductSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubProductSubscriptions","getSecurityhubProductSubscriptionsOutput"], () => require("./getSecurityhubProductSubscriptions"));

export { GetSecurityhubSecurityControlArgs, GetSecurityhubSecurityControlResult, GetSecurityhubSecurityControlOutputArgs } from "./getSecurityhubSecurityControl";
export const getSecurityhubSecurityControl: typeof import("./getSecurityhubSecurityControl").getSecurityhubSecurityControl = null as any;
export const getSecurityhubSecurityControlOutput: typeof import("./getSecurityhubSecurityControl").getSecurityhubSecurityControlOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubSecurityControl","getSecurityhubSecurityControlOutput"], () => require("./getSecurityhubSecurityControl"));

export { GetSecurityhubSecurityControlsResult } from "./getSecurityhubSecurityControls";
export const getSecurityhubSecurityControls: typeof import("./getSecurityhubSecurityControls").getSecurityhubSecurityControls = null as any;
export const getSecurityhubSecurityControlsOutput: typeof import("./getSecurityhubSecurityControls").getSecurityhubSecurityControlsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubSecurityControls","getSecurityhubSecurityControlsOutput"], () => require("./getSecurityhubSecurityControls"));

export { GetSecurityhubStandardArgs, GetSecurityhubStandardResult, GetSecurityhubStandardOutputArgs } from "./getSecurityhubStandard";
export const getSecurityhubStandard: typeof import("./getSecurityhubStandard").getSecurityhubStandard = null as any;
export const getSecurityhubStandardOutput: typeof import("./getSecurityhubStandard").getSecurityhubStandardOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubStandard","getSecurityhubStandardOutput"], () => require("./getSecurityhubStandard"));

export { GetSecurityhubStandardsResult } from "./getSecurityhubStandards";
export const getSecurityhubStandards: typeof import("./getSecurityhubStandards").getSecurityhubStandards = null as any;
export const getSecurityhubStandardsOutput: typeof import("./getSecurityhubStandards").getSecurityhubStandardsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityhubStandards","getSecurityhubStandardsOutput"], () => require("./getSecurityhubStandards"));

export { GetSecuritylakeAwsLogSourceArgs, GetSecuritylakeAwsLogSourceResult, GetSecuritylakeAwsLogSourceOutputArgs } from "./getSecuritylakeAwsLogSource";
export const getSecuritylakeAwsLogSource: typeof import("./getSecuritylakeAwsLogSource").getSecuritylakeAwsLogSource = null as any;
export const getSecuritylakeAwsLogSourceOutput: typeof import("./getSecuritylakeAwsLogSource").getSecuritylakeAwsLogSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritylakeAwsLogSource","getSecuritylakeAwsLogSourceOutput"], () => require("./getSecuritylakeAwsLogSource"));

export { GetSecuritylakeAwsLogSourcesResult } from "./getSecuritylakeAwsLogSources";
export const getSecuritylakeAwsLogSources: typeof import("./getSecuritylakeAwsLogSources").getSecuritylakeAwsLogSources = null as any;
export const getSecuritylakeAwsLogSourcesOutput: typeof import("./getSecuritylakeAwsLogSources").getSecuritylakeAwsLogSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritylakeAwsLogSources","getSecuritylakeAwsLogSourcesOutput"], () => require("./getSecuritylakeAwsLogSources"));

export { GetSecuritylakeDataLakeArgs, GetSecuritylakeDataLakeResult, GetSecuritylakeDataLakeOutputArgs } from "./getSecuritylakeDataLake";
export const getSecuritylakeDataLake: typeof import("./getSecuritylakeDataLake").getSecuritylakeDataLake = null as any;
export const getSecuritylakeDataLakeOutput: typeof import("./getSecuritylakeDataLake").getSecuritylakeDataLakeOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritylakeDataLake","getSecuritylakeDataLakeOutput"], () => require("./getSecuritylakeDataLake"));

export { GetSecuritylakeDataLakesResult } from "./getSecuritylakeDataLakes";
export const getSecuritylakeDataLakes: typeof import("./getSecuritylakeDataLakes").getSecuritylakeDataLakes = null as any;
export const getSecuritylakeDataLakesOutput: typeof import("./getSecuritylakeDataLakes").getSecuritylakeDataLakesOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritylakeDataLakes","getSecuritylakeDataLakesOutput"], () => require("./getSecuritylakeDataLakes"));

export { GetSecuritylakeSubscriberNotificationArgs, GetSecuritylakeSubscriberNotificationResult, GetSecuritylakeSubscriberNotificationOutputArgs } from "./getSecuritylakeSubscriberNotification";
export const getSecuritylakeSubscriberNotification: typeof import("./getSecuritylakeSubscriberNotification").getSecuritylakeSubscriberNotification = null as any;
export const getSecuritylakeSubscriberNotificationOutput: typeof import("./getSecuritylakeSubscriberNotification").getSecuritylakeSubscriberNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritylakeSubscriberNotification","getSecuritylakeSubscriberNotificationOutput"], () => require("./getSecuritylakeSubscriberNotification"));

export { GetSecuritylakeSubscriberNotificationsResult } from "./getSecuritylakeSubscriberNotifications";
export const getSecuritylakeSubscriberNotifications: typeof import("./getSecuritylakeSubscriberNotifications").getSecuritylakeSubscriberNotifications = null as any;
export const getSecuritylakeSubscriberNotificationsOutput: typeof import("./getSecuritylakeSubscriberNotifications").getSecuritylakeSubscriberNotificationsOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritylakeSubscriberNotifications","getSecuritylakeSubscriberNotificationsOutput"], () => require("./getSecuritylakeSubscriberNotifications"));

export { GetServicecatalogCloudformationProvisionedProductArgs, GetServicecatalogCloudformationProvisionedProductResult, GetServicecatalogCloudformationProvisionedProductOutputArgs } from "./getServicecatalogCloudformationProvisionedProduct";
export const getServicecatalogCloudformationProvisionedProduct: typeof import("./getServicecatalogCloudformationProvisionedProduct").getServicecatalogCloudformationProvisionedProduct = null as any;
export const getServicecatalogCloudformationProvisionedProductOutput: typeof import("./getServicecatalogCloudformationProvisionedProduct").getServicecatalogCloudformationProvisionedProductOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogCloudformationProvisionedProduct","getServicecatalogCloudformationProvisionedProductOutput"], () => require("./getServicecatalogCloudformationProvisionedProduct"));

export { GetServicecatalogServiceActionArgs, GetServicecatalogServiceActionResult, GetServicecatalogServiceActionOutputArgs } from "./getServicecatalogServiceAction";
export const getServicecatalogServiceAction: typeof import("./getServicecatalogServiceAction").getServicecatalogServiceAction = null as any;
export const getServicecatalogServiceActionOutput: typeof import("./getServicecatalogServiceAction").getServicecatalogServiceActionOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogServiceAction","getServicecatalogServiceActionOutput"], () => require("./getServicecatalogServiceAction"));

export { GetServicecatalogServiceActionAssociationArgs, GetServicecatalogServiceActionAssociationResult, GetServicecatalogServiceActionAssociationOutputArgs } from "./getServicecatalogServiceActionAssociation";
export const getServicecatalogServiceActionAssociation: typeof import("./getServicecatalogServiceActionAssociation").getServicecatalogServiceActionAssociation = null as any;
export const getServicecatalogServiceActionAssociationOutput: typeof import("./getServicecatalogServiceActionAssociation").getServicecatalogServiceActionAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogServiceActionAssociation","getServicecatalogServiceActionAssociationOutput"], () => require("./getServicecatalogServiceActionAssociation"));

export { GetServicecatalogServiceActionsResult } from "./getServicecatalogServiceActions";
export const getServicecatalogServiceActions: typeof import("./getServicecatalogServiceActions").getServicecatalogServiceActions = null as any;
export const getServicecatalogServiceActionsOutput: typeof import("./getServicecatalogServiceActions").getServicecatalogServiceActionsOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogServiceActions","getServicecatalogServiceActionsOutput"], () => require("./getServicecatalogServiceActions"));

export { GetServicecatalogappregistryApplicationArgs, GetServicecatalogappregistryApplicationResult, GetServicecatalogappregistryApplicationOutputArgs } from "./getServicecatalogappregistryApplication";
export const getServicecatalogappregistryApplication: typeof import("./getServicecatalogappregistryApplication").getServicecatalogappregistryApplication = null as any;
export const getServicecatalogappregistryApplicationOutput: typeof import("./getServicecatalogappregistryApplication").getServicecatalogappregistryApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogappregistryApplication","getServicecatalogappregistryApplicationOutput"], () => require("./getServicecatalogappregistryApplication"));

export { GetServicecatalogappregistryApplicationsResult } from "./getServicecatalogappregistryApplications";
export const getServicecatalogappregistryApplications: typeof import("./getServicecatalogappregistryApplications").getServicecatalogappregistryApplications = null as any;
export const getServicecatalogappregistryApplicationsOutput: typeof import("./getServicecatalogappregistryApplications").getServicecatalogappregistryApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogappregistryApplications","getServicecatalogappregistryApplicationsOutput"], () => require("./getServicecatalogappregistryApplications"));

export { GetServicecatalogappregistryAttributeGroupArgs, GetServicecatalogappregistryAttributeGroupResult, GetServicecatalogappregistryAttributeGroupOutputArgs } from "./getServicecatalogappregistryAttributeGroup";
export const getServicecatalogappregistryAttributeGroup: typeof import("./getServicecatalogappregistryAttributeGroup").getServicecatalogappregistryAttributeGroup = null as any;
export const getServicecatalogappregistryAttributeGroupOutput: typeof import("./getServicecatalogappregistryAttributeGroup").getServicecatalogappregistryAttributeGroupOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogappregistryAttributeGroup","getServicecatalogappregistryAttributeGroupOutput"], () => require("./getServicecatalogappregistryAttributeGroup"));

export { GetServicecatalogappregistryAttributeGroupAssociationArgs, GetServicecatalogappregistryAttributeGroupAssociationResult, GetServicecatalogappregistryAttributeGroupAssociationOutputArgs } from "./getServicecatalogappregistryAttributeGroupAssociation";
export const getServicecatalogappregistryAttributeGroupAssociation: typeof import("./getServicecatalogappregistryAttributeGroupAssociation").getServicecatalogappregistryAttributeGroupAssociation = null as any;
export const getServicecatalogappregistryAttributeGroupAssociationOutput: typeof import("./getServicecatalogappregistryAttributeGroupAssociation").getServicecatalogappregistryAttributeGroupAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogappregistryAttributeGroupAssociation","getServicecatalogappregistryAttributeGroupAssociationOutput"], () => require("./getServicecatalogappregistryAttributeGroupAssociation"));

export { GetServicecatalogappregistryAttributeGroupsResult } from "./getServicecatalogappregistryAttributeGroups";
export const getServicecatalogappregistryAttributeGroups: typeof import("./getServicecatalogappregistryAttributeGroups").getServicecatalogappregistryAttributeGroups = null as any;
export const getServicecatalogappregistryAttributeGroupsOutput: typeof import("./getServicecatalogappregistryAttributeGroups").getServicecatalogappregistryAttributeGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogappregistryAttributeGroups","getServicecatalogappregistryAttributeGroupsOutput"], () => require("./getServicecatalogappregistryAttributeGroups"));

export { GetServicecatalogappregistryResourceAssociationArgs, GetServicecatalogappregistryResourceAssociationResult, GetServicecatalogappregistryResourceAssociationOutputArgs } from "./getServicecatalogappregistryResourceAssociation";
export const getServicecatalogappregistryResourceAssociation: typeof import("./getServicecatalogappregistryResourceAssociation").getServicecatalogappregistryResourceAssociation = null as any;
export const getServicecatalogappregistryResourceAssociationOutput: typeof import("./getServicecatalogappregistryResourceAssociation").getServicecatalogappregistryResourceAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogappregistryResourceAssociation","getServicecatalogappregistryResourceAssociationOutput"], () => require("./getServicecatalogappregistryResourceAssociation"));

export { GetSesConfigurationSetArgs, GetSesConfigurationSetResult, GetSesConfigurationSetOutputArgs } from "./getSesConfigurationSet";
export const getSesConfigurationSet: typeof import("./getSesConfigurationSet").getSesConfigurationSet = null as any;
export const getSesConfigurationSetOutput: typeof import("./getSesConfigurationSet").getSesConfigurationSetOutput = null as any;
utilities.lazyLoad(exports, ["getSesConfigurationSet","getSesConfigurationSetOutput"], () => require("./getSesConfigurationSet"));

export { GetSesConfigurationSetEventDestinationArgs, GetSesConfigurationSetEventDestinationResult, GetSesConfigurationSetEventDestinationOutputArgs } from "./getSesConfigurationSetEventDestination";
export const getSesConfigurationSetEventDestination: typeof import("./getSesConfigurationSetEventDestination").getSesConfigurationSetEventDestination = null as any;
export const getSesConfigurationSetEventDestinationOutput: typeof import("./getSesConfigurationSetEventDestination").getSesConfigurationSetEventDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getSesConfigurationSetEventDestination","getSesConfigurationSetEventDestinationOutput"], () => require("./getSesConfigurationSetEventDestination"));

export { GetSesConfigurationSetsResult } from "./getSesConfigurationSets";
export const getSesConfigurationSets: typeof import("./getSesConfigurationSets").getSesConfigurationSets = null as any;
export const getSesConfigurationSetsOutput: typeof import("./getSesConfigurationSets").getSesConfigurationSetsOutput = null as any;
utilities.lazyLoad(exports, ["getSesConfigurationSets","getSesConfigurationSetsOutput"], () => require("./getSesConfigurationSets"));

export { GetSesContactListArgs, GetSesContactListResult, GetSesContactListOutputArgs } from "./getSesContactList";
export const getSesContactList: typeof import("./getSesContactList").getSesContactList = null as any;
export const getSesContactListOutput: typeof import("./getSesContactList").getSesContactListOutput = null as any;
utilities.lazyLoad(exports, ["getSesContactList","getSesContactListOutput"], () => require("./getSesContactList"));

export { GetSesContactListsResult } from "./getSesContactLists";
export const getSesContactLists: typeof import("./getSesContactLists").getSesContactLists = null as any;
export const getSesContactListsOutput: typeof import("./getSesContactLists").getSesContactListsOutput = null as any;
utilities.lazyLoad(exports, ["getSesContactLists","getSesContactListsOutput"], () => require("./getSesContactLists"));

export { GetSesDedicatedIpPoolArgs, GetSesDedicatedIpPoolResult, GetSesDedicatedIpPoolOutputArgs } from "./getSesDedicatedIpPool";
export const getSesDedicatedIpPool: typeof import("./getSesDedicatedIpPool").getSesDedicatedIpPool = null as any;
export const getSesDedicatedIpPoolOutput: typeof import("./getSesDedicatedIpPool").getSesDedicatedIpPoolOutput = null as any;
utilities.lazyLoad(exports, ["getSesDedicatedIpPool","getSesDedicatedIpPoolOutput"], () => require("./getSesDedicatedIpPool"));

export { GetSesDedicatedIpPoolsResult } from "./getSesDedicatedIpPools";
export const getSesDedicatedIpPools: typeof import("./getSesDedicatedIpPools").getSesDedicatedIpPools = null as any;
export const getSesDedicatedIpPoolsOutput: typeof import("./getSesDedicatedIpPools").getSesDedicatedIpPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getSesDedicatedIpPools","getSesDedicatedIpPoolsOutput"], () => require("./getSesDedicatedIpPools"));

export { GetSesEmailIdentitiesResult } from "./getSesEmailIdentities";
export const getSesEmailIdentities: typeof import("./getSesEmailIdentities").getSesEmailIdentities = null as any;
export const getSesEmailIdentitiesOutput: typeof import("./getSesEmailIdentities").getSesEmailIdentitiesOutput = null as any;
utilities.lazyLoad(exports, ["getSesEmailIdentities","getSesEmailIdentitiesOutput"], () => require("./getSesEmailIdentities"));

export { GetSesEmailIdentityArgs, GetSesEmailIdentityResult, GetSesEmailIdentityOutputArgs } from "./getSesEmailIdentity";
export const getSesEmailIdentity: typeof import("./getSesEmailIdentity").getSesEmailIdentity = null as any;
export const getSesEmailIdentityOutput: typeof import("./getSesEmailIdentity").getSesEmailIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getSesEmailIdentity","getSesEmailIdentityOutput"], () => require("./getSesEmailIdentity"));

export { GetSesMailManagerAddonInstanceArgs, GetSesMailManagerAddonInstanceResult, GetSesMailManagerAddonInstanceOutputArgs } from "./getSesMailManagerAddonInstance";
export const getSesMailManagerAddonInstance: typeof import("./getSesMailManagerAddonInstance").getSesMailManagerAddonInstance = null as any;
export const getSesMailManagerAddonInstanceOutput: typeof import("./getSesMailManagerAddonInstance").getSesMailManagerAddonInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerAddonInstance","getSesMailManagerAddonInstanceOutput"], () => require("./getSesMailManagerAddonInstance"));

export { GetSesMailManagerAddonInstancesResult } from "./getSesMailManagerAddonInstances";
export const getSesMailManagerAddonInstances: typeof import("./getSesMailManagerAddonInstances").getSesMailManagerAddonInstances = null as any;
export const getSesMailManagerAddonInstancesOutput: typeof import("./getSesMailManagerAddonInstances").getSesMailManagerAddonInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerAddonInstances","getSesMailManagerAddonInstancesOutput"], () => require("./getSesMailManagerAddonInstances"));

export { GetSesMailManagerAddonSubscriptionArgs, GetSesMailManagerAddonSubscriptionResult, GetSesMailManagerAddonSubscriptionOutputArgs } from "./getSesMailManagerAddonSubscription";
export const getSesMailManagerAddonSubscription: typeof import("./getSesMailManagerAddonSubscription").getSesMailManagerAddonSubscription = null as any;
export const getSesMailManagerAddonSubscriptionOutput: typeof import("./getSesMailManagerAddonSubscription").getSesMailManagerAddonSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerAddonSubscription","getSesMailManagerAddonSubscriptionOutput"], () => require("./getSesMailManagerAddonSubscription"));

export { GetSesMailManagerAddonSubscriptionsResult } from "./getSesMailManagerAddonSubscriptions";
export const getSesMailManagerAddonSubscriptions: typeof import("./getSesMailManagerAddonSubscriptions").getSesMailManagerAddonSubscriptions = null as any;
export const getSesMailManagerAddonSubscriptionsOutput: typeof import("./getSesMailManagerAddonSubscriptions").getSesMailManagerAddonSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerAddonSubscriptions","getSesMailManagerAddonSubscriptionsOutput"], () => require("./getSesMailManagerAddonSubscriptions"));

export { GetSesMailManagerArchiveArgs, GetSesMailManagerArchiveResult, GetSesMailManagerArchiveOutputArgs } from "./getSesMailManagerArchive";
export const getSesMailManagerArchive: typeof import("./getSesMailManagerArchive").getSesMailManagerArchive = null as any;
export const getSesMailManagerArchiveOutput: typeof import("./getSesMailManagerArchive").getSesMailManagerArchiveOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerArchive","getSesMailManagerArchiveOutput"], () => require("./getSesMailManagerArchive"));

export { GetSesMailManagerArchivesResult } from "./getSesMailManagerArchives";
export const getSesMailManagerArchives: typeof import("./getSesMailManagerArchives").getSesMailManagerArchives = null as any;
export const getSesMailManagerArchivesOutput: typeof import("./getSesMailManagerArchives").getSesMailManagerArchivesOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerArchives","getSesMailManagerArchivesOutput"], () => require("./getSesMailManagerArchives"));

export { GetSesMailManagerIngressPointArgs, GetSesMailManagerIngressPointResult, GetSesMailManagerIngressPointOutputArgs } from "./getSesMailManagerIngressPoint";
export const getSesMailManagerIngressPoint: typeof import("./getSesMailManagerIngressPoint").getSesMailManagerIngressPoint = null as any;
export const getSesMailManagerIngressPointOutput: typeof import("./getSesMailManagerIngressPoint").getSesMailManagerIngressPointOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerIngressPoint","getSesMailManagerIngressPointOutput"], () => require("./getSesMailManagerIngressPoint"));

export { GetSesMailManagerIngressPointsResult } from "./getSesMailManagerIngressPoints";
export const getSesMailManagerIngressPoints: typeof import("./getSesMailManagerIngressPoints").getSesMailManagerIngressPoints = null as any;
export const getSesMailManagerIngressPointsOutput: typeof import("./getSesMailManagerIngressPoints").getSesMailManagerIngressPointsOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerIngressPoints","getSesMailManagerIngressPointsOutput"], () => require("./getSesMailManagerIngressPoints"));

export { GetSesMailManagerRelayArgs, GetSesMailManagerRelayResult, GetSesMailManagerRelayOutputArgs } from "./getSesMailManagerRelay";
export const getSesMailManagerRelay: typeof import("./getSesMailManagerRelay").getSesMailManagerRelay = null as any;
export const getSesMailManagerRelayOutput: typeof import("./getSesMailManagerRelay").getSesMailManagerRelayOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerRelay","getSesMailManagerRelayOutput"], () => require("./getSesMailManagerRelay"));

export { GetSesMailManagerRelaysResult } from "./getSesMailManagerRelays";
export const getSesMailManagerRelays: typeof import("./getSesMailManagerRelays").getSesMailManagerRelays = null as any;
export const getSesMailManagerRelaysOutput: typeof import("./getSesMailManagerRelays").getSesMailManagerRelaysOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerRelays","getSesMailManagerRelaysOutput"], () => require("./getSesMailManagerRelays"));

export { GetSesMailManagerRuleSetArgs, GetSesMailManagerRuleSetResult, GetSesMailManagerRuleSetOutputArgs } from "./getSesMailManagerRuleSet";
export const getSesMailManagerRuleSet: typeof import("./getSesMailManagerRuleSet").getSesMailManagerRuleSet = null as any;
export const getSesMailManagerRuleSetOutput: typeof import("./getSesMailManagerRuleSet").getSesMailManagerRuleSetOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerRuleSet","getSesMailManagerRuleSetOutput"], () => require("./getSesMailManagerRuleSet"));

export { GetSesMailManagerRuleSetsResult } from "./getSesMailManagerRuleSets";
export const getSesMailManagerRuleSets: typeof import("./getSesMailManagerRuleSets").getSesMailManagerRuleSets = null as any;
export const getSesMailManagerRuleSetsOutput: typeof import("./getSesMailManagerRuleSets").getSesMailManagerRuleSetsOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerRuleSets","getSesMailManagerRuleSetsOutput"], () => require("./getSesMailManagerRuleSets"));

export { GetSesMailManagerTrafficPoliciesResult } from "./getSesMailManagerTrafficPolicies";
export const getSesMailManagerTrafficPolicies: typeof import("./getSesMailManagerTrafficPolicies").getSesMailManagerTrafficPolicies = null as any;
export const getSesMailManagerTrafficPoliciesOutput: typeof import("./getSesMailManagerTrafficPolicies").getSesMailManagerTrafficPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerTrafficPolicies","getSesMailManagerTrafficPoliciesOutput"], () => require("./getSesMailManagerTrafficPolicies"));

export { GetSesMailManagerTrafficPolicyArgs, GetSesMailManagerTrafficPolicyResult, GetSesMailManagerTrafficPolicyOutputArgs } from "./getSesMailManagerTrafficPolicy";
export const getSesMailManagerTrafficPolicy: typeof import("./getSesMailManagerTrafficPolicy").getSesMailManagerTrafficPolicy = null as any;
export const getSesMailManagerTrafficPolicyOutput: typeof import("./getSesMailManagerTrafficPolicy").getSesMailManagerTrafficPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSesMailManagerTrafficPolicy","getSesMailManagerTrafficPolicyOutput"], () => require("./getSesMailManagerTrafficPolicy"));

export { GetSesTemplateArgs, GetSesTemplateResult, GetSesTemplateOutputArgs } from "./getSesTemplate";
export const getSesTemplate: typeof import("./getSesTemplate").getSesTemplate = null as any;
export const getSesTemplateOutput: typeof import("./getSesTemplate").getSesTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getSesTemplate","getSesTemplateOutput"], () => require("./getSesTemplate"));

export { GetSesTemplatesResult } from "./getSesTemplates";
export const getSesTemplates: typeof import("./getSesTemplates").getSesTemplates = null as any;
export const getSesTemplatesOutput: typeof import("./getSesTemplates").getSesTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getSesTemplates","getSesTemplatesOutput"], () => require("./getSesTemplates"));

export { GetSesVdmAttributesArgs, GetSesVdmAttributesResult, GetSesVdmAttributesOutputArgs } from "./getSesVdmAttributes";
export const getSesVdmAttributes: typeof import("./getSesVdmAttributes").getSesVdmAttributes = null as any;
export const getSesVdmAttributesOutput: typeof import("./getSesVdmAttributes").getSesVdmAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getSesVdmAttributes","getSesVdmAttributesOutput"], () => require("./getSesVdmAttributes"));

export { GetShieldDrtAccessArgs, GetShieldDrtAccessResult, GetShieldDrtAccessOutputArgs } from "./getShieldDrtAccess";
export const getShieldDrtAccess: typeof import("./getShieldDrtAccess").getShieldDrtAccess = null as any;
export const getShieldDrtAccessOutput: typeof import("./getShieldDrtAccess").getShieldDrtAccessOutput = null as any;
utilities.lazyLoad(exports, ["getShieldDrtAccess","getShieldDrtAccessOutput"], () => require("./getShieldDrtAccess"));

export { GetShieldDrtAccessesResult } from "./getShieldDrtAccesses";
export const getShieldDrtAccesses: typeof import("./getShieldDrtAccesses").getShieldDrtAccesses = null as any;
export const getShieldDrtAccessesOutput: typeof import("./getShieldDrtAccesses").getShieldDrtAccessesOutput = null as any;
utilities.lazyLoad(exports, ["getShieldDrtAccesses","getShieldDrtAccessesOutput"], () => require("./getShieldDrtAccesses"));

export { GetShieldProactiveEngagementArgs, GetShieldProactiveEngagementResult, GetShieldProactiveEngagementOutputArgs } from "./getShieldProactiveEngagement";
export const getShieldProactiveEngagement: typeof import("./getShieldProactiveEngagement").getShieldProactiveEngagement = null as any;
export const getShieldProactiveEngagementOutput: typeof import("./getShieldProactiveEngagement").getShieldProactiveEngagementOutput = null as any;
utilities.lazyLoad(exports, ["getShieldProactiveEngagement","getShieldProactiveEngagementOutput"], () => require("./getShieldProactiveEngagement"));

export { GetShieldProactiveEngagementsResult } from "./getShieldProactiveEngagements";
export const getShieldProactiveEngagements: typeof import("./getShieldProactiveEngagements").getShieldProactiveEngagements = null as any;
export const getShieldProactiveEngagementsOutput: typeof import("./getShieldProactiveEngagements").getShieldProactiveEngagementsOutput = null as any;
utilities.lazyLoad(exports, ["getShieldProactiveEngagements","getShieldProactiveEngagementsOutput"], () => require("./getShieldProactiveEngagements"));

export { GetShieldProtectionArgs, GetShieldProtectionResult, GetShieldProtectionOutputArgs } from "./getShieldProtection";
export const getShieldProtection: typeof import("./getShieldProtection").getShieldProtection = null as any;
export const getShieldProtectionOutput: typeof import("./getShieldProtection").getShieldProtectionOutput = null as any;
utilities.lazyLoad(exports, ["getShieldProtection","getShieldProtectionOutput"], () => require("./getShieldProtection"));

export { GetShieldProtectionGroupArgs, GetShieldProtectionGroupResult, GetShieldProtectionGroupOutputArgs } from "./getShieldProtectionGroup";
export const getShieldProtectionGroup: typeof import("./getShieldProtectionGroup").getShieldProtectionGroup = null as any;
export const getShieldProtectionGroupOutput: typeof import("./getShieldProtectionGroup").getShieldProtectionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getShieldProtectionGroup","getShieldProtectionGroupOutput"], () => require("./getShieldProtectionGroup"));

export { GetShieldProtectionGroupsResult } from "./getShieldProtectionGroups";
export const getShieldProtectionGroups: typeof import("./getShieldProtectionGroups").getShieldProtectionGroups = null as any;
export const getShieldProtectionGroupsOutput: typeof import("./getShieldProtectionGroups").getShieldProtectionGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getShieldProtectionGroups","getShieldProtectionGroupsOutput"], () => require("./getShieldProtectionGroups"));

export { GetShieldProtectionsResult } from "./getShieldProtections";
export const getShieldProtections: typeof import("./getShieldProtections").getShieldProtections = null as any;
export const getShieldProtectionsOutput: typeof import("./getShieldProtections").getShieldProtectionsOutput = null as any;
utilities.lazyLoad(exports, ["getShieldProtections","getShieldProtectionsOutput"], () => require("./getShieldProtections"));

export { GetSignerProfilePermissionArgs, GetSignerProfilePermissionResult, GetSignerProfilePermissionOutputArgs } from "./getSignerProfilePermission";
export const getSignerProfilePermission: typeof import("./getSignerProfilePermission").getSignerProfilePermission = null as any;
export const getSignerProfilePermissionOutput: typeof import("./getSignerProfilePermission").getSignerProfilePermissionOutput = null as any;
utilities.lazyLoad(exports, ["getSignerProfilePermission","getSignerProfilePermissionOutput"], () => require("./getSignerProfilePermission"));

export { GetSignerProfilePermissionsResult } from "./getSignerProfilePermissions";
export const getSignerProfilePermissions: typeof import("./getSignerProfilePermissions").getSignerProfilePermissions = null as any;
export const getSignerProfilePermissionsOutput: typeof import("./getSignerProfilePermissions").getSignerProfilePermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getSignerProfilePermissions","getSignerProfilePermissionsOutput"], () => require("./getSignerProfilePermissions"));

export { GetSignerSigningProfileArgs, GetSignerSigningProfileResult, GetSignerSigningProfileOutputArgs } from "./getSignerSigningProfile";
export const getSignerSigningProfile: typeof import("./getSignerSigningProfile").getSignerSigningProfile = null as any;
export const getSignerSigningProfileOutput: typeof import("./getSignerSigningProfile").getSignerSigningProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSignerSigningProfile","getSignerSigningProfileOutput"], () => require("./getSignerSigningProfile"));

export { GetSignerSigningProfilesResult } from "./getSignerSigningProfiles";
export const getSignerSigningProfiles: typeof import("./getSignerSigningProfiles").getSignerSigningProfiles = null as any;
export const getSignerSigningProfilesOutput: typeof import("./getSignerSigningProfiles").getSignerSigningProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getSignerSigningProfiles","getSignerSigningProfilesOutput"], () => require("./getSignerSigningProfiles"));

export { GetSimspaceweaverSimulationArgs, GetSimspaceweaverSimulationResult, GetSimspaceweaverSimulationOutputArgs } from "./getSimspaceweaverSimulation";
export const getSimspaceweaverSimulation: typeof import("./getSimspaceweaverSimulation").getSimspaceweaverSimulation = null as any;
export const getSimspaceweaverSimulationOutput: typeof import("./getSimspaceweaverSimulation").getSimspaceweaverSimulationOutput = null as any;
utilities.lazyLoad(exports, ["getSimspaceweaverSimulation","getSimspaceweaverSimulationOutput"], () => require("./getSimspaceweaverSimulation"));

export { GetSimspaceweaverSimulationsResult } from "./getSimspaceweaverSimulations";
export const getSimspaceweaverSimulations: typeof import("./getSimspaceweaverSimulations").getSimspaceweaverSimulations = null as any;
export const getSimspaceweaverSimulationsOutput: typeof import("./getSimspaceweaverSimulations").getSimspaceweaverSimulationsOutput = null as any;
utilities.lazyLoad(exports, ["getSimspaceweaverSimulations","getSimspaceweaverSimulationsOutput"], () => require("./getSimspaceweaverSimulations"));

export { GetSnsTopicArgs, GetSnsTopicResult, GetSnsTopicOutputArgs } from "./getSnsTopic";
export const getSnsTopic: typeof import("./getSnsTopic").getSnsTopic = null as any;
export const getSnsTopicOutput: typeof import("./getSnsTopic").getSnsTopicOutput = null as any;
utilities.lazyLoad(exports, ["getSnsTopic","getSnsTopicOutput"], () => require("./getSnsTopic"));

export { GetSnsTopicInlinePolicyArgs, GetSnsTopicInlinePolicyResult, GetSnsTopicInlinePolicyOutputArgs } from "./getSnsTopicInlinePolicy";
export const getSnsTopicInlinePolicy: typeof import("./getSnsTopicInlinePolicy").getSnsTopicInlinePolicy = null as any;
export const getSnsTopicInlinePolicyOutput: typeof import("./getSnsTopicInlinePolicy").getSnsTopicInlinePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSnsTopicInlinePolicy","getSnsTopicInlinePolicyOutput"], () => require("./getSnsTopicInlinePolicy"));

export { GetSnsTopicsResult } from "./getSnsTopics";
export const getSnsTopics: typeof import("./getSnsTopics").getSnsTopics = null as any;
export const getSnsTopicsOutput: typeof import("./getSnsTopics").getSnsTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getSnsTopics","getSnsTopicsOutput"], () => require("./getSnsTopics"));

export { GetSqsQueueArgs, GetSqsQueueResult, GetSqsQueueOutputArgs } from "./getSqsQueue";
export const getSqsQueue: typeof import("./getSqsQueue").getSqsQueue = null as any;
export const getSqsQueueOutput: typeof import("./getSqsQueue").getSqsQueueOutput = null as any;
utilities.lazyLoad(exports, ["getSqsQueue","getSqsQueueOutput"], () => require("./getSqsQueue"));

export { GetSqsQueueInlinePolicyArgs, GetSqsQueueInlinePolicyResult, GetSqsQueueInlinePolicyOutputArgs } from "./getSqsQueueInlinePolicy";
export const getSqsQueueInlinePolicy: typeof import("./getSqsQueueInlinePolicy").getSqsQueueInlinePolicy = null as any;
export const getSqsQueueInlinePolicyOutput: typeof import("./getSqsQueueInlinePolicy").getSqsQueueInlinePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSqsQueueInlinePolicy","getSqsQueueInlinePolicyOutput"], () => require("./getSqsQueueInlinePolicy"));

export { GetSqsQueuesResult } from "./getSqsQueues";
export const getSqsQueues: typeof import("./getSqsQueues").getSqsQueues = null as any;
export const getSqsQueuesOutput: typeof import("./getSqsQueues").getSqsQueuesOutput = null as any;
utilities.lazyLoad(exports, ["getSqsQueues","getSqsQueuesOutput"], () => require("./getSqsQueues"));

export { GetSsmAssociationArgs, GetSsmAssociationResult, GetSsmAssociationOutputArgs } from "./getSsmAssociation";
export const getSsmAssociation: typeof import("./getSsmAssociation").getSsmAssociation = null as any;
export const getSsmAssociationOutput: typeof import("./getSsmAssociation").getSsmAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getSsmAssociation","getSsmAssociationOutput"], () => require("./getSsmAssociation"));

export { GetSsmAssociationsResult } from "./getSsmAssociations";
export const getSsmAssociations: typeof import("./getSsmAssociations").getSsmAssociations = null as any;
export const getSsmAssociationsOutput: typeof import("./getSsmAssociations").getSsmAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getSsmAssociations","getSsmAssociationsOutput"], () => require("./getSsmAssociations"));

export { GetSsmDocumentArgs, GetSsmDocumentResult, GetSsmDocumentOutputArgs } from "./getSsmDocument";
export const getSsmDocument: typeof import("./getSsmDocument").getSsmDocument = null as any;
export const getSsmDocumentOutput: typeof import("./getSsmDocument").getSsmDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getSsmDocument","getSsmDocumentOutput"], () => require("./getSsmDocument"));

export { GetSsmDocumentsResult } from "./getSsmDocuments";
export const getSsmDocuments: typeof import("./getSsmDocuments").getSsmDocuments = null as any;
export const getSsmDocumentsOutput: typeof import("./getSsmDocuments").getSsmDocumentsOutput = null as any;
utilities.lazyLoad(exports, ["getSsmDocuments","getSsmDocumentsOutput"], () => require("./getSsmDocuments"));

export { GetSsmParameterArgs, GetSsmParameterResult, GetSsmParameterOutputArgs } from "./getSsmParameter";
export const getSsmParameter: typeof import("./getSsmParameter").getSsmParameter = null as any;
export const getSsmParameterOutput: typeof import("./getSsmParameter").getSsmParameterOutput = null as any;
utilities.lazyLoad(exports, ["getSsmParameter","getSsmParameterOutput"], () => require("./getSsmParameter"));

export { GetSsmParametersResult } from "./getSsmParameters";
export const getSsmParameters: typeof import("./getSsmParameters").getSsmParameters = null as any;
export const getSsmParametersOutput: typeof import("./getSsmParameters").getSsmParametersOutput = null as any;
utilities.lazyLoad(exports, ["getSsmParameters","getSsmParametersOutput"], () => require("./getSsmParameters"));

export { GetSsmPatchBaselineArgs, GetSsmPatchBaselineResult, GetSsmPatchBaselineOutputArgs } from "./getSsmPatchBaseline";
export const getSsmPatchBaseline: typeof import("./getSsmPatchBaseline").getSsmPatchBaseline = null as any;
export const getSsmPatchBaselineOutput: typeof import("./getSsmPatchBaseline").getSsmPatchBaselineOutput = null as any;
utilities.lazyLoad(exports, ["getSsmPatchBaseline","getSsmPatchBaselineOutput"], () => require("./getSsmPatchBaseline"));

export { GetSsmPatchBaselinesResult } from "./getSsmPatchBaselines";
export const getSsmPatchBaselines: typeof import("./getSsmPatchBaselines").getSsmPatchBaselines = null as any;
export const getSsmPatchBaselinesOutput: typeof import("./getSsmPatchBaselines").getSsmPatchBaselinesOutput = null as any;
utilities.lazyLoad(exports, ["getSsmPatchBaselines","getSsmPatchBaselinesOutput"], () => require("./getSsmPatchBaselines"));

export { GetSsmResourceDataSyncArgs, GetSsmResourceDataSyncResult, GetSsmResourceDataSyncOutputArgs } from "./getSsmResourceDataSync";
export const getSsmResourceDataSync: typeof import("./getSsmResourceDataSync").getSsmResourceDataSync = null as any;
export const getSsmResourceDataSyncOutput: typeof import("./getSsmResourceDataSync").getSsmResourceDataSyncOutput = null as any;
utilities.lazyLoad(exports, ["getSsmResourceDataSync","getSsmResourceDataSyncOutput"], () => require("./getSsmResourceDataSync"));

export { GetSsmResourceDataSyncsResult } from "./getSsmResourceDataSyncs";
export const getSsmResourceDataSyncs: typeof import("./getSsmResourceDataSyncs").getSsmResourceDataSyncs = null as any;
export const getSsmResourceDataSyncsOutput: typeof import("./getSsmResourceDataSyncs").getSsmResourceDataSyncsOutput = null as any;
utilities.lazyLoad(exports, ["getSsmResourceDataSyncs","getSsmResourceDataSyncsOutput"], () => require("./getSsmResourceDataSyncs"));

export { GetSsmResourcePoliciesResult } from "./getSsmResourcePolicies";
export const getSsmResourcePolicies: typeof import("./getSsmResourcePolicies").getSsmResourcePolicies = null as any;
export const getSsmResourcePoliciesOutput: typeof import("./getSsmResourcePolicies").getSsmResourcePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getSsmResourcePolicies","getSsmResourcePoliciesOutput"], () => require("./getSsmResourcePolicies"));

export { GetSsmResourcePolicyArgs, GetSsmResourcePolicyResult, GetSsmResourcePolicyOutputArgs } from "./getSsmResourcePolicy";
export const getSsmResourcePolicy: typeof import("./getSsmResourcePolicy").getSsmResourcePolicy = null as any;
export const getSsmResourcePolicyOutput: typeof import("./getSsmResourcePolicy").getSsmResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSsmResourcePolicy","getSsmResourcePolicyOutput"], () => require("./getSsmResourcePolicy"));

export { GetSsmcontactsContactArgs, GetSsmcontactsContactResult, GetSsmcontactsContactOutputArgs } from "./getSsmcontactsContact";
export const getSsmcontactsContact: typeof import("./getSsmcontactsContact").getSsmcontactsContact = null as any;
export const getSsmcontactsContactOutput: typeof import("./getSsmcontactsContact").getSsmcontactsContactOutput = null as any;
utilities.lazyLoad(exports, ["getSsmcontactsContact","getSsmcontactsContactOutput"], () => require("./getSsmcontactsContact"));

export { GetSsmcontactsContactChannelArgs, GetSsmcontactsContactChannelResult, GetSsmcontactsContactChannelOutputArgs } from "./getSsmcontactsContactChannel";
export const getSsmcontactsContactChannel: typeof import("./getSsmcontactsContactChannel").getSsmcontactsContactChannel = null as any;
export const getSsmcontactsContactChannelOutput: typeof import("./getSsmcontactsContactChannel").getSsmcontactsContactChannelOutput = null as any;
utilities.lazyLoad(exports, ["getSsmcontactsContactChannel","getSsmcontactsContactChannelOutput"], () => require("./getSsmcontactsContactChannel"));

export { GetSsmcontactsContactChannelsResult } from "./getSsmcontactsContactChannels";
export const getSsmcontactsContactChannels: typeof import("./getSsmcontactsContactChannels").getSsmcontactsContactChannels = null as any;
export const getSsmcontactsContactChannelsOutput: typeof import("./getSsmcontactsContactChannels").getSsmcontactsContactChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getSsmcontactsContactChannels","getSsmcontactsContactChannelsOutput"], () => require("./getSsmcontactsContactChannels"));

export { GetSsmcontactsContactsResult } from "./getSsmcontactsContacts";
export const getSsmcontactsContacts: typeof import("./getSsmcontactsContacts").getSsmcontactsContacts = null as any;
export const getSsmcontactsContactsOutput: typeof import("./getSsmcontactsContacts").getSsmcontactsContactsOutput = null as any;
utilities.lazyLoad(exports, ["getSsmcontactsContacts","getSsmcontactsContactsOutput"], () => require("./getSsmcontactsContacts"));

export { GetSsmcontactsPlanArgs, GetSsmcontactsPlanResult, GetSsmcontactsPlanOutputArgs } from "./getSsmcontactsPlan";
export const getSsmcontactsPlan: typeof import("./getSsmcontactsPlan").getSsmcontactsPlan = null as any;
export const getSsmcontactsPlanOutput: typeof import("./getSsmcontactsPlan").getSsmcontactsPlanOutput = null as any;
utilities.lazyLoad(exports, ["getSsmcontactsPlan","getSsmcontactsPlanOutput"], () => require("./getSsmcontactsPlan"));

export { GetSsmcontactsRotationArgs, GetSsmcontactsRotationResult, GetSsmcontactsRotationOutputArgs } from "./getSsmcontactsRotation";
export const getSsmcontactsRotation: typeof import("./getSsmcontactsRotation").getSsmcontactsRotation = null as any;
export const getSsmcontactsRotationOutput: typeof import("./getSsmcontactsRotation").getSsmcontactsRotationOutput = null as any;
utilities.lazyLoad(exports, ["getSsmcontactsRotation","getSsmcontactsRotationOutput"], () => require("./getSsmcontactsRotation"));

export { GetSsmcontactsRotationsResult } from "./getSsmcontactsRotations";
export const getSsmcontactsRotations: typeof import("./getSsmcontactsRotations").getSsmcontactsRotations = null as any;
export const getSsmcontactsRotationsOutput: typeof import("./getSsmcontactsRotations").getSsmcontactsRotationsOutput = null as any;
utilities.lazyLoad(exports, ["getSsmcontactsRotations","getSsmcontactsRotationsOutput"], () => require("./getSsmcontactsRotations"));

export { GetSsmincidentsReplicationSetArgs, GetSsmincidentsReplicationSetResult, GetSsmincidentsReplicationSetOutputArgs } from "./getSsmincidentsReplicationSet";
export const getSsmincidentsReplicationSet: typeof import("./getSsmincidentsReplicationSet").getSsmincidentsReplicationSet = null as any;
export const getSsmincidentsReplicationSetOutput: typeof import("./getSsmincidentsReplicationSet").getSsmincidentsReplicationSetOutput = null as any;
utilities.lazyLoad(exports, ["getSsmincidentsReplicationSet","getSsmincidentsReplicationSetOutput"], () => require("./getSsmincidentsReplicationSet"));

export { GetSsmincidentsReplicationSetsResult } from "./getSsmincidentsReplicationSets";
export const getSsmincidentsReplicationSets: typeof import("./getSsmincidentsReplicationSets").getSsmincidentsReplicationSets = null as any;
export const getSsmincidentsReplicationSetsOutput: typeof import("./getSsmincidentsReplicationSets").getSsmincidentsReplicationSetsOutput = null as any;
utilities.lazyLoad(exports, ["getSsmincidentsReplicationSets","getSsmincidentsReplicationSetsOutput"], () => require("./getSsmincidentsReplicationSets"));

export { GetSsmincidentsResponsePlanArgs, GetSsmincidentsResponsePlanResult, GetSsmincidentsResponsePlanOutputArgs } from "./getSsmincidentsResponsePlan";
export const getSsmincidentsResponsePlan: typeof import("./getSsmincidentsResponsePlan").getSsmincidentsResponsePlan = null as any;
export const getSsmincidentsResponsePlanOutput: typeof import("./getSsmincidentsResponsePlan").getSsmincidentsResponsePlanOutput = null as any;
utilities.lazyLoad(exports, ["getSsmincidentsResponsePlan","getSsmincidentsResponsePlanOutput"], () => require("./getSsmincidentsResponsePlan"));

export { GetSsmincidentsResponsePlansResult } from "./getSsmincidentsResponsePlans";
export const getSsmincidentsResponsePlans: typeof import("./getSsmincidentsResponsePlans").getSsmincidentsResponsePlans = null as any;
export const getSsmincidentsResponsePlansOutput: typeof import("./getSsmincidentsResponsePlans").getSsmincidentsResponsePlansOutput = null as any;
utilities.lazyLoad(exports, ["getSsmincidentsResponsePlans","getSsmincidentsResponsePlansOutput"], () => require("./getSsmincidentsResponsePlans"));

export { GetSsmquicksetupConfigurationManagerArgs, GetSsmquicksetupConfigurationManagerResult, GetSsmquicksetupConfigurationManagerOutputArgs } from "./getSsmquicksetupConfigurationManager";
export const getSsmquicksetupConfigurationManager: typeof import("./getSsmquicksetupConfigurationManager").getSsmquicksetupConfigurationManager = null as any;
export const getSsmquicksetupConfigurationManagerOutput: typeof import("./getSsmquicksetupConfigurationManager").getSsmquicksetupConfigurationManagerOutput = null as any;
utilities.lazyLoad(exports, ["getSsmquicksetupConfigurationManager","getSsmquicksetupConfigurationManagerOutput"], () => require("./getSsmquicksetupConfigurationManager"));

export { GetSsmquicksetupConfigurationManagersResult } from "./getSsmquicksetupConfigurationManagers";
export const getSsmquicksetupConfigurationManagers: typeof import("./getSsmquicksetupConfigurationManagers").getSsmquicksetupConfigurationManagers = null as any;
export const getSsmquicksetupConfigurationManagersOutput: typeof import("./getSsmquicksetupConfigurationManagers").getSsmquicksetupConfigurationManagersOutput = null as any;
utilities.lazyLoad(exports, ["getSsmquicksetupConfigurationManagers","getSsmquicksetupConfigurationManagersOutput"], () => require("./getSsmquicksetupConfigurationManagers"));

export { GetSsoApplicationArgs, GetSsoApplicationResult, GetSsoApplicationOutputArgs } from "./getSsoApplication";
export const getSsoApplication: typeof import("./getSsoApplication").getSsoApplication = null as any;
export const getSsoApplicationOutput: typeof import("./getSsoApplication").getSsoApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getSsoApplication","getSsoApplicationOutput"], () => require("./getSsoApplication"));

export { GetSsoApplicationAssignmentArgs, GetSsoApplicationAssignmentResult, GetSsoApplicationAssignmentOutputArgs } from "./getSsoApplicationAssignment";
export const getSsoApplicationAssignment: typeof import("./getSsoApplicationAssignment").getSsoApplicationAssignment = null as any;
export const getSsoApplicationAssignmentOutput: typeof import("./getSsoApplicationAssignment").getSsoApplicationAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getSsoApplicationAssignment","getSsoApplicationAssignmentOutput"], () => require("./getSsoApplicationAssignment"));

export { GetSsoApplicationAssignmentsResult } from "./getSsoApplicationAssignments";
export const getSsoApplicationAssignments: typeof import("./getSsoApplicationAssignments").getSsoApplicationAssignments = null as any;
export const getSsoApplicationAssignmentsOutput: typeof import("./getSsoApplicationAssignments").getSsoApplicationAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getSsoApplicationAssignments","getSsoApplicationAssignmentsOutput"], () => require("./getSsoApplicationAssignments"));

export { GetSsoAssignmentArgs, GetSsoAssignmentResult, GetSsoAssignmentOutputArgs } from "./getSsoAssignment";
export const getSsoAssignment: typeof import("./getSsoAssignment").getSsoAssignment = null as any;
export const getSsoAssignmentOutput: typeof import("./getSsoAssignment").getSsoAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getSsoAssignment","getSsoAssignmentOutput"], () => require("./getSsoAssignment"));

export { GetSsoAssignmentsResult } from "./getSsoAssignments";
export const getSsoAssignments: typeof import("./getSsoAssignments").getSsoAssignments = null as any;
export const getSsoAssignmentsOutput: typeof import("./getSsoAssignments").getSsoAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getSsoAssignments","getSsoAssignmentsOutput"], () => require("./getSsoAssignments"));

export { GetSsoInstanceArgs, GetSsoInstanceResult, GetSsoInstanceOutputArgs } from "./getSsoInstance";
export const getSsoInstance: typeof import("./getSsoInstance").getSsoInstance = null as any;
export const getSsoInstanceOutput: typeof import("./getSsoInstance").getSsoInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSsoInstance","getSsoInstanceOutput"], () => require("./getSsoInstance"));

export { GetSsoInstanceAccessControlAttributeConfigurationArgs, GetSsoInstanceAccessControlAttributeConfigurationResult, GetSsoInstanceAccessControlAttributeConfigurationOutputArgs } from "./getSsoInstanceAccessControlAttributeConfiguration";
export const getSsoInstanceAccessControlAttributeConfiguration: typeof import("./getSsoInstanceAccessControlAttributeConfiguration").getSsoInstanceAccessControlAttributeConfiguration = null as any;
export const getSsoInstanceAccessControlAttributeConfigurationOutput: typeof import("./getSsoInstanceAccessControlAttributeConfiguration").getSsoInstanceAccessControlAttributeConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getSsoInstanceAccessControlAttributeConfiguration","getSsoInstanceAccessControlAttributeConfigurationOutput"], () => require("./getSsoInstanceAccessControlAttributeConfiguration"));

export { GetSsoInstanceAccessControlAttributeConfigurationsResult } from "./getSsoInstanceAccessControlAttributeConfigurations";
export const getSsoInstanceAccessControlAttributeConfigurations: typeof import("./getSsoInstanceAccessControlAttributeConfigurations").getSsoInstanceAccessControlAttributeConfigurations = null as any;
export const getSsoInstanceAccessControlAttributeConfigurationsOutput: typeof import("./getSsoInstanceAccessControlAttributeConfigurations").getSsoInstanceAccessControlAttributeConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getSsoInstanceAccessControlAttributeConfigurations","getSsoInstanceAccessControlAttributeConfigurationsOutput"], () => require("./getSsoInstanceAccessControlAttributeConfigurations"));

export { GetSsoInstancesResult } from "./getSsoInstances";
export const getSsoInstances: typeof import("./getSsoInstances").getSsoInstances = null as any;
export const getSsoInstancesOutput: typeof import("./getSsoInstances").getSsoInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getSsoInstances","getSsoInstancesOutput"], () => require("./getSsoInstances"));

export { GetSsoPermissionSetArgs, GetSsoPermissionSetResult, GetSsoPermissionSetOutputArgs } from "./getSsoPermissionSet";
export const getSsoPermissionSet: typeof import("./getSsoPermissionSet").getSsoPermissionSet = null as any;
export const getSsoPermissionSetOutput: typeof import("./getSsoPermissionSet").getSsoPermissionSetOutput = null as any;
utilities.lazyLoad(exports, ["getSsoPermissionSet","getSsoPermissionSetOutput"], () => require("./getSsoPermissionSet"));

export { GetSsoPermissionSetsResult } from "./getSsoPermissionSets";
export const getSsoPermissionSets: typeof import("./getSsoPermissionSets").getSsoPermissionSets = null as any;
export const getSsoPermissionSetsOutput: typeof import("./getSsoPermissionSets").getSsoPermissionSetsOutput = null as any;
utilities.lazyLoad(exports, ["getSsoPermissionSets","getSsoPermissionSetsOutput"], () => require("./getSsoPermissionSets"));

export { GetStepfunctionsActivitiesResult } from "./getStepfunctionsActivities";
export const getStepfunctionsActivities: typeof import("./getStepfunctionsActivities").getStepfunctionsActivities = null as any;
export const getStepfunctionsActivitiesOutput: typeof import("./getStepfunctionsActivities").getStepfunctionsActivitiesOutput = null as any;
utilities.lazyLoad(exports, ["getStepfunctionsActivities","getStepfunctionsActivitiesOutput"], () => require("./getStepfunctionsActivities"));

export { GetStepfunctionsActivityArgs, GetStepfunctionsActivityResult, GetStepfunctionsActivityOutputArgs } from "./getStepfunctionsActivity";
export const getStepfunctionsActivity: typeof import("./getStepfunctionsActivity").getStepfunctionsActivity = null as any;
export const getStepfunctionsActivityOutput: typeof import("./getStepfunctionsActivity").getStepfunctionsActivityOutput = null as any;
utilities.lazyLoad(exports, ["getStepfunctionsActivity","getStepfunctionsActivityOutput"], () => require("./getStepfunctionsActivity"));

export { GetStepfunctionsStateMachineArgs, GetStepfunctionsStateMachineResult, GetStepfunctionsStateMachineOutputArgs } from "./getStepfunctionsStateMachine";
export const getStepfunctionsStateMachine: typeof import("./getStepfunctionsStateMachine").getStepfunctionsStateMachine = null as any;
export const getStepfunctionsStateMachineOutput: typeof import("./getStepfunctionsStateMachine").getStepfunctionsStateMachineOutput = null as any;
utilities.lazyLoad(exports, ["getStepfunctionsStateMachine","getStepfunctionsStateMachineOutput"], () => require("./getStepfunctionsStateMachine"));

export { GetStepfunctionsStateMachineAliasArgs, GetStepfunctionsStateMachineAliasResult, GetStepfunctionsStateMachineAliasOutputArgs } from "./getStepfunctionsStateMachineAlias";
export const getStepfunctionsStateMachineAlias: typeof import("./getStepfunctionsStateMachineAlias").getStepfunctionsStateMachineAlias = null as any;
export const getStepfunctionsStateMachineAliasOutput: typeof import("./getStepfunctionsStateMachineAlias").getStepfunctionsStateMachineAliasOutput = null as any;
utilities.lazyLoad(exports, ["getStepfunctionsStateMachineAlias","getStepfunctionsStateMachineAliasOutput"], () => require("./getStepfunctionsStateMachineAlias"));

export { GetStepfunctionsStateMachineVersionArgs, GetStepfunctionsStateMachineVersionResult, GetStepfunctionsStateMachineVersionOutputArgs } from "./getStepfunctionsStateMachineVersion";
export const getStepfunctionsStateMachineVersion: typeof import("./getStepfunctionsStateMachineVersion").getStepfunctionsStateMachineVersion = null as any;
export const getStepfunctionsStateMachineVersionOutput: typeof import("./getStepfunctionsStateMachineVersion").getStepfunctionsStateMachineVersionOutput = null as any;
utilities.lazyLoad(exports, ["getStepfunctionsStateMachineVersion","getStepfunctionsStateMachineVersionOutput"], () => require("./getStepfunctionsStateMachineVersion"));

export { GetStepfunctionsStateMachinesResult } from "./getStepfunctionsStateMachines";
export const getStepfunctionsStateMachines: typeof import("./getStepfunctionsStateMachines").getStepfunctionsStateMachines = null as any;
export const getStepfunctionsStateMachinesOutput: typeof import("./getStepfunctionsStateMachines").getStepfunctionsStateMachinesOutput = null as any;
utilities.lazyLoad(exports, ["getStepfunctionsStateMachines","getStepfunctionsStateMachinesOutput"], () => require("./getStepfunctionsStateMachines"));

export { GetSupportappAccountAliasArgs, GetSupportappAccountAliasResult, GetSupportappAccountAliasOutputArgs } from "./getSupportappAccountAlias";
export const getSupportappAccountAlias: typeof import("./getSupportappAccountAlias").getSupportappAccountAlias = null as any;
export const getSupportappAccountAliasOutput: typeof import("./getSupportappAccountAlias").getSupportappAccountAliasOutput = null as any;
utilities.lazyLoad(exports, ["getSupportappAccountAlias","getSupportappAccountAliasOutput"], () => require("./getSupportappAccountAlias"));

export { GetSupportappAccountAliasesResult } from "./getSupportappAccountAliases";
export const getSupportappAccountAliases: typeof import("./getSupportappAccountAliases").getSupportappAccountAliases = null as any;
export const getSupportappAccountAliasesOutput: typeof import("./getSupportappAccountAliases").getSupportappAccountAliasesOutput = null as any;
utilities.lazyLoad(exports, ["getSupportappAccountAliases","getSupportappAccountAliasesOutput"], () => require("./getSupportappAccountAliases"));

export { GetSupportappSlackChannelConfigurationArgs, GetSupportappSlackChannelConfigurationResult, GetSupportappSlackChannelConfigurationOutputArgs } from "./getSupportappSlackChannelConfiguration";
export const getSupportappSlackChannelConfiguration: typeof import("./getSupportappSlackChannelConfiguration").getSupportappSlackChannelConfiguration = null as any;
export const getSupportappSlackChannelConfigurationOutput: typeof import("./getSupportappSlackChannelConfiguration").getSupportappSlackChannelConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getSupportappSlackChannelConfiguration","getSupportappSlackChannelConfigurationOutput"], () => require("./getSupportappSlackChannelConfiguration"));

export { GetSupportappSlackChannelConfigurationsResult } from "./getSupportappSlackChannelConfigurations";
export const getSupportappSlackChannelConfigurations: typeof import("./getSupportappSlackChannelConfigurations").getSupportappSlackChannelConfigurations = null as any;
export const getSupportappSlackChannelConfigurationsOutput: typeof import("./getSupportappSlackChannelConfigurations").getSupportappSlackChannelConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getSupportappSlackChannelConfigurations","getSupportappSlackChannelConfigurationsOutput"], () => require("./getSupportappSlackChannelConfigurations"));

export { GetSupportappSlackWorkspaceConfigurationArgs, GetSupportappSlackWorkspaceConfigurationResult, GetSupportappSlackWorkspaceConfigurationOutputArgs } from "./getSupportappSlackWorkspaceConfiguration";
export const getSupportappSlackWorkspaceConfiguration: typeof import("./getSupportappSlackWorkspaceConfiguration").getSupportappSlackWorkspaceConfiguration = null as any;
export const getSupportappSlackWorkspaceConfigurationOutput: typeof import("./getSupportappSlackWorkspaceConfiguration").getSupportappSlackWorkspaceConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getSupportappSlackWorkspaceConfiguration","getSupportappSlackWorkspaceConfigurationOutput"], () => require("./getSupportappSlackWorkspaceConfiguration"));

export { GetSupportappSlackWorkspaceConfigurationsResult } from "./getSupportappSlackWorkspaceConfigurations";
export const getSupportappSlackWorkspaceConfigurations: typeof import("./getSupportappSlackWorkspaceConfigurations").getSupportappSlackWorkspaceConfigurations = null as any;
export const getSupportappSlackWorkspaceConfigurationsOutput: typeof import("./getSupportappSlackWorkspaceConfigurations").getSupportappSlackWorkspaceConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getSupportappSlackWorkspaceConfigurations","getSupportappSlackWorkspaceConfigurationsOutput"], () => require("./getSupportappSlackWorkspaceConfigurations"));

export { GetSyntheticsCanariesResult } from "./getSyntheticsCanaries";
export const getSyntheticsCanaries: typeof import("./getSyntheticsCanaries").getSyntheticsCanaries = null as any;
export const getSyntheticsCanariesOutput: typeof import("./getSyntheticsCanaries").getSyntheticsCanariesOutput = null as any;
utilities.lazyLoad(exports, ["getSyntheticsCanaries","getSyntheticsCanariesOutput"], () => require("./getSyntheticsCanaries"));

export { GetSyntheticsCanaryArgs, GetSyntheticsCanaryResult, GetSyntheticsCanaryOutputArgs } from "./getSyntheticsCanary";
export const getSyntheticsCanary: typeof import("./getSyntheticsCanary").getSyntheticsCanary = null as any;
export const getSyntheticsCanaryOutput: typeof import("./getSyntheticsCanary").getSyntheticsCanaryOutput = null as any;
utilities.lazyLoad(exports, ["getSyntheticsCanary","getSyntheticsCanaryOutput"], () => require("./getSyntheticsCanary"));

export { GetSyntheticsGroupArgs, GetSyntheticsGroupResult, GetSyntheticsGroupOutputArgs } from "./getSyntheticsGroup";
export const getSyntheticsGroup: typeof import("./getSyntheticsGroup").getSyntheticsGroup = null as any;
export const getSyntheticsGroupOutput: typeof import("./getSyntheticsGroup").getSyntheticsGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSyntheticsGroup","getSyntheticsGroupOutput"], () => require("./getSyntheticsGroup"));

export { GetSyntheticsGroupsResult } from "./getSyntheticsGroups";
export const getSyntheticsGroups: typeof import("./getSyntheticsGroups").getSyntheticsGroups = null as any;
export const getSyntheticsGroupsOutput: typeof import("./getSyntheticsGroups").getSyntheticsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSyntheticsGroups","getSyntheticsGroupsOutput"], () => require("./getSyntheticsGroups"));

export { GetSystemsmanagersapApplicationArgs, GetSystemsmanagersapApplicationResult, GetSystemsmanagersapApplicationOutputArgs } from "./getSystemsmanagersapApplication";
export const getSystemsmanagersapApplication: typeof import("./getSystemsmanagersapApplication").getSystemsmanagersapApplication = null as any;
export const getSystemsmanagersapApplicationOutput: typeof import("./getSystemsmanagersapApplication").getSystemsmanagersapApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getSystemsmanagersapApplication","getSystemsmanagersapApplicationOutput"], () => require("./getSystemsmanagersapApplication"));

export { GetSystemsmanagersapApplicationsResult } from "./getSystemsmanagersapApplications";
export const getSystemsmanagersapApplications: typeof import("./getSystemsmanagersapApplications").getSystemsmanagersapApplications = null as any;
export const getSystemsmanagersapApplicationsOutput: typeof import("./getSystemsmanagersapApplications").getSystemsmanagersapApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getSystemsmanagersapApplications","getSystemsmanagersapApplicationsOutput"], () => require("./getSystemsmanagersapApplications"));

export { GetTimestreamDatabaseArgs, GetTimestreamDatabaseResult, GetTimestreamDatabaseOutputArgs } from "./getTimestreamDatabase";
export const getTimestreamDatabase: typeof import("./getTimestreamDatabase").getTimestreamDatabase = null as any;
export const getTimestreamDatabaseOutput: typeof import("./getTimestreamDatabase").getTimestreamDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getTimestreamDatabase","getTimestreamDatabaseOutput"], () => require("./getTimestreamDatabase"));

export { GetTimestreamDatabasesResult } from "./getTimestreamDatabases";
export const getTimestreamDatabases: typeof import("./getTimestreamDatabases").getTimestreamDatabases = null as any;
export const getTimestreamDatabasesOutput: typeof import("./getTimestreamDatabases").getTimestreamDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getTimestreamDatabases","getTimestreamDatabasesOutput"], () => require("./getTimestreamDatabases"));

export { GetTimestreamInfluxDbInstanceArgs, GetTimestreamInfluxDbInstanceResult, GetTimestreamInfluxDbInstanceOutputArgs } from "./getTimestreamInfluxDbInstance";
export const getTimestreamInfluxDbInstance: typeof import("./getTimestreamInfluxDbInstance").getTimestreamInfluxDbInstance = null as any;
export const getTimestreamInfluxDbInstanceOutput: typeof import("./getTimestreamInfluxDbInstance").getTimestreamInfluxDbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getTimestreamInfluxDbInstance","getTimestreamInfluxDbInstanceOutput"], () => require("./getTimestreamInfluxDbInstance"));

export { GetTimestreamInfluxDbInstancesResult } from "./getTimestreamInfluxDbInstances";
export const getTimestreamInfluxDbInstances: typeof import("./getTimestreamInfluxDbInstances").getTimestreamInfluxDbInstances = null as any;
export const getTimestreamInfluxDbInstancesOutput: typeof import("./getTimestreamInfluxDbInstances").getTimestreamInfluxDbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getTimestreamInfluxDbInstances","getTimestreamInfluxDbInstancesOutput"], () => require("./getTimestreamInfluxDbInstances"));

export { GetTimestreamScheduledQueriesResult } from "./getTimestreamScheduledQueries";
export const getTimestreamScheduledQueries: typeof import("./getTimestreamScheduledQueries").getTimestreamScheduledQueries = null as any;
export const getTimestreamScheduledQueriesOutput: typeof import("./getTimestreamScheduledQueries").getTimestreamScheduledQueriesOutput = null as any;
utilities.lazyLoad(exports, ["getTimestreamScheduledQueries","getTimestreamScheduledQueriesOutput"], () => require("./getTimestreamScheduledQueries"));

export { GetTimestreamScheduledQueryArgs, GetTimestreamScheduledQueryResult, GetTimestreamScheduledQueryOutputArgs } from "./getTimestreamScheduledQuery";
export const getTimestreamScheduledQuery: typeof import("./getTimestreamScheduledQuery").getTimestreamScheduledQuery = null as any;
export const getTimestreamScheduledQueryOutput: typeof import("./getTimestreamScheduledQuery").getTimestreamScheduledQueryOutput = null as any;
utilities.lazyLoad(exports, ["getTimestreamScheduledQuery","getTimestreamScheduledQueryOutput"], () => require("./getTimestreamScheduledQuery"));

export { GetTimestreamTableArgs, GetTimestreamTableResult, GetTimestreamTableOutputArgs } from "./getTimestreamTable";
export const getTimestreamTable: typeof import("./getTimestreamTable").getTimestreamTable = null as any;
export const getTimestreamTableOutput: typeof import("./getTimestreamTable").getTimestreamTableOutput = null as any;
utilities.lazyLoad(exports, ["getTimestreamTable","getTimestreamTableOutput"], () => require("./getTimestreamTable"));

export { GetTimestreamTablesResult } from "./getTimestreamTables";
export const getTimestreamTables: typeof import("./getTimestreamTables").getTimestreamTables = null as any;
export const getTimestreamTablesOutput: typeof import("./getTimestreamTables").getTimestreamTablesOutput = null as any;
utilities.lazyLoad(exports, ["getTimestreamTables","getTimestreamTablesOutput"], () => require("./getTimestreamTables"));

export { GetTransferAgreementArgs, GetTransferAgreementResult, GetTransferAgreementOutputArgs } from "./getTransferAgreement";
export const getTransferAgreement: typeof import("./getTransferAgreement").getTransferAgreement = null as any;
export const getTransferAgreementOutput: typeof import("./getTransferAgreement").getTransferAgreementOutput = null as any;
utilities.lazyLoad(exports, ["getTransferAgreement","getTransferAgreementOutput"], () => require("./getTransferAgreement"));

export { GetTransferCertificateArgs, GetTransferCertificateResult, GetTransferCertificateOutputArgs } from "./getTransferCertificate";
export const getTransferCertificate: typeof import("./getTransferCertificate").getTransferCertificate = null as any;
export const getTransferCertificateOutput: typeof import("./getTransferCertificate").getTransferCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getTransferCertificate","getTransferCertificateOutput"], () => require("./getTransferCertificate"));

export { GetTransferCertificatesResult } from "./getTransferCertificates";
export const getTransferCertificates: typeof import("./getTransferCertificates").getTransferCertificates = null as any;
export const getTransferCertificatesOutput: typeof import("./getTransferCertificates").getTransferCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getTransferCertificates","getTransferCertificatesOutput"], () => require("./getTransferCertificates"));

export { GetTransferConnectorArgs, GetTransferConnectorResult, GetTransferConnectorOutputArgs } from "./getTransferConnector";
export const getTransferConnector: typeof import("./getTransferConnector").getTransferConnector = null as any;
export const getTransferConnectorOutput: typeof import("./getTransferConnector").getTransferConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getTransferConnector","getTransferConnectorOutput"], () => require("./getTransferConnector"));

export { GetTransferConnectorsResult } from "./getTransferConnectors";
export const getTransferConnectors: typeof import("./getTransferConnectors").getTransferConnectors = null as any;
export const getTransferConnectorsOutput: typeof import("./getTransferConnectors").getTransferConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getTransferConnectors","getTransferConnectorsOutput"], () => require("./getTransferConnectors"));

export { GetTransferProfileArgs, GetTransferProfileResult, GetTransferProfileOutputArgs } from "./getTransferProfile";
export const getTransferProfile: typeof import("./getTransferProfile").getTransferProfile = null as any;
export const getTransferProfileOutput: typeof import("./getTransferProfile").getTransferProfileOutput = null as any;
utilities.lazyLoad(exports, ["getTransferProfile","getTransferProfileOutput"], () => require("./getTransferProfile"));

export { GetTransferProfilesResult } from "./getTransferProfiles";
export const getTransferProfiles: typeof import("./getTransferProfiles").getTransferProfiles = null as any;
export const getTransferProfilesOutput: typeof import("./getTransferProfiles").getTransferProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getTransferProfiles","getTransferProfilesOutput"], () => require("./getTransferProfiles"));

export { GetTransferWorkflowArgs, GetTransferWorkflowResult, GetTransferWorkflowOutputArgs } from "./getTransferWorkflow";
export const getTransferWorkflow: typeof import("./getTransferWorkflow").getTransferWorkflow = null as any;
export const getTransferWorkflowOutput: typeof import("./getTransferWorkflow").getTransferWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getTransferWorkflow","getTransferWorkflowOutput"], () => require("./getTransferWorkflow"));

export { GetTransferWorkflowsResult } from "./getTransferWorkflows";
export const getTransferWorkflows: typeof import("./getTransferWorkflows").getTransferWorkflows = null as any;
export const getTransferWorkflowsOutput: typeof import("./getTransferWorkflows").getTransferWorkflowsOutput = null as any;
utilities.lazyLoad(exports, ["getTransferWorkflows","getTransferWorkflowsOutput"], () => require("./getTransferWorkflows"));

export { GetVerifiedpermissionsIdentitySourceArgs, GetVerifiedpermissionsIdentitySourceResult, GetVerifiedpermissionsIdentitySourceOutputArgs } from "./getVerifiedpermissionsIdentitySource";
export const getVerifiedpermissionsIdentitySource: typeof import("./getVerifiedpermissionsIdentitySource").getVerifiedpermissionsIdentitySource = null as any;
export const getVerifiedpermissionsIdentitySourceOutput: typeof import("./getVerifiedpermissionsIdentitySource").getVerifiedpermissionsIdentitySourceOutput = null as any;
utilities.lazyLoad(exports, ["getVerifiedpermissionsIdentitySource","getVerifiedpermissionsIdentitySourceOutput"], () => require("./getVerifiedpermissionsIdentitySource"));

export { GetVerifiedpermissionsPolicyArgs, GetVerifiedpermissionsPolicyResult, GetVerifiedpermissionsPolicyOutputArgs } from "./getVerifiedpermissionsPolicy";
export const getVerifiedpermissionsPolicy: typeof import("./getVerifiedpermissionsPolicy").getVerifiedpermissionsPolicy = null as any;
export const getVerifiedpermissionsPolicyOutput: typeof import("./getVerifiedpermissionsPolicy").getVerifiedpermissionsPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVerifiedpermissionsPolicy","getVerifiedpermissionsPolicyOutput"], () => require("./getVerifiedpermissionsPolicy"));

export { GetVerifiedpermissionsPolicyStoreArgs, GetVerifiedpermissionsPolicyStoreResult, GetVerifiedpermissionsPolicyStoreOutputArgs } from "./getVerifiedpermissionsPolicyStore";
export const getVerifiedpermissionsPolicyStore: typeof import("./getVerifiedpermissionsPolicyStore").getVerifiedpermissionsPolicyStore = null as any;
export const getVerifiedpermissionsPolicyStoreOutput: typeof import("./getVerifiedpermissionsPolicyStore").getVerifiedpermissionsPolicyStoreOutput = null as any;
utilities.lazyLoad(exports, ["getVerifiedpermissionsPolicyStore","getVerifiedpermissionsPolicyStoreOutput"], () => require("./getVerifiedpermissionsPolicyStore"));

export { GetVerifiedpermissionsPolicyStoresResult } from "./getVerifiedpermissionsPolicyStores";
export const getVerifiedpermissionsPolicyStores: typeof import("./getVerifiedpermissionsPolicyStores").getVerifiedpermissionsPolicyStores = null as any;
export const getVerifiedpermissionsPolicyStoresOutput: typeof import("./getVerifiedpermissionsPolicyStores").getVerifiedpermissionsPolicyStoresOutput = null as any;
utilities.lazyLoad(exports, ["getVerifiedpermissionsPolicyStores","getVerifiedpermissionsPolicyStoresOutput"], () => require("./getVerifiedpermissionsPolicyStores"));

export { GetVerifiedpermissionsPolicyTemplateArgs, GetVerifiedpermissionsPolicyTemplateResult, GetVerifiedpermissionsPolicyTemplateOutputArgs } from "./getVerifiedpermissionsPolicyTemplate";
export const getVerifiedpermissionsPolicyTemplate: typeof import("./getVerifiedpermissionsPolicyTemplate").getVerifiedpermissionsPolicyTemplate = null as any;
export const getVerifiedpermissionsPolicyTemplateOutput: typeof import("./getVerifiedpermissionsPolicyTemplate").getVerifiedpermissionsPolicyTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVerifiedpermissionsPolicyTemplate","getVerifiedpermissionsPolicyTemplateOutput"], () => require("./getVerifiedpermissionsPolicyTemplate"));

export { GetVoiceidDomainArgs, GetVoiceidDomainResult, GetVoiceidDomainOutputArgs } from "./getVoiceidDomain";
export const getVoiceidDomain: typeof import("./getVoiceidDomain").getVoiceidDomain = null as any;
export const getVoiceidDomainOutput: typeof import("./getVoiceidDomain").getVoiceidDomainOutput = null as any;
utilities.lazyLoad(exports, ["getVoiceidDomain","getVoiceidDomainOutput"], () => require("./getVoiceidDomain"));

export { GetVoiceidDomainsResult } from "./getVoiceidDomains";
export const getVoiceidDomains: typeof import("./getVoiceidDomains").getVoiceidDomains = null as any;
export const getVoiceidDomainsOutput: typeof import("./getVoiceidDomains").getVoiceidDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getVoiceidDomains","getVoiceidDomainsOutput"], () => require("./getVoiceidDomains"));

export { GetVpclatticeAccessLogSubscriptionArgs, GetVpclatticeAccessLogSubscriptionResult, GetVpclatticeAccessLogSubscriptionOutputArgs } from "./getVpclatticeAccessLogSubscription";
export const getVpclatticeAccessLogSubscription: typeof import("./getVpclatticeAccessLogSubscription").getVpclatticeAccessLogSubscription = null as any;
export const getVpclatticeAccessLogSubscriptionOutput: typeof import("./getVpclatticeAccessLogSubscription").getVpclatticeAccessLogSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeAccessLogSubscription","getVpclatticeAccessLogSubscriptionOutput"], () => require("./getVpclatticeAccessLogSubscription"));

export { GetVpclatticeAuthPolicyArgs, GetVpclatticeAuthPolicyResult, GetVpclatticeAuthPolicyOutputArgs } from "./getVpclatticeAuthPolicy";
export const getVpclatticeAuthPolicy: typeof import("./getVpclatticeAuthPolicy").getVpclatticeAuthPolicy = null as any;
export const getVpclatticeAuthPolicyOutput: typeof import("./getVpclatticeAuthPolicy").getVpclatticeAuthPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeAuthPolicy","getVpclatticeAuthPolicyOutput"], () => require("./getVpclatticeAuthPolicy"));

export { GetVpclatticeListenerArgs, GetVpclatticeListenerResult, GetVpclatticeListenerOutputArgs } from "./getVpclatticeListener";
export const getVpclatticeListener: typeof import("./getVpclatticeListener").getVpclatticeListener = null as any;
export const getVpclatticeListenerOutput: typeof import("./getVpclatticeListener").getVpclatticeListenerOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeListener","getVpclatticeListenerOutput"], () => require("./getVpclatticeListener"));

export { GetVpclatticeResourcePolicyArgs, GetVpclatticeResourcePolicyResult, GetVpclatticeResourcePolicyOutputArgs } from "./getVpclatticeResourcePolicy";
export const getVpclatticeResourcePolicy: typeof import("./getVpclatticeResourcePolicy").getVpclatticeResourcePolicy = null as any;
export const getVpclatticeResourcePolicyOutput: typeof import("./getVpclatticeResourcePolicy").getVpclatticeResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeResourcePolicy","getVpclatticeResourcePolicyOutput"], () => require("./getVpclatticeResourcePolicy"));

export { GetVpclatticeRuleArgs, GetVpclatticeRuleResult, GetVpclatticeRuleOutputArgs } from "./getVpclatticeRule";
export const getVpclatticeRule: typeof import("./getVpclatticeRule").getVpclatticeRule = null as any;
export const getVpclatticeRuleOutput: typeof import("./getVpclatticeRule").getVpclatticeRuleOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeRule","getVpclatticeRuleOutput"], () => require("./getVpclatticeRule"));

export { GetVpclatticeServiceArgs, GetVpclatticeServiceResult, GetVpclatticeServiceOutputArgs } from "./getVpclatticeService";
export const getVpclatticeService: typeof import("./getVpclatticeService").getVpclatticeService = null as any;
export const getVpclatticeServiceOutput: typeof import("./getVpclatticeService").getVpclatticeServiceOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeService","getVpclatticeServiceOutput"], () => require("./getVpclatticeService"));

export { GetVpclatticeServiceNetworkArgs, GetVpclatticeServiceNetworkResult, GetVpclatticeServiceNetworkOutputArgs } from "./getVpclatticeServiceNetwork";
export const getVpclatticeServiceNetwork: typeof import("./getVpclatticeServiceNetwork").getVpclatticeServiceNetwork = null as any;
export const getVpclatticeServiceNetworkOutput: typeof import("./getVpclatticeServiceNetwork").getVpclatticeServiceNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeServiceNetwork","getVpclatticeServiceNetworkOutput"], () => require("./getVpclatticeServiceNetwork"));

export { GetVpclatticeServiceNetworkServiceAssociationArgs, GetVpclatticeServiceNetworkServiceAssociationResult, GetVpclatticeServiceNetworkServiceAssociationOutputArgs } from "./getVpclatticeServiceNetworkServiceAssociation";
export const getVpclatticeServiceNetworkServiceAssociation: typeof import("./getVpclatticeServiceNetworkServiceAssociation").getVpclatticeServiceNetworkServiceAssociation = null as any;
export const getVpclatticeServiceNetworkServiceAssociationOutput: typeof import("./getVpclatticeServiceNetworkServiceAssociation").getVpclatticeServiceNetworkServiceAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeServiceNetworkServiceAssociation","getVpclatticeServiceNetworkServiceAssociationOutput"], () => require("./getVpclatticeServiceNetworkServiceAssociation"));

export { GetVpclatticeServiceNetworkServiceAssociationsResult } from "./getVpclatticeServiceNetworkServiceAssociations";
export const getVpclatticeServiceNetworkServiceAssociations: typeof import("./getVpclatticeServiceNetworkServiceAssociations").getVpclatticeServiceNetworkServiceAssociations = null as any;
export const getVpclatticeServiceNetworkServiceAssociationsOutput: typeof import("./getVpclatticeServiceNetworkServiceAssociations").getVpclatticeServiceNetworkServiceAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeServiceNetworkServiceAssociations","getVpclatticeServiceNetworkServiceAssociationsOutput"], () => require("./getVpclatticeServiceNetworkServiceAssociations"));

export { GetVpclatticeServiceNetworkVpcAssociationArgs, GetVpclatticeServiceNetworkVpcAssociationResult, GetVpclatticeServiceNetworkVpcAssociationOutputArgs } from "./getVpclatticeServiceNetworkVpcAssociation";
export const getVpclatticeServiceNetworkVpcAssociation: typeof import("./getVpclatticeServiceNetworkVpcAssociation").getVpclatticeServiceNetworkVpcAssociation = null as any;
export const getVpclatticeServiceNetworkVpcAssociationOutput: typeof import("./getVpclatticeServiceNetworkVpcAssociation").getVpclatticeServiceNetworkVpcAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeServiceNetworkVpcAssociation","getVpclatticeServiceNetworkVpcAssociationOutput"], () => require("./getVpclatticeServiceNetworkVpcAssociation"));

export { GetVpclatticeServiceNetworkVpcAssociationsResult } from "./getVpclatticeServiceNetworkVpcAssociations";
export const getVpclatticeServiceNetworkVpcAssociations: typeof import("./getVpclatticeServiceNetworkVpcAssociations").getVpclatticeServiceNetworkVpcAssociations = null as any;
export const getVpclatticeServiceNetworkVpcAssociationsOutput: typeof import("./getVpclatticeServiceNetworkVpcAssociations").getVpclatticeServiceNetworkVpcAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeServiceNetworkVpcAssociations","getVpclatticeServiceNetworkVpcAssociationsOutput"], () => require("./getVpclatticeServiceNetworkVpcAssociations"));

export { GetVpclatticeServiceNetworksResult } from "./getVpclatticeServiceNetworks";
export const getVpclatticeServiceNetworks: typeof import("./getVpclatticeServiceNetworks").getVpclatticeServiceNetworks = null as any;
export const getVpclatticeServiceNetworksOutput: typeof import("./getVpclatticeServiceNetworks").getVpclatticeServiceNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeServiceNetworks","getVpclatticeServiceNetworksOutput"], () => require("./getVpclatticeServiceNetworks"));

export { GetVpclatticeServicesResult } from "./getVpclatticeServices";
export const getVpclatticeServices: typeof import("./getVpclatticeServices").getVpclatticeServices = null as any;
export const getVpclatticeServicesOutput: typeof import("./getVpclatticeServices").getVpclatticeServicesOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeServices","getVpclatticeServicesOutput"], () => require("./getVpclatticeServices"));

export { GetVpclatticeTargetGroupsResult } from "./getVpclatticeTargetGroups";
export const getVpclatticeTargetGroups: typeof import("./getVpclatticeTargetGroups").getVpclatticeTargetGroups = null as any;
export const getVpclatticeTargetGroupsOutput: typeof import("./getVpclatticeTargetGroups").getVpclatticeTargetGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeTargetGroups","getVpclatticeTargetGroupsOutput"], () => require("./getVpclatticeTargetGroups"));

export { GetWafv2IpSetArgs, GetWafv2IpSetResult, GetWafv2IpSetOutputArgs } from "./getWafv2IpSet";
export const getWafv2IpSet: typeof import("./getWafv2IpSet").getWafv2IpSet = null as any;
export const getWafv2IpSetOutput: typeof import("./getWafv2IpSet").getWafv2IpSetOutput = null as any;
utilities.lazyLoad(exports, ["getWafv2IpSet","getWafv2IpSetOutput"], () => require("./getWafv2IpSet"));

export { GetWafv2LoggingConfigurationArgs, GetWafv2LoggingConfigurationResult, GetWafv2LoggingConfigurationOutputArgs } from "./getWafv2LoggingConfiguration";
export const getWafv2LoggingConfiguration: typeof import("./getWafv2LoggingConfiguration").getWafv2LoggingConfiguration = null as any;
export const getWafv2LoggingConfigurationOutput: typeof import("./getWafv2LoggingConfiguration").getWafv2LoggingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getWafv2LoggingConfiguration","getWafv2LoggingConfigurationOutput"], () => require("./getWafv2LoggingConfiguration"));

export { GetWafv2LoggingConfigurationsResult } from "./getWafv2LoggingConfigurations";
export const getWafv2LoggingConfigurations: typeof import("./getWafv2LoggingConfigurations").getWafv2LoggingConfigurations = null as any;
export const getWafv2LoggingConfigurationsOutput: typeof import("./getWafv2LoggingConfigurations").getWafv2LoggingConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getWafv2LoggingConfigurations","getWafv2LoggingConfigurationsOutput"], () => require("./getWafv2LoggingConfigurations"));

export { GetWafv2RegexPatternSetArgs, GetWafv2RegexPatternSetResult, GetWafv2RegexPatternSetOutputArgs } from "./getWafv2RegexPatternSet";
export const getWafv2RegexPatternSet: typeof import("./getWafv2RegexPatternSet").getWafv2RegexPatternSet = null as any;
export const getWafv2RegexPatternSetOutput: typeof import("./getWafv2RegexPatternSet").getWafv2RegexPatternSetOutput = null as any;
utilities.lazyLoad(exports, ["getWafv2RegexPatternSet","getWafv2RegexPatternSetOutput"], () => require("./getWafv2RegexPatternSet"));

export { GetWafv2WebAclAssociationArgs, GetWafv2WebAclAssociationResult, GetWafv2WebAclAssociationOutputArgs } from "./getWafv2WebAclAssociation";
export const getWafv2WebAclAssociation: typeof import("./getWafv2WebAclAssociation").getWafv2WebAclAssociation = null as any;
export const getWafv2WebAclAssociationOutput: typeof import("./getWafv2WebAclAssociation").getWafv2WebAclAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getWafv2WebAclAssociation","getWafv2WebAclAssociationOutput"], () => require("./getWafv2WebAclAssociation"));

export { GetWisdomAssistantArgs, GetWisdomAssistantResult, GetWisdomAssistantOutputArgs } from "./getWisdomAssistant";
export const getWisdomAssistant: typeof import("./getWisdomAssistant").getWisdomAssistant = null as any;
export const getWisdomAssistantOutput: typeof import("./getWisdomAssistant").getWisdomAssistantOutput = null as any;
utilities.lazyLoad(exports, ["getWisdomAssistant","getWisdomAssistantOutput"], () => require("./getWisdomAssistant"));

export { GetWisdomAssistantAssociationArgs, GetWisdomAssistantAssociationResult, GetWisdomAssistantAssociationOutputArgs } from "./getWisdomAssistantAssociation";
export const getWisdomAssistantAssociation: typeof import("./getWisdomAssistantAssociation").getWisdomAssistantAssociation = null as any;
export const getWisdomAssistantAssociationOutput: typeof import("./getWisdomAssistantAssociation").getWisdomAssistantAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getWisdomAssistantAssociation","getWisdomAssistantAssociationOutput"], () => require("./getWisdomAssistantAssociation"));

export { GetWisdomAssistantsResult } from "./getWisdomAssistants";
export const getWisdomAssistants: typeof import("./getWisdomAssistants").getWisdomAssistants = null as any;
export const getWisdomAssistantsOutput: typeof import("./getWisdomAssistants").getWisdomAssistantsOutput = null as any;
utilities.lazyLoad(exports, ["getWisdomAssistants","getWisdomAssistantsOutput"], () => require("./getWisdomAssistants"));

export { GetWisdomKnowledgeBaseArgs, GetWisdomKnowledgeBaseResult, GetWisdomKnowledgeBaseOutputArgs } from "./getWisdomKnowledgeBase";
export const getWisdomKnowledgeBase: typeof import("./getWisdomKnowledgeBase").getWisdomKnowledgeBase = null as any;
export const getWisdomKnowledgeBaseOutput: typeof import("./getWisdomKnowledgeBase").getWisdomKnowledgeBaseOutput = null as any;
utilities.lazyLoad(exports, ["getWisdomKnowledgeBase","getWisdomKnowledgeBaseOutput"], () => require("./getWisdomKnowledgeBase"));

export { GetWisdomKnowledgeBasesResult } from "./getWisdomKnowledgeBases";
export const getWisdomKnowledgeBases: typeof import("./getWisdomKnowledgeBases").getWisdomKnowledgeBases = null as any;
export const getWisdomKnowledgeBasesOutput: typeof import("./getWisdomKnowledgeBases").getWisdomKnowledgeBasesOutput = null as any;
utilities.lazyLoad(exports, ["getWisdomKnowledgeBases","getWisdomKnowledgeBasesOutput"], () => require("./getWisdomKnowledgeBases"));

export { GetWorkspacesConnectionAliasArgs, GetWorkspacesConnectionAliasResult, GetWorkspacesConnectionAliasOutputArgs } from "./getWorkspacesConnectionAlias";
export const getWorkspacesConnectionAlias: typeof import("./getWorkspacesConnectionAlias").getWorkspacesConnectionAlias = null as any;
export const getWorkspacesConnectionAliasOutput: typeof import("./getWorkspacesConnectionAlias").getWorkspacesConnectionAliasOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspacesConnectionAlias","getWorkspacesConnectionAliasOutput"], () => require("./getWorkspacesConnectionAlias"));

export { GetWorkspacesWorkspacesPoolArgs, GetWorkspacesWorkspacesPoolResult, GetWorkspacesWorkspacesPoolOutputArgs } from "./getWorkspacesWorkspacesPool";
export const getWorkspacesWorkspacesPool: typeof import("./getWorkspacesWorkspacesPool").getWorkspacesWorkspacesPool = null as any;
export const getWorkspacesWorkspacesPoolOutput: typeof import("./getWorkspacesWorkspacesPool").getWorkspacesWorkspacesPoolOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspacesWorkspacesPool","getWorkspacesWorkspacesPoolOutput"], () => require("./getWorkspacesWorkspacesPool"));

export { GetWorkspacesWorkspacesPoolsResult } from "./getWorkspacesWorkspacesPools";
export const getWorkspacesWorkspacesPools: typeof import("./getWorkspacesWorkspacesPools").getWorkspacesWorkspacesPools = null as any;
export const getWorkspacesWorkspacesPoolsOutput: typeof import("./getWorkspacesWorkspacesPools").getWorkspacesWorkspacesPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspacesWorkspacesPools","getWorkspacesWorkspacesPoolsOutput"], () => require("./getWorkspacesWorkspacesPools"));

export { GetWorkspacesthinclientEnvironmentArgs, GetWorkspacesthinclientEnvironmentResult, GetWorkspacesthinclientEnvironmentOutputArgs } from "./getWorkspacesthinclientEnvironment";
export const getWorkspacesthinclientEnvironment: typeof import("./getWorkspacesthinclientEnvironment").getWorkspacesthinclientEnvironment = null as any;
export const getWorkspacesthinclientEnvironmentOutput: typeof import("./getWorkspacesthinclientEnvironment").getWorkspacesthinclientEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspacesthinclientEnvironment","getWorkspacesthinclientEnvironmentOutput"], () => require("./getWorkspacesthinclientEnvironment"));

export { GetWorkspacesthinclientEnvironmentsResult } from "./getWorkspacesthinclientEnvironments";
export const getWorkspacesthinclientEnvironments: typeof import("./getWorkspacesthinclientEnvironments").getWorkspacesthinclientEnvironments = null as any;
export const getWorkspacesthinclientEnvironmentsOutput: typeof import("./getWorkspacesthinclientEnvironments").getWorkspacesthinclientEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspacesthinclientEnvironments","getWorkspacesthinclientEnvironmentsOutput"], () => require("./getWorkspacesthinclientEnvironments"));

export { GetWorkspaceswebBrowserSettingsArgs, GetWorkspaceswebBrowserSettingsResult, GetWorkspaceswebBrowserSettingsOutputArgs } from "./getWorkspaceswebBrowserSettings";
export const getWorkspaceswebBrowserSettings: typeof import("./getWorkspaceswebBrowserSettings").getWorkspaceswebBrowserSettings = null as any;
export const getWorkspaceswebBrowserSettingsOutput: typeof import("./getWorkspaceswebBrowserSettings").getWorkspaceswebBrowserSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebBrowserSettings","getWorkspaceswebBrowserSettingsOutput"], () => require("./getWorkspaceswebBrowserSettings"));

export { GetWorkspaceswebBrowserSettingsPluralResult } from "./getWorkspaceswebBrowserSettingsPlural";
export const getWorkspaceswebBrowserSettingsPlural: typeof import("./getWorkspaceswebBrowserSettingsPlural").getWorkspaceswebBrowserSettingsPlural = null as any;
export const getWorkspaceswebBrowserSettingsPluralOutput: typeof import("./getWorkspaceswebBrowserSettingsPlural").getWorkspaceswebBrowserSettingsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebBrowserSettingsPlural","getWorkspaceswebBrowserSettingsPluralOutput"], () => require("./getWorkspaceswebBrowserSettingsPlural"));

export { GetWorkspaceswebIdentityProviderArgs, GetWorkspaceswebIdentityProviderResult, GetWorkspaceswebIdentityProviderOutputArgs } from "./getWorkspaceswebIdentityProvider";
export const getWorkspaceswebIdentityProvider: typeof import("./getWorkspaceswebIdentityProvider").getWorkspaceswebIdentityProvider = null as any;
export const getWorkspaceswebIdentityProviderOutput: typeof import("./getWorkspaceswebIdentityProvider").getWorkspaceswebIdentityProviderOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebIdentityProvider","getWorkspaceswebIdentityProviderOutput"], () => require("./getWorkspaceswebIdentityProvider"));

export { GetWorkspaceswebIpAccessSettingsArgs, GetWorkspaceswebIpAccessSettingsResult, GetWorkspaceswebIpAccessSettingsOutputArgs } from "./getWorkspaceswebIpAccessSettings";
export const getWorkspaceswebIpAccessSettings: typeof import("./getWorkspaceswebIpAccessSettings").getWorkspaceswebIpAccessSettings = null as any;
export const getWorkspaceswebIpAccessSettingsOutput: typeof import("./getWorkspaceswebIpAccessSettings").getWorkspaceswebIpAccessSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebIpAccessSettings","getWorkspaceswebIpAccessSettingsOutput"], () => require("./getWorkspaceswebIpAccessSettings"));

export { GetWorkspaceswebIpAccessSettingsPluralResult } from "./getWorkspaceswebIpAccessSettingsPlural";
export const getWorkspaceswebIpAccessSettingsPlural: typeof import("./getWorkspaceswebIpAccessSettingsPlural").getWorkspaceswebIpAccessSettingsPlural = null as any;
export const getWorkspaceswebIpAccessSettingsPluralOutput: typeof import("./getWorkspaceswebIpAccessSettingsPlural").getWorkspaceswebIpAccessSettingsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebIpAccessSettingsPlural","getWorkspaceswebIpAccessSettingsPluralOutput"], () => require("./getWorkspaceswebIpAccessSettingsPlural"));

export { GetWorkspaceswebNetworkSettingsArgs, GetWorkspaceswebNetworkSettingsResult, GetWorkspaceswebNetworkSettingsOutputArgs } from "./getWorkspaceswebNetworkSettings";
export const getWorkspaceswebNetworkSettings: typeof import("./getWorkspaceswebNetworkSettings").getWorkspaceswebNetworkSettings = null as any;
export const getWorkspaceswebNetworkSettingsOutput: typeof import("./getWorkspaceswebNetworkSettings").getWorkspaceswebNetworkSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebNetworkSettings","getWorkspaceswebNetworkSettingsOutput"], () => require("./getWorkspaceswebNetworkSettings"));

export { GetWorkspaceswebNetworkSettingsPluralResult } from "./getWorkspaceswebNetworkSettingsPlural";
export const getWorkspaceswebNetworkSettingsPlural: typeof import("./getWorkspaceswebNetworkSettingsPlural").getWorkspaceswebNetworkSettingsPlural = null as any;
export const getWorkspaceswebNetworkSettingsPluralOutput: typeof import("./getWorkspaceswebNetworkSettingsPlural").getWorkspaceswebNetworkSettingsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebNetworkSettingsPlural","getWorkspaceswebNetworkSettingsPluralOutput"], () => require("./getWorkspaceswebNetworkSettingsPlural"));

export { GetWorkspaceswebPortalArgs, GetWorkspaceswebPortalResult, GetWorkspaceswebPortalOutputArgs } from "./getWorkspaceswebPortal";
export const getWorkspaceswebPortal: typeof import("./getWorkspaceswebPortal").getWorkspaceswebPortal = null as any;
export const getWorkspaceswebPortalOutput: typeof import("./getWorkspaceswebPortal").getWorkspaceswebPortalOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebPortal","getWorkspaceswebPortalOutput"], () => require("./getWorkspaceswebPortal"));

export { GetWorkspaceswebPortalsResult } from "./getWorkspaceswebPortals";
export const getWorkspaceswebPortals: typeof import("./getWorkspaceswebPortals").getWorkspaceswebPortals = null as any;
export const getWorkspaceswebPortalsOutput: typeof import("./getWorkspaceswebPortals").getWorkspaceswebPortalsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebPortals","getWorkspaceswebPortalsOutput"], () => require("./getWorkspaceswebPortals"));

export { GetWorkspaceswebTrustStoreArgs, GetWorkspaceswebTrustStoreResult, GetWorkspaceswebTrustStoreOutputArgs } from "./getWorkspaceswebTrustStore";
export const getWorkspaceswebTrustStore: typeof import("./getWorkspaceswebTrustStore").getWorkspaceswebTrustStore = null as any;
export const getWorkspaceswebTrustStoreOutput: typeof import("./getWorkspaceswebTrustStore").getWorkspaceswebTrustStoreOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebTrustStore","getWorkspaceswebTrustStoreOutput"], () => require("./getWorkspaceswebTrustStore"));

export { GetWorkspaceswebTrustStoresResult } from "./getWorkspaceswebTrustStores";
export const getWorkspaceswebTrustStores: typeof import("./getWorkspaceswebTrustStores").getWorkspaceswebTrustStores = null as any;
export const getWorkspaceswebTrustStoresOutput: typeof import("./getWorkspaceswebTrustStores").getWorkspaceswebTrustStoresOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebTrustStores","getWorkspaceswebTrustStoresOutput"], () => require("./getWorkspaceswebTrustStores"));

export { GetWorkspaceswebUserAccessLoggingSettingsArgs, GetWorkspaceswebUserAccessLoggingSettingsResult, GetWorkspaceswebUserAccessLoggingSettingsOutputArgs } from "./getWorkspaceswebUserAccessLoggingSettings";
export const getWorkspaceswebUserAccessLoggingSettings: typeof import("./getWorkspaceswebUserAccessLoggingSettings").getWorkspaceswebUserAccessLoggingSettings = null as any;
export const getWorkspaceswebUserAccessLoggingSettingsOutput: typeof import("./getWorkspaceswebUserAccessLoggingSettings").getWorkspaceswebUserAccessLoggingSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebUserAccessLoggingSettings","getWorkspaceswebUserAccessLoggingSettingsOutput"], () => require("./getWorkspaceswebUserAccessLoggingSettings"));

export { GetWorkspaceswebUserAccessLoggingSettingsPluralResult } from "./getWorkspaceswebUserAccessLoggingSettingsPlural";
export const getWorkspaceswebUserAccessLoggingSettingsPlural: typeof import("./getWorkspaceswebUserAccessLoggingSettingsPlural").getWorkspaceswebUserAccessLoggingSettingsPlural = null as any;
export const getWorkspaceswebUserAccessLoggingSettingsPluralOutput: typeof import("./getWorkspaceswebUserAccessLoggingSettingsPlural").getWorkspaceswebUserAccessLoggingSettingsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebUserAccessLoggingSettingsPlural","getWorkspaceswebUserAccessLoggingSettingsPluralOutput"], () => require("./getWorkspaceswebUserAccessLoggingSettingsPlural"));

export { GetWorkspaceswebUserSettingsArgs, GetWorkspaceswebUserSettingsResult, GetWorkspaceswebUserSettingsOutputArgs } from "./getWorkspaceswebUserSettings";
export const getWorkspaceswebUserSettings: typeof import("./getWorkspaceswebUserSettings").getWorkspaceswebUserSettings = null as any;
export const getWorkspaceswebUserSettingsOutput: typeof import("./getWorkspaceswebUserSettings").getWorkspaceswebUserSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebUserSettings","getWorkspaceswebUserSettingsOutput"], () => require("./getWorkspaceswebUserSettings"));

export { GetWorkspaceswebUserSettingsPluralResult } from "./getWorkspaceswebUserSettingsPlural";
export const getWorkspaceswebUserSettingsPlural: typeof import("./getWorkspaceswebUserSettingsPlural").getWorkspaceswebUserSettingsPlural = null as any;
export const getWorkspaceswebUserSettingsPluralOutput: typeof import("./getWorkspaceswebUserSettingsPlural").getWorkspaceswebUserSettingsPluralOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceswebUserSettingsPlural","getWorkspaceswebUserSettingsPluralOutput"], () => require("./getWorkspaceswebUserSettingsPlural"));

export { GetXrayGroupArgs, GetXrayGroupResult, GetXrayGroupOutputArgs } from "./getXrayGroup";
export const getXrayGroup: typeof import("./getXrayGroup").getXrayGroup = null as any;
export const getXrayGroupOutput: typeof import("./getXrayGroup").getXrayGroupOutput = null as any;
utilities.lazyLoad(exports, ["getXrayGroup","getXrayGroupOutput"], () => require("./getXrayGroup"));

export { GetXrayGroupsResult } from "./getXrayGroups";
export const getXrayGroups: typeof import("./getXrayGroups").getXrayGroups = null as any;
export const getXrayGroupsOutput: typeof import("./getXrayGroups").getXrayGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getXrayGroups","getXrayGroupsOutput"], () => require("./getXrayGroups"));

export { GetXrayResourcePoliciesResult } from "./getXrayResourcePolicies";
export const getXrayResourcePolicies: typeof import("./getXrayResourcePolicies").getXrayResourcePolicies = null as any;
export const getXrayResourcePoliciesOutput: typeof import("./getXrayResourcePolicies").getXrayResourcePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getXrayResourcePolicies","getXrayResourcePoliciesOutput"], () => require("./getXrayResourcePolicies"));

export { GetXrayResourcePolicyArgs, GetXrayResourcePolicyResult, GetXrayResourcePolicyOutputArgs } from "./getXrayResourcePolicy";
export const getXrayResourcePolicy: typeof import("./getXrayResourcePolicy").getXrayResourcePolicy = null as any;
export const getXrayResourcePolicyOutput: typeof import("./getXrayResourcePolicy").getXrayResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getXrayResourcePolicy","getXrayResourcePolicyOutput"], () => require("./getXrayResourcePolicy"));

export { GetXraySamplingRuleArgs, GetXraySamplingRuleResult, GetXraySamplingRuleOutputArgs } from "./getXraySamplingRule";
export const getXraySamplingRule: typeof import("./getXraySamplingRule").getXraySamplingRule = null as any;
export const getXraySamplingRuleOutput: typeof import("./getXraySamplingRule").getXraySamplingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getXraySamplingRule","getXraySamplingRuleOutput"], () => require("./getXraySamplingRule"));

export { GetXraySamplingRulesResult } from "./getXraySamplingRules";
export const getXraySamplingRules: typeof import("./getXraySamplingRules").getXraySamplingRules = null as any;
export const getXraySamplingRulesOutput: typeof import("./getXraySamplingRules").getXraySamplingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getXraySamplingRules","getXraySamplingRulesOutput"], () => require("./getXraySamplingRules"));

export { GlobalacceleratorAcceleratorArgs, GlobalacceleratorAcceleratorState } from "./globalacceleratorAccelerator";
export type GlobalacceleratorAccelerator = import("./globalacceleratorAccelerator").GlobalacceleratorAccelerator;
export const GlobalacceleratorAccelerator: typeof import("./globalacceleratorAccelerator").GlobalacceleratorAccelerator = null as any;
utilities.lazyLoad(exports, ["GlobalacceleratorAccelerator"], () => require("./globalacceleratorAccelerator"));

export { GlobalacceleratorCrossAccountAttachmentArgs, GlobalacceleratorCrossAccountAttachmentState } from "./globalacceleratorCrossAccountAttachment";
export type GlobalacceleratorCrossAccountAttachment = import("./globalacceleratorCrossAccountAttachment").GlobalacceleratorCrossAccountAttachment;
export const GlobalacceleratorCrossAccountAttachment: typeof import("./globalacceleratorCrossAccountAttachment").GlobalacceleratorCrossAccountAttachment = null as any;
utilities.lazyLoad(exports, ["GlobalacceleratorCrossAccountAttachment"], () => require("./globalacceleratorCrossAccountAttachment"));

export { GlobalacceleratorEndpointGroupArgs, GlobalacceleratorEndpointGroupState } from "./globalacceleratorEndpointGroup";
export type GlobalacceleratorEndpointGroup = import("./globalacceleratorEndpointGroup").GlobalacceleratorEndpointGroup;
export const GlobalacceleratorEndpointGroup: typeof import("./globalacceleratorEndpointGroup").GlobalacceleratorEndpointGroup = null as any;
utilities.lazyLoad(exports, ["GlobalacceleratorEndpointGroup"], () => require("./globalacceleratorEndpointGroup"));

export { GlobalacceleratorListenerArgs, GlobalacceleratorListenerState } from "./globalacceleratorListener";
export type GlobalacceleratorListener = import("./globalacceleratorListener").GlobalacceleratorListener;
export const GlobalacceleratorListener: typeof import("./globalacceleratorListener").GlobalacceleratorListener = null as any;
utilities.lazyLoad(exports, ["GlobalacceleratorListener"], () => require("./globalacceleratorListener"));

export { GlueDatabaseArgs, GlueDatabaseState } from "./glueDatabase";
export type GlueDatabase = import("./glueDatabase").GlueDatabase;
export const GlueDatabase: typeof import("./glueDatabase").GlueDatabase = null as any;
utilities.lazyLoad(exports, ["GlueDatabase"], () => require("./glueDatabase"));

export { GlueRegistryArgs, GlueRegistryState } from "./glueRegistry";
export type GlueRegistry = import("./glueRegistry").GlueRegistry;
export const GlueRegistry: typeof import("./glueRegistry").GlueRegistry = null as any;
utilities.lazyLoad(exports, ["GlueRegistry"], () => require("./glueRegistry"));

export { GlueSchemaArgs, GlueSchemaState } from "./glueSchema";
export type GlueSchema = import("./glueSchema").GlueSchema;
export const GlueSchema: typeof import("./glueSchema").GlueSchema = null as any;
utilities.lazyLoad(exports, ["GlueSchema"], () => require("./glueSchema"));

export { GlueSchemaVersionArgs, GlueSchemaVersionState } from "./glueSchemaVersion";
export type GlueSchemaVersion = import("./glueSchemaVersion").GlueSchemaVersion;
export const GlueSchemaVersion: typeof import("./glueSchemaVersion").GlueSchemaVersion = null as any;
utilities.lazyLoad(exports, ["GlueSchemaVersion"], () => require("./glueSchemaVersion"));

export { GlueSchemaVersionMetadataArgs, GlueSchemaVersionMetadataState } from "./glueSchemaVersionMetadata";
export type GlueSchemaVersionMetadata = import("./glueSchemaVersionMetadata").GlueSchemaVersionMetadata;
export const GlueSchemaVersionMetadata: typeof import("./glueSchemaVersionMetadata").GlueSchemaVersionMetadata = null as any;
utilities.lazyLoad(exports, ["GlueSchemaVersionMetadata"], () => require("./glueSchemaVersionMetadata"));

export { GlueTriggerArgs, GlueTriggerState } from "./glueTrigger";
export type GlueTrigger = import("./glueTrigger").GlueTrigger;
export const GlueTrigger: typeof import("./glueTrigger").GlueTrigger = null as any;
utilities.lazyLoad(exports, ["GlueTrigger"], () => require("./glueTrigger"));

export { GrafanaWorkspaceArgs, GrafanaWorkspaceState } from "./grafanaWorkspace";
export type GrafanaWorkspace = import("./grafanaWorkspace").GrafanaWorkspace;
export const GrafanaWorkspace: typeof import("./grafanaWorkspace").GrafanaWorkspace = null as any;
utilities.lazyLoad(exports, ["GrafanaWorkspace"], () => require("./grafanaWorkspace"));

export { Greengrassv2ComponentVersionArgs, Greengrassv2ComponentVersionState } from "./greengrassv2ComponentVersion";
export type Greengrassv2ComponentVersion = import("./greengrassv2ComponentVersion").Greengrassv2ComponentVersion;
export const Greengrassv2ComponentVersion: typeof import("./greengrassv2ComponentVersion").Greengrassv2ComponentVersion = null as any;
utilities.lazyLoad(exports, ["Greengrassv2ComponentVersion"], () => require("./greengrassv2ComponentVersion"));

export { Greengrassv2DeploymentArgs, Greengrassv2DeploymentState } from "./greengrassv2Deployment";
export type Greengrassv2Deployment = import("./greengrassv2Deployment").Greengrassv2Deployment;
export const Greengrassv2Deployment: typeof import("./greengrassv2Deployment").Greengrassv2Deployment = null as any;
utilities.lazyLoad(exports, ["Greengrassv2Deployment"], () => require("./greengrassv2Deployment"));

export { GroundstationConfigArgs, GroundstationConfigState } from "./groundstationConfig";
export type GroundstationConfig = import("./groundstationConfig").GroundstationConfig;
export const GroundstationConfig: typeof import("./groundstationConfig").GroundstationConfig = null as any;
utilities.lazyLoad(exports, ["GroundstationConfig"], () => require("./groundstationConfig"));

export { GroundstationDataflowEndpointGroupArgs, GroundstationDataflowEndpointGroupState } from "./groundstationDataflowEndpointGroup";
export type GroundstationDataflowEndpointGroup = import("./groundstationDataflowEndpointGroup").GroundstationDataflowEndpointGroup;
export const GroundstationDataflowEndpointGroup: typeof import("./groundstationDataflowEndpointGroup").GroundstationDataflowEndpointGroup = null as any;
utilities.lazyLoad(exports, ["GroundstationDataflowEndpointGroup"], () => require("./groundstationDataflowEndpointGroup"));

export { GroundstationMissionProfileArgs, GroundstationMissionProfileState } from "./groundstationMissionProfile";
export type GroundstationMissionProfile = import("./groundstationMissionProfile").GroundstationMissionProfile;
export const GroundstationMissionProfile: typeof import("./groundstationMissionProfile").GroundstationMissionProfile = null as any;
utilities.lazyLoad(exports, ["GroundstationMissionProfile"], () => require("./groundstationMissionProfile"));

export { GuarddutyDetectorArgs, GuarddutyDetectorState } from "./guarddutyDetector";
export type GuarddutyDetector = import("./guarddutyDetector").GuarddutyDetector;
export const GuarddutyDetector: typeof import("./guarddutyDetector").GuarddutyDetector = null as any;
utilities.lazyLoad(exports, ["GuarddutyDetector"], () => require("./guarddutyDetector"));

export { GuarddutyFilterArgs, GuarddutyFilterState } from "./guarddutyFilter";
export type GuarddutyFilter = import("./guarddutyFilter").GuarddutyFilter;
export const GuarddutyFilter: typeof import("./guarddutyFilter").GuarddutyFilter = null as any;
utilities.lazyLoad(exports, ["GuarddutyFilter"], () => require("./guarddutyFilter"));

export { GuarddutyIpSetArgs, GuarddutyIpSetState } from "./guarddutyIpSet";
export type GuarddutyIpSet = import("./guarddutyIpSet").GuarddutyIpSet;
export const GuarddutyIpSet: typeof import("./guarddutyIpSet").GuarddutyIpSet = null as any;
utilities.lazyLoad(exports, ["GuarddutyIpSet"], () => require("./guarddutyIpSet"));

export { GuarddutyMalwareProtectionPlanArgs, GuarddutyMalwareProtectionPlanState } from "./guarddutyMalwareProtectionPlan";
export type GuarddutyMalwareProtectionPlan = import("./guarddutyMalwareProtectionPlan").GuarddutyMalwareProtectionPlan;
export const GuarddutyMalwareProtectionPlan: typeof import("./guarddutyMalwareProtectionPlan").GuarddutyMalwareProtectionPlan = null as any;
utilities.lazyLoad(exports, ["GuarddutyMalwareProtectionPlan"], () => require("./guarddutyMalwareProtectionPlan"));

export { GuarddutyMasterArgs, GuarddutyMasterState } from "./guarddutyMaster";
export type GuarddutyMaster = import("./guarddutyMaster").GuarddutyMaster;
export const GuarddutyMaster: typeof import("./guarddutyMaster").GuarddutyMaster = null as any;
utilities.lazyLoad(exports, ["GuarddutyMaster"], () => require("./guarddutyMaster"));

export { GuarddutyMemberArgs, GuarddutyMemberState } from "./guarddutyMember";
export type GuarddutyMember = import("./guarddutyMember").GuarddutyMember;
export const GuarddutyMember: typeof import("./guarddutyMember").GuarddutyMember = null as any;
utilities.lazyLoad(exports, ["GuarddutyMember"], () => require("./guarddutyMember"));

export { GuarddutyThreatIntelSetArgs, GuarddutyThreatIntelSetState } from "./guarddutyThreatIntelSet";
export type GuarddutyThreatIntelSet = import("./guarddutyThreatIntelSet").GuarddutyThreatIntelSet;
export const GuarddutyThreatIntelSet: typeof import("./guarddutyThreatIntelSet").GuarddutyThreatIntelSet = null as any;
utilities.lazyLoad(exports, ["GuarddutyThreatIntelSet"], () => require("./guarddutyThreatIntelSet"));

export { HealthimagingDatastoreArgs, HealthimagingDatastoreState } from "./healthimagingDatastore";
export type HealthimagingDatastore = import("./healthimagingDatastore").HealthimagingDatastore;
export const HealthimagingDatastore: typeof import("./healthimagingDatastore").HealthimagingDatastore = null as any;
utilities.lazyLoad(exports, ["HealthimagingDatastore"], () => require("./healthimagingDatastore"));

export { HealthlakeFhirDatastoreArgs, HealthlakeFhirDatastoreState } from "./healthlakeFhirDatastore";
export type HealthlakeFhirDatastore = import("./healthlakeFhirDatastore").HealthlakeFhirDatastore;
export const HealthlakeFhirDatastore: typeof import("./healthlakeFhirDatastore").HealthlakeFhirDatastore = null as any;
utilities.lazyLoad(exports, ["HealthlakeFhirDatastore"], () => require("./healthlakeFhirDatastore"));

export { IamGroupArgs, IamGroupState } from "./iamGroup";
export type IamGroup = import("./iamGroup").IamGroup;
export const IamGroup: typeof import("./iamGroup").IamGroup = null as any;
utilities.lazyLoad(exports, ["IamGroup"], () => require("./iamGroup"));

export { IamGroupPolicyArgs, IamGroupPolicyState } from "./iamGroupPolicy";
export type IamGroupPolicy = import("./iamGroupPolicy").IamGroupPolicy;
export const IamGroupPolicy: typeof import("./iamGroupPolicy").IamGroupPolicy = null as any;
utilities.lazyLoad(exports, ["IamGroupPolicy"], () => require("./iamGroupPolicy"));

export { IamInstanceProfileArgs, IamInstanceProfileState } from "./iamInstanceProfile";
export type IamInstanceProfile = import("./iamInstanceProfile").IamInstanceProfile;
export const IamInstanceProfile: typeof import("./iamInstanceProfile").IamInstanceProfile = null as any;
utilities.lazyLoad(exports, ["IamInstanceProfile"], () => require("./iamInstanceProfile"));

export { IamManagedPolicyArgs, IamManagedPolicyState } from "./iamManagedPolicy";
export type IamManagedPolicy = import("./iamManagedPolicy").IamManagedPolicy;
export const IamManagedPolicy: typeof import("./iamManagedPolicy").IamManagedPolicy = null as any;
utilities.lazyLoad(exports, ["IamManagedPolicy"], () => require("./iamManagedPolicy"));

export { IamOidcProviderArgs, IamOidcProviderState } from "./iamOidcProvider";
export type IamOidcProvider = import("./iamOidcProvider").IamOidcProvider;
export const IamOidcProvider: typeof import("./iamOidcProvider").IamOidcProvider = null as any;
utilities.lazyLoad(exports, ["IamOidcProvider"], () => require("./iamOidcProvider"));

export { IamRoleArgs, IamRoleState } from "./iamRole";
export type IamRole = import("./iamRole").IamRole;
export const IamRole: typeof import("./iamRole").IamRole = null as any;
utilities.lazyLoad(exports, ["IamRole"], () => require("./iamRole"));

export { IamRolePolicyArgs, IamRolePolicyState } from "./iamRolePolicy";
export type IamRolePolicy = import("./iamRolePolicy").IamRolePolicy;
export const IamRolePolicy: typeof import("./iamRolePolicy").IamRolePolicy = null as any;
utilities.lazyLoad(exports, ["IamRolePolicy"], () => require("./iamRolePolicy"));

export { IamSamlProviderArgs, IamSamlProviderState } from "./iamSamlProvider";
export type IamSamlProvider = import("./iamSamlProvider").IamSamlProvider;
export const IamSamlProvider: typeof import("./iamSamlProvider").IamSamlProvider = null as any;
utilities.lazyLoad(exports, ["IamSamlProvider"], () => require("./iamSamlProvider"));

export { IamServerCertificateArgs, IamServerCertificateState } from "./iamServerCertificate";
export type IamServerCertificate = import("./iamServerCertificate").IamServerCertificate;
export const IamServerCertificate: typeof import("./iamServerCertificate").IamServerCertificate = null as any;
utilities.lazyLoad(exports, ["IamServerCertificate"], () => require("./iamServerCertificate"));

export { IamServiceLinkedRoleArgs, IamServiceLinkedRoleState } from "./iamServiceLinkedRole";
export type IamServiceLinkedRole = import("./iamServiceLinkedRole").IamServiceLinkedRole;
export const IamServiceLinkedRole: typeof import("./iamServiceLinkedRole").IamServiceLinkedRole = null as any;
utilities.lazyLoad(exports, ["IamServiceLinkedRole"], () => require("./iamServiceLinkedRole"));

export { IamUserArgs, IamUserState } from "./iamUser";
export type IamUser = import("./iamUser").IamUser;
export const IamUser: typeof import("./iamUser").IamUser = null as any;
utilities.lazyLoad(exports, ["IamUser"], () => require("./iamUser"));

export { IamUserPolicyArgs, IamUserPolicyState } from "./iamUserPolicy";
export type IamUserPolicy = import("./iamUserPolicy").IamUserPolicy;
export const IamUserPolicy: typeof import("./iamUserPolicy").IamUserPolicy = null as any;
utilities.lazyLoad(exports, ["IamUserPolicy"], () => require("./iamUserPolicy"));

export { IamVirtualMfaDeviceArgs, IamVirtualMfaDeviceState } from "./iamVirtualMfaDevice";
export type IamVirtualMfaDevice = import("./iamVirtualMfaDevice").IamVirtualMfaDevice;
export const IamVirtualMfaDevice: typeof import("./iamVirtualMfaDevice").IamVirtualMfaDevice = null as any;
utilities.lazyLoad(exports, ["IamVirtualMfaDevice"], () => require("./iamVirtualMfaDevice"));

export { IdentitystoreGroupArgs, IdentitystoreGroupState } from "./identitystoreGroup";
export type IdentitystoreGroup = import("./identitystoreGroup").IdentitystoreGroup;
export const IdentitystoreGroup: typeof import("./identitystoreGroup").IdentitystoreGroup = null as any;
utilities.lazyLoad(exports, ["IdentitystoreGroup"], () => require("./identitystoreGroup"));

export { IdentitystoreGroupMembershipArgs, IdentitystoreGroupMembershipState } from "./identitystoreGroupMembership";
export type IdentitystoreGroupMembership = import("./identitystoreGroupMembership").IdentitystoreGroupMembership;
export const IdentitystoreGroupMembership: typeof import("./identitystoreGroupMembership").IdentitystoreGroupMembership = null as any;
utilities.lazyLoad(exports, ["IdentitystoreGroupMembership"], () => require("./identitystoreGroupMembership"));

export { ImagebuilderComponentArgs, ImagebuilderComponentState } from "./imagebuilderComponent";
export type ImagebuilderComponent = import("./imagebuilderComponent").ImagebuilderComponent;
export const ImagebuilderComponent: typeof import("./imagebuilderComponent").ImagebuilderComponent = null as any;
utilities.lazyLoad(exports, ["ImagebuilderComponent"], () => require("./imagebuilderComponent"));

export { ImagebuilderContainerRecipeArgs, ImagebuilderContainerRecipeState } from "./imagebuilderContainerRecipe";
export type ImagebuilderContainerRecipe = import("./imagebuilderContainerRecipe").ImagebuilderContainerRecipe;
export const ImagebuilderContainerRecipe: typeof import("./imagebuilderContainerRecipe").ImagebuilderContainerRecipe = null as any;
utilities.lazyLoad(exports, ["ImagebuilderContainerRecipe"], () => require("./imagebuilderContainerRecipe"));

export { ImagebuilderDistributionConfigurationArgs, ImagebuilderDistributionConfigurationState } from "./imagebuilderDistributionConfiguration";
export type ImagebuilderDistributionConfiguration = import("./imagebuilderDistributionConfiguration").ImagebuilderDistributionConfiguration;
export const ImagebuilderDistributionConfiguration: typeof import("./imagebuilderDistributionConfiguration").ImagebuilderDistributionConfiguration = null as any;
utilities.lazyLoad(exports, ["ImagebuilderDistributionConfiguration"], () => require("./imagebuilderDistributionConfiguration"));

export { ImagebuilderImageArgs, ImagebuilderImageState } from "./imagebuilderImage";
export type ImagebuilderImage = import("./imagebuilderImage").ImagebuilderImage;
export const ImagebuilderImage: typeof import("./imagebuilderImage").ImagebuilderImage = null as any;
utilities.lazyLoad(exports, ["ImagebuilderImage"], () => require("./imagebuilderImage"));

export { ImagebuilderImagePipelineArgs, ImagebuilderImagePipelineState } from "./imagebuilderImagePipeline";
export type ImagebuilderImagePipeline = import("./imagebuilderImagePipeline").ImagebuilderImagePipeline;
export const ImagebuilderImagePipeline: typeof import("./imagebuilderImagePipeline").ImagebuilderImagePipeline = null as any;
utilities.lazyLoad(exports, ["ImagebuilderImagePipeline"], () => require("./imagebuilderImagePipeline"));

export { ImagebuilderImageRecipeArgs, ImagebuilderImageRecipeState } from "./imagebuilderImageRecipe";
export type ImagebuilderImageRecipe = import("./imagebuilderImageRecipe").ImagebuilderImageRecipe;
export const ImagebuilderImageRecipe: typeof import("./imagebuilderImageRecipe").ImagebuilderImageRecipe = null as any;
utilities.lazyLoad(exports, ["ImagebuilderImageRecipe"], () => require("./imagebuilderImageRecipe"));

export { ImagebuilderInfrastructureConfigurationArgs, ImagebuilderInfrastructureConfigurationState } from "./imagebuilderInfrastructureConfiguration";
export type ImagebuilderInfrastructureConfiguration = import("./imagebuilderInfrastructureConfiguration").ImagebuilderInfrastructureConfiguration;
export const ImagebuilderInfrastructureConfiguration: typeof import("./imagebuilderInfrastructureConfiguration").ImagebuilderInfrastructureConfiguration = null as any;
utilities.lazyLoad(exports, ["ImagebuilderInfrastructureConfiguration"], () => require("./imagebuilderInfrastructureConfiguration"));

export { ImagebuilderLifecyclePolicyArgs, ImagebuilderLifecyclePolicyState } from "./imagebuilderLifecyclePolicy";
export type ImagebuilderLifecyclePolicy = import("./imagebuilderLifecyclePolicy").ImagebuilderLifecyclePolicy;
export const ImagebuilderLifecyclePolicy: typeof import("./imagebuilderLifecyclePolicy").ImagebuilderLifecyclePolicy = null as any;
utilities.lazyLoad(exports, ["ImagebuilderLifecyclePolicy"], () => require("./imagebuilderLifecyclePolicy"));

export { ImagebuilderWorkflowArgs, ImagebuilderWorkflowState } from "./imagebuilderWorkflow";
export type ImagebuilderWorkflow = import("./imagebuilderWorkflow").ImagebuilderWorkflow;
export const ImagebuilderWorkflow: typeof import("./imagebuilderWorkflow").ImagebuilderWorkflow = null as any;
utilities.lazyLoad(exports, ["ImagebuilderWorkflow"], () => require("./imagebuilderWorkflow"));

export { InspectorAssessmentTargetArgs, InspectorAssessmentTargetState } from "./inspectorAssessmentTarget";
export type InspectorAssessmentTarget = import("./inspectorAssessmentTarget").InspectorAssessmentTarget;
export const InspectorAssessmentTarget: typeof import("./inspectorAssessmentTarget").InspectorAssessmentTarget = null as any;
utilities.lazyLoad(exports, ["InspectorAssessmentTarget"], () => require("./inspectorAssessmentTarget"));

export { InspectorAssessmentTemplateArgs, InspectorAssessmentTemplateState } from "./inspectorAssessmentTemplate";
export type InspectorAssessmentTemplate = import("./inspectorAssessmentTemplate").InspectorAssessmentTemplate;
export const InspectorAssessmentTemplate: typeof import("./inspectorAssessmentTemplate").InspectorAssessmentTemplate = null as any;
utilities.lazyLoad(exports, ["InspectorAssessmentTemplate"], () => require("./inspectorAssessmentTemplate"));

export { InspectorResourceGroupArgs, InspectorResourceGroupState } from "./inspectorResourceGroup";
export type InspectorResourceGroup = import("./inspectorResourceGroup").InspectorResourceGroup;
export const InspectorResourceGroup: typeof import("./inspectorResourceGroup").InspectorResourceGroup = null as any;
utilities.lazyLoad(exports, ["InspectorResourceGroup"], () => require("./inspectorResourceGroup"));

export { Inspectorv2CisScanConfigurationArgs, Inspectorv2CisScanConfigurationState } from "./inspectorv2CisScanConfiguration";
export type Inspectorv2CisScanConfiguration = import("./inspectorv2CisScanConfiguration").Inspectorv2CisScanConfiguration;
export const Inspectorv2CisScanConfiguration: typeof import("./inspectorv2CisScanConfiguration").Inspectorv2CisScanConfiguration = null as any;
utilities.lazyLoad(exports, ["Inspectorv2CisScanConfiguration"], () => require("./inspectorv2CisScanConfiguration"));

export { Inspectorv2FilterArgs, Inspectorv2FilterState } from "./inspectorv2Filter";
export type Inspectorv2Filter = import("./inspectorv2Filter").Inspectorv2Filter;
export const Inspectorv2Filter: typeof import("./inspectorv2Filter").Inspectorv2Filter = null as any;
utilities.lazyLoad(exports, ["Inspectorv2Filter"], () => require("./inspectorv2Filter"));

export { InternetmonitorMonitorArgs, InternetmonitorMonitorState } from "./internetmonitorMonitor";
export type InternetmonitorMonitor = import("./internetmonitorMonitor").InternetmonitorMonitor;
export const InternetmonitorMonitor: typeof import("./internetmonitorMonitor").InternetmonitorMonitor = null as any;
utilities.lazyLoad(exports, ["InternetmonitorMonitor"], () => require("./internetmonitorMonitor"));

export { IotAccountAuditConfigurationArgs, IotAccountAuditConfigurationState } from "./iotAccountAuditConfiguration";
export type IotAccountAuditConfiguration = import("./iotAccountAuditConfiguration").IotAccountAuditConfiguration;
export const IotAccountAuditConfiguration: typeof import("./iotAccountAuditConfiguration").IotAccountAuditConfiguration = null as any;
utilities.lazyLoad(exports, ["IotAccountAuditConfiguration"], () => require("./iotAccountAuditConfiguration"));

export { IotAuthorizerArgs, IotAuthorizerState } from "./iotAuthorizer";
export type IotAuthorizer = import("./iotAuthorizer").IotAuthorizer;
export const IotAuthorizer: typeof import("./iotAuthorizer").IotAuthorizer = null as any;
utilities.lazyLoad(exports, ["IotAuthorizer"], () => require("./iotAuthorizer"));

export { IotBillingGroupArgs, IotBillingGroupState } from "./iotBillingGroup";
export type IotBillingGroup = import("./iotBillingGroup").IotBillingGroup;
export const IotBillingGroup: typeof import("./iotBillingGroup").IotBillingGroup = null as any;
utilities.lazyLoad(exports, ["IotBillingGroup"], () => require("./iotBillingGroup"));

export { IotCaCertificateArgs, IotCaCertificateState } from "./iotCaCertificate";
export type IotCaCertificate = import("./iotCaCertificate").IotCaCertificate;
export const IotCaCertificate: typeof import("./iotCaCertificate").IotCaCertificate = null as any;
utilities.lazyLoad(exports, ["IotCaCertificate"], () => require("./iotCaCertificate"));

export { IotCertificateArgs, IotCertificateState } from "./iotCertificate";
export type IotCertificate = import("./iotCertificate").IotCertificate;
export const IotCertificate: typeof import("./iotCertificate").IotCertificate = null as any;
utilities.lazyLoad(exports, ["IotCertificate"], () => require("./iotCertificate"));

export { IotCertificateProviderArgs, IotCertificateProviderState } from "./iotCertificateProvider";
export type IotCertificateProvider = import("./iotCertificateProvider").IotCertificateProvider;
export const IotCertificateProvider: typeof import("./iotCertificateProvider").IotCertificateProvider = null as any;
utilities.lazyLoad(exports, ["IotCertificateProvider"], () => require("./iotCertificateProvider"));

export { IotCustomMetricArgs, IotCustomMetricState } from "./iotCustomMetric";
export type IotCustomMetric = import("./iotCustomMetric").IotCustomMetric;
export const IotCustomMetric: typeof import("./iotCustomMetric").IotCustomMetric = null as any;
utilities.lazyLoad(exports, ["IotCustomMetric"], () => require("./iotCustomMetric"));

export { IotDimensionArgs, IotDimensionState } from "./iotDimension";
export type IotDimension = import("./iotDimension").IotDimension;
export const IotDimension: typeof import("./iotDimension").IotDimension = null as any;
utilities.lazyLoad(exports, ["IotDimension"], () => require("./iotDimension"));

export { IotDomainConfigurationArgs, IotDomainConfigurationState } from "./iotDomainConfiguration";
export type IotDomainConfiguration = import("./iotDomainConfiguration").IotDomainConfiguration;
export const IotDomainConfiguration: typeof import("./iotDomainConfiguration").IotDomainConfiguration = null as any;
utilities.lazyLoad(exports, ["IotDomainConfiguration"], () => require("./iotDomainConfiguration"));

export { IotFleetMetricArgs, IotFleetMetricState } from "./iotFleetMetric";
export type IotFleetMetric = import("./iotFleetMetric").IotFleetMetric;
export const IotFleetMetric: typeof import("./iotFleetMetric").IotFleetMetric = null as any;
utilities.lazyLoad(exports, ["IotFleetMetric"], () => require("./iotFleetMetric"));

export { IotJobTemplateArgs, IotJobTemplateState } from "./iotJobTemplate";
export type IotJobTemplate = import("./iotJobTemplate").IotJobTemplate;
export const IotJobTemplate: typeof import("./iotJobTemplate").IotJobTemplate = null as any;
utilities.lazyLoad(exports, ["IotJobTemplate"], () => require("./iotJobTemplate"));

export { IotLoggingArgs, IotLoggingState } from "./iotLogging";
export type IotLogging = import("./iotLogging").IotLogging;
export const IotLogging: typeof import("./iotLogging").IotLogging = null as any;
utilities.lazyLoad(exports, ["IotLogging"], () => require("./iotLogging"));

export { IotMitigationActionArgs, IotMitigationActionState } from "./iotMitigationAction";
export type IotMitigationAction = import("./iotMitigationAction").IotMitigationAction;
export const IotMitigationAction: typeof import("./iotMitigationAction").IotMitigationAction = null as any;
utilities.lazyLoad(exports, ["IotMitigationAction"], () => require("./iotMitigationAction"));

export { IotPolicyArgs, IotPolicyState } from "./iotPolicy";
export type IotPolicy = import("./iotPolicy").IotPolicy;
export const IotPolicy: typeof import("./iotPolicy").IotPolicy = null as any;
utilities.lazyLoad(exports, ["IotPolicy"], () => require("./iotPolicy"));

export { IotProvisioningTemplateArgs, IotProvisioningTemplateState } from "./iotProvisioningTemplate";
export type IotProvisioningTemplate = import("./iotProvisioningTemplate").IotProvisioningTemplate;
export const IotProvisioningTemplate: typeof import("./iotProvisioningTemplate").IotProvisioningTemplate = null as any;
utilities.lazyLoad(exports, ["IotProvisioningTemplate"], () => require("./iotProvisioningTemplate"));

export { IotResourceSpecificLoggingArgs, IotResourceSpecificLoggingState } from "./iotResourceSpecificLogging";
export type IotResourceSpecificLogging = import("./iotResourceSpecificLogging").IotResourceSpecificLogging;
export const IotResourceSpecificLogging: typeof import("./iotResourceSpecificLogging").IotResourceSpecificLogging = null as any;
utilities.lazyLoad(exports, ["IotResourceSpecificLogging"], () => require("./iotResourceSpecificLogging"));

export { IotRoleAliasArgs, IotRoleAliasState } from "./iotRoleAlias";
export type IotRoleAlias = import("./iotRoleAlias").IotRoleAlias;
export const IotRoleAlias: typeof import("./iotRoleAlias").IotRoleAlias = null as any;
utilities.lazyLoad(exports, ["IotRoleAlias"], () => require("./iotRoleAlias"));

export { IotScheduledAuditArgs, IotScheduledAuditState } from "./iotScheduledAudit";
export type IotScheduledAudit = import("./iotScheduledAudit").IotScheduledAudit;
export const IotScheduledAudit: typeof import("./iotScheduledAudit").IotScheduledAudit = null as any;
utilities.lazyLoad(exports, ["IotScheduledAudit"], () => require("./iotScheduledAudit"));

export { IotSecurityProfileArgs, IotSecurityProfileState } from "./iotSecurityProfile";
export type IotSecurityProfile = import("./iotSecurityProfile").IotSecurityProfile;
export const IotSecurityProfile: typeof import("./iotSecurityProfile").IotSecurityProfile = null as any;
utilities.lazyLoad(exports, ["IotSecurityProfile"], () => require("./iotSecurityProfile"));

export { IotSoftwarePackageArgs, IotSoftwarePackageState } from "./iotSoftwarePackage";
export type IotSoftwarePackage = import("./iotSoftwarePackage").IotSoftwarePackage;
export const IotSoftwarePackage: typeof import("./iotSoftwarePackage").IotSoftwarePackage = null as any;
utilities.lazyLoad(exports, ["IotSoftwarePackage"], () => require("./iotSoftwarePackage"));

export { IotSoftwarePackageVersionArgs, IotSoftwarePackageVersionState } from "./iotSoftwarePackageVersion";
export type IotSoftwarePackageVersion = import("./iotSoftwarePackageVersion").IotSoftwarePackageVersion;
export const IotSoftwarePackageVersion: typeof import("./iotSoftwarePackageVersion").IotSoftwarePackageVersion = null as any;
utilities.lazyLoad(exports, ["IotSoftwarePackageVersion"], () => require("./iotSoftwarePackageVersion"));

export { IotThingArgs, IotThingState } from "./iotThing";
export type IotThing = import("./iotThing").IotThing;
export const IotThing: typeof import("./iotThing").IotThing = null as any;
utilities.lazyLoad(exports, ["IotThing"], () => require("./iotThing"));

export { IotThingGroupArgs, IotThingGroupState } from "./iotThingGroup";
export type IotThingGroup = import("./iotThingGroup").IotThingGroup;
export const IotThingGroup: typeof import("./iotThingGroup").IotThingGroup = null as any;
utilities.lazyLoad(exports, ["IotThingGroup"], () => require("./iotThingGroup"));

export { IotThingTypeArgs, IotThingTypeState } from "./iotThingType";
export type IotThingType = import("./iotThingType").IotThingType;
export const IotThingType: typeof import("./iotThingType").IotThingType = null as any;
utilities.lazyLoad(exports, ["IotThingType"], () => require("./iotThingType"));

export { IotTopicRuleArgs, IotTopicRuleState } from "./iotTopicRule";
export type IotTopicRule = import("./iotTopicRule").IotTopicRule;
export const IotTopicRule: typeof import("./iotTopicRule").IotTopicRule = null as any;
utilities.lazyLoad(exports, ["IotTopicRule"], () => require("./iotTopicRule"));

export { IotTopicRuleDestinationArgs, IotTopicRuleDestinationState } from "./iotTopicRuleDestination";
export type IotTopicRuleDestination = import("./iotTopicRuleDestination").IotTopicRuleDestination;
export const IotTopicRuleDestination: typeof import("./iotTopicRuleDestination").IotTopicRuleDestination = null as any;
utilities.lazyLoad(exports, ["IotTopicRuleDestination"], () => require("./iotTopicRuleDestination"));

export { IotanalyticsChannelArgs, IotanalyticsChannelState } from "./iotanalyticsChannel";
export type IotanalyticsChannel = import("./iotanalyticsChannel").IotanalyticsChannel;
export const IotanalyticsChannel: typeof import("./iotanalyticsChannel").IotanalyticsChannel = null as any;
utilities.lazyLoad(exports, ["IotanalyticsChannel"], () => require("./iotanalyticsChannel"));

export { IotanalyticsDatasetArgs, IotanalyticsDatasetState } from "./iotanalyticsDataset";
export type IotanalyticsDataset = import("./iotanalyticsDataset").IotanalyticsDataset;
export const IotanalyticsDataset: typeof import("./iotanalyticsDataset").IotanalyticsDataset = null as any;
utilities.lazyLoad(exports, ["IotanalyticsDataset"], () => require("./iotanalyticsDataset"));

export { IotanalyticsDatastoreArgs, IotanalyticsDatastoreState } from "./iotanalyticsDatastore";
export type IotanalyticsDatastore = import("./iotanalyticsDatastore").IotanalyticsDatastore;
export const IotanalyticsDatastore: typeof import("./iotanalyticsDatastore").IotanalyticsDatastore = null as any;
utilities.lazyLoad(exports, ["IotanalyticsDatastore"], () => require("./iotanalyticsDatastore"));

export { IotanalyticsPipelineArgs, IotanalyticsPipelineState } from "./iotanalyticsPipeline";
export type IotanalyticsPipeline = import("./iotanalyticsPipeline").IotanalyticsPipeline;
export const IotanalyticsPipeline: typeof import("./iotanalyticsPipeline").IotanalyticsPipeline = null as any;
utilities.lazyLoad(exports, ["IotanalyticsPipeline"], () => require("./iotanalyticsPipeline"));

export { IotcoredeviceadvisorSuiteDefinitionArgs, IotcoredeviceadvisorSuiteDefinitionState } from "./iotcoredeviceadvisorSuiteDefinition";
export type IotcoredeviceadvisorSuiteDefinition = import("./iotcoredeviceadvisorSuiteDefinition").IotcoredeviceadvisorSuiteDefinition;
export const IotcoredeviceadvisorSuiteDefinition: typeof import("./iotcoredeviceadvisorSuiteDefinition").IotcoredeviceadvisorSuiteDefinition = null as any;
utilities.lazyLoad(exports, ["IotcoredeviceadvisorSuiteDefinition"], () => require("./iotcoredeviceadvisorSuiteDefinition"));

export { IoteventsAlarmModelArgs, IoteventsAlarmModelState } from "./ioteventsAlarmModel";
export type IoteventsAlarmModel = import("./ioteventsAlarmModel").IoteventsAlarmModel;
export const IoteventsAlarmModel: typeof import("./ioteventsAlarmModel").IoteventsAlarmModel = null as any;
utilities.lazyLoad(exports, ["IoteventsAlarmModel"], () => require("./ioteventsAlarmModel"));

export { IoteventsDetectorModelArgs, IoteventsDetectorModelState } from "./ioteventsDetectorModel";
export type IoteventsDetectorModel = import("./ioteventsDetectorModel").IoteventsDetectorModel;
export const IoteventsDetectorModel: typeof import("./ioteventsDetectorModel").IoteventsDetectorModel = null as any;
utilities.lazyLoad(exports, ["IoteventsDetectorModel"], () => require("./ioteventsDetectorModel"));

export { IoteventsInputArgs, IoteventsInputState } from "./ioteventsInput";
export type IoteventsInput = import("./ioteventsInput").IoteventsInput;
export const IoteventsInput: typeof import("./ioteventsInput").IoteventsInput = null as any;
utilities.lazyLoad(exports, ["IoteventsInput"], () => require("./ioteventsInput"));

export { IotfleethubApplicationArgs, IotfleethubApplicationState } from "./iotfleethubApplication";
export type IotfleethubApplication = import("./iotfleethubApplication").IotfleethubApplication;
export const IotfleethubApplication: typeof import("./iotfleethubApplication").IotfleethubApplication = null as any;
utilities.lazyLoad(exports, ["IotfleethubApplication"], () => require("./iotfleethubApplication"));

export { IotfleetwiseCampaignArgs, IotfleetwiseCampaignState } from "./iotfleetwiseCampaign";
export type IotfleetwiseCampaign = import("./iotfleetwiseCampaign").IotfleetwiseCampaign;
export const IotfleetwiseCampaign: typeof import("./iotfleetwiseCampaign").IotfleetwiseCampaign = null as any;
utilities.lazyLoad(exports, ["IotfleetwiseCampaign"], () => require("./iotfleetwiseCampaign"));

export { IotfleetwiseFleetArgs, IotfleetwiseFleetState } from "./iotfleetwiseFleet";
export type IotfleetwiseFleet = import("./iotfleetwiseFleet").IotfleetwiseFleet;
export const IotfleetwiseFleet: typeof import("./iotfleetwiseFleet").IotfleetwiseFleet = null as any;
utilities.lazyLoad(exports, ["IotfleetwiseFleet"], () => require("./iotfleetwiseFleet"));

export { IotfleetwiseModelManifestArgs, IotfleetwiseModelManifestState } from "./iotfleetwiseModelManifest";
export type IotfleetwiseModelManifest = import("./iotfleetwiseModelManifest").IotfleetwiseModelManifest;
export const IotfleetwiseModelManifest: typeof import("./iotfleetwiseModelManifest").IotfleetwiseModelManifest = null as any;
utilities.lazyLoad(exports, ["IotfleetwiseModelManifest"], () => require("./iotfleetwiseModelManifest"));

export { IotfleetwiseSignalCatalogArgs, IotfleetwiseSignalCatalogState } from "./iotfleetwiseSignalCatalog";
export type IotfleetwiseSignalCatalog = import("./iotfleetwiseSignalCatalog").IotfleetwiseSignalCatalog;
export const IotfleetwiseSignalCatalog: typeof import("./iotfleetwiseSignalCatalog").IotfleetwiseSignalCatalog = null as any;
utilities.lazyLoad(exports, ["IotfleetwiseSignalCatalog"], () => require("./iotfleetwiseSignalCatalog"));

export { IotfleetwiseVehicleArgs, IotfleetwiseVehicleState } from "./iotfleetwiseVehicle";
export type IotfleetwiseVehicle = import("./iotfleetwiseVehicle").IotfleetwiseVehicle;
export const IotfleetwiseVehicle: typeof import("./iotfleetwiseVehicle").IotfleetwiseVehicle = null as any;
utilities.lazyLoad(exports, ["IotfleetwiseVehicle"], () => require("./iotfleetwiseVehicle"));

export { IotsitewiseAccessPolicyArgs, IotsitewiseAccessPolicyState } from "./iotsitewiseAccessPolicy";
export type IotsitewiseAccessPolicy = import("./iotsitewiseAccessPolicy").IotsitewiseAccessPolicy;
export const IotsitewiseAccessPolicy: typeof import("./iotsitewiseAccessPolicy").IotsitewiseAccessPolicy = null as any;
utilities.lazyLoad(exports, ["IotsitewiseAccessPolicy"], () => require("./iotsitewiseAccessPolicy"));

export { IotsitewiseAssetArgs, IotsitewiseAssetState } from "./iotsitewiseAsset";
export type IotsitewiseAsset = import("./iotsitewiseAsset").IotsitewiseAsset;
export const IotsitewiseAsset: typeof import("./iotsitewiseAsset").IotsitewiseAsset = null as any;
utilities.lazyLoad(exports, ["IotsitewiseAsset"], () => require("./iotsitewiseAsset"));

export { IotsitewiseAssetModelArgs, IotsitewiseAssetModelState } from "./iotsitewiseAssetModel";
export type IotsitewiseAssetModel = import("./iotsitewiseAssetModel").IotsitewiseAssetModel;
export const IotsitewiseAssetModel: typeof import("./iotsitewiseAssetModel").IotsitewiseAssetModel = null as any;
utilities.lazyLoad(exports, ["IotsitewiseAssetModel"], () => require("./iotsitewiseAssetModel"));

export { IotsitewiseDashboardArgs, IotsitewiseDashboardState } from "./iotsitewiseDashboard";
export type IotsitewiseDashboard = import("./iotsitewiseDashboard").IotsitewiseDashboard;
export const IotsitewiseDashboard: typeof import("./iotsitewiseDashboard").IotsitewiseDashboard = null as any;
utilities.lazyLoad(exports, ["IotsitewiseDashboard"], () => require("./iotsitewiseDashboard"));

export { IotsitewiseGatewayArgs, IotsitewiseGatewayState } from "./iotsitewiseGateway";
export type IotsitewiseGateway = import("./iotsitewiseGateway").IotsitewiseGateway;
export const IotsitewiseGateway: typeof import("./iotsitewiseGateway").IotsitewiseGateway = null as any;
utilities.lazyLoad(exports, ["IotsitewiseGateway"], () => require("./iotsitewiseGateway"));

export { IotsitewisePortalArgs, IotsitewisePortalState } from "./iotsitewisePortal";
export type IotsitewisePortal = import("./iotsitewisePortal").IotsitewisePortal;
export const IotsitewisePortal: typeof import("./iotsitewisePortal").IotsitewisePortal = null as any;
utilities.lazyLoad(exports, ["IotsitewisePortal"], () => require("./iotsitewisePortal"));

export { IotsitewiseProjectArgs, IotsitewiseProjectState } from "./iotsitewiseProject";
export type IotsitewiseProject = import("./iotsitewiseProject").IotsitewiseProject;
export const IotsitewiseProject: typeof import("./iotsitewiseProject").IotsitewiseProject = null as any;
utilities.lazyLoad(exports, ["IotsitewiseProject"], () => require("./iotsitewiseProject"));

export { IottwinmakerSceneArgs, IottwinmakerSceneState } from "./iottwinmakerScene";
export type IottwinmakerScene = import("./iottwinmakerScene").IottwinmakerScene;
export const IottwinmakerScene: typeof import("./iottwinmakerScene").IottwinmakerScene = null as any;
utilities.lazyLoad(exports, ["IottwinmakerScene"], () => require("./iottwinmakerScene"));

export { IottwinmakerSyncJobArgs, IottwinmakerSyncJobState } from "./iottwinmakerSyncJob";
export type IottwinmakerSyncJob = import("./iottwinmakerSyncJob").IottwinmakerSyncJob;
export const IottwinmakerSyncJob: typeof import("./iottwinmakerSyncJob").IottwinmakerSyncJob = null as any;
utilities.lazyLoad(exports, ["IottwinmakerSyncJob"], () => require("./iottwinmakerSyncJob"));

export { IottwinmakerWorkspaceArgs, IottwinmakerWorkspaceState } from "./iottwinmakerWorkspace";
export type IottwinmakerWorkspace = import("./iottwinmakerWorkspace").IottwinmakerWorkspace;
export const IottwinmakerWorkspace: typeof import("./iottwinmakerWorkspace").IottwinmakerWorkspace = null as any;
utilities.lazyLoad(exports, ["IottwinmakerWorkspace"], () => require("./iottwinmakerWorkspace"));

export { IotwirelessDestinationArgs, IotwirelessDestinationState } from "./iotwirelessDestination";
export type IotwirelessDestination = import("./iotwirelessDestination").IotwirelessDestination;
export const IotwirelessDestination: typeof import("./iotwirelessDestination").IotwirelessDestination = null as any;
utilities.lazyLoad(exports, ["IotwirelessDestination"], () => require("./iotwirelessDestination"));

export { IotwirelessDeviceProfileArgs, IotwirelessDeviceProfileState } from "./iotwirelessDeviceProfile";
export type IotwirelessDeviceProfile = import("./iotwirelessDeviceProfile").IotwirelessDeviceProfile;
export const IotwirelessDeviceProfile: typeof import("./iotwirelessDeviceProfile").IotwirelessDeviceProfile = null as any;
utilities.lazyLoad(exports, ["IotwirelessDeviceProfile"], () => require("./iotwirelessDeviceProfile"));

export { IotwirelessFuotaTaskArgs, IotwirelessFuotaTaskState } from "./iotwirelessFuotaTask";
export type IotwirelessFuotaTask = import("./iotwirelessFuotaTask").IotwirelessFuotaTask;
export const IotwirelessFuotaTask: typeof import("./iotwirelessFuotaTask").IotwirelessFuotaTask = null as any;
utilities.lazyLoad(exports, ["IotwirelessFuotaTask"], () => require("./iotwirelessFuotaTask"));

export { IotwirelessMulticastGroupArgs, IotwirelessMulticastGroupState } from "./iotwirelessMulticastGroup";
export type IotwirelessMulticastGroup = import("./iotwirelessMulticastGroup").IotwirelessMulticastGroup;
export const IotwirelessMulticastGroup: typeof import("./iotwirelessMulticastGroup").IotwirelessMulticastGroup = null as any;
utilities.lazyLoad(exports, ["IotwirelessMulticastGroup"], () => require("./iotwirelessMulticastGroup"));

export { IotwirelessNetworkAnalyzerConfigurationArgs, IotwirelessNetworkAnalyzerConfigurationState } from "./iotwirelessNetworkAnalyzerConfiguration";
export type IotwirelessNetworkAnalyzerConfiguration = import("./iotwirelessNetworkAnalyzerConfiguration").IotwirelessNetworkAnalyzerConfiguration;
export const IotwirelessNetworkAnalyzerConfiguration: typeof import("./iotwirelessNetworkAnalyzerConfiguration").IotwirelessNetworkAnalyzerConfiguration = null as any;
utilities.lazyLoad(exports, ["IotwirelessNetworkAnalyzerConfiguration"], () => require("./iotwirelessNetworkAnalyzerConfiguration"));

export { IotwirelessPartnerAccountArgs, IotwirelessPartnerAccountState } from "./iotwirelessPartnerAccount";
export type IotwirelessPartnerAccount = import("./iotwirelessPartnerAccount").IotwirelessPartnerAccount;
export const IotwirelessPartnerAccount: typeof import("./iotwirelessPartnerAccount").IotwirelessPartnerAccount = null as any;
utilities.lazyLoad(exports, ["IotwirelessPartnerAccount"], () => require("./iotwirelessPartnerAccount"));

export { IotwirelessServiceProfileArgs, IotwirelessServiceProfileState } from "./iotwirelessServiceProfile";
export type IotwirelessServiceProfile = import("./iotwirelessServiceProfile").IotwirelessServiceProfile;
export const IotwirelessServiceProfile: typeof import("./iotwirelessServiceProfile").IotwirelessServiceProfile = null as any;
utilities.lazyLoad(exports, ["IotwirelessServiceProfile"], () => require("./iotwirelessServiceProfile"));

export { IotwirelessTaskDefinitionArgs, IotwirelessTaskDefinitionState } from "./iotwirelessTaskDefinition";
export type IotwirelessTaskDefinition = import("./iotwirelessTaskDefinition").IotwirelessTaskDefinition;
export const IotwirelessTaskDefinition: typeof import("./iotwirelessTaskDefinition").IotwirelessTaskDefinition = null as any;
utilities.lazyLoad(exports, ["IotwirelessTaskDefinition"], () => require("./iotwirelessTaskDefinition"));

export { IotwirelessWirelessDeviceArgs, IotwirelessWirelessDeviceState } from "./iotwirelessWirelessDevice";
export type IotwirelessWirelessDevice = import("./iotwirelessWirelessDevice").IotwirelessWirelessDevice;
export const IotwirelessWirelessDevice: typeof import("./iotwirelessWirelessDevice").IotwirelessWirelessDevice = null as any;
utilities.lazyLoad(exports, ["IotwirelessWirelessDevice"], () => require("./iotwirelessWirelessDevice"));

export { IotwirelessWirelessDeviceImportTaskArgs, IotwirelessWirelessDeviceImportTaskState } from "./iotwirelessWirelessDeviceImportTask";
export type IotwirelessWirelessDeviceImportTask = import("./iotwirelessWirelessDeviceImportTask").IotwirelessWirelessDeviceImportTask;
export const IotwirelessWirelessDeviceImportTask: typeof import("./iotwirelessWirelessDeviceImportTask").IotwirelessWirelessDeviceImportTask = null as any;
utilities.lazyLoad(exports, ["IotwirelessWirelessDeviceImportTask"], () => require("./iotwirelessWirelessDeviceImportTask"));

export { IotwirelessWirelessGatewayArgs, IotwirelessWirelessGatewayState } from "./iotwirelessWirelessGateway";
export type IotwirelessWirelessGateway = import("./iotwirelessWirelessGateway").IotwirelessWirelessGateway;
export const IotwirelessWirelessGateway: typeof import("./iotwirelessWirelessGateway").IotwirelessWirelessGateway = null as any;
utilities.lazyLoad(exports, ["IotwirelessWirelessGateway"], () => require("./iotwirelessWirelessGateway"));

export { IvsChannelArgs, IvsChannelState } from "./ivsChannel";
export type IvsChannel = import("./ivsChannel").IvsChannel;
export const IvsChannel: typeof import("./ivsChannel").IvsChannel = null as any;
utilities.lazyLoad(exports, ["IvsChannel"], () => require("./ivsChannel"));

export { IvsEncoderConfigurationArgs, IvsEncoderConfigurationState } from "./ivsEncoderConfiguration";
export type IvsEncoderConfiguration = import("./ivsEncoderConfiguration").IvsEncoderConfiguration;
export const IvsEncoderConfiguration: typeof import("./ivsEncoderConfiguration").IvsEncoderConfiguration = null as any;
utilities.lazyLoad(exports, ["IvsEncoderConfiguration"], () => require("./ivsEncoderConfiguration"));

export { IvsPlaybackKeyPairArgs, IvsPlaybackKeyPairState } from "./ivsPlaybackKeyPair";
export type IvsPlaybackKeyPair = import("./ivsPlaybackKeyPair").IvsPlaybackKeyPair;
export const IvsPlaybackKeyPair: typeof import("./ivsPlaybackKeyPair").IvsPlaybackKeyPair = null as any;
utilities.lazyLoad(exports, ["IvsPlaybackKeyPair"], () => require("./ivsPlaybackKeyPair"));

export { IvsPlaybackRestrictionPolicyArgs, IvsPlaybackRestrictionPolicyState } from "./ivsPlaybackRestrictionPolicy";
export type IvsPlaybackRestrictionPolicy = import("./ivsPlaybackRestrictionPolicy").IvsPlaybackRestrictionPolicy;
export const IvsPlaybackRestrictionPolicy: typeof import("./ivsPlaybackRestrictionPolicy").IvsPlaybackRestrictionPolicy = null as any;
utilities.lazyLoad(exports, ["IvsPlaybackRestrictionPolicy"], () => require("./ivsPlaybackRestrictionPolicy"));

export { IvsPublicKeyArgs, IvsPublicKeyState } from "./ivsPublicKey";
export type IvsPublicKey = import("./ivsPublicKey").IvsPublicKey;
export const IvsPublicKey: typeof import("./ivsPublicKey").IvsPublicKey = null as any;
utilities.lazyLoad(exports, ["IvsPublicKey"], () => require("./ivsPublicKey"));

export { IvsRecordingConfigurationArgs, IvsRecordingConfigurationState } from "./ivsRecordingConfiguration";
export type IvsRecordingConfiguration = import("./ivsRecordingConfiguration").IvsRecordingConfiguration;
export const IvsRecordingConfiguration: typeof import("./ivsRecordingConfiguration").IvsRecordingConfiguration = null as any;
utilities.lazyLoad(exports, ["IvsRecordingConfiguration"], () => require("./ivsRecordingConfiguration"));

export { IvsStageArgs, IvsStageState } from "./ivsStage";
export type IvsStage = import("./ivsStage").IvsStage;
export const IvsStage: typeof import("./ivsStage").IvsStage = null as any;
utilities.lazyLoad(exports, ["IvsStage"], () => require("./ivsStage"));

export { IvsStorageConfigurationArgs, IvsStorageConfigurationState } from "./ivsStorageConfiguration";
export type IvsStorageConfiguration = import("./ivsStorageConfiguration").IvsStorageConfiguration;
export const IvsStorageConfiguration: typeof import("./ivsStorageConfiguration").IvsStorageConfiguration = null as any;
utilities.lazyLoad(exports, ["IvsStorageConfiguration"], () => require("./ivsStorageConfiguration"));

export { IvsStreamKeyArgs, IvsStreamKeyState } from "./ivsStreamKey";
export type IvsStreamKey = import("./ivsStreamKey").IvsStreamKey;
export const IvsStreamKey: typeof import("./ivsStreamKey").IvsStreamKey = null as any;
utilities.lazyLoad(exports, ["IvsStreamKey"], () => require("./ivsStreamKey"));

export { IvschatLoggingConfigurationArgs, IvschatLoggingConfigurationState } from "./ivschatLoggingConfiguration";
export type IvschatLoggingConfiguration = import("./ivschatLoggingConfiguration").IvschatLoggingConfiguration;
export const IvschatLoggingConfiguration: typeof import("./ivschatLoggingConfiguration").IvschatLoggingConfiguration = null as any;
utilities.lazyLoad(exports, ["IvschatLoggingConfiguration"], () => require("./ivschatLoggingConfiguration"));

export { IvschatRoomArgs, IvschatRoomState } from "./ivschatRoom";
export type IvschatRoom = import("./ivschatRoom").IvschatRoom;
export const IvschatRoom: typeof import("./ivschatRoom").IvschatRoom = null as any;
utilities.lazyLoad(exports, ["IvschatRoom"], () => require("./ivschatRoom"));

export { KafkaconnectConnectorArgs, KafkaconnectConnectorState } from "./kafkaconnectConnector";
export type KafkaconnectConnector = import("./kafkaconnectConnector").KafkaconnectConnector;
export const KafkaconnectConnector: typeof import("./kafkaconnectConnector").KafkaconnectConnector = null as any;
utilities.lazyLoad(exports, ["KafkaconnectConnector"], () => require("./kafkaconnectConnector"));

export { KafkaconnectCustomPluginArgs, KafkaconnectCustomPluginState } from "./kafkaconnectCustomPlugin";
export type KafkaconnectCustomPlugin = import("./kafkaconnectCustomPlugin").KafkaconnectCustomPlugin;
export const KafkaconnectCustomPlugin: typeof import("./kafkaconnectCustomPlugin").KafkaconnectCustomPlugin = null as any;
utilities.lazyLoad(exports, ["KafkaconnectCustomPlugin"], () => require("./kafkaconnectCustomPlugin"));

export { KafkaconnectWorkerConfigurationArgs, KafkaconnectWorkerConfigurationState } from "./kafkaconnectWorkerConfiguration";
export type KafkaconnectWorkerConfiguration = import("./kafkaconnectWorkerConfiguration").KafkaconnectWorkerConfiguration;
export const KafkaconnectWorkerConfiguration: typeof import("./kafkaconnectWorkerConfiguration").KafkaconnectWorkerConfiguration = null as any;
utilities.lazyLoad(exports, ["KafkaconnectWorkerConfiguration"], () => require("./kafkaconnectWorkerConfiguration"));

export { KendraDataSourceArgs, KendraDataSourceState } from "./kendraDataSource";
export type KendraDataSource = import("./kendraDataSource").KendraDataSource;
export const KendraDataSource: typeof import("./kendraDataSource").KendraDataSource = null as any;
utilities.lazyLoad(exports, ["KendraDataSource"], () => require("./kendraDataSource"));

export { KendraFaqArgs, KendraFaqState } from "./kendraFaq";
export type KendraFaq = import("./kendraFaq").KendraFaq;
export const KendraFaq: typeof import("./kendraFaq").KendraFaq = null as any;
utilities.lazyLoad(exports, ["KendraFaq"], () => require("./kendraFaq"));

export { KendraIndexArgs, KendraIndexState } from "./kendraIndex";
export type KendraIndex = import("./kendraIndex").KendraIndex;
export const KendraIndex: typeof import("./kendraIndex").KendraIndex = null as any;
utilities.lazyLoad(exports, ["KendraIndex"], () => require("./kendraIndex"));

export { KendrarankingExecutionPlanArgs, KendrarankingExecutionPlanState } from "./kendrarankingExecutionPlan";
export type KendrarankingExecutionPlan = import("./kendrarankingExecutionPlan").KendrarankingExecutionPlan;
export const KendrarankingExecutionPlan: typeof import("./kendrarankingExecutionPlan").KendrarankingExecutionPlan = null as any;
utilities.lazyLoad(exports, ["KendrarankingExecutionPlan"], () => require("./kendrarankingExecutionPlan"));

export { KinesisStreamArgs, KinesisStreamState } from "./kinesisStream";
export type KinesisStream = import("./kinesisStream").KinesisStream;
export const KinesisStream: typeof import("./kinesisStream").KinesisStream = null as any;
utilities.lazyLoad(exports, ["KinesisStream"], () => require("./kinesisStream"));

export { Kinesisanalyticsv2ApplicationArgs, Kinesisanalyticsv2ApplicationState } from "./kinesisanalyticsv2Application";
export type Kinesisanalyticsv2Application = import("./kinesisanalyticsv2Application").Kinesisanalyticsv2Application;
export const Kinesisanalyticsv2Application: typeof import("./kinesisanalyticsv2Application").Kinesisanalyticsv2Application = null as any;
utilities.lazyLoad(exports, ["Kinesisanalyticsv2Application"], () => require("./kinesisanalyticsv2Application"));

export { KinesisfirehoseDeliveryStreamArgs, KinesisfirehoseDeliveryStreamState } from "./kinesisfirehoseDeliveryStream";
export type KinesisfirehoseDeliveryStream = import("./kinesisfirehoseDeliveryStream").KinesisfirehoseDeliveryStream;
export const KinesisfirehoseDeliveryStream: typeof import("./kinesisfirehoseDeliveryStream").KinesisfirehoseDeliveryStream = null as any;
utilities.lazyLoad(exports, ["KinesisfirehoseDeliveryStream"], () => require("./kinesisfirehoseDeliveryStream"));

export { KinesisvideoSignalingChannelArgs, KinesisvideoSignalingChannelState } from "./kinesisvideoSignalingChannel";
export type KinesisvideoSignalingChannel = import("./kinesisvideoSignalingChannel").KinesisvideoSignalingChannel;
export const KinesisvideoSignalingChannel: typeof import("./kinesisvideoSignalingChannel").KinesisvideoSignalingChannel = null as any;
utilities.lazyLoad(exports, ["KinesisvideoSignalingChannel"], () => require("./kinesisvideoSignalingChannel"));

export { KinesisvideoStreamArgs, KinesisvideoStreamState } from "./kinesisvideoStream";
export type KinesisvideoStream = import("./kinesisvideoStream").KinesisvideoStream;
export const KinesisvideoStream: typeof import("./kinesisvideoStream").KinesisvideoStream = null as any;
utilities.lazyLoad(exports, ["KinesisvideoStream"], () => require("./kinesisvideoStream"));

export { KmsAliasArgs, KmsAliasState } from "./kmsAlias";
export type KmsAlias = import("./kmsAlias").KmsAlias;
export const KmsAlias: typeof import("./kmsAlias").KmsAlias = null as any;
utilities.lazyLoad(exports, ["KmsAlias"], () => require("./kmsAlias"));

export { KmsKeyArgs, KmsKeyState } from "./kmsKey";
export type KmsKey = import("./kmsKey").KmsKey;
export const KmsKey: typeof import("./kmsKey").KmsKey = null as any;
utilities.lazyLoad(exports, ["KmsKey"], () => require("./kmsKey"));

export { KmsReplicaKeyArgs, KmsReplicaKeyState } from "./kmsReplicaKey";
export type KmsReplicaKey = import("./kmsReplicaKey").KmsReplicaKey;
export const KmsReplicaKey: typeof import("./kmsReplicaKey").KmsReplicaKey = null as any;
utilities.lazyLoad(exports, ["KmsReplicaKey"], () => require("./kmsReplicaKey"));

export { LakeformationDataCellsFilterArgs, LakeformationDataCellsFilterState } from "./lakeformationDataCellsFilter";
export type LakeformationDataCellsFilter = import("./lakeformationDataCellsFilter").LakeformationDataCellsFilter;
export const LakeformationDataCellsFilter: typeof import("./lakeformationDataCellsFilter").LakeformationDataCellsFilter = null as any;
utilities.lazyLoad(exports, ["LakeformationDataCellsFilter"], () => require("./lakeformationDataCellsFilter"));

export { LakeformationPrincipalPermissionsArgs, LakeformationPrincipalPermissionsState } from "./lakeformationPrincipalPermissions";
export type LakeformationPrincipalPermissions = import("./lakeformationPrincipalPermissions").LakeformationPrincipalPermissions;
export const LakeformationPrincipalPermissions: typeof import("./lakeformationPrincipalPermissions").LakeformationPrincipalPermissions = null as any;
utilities.lazyLoad(exports, ["LakeformationPrincipalPermissions"], () => require("./lakeformationPrincipalPermissions"));

export { LakeformationTagArgs, LakeformationTagState } from "./lakeformationTag";
export type LakeformationTag = import("./lakeformationTag").LakeformationTag;
export const LakeformationTag: typeof import("./lakeformationTag").LakeformationTag = null as any;
utilities.lazyLoad(exports, ["LakeformationTag"], () => require("./lakeformationTag"));

export { LakeformationTagAssociationArgs, LakeformationTagAssociationState } from "./lakeformationTagAssociation";
export type LakeformationTagAssociation = import("./lakeformationTagAssociation").LakeformationTagAssociation;
export const LakeformationTagAssociation: typeof import("./lakeformationTagAssociation").LakeformationTagAssociation = null as any;
utilities.lazyLoad(exports, ["LakeformationTagAssociation"], () => require("./lakeformationTagAssociation"));

export { LambdaAliasArgs, LambdaAliasState } from "./lambdaAlias";
export type LambdaAlias = import("./lambdaAlias").LambdaAlias;
export const LambdaAlias: typeof import("./lambdaAlias").LambdaAlias = null as any;
utilities.lazyLoad(exports, ["LambdaAlias"], () => require("./lambdaAlias"));

export { LambdaCodeSigningConfigArgs, LambdaCodeSigningConfigState } from "./lambdaCodeSigningConfig";
export type LambdaCodeSigningConfig = import("./lambdaCodeSigningConfig").LambdaCodeSigningConfig;
export const LambdaCodeSigningConfig: typeof import("./lambdaCodeSigningConfig").LambdaCodeSigningConfig = null as any;
utilities.lazyLoad(exports, ["LambdaCodeSigningConfig"], () => require("./lambdaCodeSigningConfig"));

export { LambdaEventInvokeConfigArgs, LambdaEventInvokeConfigState } from "./lambdaEventInvokeConfig";
export type LambdaEventInvokeConfig = import("./lambdaEventInvokeConfig").LambdaEventInvokeConfig;
export const LambdaEventInvokeConfig: typeof import("./lambdaEventInvokeConfig").LambdaEventInvokeConfig = null as any;
utilities.lazyLoad(exports, ["LambdaEventInvokeConfig"], () => require("./lambdaEventInvokeConfig"));

export { LambdaEventSourceMappingArgs, LambdaEventSourceMappingState } from "./lambdaEventSourceMapping";
export type LambdaEventSourceMapping = import("./lambdaEventSourceMapping").LambdaEventSourceMapping;
export const LambdaEventSourceMapping: typeof import("./lambdaEventSourceMapping").LambdaEventSourceMapping = null as any;
utilities.lazyLoad(exports, ["LambdaEventSourceMapping"], () => require("./lambdaEventSourceMapping"));

export { LambdaFunctionArgs, LambdaFunctionState } from "./lambdaFunction";
export type LambdaFunction = import("./lambdaFunction").LambdaFunction;
export const LambdaFunction: typeof import("./lambdaFunction").LambdaFunction = null as any;
utilities.lazyLoad(exports, ["LambdaFunction"], () => require("./lambdaFunction"));

export { LambdaLayerVersionArgs, LambdaLayerVersionState } from "./lambdaLayerVersion";
export type LambdaLayerVersion = import("./lambdaLayerVersion").LambdaLayerVersion;
export const LambdaLayerVersion: typeof import("./lambdaLayerVersion").LambdaLayerVersion = null as any;
utilities.lazyLoad(exports, ["LambdaLayerVersion"], () => require("./lambdaLayerVersion"));

export { LambdaLayerVersionPermissionArgs, LambdaLayerVersionPermissionState } from "./lambdaLayerVersionPermission";
export type LambdaLayerVersionPermission = import("./lambdaLayerVersionPermission").LambdaLayerVersionPermission;
export const LambdaLayerVersionPermission: typeof import("./lambdaLayerVersionPermission").LambdaLayerVersionPermission = null as any;
utilities.lazyLoad(exports, ["LambdaLayerVersionPermission"], () => require("./lambdaLayerVersionPermission"));

export { LambdaPermissionArgs, LambdaPermissionState } from "./lambdaPermission";
export type LambdaPermission = import("./lambdaPermission").LambdaPermission;
export const LambdaPermission: typeof import("./lambdaPermission").LambdaPermission = null as any;
utilities.lazyLoad(exports, ["LambdaPermission"], () => require("./lambdaPermission"));

export { LambdaUrlArgs, LambdaUrlState } from "./lambdaUrl";
export type LambdaUrl = import("./lambdaUrl").LambdaUrl;
export const LambdaUrl: typeof import("./lambdaUrl").LambdaUrl = null as any;
utilities.lazyLoad(exports, ["LambdaUrl"], () => require("./lambdaUrl"));

export { LambdaVersionArgs, LambdaVersionState } from "./lambdaVersion";
export type LambdaVersion = import("./lambdaVersion").LambdaVersion;
export const LambdaVersion: typeof import("./lambdaVersion").LambdaVersion = null as any;
utilities.lazyLoad(exports, ["LambdaVersion"], () => require("./lambdaVersion"));

export { LaunchwizardDeploymentArgs, LaunchwizardDeploymentState } from "./launchwizardDeployment";
export type LaunchwizardDeployment = import("./launchwizardDeployment").LaunchwizardDeployment;
export const LaunchwizardDeployment: typeof import("./launchwizardDeployment").LaunchwizardDeployment = null as any;
utilities.lazyLoad(exports, ["LaunchwizardDeployment"], () => require("./launchwizardDeployment"));

export { LexBotArgs, LexBotState } from "./lexBot";
export type LexBot = import("./lexBot").LexBot;
export const LexBot: typeof import("./lexBot").LexBot = null as any;
utilities.lazyLoad(exports, ["LexBot"], () => require("./lexBot"));

export { LexBotAliasArgs, LexBotAliasState } from "./lexBotAlias";
export type LexBotAlias = import("./lexBotAlias").LexBotAlias;
export const LexBotAlias: typeof import("./lexBotAlias").LexBotAlias = null as any;
utilities.lazyLoad(exports, ["LexBotAlias"], () => require("./lexBotAlias"));

export { LexBotVersionArgs, LexBotVersionState } from "./lexBotVersion";
export type LexBotVersion = import("./lexBotVersion").LexBotVersion;
export const LexBotVersion: typeof import("./lexBotVersion").LexBotVersion = null as any;
utilities.lazyLoad(exports, ["LexBotVersion"], () => require("./lexBotVersion"));

export { LexResourcePolicyArgs, LexResourcePolicyState } from "./lexResourcePolicy";
export type LexResourcePolicy = import("./lexResourcePolicy").LexResourcePolicy;
export const LexResourcePolicy: typeof import("./lexResourcePolicy").LexResourcePolicy = null as any;
utilities.lazyLoad(exports, ["LexResourcePolicy"], () => require("./lexResourcePolicy"));

export { LicensemanagerGrantArgs, LicensemanagerGrantState } from "./licensemanagerGrant";
export type LicensemanagerGrant = import("./licensemanagerGrant").LicensemanagerGrant;
export const LicensemanagerGrant: typeof import("./licensemanagerGrant").LicensemanagerGrant = null as any;
utilities.lazyLoad(exports, ["LicensemanagerGrant"], () => require("./licensemanagerGrant"));

export { LicensemanagerLicenseArgs, LicensemanagerLicenseState } from "./licensemanagerLicense";
export type LicensemanagerLicense = import("./licensemanagerLicense").LicensemanagerLicense;
export const LicensemanagerLicense: typeof import("./licensemanagerLicense").LicensemanagerLicense = null as any;
utilities.lazyLoad(exports, ["LicensemanagerLicense"], () => require("./licensemanagerLicense"));

export { LightsailAlarmArgs, LightsailAlarmState } from "./lightsailAlarm";
export type LightsailAlarm = import("./lightsailAlarm").LightsailAlarm;
export const LightsailAlarm: typeof import("./lightsailAlarm").LightsailAlarm = null as any;
utilities.lazyLoad(exports, ["LightsailAlarm"], () => require("./lightsailAlarm"));

export { LightsailBucketArgs, LightsailBucketState } from "./lightsailBucket";
export type LightsailBucket = import("./lightsailBucket").LightsailBucket;
export const LightsailBucket: typeof import("./lightsailBucket").LightsailBucket = null as any;
utilities.lazyLoad(exports, ["LightsailBucket"], () => require("./lightsailBucket"));

export { LightsailCertificateArgs, LightsailCertificateState } from "./lightsailCertificate";
export type LightsailCertificate = import("./lightsailCertificate").LightsailCertificate;
export const LightsailCertificate: typeof import("./lightsailCertificate").LightsailCertificate = null as any;
utilities.lazyLoad(exports, ["LightsailCertificate"], () => require("./lightsailCertificate"));

export { LightsailContainerArgs, LightsailContainerState } from "./lightsailContainer";
export type LightsailContainer = import("./lightsailContainer").LightsailContainer;
export const LightsailContainer: typeof import("./lightsailContainer").LightsailContainer = null as any;
utilities.lazyLoad(exports, ["LightsailContainer"], () => require("./lightsailContainer"));

export { LightsailDatabaseArgs, LightsailDatabaseState } from "./lightsailDatabase";
export type LightsailDatabase = import("./lightsailDatabase").LightsailDatabase;
export const LightsailDatabase: typeof import("./lightsailDatabase").LightsailDatabase = null as any;
utilities.lazyLoad(exports, ["LightsailDatabase"], () => require("./lightsailDatabase"));

export { LightsailDiskArgs, LightsailDiskState } from "./lightsailDisk";
export type LightsailDisk = import("./lightsailDisk").LightsailDisk;
export const LightsailDisk: typeof import("./lightsailDisk").LightsailDisk = null as any;
utilities.lazyLoad(exports, ["LightsailDisk"], () => require("./lightsailDisk"));

export { LightsailDistributionArgs, LightsailDistributionState } from "./lightsailDistribution";
export type LightsailDistribution = import("./lightsailDistribution").LightsailDistribution;
export const LightsailDistribution: typeof import("./lightsailDistribution").LightsailDistribution = null as any;
utilities.lazyLoad(exports, ["LightsailDistribution"], () => require("./lightsailDistribution"));

export { LightsailInstanceArgs, LightsailInstanceState } from "./lightsailInstance";
export type LightsailInstance = import("./lightsailInstance").LightsailInstance;
export const LightsailInstance: typeof import("./lightsailInstance").LightsailInstance = null as any;
utilities.lazyLoad(exports, ["LightsailInstance"], () => require("./lightsailInstance"));

export { LightsailLoadBalancerArgs, LightsailLoadBalancerState } from "./lightsailLoadBalancer";
export type LightsailLoadBalancer = import("./lightsailLoadBalancer").LightsailLoadBalancer;
export const LightsailLoadBalancer: typeof import("./lightsailLoadBalancer").LightsailLoadBalancer = null as any;
utilities.lazyLoad(exports, ["LightsailLoadBalancer"], () => require("./lightsailLoadBalancer"));

export { LightsailLoadBalancerTlsCertificateArgs, LightsailLoadBalancerTlsCertificateState } from "./lightsailLoadBalancerTlsCertificate";
export type LightsailLoadBalancerTlsCertificate = import("./lightsailLoadBalancerTlsCertificate").LightsailLoadBalancerTlsCertificate;
export const LightsailLoadBalancerTlsCertificate: typeof import("./lightsailLoadBalancerTlsCertificate").LightsailLoadBalancerTlsCertificate = null as any;
utilities.lazyLoad(exports, ["LightsailLoadBalancerTlsCertificate"], () => require("./lightsailLoadBalancerTlsCertificate"));

export { LightsailStaticIpArgs, LightsailStaticIpState } from "./lightsailStaticIp";
export type LightsailStaticIp = import("./lightsailStaticIp").LightsailStaticIp;
export const LightsailStaticIp: typeof import("./lightsailStaticIp").LightsailStaticIp = null as any;
utilities.lazyLoad(exports, ["LightsailStaticIp"], () => require("./lightsailStaticIp"));

export { LocationApiKeyArgs, LocationApiKeyState } from "./locationApiKey";
export type LocationApiKey = import("./locationApiKey").LocationApiKey;
export const LocationApiKey: typeof import("./locationApiKey").LocationApiKey = null as any;
utilities.lazyLoad(exports, ["LocationApiKey"], () => require("./locationApiKey"));

export { LocationGeofenceCollectionArgs, LocationGeofenceCollectionState } from "./locationGeofenceCollection";
export type LocationGeofenceCollection = import("./locationGeofenceCollection").LocationGeofenceCollection;
export const LocationGeofenceCollection: typeof import("./locationGeofenceCollection").LocationGeofenceCollection = null as any;
utilities.lazyLoad(exports, ["LocationGeofenceCollection"], () => require("./locationGeofenceCollection"));

export { LocationMapArgs, LocationMapState } from "./locationMap";
export type LocationMap = import("./locationMap").LocationMap;
export const LocationMap: typeof import("./locationMap").LocationMap = null as any;
utilities.lazyLoad(exports, ["LocationMap"], () => require("./locationMap"));

export { LocationPlaceIndexArgs, LocationPlaceIndexState } from "./locationPlaceIndex";
export type LocationPlaceIndex = import("./locationPlaceIndex").LocationPlaceIndex;
export const LocationPlaceIndex: typeof import("./locationPlaceIndex").LocationPlaceIndex = null as any;
utilities.lazyLoad(exports, ["LocationPlaceIndex"], () => require("./locationPlaceIndex"));

export { LocationRouteCalculatorArgs, LocationRouteCalculatorState } from "./locationRouteCalculator";
export type LocationRouteCalculator = import("./locationRouteCalculator").LocationRouteCalculator;
export const LocationRouteCalculator: typeof import("./locationRouteCalculator").LocationRouteCalculator = null as any;
utilities.lazyLoad(exports, ["LocationRouteCalculator"], () => require("./locationRouteCalculator"));

export { LocationTrackerArgs, LocationTrackerState } from "./locationTracker";
export type LocationTracker = import("./locationTracker").LocationTracker;
export const LocationTracker: typeof import("./locationTracker").LocationTracker = null as any;
utilities.lazyLoad(exports, ["LocationTracker"], () => require("./locationTracker"));

export { LocationTrackerConsumerArgs, LocationTrackerConsumerState } from "./locationTrackerConsumer";
export type LocationTrackerConsumer = import("./locationTrackerConsumer").LocationTrackerConsumer;
export const LocationTrackerConsumer: typeof import("./locationTrackerConsumer").LocationTrackerConsumer = null as any;
utilities.lazyLoad(exports, ["LocationTrackerConsumer"], () => require("./locationTrackerConsumer"));

export { LogsAccountPolicyArgs, LogsAccountPolicyState } from "./logsAccountPolicy";
export type LogsAccountPolicy = import("./logsAccountPolicy").LogsAccountPolicy;
export const LogsAccountPolicy: typeof import("./logsAccountPolicy").LogsAccountPolicy = null as any;
utilities.lazyLoad(exports, ["LogsAccountPolicy"], () => require("./logsAccountPolicy"));

export { LogsDeliveryArgs, LogsDeliveryState } from "./logsDelivery";
export type LogsDelivery = import("./logsDelivery").LogsDelivery;
export const LogsDelivery: typeof import("./logsDelivery").LogsDelivery = null as any;
utilities.lazyLoad(exports, ["LogsDelivery"], () => require("./logsDelivery"));

export { LogsDeliveryDestinationArgs, LogsDeliveryDestinationState } from "./logsDeliveryDestination";
export type LogsDeliveryDestination = import("./logsDeliveryDestination").LogsDeliveryDestination;
export const LogsDeliveryDestination: typeof import("./logsDeliveryDestination").LogsDeliveryDestination = null as any;
utilities.lazyLoad(exports, ["LogsDeliveryDestination"], () => require("./logsDeliveryDestination"));

export { LogsDeliverySourceArgs, LogsDeliverySourceState } from "./logsDeliverySource";
export type LogsDeliverySource = import("./logsDeliverySource").LogsDeliverySource;
export const LogsDeliverySource: typeof import("./logsDeliverySource").LogsDeliverySource = null as any;
utilities.lazyLoad(exports, ["LogsDeliverySource"], () => require("./logsDeliverySource"));

export { LogsDestinationArgs, LogsDestinationState } from "./logsDestination";
export type LogsDestination = import("./logsDestination").LogsDestination;
export const LogsDestination: typeof import("./logsDestination").LogsDestination = null as any;
utilities.lazyLoad(exports, ["LogsDestination"], () => require("./logsDestination"));

export { LogsLogAnomalyDetectorArgs, LogsLogAnomalyDetectorState } from "./logsLogAnomalyDetector";
export type LogsLogAnomalyDetector = import("./logsLogAnomalyDetector").LogsLogAnomalyDetector;
export const LogsLogAnomalyDetector: typeof import("./logsLogAnomalyDetector").LogsLogAnomalyDetector = null as any;
utilities.lazyLoad(exports, ["LogsLogAnomalyDetector"], () => require("./logsLogAnomalyDetector"));

export { LogsLogGroupArgs, LogsLogGroupState } from "./logsLogGroup";
export type LogsLogGroup = import("./logsLogGroup").LogsLogGroup;
export const LogsLogGroup: typeof import("./logsLogGroup").LogsLogGroup = null as any;
utilities.lazyLoad(exports, ["LogsLogGroup"], () => require("./logsLogGroup"));

export { LogsLogStreamArgs, LogsLogStreamState } from "./logsLogStream";
export type LogsLogStream = import("./logsLogStream").LogsLogStream;
export const LogsLogStream: typeof import("./logsLogStream").LogsLogStream = null as any;
utilities.lazyLoad(exports, ["LogsLogStream"], () => require("./logsLogStream"));

export { LogsMetricFilterArgs, LogsMetricFilterState } from "./logsMetricFilter";
export type LogsMetricFilter = import("./logsMetricFilter").LogsMetricFilter;
export const LogsMetricFilter: typeof import("./logsMetricFilter").LogsMetricFilter = null as any;
utilities.lazyLoad(exports, ["LogsMetricFilter"], () => require("./logsMetricFilter"));

export { LogsQueryDefinitionArgs, LogsQueryDefinitionState } from "./logsQueryDefinition";
export type LogsQueryDefinition = import("./logsQueryDefinition").LogsQueryDefinition;
export const LogsQueryDefinition: typeof import("./logsQueryDefinition").LogsQueryDefinition = null as any;
utilities.lazyLoad(exports, ["LogsQueryDefinition"], () => require("./logsQueryDefinition"));

export { LogsResourcePolicyArgs, LogsResourcePolicyState } from "./logsResourcePolicy";
export type LogsResourcePolicy = import("./logsResourcePolicy").LogsResourcePolicy;
export const LogsResourcePolicy: typeof import("./logsResourcePolicy").LogsResourcePolicy = null as any;
utilities.lazyLoad(exports, ["LogsResourcePolicy"], () => require("./logsResourcePolicy"));

export { LogsSubscriptionFilterArgs, LogsSubscriptionFilterState } from "./logsSubscriptionFilter";
export type LogsSubscriptionFilter = import("./logsSubscriptionFilter").LogsSubscriptionFilter;
export const LogsSubscriptionFilter: typeof import("./logsSubscriptionFilter").LogsSubscriptionFilter = null as any;
utilities.lazyLoad(exports, ["LogsSubscriptionFilter"], () => require("./logsSubscriptionFilter"));

export { LookoutequipmentInferenceSchedulerArgs, LookoutequipmentInferenceSchedulerState } from "./lookoutequipmentInferenceScheduler";
export type LookoutequipmentInferenceScheduler = import("./lookoutequipmentInferenceScheduler").LookoutequipmentInferenceScheduler;
export const LookoutequipmentInferenceScheduler: typeof import("./lookoutequipmentInferenceScheduler").LookoutequipmentInferenceScheduler = null as any;
utilities.lazyLoad(exports, ["LookoutequipmentInferenceScheduler"], () => require("./lookoutequipmentInferenceScheduler"));

export { LookoutmetricsAlertArgs, LookoutmetricsAlertState } from "./lookoutmetricsAlert";
export type LookoutmetricsAlert = import("./lookoutmetricsAlert").LookoutmetricsAlert;
export const LookoutmetricsAlert: typeof import("./lookoutmetricsAlert").LookoutmetricsAlert = null as any;
utilities.lazyLoad(exports, ["LookoutmetricsAlert"], () => require("./lookoutmetricsAlert"));

export { LookoutmetricsAnomalyDetectorArgs, LookoutmetricsAnomalyDetectorState } from "./lookoutmetricsAnomalyDetector";
export type LookoutmetricsAnomalyDetector = import("./lookoutmetricsAnomalyDetector").LookoutmetricsAnomalyDetector;
export const LookoutmetricsAnomalyDetector: typeof import("./lookoutmetricsAnomalyDetector").LookoutmetricsAnomalyDetector = null as any;
utilities.lazyLoad(exports, ["LookoutmetricsAnomalyDetector"], () => require("./lookoutmetricsAnomalyDetector"));

export { LookoutvisionProjectArgs, LookoutvisionProjectState } from "./lookoutvisionProject";
export type LookoutvisionProject = import("./lookoutvisionProject").LookoutvisionProject;
export const LookoutvisionProject: typeof import("./lookoutvisionProject").LookoutvisionProject = null as any;
utilities.lazyLoad(exports, ["LookoutvisionProject"], () => require("./lookoutvisionProject"));

export { M2ApplicationArgs, M2ApplicationState } from "./m2application";
export type M2Application = import("./m2application").M2Application;
export const M2Application: typeof import("./m2application").M2Application = null as any;
utilities.lazyLoad(exports, ["M2Application"], () => require("./m2application"));

export { M2EnvironmentArgs, M2EnvironmentState } from "./m2environment";
export type M2Environment = import("./m2environment").M2Environment;
export const M2Environment: typeof import("./m2environment").M2Environment = null as any;
utilities.lazyLoad(exports, ["M2Environment"], () => require("./m2environment"));

export { MacieAllowListArgs, MacieAllowListState } from "./macieAllowList";
export type MacieAllowList = import("./macieAllowList").MacieAllowList;
export const MacieAllowList: typeof import("./macieAllowList").MacieAllowList = null as any;
utilities.lazyLoad(exports, ["MacieAllowList"], () => require("./macieAllowList"));

export { MacieCustomDataIdentifierArgs, MacieCustomDataIdentifierState } from "./macieCustomDataIdentifier";
export type MacieCustomDataIdentifier = import("./macieCustomDataIdentifier").MacieCustomDataIdentifier;
export const MacieCustomDataIdentifier: typeof import("./macieCustomDataIdentifier").MacieCustomDataIdentifier = null as any;
utilities.lazyLoad(exports, ["MacieCustomDataIdentifier"], () => require("./macieCustomDataIdentifier"));

export { MacieFindingsFilterArgs, MacieFindingsFilterState } from "./macieFindingsFilter";
export type MacieFindingsFilter = import("./macieFindingsFilter").MacieFindingsFilter;
export const MacieFindingsFilter: typeof import("./macieFindingsFilter").MacieFindingsFilter = null as any;
utilities.lazyLoad(exports, ["MacieFindingsFilter"], () => require("./macieFindingsFilter"));

export { MacieSessionArgs, MacieSessionState } from "./macieSession";
export type MacieSession = import("./macieSession").MacieSession;
export const MacieSession: typeof import("./macieSession").MacieSession = null as any;
utilities.lazyLoad(exports, ["MacieSession"], () => require("./macieSession"));

export { ManagedblockchainAccessorArgs, ManagedblockchainAccessorState } from "./managedblockchainAccessor";
export type ManagedblockchainAccessor = import("./managedblockchainAccessor").ManagedblockchainAccessor;
export const ManagedblockchainAccessor: typeof import("./managedblockchainAccessor").ManagedblockchainAccessor = null as any;
utilities.lazyLoad(exports, ["ManagedblockchainAccessor"], () => require("./managedblockchainAccessor"));

export { MediaconnectBridgeArgs, MediaconnectBridgeState } from "./mediaconnectBridge";
export type MediaconnectBridge = import("./mediaconnectBridge").MediaconnectBridge;
export const MediaconnectBridge: typeof import("./mediaconnectBridge").MediaconnectBridge = null as any;
utilities.lazyLoad(exports, ["MediaconnectBridge"], () => require("./mediaconnectBridge"));

export { MediaconnectBridgeOutputArgs, MediaconnectBridgeOutputState } from "./mediaconnectBridgeOutput";
export type MediaconnectBridgeOutput = import("./mediaconnectBridgeOutput").MediaconnectBridgeOutput;
export const MediaconnectBridgeOutput: typeof import("./mediaconnectBridgeOutput").MediaconnectBridgeOutput = null as any;
utilities.lazyLoad(exports, ["MediaconnectBridgeOutput"], () => require("./mediaconnectBridgeOutput"));

export { MediaconnectBridgeSourceArgs, MediaconnectBridgeSourceState } from "./mediaconnectBridgeSource";
export type MediaconnectBridgeSource = import("./mediaconnectBridgeSource").MediaconnectBridgeSource;
export const MediaconnectBridgeSource: typeof import("./mediaconnectBridgeSource").MediaconnectBridgeSource = null as any;
utilities.lazyLoad(exports, ["MediaconnectBridgeSource"], () => require("./mediaconnectBridgeSource"));

export { MediaconnectFlowArgs, MediaconnectFlowState } from "./mediaconnectFlow";
export type MediaconnectFlow = import("./mediaconnectFlow").MediaconnectFlow;
export const MediaconnectFlow: typeof import("./mediaconnectFlow").MediaconnectFlow = null as any;
utilities.lazyLoad(exports, ["MediaconnectFlow"], () => require("./mediaconnectFlow"));

export { MediaconnectFlowEntitlementArgs, MediaconnectFlowEntitlementState } from "./mediaconnectFlowEntitlement";
export type MediaconnectFlowEntitlement = import("./mediaconnectFlowEntitlement").MediaconnectFlowEntitlement;
export const MediaconnectFlowEntitlement: typeof import("./mediaconnectFlowEntitlement").MediaconnectFlowEntitlement = null as any;
utilities.lazyLoad(exports, ["MediaconnectFlowEntitlement"], () => require("./mediaconnectFlowEntitlement"));

export { MediaconnectFlowOutputArgs, MediaconnectFlowOutputState } from "./mediaconnectFlowOutput";
export type MediaconnectFlowOutput = import("./mediaconnectFlowOutput").MediaconnectFlowOutput;
export const MediaconnectFlowOutput: typeof import("./mediaconnectFlowOutput").MediaconnectFlowOutput = null as any;
utilities.lazyLoad(exports, ["MediaconnectFlowOutput"], () => require("./mediaconnectFlowOutput"));

export { MediaconnectFlowSourceArgs, MediaconnectFlowSourceState } from "./mediaconnectFlowSource";
export type MediaconnectFlowSource = import("./mediaconnectFlowSource").MediaconnectFlowSource;
export const MediaconnectFlowSource: typeof import("./mediaconnectFlowSource").MediaconnectFlowSource = null as any;
utilities.lazyLoad(exports, ["MediaconnectFlowSource"], () => require("./mediaconnectFlowSource"));

export { MediaconnectFlowVpcInterfaceArgs, MediaconnectFlowVpcInterfaceState } from "./mediaconnectFlowVpcInterface";
export type MediaconnectFlowVpcInterface = import("./mediaconnectFlowVpcInterface").MediaconnectFlowVpcInterface;
export const MediaconnectFlowVpcInterface: typeof import("./mediaconnectFlowVpcInterface").MediaconnectFlowVpcInterface = null as any;
utilities.lazyLoad(exports, ["MediaconnectFlowVpcInterface"], () => require("./mediaconnectFlowVpcInterface"));

export { MediaconnectGatewayArgs, MediaconnectGatewayState } from "./mediaconnectGateway";
export type MediaconnectGateway = import("./mediaconnectGateway").MediaconnectGateway;
export const MediaconnectGateway: typeof import("./mediaconnectGateway").MediaconnectGateway = null as any;
utilities.lazyLoad(exports, ["MediaconnectGateway"], () => require("./mediaconnectGateway"));

export { MedialiveMultiplexArgs, MedialiveMultiplexState } from "./medialiveMultiplex";
export type MedialiveMultiplex = import("./medialiveMultiplex").MedialiveMultiplex;
export const MedialiveMultiplex: typeof import("./medialiveMultiplex").MedialiveMultiplex = null as any;
utilities.lazyLoad(exports, ["MedialiveMultiplex"], () => require("./medialiveMultiplex"));

export { MedialiveMultiplexprogramArgs, MedialiveMultiplexprogramState } from "./medialiveMultiplexprogram";
export type MedialiveMultiplexprogram = import("./medialiveMultiplexprogram").MedialiveMultiplexprogram;
export const MedialiveMultiplexprogram: typeof import("./medialiveMultiplexprogram").MedialiveMultiplexprogram = null as any;
utilities.lazyLoad(exports, ["MedialiveMultiplexprogram"], () => require("./medialiveMultiplexprogram"));

export { MediapackageAssetArgs, MediapackageAssetState } from "./mediapackageAsset";
export type MediapackageAsset = import("./mediapackageAsset").MediapackageAsset;
export const MediapackageAsset: typeof import("./mediapackageAsset").MediapackageAsset = null as any;
utilities.lazyLoad(exports, ["MediapackageAsset"], () => require("./mediapackageAsset"));

export { MediapackagePackagingConfigurationArgs, MediapackagePackagingConfigurationState } from "./mediapackagePackagingConfiguration";
export type MediapackagePackagingConfiguration = import("./mediapackagePackagingConfiguration").MediapackagePackagingConfiguration;
export const MediapackagePackagingConfiguration: typeof import("./mediapackagePackagingConfiguration").MediapackagePackagingConfiguration = null as any;
utilities.lazyLoad(exports, ["MediapackagePackagingConfiguration"], () => require("./mediapackagePackagingConfiguration"));

export { MediapackagePackagingGroupArgs, MediapackagePackagingGroupState } from "./mediapackagePackagingGroup";
export type MediapackagePackagingGroup = import("./mediapackagePackagingGroup").MediapackagePackagingGroup;
export const MediapackagePackagingGroup: typeof import("./mediapackagePackagingGroup").MediapackagePackagingGroup = null as any;
utilities.lazyLoad(exports, ["MediapackagePackagingGroup"], () => require("./mediapackagePackagingGroup"));

export { Mediapackagev2ChannelArgs, Mediapackagev2ChannelState } from "./mediapackagev2Channel";
export type Mediapackagev2Channel = import("./mediapackagev2Channel").Mediapackagev2Channel;
export const Mediapackagev2Channel: typeof import("./mediapackagev2Channel").Mediapackagev2Channel = null as any;
utilities.lazyLoad(exports, ["Mediapackagev2Channel"], () => require("./mediapackagev2Channel"));

export { Mediapackagev2ChannelGroupArgs, Mediapackagev2ChannelGroupState } from "./mediapackagev2ChannelGroup";
export type Mediapackagev2ChannelGroup = import("./mediapackagev2ChannelGroup").Mediapackagev2ChannelGroup;
export const Mediapackagev2ChannelGroup: typeof import("./mediapackagev2ChannelGroup").Mediapackagev2ChannelGroup = null as any;
utilities.lazyLoad(exports, ["Mediapackagev2ChannelGroup"], () => require("./mediapackagev2ChannelGroup"));

export { Mediapackagev2ChannelPolicyArgs, Mediapackagev2ChannelPolicyState } from "./mediapackagev2ChannelPolicy";
export type Mediapackagev2ChannelPolicy = import("./mediapackagev2ChannelPolicy").Mediapackagev2ChannelPolicy;
export const Mediapackagev2ChannelPolicy: typeof import("./mediapackagev2ChannelPolicy").Mediapackagev2ChannelPolicy = null as any;
utilities.lazyLoad(exports, ["Mediapackagev2ChannelPolicy"], () => require("./mediapackagev2ChannelPolicy"));

export { Mediapackagev2OriginEndpointArgs, Mediapackagev2OriginEndpointState } from "./mediapackagev2OriginEndpoint";
export type Mediapackagev2OriginEndpoint = import("./mediapackagev2OriginEndpoint").Mediapackagev2OriginEndpoint;
export const Mediapackagev2OriginEndpoint: typeof import("./mediapackagev2OriginEndpoint").Mediapackagev2OriginEndpoint = null as any;
utilities.lazyLoad(exports, ["Mediapackagev2OriginEndpoint"], () => require("./mediapackagev2OriginEndpoint"));

export { Mediapackagev2OriginEndpointPolicyArgs, Mediapackagev2OriginEndpointPolicyState } from "./mediapackagev2OriginEndpointPolicy";
export type Mediapackagev2OriginEndpointPolicy = import("./mediapackagev2OriginEndpointPolicy").Mediapackagev2OriginEndpointPolicy;
export const Mediapackagev2OriginEndpointPolicy: typeof import("./mediapackagev2OriginEndpointPolicy").Mediapackagev2OriginEndpointPolicy = null as any;
utilities.lazyLoad(exports, ["Mediapackagev2OriginEndpointPolicy"], () => require("./mediapackagev2OriginEndpointPolicy"));

export { MediatailorChannelArgs, MediatailorChannelState } from "./mediatailorChannel";
export type MediatailorChannel = import("./mediatailorChannel").MediatailorChannel;
export const MediatailorChannel: typeof import("./mediatailorChannel").MediatailorChannel = null as any;
utilities.lazyLoad(exports, ["MediatailorChannel"], () => require("./mediatailorChannel"));

export { MediatailorChannelPolicyArgs, MediatailorChannelPolicyState } from "./mediatailorChannelPolicy";
export type MediatailorChannelPolicy = import("./mediatailorChannelPolicy").MediatailorChannelPolicy;
export const MediatailorChannelPolicy: typeof import("./mediatailorChannelPolicy").MediatailorChannelPolicy = null as any;
utilities.lazyLoad(exports, ["MediatailorChannelPolicy"], () => require("./mediatailorChannelPolicy"));

export { MediatailorLiveSourceArgs, MediatailorLiveSourceState } from "./mediatailorLiveSource";
export type MediatailorLiveSource = import("./mediatailorLiveSource").MediatailorLiveSource;
export const MediatailorLiveSource: typeof import("./mediatailorLiveSource").MediatailorLiveSource = null as any;
utilities.lazyLoad(exports, ["MediatailorLiveSource"], () => require("./mediatailorLiveSource"));

export { MediatailorSourceLocationArgs, MediatailorSourceLocationState } from "./mediatailorSourceLocation";
export type MediatailorSourceLocation = import("./mediatailorSourceLocation").MediatailorSourceLocation;
export const MediatailorSourceLocation: typeof import("./mediatailorSourceLocation").MediatailorSourceLocation = null as any;
utilities.lazyLoad(exports, ["MediatailorSourceLocation"], () => require("./mediatailorSourceLocation"));

export { MediatailorVodSourceArgs, MediatailorVodSourceState } from "./mediatailorVodSource";
export type MediatailorVodSource = import("./mediatailorVodSource").MediatailorVodSource;
export const MediatailorVodSource: typeof import("./mediatailorVodSource").MediatailorVodSource = null as any;
utilities.lazyLoad(exports, ["MediatailorVodSource"], () => require("./mediatailorVodSource"));

export { MemorydbAclArgs, MemorydbAclState } from "./memorydbAcl";
export type MemorydbAcl = import("./memorydbAcl").MemorydbAcl;
export const MemorydbAcl: typeof import("./memorydbAcl").MemorydbAcl = null as any;
utilities.lazyLoad(exports, ["MemorydbAcl"], () => require("./memorydbAcl"));

export { MemorydbClusterArgs, MemorydbClusterState } from "./memorydbCluster";
export type MemorydbCluster = import("./memorydbCluster").MemorydbCluster;
export const MemorydbCluster: typeof import("./memorydbCluster").MemorydbCluster = null as any;
utilities.lazyLoad(exports, ["MemorydbCluster"], () => require("./memorydbCluster"));

export { MemorydbParameterGroupArgs, MemorydbParameterGroupState } from "./memorydbParameterGroup";
export type MemorydbParameterGroup = import("./memorydbParameterGroup").MemorydbParameterGroup;
export const MemorydbParameterGroup: typeof import("./memorydbParameterGroup").MemorydbParameterGroup = null as any;
utilities.lazyLoad(exports, ["MemorydbParameterGroup"], () => require("./memorydbParameterGroup"));

export { MemorydbSubnetGroupArgs, MemorydbSubnetGroupState } from "./memorydbSubnetGroup";
export type MemorydbSubnetGroup = import("./memorydbSubnetGroup").MemorydbSubnetGroup;
export const MemorydbSubnetGroup: typeof import("./memorydbSubnetGroup").MemorydbSubnetGroup = null as any;
utilities.lazyLoad(exports, ["MemorydbSubnetGroup"], () => require("./memorydbSubnetGroup"));

export { MemorydbUserArgs, MemorydbUserState } from "./memorydbUser";
export type MemorydbUser = import("./memorydbUser").MemorydbUser;
export const MemorydbUser: typeof import("./memorydbUser").MemorydbUser = null as any;
utilities.lazyLoad(exports, ["MemorydbUser"], () => require("./memorydbUser"));

export { MskBatchScramSecretArgs, MskBatchScramSecretState } from "./mskBatchScramSecret";
export type MskBatchScramSecret = import("./mskBatchScramSecret").MskBatchScramSecret;
export const MskBatchScramSecret: typeof import("./mskBatchScramSecret").MskBatchScramSecret = null as any;
utilities.lazyLoad(exports, ["MskBatchScramSecret"], () => require("./mskBatchScramSecret"));

export { MskClusterArgs, MskClusterState } from "./mskCluster";
export type MskCluster = import("./mskCluster").MskCluster;
export const MskCluster: typeof import("./mskCluster").MskCluster = null as any;
utilities.lazyLoad(exports, ["MskCluster"], () => require("./mskCluster"));

export { MskClusterPolicyArgs, MskClusterPolicyState } from "./mskClusterPolicy";
export type MskClusterPolicy = import("./mskClusterPolicy").MskClusterPolicy;
export const MskClusterPolicy: typeof import("./mskClusterPolicy").MskClusterPolicy = null as any;
utilities.lazyLoad(exports, ["MskClusterPolicy"], () => require("./mskClusterPolicy"));

export { MskConfigurationArgs, MskConfigurationState } from "./mskConfiguration";
export type MskConfiguration = import("./mskConfiguration").MskConfiguration;
export const MskConfiguration: typeof import("./mskConfiguration").MskConfiguration = null as any;
utilities.lazyLoad(exports, ["MskConfiguration"], () => require("./mskConfiguration"));

export { MskReplicatorArgs, MskReplicatorState } from "./mskReplicator";
export type MskReplicator = import("./mskReplicator").MskReplicator;
export const MskReplicator: typeof import("./mskReplicator").MskReplicator = null as any;
utilities.lazyLoad(exports, ["MskReplicator"], () => require("./mskReplicator"));

export { MskServerlessClusterArgs, MskServerlessClusterState } from "./mskServerlessCluster";
export type MskServerlessCluster = import("./mskServerlessCluster").MskServerlessCluster;
export const MskServerlessCluster: typeof import("./mskServerlessCluster").MskServerlessCluster = null as any;
utilities.lazyLoad(exports, ["MskServerlessCluster"], () => require("./mskServerlessCluster"));

export { MskVpcConnectionArgs, MskVpcConnectionState } from "./mskVpcConnection";
export type MskVpcConnection = import("./mskVpcConnection").MskVpcConnection;
export const MskVpcConnection: typeof import("./mskVpcConnection").MskVpcConnection = null as any;
utilities.lazyLoad(exports, ["MskVpcConnection"], () => require("./mskVpcConnection"));

export { MwaaEnvironmentArgs, MwaaEnvironmentState } from "./mwaaEnvironment";
export type MwaaEnvironment = import("./mwaaEnvironment").MwaaEnvironment;
export const MwaaEnvironment: typeof import("./mwaaEnvironment").MwaaEnvironment = null as any;
utilities.lazyLoad(exports, ["MwaaEnvironment"], () => require("./mwaaEnvironment"));

export { NeptuneDbClusterArgs, NeptuneDbClusterState } from "./neptuneDbCluster";
export type NeptuneDbCluster = import("./neptuneDbCluster").NeptuneDbCluster;
export const NeptuneDbCluster: typeof import("./neptuneDbCluster").NeptuneDbCluster = null as any;
utilities.lazyLoad(exports, ["NeptuneDbCluster"], () => require("./neptuneDbCluster"));

export { NeptunegraphGraphArgs, NeptunegraphGraphState } from "./neptunegraphGraph";
export type NeptunegraphGraph = import("./neptunegraphGraph").NeptunegraphGraph;
export const NeptunegraphGraph: typeof import("./neptunegraphGraph").NeptunegraphGraph = null as any;
utilities.lazyLoad(exports, ["NeptunegraphGraph"], () => require("./neptunegraphGraph"));

export { NeptunegraphPrivateGraphEndpointArgs, NeptunegraphPrivateGraphEndpointState } from "./neptunegraphPrivateGraphEndpoint";
export type NeptunegraphPrivateGraphEndpoint = import("./neptunegraphPrivateGraphEndpoint").NeptunegraphPrivateGraphEndpoint;
export const NeptunegraphPrivateGraphEndpoint: typeof import("./neptunegraphPrivateGraphEndpoint").NeptunegraphPrivateGraphEndpoint = null as any;
utilities.lazyLoad(exports, ["NeptunegraphPrivateGraphEndpoint"], () => require("./neptunegraphPrivateGraphEndpoint"));

export { NetworkfirewallFirewallArgs, NetworkfirewallFirewallState } from "./networkfirewallFirewall";
export type NetworkfirewallFirewall = import("./networkfirewallFirewall").NetworkfirewallFirewall;
export const NetworkfirewallFirewall: typeof import("./networkfirewallFirewall").NetworkfirewallFirewall = null as any;
utilities.lazyLoad(exports, ["NetworkfirewallFirewall"], () => require("./networkfirewallFirewall"));

export { NetworkfirewallFirewallPolicyArgs, NetworkfirewallFirewallPolicyState } from "./networkfirewallFirewallPolicy";
export type NetworkfirewallFirewallPolicy = import("./networkfirewallFirewallPolicy").NetworkfirewallFirewallPolicy;
export const NetworkfirewallFirewallPolicy: typeof import("./networkfirewallFirewallPolicy").NetworkfirewallFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkfirewallFirewallPolicy"], () => require("./networkfirewallFirewallPolicy"));

export { NetworkfirewallLoggingConfigurationArgs, NetworkfirewallLoggingConfigurationState } from "./networkfirewallLoggingConfiguration";
export type NetworkfirewallLoggingConfiguration = import("./networkfirewallLoggingConfiguration").NetworkfirewallLoggingConfiguration;
export const NetworkfirewallLoggingConfiguration: typeof import("./networkfirewallLoggingConfiguration").NetworkfirewallLoggingConfiguration = null as any;
utilities.lazyLoad(exports, ["NetworkfirewallLoggingConfiguration"], () => require("./networkfirewallLoggingConfiguration"));

export { NetworkfirewallRuleGroupArgs, NetworkfirewallRuleGroupState } from "./networkfirewallRuleGroup";
export type NetworkfirewallRuleGroup = import("./networkfirewallRuleGroup").NetworkfirewallRuleGroup;
export const NetworkfirewallRuleGroup: typeof import("./networkfirewallRuleGroup").NetworkfirewallRuleGroup = null as any;
utilities.lazyLoad(exports, ["NetworkfirewallRuleGroup"], () => require("./networkfirewallRuleGroup"));

export { NetworkfirewallTlsInspectionConfigurationArgs, NetworkfirewallTlsInspectionConfigurationState } from "./networkfirewallTlsInspectionConfiguration";
export type NetworkfirewallTlsInspectionConfiguration = import("./networkfirewallTlsInspectionConfiguration").NetworkfirewallTlsInspectionConfiguration;
export const NetworkfirewallTlsInspectionConfiguration: typeof import("./networkfirewallTlsInspectionConfiguration").NetworkfirewallTlsInspectionConfiguration = null as any;
utilities.lazyLoad(exports, ["NetworkfirewallTlsInspectionConfiguration"], () => require("./networkfirewallTlsInspectionConfiguration"));

export { NetworkmanagerConnectAttachmentArgs, NetworkmanagerConnectAttachmentState } from "./networkmanagerConnectAttachment";
export type NetworkmanagerConnectAttachment = import("./networkmanagerConnectAttachment").NetworkmanagerConnectAttachment;
export const NetworkmanagerConnectAttachment: typeof import("./networkmanagerConnectAttachment").NetworkmanagerConnectAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerConnectAttachment"], () => require("./networkmanagerConnectAttachment"));

export { NetworkmanagerConnectPeerArgs, NetworkmanagerConnectPeerState } from "./networkmanagerConnectPeer";
export type NetworkmanagerConnectPeer = import("./networkmanagerConnectPeer").NetworkmanagerConnectPeer;
export const NetworkmanagerConnectPeer: typeof import("./networkmanagerConnectPeer").NetworkmanagerConnectPeer = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerConnectPeer"], () => require("./networkmanagerConnectPeer"));

export { NetworkmanagerCoreNetworkArgs, NetworkmanagerCoreNetworkState } from "./networkmanagerCoreNetwork";
export type NetworkmanagerCoreNetwork = import("./networkmanagerCoreNetwork").NetworkmanagerCoreNetwork;
export const NetworkmanagerCoreNetwork: typeof import("./networkmanagerCoreNetwork").NetworkmanagerCoreNetwork = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerCoreNetwork"], () => require("./networkmanagerCoreNetwork"));

export { NetworkmanagerCustomerGatewayAssociationArgs, NetworkmanagerCustomerGatewayAssociationState } from "./networkmanagerCustomerGatewayAssociation";
export type NetworkmanagerCustomerGatewayAssociation = import("./networkmanagerCustomerGatewayAssociation").NetworkmanagerCustomerGatewayAssociation;
export const NetworkmanagerCustomerGatewayAssociation: typeof import("./networkmanagerCustomerGatewayAssociation").NetworkmanagerCustomerGatewayAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerCustomerGatewayAssociation"], () => require("./networkmanagerCustomerGatewayAssociation"));

export { NetworkmanagerDeviceArgs, NetworkmanagerDeviceState } from "./networkmanagerDevice";
export type NetworkmanagerDevice = import("./networkmanagerDevice").NetworkmanagerDevice;
export const NetworkmanagerDevice: typeof import("./networkmanagerDevice").NetworkmanagerDevice = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerDevice"], () => require("./networkmanagerDevice"));

export { NetworkmanagerGlobalNetworkArgs, NetworkmanagerGlobalNetworkState } from "./networkmanagerGlobalNetwork";
export type NetworkmanagerGlobalNetwork = import("./networkmanagerGlobalNetwork").NetworkmanagerGlobalNetwork;
export const NetworkmanagerGlobalNetwork: typeof import("./networkmanagerGlobalNetwork").NetworkmanagerGlobalNetwork = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerGlobalNetwork"], () => require("./networkmanagerGlobalNetwork"));

export { NetworkmanagerLinkArgs, NetworkmanagerLinkState } from "./networkmanagerLink";
export type NetworkmanagerLink = import("./networkmanagerLink").NetworkmanagerLink;
export const NetworkmanagerLink: typeof import("./networkmanagerLink").NetworkmanagerLink = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerLink"], () => require("./networkmanagerLink"));

export { NetworkmanagerLinkAssociationArgs, NetworkmanagerLinkAssociationState } from "./networkmanagerLinkAssociation";
export type NetworkmanagerLinkAssociation = import("./networkmanagerLinkAssociation").NetworkmanagerLinkAssociation;
export const NetworkmanagerLinkAssociation: typeof import("./networkmanagerLinkAssociation").NetworkmanagerLinkAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerLinkAssociation"], () => require("./networkmanagerLinkAssociation"));

export { NetworkmanagerSiteArgs, NetworkmanagerSiteState } from "./networkmanagerSite";
export type NetworkmanagerSite = import("./networkmanagerSite").NetworkmanagerSite;
export const NetworkmanagerSite: typeof import("./networkmanagerSite").NetworkmanagerSite = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerSite"], () => require("./networkmanagerSite"));

export { NetworkmanagerSiteToSiteVpnAttachmentArgs, NetworkmanagerSiteToSiteVpnAttachmentState } from "./networkmanagerSiteToSiteVpnAttachment";
export type NetworkmanagerSiteToSiteVpnAttachment = import("./networkmanagerSiteToSiteVpnAttachment").NetworkmanagerSiteToSiteVpnAttachment;
export const NetworkmanagerSiteToSiteVpnAttachment: typeof import("./networkmanagerSiteToSiteVpnAttachment").NetworkmanagerSiteToSiteVpnAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerSiteToSiteVpnAttachment"], () => require("./networkmanagerSiteToSiteVpnAttachment"));

export { NetworkmanagerTransitGatewayPeeringArgs, NetworkmanagerTransitGatewayPeeringState } from "./networkmanagerTransitGatewayPeering";
export type NetworkmanagerTransitGatewayPeering = import("./networkmanagerTransitGatewayPeering").NetworkmanagerTransitGatewayPeering;
export const NetworkmanagerTransitGatewayPeering: typeof import("./networkmanagerTransitGatewayPeering").NetworkmanagerTransitGatewayPeering = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerTransitGatewayPeering"], () => require("./networkmanagerTransitGatewayPeering"));

export { NetworkmanagerTransitGatewayRegistrationArgs, NetworkmanagerTransitGatewayRegistrationState } from "./networkmanagerTransitGatewayRegistration";
export type NetworkmanagerTransitGatewayRegistration = import("./networkmanagerTransitGatewayRegistration").NetworkmanagerTransitGatewayRegistration;
export const NetworkmanagerTransitGatewayRegistration: typeof import("./networkmanagerTransitGatewayRegistration").NetworkmanagerTransitGatewayRegistration = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerTransitGatewayRegistration"], () => require("./networkmanagerTransitGatewayRegistration"));

export { NetworkmanagerTransitGatewayRouteTableAttachmentArgs, NetworkmanagerTransitGatewayRouteTableAttachmentState } from "./networkmanagerTransitGatewayRouteTableAttachment";
export type NetworkmanagerTransitGatewayRouteTableAttachment = import("./networkmanagerTransitGatewayRouteTableAttachment").NetworkmanagerTransitGatewayRouteTableAttachment;
export const NetworkmanagerTransitGatewayRouteTableAttachment: typeof import("./networkmanagerTransitGatewayRouteTableAttachment").NetworkmanagerTransitGatewayRouteTableAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerTransitGatewayRouteTableAttachment"], () => require("./networkmanagerTransitGatewayRouteTableAttachment"));

export { NetworkmanagerVpcAttachmentArgs, NetworkmanagerVpcAttachmentState } from "./networkmanagerVpcAttachment";
export type NetworkmanagerVpcAttachment = import("./networkmanagerVpcAttachment").NetworkmanagerVpcAttachment;
export const NetworkmanagerVpcAttachment: typeof import("./networkmanagerVpcAttachment").NetworkmanagerVpcAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerVpcAttachment"], () => require("./networkmanagerVpcAttachment"));

export { NimblestudioLaunchProfileArgs, NimblestudioLaunchProfileState } from "./nimblestudioLaunchProfile";
export type NimblestudioLaunchProfile = import("./nimblestudioLaunchProfile").NimblestudioLaunchProfile;
export const NimblestudioLaunchProfile: typeof import("./nimblestudioLaunchProfile").NimblestudioLaunchProfile = null as any;
utilities.lazyLoad(exports, ["NimblestudioLaunchProfile"], () => require("./nimblestudioLaunchProfile"));

export { NimblestudioStreamingImageArgs, NimblestudioStreamingImageState } from "./nimblestudioStreamingImage";
export type NimblestudioStreamingImage = import("./nimblestudioStreamingImage").NimblestudioStreamingImage;
export const NimblestudioStreamingImage: typeof import("./nimblestudioStreamingImage").NimblestudioStreamingImage = null as any;
utilities.lazyLoad(exports, ["NimblestudioStreamingImage"], () => require("./nimblestudioStreamingImage"));

export { NimblestudioStudioArgs, NimblestudioStudioState } from "./nimblestudioStudio";
export type NimblestudioStudio = import("./nimblestudioStudio").NimblestudioStudio;
export const NimblestudioStudio: typeof import("./nimblestudioStudio").NimblestudioStudio = null as any;
utilities.lazyLoad(exports, ["NimblestudioStudio"], () => require("./nimblestudioStudio"));

export { NimblestudioStudioComponentArgs, NimblestudioStudioComponentState } from "./nimblestudioStudioComponent";
export type NimblestudioStudioComponent = import("./nimblestudioStudioComponent").NimblestudioStudioComponent;
export const NimblestudioStudioComponent: typeof import("./nimblestudioStudioComponent").NimblestudioStudioComponent = null as any;
utilities.lazyLoad(exports, ["NimblestudioStudioComponent"], () => require("./nimblestudioStudioComponent"));

export { OamLinkArgs, OamLinkState } from "./oamLink";
export type OamLink = import("./oamLink").OamLink;
export const OamLink: typeof import("./oamLink").OamLink = null as any;
utilities.lazyLoad(exports, ["OamLink"], () => require("./oamLink"));

export { OamSinkArgs, OamSinkState } from "./oamSink";
export type OamSink = import("./oamSink").OamSink;
export const OamSink: typeof import("./oamSink").OamSink = null as any;
utilities.lazyLoad(exports, ["OamSink"], () => require("./oamSink"));

export { OmicsReferenceStoreArgs, OmicsReferenceStoreState } from "./omicsReferenceStore";
export type OmicsReferenceStore = import("./omicsReferenceStore").OmicsReferenceStore;
export const OmicsReferenceStore: typeof import("./omicsReferenceStore").OmicsReferenceStore = null as any;
utilities.lazyLoad(exports, ["OmicsReferenceStore"], () => require("./omicsReferenceStore"));

export { OmicsRunGroupArgs, OmicsRunGroupState } from "./omicsRunGroup";
export type OmicsRunGroup = import("./omicsRunGroup").OmicsRunGroup;
export const OmicsRunGroup: typeof import("./omicsRunGroup").OmicsRunGroup = null as any;
utilities.lazyLoad(exports, ["OmicsRunGroup"], () => require("./omicsRunGroup"));

export { OmicsSequenceStoreArgs, OmicsSequenceStoreState } from "./omicsSequenceStore";
export type OmicsSequenceStore = import("./omicsSequenceStore").OmicsSequenceStore;
export const OmicsSequenceStore: typeof import("./omicsSequenceStore").OmicsSequenceStore = null as any;
utilities.lazyLoad(exports, ["OmicsSequenceStore"], () => require("./omicsSequenceStore"));

export { OmicsVariantStoreArgs, OmicsVariantStoreState } from "./omicsVariantStore";
export type OmicsVariantStore = import("./omicsVariantStore").OmicsVariantStore;
export const OmicsVariantStore: typeof import("./omicsVariantStore").OmicsVariantStore = null as any;
utilities.lazyLoad(exports, ["OmicsVariantStore"], () => require("./omicsVariantStore"));

export { OmicsWorkflowArgs, OmicsWorkflowState } from "./omicsWorkflow";
export type OmicsWorkflow = import("./omicsWorkflow").OmicsWorkflow;
export const OmicsWorkflow: typeof import("./omicsWorkflow").OmicsWorkflow = null as any;
utilities.lazyLoad(exports, ["OmicsWorkflow"], () => require("./omicsWorkflow"));

export { OpensearchserverlessAccessPolicyArgs, OpensearchserverlessAccessPolicyState } from "./opensearchserverlessAccessPolicy";
export type OpensearchserverlessAccessPolicy = import("./opensearchserverlessAccessPolicy").OpensearchserverlessAccessPolicy;
export const OpensearchserverlessAccessPolicy: typeof import("./opensearchserverlessAccessPolicy").OpensearchserverlessAccessPolicy = null as any;
utilities.lazyLoad(exports, ["OpensearchserverlessAccessPolicy"], () => require("./opensearchserverlessAccessPolicy"));

export { OpensearchserverlessCollectionArgs, OpensearchserverlessCollectionState } from "./opensearchserverlessCollection";
export type OpensearchserverlessCollection = import("./opensearchserverlessCollection").OpensearchserverlessCollection;
export const OpensearchserverlessCollection: typeof import("./opensearchserverlessCollection").OpensearchserverlessCollection = null as any;
utilities.lazyLoad(exports, ["OpensearchserverlessCollection"], () => require("./opensearchserverlessCollection"));

export { OpensearchserverlessLifecyclePolicyArgs, OpensearchserverlessLifecyclePolicyState } from "./opensearchserverlessLifecyclePolicy";
export type OpensearchserverlessLifecyclePolicy = import("./opensearchserverlessLifecyclePolicy").OpensearchserverlessLifecyclePolicy;
export const OpensearchserverlessLifecyclePolicy: typeof import("./opensearchserverlessLifecyclePolicy").OpensearchserverlessLifecyclePolicy = null as any;
utilities.lazyLoad(exports, ["OpensearchserverlessLifecyclePolicy"], () => require("./opensearchserverlessLifecyclePolicy"));

export { OpensearchserverlessSecurityConfigArgs, OpensearchserverlessSecurityConfigState } from "./opensearchserverlessSecurityConfig";
export type OpensearchserverlessSecurityConfig = import("./opensearchserverlessSecurityConfig").OpensearchserverlessSecurityConfig;
export const OpensearchserverlessSecurityConfig: typeof import("./opensearchserverlessSecurityConfig").OpensearchserverlessSecurityConfig = null as any;
utilities.lazyLoad(exports, ["OpensearchserverlessSecurityConfig"], () => require("./opensearchserverlessSecurityConfig"));

export { OpensearchserverlessSecurityPolicyArgs, OpensearchserverlessSecurityPolicyState } from "./opensearchserverlessSecurityPolicy";
export type OpensearchserverlessSecurityPolicy = import("./opensearchserverlessSecurityPolicy").OpensearchserverlessSecurityPolicy;
export const OpensearchserverlessSecurityPolicy: typeof import("./opensearchserverlessSecurityPolicy").OpensearchserverlessSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["OpensearchserverlessSecurityPolicy"], () => require("./opensearchserverlessSecurityPolicy"));

export { OpensearchserverlessVpcEndpointArgs, OpensearchserverlessVpcEndpointState } from "./opensearchserverlessVpcEndpoint";
export type OpensearchserverlessVpcEndpoint = import("./opensearchserverlessVpcEndpoint").OpensearchserverlessVpcEndpoint;
export const OpensearchserverlessVpcEndpoint: typeof import("./opensearchserverlessVpcEndpoint").OpensearchserverlessVpcEndpoint = null as any;
utilities.lazyLoad(exports, ["OpensearchserverlessVpcEndpoint"], () => require("./opensearchserverlessVpcEndpoint"));

export { OpensearchserviceDomainArgs, OpensearchserviceDomainState } from "./opensearchserviceDomain";
export type OpensearchserviceDomain = import("./opensearchserviceDomain").OpensearchserviceDomain;
export const OpensearchserviceDomain: typeof import("./opensearchserviceDomain").OpensearchserviceDomain = null as any;
utilities.lazyLoad(exports, ["OpensearchserviceDomain"], () => require("./opensearchserviceDomain"));

export { OpsworkscmServerArgs, OpsworkscmServerState } from "./opsworkscmServer";
export type OpsworkscmServer = import("./opsworkscmServer").OpsworkscmServer;
export const OpsworkscmServer: typeof import("./opsworkscmServer").OpsworkscmServer = null as any;
utilities.lazyLoad(exports, ["OpsworkscmServer"], () => require("./opsworkscmServer"));

export { OrganizationsAccountArgs, OrganizationsAccountState } from "./organizationsAccount";
export type OrganizationsAccount = import("./organizationsAccount").OrganizationsAccount;
export const OrganizationsAccount: typeof import("./organizationsAccount").OrganizationsAccount = null as any;
utilities.lazyLoad(exports, ["OrganizationsAccount"], () => require("./organizationsAccount"));

export { OrganizationsOrganizationArgs, OrganizationsOrganizationState } from "./organizationsOrganization";
export type OrganizationsOrganization = import("./organizationsOrganization").OrganizationsOrganization;
export const OrganizationsOrganization: typeof import("./organizationsOrganization").OrganizationsOrganization = null as any;
utilities.lazyLoad(exports, ["OrganizationsOrganization"], () => require("./organizationsOrganization"));

export { OrganizationsOrganizationalUnitArgs, OrganizationsOrganizationalUnitState } from "./organizationsOrganizationalUnit";
export type OrganizationsOrganizationalUnit = import("./organizationsOrganizationalUnit").OrganizationsOrganizationalUnit;
export const OrganizationsOrganizationalUnit: typeof import("./organizationsOrganizationalUnit").OrganizationsOrganizationalUnit = null as any;
utilities.lazyLoad(exports, ["OrganizationsOrganizationalUnit"], () => require("./organizationsOrganizationalUnit"));

export { OrganizationsPolicyArgs, OrganizationsPolicyState } from "./organizationsPolicy";
export type OrganizationsPolicy = import("./organizationsPolicy").OrganizationsPolicy;
export const OrganizationsPolicy: typeof import("./organizationsPolicy").OrganizationsPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationsPolicy"], () => require("./organizationsPolicy"));

export { OrganizationsResourcePolicyArgs, OrganizationsResourcePolicyState } from "./organizationsResourcePolicy";
export type OrganizationsResourcePolicy = import("./organizationsResourcePolicy").OrganizationsResourcePolicy;
export const OrganizationsResourcePolicy: typeof import("./organizationsResourcePolicy").OrganizationsResourcePolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationsResourcePolicy"], () => require("./organizationsResourcePolicy"));

export { OsisPipelineArgs, OsisPipelineState } from "./osisPipeline";
export type OsisPipeline = import("./osisPipeline").OsisPipeline;
export const OsisPipeline: typeof import("./osisPipeline").OsisPipeline = null as any;
utilities.lazyLoad(exports, ["OsisPipeline"], () => require("./osisPipeline"));

export { PanoramaApplicationInstanceArgs, PanoramaApplicationInstanceState } from "./panoramaApplicationInstance";
export type PanoramaApplicationInstance = import("./panoramaApplicationInstance").PanoramaApplicationInstance;
export const PanoramaApplicationInstance: typeof import("./panoramaApplicationInstance").PanoramaApplicationInstance = null as any;
utilities.lazyLoad(exports, ["PanoramaApplicationInstance"], () => require("./panoramaApplicationInstance"));

export { PanoramaPackageArgs, PanoramaPackageState } from "./panoramaPackage";
export type PanoramaPackage = import("./panoramaPackage").PanoramaPackage;
export const PanoramaPackage: typeof import("./panoramaPackage").PanoramaPackage = null as any;
utilities.lazyLoad(exports, ["PanoramaPackage"], () => require("./panoramaPackage"));

export { PanoramaPackageVersionArgs, PanoramaPackageVersionState } from "./panoramaPackageVersion";
export type PanoramaPackageVersion = import("./panoramaPackageVersion").PanoramaPackageVersion;
export const PanoramaPackageVersion: typeof import("./panoramaPackageVersion").PanoramaPackageVersion = null as any;
utilities.lazyLoad(exports, ["PanoramaPackageVersion"], () => require("./panoramaPackageVersion"));

export { PaymentcryptographyAliasArgs, PaymentcryptographyAliasState } from "./paymentcryptographyAlias";
export type PaymentcryptographyAlias = import("./paymentcryptographyAlias").PaymentcryptographyAlias;
export const PaymentcryptographyAlias: typeof import("./paymentcryptographyAlias").PaymentcryptographyAlias = null as any;
utilities.lazyLoad(exports, ["PaymentcryptographyAlias"], () => require("./paymentcryptographyAlias"));

export { PaymentcryptographyKeyArgs, PaymentcryptographyKeyState } from "./paymentcryptographyKey";
export type PaymentcryptographyKey = import("./paymentcryptographyKey").PaymentcryptographyKey;
export const PaymentcryptographyKey: typeof import("./paymentcryptographyKey").PaymentcryptographyKey = null as any;
utilities.lazyLoad(exports, ["PaymentcryptographyKey"], () => require("./paymentcryptographyKey"));

export { PcaconnectoradConnectorArgs, PcaconnectoradConnectorState } from "./pcaconnectoradConnector";
export type PcaconnectoradConnector = import("./pcaconnectoradConnector").PcaconnectoradConnector;
export const PcaconnectoradConnector: typeof import("./pcaconnectoradConnector").PcaconnectoradConnector = null as any;
utilities.lazyLoad(exports, ["PcaconnectoradConnector"], () => require("./pcaconnectoradConnector"));

export { PcaconnectoradDirectoryRegistrationArgs, PcaconnectoradDirectoryRegistrationState } from "./pcaconnectoradDirectoryRegistration";
export type PcaconnectoradDirectoryRegistration = import("./pcaconnectoradDirectoryRegistration").PcaconnectoradDirectoryRegistration;
export const PcaconnectoradDirectoryRegistration: typeof import("./pcaconnectoradDirectoryRegistration").PcaconnectoradDirectoryRegistration = null as any;
utilities.lazyLoad(exports, ["PcaconnectoradDirectoryRegistration"], () => require("./pcaconnectoradDirectoryRegistration"));

export { PcaconnectoradServicePrincipalNameArgs, PcaconnectoradServicePrincipalNameState } from "./pcaconnectoradServicePrincipalName";
export type PcaconnectoradServicePrincipalName = import("./pcaconnectoradServicePrincipalName").PcaconnectoradServicePrincipalName;
export const PcaconnectoradServicePrincipalName: typeof import("./pcaconnectoradServicePrincipalName").PcaconnectoradServicePrincipalName = null as any;
utilities.lazyLoad(exports, ["PcaconnectoradServicePrincipalName"], () => require("./pcaconnectoradServicePrincipalName"));

export { PcaconnectoradTemplateArgs, PcaconnectoradTemplateState } from "./pcaconnectoradTemplate";
export type PcaconnectoradTemplate = import("./pcaconnectoradTemplate").PcaconnectoradTemplate;
export const PcaconnectoradTemplate: typeof import("./pcaconnectoradTemplate").PcaconnectoradTemplate = null as any;
utilities.lazyLoad(exports, ["PcaconnectoradTemplate"], () => require("./pcaconnectoradTemplate"));

export { PcaconnectoradTemplateGroupAccessControlEntryArgs, PcaconnectoradTemplateGroupAccessControlEntryState } from "./pcaconnectoradTemplateGroupAccessControlEntry";
export type PcaconnectoradTemplateGroupAccessControlEntry = import("./pcaconnectoradTemplateGroupAccessControlEntry").PcaconnectoradTemplateGroupAccessControlEntry;
export const PcaconnectoradTemplateGroupAccessControlEntry: typeof import("./pcaconnectoradTemplateGroupAccessControlEntry").PcaconnectoradTemplateGroupAccessControlEntry = null as any;
utilities.lazyLoad(exports, ["PcaconnectoradTemplateGroupAccessControlEntry"], () => require("./pcaconnectoradTemplateGroupAccessControlEntry"));

export { PersonalizeDatasetArgs, PersonalizeDatasetState } from "./personalizeDataset";
export type PersonalizeDataset = import("./personalizeDataset").PersonalizeDataset;
export const PersonalizeDataset: typeof import("./personalizeDataset").PersonalizeDataset = null as any;
utilities.lazyLoad(exports, ["PersonalizeDataset"], () => require("./personalizeDataset"));

export { PersonalizeDatasetGroupArgs, PersonalizeDatasetGroupState } from "./personalizeDatasetGroup";
export type PersonalizeDatasetGroup = import("./personalizeDatasetGroup").PersonalizeDatasetGroup;
export const PersonalizeDatasetGroup: typeof import("./personalizeDatasetGroup").PersonalizeDatasetGroup = null as any;
utilities.lazyLoad(exports, ["PersonalizeDatasetGroup"], () => require("./personalizeDatasetGroup"));

export { PersonalizeSchemaArgs, PersonalizeSchemaState } from "./personalizeSchema";
export type PersonalizeSchema = import("./personalizeSchema").PersonalizeSchema;
export const PersonalizeSchema: typeof import("./personalizeSchema").PersonalizeSchema = null as any;
utilities.lazyLoad(exports, ["PersonalizeSchema"], () => require("./personalizeSchema"));

export { PersonalizeSolutionArgs, PersonalizeSolutionState } from "./personalizeSolution";
export type PersonalizeSolution = import("./personalizeSolution").PersonalizeSolution;
export const PersonalizeSolution: typeof import("./personalizeSolution").PersonalizeSolution = null as any;
utilities.lazyLoad(exports, ["PersonalizeSolution"], () => require("./personalizeSolution"));

export { PinpointInAppTemplateArgs, PinpointInAppTemplateState } from "./pinpointInAppTemplate";
export type PinpointInAppTemplate = import("./pinpointInAppTemplate").PinpointInAppTemplate;
export const PinpointInAppTemplate: typeof import("./pinpointInAppTemplate").PinpointInAppTemplate = null as any;
utilities.lazyLoad(exports, ["PinpointInAppTemplate"], () => require("./pinpointInAppTemplate"));

export { PipesPipeArgs, PipesPipeState } from "./pipesPipe";
export type PipesPipe = import("./pipesPipe").PipesPipe;
export const PipesPipe: typeof import("./pipesPipe").PipesPipe = null as any;
utilities.lazyLoad(exports, ["PipesPipe"], () => require("./pipesPipe"));

export { ProtonEnvironmentAccountConnectionArgs, ProtonEnvironmentAccountConnectionState } from "./protonEnvironmentAccountConnection";
export type ProtonEnvironmentAccountConnection = import("./protonEnvironmentAccountConnection").ProtonEnvironmentAccountConnection;
export const ProtonEnvironmentAccountConnection: typeof import("./protonEnvironmentAccountConnection").ProtonEnvironmentAccountConnection = null as any;
utilities.lazyLoad(exports, ["ProtonEnvironmentAccountConnection"], () => require("./protonEnvironmentAccountConnection"));

export { ProtonEnvironmentTemplateArgs, ProtonEnvironmentTemplateState } from "./protonEnvironmentTemplate";
export type ProtonEnvironmentTemplate = import("./protonEnvironmentTemplate").ProtonEnvironmentTemplate;
export const ProtonEnvironmentTemplate: typeof import("./protonEnvironmentTemplate").ProtonEnvironmentTemplate = null as any;
utilities.lazyLoad(exports, ["ProtonEnvironmentTemplate"], () => require("./protonEnvironmentTemplate"));

export { ProtonServiceTemplateArgs, ProtonServiceTemplateState } from "./protonServiceTemplate";
export type ProtonServiceTemplate = import("./protonServiceTemplate").ProtonServiceTemplate;
export const ProtonServiceTemplate: typeof import("./protonServiceTemplate").ProtonServiceTemplate = null as any;
utilities.lazyLoad(exports, ["ProtonServiceTemplate"], () => require("./protonServiceTemplate"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QbusinessApplicationArgs, QbusinessApplicationState } from "./qbusinessApplication";
export type QbusinessApplication = import("./qbusinessApplication").QbusinessApplication;
export const QbusinessApplication: typeof import("./qbusinessApplication").QbusinessApplication = null as any;
utilities.lazyLoad(exports, ["QbusinessApplication"], () => require("./qbusinessApplication"));

export { QbusinessDataSourceArgs, QbusinessDataSourceState } from "./qbusinessDataSource";
export type QbusinessDataSource = import("./qbusinessDataSource").QbusinessDataSource;
export const QbusinessDataSource: typeof import("./qbusinessDataSource").QbusinessDataSource = null as any;
utilities.lazyLoad(exports, ["QbusinessDataSource"], () => require("./qbusinessDataSource"));

export { QbusinessIndexArgs, QbusinessIndexState } from "./qbusinessIndex";
export type QbusinessIndex = import("./qbusinessIndex").QbusinessIndex;
export const QbusinessIndex: typeof import("./qbusinessIndex").QbusinessIndex = null as any;
utilities.lazyLoad(exports, ["QbusinessIndex"], () => require("./qbusinessIndex"));

export { QbusinessPluginArgs, QbusinessPluginState } from "./qbusinessPlugin";
export type QbusinessPlugin = import("./qbusinessPlugin").QbusinessPlugin;
export const QbusinessPlugin: typeof import("./qbusinessPlugin").QbusinessPlugin = null as any;
utilities.lazyLoad(exports, ["QbusinessPlugin"], () => require("./qbusinessPlugin"));

export { QbusinessRetrieverArgs, QbusinessRetrieverState } from "./qbusinessRetriever";
export type QbusinessRetriever = import("./qbusinessRetriever").QbusinessRetriever;
export const QbusinessRetriever: typeof import("./qbusinessRetriever").QbusinessRetriever = null as any;
utilities.lazyLoad(exports, ["QbusinessRetriever"], () => require("./qbusinessRetriever"));

export { QbusinessWebExperienceArgs, QbusinessWebExperienceState } from "./qbusinessWebExperience";
export type QbusinessWebExperience = import("./qbusinessWebExperience").QbusinessWebExperience;
export const QbusinessWebExperience: typeof import("./qbusinessWebExperience").QbusinessWebExperience = null as any;
utilities.lazyLoad(exports, ["QbusinessWebExperience"], () => require("./qbusinessWebExperience"));

export { QldbStreamArgs, QldbStreamState } from "./qldbStream";
export type QldbStream = import("./qldbStream").QldbStream;
export const QldbStream: typeof import("./qldbStream").QldbStream = null as any;
utilities.lazyLoad(exports, ["QldbStream"], () => require("./qldbStream"));

export { QuicksightAnalysisArgs, QuicksightAnalysisState } from "./quicksightAnalysis";
export type QuicksightAnalysis = import("./quicksightAnalysis").QuicksightAnalysis;
export const QuicksightAnalysis: typeof import("./quicksightAnalysis").QuicksightAnalysis = null as any;
utilities.lazyLoad(exports, ["QuicksightAnalysis"], () => require("./quicksightAnalysis"));

export { QuicksightDashboardArgs, QuicksightDashboardState } from "./quicksightDashboard";
export type QuicksightDashboard = import("./quicksightDashboard").QuicksightDashboard;
export const QuicksightDashboard: typeof import("./quicksightDashboard").QuicksightDashboard = null as any;
utilities.lazyLoad(exports, ["QuicksightDashboard"], () => require("./quicksightDashboard"));

export { QuicksightDataSetArgs, QuicksightDataSetState } from "./quicksightDataSet";
export type QuicksightDataSet = import("./quicksightDataSet").QuicksightDataSet;
export const QuicksightDataSet: typeof import("./quicksightDataSet").QuicksightDataSet = null as any;
utilities.lazyLoad(exports, ["QuicksightDataSet"], () => require("./quicksightDataSet"));

export { QuicksightDataSourceArgs, QuicksightDataSourceState } from "./quicksightDataSource";
export type QuicksightDataSource = import("./quicksightDataSource").QuicksightDataSource;
export const QuicksightDataSource: typeof import("./quicksightDataSource").QuicksightDataSource = null as any;
utilities.lazyLoad(exports, ["QuicksightDataSource"], () => require("./quicksightDataSource"));

export { QuicksightRefreshScheduleArgs, QuicksightRefreshScheduleState } from "./quicksightRefreshSchedule";
export type QuicksightRefreshSchedule = import("./quicksightRefreshSchedule").QuicksightRefreshSchedule;
export const QuicksightRefreshSchedule: typeof import("./quicksightRefreshSchedule").QuicksightRefreshSchedule = null as any;
utilities.lazyLoad(exports, ["QuicksightRefreshSchedule"], () => require("./quicksightRefreshSchedule"));

export { QuicksightTemplateArgs, QuicksightTemplateState } from "./quicksightTemplate";
export type QuicksightTemplate = import("./quicksightTemplate").QuicksightTemplate;
export const QuicksightTemplate: typeof import("./quicksightTemplate").QuicksightTemplate = null as any;
utilities.lazyLoad(exports, ["QuicksightTemplate"], () => require("./quicksightTemplate"));

export { QuicksightThemeArgs, QuicksightThemeState } from "./quicksightTheme";
export type QuicksightTheme = import("./quicksightTheme").QuicksightTheme;
export const QuicksightTheme: typeof import("./quicksightTheme").QuicksightTheme = null as any;
utilities.lazyLoad(exports, ["QuicksightTheme"], () => require("./quicksightTheme"));

export { QuicksightTopicArgs, QuicksightTopicState } from "./quicksightTopic";
export type QuicksightTopic = import("./quicksightTopic").QuicksightTopic;
export const QuicksightTopic: typeof import("./quicksightTopic").QuicksightTopic = null as any;
utilities.lazyLoad(exports, ["QuicksightTopic"], () => require("./quicksightTopic"));

export { QuicksightVpcConnectionArgs, QuicksightVpcConnectionState } from "./quicksightVpcConnection";
export type QuicksightVpcConnection = import("./quicksightVpcConnection").QuicksightVpcConnection;
export const QuicksightVpcConnection: typeof import("./quicksightVpcConnection").QuicksightVpcConnection = null as any;
utilities.lazyLoad(exports, ["QuicksightVpcConnection"], () => require("./quicksightVpcConnection"));

export { RamPermissionArgs, RamPermissionState } from "./ramPermission";
export type RamPermission = import("./ramPermission").RamPermission;
export const RamPermission: typeof import("./ramPermission").RamPermission = null as any;
utilities.lazyLoad(exports, ["RamPermission"], () => require("./ramPermission"));

export { RdsCustomDbEngineVersionArgs, RdsCustomDbEngineVersionState } from "./rdsCustomDbEngineVersion";
export type RdsCustomDbEngineVersion = import("./rdsCustomDbEngineVersion").RdsCustomDbEngineVersion;
export const RdsCustomDbEngineVersion: typeof import("./rdsCustomDbEngineVersion").RdsCustomDbEngineVersion = null as any;
utilities.lazyLoad(exports, ["RdsCustomDbEngineVersion"], () => require("./rdsCustomDbEngineVersion"));

export { RdsDbClusterArgs, RdsDbClusterState } from "./rdsDbCluster";
export type RdsDbCluster = import("./rdsDbCluster").RdsDbCluster;
export const RdsDbCluster: typeof import("./rdsDbCluster").RdsDbCluster = null as any;
utilities.lazyLoad(exports, ["RdsDbCluster"], () => require("./rdsDbCluster"));

export { RdsDbClusterParameterGroupArgs, RdsDbClusterParameterGroupState } from "./rdsDbClusterParameterGroup";
export type RdsDbClusterParameterGroup = import("./rdsDbClusterParameterGroup").RdsDbClusterParameterGroup;
export const RdsDbClusterParameterGroup: typeof import("./rdsDbClusterParameterGroup").RdsDbClusterParameterGroup = null as any;
utilities.lazyLoad(exports, ["RdsDbClusterParameterGroup"], () => require("./rdsDbClusterParameterGroup"));

export { RdsDbInstanceArgs, RdsDbInstanceState } from "./rdsDbInstance";
export type RdsDbInstance = import("./rdsDbInstance").RdsDbInstance;
export const RdsDbInstance: typeof import("./rdsDbInstance").RdsDbInstance = null as any;
utilities.lazyLoad(exports, ["RdsDbInstance"], () => require("./rdsDbInstance"));

export { RdsDbParameterGroupArgs, RdsDbParameterGroupState } from "./rdsDbParameterGroup";
export type RdsDbParameterGroup = import("./rdsDbParameterGroup").RdsDbParameterGroup;
export const RdsDbParameterGroup: typeof import("./rdsDbParameterGroup").RdsDbParameterGroup = null as any;
utilities.lazyLoad(exports, ["RdsDbParameterGroup"], () => require("./rdsDbParameterGroup"));

export { RdsDbProxyArgs, RdsDbProxyState } from "./rdsDbProxy";
export type RdsDbProxy = import("./rdsDbProxy").RdsDbProxy;
export const RdsDbProxy: typeof import("./rdsDbProxy").RdsDbProxy = null as any;
utilities.lazyLoad(exports, ["RdsDbProxy"], () => require("./rdsDbProxy"));

export { RdsDbProxyEndpointArgs, RdsDbProxyEndpointState } from "./rdsDbProxyEndpoint";
export type RdsDbProxyEndpoint = import("./rdsDbProxyEndpoint").RdsDbProxyEndpoint;
export const RdsDbProxyEndpoint: typeof import("./rdsDbProxyEndpoint").RdsDbProxyEndpoint = null as any;
utilities.lazyLoad(exports, ["RdsDbProxyEndpoint"], () => require("./rdsDbProxyEndpoint"));

export { RdsDbProxyTargetGroupArgs, RdsDbProxyTargetGroupState } from "./rdsDbProxyTargetGroup";
export type RdsDbProxyTargetGroup = import("./rdsDbProxyTargetGroup").RdsDbProxyTargetGroup;
export const RdsDbProxyTargetGroup: typeof import("./rdsDbProxyTargetGroup").RdsDbProxyTargetGroup = null as any;
utilities.lazyLoad(exports, ["RdsDbProxyTargetGroup"], () => require("./rdsDbProxyTargetGroup"));

export { RdsDbSubnetGroupArgs, RdsDbSubnetGroupState } from "./rdsDbSubnetGroup";
export type RdsDbSubnetGroup = import("./rdsDbSubnetGroup").RdsDbSubnetGroup;
export const RdsDbSubnetGroup: typeof import("./rdsDbSubnetGroup").RdsDbSubnetGroup = null as any;
utilities.lazyLoad(exports, ["RdsDbSubnetGroup"], () => require("./rdsDbSubnetGroup"));

export { RdsEventSubscriptionArgs, RdsEventSubscriptionState } from "./rdsEventSubscription";
export type RdsEventSubscription = import("./rdsEventSubscription").RdsEventSubscription;
export const RdsEventSubscription: typeof import("./rdsEventSubscription").RdsEventSubscription = null as any;
utilities.lazyLoad(exports, ["RdsEventSubscription"], () => require("./rdsEventSubscription"));

export { RdsGlobalClusterArgs, RdsGlobalClusterState } from "./rdsGlobalCluster";
export type RdsGlobalCluster = import("./rdsGlobalCluster").RdsGlobalCluster;
export const RdsGlobalCluster: typeof import("./rdsGlobalCluster").RdsGlobalCluster = null as any;
utilities.lazyLoad(exports, ["RdsGlobalCluster"], () => require("./rdsGlobalCluster"));

export { RdsIntegrationArgs, RdsIntegrationState } from "./rdsIntegration";
export type RdsIntegration = import("./rdsIntegration").RdsIntegration;
export const RdsIntegration: typeof import("./rdsIntegration").RdsIntegration = null as any;
utilities.lazyLoad(exports, ["RdsIntegration"], () => require("./rdsIntegration"));

export { RdsOptionGroupArgs, RdsOptionGroupState } from "./rdsOptionGroup";
export type RdsOptionGroup = import("./rdsOptionGroup").RdsOptionGroup;
export const RdsOptionGroup: typeof import("./rdsOptionGroup").RdsOptionGroup = null as any;
utilities.lazyLoad(exports, ["RdsOptionGroup"], () => require("./rdsOptionGroup"));

export { RedshiftClusterArgs, RedshiftClusterState } from "./redshiftCluster";
export type RedshiftCluster = import("./redshiftCluster").RedshiftCluster;
export const RedshiftCluster: typeof import("./redshiftCluster").RedshiftCluster = null as any;
utilities.lazyLoad(exports, ["RedshiftCluster"], () => require("./redshiftCluster"));

export { RedshiftClusterParameterGroupArgs, RedshiftClusterParameterGroupState } from "./redshiftClusterParameterGroup";
export type RedshiftClusterParameterGroup = import("./redshiftClusterParameterGroup").RedshiftClusterParameterGroup;
export const RedshiftClusterParameterGroup: typeof import("./redshiftClusterParameterGroup").RedshiftClusterParameterGroup = null as any;
utilities.lazyLoad(exports, ["RedshiftClusterParameterGroup"], () => require("./redshiftClusterParameterGroup"));

export { RedshiftClusterSubnetGroupArgs, RedshiftClusterSubnetGroupState } from "./redshiftClusterSubnetGroup";
export type RedshiftClusterSubnetGroup = import("./redshiftClusterSubnetGroup").RedshiftClusterSubnetGroup;
export const RedshiftClusterSubnetGroup: typeof import("./redshiftClusterSubnetGroup").RedshiftClusterSubnetGroup = null as any;
utilities.lazyLoad(exports, ["RedshiftClusterSubnetGroup"], () => require("./redshiftClusterSubnetGroup"));

export { RedshiftEndpointAccessArgs, RedshiftEndpointAccessState } from "./redshiftEndpointAccess";
export type RedshiftEndpointAccess = import("./redshiftEndpointAccess").RedshiftEndpointAccess;
export const RedshiftEndpointAccess: typeof import("./redshiftEndpointAccess").RedshiftEndpointAccess = null as any;
utilities.lazyLoad(exports, ["RedshiftEndpointAccess"], () => require("./redshiftEndpointAccess"));

export { RedshiftEndpointAuthorizationArgs, RedshiftEndpointAuthorizationState } from "./redshiftEndpointAuthorization";
export type RedshiftEndpointAuthorization = import("./redshiftEndpointAuthorization").RedshiftEndpointAuthorization;
export const RedshiftEndpointAuthorization: typeof import("./redshiftEndpointAuthorization").RedshiftEndpointAuthorization = null as any;
utilities.lazyLoad(exports, ["RedshiftEndpointAuthorization"], () => require("./redshiftEndpointAuthorization"));

export { RedshiftEventSubscriptionArgs, RedshiftEventSubscriptionState } from "./redshiftEventSubscription";
export type RedshiftEventSubscription = import("./redshiftEventSubscription").RedshiftEventSubscription;
export const RedshiftEventSubscription: typeof import("./redshiftEventSubscription").RedshiftEventSubscription = null as any;
utilities.lazyLoad(exports, ["RedshiftEventSubscription"], () => require("./redshiftEventSubscription"));

export { RedshiftScheduledActionArgs, RedshiftScheduledActionState } from "./redshiftScheduledAction";
export type RedshiftScheduledAction = import("./redshiftScheduledAction").RedshiftScheduledAction;
export const RedshiftScheduledAction: typeof import("./redshiftScheduledAction").RedshiftScheduledAction = null as any;
utilities.lazyLoad(exports, ["RedshiftScheduledAction"], () => require("./redshiftScheduledAction"));

export { RedshiftserverlessNamespaceArgs, RedshiftserverlessNamespaceState } from "./redshiftserverlessNamespace";
export type RedshiftserverlessNamespace = import("./redshiftserverlessNamespace").RedshiftserverlessNamespace;
export const RedshiftserverlessNamespace: typeof import("./redshiftserverlessNamespace").RedshiftserverlessNamespace = null as any;
utilities.lazyLoad(exports, ["RedshiftserverlessNamespace"], () => require("./redshiftserverlessNamespace"));

export { RedshiftserverlessWorkgroupArgs, RedshiftserverlessWorkgroupState } from "./redshiftserverlessWorkgroup";
export type RedshiftserverlessWorkgroup = import("./redshiftserverlessWorkgroup").RedshiftserverlessWorkgroup;
export const RedshiftserverlessWorkgroup: typeof import("./redshiftserverlessWorkgroup").RedshiftserverlessWorkgroup = null as any;
utilities.lazyLoad(exports, ["RedshiftserverlessWorkgroup"], () => require("./redshiftserverlessWorkgroup"));

export { RefactorspacesApplicationArgs, RefactorspacesApplicationState } from "./refactorspacesApplication";
export type RefactorspacesApplication = import("./refactorspacesApplication").RefactorspacesApplication;
export const RefactorspacesApplication: typeof import("./refactorspacesApplication").RefactorspacesApplication = null as any;
utilities.lazyLoad(exports, ["RefactorspacesApplication"], () => require("./refactorspacesApplication"));

export { RefactorspacesEnvironmentArgs, RefactorspacesEnvironmentState } from "./refactorspacesEnvironment";
export type RefactorspacesEnvironment = import("./refactorspacesEnvironment").RefactorspacesEnvironment;
export const RefactorspacesEnvironment: typeof import("./refactorspacesEnvironment").RefactorspacesEnvironment = null as any;
utilities.lazyLoad(exports, ["RefactorspacesEnvironment"], () => require("./refactorspacesEnvironment"));

export { RefactorspacesRouteArgs, RefactorspacesRouteState } from "./refactorspacesRoute";
export type RefactorspacesRoute = import("./refactorspacesRoute").RefactorspacesRoute;
export const RefactorspacesRoute: typeof import("./refactorspacesRoute").RefactorspacesRoute = null as any;
utilities.lazyLoad(exports, ["RefactorspacesRoute"], () => require("./refactorspacesRoute"));

export { RefactorspacesServiceArgs, RefactorspacesServiceState } from "./refactorspacesService";
export type RefactorspacesService = import("./refactorspacesService").RefactorspacesService;
export const RefactorspacesService: typeof import("./refactorspacesService").RefactorspacesService = null as any;
utilities.lazyLoad(exports, ["RefactorspacesService"], () => require("./refactorspacesService"));

export { RekognitionCollectionArgs, RekognitionCollectionState } from "./rekognitionCollection";
export type RekognitionCollection = import("./rekognitionCollection").RekognitionCollection;
export const RekognitionCollection: typeof import("./rekognitionCollection").RekognitionCollection = null as any;
utilities.lazyLoad(exports, ["RekognitionCollection"], () => require("./rekognitionCollection"));

export { RekognitionProjectArgs, RekognitionProjectState } from "./rekognitionProject";
export type RekognitionProject = import("./rekognitionProject").RekognitionProject;
export const RekognitionProject: typeof import("./rekognitionProject").RekognitionProject = null as any;
utilities.lazyLoad(exports, ["RekognitionProject"], () => require("./rekognitionProject"));

export { ResiliencehubAppArgs, ResiliencehubAppState } from "./resiliencehubApp";
export type ResiliencehubApp = import("./resiliencehubApp").ResiliencehubApp;
export const ResiliencehubApp: typeof import("./resiliencehubApp").ResiliencehubApp = null as any;
utilities.lazyLoad(exports, ["ResiliencehubApp"], () => require("./resiliencehubApp"));

export { ResiliencehubResiliencyPolicyArgs, ResiliencehubResiliencyPolicyState } from "./resiliencehubResiliencyPolicy";
export type ResiliencehubResiliencyPolicy = import("./resiliencehubResiliencyPolicy").ResiliencehubResiliencyPolicy;
export const ResiliencehubResiliencyPolicy: typeof import("./resiliencehubResiliencyPolicy").ResiliencehubResiliencyPolicy = null as any;
utilities.lazyLoad(exports, ["ResiliencehubResiliencyPolicy"], () => require("./resiliencehubResiliencyPolicy"));

export { Resourceexplorer2DefaultViewAssociationArgs, Resourceexplorer2DefaultViewAssociationState } from "./resourceexplorer2DefaultViewAssociation";
export type Resourceexplorer2DefaultViewAssociation = import("./resourceexplorer2DefaultViewAssociation").Resourceexplorer2DefaultViewAssociation;
export const Resourceexplorer2DefaultViewAssociation: typeof import("./resourceexplorer2DefaultViewAssociation").Resourceexplorer2DefaultViewAssociation = null as any;
utilities.lazyLoad(exports, ["Resourceexplorer2DefaultViewAssociation"], () => require("./resourceexplorer2DefaultViewAssociation"));

export { Resourceexplorer2IndexArgs, Resourceexplorer2IndexState } from "./resourceexplorer2Index";
export type Resourceexplorer2Index = import("./resourceexplorer2Index").Resourceexplorer2Index;
export const Resourceexplorer2Index: typeof import("./resourceexplorer2Index").Resourceexplorer2Index = null as any;
utilities.lazyLoad(exports, ["Resourceexplorer2Index"], () => require("./resourceexplorer2Index"));

export { Resourceexplorer2ViewArgs, Resourceexplorer2ViewState } from "./resourceexplorer2View";
export type Resourceexplorer2View = import("./resourceexplorer2View").Resourceexplorer2View;
export const Resourceexplorer2View: typeof import("./resourceexplorer2View").Resourceexplorer2View = null as any;
utilities.lazyLoad(exports, ["Resourceexplorer2View"], () => require("./resourceexplorer2View"));

export { ResourcegroupsGroupArgs, ResourcegroupsGroupState } from "./resourcegroupsGroup";
export type ResourcegroupsGroup = import("./resourcegroupsGroup").ResourcegroupsGroup;
export const ResourcegroupsGroup: typeof import("./resourcegroupsGroup").ResourcegroupsGroup = null as any;
utilities.lazyLoad(exports, ["ResourcegroupsGroup"], () => require("./resourcegroupsGroup"));

export { RobomakerFleetArgs, RobomakerFleetState } from "./robomakerFleet";
export type RobomakerFleet = import("./robomakerFleet").RobomakerFleet;
export const RobomakerFleet: typeof import("./robomakerFleet").RobomakerFleet = null as any;
utilities.lazyLoad(exports, ["RobomakerFleet"], () => require("./robomakerFleet"));

export { RobomakerRobotArgs, RobomakerRobotState } from "./robomakerRobot";
export type RobomakerRobot = import("./robomakerRobot").RobomakerRobot;
export const RobomakerRobot: typeof import("./robomakerRobot").RobomakerRobot = null as any;
utilities.lazyLoad(exports, ["RobomakerRobot"], () => require("./robomakerRobot"));

export { RobomakerRobotApplicationArgs, RobomakerRobotApplicationState } from "./robomakerRobotApplication";
export type RobomakerRobotApplication = import("./robomakerRobotApplication").RobomakerRobotApplication;
export const RobomakerRobotApplication: typeof import("./robomakerRobotApplication").RobomakerRobotApplication = null as any;
utilities.lazyLoad(exports, ["RobomakerRobotApplication"], () => require("./robomakerRobotApplication"));

export { RobomakerRobotApplicationVersionArgs, RobomakerRobotApplicationVersionState } from "./robomakerRobotApplicationVersion";
export type RobomakerRobotApplicationVersion = import("./robomakerRobotApplicationVersion").RobomakerRobotApplicationVersion;
export const RobomakerRobotApplicationVersion: typeof import("./robomakerRobotApplicationVersion").RobomakerRobotApplicationVersion = null as any;
utilities.lazyLoad(exports, ["RobomakerRobotApplicationVersion"], () => require("./robomakerRobotApplicationVersion"));

export { RobomakerSimulationApplicationArgs, RobomakerSimulationApplicationState } from "./robomakerSimulationApplication";
export type RobomakerSimulationApplication = import("./robomakerSimulationApplication").RobomakerSimulationApplication;
export const RobomakerSimulationApplication: typeof import("./robomakerSimulationApplication").RobomakerSimulationApplication = null as any;
utilities.lazyLoad(exports, ["RobomakerSimulationApplication"], () => require("./robomakerSimulationApplication"));

export { RobomakerSimulationApplicationVersionArgs, RobomakerSimulationApplicationVersionState } from "./robomakerSimulationApplicationVersion";
export type RobomakerSimulationApplicationVersion = import("./robomakerSimulationApplicationVersion").RobomakerSimulationApplicationVersion;
export const RobomakerSimulationApplicationVersion: typeof import("./robomakerSimulationApplicationVersion").RobomakerSimulationApplicationVersion = null as any;
utilities.lazyLoad(exports, ["RobomakerSimulationApplicationVersion"], () => require("./robomakerSimulationApplicationVersion"));

export { RolesanywhereCrlArgs, RolesanywhereCrlState } from "./rolesanywhereCrl";
export type RolesanywhereCrl = import("./rolesanywhereCrl").RolesanywhereCrl;
export const RolesanywhereCrl: typeof import("./rolesanywhereCrl").RolesanywhereCrl = null as any;
utilities.lazyLoad(exports, ["RolesanywhereCrl"], () => require("./rolesanywhereCrl"));

export { RolesanywhereProfileArgs, RolesanywhereProfileState } from "./rolesanywhereProfile";
export type RolesanywhereProfile = import("./rolesanywhereProfile").RolesanywhereProfile;
export const RolesanywhereProfile: typeof import("./rolesanywhereProfile").RolesanywhereProfile = null as any;
utilities.lazyLoad(exports, ["RolesanywhereProfile"], () => require("./rolesanywhereProfile"));

export { RolesanywhereTrustAnchorArgs, RolesanywhereTrustAnchorState } from "./rolesanywhereTrustAnchor";
export type RolesanywhereTrustAnchor = import("./rolesanywhereTrustAnchor").RolesanywhereTrustAnchor;
export const RolesanywhereTrustAnchor: typeof import("./rolesanywhereTrustAnchor").RolesanywhereTrustAnchor = null as any;
utilities.lazyLoad(exports, ["RolesanywhereTrustAnchor"], () => require("./rolesanywhereTrustAnchor"));

export { Route53CidrCollectionArgs, Route53CidrCollectionState } from "./route53CidrCollection";
export type Route53CidrCollection = import("./route53CidrCollection").Route53CidrCollection;
export const Route53CidrCollection: typeof import("./route53CidrCollection").Route53CidrCollection = null as any;
utilities.lazyLoad(exports, ["Route53CidrCollection"], () => require("./route53CidrCollection"));

export { Route53DnssecArgs, Route53DnssecState } from "./route53Dnssec";
export type Route53Dnssec = import("./route53Dnssec").Route53Dnssec;
export const Route53Dnssec: typeof import("./route53Dnssec").Route53Dnssec = null as any;
utilities.lazyLoad(exports, ["Route53Dnssec"], () => require("./route53Dnssec"));

export { Route53HealthCheckArgs, Route53HealthCheckState } from "./route53HealthCheck";
export type Route53HealthCheck = import("./route53HealthCheck").Route53HealthCheck;
export const Route53HealthCheck: typeof import("./route53HealthCheck").Route53HealthCheck = null as any;
utilities.lazyLoad(exports, ["Route53HealthCheck"], () => require("./route53HealthCheck"));

export { Route53HostedZoneArgs, Route53HostedZoneState } from "./route53HostedZone";
export type Route53HostedZone = import("./route53HostedZone").Route53HostedZone;
export const Route53HostedZone: typeof import("./route53HostedZone").Route53HostedZone = null as any;
utilities.lazyLoad(exports, ["Route53HostedZone"], () => require("./route53HostedZone"));

export { Route53KeySigningKeyArgs, Route53KeySigningKeyState } from "./route53KeySigningKey";
export type Route53KeySigningKey = import("./route53KeySigningKey").Route53KeySigningKey;
export const Route53KeySigningKey: typeof import("./route53KeySigningKey").Route53KeySigningKey = null as any;
utilities.lazyLoad(exports, ["Route53KeySigningKey"], () => require("./route53KeySigningKey"));

export { Route53profilesProfileArgs, Route53profilesProfileState } from "./route53profilesProfile";
export type Route53profilesProfile = import("./route53profilesProfile").Route53profilesProfile;
export const Route53profilesProfile: typeof import("./route53profilesProfile").Route53profilesProfile = null as any;
utilities.lazyLoad(exports, ["Route53profilesProfile"], () => require("./route53profilesProfile"));

export { Route53profilesProfileAssociationArgs, Route53profilesProfileAssociationState } from "./route53profilesProfileAssociation";
export type Route53profilesProfileAssociation = import("./route53profilesProfileAssociation").Route53profilesProfileAssociation;
export const Route53profilesProfileAssociation: typeof import("./route53profilesProfileAssociation").Route53profilesProfileAssociation = null as any;
utilities.lazyLoad(exports, ["Route53profilesProfileAssociation"], () => require("./route53profilesProfileAssociation"));

export { Route53profilesProfileResourceAssociationArgs, Route53profilesProfileResourceAssociationState } from "./route53profilesProfileResourceAssociation";
export type Route53profilesProfileResourceAssociation = import("./route53profilesProfileResourceAssociation").Route53profilesProfileResourceAssociation;
export const Route53profilesProfileResourceAssociation: typeof import("./route53profilesProfileResourceAssociation").Route53profilesProfileResourceAssociation = null as any;
utilities.lazyLoad(exports, ["Route53profilesProfileResourceAssociation"], () => require("./route53profilesProfileResourceAssociation"));

export { Route53recoverycontrolClusterArgs, Route53recoverycontrolClusterState } from "./route53recoverycontrolCluster";
export type Route53recoverycontrolCluster = import("./route53recoverycontrolCluster").Route53recoverycontrolCluster;
export const Route53recoverycontrolCluster: typeof import("./route53recoverycontrolCluster").Route53recoverycontrolCluster = null as any;
utilities.lazyLoad(exports, ["Route53recoverycontrolCluster"], () => require("./route53recoverycontrolCluster"));

export { Route53recoverycontrolControlPanelArgs, Route53recoverycontrolControlPanelState } from "./route53recoverycontrolControlPanel";
export type Route53recoverycontrolControlPanel = import("./route53recoverycontrolControlPanel").Route53recoverycontrolControlPanel;
export const Route53recoverycontrolControlPanel: typeof import("./route53recoverycontrolControlPanel").Route53recoverycontrolControlPanel = null as any;
utilities.lazyLoad(exports, ["Route53recoverycontrolControlPanel"], () => require("./route53recoverycontrolControlPanel"));

export { Route53recoverycontrolRoutingControlArgs, Route53recoverycontrolRoutingControlState } from "./route53recoverycontrolRoutingControl";
export type Route53recoverycontrolRoutingControl = import("./route53recoverycontrolRoutingControl").Route53recoverycontrolRoutingControl;
export const Route53recoverycontrolRoutingControl: typeof import("./route53recoverycontrolRoutingControl").Route53recoverycontrolRoutingControl = null as any;
utilities.lazyLoad(exports, ["Route53recoverycontrolRoutingControl"], () => require("./route53recoverycontrolRoutingControl"));

export { Route53recoverycontrolSafetyRuleArgs, Route53recoverycontrolSafetyRuleState } from "./route53recoverycontrolSafetyRule";
export type Route53recoverycontrolSafetyRule = import("./route53recoverycontrolSafetyRule").Route53recoverycontrolSafetyRule;
export const Route53recoverycontrolSafetyRule: typeof import("./route53recoverycontrolSafetyRule").Route53recoverycontrolSafetyRule = null as any;
utilities.lazyLoad(exports, ["Route53recoverycontrolSafetyRule"], () => require("./route53recoverycontrolSafetyRule"));

export { Route53recoveryreadinessCellArgs, Route53recoveryreadinessCellState } from "./route53recoveryreadinessCell";
export type Route53recoveryreadinessCell = import("./route53recoveryreadinessCell").Route53recoveryreadinessCell;
export const Route53recoveryreadinessCell: typeof import("./route53recoveryreadinessCell").Route53recoveryreadinessCell = null as any;
utilities.lazyLoad(exports, ["Route53recoveryreadinessCell"], () => require("./route53recoveryreadinessCell"));

export { Route53recoveryreadinessReadinessCheckArgs, Route53recoveryreadinessReadinessCheckState } from "./route53recoveryreadinessReadinessCheck";
export type Route53recoveryreadinessReadinessCheck = import("./route53recoveryreadinessReadinessCheck").Route53recoveryreadinessReadinessCheck;
export const Route53recoveryreadinessReadinessCheck: typeof import("./route53recoveryreadinessReadinessCheck").Route53recoveryreadinessReadinessCheck = null as any;
utilities.lazyLoad(exports, ["Route53recoveryreadinessReadinessCheck"], () => require("./route53recoveryreadinessReadinessCheck"));

export { Route53recoveryreadinessRecoveryGroupArgs, Route53recoveryreadinessRecoveryGroupState } from "./route53recoveryreadinessRecoveryGroup";
export type Route53recoveryreadinessRecoveryGroup = import("./route53recoveryreadinessRecoveryGroup").Route53recoveryreadinessRecoveryGroup;
export const Route53recoveryreadinessRecoveryGroup: typeof import("./route53recoveryreadinessRecoveryGroup").Route53recoveryreadinessRecoveryGroup = null as any;
utilities.lazyLoad(exports, ["Route53recoveryreadinessRecoveryGroup"], () => require("./route53recoveryreadinessRecoveryGroup"));

export { Route53recoveryreadinessResourceSetArgs, Route53recoveryreadinessResourceSetState } from "./route53recoveryreadinessResourceSet";
export type Route53recoveryreadinessResourceSet = import("./route53recoveryreadinessResourceSet").Route53recoveryreadinessResourceSet;
export const Route53recoveryreadinessResourceSet: typeof import("./route53recoveryreadinessResourceSet").Route53recoveryreadinessResourceSet = null as any;
utilities.lazyLoad(exports, ["Route53recoveryreadinessResourceSet"], () => require("./route53recoveryreadinessResourceSet"));

export { Route53resolverFirewallDomainListArgs, Route53resolverFirewallDomainListState } from "./route53resolverFirewallDomainList";
export type Route53resolverFirewallDomainList = import("./route53resolverFirewallDomainList").Route53resolverFirewallDomainList;
export const Route53resolverFirewallDomainList: typeof import("./route53resolverFirewallDomainList").Route53resolverFirewallDomainList = null as any;
utilities.lazyLoad(exports, ["Route53resolverFirewallDomainList"], () => require("./route53resolverFirewallDomainList"));

export { Route53resolverFirewallRuleGroupArgs, Route53resolverFirewallRuleGroupState } from "./route53resolverFirewallRuleGroup";
export type Route53resolverFirewallRuleGroup = import("./route53resolverFirewallRuleGroup").Route53resolverFirewallRuleGroup;
export const Route53resolverFirewallRuleGroup: typeof import("./route53resolverFirewallRuleGroup").Route53resolverFirewallRuleGroup = null as any;
utilities.lazyLoad(exports, ["Route53resolverFirewallRuleGroup"], () => require("./route53resolverFirewallRuleGroup"));

export { Route53resolverFirewallRuleGroupAssociationArgs, Route53resolverFirewallRuleGroupAssociationState } from "./route53resolverFirewallRuleGroupAssociation";
export type Route53resolverFirewallRuleGroupAssociation = import("./route53resolverFirewallRuleGroupAssociation").Route53resolverFirewallRuleGroupAssociation;
export const Route53resolverFirewallRuleGroupAssociation: typeof import("./route53resolverFirewallRuleGroupAssociation").Route53resolverFirewallRuleGroupAssociation = null as any;
utilities.lazyLoad(exports, ["Route53resolverFirewallRuleGroupAssociation"], () => require("./route53resolverFirewallRuleGroupAssociation"));

export { Route53resolverOutpostResolverArgs, Route53resolverOutpostResolverState } from "./route53resolverOutpostResolver";
export type Route53resolverOutpostResolver = import("./route53resolverOutpostResolver").Route53resolverOutpostResolver;
export const Route53resolverOutpostResolver: typeof import("./route53resolverOutpostResolver").Route53resolverOutpostResolver = null as any;
utilities.lazyLoad(exports, ["Route53resolverOutpostResolver"], () => require("./route53resolverOutpostResolver"));

export { Route53resolverResolverConfigArgs, Route53resolverResolverConfigState } from "./route53resolverResolverConfig";
export type Route53resolverResolverConfig = import("./route53resolverResolverConfig").Route53resolverResolverConfig;
export const Route53resolverResolverConfig: typeof import("./route53resolverResolverConfig").Route53resolverResolverConfig = null as any;
utilities.lazyLoad(exports, ["Route53resolverResolverConfig"], () => require("./route53resolverResolverConfig"));

export { Route53resolverResolverDnssecConfigArgs, Route53resolverResolverDnssecConfigState } from "./route53resolverResolverDnssecConfig";
export type Route53resolverResolverDnssecConfig = import("./route53resolverResolverDnssecConfig").Route53resolverResolverDnssecConfig;
export const Route53resolverResolverDnssecConfig: typeof import("./route53resolverResolverDnssecConfig").Route53resolverResolverDnssecConfig = null as any;
utilities.lazyLoad(exports, ["Route53resolverResolverDnssecConfig"], () => require("./route53resolverResolverDnssecConfig"));

export { Route53resolverResolverQueryLoggingConfigArgs, Route53resolverResolverQueryLoggingConfigState } from "./route53resolverResolverQueryLoggingConfig";
export type Route53resolverResolverQueryLoggingConfig = import("./route53resolverResolverQueryLoggingConfig").Route53resolverResolverQueryLoggingConfig;
export const Route53resolverResolverQueryLoggingConfig: typeof import("./route53resolverResolverQueryLoggingConfig").Route53resolverResolverQueryLoggingConfig = null as any;
utilities.lazyLoad(exports, ["Route53resolverResolverQueryLoggingConfig"], () => require("./route53resolverResolverQueryLoggingConfig"));

export { Route53resolverResolverQueryLoggingConfigAssociationArgs, Route53resolverResolverQueryLoggingConfigAssociationState } from "./route53resolverResolverQueryLoggingConfigAssociation";
export type Route53resolverResolverQueryLoggingConfigAssociation = import("./route53resolverResolverQueryLoggingConfigAssociation").Route53resolverResolverQueryLoggingConfigAssociation;
export const Route53resolverResolverQueryLoggingConfigAssociation: typeof import("./route53resolverResolverQueryLoggingConfigAssociation").Route53resolverResolverQueryLoggingConfigAssociation = null as any;
utilities.lazyLoad(exports, ["Route53resolverResolverQueryLoggingConfigAssociation"], () => require("./route53resolverResolverQueryLoggingConfigAssociation"));

export { Route53resolverResolverRuleArgs, Route53resolverResolverRuleState } from "./route53resolverResolverRule";
export type Route53resolverResolverRule = import("./route53resolverResolverRule").Route53resolverResolverRule;
export const Route53resolverResolverRule: typeof import("./route53resolverResolverRule").Route53resolverResolverRule = null as any;
utilities.lazyLoad(exports, ["Route53resolverResolverRule"], () => require("./route53resolverResolverRule"));

export { Route53resolverResolverRuleAssociationArgs, Route53resolverResolverRuleAssociationState } from "./route53resolverResolverRuleAssociation";
export type Route53resolverResolverRuleAssociation = import("./route53resolverResolverRuleAssociation").Route53resolverResolverRuleAssociation;
export const Route53resolverResolverRuleAssociation: typeof import("./route53resolverResolverRuleAssociation").Route53resolverResolverRuleAssociation = null as any;
utilities.lazyLoad(exports, ["Route53resolverResolverRuleAssociation"], () => require("./route53resolverResolverRuleAssociation"));

export { RumAppMonitorArgs, RumAppMonitorState } from "./rumAppMonitor";
export type RumAppMonitor = import("./rumAppMonitor").RumAppMonitor;
export const RumAppMonitor: typeof import("./rumAppMonitor").RumAppMonitor = null as any;
utilities.lazyLoad(exports, ["RumAppMonitor"], () => require("./rumAppMonitor"));

export { S3AccessGrantArgs, S3AccessGrantState } from "./s3accessGrant";
export type S3AccessGrant = import("./s3accessGrant").S3AccessGrant;
export const S3AccessGrant: typeof import("./s3accessGrant").S3AccessGrant = null as any;
utilities.lazyLoad(exports, ["S3AccessGrant"], () => require("./s3accessGrant"));

export { S3AccessGrantsInstanceArgs, S3AccessGrantsInstanceState } from "./s3accessGrantsInstance";
export type S3AccessGrantsInstance = import("./s3accessGrantsInstance").S3AccessGrantsInstance;
export const S3AccessGrantsInstance: typeof import("./s3accessGrantsInstance").S3AccessGrantsInstance = null as any;
utilities.lazyLoad(exports, ["S3AccessGrantsInstance"], () => require("./s3accessGrantsInstance"));

export { S3AccessGrantsLocationArgs, S3AccessGrantsLocationState } from "./s3accessGrantsLocation";
export type S3AccessGrantsLocation = import("./s3accessGrantsLocation").S3AccessGrantsLocation;
export const S3AccessGrantsLocation: typeof import("./s3accessGrantsLocation").S3AccessGrantsLocation = null as any;
utilities.lazyLoad(exports, ["S3AccessGrantsLocation"], () => require("./s3accessGrantsLocation"));

export { S3AccessPointArgs, S3AccessPointState } from "./s3accessPoint";
export type S3AccessPoint = import("./s3accessPoint").S3AccessPoint;
export const S3AccessPoint: typeof import("./s3accessPoint").S3AccessPoint = null as any;
utilities.lazyLoad(exports, ["S3AccessPoint"], () => require("./s3accessPoint"));

export { S3BucketArgs, S3BucketState } from "./s3bucket";
export type S3Bucket = import("./s3bucket").S3Bucket;
export const S3Bucket: typeof import("./s3bucket").S3Bucket = null as any;
utilities.lazyLoad(exports, ["S3Bucket"], () => require("./s3bucket"));

export { S3BucketPolicyArgs, S3BucketPolicyState } from "./s3bucketPolicy";
export type S3BucketPolicy = import("./s3bucketPolicy").S3BucketPolicy;
export const S3BucketPolicy: typeof import("./s3bucketPolicy").S3BucketPolicy = null as any;
utilities.lazyLoad(exports, ["S3BucketPolicy"], () => require("./s3bucketPolicy"));

export { S3expressBucketPolicyArgs, S3expressBucketPolicyState } from "./s3expressBucketPolicy";
export type S3expressBucketPolicy = import("./s3expressBucketPolicy").S3expressBucketPolicy;
export const S3expressBucketPolicy: typeof import("./s3expressBucketPolicy").S3expressBucketPolicy = null as any;
utilities.lazyLoad(exports, ["S3expressBucketPolicy"], () => require("./s3expressBucketPolicy"));

export { S3expressDirectoryBucketArgs, S3expressDirectoryBucketState } from "./s3expressDirectoryBucket";
export type S3expressDirectoryBucket = import("./s3expressDirectoryBucket").S3expressDirectoryBucket;
export const S3expressDirectoryBucket: typeof import("./s3expressDirectoryBucket").S3expressDirectoryBucket = null as any;
utilities.lazyLoad(exports, ["S3expressDirectoryBucket"], () => require("./s3expressDirectoryBucket"));

export { S3MultiRegionAccessPointArgs, S3MultiRegionAccessPointState } from "./s3multiRegionAccessPoint";
export type S3MultiRegionAccessPoint = import("./s3multiRegionAccessPoint").S3MultiRegionAccessPoint;
export const S3MultiRegionAccessPoint: typeof import("./s3multiRegionAccessPoint").S3MultiRegionAccessPoint = null as any;
utilities.lazyLoad(exports, ["S3MultiRegionAccessPoint"], () => require("./s3multiRegionAccessPoint"));

export { S3MultiRegionAccessPointPolicyArgs, S3MultiRegionAccessPointPolicyState } from "./s3multiRegionAccessPointPolicy";
export type S3MultiRegionAccessPointPolicy = import("./s3multiRegionAccessPointPolicy").S3MultiRegionAccessPointPolicy;
export const S3MultiRegionAccessPointPolicy: typeof import("./s3multiRegionAccessPointPolicy").S3MultiRegionAccessPointPolicy = null as any;
utilities.lazyLoad(exports, ["S3MultiRegionAccessPointPolicy"], () => require("./s3multiRegionAccessPointPolicy"));

export { S3objectlambdaAccessPointArgs, S3objectlambdaAccessPointState } from "./s3objectlambdaAccessPoint";
export type S3objectlambdaAccessPoint = import("./s3objectlambdaAccessPoint").S3objectlambdaAccessPoint;
export const S3objectlambdaAccessPoint: typeof import("./s3objectlambdaAccessPoint").S3objectlambdaAccessPoint = null as any;
utilities.lazyLoad(exports, ["S3objectlambdaAccessPoint"], () => require("./s3objectlambdaAccessPoint"));

export { S3objectlambdaAccessPointPolicyArgs, S3objectlambdaAccessPointPolicyState } from "./s3objectlambdaAccessPointPolicy";
export type S3objectlambdaAccessPointPolicy = import("./s3objectlambdaAccessPointPolicy").S3objectlambdaAccessPointPolicy;
export const S3objectlambdaAccessPointPolicy: typeof import("./s3objectlambdaAccessPointPolicy").S3objectlambdaAccessPointPolicy = null as any;
utilities.lazyLoad(exports, ["S3objectlambdaAccessPointPolicy"], () => require("./s3objectlambdaAccessPointPolicy"));

export { S3outpostsAccessPointArgs, S3outpostsAccessPointState } from "./s3outpostsAccessPoint";
export type S3outpostsAccessPoint = import("./s3outpostsAccessPoint").S3outpostsAccessPoint;
export const S3outpostsAccessPoint: typeof import("./s3outpostsAccessPoint").S3outpostsAccessPoint = null as any;
utilities.lazyLoad(exports, ["S3outpostsAccessPoint"], () => require("./s3outpostsAccessPoint"));

export { S3outpostsBucketArgs, S3outpostsBucketState } from "./s3outpostsBucket";
export type S3outpostsBucket = import("./s3outpostsBucket").S3outpostsBucket;
export const S3outpostsBucket: typeof import("./s3outpostsBucket").S3outpostsBucket = null as any;
utilities.lazyLoad(exports, ["S3outpostsBucket"], () => require("./s3outpostsBucket"));

export { S3outpostsBucketPolicyArgs, S3outpostsBucketPolicyState } from "./s3outpostsBucketPolicy";
export type S3outpostsBucketPolicy = import("./s3outpostsBucketPolicy").S3outpostsBucketPolicy;
export const S3outpostsBucketPolicy: typeof import("./s3outpostsBucketPolicy").S3outpostsBucketPolicy = null as any;
utilities.lazyLoad(exports, ["S3outpostsBucketPolicy"], () => require("./s3outpostsBucketPolicy"));

export { S3outpostsEndpointArgs, S3outpostsEndpointState } from "./s3outpostsEndpoint";
export type S3outpostsEndpoint = import("./s3outpostsEndpoint").S3outpostsEndpoint;
export const S3outpostsEndpoint: typeof import("./s3outpostsEndpoint").S3outpostsEndpoint = null as any;
utilities.lazyLoad(exports, ["S3outpostsEndpoint"], () => require("./s3outpostsEndpoint"));

export { S3StorageLensArgs, S3StorageLensState } from "./s3storageLens";
export type S3StorageLens = import("./s3storageLens").S3StorageLens;
export const S3StorageLens: typeof import("./s3storageLens").S3StorageLens = null as any;
utilities.lazyLoad(exports, ["S3StorageLens"], () => require("./s3storageLens"));

export { S3StorageLensGroupArgs, S3StorageLensGroupState } from "./s3storageLensGroup";
export type S3StorageLensGroup = import("./s3storageLensGroup").S3StorageLensGroup;
export const S3StorageLensGroup: typeof import("./s3storageLensGroup").S3StorageLensGroup = null as any;
utilities.lazyLoad(exports, ["S3StorageLensGroup"], () => require("./s3storageLensGroup"));

export { SagemakerAppArgs, SagemakerAppState } from "./sagemakerApp";
export type SagemakerApp = import("./sagemakerApp").SagemakerApp;
export const SagemakerApp: typeof import("./sagemakerApp").SagemakerApp = null as any;
utilities.lazyLoad(exports, ["SagemakerApp"], () => require("./sagemakerApp"));

export { SagemakerAppImageConfigArgs, SagemakerAppImageConfigState } from "./sagemakerAppImageConfig";
export type SagemakerAppImageConfig = import("./sagemakerAppImageConfig").SagemakerAppImageConfig;
export const SagemakerAppImageConfig: typeof import("./sagemakerAppImageConfig").SagemakerAppImageConfig = null as any;
utilities.lazyLoad(exports, ["SagemakerAppImageConfig"], () => require("./sagemakerAppImageConfig"));

export { SagemakerDataQualityJobDefinitionArgs, SagemakerDataQualityJobDefinitionState } from "./sagemakerDataQualityJobDefinition";
export type SagemakerDataQualityJobDefinition = import("./sagemakerDataQualityJobDefinition").SagemakerDataQualityJobDefinition;
export const SagemakerDataQualityJobDefinition: typeof import("./sagemakerDataQualityJobDefinition").SagemakerDataQualityJobDefinition = null as any;
utilities.lazyLoad(exports, ["SagemakerDataQualityJobDefinition"], () => require("./sagemakerDataQualityJobDefinition"));

export { SagemakerDeviceArgs, SagemakerDeviceState } from "./sagemakerDevice";
export type SagemakerDevice = import("./sagemakerDevice").SagemakerDevice;
export const SagemakerDevice: typeof import("./sagemakerDevice").SagemakerDevice = null as any;
utilities.lazyLoad(exports, ["SagemakerDevice"], () => require("./sagemakerDevice"));

export { SagemakerDeviceFleetArgs, SagemakerDeviceFleetState } from "./sagemakerDeviceFleet";
export type SagemakerDeviceFleet = import("./sagemakerDeviceFleet").SagemakerDeviceFleet;
export const SagemakerDeviceFleet: typeof import("./sagemakerDeviceFleet").SagemakerDeviceFleet = null as any;
utilities.lazyLoad(exports, ["SagemakerDeviceFleet"], () => require("./sagemakerDeviceFleet"));

export { SagemakerDomainArgs, SagemakerDomainState } from "./sagemakerDomain";
export type SagemakerDomain = import("./sagemakerDomain").SagemakerDomain;
export const SagemakerDomain: typeof import("./sagemakerDomain").SagemakerDomain = null as any;
utilities.lazyLoad(exports, ["SagemakerDomain"], () => require("./sagemakerDomain"));

export { SagemakerFeatureGroupArgs, SagemakerFeatureGroupState } from "./sagemakerFeatureGroup";
export type SagemakerFeatureGroup = import("./sagemakerFeatureGroup").SagemakerFeatureGroup;
export const SagemakerFeatureGroup: typeof import("./sagemakerFeatureGroup").SagemakerFeatureGroup = null as any;
utilities.lazyLoad(exports, ["SagemakerFeatureGroup"], () => require("./sagemakerFeatureGroup"));

export { SagemakerImageArgs, SagemakerImageState } from "./sagemakerImage";
export type SagemakerImage = import("./sagemakerImage").SagemakerImage;
export const SagemakerImage: typeof import("./sagemakerImage").SagemakerImage = null as any;
utilities.lazyLoad(exports, ["SagemakerImage"], () => require("./sagemakerImage"));

export { SagemakerImageVersionArgs, SagemakerImageVersionState } from "./sagemakerImageVersion";
export type SagemakerImageVersion = import("./sagemakerImageVersion").SagemakerImageVersion;
export const SagemakerImageVersion: typeof import("./sagemakerImageVersion").SagemakerImageVersion = null as any;
utilities.lazyLoad(exports, ["SagemakerImageVersion"], () => require("./sagemakerImageVersion"));

export { SagemakerInferenceComponentArgs, SagemakerInferenceComponentState } from "./sagemakerInferenceComponent";
export type SagemakerInferenceComponent = import("./sagemakerInferenceComponent").SagemakerInferenceComponent;
export const SagemakerInferenceComponent: typeof import("./sagemakerInferenceComponent").SagemakerInferenceComponent = null as any;
utilities.lazyLoad(exports, ["SagemakerInferenceComponent"], () => require("./sagemakerInferenceComponent"));

export { SagemakerInferenceExperimentArgs, SagemakerInferenceExperimentState } from "./sagemakerInferenceExperiment";
export type SagemakerInferenceExperiment = import("./sagemakerInferenceExperiment").SagemakerInferenceExperiment;
export const SagemakerInferenceExperiment: typeof import("./sagemakerInferenceExperiment").SagemakerInferenceExperiment = null as any;
utilities.lazyLoad(exports, ["SagemakerInferenceExperiment"], () => require("./sagemakerInferenceExperiment"));

export { SagemakerMlflowTrackingServerArgs, SagemakerMlflowTrackingServerState } from "./sagemakerMlflowTrackingServer";
export type SagemakerMlflowTrackingServer = import("./sagemakerMlflowTrackingServer").SagemakerMlflowTrackingServer;
export const SagemakerMlflowTrackingServer: typeof import("./sagemakerMlflowTrackingServer").SagemakerMlflowTrackingServer = null as any;
utilities.lazyLoad(exports, ["SagemakerMlflowTrackingServer"], () => require("./sagemakerMlflowTrackingServer"));

export { SagemakerModelBiasJobDefinitionArgs, SagemakerModelBiasJobDefinitionState } from "./sagemakerModelBiasJobDefinition";
export type SagemakerModelBiasJobDefinition = import("./sagemakerModelBiasJobDefinition").SagemakerModelBiasJobDefinition;
export const SagemakerModelBiasJobDefinition: typeof import("./sagemakerModelBiasJobDefinition").SagemakerModelBiasJobDefinition = null as any;
utilities.lazyLoad(exports, ["SagemakerModelBiasJobDefinition"], () => require("./sagemakerModelBiasJobDefinition"));

export { SagemakerModelExplainabilityJobDefinitionArgs, SagemakerModelExplainabilityJobDefinitionState } from "./sagemakerModelExplainabilityJobDefinition";
export type SagemakerModelExplainabilityJobDefinition = import("./sagemakerModelExplainabilityJobDefinition").SagemakerModelExplainabilityJobDefinition;
export const SagemakerModelExplainabilityJobDefinition: typeof import("./sagemakerModelExplainabilityJobDefinition").SagemakerModelExplainabilityJobDefinition = null as any;
utilities.lazyLoad(exports, ["SagemakerModelExplainabilityJobDefinition"], () => require("./sagemakerModelExplainabilityJobDefinition"));

export { SagemakerModelPackageArgs, SagemakerModelPackageState } from "./sagemakerModelPackage";
export type SagemakerModelPackage = import("./sagemakerModelPackage").SagemakerModelPackage;
export const SagemakerModelPackage: typeof import("./sagemakerModelPackage").SagemakerModelPackage = null as any;
utilities.lazyLoad(exports, ["SagemakerModelPackage"], () => require("./sagemakerModelPackage"));

export { SagemakerModelPackageGroupArgs, SagemakerModelPackageGroupState } from "./sagemakerModelPackageGroup";
export type SagemakerModelPackageGroup = import("./sagemakerModelPackageGroup").SagemakerModelPackageGroup;
export const SagemakerModelPackageGroup: typeof import("./sagemakerModelPackageGroup").SagemakerModelPackageGroup = null as any;
utilities.lazyLoad(exports, ["SagemakerModelPackageGroup"], () => require("./sagemakerModelPackageGroup"));

export { SagemakerModelQualityJobDefinitionArgs, SagemakerModelQualityJobDefinitionState } from "./sagemakerModelQualityJobDefinition";
export type SagemakerModelQualityJobDefinition = import("./sagemakerModelQualityJobDefinition").SagemakerModelQualityJobDefinition;
export const SagemakerModelQualityJobDefinition: typeof import("./sagemakerModelQualityJobDefinition").SagemakerModelQualityJobDefinition = null as any;
utilities.lazyLoad(exports, ["SagemakerModelQualityJobDefinition"], () => require("./sagemakerModelQualityJobDefinition"));

export { SagemakerMonitoringScheduleArgs, SagemakerMonitoringScheduleState } from "./sagemakerMonitoringSchedule";
export type SagemakerMonitoringSchedule = import("./sagemakerMonitoringSchedule").SagemakerMonitoringSchedule;
export const SagemakerMonitoringSchedule: typeof import("./sagemakerMonitoringSchedule").SagemakerMonitoringSchedule = null as any;
utilities.lazyLoad(exports, ["SagemakerMonitoringSchedule"], () => require("./sagemakerMonitoringSchedule"));

export { SagemakerPipelineArgs, SagemakerPipelineState } from "./sagemakerPipeline";
export type SagemakerPipeline = import("./sagemakerPipeline").SagemakerPipeline;
export const SagemakerPipeline: typeof import("./sagemakerPipeline").SagemakerPipeline = null as any;
utilities.lazyLoad(exports, ["SagemakerPipeline"], () => require("./sagemakerPipeline"));

export { SagemakerProjectArgs, SagemakerProjectState } from "./sagemakerProject";
export type SagemakerProject = import("./sagemakerProject").SagemakerProject;
export const SagemakerProject: typeof import("./sagemakerProject").SagemakerProject = null as any;
utilities.lazyLoad(exports, ["SagemakerProject"], () => require("./sagemakerProject"));

export { SagemakerSpaceArgs, SagemakerSpaceState } from "./sagemakerSpace";
export type SagemakerSpace = import("./sagemakerSpace").SagemakerSpace;
export const SagemakerSpace: typeof import("./sagemakerSpace").SagemakerSpace = null as any;
utilities.lazyLoad(exports, ["SagemakerSpace"], () => require("./sagemakerSpace"));

export { SagemakerStudioLifecycleConfigArgs, SagemakerStudioLifecycleConfigState } from "./sagemakerStudioLifecycleConfig";
export type SagemakerStudioLifecycleConfig = import("./sagemakerStudioLifecycleConfig").SagemakerStudioLifecycleConfig;
export const SagemakerStudioLifecycleConfig: typeof import("./sagemakerStudioLifecycleConfig").SagemakerStudioLifecycleConfig = null as any;
utilities.lazyLoad(exports, ["SagemakerStudioLifecycleConfig"], () => require("./sagemakerStudioLifecycleConfig"));

export { SagemakerUserProfileArgs, SagemakerUserProfileState } from "./sagemakerUserProfile";
export type SagemakerUserProfile = import("./sagemakerUserProfile").SagemakerUserProfile;
export const SagemakerUserProfile: typeof import("./sagemakerUserProfile").SagemakerUserProfile = null as any;
utilities.lazyLoad(exports, ["SagemakerUserProfile"], () => require("./sagemakerUserProfile"));

export { SchedulerScheduleGroupArgs, SchedulerScheduleGroupState } from "./schedulerScheduleGroup";
export type SchedulerScheduleGroup = import("./schedulerScheduleGroup").SchedulerScheduleGroup;
export const SchedulerScheduleGroup: typeof import("./schedulerScheduleGroup").SchedulerScheduleGroup = null as any;
utilities.lazyLoad(exports, ["SchedulerScheduleGroup"], () => require("./schedulerScheduleGroup"));

export { SecretsmanagerResourcePolicyArgs, SecretsmanagerResourcePolicyState } from "./secretsmanagerResourcePolicy";
export type SecretsmanagerResourcePolicy = import("./secretsmanagerResourcePolicy").SecretsmanagerResourcePolicy;
export const SecretsmanagerResourcePolicy: typeof import("./secretsmanagerResourcePolicy").SecretsmanagerResourcePolicy = null as any;
utilities.lazyLoad(exports, ["SecretsmanagerResourcePolicy"], () => require("./secretsmanagerResourcePolicy"));

export { SecretsmanagerSecretArgs, SecretsmanagerSecretState } from "./secretsmanagerSecret";
export type SecretsmanagerSecret = import("./secretsmanagerSecret").SecretsmanagerSecret;
export const SecretsmanagerSecret: typeof import("./secretsmanagerSecret").SecretsmanagerSecret = null as any;
utilities.lazyLoad(exports, ["SecretsmanagerSecret"], () => require("./secretsmanagerSecret"));

export { SecurityhubConfigurationPolicyArgs, SecurityhubConfigurationPolicyState } from "./securityhubConfigurationPolicy";
export type SecurityhubConfigurationPolicy = import("./securityhubConfigurationPolicy").SecurityhubConfigurationPolicy;
export const SecurityhubConfigurationPolicy: typeof import("./securityhubConfigurationPolicy").SecurityhubConfigurationPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityhubConfigurationPolicy"], () => require("./securityhubConfigurationPolicy"));

export { SecurityhubDelegatedAdminArgs, SecurityhubDelegatedAdminState } from "./securityhubDelegatedAdmin";
export type SecurityhubDelegatedAdmin = import("./securityhubDelegatedAdmin").SecurityhubDelegatedAdmin;
export const SecurityhubDelegatedAdmin: typeof import("./securityhubDelegatedAdmin").SecurityhubDelegatedAdmin = null as any;
utilities.lazyLoad(exports, ["SecurityhubDelegatedAdmin"], () => require("./securityhubDelegatedAdmin"));

export { SecurityhubFindingAggregatorArgs, SecurityhubFindingAggregatorState } from "./securityhubFindingAggregator";
export type SecurityhubFindingAggregator = import("./securityhubFindingAggregator").SecurityhubFindingAggregator;
export const SecurityhubFindingAggregator: typeof import("./securityhubFindingAggregator").SecurityhubFindingAggregator = null as any;
utilities.lazyLoad(exports, ["SecurityhubFindingAggregator"], () => require("./securityhubFindingAggregator"));

export { SecurityhubHubArgs, SecurityhubHubState } from "./securityhubHub";
export type SecurityhubHub = import("./securityhubHub").SecurityhubHub;
export const SecurityhubHub: typeof import("./securityhubHub").SecurityhubHub = null as any;
utilities.lazyLoad(exports, ["SecurityhubHub"], () => require("./securityhubHub"));

export { SecurityhubInsightArgs, SecurityhubInsightState } from "./securityhubInsight";
export type SecurityhubInsight = import("./securityhubInsight").SecurityhubInsight;
export const SecurityhubInsight: typeof import("./securityhubInsight").SecurityhubInsight = null as any;
utilities.lazyLoad(exports, ["SecurityhubInsight"], () => require("./securityhubInsight"));

export { SecurityhubOrganizationConfigurationArgs, SecurityhubOrganizationConfigurationState } from "./securityhubOrganizationConfiguration";
export type SecurityhubOrganizationConfiguration = import("./securityhubOrganizationConfiguration").SecurityhubOrganizationConfiguration;
export const SecurityhubOrganizationConfiguration: typeof import("./securityhubOrganizationConfiguration").SecurityhubOrganizationConfiguration = null as any;
utilities.lazyLoad(exports, ["SecurityhubOrganizationConfiguration"], () => require("./securityhubOrganizationConfiguration"));

export { SecurityhubPolicyAssociationArgs, SecurityhubPolicyAssociationState } from "./securityhubPolicyAssociation";
export type SecurityhubPolicyAssociation = import("./securityhubPolicyAssociation").SecurityhubPolicyAssociation;
export const SecurityhubPolicyAssociation: typeof import("./securityhubPolicyAssociation").SecurityhubPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["SecurityhubPolicyAssociation"], () => require("./securityhubPolicyAssociation"));

export { SecurityhubProductSubscriptionArgs, SecurityhubProductSubscriptionState } from "./securityhubProductSubscription";
export type SecurityhubProductSubscription = import("./securityhubProductSubscription").SecurityhubProductSubscription;
export const SecurityhubProductSubscription: typeof import("./securityhubProductSubscription").SecurityhubProductSubscription = null as any;
utilities.lazyLoad(exports, ["SecurityhubProductSubscription"], () => require("./securityhubProductSubscription"));

export { SecurityhubSecurityControlArgs, SecurityhubSecurityControlState } from "./securityhubSecurityControl";
export type SecurityhubSecurityControl = import("./securityhubSecurityControl").SecurityhubSecurityControl;
export const SecurityhubSecurityControl: typeof import("./securityhubSecurityControl").SecurityhubSecurityControl = null as any;
utilities.lazyLoad(exports, ["SecurityhubSecurityControl"], () => require("./securityhubSecurityControl"));

export { SecurityhubStandardArgs, SecurityhubStandardState } from "./securityhubStandard";
export type SecurityhubStandard = import("./securityhubStandard").SecurityhubStandard;
export const SecurityhubStandard: typeof import("./securityhubStandard").SecurityhubStandard = null as any;
utilities.lazyLoad(exports, ["SecurityhubStandard"], () => require("./securityhubStandard"));

export { SecuritylakeAwsLogSourceArgs, SecuritylakeAwsLogSourceState } from "./securitylakeAwsLogSource";
export type SecuritylakeAwsLogSource = import("./securitylakeAwsLogSource").SecuritylakeAwsLogSource;
export const SecuritylakeAwsLogSource: typeof import("./securitylakeAwsLogSource").SecuritylakeAwsLogSource = null as any;
utilities.lazyLoad(exports, ["SecuritylakeAwsLogSource"], () => require("./securitylakeAwsLogSource"));

export { SecuritylakeDataLakeArgs, SecuritylakeDataLakeState } from "./securitylakeDataLake";
export type SecuritylakeDataLake = import("./securitylakeDataLake").SecuritylakeDataLake;
export const SecuritylakeDataLake: typeof import("./securitylakeDataLake").SecuritylakeDataLake = null as any;
utilities.lazyLoad(exports, ["SecuritylakeDataLake"], () => require("./securitylakeDataLake"));

export { SecuritylakeSubscriberNotificationArgs, SecuritylakeSubscriberNotificationState } from "./securitylakeSubscriberNotification";
export type SecuritylakeSubscriberNotification = import("./securitylakeSubscriberNotification").SecuritylakeSubscriberNotification;
export const SecuritylakeSubscriberNotification: typeof import("./securitylakeSubscriberNotification").SecuritylakeSubscriberNotification = null as any;
utilities.lazyLoad(exports, ["SecuritylakeSubscriberNotification"], () => require("./securitylakeSubscriberNotification"));

export { ServicecatalogCloudformationProvisionedProductArgs, ServicecatalogCloudformationProvisionedProductState } from "./servicecatalogCloudformationProvisionedProduct";
export type ServicecatalogCloudformationProvisionedProduct = import("./servicecatalogCloudformationProvisionedProduct").ServicecatalogCloudformationProvisionedProduct;
export const ServicecatalogCloudformationProvisionedProduct: typeof import("./servicecatalogCloudformationProvisionedProduct").ServicecatalogCloudformationProvisionedProduct = null as any;
utilities.lazyLoad(exports, ["ServicecatalogCloudformationProvisionedProduct"], () => require("./servicecatalogCloudformationProvisionedProduct"));

export { ServicecatalogServiceActionArgs, ServicecatalogServiceActionState } from "./servicecatalogServiceAction";
export type ServicecatalogServiceAction = import("./servicecatalogServiceAction").ServicecatalogServiceAction;
export const ServicecatalogServiceAction: typeof import("./servicecatalogServiceAction").ServicecatalogServiceAction = null as any;
utilities.lazyLoad(exports, ["ServicecatalogServiceAction"], () => require("./servicecatalogServiceAction"));

export { ServicecatalogServiceActionAssociationArgs, ServicecatalogServiceActionAssociationState } from "./servicecatalogServiceActionAssociation";
export type ServicecatalogServiceActionAssociation = import("./servicecatalogServiceActionAssociation").ServicecatalogServiceActionAssociation;
export const ServicecatalogServiceActionAssociation: typeof import("./servicecatalogServiceActionAssociation").ServicecatalogServiceActionAssociation = null as any;
utilities.lazyLoad(exports, ["ServicecatalogServiceActionAssociation"], () => require("./servicecatalogServiceActionAssociation"));

export { ServicecatalogappregistryApplicationArgs, ServicecatalogappregistryApplicationState } from "./servicecatalogappregistryApplication";
export type ServicecatalogappregistryApplication = import("./servicecatalogappregistryApplication").ServicecatalogappregistryApplication;
export const ServicecatalogappregistryApplication: typeof import("./servicecatalogappregistryApplication").ServicecatalogappregistryApplication = null as any;
utilities.lazyLoad(exports, ["ServicecatalogappregistryApplication"], () => require("./servicecatalogappregistryApplication"));

export { ServicecatalogappregistryAttributeGroupArgs, ServicecatalogappregistryAttributeGroupState } from "./servicecatalogappregistryAttributeGroup";
export type ServicecatalogappregistryAttributeGroup = import("./servicecatalogappregistryAttributeGroup").ServicecatalogappregistryAttributeGroup;
export const ServicecatalogappregistryAttributeGroup: typeof import("./servicecatalogappregistryAttributeGroup").ServicecatalogappregistryAttributeGroup = null as any;
utilities.lazyLoad(exports, ["ServicecatalogappregistryAttributeGroup"], () => require("./servicecatalogappregistryAttributeGroup"));

export { ServicecatalogappregistryAttributeGroupAssociationArgs, ServicecatalogappregistryAttributeGroupAssociationState } from "./servicecatalogappregistryAttributeGroupAssociation";
export type ServicecatalogappregistryAttributeGroupAssociation = import("./servicecatalogappregistryAttributeGroupAssociation").ServicecatalogappregistryAttributeGroupAssociation;
export const ServicecatalogappregistryAttributeGroupAssociation: typeof import("./servicecatalogappregistryAttributeGroupAssociation").ServicecatalogappregistryAttributeGroupAssociation = null as any;
utilities.lazyLoad(exports, ["ServicecatalogappregistryAttributeGroupAssociation"], () => require("./servicecatalogappregistryAttributeGroupAssociation"));

export { ServicecatalogappregistryResourceAssociationArgs, ServicecatalogappregistryResourceAssociationState } from "./servicecatalogappregistryResourceAssociation";
export type ServicecatalogappregistryResourceAssociation = import("./servicecatalogappregistryResourceAssociation").ServicecatalogappregistryResourceAssociation;
export const ServicecatalogappregistryResourceAssociation: typeof import("./servicecatalogappregistryResourceAssociation").ServicecatalogappregistryResourceAssociation = null as any;
utilities.lazyLoad(exports, ["ServicecatalogappregistryResourceAssociation"], () => require("./servicecatalogappregistryResourceAssociation"));

export { SesConfigurationSetArgs, SesConfigurationSetState } from "./sesConfigurationSet";
export type SesConfigurationSet = import("./sesConfigurationSet").SesConfigurationSet;
export const SesConfigurationSet: typeof import("./sesConfigurationSet").SesConfigurationSet = null as any;
utilities.lazyLoad(exports, ["SesConfigurationSet"], () => require("./sesConfigurationSet"));

export { SesConfigurationSetEventDestinationArgs, SesConfigurationSetEventDestinationState } from "./sesConfigurationSetEventDestination";
export type SesConfigurationSetEventDestination = import("./sesConfigurationSetEventDestination").SesConfigurationSetEventDestination;
export const SesConfigurationSetEventDestination: typeof import("./sesConfigurationSetEventDestination").SesConfigurationSetEventDestination = null as any;
utilities.lazyLoad(exports, ["SesConfigurationSetEventDestination"], () => require("./sesConfigurationSetEventDestination"));

export { SesContactListArgs, SesContactListState } from "./sesContactList";
export type SesContactList = import("./sesContactList").SesContactList;
export const SesContactList: typeof import("./sesContactList").SesContactList = null as any;
utilities.lazyLoad(exports, ["SesContactList"], () => require("./sesContactList"));

export { SesDedicatedIpPoolArgs, SesDedicatedIpPoolState } from "./sesDedicatedIpPool";
export type SesDedicatedIpPool = import("./sesDedicatedIpPool").SesDedicatedIpPool;
export const SesDedicatedIpPool: typeof import("./sesDedicatedIpPool").SesDedicatedIpPool = null as any;
utilities.lazyLoad(exports, ["SesDedicatedIpPool"], () => require("./sesDedicatedIpPool"));

export { SesEmailIdentityArgs, SesEmailIdentityState } from "./sesEmailIdentity";
export type SesEmailIdentity = import("./sesEmailIdentity").SesEmailIdentity;
export const SesEmailIdentity: typeof import("./sesEmailIdentity").SesEmailIdentity = null as any;
utilities.lazyLoad(exports, ["SesEmailIdentity"], () => require("./sesEmailIdentity"));

export { SesMailManagerAddonInstanceArgs, SesMailManagerAddonInstanceState } from "./sesMailManagerAddonInstance";
export type SesMailManagerAddonInstance = import("./sesMailManagerAddonInstance").SesMailManagerAddonInstance;
export const SesMailManagerAddonInstance: typeof import("./sesMailManagerAddonInstance").SesMailManagerAddonInstance = null as any;
utilities.lazyLoad(exports, ["SesMailManagerAddonInstance"], () => require("./sesMailManagerAddonInstance"));

export { SesMailManagerAddonSubscriptionArgs, SesMailManagerAddonSubscriptionState } from "./sesMailManagerAddonSubscription";
export type SesMailManagerAddonSubscription = import("./sesMailManagerAddonSubscription").SesMailManagerAddonSubscription;
export const SesMailManagerAddonSubscription: typeof import("./sesMailManagerAddonSubscription").SesMailManagerAddonSubscription = null as any;
utilities.lazyLoad(exports, ["SesMailManagerAddonSubscription"], () => require("./sesMailManagerAddonSubscription"));

export { SesMailManagerArchiveArgs, SesMailManagerArchiveState } from "./sesMailManagerArchive";
export type SesMailManagerArchive = import("./sesMailManagerArchive").SesMailManagerArchive;
export const SesMailManagerArchive: typeof import("./sesMailManagerArchive").SesMailManagerArchive = null as any;
utilities.lazyLoad(exports, ["SesMailManagerArchive"], () => require("./sesMailManagerArchive"));

export { SesMailManagerIngressPointArgs, SesMailManagerIngressPointState } from "./sesMailManagerIngressPoint";
export type SesMailManagerIngressPoint = import("./sesMailManagerIngressPoint").SesMailManagerIngressPoint;
export const SesMailManagerIngressPoint: typeof import("./sesMailManagerIngressPoint").SesMailManagerIngressPoint = null as any;
utilities.lazyLoad(exports, ["SesMailManagerIngressPoint"], () => require("./sesMailManagerIngressPoint"));

export { SesMailManagerRelayArgs, SesMailManagerRelayState } from "./sesMailManagerRelay";
export type SesMailManagerRelay = import("./sesMailManagerRelay").SesMailManagerRelay;
export const SesMailManagerRelay: typeof import("./sesMailManagerRelay").SesMailManagerRelay = null as any;
utilities.lazyLoad(exports, ["SesMailManagerRelay"], () => require("./sesMailManagerRelay"));

export { SesMailManagerRuleSetArgs, SesMailManagerRuleSetState } from "./sesMailManagerRuleSet";
export type SesMailManagerRuleSet = import("./sesMailManagerRuleSet").SesMailManagerRuleSet;
export const SesMailManagerRuleSet: typeof import("./sesMailManagerRuleSet").SesMailManagerRuleSet = null as any;
utilities.lazyLoad(exports, ["SesMailManagerRuleSet"], () => require("./sesMailManagerRuleSet"));

export { SesMailManagerTrafficPolicyArgs, SesMailManagerTrafficPolicyState } from "./sesMailManagerTrafficPolicy";
export type SesMailManagerTrafficPolicy = import("./sesMailManagerTrafficPolicy").SesMailManagerTrafficPolicy;
export const SesMailManagerTrafficPolicy: typeof import("./sesMailManagerTrafficPolicy").SesMailManagerTrafficPolicy = null as any;
utilities.lazyLoad(exports, ["SesMailManagerTrafficPolicy"], () => require("./sesMailManagerTrafficPolicy"));

export { SesTemplateArgs, SesTemplateState } from "./sesTemplate";
export type SesTemplate = import("./sesTemplate").SesTemplate;
export const SesTemplate: typeof import("./sesTemplate").SesTemplate = null as any;
utilities.lazyLoad(exports, ["SesTemplate"], () => require("./sesTemplate"));

export { SesVdmAttributesArgs, SesVdmAttributesState } from "./sesVdmAttributes";
export type SesVdmAttributes = import("./sesVdmAttributes").SesVdmAttributes;
export const SesVdmAttributes: typeof import("./sesVdmAttributes").SesVdmAttributes = null as any;
utilities.lazyLoad(exports, ["SesVdmAttributes"], () => require("./sesVdmAttributes"));

export { ShieldDrtAccessArgs, ShieldDrtAccessState } from "./shieldDrtAccess";
export type ShieldDrtAccess = import("./shieldDrtAccess").ShieldDrtAccess;
export const ShieldDrtAccess: typeof import("./shieldDrtAccess").ShieldDrtAccess = null as any;
utilities.lazyLoad(exports, ["ShieldDrtAccess"], () => require("./shieldDrtAccess"));

export { ShieldProactiveEngagementArgs, ShieldProactiveEngagementState } from "./shieldProactiveEngagement";
export type ShieldProactiveEngagement = import("./shieldProactiveEngagement").ShieldProactiveEngagement;
export const ShieldProactiveEngagement: typeof import("./shieldProactiveEngagement").ShieldProactiveEngagement = null as any;
utilities.lazyLoad(exports, ["ShieldProactiveEngagement"], () => require("./shieldProactiveEngagement"));

export { ShieldProtectionArgs, ShieldProtectionState } from "./shieldProtection";
export type ShieldProtection = import("./shieldProtection").ShieldProtection;
export const ShieldProtection: typeof import("./shieldProtection").ShieldProtection = null as any;
utilities.lazyLoad(exports, ["ShieldProtection"], () => require("./shieldProtection"));

export { ShieldProtectionGroupArgs, ShieldProtectionGroupState } from "./shieldProtectionGroup";
export type ShieldProtectionGroup = import("./shieldProtectionGroup").ShieldProtectionGroup;
export const ShieldProtectionGroup: typeof import("./shieldProtectionGroup").ShieldProtectionGroup = null as any;
utilities.lazyLoad(exports, ["ShieldProtectionGroup"], () => require("./shieldProtectionGroup"));

export { SignerProfilePermissionArgs, SignerProfilePermissionState } from "./signerProfilePermission";
export type SignerProfilePermission = import("./signerProfilePermission").SignerProfilePermission;
export const SignerProfilePermission: typeof import("./signerProfilePermission").SignerProfilePermission = null as any;
utilities.lazyLoad(exports, ["SignerProfilePermission"], () => require("./signerProfilePermission"));

export { SignerSigningProfileArgs, SignerSigningProfileState } from "./signerSigningProfile";
export type SignerSigningProfile = import("./signerSigningProfile").SignerSigningProfile;
export const SignerSigningProfile: typeof import("./signerSigningProfile").SignerSigningProfile = null as any;
utilities.lazyLoad(exports, ["SignerSigningProfile"], () => require("./signerSigningProfile"));

export { SimspaceweaverSimulationArgs, SimspaceweaverSimulationState } from "./simspaceweaverSimulation";
export type SimspaceweaverSimulation = import("./simspaceweaverSimulation").SimspaceweaverSimulation;
export const SimspaceweaverSimulation: typeof import("./simspaceweaverSimulation").SimspaceweaverSimulation = null as any;
utilities.lazyLoad(exports, ["SimspaceweaverSimulation"], () => require("./simspaceweaverSimulation"));

export { SnsTopicArgs, SnsTopicState } from "./snsTopic";
export type SnsTopic = import("./snsTopic").SnsTopic;
export const SnsTopic: typeof import("./snsTopic").SnsTopic = null as any;
utilities.lazyLoad(exports, ["SnsTopic"], () => require("./snsTopic"));

export { SnsTopicInlinePolicyArgs, SnsTopicInlinePolicyState } from "./snsTopicInlinePolicy";
export type SnsTopicInlinePolicy = import("./snsTopicInlinePolicy").SnsTopicInlinePolicy;
export const SnsTopicInlinePolicy: typeof import("./snsTopicInlinePolicy").SnsTopicInlinePolicy = null as any;
utilities.lazyLoad(exports, ["SnsTopicInlinePolicy"], () => require("./snsTopicInlinePolicy"));

export { SqsQueueArgs, SqsQueueState } from "./sqsQueue";
export type SqsQueue = import("./sqsQueue").SqsQueue;
export const SqsQueue: typeof import("./sqsQueue").SqsQueue = null as any;
utilities.lazyLoad(exports, ["SqsQueue"], () => require("./sqsQueue"));

export { SqsQueueInlinePolicyArgs, SqsQueueInlinePolicyState } from "./sqsQueueInlinePolicy";
export type SqsQueueInlinePolicy = import("./sqsQueueInlinePolicy").SqsQueueInlinePolicy;
export const SqsQueueInlinePolicy: typeof import("./sqsQueueInlinePolicy").SqsQueueInlinePolicy = null as any;
utilities.lazyLoad(exports, ["SqsQueueInlinePolicy"], () => require("./sqsQueueInlinePolicy"));

export { SsmAssociationArgs, SsmAssociationState } from "./ssmAssociation";
export type SsmAssociation = import("./ssmAssociation").SsmAssociation;
export const SsmAssociation: typeof import("./ssmAssociation").SsmAssociation = null as any;
utilities.lazyLoad(exports, ["SsmAssociation"], () => require("./ssmAssociation"));

export { SsmDocumentArgs, SsmDocumentState } from "./ssmDocument";
export type SsmDocument = import("./ssmDocument").SsmDocument;
export const SsmDocument: typeof import("./ssmDocument").SsmDocument = null as any;
utilities.lazyLoad(exports, ["SsmDocument"], () => require("./ssmDocument"));

export { SsmParameterArgs, SsmParameterState } from "./ssmParameter";
export type SsmParameter = import("./ssmParameter").SsmParameter;
export const SsmParameter: typeof import("./ssmParameter").SsmParameter = null as any;
utilities.lazyLoad(exports, ["SsmParameter"], () => require("./ssmParameter"));

export { SsmPatchBaselineArgs, SsmPatchBaselineState } from "./ssmPatchBaseline";
export type SsmPatchBaseline = import("./ssmPatchBaseline").SsmPatchBaseline;
export const SsmPatchBaseline: typeof import("./ssmPatchBaseline").SsmPatchBaseline = null as any;
utilities.lazyLoad(exports, ["SsmPatchBaseline"], () => require("./ssmPatchBaseline"));

export { SsmResourceDataSyncArgs, SsmResourceDataSyncState } from "./ssmResourceDataSync";
export type SsmResourceDataSync = import("./ssmResourceDataSync").SsmResourceDataSync;
export const SsmResourceDataSync: typeof import("./ssmResourceDataSync").SsmResourceDataSync = null as any;
utilities.lazyLoad(exports, ["SsmResourceDataSync"], () => require("./ssmResourceDataSync"));

export { SsmResourcePolicyArgs, SsmResourcePolicyState } from "./ssmResourcePolicy";
export type SsmResourcePolicy = import("./ssmResourcePolicy").SsmResourcePolicy;
export const SsmResourcePolicy: typeof import("./ssmResourcePolicy").SsmResourcePolicy = null as any;
utilities.lazyLoad(exports, ["SsmResourcePolicy"], () => require("./ssmResourcePolicy"));

export { SsmcontactsContactArgs, SsmcontactsContactState } from "./ssmcontactsContact";
export type SsmcontactsContact = import("./ssmcontactsContact").SsmcontactsContact;
export const SsmcontactsContact: typeof import("./ssmcontactsContact").SsmcontactsContact = null as any;
utilities.lazyLoad(exports, ["SsmcontactsContact"], () => require("./ssmcontactsContact"));

export { SsmcontactsContactChannelArgs, SsmcontactsContactChannelState } from "./ssmcontactsContactChannel";
export type SsmcontactsContactChannel = import("./ssmcontactsContactChannel").SsmcontactsContactChannel;
export const SsmcontactsContactChannel: typeof import("./ssmcontactsContactChannel").SsmcontactsContactChannel = null as any;
utilities.lazyLoad(exports, ["SsmcontactsContactChannel"], () => require("./ssmcontactsContactChannel"));

export { SsmcontactsPlanArgs, SsmcontactsPlanState } from "./ssmcontactsPlan";
export type SsmcontactsPlan = import("./ssmcontactsPlan").SsmcontactsPlan;
export const SsmcontactsPlan: typeof import("./ssmcontactsPlan").SsmcontactsPlan = null as any;
utilities.lazyLoad(exports, ["SsmcontactsPlan"], () => require("./ssmcontactsPlan"));

export { SsmcontactsRotationArgs, SsmcontactsRotationState } from "./ssmcontactsRotation";
export type SsmcontactsRotation = import("./ssmcontactsRotation").SsmcontactsRotation;
export const SsmcontactsRotation: typeof import("./ssmcontactsRotation").SsmcontactsRotation = null as any;
utilities.lazyLoad(exports, ["SsmcontactsRotation"], () => require("./ssmcontactsRotation"));

export { SsmincidentsReplicationSetArgs, SsmincidentsReplicationSetState } from "./ssmincidentsReplicationSet";
export type SsmincidentsReplicationSet = import("./ssmincidentsReplicationSet").SsmincidentsReplicationSet;
export const SsmincidentsReplicationSet: typeof import("./ssmincidentsReplicationSet").SsmincidentsReplicationSet = null as any;
utilities.lazyLoad(exports, ["SsmincidentsReplicationSet"], () => require("./ssmincidentsReplicationSet"));

export { SsmincidentsResponsePlanArgs, SsmincidentsResponsePlanState } from "./ssmincidentsResponsePlan";
export type SsmincidentsResponsePlan = import("./ssmincidentsResponsePlan").SsmincidentsResponsePlan;
export const SsmincidentsResponsePlan: typeof import("./ssmincidentsResponsePlan").SsmincidentsResponsePlan = null as any;
utilities.lazyLoad(exports, ["SsmincidentsResponsePlan"], () => require("./ssmincidentsResponsePlan"));

export { SsmquicksetupConfigurationManagerArgs, SsmquicksetupConfigurationManagerState } from "./ssmquicksetupConfigurationManager";
export type SsmquicksetupConfigurationManager = import("./ssmquicksetupConfigurationManager").SsmquicksetupConfigurationManager;
export const SsmquicksetupConfigurationManager: typeof import("./ssmquicksetupConfigurationManager").SsmquicksetupConfigurationManager = null as any;
utilities.lazyLoad(exports, ["SsmquicksetupConfigurationManager"], () => require("./ssmquicksetupConfigurationManager"));

export { SsoApplicationArgs, SsoApplicationState } from "./ssoApplication";
export type SsoApplication = import("./ssoApplication").SsoApplication;
export const SsoApplication: typeof import("./ssoApplication").SsoApplication = null as any;
utilities.lazyLoad(exports, ["SsoApplication"], () => require("./ssoApplication"));

export { SsoApplicationAssignmentArgs, SsoApplicationAssignmentState } from "./ssoApplicationAssignment";
export type SsoApplicationAssignment = import("./ssoApplicationAssignment").SsoApplicationAssignment;
export const SsoApplicationAssignment: typeof import("./ssoApplicationAssignment").SsoApplicationAssignment = null as any;
utilities.lazyLoad(exports, ["SsoApplicationAssignment"], () => require("./ssoApplicationAssignment"));

export { SsoAssignmentArgs, SsoAssignmentState } from "./ssoAssignment";
export type SsoAssignment = import("./ssoAssignment").SsoAssignment;
export const SsoAssignment: typeof import("./ssoAssignment").SsoAssignment = null as any;
utilities.lazyLoad(exports, ["SsoAssignment"], () => require("./ssoAssignment"));

export { SsoInstanceArgs, SsoInstanceState } from "./ssoInstance";
export type SsoInstance = import("./ssoInstance").SsoInstance;
export const SsoInstance: typeof import("./ssoInstance").SsoInstance = null as any;
utilities.lazyLoad(exports, ["SsoInstance"], () => require("./ssoInstance"));

export { SsoInstanceAccessControlAttributeConfigurationArgs, SsoInstanceAccessControlAttributeConfigurationState } from "./ssoInstanceAccessControlAttributeConfiguration";
export type SsoInstanceAccessControlAttributeConfiguration = import("./ssoInstanceAccessControlAttributeConfiguration").SsoInstanceAccessControlAttributeConfiguration;
export const SsoInstanceAccessControlAttributeConfiguration: typeof import("./ssoInstanceAccessControlAttributeConfiguration").SsoInstanceAccessControlAttributeConfiguration = null as any;
utilities.lazyLoad(exports, ["SsoInstanceAccessControlAttributeConfiguration"], () => require("./ssoInstanceAccessControlAttributeConfiguration"));

export { SsoPermissionSetArgs, SsoPermissionSetState } from "./ssoPermissionSet";
export type SsoPermissionSet = import("./ssoPermissionSet").SsoPermissionSet;
export const SsoPermissionSet: typeof import("./ssoPermissionSet").SsoPermissionSet = null as any;
utilities.lazyLoad(exports, ["SsoPermissionSet"], () => require("./ssoPermissionSet"));

export { StepfunctionsActivityArgs, StepfunctionsActivityState } from "./stepfunctionsActivity";
export type StepfunctionsActivity = import("./stepfunctionsActivity").StepfunctionsActivity;
export const StepfunctionsActivity: typeof import("./stepfunctionsActivity").StepfunctionsActivity = null as any;
utilities.lazyLoad(exports, ["StepfunctionsActivity"], () => require("./stepfunctionsActivity"));

export { StepfunctionsStateMachineArgs, StepfunctionsStateMachineState } from "./stepfunctionsStateMachine";
export type StepfunctionsStateMachine = import("./stepfunctionsStateMachine").StepfunctionsStateMachine;
export const StepfunctionsStateMachine: typeof import("./stepfunctionsStateMachine").StepfunctionsStateMachine = null as any;
utilities.lazyLoad(exports, ["StepfunctionsStateMachine"], () => require("./stepfunctionsStateMachine"));

export { StepfunctionsStateMachineAliasArgs, StepfunctionsStateMachineAliasState } from "./stepfunctionsStateMachineAlias";
export type StepfunctionsStateMachineAlias = import("./stepfunctionsStateMachineAlias").StepfunctionsStateMachineAlias;
export const StepfunctionsStateMachineAlias: typeof import("./stepfunctionsStateMachineAlias").StepfunctionsStateMachineAlias = null as any;
utilities.lazyLoad(exports, ["StepfunctionsStateMachineAlias"], () => require("./stepfunctionsStateMachineAlias"));

export { StepfunctionsStateMachineVersionArgs, StepfunctionsStateMachineVersionState } from "./stepfunctionsStateMachineVersion";
export type StepfunctionsStateMachineVersion = import("./stepfunctionsStateMachineVersion").StepfunctionsStateMachineVersion;
export const StepfunctionsStateMachineVersion: typeof import("./stepfunctionsStateMachineVersion").StepfunctionsStateMachineVersion = null as any;
utilities.lazyLoad(exports, ["StepfunctionsStateMachineVersion"], () => require("./stepfunctionsStateMachineVersion"));

export { SupportappAccountAliasArgs, SupportappAccountAliasState } from "./supportappAccountAlias";
export type SupportappAccountAlias = import("./supportappAccountAlias").SupportappAccountAlias;
export const SupportappAccountAlias: typeof import("./supportappAccountAlias").SupportappAccountAlias = null as any;
utilities.lazyLoad(exports, ["SupportappAccountAlias"], () => require("./supportappAccountAlias"));

export { SupportappSlackChannelConfigurationArgs, SupportappSlackChannelConfigurationState } from "./supportappSlackChannelConfiguration";
export type SupportappSlackChannelConfiguration = import("./supportappSlackChannelConfiguration").SupportappSlackChannelConfiguration;
export const SupportappSlackChannelConfiguration: typeof import("./supportappSlackChannelConfiguration").SupportappSlackChannelConfiguration = null as any;
utilities.lazyLoad(exports, ["SupportappSlackChannelConfiguration"], () => require("./supportappSlackChannelConfiguration"));

export { SupportappSlackWorkspaceConfigurationArgs, SupportappSlackWorkspaceConfigurationState } from "./supportappSlackWorkspaceConfiguration";
export type SupportappSlackWorkspaceConfiguration = import("./supportappSlackWorkspaceConfiguration").SupportappSlackWorkspaceConfiguration;
export const SupportappSlackWorkspaceConfiguration: typeof import("./supportappSlackWorkspaceConfiguration").SupportappSlackWorkspaceConfiguration = null as any;
utilities.lazyLoad(exports, ["SupportappSlackWorkspaceConfiguration"], () => require("./supportappSlackWorkspaceConfiguration"));

export { SyntheticsCanaryArgs, SyntheticsCanaryState } from "./syntheticsCanary";
export type SyntheticsCanary = import("./syntheticsCanary").SyntheticsCanary;
export const SyntheticsCanary: typeof import("./syntheticsCanary").SyntheticsCanary = null as any;
utilities.lazyLoad(exports, ["SyntheticsCanary"], () => require("./syntheticsCanary"));

export { SyntheticsGroupArgs, SyntheticsGroupState } from "./syntheticsGroup";
export type SyntheticsGroup = import("./syntheticsGroup").SyntheticsGroup;
export const SyntheticsGroup: typeof import("./syntheticsGroup").SyntheticsGroup = null as any;
utilities.lazyLoad(exports, ["SyntheticsGroup"], () => require("./syntheticsGroup"));

export { SystemsmanagersapApplicationArgs, SystemsmanagersapApplicationState } from "./systemsmanagersapApplication";
export type SystemsmanagersapApplication = import("./systemsmanagersapApplication").SystemsmanagersapApplication;
export const SystemsmanagersapApplication: typeof import("./systemsmanagersapApplication").SystemsmanagersapApplication = null as any;
utilities.lazyLoad(exports, ["SystemsmanagersapApplication"], () => require("./systemsmanagersapApplication"));

export { TimestreamDatabaseArgs, TimestreamDatabaseState } from "./timestreamDatabase";
export type TimestreamDatabase = import("./timestreamDatabase").TimestreamDatabase;
export const TimestreamDatabase: typeof import("./timestreamDatabase").TimestreamDatabase = null as any;
utilities.lazyLoad(exports, ["TimestreamDatabase"], () => require("./timestreamDatabase"));

export { TimestreamInfluxDbInstanceArgs, TimestreamInfluxDbInstanceState } from "./timestreamInfluxDbInstance";
export type TimestreamInfluxDbInstance = import("./timestreamInfluxDbInstance").TimestreamInfluxDbInstance;
export const TimestreamInfluxDbInstance: typeof import("./timestreamInfluxDbInstance").TimestreamInfluxDbInstance = null as any;
utilities.lazyLoad(exports, ["TimestreamInfluxDbInstance"], () => require("./timestreamInfluxDbInstance"));

export { TimestreamScheduledQueryArgs, TimestreamScheduledQueryState } from "./timestreamScheduledQuery";
export type TimestreamScheduledQuery = import("./timestreamScheduledQuery").TimestreamScheduledQuery;
export const TimestreamScheduledQuery: typeof import("./timestreamScheduledQuery").TimestreamScheduledQuery = null as any;
utilities.lazyLoad(exports, ["TimestreamScheduledQuery"], () => require("./timestreamScheduledQuery"));

export { TimestreamTableArgs, TimestreamTableState } from "./timestreamTable";
export type TimestreamTable = import("./timestreamTable").TimestreamTable;
export const TimestreamTable: typeof import("./timestreamTable").TimestreamTable = null as any;
utilities.lazyLoad(exports, ["TimestreamTable"], () => require("./timestreamTable"));

export { TransferAgreementArgs, TransferAgreementState } from "./transferAgreement";
export type TransferAgreement = import("./transferAgreement").TransferAgreement;
export const TransferAgreement: typeof import("./transferAgreement").TransferAgreement = null as any;
utilities.lazyLoad(exports, ["TransferAgreement"], () => require("./transferAgreement"));

export { TransferCertificateArgs, TransferCertificateState } from "./transferCertificate";
export type TransferCertificate = import("./transferCertificate").TransferCertificate;
export const TransferCertificate: typeof import("./transferCertificate").TransferCertificate = null as any;
utilities.lazyLoad(exports, ["TransferCertificate"], () => require("./transferCertificate"));

export { TransferConnectorArgs, TransferConnectorState } from "./transferConnector";
export type TransferConnector = import("./transferConnector").TransferConnector;
export const TransferConnector: typeof import("./transferConnector").TransferConnector = null as any;
utilities.lazyLoad(exports, ["TransferConnector"], () => require("./transferConnector"));

export { TransferProfileArgs, TransferProfileState } from "./transferProfile";
export type TransferProfile = import("./transferProfile").TransferProfile;
export const TransferProfile: typeof import("./transferProfile").TransferProfile = null as any;
utilities.lazyLoad(exports, ["TransferProfile"], () => require("./transferProfile"));

export { TransferWorkflowArgs, TransferWorkflowState } from "./transferWorkflow";
export type TransferWorkflow = import("./transferWorkflow").TransferWorkflow;
export const TransferWorkflow: typeof import("./transferWorkflow").TransferWorkflow = null as any;
utilities.lazyLoad(exports, ["TransferWorkflow"], () => require("./transferWorkflow"));

export { VerifiedpermissionsIdentitySourceArgs, VerifiedpermissionsIdentitySourceState } from "./verifiedpermissionsIdentitySource";
export type VerifiedpermissionsIdentitySource = import("./verifiedpermissionsIdentitySource").VerifiedpermissionsIdentitySource;
export const VerifiedpermissionsIdentitySource: typeof import("./verifiedpermissionsIdentitySource").VerifiedpermissionsIdentitySource = null as any;
utilities.lazyLoad(exports, ["VerifiedpermissionsIdentitySource"], () => require("./verifiedpermissionsIdentitySource"));

export { VerifiedpermissionsPolicyArgs, VerifiedpermissionsPolicyState } from "./verifiedpermissionsPolicy";
export type VerifiedpermissionsPolicy = import("./verifiedpermissionsPolicy").VerifiedpermissionsPolicy;
export const VerifiedpermissionsPolicy: typeof import("./verifiedpermissionsPolicy").VerifiedpermissionsPolicy = null as any;
utilities.lazyLoad(exports, ["VerifiedpermissionsPolicy"], () => require("./verifiedpermissionsPolicy"));

export { VerifiedpermissionsPolicyStoreArgs, VerifiedpermissionsPolicyStoreState } from "./verifiedpermissionsPolicyStore";
export type VerifiedpermissionsPolicyStore = import("./verifiedpermissionsPolicyStore").VerifiedpermissionsPolicyStore;
export const VerifiedpermissionsPolicyStore: typeof import("./verifiedpermissionsPolicyStore").VerifiedpermissionsPolicyStore = null as any;
utilities.lazyLoad(exports, ["VerifiedpermissionsPolicyStore"], () => require("./verifiedpermissionsPolicyStore"));

export { VerifiedpermissionsPolicyTemplateArgs, VerifiedpermissionsPolicyTemplateState } from "./verifiedpermissionsPolicyTemplate";
export type VerifiedpermissionsPolicyTemplate = import("./verifiedpermissionsPolicyTemplate").VerifiedpermissionsPolicyTemplate;
export const VerifiedpermissionsPolicyTemplate: typeof import("./verifiedpermissionsPolicyTemplate").VerifiedpermissionsPolicyTemplate = null as any;
utilities.lazyLoad(exports, ["VerifiedpermissionsPolicyTemplate"], () => require("./verifiedpermissionsPolicyTemplate"));

export { VoiceidDomainArgs, VoiceidDomainState } from "./voiceidDomain";
export type VoiceidDomain = import("./voiceidDomain").VoiceidDomain;
export const VoiceidDomain: typeof import("./voiceidDomain").VoiceidDomain = null as any;
utilities.lazyLoad(exports, ["VoiceidDomain"], () => require("./voiceidDomain"));

export { VpclatticeAccessLogSubscriptionArgs, VpclatticeAccessLogSubscriptionState } from "./vpclatticeAccessLogSubscription";
export type VpclatticeAccessLogSubscription = import("./vpclatticeAccessLogSubscription").VpclatticeAccessLogSubscription;
export const VpclatticeAccessLogSubscription: typeof import("./vpclatticeAccessLogSubscription").VpclatticeAccessLogSubscription = null as any;
utilities.lazyLoad(exports, ["VpclatticeAccessLogSubscription"], () => require("./vpclatticeAccessLogSubscription"));

export { VpclatticeAuthPolicyArgs, VpclatticeAuthPolicyState } from "./vpclatticeAuthPolicy";
export type VpclatticeAuthPolicy = import("./vpclatticeAuthPolicy").VpclatticeAuthPolicy;
export const VpclatticeAuthPolicy: typeof import("./vpclatticeAuthPolicy").VpclatticeAuthPolicy = null as any;
utilities.lazyLoad(exports, ["VpclatticeAuthPolicy"], () => require("./vpclatticeAuthPolicy"));

export { VpclatticeListenerArgs, VpclatticeListenerState } from "./vpclatticeListener";
export type VpclatticeListener = import("./vpclatticeListener").VpclatticeListener;
export const VpclatticeListener: typeof import("./vpclatticeListener").VpclatticeListener = null as any;
utilities.lazyLoad(exports, ["VpclatticeListener"], () => require("./vpclatticeListener"));

export { VpclatticeResourcePolicyArgs, VpclatticeResourcePolicyState } from "./vpclatticeResourcePolicy";
export type VpclatticeResourcePolicy = import("./vpclatticeResourcePolicy").VpclatticeResourcePolicy;
export const VpclatticeResourcePolicy: typeof import("./vpclatticeResourcePolicy").VpclatticeResourcePolicy = null as any;
utilities.lazyLoad(exports, ["VpclatticeResourcePolicy"], () => require("./vpclatticeResourcePolicy"));

export { VpclatticeRuleArgs, VpclatticeRuleState } from "./vpclatticeRule";
export type VpclatticeRule = import("./vpclatticeRule").VpclatticeRule;
export const VpclatticeRule: typeof import("./vpclatticeRule").VpclatticeRule = null as any;
utilities.lazyLoad(exports, ["VpclatticeRule"], () => require("./vpclatticeRule"));

export { VpclatticeServiceArgs, VpclatticeServiceState } from "./vpclatticeService";
export type VpclatticeService = import("./vpclatticeService").VpclatticeService;
export const VpclatticeService: typeof import("./vpclatticeService").VpclatticeService = null as any;
utilities.lazyLoad(exports, ["VpclatticeService"], () => require("./vpclatticeService"));

export { VpclatticeServiceNetworkArgs, VpclatticeServiceNetworkState } from "./vpclatticeServiceNetwork";
export type VpclatticeServiceNetwork = import("./vpclatticeServiceNetwork").VpclatticeServiceNetwork;
export const VpclatticeServiceNetwork: typeof import("./vpclatticeServiceNetwork").VpclatticeServiceNetwork = null as any;
utilities.lazyLoad(exports, ["VpclatticeServiceNetwork"], () => require("./vpclatticeServiceNetwork"));

export { VpclatticeServiceNetworkServiceAssociationArgs, VpclatticeServiceNetworkServiceAssociationState } from "./vpclatticeServiceNetworkServiceAssociation";
export type VpclatticeServiceNetworkServiceAssociation = import("./vpclatticeServiceNetworkServiceAssociation").VpclatticeServiceNetworkServiceAssociation;
export const VpclatticeServiceNetworkServiceAssociation: typeof import("./vpclatticeServiceNetworkServiceAssociation").VpclatticeServiceNetworkServiceAssociation = null as any;
utilities.lazyLoad(exports, ["VpclatticeServiceNetworkServiceAssociation"], () => require("./vpclatticeServiceNetworkServiceAssociation"));

export { VpclatticeServiceNetworkVpcAssociationArgs, VpclatticeServiceNetworkVpcAssociationState } from "./vpclatticeServiceNetworkVpcAssociation";
export type VpclatticeServiceNetworkVpcAssociation = import("./vpclatticeServiceNetworkVpcAssociation").VpclatticeServiceNetworkVpcAssociation;
export const VpclatticeServiceNetworkVpcAssociation: typeof import("./vpclatticeServiceNetworkVpcAssociation").VpclatticeServiceNetworkVpcAssociation = null as any;
utilities.lazyLoad(exports, ["VpclatticeServiceNetworkVpcAssociation"], () => require("./vpclatticeServiceNetworkVpcAssociation"));

export { Wafv2IpSetArgs, Wafv2IpSetState } from "./wafv2IpSet";
export type Wafv2IpSet = import("./wafv2IpSet").Wafv2IpSet;
export const Wafv2IpSet: typeof import("./wafv2IpSet").Wafv2IpSet = null as any;
utilities.lazyLoad(exports, ["Wafv2IpSet"], () => require("./wafv2IpSet"));

export { Wafv2LoggingConfigurationArgs, Wafv2LoggingConfigurationState } from "./wafv2LoggingConfiguration";
export type Wafv2LoggingConfiguration = import("./wafv2LoggingConfiguration").Wafv2LoggingConfiguration;
export const Wafv2LoggingConfiguration: typeof import("./wafv2LoggingConfiguration").Wafv2LoggingConfiguration = null as any;
utilities.lazyLoad(exports, ["Wafv2LoggingConfiguration"], () => require("./wafv2LoggingConfiguration"));

export { Wafv2RegexPatternSetArgs, Wafv2RegexPatternSetState } from "./wafv2RegexPatternSet";
export type Wafv2RegexPatternSet = import("./wafv2RegexPatternSet").Wafv2RegexPatternSet;
export const Wafv2RegexPatternSet: typeof import("./wafv2RegexPatternSet").Wafv2RegexPatternSet = null as any;
utilities.lazyLoad(exports, ["Wafv2RegexPatternSet"], () => require("./wafv2RegexPatternSet"));

export { Wafv2WebAclAssociationArgs, Wafv2WebAclAssociationState } from "./wafv2WebAclAssociation";
export type Wafv2WebAclAssociation = import("./wafv2WebAclAssociation").Wafv2WebAclAssociation;
export const Wafv2WebAclAssociation: typeof import("./wafv2WebAclAssociation").Wafv2WebAclAssociation = null as any;
utilities.lazyLoad(exports, ["Wafv2WebAclAssociation"], () => require("./wafv2WebAclAssociation"));

export { WisdomAssistantArgs, WisdomAssistantState } from "./wisdomAssistant";
export type WisdomAssistant = import("./wisdomAssistant").WisdomAssistant;
export const WisdomAssistant: typeof import("./wisdomAssistant").WisdomAssistant = null as any;
utilities.lazyLoad(exports, ["WisdomAssistant"], () => require("./wisdomAssistant"));

export { WisdomAssistantAssociationArgs, WisdomAssistantAssociationState } from "./wisdomAssistantAssociation";
export type WisdomAssistantAssociation = import("./wisdomAssistantAssociation").WisdomAssistantAssociation;
export const WisdomAssistantAssociation: typeof import("./wisdomAssistantAssociation").WisdomAssistantAssociation = null as any;
utilities.lazyLoad(exports, ["WisdomAssistantAssociation"], () => require("./wisdomAssistantAssociation"));

export { WisdomKnowledgeBaseArgs, WisdomKnowledgeBaseState } from "./wisdomKnowledgeBase";
export type WisdomKnowledgeBase = import("./wisdomKnowledgeBase").WisdomKnowledgeBase;
export const WisdomKnowledgeBase: typeof import("./wisdomKnowledgeBase").WisdomKnowledgeBase = null as any;
utilities.lazyLoad(exports, ["WisdomKnowledgeBase"], () => require("./wisdomKnowledgeBase"));

export { WorkspacesConnectionAliasArgs, WorkspacesConnectionAliasState } from "./workspacesConnectionAlias";
export type WorkspacesConnectionAlias = import("./workspacesConnectionAlias").WorkspacesConnectionAlias;
export const WorkspacesConnectionAlias: typeof import("./workspacesConnectionAlias").WorkspacesConnectionAlias = null as any;
utilities.lazyLoad(exports, ["WorkspacesConnectionAlias"], () => require("./workspacesConnectionAlias"));

export { WorkspacesWorkspacesPoolArgs, WorkspacesWorkspacesPoolState } from "./workspacesWorkspacesPool";
export type WorkspacesWorkspacesPool = import("./workspacesWorkspacesPool").WorkspacesWorkspacesPool;
export const WorkspacesWorkspacesPool: typeof import("./workspacesWorkspacesPool").WorkspacesWorkspacesPool = null as any;
utilities.lazyLoad(exports, ["WorkspacesWorkspacesPool"], () => require("./workspacesWorkspacesPool"));

export { WorkspacesthinclientEnvironmentArgs, WorkspacesthinclientEnvironmentState } from "./workspacesthinclientEnvironment";
export type WorkspacesthinclientEnvironment = import("./workspacesthinclientEnvironment").WorkspacesthinclientEnvironment;
export const WorkspacesthinclientEnvironment: typeof import("./workspacesthinclientEnvironment").WorkspacesthinclientEnvironment = null as any;
utilities.lazyLoad(exports, ["WorkspacesthinclientEnvironment"], () => require("./workspacesthinclientEnvironment"));

export { WorkspaceswebBrowserSettingsArgs, WorkspaceswebBrowserSettingsState } from "./workspaceswebBrowserSettings";
export type WorkspaceswebBrowserSettings = import("./workspaceswebBrowserSettings").WorkspaceswebBrowserSettings;
export const WorkspaceswebBrowserSettings: typeof import("./workspaceswebBrowserSettings").WorkspaceswebBrowserSettings = null as any;
utilities.lazyLoad(exports, ["WorkspaceswebBrowserSettings"], () => require("./workspaceswebBrowserSettings"));

export { WorkspaceswebIdentityProviderArgs, WorkspaceswebIdentityProviderState } from "./workspaceswebIdentityProvider";
export type WorkspaceswebIdentityProvider = import("./workspaceswebIdentityProvider").WorkspaceswebIdentityProvider;
export const WorkspaceswebIdentityProvider: typeof import("./workspaceswebIdentityProvider").WorkspaceswebIdentityProvider = null as any;
utilities.lazyLoad(exports, ["WorkspaceswebIdentityProvider"], () => require("./workspaceswebIdentityProvider"));

export { WorkspaceswebIpAccessSettingsArgs, WorkspaceswebIpAccessSettingsState } from "./workspaceswebIpAccessSettings";
export type WorkspaceswebIpAccessSettings = import("./workspaceswebIpAccessSettings").WorkspaceswebIpAccessSettings;
export const WorkspaceswebIpAccessSettings: typeof import("./workspaceswebIpAccessSettings").WorkspaceswebIpAccessSettings = null as any;
utilities.lazyLoad(exports, ["WorkspaceswebIpAccessSettings"], () => require("./workspaceswebIpAccessSettings"));

export { WorkspaceswebNetworkSettingsArgs, WorkspaceswebNetworkSettingsState } from "./workspaceswebNetworkSettings";
export type WorkspaceswebNetworkSettings = import("./workspaceswebNetworkSettings").WorkspaceswebNetworkSettings;
export const WorkspaceswebNetworkSettings: typeof import("./workspaceswebNetworkSettings").WorkspaceswebNetworkSettings = null as any;
utilities.lazyLoad(exports, ["WorkspaceswebNetworkSettings"], () => require("./workspaceswebNetworkSettings"));

export { WorkspaceswebPortalArgs, WorkspaceswebPortalState } from "./workspaceswebPortal";
export type WorkspaceswebPortal = import("./workspaceswebPortal").WorkspaceswebPortal;
export const WorkspaceswebPortal: typeof import("./workspaceswebPortal").WorkspaceswebPortal = null as any;
utilities.lazyLoad(exports, ["WorkspaceswebPortal"], () => require("./workspaceswebPortal"));

export { WorkspaceswebTrustStoreArgs, WorkspaceswebTrustStoreState } from "./workspaceswebTrustStore";
export type WorkspaceswebTrustStore = import("./workspaceswebTrustStore").WorkspaceswebTrustStore;
export const WorkspaceswebTrustStore: typeof import("./workspaceswebTrustStore").WorkspaceswebTrustStore = null as any;
utilities.lazyLoad(exports, ["WorkspaceswebTrustStore"], () => require("./workspaceswebTrustStore"));

export { WorkspaceswebUserAccessLoggingSettingsArgs, WorkspaceswebUserAccessLoggingSettingsState } from "./workspaceswebUserAccessLoggingSettings";
export type WorkspaceswebUserAccessLoggingSettings = import("./workspaceswebUserAccessLoggingSettings").WorkspaceswebUserAccessLoggingSettings;
export const WorkspaceswebUserAccessLoggingSettings: typeof import("./workspaceswebUserAccessLoggingSettings").WorkspaceswebUserAccessLoggingSettings = null as any;
utilities.lazyLoad(exports, ["WorkspaceswebUserAccessLoggingSettings"], () => require("./workspaceswebUserAccessLoggingSettings"));

export { WorkspaceswebUserSettingsArgs, WorkspaceswebUserSettingsState } from "./workspaceswebUserSettings";
export type WorkspaceswebUserSettings = import("./workspaceswebUserSettings").WorkspaceswebUserSettings;
export const WorkspaceswebUserSettings: typeof import("./workspaceswebUserSettings").WorkspaceswebUserSettings = null as any;
utilities.lazyLoad(exports, ["WorkspaceswebUserSettings"], () => require("./workspaceswebUserSettings"));

export { XrayGroupArgs, XrayGroupState } from "./xrayGroup";
export type XrayGroup = import("./xrayGroup").XrayGroup;
export const XrayGroup: typeof import("./xrayGroup").XrayGroup = null as any;
utilities.lazyLoad(exports, ["XrayGroup"], () => require("./xrayGroup"));

export { XrayResourcePolicyArgs, XrayResourcePolicyState } from "./xrayResourcePolicy";
export type XrayResourcePolicy = import("./xrayResourcePolicy").XrayResourcePolicy;
export const XrayResourcePolicy: typeof import("./xrayResourcePolicy").XrayResourcePolicy = null as any;
utilities.lazyLoad(exports, ["XrayResourcePolicy"], () => require("./xrayResourcePolicy"));

export { XraySamplingRuleArgs, XraySamplingRuleState } from "./xraySamplingRule";
export type XraySamplingRule = import("./xraySamplingRule").XraySamplingRule;
export const XraySamplingRule: typeof import("./xraySamplingRule").XraySamplingRule = null as any;
utilities.lazyLoad(exports, ["XraySamplingRule"], () => require("./xraySamplingRule"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "awscc:index/accessanalyzerAnalyzer:AccessanalyzerAnalyzer":
                return new AccessanalyzerAnalyzer(name, <any>undefined, { urn })
            case "awscc:index/acmpcaCertificate:AcmpcaCertificate":
                return new AcmpcaCertificate(name, <any>undefined, { urn })
            case "awscc:index/acmpcaCertificateAuthority:AcmpcaCertificateAuthority":
                return new AcmpcaCertificateAuthority(name, <any>undefined, { urn })
            case "awscc:index/acmpcaCertificateAuthorityActivation:AcmpcaCertificateAuthorityActivation":
                return new AcmpcaCertificateAuthorityActivation(name, <any>undefined, { urn })
            case "awscc:index/acmpcaPermission:AcmpcaPermission":
                return new AcmpcaPermission(name, <any>undefined, { urn })
            case "awscc:index/amplifyApp:AmplifyApp":
                return new AmplifyApp(name, <any>undefined, { urn })
            case "awscc:index/amplifyBranch:AmplifyBranch":
                return new AmplifyBranch(name, <any>undefined, { urn })
            case "awscc:index/amplifyDomain:AmplifyDomain":
                return new AmplifyDomain(name, <any>undefined, { urn })
            case "awscc:index/apigatewayAccount:ApigatewayAccount":
                return new ApigatewayAccount(name, <any>undefined, { urn })
            case "awscc:index/apigatewayApiKey:ApigatewayApiKey":
                return new ApigatewayApiKey(name, <any>undefined, { urn })
            case "awscc:index/apigatewayAuthorizer:ApigatewayAuthorizer":
                return new ApigatewayAuthorizer(name, <any>undefined, { urn })
            case "awscc:index/apigatewayBasePathMapping:ApigatewayBasePathMapping":
                return new ApigatewayBasePathMapping(name, <any>undefined, { urn })
            case "awscc:index/apigatewayClientCertificate:ApigatewayClientCertificate":
                return new ApigatewayClientCertificate(name, <any>undefined, { urn })
            case "awscc:index/apigatewayDeployment:ApigatewayDeployment":
                return new ApigatewayDeployment(name, <any>undefined, { urn })
            case "awscc:index/apigatewayDocumentationPart:ApigatewayDocumentationPart":
                return new ApigatewayDocumentationPart(name, <any>undefined, { urn })
            case "awscc:index/apigatewayDocumentationVersion:ApigatewayDocumentationVersion":
                return new ApigatewayDocumentationVersion(name, <any>undefined, { urn })
            case "awscc:index/apigatewayDomainName:ApigatewayDomainName":
                return new ApigatewayDomainName(name, <any>undefined, { urn })
            case "awscc:index/apigatewayGatewayResponse:ApigatewayGatewayResponse":
                return new ApigatewayGatewayResponse(name, <any>undefined, { urn })
            case "awscc:index/apigatewayMethod:ApigatewayMethod":
                return new ApigatewayMethod(name, <any>undefined, { urn })
            case "awscc:index/apigatewayModel:ApigatewayModel":
                return new ApigatewayModel(name, <any>undefined, { urn })
            case "awscc:index/apigatewayRequestValidator:ApigatewayRequestValidator":
                return new ApigatewayRequestValidator(name, <any>undefined, { urn })
            case "awscc:index/apigatewayResource:ApigatewayResource":
                return new ApigatewayResource(name, <any>undefined, { urn })
            case "awscc:index/apigatewayRestApi:ApigatewayRestApi":
                return new ApigatewayRestApi(name, <any>undefined, { urn })
            case "awscc:index/apigatewayStage:ApigatewayStage":
                return new ApigatewayStage(name, <any>undefined, { urn })
            case "awscc:index/apigatewayUsagePlan:ApigatewayUsagePlan":
                return new ApigatewayUsagePlan(name, <any>undefined, { urn })
            case "awscc:index/apigatewayUsagePlanKey:ApigatewayUsagePlanKey":
                return new ApigatewayUsagePlanKey(name, <any>undefined, { urn })
            case "awscc:index/apigatewayVpcLink:ApigatewayVpcLink":
                return new ApigatewayVpcLink(name, <any>undefined, { urn })
            case "awscc:index/apigatewayv2Api:Apigatewayv2Api":
                return new Apigatewayv2Api(name, <any>undefined, { urn })
            case "awscc:index/apigatewayv2ApiMapping:Apigatewayv2ApiMapping":
                return new Apigatewayv2ApiMapping(name, <any>undefined, { urn })
            case "awscc:index/apigatewayv2Authorizer:Apigatewayv2Authorizer":
                return new Apigatewayv2Authorizer(name, <any>undefined, { urn })
            case "awscc:index/apigatewayv2Deployment:Apigatewayv2Deployment":
                return new Apigatewayv2Deployment(name, <any>undefined, { urn })
            case "awscc:index/apigatewayv2DomainName:Apigatewayv2DomainName":
                return new Apigatewayv2DomainName(name, <any>undefined, { urn })
            case "awscc:index/apigatewayv2IntegrationResponse:Apigatewayv2IntegrationResponse":
                return new Apigatewayv2IntegrationResponse(name, <any>undefined, { urn })
            case "awscc:index/apigatewayv2Model:Apigatewayv2Model":
                return new Apigatewayv2Model(name, <any>undefined, { urn })
            case "awscc:index/apigatewayv2Route:Apigatewayv2Route":
                return new Apigatewayv2Route(name, <any>undefined, { urn })
            case "awscc:index/apigatewayv2RouteResponse:Apigatewayv2RouteResponse":
                return new Apigatewayv2RouteResponse(name, <any>undefined, { urn })
            case "awscc:index/apigatewayv2VpcLink:Apigatewayv2VpcLink":
                return new Apigatewayv2VpcLink(name, <any>undefined, { urn })
            case "awscc:index/appconfigApplication:AppconfigApplication":
                return new AppconfigApplication(name, <any>undefined, { urn })
            case "awscc:index/appconfigConfigurationProfile:AppconfigConfigurationProfile":
                return new AppconfigConfigurationProfile(name, <any>undefined, { urn })
            case "awscc:index/appconfigEnvironment:AppconfigEnvironment":
                return new AppconfigEnvironment(name, <any>undefined, { urn })
            case "awscc:index/appconfigExtensionAssociation:AppconfigExtensionAssociation":
                return new AppconfigExtensionAssociation(name, <any>undefined, { urn })
            case "awscc:index/appconfigHostedConfigurationVersion:AppconfigHostedConfigurationVersion":
                return new AppconfigHostedConfigurationVersion(name, <any>undefined, { urn })
            case "awscc:index/appflowConnector:AppflowConnector":
                return new AppflowConnector(name, <any>undefined, { urn })
            case "awscc:index/appflowConnectorProfile:AppflowConnectorProfile":
                return new AppflowConnectorProfile(name, <any>undefined, { urn })
            case "awscc:index/appflowFlow:AppflowFlow":
                return new AppflowFlow(name, <any>undefined, { urn })
            case "awscc:index/appintegrationsApplication:AppintegrationsApplication":
                return new AppintegrationsApplication(name, <any>undefined, { urn })
            case "awscc:index/appintegrationsEventIntegration:AppintegrationsEventIntegration":
                return new AppintegrationsEventIntegration(name, <any>undefined, { urn })
            case "awscc:index/applicationautoscalingScalableTarget:ApplicationautoscalingScalableTarget":
                return new ApplicationautoscalingScalableTarget(name, <any>undefined, { urn })
            case "awscc:index/applicationautoscalingScalingPolicy:ApplicationautoscalingScalingPolicy":
                return new ApplicationautoscalingScalingPolicy(name, <any>undefined, { urn })
            case "awscc:index/applicationinsightsApplication:ApplicationinsightsApplication":
                return new ApplicationinsightsApplication(name, <any>undefined, { urn })
            case "awscc:index/applicationsignalsServiceLevelObjective:ApplicationsignalsServiceLevelObjective":
                return new ApplicationsignalsServiceLevelObjective(name, <any>undefined, { urn })
            case "awscc:index/apprunnerAutoScalingConfiguration:ApprunnerAutoScalingConfiguration":
                return new ApprunnerAutoScalingConfiguration(name, <any>undefined, { urn })
            case "awscc:index/apprunnerObservabilityConfiguration:ApprunnerObservabilityConfiguration":
                return new ApprunnerObservabilityConfiguration(name, <any>undefined, { urn })
            case "awscc:index/apprunnerService:ApprunnerService":
                return new ApprunnerService(name, <any>undefined, { urn })
            case "awscc:index/apprunnerVpcConnector:ApprunnerVpcConnector":
                return new ApprunnerVpcConnector(name, <any>undefined, { urn })
            case "awscc:index/apprunnerVpcIngressConnection:ApprunnerVpcIngressConnection":
                return new ApprunnerVpcIngressConnection(name, <any>undefined, { urn })
            case "awscc:index/appstreamAppBlock:AppstreamAppBlock":
                return new AppstreamAppBlock(name, <any>undefined, { urn })
            case "awscc:index/appstreamAppBlockBuilder:AppstreamAppBlockBuilder":
                return new AppstreamAppBlockBuilder(name, <any>undefined, { urn })
            case "awscc:index/appstreamApplication:AppstreamApplication":
                return new AppstreamApplication(name, <any>undefined, { urn })
            case "awscc:index/appstreamApplicationEntitlementAssociation:AppstreamApplicationEntitlementAssociation":
                return new AppstreamApplicationEntitlementAssociation(name, <any>undefined, { urn })
            case "awscc:index/appstreamApplicationFleetAssociation:AppstreamApplicationFleetAssociation":
                return new AppstreamApplicationFleetAssociation(name, <any>undefined, { urn })
            case "awscc:index/appstreamDirectoryConfig:AppstreamDirectoryConfig":
                return new AppstreamDirectoryConfig(name, <any>undefined, { urn })
            case "awscc:index/appstreamEntitlement:AppstreamEntitlement":
                return new AppstreamEntitlement(name, <any>undefined, { urn })
            case "awscc:index/appstreamImageBuilder:AppstreamImageBuilder":
                return new AppstreamImageBuilder(name, <any>undefined, { urn })
            case "awscc:index/appsyncDomainName:AppsyncDomainName":
                return new AppsyncDomainName(name, <any>undefined, { urn })
            case "awscc:index/appsyncDomainNameApiAssociation:AppsyncDomainNameApiAssociation":
                return new AppsyncDomainNameApiAssociation(name, <any>undefined, { urn })
            case "awscc:index/appsyncFunctionConfiguration:AppsyncFunctionConfiguration":
                return new AppsyncFunctionConfiguration(name, <any>undefined, { urn })
            case "awscc:index/appsyncResolver:AppsyncResolver":
                return new AppsyncResolver(name, <any>undefined, { urn })
            case "awscc:index/appsyncSourceApiAssociation:AppsyncSourceApiAssociation":
                return new AppsyncSourceApiAssociation(name, <any>undefined, { urn })
            case "awscc:index/apptestTestCase:ApptestTestCase":
                return new ApptestTestCase(name, <any>undefined, { urn })
            case "awscc:index/apsRuleGroupsNamespace:ApsRuleGroupsNamespace":
                return new ApsRuleGroupsNamespace(name, <any>undefined, { urn })
            case "awscc:index/apsScraper:ApsScraper":
                return new ApsScraper(name, <any>undefined, { urn })
            case "awscc:index/apsWorkspace:ApsWorkspace":
                return new ApsWorkspace(name, <any>undefined, { urn })
            case "awscc:index/arczonalshiftAutoshiftObserverNotificationStatus:ArczonalshiftAutoshiftObserverNotificationStatus":
                return new ArczonalshiftAutoshiftObserverNotificationStatus(name, <any>undefined, { urn })
            case "awscc:index/arczonalshiftZonalAutoshiftConfiguration:ArczonalshiftZonalAutoshiftConfiguration":
                return new ArczonalshiftZonalAutoshiftConfiguration(name, <any>undefined, { urn })
            case "awscc:index/athenaCapacityReservation:AthenaCapacityReservation":
                return new AthenaCapacityReservation(name, <any>undefined, { urn })
            case "awscc:index/athenaDataCatalog:AthenaDataCatalog":
                return new AthenaDataCatalog(name, <any>undefined, { urn })
            case "awscc:index/athenaNamedQuery:AthenaNamedQuery":
                return new AthenaNamedQuery(name, <any>undefined, { urn })
            case "awscc:index/athenaPreparedStatement:AthenaPreparedStatement":
                return new AthenaPreparedStatement(name, <any>undefined, { urn })
            case "awscc:index/athenaWorkGroup:AthenaWorkGroup":
                return new AthenaWorkGroup(name, <any>undefined, { urn })
            case "awscc:index/auditmanagerAssessment:AuditmanagerAssessment":
                return new AuditmanagerAssessment(name, <any>undefined, { urn })
            case "awscc:index/autoscalingAutoScalingGroup:AutoscalingAutoScalingGroup":
                return new AutoscalingAutoScalingGroup(name, <any>undefined, { urn })
            case "awscc:index/autoscalingLaunchConfiguration:AutoscalingLaunchConfiguration":
                return new AutoscalingLaunchConfiguration(name, <any>undefined, { urn })
            case "awscc:index/autoscalingLifecycleHook:AutoscalingLifecycleHook":
                return new AutoscalingLifecycleHook(name, <any>undefined, { urn })
            case "awscc:index/autoscalingScalingPolicy:AutoscalingScalingPolicy":
                return new AutoscalingScalingPolicy(name, <any>undefined, { urn })
            case "awscc:index/autoscalingScheduledAction:AutoscalingScheduledAction":
                return new AutoscalingScheduledAction(name, <any>undefined, { urn })
            case "awscc:index/autoscalingWarmPool:AutoscalingWarmPool":
                return new AutoscalingWarmPool(name, <any>undefined, { urn })
            case "awscc:index/b2biCapability:B2biCapability":
                return new B2biCapability(name, <any>undefined, { urn })
            case "awscc:index/b2biPartnership:B2biPartnership":
                return new B2biPartnership(name, <any>undefined, { urn })
            case "awscc:index/b2biProfile:B2biProfile":
                return new B2biProfile(name, <any>undefined, { urn })
            case "awscc:index/b2biTransformer:B2biTransformer":
                return new B2biTransformer(name, <any>undefined, { urn })
            case "awscc:index/backupBackupPlan:BackupBackupPlan":
                return new BackupBackupPlan(name, <any>undefined, { urn })
            case "awscc:index/backupBackupSelection:BackupBackupSelection":
                return new BackupBackupSelection(name, <any>undefined, { urn })
            case "awscc:index/backupBackupVault:BackupBackupVault":
                return new BackupBackupVault(name, <any>undefined, { urn })
            case "awscc:index/backupFramework:BackupFramework":
                return new BackupFramework(name, <any>undefined, { urn })
            case "awscc:index/backupReportPlan:BackupReportPlan":
                return new BackupReportPlan(name, <any>undefined, { urn })
            case "awscc:index/backupRestoreTestingPlan:BackupRestoreTestingPlan":
                return new BackupRestoreTestingPlan(name, <any>undefined, { urn })
            case "awscc:index/backupRestoreTestingSelection:BackupRestoreTestingSelection":
                return new BackupRestoreTestingSelection(name, <any>undefined, { urn })
            case "awscc:index/backupgatewayHypervisor:BackupgatewayHypervisor":
                return new BackupgatewayHypervisor(name, <any>undefined, { urn })
            case "awscc:index/batchComputeEnvironment:BatchComputeEnvironment":
                return new BatchComputeEnvironment(name, <any>undefined, { urn })
            case "awscc:index/batchJobQueue:BatchJobQueue":
                return new BatchJobQueue(name, <any>undefined, { urn })
            case "awscc:index/batchSchedulingPolicy:BatchSchedulingPolicy":
                return new BatchSchedulingPolicy(name, <any>undefined, { urn })
            case "awscc:index/bedrockAgent:BedrockAgent":
                return new BedrockAgent(name, <any>undefined, { urn })
            case "awscc:index/bedrockAgentAlias:BedrockAgentAlias":
                return new BedrockAgentAlias(name, <any>undefined, { urn })
            case "awscc:index/bedrockDataSource:BedrockDataSource":
                return new BedrockDataSource(name, <any>undefined, { urn })
            case "awscc:index/bedrockFlowAlias:BedrockFlowAlias":
                return new BedrockFlowAlias(name, <any>undefined, { urn })
            case "awscc:index/bedrockFlowVersion:BedrockFlowVersion":
                return new BedrockFlowVersion(name, <any>undefined, { urn })
            case "awscc:index/bedrockGuardrail:BedrockGuardrail":
                return new BedrockGuardrail(name, <any>undefined, { urn })
            case "awscc:index/bedrockGuardrailVersion:BedrockGuardrailVersion":
                return new BedrockGuardrailVersion(name, <any>undefined, { urn })
            case "awscc:index/bedrockKnowledgeBase:BedrockKnowledgeBase":
                return new BedrockKnowledgeBase(name, <any>undefined, { urn })
            case "awscc:index/bedrockPrompt:BedrockPrompt":
                return new BedrockPrompt(name, <any>undefined, { urn })
            case "awscc:index/bedrockPromptVersion:BedrockPromptVersion":
                return new BedrockPromptVersion(name, <any>undefined, { urn })
            case "awscc:index/billingconductorBillingGroup:BillingconductorBillingGroup":
                return new BillingconductorBillingGroup(name, <any>undefined, { urn })
            case "awscc:index/billingconductorCustomLineItem:BillingconductorCustomLineItem":
                return new BillingconductorCustomLineItem(name, <any>undefined, { urn })
            case "awscc:index/billingconductorPricingPlan:BillingconductorPricingPlan":
                return new BillingconductorPricingPlan(name, <any>undefined, { urn })
            case "awscc:index/billingconductorPricingRule:BillingconductorPricingRule":
                return new BillingconductorPricingRule(name, <any>undefined, { urn })
            case "awscc:index/budgetsBudgetsAction:BudgetsBudgetsAction":
                return new BudgetsBudgetsAction(name, <any>undefined, { urn })
            case "awscc:index/cassandraKeyspace:CassandraKeyspace":
                return new CassandraKeyspace(name, <any>undefined, { urn })
            case "awscc:index/cassandraTable:CassandraTable":
                return new CassandraTable(name, <any>undefined, { urn })
            case "awscc:index/ceAnomalyMonitor:CeAnomalyMonitor":
                return new CeAnomalyMonitor(name, <any>undefined, { urn })
            case "awscc:index/ceAnomalySubscription:CeAnomalySubscription":
                return new CeAnomalySubscription(name, <any>undefined, { urn })
            case "awscc:index/ceCostCategory:CeCostCategory":
                return new CeCostCategory(name, <any>undefined, { urn })
            case "awscc:index/certificatemanagerAccount:CertificatemanagerAccount":
                return new CertificatemanagerAccount(name, <any>undefined, { urn })
            case "awscc:index/chatbotMicrosoftTeamsChannelConfiguration:ChatbotMicrosoftTeamsChannelConfiguration":
                return new ChatbotMicrosoftTeamsChannelConfiguration(name, <any>undefined, { urn })
            case "awscc:index/chatbotSlackChannelConfiguration:ChatbotSlackChannelConfiguration":
                return new ChatbotSlackChannelConfiguration(name, <any>undefined, { urn })
            case "awscc:index/cleanroomsAnalysisTemplate:CleanroomsAnalysisTemplate":
                return new CleanroomsAnalysisTemplate(name, <any>undefined, { urn })
            case "awscc:index/cleanroomsCollaboration:CleanroomsCollaboration":
                return new CleanroomsCollaboration(name, <any>undefined, { urn })
            case "awscc:index/cleanroomsConfiguredTable:CleanroomsConfiguredTable":
                return new CleanroomsConfiguredTable(name, <any>undefined, { urn })
            case "awscc:index/cleanroomsConfiguredTableAssociation:CleanroomsConfiguredTableAssociation":
                return new CleanroomsConfiguredTableAssociation(name, <any>undefined, { urn })
            case "awscc:index/cleanroomsIdMappingTable:CleanroomsIdMappingTable":
                return new CleanroomsIdMappingTable(name, <any>undefined, { urn })
            case "awscc:index/cleanroomsMembership:CleanroomsMembership":
                return new CleanroomsMembership(name, <any>undefined, { urn })
            case "awscc:index/cleanroomsPrivacyBudgetTemplate:CleanroomsPrivacyBudgetTemplate":
                return new CleanroomsPrivacyBudgetTemplate(name, <any>undefined, { urn })
            case "awscc:index/cleanroomsmlTrainingDataset:CleanroomsmlTrainingDataset":
                return new CleanroomsmlTrainingDataset(name, <any>undefined, { urn })
            case "awscc:index/cloudformationHookDefaultVersion:CloudformationHookDefaultVersion":
                return new CloudformationHookDefaultVersion(name, <any>undefined, { urn })
            case "awscc:index/cloudformationHookTypeConfig:CloudformationHookTypeConfig":
                return new CloudformationHookTypeConfig(name, <any>undefined, { urn })
            case "awscc:index/cloudformationHookVersion:CloudformationHookVersion":
                return new CloudformationHookVersion(name, <any>undefined, { urn })
            case "awscc:index/cloudformationModuleDefaultVersion:CloudformationModuleDefaultVersion":
                return new CloudformationModuleDefaultVersion(name, <any>undefined, { urn })
            case "awscc:index/cloudformationModuleVersion:CloudformationModuleVersion":
                return new CloudformationModuleVersion(name, <any>undefined, { urn })
            case "awscc:index/cloudformationPublicTypeVersion:CloudformationPublicTypeVersion":
                return new CloudformationPublicTypeVersion(name, <any>undefined, { urn })
            case "awscc:index/cloudformationPublisher:CloudformationPublisher":
                return new CloudformationPublisher(name, <any>undefined, { urn })
            case "awscc:index/cloudformationResourceDefaultVersion:CloudformationResourceDefaultVersion":
                return new CloudformationResourceDefaultVersion(name, <any>undefined, { urn })
            case "awscc:index/cloudformationResourceVersion:CloudformationResourceVersion":
                return new CloudformationResourceVersion(name, <any>undefined, { urn })
            case "awscc:index/cloudformationStack:CloudformationStack":
                return new CloudformationStack(name, <any>undefined, { urn })
            case "awscc:index/cloudformationStackSet:CloudformationStackSet":
                return new CloudformationStackSet(name, <any>undefined, { urn })
            case "awscc:index/cloudformationTypeActivation:CloudformationTypeActivation":
                return new CloudformationTypeActivation(name, <any>undefined, { urn })
            case "awscc:index/cloudfrontCachePolicy:CloudfrontCachePolicy":
                return new CloudfrontCachePolicy(name, <any>undefined, { urn })
            case "awscc:index/cloudfrontCloudfrontOriginAccessIdentity:CloudfrontCloudfrontOriginAccessIdentity":
                return new CloudfrontCloudfrontOriginAccessIdentity(name, <any>undefined, { urn })
            case "awscc:index/cloudfrontContinuousDeploymentPolicy:CloudfrontContinuousDeploymentPolicy":
                return new CloudfrontContinuousDeploymentPolicy(name, <any>undefined, { urn })
            case "awscc:index/cloudfrontFunction:CloudfrontFunction":
                return new CloudfrontFunction(name, <any>undefined, { urn })
            case "awscc:index/cloudfrontKeyGroup:CloudfrontKeyGroup":
                return new CloudfrontKeyGroup(name, <any>undefined, { urn })
            case "awscc:index/cloudfrontKeyValueStore:CloudfrontKeyValueStore":
                return new CloudfrontKeyValueStore(name, <any>undefined, { urn })
            case "awscc:index/cloudfrontMonitoringSubscription:CloudfrontMonitoringSubscription":
                return new CloudfrontMonitoringSubscription(name, <any>undefined, { urn })
            case "awscc:index/cloudfrontOriginAccessControl:CloudfrontOriginAccessControl":
                return new CloudfrontOriginAccessControl(name, <any>undefined, { urn })
            case "awscc:index/cloudfrontOriginRequestPolicy:CloudfrontOriginRequestPolicy":
                return new CloudfrontOriginRequestPolicy(name, <any>undefined, { urn })
            case "awscc:index/cloudfrontPublicKey:CloudfrontPublicKey":
                return new CloudfrontPublicKey(name, <any>undefined, { urn })
            case "awscc:index/cloudfrontRealtimeLogConfig:CloudfrontRealtimeLogConfig":
                return new CloudfrontRealtimeLogConfig(name, <any>undefined, { urn })
            case "awscc:index/cloudfrontResponseHeadersPolicy:CloudfrontResponseHeadersPolicy":
                return new CloudfrontResponseHeadersPolicy(name, <any>undefined, { urn })
            case "awscc:index/cloudtrailChannel:CloudtrailChannel":
                return new CloudtrailChannel(name, <any>undefined, { urn })
            case "awscc:index/cloudtrailEventDataStore:CloudtrailEventDataStore":
                return new CloudtrailEventDataStore(name, <any>undefined, { urn })
            case "awscc:index/cloudtrailResourcePolicy:CloudtrailResourcePolicy":
                return new CloudtrailResourcePolicy(name, <any>undefined, { urn })
            case "awscc:index/cloudtrailTrail:CloudtrailTrail":
                return new CloudtrailTrail(name, <any>undefined, { urn })
            case "awscc:index/cloudwatchAlarm:CloudwatchAlarm":
                return new CloudwatchAlarm(name, <any>undefined, { urn })
            case "awscc:index/cloudwatchCompositeAlarm:CloudwatchCompositeAlarm":
                return new CloudwatchCompositeAlarm(name, <any>undefined, { urn })
            case "awscc:index/cloudwatchDashboard:CloudwatchDashboard":
                return new CloudwatchDashboard(name, <any>undefined, { urn })
            case "awscc:index/cloudwatchMetricStream:CloudwatchMetricStream":
                return new CloudwatchMetricStream(name, <any>undefined, { urn })
            case "awscc:index/codeartifactDomain:CodeartifactDomain":
                return new CodeartifactDomain(name, <any>undefined, { urn })
            case "awscc:index/codeartifactPackageGroup:CodeartifactPackageGroup":
                return new CodeartifactPackageGroup(name, <any>undefined, { urn })
            case "awscc:index/codeartifactRepository:CodeartifactRepository":
                return new CodeartifactRepository(name, <any>undefined, { urn })
            case "awscc:index/codebuildFleet:CodebuildFleet":
                return new CodebuildFleet(name, <any>undefined, { urn })
            case "awscc:index/codeconnectionsConnection:CodeconnectionsConnection":
                return new CodeconnectionsConnection(name, <any>undefined, { urn })
            case "awscc:index/codedeployApplication:CodedeployApplication":
                return new CodedeployApplication(name, <any>undefined, { urn })
            case "awscc:index/codedeployDeploymentConfig:CodedeployDeploymentConfig":
                return new CodedeployDeploymentConfig(name, <any>undefined, { urn })
            case "awscc:index/codeguruprofilerProfilingGroup:CodeguruprofilerProfilingGroup":
                return new CodeguruprofilerProfilingGroup(name, <any>undefined, { urn })
            case "awscc:index/codegurureviewerRepositoryAssociation:CodegurureviewerRepositoryAssociation":
                return new CodegurureviewerRepositoryAssociation(name, <any>undefined, { urn })
            case "awscc:index/codepipelineCustomActionType:CodepipelineCustomActionType":
                return new CodepipelineCustomActionType(name, <any>undefined, { urn })
            case "awscc:index/codepipelinePipeline:CodepipelinePipeline":
                return new CodepipelinePipeline(name, <any>undefined, { urn })
            case "awscc:index/codestarconnectionsConnection:CodestarconnectionsConnection":
                return new CodestarconnectionsConnection(name, <any>undefined, { urn })
            case "awscc:index/codestarconnectionsRepositoryLink:CodestarconnectionsRepositoryLink":
                return new CodestarconnectionsRepositoryLink(name, <any>undefined, { urn })
            case "awscc:index/codestarconnectionsSyncConfiguration:CodestarconnectionsSyncConfiguration":
                return new CodestarconnectionsSyncConfiguration(name, <any>undefined, { urn })
            case "awscc:index/codestarnotificationsNotificationRule:CodestarnotificationsNotificationRule":
                return new CodestarnotificationsNotificationRule(name, <any>undefined, { urn })
            case "awscc:index/cognitoIdentityPool:CognitoIdentityPool":
                return new CognitoIdentityPool(name, <any>undefined, { urn })
            case "awscc:index/cognitoIdentityPoolPrincipalTag:CognitoIdentityPoolPrincipalTag":
                return new CognitoIdentityPoolPrincipalTag(name, <any>undefined, { urn })
            case "awscc:index/cognitoIdentityPoolRoleAttachment:CognitoIdentityPoolRoleAttachment":
                return new CognitoIdentityPoolRoleAttachment(name, <any>undefined, { urn })
            case "awscc:index/cognitoLogDeliveryConfiguration:CognitoLogDeliveryConfiguration":
                return new CognitoLogDeliveryConfiguration(name, <any>undefined, { urn })
            case "awscc:index/cognitoUserPoolClient:CognitoUserPoolClient":
                return new CognitoUserPoolClient(name, <any>undefined, { urn })
            case "awscc:index/cognitoUserPoolGroup:CognitoUserPoolGroup":
                return new CognitoUserPoolGroup(name, <any>undefined, { urn })
            case "awscc:index/cognitoUserPoolResourceServer:CognitoUserPoolResourceServer":
                return new CognitoUserPoolResourceServer(name, <any>undefined, { urn })
            case "awscc:index/cognitoUserPoolRiskConfigurationAttachment:CognitoUserPoolRiskConfigurationAttachment":
                return new CognitoUserPoolRiskConfigurationAttachment(name, <any>undefined, { urn })
            case "awscc:index/cognitoUserPoolUiCustomizationAttachment:CognitoUserPoolUiCustomizationAttachment":
                return new CognitoUserPoolUiCustomizationAttachment(name, <any>undefined, { urn })
            case "awscc:index/cognitoUserPoolUser:CognitoUserPoolUser":
                return new CognitoUserPoolUser(name, <any>undefined, { urn })
            case "awscc:index/cognitoUserPoolUserToGroupAttachment:CognitoUserPoolUserToGroupAttachment":
                return new CognitoUserPoolUserToGroupAttachment(name, <any>undefined, { urn })
            case "awscc:index/comprehendDocumentClassifier:ComprehendDocumentClassifier":
                return new ComprehendDocumentClassifier(name, <any>undefined, { urn })
            case "awscc:index/comprehendFlywheel:ComprehendFlywheel":
                return new ComprehendFlywheel(name, <any>undefined, { urn })
            case "awscc:index/configAggregationAuthorization:ConfigAggregationAuthorization":
                return new ConfigAggregationAuthorization(name, <any>undefined, { urn })
            case "awscc:index/configConfigRule:ConfigConfigRule":
                return new ConfigConfigRule(name, <any>undefined, { urn })
            case "awscc:index/configConfigurationAggregator:ConfigConfigurationAggregator":
                return new ConfigConfigurationAggregator(name, <any>undefined, { urn })
            case "awscc:index/configConformancePack:ConfigConformancePack":
                return new ConfigConformancePack(name, <any>undefined, { urn })
            case "awscc:index/configOrganizationConformancePack:ConfigOrganizationConformancePack":
                return new ConfigOrganizationConformancePack(name, <any>undefined, { urn })
            case "awscc:index/configStoredQuery:ConfigStoredQuery":
                return new ConfigStoredQuery(name, <any>undefined, { urn })
            case "awscc:index/connectApprovedOrigin:ConnectApprovedOrigin":
                return new ConnectApprovedOrigin(name, <any>undefined, { urn })
            case "awscc:index/connectContactFlow:ConnectContactFlow":
                return new ConnectContactFlow(name, <any>undefined, { urn })
            case "awscc:index/connectContactFlowModule:ConnectContactFlowModule":
                return new ConnectContactFlowModule(name, <any>undefined, { urn })
            case "awscc:index/connectHoursOfOperation:ConnectHoursOfOperation":
                return new ConnectHoursOfOperation(name, <any>undefined, { urn })
            case "awscc:index/connectInstance:ConnectInstance":
                return new ConnectInstance(name, <any>undefined, { urn })
            case "awscc:index/connectInstanceStorageConfig:ConnectInstanceStorageConfig":
                return new ConnectInstanceStorageConfig(name, <any>undefined, { urn })
            case "awscc:index/connectIntegrationAssociation:ConnectIntegrationAssociation":
                return new ConnectIntegrationAssociation(name, <any>undefined, { urn })
            case "awscc:index/connectPhoneNumber:ConnectPhoneNumber":
                return new ConnectPhoneNumber(name, <any>undefined, { urn })
            case "awscc:index/connectPredefinedAttribute:ConnectPredefinedAttribute":
                return new ConnectPredefinedAttribute(name, <any>undefined, { urn })
            case "awscc:index/connectPrompt:ConnectPrompt":
                return new ConnectPrompt(name, <any>undefined, { urn })
            case "awscc:index/connectQueue:ConnectQueue":
                return new ConnectQueue(name, <any>undefined, { urn })
            case "awscc:index/connectQuickConnect:ConnectQuickConnect":
                return new ConnectQuickConnect(name, <any>undefined, { urn })
            case "awscc:index/connectRoutingProfile:ConnectRoutingProfile":
                return new ConnectRoutingProfile(name, <any>undefined, { urn })
            case "awscc:index/connectSecurityKey:ConnectSecurityKey":
                return new ConnectSecurityKey(name, <any>undefined, { urn })
            case "awscc:index/connectSecurityProfile:ConnectSecurityProfile":
                return new ConnectSecurityProfile(name, <any>undefined, { urn })
            case "awscc:index/connectTaskTemplate:ConnectTaskTemplate":
                return new ConnectTaskTemplate(name, <any>undefined, { urn })
            case "awscc:index/connectTrafficDistributionGroup:ConnectTrafficDistributionGroup":
                return new ConnectTrafficDistributionGroup(name, <any>undefined, { urn })
            case "awscc:index/connectUser:ConnectUser":
                return new ConnectUser(name, <any>undefined, { urn })
            case "awscc:index/connectUserHierarchyGroup:ConnectUserHierarchyGroup":
                return new ConnectUserHierarchyGroup(name, <any>undefined, { urn })
            case "awscc:index/connectView:ConnectView":
                return new ConnectView(name, <any>undefined, { urn })
            case "awscc:index/connectViewVersion:ConnectViewVersion":
                return new ConnectViewVersion(name, <any>undefined, { urn })
            case "awscc:index/connectcampaignsCampaign:ConnectcampaignsCampaign":
                return new ConnectcampaignsCampaign(name, <any>undefined, { urn })
            case "awscc:index/controltowerEnabledControl:ControltowerEnabledControl":
                return new ControltowerEnabledControl(name, <any>undefined, { urn })
            case "awscc:index/curReportDefinition:CurReportDefinition":
                return new CurReportDefinition(name, <any>undefined, { urn })
            case "awscc:index/customerprofilesCalculatedAttributeDefinition:CustomerprofilesCalculatedAttributeDefinition":
                return new CustomerprofilesCalculatedAttributeDefinition(name, <any>undefined, { urn })
            case "awscc:index/customerprofilesDomain:CustomerprofilesDomain":
                return new CustomerprofilesDomain(name, <any>undefined, { urn })
            case "awscc:index/customerprofilesEventStream:CustomerprofilesEventStream":
                return new CustomerprofilesEventStream(name, <any>undefined, { urn })
            case "awscc:index/customerprofilesIntegration:CustomerprofilesIntegration":
                return new CustomerprofilesIntegration(name, <any>undefined, { urn })
            case "awscc:index/customerprofilesObjectType:CustomerprofilesObjectType":
                return new CustomerprofilesObjectType(name, <any>undefined, { urn })
            case "awscc:index/databrewDataset:DatabrewDataset":
                return new DatabrewDataset(name, <any>undefined, { urn })
            case "awscc:index/databrewJob:DatabrewJob":
                return new DatabrewJob(name, <any>undefined, { urn })
            case "awscc:index/databrewProject:DatabrewProject":
                return new DatabrewProject(name, <any>undefined, { urn })
            case "awscc:index/databrewRuleset:DatabrewRuleset":
                return new DatabrewRuleset(name, <any>undefined, { urn })
            case "awscc:index/databrewSchedule:DatabrewSchedule":
                return new DatabrewSchedule(name, <any>undefined, { urn })
            case "awscc:index/datapipelinePipeline:DatapipelinePipeline":
                return new DatapipelinePipeline(name, <any>undefined, { urn })
            case "awscc:index/datasyncAgent:DatasyncAgent":
                return new DatasyncAgent(name, <any>undefined, { urn })
            case "awscc:index/datasyncLocationAzureBlob:DatasyncLocationAzureBlob":
                return new DatasyncLocationAzureBlob(name, <any>undefined, { urn })
            case "awscc:index/datasyncLocationEfs:DatasyncLocationEfs":
                return new DatasyncLocationEfs(name, <any>undefined, { urn })
            case "awscc:index/datasyncLocationFsxLustre:DatasyncLocationFsxLustre":
                return new DatasyncLocationFsxLustre(name, <any>undefined, { urn })
            case "awscc:index/datasyncLocationFsxOntap:DatasyncLocationFsxOntap":
                return new DatasyncLocationFsxOntap(name, <any>undefined, { urn })
            case "awscc:index/datasyncLocationFsxOpenZfs:DatasyncLocationFsxOpenZfs":
                return new DatasyncLocationFsxOpenZfs(name, <any>undefined, { urn })
            case "awscc:index/datasyncLocationFsxWindows:DatasyncLocationFsxWindows":
                return new DatasyncLocationFsxWindows(name, <any>undefined, { urn })
            case "awscc:index/datasyncLocationHdfs:DatasyncLocationHdfs":
                return new DatasyncLocationHdfs(name, <any>undefined, { urn })
            case "awscc:index/datasyncLocationNfs:DatasyncLocationNfs":
                return new DatasyncLocationNfs(name, <any>undefined, { urn })
            case "awscc:index/datasyncLocationObjectStorage:DatasyncLocationObjectStorage":
                return new DatasyncLocationObjectStorage(name, <any>undefined, { urn })
            case "awscc:index/datasyncLocationS3:DatasyncLocationS3":
                return new DatasyncLocationS3(name, <any>undefined, { urn })
            case "awscc:index/datasyncLocationSmb:DatasyncLocationSmb":
                return new DatasyncLocationSmb(name, <any>undefined, { urn })
            case "awscc:index/datasyncStorageSystem:DatasyncStorageSystem":
                return new DatasyncStorageSystem(name, <any>undefined, { urn })
            case "awscc:index/datasyncTask:DatasyncTask":
                return new DatasyncTask(name, <any>undefined, { urn })
            case "awscc:index/datazoneDataSource:DatazoneDataSource":
                return new DatazoneDataSource(name, <any>undefined, { urn })
            case "awscc:index/datazoneDomain:DatazoneDomain":
                return new DatazoneDomain(name, <any>undefined, { urn })
            case "awscc:index/datazoneEnvironment:DatazoneEnvironment":
                return new DatazoneEnvironment(name, <any>undefined, { urn })
            case "awscc:index/datazoneEnvironmentBlueprintConfiguration:DatazoneEnvironmentBlueprintConfiguration":
                return new DatazoneEnvironmentBlueprintConfiguration(name, <any>undefined, { urn })
            case "awscc:index/datazoneEnvironmentProfile:DatazoneEnvironmentProfile":
                return new DatazoneEnvironmentProfile(name, <any>undefined, { urn })
            case "awscc:index/datazoneGroupProfile:DatazoneGroupProfile":
                return new DatazoneGroupProfile(name, <any>undefined, { urn })
            case "awscc:index/datazoneProject:DatazoneProject":
                return new DatazoneProject(name, <any>undefined, { urn })
            case "awscc:index/datazoneProjectMembership:DatazoneProjectMembership":
                return new DatazoneProjectMembership(name, <any>undefined, { urn })
            case "awscc:index/datazoneSubscriptionTarget:DatazoneSubscriptionTarget":
                return new DatazoneSubscriptionTarget(name, <any>undefined, { urn })
            case "awscc:index/datazoneUserProfile:DatazoneUserProfile":
                return new DatazoneUserProfile(name, <any>undefined, { urn })
            case "awscc:index/deadlineFarm:DeadlineFarm":
                return new DeadlineFarm(name, <any>undefined, { urn })
            case "awscc:index/deadlineFleet:DeadlineFleet":
                return new DeadlineFleet(name, <any>undefined, { urn })
            case "awscc:index/deadlineLicenseEndpoint:DeadlineLicenseEndpoint":
                return new DeadlineLicenseEndpoint(name, <any>undefined, { urn })
            case "awscc:index/deadlineMeteredProduct:DeadlineMeteredProduct":
                return new DeadlineMeteredProduct(name, <any>undefined, { urn })
            case "awscc:index/deadlineMonitor:DeadlineMonitor":
                return new DeadlineMonitor(name, <any>undefined, { urn })
            case "awscc:index/deadlineQueue:DeadlineQueue":
                return new DeadlineQueue(name, <any>undefined, { urn })
            case "awscc:index/deadlineQueueEnvironment:DeadlineQueueEnvironment":
                return new DeadlineQueueEnvironment(name, <any>undefined, { urn })
            case "awscc:index/deadlineQueueFleetAssociation:DeadlineQueueFleetAssociation":
                return new DeadlineQueueFleetAssociation(name, <any>undefined, { urn })
            case "awscc:index/deadlineStorageProfile:DeadlineStorageProfile":
                return new DeadlineStorageProfile(name, <any>undefined, { urn })
            case "awscc:index/detectiveGraph:DetectiveGraph":
                return new DetectiveGraph(name, <any>undefined, { urn })
            case "awscc:index/detectiveMemberInvitation:DetectiveMemberInvitation":
                return new DetectiveMemberInvitation(name, <any>undefined, { urn })
            case "awscc:index/detectiveOrganizationAdmin:DetectiveOrganizationAdmin":
                return new DetectiveOrganizationAdmin(name, <any>undefined, { urn })
            case "awscc:index/devopsguruLogAnomalyDetectionIntegration:DevopsguruLogAnomalyDetectionIntegration":
                return new DevopsguruLogAnomalyDetectionIntegration(name, <any>undefined, { urn })
            case "awscc:index/devopsguruNotificationChannel:DevopsguruNotificationChannel":
                return new DevopsguruNotificationChannel(name, <any>undefined, { urn })
            case "awscc:index/devopsguruResourceCollection:DevopsguruResourceCollection":
                return new DevopsguruResourceCollection(name, <any>undefined, { urn })
            case "awscc:index/directoryserviceSimpleAd:DirectoryserviceSimpleAd":
                return new DirectoryserviceSimpleAd(name, <any>undefined, { urn })
            case "awscc:index/dmsDataProvider:DmsDataProvider":
                return new DmsDataProvider(name, <any>undefined, { urn })
            case "awscc:index/dmsInstanceProfile:DmsInstanceProfile":
                return new DmsInstanceProfile(name, <any>undefined, { urn })
            case "awscc:index/dmsMigrationProject:DmsMigrationProject":
                return new DmsMigrationProject(name, <any>undefined, { urn })
            case "awscc:index/dmsReplicationConfig:DmsReplicationConfig":
                return new DmsReplicationConfig(name, <any>undefined, { urn })
            case "awscc:index/docdbelasticCluster:DocdbelasticCluster":
                return new DocdbelasticCluster(name, <any>undefined, { urn })
            case "awscc:index/dynamodbGlobalTable:DynamodbGlobalTable":
                return new DynamodbGlobalTable(name, <any>undefined, { urn })
            case "awscc:index/dynamodbTable:DynamodbTable":
                return new DynamodbTable(name, <any>undefined, { urn })
            case "awscc:index/ec2CapacityReservation:Ec2CapacityReservation":
                return new Ec2CapacityReservation(name, <any>undefined, { urn })
            case "awscc:index/ec2CapacityReservationFleet:Ec2CapacityReservationFleet":
                return new Ec2CapacityReservationFleet(name, <any>undefined, { urn })
            case "awscc:index/ec2CarrierGateway:Ec2CarrierGateway":
                return new Ec2CarrierGateway(name, <any>undefined, { urn })
            case "awscc:index/ec2CustomerGateway:Ec2CustomerGateway":
                return new Ec2CustomerGateway(name, <any>undefined, { urn })
            case "awscc:index/ec2DhcpOptions:Ec2DhcpOptions":
                return new Ec2DhcpOptions(name, <any>undefined, { urn })
            case "awscc:index/ec2Ec2Fleet:Ec2Ec2Fleet":
                return new Ec2Ec2Fleet(name, <any>undefined, { urn })
            case "awscc:index/ec2EgressOnlyInternetGateway:Ec2EgressOnlyInternetGateway":
                return new Ec2EgressOnlyInternetGateway(name, <any>undefined, { urn })
            case "awscc:index/ec2Eip:Ec2Eip":
                return new Ec2Eip(name, <any>undefined, { urn })
            case "awscc:index/ec2EipAssociation:Ec2EipAssociation":
                return new Ec2EipAssociation(name, <any>undefined, { urn })
            case "awscc:index/ec2EnclaveCertificateIamRoleAssociation:Ec2EnclaveCertificateIamRoleAssociation":
                return new Ec2EnclaveCertificateIamRoleAssociation(name, <any>undefined, { urn })
            case "awscc:index/ec2FlowLog:Ec2FlowLog":
                return new Ec2FlowLog(name, <any>undefined, { urn })
            case "awscc:index/ec2GatewayRouteTableAssociation:Ec2GatewayRouteTableAssociation":
                return new Ec2GatewayRouteTableAssociation(name, <any>undefined, { urn })
            case "awscc:index/ec2Host:Ec2Host":
                return new Ec2Host(name, <any>undefined, { urn })
            case "awscc:index/ec2Instance:Ec2Instance":
                return new Ec2Instance(name, <any>undefined, { urn })
            case "awscc:index/ec2InstanceConnectEndpoint:Ec2InstanceConnectEndpoint":
                return new Ec2InstanceConnectEndpoint(name, <any>undefined, { urn })
            case "awscc:index/ec2InternetGateway:Ec2InternetGateway":
                return new Ec2InternetGateway(name, <any>undefined, { urn })
            case "awscc:index/ec2Ipam:Ec2Ipam":
                return new Ec2Ipam(name, <any>undefined, { urn })
            case "awscc:index/ec2IpamAllocation:Ec2IpamAllocation":
                return new Ec2IpamAllocation(name, <any>undefined, { urn })
            case "awscc:index/ec2IpamPool:Ec2IpamPool":
                return new Ec2IpamPool(name, <any>undefined, { urn })
            case "awscc:index/ec2IpamPoolCidr:Ec2IpamPoolCidr":
                return new Ec2IpamPoolCidr(name, <any>undefined, { urn })
            case "awscc:index/ec2IpamResourceDiscovery:Ec2IpamResourceDiscovery":
                return new Ec2IpamResourceDiscovery(name, <any>undefined, { urn })
            case "awscc:index/ec2IpamResourceDiscoveryAssociation:Ec2IpamResourceDiscoveryAssociation":
                return new Ec2IpamResourceDiscoveryAssociation(name, <any>undefined, { urn })
            case "awscc:index/ec2IpamScope:Ec2IpamScope":
                return new Ec2IpamScope(name, <any>undefined, { urn })
            case "awscc:index/ec2KeyPair:Ec2KeyPair":
                return new Ec2KeyPair(name, <any>undefined, { urn })
            case "awscc:index/ec2LaunchTemplate:Ec2LaunchTemplate":
                return new Ec2LaunchTemplate(name, <any>undefined, { urn })
            case "awscc:index/ec2LocalGatewayRoute:Ec2LocalGatewayRoute":
                return new Ec2LocalGatewayRoute(name, <any>undefined, { urn })
            case "awscc:index/ec2LocalGatewayRouteTable:Ec2LocalGatewayRouteTable":
                return new Ec2LocalGatewayRouteTable(name, <any>undefined, { urn })
            case "awscc:index/ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation:Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation":
                return new Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation(name, <any>undefined, { urn })
            case "awscc:index/ec2LocalGatewayRouteTableVpcAssociation:Ec2LocalGatewayRouteTableVpcAssociation":
                return new Ec2LocalGatewayRouteTableVpcAssociation(name, <any>undefined, { urn })
            case "awscc:index/ec2NatGateway:Ec2NatGateway":
                return new Ec2NatGateway(name, <any>undefined, { urn })
            case "awscc:index/ec2NetworkAcl:Ec2NetworkAcl":
                return new Ec2NetworkAcl(name, <any>undefined, { urn })
            case "awscc:index/ec2NetworkInsightsAccessScope:Ec2NetworkInsightsAccessScope":
                return new Ec2NetworkInsightsAccessScope(name, <any>undefined, { urn })
            case "awscc:index/ec2NetworkInsightsAccessScopeAnalysis:Ec2NetworkInsightsAccessScopeAnalysis":
                return new Ec2NetworkInsightsAccessScopeAnalysis(name, <any>undefined, { urn })
            case "awscc:index/ec2NetworkInsightsAnalysis:Ec2NetworkInsightsAnalysis":
                return new Ec2NetworkInsightsAnalysis(name, <any>undefined, { urn })
            case "awscc:index/ec2NetworkInsightsPath:Ec2NetworkInsightsPath":
                return new Ec2NetworkInsightsPath(name, <any>undefined, { urn })
            case "awscc:index/ec2NetworkInterface:Ec2NetworkInterface":
                return new Ec2NetworkInterface(name, <any>undefined, { urn })
            case "awscc:index/ec2NetworkInterfaceAttachment:Ec2NetworkInterfaceAttachment":
                return new Ec2NetworkInterfaceAttachment(name, <any>undefined, { urn })
            case "awscc:index/ec2NetworkPerformanceMetricSubscription:Ec2NetworkPerformanceMetricSubscription":
                return new Ec2NetworkPerformanceMetricSubscription(name, <any>undefined, { urn })
            case "awscc:index/ec2PlacementGroup:Ec2PlacementGroup":
                return new Ec2PlacementGroup(name, <any>undefined, { urn })
            case "awscc:index/ec2PrefixList:Ec2PrefixList":
                return new Ec2PrefixList(name, <any>undefined, { urn })
            case "awscc:index/ec2Route:Ec2Route":
                return new Ec2Route(name, <any>undefined, { urn })
            case "awscc:index/ec2RouteTable:Ec2RouteTable":
                return new Ec2RouteTable(name, <any>undefined, { urn })
            case "awscc:index/ec2SecurityGroup:Ec2SecurityGroup":
                return new Ec2SecurityGroup(name, <any>undefined, { urn })
            case "awscc:index/ec2SecurityGroupEgress:Ec2SecurityGroupEgress":
                return new Ec2SecurityGroupEgress(name, <any>undefined, { urn })
            case "awscc:index/ec2SecurityGroupIngress:Ec2SecurityGroupIngress":
                return new Ec2SecurityGroupIngress(name, <any>undefined, { urn })
            case "awscc:index/ec2SnapshotBlockPublicAccess:Ec2SnapshotBlockPublicAccess":
                return new Ec2SnapshotBlockPublicAccess(name, <any>undefined, { urn })
            case "awscc:index/ec2SpotFleet:Ec2SpotFleet":
                return new Ec2SpotFleet(name, <any>undefined, { urn })
            case "awscc:index/ec2Subnet:Ec2Subnet":
                return new Ec2Subnet(name, <any>undefined, { urn })
            case "awscc:index/ec2SubnetCidrBlock:Ec2SubnetCidrBlock":
                return new Ec2SubnetCidrBlock(name, <any>undefined, { urn })
            case "awscc:index/ec2SubnetNetworkAclAssociation:Ec2SubnetNetworkAclAssociation":
                return new Ec2SubnetNetworkAclAssociation(name, <any>undefined, { urn })
            case "awscc:index/ec2SubnetRouteTableAssociation:Ec2SubnetRouteTableAssociation":
                return new Ec2SubnetRouteTableAssociation(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGateway:Ec2TransitGateway":
                return new Ec2TransitGateway(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGatewayAttachment:Ec2TransitGatewayAttachment":
                return new Ec2TransitGatewayAttachment(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGatewayConnect:Ec2TransitGatewayConnect":
                return new Ec2TransitGatewayConnect(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGatewayMulticastDomain:Ec2TransitGatewayMulticastDomain":
                return new Ec2TransitGatewayMulticastDomain(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGatewayMulticastDomainAssociation:Ec2TransitGatewayMulticastDomainAssociation":
                return new Ec2TransitGatewayMulticastDomainAssociation(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGatewayMulticastGroupMember:Ec2TransitGatewayMulticastGroupMember":
                return new Ec2TransitGatewayMulticastGroupMember(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGatewayMulticastGroupSource:Ec2TransitGatewayMulticastGroupSource":
                return new Ec2TransitGatewayMulticastGroupSource(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGatewayPeeringAttachment:Ec2TransitGatewayPeeringAttachment":
                return new Ec2TransitGatewayPeeringAttachment(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGatewayRoute:Ec2TransitGatewayRoute":
                return new Ec2TransitGatewayRoute(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGatewayRouteTable:Ec2TransitGatewayRouteTable":
                return new Ec2TransitGatewayRouteTable(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGatewayRouteTableAssociation:Ec2TransitGatewayRouteTableAssociation":
                return new Ec2TransitGatewayRouteTableAssociation(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGatewayRouteTablePropagation:Ec2TransitGatewayRouteTablePropagation":
                return new Ec2TransitGatewayRouteTablePropagation(name, <any>undefined, { urn })
            case "awscc:index/ec2TransitGatewayVpcAttachment:Ec2TransitGatewayVpcAttachment":
                return new Ec2TransitGatewayVpcAttachment(name, <any>undefined, { urn })
            case "awscc:index/ec2VerifiedAccessEndpoint:Ec2VerifiedAccessEndpoint":
                return new Ec2VerifiedAccessEndpoint(name, <any>undefined, { urn })
            case "awscc:index/ec2VerifiedAccessGroup:Ec2VerifiedAccessGroup":
                return new Ec2VerifiedAccessGroup(name, <any>undefined, { urn })
            case "awscc:index/ec2VerifiedAccessInstance:Ec2VerifiedAccessInstance":
                return new Ec2VerifiedAccessInstance(name, <any>undefined, { urn })
            case "awscc:index/ec2VerifiedAccessTrustProvider:Ec2VerifiedAccessTrustProvider":
                return new Ec2VerifiedAccessTrustProvider(name, <any>undefined, { urn })
            case "awscc:index/ec2Volume:Ec2Volume":
                return new Ec2Volume(name, <any>undefined, { urn })
            case "awscc:index/ec2VolumeAttachment:Ec2VolumeAttachment":
                return new Ec2VolumeAttachment(name, <any>undefined, { urn })
            case "awscc:index/ec2Vpc:Ec2Vpc":
                return new Ec2Vpc(name, <any>undefined, { urn })
            case "awscc:index/ec2VpcCidrBlock:Ec2VpcCidrBlock":
                return new Ec2VpcCidrBlock(name, <any>undefined, { urn })
            case "awscc:index/ec2VpcEndpoint:Ec2VpcEndpoint":
                return new Ec2VpcEndpoint(name, <any>undefined, { urn })
            case "awscc:index/ec2VpcEndpointConnectionNotification:Ec2VpcEndpointConnectionNotification":
                return new Ec2VpcEndpointConnectionNotification(name, <any>undefined, { urn })
            case "awscc:index/ec2VpcEndpointService:Ec2VpcEndpointService":
                return new Ec2VpcEndpointService(name, <any>undefined, { urn })
            case "awscc:index/ec2VpcEndpointServicePermissions:Ec2VpcEndpointServicePermissions":
                return new Ec2VpcEndpointServicePermissions(name, <any>undefined, { urn })
            case "awscc:index/ec2VpcGatewayAttachment:Ec2VpcGatewayAttachment":
                return new Ec2VpcGatewayAttachment(name, <any>undefined, { urn })
            case "awscc:index/ec2VpcPeeringConnection:Ec2VpcPeeringConnection":
                return new Ec2VpcPeeringConnection(name, <any>undefined, { urn })
            case "awscc:index/ec2VpcdhcpOptionsAssociation:Ec2VpcdhcpOptionsAssociation":
                return new Ec2VpcdhcpOptionsAssociation(name, <any>undefined, { urn })
            case "awscc:index/ec2VpnConnection:Ec2VpnConnection":
                return new Ec2VpnConnection(name, <any>undefined, { urn })
            case "awscc:index/ec2VpnConnectionRoute:Ec2VpnConnectionRoute":
                return new Ec2VpnConnectionRoute(name, <any>undefined, { urn })
            case "awscc:index/ec2VpnGateway:Ec2VpnGateway":
                return new Ec2VpnGateway(name, <any>undefined, { urn })
            case "awscc:index/ecrPublicRepository:EcrPublicRepository":
                return new EcrPublicRepository(name, <any>undefined, { urn })
            case "awscc:index/ecrPullThroughCacheRule:EcrPullThroughCacheRule":
                return new EcrPullThroughCacheRule(name, <any>undefined, { urn })
            case "awscc:index/ecrRegistryPolicy:EcrRegistryPolicy":
                return new EcrRegistryPolicy(name, <any>undefined, { urn })
            case "awscc:index/ecrReplicationConfiguration:EcrReplicationConfiguration":
                return new EcrReplicationConfiguration(name, <any>undefined, { urn })
            case "awscc:index/ecrRepository:EcrRepository":
                return new EcrRepository(name, <any>undefined, { urn })
            case "awscc:index/ecrRepositoryCreationTemplate:EcrRepositoryCreationTemplate":
                return new EcrRepositoryCreationTemplate(name, <any>undefined, { urn })
            case "awscc:index/ecsCapacityProvider:EcsCapacityProvider":
                return new EcsCapacityProvider(name, <any>undefined, { urn })
            case "awscc:index/ecsCluster:EcsCluster":
                return new EcsCluster(name, <any>undefined, { urn })
            case "awscc:index/ecsClusterCapacityProviderAssociations:EcsClusterCapacityProviderAssociations":
                return new EcsClusterCapacityProviderAssociations(name, <any>undefined, { urn })
            case "awscc:index/ecsPrimaryTaskSet:EcsPrimaryTaskSet":
                return new EcsPrimaryTaskSet(name, <any>undefined, { urn })
            case "awscc:index/ecsService:EcsService":
                return new EcsService(name, <any>undefined, { urn })
            case "awscc:index/ecsTaskDefinition:EcsTaskDefinition":
                return new EcsTaskDefinition(name, <any>undefined, { urn })
            case "awscc:index/ecsTaskSet:EcsTaskSet":
                return new EcsTaskSet(name, <any>undefined, { urn })
            case "awscc:index/efsAccessPoint:EfsAccessPoint":
                return new EfsAccessPoint(name, <any>undefined, { urn })
            case "awscc:index/efsFileSystem:EfsFileSystem":
                return new EfsFileSystem(name, <any>undefined, { urn })
            case "awscc:index/efsMountTarget:EfsMountTarget":
                return new EfsMountTarget(name, <any>undefined, { urn })
            case "awscc:index/eksAccessEntry:EksAccessEntry":
                return new EksAccessEntry(name, <any>undefined, { urn })
            case "awscc:index/eksAddon:EksAddon":
                return new EksAddon(name, <any>undefined, { urn })
            case "awscc:index/eksCluster:EksCluster":
                return new EksCluster(name, <any>undefined, { urn })
            case "awscc:index/eksFargateProfile:EksFargateProfile":
                return new EksFargateProfile(name, <any>undefined, { urn })
            case "awscc:index/eksIdentityProviderConfig:EksIdentityProviderConfig":
                return new EksIdentityProviderConfig(name, <any>undefined, { urn })
            case "awscc:index/eksPodIdentityAssociation:EksPodIdentityAssociation":
                return new EksPodIdentityAssociation(name, <any>undefined, { urn })
            case "awscc:index/elasticacheGlobalReplicationGroup:ElasticacheGlobalReplicationGroup":
                return new ElasticacheGlobalReplicationGroup(name, <any>undefined, { urn })
            case "awscc:index/elasticacheParameterGroup:ElasticacheParameterGroup":
                return new ElasticacheParameterGroup(name, <any>undefined, { urn })
            case "awscc:index/elasticacheServerlessCache:ElasticacheServerlessCache":
                return new ElasticacheServerlessCache(name, <any>undefined, { urn })
            case "awscc:index/elasticacheSubnetGroup:ElasticacheSubnetGroup":
                return new ElasticacheSubnetGroup(name, <any>undefined, { urn })
            case "awscc:index/elasticacheUser:ElasticacheUser":
                return new ElasticacheUser(name, <any>undefined, { urn })
            case "awscc:index/elasticacheUserGroup:ElasticacheUserGroup":
                return new ElasticacheUserGroup(name, <any>undefined, { urn })
            case "awscc:index/elasticbeanstalkApplication:ElasticbeanstalkApplication":
                return new ElasticbeanstalkApplication(name, <any>undefined, { urn })
            case "awscc:index/elasticbeanstalkApplicationVersion:ElasticbeanstalkApplicationVersion":
                return new ElasticbeanstalkApplicationVersion(name, <any>undefined, { urn })
            case "awscc:index/elasticbeanstalkConfigurationTemplate:ElasticbeanstalkConfigurationTemplate":
                return new ElasticbeanstalkConfigurationTemplate(name, <any>undefined, { urn })
            case "awscc:index/elasticbeanstalkEnvironment:ElasticbeanstalkEnvironment":
                return new ElasticbeanstalkEnvironment(name, <any>undefined, { urn })
            case "awscc:index/elasticloadbalancingv2LoadBalancer:Elasticloadbalancingv2LoadBalancer":
                return new Elasticloadbalancingv2LoadBalancer(name, <any>undefined, { urn })
            case "awscc:index/elasticloadbalancingv2TargetGroup:Elasticloadbalancingv2TargetGroup":
                return new Elasticloadbalancingv2TargetGroup(name, <any>undefined, { urn })
            case "awscc:index/elasticloadbalancingv2TrustStore:Elasticloadbalancingv2TrustStore":
                return new Elasticloadbalancingv2TrustStore(name, <any>undefined, { urn })
            case "awscc:index/elasticloadbalancingv2TrustStoreRevocation:Elasticloadbalancingv2TrustStoreRevocation":
                return new Elasticloadbalancingv2TrustStoreRevocation(name, <any>undefined, { urn })
            case "awscc:index/emrSecurityConfiguration:EmrSecurityConfiguration":
                return new EmrSecurityConfiguration(name, <any>undefined, { urn })
            case "awscc:index/emrStudio:EmrStudio":
                return new EmrStudio(name, <any>undefined, { urn })
            case "awscc:index/emrStudioSessionMapping:EmrStudioSessionMapping":
                return new EmrStudioSessionMapping(name, <any>undefined, { urn })
            case "awscc:index/emrWalWorkspace:EmrWalWorkspace":
                return new EmrWalWorkspace(name, <any>undefined, { urn })
            case "awscc:index/emrserverlessApplication:EmrserverlessApplication":
                return new EmrserverlessApplication(name, <any>undefined, { urn })
            case "awscc:index/entityresolutionIdMappingWorkflow:EntityresolutionIdMappingWorkflow":
                return new EntityresolutionIdMappingWorkflow(name, <any>undefined, { urn })
            case "awscc:index/entityresolutionIdNamespace:EntityresolutionIdNamespace":
                return new EntityresolutionIdNamespace(name, <any>undefined, { urn })
            case "awscc:index/entityresolutionMatchingWorkflow:EntityresolutionMatchingWorkflow":
                return new EntityresolutionMatchingWorkflow(name, <any>undefined, { urn })
            case "awscc:index/entityresolutionPolicyStatement:EntityresolutionPolicyStatement":
                return new EntityresolutionPolicyStatement(name, <any>undefined, { urn })
            case "awscc:index/entityresolutionSchemaMapping:EntityresolutionSchemaMapping":
                return new EntityresolutionSchemaMapping(name, <any>undefined, { urn })
            case "awscc:index/eventsApiDestination:EventsApiDestination":
                return new EventsApiDestination(name, <any>undefined, { urn })
            case "awscc:index/eventsArchive:EventsArchive":
                return new EventsArchive(name, <any>undefined, { urn })
            case "awscc:index/eventsEndpoint:EventsEndpoint":
                return new EventsEndpoint(name, <any>undefined, { urn })
            case "awscc:index/eventsEventBus:EventsEventBus":
                return new EventsEventBus(name, <any>undefined, { urn })
            case "awscc:index/eventsRule:EventsRule":
                return new EventsRule(name, <any>undefined, { urn })
            case "awscc:index/eventschemasDiscoverer:EventschemasDiscoverer":
                return new EventschemasDiscoverer(name, <any>undefined, { urn })
            case "awscc:index/eventschemasRegistry:EventschemasRegistry":
                return new EventschemasRegistry(name, <any>undefined, { urn })
            case "awscc:index/eventschemasRegistryPolicy:EventschemasRegistryPolicy":
                return new EventschemasRegistryPolicy(name, <any>undefined, { urn })
            case "awscc:index/eventschemasSchema:EventschemasSchema":
                return new EventschemasSchema(name, <any>undefined, { urn })
            case "awscc:index/evidentlyExperiment:EvidentlyExperiment":
                return new EvidentlyExperiment(name, <any>undefined, { urn })
            case "awscc:index/evidentlyFeature:EvidentlyFeature":
                return new EvidentlyFeature(name, <any>undefined, { urn })
            case "awscc:index/evidentlyLaunch:EvidentlyLaunch":
                return new EvidentlyLaunch(name, <any>undefined, { urn })
            case "awscc:index/evidentlyProject:EvidentlyProject":
                return new EvidentlyProject(name, <any>undefined, { urn })
            case "awscc:index/evidentlySegment:EvidentlySegment":
                return new EvidentlySegment(name, <any>undefined, { urn })
            case "awscc:index/finspaceEnvironment:FinspaceEnvironment":
                return new FinspaceEnvironment(name, <any>undefined, { urn })
            case "awscc:index/fisExperimentTemplate:FisExperimentTemplate":
                return new FisExperimentTemplate(name, <any>undefined, { urn })
            case "awscc:index/fisTargetAccountConfiguration:FisTargetAccountConfiguration":
                return new FisTargetAccountConfiguration(name, <any>undefined, { urn })
            case "awscc:index/fmsNotificationChannel:FmsNotificationChannel":
                return new FmsNotificationChannel(name, <any>undefined, { urn })
            case "awscc:index/fmsPolicy:FmsPolicy":
                return new FmsPolicy(name, <any>undefined, { urn })
            case "awscc:index/fmsResourceSet:FmsResourceSet":
                return new FmsResourceSet(name, <any>undefined, { urn })
            case "awscc:index/forecastDataset:ForecastDataset":
                return new ForecastDataset(name, <any>undefined, { urn })
            case "awscc:index/forecastDatasetGroup:ForecastDatasetGroup":
                return new ForecastDatasetGroup(name, <any>undefined, { urn })
            case "awscc:index/frauddetectorDetector:FrauddetectorDetector":
                return new FrauddetectorDetector(name, <any>undefined, { urn })
            case "awscc:index/frauddetectorEntityType:FrauddetectorEntityType":
                return new FrauddetectorEntityType(name, <any>undefined, { urn })
            case "awscc:index/frauddetectorEventType:FrauddetectorEventType":
                return new FrauddetectorEventType(name, <any>undefined, { urn })
            case "awscc:index/frauddetectorLabel:FrauddetectorLabel":
                return new FrauddetectorLabel(name, <any>undefined, { urn })
            case "awscc:index/frauddetectorList:FrauddetectorList":
                return new FrauddetectorList(name, <any>undefined, { urn })
            case "awscc:index/frauddetectorOutcome:FrauddetectorOutcome":
                return new FrauddetectorOutcome(name, <any>undefined, { urn })
            case "awscc:index/frauddetectorVariable:FrauddetectorVariable":
                return new FrauddetectorVariable(name, <any>undefined, { urn })
            case "awscc:index/fsxDataRepositoryAssociation:FsxDataRepositoryAssociation":
                return new FsxDataRepositoryAssociation(name, <any>undefined, { urn })
            case "awscc:index/gameliftAlias:GameliftAlias":
                return new GameliftAlias(name, <any>undefined, { urn })
            case "awscc:index/gameliftBuild:GameliftBuild":
                return new GameliftBuild(name, <any>undefined, { urn })
            case "awscc:index/gameliftContainerGroupDefinition:GameliftContainerGroupDefinition":
                return new GameliftContainerGroupDefinition(name, <any>undefined, { urn })
            case "awscc:index/gameliftFleet:GameliftFleet":
                return new GameliftFleet(name, <any>undefined, { urn })
            case "awscc:index/gameliftGameServerGroup:GameliftGameServerGroup":
                return new GameliftGameServerGroup(name, <any>undefined, { urn })
            case "awscc:index/gameliftGameSessionQueue:GameliftGameSessionQueue":
                return new GameliftGameSessionQueue(name, <any>undefined, { urn })
            case "awscc:index/gameliftLocation:GameliftLocation":
                return new GameliftLocation(name, <any>undefined, { urn })
            case "awscc:index/gameliftMatchmakingConfiguration:GameliftMatchmakingConfiguration":
                return new GameliftMatchmakingConfiguration(name, <any>undefined, { urn })
            case "awscc:index/gameliftMatchmakingRuleSet:GameliftMatchmakingRuleSet":
                return new GameliftMatchmakingRuleSet(name, <any>undefined, { urn })
            case "awscc:index/gameliftScript:GameliftScript":
                return new GameliftScript(name, <any>undefined, { urn })
            case "awscc:index/globalacceleratorAccelerator:GlobalacceleratorAccelerator":
                return new GlobalacceleratorAccelerator(name, <any>undefined, { urn })
            case "awscc:index/globalacceleratorCrossAccountAttachment:GlobalacceleratorCrossAccountAttachment":
                return new GlobalacceleratorCrossAccountAttachment(name, <any>undefined, { urn })
            case "awscc:index/globalacceleratorEndpointGroup:GlobalacceleratorEndpointGroup":
                return new GlobalacceleratorEndpointGroup(name, <any>undefined, { urn })
            case "awscc:index/globalacceleratorListener:GlobalacceleratorListener":
                return new GlobalacceleratorListener(name, <any>undefined, { urn })
            case "awscc:index/glueDatabase:GlueDatabase":
                return new GlueDatabase(name, <any>undefined, { urn })
            case "awscc:index/glueRegistry:GlueRegistry":
                return new GlueRegistry(name, <any>undefined, { urn })
            case "awscc:index/glueSchema:GlueSchema":
                return new GlueSchema(name, <any>undefined, { urn })
            case "awscc:index/glueSchemaVersion:GlueSchemaVersion":
                return new GlueSchemaVersion(name, <any>undefined, { urn })
            case "awscc:index/glueSchemaVersionMetadata:GlueSchemaVersionMetadata":
                return new GlueSchemaVersionMetadata(name, <any>undefined, { urn })
            case "awscc:index/glueTrigger:GlueTrigger":
                return new GlueTrigger(name, <any>undefined, { urn })
            case "awscc:index/grafanaWorkspace:GrafanaWorkspace":
                return new GrafanaWorkspace(name, <any>undefined, { urn })
            case "awscc:index/greengrassv2ComponentVersion:Greengrassv2ComponentVersion":
                return new Greengrassv2ComponentVersion(name, <any>undefined, { urn })
            case "awscc:index/greengrassv2Deployment:Greengrassv2Deployment":
                return new Greengrassv2Deployment(name, <any>undefined, { urn })
            case "awscc:index/groundstationConfig:GroundstationConfig":
                return new GroundstationConfig(name, <any>undefined, { urn })
            case "awscc:index/groundstationDataflowEndpointGroup:GroundstationDataflowEndpointGroup":
                return new GroundstationDataflowEndpointGroup(name, <any>undefined, { urn })
            case "awscc:index/groundstationMissionProfile:GroundstationMissionProfile":
                return new GroundstationMissionProfile(name, <any>undefined, { urn })
            case "awscc:index/guarddutyDetector:GuarddutyDetector":
                return new GuarddutyDetector(name, <any>undefined, { urn })
            case "awscc:index/guarddutyFilter:GuarddutyFilter":
                return new GuarddutyFilter(name, <any>undefined, { urn })
            case "awscc:index/guarddutyIpSet:GuarddutyIpSet":
                return new GuarddutyIpSet(name, <any>undefined, { urn })
            case "awscc:index/guarddutyMalwareProtectionPlan:GuarddutyMalwareProtectionPlan":
                return new GuarddutyMalwareProtectionPlan(name, <any>undefined, { urn })
            case "awscc:index/guarddutyMaster:GuarddutyMaster":
                return new GuarddutyMaster(name, <any>undefined, { urn })
            case "awscc:index/guarddutyMember:GuarddutyMember":
                return new GuarddutyMember(name, <any>undefined, { urn })
            case "awscc:index/guarddutyThreatIntelSet:GuarddutyThreatIntelSet":
                return new GuarddutyThreatIntelSet(name, <any>undefined, { urn })
            case "awscc:index/healthimagingDatastore:HealthimagingDatastore":
                return new HealthimagingDatastore(name, <any>undefined, { urn })
            case "awscc:index/healthlakeFhirDatastore:HealthlakeFhirDatastore":
                return new HealthlakeFhirDatastore(name, <any>undefined, { urn })
            case "awscc:index/iamGroup:IamGroup":
                return new IamGroup(name, <any>undefined, { urn })
            case "awscc:index/iamGroupPolicy:IamGroupPolicy":
                return new IamGroupPolicy(name, <any>undefined, { urn })
            case "awscc:index/iamInstanceProfile:IamInstanceProfile":
                return new IamInstanceProfile(name, <any>undefined, { urn })
            case "awscc:index/iamManagedPolicy:IamManagedPolicy":
                return new IamManagedPolicy(name, <any>undefined, { urn })
            case "awscc:index/iamOidcProvider:IamOidcProvider":
                return new IamOidcProvider(name, <any>undefined, { urn })
            case "awscc:index/iamRole:IamRole":
                return new IamRole(name, <any>undefined, { urn })
            case "awscc:index/iamRolePolicy:IamRolePolicy":
                return new IamRolePolicy(name, <any>undefined, { urn })
            case "awscc:index/iamSamlProvider:IamSamlProvider":
                return new IamSamlProvider(name, <any>undefined, { urn })
            case "awscc:index/iamServerCertificate:IamServerCertificate":
                return new IamServerCertificate(name, <any>undefined, { urn })
            case "awscc:index/iamServiceLinkedRole:IamServiceLinkedRole":
                return new IamServiceLinkedRole(name, <any>undefined, { urn })
            case "awscc:index/iamUser:IamUser":
                return new IamUser(name, <any>undefined, { urn })
            case "awscc:index/iamUserPolicy:IamUserPolicy":
                return new IamUserPolicy(name, <any>undefined, { urn })
            case "awscc:index/iamVirtualMfaDevice:IamVirtualMfaDevice":
                return new IamVirtualMfaDevice(name, <any>undefined, { urn })
            case "awscc:index/identitystoreGroup:IdentitystoreGroup":
                return new IdentitystoreGroup(name, <any>undefined, { urn })
            case "awscc:index/identitystoreGroupMembership:IdentitystoreGroupMembership":
                return new IdentitystoreGroupMembership(name, <any>undefined, { urn })
            case "awscc:index/imagebuilderComponent:ImagebuilderComponent":
                return new ImagebuilderComponent(name, <any>undefined, { urn })
            case "awscc:index/imagebuilderContainerRecipe:ImagebuilderContainerRecipe":
                return new ImagebuilderContainerRecipe(name, <any>undefined, { urn })
            case "awscc:index/imagebuilderDistributionConfiguration:ImagebuilderDistributionConfiguration":
                return new ImagebuilderDistributionConfiguration(name, <any>undefined, { urn })
            case "awscc:index/imagebuilderImage:ImagebuilderImage":
                return new ImagebuilderImage(name, <any>undefined, { urn })
            case "awscc:index/imagebuilderImagePipeline:ImagebuilderImagePipeline":
                return new ImagebuilderImagePipeline(name, <any>undefined, { urn })
            case "awscc:index/imagebuilderImageRecipe:ImagebuilderImageRecipe":
                return new ImagebuilderImageRecipe(name, <any>undefined, { urn })
            case "awscc:index/imagebuilderInfrastructureConfiguration:ImagebuilderInfrastructureConfiguration":
                return new ImagebuilderInfrastructureConfiguration(name, <any>undefined, { urn })
            case "awscc:index/imagebuilderLifecyclePolicy:ImagebuilderLifecyclePolicy":
                return new ImagebuilderLifecyclePolicy(name, <any>undefined, { urn })
            case "awscc:index/imagebuilderWorkflow:ImagebuilderWorkflow":
                return new ImagebuilderWorkflow(name, <any>undefined, { urn })
            case "awscc:index/inspectorAssessmentTarget:InspectorAssessmentTarget":
                return new InspectorAssessmentTarget(name, <any>undefined, { urn })
            case "awscc:index/inspectorAssessmentTemplate:InspectorAssessmentTemplate":
                return new InspectorAssessmentTemplate(name, <any>undefined, { urn })
            case "awscc:index/inspectorResourceGroup:InspectorResourceGroup":
                return new InspectorResourceGroup(name, <any>undefined, { urn })
            case "awscc:index/inspectorv2CisScanConfiguration:Inspectorv2CisScanConfiguration":
                return new Inspectorv2CisScanConfiguration(name, <any>undefined, { urn })
            case "awscc:index/inspectorv2Filter:Inspectorv2Filter":
                return new Inspectorv2Filter(name, <any>undefined, { urn })
            case "awscc:index/internetmonitorMonitor:InternetmonitorMonitor":
                return new InternetmonitorMonitor(name, <any>undefined, { urn })
            case "awscc:index/iotAccountAuditConfiguration:IotAccountAuditConfiguration":
                return new IotAccountAuditConfiguration(name, <any>undefined, { urn })
            case "awscc:index/iotAuthorizer:IotAuthorizer":
                return new IotAuthorizer(name, <any>undefined, { urn })
            case "awscc:index/iotBillingGroup:IotBillingGroup":
                return new IotBillingGroup(name, <any>undefined, { urn })
            case "awscc:index/iotCaCertificate:IotCaCertificate":
                return new IotCaCertificate(name, <any>undefined, { urn })
            case "awscc:index/iotCertificate:IotCertificate":
                return new IotCertificate(name, <any>undefined, { urn })
            case "awscc:index/iotCertificateProvider:IotCertificateProvider":
                return new IotCertificateProvider(name, <any>undefined, { urn })
            case "awscc:index/iotCustomMetric:IotCustomMetric":
                return new IotCustomMetric(name, <any>undefined, { urn })
            case "awscc:index/iotDimension:IotDimension":
                return new IotDimension(name, <any>undefined, { urn })
            case "awscc:index/iotDomainConfiguration:IotDomainConfiguration":
                return new IotDomainConfiguration(name, <any>undefined, { urn })
            case "awscc:index/iotFleetMetric:IotFleetMetric":
                return new IotFleetMetric(name, <any>undefined, { urn })
            case "awscc:index/iotJobTemplate:IotJobTemplate":
                return new IotJobTemplate(name, <any>undefined, { urn })
            case "awscc:index/iotLogging:IotLogging":
                return new IotLogging(name, <any>undefined, { urn })
            case "awscc:index/iotMitigationAction:IotMitigationAction":
                return new IotMitigationAction(name, <any>undefined, { urn })
            case "awscc:index/iotPolicy:IotPolicy":
                return new IotPolicy(name, <any>undefined, { urn })
            case "awscc:index/iotProvisioningTemplate:IotProvisioningTemplate":
                return new IotProvisioningTemplate(name, <any>undefined, { urn })
            case "awscc:index/iotResourceSpecificLogging:IotResourceSpecificLogging":
                return new IotResourceSpecificLogging(name, <any>undefined, { urn })
            case "awscc:index/iotRoleAlias:IotRoleAlias":
                return new IotRoleAlias(name, <any>undefined, { urn })
            case "awscc:index/iotScheduledAudit:IotScheduledAudit":
                return new IotScheduledAudit(name, <any>undefined, { urn })
            case "awscc:index/iotSecurityProfile:IotSecurityProfile":
                return new IotSecurityProfile(name, <any>undefined, { urn })
            case "awscc:index/iotSoftwarePackage:IotSoftwarePackage":
                return new IotSoftwarePackage(name, <any>undefined, { urn })
            case "awscc:index/iotSoftwarePackageVersion:IotSoftwarePackageVersion":
                return new IotSoftwarePackageVersion(name, <any>undefined, { urn })
            case "awscc:index/iotThing:IotThing":
                return new IotThing(name, <any>undefined, { urn })
            case "awscc:index/iotThingGroup:IotThingGroup":
                return new IotThingGroup(name, <any>undefined, { urn })
            case "awscc:index/iotThingType:IotThingType":
                return new IotThingType(name, <any>undefined, { urn })
            case "awscc:index/iotTopicRule:IotTopicRule":
                return new IotTopicRule(name, <any>undefined, { urn })
            case "awscc:index/iotTopicRuleDestination:IotTopicRuleDestination":
                return new IotTopicRuleDestination(name, <any>undefined, { urn })
            case "awscc:index/iotanalyticsChannel:IotanalyticsChannel":
                return new IotanalyticsChannel(name, <any>undefined, { urn })
            case "awscc:index/iotanalyticsDataset:IotanalyticsDataset":
                return new IotanalyticsDataset(name, <any>undefined, { urn })
            case "awscc:index/iotanalyticsDatastore:IotanalyticsDatastore":
                return new IotanalyticsDatastore(name, <any>undefined, { urn })
            case "awscc:index/iotanalyticsPipeline:IotanalyticsPipeline":
                return new IotanalyticsPipeline(name, <any>undefined, { urn })
            case "awscc:index/iotcoredeviceadvisorSuiteDefinition:IotcoredeviceadvisorSuiteDefinition":
                return new IotcoredeviceadvisorSuiteDefinition(name, <any>undefined, { urn })
            case "awscc:index/ioteventsAlarmModel:IoteventsAlarmModel":
                return new IoteventsAlarmModel(name, <any>undefined, { urn })
            case "awscc:index/ioteventsDetectorModel:IoteventsDetectorModel":
                return new IoteventsDetectorModel(name, <any>undefined, { urn })
            case "awscc:index/ioteventsInput:IoteventsInput":
                return new IoteventsInput(name, <any>undefined, { urn })
            case "awscc:index/iotfleethubApplication:IotfleethubApplication":
                return new IotfleethubApplication(name, <any>undefined, { urn })
            case "awscc:index/iotfleetwiseCampaign:IotfleetwiseCampaign":
                return new IotfleetwiseCampaign(name, <any>undefined, { urn })
            case "awscc:index/iotfleetwiseFleet:IotfleetwiseFleet":
                return new IotfleetwiseFleet(name, <any>undefined, { urn })
            case "awscc:index/iotfleetwiseModelManifest:IotfleetwiseModelManifest":
                return new IotfleetwiseModelManifest(name, <any>undefined, { urn })
            case "awscc:index/iotfleetwiseSignalCatalog:IotfleetwiseSignalCatalog":
                return new IotfleetwiseSignalCatalog(name, <any>undefined, { urn })
            case "awscc:index/iotfleetwiseVehicle:IotfleetwiseVehicle":
                return new IotfleetwiseVehicle(name, <any>undefined, { urn })
            case "awscc:index/iotsitewiseAccessPolicy:IotsitewiseAccessPolicy":
                return new IotsitewiseAccessPolicy(name, <any>undefined, { urn })
            case "awscc:index/iotsitewiseAsset:IotsitewiseAsset":
                return new IotsitewiseAsset(name, <any>undefined, { urn })
            case "awscc:index/iotsitewiseAssetModel:IotsitewiseAssetModel":
                return new IotsitewiseAssetModel(name, <any>undefined, { urn })
            case "awscc:index/iotsitewiseDashboard:IotsitewiseDashboard":
                return new IotsitewiseDashboard(name, <any>undefined, { urn })
            case "awscc:index/iotsitewiseGateway:IotsitewiseGateway":
                return new IotsitewiseGateway(name, <any>undefined, { urn })
            case "awscc:index/iotsitewisePortal:IotsitewisePortal":
                return new IotsitewisePortal(name, <any>undefined, { urn })
            case "awscc:index/iotsitewiseProject:IotsitewiseProject":
                return new IotsitewiseProject(name, <any>undefined, { urn })
            case "awscc:index/iottwinmakerScene:IottwinmakerScene":
                return new IottwinmakerScene(name, <any>undefined, { urn })
            case "awscc:index/iottwinmakerSyncJob:IottwinmakerSyncJob":
                return new IottwinmakerSyncJob(name, <any>undefined, { urn })
            case "awscc:index/iottwinmakerWorkspace:IottwinmakerWorkspace":
                return new IottwinmakerWorkspace(name, <any>undefined, { urn })
            case "awscc:index/iotwirelessDestination:IotwirelessDestination":
                return new IotwirelessDestination(name, <any>undefined, { urn })
            case "awscc:index/iotwirelessDeviceProfile:IotwirelessDeviceProfile":
                return new IotwirelessDeviceProfile(name, <any>undefined, { urn })
            case "awscc:index/iotwirelessFuotaTask:IotwirelessFuotaTask":
                return new IotwirelessFuotaTask(name, <any>undefined, { urn })
            case "awscc:index/iotwirelessMulticastGroup:IotwirelessMulticastGroup":
                return new IotwirelessMulticastGroup(name, <any>undefined, { urn })
            case "awscc:index/iotwirelessNetworkAnalyzerConfiguration:IotwirelessNetworkAnalyzerConfiguration":
                return new IotwirelessNetworkAnalyzerConfiguration(name, <any>undefined, { urn })
            case "awscc:index/iotwirelessPartnerAccount:IotwirelessPartnerAccount":
                return new IotwirelessPartnerAccount(name, <any>undefined, { urn })
            case "awscc:index/iotwirelessServiceProfile:IotwirelessServiceProfile":
                return new IotwirelessServiceProfile(name, <any>undefined, { urn })
            case "awscc:index/iotwirelessTaskDefinition:IotwirelessTaskDefinition":
                return new IotwirelessTaskDefinition(name, <any>undefined, { urn })
            case "awscc:index/iotwirelessWirelessDevice:IotwirelessWirelessDevice":
                return new IotwirelessWirelessDevice(name, <any>undefined, { urn })
            case "awscc:index/iotwirelessWirelessDeviceImportTask:IotwirelessWirelessDeviceImportTask":
                return new IotwirelessWirelessDeviceImportTask(name, <any>undefined, { urn })
            case "awscc:index/iotwirelessWirelessGateway:IotwirelessWirelessGateway":
                return new IotwirelessWirelessGateway(name, <any>undefined, { urn })
            case "awscc:index/ivsChannel:IvsChannel":
                return new IvsChannel(name, <any>undefined, { urn })
            case "awscc:index/ivsEncoderConfiguration:IvsEncoderConfiguration":
                return new IvsEncoderConfiguration(name, <any>undefined, { urn })
            case "awscc:index/ivsPlaybackKeyPair:IvsPlaybackKeyPair":
                return new IvsPlaybackKeyPair(name, <any>undefined, { urn })
            case "awscc:index/ivsPlaybackRestrictionPolicy:IvsPlaybackRestrictionPolicy":
                return new IvsPlaybackRestrictionPolicy(name, <any>undefined, { urn })
            case "awscc:index/ivsPublicKey:IvsPublicKey":
                return new IvsPublicKey(name, <any>undefined, { urn })
            case "awscc:index/ivsRecordingConfiguration:IvsRecordingConfiguration":
                return new IvsRecordingConfiguration(name, <any>undefined, { urn })
            case "awscc:index/ivsStage:IvsStage":
                return new IvsStage(name, <any>undefined, { urn })
            case "awscc:index/ivsStorageConfiguration:IvsStorageConfiguration":
                return new IvsStorageConfiguration(name, <any>undefined, { urn })
            case "awscc:index/ivsStreamKey:IvsStreamKey":
                return new IvsStreamKey(name, <any>undefined, { urn })
            case "awscc:index/ivschatLoggingConfiguration:IvschatLoggingConfiguration":
                return new IvschatLoggingConfiguration(name, <any>undefined, { urn })
            case "awscc:index/ivschatRoom:IvschatRoom":
                return new IvschatRoom(name, <any>undefined, { urn })
            case "awscc:index/kafkaconnectConnector:KafkaconnectConnector":
                return new KafkaconnectConnector(name, <any>undefined, { urn })
            case "awscc:index/kafkaconnectCustomPlugin:KafkaconnectCustomPlugin":
                return new KafkaconnectCustomPlugin(name, <any>undefined, { urn })
            case "awscc:index/kafkaconnectWorkerConfiguration:KafkaconnectWorkerConfiguration":
                return new KafkaconnectWorkerConfiguration(name, <any>undefined, { urn })
            case "awscc:index/kendraDataSource:KendraDataSource":
                return new KendraDataSource(name, <any>undefined, { urn })
            case "awscc:index/kendraFaq:KendraFaq":
                return new KendraFaq(name, <any>undefined, { urn })
            case "awscc:index/kendraIndex:KendraIndex":
                return new KendraIndex(name, <any>undefined, { urn })
            case "awscc:index/kendrarankingExecutionPlan:KendrarankingExecutionPlan":
                return new KendrarankingExecutionPlan(name, <any>undefined, { urn })
            case "awscc:index/kinesisStream:KinesisStream":
                return new KinesisStream(name, <any>undefined, { urn })
            case "awscc:index/kinesisanalyticsv2Application:Kinesisanalyticsv2Application":
                return new Kinesisanalyticsv2Application(name, <any>undefined, { urn })
            case "awscc:index/kinesisfirehoseDeliveryStream:KinesisfirehoseDeliveryStream":
                return new KinesisfirehoseDeliveryStream(name, <any>undefined, { urn })
            case "awscc:index/kinesisvideoSignalingChannel:KinesisvideoSignalingChannel":
                return new KinesisvideoSignalingChannel(name, <any>undefined, { urn })
            case "awscc:index/kinesisvideoStream:KinesisvideoStream":
                return new KinesisvideoStream(name, <any>undefined, { urn })
            case "awscc:index/kmsAlias:KmsAlias":
                return new KmsAlias(name, <any>undefined, { urn })
            case "awscc:index/kmsKey:KmsKey":
                return new KmsKey(name, <any>undefined, { urn })
            case "awscc:index/kmsReplicaKey:KmsReplicaKey":
                return new KmsReplicaKey(name, <any>undefined, { urn })
            case "awscc:index/lakeformationDataCellsFilter:LakeformationDataCellsFilter":
                return new LakeformationDataCellsFilter(name, <any>undefined, { urn })
            case "awscc:index/lakeformationPrincipalPermissions:LakeformationPrincipalPermissions":
                return new LakeformationPrincipalPermissions(name, <any>undefined, { urn })
            case "awscc:index/lakeformationTag:LakeformationTag":
                return new LakeformationTag(name, <any>undefined, { urn })
            case "awscc:index/lakeformationTagAssociation:LakeformationTagAssociation":
                return new LakeformationTagAssociation(name, <any>undefined, { urn })
            case "awscc:index/lambdaAlias:LambdaAlias":
                return new LambdaAlias(name, <any>undefined, { urn })
            case "awscc:index/lambdaCodeSigningConfig:LambdaCodeSigningConfig":
                return new LambdaCodeSigningConfig(name, <any>undefined, { urn })
            case "awscc:index/lambdaEventInvokeConfig:LambdaEventInvokeConfig":
                return new LambdaEventInvokeConfig(name, <any>undefined, { urn })
            case "awscc:index/lambdaEventSourceMapping:LambdaEventSourceMapping":
                return new LambdaEventSourceMapping(name, <any>undefined, { urn })
            case "awscc:index/lambdaFunction:LambdaFunction":
                return new LambdaFunction(name, <any>undefined, { urn })
            case "awscc:index/lambdaLayerVersion:LambdaLayerVersion":
                return new LambdaLayerVersion(name, <any>undefined, { urn })
            case "awscc:index/lambdaLayerVersionPermission:LambdaLayerVersionPermission":
                return new LambdaLayerVersionPermission(name, <any>undefined, { urn })
            case "awscc:index/lambdaPermission:LambdaPermission":
                return new LambdaPermission(name, <any>undefined, { urn })
            case "awscc:index/lambdaUrl:LambdaUrl":
                return new LambdaUrl(name, <any>undefined, { urn })
            case "awscc:index/lambdaVersion:LambdaVersion":
                return new LambdaVersion(name, <any>undefined, { urn })
            case "awscc:index/launchwizardDeployment:LaunchwizardDeployment":
                return new LaunchwizardDeployment(name, <any>undefined, { urn })
            case "awscc:index/lexBot:LexBot":
                return new LexBot(name, <any>undefined, { urn })
            case "awscc:index/lexBotAlias:LexBotAlias":
                return new LexBotAlias(name, <any>undefined, { urn })
            case "awscc:index/lexBotVersion:LexBotVersion":
                return new LexBotVersion(name, <any>undefined, { urn })
            case "awscc:index/lexResourcePolicy:LexResourcePolicy":
                return new LexResourcePolicy(name, <any>undefined, { urn })
            case "awscc:index/licensemanagerGrant:LicensemanagerGrant":
                return new LicensemanagerGrant(name, <any>undefined, { urn })
            case "awscc:index/licensemanagerLicense:LicensemanagerLicense":
                return new LicensemanagerLicense(name, <any>undefined, { urn })
            case "awscc:index/lightsailAlarm:LightsailAlarm":
                return new LightsailAlarm(name, <any>undefined, { urn })
            case "awscc:index/lightsailBucket:LightsailBucket":
                return new LightsailBucket(name, <any>undefined, { urn })
            case "awscc:index/lightsailCertificate:LightsailCertificate":
                return new LightsailCertificate(name, <any>undefined, { urn })
            case "awscc:index/lightsailContainer:LightsailContainer":
                return new LightsailContainer(name, <any>undefined, { urn })
            case "awscc:index/lightsailDatabase:LightsailDatabase":
                return new LightsailDatabase(name, <any>undefined, { urn })
            case "awscc:index/lightsailDisk:LightsailDisk":
                return new LightsailDisk(name, <any>undefined, { urn })
            case "awscc:index/lightsailDistribution:LightsailDistribution":
                return new LightsailDistribution(name, <any>undefined, { urn })
            case "awscc:index/lightsailInstance:LightsailInstance":
                return new LightsailInstance(name, <any>undefined, { urn })
            case "awscc:index/lightsailLoadBalancer:LightsailLoadBalancer":
                return new LightsailLoadBalancer(name, <any>undefined, { urn })
            case "awscc:index/lightsailLoadBalancerTlsCertificate:LightsailLoadBalancerTlsCertificate":
                return new LightsailLoadBalancerTlsCertificate(name, <any>undefined, { urn })
            case "awscc:index/lightsailStaticIp:LightsailStaticIp":
                return new LightsailStaticIp(name, <any>undefined, { urn })
            case "awscc:index/locationApiKey:LocationApiKey":
                return new LocationApiKey(name, <any>undefined, { urn })
            case "awscc:index/locationGeofenceCollection:LocationGeofenceCollection":
                return new LocationGeofenceCollection(name, <any>undefined, { urn })
            case "awscc:index/locationMap:LocationMap":
                return new LocationMap(name, <any>undefined, { urn })
            case "awscc:index/locationPlaceIndex:LocationPlaceIndex":
                return new LocationPlaceIndex(name, <any>undefined, { urn })
            case "awscc:index/locationRouteCalculator:LocationRouteCalculator":
                return new LocationRouteCalculator(name, <any>undefined, { urn })
            case "awscc:index/locationTracker:LocationTracker":
                return new LocationTracker(name, <any>undefined, { urn })
            case "awscc:index/locationTrackerConsumer:LocationTrackerConsumer":
                return new LocationTrackerConsumer(name, <any>undefined, { urn })
            case "awscc:index/logsAccountPolicy:LogsAccountPolicy":
                return new LogsAccountPolicy(name, <any>undefined, { urn })
            case "awscc:index/logsDelivery:LogsDelivery":
                return new LogsDelivery(name, <any>undefined, { urn })
            case "awscc:index/logsDeliveryDestination:LogsDeliveryDestination":
                return new LogsDeliveryDestination(name, <any>undefined, { urn })
            case "awscc:index/logsDeliverySource:LogsDeliverySource":
                return new LogsDeliverySource(name, <any>undefined, { urn })
            case "awscc:index/logsDestination:LogsDestination":
                return new LogsDestination(name, <any>undefined, { urn })
            case "awscc:index/logsLogAnomalyDetector:LogsLogAnomalyDetector":
                return new LogsLogAnomalyDetector(name, <any>undefined, { urn })
            case "awscc:index/logsLogGroup:LogsLogGroup":
                return new LogsLogGroup(name, <any>undefined, { urn })
            case "awscc:index/logsLogStream:LogsLogStream":
                return new LogsLogStream(name, <any>undefined, { urn })
            case "awscc:index/logsMetricFilter:LogsMetricFilter":
                return new LogsMetricFilter(name, <any>undefined, { urn })
            case "awscc:index/logsQueryDefinition:LogsQueryDefinition":
                return new LogsQueryDefinition(name, <any>undefined, { urn })
            case "awscc:index/logsResourcePolicy:LogsResourcePolicy":
                return new LogsResourcePolicy(name, <any>undefined, { urn })
            case "awscc:index/logsSubscriptionFilter:LogsSubscriptionFilter":
                return new LogsSubscriptionFilter(name, <any>undefined, { urn })
            case "awscc:index/lookoutequipmentInferenceScheduler:LookoutequipmentInferenceScheduler":
                return new LookoutequipmentInferenceScheduler(name, <any>undefined, { urn })
            case "awscc:index/lookoutmetricsAlert:LookoutmetricsAlert":
                return new LookoutmetricsAlert(name, <any>undefined, { urn })
            case "awscc:index/lookoutmetricsAnomalyDetector:LookoutmetricsAnomalyDetector":
                return new LookoutmetricsAnomalyDetector(name, <any>undefined, { urn })
            case "awscc:index/lookoutvisionProject:LookoutvisionProject":
                return new LookoutvisionProject(name, <any>undefined, { urn })
            case "awscc:index/m2Application:M2Application":
                return new M2Application(name, <any>undefined, { urn })
            case "awscc:index/m2Environment:M2Environment":
                return new M2Environment(name, <any>undefined, { urn })
            case "awscc:index/macieAllowList:MacieAllowList":
                return new MacieAllowList(name, <any>undefined, { urn })
            case "awscc:index/macieCustomDataIdentifier:MacieCustomDataIdentifier":
                return new MacieCustomDataIdentifier(name, <any>undefined, { urn })
            case "awscc:index/macieFindingsFilter:MacieFindingsFilter":
                return new MacieFindingsFilter(name, <any>undefined, { urn })
            case "awscc:index/macieSession:MacieSession":
                return new MacieSession(name, <any>undefined, { urn })
            case "awscc:index/managedblockchainAccessor:ManagedblockchainAccessor":
                return new ManagedblockchainAccessor(name, <any>undefined, { urn })
            case "awscc:index/mediaconnectBridge:MediaconnectBridge":
                return new MediaconnectBridge(name, <any>undefined, { urn })
            case "awscc:index/mediaconnectBridgeOutput:MediaconnectBridgeOutput":
                return new MediaconnectBridgeOutput(name, <any>undefined, { urn })
            case "awscc:index/mediaconnectBridgeSource:MediaconnectBridgeSource":
                return new MediaconnectBridgeSource(name, <any>undefined, { urn })
            case "awscc:index/mediaconnectFlow:MediaconnectFlow":
                return new MediaconnectFlow(name, <any>undefined, { urn })
            case "awscc:index/mediaconnectFlowEntitlement:MediaconnectFlowEntitlement":
                return new MediaconnectFlowEntitlement(name, <any>undefined, { urn })
            case "awscc:index/mediaconnectFlowOutput:MediaconnectFlowOutput":
                return new MediaconnectFlowOutput(name, <any>undefined, { urn })
            case "awscc:index/mediaconnectFlowSource:MediaconnectFlowSource":
                return new MediaconnectFlowSource(name, <any>undefined, { urn })
            case "awscc:index/mediaconnectFlowVpcInterface:MediaconnectFlowVpcInterface":
                return new MediaconnectFlowVpcInterface(name, <any>undefined, { urn })
            case "awscc:index/mediaconnectGateway:MediaconnectGateway":
                return new MediaconnectGateway(name, <any>undefined, { urn })
            case "awscc:index/medialiveMultiplex:MedialiveMultiplex":
                return new MedialiveMultiplex(name, <any>undefined, { urn })
            case "awscc:index/medialiveMultiplexprogram:MedialiveMultiplexprogram":
                return new MedialiveMultiplexprogram(name, <any>undefined, { urn })
            case "awscc:index/mediapackageAsset:MediapackageAsset":
                return new MediapackageAsset(name, <any>undefined, { urn })
            case "awscc:index/mediapackagePackagingConfiguration:MediapackagePackagingConfiguration":
                return new MediapackagePackagingConfiguration(name, <any>undefined, { urn })
            case "awscc:index/mediapackagePackagingGroup:MediapackagePackagingGroup":
                return new MediapackagePackagingGroup(name, <any>undefined, { urn })
            case "awscc:index/mediapackagev2Channel:Mediapackagev2Channel":
                return new Mediapackagev2Channel(name, <any>undefined, { urn })
            case "awscc:index/mediapackagev2ChannelGroup:Mediapackagev2ChannelGroup":
                return new Mediapackagev2ChannelGroup(name, <any>undefined, { urn })
            case "awscc:index/mediapackagev2ChannelPolicy:Mediapackagev2ChannelPolicy":
                return new Mediapackagev2ChannelPolicy(name, <any>undefined, { urn })
            case "awscc:index/mediapackagev2OriginEndpoint:Mediapackagev2OriginEndpoint":
                return new Mediapackagev2OriginEndpoint(name, <any>undefined, { urn })
            case "awscc:index/mediapackagev2OriginEndpointPolicy:Mediapackagev2OriginEndpointPolicy":
                return new Mediapackagev2OriginEndpointPolicy(name, <any>undefined, { urn })
            case "awscc:index/mediatailorChannel:MediatailorChannel":
                return new MediatailorChannel(name, <any>undefined, { urn })
            case "awscc:index/mediatailorChannelPolicy:MediatailorChannelPolicy":
                return new MediatailorChannelPolicy(name, <any>undefined, { urn })
            case "awscc:index/mediatailorLiveSource:MediatailorLiveSource":
                return new MediatailorLiveSource(name, <any>undefined, { urn })
            case "awscc:index/mediatailorSourceLocation:MediatailorSourceLocation":
                return new MediatailorSourceLocation(name, <any>undefined, { urn })
            case "awscc:index/mediatailorVodSource:MediatailorVodSource":
                return new MediatailorVodSource(name, <any>undefined, { urn })
            case "awscc:index/memorydbAcl:MemorydbAcl":
                return new MemorydbAcl(name, <any>undefined, { urn })
            case "awscc:index/memorydbCluster:MemorydbCluster":
                return new MemorydbCluster(name, <any>undefined, { urn })
            case "awscc:index/memorydbParameterGroup:MemorydbParameterGroup":
                return new MemorydbParameterGroup(name, <any>undefined, { urn })
            case "awscc:index/memorydbSubnetGroup:MemorydbSubnetGroup":
                return new MemorydbSubnetGroup(name, <any>undefined, { urn })
            case "awscc:index/memorydbUser:MemorydbUser":
                return new MemorydbUser(name, <any>undefined, { urn })
            case "awscc:index/mskBatchScramSecret:MskBatchScramSecret":
                return new MskBatchScramSecret(name, <any>undefined, { urn })
            case "awscc:index/mskCluster:MskCluster":
                return new MskCluster(name, <any>undefined, { urn })
            case "awscc:index/mskClusterPolicy:MskClusterPolicy":
                return new MskClusterPolicy(name, <any>undefined, { urn })
            case "awscc:index/mskConfiguration:MskConfiguration":
                return new MskConfiguration(name, <any>undefined, { urn })
            case "awscc:index/mskReplicator:MskReplicator":
                return new MskReplicator(name, <any>undefined, { urn })
            case "awscc:index/mskServerlessCluster:MskServerlessCluster":
                return new MskServerlessCluster(name, <any>undefined, { urn })
            case "awscc:index/mskVpcConnection:MskVpcConnection":
                return new MskVpcConnection(name, <any>undefined, { urn })
            case "awscc:index/mwaaEnvironment:MwaaEnvironment":
                return new MwaaEnvironment(name, <any>undefined, { urn })
            case "awscc:index/neptuneDbCluster:NeptuneDbCluster":
                return new NeptuneDbCluster(name, <any>undefined, { urn })
            case "awscc:index/neptunegraphGraph:NeptunegraphGraph":
                return new NeptunegraphGraph(name, <any>undefined, { urn })
            case "awscc:index/neptunegraphPrivateGraphEndpoint:NeptunegraphPrivateGraphEndpoint":
                return new NeptunegraphPrivateGraphEndpoint(name, <any>undefined, { urn })
            case "awscc:index/networkfirewallFirewall:NetworkfirewallFirewall":
                return new NetworkfirewallFirewall(name, <any>undefined, { urn })
            case "awscc:index/networkfirewallFirewallPolicy:NetworkfirewallFirewallPolicy":
                return new NetworkfirewallFirewallPolicy(name, <any>undefined, { urn })
            case "awscc:index/networkfirewallLoggingConfiguration:NetworkfirewallLoggingConfiguration":
                return new NetworkfirewallLoggingConfiguration(name, <any>undefined, { urn })
            case "awscc:index/networkfirewallRuleGroup:NetworkfirewallRuleGroup":
                return new NetworkfirewallRuleGroup(name, <any>undefined, { urn })
            case "awscc:index/networkfirewallTlsInspectionConfiguration:NetworkfirewallTlsInspectionConfiguration":
                return new NetworkfirewallTlsInspectionConfiguration(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerConnectAttachment:NetworkmanagerConnectAttachment":
                return new NetworkmanagerConnectAttachment(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerConnectPeer:NetworkmanagerConnectPeer":
                return new NetworkmanagerConnectPeer(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerCoreNetwork:NetworkmanagerCoreNetwork":
                return new NetworkmanagerCoreNetwork(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerCustomerGatewayAssociation:NetworkmanagerCustomerGatewayAssociation":
                return new NetworkmanagerCustomerGatewayAssociation(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerDevice:NetworkmanagerDevice":
                return new NetworkmanagerDevice(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerGlobalNetwork:NetworkmanagerGlobalNetwork":
                return new NetworkmanagerGlobalNetwork(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerLink:NetworkmanagerLink":
                return new NetworkmanagerLink(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerLinkAssociation:NetworkmanagerLinkAssociation":
                return new NetworkmanagerLinkAssociation(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerSite:NetworkmanagerSite":
                return new NetworkmanagerSite(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerSiteToSiteVpnAttachment:NetworkmanagerSiteToSiteVpnAttachment":
                return new NetworkmanagerSiteToSiteVpnAttachment(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerTransitGatewayPeering:NetworkmanagerTransitGatewayPeering":
                return new NetworkmanagerTransitGatewayPeering(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerTransitGatewayRegistration:NetworkmanagerTransitGatewayRegistration":
                return new NetworkmanagerTransitGatewayRegistration(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerTransitGatewayRouteTableAttachment:NetworkmanagerTransitGatewayRouteTableAttachment":
                return new NetworkmanagerTransitGatewayRouteTableAttachment(name, <any>undefined, { urn })
            case "awscc:index/networkmanagerVpcAttachment:NetworkmanagerVpcAttachment":
                return new NetworkmanagerVpcAttachment(name, <any>undefined, { urn })
            case "awscc:index/nimblestudioLaunchProfile:NimblestudioLaunchProfile":
                return new NimblestudioLaunchProfile(name, <any>undefined, { urn })
            case "awscc:index/nimblestudioStreamingImage:NimblestudioStreamingImage":
                return new NimblestudioStreamingImage(name, <any>undefined, { urn })
            case "awscc:index/nimblestudioStudio:NimblestudioStudio":
                return new NimblestudioStudio(name, <any>undefined, { urn })
            case "awscc:index/nimblestudioStudioComponent:NimblestudioStudioComponent":
                return new NimblestudioStudioComponent(name, <any>undefined, { urn })
            case "awscc:index/oamLink:OamLink":
                return new OamLink(name, <any>undefined, { urn })
            case "awscc:index/oamSink:OamSink":
                return new OamSink(name, <any>undefined, { urn })
            case "awscc:index/omicsReferenceStore:OmicsReferenceStore":
                return new OmicsReferenceStore(name, <any>undefined, { urn })
            case "awscc:index/omicsRunGroup:OmicsRunGroup":
                return new OmicsRunGroup(name, <any>undefined, { urn })
            case "awscc:index/omicsSequenceStore:OmicsSequenceStore":
                return new OmicsSequenceStore(name, <any>undefined, { urn })
            case "awscc:index/omicsVariantStore:OmicsVariantStore":
                return new OmicsVariantStore(name, <any>undefined, { urn })
            case "awscc:index/omicsWorkflow:OmicsWorkflow":
                return new OmicsWorkflow(name, <any>undefined, { urn })
            case "awscc:index/opensearchserverlessAccessPolicy:OpensearchserverlessAccessPolicy":
                return new OpensearchserverlessAccessPolicy(name, <any>undefined, { urn })
            case "awscc:index/opensearchserverlessCollection:OpensearchserverlessCollection":
                return new OpensearchserverlessCollection(name, <any>undefined, { urn })
            case "awscc:index/opensearchserverlessLifecyclePolicy:OpensearchserverlessLifecyclePolicy":
                return new OpensearchserverlessLifecyclePolicy(name, <any>undefined, { urn })
            case "awscc:index/opensearchserverlessSecurityConfig:OpensearchserverlessSecurityConfig":
                return new OpensearchserverlessSecurityConfig(name, <any>undefined, { urn })
            case "awscc:index/opensearchserverlessSecurityPolicy:OpensearchserverlessSecurityPolicy":
                return new OpensearchserverlessSecurityPolicy(name, <any>undefined, { urn })
            case "awscc:index/opensearchserverlessVpcEndpoint:OpensearchserverlessVpcEndpoint":
                return new OpensearchserverlessVpcEndpoint(name, <any>undefined, { urn })
            case "awscc:index/opensearchserviceDomain:OpensearchserviceDomain":
                return new OpensearchserviceDomain(name, <any>undefined, { urn })
            case "awscc:index/opsworkscmServer:OpsworkscmServer":
                return new OpsworkscmServer(name, <any>undefined, { urn })
            case "awscc:index/organizationsAccount:OrganizationsAccount":
                return new OrganizationsAccount(name, <any>undefined, { urn })
            case "awscc:index/organizationsOrganization:OrganizationsOrganization":
                return new OrganizationsOrganization(name, <any>undefined, { urn })
            case "awscc:index/organizationsOrganizationalUnit:OrganizationsOrganizationalUnit":
                return new OrganizationsOrganizationalUnit(name, <any>undefined, { urn })
            case "awscc:index/organizationsPolicy:OrganizationsPolicy":
                return new OrganizationsPolicy(name, <any>undefined, { urn })
            case "awscc:index/organizationsResourcePolicy:OrganizationsResourcePolicy":
                return new OrganizationsResourcePolicy(name, <any>undefined, { urn })
            case "awscc:index/osisPipeline:OsisPipeline":
                return new OsisPipeline(name, <any>undefined, { urn })
            case "awscc:index/panoramaApplicationInstance:PanoramaApplicationInstance":
                return new PanoramaApplicationInstance(name, <any>undefined, { urn })
            case "awscc:index/panoramaPackage:PanoramaPackage":
                return new PanoramaPackage(name, <any>undefined, { urn })
            case "awscc:index/panoramaPackageVersion:PanoramaPackageVersion":
                return new PanoramaPackageVersion(name, <any>undefined, { urn })
            case "awscc:index/paymentcryptographyAlias:PaymentcryptographyAlias":
                return new PaymentcryptographyAlias(name, <any>undefined, { urn })
            case "awscc:index/paymentcryptographyKey:PaymentcryptographyKey":
                return new PaymentcryptographyKey(name, <any>undefined, { urn })
            case "awscc:index/pcaconnectoradConnector:PcaconnectoradConnector":
                return new PcaconnectoradConnector(name, <any>undefined, { urn })
            case "awscc:index/pcaconnectoradDirectoryRegistration:PcaconnectoradDirectoryRegistration":
                return new PcaconnectoradDirectoryRegistration(name, <any>undefined, { urn })
            case "awscc:index/pcaconnectoradServicePrincipalName:PcaconnectoradServicePrincipalName":
                return new PcaconnectoradServicePrincipalName(name, <any>undefined, { urn })
            case "awscc:index/pcaconnectoradTemplate:PcaconnectoradTemplate":
                return new PcaconnectoradTemplate(name, <any>undefined, { urn })
            case "awscc:index/pcaconnectoradTemplateGroupAccessControlEntry:PcaconnectoradTemplateGroupAccessControlEntry":
                return new PcaconnectoradTemplateGroupAccessControlEntry(name, <any>undefined, { urn })
            case "awscc:index/personalizeDataset:PersonalizeDataset":
                return new PersonalizeDataset(name, <any>undefined, { urn })
            case "awscc:index/personalizeDatasetGroup:PersonalizeDatasetGroup":
                return new PersonalizeDatasetGroup(name, <any>undefined, { urn })
            case "awscc:index/personalizeSchema:PersonalizeSchema":
                return new PersonalizeSchema(name, <any>undefined, { urn })
            case "awscc:index/personalizeSolution:PersonalizeSolution":
                return new PersonalizeSolution(name, <any>undefined, { urn })
            case "awscc:index/pinpointInAppTemplate:PinpointInAppTemplate":
                return new PinpointInAppTemplate(name, <any>undefined, { urn })
            case "awscc:index/pipesPipe:PipesPipe":
                return new PipesPipe(name, <any>undefined, { urn })
            case "awscc:index/protonEnvironmentAccountConnection:ProtonEnvironmentAccountConnection":
                return new ProtonEnvironmentAccountConnection(name, <any>undefined, { urn })
            case "awscc:index/protonEnvironmentTemplate:ProtonEnvironmentTemplate":
                return new ProtonEnvironmentTemplate(name, <any>undefined, { urn })
            case "awscc:index/protonServiceTemplate:ProtonServiceTemplate":
                return new ProtonServiceTemplate(name, <any>undefined, { urn })
            case "awscc:index/qbusinessApplication:QbusinessApplication":
                return new QbusinessApplication(name, <any>undefined, { urn })
            case "awscc:index/qbusinessDataSource:QbusinessDataSource":
                return new QbusinessDataSource(name, <any>undefined, { urn })
            case "awscc:index/qbusinessIndex:QbusinessIndex":
                return new QbusinessIndex(name, <any>undefined, { urn })
            case "awscc:index/qbusinessPlugin:QbusinessPlugin":
                return new QbusinessPlugin(name, <any>undefined, { urn })
            case "awscc:index/qbusinessRetriever:QbusinessRetriever":
                return new QbusinessRetriever(name, <any>undefined, { urn })
            case "awscc:index/qbusinessWebExperience:QbusinessWebExperience":
                return new QbusinessWebExperience(name, <any>undefined, { urn })
            case "awscc:index/qldbStream:QldbStream":
                return new QldbStream(name, <any>undefined, { urn })
            case "awscc:index/quicksightAnalysis:QuicksightAnalysis":
                return new QuicksightAnalysis(name, <any>undefined, { urn })
            case "awscc:index/quicksightDashboard:QuicksightDashboard":
                return new QuicksightDashboard(name, <any>undefined, { urn })
            case "awscc:index/quicksightDataSet:QuicksightDataSet":
                return new QuicksightDataSet(name, <any>undefined, { urn })
            case "awscc:index/quicksightDataSource:QuicksightDataSource":
                return new QuicksightDataSource(name, <any>undefined, { urn })
            case "awscc:index/quicksightRefreshSchedule:QuicksightRefreshSchedule":
                return new QuicksightRefreshSchedule(name, <any>undefined, { urn })
            case "awscc:index/quicksightTemplate:QuicksightTemplate":
                return new QuicksightTemplate(name, <any>undefined, { urn })
            case "awscc:index/quicksightTheme:QuicksightTheme":
                return new QuicksightTheme(name, <any>undefined, { urn })
            case "awscc:index/quicksightTopic:QuicksightTopic":
                return new QuicksightTopic(name, <any>undefined, { urn })
            case "awscc:index/quicksightVpcConnection:QuicksightVpcConnection":
                return new QuicksightVpcConnection(name, <any>undefined, { urn })
            case "awscc:index/ramPermission:RamPermission":
                return new RamPermission(name, <any>undefined, { urn })
            case "awscc:index/rdsCustomDbEngineVersion:RdsCustomDbEngineVersion":
                return new RdsCustomDbEngineVersion(name, <any>undefined, { urn })
            case "awscc:index/rdsDbCluster:RdsDbCluster":
                return new RdsDbCluster(name, <any>undefined, { urn })
            case "awscc:index/rdsDbClusterParameterGroup:RdsDbClusterParameterGroup":
                return new RdsDbClusterParameterGroup(name, <any>undefined, { urn })
            case "awscc:index/rdsDbInstance:RdsDbInstance":
                return new RdsDbInstance(name, <any>undefined, { urn })
            case "awscc:index/rdsDbParameterGroup:RdsDbParameterGroup":
                return new RdsDbParameterGroup(name, <any>undefined, { urn })
            case "awscc:index/rdsDbProxy:RdsDbProxy":
                return new RdsDbProxy(name, <any>undefined, { urn })
            case "awscc:index/rdsDbProxyEndpoint:RdsDbProxyEndpoint":
                return new RdsDbProxyEndpoint(name, <any>undefined, { urn })
            case "awscc:index/rdsDbProxyTargetGroup:RdsDbProxyTargetGroup":
                return new RdsDbProxyTargetGroup(name, <any>undefined, { urn })
            case "awscc:index/rdsDbSubnetGroup:RdsDbSubnetGroup":
                return new RdsDbSubnetGroup(name, <any>undefined, { urn })
            case "awscc:index/rdsEventSubscription:RdsEventSubscription":
                return new RdsEventSubscription(name, <any>undefined, { urn })
            case "awscc:index/rdsGlobalCluster:RdsGlobalCluster":
                return new RdsGlobalCluster(name, <any>undefined, { urn })
            case "awscc:index/rdsIntegration:RdsIntegration":
                return new RdsIntegration(name, <any>undefined, { urn })
            case "awscc:index/rdsOptionGroup:RdsOptionGroup":
                return new RdsOptionGroup(name, <any>undefined, { urn })
            case "awscc:index/redshiftCluster:RedshiftCluster":
                return new RedshiftCluster(name, <any>undefined, { urn })
            case "awscc:index/redshiftClusterParameterGroup:RedshiftClusterParameterGroup":
                return new RedshiftClusterParameterGroup(name, <any>undefined, { urn })
            case "awscc:index/redshiftClusterSubnetGroup:RedshiftClusterSubnetGroup":
                return new RedshiftClusterSubnetGroup(name, <any>undefined, { urn })
            case "awscc:index/redshiftEndpointAccess:RedshiftEndpointAccess":
                return new RedshiftEndpointAccess(name, <any>undefined, { urn })
            case "awscc:index/redshiftEndpointAuthorization:RedshiftEndpointAuthorization":
                return new RedshiftEndpointAuthorization(name, <any>undefined, { urn })
            case "awscc:index/redshiftEventSubscription:RedshiftEventSubscription":
                return new RedshiftEventSubscription(name, <any>undefined, { urn })
            case "awscc:index/redshiftScheduledAction:RedshiftScheduledAction":
                return new RedshiftScheduledAction(name, <any>undefined, { urn })
            case "awscc:index/redshiftserverlessNamespace:RedshiftserverlessNamespace":
                return new RedshiftserverlessNamespace(name, <any>undefined, { urn })
            case "awscc:index/redshiftserverlessWorkgroup:RedshiftserverlessWorkgroup":
                return new RedshiftserverlessWorkgroup(name, <any>undefined, { urn })
            case "awscc:index/refactorspacesApplication:RefactorspacesApplication":
                return new RefactorspacesApplication(name, <any>undefined, { urn })
            case "awscc:index/refactorspacesEnvironment:RefactorspacesEnvironment":
                return new RefactorspacesEnvironment(name, <any>undefined, { urn })
            case "awscc:index/refactorspacesRoute:RefactorspacesRoute":
                return new RefactorspacesRoute(name, <any>undefined, { urn })
            case "awscc:index/refactorspacesService:RefactorspacesService":
                return new RefactorspacesService(name, <any>undefined, { urn })
            case "awscc:index/rekognitionCollection:RekognitionCollection":
                return new RekognitionCollection(name, <any>undefined, { urn })
            case "awscc:index/rekognitionProject:RekognitionProject":
                return new RekognitionProject(name, <any>undefined, { urn })
            case "awscc:index/resiliencehubApp:ResiliencehubApp":
                return new ResiliencehubApp(name, <any>undefined, { urn })
            case "awscc:index/resiliencehubResiliencyPolicy:ResiliencehubResiliencyPolicy":
                return new ResiliencehubResiliencyPolicy(name, <any>undefined, { urn })
            case "awscc:index/resourceexplorer2DefaultViewAssociation:Resourceexplorer2DefaultViewAssociation":
                return new Resourceexplorer2DefaultViewAssociation(name, <any>undefined, { urn })
            case "awscc:index/resourceexplorer2Index:Resourceexplorer2Index":
                return new Resourceexplorer2Index(name, <any>undefined, { urn })
            case "awscc:index/resourceexplorer2View:Resourceexplorer2View":
                return new Resourceexplorer2View(name, <any>undefined, { urn })
            case "awscc:index/resourcegroupsGroup:ResourcegroupsGroup":
                return new ResourcegroupsGroup(name, <any>undefined, { urn })
            case "awscc:index/robomakerFleet:RobomakerFleet":
                return new RobomakerFleet(name, <any>undefined, { urn })
            case "awscc:index/robomakerRobot:RobomakerRobot":
                return new RobomakerRobot(name, <any>undefined, { urn })
            case "awscc:index/robomakerRobotApplication:RobomakerRobotApplication":
                return new RobomakerRobotApplication(name, <any>undefined, { urn })
            case "awscc:index/robomakerRobotApplicationVersion:RobomakerRobotApplicationVersion":
                return new RobomakerRobotApplicationVersion(name, <any>undefined, { urn })
            case "awscc:index/robomakerSimulationApplication:RobomakerSimulationApplication":
                return new RobomakerSimulationApplication(name, <any>undefined, { urn })
            case "awscc:index/robomakerSimulationApplicationVersion:RobomakerSimulationApplicationVersion":
                return new RobomakerSimulationApplicationVersion(name, <any>undefined, { urn })
            case "awscc:index/rolesanywhereCrl:RolesanywhereCrl":
                return new RolesanywhereCrl(name, <any>undefined, { urn })
            case "awscc:index/rolesanywhereProfile:RolesanywhereProfile":
                return new RolesanywhereProfile(name, <any>undefined, { urn })
            case "awscc:index/rolesanywhereTrustAnchor:RolesanywhereTrustAnchor":
                return new RolesanywhereTrustAnchor(name, <any>undefined, { urn })
            case "awscc:index/route53CidrCollection:Route53CidrCollection":
                return new Route53CidrCollection(name, <any>undefined, { urn })
            case "awscc:index/route53Dnssec:Route53Dnssec":
                return new Route53Dnssec(name, <any>undefined, { urn })
            case "awscc:index/route53HealthCheck:Route53HealthCheck":
                return new Route53HealthCheck(name, <any>undefined, { urn })
            case "awscc:index/route53HostedZone:Route53HostedZone":
                return new Route53HostedZone(name, <any>undefined, { urn })
            case "awscc:index/route53KeySigningKey:Route53KeySigningKey":
                return new Route53KeySigningKey(name, <any>undefined, { urn })
            case "awscc:index/route53profilesProfile:Route53profilesProfile":
                return new Route53profilesProfile(name, <any>undefined, { urn })
            case "awscc:index/route53profilesProfileAssociation:Route53profilesProfileAssociation":
                return new Route53profilesProfileAssociation(name, <any>undefined, { urn })
            case "awscc:index/route53profilesProfileResourceAssociation:Route53profilesProfileResourceAssociation":
                return new Route53profilesProfileResourceAssociation(name, <any>undefined, { urn })
            case "awscc:index/route53recoverycontrolCluster:Route53recoverycontrolCluster":
                return new Route53recoverycontrolCluster(name, <any>undefined, { urn })
            case "awscc:index/route53recoverycontrolControlPanel:Route53recoverycontrolControlPanel":
                return new Route53recoverycontrolControlPanel(name, <any>undefined, { urn })
            case "awscc:index/route53recoverycontrolRoutingControl:Route53recoverycontrolRoutingControl":
                return new Route53recoverycontrolRoutingControl(name, <any>undefined, { urn })
            case "awscc:index/route53recoverycontrolSafetyRule:Route53recoverycontrolSafetyRule":
                return new Route53recoverycontrolSafetyRule(name, <any>undefined, { urn })
            case "awscc:index/route53recoveryreadinessCell:Route53recoveryreadinessCell":
                return new Route53recoveryreadinessCell(name, <any>undefined, { urn })
            case "awscc:index/route53recoveryreadinessReadinessCheck:Route53recoveryreadinessReadinessCheck":
                return new Route53recoveryreadinessReadinessCheck(name, <any>undefined, { urn })
            case "awscc:index/route53recoveryreadinessRecoveryGroup:Route53recoveryreadinessRecoveryGroup":
                return new Route53recoveryreadinessRecoveryGroup(name, <any>undefined, { urn })
            case "awscc:index/route53recoveryreadinessResourceSet:Route53recoveryreadinessResourceSet":
                return new Route53recoveryreadinessResourceSet(name, <any>undefined, { urn })
            case "awscc:index/route53resolverFirewallDomainList:Route53resolverFirewallDomainList":
                return new Route53resolverFirewallDomainList(name, <any>undefined, { urn })
            case "awscc:index/route53resolverFirewallRuleGroup:Route53resolverFirewallRuleGroup":
                return new Route53resolverFirewallRuleGroup(name, <any>undefined, { urn })
            case "awscc:index/route53resolverFirewallRuleGroupAssociation:Route53resolverFirewallRuleGroupAssociation":
                return new Route53resolverFirewallRuleGroupAssociation(name, <any>undefined, { urn })
            case "awscc:index/route53resolverOutpostResolver:Route53resolverOutpostResolver":
                return new Route53resolverOutpostResolver(name, <any>undefined, { urn })
            case "awscc:index/route53resolverResolverConfig:Route53resolverResolverConfig":
                return new Route53resolverResolverConfig(name, <any>undefined, { urn })
            case "awscc:index/route53resolverResolverDnssecConfig:Route53resolverResolverDnssecConfig":
                return new Route53resolverResolverDnssecConfig(name, <any>undefined, { urn })
            case "awscc:index/route53resolverResolverQueryLoggingConfig:Route53resolverResolverQueryLoggingConfig":
                return new Route53resolverResolverQueryLoggingConfig(name, <any>undefined, { urn })
            case "awscc:index/route53resolverResolverQueryLoggingConfigAssociation:Route53resolverResolverQueryLoggingConfigAssociation":
                return new Route53resolverResolverQueryLoggingConfigAssociation(name, <any>undefined, { urn })
            case "awscc:index/route53resolverResolverRule:Route53resolverResolverRule":
                return new Route53resolverResolverRule(name, <any>undefined, { urn })
            case "awscc:index/route53resolverResolverRuleAssociation:Route53resolverResolverRuleAssociation":
                return new Route53resolverResolverRuleAssociation(name, <any>undefined, { urn })
            case "awscc:index/rumAppMonitor:RumAppMonitor":
                return new RumAppMonitor(name, <any>undefined, { urn })
            case "awscc:index/s3AccessGrant:S3AccessGrant":
                return new S3AccessGrant(name, <any>undefined, { urn })
            case "awscc:index/s3AccessGrantsInstance:S3AccessGrantsInstance":
                return new S3AccessGrantsInstance(name, <any>undefined, { urn })
            case "awscc:index/s3AccessGrantsLocation:S3AccessGrantsLocation":
                return new S3AccessGrantsLocation(name, <any>undefined, { urn })
            case "awscc:index/s3AccessPoint:S3AccessPoint":
                return new S3AccessPoint(name, <any>undefined, { urn })
            case "awscc:index/s3Bucket:S3Bucket":
                return new S3Bucket(name, <any>undefined, { urn })
            case "awscc:index/s3BucketPolicy:S3BucketPolicy":
                return new S3BucketPolicy(name, <any>undefined, { urn })
            case "awscc:index/s3MultiRegionAccessPoint:S3MultiRegionAccessPoint":
                return new S3MultiRegionAccessPoint(name, <any>undefined, { urn })
            case "awscc:index/s3MultiRegionAccessPointPolicy:S3MultiRegionAccessPointPolicy":
                return new S3MultiRegionAccessPointPolicy(name, <any>undefined, { urn })
            case "awscc:index/s3StorageLens:S3StorageLens":
                return new S3StorageLens(name, <any>undefined, { urn })
            case "awscc:index/s3StorageLensGroup:S3StorageLensGroup":
                return new S3StorageLensGroup(name, <any>undefined, { urn })
            case "awscc:index/s3expressBucketPolicy:S3expressBucketPolicy":
                return new S3expressBucketPolicy(name, <any>undefined, { urn })
            case "awscc:index/s3expressDirectoryBucket:S3expressDirectoryBucket":
                return new S3expressDirectoryBucket(name, <any>undefined, { urn })
            case "awscc:index/s3objectlambdaAccessPoint:S3objectlambdaAccessPoint":
                return new S3objectlambdaAccessPoint(name, <any>undefined, { urn })
            case "awscc:index/s3objectlambdaAccessPointPolicy:S3objectlambdaAccessPointPolicy":
                return new S3objectlambdaAccessPointPolicy(name, <any>undefined, { urn })
            case "awscc:index/s3outpostsAccessPoint:S3outpostsAccessPoint":
                return new S3outpostsAccessPoint(name, <any>undefined, { urn })
            case "awscc:index/s3outpostsBucket:S3outpostsBucket":
                return new S3outpostsBucket(name, <any>undefined, { urn })
            case "awscc:index/s3outpostsBucketPolicy:S3outpostsBucketPolicy":
                return new S3outpostsBucketPolicy(name, <any>undefined, { urn })
            case "awscc:index/s3outpostsEndpoint:S3outpostsEndpoint":
                return new S3outpostsEndpoint(name, <any>undefined, { urn })
            case "awscc:index/sagemakerApp:SagemakerApp":
                return new SagemakerApp(name, <any>undefined, { urn })
            case "awscc:index/sagemakerAppImageConfig:SagemakerAppImageConfig":
                return new SagemakerAppImageConfig(name, <any>undefined, { urn })
            case "awscc:index/sagemakerDataQualityJobDefinition:SagemakerDataQualityJobDefinition":
                return new SagemakerDataQualityJobDefinition(name, <any>undefined, { urn })
            case "awscc:index/sagemakerDevice:SagemakerDevice":
                return new SagemakerDevice(name, <any>undefined, { urn })
            case "awscc:index/sagemakerDeviceFleet:SagemakerDeviceFleet":
                return new SagemakerDeviceFleet(name, <any>undefined, { urn })
            case "awscc:index/sagemakerDomain:SagemakerDomain":
                return new SagemakerDomain(name, <any>undefined, { urn })
            case "awscc:index/sagemakerFeatureGroup:SagemakerFeatureGroup":
                return new SagemakerFeatureGroup(name, <any>undefined, { urn })
            case "awscc:index/sagemakerImage:SagemakerImage":
                return new SagemakerImage(name, <any>undefined, { urn })
            case "awscc:index/sagemakerImageVersion:SagemakerImageVersion":
                return new SagemakerImageVersion(name, <any>undefined, { urn })
            case "awscc:index/sagemakerInferenceComponent:SagemakerInferenceComponent":
                return new SagemakerInferenceComponent(name, <any>undefined, { urn })
            case "awscc:index/sagemakerInferenceExperiment:SagemakerInferenceExperiment":
                return new SagemakerInferenceExperiment(name, <any>undefined, { urn })
            case "awscc:index/sagemakerMlflowTrackingServer:SagemakerMlflowTrackingServer":
                return new SagemakerMlflowTrackingServer(name, <any>undefined, { urn })
            case "awscc:index/sagemakerModelBiasJobDefinition:SagemakerModelBiasJobDefinition":
                return new SagemakerModelBiasJobDefinition(name, <any>undefined, { urn })
            case "awscc:index/sagemakerModelExplainabilityJobDefinition:SagemakerModelExplainabilityJobDefinition":
                return new SagemakerModelExplainabilityJobDefinition(name, <any>undefined, { urn })
            case "awscc:index/sagemakerModelPackage:SagemakerModelPackage":
                return new SagemakerModelPackage(name, <any>undefined, { urn })
            case "awscc:index/sagemakerModelPackageGroup:SagemakerModelPackageGroup":
                return new SagemakerModelPackageGroup(name, <any>undefined, { urn })
            case "awscc:index/sagemakerModelQualityJobDefinition:SagemakerModelQualityJobDefinition":
                return new SagemakerModelQualityJobDefinition(name, <any>undefined, { urn })
            case "awscc:index/sagemakerMonitoringSchedule:SagemakerMonitoringSchedule":
                return new SagemakerMonitoringSchedule(name, <any>undefined, { urn })
            case "awscc:index/sagemakerPipeline:SagemakerPipeline":
                return new SagemakerPipeline(name, <any>undefined, { urn })
            case "awscc:index/sagemakerProject:SagemakerProject":
                return new SagemakerProject(name, <any>undefined, { urn })
            case "awscc:index/sagemakerSpace:SagemakerSpace":
                return new SagemakerSpace(name, <any>undefined, { urn })
            case "awscc:index/sagemakerStudioLifecycleConfig:SagemakerStudioLifecycleConfig":
                return new SagemakerStudioLifecycleConfig(name, <any>undefined, { urn })
            case "awscc:index/sagemakerUserProfile:SagemakerUserProfile":
                return new SagemakerUserProfile(name, <any>undefined, { urn })
            case "awscc:index/schedulerScheduleGroup:SchedulerScheduleGroup":
                return new SchedulerScheduleGroup(name, <any>undefined, { urn })
            case "awscc:index/secretsmanagerResourcePolicy:SecretsmanagerResourcePolicy":
                return new SecretsmanagerResourcePolicy(name, <any>undefined, { urn })
            case "awscc:index/secretsmanagerSecret:SecretsmanagerSecret":
                return new SecretsmanagerSecret(name, <any>undefined, { urn })
            case "awscc:index/securityhubConfigurationPolicy:SecurityhubConfigurationPolicy":
                return new SecurityhubConfigurationPolicy(name, <any>undefined, { urn })
            case "awscc:index/securityhubDelegatedAdmin:SecurityhubDelegatedAdmin":
                return new SecurityhubDelegatedAdmin(name, <any>undefined, { urn })
            case "awscc:index/securityhubFindingAggregator:SecurityhubFindingAggregator":
                return new SecurityhubFindingAggregator(name, <any>undefined, { urn })
            case "awscc:index/securityhubHub:SecurityhubHub":
                return new SecurityhubHub(name, <any>undefined, { urn })
            case "awscc:index/securityhubInsight:SecurityhubInsight":
                return new SecurityhubInsight(name, <any>undefined, { urn })
            case "awscc:index/securityhubOrganizationConfiguration:SecurityhubOrganizationConfiguration":
                return new SecurityhubOrganizationConfiguration(name, <any>undefined, { urn })
            case "awscc:index/securityhubPolicyAssociation:SecurityhubPolicyAssociation":
                return new SecurityhubPolicyAssociation(name, <any>undefined, { urn })
            case "awscc:index/securityhubProductSubscription:SecurityhubProductSubscription":
                return new SecurityhubProductSubscription(name, <any>undefined, { urn })
            case "awscc:index/securityhubSecurityControl:SecurityhubSecurityControl":
                return new SecurityhubSecurityControl(name, <any>undefined, { urn })
            case "awscc:index/securityhubStandard:SecurityhubStandard":
                return new SecurityhubStandard(name, <any>undefined, { urn })
            case "awscc:index/securitylakeAwsLogSource:SecuritylakeAwsLogSource":
                return new SecuritylakeAwsLogSource(name, <any>undefined, { urn })
            case "awscc:index/securitylakeDataLake:SecuritylakeDataLake":
                return new SecuritylakeDataLake(name, <any>undefined, { urn })
            case "awscc:index/securitylakeSubscriberNotification:SecuritylakeSubscriberNotification":
                return new SecuritylakeSubscriberNotification(name, <any>undefined, { urn })
            case "awscc:index/servicecatalogCloudformationProvisionedProduct:ServicecatalogCloudformationProvisionedProduct":
                return new ServicecatalogCloudformationProvisionedProduct(name, <any>undefined, { urn })
            case "awscc:index/servicecatalogServiceAction:ServicecatalogServiceAction":
                return new ServicecatalogServiceAction(name, <any>undefined, { urn })
            case "awscc:index/servicecatalogServiceActionAssociation:ServicecatalogServiceActionAssociation":
                return new ServicecatalogServiceActionAssociation(name, <any>undefined, { urn })
            case "awscc:index/servicecatalogappregistryApplication:ServicecatalogappregistryApplication":
                return new ServicecatalogappregistryApplication(name, <any>undefined, { urn })
            case "awscc:index/servicecatalogappregistryAttributeGroup:ServicecatalogappregistryAttributeGroup":
                return new ServicecatalogappregistryAttributeGroup(name, <any>undefined, { urn })
            case "awscc:index/servicecatalogappregistryAttributeGroupAssociation:ServicecatalogappregistryAttributeGroupAssociation":
                return new ServicecatalogappregistryAttributeGroupAssociation(name, <any>undefined, { urn })
            case "awscc:index/servicecatalogappregistryResourceAssociation:ServicecatalogappregistryResourceAssociation":
                return new ServicecatalogappregistryResourceAssociation(name, <any>undefined, { urn })
            case "awscc:index/sesConfigurationSet:SesConfigurationSet":
                return new SesConfigurationSet(name, <any>undefined, { urn })
            case "awscc:index/sesConfigurationSetEventDestination:SesConfigurationSetEventDestination":
                return new SesConfigurationSetEventDestination(name, <any>undefined, { urn })
            case "awscc:index/sesContactList:SesContactList":
                return new SesContactList(name, <any>undefined, { urn })
            case "awscc:index/sesDedicatedIpPool:SesDedicatedIpPool":
                return new SesDedicatedIpPool(name, <any>undefined, { urn })
            case "awscc:index/sesEmailIdentity:SesEmailIdentity":
                return new SesEmailIdentity(name, <any>undefined, { urn })
            case "awscc:index/sesMailManagerAddonInstance:SesMailManagerAddonInstance":
                return new SesMailManagerAddonInstance(name, <any>undefined, { urn })
            case "awscc:index/sesMailManagerAddonSubscription:SesMailManagerAddonSubscription":
                return new SesMailManagerAddonSubscription(name, <any>undefined, { urn })
            case "awscc:index/sesMailManagerArchive:SesMailManagerArchive":
                return new SesMailManagerArchive(name, <any>undefined, { urn })
            case "awscc:index/sesMailManagerIngressPoint:SesMailManagerIngressPoint":
                return new SesMailManagerIngressPoint(name, <any>undefined, { urn })
            case "awscc:index/sesMailManagerRelay:SesMailManagerRelay":
                return new SesMailManagerRelay(name, <any>undefined, { urn })
            case "awscc:index/sesMailManagerRuleSet:SesMailManagerRuleSet":
                return new SesMailManagerRuleSet(name, <any>undefined, { urn })
            case "awscc:index/sesMailManagerTrafficPolicy:SesMailManagerTrafficPolicy":
                return new SesMailManagerTrafficPolicy(name, <any>undefined, { urn })
            case "awscc:index/sesTemplate:SesTemplate":
                return new SesTemplate(name, <any>undefined, { urn })
            case "awscc:index/sesVdmAttributes:SesVdmAttributes":
                return new SesVdmAttributes(name, <any>undefined, { urn })
            case "awscc:index/shieldDrtAccess:ShieldDrtAccess":
                return new ShieldDrtAccess(name, <any>undefined, { urn })
            case "awscc:index/shieldProactiveEngagement:ShieldProactiveEngagement":
                return new ShieldProactiveEngagement(name, <any>undefined, { urn })
            case "awscc:index/shieldProtection:ShieldProtection":
                return new ShieldProtection(name, <any>undefined, { urn })
            case "awscc:index/shieldProtectionGroup:ShieldProtectionGroup":
                return new ShieldProtectionGroup(name, <any>undefined, { urn })
            case "awscc:index/signerProfilePermission:SignerProfilePermission":
                return new SignerProfilePermission(name, <any>undefined, { urn })
            case "awscc:index/signerSigningProfile:SignerSigningProfile":
                return new SignerSigningProfile(name, <any>undefined, { urn })
            case "awscc:index/simspaceweaverSimulation:SimspaceweaverSimulation":
                return new SimspaceweaverSimulation(name, <any>undefined, { urn })
            case "awscc:index/snsTopic:SnsTopic":
                return new SnsTopic(name, <any>undefined, { urn })
            case "awscc:index/snsTopicInlinePolicy:SnsTopicInlinePolicy":
                return new SnsTopicInlinePolicy(name, <any>undefined, { urn })
            case "awscc:index/sqsQueue:SqsQueue":
                return new SqsQueue(name, <any>undefined, { urn })
            case "awscc:index/sqsQueueInlinePolicy:SqsQueueInlinePolicy":
                return new SqsQueueInlinePolicy(name, <any>undefined, { urn })
            case "awscc:index/ssmAssociation:SsmAssociation":
                return new SsmAssociation(name, <any>undefined, { urn })
            case "awscc:index/ssmDocument:SsmDocument":
                return new SsmDocument(name, <any>undefined, { urn })
            case "awscc:index/ssmParameter:SsmParameter":
                return new SsmParameter(name, <any>undefined, { urn })
            case "awscc:index/ssmPatchBaseline:SsmPatchBaseline":
                return new SsmPatchBaseline(name, <any>undefined, { urn })
            case "awscc:index/ssmResourceDataSync:SsmResourceDataSync":
                return new SsmResourceDataSync(name, <any>undefined, { urn })
            case "awscc:index/ssmResourcePolicy:SsmResourcePolicy":
                return new SsmResourcePolicy(name, <any>undefined, { urn })
            case "awscc:index/ssmcontactsContact:SsmcontactsContact":
                return new SsmcontactsContact(name, <any>undefined, { urn })
            case "awscc:index/ssmcontactsContactChannel:SsmcontactsContactChannel":
                return new SsmcontactsContactChannel(name, <any>undefined, { urn })
            case "awscc:index/ssmcontactsPlan:SsmcontactsPlan":
                return new SsmcontactsPlan(name, <any>undefined, { urn })
            case "awscc:index/ssmcontactsRotation:SsmcontactsRotation":
                return new SsmcontactsRotation(name, <any>undefined, { urn })
            case "awscc:index/ssmincidentsReplicationSet:SsmincidentsReplicationSet":
                return new SsmincidentsReplicationSet(name, <any>undefined, { urn })
            case "awscc:index/ssmincidentsResponsePlan:SsmincidentsResponsePlan":
                return new SsmincidentsResponsePlan(name, <any>undefined, { urn })
            case "awscc:index/ssmquicksetupConfigurationManager:SsmquicksetupConfigurationManager":
                return new SsmquicksetupConfigurationManager(name, <any>undefined, { urn })
            case "awscc:index/ssoApplication:SsoApplication":
                return new SsoApplication(name, <any>undefined, { urn })
            case "awscc:index/ssoApplicationAssignment:SsoApplicationAssignment":
                return new SsoApplicationAssignment(name, <any>undefined, { urn })
            case "awscc:index/ssoAssignment:SsoAssignment":
                return new SsoAssignment(name, <any>undefined, { urn })
            case "awscc:index/ssoInstance:SsoInstance":
                return new SsoInstance(name, <any>undefined, { urn })
            case "awscc:index/ssoInstanceAccessControlAttributeConfiguration:SsoInstanceAccessControlAttributeConfiguration":
                return new SsoInstanceAccessControlAttributeConfiguration(name, <any>undefined, { urn })
            case "awscc:index/ssoPermissionSet:SsoPermissionSet":
                return new SsoPermissionSet(name, <any>undefined, { urn })
            case "awscc:index/stepfunctionsActivity:StepfunctionsActivity":
                return new StepfunctionsActivity(name, <any>undefined, { urn })
            case "awscc:index/stepfunctionsStateMachine:StepfunctionsStateMachine":
                return new StepfunctionsStateMachine(name, <any>undefined, { urn })
            case "awscc:index/stepfunctionsStateMachineAlias:StepfunctionsStateMachineAlias":
                return new StepfunctionsStateMachineAlias(name, <any>undefined, { urn })
            case "awscc:index/stepfunctionsStateMachineVersion:StepfunctionsStateMachineVersion":
                return new StepfunctionsStateMachineVersion(name, <any>undefined, { urn })
            case "awscc:index/supportappAccountAlias:SupportappAccountAlias":
                return new SupportappAccountAlias(name, <any>undefined, { urn })
            case "awscc:index/supportappSlackChannelConfiguration:SupportappSlackChannelConfiguration":
                return new SupportappSlackChannelConfiguration(name, <any>undefined, { urn })
            case "awscc:index/supportappSlackWorkspaceConfiguration:SupportappSlackWorkspaceConfiguration":
                return new SupportappSlackWorkspaceConfiguration(name, <any>undefined, { urn })
            case "awscc:index/syntheticsCanary:SyntheticsCanary":
                return new SyntheticsCanary(name, <any>undefined, { urn })
            case "awscc:index/syntheticsGroup:SyntheticsGroup":
                return new SyntheticsGroup(name, <any>undefined, { urn })
            case "awscc:index/systemsmanagersapApplication:SystemsmanagersapApplication":
                return new SystemsmanagersapApplication(name, <any>undefined, { urn })
            case "awscc:index/timestreamDatabase:TimestreamDatabase":
                return new TimestreamDatabase(name, <any>undefined, { urn })
            case "awscc:index/timestreamInfluxDbInstance:TimestreamInfluxDbInstance":
                return new TimestreamInfluxDbInstance(name, <any>undefined, { urn })
            case "awscc:index/timestreamScheduledQuery:TimestreamScheduledQuery":
                return new TimestreamScheduledQuery(name, <any>undefined, { urn })
            case "awscc:index/timestreamTable:TimestreamTable":
                return new TimestreamTable(name, <any>undefined, { urn })
            case "awscc:index/transferAgreement:TransferAgreement":
                return new TransferAgreement(name, <any>undefined, { urn })
            case "awscc:index/transferCertificate:TransferCertificate":
                return new TransferCertificate(name, <any>undefined, { urn })
            case "awscc:index/transferConnector:TransferConnector":
                return new TransferConnector(name, <any>undefined, { urn })
            case "awscc:index/transferProfile:TransferProfile":
                return new TransferProfile(name, <any>undefined, { urn })
            case "awscc:index/transferWorkflow:TransferWorkflow":
                return new TransferWorkflow(name, <any>undefined, { urn })
            case "awscc:index/verifiedpermissionsIdentitySource:VerifiedpermissionsIdentitySource":
                return new VerifiedpermissionsIdentitySource(name, <any>undefined, { urn })
            case "awscc:index/verifiedpermissionsPolicy:VerifiedpermissionsPolicy":
                return new VerifiedpermissionsPolicy(name, <any>undefined, { urn })
            case "awscc:index/verifiedpermissionsPolicyStore:VerifiedpermissionsPolicyStore":
                return new VerifiedpermissionsPolicyStore(name, <any>undefined, { urn })
            case "awscc:index/verifiedpermissionsPolicyTemplate:VerifiedpermissionsPolicyTemplate":
                return new VerifiedpermissionsPolicyTemplate(name, <any>undefined, { urn })
            case "awscc:index/voiceidDomain:VoiceidDomain":
                return new VoiceidDomain(name, <any>undefined, { urn })
            case "awscc:index/vpclatticeAccessLogSubscription:VpclatticeAccessLogSubscription":
                return new VpclatticeAccessLogSubscription(name, <any>undefined, { urn })
            case "awscc:index/vpclatticeAuthPolicy:VpclatticeAuthPolicy":
                return new VpclatticeAuthPolicy(name, <any>undefined, { urn })
            case "awscc:index/vpclatticeListener:VpclatticeListener":
                return new VpclatticeListener(name, <any>undefined, { urn })
            case "awscc:index/vpclatticeResourcePolicy:VpclatticeResourcePolicy":
                return new VpclatticeResourcePolicy(name, <any>undefined, { urn })
            case "awscc:index/vpclatticeRule:VpclatticeRule":
                return new VpclatticeRule(name, <any>undefined, { urn })
            case "awscc:index/vpclatticeService:VpclatticeService":
                return new VpclatticeService(name, <any>undefined, { urn })
            case "awscc:index/vpclatticeServiceNetwork:VpclatticeServiceNetwork":
                return new VpclatticeServiceNetwork(name, <any>undefined, { urn })
            case "awscc:index/vpclatticeServiceNetworkServiceAssociation:VpclatticeServiceNetworkServiceAssociation":
                return new VpclatticeServiceNetworkServiceAssociation(name, <any>undefined, { urn })
            case "awscc:index/vpclatticeServiceNetworkVpcAssociation:VpclatticeServiceNetworkVpcAssociation":
                return new VpclatticeServiceNetworkVpcAssociation(name, <any>undefined, { urn })
            case "awscc:index/wafv2IpSet:Wafv2IpSet":
                return new Wafv2IpSet(name, <any>undefined, { urn })
            case "awscc:index/wafv2LoggingConfiguration:Wafv2LoggingConfiguration":
                return new Wafv2LoggingConfiguration(name, <any>undefined, { urn })
            case "awscc:index/wafv2RegexPatternSet:Wafv2RegexPatternSet":
                return new Wafv2RegexPatternSet(name, <any>undefined, { urn })
            case "awscc:index/wafv2WebAclAssociation:Wafv2WebAclAssociation":
                return new Wafv2WebAclAssociation(name, <any>undefined, { urn })
            case "awscc:index/wisdomAssistant:WisdomAssistant":
                return new WisdomAssistant(name, <any>undefined, { urn })
            case "awscc:index/wisdomAssistantAssociation:WisdomAssistantAssociation":
                return new WisdomAssistantAssociation(name, <any>undefined, { urn })
            case "awscc:index/wisdomKnowledgeBase:WisdomKnowledgeBase":
                return new WisdomKnowledgeBase(name, <any>undefined, { urn })
            case "awscc:index/workspacesConnectionAlias:WorkspacesConnectionAlias":
                return new WorkspacesConnectionAlias(name, <any>undefined, { urn })
            case "awscc:index/workspacesWorkspacesPool:WorkspacesWorkspacesPool":
                return new WorkspacesWorkspacesPool(name, <any>undefined, { urn })
            case "awscc:index/workspacesthinclientEnvironment:WorkspacesthinclientEnvironment":
                return new WorkspacesthinclientEnvironment(name, <any>undefined, { urn })
            case "awscc:index/workspaceswebBrowserSettings:WorkspaceswebBrowserSettings":
                return new WorkspaceswebBrowserSettings(name, <any>undefined, { urn })
            case "awscc:index/workspaceswebIdentityProvider:WorkspaceswebIdentityProvider":
                return new WorkspaceswebIdentityProvider(name, <any>undefined, { urn })
            case "awscc:index/workspaceswebIpAccessSettings:WorkspaceswebIpAccessSettings":
                return new WorkspaceswebIpAccessSettings(name, <any>undefined, { urn })
            case "awscc:index/workspaceswebNetworkSettings:WorkspaceswebNetworkSettings":
                return new WorkspaceswebNetworkSettings(name, <any>undefined, { urn })
            case "awscc:index/workspaceswebPortal:WorkspaceswebPortal":
                return new WorkspaceswebPortal(name, <any>undefined, { urn })
            case "awscc:index/workspaceswebTrustStore:WorkspaceswebTrustStore":
                return new WorkspaceswebTrustStore(name, <any>undefined, { urn })
            case "awscc:index/workspaceswebUserAccessLoggingSettings:WorkspaceswebUserAccessLoggingSettings":
                return new WorkspaceswebUserAccessLoggingSettings(name, <any>undefined, { urn })
            case "awscc:index/workspaceswebUserSettings:WorkspaceswebUserSettings":
                return new WorkspaceswebUserSettings(name, <any>undefined, { urn })
            case "awscc:index/xrayGroup:XrayGroup":
                return new XrayGroup(name, <any>undefined, { urn })
            case "awscc:index/xrayResourcePolicy:XrayResourcePolicy":
                return new XrayResourcePolicy(name, <any>undefined, { urn })
            case "awscc:index/xraySamplingRule:XraySamplingRule":
                return new XraySamplingRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("awscc", "index/accessanalyzerAnalyzer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/acmpcaCertificate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/acmpcaCertificateAuthority", _module)
pulumi.runtime.registerResourceModule("awscc", "index/acmpcaCertificateAuthorityActivation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/acmpcaPermission", _module)
pulumi.runtime.registerResourceModule("awscc", "index/amplifyApp", _module)
pulumi.runtime.registerResourceModule("awscc", "index/amplifyBranch", _module)
pulumi.runtime.registerResourceModule("awscc", "index/amplifyDomain", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayAccount", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayApiKey", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayAuthorizer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayBasePathMapping", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayClientCertificate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayDeployment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayDocumentationPart", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayDocumentationVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayDomainName", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayGatewayResponse", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayMethod", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayModel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayRequestValidator", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayResource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayRestApi", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayStage", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayUsagePlan", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayUsagePlanKey", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayVpcLink", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayv2Api", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayv2ApiMapping", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayv2Authorizer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayv2Deployment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayv2DomainName", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayv2IntegrationResponse", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayv2Model", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayv2Route", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayv2RouteResponse", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apigatewayv2VpcLink", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appconfigApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appconfigConfigurationProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appconfigEnvironment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appconfigExtensionAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appconfigHostedConfigurationVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appflowConnector", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appflowConnectorProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appflowFlow", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appintegrationsApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appintegrationsEventIntegration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/applicationautoscalingScalableTarget", _module)
pulumi.runtime.registerResourceModule("awscc", "index/applicationautoscalingScalingPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/applicationinsightsApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/applicationsignalsServiceLevelObjective", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apprunnerAutoScalingConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apprunnerObservabilityConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apprunnerService", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apprunnerVpcConnector", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apprunnerVpcIngressConnection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appstreamAppBlock", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appstreamAppBlockBuilder", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appstreamApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appstreamApplicationEntitlementAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appstreamApplicationFleetAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appstreamDirectoryConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appstreamEntitlement", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appstreamImageBuilder", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appsyncDomainName", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appsyncDomainNameApiAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appsyncFunctionConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appsyncResolver", _module)
pulumi.runtime.registerResourceModule("awscc", "index/appsyncSourceApiAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apptestTestCase", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apsRuleGroupsNamespace", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apsScraper", _module)
pulumi.runtime.registerResourceModule("awscc", "index/apsWorkspace", _module)
pulumi.runtime.registerResourceModule("awscc", "index/arczonalshiftAutoshiftObserverNotificationStatus", _module)
pulumi.runtime.registerResourceModule("awscc", "index/arczonalshiftZonalAutoshiftConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/athenaCapacityReservation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/athenaDataCatalog", _module)
pulumi.runtime.registerResourceModule("awscc", "index/athenaNamedQuery", _module)
pulumi.runtime.registerResourceModule("awscc", "index/athenaPreparedStatement", _module)
pulumi.runtime.registerResourceModule("awscc", "index/athenaWorkGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/auditmanagerAssessment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/autoscalingAutoScalingGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/autoscalingLaunchConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/autoscalingLifecycleHook", _module)
pulumi.runtime.registerResourceModule("awscc", "index/autoscalingScalingPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/autoscalingScheduledAction", _module)
pulumi.runtime.registerResourceModule("awscc", "index/autoscalingWarmPool", _module)
pulumi.runtime.registerResourceModule("awscc", "index/b2biCapability", _module)
pulumi.runtime.registerResourceModule("awscc", "index/b2biPartnership", _module)
pulumi.runtime.registerResourceModule("awscc", "index/b2biProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/b2biTransformer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/backupBackupPlan", _module)
pulumi.runtime.registerResourceModule("awscc", "index/backupBackupSelection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/backupBackupVault", _module)
pulumi.runtime.registerResourceModule("awscc", "index/backupFramework", _module)
pulumi.runtime.registerResourceModule("awscc", "index/backupReportPlan", _module)
pulumi.runtime.registerResourceModule("awscc", "index/backupRestoreTestingPlan", _module)
pulumi.runtime.registerResourceModule("awscc", "index/backupRestoreTestingSelection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/backupgatewayHypervisor", _module)
pulumi.runtime.registerResourceModule("awscc", "index/batchComputeEnvironment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/batchJobQueue", _module)
pulumi.runtime.registerResourceModule("awscc", "index/batchSchedulingPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/bedrockAgent", _module)
pulumi.runtime.registerResourceModule("awscc", "index/bedrockAgentAlias", _module)
pulumi.runtime.registerResourceModule("awscc", "index/bedrockDataSource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/bedrockFlowAlias", _module)
pulumi.runtime.registerResourceModule("awscc", "index/bedrockFlowVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/bedrockGuardrail", _module)
pulumi.runtime.registerResourceModule("awscc", "index/bedrockGuardrailVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/bedrockKnowledgeBase", _module)
pulumi.runtime.registerResourceModule("awscc", "index/bedrockPrompt", _module)
pulumi.runtime.registerResourceModule("awscc", "index/bedrockPromptVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/billingconductorBillingGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/billingconductorCustomLineItem", _module)
pulumi.runtime.registerResourceModule("awscc", "index/billingconductorPricingPlan", _module)
pulumi.runtime.registerResourceModule("awscc", "index/billingconductorPricingRule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/budgetsBudgetsAction", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cassandraKeyspace", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cassandraTable", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ceAnomalyMonitor", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ceAnomalySubscription", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ceCostCategory", _module)
pulumi.runtime.registerResourceModule("awscc", "index/certificatemanagerAccount", _module)
pulumi.runtime.registerResourceModule("awscc", "index/chatbotMicrosoftTeamsChannelConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/chatbotSlackChannelConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cleanroomsAnalysisTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cleanroomsCollaboration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cleanroomsConfiguredTable", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cleanroomsConfiguredTableAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cleanroomsIdMappingTable", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cleanroomsMembership", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cleanroomsPrivacyBudgetTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cleanroomsmlTrainingDataset", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudformationHookDefaultVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudformationHookTypeConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudformationHookVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudformationModuleDefaultVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudformationModuleVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudformationPublicTypeVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudformationPublisher", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudformationResourceDefaultVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudformationResourceVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudformationStack", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudformationStackSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudformationTypeActivation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudfrontCachePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudfrontCloudfrontOriginAccessIdentity", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudfrontContinuousDeploymentPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudfrontFunction", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudfrontKeyGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudfrontKeyValueStore", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudfrontMonitoringSubscription", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudfrontOriginAccessControl", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudfrontOriginRequestPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudfrontPublicKey", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudfrontRealtimeLogConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudfrontResponseHeadersPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudtrailChannel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudtrailEventDataStore", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudtrailResourcePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudtrailTrail", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudwatchAlarm", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudwatchCompositeAlarm", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudwatchDashboard", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cloudwatchMetricStream", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codeartifactDomain", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codeartifactPackageGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codeartifactRepository", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codebuildFleet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codeconnectionsConnection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codedeployApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codedeployDeploymentConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codeguruprofilerProfilingGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codegurureviewerRepositoryAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codepipelineCustomActionType", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codepipelinePipeline", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codestarconnectionsConnection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codestarconnectionsRepositoryLink", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codestarconnectionsSyncConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/codestarnotificationsNotificationRule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cognitoIdentityPool", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cognitoIdentityPoolPrincipalTag", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cognitoIdentityPoolRoleAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cognitoLogDeliveryConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cognitoUserPoolClient", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cognitoUserPoolGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cognitoUserPoolResourceServer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cognitoUserPoolRiskConfigurationAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cognitoUserPoolUiCustomizationAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cognitoUserPoolUser", _module)
pulumi.runtime.registerResourceModule("awscc", "index/cognitoUserPoolUserToGroupAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/comprehendDocumentClassifier", _module)
pulumi.runtime.registerResourceModule("awscc", "index/comprehendFlywheel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/configAggregationAuthorization", _module)
pulumi.runtime.registerResourceModule("awscc", "index/configConfigRule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/configConfigurationAggregator", _module)
pulumi.runtime.registerResourceModule("awscc", "index/configConformancePack", _module)
pulumi.runtime.registerResourceModule("awscc", "index/configOrganizationConformancePack", _module)
pulumi.runtime.registerResourceModule("awscc", "index/configStoredQuery", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectApprovedOrigin", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectContactFlow", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectContactFlowModule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectHoursOfOperation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectInstance", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectInstanceStorageConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectIntegrationAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectPhoneNumber", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectPredefinedAttribute", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectPrompt", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectQueue", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectQuickConnect", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectRoutingProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectSecurityKey", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectSecurityProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectTaskTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectTrafficDistributionGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectUser", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectUserHierarchyGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectView", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectViewVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/connectcampaignsCampaign", _module)
pulumi.runtime.registerResourceModule("awscc", "index/controltowerEnabledControl", _module)
pulumi.runtime.registerResourceModule("awscc", "index/curReportDefinition", _module)
pulumi.runtime.registerResourceModule("awscc", "index/customerprofilesCalculatedAttributeDefinition", _module)
pulumi.runtime.registerResourceModule("awscc", "index/customerprofilesDomain", _module)
pulumi.runtime.registerResourceModule("awscc", "index/customerprofilesEventStream", _module)
pulumi.runtime.registerResourceModule("awscc", "index/customerprofilesIntegration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/customerprofilesObjectType", _module)
pulumi.runtime.registerResourceModule("awscc", "index/databrewDataset", _module)
pulumi.runtime.registerResourceModule("awscc", "index/databrewJob", _module)
pulumi.runtime.registerResourceModule("awscc", "index/databrewProject", _module)
pulumi.runtime.registerResourceModule("awscc", "index/databrewRuleset", _module)
pulumi.runtime.registerResourceModule("awscc", "index/databrewSchedule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datapipelinePipeline", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncAgent", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncLocationAzureBlob", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncLocationEfs", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncLocationFsxLustre", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncLocationFsxOntap", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncLocationFsxOpenZfs", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncLocationFsxWindows", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncLocationHdfs", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncLocationNfs", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncLocationObjectStorage", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncLocationS3", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncLocationSmb", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncStorageSystem", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datasyncTask", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datazoneDataSource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datazoneDomain", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datazoneEnvironment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datazoneEnvironmentBlueprintConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datazoneEnvironmentProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datazoneGroupProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datazoneProject", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datazoneProjectMembership", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datazoneSubscriptionTarget", _module)
pulumi.runtime.registerResourceModule("awscc", "index/datazoneUserProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/deadlineFarm", _module)
pulumi.runtime.registerResourceModule("awscc", "index/deadlineFleet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/deadlineLicenseEndpoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/deadlineMeteredProduct", _module)
pulumi.runtime.registerResourceModule("awscc", "index/deadlineMonitor", _module)
pulumi.runtime.registerResourceModule("awscc", "index/deadlineQueue", _module)
pulumi.runtime.registerResourceModule("awscc", "index/deadlineQueueEnvironment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/deadlineQueueFleetAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/deadlineStorageProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/detectiveGraph", _module)
pulumi.runtime.registerResourceModule("awscc", "index/detectiveMemberInvitation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/detectiveOrganizationAdmin", _module)
pulumi.runtime.registerResourceModule("awscc", "index/devopsguruLogAnomalyDetectionIntegration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/devopsguruNotificationChannel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/devopsguruResourceCollection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/directoryserviceSimpleAd", _module)
pulumi.runtime.registerResourceModule("awscc", "index/dmsDataProvider", _module)
pulumi.runtime.registerResourceModule("awscc", "index/dmsInstanceProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/dmsMigrationProject", _module)
pulumi.runtime.registerResourceModule("awscc", "index/dmsReplicationConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/docdbelasticCluster", _module)
pulumi.runtime.registerResourceModule("awscc", "index/dynamodbGlobalTable", _module)
pulumi.runtime.registerResourceModule("awscc", "index/dynamodbTable", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2CapacityReservation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2CapacityReservationFleet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2CarrierGateway", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2CustomerGateway", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2DhcpOptions", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2Ec2Fleet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2EgressOnlyInternetGateway", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2Eip", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2EipAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2EnclaveCertificateIamRoleAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2FlowLog", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2GatewayRouteTableAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2Host", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2Instance", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2InstanceConnectEndpoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2InternetGateway", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2Ipam", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2IpamAllocation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2IpamPool", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2IpamPoolCidr", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2IpamResourceDiscovery", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2IpamResourceDiscoveryAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2IpamScope", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2KeyPair", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2LaunchTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2LocalGatewayRoute", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2LocalGatewayRouteTable", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2LocalGatewayRouteTableVpcAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2NatGateway", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2NetworkAcl", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2NetworkInsightsAccessScope", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2NetworkInsightsAccessScopeAnalysis", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2NetworkInsightsAnalysis", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2NetworkInsightsPath", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2NetworkInterface", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2NetworkInterfaceAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2NetworkPerformanceMetricSubscription", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2PlacementGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2PrefixList", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2Route", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2RouteTable", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2SecurityGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2SecurityGroupEgress", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2SecurityGroupIngress", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2SnapshotBlockPublicAccess", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2SpotFleet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2Subnet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2SubnetCidrBlock", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2SubnetNetworkAclAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2SubnetRouteTableAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGateway", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGatewayAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGatewayConnect", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGatewayMulticastDomain", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGatewayMulticastDomainAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGatewayMulticastGroupMember", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGatewayMulticastGroupSource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGatewayPeeringAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGatewayRoute", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGatewayRouteTable", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGatewayRouteTableAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGatewayRouteTablePropagation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2TransitGatewayVpcAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VerifiedAccessEndpoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VerifiedAccessGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VerifiedAccessInstance", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VerifiedAccessTrustProvider", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2Volume", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VolumeAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2Vpc", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VpcCidrBlock", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VpcEndpoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VpcEndpointConnectionNotification", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VpcEndpointService", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VpcEndpointServicePermissions", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VpcGatewayAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VpcPeeringConnection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VpcdhcpOptionsAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VpnConnection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VpnConnectionRoute", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ec2VpnGateway", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecrPublicRepository", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecrPullThroughCacheRule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecrRegistryPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecrReplicationConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecrRepository", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecrRepositoryCreationTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecsCapacityProvider", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecsCluster", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecsClusterCapacityProviderAssociations", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecsPrimaryTaskSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecsService", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecsTaskDefinition", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ecsTaskSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/efsAccessPoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/efsFileSystem", _module)
pulumi.runtime.registerResourceModule("awscc", "index/efsMountTarget", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eksAccessEntry", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eksAddon", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eksCluster", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eksFargateProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eksIdentityProviderConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eksPodIdentityAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticacheGlobalReplicationGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticacheParameterGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticacheServerlessCache", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticacheSubnetGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticacheUser", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticacheUserGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticbeanstalkApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticbeanstalkApplicationVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticbeanstalkConfigurationTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticbeanstalkEnvironment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticloadbalancingv2LoadBalancer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticloadbalancingv2TargetGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticloadbalancingv2TrustStore", _module)
pulumi.runtime.registerResourceModule("awscc", "index/elasticloadbalancingv2TrustStoreRevocation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/emrSecurityConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/emrStudio", _module)
pulumi.runtime.registerResourceModule("awscc", "index/emrStudioSessionMapping", _module)
pulumi.runtime.registerResourceModule("awscc", "index/emrWalWorkspace", _module)
pulumi.runtime.registerResourceModule("awscc", "index/emrserverlessApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/entityresolutionIdMappingWorkflow", _module)
pulumi.runtime.registerResourceModule("awscc", "index/entityresolutionIdNamespace", _module)
pulumi.runtime.registerResourceModule("awscc", "index/entityresolutionMatchingWorkflow", _module)
pulumi.runtime.registerResourceModule("awscc", "index/entityresolutionPolicyStatement", _module)
pulumi.runtime.registerResourceModule("awscc", "index/entityresolutionSchemaMapping", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eventsApiDestination", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eventsArchive", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eventsEndpoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eventsEventBus", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eventsRule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eventschemasDiscoverer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eventschemasRegistry", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eventschemasRegistryPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/eventschemasSchema", _module)
pulumi.runtime.registerResourceModule("awscc", "index/evidentlyExperiment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/evidentlyFeature", _module)
pulumi.runtime.registerResourceModule("awscc", "index/evidentlyLaunch", _module)
pulumi.runtime.registerResourceModule("awscc", "index/evidentlyProject", _module)
pulumi.runtime.registerResourceModule("awscc", "index/evidentlySegment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/finspaceEnvironment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/fisExperimentTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/fisTargetAccountConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/fmsNotificationChannel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/fmsPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/fmsResourceSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/forecastDataset", _module)
pulumi.runtime.registerResourceModule("awscc", "index/forecastDatasetGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/frauddetectorDetector", _module)
pulumi.runtime.registerResourceModule("awscc", "index/frauddetectorEntityType", _module)
pulumi.runtime.registerResourceModule("awscc", "index/frauddetectorEventType", _module)
pulumi.runtime.registerResourceModule("awscc", "index/frauddetectorLabel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/frauddetectorList", _module)
pulumi.runtime.registerResourceModule("awscc", "index/frauddetectorOutcome", _module)
pulumi.runtime.registerResourceModule("awscc", "index/frauddetectorVariable", _module)
pulumi.runtime.registerResourceModule("awscc", "index/fsxDataRepositoryAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/gameliftAlias", _module)
pulumi.runtime.registerResourceModule("awscc", "index/gameliftBuild", _module)
pulumi.runtime.registerResourceModule("awscc", "index/gameliftContainerGroupDefinition", _module)
pulumi.runtime.registerResourceModule("awscc", "index/gameliftFleet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/gameliftGameServerGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/gameliftGameSessionQueue", _module)
pulumi.runtime.registerResourceModule("awscc", "index/gameliftLocation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/gameliftMatchmakingConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/gameliftMatchmakingRuleSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/gameliftScript", _module)
pulumi.runtime.registerResourceModule("awscc", "index/globalacceleratorAccelerator", _module)
pulumi.runtime.registerResourceModule("awscc", "index/globalacceleratorCrossAccountAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/globalacceleratorEndpointGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/globalacceleratorListener", _module)
pulumi.runtime.registerResourceModule("awscc", "index/glueDatabase", _module)
pulumi.runtime.registerResourceModule("awscc", "index/glueRegistry", _module)
pulumi.runtime.registerResourceModule("awscc", "index/glueSchema", _module)
pulumi.runtime.registerResourceModule("awscc", "index/glueSchemaVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/glueSchemaVersionMetadata", _module)
pulumi.runtime.registerResourceModule("awscc", "index/glueTrigger", _module)
pulumi.runtime.registerResourceModule("awscc", "index/grafanaWorkspace", _module)
pulumi.runtime.registerResourceModule("awscc", "index/greengrassv2ComponentVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/greengrassv2Deployment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/groundstationConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/groundstationDataflowEndpointGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/groundstationMissionProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/guarddutyDetector", _module)
pulumi.runtime.registerResourceModule("awscc", "index/guarddutyFilter", _module)
pulumi.runtime.registerResourceModule("awscc", "index/guarddutyIpSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/guarddutyMalwareProtectionPlan", _module)
pulumi.runtime.registerResourceModule("awscc", "index/guarddutyMaster", _module)
pulumi.runtime.registerResourceModule("awscc", "index/guarddutyMember", _module)
pulumi.runtime.registerResourceModule("awscc", "index/guarddutyThreatIntelSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/healthimagingDatastore", _module)
pulumi.runtime.registerResourceModule("awscc", "index/healthlakeFhirDatastore", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamGroupPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamInstanceProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamManagedPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamOidcProvider", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamRole", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamRolePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamSamlProvider", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamServerCertificate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamServiceLinkedRole", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamUser", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamUserPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iamVirtualMfaDevice", _module)
pulumi.runtime.registerResourceModule("awscc", "index/identitystoreGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/identitystoreGroupMembership", _module)
pulumi.runtime.registerResourceModule("awscc", "index/imagebuilderComponent", _module)
pulumi.runtime.registerResourceModule("awscc", "index/imagebuilderContainerRecipe", _module)
pulumi.runtime.registerResourceModule("awscc", "index/imagebuilderDistributionConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/imagebuilderImage", _module)
pulumi.runtime.registerResourceModule("awscc", "index/imagebuilderImagePipeline", _module)
pulumi.runtime.registerResourceModule("awscc", "index/imagebuilderImageRecipe", _module)
pulumi.runtime.registerResourceModule("awscc", "index/imagebuilderInfrastructureConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/imagebuilderLifecyclePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/imagebuilderWorkflow", _module)
pulumi.runtime.registerResourceModule("awscc", "index/inspectorAssessmentTarget", _module)
pulumi.runtime.registerResourceModule("awscc", "index/inspectorAssessmentTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/inspectorResourceGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/inspectorv2CisScanConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/inspectorv2Filter", _module)
pulumi.runtime.registerResourceModule("awscc", "index/internetmonitorMonitor", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotAccountAuditConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotAuthorizer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotBillingGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotCaCertificate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotCertificate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotCertificateProvider", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotCustomMetric", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotDimension", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotDomainConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotFleetMetric", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotJobTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotLogging", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotMitigationAction", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotProvisioningTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotResourceSpecificLogging", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotRoleAlias", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotScheduledAudit", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotSecurityProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotSoftwarePackage", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotSoftwarePackageVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotThing", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotThingGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotThingType", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotTopicRule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotTopicRuleDestination", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotanalyticsChannel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotanalyticsDataset", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotanalyticsDatastore", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotanalyticsPipeline", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotcoredeviceadvisorSuiteDefinition", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ioteventsAlarmModel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ioteventsDetectorModel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ioteventsInput", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotfleethubApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotfleetwiseCampaign", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotfleetwiseFleet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotfleetwiseModelManifest", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotfleetwiseSignalCatalog", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotfleetwiseVehicle", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotsitewiseAccessPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotsitewiseAsset", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotsitewiseAssetModel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotsitewiseDashboard", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotsitewiseGateway", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotsitewisePortal", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotsitewiseProject", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iottwinmakerScene", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iottwinmakerSyncJob", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iottwinmakerWorkspace", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotwirelessDestination", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotwirelessDeviceProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotwirelessFuotaTask", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotwirelessMulticastGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotwirelessNetworkAnalyzerConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotwirelessPartnerAccount", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotwirelessServiceProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotwirelessTaskDefinition", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotwirelessWirelessDevice", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotwirelessWirelessDeviceImportTask", _module)
pulumi.runtime.registerResourceModule("awscc", "index/iotwirelessWirelessGateway", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ivsChannel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ivsEncoderConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ivsPlaybackKeyPair", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ivsPlaybackRestrictionPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ivsPublicKey", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ivsRecordingConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ivsStage", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ivsStorageConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ivsStreamKey", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ivschatLoggingConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ivschatRoom", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kafkaconnectConnector", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kafkaconnectCustomPlugin", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kafkaconnectWorkerConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kendraDataSource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kendraFaq", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kendraIndex", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kendrarankingExecutionPlan", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kinesisStream", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kinesisanalyticsv2Application", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kinesisfirehoseDeliveryStream", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kinesisvideoSignalingChannel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kinesisvideoStream", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kmsAlias", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kmsKey", _module)
pulumi.runtime.registerResourceModule("awscc", "index/kmsReplicaKey", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lakeformationDataCellsFilter", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lakeformationPrincipalPermissions", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lakeformationTag", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lakeformationTagAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lambdaAlias", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lambdaCodeSigningConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lambdaEventInvokeConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lambdaEventSourceMapping", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lambdaFunction", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lambdaLayerVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lambdaLayerVersionPermission", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lambdaPermission", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lambdaUrl", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lambdaVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/launchwizardDeployment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lexBot", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lexBotAlias", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lexBotVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lexResourcePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/licensemanagerGrant", _module)
pulumi.runtime.registerResourceModule("awscc", "index/licensemanagerLicense", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lightsailAlarm", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lightsailBucket", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lightsailCertificate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lightsailContainer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lightsailDatabase", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lightsailDisk", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lightsailDistribution", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lightsailInstance", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lightsailLoadBalancer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lightsailLoadBalancerTlsCertificate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lightsailStaticIp", _module)
pulumi.runtime.registerResourceModule("awscc", "index/locationApiKey", _module)
pulumi.runtime.registerResourceModule("awscc", "index/locationGeofenceCollection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/locationMap", _module)
pulumi.runtime.registerResourceModule("awscc", "index/locationPlaceIndex", _module)
pulumi.runtime.registerResourceModule("awscc", "index/locationRouteCalculator", _module)
pulumi.runtime.registerResourceModule("awscc", "index/locationTracker", _module)
pulumi.runtime.registerResourceModule("awscc", "index/locationTrackerConsumer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/logsAccountPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/logsDelivery", _module)
pulumi.runtime.registerResourceModule("awscc", "index/logsDeliveryDestination", _module)
pulumi.runtime.registerResourceModule("awscc", "index/logsDeliverySource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/logsDestination", _module)
pulumi.runtime.registerResourceModule("awscc", "index/logsLogAnomalyDetector", _module)
pulumi.runtime.registerResourceModule("awscc", "index/logsLogGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/logsLogStream", _module)
pulumi.runtime.registerResourceModule("awscc", "index/logsMetricFilter", _module)
pulumi.runtime.registerResourceModule("awscc", "index/logsQueryDefinition", _module)
pulumi.runtime.registerResourceModule("awscc", "index/logsResourcePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/logsSubscriptionFilter", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lookoutequipmentInferenceScheduler", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lookoutmetricsAlert", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lookoutmetricsAnomalyDetector", _module)
pulumi.runtime.registerResourceModule("awscc", "index/lookoutvisionProject", _module)
pulumi.runtime.registerResourceModule("awscc", "index/m2Application", _module)
pulumi.runtime.registerResourceModule("awscc", "index/m2Environment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/macieAllowList", _module)
pulumi.runtime.registerResourceModule("awscc", "index/macieCustomDataIdentifier", _module)
pulumi.runtime.registerResourceModule("awscc", "index/macieFindingsFilter", _module)
pulumi.runtime.registerResourceModule("awscc", "index/macieSession", _module)
pulumi.runtime.registerResourceModule("awscc", "index/managedblockchainAccessor", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediaconnectBridge", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediaconnectBridgeOutput", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediaconnectBridgeSource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediaconnectFlow", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediaconnectFlowEntitlement", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediaconnectFlowOutput", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediaconnectFlowSource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediaconnectFlowVpcInterface", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediaconnectGateway", _module)
pulumi.runtime.registerResourceModule("awscc", "index/medialiveMultiplex", _module)
pulumi.runtime.registerResourceModule("awscc", "index/medialiveMultiplexprogram", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediapackageAsset", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediapackagePackagingConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediapackagePackagingGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediapackagev2Channel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediapackagev2ChannelGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediapackagev2ChannelPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediapackagev2OriginEndpoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediapackagev2OriginEndpointPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediatailorChannel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediatailorChannelPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediatailorLiveSource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediatailorSourceLocation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mediatailorVodSource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/memorydbAcl", _module)
pulumi.runtime.registerResourceModule("awscc", "index/memorydbCluster", _module)
pulumi.runtime.registerResourceModule("awscc", "index/memorydbParameterGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/memorydbSubnetGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/memorydbUser", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mskBatchScramSecret", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mskCluster", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mskClusterPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mskConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mskReplicator", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mskServerlessCluster", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mskVpcConnection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/mwaaEnvironment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/neptuneDbCluster", _module)
pulumi.runtime.registerResourceModule("awscc", "index/neptunegraphGraph", _module)
pulumi.runtime.registerResourceModule("awscc", "index/neptunegraphPrivateGraphEndpoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkfirewallFirewall", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkfirewallFirewallPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkfirewallLoggingConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkfirewallRuleGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkfirewallTlsInspectionConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerConnectAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerConnectPeer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerCoreNetwork", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerCustomerGatewayAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerDevice", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerGlobalNetwork", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerLink", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerLinkAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerSite", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerSiteToSiteVpnAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerTransitGatewayPeering", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerTransitGatewayRegistration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerTransitGatewayRouteTableAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/networkmanagerVpcAttachment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/nimblestudioLaunchProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/nimblestudioStreamingImage", _module)
pulumi.runtime.registerResourceModule("awscc", "index/nimblestudioStudio", _module)
pulumi.runtime.registerResourceModule("awscc", "index/nimblestudioStudioComponent", _module)
pulumi.runtime.registerResourceModule("awscc", "index/oamLink", _module)
pulumi.runtime.registerResourceModule("awscc", "index/oamSink", _module)
pulumi.runtime.registerResourceModule("awscc", "index/omicsReferenceStore", _module)
pulumi.runtime.registerResourceModule("awscc", "index/omicsRunGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/omicsSequenceStore", _module)
pulumi.runtime.registerResourceModule("awscc", "index/omicsVariantStore", _module)
pulumi.runtime.registerResourceModule("awscc", "index/omicsWorkflow", _module)
pulumi.runtime.registerResourceModule("awscc", "index/opensearchserverlessAccessPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/opensearchserverlessCollection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/opensearchserverlessLifecyclePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/opensearchserverlessSecurityConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/opensearchserverlessSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/opensearchserverlessVpcEndpoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/opensearchserviceDomain", _module)
pulumi.runtime.registerResourceModule("awscc", "index/opsworkscmServer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/organizationsAccount", _module)
pulumi.runtime.registerResourceModule("awscc", "index/organizationsOrganization", _module)
pulumi.runtime.registerResourceModule("awscc", "index/organizationsOrganizationalUnit", _module)
pulumi.runtime.registerResourceModule("awscc", "index/organizationsPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/organizationsResourcePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/osisPipeline", _module)
pulumi.runtime.registerResourceModule("awscc", "index/panoramaApplicationInstance", _module)
pulumi.runtime.registerResourceModule("awscc", "index/panoramaPackage", _module)
pulumi.runtime.registerResourceModule("awscc", "index/panoramaPackageVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/paymentcryptographyAlias", _module)
pulumi.runtime.registerResourceModule("awscc", "index/paymentcryptographyKey", _module)
pulumi.runtime.registerResourceModule("awscc", "index/pcaconnectoradConnector", _module)
pulumi.runtime.registerResourceModule("awscc", "index/pcaconnectoradDirectoryRegistration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/pcaconnectoradServicePrincipalName", _module)
pulumi.runtime.registerResourceModule("awscc", "index/pcaconnectoradTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/pcaconnectoradTemplateGroupAccessControlEntry", _module)
pulumi.runtime.registerResourceModule("awscc", "index/personalizeDataset", _module)
pulumi.runtime.registerResourceModule("awscc", "index/personalizeDatasetGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/personalizeSchema", _module)
pulumi.runtime.registerResourceModule("awscc", "index/personalizeSolution", _module)
pulumi.runtime.registerResourceModule("awscc", "index/pinpointInAppTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/pipesPipe", _module)
pulumi.runtime.registerResourceModule("awscc", "index/protonEnvironmentAccountConnection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/protonEnvironmentTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/protonServiceTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/qbusinessApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/qbusinessDataSource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/qbusinessIndex", _module)
pulumi.runtime.registerResourceModule("awscc", "index/qbusinessPlugin", _module)
pulumi.runtime.registerResourceModule("awscc", "index/qbusinessRetriever", _module)
pulumi.runtime.registerResourceModule("awscc", "index/qbusinessWebExperience", _module)
pulumi.runtime.registerResourceModule("awscc", "index/qldbStream", _module)
pulumi.runtime.registerResourceModule("awscc", "index/quicksightAnalysis", _module)
pulumi.runtime.registerResourceModule("awscc", "index/quicksightDashboard", _module)
pulumi.runtime.registerResourceModule("awscc", "index/quicksightDataSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/quicksightDataSource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/quicksightRefreshSchedule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/quicksightTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/quicksightTheme", _module)
pulumi.runtime.registerResourceModule("awscc", "index/quicksightTopic", _module)
pulumi.runtime.registerResourceModule("awscc", "index/quicksightVpcConnection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ramPermission", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsCustomDbEngineVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsDbCluster", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsDbClusterParameterGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsDbInstance", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsDbParameterGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsDbProxy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsDbProxyEndpoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsDbProxyTargetGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsDbSubnetGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsEventSubscription", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsGlobalCluster", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsIntegration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rdsOptionGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/redshiftCluster", _module)
pulumi.runtime.registerResourceModule("awscc", "index/redshiftClusterParameterGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/redshiftClusterSubnetGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/redshiftEndpointAccess", _module)
pulumi.runtime.registerResourceModule("awscc", "index/redshiftEndpointAuthorization", _module)
pulumi.runtime.registerResourceModule("awscc", "index/redshiftEventSubscription", _module)
pulumi.runtime.registerResourceModule("awscc", "index/redshiftScheduledAction", _module)
pulumi.runtime.registerResourceModule("awscc", "index/redshiftserverlessNamespace", _module)
pulumi.runtime.registerResourceModule("awscc", "index/redshiftserverlessWorkgroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/refactorspacesApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/refactorspacesEnvironment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/refactorspacesRoute", _module)
pulumi.runtime.registerResourceModule("awscc", "index/refactorspacesService", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rekognitionCollection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rekognitionProject", _module)
pulumi.runtime.registerResourceModule("awscc", "index/resiliencehubApp", _module)
pulumi.runtime.registerResourceModule("awscc", "index/resiliencehubResiliencyPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/resourceexplorer2DefaultViewAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/resourceexplorer2Index", _module)
pulumi.runtime.registerResourceModule("awscc", "index/resourceexplorer2View", _module)
pulumi.runtime.registerResourceModule("awscc", "index/resourcegroupsGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/robomakerFleet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/robomakerRobot", _module)
pulumi.runtime.registerResourceModule("awscc", "index/robomakerRobotApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/robomakerRobotApplicationVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/robomakerSimulationApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/robomakerSimulationApplicationVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rolesanywhereCrl", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rolesanywhereProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rolesanywhereTrustAnchor", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53CidrCollection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53Dnssec", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53HealthCheck", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53HostedZone", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53KeySigningKey", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53profilesProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53profilesProfileAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53profilesProfileResourceAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53recoverycontrolCluster", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53recoverycontrolControlPanel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53recoverycontrolRoutingControl", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53recoverycontrolSafetyRule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53recoveryreadinessCell", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53recoveryreadinessReadinessCheck", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53recoveryreadinessRecoveryGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53recoveryreadinessResourceSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53resolverFirewallDomainList", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53resolverFirewallRuleGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53resolverFirewallRuleGroupAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53resolverOutpostResolver", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53resolverResolverConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53resolverResolverDnssecConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53resolverResolverQueryLoggingConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53resolverResolverQueryLoggingConfigAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53resolverResolverRule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/route53resolverResolverRuleAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/rumAppMonitor", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3AccessGrant", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3AccessGrantsInstance", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3AccessGrantsLocation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3AccessPoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3Bucket", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3BucketPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3MultiRegionAccessPoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3MultiRegionAccessPointPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3StorageLens", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3StorageLensGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3expressBucketPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3expressDirectoryBucket", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3objectlambdaAccessPoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3objectlambdaAccessPointPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3outpostsAccessPoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3outpostsBucket", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3outpostsBucketPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/s3outpostsEndpoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerApp", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerAppImageConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerDataQualityJobDefinition", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerDevice", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerDeviceFleet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerDomain", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerFeatureGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerImage", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerImageVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerInferenceComponent", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerInferenceExperiment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerMlflowTrackingServer", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerModelBiasJobDefinition", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerModelExplainabilityJobDefinition", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerModelPackage", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerModelPackageGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerModelQualityJobDefinition", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerMonitoringSchedule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerPipeline", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerProject", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerSpace", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerStudioLifecycleConfig", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sagemakerUserProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/schedulerScheduleGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/secretsmanagerResourcePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/secretsmanagerSecret", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securityhubConfigurationPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securityhubDelegatedAdmin", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securityhubFindingAggregator", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securityhubHub", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securityhubInsight", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securityhubOrganizationConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securityhubPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securityhubProductSubscription", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securityhubSecurityControl", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securityhubStandard", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securitylakeAwsLogSource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securitylakeDataLake", _module)
pulumi.runtime.registerResourceModule("awscc", "index/securitylakeSubscriberNotification", _module)
pulumi.runtime.registerResourceModule("awscc", "index/servicecatalogCloudformationProvisionedProduct", _module)
pulumi.runtime.registerResourceModule("awscc", "index/servicecatalogServiceAction", _module)
pulumi.runtime.registerResourceModule("awscc", "index/servicecatalogServiceActionAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/servicecatalogappregistryApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/servicecatalogappregistryAttributeGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/servicecatalogappregistryAttributeGroupAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/servicecatalogappregistryResourceAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesConfigurationSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesConfigurationSetEventDestination", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesContactList", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesDedicatedIpPool", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesEmailIdentity", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesMailManagerAddonInstance", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesMailManagerAddonSubscription", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesMailManagerArchive", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesMailManagerIngressPoint", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesMailManagerRelay", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesMailManagerRuleSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesMailManagerTrafficPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sesVdmAttributes", _module)
pulumi.runtime.registerResourceModule("awscc", "index/shieldDrtAccess", _module)
pulumi.runtime.registerResourceModule("awscc", "index/shieldProactiveEngagement", _module)
pulumi.runtime.registerResourceModule("awscc", "index/shieldProtection", _module)
pulumi.runtime.registerResourceModule("awscc", "index/shieldProtectionGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/signerProfilePermission", _module)
pulumi.runtime.registerResourceModule("awscc", "index/signerSigningProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/simspaceweaverSimulation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/snsTopic", _module)
pulumi.runtime.registerResourceModule("awscc", "index/snsTopicInlinePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sqsQueue", _module)
pulumi.runtime.registerResourceModule("awscc", "index/sqsQueueInlinePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmDocument", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmParameter", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmPatchBaseline", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmResourceDataSync", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmResourcePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmcontactsContact", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmcontactsContactChannel", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmcontactsPlan", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmcontactsRotation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmincidentsReplicationSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmincidentsResponsePlan", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssmquicksetupConfigurationManager", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssoApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssoApplicationAssignment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssoAssignment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssoInstance", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssoInstanceAccessControlAttributeConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/ssoPermissionSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/stepfunctionsActivity", _module)
pulumi.runtime.registerResourceModule("awscc", "index/stepfunctionsStateMachine", _module)
pulumi.runtime.registerResourceModule("awscc", "index/stepfunctionsStateMachineAlias", _module)
pulumi.runtime.registerResourceModule("awscc", "index/stepfunctionsStateMachineVersion", _module)
pulumi.runtime.registerResourceModule("awscc", "index/supportappAccountAlias", _module)
pulumi.runtime.registerResourceModule("awscc", "index/supportappSlackChannelConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/supportappSlackWorkspaceConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/syntheticsCanary", _module)
pulumi.runtime.registerResourceModule("awscc", "index/syntheticsGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/systemsmanagersapApplication", _module)
pulumi.runtime.registerResourceModule("awscc", "index/timestreamDatabase", _module)
pulumi.runtime.registerResourceModule("awscc", "index/timestreamInfluxDbInstance", _module)
pulumi.runtime.registerResourceModule("awscc", "index/timestreamScheduledQuery", _module)
pulumi.runtime.registerResourceModule("awscc", "index/timestreamTable", _module)
pulumi.runtime.registerResourceModule("awscc", "index/transferAgreement", _module)
pulumi.runtime.registerResourceModule("awscc", "index/transferCertificate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/transferConnector", _module)
pulumi.runtime.registerResourceModule("awscc", "index/transferProfile", _module)
pulumi.runtime.registerResourceModule("awscc", "index/transferWorkflow", _module)
pulumi.runtime.registerResourceModule("awscc", "index/verifiedpermissionsIdentitySource", _module)
pulumi.runtime.registerResourceModule("awscc", "index/verifiedpermissionsPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/verifiedpermissionsPolicyStore", _module)
pulumi.runtime.registerResourceModule("awscc", "index/verifiedpermissionsPolicyTemplate", _module)
pulumi.runtime.registerResourceModule("awscc", "index/voiceidDomain", _module)
pulumi.runtime.registerResourceModule("awscc", "index/vpclatticeAccessLogSubscription", _module)
pulumi.runtime.registerResourceModule("awscc", "index/vpclatticeAuthPolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/vpclatticeListener", _module)
pulumi.runtime.registerResourceModule("awscc", "index/vpclatticeResourcePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/vpclatticeRule", _module)
pulumi.runtime.registerResourceModule("awscc", "index/vpclatticeService", _module)
pulumi.runtime.registerResourceModule("awscc", "index/vpclatticeServiceNetwork", _module)
pulumi.runtime.registerResourceModule("awscc", "index/vpclatticeServiceNetworkServiceAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/vpclatticeServiceNetworkVpcAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/wafv2IpSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/wafv2LoggingConfiguration", _module)
pulumi.runtime.registerResourceModule("awscc", "index/wafv2RegexPatternSet", _module)
pulumi.runtime.registerResourceModule("awscc", "index/wafv2WebAclAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/wisdomAssistant", _module)
pulumi.runtime.registerResourceModule("awscc", "index/wisdomAssistantAssociation", _module)
pulumi.runtime.registerResourceModule("awscc", "index/wisdomKnowledgeBase", _module)
pulumi.runtime.registerResourceModule("awscc", "index/workspacesConnectionAlias", _module)
pulumi.runtime.registerResourceModule("awscc", "index/workspacesWorkspacesPool", _module)
pulumi.runtime.registerResourceModule("awscc", "index/workspacesthinclientEnvironment", _module)
pulumi.runtime.registerResourceModule("awscc", "index/workspaceswebBrowserSettings", _module)
pulumi.runtime.registerResourceModule("awscc", "index/workspaceswebIdentityProvider", _module)
pulumi.runtime.registerResourceModule("awscc", "index/workspaceswebIpAccessSettings", _module)
pulumi.runtime.registerResourceModule("awscc", "index/workspaceswebNetworkSettings", _module)
pulumi.runtime.registerResourceModule("awscc", "index/workspaceswebPortal", _module)
pulumi.runtime.registerResourceModule("awscc", "index/workspaceswebTrustStore", _module)
pulumi.runtime.registerResourceModule("awscc", "index/workspaceswebUserAccessLoggingSettings", _module)
pulumi.runtime.registerResourceModule("awscc", "index/workspaceswebUserSettings", _module)
pulumi.runtime.registerResourceModule("awscc", "index/xrayGroup", _module)
pulumi.runtime.registerResourceModule("awscc", "index/xrayResourcePolicy", _module)
pulumi.runtime.registerResourceModule("awscc", "index/xraySamplingRule", _module)
pulumi.runtime.registerResourcePackage("awscc", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:awscc") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
