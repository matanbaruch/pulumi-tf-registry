// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LicensemanagerGrant extends pulumi.CustomResource {
    /**
     * Get an existing LicensemanagerGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicensemanagerGrantState, opts?: pulumi.CustomResourceOptions): LicensemanagerGrant {
        return new LicensemanagerGrant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/licensemanagerGrant:LicensemanagerGrant';

    /**
     * Returns true if the given object is an instance of LicensemanagerGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicensemanagerGrant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicensemanagerGrant.__pulumiType;
    }

    public readonly allowedOperations!: pulumi.Output<string[]>;
    /**
     * Arn of the grant.
     */
    public /*out*/ readonly grantArn!: pulumi.Output<string>;
    /**
     * Name for the created Grant.
     */
    public readonly grantName!: pulumi.Output<string>;
    /**
     * Home region for the created grant.
     */
    public readonly homeRegion!: pulumi.Output<string>;
    /**
     * License Arn for the grant.
     */
    public readonly licenseArn!: pulumi.Output<string>;
    public readonly principals!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string>;
    /**
     * The version of the grant.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a LicensemanagerGrant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LicensemanagerGrantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicensemanagerGrantArgs | LicensemanagerGrantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicensemanagerGrantState | undefined;
            resourceInputs["allowedOperations"] = state ? state.allowedOperations : undefined;
            resourceInputs["grantArn"] = state ? state.grantArn : undefined;
            resourceInputs["grantName"] = state ? state.grantName : undefined;
            resourceInputs["homeRegion"] = state ? state.homeRegion : undefined;
            resourceInputs["licenseArn"] = state ? state.licenseArn : undefined;
            resourceInputs["principals"] = state ? state.principals : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as LicensemanagerGrantArgs | undefined;
            resourceInputs["allowedOperations"] = args ? args.allowedOperations : undefined;
            resourceInputs["grantName"] = args ? args.grantName : undefined;
            resourceInputs["homeRegion"] = args ? args.homeRegion : undefined;
            resourceInputs["licenseArn"] = args ? args.licenseArn : undefined;
            resourceInputs["principals"] = args ? args.principals : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["grantArn"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LicensemanagerGrant.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LicensemanagerGrant resources.
 */
export interface LicensemanagerGrantState {
    allowedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Arn of the grant.
     */
    grantArn?: pulumi.Input<string>;
    /**
     * Name for the created Grant.
     */
    grantName?: pulumi.Input<string>;
    /**
     * Home region for the created grant.
     */
    homeRegion?: pulumi.Input<string>;
    /**
     * License Arn for the grant.
     */
    licenseArn?: pulumi.Input<string>;
    principals?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    /**
     * The version of the grant.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LicensemanagerGrant resource.
 */
export interface LicensemanagerGrantArgs {
    allowedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name for the created Grant.
     */
    grantName?: pulumi.Input<string>;
    /**
     * Home region for the created grant.
     */
    homeRegion?: pulumi.Input<string>;
    /**
     * License Arn for the grant.
     */
    licenseArn?: pulumi.Input<string>;
    principals?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}
