// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class XraySamplingRule extends pulumi.CustomResource {
    /**
     * Get an existing XraySamplingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: XraySamplingRuleState, opts?: pulumi.CustomResourceOptions): XraySamplingRule {
        return new XraySamplingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/xraySamplingRule:XraySamplingRule';

    /**
     * Returns true if the given object is an instance of XraySamplingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is XraySamplingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === XraySamplingRule.__pulumiType;
    }

    /**
     * The ARN of the sampling rule. Specify a rule by either name or ARN, but not both.
     */
    public /*out*/ readonly ruleArn!: pulumi.Output<string>;
    /**
     * The ARN of the sampling rule. Specify a rule by either name or ARN, but not both.
     */
    public readonly ruleName!: pulumi.Output<string>;
    public readonly samplingRule!: pulumi.Output<outputs.XraySamplingRuleSamplingRule>;
    public readonly samplingRuleRecord!: pulumi.Output<outputs.XraySamplingRuleSamplingRuleRecord>;
    public readonly samplingRuleUpdate!: pulumi.Output<outputs.XraySamplingRuleSamplingRuleUpdate>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.XraySamplingRuleTag[]>;

    /**
     * Create a XraySamplingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: XraySamplingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: XraySamplingRuleArgs | XraySamplingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as XraySamplingRuleState | undefined;
            resourceInputs["ruleArn"] = state ? state.ruleArn : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["samplingRule"] = state ? state.samplingRule : undefined;
            resourceInputs["samplingRuleRecord"] = state ? state.samplingRuleRecord : undefined;
            resourceInputs["samplingRuleUpdate"] = state ? state.samplingRuleUpdate : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as XraySamplingRuleArgs | undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["samplingRule"] = args ? args.samplingRule : undefined;
            resourceInputs["samplingRuleRecord"] = args ? args.samplingRuleRecord : undefined;
            resourceInputs["samplingRuleUpdate"] = args ? args.samplingRuleUpdate : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["ruleArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(XraySamplingRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering XraySamplingRule resources.
 */
export interface XraySamplingRuleState {
    /**
     * The ARN of the sampling rule. Specify a rule by either name or ARN, but not both.
     */
    ruleArn?: pulumi.Input<string>;
    /**
     * The ARN of the sampling rule. Specify a rule by either name or ARN, but not both.
     */
    ruleName?: pulumi.Input<string>;
    samplingRule?: pulumi.Input<inputs.XraySamplingRuleSamplingRule>;
    samplingRuleRecord?: pulumi.Input<inputs.XraySamplingRuleSamplingRuleRecord>;
    samplingRuleUpdate?: pulumi.Input<inputs.XraySamplingRuleSamplingRuleUpdate>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.XraySamplingRuleTag>[]>;
}

/**
 * The set of arguments for constructing a XraySamplingRule resource.
 */
export interface XraySamplingRuleArgs {
    /**
     * The ARN of the sampling rule. Specify a rule by either name or ARN, but not both.
     */
    ruleName?: pulumi.Input<string>;
    samplingRule?: pulumi.Input<inputs.XraySamplingRuleSamplingRule>;
    samplingRuleRecord?: pulumi.Input<inputs.XraySamplingRuleSamplingRuleRecord>;
    samplingRuleUpdate?: pulumi.Input<inputs.XraySamplingRuleSamplingRuleUpdate>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.XraySamplingRuleTag>[]>;
}
