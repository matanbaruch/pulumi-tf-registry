// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BedrockDataSource extends pulumi.CustomResource {
    /**
     * Get an existing BedrockDataSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BedrockDataSourceState, opts?: pulumi.CustomResourceOptions): BedrockDataSource {
        return new BedrockDataSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/bedrockDataSource:BedrockDataSource';

    /**
     * Returns true if the given object is an instance of BedrockDataSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BedrockDataSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BedrockDataSource.__pulumiType;
    }

    /**
     * The time at which the data source was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The deletion policy for the data source.
     */
    public readonly dataDeletionPolicy!: pulumi.Output<string>;
    /**
     * Specifies a raw data source location to ingest.
     */
    public readonly dataSourceConfiguration!: pulumi.Output<outputs.BedrockDataSourceDataSourceConfiguration>;
    /**
     * Identifier for a resource.
     */
    public /*out*/ readonly dataSourceId!: pulumi.Output<string>;
    /**
     * The status of a data source.
     */
    public /*out*/ readonly dataSourceStatus!: pulumi.Output<string>;
    /**
     * Description of the Resource.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The details of the failure reasons related to the data source.
     */
    public /*out*/ readonly failureReasons!: pulumi.Output<string[]>;
    /**
     * The unique identifier of the knowledge base to which to add the data source.
     */
    public readonly knowledgeBaseId!: pulumi.Output<string>;
    /**
     * The name of the data source.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Contains details about the server-side encryption for the data source.
     */
    public readonly serverSideEncryptionConfiguration!: pulumi.Output<outputs.BedrockDataSourceServerSideEncryptionConfiguration>;
    /**
     * The time at which the knowledge base was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Details about how to chunk the documents in the data source. A chunk refers to an excerpt from a data source that is
     * returned when the knowledge base that it belongs to is queried.
     */
    public readonly vectorIngestionConfiguration!: pulumi.Output<outputs.BedrockDataSourceVectorIngestionConfiguration>;

    /**
     * Create a BedrockDataSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BedrockDataSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BedrockDataSourceArgs | BedrockDataSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BedrockDataSourceState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dataDeletionPolicy"] = state ? state.dataDeletionPolicy : undefined;
            resourceInputs["dataSourceConfiguration"] = state ? state.dataSourceConfiguration : undefined;
            resourceInputs["dataSourceId"] = state ? state.dataSourceId : undefined;
            resourceInputs["dataSourceStatus"] = state ? state.dataSourceStatus : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["failureReasons"] = state ? state.failureReasons : undefined;
            resourceInputs["knowledgeBaseId"] = state ? state.knowledgeBaseId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serverSideEncryptionConfiguration"] = state ? state.serverSideEncryptionConfiguration : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["vectorIngestionConfiguration"] = state ? state.vectorIngestionConfiguration : undefined;
        } else {
            const args = argsOrState as BedrockDataSourceArgs | undefined;
            if ((!args || args.dataSourceConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceConfiguration'");
            }
            if ((!args || args.knowledgeBaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'knowledgeBaseId'");
            }
            resourceInputs["dataDeletionPolicy"] = args ? args.dataDeletionPolicy : undefined;
            resourceInputs["dataSourceConfiguration"] = args ? args.dataSourceConfiguration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["knowledgeBaseId"] = args ? args.knowledgeBaseId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverSideEncryptionConfiguration"] = args ? args.serverSideEncryptionConfiguration : undefined;
            resourceInputs["vectorIngestionConfiguration"] = args ? args.vectorIngestionConfiguration : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dataSourceId"] = undefined /*out*/;
            resourceInputs["dataSourceStatus"] = undefined /*out*/;
            resourceInputs["failureReasons"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BedrockDataSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BedrockDataSource resources.
 */
export interface BedrockDataSourceState {
    /**
     * The time at which the data source was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The deletion policy for the data source.
     */
    dataDeletionPolicy?: pulumi.Input<string>;
    /**
     * Specifies a raw data source location to ingest.
     */
    dataSourceConfiguration?: pulumi.Input<inputs.BedrockDataSourceDataSourceConfiguration>;
    /**
     * Identifier for a resource.
     */
    dataSourceId?: pulumi.Input<string>;
    /**
     * The status of a data source.
     */
    dataSourceStatus?: pulumi.Input<string>;
    /**
     * Description of the Resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The details of the failure reasons related to the data source.
     */
    failureReasons?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique identifier of the knowledge base to which to add the data source.
     */
    knowledgeBaseId?: pulumi.Input<string>;
    /**
     * The name of the data source.
     */
    name?: pulumi.Input<string>;
    /**
     * Contains details about the server-side encryption for the data source.
     */
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.BedrockDataSourceServerSideEncryptionConfiguration>;
    /**
     * The time at which the knowledge base was last updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Details about how to chunk the documents in the data source. A chunk refers to an excerpt from a data source that is
     * returned when the knowledge base that it belongs to is queried.
     */
    vectorIngestionConfiguration?: pulumi.Input<inputs.BedrockDataSourceVectorIngestionConfiguration>;
}

/**
 * The set of arguments for constructing a BedrockDataSource resource.
 */
export interface BedrockDataSourceArgs {
    /**
     * The deletion policy for the data source.
     */
    dataDeletionPolicy?: pulumi.Input<string>;
    /**
     * Specifies a raw data source location to ingest.
     */
    dataSourceConfiguration: pulumi.Input<inputs.BedrockDataSourceDataSourceConfiguration>;
    /**
     * Description of the Resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique identifier of the knowledge base to which to add the data source.
     */
    knowledgeBaseId: pulumi.Input<string>;
    /**
     * The name of the data source.
     */
    name?: pulumi.Input<string>;
    /**
     * Contains details about the server-side encryption for the data source.
     */
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.BedrockDataSourceServerSideEncryptionConfiguration>;
    /**
     * Details about how to chunk the documents in the data source. A chunk refers to an excerpt from a data source that is
     * returned when the knowledge base that it belongs to is queried.
     */
    vectorIngestionConfiguration?: pulumi.Input<inputs.BedrockDataSourceVectorIngestionConfiguration>;
}
