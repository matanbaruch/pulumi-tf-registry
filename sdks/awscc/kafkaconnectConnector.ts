// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KafkaconnectConnector extends pulumi.CustomResource {
    /**
     * Get an existing KafkaconnectConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaconnectConnectorState, opts?: pulumi.CustomResourceOptions): KafkaconnectConnector {
        return new KafkaconnectConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/kafkaconnectConnector:KafkaconnectConnector';

    /**
     * Returns true if the given object is an instance of KafkaconnectConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaconnectConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaconnectConnector.__pulumiType;
    }

    /**
     * Information about the capacity allocated to the connector.
     */
    public readonly capacity!: pulumi.Output<outputs.KafkaconnectConnectorCapacity>;
    /**
     * Amazon Resource Name for the created Connector.
     */
    public /*out*/ readonly connectorArn!: pulumi.Output<string>;
    /**
     * The configuration for the connector.
     */
    public readonly connectorConfiguration!: pulumi.Output<{[key: string]: string}>;
    /**
     * A summary description of the connector.
     */
    public readonly connectorDescription!: pulumi.Output<string>;
    /**
     * The name of the connector.
     */
    public readonly connectorName!: pulumi.Output<string>;
    /**
     * Details of how to connect to the Kafka cluster.
     */
    public readonly kafkaCluster!: pulumi.Output<outputs.KafkaconnectConnectorKafkaCluster>;
    /**
     * Details of the client authentication used by the Kafka cluster.
     */
    public readonly kafkaClusterClientAuthentication!: pulumi.Output<outputs.KafkaconnectConnectorKafkaClusterClientAuthentication>;
    /**
     * Details of encryption in transit to the Kafka cluster.
     */
    public readonly kafkaClusterEncryptionInTransit!: pulumi.Output<outputs.KafkaconnectConnectorKafkaClusterEncryptionInTransit>;
    /**
     * The version of Kafka Connect. It has to be compatible with both the Kafka cluster's version and the plugins.
     */
    public readonly kafkaConnectVersion!: pulumi.Output<string>;
    /**
     * Details of what logs are delivered and where they are delivered.
     */
    public readonly logDelivery!: pulumi.Output<outputs.KafkaconnectConnectorLogDelivery>;
    /**
     * List of plugins to use with the connector.
     */
    public readonly plugins!: pulumi.Output<outputs.KafkaconnectConnectorPlugin[]>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon S3 objects and other external
     * resources.
     */
    public readonly serviceExecutionRoleArn!: pulumi.Output<string>;
    /**
     * A collection of tags associated with a resource
     */
    public readonly tags!: pulumi.Output<outputs.KafkaconnectConnectorTag[]>;
    /**
     * Specifies the worker configuration to use with the connector.
     */
    public readonly workerConfiguration!: pulumi.Output<outputs.KafkaconnectConnectorWorkerConfiguration>;

    /**
     * Create a KafkaconnectConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaconnectConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaconnectConnectorArgs | KafkaconnectConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaconnectConnectorState | undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["connectorArn"] = state ? state.connectorArn : undefined;
            resourceInputs["connectorConfiguration"] = state ? state.connectorConfiguration : undefined;
            resourceInputs["connectorDescription"] = state ? state.connectorDescription : undefined;
            resourceInputs["connectorName"] = state ? state.connectorName : undefined;
            resourceInputs["kafkaCluster"] = state ? state.kafkaCluster : undefined;
            resourceInputs["kafkaClusterClientAuthentication"] = state ? state.kafkaClusterClientAuthentication : undefined;
            resourceInputs["kafkaClusterEncryptionInTransit"] = state ? state.kafkaClusterEncryptionInTransit : undefined;
            resourceInputs["kafkaConnectVersion"] = state ? state.kafkaConnectVersion : undefined;
            resourceInputs["logDelivery"] = state ? state.logDelivery : undefined;
            resourceInputs["plugins"] = state ? state.plugins : undefined;
            resourceInputs["serviceExecutionRoleArn"] = state ? state.serviceExecutionRoleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workerConfiguration"] = state ? state.workerConfiguration : undefined;
        } else {
            const args = argsOrState as KafkaconnectConnectorArgs | undefined;
            if ((!args || args.capacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if ((!args || args.connectorConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorConfiguration'");
            }
            if ((!args || args.connectorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorName'");
            }
            if ((!args || args.kafkaCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaCluster'");
            }
            if ((!args || args.kafkaClusterClientAuthentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaClusterClientAuthentication'");
            }
            if ((!args || args.kafkaClusterEncryptionInTransit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaClusterEncryptionInTransit'");
            }
            if ((!args || args.kafkaConnectVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaConnectVersion'");
            }
            if ((!args || args.plugins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plugins'");
            }
            if ((!args || args.serviceExecutionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceExecutionRoleArn'");
            }
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["connectorConfiguration"] = args ? args.connectorConfiguration : undefined;
            resourceInputs["connectorDescription"] = args ? args.connectorDescription : undefined;
            resourceInputs["connectorName"] = args ? args.connectorName : undefined;
            resourceInputs["kafkaCluster"] = args ? args.kafkaCluster : undefined;
            resourceInputs["kafkaClusterClientAuthentication"] = args ? args.kafkaClusterClientAuthentication : undefined;
            resourceInputs["kafkaClusterEncryptionInTransit"] = args ? args.kafkaClusterEncryptionInTransit : undefined;
            resourceInputs["kafkaConnectVersion"] = args ? args.kafkaConnectVersion : undefined;
            resourceInputs["logDelivery"] = args ? args.logDelivery : undefined;
            resourceInputs["plugins"] = args ? args.plugins : undefined;
            resourceInputs["serviceExecutionRoleArn"] = args ? args.serviceExecutionRoleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workerConfiguration"] = args ? args.workerConfiguration : undefined;
            resourceInputs["connectorArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaconnectConnector.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KafkaconnectConnector resources.
 */
export interface KafkaconnectConnectorState {
    /**
     * Information about the capacity allocated to the connector.
     */
    capacity?: pulumi.Input<inputs.KafkaconnectConnectorCapacity>;
    /**
     * Amazon Resource Name for the created Connector.
     */
    connectorArn?: pulumi.Input<string>;
    /**
     * The configuration for the connector.
     */
    connectorConfiguration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A summary description of the connector.
     */
    connectorDescription?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    connectorName?: pulumi.Input<string>;
    /**
     * Details of how to connect to the Kafka cluster.
     */
    kafkaCluster?: pulumi.Input<inputs.KafkaconnectConnectorKafkaCluster>;
    /**
     * Details of the client authentication used by the Kafka cluster.
     */
    kafkaClusterClientAuthentication?: pulumi.Input<inputs.KafkaconnectConnectorKafkaClusterClientAuthentication>;
    /**
     * Details of encryption in transit to the Kafka cluster.
     */
    kafkaClusterEncryptionInTransit?: pulumi.Input<inputs.KafkaconnectConnectorKafkaClusterEncryptionInTransit>;
    /**
     * The version of Kafka Connect. It has to be compatible with both the Kafka cluster's version and the plugins.
     */
    kafkaConnectVersion?: pulumi.Input<string>;
    /**
     * Details of what logs are delivered and where they are delivered.
     */
    logDelivery?: pulumi.Input<inputs.KafkaconnectConnectorLogDelivery>;
    /**
     * List of plugins to use with the connector.
     */
    plugins?: pulumi.Input<pulumi.Input<inputs.KafkaconnectConnectorPlugin>[]>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon S3 objects and other external
     * resources.
     */
    serviceExecutionRoleArn?: pulumi.Input<string>;
    /**
     * A collection of tags associated with a resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.KafkaconnectConnectorTag>[]>;
    /**
     * Specifies the worker configuration to use with the connector.
     */
    workerConfiguration?: pulumi.Input<inputs.KafkaconnectConnectorWorkerConfiguration>;
}

/**
 * The set of arguments for constructing a KafkaconnectConnector resource.
 */
export interface KafkaconnectConnectorArgs {
    /**
     * Information about the capacity allocated to the connector.
     */
    capacity: pulumi.Input<inputs.KafkaconnectConnectorCapacity>;
    /**
     * The configuration for the connector.
     */
    connectorConfiguration: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A summary description of the connector.
     */
    connectorDescription?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    connectorName: pulumi.Input<string>;
    /**
     * Details of how to connect to the Kafka cluster.
     */
    kafkaCluster: pulumi.Input<inputs.KafkaconnectConnectorKafkaCluster>;
    /**
     * Details of the client authentication used by the Kafka cluster.
     */
    kafkaClusterClientAuthentication: pulumi.Input<inputs.KafkaconnectConnectorKafkaClusterClientAuthentication>;
    /**
     * Details of encryption in transit to the Kafka cluster.
     */
    kafkaClusterEncryptionInTransit: pulumi.Input<inputs.KafkaconnectConnectorKafkaClusterEncryptionInTransit>;
    /**
     * The version of Kafka Connect. It has to be compatible with both the Kafka cluster's version and the plugins.
     */
    kafkaConnectVersion: pulumi.Input<string>;
    /**
     * Details of what logs are delivered and where they are delivered.
     */
    logDelivery?: pulumi.Input<inputs.KafkaconnectConnectorLogDelivery>;
    /**
     * List of plugins to use with the connector.
     */
    plugins: pulumi.Input<pulumi.Input<inputs.KafkaconnectConnectorPlugin>[]>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon S3 objects and other external
     * resources.
     */
    serviceExecutionRoleArn: pulumi.Input<string>;
    /**
     * A collection of tags associated with a resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.KafkaconnectConnectorTag>[]>;
    /**
     * Specifies the worker configuration to use with the connector.
     */
    workerConfiguration?: pulumi.Input<inputs.KafkaconnectConnectorWorkerConfiguration>;
}
