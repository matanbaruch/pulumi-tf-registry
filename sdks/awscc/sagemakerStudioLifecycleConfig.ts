// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SagemakerStudioLifecycleConfig extends pulumi.CustomResource {
    /**
     * Get an existing SagemakerStudioLifecycleConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SagemakerStudioLifecycleConfigState, opts?: pulumi.CustomResourceOptions): SagemakerStudioLifecycleConfig {
        return new SagemakerStudioLifecycleConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/sagemakerStudioLifecycleConfig:SagemakerStudioLifecycleConfig';

    /**
     * Returns true if the given object is an instance of SagemakerStudioLifecycleConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SagemakerStudioLifecycleConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SagemakerStudioLifecycleConfig.__pulumiType;
    }

    /**
     * The App type that the Lifecycle Configuration is attached to.
     */
    public readonly studioLifecycleConfigAppType!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the Lifecycle Configuration.
     */
    public /*out*/ readonly studioLifecycleConfigArn!: pulumi.Output<string>;
    /**
     * The content of your Amazon SageMaker Studio Lifecycle Configuration script.
     */
    public readonly studioLifecycleConfigContent!: pulumi.Output<string>;
    /**
     * The name of the Amazon SageMaker Studio Lifecycle Configuration.
     */
    public readonly studioLifecycleConfigName!: pulumi.Output<string>;
    /**
     * Tags to be associated with the Lifecycle Configuration.
     */
    public readonly tags!: pulumi.Output<outputs.SagemakerStudioLifecycleConfigTag[]>;

    /**
     * Create a SagemakerStudioLifecycleConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SagemakerStudioLifecycleConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SagemakerStudioLifecycleConfigArgs | SagemakerStudioLifecycleConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SagemakerStudioLifecycleConfigState | undefined;
            resourceInputs["studioLifecycleConfigAppType"] = state ? state.studioLifecycleConfigAppType : undefined;
            resourceInputs["studioLifecycleConfigArn"] = state ? state.studioLifecycleConfigArn : undefined;
            resourceInputs["studioLifecycleConfigContent"] = state ? state.studioLifecycleConfigContent : undefined;
            resourceInputs["studioLifecycleConfigName"] = state ? state.studioLifecycleConfigName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SagemakerStudioLifecycleConfigArgs | undefined;
            if ((!args || args.studioLifecycleConfigAppType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'studioLifecycleConfigAppType'");
            }
            if ((!args || args.studioLifecycleConfigContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'studioLifecycleConfigContent'");
            }
            if ((!args || args.studioLifecycleConfigName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'studioLifecycleConfigName'");
            }
            resourceInputs["studioLifecycleConfigAppType"] = args ? args.studioLifecycleConfigAppType : undefined;
            resourceInputs["studioLifecycleConfigContent"] = args ? args.studioLifecycleConfigContent : undefined;
            resourceInputs["studioLifecycleConfigName"] = args ? args.studioLifecycleConfigName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["studioLifecycleConfigArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SagemakerStudioLifecycleConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SagemakerStudioLifecycleConfig resources.
 */
export interface SagemakerStudioLifecycleConfigState {
    /**
     * The App type that the Lifecycle Configuration is attached to.
     */
    studioLifecycleConfigAppType?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Lifecycle Configuration.
     */
    studioLifecycleConfigArn?: pulumi.Input<string>;
    /**
     * The content of your Amazon SageMaker Studio Lifecycle Configuration script.
     */
    studioLifecycleConfigContent?: pulumi.Input<string>;
    /**
     * The name of the Amazon SageMaker Studio Lifecycle Configuration.
     */
    studioLifecycleConfigName?: pulumi.Input<string>;
    /**
     * Tags to be associated with the Lifecycle Configuration.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerStudioLifecycleConfigTag>[]>;
}

/**
 * The set of arguments for constructing a SagemakerStudioLifecycleConfig resource.
 */
export interface SagemakerStudioLifecycleConfigArgs {
    /**
     * The App type that the Lifecycle Configuration is attached to.
     */
    studioLifecycleConfigAppType: pulumi.Input<string>;
    /**
     * The content of your Amazon SageMaker Studio Lifecycle Configuration script.
     */
    studioLifecycleConfigContent: pulumi.Input<string>;
    /**
     * The name of the Amazon SageMaker Studio Lifecycle Configuration.
     */
    studioLifecycleConfigName: pulumi.Input<string>;
    /**
     * Tags to be associated with the Lifecycle Configuration.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerStudioLifecycleConfigTag>[]>;
}
