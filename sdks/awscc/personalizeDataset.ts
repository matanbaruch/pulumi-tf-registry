// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PersonalizeDataset extends pulumi.CustomResource {
    /**
     * Get an existing PersonalizeDataset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PersonalizeDatasetState, opts?: pulumi.CustomResourceOptions): PersonalizeDataset {
        return new PersonalizeDataset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/personalizeDataset:PersonalizeDataset';

    /**
     * Returns true if the given object is an instance of PersonalizeDataset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PersonalizeDataset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PersonalizeDataset.__pulumiType;
    }

    /**
     * The ARN of the dataset
     */
    public /*out*/ readonly datasetArn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the dataset group to add the dataset to
     */
    public readonly datasetGroupArn!: pulumi.Output<string>;
    /**
     * Initial DatasetImportJob for the created dataset
     */
    public readonly datasetImportJob!: pulumi.Output<outputs.PersonalizeDatasetDatasetImportJob>;
    /**
     * The type of dataset
     */
    public readonly datasetType!: pulumi.Output<string>;
    /**
     * The name for the dataset
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ARN of the schema to associate with the dataset. The schema defines the dataset fields.
     */
    public readonly schemaArn!: pulumi.Output<string>;

    /**
     * Create a PersonalizeDataset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PersonalizeDatasetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PersonalizeDatasetArgs | PersonalizeDatasetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PersonalizeDatasetState | undefined;
            resourceInputs["datasetArn"] = state ? state.datasetArn : undefined;
            resourceInputs["datasetGroupArn"] = state ? state.datasetGroupArn : undefined;
            resourceInputs["datasetImportJob"] = state ? state.datasetImportJob : undefined;
            resourceInputs["datasetType"] = state ? state.datasetType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["schemaArn"] = state ? state.schemaArn : undefined;
        } else {
            const args = argsOrState as PersonalizeDatasetArgs | undefined;
            if ((!args || args.datasetGroupArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasetGroupArn'");
            }
            if ((!args || args.datasetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasetType'");
            }
            if ((!args || args.schemaArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaArn'");
            }
            resourceInputs["datasetGroupArn"] = args ? args.datasetGroupArn : undefined;
            resourceInputs["datasetImportJob"] = args ? args.datasetImportJob : undefined;
            resourceInputs["datasetType"] = args ? args.datasetType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schemaArn"] = args ? args.schemaArn : undefined;
            resourceInputs["datasetArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PersonalizeDataset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PersonalizeDataset resources.
 */
export interface PersonalizeDatasetState {
    /**
     * The ARN of the dataset
     */
    datasetArn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the dataset group to add the dataset to
     */
    datasetGroupArn?: pulumi.Input<string>;
    /**
     * Initial DatasetImportJob for the created dataset
     */
    datasetImportJob?: pulumi.Input<inputs.PersonalizeDatasetDatasetImportJob>;
    /**
     * The type of dataset
     */
    datasetType?: pulumi.Input<string>;
    /**
     * The name for the dataset
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of the schema to associate with the dataset. The schema defines the dataset fields.
     */
    schemaArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PersonalizeDataset resource.
 */
export interface PersonalizeDatasetArgs {
    /**
     * The Amazon Resource Name (ARN) of the dataset group to add the dataset to
     */
    datasetGroupArn: pulumi.Input<string>;
    /**
     * Initial DatasetImportJob for the created dataset
     */
    datasetImportJob?: pulumi.Input<inputs.PersonalizeDatasetDatasetImportJob>;
    /**
     * The type of dataset
     */
    datasetType: pulumi.Input<string>;
    /**
     * The name for the dataset
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of the schema to associate with the dataset. The schema defines the dataset fields.
     */
    schemaArn: pulumi.Input<string>;
}
