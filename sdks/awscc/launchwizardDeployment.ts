// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LaunchwizardDeployment extends pulumi.CustomResource {
    /**
     * Get an existing LaunchwizardDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LaunchwizardDeploymentState, opts?: pulumi.CustomResourceOptions): LaunchwizardDeployment {
        return new LaunchwizardDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/launchwizardDeployment:LaunchwizardDeployment';

    /**
     * Returns true if the given object is an instance of LaunchwizardDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LaunchwizardDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LaunchwizardDeployment.__pulumiType;
    }

    /**
     * ARN of the LaunchWizard deployment
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Timestamp of LaunchWizard deployment creation
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Timestamp of LaunchWizard deployment deletion
     */
    public /*out*/ readonly deletedAt!: pulumi.Output<string>;
    /**
     * Deployment ID of the LaunchWizard deployment
     */
    public /*out*/ readonly deploymentId!: pulumi.Output<string>;
    /**
     * Workload deployment pattern name
     */
    public readonly deploymentPatternName!: pulumi.Output<string>;
    /**
     * Name of LaunchWizard deployment
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Resource Group Name created for LaunchWizard deployment
     */
    public /*out*/ readonly resourceGroup!: pulumi.Output<string>;
    /**
     * LaunchWizard deployment specifications
     */
    public readonly specifications!: pulumi.Output<{[key: string]: string}>;
    /**
     * Status of LaunchWizard deployment
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Tags for LaunchWizard deployment
     */
    public readonly tags!: pulumi.Output<outputs.LaunchwizardDeploymentTag[]>;
    /**
     * Workload Name for LaunchWizard deployment
     */
    public readonly workloadName!: pulumi.Output<string>;

    /**
     * Create a LaunchwizardDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LaunchwizardDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LaunchwizardDeploymentArgs | LaunchwizardDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LaunchwizardDeploymentState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deletedAt"] = state ? state.deletedAt : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["deploymentPatternName"] = state ? state.deploymentPatternName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroup"] = state ? state.resourceGroup : undefined;
            resourceInputs["specifications"] = state ? state.specifications : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workloadName"] = state ? state.workloadName : undefined;
        } else {
            const args = argsOrState as LaunchwizardDeploymentArgs | undefined;
            if ((!args || args.deploymentPatternName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentPatternName'");
            }
            if ((!args || args.specifications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'specifications'");
            }
            if ((!args || args.workloadName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workloadName'");
            }
            resourceInputs["deploymentPatternName"] = args ? args.deploymentPatternName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["specifications"] = args ? args.specifications : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workloadName"] = args ? args.workloadName : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["deletedAt"] = undefined /*out*/;
            resourceInputs["deploymentId"] = undefined /*out*/;
            resourceInputs["resourceGroup"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LaunchwizardDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LaunchwizardDeployment resources.
 */
export interface LaunchwizardDeploymentState {
    /**
     * ARN of the LaunchWizard deployment
     */
    arn?: pulumi.Input<string>;
    /**
     * Timestamp of LaunchWizard deployment creation
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Timestamp of LaunchWizard deployment deletion
     */
    deletedAt?: pulumi.Input<string>;
    /**
     * Deployment ID of the LaunchWizard deployment
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * Workload deployment pattern name
     */
    deploymentPatternName?: pulumi.Input<string>;
    /**
     * Name of LaunchWizard deployment
     */
    name?: pulumi.Input<string>;
    /**
     * Resource Group Name created for LaunchWizard deployment
     */
    resourceGroup?: pulumi.Input<string>;
    /**
     * LaunchWizard deployment specifications
     */
    specifications?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Status of LaunchWizard deployment
     */
    status?: pulumi.Input<string>;
    /**
     * Tags for LaunchWizard deployment
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LaunchwizardDeploymentTag>[]>;
    /**
     * Workload Name for LaunchWizard deployment
     */
    workloadName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LaunchwizardDeployment resource.
 */
export interface LaunchwizardDeploymentArgs {
    /**
     * Workload deployment pattern name
     */
    deploymentPatternName: pulumi.Input<string>;
    /**
     * Name of LaunchWizard deployment
     */
    name?: pulumi.Input<string>;
    /**
     * LaunchWizard deployment specifications
     */
    specifications: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tags for LaunchWizard deployment
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LaunchwizardDeploymentTag>[]>;
    /**
     * Workload Name for LaunchWizard deployment
     */
    workloadName: pulumi.Input<string>;
}
