// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkmanagerConnectPeer extends pulumi.CustomResource {
    /**
     * Get an existing NetworkmanagerConnectPeer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkmanagerConnectPeerState, opts?: pulumi.CustomResourceOptions): NetworkmanagerConnectPeer {
        return new NetworkmanagerConnectPeer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/networkmanagerConnectPeer:NetworkmanagerConnectPeer';

    /**
     * Returns true if the given object is an instance of NetworkmanagerConnectPeer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkmanagerConnectPeer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkmanagerConnectPeer.__pulumiType;
    }

    /**
     * Bgp options for connect peer.
     */
    public readonly bgpOptions!: pulumi.Output<outputs.NetworkmanagerConnectPeerBgpOptions>;
    /**
     * Configuration of the connect peer.
     */
    public /*out*/ readonly configuration!: pulumi.Output<outputs.NetworkmanagerConnectPeerConfiguration>;
    /**
     * The ID of the attachment to connect.
     */
    public readonly connectAttachmentId!: pulumi.Output<string>;
    /**
     * The ID of the Connect peer.
     */
    public /*out*/ readonly connectPeerId!: pulumi.Output<string>;
    /**
     * The IP address of a core network.
     */
    public readonly coreNetworkAddress!: pulumi.Output<string>;
    /**
     * The ID of the core network.
     */
    public /*out*/ readonly coreNetworkId!: pulumi.Output<string>;
    /**
     * Connect peer creation time.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The Connect peer Regions where edges are located.
     */
    public /*out*/ readonly edgeLocation!: pulumi.Output<string>;
    /**
     * The inside IP addresses used for a Connect peer configuration.
     */
    public readonly insideCidrBlocks!: pulumi.Output<string[]>;
    /**
     * The IP address of the Connect peer.
     */
    public readonly peerAddress!: pulumi.Output<string>;
    /**
     * State of the connect peer.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The subnet ARN for the connect peer.
     */
    public readonly subnetArn!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.NetworkmanagerConnectPeerTag[]>;

    /**
     * Create a NetworkmanagerConnectPeer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkmanagerConnectPeerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkmanagerConnectPeerArgs | NetworkmanagerConnectPeerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkmanagerConnectPeerState | undefined;
            resourceInputs["bgpOptions"] = state ? state.bgpOptions : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["connectAttachmentId"] = state ? state.connectAttachmentId : undefined;
            resourceInputs["connectPeerId"] = state ? state.connectPeerId : undefined;
            resourceInputs["coreNetworkAddress"] = state ? state.coreNetworkAddress : undefined;
            resourceInputs["coreNetworkId"] = state ? state.coreNetworkId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["edgeLocation"] = state ? state.edgeLocation : undefined;
            resourceInputs["insideCidrBlocks"] = state ? state.insideCidrBlocks : undefined;
            resourceInputs["peerAddress"] = state ? state.peerAddress : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetArn"] = state ? state.subnetArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as NetworkmanagerConnectPeerArgs | undefined;
            if ((!args || args.connectAttachmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectAttachmentId'");
            }
            if ((!args || args.peerAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerAddress'");
            }
            resourceInputs["bgpOptions"] = args ? args.bgpOptions : undefined;
            resourceInputs["connectAttachmentId"] = args ? args.connectAttachmentId : undefined;
            resourceInputs["coreNetworkAddress"] = args ? args.coreNetworkAddress : undefined;
            resourceInputs["insideCidrBlocks"] = args ? args.insideCidrBlocks : undefined;
            resourceInputs["peerAddress"] = args ? args.peerAddress : undefined;
            resourceInputs["subnetArn"] = args ? args.subnetArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["configuration"] = undefined /*out*/;
            resourceInputs["connectPeerId"] = undefined /*out*/;
            resourceInputs["coreNetworkId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["edgeLocation"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkmanagerConnectPeer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkmanagerConnectPeer resources.
 */
export interface NetworkmanagerConnectPeerState {
    /**
     * Bgp options for connect peer.
     */
    bgpOptions?: pulumi.Input<inputs.NetworkmanagerConnectPeerBgpOptions>;
    /**
     * Configuration of the connect peer.
     */
    configuration?: pulumi.Input<inputs.NetworkmanagerConnectPeerConfiguration>;
    /**
     * The ID of the attachment to connect.
     */
    connectAttachmentId?: pulumi.Input<string>;
    /**
     * The ID of the Connect peer.
     */
    connectPeerId?: pulumi.Input<string>;
    /**
     * The IP address of a core network.
     */
    coreNetworkAddress?: pulumi.Input<string>;
    /**
     * The ID of the core network.
     */
    coreNetworkId?: pulumi.Input<string>;
    /**
     * Connect peer creation time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The Connect peer Regions where edges are located.
     */
    edgeLocation?: pulumi.Input<string>;
    /**
     * The inside IP addresses used for a Connect peer configuration.
     */
    insideCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IP address of the Connect peer.
     */
    peerAddress?: pulumi.Input<string>;
    /**
     * State of the connect peer.
     */
    state?: pulumi.Input<string>;
    /**
     * The subnet ARN for the connect peer.
     */
    subnetArn?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerConnectPeerTag>[]>;
}

/**
 * The set of arguments for constructing a NetworkmanagerConnectPeer resource.
 */
export interface NetworkmanagerConnectPeerArgs {
    /**
     * Bgp options for connect peer.
     */
    bgpOptions?: pulumi.Input<inputs.NetworkmanagerConnectPeerBgpOptions>;
    /**
     * The ID of the attachment to connect.
     */
    connectAttachmentId: pulumi.Input<string>;
    /**
     * The IP address of a core network.
     */
    coreNetworkAddress?: pulumi.Input<string>;
    /**
     * The inside IP addresses used for a Connect peer configuration.
     */
    insideCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IP address of the Connect peer.
     */
    peerAddress: pulumi.Input<string>;
    /**
     * The subnet ARN for the connect peer.
     */
    subnetArn?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkmanagerConnectPeerTag>[]>;
}
