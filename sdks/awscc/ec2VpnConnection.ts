// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2VpnConnection extends pulumi.CustomResource {
    /**
     * Get an existing Ec2VpnConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2VpnConnectionState, opts?: pulumi.CustomResourceOptions): Ec2VpnConnection {
        return new Ec2VpnConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2VpnConnection:Ec2VpnConnection';

    /**
     * Returns true if the given object is an instance of Ec2VpnConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2VpnConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2VpnConnection.__pulumiType;
    }

    /**
     * The ID of the customer gateway at your end of the VPN connection.
     */
    public readonly customerGatewayId!: pulumi.Output<string>;
    /**
     * Indicate whether to enable acceleration for the VPN connection. Default: ``false``
     */
    public readonly enableAcceleration!: pulumi.Output<boolean>;
    public readonly localIpv4NetworkCidr!: pulumi.Output<string>;
    public readonly localIpv6NetworkCidr!: pulumi.Output<string>;
    public readonly outsideIpAddressType!: pulumi.Output<string>;
    public readonly remoteIpv4NetworkCidr!: pulumi.Output<string>;
    public readonly remoteIpv6NetworkCidr!: pulumi.Output<string>;
    /**
     * Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support
     * BGP. If you are creating a VPN connection for a device that does not support Border Gateway Protocol (BGP), you must
     * specify ``true``.
     */
    public readonly staticRoutesOnly!: pulumi.Output<boolean>;
    /**
     * Any tags assigned to the VPN connection.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2VpnConnectionTag[]>;
    /**
     * The ID of the transit gateway associated with the VPN connection. You must specify either ``TransitGatewayId`` or
     * ``VpnGatewayId``, but not both.
     */
    public readonly transitGatewayId!: pulumi.Output<string>;
    public readonly transportTransitGatewayAttachmentId!: pulumi.Output<string>;
    public readonly tunnelInsideIpVersion!: pulumi.Output<string>;
    /**
     * The type of VPN connection.
     */
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly vpnConnectionId!: pulumi.Output<string>;
    /**
     * The ID of the virtual private gateway at the AWS side of the VPN connection. You must specify either
     * ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
     */
    public readonly vpnGatewayId!: pulumi.Output<string>;
    /**
     * The tunnel options for the VPN connection.
     */
    public readonly vpnTunnelOptionsSpecifications!: pulumi.Output<outputs.Ec2VpnConnectionVpnTunnelOptionsSpecification[]>;

    /**
     * Create a Ec2VpnConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2VpnConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2VpnConnectionArgs | Ec2VpnConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2VpnConnectionState | undefined;
            resourceInputs["customerGatewayId"] = state ? state.customerGatewayId : undefined;
            resourceInputs["enableAcceleration"] = state ? state.enableAcceleration : undefined;
            resourceInputs["localIpv4NetworkCidr"] = state ? state.localIpv4NetworkCidr : undefined;
            resourceInputs["localIpv6NetworkCidr"] = state ? state.localIpv6NetworkCidr : undefined;
            resourceInputs["outsideIpAddressType"] = state ? state.outsideIpAddressType : undefined;
            resourceInputs["remoteIpv4NetworkCidr"] = state ? state.remoteIpv4NetworkCidr : undefined;
            resourceInputs["remoteIpv6NetworkCidr"] = state ? state.remoteIpv6NetworkCidr : undefined;
            resourceInputs["staticRoutesOnly"] = state ? state.staticRoutesOnly : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["transitGatewayId"] = state ? state.transitGatewayId : undefined;
            resourceInputs["transportTransitGatewayAttachmentId"] = state ? state.transportTransitGatewayAttachmentId : undefined;
            resourceInputs["tunnelInsideIpVersion"] = state ? state.tunnelInsideIpVersion : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vpnConnectionId"] = state ? state.vpnConnectionId : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
            resourceInputs["vpnTunnelOptionsSpecifications"] = state ? state.vpnTunnelOptionsSpecifications : undefined;
        } else {
            const args = argsOrState as Ec2VpnConnectionArgs | undefined;
            if ((!args || args.customerGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customerGatewayId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["customerGatewayId"] = args ? args.customerGatewayId : undefined;
            resourceInputs["enableAcceleration"] = args ? args.enableAcceleration : undefined;
            resourceInputs["localIpv4NetworkCidr"] = args ? args.localIpv4NetworkCidr : undefined;
            resourceInputs["localIpv6NetworkCidr"] = args ? args.localIpv6NetworkCidr : undefined;
            resourceInputs["outsideIpAddressType"] = args ? args.outsideIpAddressType : undefined;
            resourceInputs["remoteIpv4NetworkCidr"] = args ? args.remoteIpv4NetworkCidr : undefined;
            resourceInputs["remoteIpv6NetworkCidr"] = args ? args.remoteIpv6NetworkCidr : undefined;
            resourceInputs["staticRoutesOnly"] = args ? args.staticRoutesOnly : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transitGatewayId"] = args ? args.transitGatewayId : undefined;
            resourceInputs["transportTransitGatewayAttachmentId"] = args ? args.transportTransitGatewayAttachmentId : undefined;
            resourceInputs["tunnelInsideIpVersion"] = args ? args.tunnelInsideIpVersion : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            resourceInputs["vpnTunnelOptionsSpecifications"] = args ? args.vpnTunnelOptionsSpecifications : undefined;
            resourceInputs["vpnConnectionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2VpnConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2VpnConnection resources.
 */
export interface Ec2VpnConnectionState {
    /**
     * The ID of the customer gateway at your end of the VPN connection.
     */
    customerGatewayId?: pulumi.Input<string>;
    /**
     * Indicate whether to enable acceleration for the VPN connection. Default: ``false``
     */
    enableAcceleration?: pulumi.Input<boolean>;
    localIpv4NetworkCidr?: pulumi.Input<string>;
    localIpv6NetworkCidr?: pulumi.Input<string>;
    outsideIpAddressType?: pulumi.Input<string>;
    remoteIpv4NetworkCidr?: pulumi.Input<string>;
    remoteIpv6NetworkCidr?: pulumi.Input<string>;
    /**
     * Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support
     * BGP. If you are creating a VPN connection for a device that does not support Border Gateway Protocol (BGP), you must
     * specify ``true``.
     */
    staticRoutesOnly?: pulumi.Input<boolean>;
    /**
     * Any tags assigned to the VPN connection.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2VpnConnectionTag>[]>;
    /**
     * The ID of the transit gateway associated with the VPN connection. You must specify either ``TransitGatewayId`` or
     * ``VpnGatewayId``, but not both.
     */
    transitGatewayId?: pulumi.Input<string>;
    transportTransitGatewayAttachmentId?: pulumi.Input<string>;
    tunnelInsideIpVersion?: pulumi.Input<string>;
    /**
     * The type of VPN connection.
     */
    type?: pulumi.Input<string>;
    vpnConnectionId?: pulumi.Input<string>;
    /**
     * The ID of the virtual private gateway at the AWS side of the VPN connection. You must specify either
     * ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
     */
    vpnGatewayId?: pulumi.Input<string>;
    /**
     * The tunnel options for the VPN connection.
     */
    vpnTunnelOptionsSpecifications?: pulumi.Input<pulumi.Input<inputs.Ec2VpnConnectionVpnTunnelOptionsSpecification>[]>;
}

/**
 * The set of arguments for constructing a Ec2VpnConnection resource.
 */
export interface Ec2VpnConnectionArgs {
    /**
     * The ID of the customer gateway at your end of the VPN connection.
     */
    customerGatewayId: pulumi.Input<string>;
    /**
     * Indicate whether to enable acceleration for the VPN connection. Default: ``false``
     */
    enableAcceleration?: pulumi.Input<boolean>;
    localIpv4NetworkCidr?: pulumi.Input<string>;
    localIpv6NetworkCidr?: pulumi.Input<string>;
    outsideIpAddressType?: pulumi.Input<string>;
    remoteIpv4NetworkCidr?: pulumi.Input<string>;
    remoteIpv6NetworkCidr?: pulumi.Input<string>;
    /**
     * Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support
     * BGP. If you are creating a VPN connection for a device that does not support Border Gateway Protocol (BGP), you must
     * specify ``true``.
     */
    staticRoutesOnly?: pulumi.Input<boolean>;
    /**
     * Any tags assigned to the VPN connection.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2VpnConnectionTag>[]>;
    /**
     * The ID of the transit gateway associated with the VPN connection. You must specify either ``TransitGatewayId`` or
     * ``VpnGatewayId``, but not both.
     */
    transitGatewayId?: pulumi.Input<string>;
    transportTransitGatewayAttachmentId?: pulumi.Input<string>;
    tunnelInsideIpVersion?: pulumi.Input<string>;
    /**
     * The type of VPN connection.
     */
    type: pulumi.Input<string>;
    /**
     * The ID of the virtual private gateway at the AWS side of the VPN connection. You must specify either
     * ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
     */
    vpnGatewayId?: pulumi.Input<string>;
    /**
     * The tunnel options for the VPN connection.
     */
    vpnTunnelOptionsSpecifications?: pulumi.Input<pulumi.Input<inputs.Ec2VpnConnectionVpnTunnelOptionsSpecification>[]>;
}
