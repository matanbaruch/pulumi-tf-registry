// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAppstreamImageBuilder(args: GetAppstreamImageBuilderArgs, opts?: pulumi.InvokeOptions): Promise<GetAppstreamImageBuilderResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getAppstreamImageBuilder:getAppstreamImageBuilder", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAppstreamImageBuilder.
 */
export interface GetAppstreamImageBuilderArgs {
    id: string;
}

/**
 * A collection of values returned by getAppstreamImageBuilder.
 */
export interface GetAppstreamImageBuilderResult {
    readonly accessEndpoints: outputs.GetAppstreamImageBuilderAccessEndpoint[];
    readonly appstreamAgentVersion: string;
    readonly description: string;
    readonly displayName: string;
    readonly domainJoinInfo: outputs.GetAppstreamImageBuilderDomainJoinInfo;
    readonly enableDefaultInternetAccess: boolean;
    readonly iamRoleArn: string;
    readonly id: string;
    readonly imageArn: string;
    readonly imageName: string;
    readonly instanceType: string;
    readonly name: string;
    readonly streamingUrl: string;
    readonly tags: outputs.GetAppstreamImageBuilderTag[];
    readonly vpcConfig: outputs.GetAppstreamImageBuilderVpcConfig;
}
export function getAppstreamImageBuilderOutput(args: GetAppstreamImageBuilderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppstreamImageBuilderResult> {
    return pulumi.output(args).apply((a: any) => getAppstreamImageBuilder(a, opts))
}

/**
 * A collection of arguments for invoking getAppstreamImageBuilder.
 */
export interface GetAppstreamImageBuilderOutputArgs {
    id: pulumi.Input<string>;
}
