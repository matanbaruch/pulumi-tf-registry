// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LambdaCodeSigningConfig extends pulumi.CustomResource {
    /**
     * Get an existing LambdaCodeSigningConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LambdaCodeSigningConfigState, opts?: pulumi.CustomResourceOptions): LambdaCodeSigningConfig {
        return new LambdaCodeSigningConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lambdaCodeSigningConfig:LambdaCodeSigningConfig';

    /**
     * Returns true if the given object is an instance of LambdaCodeSigningConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LambdaCodeSigningConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LambdaCodeSigningConfig.__pulumiType;
    }

    /**
     * When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by
     * profiles from this list
     */
    public readonly allowedPublishers!: pulumi.Output<outputs.LambdaCodeSigningConfigAllowedPublishers>;
    /**
     * A unique Arn for CodeSigningConfig resource
     */
    public /*out*/ readonly codeSigningConfigArn!: pulumi.Output<string>;
    /**
     * A unique identifier for CodeSigningConfig resource
     */
    public /*out*/ readonly codeSigningConfigId!: pulumi.Output<string>;
    /**
     * Policies to control how to act if a signature is invalid
     */
    public readonly codeSigningPolicies!: pulumi.Output<outputs.LambdaCodeSigningConfigCodeSigningPolicies>;
    /**
     * A description of the CodeSigningConfig
     */
    public readonly description!: pulumi.Output<string>;

    /**
     * Create a LambdaCodeSigningConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LambdaCodeSigningConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LambdaCodeSigningConfigArgs | LambdaCodeSigningConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LambdaCodeSigningConfigState | undefined;
            resourceInputs["allowedPublishers"] = state ? state.allowedPublishers : undefined;
            resourceInputs["codeSigningConfigArn"] = state ? state.codeSigningConfigArn : undefined;
            resourceInputs["codeSigningConfigId"] = state ? state.codeSigningConfigId : undefined;
            resourceInputs["codeSigningPolicies"] = state ? state.codeSigningPolicies : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
        } else {
            const args = argsOrState as LambdaCodeSigningConfigArgs | undefined;
            if ((!args || args.allowedPublishers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowedPublishers'");
            }
            resourceInputs["allowedPublishers"] = args ? args.allowedPublishers : undefined;
            resourceInputs["codeSigningPolicies"] = args ? args.codeSigningPolicies : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["codeSigningConfigArn"] = undefined /*out*/;
            resourceInputs["codeSigningConfigId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LambdaCodeSigningConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LambdaCodeSigningConfig resources.
 */
export interface LambdaCodeSigningConfigState {
    /**
     * When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by
     * profiles from this list
     */
    allowedPublishers?: pulumi.Input<inputs.LambdaCodeSigningConfigAllowedPublishers>;
    /**
     * A unique Arn for CodeSigningConfig resource
     */
    codeSigningConfigArn?: pulumi.Input<string>;
    /**
     * A unique identifier for CodeSigningConfig resource
     */
    codeSigningConfigId?: pulumi.Input<string>;
    /**
     * Policies to control how to act if a signature is invalid
     */
    codeSigningPolicies?: pulumi.Input<inputs.LambdaCodeSigningConfigCodeSigningPolicies>;
    /**
     * A description of the CodeSigningConfig
     */
    description?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LambdaCodeSigningConfig resource.
 */
export interface LambdaCodeSigningConfigArgs {
    /**
     * When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by
     * profiles from this list
     */
    allowedPublishers: pulumi.Input<inputs.LambdaCodeSigningConfigAllowedPublishers>;
    /**
     * Policies to control how to act if a signature is invalid
     */
    codeSigningPolicies?: pulumi.Input<inputs.LambdaCodeSigningConfigCodeSigningPolicies>;
    /**
     * A description of the CodeSigningConfig
     */
    description?: pulumi.Input<string>;
}
