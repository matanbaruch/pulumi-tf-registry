// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatasyncTask extends pulumi.CustomResource {
    /**
     * Get an existing DatasyncTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasyncTaskState, opts?: pulumi.CustomResourceOptions): DatasyncTask {
        return new DatasyncTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/datasyncTask:DatasyncTask';

    /**
     * Returns true if the given object is an instance of DatasyncTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasyncTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasyncTask.__pulumiType;
    }

    /**
     * The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
     */
    public readonly cloudwatchLogGroupArn!: pulumi.Output<string>;
    /**
     * The ARN of an AWS storage resource's location.
     */
    public readonly destinationLocationArn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Names (ARNs) of the destination ENIs (Elastic Network Interfaces) that were created for your subnet.
     */
    public /*out*/ readonly destinationNetworkInterfaceArns!: pulumi.Output<string[]>;
    public readonly excludes!: pulumi.Output<outputs.DatasyncTaskExclude[]>;
    public readonly includes!: pulumi.Output<outputs.DatasyncTaskInclude[]>;
    /**
     * Configures a manifest, which is a list of files or objects that you want DataSync to transfer.
     */
    public readonly manifestConfig!: pulumi.Output<outputs.DatasyncTaskManifestConfig>;
    /**
     * The name of a task. This value is a text reference that is used to identify the task in the console.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Represents the options that are available to control the behavior of a StartTaskExecution operation.
     */
    public readonly options!: pulumi.Output<outputs.DatasyncTaskOptions>;
    /**
     * Specifies the schedule you want your task to use for repeated executions.
     */
    public readonly schedule!: pulumi.Output<outputs.DatasyncTaskSchedule>;
    /**
     * The ARN of the source location for the task.
     */
    public readonly sourceLocationArn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Names (ARNs) of the source ENIs (Elastic Network Interfaces) that were created for your subnet.
     */
    public /*out*/ readonly sourceNetworkInterfaceArns!: pulumi.Output<string[]>;
    /**
     * The status of the task that was described.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.DatasyncTaskTag[]>;
    /**
     * The ARN of the task.
     */
    public /*out*/ readonly taskArn!: pulumi.Output<string>;
    /**
     * Specifies how you want to configure a task report, which provides detailed information about for your Datasync transfer.
     */
    public readonly taskReportConfig!: pulumi.Output<outputs.DatasyncTaskTaskReportConfig>;

    /**
     * Create a DatasyncTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasyncTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasyncTaskArgs | DatasyncTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasyncTaskState | undefined;
            resourceInputs["cloudwatchLogGroupArn"] = state ? state.cloudwatchLogGroupArn : undefined;
            resourceInputs["destinationLocationArn"] = state ? state.destinationLocationArn : undefined;
            resourceInputs["destinationNetworkInterfaceArns"] = state ? state.destinationNetworkInterfaceArns : undefined;
            resourceInputs["excludes"] = state ? state.excludes : undefined;
            resourceInputs["includes"] = state ? state.includes : undefined;
            resourceInputs["manifestConfig"] = state ? state.manifestConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["sourceLocationArn"] = state ? state.sourceLocationArn : undefined;
            resourceInputs["sourceNetworkInterfaceArns"] = state ? state.sourceNetworkInterfaceArns : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taskArn"] = state ? state.taskArn : undefined;
            resourceInputs["taskReportConfig"] = state ? state.taskReportConfig : undefined;
        } else {
            const args = argsOrState as DatasyncTaskArgs | undefined;
            if ((!args || args.destinationLocationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationLocationArn'");
            }
            if ((!args || args.sourceLocationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceLocationArn'");
            }
            resourceInputs["cloudwatchLogGroupArn"] = args ? args.cloudwatchLogGroupArn : undefined;
            resourceInputs["destinationLocationArn"] = args ? args.destinationLocationArn : undefined;
            resourceInputs["excludes"] = args ? args.excludes : undefined;
            resourceInputs["includes"] = args ? args.includes : undefined;
            resourceInputs["manifestConfig"] = args ? args.manifestConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["sourceLocationArn"] = args ? args.sourceLocationArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taskReportConfig"] = args ? args.taskReportConfig : undefined;
            resourceInputs["destinationNetworkInterfaceArns"] = undefined /*out*/;
            resourceInputs["sourceNetworkInterfaceArns"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["taskArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasyncTask.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatasyncTask resources.
 */
export interface DatasyncTaskState {
    /**
     * The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
     */
    cloudwatchLogGroupArn?: pulumi.Input<string>;
    /**
     * The ARN of an AWS storage resource's location.
     */
    destinationLocationArn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Names (ARNs) of the destination ENIs (Elastic Network Interfaces) that were created for your subnet.
     */
    destinationNetworkInterfaceArns?: pulumi.Input<pulumi.Input<string>[]>;
    excludes?: pulumi.Input<pulumi.Input<inputs.DatasyncTaskExclude>[]>;
    includes?: pulumi.Input<pulumi.Input<inputs.DatasyncTaskInclude>[]>;
    /**
     * Configures a manifest, which is a list of files or objects that you want DataSync to transfer.
     */
    manifestConfig?: pulumi.Input<inputs.DatasyncTaskManifestConfig>;
    /**
     * The name of a task. This value is a text reference that is used to identify the task in the console.
     */
    name?: pulumi.Input<string>;
    /**
     * Represents the options that are available to control the behavior of a StartTaskExecution operation.
     */
    options?: pulumi.Input<inputs.DatasyncTaskOptions>;
    /**
     * Specifies the schedule you want your task to use for repeated executions.
     */
    schedule?: pulumi.Input<inputs.DatasyncTaskSchedule>;
    /**
     * The ARN of the source location for the task.
     */
    sourceLocationArn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Names (ARNs) of the source ENIs (Elastic Network Interfaces) that were created for your subnet.
     */
    sourceNetworkInterfaceArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of the task that was described.
     */
    status?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DatasyncTaskTag>[]>;
    /**
     * The ARN of the task.
     */
    taskArn?: pulumi.Input<string>;
    /**
     * Specifies how you want to configure a task report, which provides detailed information about for your Datasync transfer.
     */
    taskReportConfig?: pulumi.Input<inputs.DatasyncTaskTaskReportConfig>;
}

/**
 * The set of arguments for constructing a DatasyncTask resource.
 */
export interface DatasyncTaskArgs {
    /**
     * The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
     */
    cloudwatchLogGroupArn?: pulumi.Input<string>;
    /**
     * The ARN of an AWS storage resource's location.
     */
    destinationLocationArn: pulumi.Input<string>;
    excludes?: pulumi.Input<pulumi.Input<inputs.DatasyncTaskExclude>[]>;
    includes?: pulumi.Input<pulumi.Input<inputs.DatasyncTaskInclude>[]>;
    /**
     * Configures a manifest, which is a list of files or objects that you want DataSync to transfer.
     */
    manifestConfig?: pulumi.Input<inputs.DatasyncTaskManifestConfig>;
    /**
     * The name of a task. This value is a text reference that is used to identify the task in the console.
     */
    name?: pulumi.Input<string>;
    /**
     * Represents the options that are available to control the behavior of a StartTaskExecution operation.
     */
    options?: pulumi.Input<inputs.DatasyncTaskOptions>;
    /**
     * Specifies the schedule you want your task to use for repeated executions.
     */
    schedule?: pulumi.Input<inputs.DatasyncTaskSchedule>;
    /**
     * The ARN of the source location for the task.
     */
    sourceLocationArn: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DatasyncTaskTag>[]>;
    /**
     * Specifies how you want to configure a task report, which provides detailed information about for your Datasync transfer.
     */
    taskReportConfig?: pulumi.Input<inputs.DatasyncTaskTaskReportConfig>;
}
