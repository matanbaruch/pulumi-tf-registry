// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabrewJob extends pulumi.CustomResource {
    /**
     * Get an existing DatabrewJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabrewJobState, opts?: pulumi.CustomResourceOptions): DatabrewJob {
        return new DatabrewJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/databrewJob:DatabrewJob';

    /**
     * Returns true if the given object is an instance of DatabrewJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabrewJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabrewJob.__pulumiType;
    }

    public readonly dataCatalogOutputs!: pulumi.Output<outputs.DatabrewJobDataCatalogOutput[]>;
    public readonly databaseOutputs!: pulumi.Output<outputs.DatabrewJobDatabaseOutput[]>;
    /**
     * Dataset name
     */
    public readonly datasetName!: pulumi.Output<string>;
    /**
     * Encryption Key Arn
     */
    public readonly encryptionKeyArn!: pulumi.Output<string>;
    /**
     * Encryption mode
     */
    public readonly encryptionMode!: pulumi.Output<string>;
    /**
     * Job Sample
     */
    public readonly jobSample!: pulumi.Output<outputs.DatabrewJobJobSample>;
    /**
     * Log subscription
     */
    public readonly logSubscription!: pulumi.Output<string>;
    /**
     * Max capacity
     */
    public readonly maxCapacity!: pulumi.Output<number>;
    /**
     * Max retries
     */
    public readonly maxRetries!: pulumi.Output<number>;
    /**
     * Job name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Output location
     */
    public readonly outputLocation!: pulumi.Output<outputs.DatabrewJobOutputLocation>;
    public readonly outputs!: pulumi.Output<outputs.DatabrewJobOutput[]>;
    /**
     * Profile Job configuration
     */
    public readonly profileConfiguration!: pulumi.Output<outputs.DatabrewJobProfileConfiguration>;
    /**
     * Project name
     */
    public readonly projectName!: pulumi.Output<string>;
    public readonly recipe!: pulumi.Output<outputs.DatabrewJobRecipe>;
    /**
     * Role arn
     */
    public readonly roleArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.DatabrewJobTag[]>;
    /**
     * Timeout
     */
    public readonly timeout!: pulumi.Output<number>;
    /**
     * Job type
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Data quality rules configuration
     */
    public readonly validationConfigurations!: pulumi.Output<outputs.DatabrewJobValidationConfiguration[]>;

    /**
     * Create a DatabrewJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabrewJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabrewJobArgs | DatabrewJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabrewJobState | undefined;
            resourceInputs["dataCatalogOutputs"] = state ? state.dataCatalogOutputs : undefined;
            resourceInputs["databaseOutputs"] = state ? state.databaseOutputs : undefined;
            resourceInputs["datasetName"] = state ? state.datasetName : undefined;
            resourceInputs["encryptionKeyArn"] = state ? state.encryptionKeyArn : undefined;
            resourceInputs["encryptionMode"] = state ? state.encryptionMode : undefined;
            resourceInputs["jobSample"] = state ? state.jobSample : undefined;
            resourceInputs["logSubscription"] = state ? state.logSubscription : undefined;
            resourceInputs["maxCapacity"] = state ? state.maxCapacity : undefined;
            resourceInputs["maxRetries"] = state ? state.maxRetries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputLocation"] = state ? state.outputLocation : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["profileConfiguration"] = state ? state.profileConfiguration : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["recipe"] = state ? state.recipe : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validationConfigurations"] = state ? state.validationConfigurations : undefined;
        } else {
            const args = argsOrState as DatabrewJobArgs | undefined;
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["dataCatalogOutputs"] = args ? args.dataCatalogOutputs : undefined;
            resourceInputs["databaseOutputs"] = args ? args.databaseOutputs : undefined;
            resourceInputs["datasetName"] = args ? args.datasetName : undefined;
            resourceInputs["encryptionKeyArn"] = args ? args.encryptionKeyArn : undefined;
            resourceInputs["encryptionMode"] = args ? args.encryptionMode : undefined;
            resourceInputs["jobSample"] = args ? args.jobSample : undefined;
            resourceInputs["logSubscription"] = args ? args.logSubscription : undefined;
            resourceInputs["maxCapacity"] = args ? args.maxCapacity : undefined;
            resourceInputs["maxRetries"] = args ? args.maxRetries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outputLocation"] = args ? args.outputLocation : undefined;
            resourceInputs["outputs"] = args ? args.outputs : undefined;
            resourceInputs["profileConfiguration"] = args ? args.profileConfiguration : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["recipe"] = args ? args.recipe : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["validationConfigurations"] = args ? args.validationConfigurations : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabrewJob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabrewJob resources.
 */
export interface DatabrewJobState {
    dataCatalogOutputs?: pulumi.Input<pulumi.Input<inputs.DatabrewJobDataCatalogOutput>[]>;
    databaseOutputs?: pulumi.Input<pulumi.Input<inputs.DatabrewJobDatabaseOutput>[]>;
    /**
     * Dataset name
     */
    datasetName?: pulumi.Input<string>;
    /**
     * Encryption Key Arn
     */
    encryptionKeyArn?: pulumi.Input<string>;
    /**
     * Encryption mode
     */
    encryptionMode?: pulumi.Input<string>;
    /**
     * Job Sample
     */
    jobSample?: pulumi.Input<inputs.DatabrewJobJobSample>;
    /**
     * Log subscription
     */
    logSubscription?: pulumi.Input<string>;
    /**
     * Max capacity
     */
    maxCapacity?: pulumi.Input<number>;
    /**
     * Max retries
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Job name
     */
    name?: pulumi.Input<string>;
    /**
     * Output location
     */
    outputLocation?: pulumi.Input<inputs.DatabrewJobOutputLocation>;
    outputs?: pulumi.Input<pulumi.Input<inputs.DatabrewJobOutput>[]>;
    /**
     * Profile Job configuration
     */
    profileConfiguration?: pulumi.Input<inputs.DatabrewJobProfileConfiguration>;
    /**
     * Project name
     */
    projectName?: pulumi.Input<string>;
    recipe?: pulumi.Input<inputs.DatabrewJobRecipe>;
    /**
     * Role arn
     */
    roleArn?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.DatabrewJobTag>[]>;
    /**
     * Timeout
     */
    timeout?: pulumi.Input<number>;
    /**
     * Job type
     */
    type?: pulumi.Input<string>;
    /**
     * Data quality rules configuration
     */
    validationConfigurations?: pulumi.Input<pulumi.Input<inputs.DatabrewJobValidationConfiguration>[]>;
}

/**
 * The set of arguments for constructing a DatabrewJob resource.
 */
export interface DatabrewJobArgs {
    dataCatalogOutputs?: pulumi.Input<pulumi.Input<inputs.DatabrewJobDataCatalogOutput>[]>;
    databaseOutputs?: pulumi.Input<pulumi.Input<inputs.DatabrewJobDatabaseOutput>[]>;
    /**
     * Dataset name
     */
    datasetName?: pulumi.Input<string>;
    /**
     * Encryption Key Arn
     */
    encryptionKeyArn?: pulumi.Input<string>;
    /**
     * Encryption mode
     */
    encryptionMode?: pulumi.Input<string>;
    /**
     * Job Sample
     */
    jobSample?: pulumi.Input<inputs.DatabrewJobJobSample>;
    /**
     * Log subscription
     */
    logSubscription?: pulumi.Input<string>;
    /**
     * Max capacity
     */
    maxCapacity?: pulumi.Input<number>;
    /**
     * Max retries
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Job name
     */
    name?: pulumi.Input<string>;
    /**
     * Output location
     */
    outputLocation?: pulumi.Input<inputs.DatabrewJobOutputLocation>;
    outputs?: pulumi.Input<pulumi.Input<inputs.DatabrewJobOutput>[]>;
    /**
     * Profile Job configuration
     */
    profileConfiguration?: pulumi.Input<inputs.DatabrewJobProfileConfiguration>;
    /**
     * Project name
     */
    projectName?: pulumi.Input<string>;
    recipe?: pulumi.Input<inputs.DatabrewJobRecipe>;
    /**
     * Role arn
     */
    roleArn: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.DatabrewJobTag>[]>;
    /**
     * Timeout
     */
    timeout?: pulumi.Input<number>;
    /**
     * Job type
     */
    type: pulumi.Input<string>;
    /**
     * Data quality rules configuration
     */
    validationConfigurations?: pulumi.Input<pulumi.Input<inputs.DatabrewJobValidationConfiguration>[]>;
}
