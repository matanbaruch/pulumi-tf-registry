// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppintegrationsApplication extends pulumi.CustomResource {
    /**
     * Get an existing AppintegrationsApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppintegrationsApplicationState, opts?: pulumi.CustomResourceOptions): AppintegrationsApplication {
        return new AppintegrationsApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/appintegrationsApplication:AppintegrationsApplication';

    /**
     * Returns true if the given object is an instance of AppintegrationsApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppintegrationsApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppintegrationsApplication.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the application.
     */
    public /*out*/ readonly applicationArn!: pulumi.Output<string>;
    /**
     * The id of the application.
     */
    public /*out*/ readonly applicationId!: pulumi.Output<string>;
    /**
     * Application source config
     */
    public readonly applicationSourceConfig!: pulumi.Output<outputs.AppintegrationsApplicationApplicationSourceConfig>;
    /**
     * The application description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name of the application.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace of the application.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * The configuration of events or requests that the application has access to.
     */
    public readonly permissions!: pulumi.Output<string[]>;
    /**
     * The tags (keys and values) associated with the application.
     */
    public readonly tags!: pulumi.Output<outputs.AppintegrationsApplicationTag[]>;

    /**
     * Create a AppintegrationsApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppintegrationsApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppintegrationsApplicationArgs | AppintegrationsApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppintegrationsApplicationState | undefined;
            resourceInputs["applicationArn"] = state ? state.applicationArn : undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["applicationSourceConfig"] = state ? state.applicationSourceConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as AppintegrationsApplicationArgs | undefined;
            if ((!args || args.applicationSourceConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationSourceConfig'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["applicationSourceConfig"] = args ? args.applicationSourceConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["applicationArn"] = undefined /*out*/;
            resourceInputs["applicationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppintegrationsApplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppintegrationsApplication resources.
 */
export interface AppintegrationsApplicationState {
    /**
     * The Amazon Resource Name (ARN) of the application.
     */
    applicationArn?: pulumi.Input<string>;
    /**
     * The id of the application.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Application source config
     */
    applicationSourceConfig?: pulumi.Input<inputs.AppintegrationsApplicationApplicationSourceConfig>;
    /**
     * The application description.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the application.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace of the application.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The configuration of events or requests that the application has access to.
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tags (keys and values) associated with the application.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AppintegrationsApplicationTag>[]>;
}

/**
 * The set of arguments for constructing a AppintegrationsApplication resource.
 */
export interface AppintegrationsApplicationArgs {
    /**
     * Application source config
     */
    applicationSourceConfig: pulumi.Input<inputs.AppintegrationsApplicationApplicationSourceConfig>;
    /**
     * The application description.
     */
    description: pulumi.Input<string>;
    /**
     * The name of the application.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace of the application.
     */
    namespace: pulumi.Input<string>;
    /**
     * The configuration of events or requests that the application has access to.
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tags (keys and values) associated with the application.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AppintegrationsApplicationTag>[]>;
}
