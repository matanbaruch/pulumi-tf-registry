// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudformationModuleVersion extends pulumi.CustomResource {
    /**
     * Get an existing CloudformationModuleVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudformationModuleVersionState, opts?: pulumi.CustomResourceOptions): CloudformationModuleVersion {
        return new CloudformationModuleVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/cloudformationModuleVersion:CloudformationModuleVersion';

    /**
     * Returns true if the given object is an instance of CloudformationModuleVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudformationModuleVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudformationModuleVersion.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the module.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The description of the registered module.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The URL of a page providing detailed documentation for this module.
     */
    public /*out*/ readonly documentationUrl!: pulumi.Output<string>;
    /**
     * Indicator of whether this module version is the current default version
     */
    public /*out*/ readonly isDefaultVersion!: pulumi.Output<boolean>;
    /**
     * The name of the module being registered. Recommended module naming pattern:
     * company_or_organization::service::type::MODULE.
     */
    public readonly moduleName!: pulumi.Output<string>;
    /**
     * The url to the S3 bucket containing the schema and template fragment for the module you want to register.
     */
    public readonly modulePackage!: pulumi.Output<string>;
    /**
     * The schema defining input parameters to and resources generated by the module.
     */
    public /*out*/ readonly schema!: pulumi.Output<string>;
    /**
     * The time that the specified module version was registered.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The version ID of the module represented by this module instance.
     */
    public /*out*/ readonly versionId!: pulumi.Output<string>;
    /**
     * The scope at which the type is visible and usable in CloudFormation operations. The only allowed value at present is:
     * PRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation
     * marks any types you register as PRIVATE.
     */
    public /*out*/ readonly visibility!: pulumi.Output<string>;

    /**
     * Create a CloudformationModuleVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudformationModuleVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudformationModuleVersionArgs | CloudformationModuleVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudformationModuleVersionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["documentationUrl"] = state ? state.documentationUrl : undefined;
            resourceInputs["isDefaultVersion"] = state ? state.isDefaultVersion : undefined;
            resourceInputs["moduleName"] = state ? state.moduleName : undefined;
            resourceInputs["modulePackage"] = state ? state.modulePackage : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as CloudformationModuleVersionArgs | undefined;
            if ((!args || args.moduleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'moduleName'");
            }
            if ((!args || args.modulePackage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modulePackage'");
            }
            resourceInputs["moduleName"] = args ? args.moduleName : undefined;
            resourceInputs["modulePackage"] = args ? args.modulePackage : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["documentationUrl"] = undefined /*out*/;
            resourceInputs["isDefaultVersion"] = undefined /*out*/;
            resourceInputs["schema"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudformationModuleVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudformationModuleVersion resources.
 */
export interface CloudformationModuleVersionState {
    /**
     * The Amazon Resource Name (ARN) of the module.
     */
    arn?: pulumi.Input<string>;
    /**
     * The description of the registered module.
     */
    description?: pulumi.Input<string>;
    /**
     * The URL of a page providing detailed documentation for this module.
     */
    documentationUrl?: pulumi.Input<string>;
    /**
     * Indicator of whether this module version is the current default version
     */
    isDefaultVersion?: pulumi.Input<boolean>;
    /**
     * The name of the module being registered. Recommended module naming pattern:
     * company_or_organization::service::type::MODULE.
     */
    moduleName?: pulumi.Input<string>;
    /**
     * The url to the S3 bucket containing the schema and template fragment for the module you want to register.
     */
    modulePackage?: pulumi.Input<string>;
    /**
     * The schema defining input parameters to and resources generated by the module.
     */
    schema?: pulumi.Input<string>;
    /**
     * The time that the specified module version was registered.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The version ID of the module represented by this module instance.
     */
    versionId?: pulumi.Input<string>;
    /**
     * The scope at which the type is visible and usable in CloudFormation operations. The only allowed value at present is:
     * PRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation
     * marks any types you register as PRIVATE.
     */
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudformationModuleVersion resource.
 */
export interface CloudformationModuleVersionArgs {
    /**
     * The name of the module being registered. Recommended module naming pattern:
     * company_or_organization::service::type::MODULE.
     */
    moduleName: pulumi.Input<string>;
    /**
     * The url to the S3 bucket containing the schema and template fragment for the module you want to register.
     */
    modulePackage: pulumi.Input<string>;
}
