// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NimblestudioStudio extends pulumi.CustomResource {
    /**
     * Get an existing NimblestudioStudio resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NimblestudioStudioState, opts?: pulumi.CustomResourceOptions): NimblestudioStudio {
        return new NimblestudioStudio(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/nimblestudioStudio:NimblestudioStudio';

    /**
     * Returns true if the given object is an instance of NimblestudioStudio.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NimblestudioStudio {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NimblestudioStudio.__pulumiType;
    }

    /**
     * <p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.</p>
     */
    public readonly adminRoleArn!: pulumi.Output<string>;
    /**
     * <p>A friendly name for the studio.</p>
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * <p>The Amazon Web Services Region where the studio resource is located.</p>
     */
    public /*out*/ readonly homeRegion!: pulumi.Output<string>;
    /**
     * <p>The Amazon Web Services SSO application client ID used to integrate with Amazon Web Services SSO to enable Amazon Web
     * Services SSO users to log in to Nimble Studio portal.</p>
     */
    public /*out*/ readonly ssoClientId!: pulumi.Output<string>;
    /**
     * <p>Configuration of the encryption method that is used for the studio.</p>
     */
    public readonly studioEncryptionConfiguration!: pulumi.Output<outputs.NimblestudioStudioStudioEncryptionConfiguration>;
    public /*out*/ readonly studioId!: pulumi.Output<string>;
    /**
     * <p>The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.</p>
     */
    public readonly studioName!: pulumi.Output<string>;
    /**
     * <p>The address of the web page for the studio.</p>
     */
    public /*out*/ readonly studioUrl!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * <p>The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.</p>
     */
    public readonly userRoleArn!: pulumi.Output<string>;

    /**
     * Create a NimblestudioStudio resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NimblestudioStudioArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NimblestudioStudioArgs | NimblestudioStudioState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NimblestudioStudioState | undefined;
            resourceInputs["adminRoleArn"] = state ? state.adminRoleArn : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["homeRegion"] = state ? state.homeRegion : undefined;
            resourceInputs["ssoClientId"] = state ? state.ssoClientId : undefined;
            resourceInputs["studioEncryptionConfiguration"] = state ? state.studioEncryptionConfiguration : undefined;
            resourceInputs["studioId"] = state ? state.studioId : undefined;
            resourceInputs["studioName"] = state ? state.studioName : undefined;
            resourceInputs["studioUrl"] = state ? state.studioUrl : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userRoleArn"] = state ? state.userRoleArn : undefined;
        } else {
            const args = argsOrState as NimblestudioStudioArgs | undefined;
            if ((!args || args.adminRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminRoleArn'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.studioName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'studioName'");
            }
            if ((!args || args.userRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userRoleArn'");
            }
            resourceInputs["adminRoleArn"] = args ? args.adminRoleArn : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["studioEncryptionConfiguration"] = args ? args.studioEncryptionConfiguration : undefined;
            resourceInputs["studioName"] = args ? args.studioName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userRoleArn"] = args ? args.userRoleArn : undefined;
            resourceInputs["homeRegion"] = undefined /*out*/;
            resourceInputs["ssoClientId"] = undefined /*out*/;
            resourceInputs["studioId"] = undefined /*out*/;
            resourceInputs["studioUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NimblestudioStudio.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NimblestudioStudio resources.
 */
export interface NimblestudioStudioState {
    /**
     * <p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.</p>
     */
    adminRoleArn?: pulumi.Input<string>;
    /**
     * <p>A friendly name for the studio.</p>
     */
    displayName?: pulumi.Input<string>;
    /**
     * <p>The Amazon Web Services Region where the studio resource is located.</p>
     */
    homeRegion?: pulumi.Input<string>;
    /**
     * <p>The Amazon Web Services SSO application client ID used to integrate with Amazon Web Services SSO to enable Amazon Web
     * Services SSO users to log in to Nimble Studio portal.</p>
     */
    ssoClientId?: pulumi.Input<string>;
    /**
     * <p>Configuration of the encryption method that is used for the studio.</p>
     */
    studioEncryptionConfiguration?: pulumi.Input<inputs.NimblestudioStudioStudioEncryptionConfiguration>;
    studioId?: pulumi.Input<string>;
    /**
     * <p>The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.</p>
     */
    studioName?: pulumi.Input<string>;
    /**
     * <p>The address of the web page for the studio.</p>
     */
    studioUrl?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * <p>The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.</p>
     */
    userRoleArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NimblestudioStudio resource.
 */
export interface NimblestudioStudioArgs {
    /**
     * <p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.</p>
     */
    adminRoleArn: pulumi.Input<string>;
    /**
     * <p>A friendly name for the studio.</p>
     */
    displayName: pulumi.Input<string>;
    /**
     * <p>Configuration of the encryption method that is used for the studio.</p>
     */
    studioEncryptionConfiguration?: pulumi.Input<inputs.NimblestudioStudioStudioEncryptionConfiguration>;
    /**
     * <p>The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.</p>
     */
    studioName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * <p>The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.</p>
     */
    userRoleArn: pulumi.Input<string>;
}
