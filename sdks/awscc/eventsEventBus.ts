// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EventsEventBus extends pulumi.CustomResource {
    /**
     * Get an existing EventsEventBus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventsEventBusState, opts?: pulumi.CustomResourceOptions): EventsEventBus {
        return new EventsEventBus(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/eventsEventBus:EventsEventBus';

    /**
     * Returns true if the given object is an instance of EventsEventBus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventsEventBus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventsEventBus.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) for the event bus.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Dead Letter Queue for the event bus.
     */
    public readonly deadLetterConfig!: pulumi.Output<outputs.EventsEventBusDeadLetterConfig>;
    /**
     * The description of the event bus.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched
     * with.
     */
    public readonly eventSourceName!: pulumi.Output<string>;
    /**
     * Kms Key Identifier used to encrypt events at rest in the event bus.
     */
    public readonly kmsKeyIdentifier!: pulumi.Output<string>;
    /**
     * The name of the event bus.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A JSON string that describes the permission policy statement for the event bus.
     */
    public readonly policy!: pulumi.Output<string>;
    /**
     * Any tags assigned to the event bus.
     */
    public readonly tags!: pulumi.Output<outputs.EventsEventBusTag[]>;

    /**
     * Create a EventsEventBus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EventsEventBusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventsEventBusArgs | EventsEventBusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventsEventBusState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["deadLetterConfig"] = state ? state.deadLetterConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventSourceName"] = state ? state.eventSourceName : undefined;
            resourceInputs["kmsKeyIdentifier"] = state ? state.kmsKeyIdentifier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as EventsEventBusArgs | undefined;
            resourceInputs["deadLetterConfig"] = args ? args.deadLetterConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventSourceName"] = args ? args.eventSourceName : undefined;
            resourceInputs["kmsKeyIdentifier"] = args ? args.kmsKeyIdentifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventsEventBus.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventsEventBus resources.
 */
export interface EventsEventBusState {
    /**
     * The Amazon Resource Name (ARN) for the event bus.
     */
    arn?: pulumi.Input<string>;
    /**
     * Dead Letter Queue for the event bus.
     */
    deadLetterConfig?: pulumi.Input<inputs.EventsEventBusDeadLetterConfig>;
    /**
     * The description of the event bus.
     */
    description?: pulumi.Input<string>;
    /**
     * If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched
     * with.
     */
    eventSourceName?: pulumi.Input<string>;
    /**
     * Kms Key Identifier used to encrypt events at rest in the event bus.
     */
    kmsKeyIdentifier?: pulumi.Input<string>;
    /**
     * The name of the event bus.
     */
    name?: pulumi.Input<string>;
    /**
     * A JSON string that describes the permission policy statement for the event bus.
     */
    policy?: pulumi.Input<string>;
    /**
     * Any tags assigned to the event bus.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EventsEventBusTag>[]>;
}

/**
 * The set of arguments for constructing a EventsEventBus resource.
 */
export interface EventsEventBusArgs {
    /**
     * Dead Letter Queue for the event bus.
     */
    deadLetterConfig?: pulumi.Input<inputs.EventsEventBusDeadLetterConfig>;
    /**
     * The description of the event bus.
     */
    description?: pulumi.Input<string>;
    /**
     * If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched
     * with.
     */
    eventSourceName?: pulumi.Input<string>;
    /**
     * Kms Key Identifier used to encrypt events at rest in the event bus.
     */
    kmsKeyIdentifier?: pulumi.Input<string>;
    /**
     * The name of the event bus.
     */
    name?: pulumi.Input<string>;
    /**
     * A JSON string that describes the permission policy statement for the event bus.
     */
    policy?: pulumi.Input<string>;
    /**
     * Any tags assigned to the event bus.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EventsEventBusTag>[]>;
}
