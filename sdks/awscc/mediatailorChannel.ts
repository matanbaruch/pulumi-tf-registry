// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MediatailorChannel extends pulumi.CustomResource {
    /**
     * Get an existing MediatailorChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MediatailorChannelState, opts?: pulumi.CustomResourceOptions): MediatailorChannel {
        return new MediatailorChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/mediatailorChannel:MediatailorChannel';

    /**
     * Returns true if the given object is an instance of MediatailorChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MediatailorChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MediatailorChannel.__pulumiType;
    }

    /**
     * <p>The ARN of the channel.</p>
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * <p>The list of audiences defined in channel.</p>
     */
    public readonly audiences!: pulumi.Output<string[]>;
    public readonly channelName!: pulumi.Output<string>;
    /**
     * <p>Slate VOD source configuration.</p>
     */
    public readonly fillerSlate!: pulumi.Output<outputs.MediatailorChannelFillerSlate>;
    /**
     * <p>The log configuration for the channel.</p>
     */
    public readonly logConfiguration!: pulumi.Output<outputs.MediatailorChannelLogConfiguration>;
    /**
     * <p>The channel's output properties.</p>
     */
    public readonly outputs!: pulumi.Output<outputs.MediatailorChannelOutput[]>;
    public readonly playbackMode!: pulumi.Output<string>;
    /**
     * The tags to assign to the channel.
     */
    public readonly tags!: pulumi.Output<outputs.MediatailorChannelTag[]>;
    public readonly tier!: pulumi.Output<string>;
    /**
     * <p>The configuration for time-shifted viewing.</p>
     */
    public readonly timeShiftConfiguration!: pulumi.Output<outputs.MediatailorChannelTimeShiftConfiguration>;

    /**
     * Create a MediatailorChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MediatailorChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MediatailorChannelArgs | MediatailorChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MediatailorChannelState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["audiences"] = state ? state.audiences : undefined;
            resourceInputs["channelName"] = state ? state.channelName : undefined;
            resourceInputs["fillerSlate"] = state ? state.fillerSlate : undefined;
            resourceInputs["logConfiguration"] = state ? state.logConfiguration : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["playbackMode"] = state ? state.playbackMode : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
            resourceInputs["timeShiftConfiguration"] = state ? state.timeShiftConfiguration : undefined;
        } else {
            const args = argsOrState as MediatailorChannelArgs | undefined;
            if ((!args || args.channelName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelName'");
            }
            if ((!args || args.outputs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outputs'");
            }
            if ((!args || args.playbackMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'playbackMode'");
            }
            resourceInputs["audiences"] = args ? args.audiences : undefined;
            resourceInputs["channelName"] = args ? args.channelName : undefined;
            resourceInputs["fillerSlate"] = args ? args.fillerSlate : undefined;
            resourceInputs["logConfiguration"] = args ? args.logConfiguration : undefined;
            resourceInputs["outputs"] = args ? args.outputs : undefined;
            resourceInputs["playbackMode"] = args ? args.playbackMode : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["timeShiftConfiguration"] = args ? args.timeShiftConfiguration : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MediatailorChannel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MediatailorChannel resources.
 */
export interface MediatailorChannelState {
    /**
     * <p>The ARN of the channel.</p>
     */
    arn?: pulumi.Input<string>;
    /**
     * <p>The list of audiences defined in channel.</p>
     */
    audiences?: pulumi.Input<pulumi.Input<string>[]>;
    channelName?: pulumi.Input<string>;
    /**
     * <p>Slate VOD source configuration.</p>
     */
    fillerSlate?: pulumi.Input<inputs.MediatailorChannelFillerSlate>;
    /**
     * <p>The log configuration for the channel.</p>
     */
    logConfiguration?: pulumi.Input<inputs.MediatailorChannelLogConfiguration>;
    /**
     * <p>The channel's output properties.</p>
     */
    outputs?: pulumi.Input<pulumi.Input<inputs.MediatailorChannelOutput>[]>;
    playbackMode?: pulumi.Input<string>;
    /**
     * The tags to assign to the channel.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.MediatailorChannelTag>[]>;
    tier?: pulumi.Input<string>;
    /**
     * <p>The configuration for time-shifted viewing.</p>
     */
    timeShiftConfiguration?: pulumi.Input<inputs.MediatailorChannelTimeShiftConfiguration>;
}

/**
 * The set of arguments for constructing a MediatailorChannel resource.
 */
export interface MediatailorChannelArgs {
    /**
     * <p>The list of audiences defined in channel.</p>
     */
    audiences?: pulumi.Input<pulumi.Input<string>[]>;
    channelName: pulumi.Input<string>;
    /**
     * <p>Slate VOD source configuration.</p>
     */
    fillerSlate?: pulumi.Input<inputs.MediatailorChannelFillerSlate>;
    /**
     * <p>The log configuration for the channel.</p>
     */
    logConfiguration?: pulumi.Input<inputs.MediatailorChannelLogConfiguration>;
    /**
     * <p>The channel's output properties.</p>
     */
    outputs: pulumi.Input<pulumi.Input<inputs.MediatailorChannelOutput>[]>;
    playbackMode: pulumi.Input<string>;
    /**
     * The tags to assign to the channel.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.MediatailorChannelTag>[]>;
    tier?: pulumi.Input<string>;
    /**
     * <p>The configuration for time-shifted viewing.</p>
     */
    timeShiftConfiguration?: pulumi.Input<inputs.MediatailorChannelTimeShiftConfiguration>;
}
