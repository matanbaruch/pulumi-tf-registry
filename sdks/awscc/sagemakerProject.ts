// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SagemakerProject extends pulumi.CustomResource {
    /**
     * Get an existing SagemakerProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SagemakerProjectState, opts?: pulumi.CustomResourceOptions): SagemakerProject {
        return new SagemakerProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/sagemakerProject:SagemakerProject';

    /**
     * Returns true if the given object is an instance of SagemakerProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SagemakerProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SagemakerProject.__pulumiType;
    }

    /**
     * The time at which the project was created.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the Project.
     */
    public /*out*/ readonly projectArn!: pulumi.Output<string>;
    /**
     * The description of the project.
     */
    public readonly projectDescription!: pulumi.Output<string>;
    /**
     * Project Id.
     */
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    /**
     * The name of the project.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The status of a project.
     */
    public /*out*/ readonly projectStatus!: pulumi.Output<string>;
    /**
     * Provisioned ServiceCatalog Details
     */
    public readonly serviceCatalogProvisionedProductDetails!: pulumi.Output<outputs.SagemakerProjectServiceCatalogProvisionedProductDetails>;
    /**
     * Input ServiceCatalog Provisioning Details
     */
    public readonly serviceCatalogProvisioningDetails!: pulumi.Output<outputs.SagemakerProjectServiceCatalogProvisioningDetails>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.SagemakerProjectTag[]>;

    /**
     * Create a SagemakerProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SagemakerProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SagemakerProjectArgs | SagemakerProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SagemakerProjectState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["projectArn"] = state ? state.projectArn : undefined;
            resourceInputs["projectDescription"] = state ? state.projectDescription : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["projectStatus"] = state ? state.projectStatus : undefined;
            resourceInputs["serviceCatalogProvisionedProductDetails"] = state ? state.serviceCatalogProvisionedProductDetails : undefined;
            resourceInputs["serviceCatalogProvisioningDetails"] = state ? state.serviceCatalogProvisioningDetails : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SagemakerProjectArgs | undefined;
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if ((!args || args.serviceCatalogProvisioningDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceCatalogProvisioningDetails'");
            }
            resourceInputs["projectDescription"] = args ? args.projectDescription : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["serviceCatalogProvisionedProductDetails"] = args ? args.serviceCatalogProvisionedProductDetails : undefined;
            resourceInputs["serviceCatalogProvisioningDetails"] = args ? args.serviceCatalogProvisioningDetails : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["projectArn"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["projectStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SagemakerProject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SagemakerProject resources.
 */
export interface SagemakerProjectState {
    /**
     * The time at which the project was created.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Project.
     */
    projectArn?: pulumi.Input<string>;
    /**
     * The description of the project.
     */
    projectDescription?: pulumi.Input<string>;
    /**
     * Project Id.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The name of the project.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The status of a project.
     */
    projectStatus?: pulumi.Input<string>;
    /**
     * Provisioned ServiceCatalog Details
     */
    serviceCatalogProvisionedProductDetails?: pulumi.Input<inputs.SagemakerProjectServiceCatalogProvisionedProductDetails>;
    /**
     * Input ServiceCatalog Provisioning Details
     */
    serviceCatalogProvisioningDetails?: pulumi.Input<inputs.SagemakerProjectServiceCatalogProvisioningDetails>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerProjectTag>[]>;
}

/**
 * The set of arguments for constructing a SagemakerProject resource.
 */
export interface SagemakerProjectArgs {
    /**
     * The description of the project.
     */
    projectDescription?: pulumi.Input<string>;
    /**
     * The name of the project.
     */
    projectName: pulumi.Input<string>;
    /**
     * Provisioned ServiceCatalog Details
     */
    serviceCatalogProvisionedProductDetails?: pulumi.Input<inputs.SagemakerProjectServiceCatalogProvisionedProductDetails>;
    /**
     * Input ServiceCatalog Provisioning Details
     */
    serviceCatalogProvisioningDetails: pulumi.Input<inputs.SagemakerProjectServiceCatalogProvisioningDetails>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerProjectTag>[]>;
}
