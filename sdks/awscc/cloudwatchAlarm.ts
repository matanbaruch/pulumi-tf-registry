// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudwatchAlarm extends pulumi.CustomResource {
    /**
     * Get an existing CloudwatchAlarm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudwatchAlarmState, opts?: pulumi.CustomResourceOptions): CloudwatchAlarm {
        return new CloudwatchAlarm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/cloudwatchAlarm:CloudwatchAlarm';

    /**
     * Returns true if the given object is an instance of CloudwatchAlarm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudwatchAlarm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudwatchAlarm.__pulumiType;
    }

    /**
     * Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
     */
    public readonly actionsEnabled!: pulumi.Output<boolean>;
    /**
     * The list of actions to execute when this alarm transitions into an ALARM state from any other state. Specify each action
     * as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see
     * [PutMetricAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html) in the *API
     * Reference*.
     */
    public readonly alarmActions!: pulumi.Output<string[]>;
    /**
     * The description of the alarm.
     */
    public readonly alarmDescription!: pulumi.Output<string>;
    /**
     * The name of the alarm. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the alarm
     * name. If you specify a name, you cannot perform updates that require replacement of this resource. You can perform
     * updates that require no or some interruption. If you must replace the resource, specify a new name.
     */
    public readonly alarmName!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is
     * used as the first operand.
     */
    public readonly comparisonOperator!: pulumi.Output<string>;
    /**
     * The number of datapoints that must be breaching to trigger the alarm. This is used only if you are setting an "M out of
     * N" alarm. In that case, this value is the M, and the value that you set for ``EvaluationPeriods`` is the N value. For
     * more information, see [Evaluating an
     * Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the
     * *User Guide*. If you omit this parameter, CW uses the same value here that you set for ``EvaluationPeriods``, and the
     * alarm goes to alarm state if that many consecutive periods are breaching.
     */
    public readonly datapointsToAlarm!: pulumi.Output<number>;
    /**
     * The dimensions for the metric associated with the alarm. For an alarm based on a math expression, you can't specify
     * ``Dimensions``. Instead, you use ``Metrics``.
     */
    public readonly dimensions!: pulumi.Output<outputs.CloudwatchAlarmDimension[]>;
    /**
     * Used only for alarms based on percentiles. If ``ignore``, the alarm state does not change during periods with too few
     * data points to be statistically significant. If ``evaluate`` or this parameter is not used, the alarm is always
     * evaluated and possibly changes state no matter how many data points are available.
     */
    public readonly evaluateLowSampleCountPercentile!: pulumi.Output<string>;
    /**
     * The number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires
     * that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are
     * setting an "M out of N" alarm, this value is the N, and ``DatapointsToAlarm`` is the M. For more information, see
     * [Evaluating an
     * Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the
     * *User Guide*.
     */
    public readonly evaluationPeriods!: pulumi.Output<number>;
    /**
     * The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100. For an alarm
     * based on a metric, you must specify either ``Statistic`` or ``ExtendedStatistic`` but not both. For an alarm based on a
     * math expression, you can't specify ``ExtendedStatistic``. Instead, you use ``Metrics``.
     */
    public readonly extendedStatistic!: pulumi.Output<string>;
    /**
     * The actions to execute when this alarm transitions to the ``INSUFFICIENT_DATA`` state from any other state. Each action
     * is specified as an Amazon Resource Name (ARN).
     */
    public readonly insufficientDataActions!: pulumi.Output<string[]>;
    /**
     * The name of the metric associated with the alarm. This is required for an alarm based on a metric. For an alarm based on
     * a math expression, you use ``Metrics`` instead and you can't specify ``MetricName``.
     */
    public readonly metricName!: pulumi.Output<string>;
    /**
     * An array that enables you to create an alarm based on the result of a metric math expression. Each item in the array
     * either retrieves a metric or performs a math expression. If you specify the ``Metrics`` parameter, you cannot specify
     * ``MetricName``, ``Dimensions``, ``Period``, ``Namespace``, ``Statistic``, ``ExtendedStatistic``, or ``Unit``.
     */
    public readonly metrics!: pulumi.Output<outputs.CloudwatchAlarmMetric[]>;
    /**
     * The namespace of the metric associated with the alarm. This is required for an alarm based on a metric. For an alarm
     * based on a math expression, you can't specify ``Namespace`` and you use ``Metrics`` instead. For a list of namespaces
     * for metrics from AWS services, see [Services That Publish
     * Metrics.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html)
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * The actions to execute when this alarm transitions to the ``OK`` state from any other state. Each action is specified as
     * an Amazon Resource Name (ARN).
     */
    public readonly okActions!: pulumi.Output<string[]>;
    /**
     * The period, in seconds, over which the statistic is applied. This is required for an alarm based on a metric. Valid
     * values are 10, 30, 60, and any multiple of 60. For an alarm based on a math expression, you can't specify ``Period``,
     * and instead you use the ``Metrics`` parameter. *Minimum:* 10
     */
    public readonly period!: pulumi.Output<number>;
    /**
     * The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use
     * ``ExtendedStatistic``. For an alarm based on a metric, you must specify either ``Statistic`` or ``ExtendedStatistic``
     * but not both. For an alarm based on a math expression, you can't specify ``Statistic``. Instead, you use ``Metrics``.
     */
    public readonly statistic!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.CloudwatchAlarmTag[]>;
    /**
     * The value to compare with the specified statistic.
     */
    public readonly threshold!: pulumi.Output<number>;
    /**
     * In an alarm based on an anomaly detection model, this is the ID of the ``ANOMALY_DETECTION_BAND`` function used as the
     * threshold for the alarm.
     */
    public readonly thresholdMetricId!: pulumi.Output<string>;
    /**
     * Sets how this alarm is to handle missing data points. Valid values are ``breaching``, ``notBreaching``, ``ignore``, and
     * ``missing``. For more information, see [Configuring How Alarms Treat Missing
     * Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data)
     * in the *Amazon User Guide*. If you omit this parameter, the default behavior of ``missing`` is used.
     */
    public readonly treatMissingData!: pulumi.Output<string>;
    /**
     * The unit of the metric associated with the alarm. Specify this only if you are creating an alarm based on a single
     * metric. Do not specify this if you are specifying a ``Metrics`` array. You can specify the following values: Seconds,
     * Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits,
     * Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second,
     * Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
     */
    public readonly unit!: pulumi.Output<string>;

    /**
     * Create a CloudwatchAlarm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudwatchAlarmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudwatchAlarmArgs | CloudwatchAlarmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudwatchAlarmState | undefined;
            resourceInputs["actionsEnabled"] = state ? state.actionsEnabled : undefined;
            resourceInputs["alarmActions"] = state ? state.alarmActions : undefined;
            resourceInputs["alarmDescription"] = state ? state.alarmDescription : undefined;
            resourceInputs["alarmName"] = state ? state.alarmName : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["comparisonOperator"] = state ? state.comparisonOperator : undefined;
            resourceInputs["datapointsToAlarm"] = state ? state.datapointsToAlarm : undefined;
            resourceInputs["dimensions"] = state ? state.dimensions : undefined;
            resourceInputs["evaluateLowSampleCountPercentile"] = state ? state.evaluateLowSampleCountPercentile : undefined;
            resourceInputs["evaluationPeriods"] = state ? state.evaluationPeriods : undefined;
            resourceInputs["extendedStatistic"] = state ? state.extendedStatistic : undefined;
            resourceInputs["insufficientDataActions"] = state ? state.insufficientDataActions : undefined;
            resourceInputs["metricName"] = state ? state.metricName : undefined;
            resourceInputs["metrics"] = state ? state.metrics : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["okActions"] = state ? state.okActions : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["statistic"] = state ? state.statistic : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["thresholdMetricId"] = state ? state.thresholdMetricId : undefined;
            resourceInputs["treatMissingData"] = state ? state.treatMissingData : undefined;
            resourceInputs["unit"] = state ? state.unit : undefined;
        } else {
            const args = argsOrState as CloudwatchAlarmArgs | undefined;
            if ((!args || args.comparisonOperator === undefined) && !opts.urn) {
                throw new Error("Missing required property 'comparisonOperator'");
            }
            if ((!args || args.evaluationPeriods === undefined) && !opts.urn) {
                throw new Error("Missing required property 'evaluationPeriods'");
            }
            resourceInputs["actionsEnabled"] = args ? args.actionsEnabled : undefined;
            resourceInputs["alarmActions"] = args ? args.alarmActions : undefined;
            resourceInputs["alarmDescription"] = args ? args.alarmDescription : undefined;
            resourceInputs["alarmName"] = args ? args.alarmName : undefined;
            resourceInputs["comparisonOperator"] = args ? args.comparisonOperator : undefined;
            resourceInputs["datapointsToAlarm"] = args ? args.datapointsToAlarm : undefined;
            resourceInputs["dimensions"] = args ? args.dimensions : undefined;
            resourceInputs["evaluateLowSampleCountPercentile"] = args ? args.evaluateLowSampleCountPercentile : undefined;
            resourceInputs["evaluationPeriods"] = args ? args.evaluationPeriods : undefined;
            resourceInputs["extendedStatistic"] = args ? args.extendedStatistic : undefined;
            resourceInputs["insufficientDataActions"] = args ? args.insufficientDataActions : undefined;
            resourceInputs["metricName"] = args ? args.metricName : undefined;
            resourceInputs["metrics"] = args ? args.metrics : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["okActions"] = args ? args.okActions : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["statistic"] = args ? args.statistic : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["thresholdMetricId"] = args ? args.thresholdMetricId : undefined;
            resourceInputs["treatMissingData"] = args ? args.treatMissingData : undefined;
            resourceInputs["unit"] = args ? args.unit : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudwatchAlarm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudwatchAlarm resources.
 */
export interface CloudwatchAlarmState {
    /**
     * Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
     */
    actionsEnabled?: pulumi.Input<boolean>;
    /**
     * The list of actions to execute when this alarm transitions into an ALARM state from any other state. Specify each action
     * as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see
     * [PutMetricAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html) in the *API
     * Reference*.
     */
    alarmActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the alarm.
     */
    alarmDescription?: pulumi.Input<string>;
    /**
     * The name of the alarm. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the alarm
     * name. If you specify a name, you cannot perform updates that require replacement of this resource. You can perform
     * updates that require no or some interruption. If you must replace the resource, specify a new name.
     */
    alarmName?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    /**
     * The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is
     * used as the first operand.
     */
    comparisonOperator?: pulumi.Input<string>;
    /**
     * The number of datapoints that must be breaching to trigger the alarm. This is used only if you are setting an "M out of
     * N" alarm. In that case, this value is the M, and the value that you set for ``EvaluationPeriods`` is the N value. For
     * more information, see [Evaluating an
     * Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the
     * *User Guide*. If you omit this parameter, CW uses the same value here that you set for ``EvaluationPeriods``, and the
     * alarm goes to alarm state if that many consecutive periods are breaching.
     */
    datapointsToAlarm?: pulumi.Input<number>;
    /**
     * The dimensions for the metric associated with the alarm. For an alarm based on a math expression, you can't specify
     * ``Dimensions``. Instead, you use ``Metrics``.
     */
    dimensions?: pulumi.Input<pulumi.Input<inputs.CloudwatchAlarmDimension>[]>;
    /**
     * Used only for alarms based on percentiles. If ``ignore``, the alarm state does not change during periods with too few
     * data points to be statistically significant. If ``evaluate`` or this parameter is not used, the alarm is always
     * evaluated and possibly changes state no matter how many data points are available.
     */
    evaluateLowSampleCountPercentile?: pulumi.Input<string>;
    /**
     * The number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires
     * that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are
     * setting an "M out of N" alarm, this value is the N, and ``DatapointsToAlarm`` is the M. For more information, see
     * [Evaluating an
     * Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the
     * *User Guide*.
     */
    evaluationPeriods?: pulumi.Input<number>;
    /**
     * The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100. For an alarm
     * based on a metric, you must specify either ``Statistic`` or ``ExtendedStatistic`` but not both. For an alarm based on a
     * math expression, you can't specify ``ExtendedStatistic``. Instead, you use ``Metrics``.
     */
    extendedStatistic?: pulumi.Input<string>;
    /**
     * The actions to execute when this alarm transitions to the ``INSUFFICIENT_DATA`` state from any other state. Each action
     * is specified as an Amazon Resource Name (ARN).
     */
    insufficientDataActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the metric associated with the alarm. This is required for an alarm based on a metric. For an alarm based on
     * a math expression, you use ``Metrics`` instead and you can't specify ``MetricName``.
     */
    metricName?: pulumi.Input<string>;
    /**
     * An array that enables you to create an alarm based on the result of a metric math expression. Each item in the array
     * either retrieves a metric or performs a math expression. If you specify the ``Metrics`` parameter, you cannot specify
     * ``MetricName``, ``Dimensions``, ``Period``, ``Namespace``, ``Statistic``, ``ExtendedStatistic``, or ``Unit``.
     */
    metrics?: pulumi.Input<pulumi.Input<inputs.CloudwatchAlarmMetric>[]>;
    /**
     * The namespace of the metric associated with the alarm. This is required for an alarm based on a metric. For an alarm
     * based on a math expression, you can't specify ``Namespace`` and you use ``Metrics`` instead. For a list of namespaces
     * for metrics from AWS services, see [Services That Publish
     * Metrics.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The actions to execute when this alarm transitions to the ``OK`` state from any other state. Each action is specified as
     * an Amazon Resource Name (ARN).
     */
    okActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The period, in seconds, over which the statistic is applied. This is required for an alarm based on a metric. Valid
     * values are 10, 30, 60, and any multiple of 60. For an alarm based on a math expression, you can't specify ``Period``,
     * and instead you use the ``Metrics`` parameter. *Minimum:* 10
     */
    period?: pulumi.Input<number>;
    /**
     * The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use
     * ``ExtendedStatistic``. For an alarm based on a metric, you must specify either ``Statistic`` or ``ExtendedStatistic``
     * but not both. For an alarm based on a math expression, you can't specify ``Statistic``. Instead, you use ``Metrics``.
     */
    statistic?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.CloudwatchAlarmTag>[]>;
    /**
     * The value to compare with the specified statistic.
     */
    threshold?: pulumi.Input<number>;
    /**
     * In an alarm based on an anomaly detection model, this is the ID of the ``ANOMALY_DETECTION_BAND`` function used as the
     * threshold for the alarm.
     */
    thresholdMetricId?: pulumi.Input<string>;
    /**
     * Sets how this alarm is to handle missing data points. Valid values are ``breaching``, ``notBreaching``, ``ignore``, and
     * ``missing``. For more information, see [Configuring How Alarms Treat Missing
     * Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data)
     * in the *Amazon User Guide*. If you omit this parameter, the default behavior of ``missing`` is used.
     */
    treatMissingData?: pulumi.Input<string>;
    /**
     * The unit of the metric associated with the alarm. Specify this only if you are creating an alarm based on a single
     * metric. Do not specify this if you are specifying a ``Metrics`` array. You can specify the following values: Seconds,
     * Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits,
     * Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second,
     * Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
     */
    unit?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudwatchAlarm resource.
 */
export interface CloudwatchAlarmArgs {
    /**
     * Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
     */
    actionsEnabled?: pulumi.Input<boolean>;
    /**
     * The list of actions to execute when this alarm transitions into an ALARM state from any other state. Specify each action
     * as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see
     * [PutMetricAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html) in the *API
     * Reference*.
     */
    alarmActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the alarm.
     */
    alarmDescription?: pulumi.Input<string>;
    /**
     * The name of the alarm. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the alarm
     * name. If you specify a name, you cannot perform updates that require replacement of this resource. You can perform
     * updates that require no or some interruption. If you must replace the resource, specify a new name.
     */
    alarmName?: pulumi.Input<string>;
    /**
     * The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is
     * used as the first operand.
     */
    comparisonOperator: pulumi.Input<string>;
    /**
     * The number of datapoints that must be breaching to trigger the alarm. This is used only if you are setting an "M out of
     * N" alarm. In that case, this value is the M, and the value that you set for ``EvaluationPeriods`` is the N value. For
     * more information, see [Evaluating an
     * Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the
     * *User Guide*. If you omit this parameter, CW uses the same value here that you set for ``EvaluationPeriods``, and the
     * alarm goes to alarm state if that many consecutive periods are breaching.
     */
    datapointsToAlarm?: pulumi.Input<number>;
    /**
     * The dimensions for the metric associated with the alarm. For an alarm based on a math expression, you can't specify
     * ``Dimensions``. Instead, you use ``Metrics``.
     */
    dimensions?: pulumi.Input<pulumi.Input<inputs.CloudwatchAlarmDimension>[]>;
    /**
     * Used only for alarms based on percentiles. If ``ignore``, the alarm state does not change during periods with too few
     * data points to be statistically significant. If ``evaluate`` or this parameter is not used, the alarm is always
     * evaluated and possibly changes state no matter how many data points are available.
     */
    evaluateLowSampleCountPercentile?: pulumi.Input<string>;
    /**
     * The number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires
     * that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are
     * setting an "M out of N" alarm, this value is the N, and ``DatapointsToAlarm`` is the M. For more information, see
     * [Evaluating an
     * Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the
     * *User Guide*.
     */
    evaluationPeriods: pulumi.Input<number>;
    /**
     * The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100. For an alarm
     * based on a metric, you must specify either ``Statistic`` or ``ExtendedStatistic`` but not both. For an alarm based on a
     * math expression, you can't specify ``ExtendedStatistic``. Instead, you use ``Metrics``.
     */
    extendedStatistic?: pulumi.Input<string>;
    /**
     * The actions to execute when this alarm transitions to the ``INSUFFICIENT_DATA`` state from any other state. Each action
     * is specified as an Amazon Resource Name (ARN).
     */
    insufficientDataActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the metric associated with the alarm. This is required for an alarm based on a metric. For an alarm based on
     * a math expression, you use ``Metrics`` instead and you can't specify ``MetricName``.
     */
    metricName?: pulumi.Input<string>;
    /**
     * An array that enables you to create an alarm based on the result of a metric math expression. Each item in the array
     * either retrieves a metric or performs a math expression. If you specify the ``Metrics`` parameter, you cannot specify
     * ``MetricName``, ``Dimensions``, ``Period``, ``Namespace``, ``Statistic``, ``ExtendedStatistic``, or ``Unit``.
     */
    metrics?: pulumi.Input<pulumi.Input<inputs.CloudwatchAlarmMetric>[]>;
    /**
     * The namespace of the metric associated with the alarm. This is required for an alarm based on a metric. For an alarm
     * based on a math expression, you can't specify ``Namespace`` and you use ``Metrics`` instead. For a list of namespaces
     * for metrics from AWS services, see [Services That Publish
     * Metrics.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The actions to execute when this alarm transitions to the ``OK`` state from any other state. Each action is specified as
     * an Amazon Resource Name (ARN).
     */
    okActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The period, in seconds, over which the statistic is applied. This is required for an alarm based on a metric. Valid
     * values are 10, 30, 60, and any multiple of 60. For an alarm based on a math expression, you can't specify ``Period``,
     * and instead you use the ``Metrics`` parameter. *Minimum:* 10
     */
    period?: pulumi.Input<number>;
    /**
     * The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use
     * ``ExtendedStatistic``. For an alarm based on a metric, you must specify either ``Statistic`` or ``ExtendedStatistic``
     * but not both. For an alarm based on a math expression, you can't specify ``Statistic``. Instead, you use ``Metrics``.
     */
    statistic?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.CloudwatchAlarmTag>[]>;
    /**
     * The value to compare with the specified statistic.
     */
    threshold?: pulumi.Input<number>;
    /**
     * In an alarm based on an anomaly detection model, this is the ID of the ``ANOMALY_DETECTION_BAND`` function used as the
     * threshold for the alarm.
     */
    thresholdMetricId?: pulumi.Input<string>;
    /**
     * Sets how this alarm is to handle missing data points. Valid values are ``breaching``, ``notBreaching``, ``ignore``, and
     * ``missing``. For more information, see [Configuring How Alarms Treat Missing
     * Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data)
     * in the *Amazon User Guide*. If you omit this parameter, the default behavior of ``missing`` is used.
     */
    treatMissingData?: pulumi.Input<string>;
    /**
     * The unit of the metric associated with the alarm. Specify this only if you are creating an alarm based on a single
     * metric. Do not specify this if you are specifying a ``Metrics`` array. You can specify the following values: Seconds,
     * Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits,
     * Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second,
     * Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
     */
    unit?: pulumi.Input<string>;
}
