// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudformationResourceVersion extends pulumi.CustomResource {
    /**
     * Get an existing CloudformationResourceVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudformationResourceVersionState, opts?: pulumi.CustomResourceOptions): CloudformationResourceVersion {
        return new CloudformationResourceVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/cloudformationResourceVersion:CloudformationResourceVersion';

    /**
     * Returns true if the given object is an instance of CloudformationResourceVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudformationResourceVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudformationResourceVersion.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the type, here the ResourceVersion. This is used to uniquely identify a
     * ResourceVersion resource
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS
     * APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those
     * AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide
     * your resource type with the appropriate credentials.
     */
    public readonly executionRoleArn!: pulumi.Output<string>;
    /**
     * Indicates if this type version is the current default version
     */
    public /*out*/ readonly isDefaultVersion!: pulumi.Output<boolean>;
    /**
     * Specifies logging configuration information for a type.
     */
    public readonly loggingConfig!: pulumi.Output<outputs.CloudformationResourceVersionLoggingConfig>;
    /**
     * The provisioning behavior of the type. AWS CloudFormation determines the provisioning type during registration, based on
     * the types of handlers in the schema handler package submitted.
     */
    public /*out*/ readonly provisioningType!: pulumi.Output<string>;
    /**
     * A url to the S3 bucket containing the schema handler package that contains the schema, event handlers, and associated
     * files for the type you want to register. For information on generating a schema handler package for the type you want to
     * register, see submit in the CloudFormation CLI User Guide.
     */
    public readonly schemaHandlerPackage!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the type without the versionID.
     */
    public /*out*/ readonly typeArn!: pulumi.Output<string>;
    /**
     * The name of the type being registered. We recommend that type names adhere to the following pattern:
     * company_or_organization::service::type.
     */
    public readonly typeName!: pulumi.Output<string>;
    /**
     * The ID of the version of the type represented by this resource instance.
     */
    public /*out*/ readonly versionId!: pulumi.Output<string>;
    /**
     * The scope at which the type is visible and usable in CloudFormation operations. Valid values include: PRIVATE: The type
     * is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types
     * you register as PRIVATE. PUBLIC: The type is publically visible and usable within any Amazon account.
     */
    public /*out*/ readonly visibility!: pulumi.Output<string>;

    /**
     * Create a CloudformationResourceVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudformationResourceVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudformationResourceVersionArgs | CloudformationResourceVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudformationResourceVersionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            resourceInputs["isDefaultVersion"] = state ? state.isDefaultVersion : undefined;
            resourceInputs["loggingConfig"] = state ? state.loggingConfig : undefined;
            resourceInputs["provisioningType"] = state ? state.provisioningType : undefined;
            resourceInputs["schemaHandlerPackage"] = state ? state.schemaHandlerPackage : undefined;
            resourceInputs["typeArn"] = state ? state.typeArn : undefined;
            resourceInputs["typeName"] = state ? state.typeName : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as CloudformationResourceVersionArgs | undefined;
            if ((!args || args.schemaHandlerPackage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaHandlerPackage'");
            }
            if ((!args || args.typeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'typeName'");
            }
            resourceInputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            resourceInputs["loggingConfig"] = args ? args.loggingConfig : undefined;
            resourceInputs["schemaHandlerPackage"] = args ? args.schemaHandlerPackage : undefined;
            resourceInputs["typeName"] = args ? args.typeName : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["isDefaultVersion"] = undefined /*out*/;
            resourceInputs["provisioningType"] = undefined /*out*/;
            resourceInputs["typeArn"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudformationResourceVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudformationResourceVersion resources.
 */
export interface CloudformationResourceVersionState {
    /**
     * The Amazon Resource Name (ARN) of the type, here the ResourceVersion. This is used to uniquely identify a
     * ResourceVersion resource
     */
    arn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS
     * APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those
     * AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide
     * your resource type with the appropriate credentials.
     */
    executionRoleArn?: pulumi.Input<string>;
    /**
     * Indicates if this type version is the current default version
     */
    isDefaultVersion?: pulumi.Input<boolean>;
    /**
     * Specifies logging configuration information for a type.
     */
    loggingConfig?: pulumi.Input<inputs.CloudformationResourceVersionLoggingConfig>;
    /**
     * The provisioning behavior of the type. AWS CloudFormation determines the provisioning type during registration, based on
     * the types of handlers in the schema handler package submitted.
     */
    provisioningType?: pulumi.Input<string>;
    /**
     * A url to the S3 bucket containing the schema handler package that contains the schema, event handlers, and associated
     * files for the type you want to register. For information on generating a schema handler package for the type you want to
     * register, see submit in the CloudFormation CLI User Guide.
     */
    schemaHandlerPackage?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the type without the versionID.
     */
    typeArn?: pulumi.Input<string>;
    /**
     * The name of the type being registered. We recommend that type names adhere to the following pattern:
     * company_or_organization::service::type.
     */
    typeName?: pulumi.Input<string>;
    /**
     * The ID of the version of the type represented by this resource instance.
     */
    versionId?: pulumi.Input<string>;
    /**
     * The scope at which the type is visible and usable in CloudFormation operations. Valid values include: PRIVATE: The type
     * is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types
     * you register as PRIVATE. PUBLIC: The type is publically visible and usable within any Amazon account.
     */
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudformationResourceVersion resource.
 */
export interface CloudformationResourceVersionArgs {
    /**
     * The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS
     * APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those
     * AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide
     * your resource type with the appropriate credentials.
     */
    executionRoleArn?: pulumi.Input<string>;
    /**
     * Specifies logging configuration information for a type.
     */
    loggingConfig?: pulumi.Input<inputs.CloudformationResourceVersionLoggingConfig>;
    /**
     * A url to the S3 bucket containing the schema handler package that contains the schema, event handlers, and associated
     * files for the type you want to register. For information on generating a schema handler package for the type you want to
     * register, see submit in the CloudFormation CLI User Guide.
     */
    schemaHandlerPackage: pulumi.Input<string>;
    /**
     * The name of the type being registered. We recommend that type names adhere to the following pattern:
     * company_or_organization::service::type.
     */
    typeName: pulumi.Input<string>;
}
