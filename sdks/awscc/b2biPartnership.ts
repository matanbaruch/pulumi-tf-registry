// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class B2biPartnership extends pulumi.CustomResource {
    /**
     * Get an existing B2biPartnership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: B2biPartnershipState, opts?: pulumi.CustomResourceOptions): B2biPartnership {
        return new B2biPartnership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/b2biPartnership:B2biPartnership';

    /**
     * Returns true if the given object is an instance of B2biPartnership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is B2biPartnership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === B2biPartnership.__pulumiType;
    }

    public readonly capabilities!: pulumi.Output<string[]>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly email!: pulumi.Output<string>;
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly partnershipArn!: pulumi.Output<string>;
    public /*out*/ readonly partnershipId!: pulumi.Output<string>;
    public readonly phone!: pulumi.Output<string>;
    public readonly profileId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.B2biPartnershipTag[]>;
    public /*out*/ readonly tradingPartnerId!: pulumi.Output<string>;

    /**
     * Create a B2biPartnership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: B2biPartnershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: B2biPartnershipArgs | B2biPartnershipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as B2biPartnershipState | undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partnershipArn"] = state ? state.partnershipArn : undefined;
            resourceInputs["partnershipId"] = state ? state.partnershipId : undefined;
            resourceInputs["phone"] = state ? state.phone : undefined;
            resourceInputs["profileId"] = state ? state.profileId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tradingPartnerId"] = state ? state.tradingPartnerId : undefined;
        } else {
            const args = argsOrState as B2biPartnershipArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.profileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["phone"] = args ? args.phone : undefined;
            resourceInputs["profileId"] = args ? args.profileId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["partnershipArn"] = undefined /*out*/;
            resourceInputs["partnershipId"] = undefined /*out*/;
            resourceInputs["tradingPartnerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(B2biPartnership.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering B2biPartnership resources.
 */
export interface B2biPartnershipState {
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    createdAt?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    modifiedAt?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    partnershipArn?: pulumi.Input<string>;
    partnershipId?: pulumi.Input<string>;
    phone?: pulumi.Input<string>;
    profileId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.B2biPartnershipTag>[]>;
    tradingPartnerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a B2biPartnership resource.
 */
export interface B2biPartnershipArgs {
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    email: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    phone?: pulumi.Input<string>;
    profileId: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.B2biPartnershipTag>[]>;
}
