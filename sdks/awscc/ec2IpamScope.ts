// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2IpamScope extends pulumi.CustomResource {
    /**
     * Get an existing Ec2IpamScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2IpamScopeState, opts?: pulumi.CustomResourceOptions): Ec2IpamScope {
        return new Ec2IpamScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2IpamScope:Ec2IpamScope';

    /**
     * Returns true if the given object is an instance of Ec2IpamScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2IpamScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2IpamScope.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the IPAM scope.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the IPAM this scope is a part of.
     */
    public /*out*/ readonly ipamArn!: pulumi.Output<string>;
    /**
     * The Id of the IPAM this scope is a part of.
     */
    public readonly ipamId!: pulumi.Output<string>;
    /**
     * Id of the IPAM scope.
     */
    public /*out*/ readonly ipamScopeId!: pulumi.Output<string>;
    /**
     * Determines whether this scope contains publicly routable space or space for a private network
     */
    public /*out*/ readonly ipamScopeType!: pulumi.Output<string>;
    /**
     * Is this one of the default scopes created with the IPAM.
     */
    public /*out*/ readonly isDefault!: pulumi.Output<boolean>;
    /**
     * The number of pools that currently exist in this scope.
     */
    public /*out*/ readonly poolCount!: pulumi.Output<number>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2IpamScopeTag[]>;

    /**
     * Create a Ec2IpamScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2IpamScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2IpamScopeArgs | Ec2IpamScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2IpamScopeState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipamArn"] = state ? state.ipamArn : undefined;
            resourceInputs["ipamId"] = state ? state.ipamId : undefined;
            resourceInputs["ipamScopeId"] = state ? state.ipamScopeId : undefined;
            resourceInputs["ipamScopeType"] = state ? state.ipamScopeType : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["poolCount"] = state ? state.poolCount : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as Ec2IpamScopeArgs | undefined;
            if ((!args || args.ipamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipamId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipamId"] = args ? args.ipamId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ipamArn"] = undefined /*out*/;
            resourceInputs["ipamScopeId"] = undefined /*out*/;
            resourceInputs["ipamScopeType"] = undefined /*out*/;
            resourceInputs["isDefault"] = undefined /*out*/;
            resourceInputs["poolCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2IpamScope.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2IpamScope resources.
 */
export interface Ec2IpamScopeState {
    /**
     * The Amazon Resource Name (ARN) of the IPAM scope.
     */
    arn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the IPAM this scope is a part of.
     */
    ipamArn?: pulumi.Input<string>;
    /**
     * The Id of the IPAM this scope is a part of.
     */
    ipamId?: pulumi.Input<string>;
    /**
     * Id of the IPAM scope.
     */
    ipamScopeId?: pulumi.Input<string>;
    /**
     * Determines whether this scope contains publicly routable space or space for a private network
     */
    ipamScopeType?: pulumi.Input<string>;
    /**
     * Is this one of the default scopes created with the IPAM.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The number of pools that currently exist in this scope.
     */
    poolCount?: pulumi.Input<number>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2IpamScopeTag>[]>;
}

/**
 * The set of arguments for constructing a Ec2IpamScope resource.
 */
export interface Ec2IpamScopeArgs {
    description?: pulumi.Input<string>;
    /**
     * The Id of the IPAM this scope is a part of.
     */
    ipamId: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2IpamScopeTag>[]>;
}
