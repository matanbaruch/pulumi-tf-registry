// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServicecatalogCloudformationProvisionedProduct extends pulumi.CustomResource {
    /**
     * Get an existing ServicecatalogCloudformationProvisionedProduct resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicecatalogCloudformationProvisionedProductState, opts?: pulumi.CustomResourceOptions): ServicecatalogCloudformationProvisionedProduct {
        return new ServicecatalogCloudformationProvisionedProduct(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/servicecatalogCloudformationProvisionedProduct:ServicecatalogCloudformationProvisionedProduct';

    /**
     * Returns true if the given object is an instance of ServicecatalogCloudformationProvisionedProduct.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicecatalogCloudformationProvisionedProduct {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicecatalogCloudformationProvisionedProduct.__pulumiType;
    }

    public readonly acceptLanguage!: pulumi.Output<string>;
    public /*out*/ readonly cloudformationStackArn!: pulumi.Output<string>;
    public readonly notificationArns!: pulumi.Output<string[]>;
    /**
     * List of key-value pair outputs.
     */
    public /*out*/ readonly outputs!: pulumi.Output<{[key: string]: string}>;
    public readonly pathId!: pulumi.Output<string>;
    public readonly pathName!: pulumi.Output<string>;
    public readonly productId!: pulumi.Output<string>;
    public readonly productName!: pulumi.Output<string>;
    public /*out*/ readonly provisionedProductId!: pulumi.Output<string>;
    public readonly provisionedProductName!: pulumi.Output<string>;
    public readonly provisioningArtifactId!: pulumi.Output<string>;
    public readonly provisioningArtifactName!: pulumi.Output<string>;
    public readonly provisioningParameters!: pulumi.Output<outputs.ServicecatalogCloudformationProvisionedProductProvisioningParameter[]>;
    public readonly provisioningPreferences!: pulumi.Output<outputs.ServicecatalogCloudformationProvisionedProductProvisioningPreferences>;
    public /*out*/ readonly recordId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.ServicecatalogCloudformationProvisionedProductTag[]>;

    /**
     * Create a ServicecatalogCloudformationProvisionedProduct resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServicecatalogCloudformationProvisionedProductArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicecatalogCloudformationProvisionedProductArgs | ServicecatalogCloudformationProvisionedProductState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicecatalogCloudformationProvisionedProductState | undefined;
            resourceInputs["acceptLanguage"] = state ? state.acceptLanguage : undefined;
            resourceInputs["cloudformationStackArn"] = state ? state.cloudformationStackArn : undefined;
            resourceInputs["notificationArns"] = state ? state.notificationArns : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["pathId"] = state ? state.pathId : undefined;
            resourceInputs["pathName"] = state ? state.pathName : undefined;
            resourceInputs["productId"] = state ? state.productId : undefined;
            resourceInputs["productName"] = state ? state.productName : undefined;
            resourceInputs["provisionedProductId"] = state ? state.provisionedProductId : undefined;
            resourceInputs["provisionedProductName"] = state ? state.provisionedProductName : undefined;
            resourceInputs["provisioningArtifactId"] = state ? state.provisioningArtifactId : undefined;
            resourceInputs["provisioningArtifactName"] = state ? state.provisioningArtifactName : undefined;
            resourceInputs["provisioningParameters"] = state ? state.provisioningParameters : undefined;
            resourceInputs["provisioningPreferences"] = state ? state.provisioningPreferences : undefined;
            resourceInputs["recordId"] = state ? state.recordId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ServicecatalogCloudformationProvisionedProductArgs | undefined;
            resourceInputs["acceptLanguage"] = args ? args.acceptLanguage : undefined;
            resourceInputs["notificationArns"] = args ? args.notificationArns : undefined;
            resourceInputs["pathId"] = args ? args.pathId : undefined;
            resourceInputs["pathName"] = args ? args.pathName : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["productName"] = args ? args.productName : undefined;
            resourceInputs["provisionedProductName"] = args ? args.provisionedProductName : undefined;
            resourceInputs["provisioningArtifactId"] = args ? args.provisioningArtifactId : undefined;
            resourceInputs["provisioningArtifactName"] = args ? args.provisioningArtifactName : undefined;
            resourceInputs["provisioningParameters"] = args ? args.provisioningParameters : undefined;
            resourceInputs["provisioningPreferences"] = args ? args.provisioningPreferences : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["cloudformationStackArn"] = undefined /*out*/;
            resourceInputs["outputs"] = undefined /*out*/;
            resourceInputs["provisionedProductId"] = undefined /*out*/;
            resourceInputs["recordId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicecatalogCloudformationProvisionedProduct.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServicecatalogCloudformationProvisionedProduct resources.
 */
export interface ServicecatalogCloudformationProvisionedProductState {
    acceptLanguage?: pulumi.Input<string>;
    cloudformationStackArn?: pulumi.Input<string>;
    notificationArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of key-value pair outputs.
     */
    outputs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    pathId?: pulumi.Input<string>;
    pathName?: pulumi.Input<string>;
    productId?: pulumi.Input<string>;
    productName?: pulumi.Input<string>;
    provisionedProductId?: pulumi.Input<string>;
    provisionedProductName?: pulumi.Input<string>;
    provisioningArtifactId?: pulumi.Input<string>;
    provisioningArtifactName?: pulumi.Input<string>;
    provisioningParameters?: pulumi.Input<pulumi.Input<inputs.ServicecatalogCloudformationProvisionedProductProvisioningParameter>[]>;
    provisioningPreferences?: pulumi.Input<inputs.ServicecatalogCloudformationProvisionedProductProvisioningPreferences>;
    recordId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ServicecatalogCloudformationProvisionedProductTag>[]>;
}

/**
 * The set of arguments for constructing a ServicecatalogCloudformationProvisionedProduct resource.
 */
export interface ServicecatalogCloudformationProvisionedProductArgs {
    acceptLanguage?: pulumi.Input<string>;
    notificationArns?: pulumi.Input<pulumi.Input<string>[]>;
    pathId?: pulumi.Input<string>;
    pathName?: pulumi.Input<string>;
    productId?: pulumi.Input<string>;
    productName?: pulumi.Input<string>;
    provisionedProductName?: pulumi.Input<string>;
    provisioningArtifactId?: pulumi.Input<string>;
    provisioningArtifactName?: pulumi.Input<string>;
    provisioningParameters?: pulumi.Input<pulumi.Input<inputs.ServicecatalogCloudformationProvisionedProductProvisioningParameter>[]>;
    provisioningPreferences?: pulumi.Input<inputs.ServicecatalogCloudformationProvisionedProductProvisioningPreferences>;
    tags?: pulumi.Input<pulumi.Input<inputs.ServicecatalogCloudformationProvisionedProductTag>[]>;
}
