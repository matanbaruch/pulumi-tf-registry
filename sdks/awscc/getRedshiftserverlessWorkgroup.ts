// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRedshiftserverlessWorkgroup(args: GetRedshiftserverlessWorkgroupArgs, opts?: pulumi.InvokeOptions): Promise<GetRedshiftserverlessWorkgroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getRedshiftserverlessWorkgroup:getRedshiftserverlessWorkgroup", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRedshiftserverlessWorkgroup.
 */
export interface GetRedshiftserverlessWorkgroupArgs {
    id: string;
}

/**
 * A collection of values returned by getRedshiftserverlessWorkgroup.
 */
export interface GetRedshiftserverlessWorkgroupResult {
    readonly baseCapacity: number;
    readonly configParameters: outputs.GetRedshiftserverlessWorkgroupConfigParameter[];
    readonly enhancedVpcRouting: boolean;
    readonly id: string;
    readonly maxCapacity: number;
    readonly namespaceName: string;
    readonly port: number;
    readonly publiclyAccessible: boolean;
    readonly securityGroupIds: string[];
    readonly subnetIds: string[];
    readonly tags: outputs.GetRedshiftserverlessWorkgroupTag[];
    readonly workgroup: outputs.GetRedshiftserverlessWorkgroupWorkgroup;
    readonly workgroupName: string;
}
export function getRedshiftserverlessWorkgroupOutput(args: GetRedshiftserverlessWorkgroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRedshiftserverlessWorkgroupResult> {
    return pulumi.output(args).apply((a: any) => getRedshiftserverlessWorkgroup(a, opts))
}

/**
 * A collection of arguments for invoking getRedshiftserverlessWorkgroup.
 */
export interface GetRedshiftserverlessWorkgroupOutputArgs {
    id: pulumi.Input<string>;
}
