// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatasyncLocationSmb extends pulumi.CustomResource {
    /**
     * Get an existing DatasyncLocationSmb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasyncLocationSmbState, opts?: pulumi.CustomResourceOptions): DatasyncLocationSmb {
        return new DatasyncLocationSmb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/datasyncLocationSmb:DatasyncLocationSmb';

    /**
     * Returns true if the given object is an instance of DatasyncLocationSmb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasyncLocationSmb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasyncLocationSmb.__pulumiType;
    }

    /**
     * The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.
     */
    public readonly agentArns!: pulumi.Output<string[]>;
    /**
     * The name of the Windows domain that the SMB server belongs to.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the SMB location that is created.
     */
    public /*out*/ readonly locationArn!: pulumi.Output<string>;
    /**
     * The URL of the SMB location that was described.
     */
    public /*out*/ readonly locationUri!: pulumi.Output<string>;
    /**
     * The mount options used by DataSync to access the SMB server.
     */
    public readonly mountOptions!: pulumi.Output<outputs.DatasyncLocationSmbMountOptions>;
    /**
     * The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * The name of the SMB server. This value is the IP address or Domain Name Service (DNS) name of the SMB server.
     */
    public readonly serverHostname!: pulumi.Output<string>;
    /**
     * The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB
     * destination
     */
    public readonly subdirectory!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.DatasyncLocationSmbTag[]>;
    /**
     * The user who can mount the share, has the permissions to access files and folders in the SMB share.
     */
    public readonly user!: pulumi.Output<string>;

    /**
     * Create a DatasyncLocationSmb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasyncLocationSmbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasyncLocationSmbArgs | DatasyncLocationSmbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasyncLocationSmbState | undefined;
            resourceInputs["agentArns"] = state ? state.agentArns : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["locationArn"] = state ? state.locationArn : undefined;
            resourceInputs["locationUri"] = state ? state.locationUri : undefined;
            resourceInputs["mountOptions"] = state ? state.mountOptions : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["serverHostname"] = state ? state.serverHostname : undefined;
            resourceInputs["subdirectory"] = state ? state.subdirectory : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as DatasyncLocationSmbArgs | undefined;
            if ((!args || args.agentArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentArns'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["agentArns"] = args ? args.agentArns : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["mountOptions"] = args ? args.mountOptions : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["serverHostname"] = args ? args.serverHostname : undefined;
            resourceInputs["subdirectory"] = args ? args.subdirectory : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["locationArn"] = undefined /*out*/;
            resourceInputs["locationUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasyncLocationSmb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatasyncLocationSmb resources.
 */
export interface DatasyncLocationSmbState {
    /**
     * The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.
     */
    agentArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Windows domain that the SMB server belongs to.
     */
    domain?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the SMB location that is created.
     */
    locationArn?: pulumi.Input<string>;
    /**
     * The URL of the SMB location that was described.
     */
    locationUri?: pulumi.Input<string>;
    /**
     * The mount options used by DataSync to access the SMB server.
     */
    mountOptions?: pulumi.Input<inputs.DatasyncLocationSmbMountOptions>;
    /**
     * The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
     */
    password?: pulumi.Input<string>;
    /**
     * The name of the SMB server. This value is the IP address or Domain Name Service (DNS) name of the SMB server.
     */
    serverHostname?: pulumi.Input<string>;
    /**
     * The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB
     * destination
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DatasyncLocationSmbTag>[]>;
    /**
     * The user who can mount the share, has the permissions to access files and folders in the SMB share.
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatasyncLocationSmb resource.
 */
export interface DatasyncLocationSmbArgs {
    /**
     * The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.
     */
    agentArns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Windows domain that the SMB server belongs to.
     */
    domain?: pulumi.Input<string>;
    /**
     * The mount options used by DataSync to access the SMB server.
     */
    mountOptions?: pulumi.Input<inputs.DatasyncLocationSmbMountOptions>;
    /**
     * The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
     */
    password?: pulumi.Input<string>;
    /**
     * The name of the SMB server. This value is the IP address or Domain Name Service (DNS) name of the SMB server.
     */
    serverHostname?: pulumi.Input<string>;
    /**
     * The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB
     * destination
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DatasyncLocationSmbTag>[]>;
    /**
     * The user who can mount the share, has the permissions to access files and folders in the SMB share.
     */
    user: pulumi.Input<string>;
}
