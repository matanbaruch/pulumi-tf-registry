// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ec2TransitGatewayMulticastGroupSource extends pulumi.CustomResource {
    /**
     * Get an existing Ec2TransitGatewayMulticastGroupSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2TransitGatewayMulticastGroupSourceState, opts?: pulumi.CustomResourceOptions): Ec2TransitGatewayMulticastGroupSource {
        return new Ec2TransitGatewayMulticastGroupSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2TransitGatewayMulticastGroupSource:Ec2TransitGatewayMulticastGroupSource';

    /**
     * Returns true if the given object is an instance of Ec2TransitGatewayMulticastGroupSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2TransitGatewayMulticastGroupSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2TransitGatewayMulticastGroupSource.__pulumiType;
    }

    /**
     * The IP address assigned to the transit gateway multicast group.
     */
    public readonly groupIpAddress!: pulumi.Output<string>;
    /**
     * Indicates that the resource is a transit gateway multicast group member.
     */
    public /*out*/ readonly groupMember!: pulumi.Output<boolean>;
    /**
     * Indicates that the resource is a transit gateway multicast group member.
     */
    public /*out*/ readonly groupSource!: pulumi.Output<boolean>;
    /**
     * The ID of the transit gateway attachment.
     */
    public readonly networkInterfaceId!: pulumi.Output<string>;
    /**
     * The ID of the resource.
     */
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    /**
     * The type of resource, for example a VPC attachment.
     */
    public /*out*/ readonly resourceType!: pulumi.Output<string>;
    /**
     * The source type.
     */
    public /*out*/ readonly sourceType!: pulumi.Output<string>;
    /**
     * The ID of the subnet.
     */
    public /*out*/ readonly subnetId!: pulumi.Output<string>;
    /**
     * The ID of the transit gateway attachment.
     */
    public /*out*/ readonly transitGatewayAttachmentId!: pulumi.Output<string>;
    /**
     * The ID of the transit gateway multicast domain.
     */
    public readonly transitGatewayMulticastDomainId!: pulumi.Output<string>;

    /**
     * Create a Ec2TransitGatewayMulticastGroupSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2TransitGatewayMulticastGroupSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2TransitGatewayMulticastGroupSourceArgs | Ec2TransitGatewayMulticastGroupSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2TransitGatewayMulticastGroupSourceState | undefined;
            resourceInputs["groupIpAddress"] = state ? state.groupIpAddress : undefined;
            resourceInputs["groupMember"] = state ? state.groupMember : undefined;
            resourceInputs["groupSource"] = state ? state.groupSource : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["transitGatewayAttachmentId"] = state ? state.transitGatewayAttachmentId : undefined;
            resourceInputs["transitGatewayMulticastDomainId"] = state ? state.transitGatewayMulticastDomainId : undefined;
        } else {
            const args = argsOrState as Ec2TransitGatewayMulticastGroupSourceArgs | undefined;
            if ((!args || args.groupIpAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupIpAddress'");
            }
            if ((!args || args.networkInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceId'");
            }
            if ((!args || args.transitGatewayMulticastDomainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitGatewayMulticastDomainId'");
            }
            resourceInputs["groupIpAddress"] = args ? args.groupIpAddress : undefined;
            resourceInputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            resourceInputs["transitGatewayMulticastDomainId"] = args ? args.transitGatewayMulticastDomainId : undefined;
            resourceInputs["groupMember"] = undefined /*out*/;
            resourceInputs["groupSource"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
            resourceInputs["transitGatewayAttachmentId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2TransitGatewayMulticastGroupSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2TransitGatewayMulticastGroupSource resources.
 */
export interface Ec2TransitGatewayMulticastGroupSourceState {
    /**
     * The IP address assigned to the transit gateway multicast group.
     */
    groupIpAddress?: pulumi.Input<string>;
    /**
     * Indicates that the resource is a transit gateway multicast group member.
     */
    groupMember?: pulumi.Input<boolean>;
    /**
     * Indicates that the resource is a transit gateway multicast group member.
     */
    groupSource?: pulumi.Input<boolean>;
    /**
     * The ID of the transit gateway attachment.
     */
    networkInterfaceId?: pulumi.Input<string>;
    /**
     * The ID of the resource.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The type of resource, for example a VPC attachment.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The source type.
     */
    sourceType?: pulumi.Input<string>;
    /**
     * The ID of the subnet.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The ID of the transit gateway attachment.
     */
    transitGatewayAttachmentId?: pulumi.Input<string>;
    /**
     * The ID of the transit gateway multicast domain.
     */
    transitGatewayMulticastDomainId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2TransitGatewayMulticastGroupSource resource.
 */
export interface Ec2TransitGatewayMulticastGroupSourceArgs {
    /**
     * The IP address assigned to the transit gateway multicast group.
     */
    groupIpAddress: pulumi.Input<string>;
    /**
     * The ID of the transit gateway attachment.
     */
    networkInterfaceId: pulumi.Input<string>;
    /**
     * The ID of the transit gateway multicast domain.
     */
    transitGatewayMulticastDomainId: pulumi.Input<string>;
}
