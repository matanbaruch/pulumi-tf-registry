// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcsCluster extends pulumi.CustomResource {
    /**
     * Get an existing EcsCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsClusterState, opts?: pulumi.CustomResourceOptions): EcsCluster {
        return new EcsCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ecsCluster:EcsCluster';

    /**
     * Returns true if the given object is an instance of EcsCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsCluster.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The short name of one or more capacity providers to associate with the cluster. A capacity provider must be associated
     * with a cluster before it can be included as part of the default capacity provider strategy of the cluster or used in a
     * capacity provider strategy when calling the
     * [CreateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html) or
     * [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) actions. If specifying a capacity
     * provider that uses an Auto Scaling group, the capacity provider must be created but not associated with another cluster.
     * New Auto Scaling group capacity providers can be created with the
     * [CreateCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html) API
     * operation. To use a FARGATElong capacity provider, specify either the ``FARGATE`` or ``FARGATE_SPOT`` capacity
     * providers. The FARGATElong capacity providers are available to all accounts and only need to be associated with a
     * cluster to be used. The
     * [PutCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutCapacityProvider.html) API
     * operation is used to update the list of available capacity providers for a cluster after the cluster is created.
     */
    public readonly capacityProviders!: pulumi.Output<string[]>;
    /**
     * A user-generated string that you use to identify your cluster. If you don't specify a name, CFNlong generates a unique
     * physical ID for the name.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The settings to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights for a
     * cluster.
     */
    public readonly clusterSettings!: pulumi.Output<outputs.EcsClusterClusterSetting[]>;
    /**
     * The execute command and managed storage configuration for the cluster.
     */
    public readonly configuration!: pulumi.Output<outputs.EcsClusterConfiguration>;
    /**
     * The default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch
     * type or capacity provider strategy specified, the default capacity provider strategy is used.
     */
    public readonly defaultCapacityProviderStrategies!: pulumi.Output<outputs.EcsClusterDefaultCapacityProviderStrategy[]>;
    /**
     * Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any
     * new services with Service Connect turned on that are created in the cluster are added as client services in the
     * namespace. This setting only applies to new services that set the ``enabled`` parameter to ``true`` in the
     * ``ServiceConnectConfiguration``. You can set the namespace of each service individually in the
     * ``ServiceConnectConfiguration`` to override this default parameter. Tasks that run in a namespace can use short names to
     * connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks
     * connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that
     * Amazon ECS services create are supported with Service Connect. For more information, see [Service
     * Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     */
    public readonly serviceConnectDefaults!: pulumi.Output<outputs.EcsClusterServiceConnectDefaults>;
    /**
     * The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an
     * optional value. You define both. The following basic restrictions apply to tags: + Maximum number of tags per resource -
     * 50 + For each resource, each tag key must be unique, and each tag key can have only one value. + Maximum key length -
     * 128 Unicode characters in UTF-8 + Maximum value length - 256 Unicode characters in UTF-8 + If your tagging schema is
     * used across multiple services and resources, remember that other services may have restrictions on allowed characters.
     * Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
     * = . _ : / @. + Tag keys and values are case-sensitive. + Do not use ``aws:``, ``AWS:``, or any upper or lowercase
     * combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag
     * keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
     */
    public readonly tags!: pulumi.Output<outputs.EcsClusterTag[]>;

    /**
     * Create a EcsCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EcsClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsClusterArgs | EcsClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsClusterState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["capacityProviders"] = state ? state.capacityProviders : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterSettings"] = state ? state.clusterSettings : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["defaultCapacityProviderStrategies"] = state ? state.defaultCapacityProviderStrategies : undefined;
            resourceInputs["serviceConnectDefaults"] = state ? state.serviceConnectDefaults : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as EcsClusterArgs | undefined;
            resourceInputs["capacityProviders"] = args ? args.capacityProviders : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterSettings"] = args ? args.clusterSettings : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["defaultCapacityProviderStrategies"] = args ? args.defaultCapacityProviderStrategies : undefined;
            resourceInputs["serviceConnectDefaults"] = args ? args.serviceConnectDefaults : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcsCluster resources.
 */
export interface EcsClusterState {
    arn?: pulumi.Input<string>;
    /**
     * The short name of one or more capacity providers to associate with the cluster. A capacity provider must be associated
     * with a cluster before it can be included as part of the default capacity provider strategy of the cluster or used in a
     * capacity provider strategy when calling the
     * [CreateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html) or
     * [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) actions. If specifying a capacity
     * provider that uses an Auto Scaling group, the capacity provider must be created but not associated with another cluster.
     * New Auto Scaling group capacity providers can be created with the
     * [CreateCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html) API
     * operation. To use a FARGATElong capacity provider, specify either the ``FARGATE`` or ``FARGATE_SPOT`` capacity
     * providers. The FARGATElong capacity providers are available to all accounts and only need to be associated with a
     * cluster to be used. The
     * [PutCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutCapacityProvider.html) API
     * operation is used to update the list of available capacity providers for a cluster after the cluster is created.
     */
    capacityProviders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A user-generated string that you use to identify your cluster. If you don't specify a name, CFNlong generates a unique
     * physical ID for the name.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The settings to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights for a
     * cluster.
     */
    clusterSettings?: pulumi.Input<pulumi.Input<inputs.EcsClusterClusterSetting>[]>;
    /**
     * The execute command and managed storage configuration for the cluster.
     */
    configuration?: pulumi.Input<inputs.EcsClusterConfiguration>;
    /**
     * The default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch
     * type or capacity provider strategy specified, the default capacity provider strategy is used.
     */
    defaultCapacityProviderStrategies?: pulumi.Input<pulumi.Input<inputs.EcsClusterDefaultCapacityProviderStrategy>[]>;
    /**
     * Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any
     * new services with Service Connect turned on that are created in the cluster are added as client services in the
     * namespace. This setting only applies to new services that set the ``enabled`` parameter to ``true`` in the
     * ``ServiceConnectConfiguration``. You can set the namespace of each service individually in the
     * ``ServiceConnectConfiguration`` to override this default parameter. Tasks that run in a namespace can use short names to
     * connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks
     * connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that
     * Amazon ECS services create are supported with Service Connect. For more information, see [Service
     * Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     */
    serviceConnectDefaults?: pulumi.Input<inputs.EcsClusterServiceConnectDefaults>;
    /**
     * The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an
     * optional value. You define both. The following basic restrictions apply to tags: + Maximum number of tags per resource -
     * 50 + For each resource, each tag key must be unique, and each tag key can have only one value. + Maximum key length -
     * 128 Unicode characters in UTF-8 + Maximum value length - 256 Unicode characters in UTF-8 + If your tagging schema is
     * used across multiple services and resources, remember that other services may have restrictions on allowed characters.
     * Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
     * = . _ : / @. + Tag keys and values are case-sensitive. + Do not use ``aws:``, ``AWS:``, or any upper or lowercase
     * combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag
     * keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EcsClusterTag>[]>;
}

/**
 * The set of arguments for constructing a EcsCluster resource.
 */
export interface EcsClusterArgs {
    /**
     * The short name of one or more capacity providers to associate with the cluster. A capacity provider must be associated
     * with a cluster before it can be included as part of the default capacity provider strategy of the cluster or used in a
     * capacity provider strategy when calling the
     * [CreateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html) or
     * [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) actions. If specifying a capacity
     * provider that uses an Auto Scaling group, the capacity provider must be created but not associated with another cluster.
     * New Auto Scaling group capacity providers can be created with the
     * [CreateCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html) API
     * operation. To use a FARGATElong capacity provider, specify either the ``FARGATE`` or ``FARGATE_SPOT`` capacity
     * providers. The FARGATElong capacity providers are available to all accounts and only need to be associated with a
     * cluster to be used. The
     * [PutCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutCapacityProvider.html) API
     * operation is used to update the list of available capacity providers for a cluster after the cluster is created.
     */
    capacityProviders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A user-generated string that you use to identify your cluster. If you don't specify a name, CFNlong generates a unique
     * physical ID for the name.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The settings to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights for a
     * cluster.
     */
    clusterSettings?: pulumi.Input<pulumi.Input<inputs.EcsClusterClusterSetting>[]>;
    /**
     * The execute command and managed storage configuration for the cluster.
     */
    configuration?: pulumi.Input<inputs.EcsClusterConfiguration>;
    /**
     * The default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch
     * type or capacity provider strategy specified, the default capacity provider strategy is used.
     */
    defaultCapacityProviderStrategies?: pulumi.Input<pulumi.Input<inputs.EcsClusterDefaultCapacityProviderStrategy>[]>;
    /**
     * Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any
     * new services with Service Connect turned on that are created in the cluster are added as client services in the
     * namespace. This setting only applies to new services that set the ``enabled`` parameter to ``true`` in the
     * ``ServiceConnectConfiguration``. You can set the namespace of each service individually in the
     * ``ServiceConnectConfiguration`` to override this default parameter. Tasks that run in a namespace can use short names to
     * connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks
     * connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that
     * Amazon ECS services create are supported with Service Connect. For more information, see [Service
     * Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     */
    serviceConnectDefaults?: pulumi.Input<inputs.EcsClusterServiceConnectDefaults>;
    /**
     * The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an
     * optional value. You define both. The following basic restrictions apply to tags: + Maximum number of tags per resource -
     * 50 + For each resource, each tag key must be unique, and each tag key can have only one value. + Maximum key length -
     * 128 Unicode characters in UTF-8 + Maximum value length - 256 Unicode characters in UTF-8 + If your tagging schema is
     * used across multiple services and resources, remember that other services may have restrictions on allowed characters.
     * Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
     * = . _ : / @. + Tag keys and values are case-sensitive. + Do not use ``aws:``, ``AWS:``, or any upper or lowercase
     * combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag
     * keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EcsClusterTag>[]>;
}
