// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2TransitGatewayPeeringAttachment extends pulumi.CustomResource {
    /**
     * Get an existing Ec2TransitGatewayPeeringAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2TransitGatewayPeeringAttachmentState, opts?: pulumi.CustomResourceOptions): Ec2TransitGatewayPeeringAttachment {
        return new Ec2TransitGatewayPeeringAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2TransitGatewayPeeringAttachment:Ec2TransitGatewayPeeringAttachment';

    /**
     * Returns true if the given object is an instance of Ec2TransitGatewayPeeringAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2TransitGatewayPeeringAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2TransitGatewayPeeringAttachment.__pulumiType;
    }

    /**
     * The time the transit gateway peering attachment was created.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The ID of the peer account
     */
    public readonly peerAccountId!: pulumi.Output<string>;
    /**
     * Peer Region
     */
    public readonly peerRegion!: pulumi.Output<string>;
    /**
     * The ID of the peer transit gateway.
     */
    public readonly peerTransitGatewayId!: pulumi.Output<string>;
    /**
     * The state of the transit gateway peering attachment. Note that the initiating state has been deprecated.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The status of the transit gateway peering attachment.
     */
    public /*out*/ readonly status!: pulumi.Output<outputs.Ec2TransitGatewayPeeringAttachmentStatus>;
    /**
     * The tags for the transit gateway peering attachment.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2TransitGatewayPeeringAttachmentTag[]>;
    /**
     * The ID of the transit gateway peering attachment.
     */
    public /*out*/ readonly transitGatewayAttachmentId!: pulumi.Output<string>;
    /**
     * The ID of the transit gateway.
     */
    public readonly transitGatewayId!: pulumi.Output<string>;

    /**
     * Create a Ec2TransitGatewayPeeringAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2TransitGatewayPeeringAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2TransitGatewayPeeringAttachmentArgs | Ec2TransitGatewayPeeringAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2TransitGatewayPeeringAttachmentState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["peerAccountId"] = state ? state.peerAccountId : undefined;
            resourceInputs["peerRegion"] = state ? state.peerRegion : undefined;
            resourceInputs["peerTransitGatewayId"] = state ? state.peerTransitGatewayId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["transitGatewayAttachmentId"] = state ? state.transitGatewayAttachmentId : undefined;
            resourceInputs["transitGatewayId"] = state ? state.transitGatewayId : undefined;
        } else {
            const args = argsOrState as Ec2TransitGatewayPeeringAttachmentArgs | undefined;
            if ((!args || args.peerAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerAccountId'");
            }
            if ((!args || args.peerRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerRegion'");
            }
            if ((!args || args.peerTransitGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerTransitGatewayId'");
            }
            if ((!args || args.transitGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitGatewayId'");
            }
            resourceInputs["peerAccountId"] = args ? args.peerAccountId : undefined;
            resourceInputs["peerRegion"] = args ? args.peerRegion : undefined;
            resourceInputs["peerTransitGatewayId"] = args ? args.peerTransitGatewayId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transitGatewayId"] = args ? args.transitGatewayId : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["transitGatewayAttachmentId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2TransitGatewayPeeringAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2TransitGatewayPeeringAttachment resources.
 */
export interface Ec2TransitGatewayPeeringAttachmentState {
    /**
     * The time the transit gateway peering attachment was created.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The ID of the peer account
     */
    peerAccountId?: pulumi.Input<string>;
    /**
     * Peer Region
     */
    peerRegion?: pulumi.Input<string>;
    /**
     * The ID of the peer transit gateway.
     */
    peerTransitGatewayId?: pulumi.Input<string>;
    /**
     * The state of the transit gateway peering attachment. Note that the initiating state has been deprecated.
     */
    state?: pulumi.Input<string>;
    /**
     * The status of the transit gateway peering attachment.
     */
    status?: pulumi.Input<inputs.Ec2TransitGatewayPeeringAttachmentStatus>;
    /**
     * The tags for the transit gateway peering attachment.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2TransitGatewayPeeringAttachmentTag>[]>;
    /**
     * The ID of the transit gateway peering attachment.
     */
    transitGatewayAttachmentId?: pulumi.Input<string>;
    /**
     * The ID of the transit gateway.
     */
    transitGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2TransitGatewayPeeringAttachment resource.
 */
export interface Ec2TransitGatewayPeeringAttachmentArgs {
    /**
     * The ID of the peer account
     */
    peerAccountId: pulumi.Input<string>;
    /**
     * Peer Region
     */
    peerRegion: pulumi.Input<string>;
    /**
     * The ID of the peer transit gateway.
     */
    peerTransitGatewayId: pulumi.Input<string>;
    /**
     * The tags for the transit gateway peering attachment.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2TransitGatewayPeeringAttachmentTag>[]>;
    /**
     * The ID of the transit gateway.
     */
    transitGatewayId: pulumi.Input<string>;
}
