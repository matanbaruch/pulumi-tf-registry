// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMediaconnectFlowEntitlement(args: GetMediaconnectFlowEntitlementArgs, opts?: pulumi.InvokeOptions): Promise<GetMediaconnectFlowEntitlementResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getMediaconnectFlowEntitlement:getMediaconnectFlowEntitlement", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMediaconnectFlowEntitlement.
 */
export interface GetMediaconnectFlowEntitlementArgs {
    id: string;
}

/**
 * A collection of values returned by getMediaconnectFlowEntitlement.
 */
export interface GetMediaconnectFlowEntitlementResult {
    readonly dataTransferSubscriberFeePercent: number;
    readonly description: string;
    readonly encryption: outputs.GetMediaconnectFlowEntitlementEncryption;
    readonly entitlementArn: string;
    readonly entitlementStatus: string;
    readonly flowArn: string;
    readonly id: string;
    readonly name: string;
    readonly subscribers: string[];
}
export function getMediaconnectFlowEntitlementOutput(args: GetMediaconnectFlowEntitlementOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMediaconnectFlowEntitlementResult> {
    return pulumi.output(args).apply((a: any) => getMediaconnectFlowEntitlement(a, opts))
}

/**
 * A collection of arguments for invoking getMediaconnectFlowEntitlement.
 */
export interface GetMediaconnectFlowEntitlementOutputArgs {
    id: pulumi.Input<string>;
}
