// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SecurityhubOrganizationConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing SecurityhubOrganizationConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityhubOrganizationConfigurationState, opts?: pulumi.CustomResourceOptions): SecurityhubOrganizationConfiguration {
        return new SecurityhubOrganizationConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/securityhubOrganizationConfiguration:SecurityhubOrganizationConfiguration';

    /**
     * Returns true if the given object is an instance of SecurityhubOrganizationConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityhubOrganizationConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityhubOrganizationConfiguration.__pulumiType;
    }

    /**
     * Whether to automatically enable Security Hub in new member accounts when they join the organization.
     */
    public readonly autoEnable!: pulumi.Output<boolean>;
    /**
     * Whether to automatically enable Security Hub default standards in new member accounts when they join the organization.
     */
    public readonly autoEnableStandards!: pulumi.Output<string>;
    /**
     * Indicates whether the organization uses local or central configuration.
     */
    public readonly configurationType!: pulumi.Output<string>;
    /**
     * Whether the maximum number of allowed member accounts are already associated with the Security Hub administrator
     * account.
     */
    public /*out*/ readonly memberAccountLimitReached!: pulumi.Output<boolean>;
    /**
     * The identifier of the OrganizationConfiguration being created and assigned as the unique identifier.
     */
    public /*out*/ readonly organizationConfigurationIdentifier!: pulumi.Output<string>;
    /**
     * Describes whether central configuration could be enabled as the ConfigurationType for the organization.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Provides an explanation if the value of Status is equal to FAILED when ConfigurationType is equal to CENTRAL.
     */
    public /*out*/ readonly statusMessage!: pulumi.Output<string>;

    /**
     * Create a SecurityhubOrganizationConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityhubOrganizationConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityhubOrganizationConfigurationArgs | SecurityhubOrganizationConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityhubOrganizationConfigurationState | undefined;
            resourceInputs["autoEnable"] = state ? state.autoEnable : undefined;
            resourceInputs["autoEnableStandards"] = state ? state.autoEnableStandards : undefined;
            resourceInputs["configurationType"] = state ? state.configurationType : undefined;
            resourceInputs["memberAccountLimitReached"] = state ? state.memberAccountLimitReached : undefined;
            resourceInputs["organizationConfigurationIdentifier"] = state ? state.organizationConfigurationIdentifier : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusMessage"] = state ? state.statusMessage : undefined;
        } else {
            const args = argsOrState as SecurityhubOrganizationConfigurationArgs | undefined;
            if ((!args || args.autoEnable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoEnable'");
            }
            resourceInputs["autoEnable"] = args ? args.autoEnable : undefined;
            resourceInputs["autoEnableStandards"] = args ? args.autoEnableStandards : undefined;
            resourceInputs["configurationType"] = args ? args.configurationType : undefined;
            resourceInputs["memberAccountLimitReached"] = undefined /*out*/;
            resourceInputs["organizationConfigurationIdentifier"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityhubOrganizationConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecurityhubOrganizationConfiguration resources.
 */
export interface SecurityhubOrganizationConfigurationState {
    /**
     * Whether to automatically enable Security Hub in new member accounts when they join the organization.
     */
    autoEnable?: pulumi.Input<boolean>;
    /**
     * Whether to automatically enable Security Hub default standards in new member accounts when they join the organization.
     */
    autoEnableStandards?: pulumi.Input<string>;
    /**
     * Indicates whether the organization uses local or central configuration.
     */
    configurationType?: pulumi.Input<string>;
    /**
     * Whether the maximum number of allowed member accounts are already associated with the Security Hub administrator
     * account.
     */
    memberAccountLimitReached?: pulumi.Input<boolean>;
    /**
     * The identifier of the OrganizationConfiguration being created and assigned as the unique identifier.
     */
    organizationConfigurationIdentifier?: pulumi.Input<string>;
    /**
     * Describes whether central configuration could be enabled as the ConfigurationType for the organization.
     */
    status?: pulumi.Input<string>;
    /**
     * Provides an explanation if the value of Status is equal to FAILED when ConfigurationType is equal to CENTRAL.
     */
    statusMessage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityhubOrganizationConfiguration resource.
 */
export interface SecurityhubOrganizationConfigurationArgs {
    /**
     * Whether to automatically enable Security Hub in new member accounts when they join the organization.
     */
    autoEnable: pulumi.Input<boolean>;
    /**
     * Whether to automatically enable Security Hub default standards in new member accounts when they join the organization.
     */
    autoEnableStandards?: pulumi.Input<string>;
    /**
     * Indicates whether the organization uses local or central configuration.
     */
    configurationType?: pulumi.Input<string>;
}
