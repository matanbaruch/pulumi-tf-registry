// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2PlacementGroup extends pulumi.CustomResource {
    /**
     * Get an existing Ec2PlacementGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2PlacementGroupState, opts?: pulumi.CustomResourceOptions): Ec2PlacementGroup {
        return new Ec2PlacementGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2PlacementGroup:Ec2PlacementGroup';

    /**
     * Returns true if the given object is an instance of Ec2PlacementGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2PlacementGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2PlacementGroup.__pulumiType;
    }

    /**
     * The Group Name of Placement Group.
     */
    public /*out*/ readonly groupName!: pulumi.Output<string>;
    /**
     * The number of partitions. Valid only when **Strategy** is set to `partition`
     */
    public readonly partitionCount!: pulumi.Output<number>;
    /**
     * The Spread Level of Placement Group is an enum where it accepts either host or rack when strategy is spread
     */
    public readonly spreadLevel!: pulumi.Output<string>;
    /**
     * The placement strategy.
     */
    public readonly strategy!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2PlacementGroupTag[]>;

    /**
     * Create a Ec2PlacementGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Ec2PlacementGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2PlacementGroupArgs | Ec2PlacementGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2PlacementGroupState | undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["partitionCount"] = state ? state.partitionCount : undefined;
            resourceInputs["spreadLevel"] = state ? state.spreadLevel : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as Ec2PlacementGroupArgs | undefined;
            resourceInputs["partitionCount"] = args ? args.partitionCount : undefined;
            resourceInputs["spreadLevel"] = args ? args.spreadLevel : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["groupName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2PlacementGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2PlacementGroup resources.
 */
export interface Ec2PlacementGroupState {
    /**
     * The Group Name of Placement Group.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The number of partitions. Valid only when **Strategy** is set to `partition`
     */
    partitionCount?: pulumi.Input<number>;
    /**
     * The Spread Level of Placement Group is an enum where it accepts either host or rack when strategy is spread
     */
    spreadLevel?: pulumi.Input<string>;
    /**
     * The placement strategy.
     */
    strategy?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2PlacementGroupTag>[]>;
}

/**
 * The set of arguments for constructing a Ec2PlacementGroup resource.
 */
export interface Ec2PlacementGroupArgs {
    /**
     * The number of partitions. Valid only when **Strategy** is set to `partition`
     */
    partitionCount?: pulumi.Input<number>;
    /**
     * The Spread Level of Placement Group is an enum where it accepts either host or rack when strategy is spread
     */
    spreadLevel?: pulumi.Input<string>;
    /**
     * The placement strategy.
     */
    strategy?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2PlacementGroupTag>[]>;
}
