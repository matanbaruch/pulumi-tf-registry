// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AthenaDataCatalog extends pulumi.CustomResource {
    /**
     * Get an existing AthenaDataCatalog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AthenaDataCatalogState, opts?: pulumi.CustomResourceOptions): AthenaDataCatalog {
        return new AthenaDataCatalog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/athenaDataCatalog:AthenaDataCatalog';

    /**
     * Returns true if the given object is an instance of AthenaDataCatalog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AthenaDataCatalog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AthenaDataCatalog.__pulumiType;
    }

    /**
     * A description of the data catalog to be created.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128
     * alphanumeric, underscore, at sign, or hyphen characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend
     * on the catalog type.
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string}>;
    /**
     * A list of comma separated tags to add to the data catalog that is created.
     */
    public readonly tags!: pulumi.Output<outputs.AthenaDataCatalogTag[]>;
    /**
     * The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external
     * hive metastore.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a AthenaDataCatalog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AthenaDataCatalogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AthenaDataCatalogArgs | AthenaDataCatalogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AthenaDataCatalogState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AthenaDataCatalogArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AthenaDataCatalog.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AthenaDataCatalog resources.
 */
export interface AthenaDataCatalogState {
    /**
     * A description of the data catalog to be created.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128
     * alphanumeric, underscore, at sign, or hyphen characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend
     * on the catalog type.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of comma separated tags to add to the data catalog that is created.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AthenaDataCatalogTag>[]>;
    /**
     * The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external
     * hive metastore.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AthenaDataCatalog resource.
 */
export interface AthenaDataCatalogArgs {
    /**
     * A description of the data catalog to be created.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128
     * alphanumeric, underscore, at sign, or hyphen characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend
     * on the catalog type.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of comma separated tags to add to the data catalog that is created.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AthenaDataCatalogTag>[]>;
    /**
     * The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external
     * hive metastore.
     */
    type: pulumi.Input<string>;
}
