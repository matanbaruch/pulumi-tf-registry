// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ForecastDataset extends pulumi.CustomResource {
    /**
     * Get an existing ForecastDataset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ForecastDatasetState, opts?: pulumi.CustomResourceOptions): ForecastDataset {
        return new ForecastDataset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/forecastDataset:ForecastDataset';

    /**
     * Returns true if the given object is an instance of ForecastDataset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ForecastDataset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ForecastDataset.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Frequency of data collection. This parameter is required for RELATED_TIME_SERIES
     */
    public readonly dataFrequency!: pulumi.Output<string>;
    /**
     * A name for the dataset
     */
    public readonly datasetName!: pulumi.Output<string>;
    /**
     * The dataset type
     */
    public readonly datasetType!: pulumi.Output<string>;
    /**
     * The domain associated with the dataset
     */
    public readonly domain!: pulumi.Output<string>;
    public readonly encryptionConfig!: pulumi.Output<outputs.ForecastDatasetEncryptionConfig>;
    public readonly schema!: pulumi.Output<outputs.ForecastDatasetSchema>;
    public readonly tags!: pulumi.Output<outputs.ForecastDatasetTag[]>;

    /**
     * Create a ForecastDataset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ForecastDatasetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ForecastDatasetArgs | ForecastDatasetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ForecastDatasetState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["dataFrequency"] = state ? state.dataFrequency : undefined;
            resourceInputs["datasetName"] = state ? state.datasetName : undefined;
            resourceInputs["datasetType"] = state ? state.datasetType : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["encryptionConfig"] = state ? state.encryptionConfig : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ForecastDatasetArgs | undefined;
            if ((!args || args.datasetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasetName'");
            }
            if ((!args || args.datasetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasetType'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["dataFrequency"] = args ? args.dataFrequency : undefined;
            resourceInputs["datasetName"] = args ? args.datasetName : undefined;
            resourceInputs["datasetType"] = args ? args.datasetType : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["encryptionConfig"] = args ? args.encryptionConfig : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ForecastDataset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ForecastDataset resources.
 */
export interface ForecastDatasetState {
    arn?: pulumi.Input<string>;
    /**
     * Frequency of data collection. This parameter is required for RELATED_TIME_SERIES
     */
    dataFrequency?: pulumi.Input<string>;
    /**
     * A name for the dataset
     */
    datasetName?: pulumi.Input<string>;
    /**
     * The dataset type
     */
    datasetType?: pulumi.Input<string>;
    /**
     * The domain associated with the dataset
     */
    domain?: pulumi.Input<string>;
    encryptionConfig?: pulumi.Input<inputs.ForecastDatasetEncryptionConfig>;
    schema?: pulumi.Input<inputs.ForecastDatasetSchema>;
    tags?: pulumi.Input<pulumi.Input<inputs.ForecastDatasetTag>[]>;
}

/**
 * The set of arguments for constructing a ForecastDataset resource.
 */
export interface ForecastDatasetArgs {
    /**
     * Frequency of data collection. This parameter is required for RELATED_TIME_SERIES
     */
    dataFrequency?: pulumi.Input<string>;
    /**
     * A name for the dataset
     */
    datasetName: pulumi.Input<string>;
    /**
     * The dataset type
     */
    datasetType: pulumi.Input<string>;
    /**
     * The domain associated with the dataset
     */
    domain: pulumi.Input<string>;
    encryptionConfig?: pulumi.Input<inputs.ForecastDatasetEncryptionConfig>;
    schema: pulumi.Input<inputs.ForecastDatasetSchema>;
    tags?: pulumi.Input<pulumi.Input<inputs.ForecastDatasetTag>[]>;
}
