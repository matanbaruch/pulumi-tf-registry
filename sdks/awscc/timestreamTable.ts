// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TimestreamTable extends pulumi.CustomResource {
    /**
     * Get an existing TimestreamTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TimestreamTableState, opts?: pulumi.CustomResourceOptions): TimestreamTable {
        return new TimestreamTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/timestreamTable:TimestreamTable';

    /**
     * Returns true if the given object is an instance of TimestreamTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TimestreamTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TimestreamTable.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The name for the database which the table to be created belongs to.
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * The properties that determine whether magnetic store writes are enabled.
     */
    public readonly magneticStoreWriteProperties!: pulumi.Output<outputs.TimestreamTableMagneticStoreWriteProperties>;
    /**
     * The table name exposed as a read-only attribute.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The retention duration of the memory store and the magnetic store.
     */
    public readonly retentionProperties!: pulumi.Output<outputs.TimestreamTableRetentionProperties>;
    /**
     * A Schema specifies the expected data model of the table.
     */
    public readonly schema!: pulumi.Output<outputs.TimestreamTableSchema>;
    /**
     * The name for the table. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID
     * for the table name.
     */
    public readonly tableName!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.TimestreamTableTag[]>;

    /**
     * Create a TimestreamTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TimestreamTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TimestreamTableArgs | TimestreamTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TimestreamTableState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["magneticStoreWriteProperties"] = state ? state.magneticStoreWriteProperties : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["retentionProperties"] = state ? state.retentionProperties : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as TimestreamTableArgs | undefined;
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["magneticStoreWriteProperties"] = args ? args.magneticStoreWriteProperties : undefined;
            resourceInputs["retentionProperties"] = args ? args.retentionProperties : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TimestreamTable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TimestreamTable resources.
 */
export interface TimestreamTableState {
    arn?: pulumi.Input<string>;
    /**
     * The name for the database which the table to be created belongs to.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The properties that determine whether magnetic store writes are enabled.
     */
    magneticStoreWriteProperties?: pulumi.Input<inputs.TimestreamTableMagneticStoreWriteProperties>;
    /**
     * The table name exposed as a read-only attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * The retention duration of the memory store and the magnetic store.
     */
    retentionProperties?: pulumi.Input<inputs.TimestreamTableRetentionProperties>;
    /**
     * A Schema specifies the expected data model of the table.
     */
    schema?: pulumi.Input<inputs.TimestreamTableSchema>;
    /**
     * The name for the table. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID
     * for the table name.
     */
    tableName?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TimestreamTableTag>[]>;
}

/**
 * The set of arguments for constructing a TimestreamTable resource.
 */
export interface TimestreamTableArgs {
    /**
     * The name for the database which the table to be created belongs to.
     */
    databaseName: pulumi.Input<string>;
    /**
     * The properties that determine whether magnetic store writes are enabled.
     */
    magneticStoreWriteProperties?: pulumi.Input<inputs.TimestreamTableMagneticStoreWriteProperties>;
    /**
     * The retention duration of the memory store and the magnetic store.
     */
    retentionProperties?: pulumi.Input<inputs.TimestreamTableRetentionProperties>;
    /**
     * A Schema specifies the expected data model of the table.
     */
    schema?: pulumi.Input<inputs.TimestreamTableSchema>;
    /**
     * The name for the table. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID
     * for the table name.
     */
    tableName?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TimestreamTableTag>[]>;
}
