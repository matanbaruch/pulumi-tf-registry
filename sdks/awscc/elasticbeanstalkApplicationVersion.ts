// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElasticbeanstalkApplicationVersion extends pulumi.CustomResource {
    /**
     * Get an existing ElasticbeanstalkApplicationVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticbeanstalkApplicationVersionState, opts?: pulumi.CustomResourceOptions): ElasticbeanstalkApplicationVersion {
        return new ElasticbeanstalkApplicationVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/elasticbeanstalkApplicationVersion:ElasticbeanstalkApplicationVersion';

    /**
     * Returns true if the given object is an instance of ElasticbeanstalkApplicationVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticbeanstalkApplicationVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticbeanstalkApplicationVersion.__pulumiType;
    }

    /**
     * The name of the Elastic Beanstalk application that is associated with this application version.
     */
    public readonly applicationName!: pulumi.Output<string>;
    public /*out*/ readonly applicationVersionId!: pulumi.Output<string>;
    /**
     * A description of this application version.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The Amazon S3 bucket and key that identify the location of the source bundle for this version.
     */
    public readonly sourceBundle!: pulumi.Output<outputs.ElasticbeanstalkApplicationVersionSourceBundle>;

    /**
     * Create a ElasticbeanstalkApplicationVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticbeanstalkApplicationVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticbeanstalkApplicationVersionArgs | ElasticbeanstalkApplicationVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticbeanstalkApplicationVersionState | undefined;
            resourceInputs["applicationName"] = state ? state.applicationName : undefined;
            resourceInputs["applicationVersionId"] = state ? state.applicationVersionId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["sourceBundle"] = state ? state.sourceBundle : undefined;
        } else {
            const args = argsOrState as ElasticbeanstalkApplicationVersionArgs | undefined;
            if ((!args || args.applicationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationName'");
            }
            if ((!args || args.sourceBundle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceBundle'");
            }
            resourceInputs["applicationName"] = args ? args.applicationName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["sourceBundle"] = args ? args.sourceBundle : undefined;
            resourceInputs["applicationVersionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElasticbeanstalkApplicationVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticbeanstalkApplicationVersion resources.
 */
export interface ElasticbeanstalkApplicationVersionState {
    /**
     * The name of the Elastic Beanstalk application that is associated with this application version.
     */
    applicationName?: pulumi.Input<string>;
    applicationVersionId?: pulumi.Input<string>;
    /**
     * A description of this application version.
     */
    description?: pulumi.Input<string>;
    /**
     * The Amazon S3 bucket and key that identify the location of the source bundle for this version.
     */
    sourceBundle?: pulumi.Input<inputs.ElasticbeanstalkApplicationVersionSourceBundle>;
}

/**
 * The set of arguments for constructing a ElasticbeanstalkApplicationVersion resource.
 */
export interface ElasticbeanstalkApplicationVersionArgs {
    /**
     * The name of the Elastic Beanstalk application that is associated with this application version.
     */
    applicationName: pulumi.Input<string>;
    /**
     * A description of this application version.
     */
    description?: pulumi.Input<string>;
    /**
     * The Amazon S3 bucket and key that identify the location of the source bundle for this version.
     */
    sourceBundle: pulumi.Input<inputs.ElasticbeanstalkApplicationVersionSourceBundle>;
}
