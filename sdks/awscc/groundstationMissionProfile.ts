// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GroundstationMissionProfile extends pulumi.CustomResource {
    /**
     * Get an existing GroundstationMissionProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroundstationMissionProfileState, opts?: pulumi.CustomResourceOptions): GroundstationMissionProfile {
        return new GroundstationMissionProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/groundstationMissionProfile:GroundstationMissionProfile';

    /**
     * Returns true if the given object is an instance of GroundstationMissionProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroundstationMissionProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroundstationMissionProfile.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Post-pass time needed after the contact.
     */
    public readonly contactPostPassDurationSeconds!: pulumi.Output<number>;
    /**
     * Pre-pass time needed before the contact.
     */
    public readonly contactPrePassDurationSeconds!: pulumi.Output<number>;
    public readonly dataflowEdges!: pulumi.Output<outputs.GroundstationMissionProfileDataflowEdge[]>;
    /**
     * Visibilities with shorter duration than the specified minimum viable contact duration will be ignored when searching for
     * available contacts.
     */
    public readonly minimumViableContactDurationSeconds!: pulumi.Output<number>;
    public /*out*/ readonly missionProfileId!: pulumi.Output<string>;
    /**
     * A name used to identify a mission profile.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly region!: pulumi.Output<string>;
    /**
     * The ARN of a KMS Key used for encrypting data during transmission from the source to destination locations.
     */
    public readonly streamsKmsKey!: pulumi.Output<outputs.GroundstationMissionProfileStreamsKmsKey>;
    /**
     * The ARN of the KMS Key or Alias Key role used to define permissions on KMS Key usage.
     */
    public readonly streamsKmsRole!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.GroundstationMissionProfileTag[]>;
    public readonly trackingConfigArn!: pulumi.Output<string>;

    /**
     * Create a GroundstationMissionProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroundstationMissionProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroundstationMissionProfileArgs | GroundstationMissionProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroundstationMissionProfileState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["contactPostPassDurationSeconds"] = state ? state.contactPostPassDurationSeconds : undefined;
            resourceInputs["contactPrePassDurationSeconds"] = state ? state.contactPrePassDurationSeconds : undefined;
            resourceInputs["dataflowEdges"] = state ? state.dataflowEdges : undefined;
            resourceInputs["minimumViableContactDurationSeconds"] = state ? state.minimumViableContactDurationSeconds : undefined;
            resourceInputs["missionProfileId"] = state ? state.missionProfileId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["streamsKmsKey"] = state ? state.streamsKmsKey : undefined;
            resourceInputs["streamsKmsRole"] = state ? state.streamsKmsRole : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trackingConfigArn"] = state ? state.trackingConfigArn : undefined;
        } else {
            const args = argsOrState as GroundstationMissionProfileArgs | undefined;
            if ((!args || args.dataflowEdges === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataflowEdges'");
            }
            if ((!args || args.minimumViableContactDurationSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minimumViableContactDurationSeconds'");
            }
            if ((!args || args.trackingConfigArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trackingConfigArn'");
            }
            resourceInputs["contactPostPassDurationSeconds"] = args ? args.contactPostPassDurationSeconds : undefined;
            resourceInputs["contactPrePassDurationSeconds"] = args ? args.contactPrePassDurationSeconds : undefined;
            resourceInputs["dataflowEdges"] = args ? args.dataflowEdges : undefined;
            resourceInputs["minimumViableContactDurationSeconds"] = args ? args.minimumViableContactDurationSeconds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["streamsKmsKey"] = args ? args.streamsKmsKey : undefined;
            resourceInputs["streamsKmsRole"] = args ? args.streamsKmsRole : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trackingConfigArn"] = args ? args.trackingConfigArn : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["missionProfileId"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroundstationMissionProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GroundstationMissionProfile resources.
 */
export interface GroundstationMissionProfileState {
    arn?: pulumi.Input<string>;
    /**
     * Post-pass time needed after the contact.
     */
    contactPostPassDurationSeconds?: pulumi.Input<number>;
    /**
     * Pre-pass time needed before the contact.
     */
    contactPrePassDurationSeconds?: pulumi.Input<number>;
    dataflowEdges?: pulumi.Input<pulumi.Input<inputs.GroundstationMissionProfileDataflowEdge>[]>;
    /**
     * Visibilities with shorter duration than the specified minimum viable contact duration will be ignored when searching for
     * available contacts.
     */
    minimumViableContactDurationSeconds?: pulumi.Input<number>;
    missionProfileId?: pulumi.Input<string>;
    /**
     * A name used to identify a mission profile.
     */
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * The ARN of a KMS Key used for encrypting data during transmission from the source to destination locations.
     */
    streamsKmsKey?: pulumi.Input<inputs.GroundstationMissionProfileStreamsKmsKey>;
    /**
     * The ARN of the KMS Key or Alias Key role used to define permissions on KMS Key usage.
     */
    streamsKmsRole?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GroundstationMissionProfileTag>[]>;
    trackingConfigArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroundstationMissionProfile resource.
 */
export interface GroundstationMissionProfileArgs {
    /**
     * Post-pass time needed after the contact.
     */
    contactPostPassDurationSeconds?: pulumi.Input<number>;
    /**
     * Pre-pass time needed before the contact.
     */
    contactPrePassDurationSeconds?: pulumi.Input<number>;
    dataflowEdges: pulumi.Input<pulumi.Input<inputs.GroundstationMissionProfileDataflowEdge>[]>;
    /**
     * Visibilities with shorter duration than the specified minimum viable contact duration will be ignored when searching for
     * available contacts.
     */
    minimumViableContactDurationSeconds: pulumi.Input<number>;
    /**
     * A name used to identify a mission profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of a KMS Key used for encrypting data during transmission from the source to destination locations.
     */
    streamsKmsKey?: pulumi.Input<inputs.GroundstationMissionProfileStreamsKmsKey>;
    /**
     * The ARN of the KMS Key or Alias Key role used to define permissions on KMS Key usage.
     */
    streamsKmsRole?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GroundstationMissionProfileTag>[]>;
    trackingConfigArn: pulumi.Input<string>;
}
