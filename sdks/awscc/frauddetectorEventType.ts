// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FrauddetectorEventType extends pulumi.CustomResource {
    /**
     * Get an existing FrauddetectorEventType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrauddetectorEventTypeState, opts?: pulumi.CustomResourceOptions): FrauddetectorEventType {
        return new FrauddetectorEventType(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/frauddetectorEventType:FrauddetectorEventType';

    /**
     * Returns true if the given object is an instance of FrauddetectorEventType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FrauddetectorEventType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FrauddetectorEventType.__pulumiType;
    }

    /**
     * The ARN of the event type.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The time when the event type was created.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * The description of the event type.
     */
    public readonly description!: pulumi.Output<string>;
    public readonly entityTypes!: pulumi.Output<outputs.FrauddetectorEventTypeEntityType[]>;
    public readonly eventVariables!: pulumi.Output<outputs.FrauddetectorEventTypeEventVariable[]>;
    public readonly labels!: pulumi.Output<outputs.FrauddetectorEventTypeLabel[]>;
    /**
     * The time when the event type was last updated.
     */
    public /*out*/ readonly lastUpdatedTime!: pulumi.Output<string>;
    /**
     * The name for the event type
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Tags associated with this event type.
     */
    public readonly tags!: pulumi.Output<outputs.FrauddetectorEventTypeTag[]>;

    /**
     * Create a FrauddetectorEventType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrauddetectorEventTypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrauddetectorEventTypeArgs | FrauddetectorEventTypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrauddetectorEventTypeState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["entityTypes"] = state ? state.entityTypes : undefined;
            resourceInputs["eventVariables"] = state ? state.eventVariables : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lastUpdatedTime"] = state ? state.lastUpdatedTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as FrauddetectorEventTypeArgs | undefined;
            if ((!args || args.entityTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityTypes'");
            }
            if ((!args || args.eventVariables === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventVariables'");
            }
            if ((!args || args.labels === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labels'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["entityTypes"] = args ? args.entityTypes : undefined;
            resourceInputs["eventVariables"] = args ? args.eventVariables : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FrauddetectorEventType.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FrauddetectorEventType resources.
 */
export interface FrauddetectorEventTypeState {
    /**
     * The ARN of the event type.
     */
    arn?: pulumi.Input<string>;
    /**
     * The time when the event type was created.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * The description of the event type.
     */
    description?: pulumi.Input<string>;
    entityTypes?: pulumi.Input<pulumi.Input<inputs.FrauddetectorEventTypeEntityType>[]>;
    eventVariables?: pulumi.Input<pulumi.Input<inputs.FrauddetectorEventTypeEventVariable>[]>;
    labels?: pulumi.Input<pulumi.Input<inputs.FrauddetectorEventTypeLabel>[]>;
    /**
     * The time when the event type was last updated.
     */
    lastUpdatedTime?: pulumi.Input<string>;
    /**
     * The name for the event type
     */
    name?: pulumi.Input<string>;
    /**
     * Tags associated with this event type.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.FrauddetectorEventTypeTag>[]>;
}

/**
 * The set of arguments for constructing a FrauddetectorEventType resource.
 */
export interface FrauddetectorEventTypeArgs {
    /**
     * The description of the event type.
     */
    description?: pulumi.Input<string>;
    entityTypes: pulumi.Input<pulumi.Input<inputs.FrauddetectorEventTypeEntityType>[]>;
    eventVariables: pulumi.Input<pulumi.Input<inputs.FrauddetectorEventTypeEventVariable>[]>;
    labels: pulumi.Input<pulumi.Input<inputs.FrauddetectorEventTypeLabel>[]>;
    /**
     * The name for the event type
     */
    name?: pulumi.Input<string>;
    /**
     * Tags associated with this event type.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.FrauddetectorEventTypeTag>[]>;
}
