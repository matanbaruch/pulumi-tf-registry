// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRamPermission(args: GetRamPermissionArgs, opts?: pulumi.InvokeOptions): Promise<GetRamPermissionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getRamPermission:getRamPermission", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRamPermission.
 */
export interface GetRamPermissionArgs {
    id: string;
}

/**
 * A collection of values returned by getRamPermission.
 */
export interface GetRamPermissionResult {
    readonly arn: string;
    readonly id: string;
    readonly isResourceTypeDefault: boolean;
    readonly name: string;
    readonly permissionType: string;
    readonly policyTemplate: string;
    readonly resourceType: string;
    readonly tags: outputs.GetRamPermissionTag[];
    readonly version: string;
}
export function getRamPermissionOutput(args: GetRamPermissionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRamPermissionResult> {
    return pulumi.output(args).apply((a: any) => getRamPermission(a, opts))
}

/**
 * A collection of arguments for invoking getRamPermission.
 */
export interface GetRamPermissionOutputArgs {
    id: pulumi.Input<string>;
}
