// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Apigatewayv2Authorizer extends pulumi.CustomResource {
    /**
     * Get an existing Apigatewayv2Authorizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Apigatewayv2AuthorizerState, opts?: pulumi.CustomResourceOptions): Apigatewayv2Authorizer {
        return new Apigatewayv2Authorizer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/apigatewayv2Authorizer:Apigatewayv2Authorizer';

    /**
     * Returns true if the given object is an instance of Apigatewayv2Authorizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Apigatewayv2Authorizer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Apigatewayv2Authorizer.__pulumiType;
    }

    /**
     * The API identifier.
     */
    public readonly apiId!: pulumi.Output<string>;
    /**
     * Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for
     * API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda
     * function, specify null. Supported only for ``REQUEST`` authorizers.
     */
    public readonly authorizerCredentialsArn!: pulumi.Output<string>;
    public /*out*/ readonly authorizerId!: pulumi.Output<string>;
    /**
     * Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
     * Supported values are ``1.0`` and ``2.0``. To learn more, see [Working with Lambda authorizers for HTTP
     * APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
     */
    public readonly authorizerPayloadFormatVersion!: pulumi.Output<string>;
    /**
     * The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If
     * it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for
     * HTTP API Lambda authorizers.
     */
    public readonly authorizerResultTtlInSeconds!: pulumi.Output<number>;
    /**
     * The authorizer type. Specify ``REQUEST`` for a Lambda function using incoming request parameters. Specify ``JWT`` to use
     * JSON Web Tokens (supported only for HTTP APIs).
     */
    public readonly authorizerType!: pulumi.Output<string>;
    /**
     * The authorizer's Uniform Resource Identifier (URI). For ``REQUEST`` authorizers, this must be a well-formed Lambda
     * function URI, for example,
     * ``arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations``.
     * In general, the URI has this form: ``arn:aws:apigateway:{region}:lambda:path/{service_api}``, where *{region}* is the
     * same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated
     * as the path to the resource, including the initial ``/``. For Lambda functions, this is usually of the form
     * ``/2015-03-31/functions/[FunctionARN]/invocations``.
     */
    public readonly authorizerUri!: pulumi.Output<string>;
    /**
     * Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return
     * an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for
     * HTTP APIs. To learn more, see [Working with Lambda authorizers for HTTP
     * APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
     */
    public readonly enableSimpleResponses!: pulumi.Output<boolean>;
    /**
     * The identity source for which authorization is requested. For a ``REQUEST`` authorizer, this is optional. The value is a
     * set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query
     * string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string
     * parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for
     * WebSocket APIs. For HTTP APIs, use selection expressions prefixed with ``$``, for example, ``$request.header.Auth``,
     * ``$request.querystring.Name``. These parameters are used to perform runtime validation for Lambda-based authorizers by
     * verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when
     * this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized
     * response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when
     * caching is enabled. To learn more, see [Working with Lambda authorizers for HTTP
     * APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html). For ``JWT``, a
     * single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based
     * and query parameter-based selections are supported, for example ``$request.header.Authorization``.
     */
    public readonly identitySources!: pulumi.Output<string[]>;
    /**
     * This parameter is not used.
     */
    public readonly identityValidationExpression!: pulumi.Output<string>;
    /**
     * The ``JWTConfiguration`` property specifies the configuration of a JWT authorizer. Required for the ``JWT`` authorizer
     * type. Supported only for HTTP APIs.
     */
    public readonly jwtConfiguration!: pulumi.Output<outputs.Apigatewayv2AuthorizerJwtConfiguration>;
    /**
     * The name of the authorizer.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a Apigatewayv2Authorizer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Apigatewayv2AuthorizerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Apigatewayv2AuthorizerArgs | Apigatewayv2AuthorizerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Apigatewayv2AuthorizerState | undefined;
            resourceInputs["apiId"] = state ? state.apiId : undefined;
            resourceInputs["authorizerCredentialsArn"] = state ? state.authorizerCredentialsArn : undefined;
            resourceInputs["authorizerId"] = state ? state.authorizerId : undefined;
            resourceInputs["authorizerPayloadFormatVersion"] = state ? state.authorizerPayloadFormatVersion : undefined;
            resourceInputs["authorizerResultTtlInSeconds"] = state ? state.authorizerResultTtlInSeconds : undefined;
            resourceInputs["authorizerType"] = state ? state.authorizerType : undefined;
            resourceInputs["authorizerUri"] = state ? state.authorizerUri : undefined;
            resourceInputs["enableSimpleResponses"] = state ? state.enableSimpleResponses : undefined;
            resourceInputs["identitySources"] = state ? state.identitySources : undefined;
            resourceInputs["identityValidationExpression"] = state ? state.identityValidationExpression : undefined;
            resourceInputs["jwtConfiguration"] = state ? state.jwtConfiguration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as Apigatewayv2AuthorizerArgs | undefined;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.authorizerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizerType'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["authorizerCredentialsArn"] = args ? args.authorizerCredentialsArn : undefined;
            resourceInputs["authorizerPayloadFormatVersion"] = args ? args.authorizerPayloadFormatVersion : undefined;
            resourceInputs["authorizerResultTtlInSeconds"] = args ? args.authorizerResultTtlInSeconds : undefined;
            resourceInputs["authorizerType"] = args ? args.authorizerType : undefined;
            resourceInputs["authorizerUri"] = args ? args.authorizerUri : undefined;
            resourceInputs["enableSimpleResponses"] = args ? args.enableSimpleResponses : undefined;
            resourceInputs["identitySources"] = args ? args.identitySources : undefined;
            resourceInputs["identityValidationExpression"] = args ? args.identityValidationExpression : undefined;
            resourceInputs["jwtConfiguration"] = args ? args.jwtConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["authorizerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Apigatewayv2Authorizer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Apigatewayv2Authorizer resources.
 */
export interface Apigatewayv2AuthorizerState {
    /**
     * The API identifier.
     */
    apiId?: pulumi.Input<string>;
    /**
     * Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for
     * API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda
     * function, specify null. Supported only for ``REQUEST`` authorizers.
     */
    authorizerCredentialsArn?: pulumi.Input<string>;
    authorizerId?: pulumi.Input<string>;
    /**
     * Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
     * Supported values are ``1.0`` and ``2.0``. To learn more, see [Working with Lambda authorizers for HTTP
     * APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
     */
    authorizerPayloadFormatVersion?: pulumi.Input<string>;
    /**
     * The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If
     * it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for
     * HTTP API Lambda authorizers.
     */
    authorizerResultTtlInSeconds?: pulumi.Input<number>;
    /**
     * The authorizer type. Specify ``REQUEST`` for a Lambda function using incoming request parameters. Specify ``JWT`` to use
     * JSON Web Tokens (supported only for HTTP APIs).
     */
    authorizerType?: pulumi.Input<string>;
    /**
     * The authorizer's Uniform Resource Identifier (URI). For ``REQUEST`` authorizers, this must be a well-formed Lambda
     * function URI, for example,
     * ``arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations``.
     * In general, the URI has this form: ``arn:aws:apigateway:{region}:lambda:path/{service_api}``, where *{region}* is the
     * same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated
     * as the path to the resource, including the initial ``/``. For Lambda functions, this is usually of the form
     * ``/2015-03-31/functions/[FunctionARN]/invocations``.
     */
    authorizerUri?: pulumi.Input<string>;
    /**
     * Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return
     * an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for
     * HTTP APIs. To learn more, see [Working with Lambda authorizers for HTTP
     * APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
     */
    enableSimpleResponses?: pulumi.Input<boolean>;
    /**
     * The identity source for which authorization is requested. For a ``REQUEST`` authorizer, this is optional. The value is a
     * set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query
     * string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string
     * parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for
     * WebSocket APIs. For HTTP APIs, use selection expressions prefixed with ``$``, for example, ``$request.header.Auth``,
     * ``$request.querystring.Name``. These parameters are used to perform runtime validation for Lambda-based authorizers by
     * verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when
     * this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized
     * response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when
     * caching is enabled. To learn more, see [Working with Lambda authorizers for HTTP
     * APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html). For ``JWT``, a
     * single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based
     * and query parameter-based selections are supported, for example ``$request.header.Authorization``.
     */
    identitySources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This parameter is not used.
     */
    identityValidationExpression?: pulumi.Input<string>;
    /**
     * The ``JWTConfiguration`` property specifies the configuration of a JWT authorizer. Required for the ``JWT`` authorizer
     * type. Supported only for HTTP APIs.
     */
    jwtConfiguration?: pulumi.Input<inputs.Apigatewayv2AuthorizerJwtConfiguration>;
    /**
     * The name of the authorizer.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Apigatewayv2Authorizer resource.
 */
export interface Apigatewayv2AuthorizerArgs {
    /**
     * The API identifier.
     */
    apiId: pulumi.Input<string>;
    /**
     * Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for
     * API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda
     * function, specify null. Supported only for ``REQUEST`` authorizers.
     */
    authorizerCredentialsArn?: pulumi.Input<string>;
    /**
     * Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
     * Supported values are ``1.0`` and ``2.0``. To learn more, see [Working with Lambda authorizers for HTTP
     * APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
     */
    authorizerPayloadFormatVersion?: pulumi.Input<string>;
    /**
     * The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If
     * it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for
     * HTTP API Lambda authorizers.
     */
    authorizerResultTtlInSeconds?: pulumi.Input<number>;
    /**
     * The authorizer type. Specify ``REQUEST`` for a Lambda function using incoming request parameters. Specify ``JWT`` to use
     * JSON Web Tokens (supported only for HTTP APIs).
     */
    authorizerType: pulumi.Input<string>;
    /**
     * The authorizer's Uniform Resource Identifier (URI). For ``REQUEST`` authorizers, this must be a well-formed Lambda
     * function URI, for example,
     * ``arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations``.
     * In general, the URI has this form: ``arn:aws:apigateway:{region}:lambda:path/{service_api}``, where *{region}* is the
     * same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated
     * as the path to the resource, including the initial ``/``. For Lambda functions, this is usually of the form
     * ``/2015-03-31/functions/[FunctionARN]/invocations``.
     */
    authorizerUri?: pulumi.Input<string>;
    /**
     * Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return
     * an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for
     * HTTP APIs. To learn more, see [Working with Lambda authorizers for HTTP
     * APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
     */
    enableSimpleResponses?: pulumi.Input<boolean>;
    /**
     * The identity source for which authorization is requested. For a ``REQUEST`` authorizer, this is optional. The value is a
     * set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query
     * string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string
     * parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for
     * WebSocket APIs. For HTTP APIs, use selection expressions prefixed with ``$``, for example, ``$request.header.Auth``,
     * ``$request.querystring.Name``. These parameters are used to perform runtime validation for Lambda-based authorizers by
     * verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when
     * this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized
     * response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when
     * caching is enabled. To learn more, see [Working with Lambda authorizers for HTTP
     * APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html). For ``JWT``, a
     * single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based
     * and query parameter-based selections are supported, for example ``$request.header.Authorization``.
     */
    identitySources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This parameter is not used.
     */
    identityValidationExpression?: pulumi.Input<string>;
    /**
     * The ``JWTConfiguration`` property specifies the configuration of a JWT authorizer. Required for the ``JWT`` authorizer
     * type. Supported only for HTTP APIs.
     */
    jwtConfiguration?: pulumi.Input<inputs.Apigatewayv2AuthorizerJwtConfiguration>;
    /**
     * The name of the authorizer.
     */
    name?: pulumi.Input<string>;
}
