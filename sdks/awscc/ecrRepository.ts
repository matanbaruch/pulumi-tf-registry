// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcrRepository extends pulumi.CustomResource {
    /**
     * Get an existing EcrRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcrRepositoryState, opts?: pulumi.CustomResourceOptions): EcrRepository {
        return new EcrRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ecrRepository:EcrRepository';

    /**
     * Returns true if the given object is an instance of EcrRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcrRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcrRepository.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * If true, deleting the repository force deletes the contents of the repository. If false, the repository must be empty
     * before attempting to delete it.
     */
    public readonly emptyOnDelete!: pulumi.Output<boolean>;
    /**
     * The encryption configuration for the repository. This determines how the contents of your repository are encrypted at
     * rest.
     */
    public readonly encryptionConfiguration!: pulumi.Output<outputs.EcrRepositoryEncryptionConfiguration>;
    /**
     * The image scanning configuration for the repository. This determines whether images are scanned for known
     * vulnerabilities after being pushed to the repository.
     */
    public readonly imageScanningConfiguration!: pulumi.Output<outputs.EcrRepositoryImageScanningConfiguration>;
    /**
     * The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be
     * used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository
     * will be immutable which will prevent them from being overwritten.
     */
    public readonly imageTagMutability!: pulumi.Output<string>;
    /**
     * Creates or updates a lifecycle policy. For information about lifecycle policy syntax, see [Lifecycle policy
     * template](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html).
     */
    public readonly lifecyclePolicy!: pulumi.Output<outputs.EcrRepositoryLifecyclePolicy>;
    /**
     * The name to use for the repository. The repository name may be specified on its own (such as ``nginx-web-app``) or it
     * can be prepended with a namespace to group the repository into a category (such as ``project-a/nginx-web-app``). If you
     * don't specify a name, CFNlong generates a unique physical ID and uses that ID for the repository name. For more
     * information, see [Name type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
     * The repository name must start with a letter and can only contain lowercase letters, numbers, hyphens, underscores, and
     * forward slashes. If you specify a name, you cannot perform updates that require replacement of this resource. You can
     * perform updates that require no or some interruption. If you must replace the resource, specify a new name.
     */
    public readonly repositoryName!: pulumi.Output<string>;
    /**
     * The JSON repository policy text to apply to the repository. For more information, see [Amazon ECR repository
     * policies](https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html) in the *Amazon Elastic
     * Container Registry User Guide*.
     */
    public readonly repositoryPolicyText!: pulumi.Output<string>;
    public /*out*/ readonly repositoryUri!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.EcrRepositoryTag[]>;

    /**
     * Create a EcrRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EcrRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcrRepositoryArgs | EcrRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcrRepositoryState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["emptyOnDelete"] = state ? state.emptyOnDelete : undefined;
            resourceInputs["encryptionConfiguration"] = state ? state.encryptionConfiguration : undefined;
            resourceInputs["imageScanningConfiguration"] = state ? state.imageScanningConfiguration : undefined;
            resourceInputs["imageTagMutability"] = state ? state.imageTagMutability : undefined;
            resourceInputs["lifecyclePolicy"] = state ? state.lifecyclePolicy : undefined;
            resourceInputs["repositoryName"] = state ? state.repositoryName : undefined;
            resourceInputs["repositoryPolicyText"] = state ? state.repositoryPolicyText : undefined;
            resourceInputs["repositoryUri"] = state ? state.repositoryUri : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as EcrRepositoryArgs | undefined;
            resourceInputs["emptyOnDelete"] = args ? args.emptyOnDelete : undefined;
            resourceInputs["encryptionConfiguration"] = args ? args.encryptionConfiguration : undefined;
            resourceInputs["imageScanningConfiguration"] = args ? args.imageScanningConfiguration : undefined;
            resourceInputs["imageTagMutability"] = args ? args.imageTagMutability : undefined;
            resourceInputs["lifecyclePolicy"] = args ? args.lifecyclePolicy : undefined;
            resourceInputs["repositoryName"] = args ? args.repositoryName : undefined;
            resourceInputs["repositoryPolicyText"] = args ? args.repositoryPolicyText : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["repositoryUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcrRepository.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcrRepository resources.
 */
export interface EcrRepositoryState {
    arn?: pulumi.Input<string>;
    /**
     * If true, deleting the repository force deletes the contents of the repository. If false, the repository must be empty
     * before attempting to delete it.
     */
    emptyOnDelete?: pulumi.Input<boolean>;
    /**
     * The encryption configuration for the repository. This determines how the contents of your repository are encrypted at
     * rest.
     */
    encryptionConfiguration?: pulumi.Input<inputs.EcrRepositoryEncryptionConfiguration>;
    /**
     * The image scanning configuration for the repository. This determines whether images are scanned for known
     * vulnerabilities after being pushed to the repository.
     */
    imageScanningConfiguration?: pulumi.Input<inputs.EcrRepositoryImageScanningConfiguration>;
    /**
     * The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be
     * used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository
     * will be immutable which will prevent them from being overwritten.
     */
    imageTagMutability?: pulumi.Input<string>;
    /**
     * Creates or updates a lifecycle policy. For information about lifecycle policy syntax, see [Lifecycle policy
     * template](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html).
     */
    lifecyclePolicy?: pulumi.Input<inputs.EcrRepositoryLifecyclePolicy>;
    /**
     * The name to use for the repository. The repository name may be specified on its own (such as ``nginx-web-app``) or it
     * can be prepended with a namespace to group the repository into a category (such as ``project-a/nginx-web-app``). If you
     * don't specify a name, CFNlong generates a unique physical ID and uses that ID for the repository name. For more
     * information, see [Name type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
     * The repository name must start with a letter and can only contain lowercase letters, numbers, hyphens, underscores, and
     * forward slashes. If you specify a name, you cannot perform updates that require replacement of this resource. You can
     * perform updates that require no or some interruption. If you must replace the resource, specify a new name.
     */
    repositoryName?: pulumi.Input<string>;
    /**
     * The JSON repository policy text to apply to the repository. For more information, see [Amazon ECR repository
     * policies](https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html) in the *Amazon Elastic
     * Container Registry User Guide*.
     */
    repositoryPolicyText?: pulumi.Input<string>;
    repositoryUri?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EcrRepositoryTag>[]>;
}

/**
 * The set of arguments for constructing a EcrRepository resource.
 */
export interface EcrRepositoryArgs {
    /**
     * If true, deleting the repository force deletes the contents of the repository. If false, the repository must be empty
     * before attempting to delete it.
     */
    emptyOnDelete?: pulumi.Input<boolean>;
    /**
     * The encryption configuration for the repository. This determines how the contents of your repository are encrypted at
     * rest.
     */
    encryptionConfiguration?: pulumi.Input<inputs.EcrRepositoryEncryptionConfiguration>;
    /**
     * The image scanning configuration for the repository. This determines whether images are scanned for known
     * vulnerabilities after being pushed to the repository.
     */
    imageScanningConfiguration?: pulumi.Input<inputs.EcrRepositoryImageScanningConfiguration>;
    /**
     * The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be
     * used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository
     * will be immutable which will prevent them from being overwritten.
     */
    imageTagMutability?: pulumi.Input<string>;
    /**
     * Creates or updates a lifecycle policy. For information about lifecycle policy syntax, see [Lifecycle policy
     * template](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html).
     */
    lifecyclePolicy?: pulumi.Input<inputs.EcrRepositoryLifecyclePolicy>;
    /**
     * The name to use for the repository. The repository name may be specified on its own (such as ``nginx-web-app``) or it
     * can be prepended with a namespace to group the repository into a category (such as ``project-a/nginx-web-app``). If you
     * don't specify a name, CFNlong generates a unique physical ID and uses that ID for the repository name. For more
     * information, see [Name type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
     * The repository name must start with a letter and can only contain lowercase letters, numbers, hyphens, underscores, and
     * forward slashes. If you specify a name, you cannot perform updates that require replacement of this resource. You can
     * perform updates that require no or some interruption. If you must replace the resource, specify a new name.
     */
    repositoryName?: pulumi.Input<string>;
    /**
     * The JSON repository policy text to apply to the repository. For more information, see [Amazon ECR repository
     * policies](https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html) in the *Amazon Elastic
     * Container Registry User Guide*.
     */
    repositoryPolicyText?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EcrRepositoryTag>[]>;
}
