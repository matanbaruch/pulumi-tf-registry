// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatasyncLocationNfs extends pulumi.CustomResource {
    /**
     * Get an existing DatasyncLocationNfs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasyncLocationNfsState, opts?: pulumi.CustomResourceOptions): DatasyncLocationNfs {
        return new DatasyncLocationNfs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/datasyncLocationNfs:DatasyncLocationNfs';

    /**
     * Returns true if the given object is an instance of DatasyncLocationNfs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasyncLocationNfs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasyncLocationNfs.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the NFS location.
     */
    public /*out*/ readonly locationArn!: pulumi.Output<string>;
    /**
     * The URL of the NFS location that was described.
     */
    public /*out*/ readonly locationUri!: pulumi.Output<string>;
    /**
     * The NFS mount options that DataSync can use to mount your NFS share.
     */
    public readonly mountOptions!: pulumi.Output<outputs.DatasyncLocationNfsMountOptions>;
    /**
     * Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
     */
    public readonly onPremConfig!: pulumi.Output<outputs.DatasyncLocationNfsOnPremConfig>;
    /**
     * The name of the NFS server. This value is the IP address or DNS name of the NFS server.
     */
    public readonly serverHostname!: pulumi.Output<string>;
    /**
     * The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS
     * destination.
     */
    public readonly subdirectory!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.DatasyncLocationNfsTag[]>;

    /**
     * Create a DatasyncLocationNfs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasyncLocationNfsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasyncLocationNfsArgs | DatasyncLocationNfsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasyncLocationNfsState | undefined;
            resourceInputs["locationArn"] = state ? state.locationArn : undefined;
            resourceInputs["locationUri"] = state ? state.locationUri : undefined;
            resourceInputs["mountOptions"] = state ? state.mountOptions : undefined;
            resourceInputs["onPremConfig"] = state ? state.onPremConfig : undefined;
            resourceInputs["serverHostname"] = state ? state.serverHostname : undefined;
            resourceInputs["subdirectory"] = state ? state.subdirectory : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DatasyncLocationNfsArgs | undefined;
            if ((!args || args.onPremConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'onPremConfig'");
            }
            resourceInputs["mountOptions"] = args ? args.mountOptions : undefined;
            resourceInputs["onPremConfig"] = args ? args.onPremConfig : undefined;
            resourceInputs["serverHostname"] = args ? args.serverHostname : undefined;
            resourceInputs["subdirectory"] = args ? args.subdirectory : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["locationArn"] = undefined /*out*/;
            resourceInputs["locationUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasyncLocationNfs.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatasyncLocationNfs resources.
 */
export interface DatasyncLocationNfsState {
    /**
     * The Amazon Resource Name (ARN) of the NFS location.
     */
    locationArn?: pulumi.Input<string>;
    /**
     * The URL of the NFS location that was described.
     */
    locationUri?: pulumi.Input<string>;
    /**
     * The NFS mount options that DataSync can use to mount your NFS share.
     */
    mountOptions?: pulumi.Input<inputs.DatasyncLocationNfsMountOptions>;
    /**
     * Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
     */
    onPremConfig?: pulumi.Input<inputs.DatasyncLocationNfsOnPremConfig>;
    /**
     * The name of the NFS server. This value is the IP address or DNS name of the NFS server.
     */
    serverHostname?: pulumi.Input<string>;
    /**
     * The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS
     * destination.
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DatasyncLocationNfsTag>[]>;
}

/**
 * The set of arguments for constructing a DatasyncLocationNfs resource.
 */
export interface DatasyncLocationNfsArgs {
    /**
     * The NFS mount options that DataSync can use to mount your NFS share.
     */
    mountOptions?: pulumi.Input<inputs.DatasyncLocationNfsMountOptions>;
    /**
     * Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
     */
    onPremConfig: pulumi.Input<inputs.DatasyncLocationNfsOnPremConfig>;
    /**
     * The name of the NFS server. This value is the IP address or DNS name of the NFS server.
     */
    serverHostname?: pulumi.Input<string>;
    /**
     * The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS
     * destination.
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DatasyncLocationNfsTag>[]>;
}
