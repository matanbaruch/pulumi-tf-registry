// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudtrailEventDataStore(args: GetCloudtrailEventDataStoreArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudtrailEventDataStoreResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getCloudtrailEventDataStore:getCloudtrailEventDataStore", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudtrailEventDataStore.
 */
export interface GetCloudtrailEventDataStoreArgs {
    id: string;
}

/**
 * A collection of values returned by getCloudtrailEventDataStore.
 */
export interface GetCloudtrailEventDataStoreResult {
    readonly advancedEventSelectors: outputs.GetCloudtrailEventDataStoreAdvancedEventSelector[];
    readonly billingMode: string;
    readonly createdTimestamp: string;
    readonly eventDataStoreArn: string;
    readonly federationEnabled: boolean;
    readonly federationRoleArn: string;
    readonly id: string;
    readonly ingestionEnabled: boolean;
    readonly insightSelectors: outputs.GetCloudtrailEventDataStoreInsightSelector[];
    readonly insightsDestination: string;
    readonly kmsKeyId: string;
    readonly multiRegionEnabled: boolean;
    readonly name: string;
    readonly organizationEnabled: boolean;
    readonly retentionPeriod: number;
    readonly status: string;
    readonly tags: outputs.GetCloudtrailEventDataStoreTag[];
    readonly terminationProtectionEnabled: boolean;
    readonly updatedTimestamp: string;
}
export function getCloudtrailEventDataStoreOutput(args: GetCloudtrailEventDataStoreOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudtrailEventDataStoreResult> {
    return pulumi.output(args).apply((a: any) => getCloudtrailEventDataStore(a, opts))
}

/**
 * A collection of arguments for invoking getCloudtrailEventDataStore.
 */
export interface GetCloudtrailEventDataStoreOutputArgs {
    id: pulumi.Input<string>;
}
