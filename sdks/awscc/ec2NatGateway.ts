// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2NatGateway extends pulumi.CustomResource {
    /**
     * Get an existing Ec2NatGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2NatGatewayState, opts?: pulumi.CustomResourceOptions): Ec2NatGateway {
        return new Ec2NatGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2NatGateway:Ec2NatGateway';

    /**
     * Returns true if the given object is an instance of Ec2NatGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2NatGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2NatGateway.__pulumiType;
    }

    /**
     * [Public NAT gateway only] The allocation ID of the Elastic IP address that's associated with the NAT gateway. This
     * property is required for a public NAT gateway and cannot be specified with a private NAT gateway.
     */
    public readonly allocationId!: pulumi.Output<string>;
    /**
     * Indicates whether the NAT gateway supports public or private connectivity. The default is public connectivity.
     */
    public readonly connectivityType!: pulumi.Output<string>;
    /**
     * The maximum amount of time to wait (in seconds) before forcibly releasing the IP addresses if connections are still in
     * progress. Default value is 350 seconds.
     */
    public readonly maxDrainDurationSeconds!: pulumi.Output<number>;
    public /*out*/ readonly natGatewayId!: pulumi.Output<string>;
    /**
     * The private IPv4 address to assign to the NAT gateway. If you don't provide an address, a private IPv4 address will be
     * automatically assigned.
     */
    public readonly privateIpAddress!: pulumi.Output<string>;
    /**
     * Secondary EIP allocation IDs. For more information, see [Create a NAT
     * gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon VPC
     * User Guide*.
     */
    public readonly secondaryAllocationIds!: pulumi.Output<string[]>;
    /**
     * [Private NAT gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT gateway. For
     * more information about secondary addresses, see [Create a NAT
     * gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon
     * Virtual Private Cloud User Guide*. ``SecondaryPrivateIpAddressCount`` and ``SecondaryPrivateIpAddresses`` cannot be set
     * at the same time.
     */
    public readonly secondaryPrivateIpAddressCount!: pulumi.Output<number>;
    /**
     * Secondary private IPv4 addresses. For more information about secondary addresses, see [Create a NAT
     * gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon
     * Virtual Private Cloud User Guide*. ``SecondaryPrivateIpAddressCount`` and ``SecondaryPrivateIpAddresses`` cannot be set
     * at the same time.
     */
    public readonly secondaryPrivateIpAddresses!: pulumi.Output<string[]>;
    /**
     * The ID of the subnet in which the NAT gateway is located.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * The tags for the NAT gateway.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2NatGatewayTag[]>;

    /**
     * Create a Ec2NatGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2NatGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2NatGatewayArgs | Ec2NatGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2NatGatewayState | undefined;
            resourceInputs["allocationId"] = state ? state.allocationId : undefined;
            resourceInputs["connectivityType"] = state ? state.connectivityType : undefined;
            resourceInputs["maxDrainDurationSeconds"] = state ? state.maxDrainDurationSeconds : undefined;
            resourceInputs["natGatewayId"] = state ? state.natGatewayId : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["secondaryAllocationIds"] = state ? state.secondaryAllocationIds : undefined;
            resourceInputs["secondaryPrivateIpAddressCount"] = state ? state.secondaryPrivateIpAddressCount : undefined;
            resourceInputs["secondaryPrivateIpAddresses"] = state ? state.secondaryPrivateIpAddresses : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as Ec2NatGatewayArgs | undefined;
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["allocationId"] = args ? args.allocationId : undefined;
            resourceInputs["connectivityType"] = args ? args.connectivityType : undefined;
            resourceInputs["maxDrainDurationSeconds"] = args ? args.maxDrainDurationSeconds : undefined;
            resourceInputs["privateIpAddress"] = args ? args.privateIpAddress : undefined;
            resourceInputs["secondaryAllocationIds"] = args ? args.secondaryAllocationIds : undefined;
            resourceInputs["secondaryPrivateIpAddressCount"] = args ? args.secondaryPrivateIpAddressCount : undefined;
            resourceInputs["secondaryPrivateIpAddresses"] = args ? args.secondaryPrivateIpAddresses : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["natGatewayId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2NatGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2NatGateway resources.
 */
export interface Ec2NatGatewayState {
    /**
     * [Public NAT gateway only] The allocation ID of the Elastic IP address that's associated with the NAT gateway. This
     * property is required for a public NAT gateway and cannot be specified with a private NAT gateway.
     */
    allocationId?: pulumi.Input<string>;
    /**
     * Indicates whether the NAT gateway supports public or private connectivity. The default is public connectivity.
     */
    connectivityType?: pulumi.Input<string>;
    /**
     * The maximum amount of time to wait (in seconds) before forcibly releasing the IP addresses if connections are still in
     * progress. Default value is 350 seconds.
     */
    maxDrainDurationSeconds?: pulumi.Input<number>;
    natGatewayId?: pulumi.Input<string>;
    /**
     * The private IPv4 address to assign to the NAT gateway. If you don't provide an address, a private IPv4 address will be
     * automatically assigned.
     */
    privateIpAddress?: pulumi.Input<string>;
    /**
     * Secondary EIP allocation IDs. For more information, see [Create a NAT
     * gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon VPC
     * User Guide*.
     */
    secondaryAllocationIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * [Private NAT gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT gateway. For
     * more information about secondary addresses, see [Create a NAT
     * gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon
     * Virtual Private Cloud User Guide*. ``SecondaryPrivateIpAddressCount`` and ``SecondaryPrivateIpAddresses`` cannot be set
     * at the same time.
     */
    secondaryPrivateIpAddressCount?: pulumi.Input<number>;
    /**
     * Secondary private IPv4 addresses. For more information about secondary addresses, see [Create a NAT
     * gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon
     * Virtual Private Cloud User Guide*. ``SecondaryPrivateIpAddressCount`` and ``SecondaryPrivateIpAddresses`` cannot be set
     * at the same time.
     */
    secondaryPrivateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the subnet in which the NAT gateway is located.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The tags for the NAT gateway.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2NatGatewayTag>[]>;
}

/**
 * The set of arguments for constructing a Ec2NatGateway resource.
 */
export interface Ec2NatGatewayArgs {
    /**
     * [Public NAT gateway only] The allocation ID of the Elastic IP address that's associated with the NAT gateway. This
     * property is required for a public NAT gateway and cannot be specified with a private NAT gateway.
     */
    allocationId?: pulumi.Input<string>;
    /**
     * Indicates whether the NAT gateway supports public or private connectivity. The default is public connectivity.
     */
    connectivityType?: pulumi.Input<string>;
    /**
     * The maximum amount of time to wait (in seconds) before forcibly releasing the IP addresses if connections are still in
     * progress. Default value is 350 seconds.
     */
    maxDrainDurationSeconds?: pulumi.Input<number>;
    /**
     * The private IPv4 address to assign to the NAT gateway. If you don't provide an address, a private IPv4 address will be
     * automatically assigned.
     */
    privateIpAddress?: pulumi.Input<string>;
    /**
     * Secondary EIP allocation IDs. For more information, see [Create a NAT
     * gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon VPC
     * User Guide*.
     */
    secondaryAllocationIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * [Private NAT gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT gateway. For
     * more information about secondary addresses, see [Create a NAT
     * gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon
     * Virtual Private Cloud User Guide*. ``SecondaryPrivateIpAddressCount`` and ``SecondaryPrivateIpAddresses`` cannot be set
     * at the same time.
     */
    secondaryPrivateIpAddressCount?: pulumi.Input<number>;
    /**
     * Secondary private IPv4 addresses. For more information about secondary addresses, see [Create a NAT
     * gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon
     * Virtual Private Cloud User Guide*. ``SecondaryPrivateIpAddressCount`` and ``SecondaryPrivateIpAddresses`` cannot be set
     * at the same time.
     */
    secondaryPrivateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the subnet in which the NAT gateway is located.
     */
    subnetId: pulumi.Input<string>;
    /**
     * The tags for the NAT gateway.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2NatGatewayTag>[]>;
}
