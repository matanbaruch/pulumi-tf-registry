// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Route53recoveryreadinessResourceSet extends pulumi.CustomResource {
    /**
     * Get an existing Route53recoveryreadinessResourceSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Route53recoveryreadinessResourceSetState, opts?: pulumi.CustomResourceOptions): Route53recoveryreadinessResourceSet {
        return new Route53recoveryreadinessResourceSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/route53recoveryreadinessResourceSet:Route53recoveryreadinessResourceSet';

    /**
     * Returns true if the given object is an instance of Route53recoveryreadinessResourceSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route53recoveryreadinessResourceSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route53recoveryreadinessResourceSet.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the resource set.
     */
    public /*out*/ readonly resourceSetArn!: pulumi.Output<string>;
    /**
     * The name of the resource set to create.
     */
    public readonly resourceSetName!: pulumi.Output<string>;
    /**
     * The resource type of the resources in the resource set. Enter one of the following values for resource type: AWS:
     * :AutoScaling: :AutoScalingGroup, AWS: :CloudWatch: :Alarm, AWS: :EC2: :CustomerGateway, AWS: :DynamoDB: :Table, AWS:
     * :EC2: :Volume, AWS: :ElasticLoadBalancing: :LoadBalancer, AWS: :ElasticLoadBalancingV2: :LoadBalancer, AWS: :MSK:
     * :Cluster, AWS: :RDS: :DBCluster, AWS: :Route53: :HealthCheck, AWS: :SQS: :Queue, AWS: :SNS: :Topic, AWS: :SNS:
     * :Subscription, AWS: :EC2: :VPC, AWS: :EC2: :VPNConnection, AWS: :EC2: :VPNGateway,
     * AWS::Route53RecoveryReadiness::DNSTargetResource
     */
    public readonly resourceSetType!: pulumi.Output<string>;
    /**
     * A list of resource objects in the resource set.
     */
    public readonly resources!: pulumi.Output<outputs.Route53recoveryreadinessResourceSetResource[]>;
    /**
     * A tag to associate with the parameters for a resource set.
     */
    public readonly tags!: pulumi.Output<outputs.Route53recoveryreadinessResourceSetTag[]>;

    /**
     * Create a Route53recoveryreadinessResourceSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Route53recoveryreadinessResourceSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Route53recoveryreadinessResourceSetArgs | Route53recoveryreadinessResourceSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Route53recoveryreadinessResourceSetState | undefined;
            resourceInputs["resourceSetArn"] = state ? state.resourceSetArn : undefined;
            resourceInputs["resourceSetName"] = state ? state.resourceSetName : undefined;
            resourceInputs["resourceSetType"] = state ? state.resourceSetType : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as Route53recoveryreadinessResourceSetArgs | undefined;
            if ((!args || args.resourceSetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceSetType'");
            }
            if ((!args || args.resources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            resourceInputs["resourceSetName"] = args ? args.resourceSetName : undefined;
            resourceInputs["resourceSetType"] = args ? args.resourceSetType : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["resourceSetArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route53recoveryreadinessResourceSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Route53recoveryreadinessResourceSet resources.
 */
export interface Route53recoveryreadinessResourceSetState {
    /**
     * The Amazon Resource Name (ARN) of the resource set.
     */
    resourceSetArn?: pulumi.Input<string>;
    /**
     * The name of the resource set to create.
     */
    resourceSetName?: pulumi.Input<string>;
    /**
     * The resource type of the resources in the resource set. Enter one of the following values for resource type: AWS:
     * :AutoScaling: :AutoScalingGroup, AWS: :CloudWatch: :Alarm, AWS: :EC2: :CustomerGateway, AWS: :DynamoDB: :Table, AWS:
     * :EC2: :Volume, AWS: :ElasticLoadBalancing: :LoadBalancer, AWS: :ElasticLoadBalancingV2: :LoadBalancer, AWS: :MSK:
     * :Cluster, AWS: :RDS: :DBCluster, AWS: :Route53: :HealthCheck, AWS: :SQS: :Queue, AWS: :SNS: :Topic, AWS: :SNS:
     * :Subscription, AWS: :EC2: :VPC, AWS: :EC2: :VPNConnection, AWS: :EC2: :VPNGateway,
     * AWS::Route53RecoveryReadiness::DNSTargetResource
     */
    resourceSetType?: pulumi.Input<string>;
    /**
     * A list of resource objects in the resource set.
     */
    resources?: pulumi.Input<pulumi.Input<inputs.Route53recoveryreadinessResourceSetResource>[]>;
    /**
     * A tag to associate with the parameters for a resource set.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Route53recoveryreadinessResourceSetTag>[]>;
}

/**
 * The set of arguments for constructing a Route53recoveryreadinessResourceSet resource.
 */
export interface Route53recoveryreadinessResourceSetArgs {
    /**
     * The name of the resource set to create.
     */
    resourceSetName?: pulumi.Input<string>;
    /**
     * The resource type of the resources in the resource set. Enter one of the following values for resource type: AWS:
     * :AutoScaling: :AutoScalingGroup, AWS: :CloudWatch: :Alarm, AWS: :EC2: :CustomerGateway, AWS: :DynamoDB: :Table, AWS:
     * :EC2: :Volume, AWS: :ElasticLoadBalancing: :LoadBalancer, AWS: :ElasticLoadBalancingV2: :LoadBalancer, AWS: :MSK:
     * :Cluster, AWS: :RDS: :DBCluster, AWS: :Route53: :HealthCheck, AWS: :SQS: :Queue, AWS: :SNS: :Topic, AWS: :SNS:
     * :Subscription, AWS: :EC2: :VPC, AWS: :EC2: :VPNConnection, AWS: :EC2: :VPNGateway,
     * AWS::Route53RecoveryReadiness::DNSTargetResource
     */
    resourceSetType: pulumi.Input<string>;
    /**
     * A list of resource objects in the resource set.
     */
    resources: pulumi.Input<pulumi.Input<inputs.Route53recoveryreadinessResourceSetResource>[]>;
    /**
     * A tag to associate with the parameters for a resource set.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Route53recoveryreadinessResourceSetTag>[]>;
}
