// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SagemakerInferenceExperiment extends pulumi.CustomResource {
    /**
     * Get an existing SagemakerInferenceExperiment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SagemakerInferenceExperimentState, opts?: pulumi.CustomResourceOptions): SagemakerInferenceExperiment {
        return new SagemakerInferenceExperiment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/sagemakerInferenceExperiment:SagemakerInferenceExperiment';

    /**
     * Returns true if the given object is an instance of SagemakerInferenceExperiment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SagemakerInferenceExperiment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SagemakerInferenceExperiment.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the inference experiment.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The timestamp at which you created the inference experiment.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The Amazon S3 location and configuration for storing inference request and response data.
     */
    public readonly dataStorageConfig!: pulumi.Output<outputs.SagemakerInferenceExperimentDataStorageConfig>;
    /**
     * The description of the inference experiment.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The desired state of the experiment after starting or stopping operation.
     */
    public readonly desiredState!: pulumi.Output<string>;
    /**
     * The metadata of the endpoint on which the inference experiment ran.
     */
    public /*out*/ readonly endpointMetadata!: pulumi.Output<outputs.SagemakerInferenceExperimentEndpointMetadata>;
    /**
     * The name of the endpoint used to run the inference experiment.
     */
    public readonly endpointName!: pulumi.Output<string>;
    /**
     * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached
     * to the ML compute instance that hosts the endpoint.
     */
    public readonly kmsKey!: pulumi.Output<string>;
    /**
     * The timestamp at which you last modified the inference experiment.
     */
    public /*out*/ readonly lastModifiedTime!: pulumi.Output<string>;
    /**
     * An array of ModelVariantConfig objects. Each ModelVariantConfig object in the array describes the infrastructure
     * configuration for the corresponding variant.
     */
    public readonly modelVariants!: pulumi.Output<outputs.SagemakerInferenceExperimentModelVariant[]>;
    /**
     * The name for the inference experiment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to access model artifacts and container
     * images, and manage Amazon SageMaker Inference endpoints for model deployment.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * The duration for which you want the inference experiment to run.
     */
    public readonly schedule!: pulumi.Output<outputs.SagemakerInferenceExperimentSchedule>;
    /**
     * The configuration of ShadowMode inference experiment type. Use this field to specify a production variant which takes
     * all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference
     * requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates.
     */
    public readonly shadowModeConfig!: pulumi.Output<outputs.SagemakerInferenceExperimentShadowModeConfig>;
    /**
     * The status of the inference experiment.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The error message or client-specified reason from the StopInferenceExperiment API, that explains the status of the
     * inference experiment.
     */
    public readonly statusReason!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.SagemakerInferenceExperimentTag[]>;
    /**
     * The type of the inference experiment that you want to run.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SagemakerInferenceExperiment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SagemakerInferenceExperimentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SagemakerInferenceExperimentArgs | SagemakerInferenceExperimentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SagemakerInferenceExperimentState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["dataStorageConfig"] = state ? state.dataStorageConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredState"] = state ? state.desiredState : undefined;
            resourceInputs["endpointMetadata"] = state ? state.endpointMetadata : undefined;
            resourceInputs["endpointName"] = state ? state.endpointName : undefined;
            resourceInputs["kmsKey"] = state ? state.kmsKey : undefined;
            resourceInputs["lastModifiedTime"] = state ? state.lastModifiedTime : undefined;
            resourceInputs["modelVariants"] = state ? state.modelVariants : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["shadowModeConfig"] = state ? state.shadowModeConfig : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusReason"] = state ? state.statusReason : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SagemakerInferenceExperimentArgs | undefined;
            if ((!args || args.endpointName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointName'");
            }
            if ((!args || args.modelVariants === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modelVariants'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["dataStorageConfig"] = args ? args.dataStorageConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredState"] = args ? args.desiredState : undefined;
            resourceInputs["endpointName"] = args ? args.endpointName : undefined;
            resourceInputs["kmsKey"] = args ? args.kmsKey : undefined;
            resourceInputs["modelVariants"] = args ? args.modelVariants : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["shadowModeConfig"] = args ? args.shadowModeConfig : undefined;
            resourceInputs["statusReason"] = args ? args.statusReason : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["endpointMetadata"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SagemakerInferenceExperiment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SagemakerInferenceExperiment resources.
 */
export interface SagemakerInferenceExperimentState {
    /**
     * The Amazon Resource Name (ARN) of the inference experiment.
     */
    arn?: pulumi.Input<string>;
    /**
     * The timestamp at which you created the inference experiment.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The Amazon S3 location and configuration for storing inference request and response data.
     */
    dataStorageConfig?: pulumi.Input<inputs.SagemakerInferenceExperimentDataStorageConfig>;
    /**
     * The description of the inference experiment.
     */
    description?: pulumi.Input<string>;
    /**
     * The desired state of the experiment after starting or stopping operation.
     */
    desiredState?: pulumi.Input<string>;
    /**
     * The metadata of the endpoint on which the inference experiment ran.
     */
    endpointMetadata?: pulumi.Input<inputs.SagemakerInferenceExperimentEndpointMetadata>;
    /**
     * The name of the endpoint used to run the inference experiment.
     */
    endpointName?: pulumi.Input<string>;
    /**
     * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached
     * to the ML compute instance that hosts the endpoint.
     */
    kmsKey?: pulumi.Input<string>;
    /**
     * The timestamp at which you last modified the inference experiment.
     */
    lastModifiedTime?: pulumi.Input<string>;
    /**
     * An array of ModelVariantConfig objects. Each ModelVariantConfig object in the array describes the infrastructure
     * configuration for the corresponding variant.
     */
    modelVariants?: pulumi.Input<pulumi.Input<inputs.SagemakerInferenceExperimentModelVariant>[]>;
    /**
     * The name for the inference experiment.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to access model artifacts and container
     * images, and manage Amazon SageMaker Inference endpoints for model deployment.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The duration for which you want the inference experiment to run.
     */
    schedule?: pulumi.Input<inputs.SagemakerInferenceExperimentSchedule>;
    /**
     * The configuration of ShadowMode inference experiment type. Use this field to specify a production variant which takes
     * all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference
     * requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates.
     */
    shadowModeConfig?: pulumi.Input<inputs.SagemakerInferenceExperimentShadowModeConfig>;
    /**
     * The status of the inference experiment.
     */
    status?: pulumi.Input<string>;
    /**
     * The error message or client-specified reason from the StopInferenceExperiment API, that explains the status of the
     * inference experiment.
     */
    statusReason?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerInferenceExperimentTag>[]>;
    /**
     * The type of the inference experiment that you want to run.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SagemakerInferenceExperiment resource.
 */
export interface SagemakerInferenceExperimentArgs {
    /**
     * The Amazon S3 location and configuration for storing inference request and response data.
     */
    dataStorageConfig?: pulumi.Input<inputs.SagemakerInferenceExperimentDataStorageConfig>;
    /**
     * The description of the inference experiment.
     */
    description?: pulumi.Input<string>;
    /**
     * The desired state of the experiment after starting or stopping operation.
     */
    desiredState?: pulumi.Input<string>;
    /**
     * The name of the endpoint used to run the inference experiment.
     */
    endpointName: pulumi.Input<string>;
    /**
     * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached
     * to the ML compute instance that hosts the endpoint.
     */
    kmsKey?: pulumi.Input<string>;
    /**
     * An array of ModelVariantConfig objects. Each ModelVariantConfig object in the array describes the infrastructure
     * configuration for the corresponding variant.
     */
    modelVariants: pulumi.Input<pulumi.Input<inputs.SagemakerInferenceExperimentModelVariant>[]>;
    /**
     * The name for the inference experiment.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to access model artifacts and container
     * images, and manage Amazon SageMaker Inference endpoints for model deployment.
     */
    roleArn: pulumi.Input<string>;
    /**
     * The duration for which you want the inference experiment to run.
     */
    schedule?: pulumi.Input<inputs.SagemakerInferenceExperimentSchedule>;
    /**
     * The configuration of ShadowMode inference experiment type. Use this field to specify a production variant which takes
     * all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference
     * requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates.
     */
    shadowModeConfig?: pulumi.Input<inputs.SagemakerInferenceExperimentShadowModeConfig>;
    /**
     * The error message or client-specified reason from the StopInferenceExperiment API, that explains the status of the
     * inference experiment.
     */
    statusReason?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerInferenceExperimentTag>[]>;
    /**
     * The type of the inference experiment that you want to run.
     */
    type: pulumi.Input<string>;
}
