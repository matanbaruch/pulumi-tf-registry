// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApigatewayUsagePlanKey extends pulumi.CustomResource {
    /**
     * Get an existing ApigatewayUsagePlanKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApigatewayUsagePlanKeyState, opts?: pulumi.CustomResourceOptions): ApigatewayUsagePlanKey {
        return new ApigatewayUsagePlanKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/apigatewayUsagePlanKey:ApigatewayUsagePlanKey';

    /**
     * Returns true if the given object is an instance of ApigatewayUsagePlanKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApigatewayUsagePlanKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApigatewayUsagePlanKey.__pulumiType;
    }

    /**
     * The Id of the UsagePlanKey resource.
     */
    public readonly keyId!: pulumi.Output<string>;
    /**
     * The type of a UsagePlanKey resource for a plan customer.
     */
    public readonly keyType!: pulumi.Output<string>;
    /**
     * The Id of the UsagePlan resource representing the usage plan containing the UsagePlanKey resource representing a plan
     * customer.
     */
    public readonly usagePlanId!: pulumi.Output<string>;
    public /*out*/ readonly usagePlanKeyId!: pulumi.Output<string>;

    /**
     * Create a ApigatewayUsagePlanKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApigatewayUsagePlanKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApigatewayUsagePlanKeyArgs | ApigatewayUsagePlanKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApigatewayUsagePlanKeyState | undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["usagePlanId"] = state ? state.usagePlanId : undefined;
            resourceInputs["usagePlanKeyId"] = state ? state.usagePlanKeyId : undefined;
        } else {
            const args = argsOrState as ApigatewayUsagePlanKeyArgs | undefined;
            if ((!args || args.keyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if ((!args || args.keyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyType'");
            }
            if ((!args || args.usagePlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usagePlanId'");
            }
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["usagePlanId"] = args ? args.usagePlanId : undefined;
            resourceInputs["usagePlanKeyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApigatewayUsagePlanKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApigatewayUsagePlanKey resources.
 */
export interface ApigatewayUsagePlanKeyState {
    /**
     * The Id of the UsagePlanKey resource.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The type of a UsagePlanKey resource for a plan customer.
     */
    keyType?: pulumi.Input<string>;
    /**
     * The Id of the UsagePlan resource representing the usage plan containing the UsagePlanKey resource representing a plan
     * customer.
     */
    usagePlanId?: pulumi.Input<string>;
    usagePlanKeyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApigatewayUsagePlanKey resource.
 */
export interface ApigatewayUsagePlanKeyArgs {
    /**
     * The Id of the UsagePlanKey resource.
     */
    keyId: pulumi.Input<string>;
    /**
     * The type of a UsagePlanKey resource for a plan customer.
     */
    keyType: pulumi.Input<string>;
    /**
     * The Id of the UsagePlan resource representing the usage plan containing the UsagePlanKey resource representing a plan
     * customer.
     */
    usagePlanId: pulumi.Input<string>;
}
