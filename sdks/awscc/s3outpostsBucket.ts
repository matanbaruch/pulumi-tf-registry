// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class S3outpostsBucket extends pulumi.CustomResource {
    /**
     * Get an existing S3outpostsBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3outpostsBucketState, opts?: pulumi.CustomResourceOptions): S3outpostsBucket {
        return new S3outpostsBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/s3outpostsBucket:S3outpostsBucket';

    /**
     * Returns true if the given object is an instance of S3outpostsBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3outpostsBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3outpostsBucket.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the specified bucket.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A name for the bucket.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * Rules that define how Amazon S3Outposts manages objects during their lifetime.
     */
    public readonly lifecycleConfiguration!: pulumi.Output<outputs.S3outpostsBucketLifecycleConfiguration>;
    /**
     * The id of the customer outpost on which the bucket resides.
     */
    public readonly outpostId!: pulumi.Output<string>;
    /**
     * An arbitrary set of tags (key-value pairs) for this S3Outposts bucket.
     */
    public readonly tags!: pulumi.Output<outputs.S3outpostsBucketTag[]>;

    /**
     * Create a S3outpostsBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3outpostsBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3outpostsBucketArgs | S3outpostsBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3outpostsBucketState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["lifecycleConfiguration"] = state ? state.lifecycleConfiguration : undefined;
            resourceInputs["outpostId"] = state ? state.outpostId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as S3outpostsBucketArgs | undefined;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.outpostId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outpostId'");
            }
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["lifecycleConfiguration"] = args ? args.lifecycleConfiguration : undefined;
            resourceInputs["outpostId"] = args ? args.outpostId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(S3outpostsBucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3outpostsBucket resources.
 */
export interface S3outpostsBucketState {
    /**
     * The Amazon Resource Name (ARN) of the specified bucket.
     */
    arn?: pulumi.Input<string>;
    /**
     * A name for the bucket.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * Rules that define how Amazon S3Outposts manages objects during their lifetime.
     */
    lifecycleConfiguration?: pulumi.Input<inputs.S3outpostsBucketLifecycleConfiguration>;
    /**
     * The id of the customer outpost on which the bucket resides.
     */
    outpostId?: pulumi.Input<string>;
    /**
     * An arbitrary set of tags (key-value pairs) for this S3Outposts bucket.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.S3outpostsBucketTag>[]>;
}

/**
 * The set of arguments for constructing a S3outpostsBucket resource.
 */
export interface S3outpostsBucketArgs {
    /**
     * A name for the bucket.
     */
    bucketName: pulumi.Input<string>;
    /**
     * Rules that define how Amazon S3Outposts manages objects during their lifetime.
     */
    lifecycleConfiguration?: pulumi.Input<inputs.S3outpostsBucketLifecycleConfiguration>;
    /**
     * The id of the customer outpost on which the bucket resides.
     */
    outpostId: pulumi.Input<string>;
    /**
     * An arbitrary set of tags (key-value pairs) for this S3Outposts bucket.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.S3outpostsBucketTag>[]>;
}
