// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EksIdentityProviderConfig extends pulumi.CustomResource {
    /**
     * Get an existing EksIdentityProviderConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EksIdentityProviderConfigState, opts?: pulumi.CustomResourceOptions): EksIdentityProviderConfig {
        return new EksIdentityProviderConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/eksIdentityProviderConfig:EksIdentityProviderConfig';

    /**
     * Returns true if the given object is an instance of EksIdentityProviderConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EksIdentityProviderConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EksIdentityProviderConfig.__pulumiType;
    }

    /**
     * The name of the identity provider configuration.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The ARN of the configuration.
     */
    public /*out*/ readonly identityProviderConfigArn!: pulumi.Output<string>;
    /**
     * The name of the OIDC provider configuration.
     */
    public readonly identityProviderConfigName!: pulumi.Output<string>;
    /**
     * An object representing an OpenID Connect (OIDC) configuration.
     */
    public readonly oidc!: pulumi.Output<outputs.EksIdentityProviderConfigOidc>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.EksIdentityProviderConfigTag[]>;
    /**
     * The type of the identity provider configuration.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a EksIdentityProviderConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EksIdentityProviderConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EksIdentityProviderConfigArgs | EksIdentityProviderConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EksIdentityProviderConfigState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["identityProviderConfigArn"] = state ? state.identityProviderConfigArn : undefined;
            resourceInputs["identityProviderConfigName"] = state ? state.identityProviderConfigName : undefined;
            resourceInputs["oidc"] = state ? state.oidc : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as EksIdentityProviderConfigArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["identityProviderConfigName"] = args ? args.identityProviderConfigName : undefined;
            resourceInputs["oidc"] = args ? args.oidc : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["identityProviderConfigArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EksIdentityProviderConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EksIdentityProviderConfig resources.
 */
export interface EksIdentityProviderConfigState {
    /**
     * The name of the identity provider configuration.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The ARN of the configuration.
     */
    identityProviderConfigArn?: pulumi.Input<string>;
    /**
     * The name of the OIDC provider configuration.
     */
    identityProviderConfigName?: pulumi.Input<string>;
    /**
     * An object representing an OpenID Connect (OIDC) configuration.
     */
    oidc?: pulumi.Input<inputs.EksIdentityProviderConfigOidc>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EksIdentityProviderConfigTag>[]>;
    /**
     * The type of the identity provider configuration.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EksIdentityProviderConfig resource.
 */
export interface EksIdentityProviderConfigArgs {
    /**
     * The name of the identity provider configuration.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The name of the OIDC provider configuration.
     */
    identityProviderConfigName?: pulumi.Input<string>;
    /**
     * An object representing an OpenID Connect (OIDC) configuration.
     */
    oidc?: pulumi.Input<inputs.EksIdentityProviderConfigOidc>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EksIdentityProviderConfigTag>[]>;
    /**
     * The type of the identity provider configuration.
     */
    type: pulumi.Input<string>;
}
