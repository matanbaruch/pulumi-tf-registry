// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CustomerprofilesIntegration extends pulumi.CustomResource {
    /**
     * Get an existing CustomerprofilesIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomerprofilesIntegrationState, opts?: pulumi.CustomResourceOptions): CustomerprofilesIntegration {
        return new CustomerprofilesIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/customerprofilesIntegration:CustomerprofilesIntegration';

    /**
     * Returns true if the given object is an instance of CustomerprofilesIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomerprofilesIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomerprofilesIntegration.__pulumiType;
    }

    /**
     * The time of this integration got created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The unique name of the domain.
     */
    public readonly domainName!: pulumi.Output<string>;
    public readonly flowDefinition!: pulumi.Output<outputs.CustomerprofilesIntegrationFlowDefinition>;
    /**
     * The time of this integration got last updated at
     */
    public /*out*/ readonly lastUpdatedAt!: pulumi.Output<string>;
    /**
     * The name of the ObjectType defined for the 3rd party data in Profile Service
     */
    public readonly objectTypeName!: pulumi.Output<string>;
    /**
     * The mapping between 3rd party event types and ObjectType names
     */
    public readonly objectTypeNames!: pulumi.Output<outputs.CustomerprofilesIntegrationObjectTypeName[]>;
    /**
     * The tags (keys and values) associated with the integration
     */
    public readonly tags!: pulumi.Output<outputs.CustomerprofilesIntegrationTag[]>;
    /**
     * The URI of the S3 bucket or any other type of data source.
     */
    public readonly uri!: pulumi.Output<string>;

    /**
     * Create a CustomerprofilesIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomerprofilesIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomerprofilesIntegrationArgs | CustomerprofilesIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomerprofilesIntegrationState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["flowDefinition"] = state ? state.flowDefinition : undefined;
            resourceInputs["lastUpdatedAt"] = state ? state.lastUpdatedAt : undefined;
            resourceInputs["objectTypeName"] = state ? state.objectTypeName : undefined;
            resourceInputs["objectTypeNames"] = state ? state.objectTypeNames : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as CustomerprofilesIntegrationArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["flowDefinition"] = args ? args.flowDefinition : undefined;
            resourceInputs["objectTypeName"] = args ? args.objectTypeName : undefined;
            resourceInputs["objectTypeNames"] = args ? args.objectTypeNames : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["uri"] = args ? args.uri : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["lastUpdatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomerprofilesIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CustomerprofilesIntegration resources.
 */
export interface CustomerprofilesIntegrationState {
    /**
     * The time of this integration got created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The unique name of the domain.
     */
    domainName?: pulumi.Input<string>;
    flowDefinition?: pulumi.Input<inputs.CustomerprofilesIntegrationFlowDefinition>;
    /**
     * The time of this integration got last updated at
     */
    lastUpdatedAt?: pulumi.Input<string>;
    /**
     * The name of the ObjectType defined for the 3rd party data in Profile Service
     */
    objectTypeName?: pulumi.Input<string>;
    /**
     * The mapping between 3rd party event types and ObjectType names
     */
    objectTypeNames?: pulumi.Input<pulumi.Input<inputs.CustomerprofilesIntegrationObjectTypeName>[]>;
    /**
     * The tags (keys and values) associated with the integration
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CustomerprofilesIntegrationTag>[]>;
    /**
     * The URI of the S3 bucket or any other type of data source.
     */
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomerprofilesIntegration resource.
 */
export interface CustomerprofilesIntegrationArgs {
    /**
     * The unique name of the domain.
     */
    domainName: pulumi.Input<string>;
    flowDefinition?: pulumi.Input<inputs.CustomerprofilesIntegrationFlowDefinition>;
    /**
     * The name of the ObjectType defined for the 3rd party data in Profile Service
     */
    objectTypeName?: pulumi.Input<string>;
    /**
     * The mapping between 3rd party event types and ObjectType names
     */
    objectTypeNames?: pulumi.Input<pulumi.Input<inputs.CustomerprofilesIntegrationObjectTypeName>[]>;
    /**
     * The tags (keys and values) associated with the integration
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CustomerprofilesIntegrationTag>[]>;
    /**
     * The URI of the S3 bucket or any other type of data source.
     */
    uri?: pulumi.Input<string>;
}
