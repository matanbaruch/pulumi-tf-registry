// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEc2Instance(args: GetEc2InstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2InstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEc2Instance:getEc2Instance", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2Instance.
 */
export interface GetEc2InstanceArgs {
    id: string;
}

/**
 * A collection of values returned by getEc2Instance.
 */
export interface GetEc2InstanceResult {
    readonly additionalInfo: string;
    readonly affinity: string;
    readonly availabilityZone: string;
    readonly blockDeviceMappings: outputs.GetEc2InstanceBlockDeviceMapping[];
    readonly cpuOptions: outputs.GetEc2InstanceCpuOptions;
    readonly creditSpecification: outputs.GetEc2InstanceCreditSpecification;
    readonly disableApiTermination: boolean;
    readonly ebsOptimized: boolean;
    readonly elasticGpuSpecifications: outputs.GetEc2InstanceElasticGpuSpecification[];
    readonly elasticInferenceAccelerators: outputs.GetEc2InstanceElasticInferenceAccelerator[];
    readonly enclaveOptions: outputs.GetEc2InstanceEnclaveOptions;
    readonly hibernationOptions: outputs.GetEc2InstanceHibernationOptions;
    readonly hostId: string;
    readonly hostResourceGroupArn: string;
    readonly iamInstanceProfile: string;
    readonly id: string;
    readonly imageId: string;
    readonly instanceId: string;
    readonly instanceInitiatedShutdownBehavior: string;
    readonly instanceType: string;
    readonly ipv6AddressCount: number;
    readonly ipv6Addresses: outputs.GetEc2InstanceIpv6Address[];
    readonly kernelId: string;
    readonly keyName: string;
    readonly launchTemplate: outputs.GetEc2InstanceLaunchTemplate;
    readonly licenseSpecifications: outputs.GetEc2InstanceLicenseSpecification[];
    readonly monitoring: boolean;
    readonly networkInterfaces: outputs.GetEc2InstanceNetworkInterface[];
    readonly placementGroupName: string;
    readonly privateDnsName: string;
    readonly privateDnsNameOptions: outputs.GetEc2InstancePrivateDnsNameOptions;
    readonly privateIp: string;
    readonly privateIpAddress: string;
    readonly propagateTagsToVolumeOnCreation: boolean;
    readonly publicDnsName: string;
    readonly publicIp: string;
    readonly ramdiskId: string;
    readonly securityGroupIds: string[];
    readonly securityGroups: string[];
    readonly sourceDestCheck: boolean;
    readonly ssmAssociations: outputs.GetEc2InstanceSsmAssociation[];
    readonly state: outputs.GetEc2InstanceState;
    readonly subnetId: string;
    readonly tags: outputs.GetEc2InstanceTag[];
    readonly tenancy: string;
    readonly userData: string;
    readonly volumes: outputs.GetEc2InstanceVolume[];
    readonly vpcId: string;
}
export function getEc2InstanceOutput(args: GetEc2InstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2InstanceResult> {
    return pulumi.output(args).apply((a: any) => getEc2Instance(a, opts))
}

/**
 * A collection of arguments for invoking getEc2Instance.
 */
export interface GetEc2InstanceOutputArgs {
    id: pulumi.Input<string>;
}
