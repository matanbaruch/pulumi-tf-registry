// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Apigatewayv2IntegrationResponse extends pulumi.CustomResource {
    /**
     * Get an existing Apigatewayv2IntegrationResponse resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Apigatewayv2IntegrationResponseState, opts?: pulumi.CustomResourceOptions): Apigatewayv2IntegrationResponse {
        return new Apigatewayv2IntegrationResponse(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/apigatewayv2IntegrationResponse:Apigatewayv2IntegrationResponse';

    /**
     * Returns true if the given object is an instance of Apigatewayv2IntegrationResponse.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Apigatewayv2IntegrationResponse {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Apigatewayv2IntegrationResponse.__pulumiType;
    }

    /**
     * The API identifier.
     */
    public readonly apiId!: pulumi.Output<string>;
    /**
     * Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values
     * are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors: ``CONVERT_TO_BINARY``: Converts a
     * response payload from a Base64-encoded string to the corresponding binary blob. ``CONVERT_TO_TEXT``: Converts a response
     * payload from a binary blob to a Base64-encoded string. If this property is not defined, the response payload will be
     * passed through from the integration response to the route response or method response without modification.
     */
    public readonly contentHandlingStrategy!: pulumi.Output<string>;
    /**
     * The integration ID.
     */
    public readonly integrationId!: pulumi.Output<string>;
    public /*out*/ readonly integrationResponseId!: pulumi.Output<string>;
    /**
     * The integration response key.
     */
    public readonly integrationResponseKey!: pulumi.Output<string>;
    /**
     * A key-value map specifying response parameters that are passed to the method response from the backend. The key is a
     * method response header parameter name and the mapped value is an integration response header value, a static value
     * enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must
     * match the pattern of ``method.response.header.{name}``, where name is a valid and unique header name. The mapped
     * non-static value must match the pattern of ``integration.response.header.{name}`` or
     * ``integration.response.body.{JSON-expression}``, where ``{name}`` is a valid and unique response header name and
     * ``{JSON-expression}`` is a valid JSON expression without the ``$`` prefix.
     */
    public readonly responseParameters!: pulumi.Output<string>;
    /**
     * The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response
     * templates are represented as a key/value map, with a content-type as the key and a template as the value.
     */
    public readonly responseTemplates!: pulumi.Output<string>;
    /**
     * The template selection expression for the integration response. Supported only for WebSocket APIs.
     */
    public readonly templateSelectionExpression!: pulumi.Output<string>;

    /**
     * Create a Apigatewayv2IntegrationResponse resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Apigatewayv2IntegrationResponseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Apigatewayv2IntegrationResponseArgs | Apigatewayv2IntegrationResponseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Apigatewayv2IntegrationResponseState | undefined;
            resourceInputs["apiId"] = state ? state.apiId : undefined;
            resourceInputs["contentHandlingStrategy"] = state ? state.contentHandlingStrategy : undefined;
            resourceInputs["integrationId"] = state ? state.integrationId : undefined;
            resourceInputs["integrationResponseId"] = state ? state.integrationResponseId : undefined;
            resourceInputs["integrationResponseKey"] = state ? state.integrationResponseKey : undefined;
            resourceInputs["responseParameters"] = state ? state.responseParameters : undefined;
            resourceInputs["responseTemplates"] = state ? state.responseTemplates : undefined;
            resourceInputs["templateSelectionExpression"] = state ? state.templateSelectionExpression : undefined;
        } else {
            const args = argsOrState as Apigatewayv2IntegrationResponseArgs | undefined;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.integrationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationId'");
            }
            if ((!args || args.integrationResponseKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationResponseKey'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["contentHandlingStrategy"] = args ? args.contentHandlingStrategy : undefined;
            resourceInputs["integrationId"] = args ? args.integrationId : undefined;
            resourceInputs["integrationResponseKey"] = args ? args.integrationResponseKey : undefined;
            resourceInputs["responseParameters"] = args ? args.responseParameters : undefined;
            resourceInputs["responseTemplates"] = args ? args.responseTemplates : undefined;
            resourceInputs["templateSelectionExpression"] = args ? args.templateSelectionExpression : undefined;
            resourceInputs["integrationResponseId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Apigatewayv2IntegrationResponse.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Apigatewayv2IntegrationResponse resources.
 */
export interface Apigatewayv2IntegrationResponseState {
    /**
     * The API identifier.
     */
    apiId?: pulumi.Input<string>;
    /**
     * Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values
     * are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors: ``CONVERT_TO_BINARY``: Converts a
     * response payload from a Base64-encoded string to the corresponding binary blob. ``CONVERT_TO_TEXT``: Converts a response
     * payload from a binary blob to a Base64-encoded string. If this property is not defined, the response payload will be
     * passed through from the integration response to the route response or method response without modification.
     */
    contentHandlingStrategy?: pulumi.Input<string>;
    /**
     * The integration ID.
     */
    integrationId?: pulumi.Input<string>;
    integrationResponseId?: pulumi.Input<string>;
    /**
     * The integration response key.
     */
    integrationResponseKey?: pulumi.Input<string>;
    /**
     * A key-value map specifying response parameters that are passed to the method response from the backend. The key is a
     * method response header parameter name and the mapped value is an integration response header value, a static value
     * enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must
     * match the pattern of ``method.response.header.{name}``, where name is a valid and unique header name. The mapped
     * non-static value must match the pattern of ``integration.response.header.{name}`` or
     * ``integration.response.body.{JSON-expression}``, where ``{name}`` is a valid and unique response header name and
     * ``{JSON-expression}`` is a valid JSON expression without the ``$`` prefix.
     */
    responseParameters?: pulumi.Input<string>;
    /**
     * The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response
     * templates are represented as a key/value map, with a content-type as the key and a template as the value.
     */
    responseTemplates?: pulumi.Input<string>;
    /**
     * The template selection expression for the integration response. Supported only for WebSocket APIs.
     */
    templateSelectionExpression?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Apigatewayv2IntegrationResponse resource.
 */
export interface Apigatewayv2IntegrationResponseArgs {
    /**
     * The API identifier.
     */
    apiId: pulumi.Input<string>;
    /**
     * Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values
     * are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors: ``CONVERT_TO_BINARY``: Converts a
     * response payload from a Base64-encoded string to the corresponding binary blob. ``CONVERT_TO_TEXT``: Converts a response
     * payload from a binary blob to a Base64-encoded string. If this property is not defined, the response payload will be
     * passed through from the integration response to the route response or method response without modification.
     */
    contentHandlingStrategy?: pulumi.Input<string>;
    /**
     * The integration ID.
     */
    integrationId: pulumi.Input<string>;
    /**
     * The integration response key.
     */
    integrationResponseKey: pulumi.Input<string>;
    /**
     * A key-value map specifying response parameters that are passed to the method response from the backend. The key is a
     * method response header parameter name and the mapped value is an integration response header value, a static value
     * enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must
     * match the pattern of ``method.response.header.{name}``, where name is a valid and unique header name. The mapped
     * non-static value must match the pattern of ``integration.response.header.{name}`` or
     * ``integration.response.body.{JSON-expression}``, where ``{name}`` is a valid and unique response header name and
     * ``{JSON-expression}`` is a valid JSON expression without the ``$`` prefix.
     */
    responseParameters?: pulumi.Input<string>;
    /**
     * The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response
     * templates are represented as a key/value map, with a content-type as the key and a template as the value.
     */
    responseTemplates?: pulumi.Input<string>;
    /**
     * The template selection expression for the integration response. Supported only for WebSocket APIs.
     */
    templateSelectionExpression?: pulumi.Input<string>;
}
