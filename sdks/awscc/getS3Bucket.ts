// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getS3Bucket(args: GetS3BucketArgs, opts?: pulumi.InvokeOptions): Promise<GetS3BucketResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getS3Bucket:getS3Bucket", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getS3Bucket.
 */
export interface GetS3BucketArgs {
    id: string;
}

/**
 * A collection of values returned by getS3Bucket.
 */
export interface GetS3BucketResult {
    readonly accelerateConfiguration: outputs.GetS3BucketAccelerateConfiguration;
    readonly accessControl: string;
    readonly analyticsConfigurations: outputs.GetS3BucketAnalyticsConfiguration[];
    readonly arn: string;
    readonly bucketEncryption: outputs.GetS3BucketBucketEncryption;
    readonly bucketName: string;
    readonly corsConfiguration: outputs.GetS3BucketCorsConfiguration;
    readonly domainName: string;
    readonly dualStackDomainName: string;
    readonly id: string;
    readonly intelligentTieringConfigurations: outputs.GetS3BucketIntelligentTieringConfiguration[];
    readonly inventoryConfigurations: outputs.GetS3BucketInventoryConfiguration[];
    readonly lifecycleConfiguration: outputs.GetS3BucketLifecycleConfiguration;
    readonly loggingConfiguration: outputs.GetS3BucketLoggingConfiguration;
    readonly metricsConfigurations: outputs.GetS3BucketMetricsConfiguration[];
    readonly notificationConfiguration: outputs.GetS3BucketNotificationConfiguration;
    readonly objectLockConfiguration: outputs.GetS3BucketObjectLockConfiguration;
    readonly objectLockEnabled: boolean;
    readonly ownershipControls: outputs.GetS3BucketOwnershipControls;
    readonly publicAccessBlockConfiguration: outputs.GetS3BucketPublicAccessBlockConfiguration;
    readonly regionalDomainName: string;
    readonly replicationConfiguration: outputs.GetS3BucketReplicationConfiguration;
    readonly tags: outputs.GetS3BucketTag[];
    readonly versioningConfiguration: outputs.GetS3BucketVersioningConfiguration;
    readonly websiteConfiguration: outputs.GetS3BucketWebsiteConfiguration;
    readonly websiteUrl: string;
}
export function getS3BucketOutput(args: GetS3BucketOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetS3BucketResult> {
    return pulumi.output(args).apply((a: any) => getS3Bucket(a, opts))
}

/**
 * A collection of arguments for invoking getS3Bucket.
 */
export interface GetS3BucketOutputArgs {
    id: pulumi.Input<string>;
}
