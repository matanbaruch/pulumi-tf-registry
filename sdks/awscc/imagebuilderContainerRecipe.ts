// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ImagebuilderContainerRecipe extends pulumi.CustomResource {
    /**
     * Get an existing ImagebuilderContainerRecipe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImagebuilderContainerRecipeState, opts?: pulumi.CustomResourceOptions): ImagebuilderContainerRecipe {
        return new ImagebuilderContainerRecipe(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/imagebuilderContainerRecipe:ImagebuilderContainerRecipe';

    /**
     * Returns true if the given object is an instance of ImagebuilderContainerRecipe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImagebuilderContainerRecipe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImagebuilderContainerRecipe.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the container recipe.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Components for build and test that are included in the container recipe.
     */
    public readonly components!: pulumi.Output<outputs.ImagebuilderContainerRecipeComponent[]>;
    /**
     * Specifies the type of container, such as Docker.
     */
    public readonly containerType!: pulumi.Output<string>;
    /**
     * The description of the container recipe.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Dockerfiles are text documents that are used to build Docker containers, and ensure that they contain all of the
     * elements required by the application running inside. The template data consists of contextual variables where Image
     * Builder places build information or scripts, based on your container image recipe.
     */
    public readonly dockerfileTemplateData!: pulumi.Output<string>;
    /**
     * The S3 URI for the Dockerfile that will be used to build your container image.
     */
    public readonly dockerfileTemplateUri!: pulumi.Output<string>;
    /**
     * Specifies the operating system version for the source image.
     */
    public readonly imageOsVersionOverride!: pulumi.Output<string>;
    /**
     * A group of options that can be used to configure an instance for building and testing container images.
     */
    public readonly instanceConfiguration!: pulumi.Output<outputs.ImagebuilderContainerRecipeInstanceConfiguration>;
    /**
     * Identifies which KMS key is used to encrypt the container image.
     */
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * The name of the container recipe.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The source image for the container recipe.
     */
    public readonly parentImage!: pulumi.Output<string>;
    /**
     * Specifies the operating system platform when you use a custom source image.
     */
    public readonly platformOverride!: pulumi.Output<string>;
    /**
     * Tags that are attached to the container recipe.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * The destination repository for the container image.
     */
    public readonly targetRepository!: pulumi.Output<outputs.ImagebuilderContainerRecipeTargetRepository>;
    /**
     * The semantic version of the container recipe (<major>.<minor>.<patch>).
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * The working directory to be used during build and test workflows.
     */
    public readonly workingDirectory!: pulumi.Output<string>;

    /**
     * Create a ImagebuilderContainerRecipe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ImagebuilderContainerRecipeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImagebuilderContainerRecipeArgs | ImagebuilderContainerRecipeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImagebuilderContainerRecipeState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["components"] = state ? state.components : undefined;
            resourceInputs["containerType"] = state ? state.containerType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dockerfileTemplateData"] = state ? state.dockerfileTemplateData : undefined;
            resourceInputs["dockerfileTemplateUri"] = state ? state.dockerfileTemplateUri : undefined;
            resourceInputs["imageOsVersionOverride"] = state ? state.imageOsVersionOverride : undefined;
            resourceInputs["instanceConfiguration"] = state ? state.instanceConfiguration : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentImage"] = state ? state.parentImage : undefined;
            resourceInputs["platformOverride"] = state ? state.platformOverride : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetRepository"] = state ? state.targetRepository : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["workingDirectory"] = state ? state.workingDirectory : undefined;
        } else {
            const args = argsOrState as ImagebuilderContainerRecipeArgs | undefined;
            resourceInputs["components"] = args ? args.components : undefined;
            resourceInputs["containerType"] = args ? args.containerType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dockerfileTemplateData"] = args ? args.dockerfileTemplateData : undefined;
            resourceInputs["dockerfileTemplateUri"] = args ? args.dockerfileTemplateUri : undefined;
            resourceInputs["imageOsVersionOverride"] = args ? args.imageOsVersionOverride : undefined;
            resourceInputs["instanceConfiguration"] = args ? args.instanceConfiguration : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentImage"] = args ? args.parentImage : undefined;
            resourceInputs["platformOverride"] = args ? args.platformOverride : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetRepository"] = args ? args.targetRepository : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["workingDirectory"] = args ? args.workingDirectory : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImagebuilderContainerRecipe.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ImagebuilderContainerRecipe resources.
 */
export interface ImagebuilderContainerRecipeState {
    /**
     * The Amazon Resource Name (ARN) of the container recipe.
     */
    arn?: pulumi.Input<string>;
    /**
     * Components for build and test that are included in the container recipe.
     */
    components?: pulumi.Input<pulumi.Input<inputs.ImagebuilderContainerRecipeComponent>[]>;
    /**
     * Specifies the type of container, such as Docker.
     */
    containerType?: pulumi.Input<string>;
    /**
     * The description of the container recipe.
     */
    description?: pulumi.Input<string>;
    /**
     * Dockerfiles are text documents that are used to build Docker containers, and ensure that they contain all of the
     * elements required by the application running inside. The template data consists of contextual variables where Image
     * Builder places build information or scripts, based on your container image recipe.
     */
    dockerfileTemplateData?: pulumi.Input<string>;
    /**
     * The S3 URI for the Dockerfile that will be used to build your container image.
     */
    dockerfileTemplateUri?: pulumi.Input<string>;
    /**
     * Specifies the operating system version for the source image.
     */
    imageOsVersionOverride?: pulumi.Input<string>;
    /**
     * A group of options that can be used to configure an instance for building and testing container images.
     */
    instanceConfiguration?: pulumi.Input<inputs.ImagebuilderContainerRecipeInstanceConfiguration>;
    /**
     * Identifies which KMS key is used to encrypt the container image.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The name of the container recipe.
     */
    name?: pulumi.Input<string>;
    /**
     * The source image for the container recipe.
     */
    parentImage?: pulumi.Input<string>;
    /**
     * Specifies the operating system platform when you use a custom source image.
     */
    platformOverride?: pulumi.Input<string>;
    /**
     * Tags that are attached to the container recipe.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The destination repository for the container image.
     */
    targetRepository?: pulumi.Input<inputs.ImagebuilderContainerRecipeTargetRepository>;
    /**
     * The semantic version of the container recipe (<major>.<minor>.<patch>).
     */
    version?: pulumi.Input<string>;
    /**
     * The working directory to be used during build and test workflows.
     */
    workingDirectory?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImagebuilderContainerRecipe resource.
 */
export interface ImagebuilderContainerRecipeArgs {
    /**
     * Components for build and test that are included in the container recipe.
     */
    components?: pulumi.Input<pulumi.Input<inputs.ImagebuilderContainerRecipeComponent>[]>;
    /**
     * Specifies the type of container, such as Docker.
     */
    containerType?: pulumi.Input<string>;
    /**
     * The description of the container recipe.
     */
    description?: pulumi.Input<string>;
    /**
     * Dockerfiles are text documents that are used to build Docker containers, and ensure that they contain all of the
     * elements required by the application running inside. The template data consists of contextual variables where Image
     * Builder places build information or scripts, based on your container image recipe.
     */
    dockerfileTemplateData?: pulumi.Input<string>;
    /**
     * The S3 URI for the Dockerfile that will be used to build your container image.
     */
    dockerfileTemplateUri?: pulumi.Input<string>;
    /**
     * Specifies the operating system version for the source image.
     */
    imageOsVersionOverride?: pulumi.Input<string>;
    /**
     * A group of options that can be used to configure an instance for building and testing container images.
     */
    instanceConfiguration?: pulumi.Input<inputs.ImagebuilderContainerRecipeInstanceConfiguration>;
    /**
     * Identifies which KMS key is used to encrypt the container image.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The name of the container recipe.
     */
    name?: pulumi.Input<string>;
    /**
     * The source image for the container recipe.
     */
    parentImage?: pulumi.Input<string>;
    /**
     * Specifies the operating system platform when you use a custom source image.
     */
    platformOverride?: pulumi.Input<string>;
    /**
     * Tags that are attached to the container recipe.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The destination repository for the container image.
     */
    targetRepository?: pulumi.Input<inputs.ImagebuilderContainerRecipeTargetRepository>;
    /**
     * The semantic version of the container recipe (<major>.<minor>.<patch>).
     */
    version?: pulumi.Input<string>;
    /**
     * The working directory to be used during build and test workflows.
     */
    workingDirectory?: pulumi.Input<string>;
}
