// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SsmParameter extends pulumi.CustomResource {
    /**
     * Get an existing SsmParameter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SsmParameterState, opts?: pulumi.CustomResourceOptions): SsmParameter {
        return new SsmParameter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ssmParameter:SsmParameter';

    /**
     * Returns true if the given object is an instance of SsmParameter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SsmParameter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SsmParameter.__pulumiType;
    }

    /**
     * A regular expression used to validate the parameter value. For example, for ``String`` types with values restricted to
     * numbers, you can specify the following: ``AllowedPattern=^\d+$``
     */
    public readonly allowedPattern!: pulumi.Output<string>;
    /**
     * The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is ``text``.
     */
    public readonly dataType!: pulumi.Output<string>;
    /**
     * Information about the parameter.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name of the parameter. The maximum length constraint listed below includes capacity for additional system attributes
     * that aren't part of the name. The maximum length for a parameter name, including the full length of the parameter Amazon
     * Resource Name (ARN), is 1011 characters. For example, the length of the following parameter name is 65 characters, not
     * 20 characters: ``arn:aws:ssm:us-east-2:111222333444:parameter/ExampleParameterName``
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Information about the policies assigned to a parameter. [Assigning parameter
     * policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html) in the *User
     * Guide*.
     */
    public readonly policies!: pulumi.Output<string>;
    /**
     * Optional metadata that you assign to a resource in the form of an arbitrary set of tags (key-value pairs). Tags enable
     * you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want
     * to tag a SYS parameter to identify the type of resource to which it applies, the environment, or the type of
     * configuration data referenced by the parameter.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * The parameter tier.
     */
    public readonly tier!: pulumi.Output<string>;
    /**
     * The type of parameter.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The parameter value. If type is ``StringList``, the system returns a comma-separated string with no spaces between
     * commas in the ``Value`` field.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a SsmParameter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SsmParameterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SsmParameterArgs | SsmParameterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SsmParameterState | undefined;
            resourceInputs["allowedPattern"] = state ? state.allowedPattern : undefined;
            resourceInputs["dataType"] = state ? state.dataType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as SsmParameterArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["allowedPattern"] = args ? args.allowedPattern : undefined;
            resourceInputs["dataType"] = args ? args.dataType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SsmParameter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SsmParameter resources.
 */
export interface SsmParameterState {
    /**
     * A regular expression used to validate the parameter value. For example, for ``String`` types with values restricted to
     * numbers, you can specify the following: ``AllowedPattern=^\d+$``
     */
    allowedPattern?: pulumi.Input<string>;
    /**
     * The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is ``text``.
     */
    dataType?: pulumi.Input<string>;
    /**
     * Information about the parameter.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the parameter. The maximum length constraint listed below includes capacity for additional system attributes
     * that aren't part of the name. The maximum length for a parameter name, including the full length of the parameter Amazon
     * Resource Name (ARN), is 1011 characters. For example, the length of the following parameter name is 65 characters, not
     * 20 characters: ``arn:aws:ssm:us-east-2:111222333444:parameter/ExampleParameterName``
     */
    name?: pulumi.Input<string>;
    /**
     * Information about the policies assigned to a parameter. [Assigning parameter
     * policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html) in the *User
     * Guide*.
     */
    policies?: pulumi.Input<string>;
    /**
     * Optional metadata that you assign to a resource in the form of an arbitrary set of tags (key-value pairs). Tags enable
     * you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want
     * to tag a SYS parameter to identify the type of resource to which it applies, the environment, or the type of
     * configuration data referenced by the parameter.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The parameter tier.
     */
    tier?: pulumi.Input<string>;
    /**
     * The type of parameter.
     */
    type?: pulumi.Input<string>;
    /**
     * The parameter value. If type is ``StringList``, the system returns a comma-separated string with no spaces between
     * commas in the ``Value`` field.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SsmParameter resource.
 */
export interface SsmParameterArgs {
    /**
     * A regular expression used to validate the parameter value. For example, for ``String`` types with values restricted to
     * numbers, you can specify the following: ``AllowedPattern=^\d+$``
     */
    allowedPattern?: pulumi.Input<string>;
    /**
     * The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is ``text``.
     */
    dataType?: pulumi.Input<string>;
    /**
     * Information about the parameter.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the parameter. The maximum length constraint listed below includes capacity for additional system attributes
     * that aren't part of the name. The maximum length for a parameter name, including the full length of the parameter Amazon
     * Resource Name (ARN), is 1011 characters. For example, the length of the following parameter name is 65 characters, not
     * 20 characters: ``arn:aws:ssm:us-east-2:111222333444:parameter/ExampleParameterName``
     */
    name?: pulumi.Input<string>;
    /**
     * Information about the policies assigned to a parameter. [Assigning parameter
     * policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html) in the *User
     * Guide*.
     */
    policies?: pulumi.Input<string>;
    /**
     * Optional metadata that you assign to a resource in the form of an arbitrary set of tags (key-value pairs). Tags enable
     * you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want
     * to tag a SYS parameter to identify the type of resource to which it applies, the environment, or the type of
     * configuration data referenced by the parameter.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The parameter tier.
     */
    tier?: pulumi.Input<string>;
    /**
     * The type of parameter.
     */
    type: pulumi.Input<string>;
    /**
     * The parameter value. If type is ``StringList``, the system returns a comma-separated string with no spaces between
     * commas in the ``Value`` field.
     */
    value: pulumi.Input<string>;
}
