// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAcmpcaCertificateAuthority(args: GetAcmpcaCertificateAuthorityArgs, opts?: pulumi.InvokeOptions): Promise<GetAcmpcaCertificateAuthorityResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getAcmpcaCertificateAuthority:getAcmpcaCertificateAuthority", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAcmpcaCertificateAuthority.
 */
export interface GetAcmpcaCertificateAuthorityArgs {
    id: string;
}

/**
 * A collection of values returned by getAcmpcaCertificateAuthority.
 */
export interface GetAcmpcaCertificateAuthorityResult {
    readonly arn: string;
    readonly certificateSigningRequest: string;
    readonly csrExtensions: outputs.GetAcmpcaCertificateAuthorityCsrExtensions;
    readonly id: string;
    readonly keyAlgorithm: string;
    readonly keyStorageSecurityStandard: string;
    readonly revocationConfiguration: outputs.GetAcmpcaCertificateAuthorityRevocationConfiguration;
    readonly signingAlgorithm: string;
    readonly subject: outputs.GetAcmpcaCertificateAuthoritySubject;
    readonly tags: outputs.GetAcmpcaCertificateAuthorityTag[];
    readonly type: string;
    readonly usageMode: string;
}
export function getAcmpcaCertificateAuthorityOutput(args: GetAcmpcaCertificateAuthorityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAcmpcaCertificateAuthorityResult> {
    return pulumi.output(args).apply((a: any) => getAcmpcaCertificateAuthority(a, opts))
}

/**
 * A collection of arguments for invoking getAcmpcaCertificateAuthority.
 */
export interface GetAcmpcaCertificateAuthorityOutputArgs {
    id: pulumi.Input<string>;
}
