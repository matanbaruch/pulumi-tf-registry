// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RedshiftEndpointAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftEndpointAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftEndpointAuthorizationState, opts?: pulumi.CustomResourceOptions): RedshiftEndpointAuthorization {
        return new RedshiftEndpointAuthorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/redshiftEndpointAuthorization:RedshiftEndpointAuthorization';

    /**
     * Returns true if the given object is an instance of RedshiftEndpointAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftEndpointAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftEndpointAuthorization.__pulumiType;
    }

    /**
     * The target AWS account ID to grant or revoke access for.
     */
    public readonly account!: pulumi.Output<string>;
    /**
     * Indicates whether all VPCs in the grantee account are allowed access to the cluster.
     */
    public /*out*/ readonly allowedAllVpCs!: pulumi.Output<boolean>;
    /**
     * The VPCs allowed access to the cluster.
     */
    public /*out*/ readonly allowedVpCs!: pulumi.Output<string[]>;
    /**
     * The time (UTC) when the authorization was created.
     */
    public /*out*/ readonly authorizeTime!: pulumi.Output<string>;
    /**
     * The cluster identifier.
     */
    public readonly clusterIdentifier!: pulumi.Output<string>;
    /**
     * The status of the cluster.
     */
    public /*out*/ readonly clusterStatus!: pulumi.Output<string>;
    /**
     * The number of Redshift-managed VPC endpoints created for the authorization.
     */
    public /*out*/ readonly endpointCount!: pulumi.Output<number>;
    /**
     * Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint
     * authorization are also deleted.
     */
    public readonly force!: pulumi.Output<boolean>;
    /**
     * The AWS account ID of the grantee of the cluster.
     */
    public /*out*/ readonly grantee!: pulumi.Output<string>;
    /**
     * The AWS account ID of the cluster owner.
     */
    public /*out*/ readonly grantor!: pulumi.Output<string>;
    /**
     * The status of the authorization action.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The virtual private cloud (VPC) identifiers to grant or revoke access to.
     */
    public readonly vpcIds!: pulumi.Output<string[]>;

    /**
     * Create a RedshiftEndpointAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftEndpointAuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftEndpointAuthorizationArgs | RedshiftEndpointAuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftEndpointAuthorizationState | undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["allowedAllVpCs"] = state ? state.allowedAllVpCs : undefined;
            resourceInputs["allowedVpCs"] = state ? state.allowedVpCs : undefined;
            resourceInputs["authorizeTime"] = state ? state.authorizeTime : undefined;
            resourceInputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            resourceInputs["clusterStatus"] = state ? state.clusterStatus : undefined;
            resourceInputs["endpointCount"] = state ? state.endpointCount : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["grantee"] = state ? state.grantee : undefined;
            resourceInputs["grantor"] = state ? state.grantor : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vpcIds"] = state ? state.vpcIds : undefined;
        } else {
            const args = argsOrState as RedshiftEndpointAuthorizationArgs | undefined;
            if ((!args || args.account === undefined) && !opts.urn) {
                throw new Error("Missing required property 'account'");
            }
            if ((!args || args.clusterIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["vpcIds"] = args ? args.vpcIds : undefined;
            resourceInputs["allowedAllVpCs"] = undefined /*out*/;
            resourceInputs["allowedVpCs"] = undefined /*out*/;
            resourceInputs["authorizeTime"] = undefined /*out*/;
            resourceInputs["clusterStatus"] = undefined /*out*/;
            resourceInputs["endpointCount"] = undefined /*out*/;
            resourceInputs["grantee"] = undefined /*out*/;
            resourceInputs["grantor"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedshiftEndpointAuthorization.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftEndpointAuthorization resources.
 */
export interface RedshiftEndpointAuthorizationState {
    /**
     * The target AWS account ID to grant or revoke access for.
     */
    account?: pulumi.Input<string>;
    /**
     * Indicates whether all VPCs in the grantee account are allowed access to the cluster.
     */
    allowedAllVpCs?: pulumi.Input<boolean>;
    /**
     * The VPCs allowed access to the cluster.
     */
    allowedVpCs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time (UTC) when the authorization was created.
     */
    authorizeTime?: pulumi.Input<string>;
    /**
     * The cluster identifier.
     */
    clusterIdentifier?: pulumi.Input<string>;
    /**
     * The status of the cluster.
     */
    clusterStatus?: pulumi.Input<string>;
    /**
     * The number of Redshift-managed VPC endpoints created for the authorization.
     */
    endpointCount?: pulumi.Input<number>;
    /**
     * Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint
     * authorization are also deleted.
     */
    force?: pulumi.Input<boolean>;
    /**
     * The AWS account ID of the grantee of the cluster.
     */
    grantee?: pulumi.Input<string>;
    /**
     * The AWS account ID of the cluster owner.
     */
    grantor?: pulumi.Input<string>;
    /**
     * The status of the authorization action.
     */
    status?: pulumi.Input<string>;
    /**
     * The virtual private cloud (VPC) identifiers to grant or revoke access to.
     */
    vpcIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RedshiftEndpointAuthorization resource.
 */
export interface RedshiftEndpointAuthorizationArgs {
    /**
     * The target AWS account ID to grant or revoke access for.
     */
    account: pulumi.Input<string>;
    /**
     * The cluster identifier.
     */
    clusterIdentifier: pulumi.Input<string>;
    /**
     * Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint
     * authorization are also deleted.
     */
    force?: pulumi.Input<boolean>;
    /**
     * The virtual private cloud (VPC) identifiers to grant or revoke access to.
     */
    vpcIds?: pulumi.Input<pulumi.Input<string>[]>;
}
