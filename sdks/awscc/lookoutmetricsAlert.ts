// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LookoutmetricsAlert extends pulumi.CustomResource {
    /**
     * Get an existing LookoutmetricsAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LookoutmetricsAlertState, opts?: pulumi.CustomResourceOptions): LookoutmetricsAlert {
        return new LookoutmetricsAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lookoutmetricsAlert:LookoutmetricsAlert';

    /**
     * Returns true if the given object is an instance of LookoutmetricsAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LookoutmetricsAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LookoutmetricsAlert.__pulumiType;
    }

    /**
     * The action to be taken by the alert when an anomaly is detected.
     */
    public readonly action!: pulumi.Output<outputs.LookoutmetricsAlertAction>;
    /**
     * A description for the alert.
     */
    public readonly alertDescription!: pulumi.Output<string>;
    /**
     * The name of the alert. If not provided, a name is generated automatically.
     */
    public readonly alertName!: pulumi.Output<string>;
    /**
     * A number between 0 and 100 (inclusive) that tunes the sensitivity of the alert.
     */
    public readonly alertSensitivityThreshold!: pulumi.Output<number>;
    /**
     * The Amazon resource name (ARN) of the Anomaly Detector to alert.
     */
    public readonly anomalyDetectorArn!: pulumi.Output<string>;
    /**
     * ARN assigned to the alert.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;

    /**
     * Create a LookoutmetricsAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LookoutmetricsAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LookoutmetricsAlertArgs | LookoutmetricsAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LookoutmetricsAlertState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["alertDescription"] = state ? state.alertDescription : undefined;
            resourceInputs["alertName"] = state ? state.alertName : undefined;
            resourceInputs["alertSensitivityThreshold"] = state ? state.alertSensitivityThreshold : undefined;
            resourceInputs["anomalyDetectorArn"] = state ? state.anomalyDetectorArn : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
        } else {
            const args = argsOrState as LookoutmetricsAlertArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.alertSensitivityThreshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertSensitivityThreshold'");
            }
            if ((!args || args.anomalyDetectorArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'anomalyDetectorArn'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["alertDescription"] = args ? args.alertDescription : undefined;
            resourceInputs["alertName"] = args ? args.alertName : undefined;
            resourceInputs["alertSensitivityThreshold"] = args ? args.alertSensitivityThreshold : undefined;
            resourceInputs["anomalyDetectorArn"] = args ? args.anomalyDetectorArn : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LookoutmetricsAlert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LookoutmetricsAlert resources.
 */
export interface LookoutmetricsAlertState {
    /**
     * The action to be taken by the alert when an anomaly is detected.
     */
    action?: pulumi.Input<inputs.LookoutmetricsAlertAction>;
    /**
     * A description for the alert.
     */
    alertDescription?: pulumi.Input<string>;
    /**
     * The name of the alert. If not provided, a name is generated automatically.
     */
    alertName?: pulumi.Input<string>;
    /**
     * A number between 0 and 100 (inclusive) that tunes the sensitivity of the alert.
     */
    alertSensitivityThreshold?: pulumi.Input<number>;
    /**
     * The Amazon resource name (ARN) of the Anomaly Detector to alert.
     */
    anomalyDetectorArn?: pulumi.Input<string>;
    /**
     * ARN assigned to the alert.
     */
    arn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LookoutmetricsAlert resource.
 */
export interface LookoutmetricsAlertArgs {
    /**
     * The action to be taken by the alert when an anomaly is detected.
     */
    action: pulumi.Input<inputs.LookoutmetricsAlertAction>;
    /**
     * A description for the alert.
     */
    alertDescription?: pulumi.Input<string>;
    /**
     * The name of the alert. If not provided, a name is generated automatically.
     */
    alertName?: pulumi.Input<string>;
    /**
     * A number between 0 and 100 (inclusive) that tunes the sensitivity of the alert.
     */
    alertSensitivityThreshold: pulumi.Input<number>;
    /**
     * The Amazon resource name (ARN) of the Anomaly Detector to alert.
     */
    anomalyDetectorArn: pulumi.Input<string>;
}
