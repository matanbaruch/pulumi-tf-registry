// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEc2Volume(args: GetEc2VolumeArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2VolumeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEc2Volume:getEc2Volume", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2Volume.
 */
export interface GetEc2VolumeArgs {
    id: string;
}

/**
 * A collection of values returned by getEc2Volume.
 */
export interface GetEc2VolumeResult {
    readonly autoEnableIo: boolean;
    readonly availabilityZone: string;
    readonly encrypted: boolean;
    readonly id: string;
    readonly iops: number;
    readonly kmsKeyId: string;
    readonly multiAttachEnabled: boolean;
    readonly outpostArn: string;
    readonly size: number;
    readonly snapshotId: string;
    readonly tags: outputs.GetEc2VolumeTag[];
    readonly throughput: number;
    readonly volumeId: string;
    readonly volumeType: string;
}
export function getEc2VolumeOutput(args: GetEc2VolumeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2VolumeResult> {
    return pulumi.output(args).apply((a: any) => getEc2Volume(a, opts))
}

/**
 * A collection of arguments for invoking getEc2Volume.
 */
export interface GetEc2VolumeOutputArgs {
    id: pulumi.Input<string>;
}
