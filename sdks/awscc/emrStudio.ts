// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EmrStudio extends pulumi.CustomResource {
    /**
     * Get an existing EmrStudio resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmrStudioState, opts?: pulumi.CustomResourceOptions): EmrStudio {
        return new EmrStudio(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/emrStudio:EmrStudio';

    /**
     * Returns true if the given object is an instance of EmrStudio.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EmrStudio {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmrStudio.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the EMR Studio.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Specifies whether the Studio authenticates users using single sign-on (SSO) or IAM. Amazon EMR Studio currently only
     * supports SSO authentication.
     */
    public readonly authMode!: pulumi.Output<string>;
    /**
     * The default Amazon S3 location to back up EMR Studio Workspaces and notebook files. A Studio user can select an
     * alternative Amazon S3 location when creating a Workspace.
     */
    public readonly defaultS3Location!: pulumi.Output<string>;
    /**
     * A detailed description of the Studio.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The AWS KMS key identifier (ARN) used to encrypt AWS EMR Studio workspace and notebook files when backed up to AWS S3.
     */
    public readonly encryptionKeyArn!: pulumi.Output<string>;
    /**
     * The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the
     * Workspace security group, and it must be in the same VPC specified by VpcId.
     */
    public readonly engineSecurityGroupId!: pulumi.Output<string>;
    /**
     * The ARN of the IAM Identity Center instance to create the Studio application.
     */
    public readonly idcInstanceArn!: pulumi.Output<string>;
    /**
     * Specifies whether IAM Identity Center user assignment is REQUIRED or OPTIONAL. If the value is set to REQUIRED, users
     * must be explicitly assigned to the Studio application to access the Studio.
     */
    public readonly idcUserAssignment!: pulumi.Output<string>;
    /**
     * Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for
     * authentication when logging in to a Studio with the Studio URL.
     */
    public readonly idpAuthUrl!: pulumi.Output<string>;
    /**
     * The name of relay state parameter for external Identity Provider.
     */
    public readonly idpRelayStateParameterName!: pulumi.Output<string>;
    /**
     * A descriptive name for the Amazon EMR Studio.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The IAM role that will be assumed by the Amazon EMR Studio. The service role provides a way for Amazon EMR Studio to
     * interoperate with other AWS services.
     */
    public readonly serviceRole!: pulumi.Output<string>;
    /**
     * The ID of the EMR Studio.
     */
    public /*out*/ readonly studioId!: pulumi.Output<string>;
    /**
     * A list of up to 5 subnet IDs to associate with the Studio. The subnets must belong to the VPC specified by VpcId. Studio
     * users can create a Workspace in any of the specified subnets.
     */
    public readonly subnetIds!: pulumi.Output<string[]>;
    /**
     * A list of tags to associate with the Studio. Tags are user-defined key-value pairs that consist of a required key string
     * with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
     */
    public readonly tags!: pulumi.Output<outputs.EmrStudioTag[]>;
    /**
     * A Boolean indicating whether to enable Trusted identity propagation for the Studio. The default value is false.
     */
    public readonly trustedIdentityPropagationEnabled!: pulumi.Output<boolean>;
    /**
     * The unique Studio access URL.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * The IAM user role that will be assumed by users and groups logged in to a Studio. The permissions attached to this IAM
     * role can be scoped down for each user or group using session policies.
     */
    public readonly userRole!: pulumi.Output<string>;
    /**
     * The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.
     */
    public readonly vpcId!: pulumi.Output<string>;
    /**
     * The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic
     * to resources in the Engine security group, and it must be in the same VPC specified by VpcId.
     */
    public readonly workspaceSecurityGroupId!: pulumi.Output<string>;

    /**
     * Create a EmrStudio resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmrStudioArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmrStudioArgs | EmrStudioState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmrStudioState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authMode"] = state ? state.authMode : undefined;
            resourceInputs["defaultS3Location"] = state ? state.defaultS3Location : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptionKeyArn"] = state ? state.encryptionKeyArn : undefined;
            resourceInputs["engineSecurityGroupId"] = state ? state.engineSecurityGroupId : undefined;
            resourceInputs["idcInstanceArn"] = state ? state.idcInstanceArn : undefined;
            resourceInputs["idcUserAssignment"] = state ? state.idcUserAssignment : undefined;
            resourceInputs["idpAuthUrl"] = state ? state.idpAuthUrl : undefined;
            resourceInputs["idpRelayStateParameterName"] = state ? state.idpRelayStateParameterName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serviceRole"] = state ? state.serviceRole : undefined;
            resourceInputs["studioId"] = state ? state.studioId : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trustedIdentityPropagationEnabled"] = state ? state.trustedIdentityPropagationEnabled : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["userRole"] = state ? state.userRole : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["workspaceSecurityGroupId"] = state ? state.workspaceSecurityGroupId : undefined;
        } else {
            const args = argsOrState as EmrStudioArgs | undefined;
            if ((!args || args.authMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authMode'");
            }
            if ((!args || args.defaultS3Location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultS3Location'");
            }
            if ((!args || args.engineSecurityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineSecurityGroupId'");
            }
            if ((!args || args.serviceRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceRole'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.workspaceSecurityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceSecurityGroupId'");
            }
            resourceInputs["authMode"] = args ? args.authMode : undefined;
            resourceInputs["defaultS3Location"] = args ? args.defaultS3Location : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionKeyArn"] = args ? args.encryptionKeyArn : undefined;
            resourceInputs["engineSecurityGroupId"] = args ? args.engineSecurityGroupId : undefined;
            resourceInputs["idcInstanceArn"] = args ? args.idcInstanceArn : undefined;
            resourceInputs["idcUserAssignment"] = args ? args.idcUserAssignment : undefined;
            resourceInputs["idpAuthUrl"] = args ? args.idpAuthUrl : undefined;
            resourceInputs["idpRelayStateParameterName"] = args ? args.idpRelayStateParameterName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serviceRole"] = args ? args.serviceRole : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trustedIdentityPropagationEnabled"] = args ? args.trustedIdentityPropagationEnabled : undefined;
            resourceInputs["userRole"] = args ? args.userRole : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["workspaceSecurityGroupId"] = args ? args.workspaceSecurityGroupId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["studioId"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EmrStudio.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EmrStudio resources.
 */
export interface EmrStudioState {
    /**
     * The Amazon Resource Name (ARN) of the EMR Studio.
     */
    arn?: pulumi.Input<string>;
    /**
     * Specifies whether the Studio authenticates users using single sign-on (SSO) or IAM. Amazon EMR Studio currently only
     * supports SSO authentication.
     */
    authMode?: pulumi.Input<string>;
    /**
     * The default Amazon S3 location to back up EMR Studio Workspaces and notebook files. A Studio user can select an
     * alternative Amazon S3 location when creating a Workspace.
     */
    defaultS3Location?: pulumi.Input<string>;
    /**
     * A detailed description of the Studio.
     */
    description?: pulumi.Input<string>;
    /**
     * The AWS KMS key identifier (ARN) used to encrypt AWS EMR Studio workspace and notebook files when backed up to AWS S3.
     */
    encryptionKeyArn?: pulumi.Input<string>;
    /**
     * The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the
     * Workspace security group, and it must be in the same VPC specified by VpcId.
     */
    engineSecurityGroupId?: pulumi.Input<string>;
    /**
     * The ARN of the IAM Identity Center instance to create the Studio application.
     */
    idcInstanceArn?: pulumi.Input<string>;
    /**
     * Specifies whether IAM Identity Center user assignment is REQUIRED or OPTIONAL. If the value is set to REQUIRED, users
     * must be explicitly assigned to the Studio application to access the Studio.
     */
    idcUserAssignment?: pulumi.Input<string>;
    /**
     * Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for
     * authentication when logging in to a Studio with the Studio URL.
     */
    idpAuthUrl?: pulumi.Input<string>;
    /**
     * The name of relay state parameter for external Identity Provider.
     */
    idpRelayStateParameterName?: pulumi.Input<string>;
    /**
     * A descriptive name for the Amazon EMR Studio.
     */
    name?: pulumi.Input<string>;
    /**
     * The IAM role that will be assumed by the Amazon EMR Studio. The service role provides a way for Amazon EMR Studio to
     * interoperate with other AWS services.
     */
    serviceRole?: pulumi.Input<string>;
    /**
     * The ID of the EMR Studio.
     */
    studioId?: pulumi.Input<string>;
    /**
     * A list of up to 5 subnet IDs to associate with the Studio. The subnets must belong to the VPC specified by VpcId. Studio
     * users can create a Workspace in any of the specified subnets.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tags to associate with the Studio. Tags are user-defined key-value pairs that consist of a required key string
     * with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EmrStudioTag>[]>;
    /**
     * A Boolean indicating whether to enable Trusted identity propagation for the Studio. The default value is false.
     */
    trustedIdentityPropagationEnabled?: pulumi.Input<boolean>;
    /**
     * The unique Studio access URL.
     */
    url?: pulumi.Input<string>;
    /**
     * The IAM user role that will be assumed by users and groups logged in to a Studio. The permissions attached to this IAM
     * role can be scoped down for each user or group using session policies.
     */
    userRole?: pulumi.Input<string>;
    /**
     * The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic
     * to resources in the Engine security group, and it must be in the same VPC specified by VpcId.
     */
    workspaceSecurityGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EmrStudio resource.
 */
export interface EmrStudioArgs {
    /**
     * Specifies whether the Studio authenticates users using single sign-on (SSO) or IAM. Amazon EMR Studio currently only
     * supports SSO authentication.
     */
    authMode: pulumi.Input<string>;
    /**
     * The default Amazon S3 location to back up EMR Studio Workspaces and notebook files. A Studio user can select an
     * alternative Amazon S3 location when creating a Workspace.
     */
    defaultS3Location: pulumi.Input<string>;
    /**
     * A detailed description of the Studio.
     */
    description?: pulumi.Input<string>;
    /**
     * The AWS KMS key identifier (ARN) used to encrypt AWS EMR Studio workspace and notebook files when backed up to AWS S3.
     */
    encryptionKeyArn?: pulumi.Input<string>;
    /**
     * The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the
     * Workspace security group, and it must be in the same VPC specified by VpcId.
     */
    engineSecurityGroupId: pulumi.Input<string>;
    /**
     * The ARN of the IAM Identity Center instance to create the Studio application.
     */
    idcInstanceArn?: pulumi.Input<string>;
    /**
     * Specifies whether IAM Identity Center user assignment is REQUIRED or OPTIONAL. If the value is set to REQUIRED, users
     * must be explicitly assigned to the Studio application to access the Studio.
     */
    idcUserAssignment?: pulumi.Input<string>;
    /**
     * Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for
     * authentication when logging in to a Studio with the Studio URL.
     */
    idpAuthUrl?: pulumi.Input<string>;
    /**
     * The name of relay state parameter for external Identity Provider.
     */
    idpRelayStateParameterName?: pulumi.Input<string>;
    /**
     * A descriptive name for the Amazon EMR Studio.
     */
    name?: pulumi.Input<string>;
    /**
     * The IAM role that will be assumed by the Amazon EMR Studio. The service role provides a way for Amazon EMR Studio to
     * interoperate with other AWS services.
     */
    serviceRole: pulumi.Input<string>;
    /**
     * A list of up to 5 subnet IDs to associate with the Studio. The subnets must belong to the VPC specified by VpcId. Studio
     * users can create a Workspace in any of the specified subnets.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tags to associate with the Studio. Tags are user-defined key-value pairs that consist of a required key string
     * with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EmrStudioTag>[]>;
    /**
     * A Boolean indicating whether to enable Trusted identity propagation for the Studio. The default value is false.
     */
    trustedIdentityPropagationEnabled?: pulumi.Input<boolean>;
    /**
     * The IAM user role that will be assumed by users and groups logged in to a Studio. The permissions attached to this IAM
     * role can be scoped down for each user or group using session policies.
     */
    userRole?: pulumi.Input<string>;
    /**
     * The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.
     */
    vpcId: pulumi.Input<string>;
    /**
     * The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic
     * to resources in the Engine security group, and it must be in the same VPC specified by VpcId.
     */
    workspaceSecurityGroupId: pulumi.Input<string>;
}
