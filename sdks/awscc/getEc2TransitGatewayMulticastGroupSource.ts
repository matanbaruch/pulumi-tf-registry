// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getEc2TransitGatewayMulticastGroupSource(args: GetEc2TransitGatewayMulticastGroupSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2TransitGatewayMulticastGroupSourceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEc2TransitGatewayMulticastGroupSource:getEc2TransitGatewayMulticastGroupSource", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2TransitGatewayMulticastGroupSource.
 */
export interface GetEc2TransitGatewayMulticastGroupSourceArgs {
    id: string;
}

/**
 * A collection of values returned by getEc2TransitGatewayMulticastGroupSource.
 */
export interface GetEc2TransitGatewayMulticastGroupSourceResult {
    readonly groupIpAddress: string;
    readonly groupMember: boolean;
    readonly groupSource: boolean;
    readonly id: string;
    readonly networkInterfaceId: string;
    readonly resourceId: string;
    readonly resourceType: string;
    readonly sourceType: string;
    readonly subnetId: string;
    readonly transitGatewayAttachmentId: string;
    readonly transitGatewayMulticastDomainId: string;
}
export function getEc2TransitGatewayMulticastGroupSourceOutput(args: GetEc2TransitGatewayMulticastGroupSourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2TransitGatewayMulticastGroupSourceResult> {
    return pulumi.output(args).apply((a: any) => getEc2TransitGatewayMulticastGroupSource(a, opts))
}

/**
 * A collection of arguments for invoking getEc2TransitGatewayMulticastGroupSource.
 */
export interface GetEc2TransitGatewayMulticastGroupSourceOutputArgs {
    id: pulumi.Input<string>;
}
