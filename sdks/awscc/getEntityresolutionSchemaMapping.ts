// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEntityresolutionSchemaMapping(args: GetEntityresolutionSchemaMappingArgs, opts?: pulumi.InvokeOptions): Promise<GetEntityresolutionSchemaMappingResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEntityresolutionSchemaMapping:getEntityresolutionSchemaMapping", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEntityresolutionSchemaMapping.
 */
export interface GetEntityresolutionSchemaMappingArgs {
    id: string;
}

/**
 * A collection of values returned by getEntityresolutionSchemaMapping.
 */
export interface GetEntityresolutionSchemaMappingResult {
    readonly createdAt: string;
    readonly description: string;
    readonly hasWorkflows: boolean;
    readonly id: string;
    readonly mappedInputFields: outputs.GetEntityresolutionSchemaMappingMappedInputField[];
    readonly schemaArn: string;
    readonly schemaName: string;
    readonly tags: outputs.GetEntityresolutionSchemaMappingTag[];
    readonly updatedAt: string;
}
export function getEntityresolutionSchemaMappingOutput(args: GetEntityresolutionSchemaMappingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEntityresolutionSchemaMappingResult> {
    return pulumi.output(args).apply((a: any) => getEntityresolutionSchemaMapping(a, opts))
}

/**
 * A collection of arguments for invoking getEntityresolutionSchemaMapping.
 */
export interface GetEntityresolutionSchemaMappingOutputArgs {
    id: pulumi.Input<string>;
}
