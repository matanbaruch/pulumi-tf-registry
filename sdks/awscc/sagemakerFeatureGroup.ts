// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SagemakerFeatureGroup extends pulumi.CustomResource {
    /**
     * Get an existing SagemakerFeatureGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SagemakerFeatureGroupState, opts?: pulumi.CustomResourceOptions): SagemakerFeatureGroup {
        return new SagemakerFeatureGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/sagemakerFeatureGroup:SagemakerFeatureGroup';

    /**
     * Returns true if the given object is an instance of SagemakerFeatureGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SagemakerFeatureGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SagemakerFeatureGroup.__pulumiType;
    }

    /**
     * A timestamp of FeatureGroup creation time.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * Description about the FeatureGroup.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The Event Time Feature Name.
     */
    public readonly eventTimeFeatureName!: pulumi.Output<string>;
    /**
     * An Array of Feature Definition
     */
    public readonly featureDefinitions!: pulumi.Output<outputs.SagemakerFeatureGroupFeatureDefinition[]>;
    /**
     * The Name of the FeatureGroup.
     */
    public readonly featureGroupName!: pulumi.Output<string>;
    /**
     * The status of the feature group.
     */
    public /*out*/ readonly featureGroupStatus!: pulumi.Output<string>;
    public readonly offlineStoreConfig!: pulumi.Output<outputs.SagemakerFeatureGroupOfflineStoreConfig>;
    public readonly onlineStoreConfig!: pulumi.Output<outputs.SagemakerFeatureGroupOnlineStoreConfig>;
    /**
     * The Record Identifier Feature Name.
     */
    public readonly recordIdentifierFeatureName!: pulumi.Output<string>;
    /**
     * Role Arn
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * An array of key-value pair to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.SagemakerFeatureGroupTag[]>;
    public readonly throughputConfig!: pulumi.Output<outputs.SagemakerFeatureGroupThroughputConfig>;

    /**
     * Create a SagemakerFeatureGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SagemakerFeatureGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SagemakerFeatureGroupArgs | SagemakerFeatureGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SagemakerFeatureGroupState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventTimeFeatureName"] = state ? state.eventTimeFeatureName : undefined;
            resourceInputs["featureDefinitions"] = state ? state.featureDefinitions : undefined;
            resourceInputs["featureGroupName"] = state ? state.featureGroupName : undefined;
            resourceInputs["featureGroupStatus"] = state ? state.featureGroupStatus : undefined;
            resourceInputs["offlineStoreConfig"] = state ? state.offlineStoreConfig : undefined;
            resourceInputs["onlineStoreConfig"] = state ? state.onlineStoreConfig : undefined;
            resourceInputs["recordIdentifierFeatureName"] = state ? state.recordIdentifierFeatureName : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throughputConfig"] = state ? state.throughputConfig : undefined;
        } else {
            const args = argsOrState as SagemakerFeatureGroupArgs | undefined;
            if ((!args || args.eventTimeFeatureName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventTimeFeatureName'");
            }
            if ((!args || args.featureDefinitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureDefinitions'");
            }
            if ((!args || args.featureGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureGroupName'");
            }
            if ((!args || args.recordIdentifierFeatureName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordIdentifierFeatureName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventTimeFeatureName"] = args ? args.eventTimeFeatureName : undefined;
            resourceInputs["featureDefinitions"] = args ? args.featureDefinitions : undefined;
            resourceInputs["featureGroupName"] = args ? args.featureGroupName : undefined;
            resourceInputs["offlineStoreConfig"] = args ? args.offlineStoreConfig : undefined;
            resourceInputs["onlineStoreConfig"] = args ? args.onlineStoreConfig : undefined;
            resourceInputs["recordIdentifierFeatureName"] = args ? args.recordIdentifierFeatureName : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throughputConfig"] = args ? args.throughputConfig : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["featureGroupStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SagemakerFeatureGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SagemakerFeatureGroup resources.
 */
export interface SagemakerFeatureGroupState {
    /**
     * A timestamp of FeatureGroup creation time.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * Description about the FeatureGroup.
     */
    description?: pulumi.Input<string>;
    /**
     * The Event Time Feature Name.
     */
    eventTimeFeatureName?: pulumi.Input<string>;
    /**
     * An Array of Feature Definition
     */
    featureDefinitions?: pulumi.Input<pulumi.Input<inputs.SagemakerFeatureGroupFeatureDefinition>[]>;
    /**
     * The Name of the FeatureGroup.
     */
    featureGroupName?: pulumi.Input<string>;
    /**
     * The status of the feature group.
     */
    featureGroupStatus?: pulumi.Input<string>;
    offlineStoreConfig?: pulumi.Input<inputs.SagemakerFeatureGroupOfflineStoreConfig>;
    onlineStoreConfig?: pulumi.Input<inputs.SagemakerFeatureGroupOnlineStoreConfig>;
    /**
     * The Record Identifier Feature Name.
     */
    recordIdentifierFeatureName?: pulumi.Input<string>;
    /**
     * Role Arn
     */
    roleArn?: pulumi.Input<string>;
    /**
     * An array of key-value pair to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerFeatureGroupTag>[]>;
    throughputConfig?: pulumi.Input<inputs.SagemakerFeatureGroupThroughputConfig>;
}

/**
 * The set of arguments for constructing a SagemakerFeatureGroup resource.
 */
export interface SagemakerFeatureGroupArgs {
    /**
     * Description about the FeatureGroup.
     */
    description?: pulumi.Input<string>;
    /**
     * The Event Time Feature Name.
     */
    eventTimeFeatureName: pulumi.Input<string>;
    /**
     * An Array of Feature Definition
     */
    featureDefinitions: pulumi.Input<pulumi.Input<inputs.SagemakerFeatureGroupFeatureDefinition>[]>;
    /**
     * The Name of the FeatureGroup.
     */
    featureGroupName: pulumi.Input<string>;
    offlineStoreConfig?: pulumi.Input<inputs.SagemakerFeatureGroupOfflineStoreConfig>;
    onlineStoreConfig?: pulumi.Input<inputs.SagemakerFeatureGroupOnlineStoreConfig>;
    /**
     * The Record Identifier Feature Name.
     */
    recordIdentifierFeatureName: pulumi.Input<string>;
    /**
     * Role Arn
     */
    roleArn?: pulumi.Input<string>;
    /**
     * An array of key-value pair to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerFeatureGroupTag>[]>;
    throughputConfig?: pulumi.Input<inputs.SagemakerFeatureGroupThroughputConfig>;
}
