// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AthenaNamedQuery extends pulumi.CustomResource {
    /**
     * Get an existing AthenaNamedQuery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AthenaNamedQueryState, opts?: pulumi.CustomResourceOptions): AthenaNamedQuery {
        return new AthenaNamedQuery(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/athenaNamedQuery:AthenaNamedQuery';

    /**
     * Returns true if the given object is an instance of AthenaNamedQuery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AthenaNamedQuery {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AthenaNamedQuery.__pulumiType;
    }

    /**
     * The database to which the query belongs.
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * The query description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The query name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The unique ID of the query.
     */
    public /*out*/ readonly namedQueryId!: pulumi.Output<string>;
    /**
     * The contents of the query with all query statements.
     */
    public readonly queryString!: pulumi.Output<string>;
    /**
     * The name of the workgroup that contains the named query.
     */
    public readonly workGroup!: pulumi.Output<string>;

    /**
     * Create a AthenaNamedQuery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AthenaNamedQueryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AthenaNamedQueryArgs | AthenaNamedQueryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AthenaNamedQueryState | undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namedQueryId"] = state ? state.namedQueryId : undefined;
            resourceInputs["queryString"] = state ? state.queryString : undefined;
            resourceInputs["workGroup"] = state ? state.workGroup : undefined;
        } else {
            const args = argsOrState as AthenaNamedQueryArgs | undefined;
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.queryString === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryString'");
            }
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queryString"] = args ? args.queryString : undefined;
            resourceInputs["workGroup"] = args ? args.workGroup : undefined;
            resourceInputs["namedQueryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AthenaNamedQuery.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AthenaNamedQuery resources.
 */
export interface AthenaNamedQueryState {
    /**
     * The database to which the query belongs.
     */
    database?: pulumi.Input<string>;
    /**
     * The query description.
     */
    description?: pulumi.Input<string>;
    /**
     * The query name.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique ID of the query.
     */
    namedQueryId?: pulumi.Input<string>;
    /**
     * The contents of the query with all query statements.
     */
    queryString?: pulumi.Input<string>;
    /**
     * The name of the workgroup that contains the named query.
     */
    workGroup?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AthenaNamedQuery resource.
 */
export interface AthenaNamedQueryArgs {
    /**
     * The database to which the query belongs.
     */
    database: pulumi.Input<string>;
    /**
     * The query description.
     */
    description?: pulumi.Input<string>;
    /**
     * The query name.
     */
    name?: pulumi.Input<string>;
    /**
     * The contents of the query with all query statements.
     */
    queryString: pulumi.Input<string>;
    /**
     * The name of the workgroup that contains the named query.
     */
    workGroup?: pulumi.Input<string>;
}
