// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ec2VpcEndpointService extends pulumi.CustomResource {
    /**
     * Get an existing Ec2VpcEndpointService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2VpcEndpointServiceState, opts?: pulumi.CustomResourceOptions): Ec2VpcEndpointService {
        return new Ec2VpcEndpointService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2VpcEndpointService:Ec2VpcEndpointService';

    /**
     * Returns true if the given object is an instance of Ec2VpcEndpointService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2VpcEndpointService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2VpcEndpointService.__pulumiType;
    }

    public readonly acceptanceRequired!: pulumi.Output<boolean>;
    public readonly contributorInsightsEnabled!: pulumi.Output<boolean>;
    public readonly gatewayLoadBalancerArns!: pulumi.Output<string[]>;
    public readonly networkLoadBalancerArns!: pulumi.Output<string[]>;
    public readonly payerResponsibility!: pulumi.Output<string>;
    public /*out*/ readonly serviceId!: pulumi.Output<string>;

    /**
     * Create a Ec2VpcEndpointService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Ec2VpcEndpointServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2VpcEndpointServiceArgs | Ec2VpcEndpointServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2VpcEndpointServiceState | undefined;
            resourceInputs["acceptanceRequired"] = state ? state.acceptanceRequired : undefined;
            resourceInputs["contributorInsightsEnabled"] = state ? state.contributorInsightsEnabled : undefined;
            resourceInputs["gatewayLoadBalancerArns"] = state ? state.gatewayLoadBalancerArns : undefined;
            resourceInputs["networkLoadBalancerArns"] = state ? state.networkLoadBalancerArns : undefined;
            resourceInputs["payerResponsibility"] = state ? state.payerResponsibility : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
        } else {
            const args = argsOrState as Ec2VpcEndpointServiceArgs | undefined;
            resourceInputs["acceptanceRequired"] = args ? args.acceptanceRequired : undefined;
            resourceInputs["contributorInsightsEnabled"] = args ? args.contributorInsightsEnabled : undefined;
            resourceInputs["gatewayLoadBalancerArns"] = args ? args.gatewayLoadBalancerArns : undefined;
            resourceInputs["networkLoadBalancerArns"] = args ? args.networkLoadBalancerArns : undefined;
            resourceInputs["payerResponsibility"] = args ? args.payerResponsibility : undefined;
            resourceInputs["serviceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2VpcEndpointService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2VpcEndpointService resources.
 */
export interface Ec2VpcEndpointServiceState {
    acceptanceRequired?: pulumi.Input<boolean>;
    contributorInsightsEnabled?: pulumi.Input<boolean>;
    gatewayLoadBalancerArns?: pulumi.Input<pulumi.Input<string>[]>;
    networkLoadBalancerArns?: pulumi.Input<pulumi.Input<string>[]>;
    payerResponsibility?: pulumi.Input<string>;
    serviceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2VpcEndpointService resource.
 */
export interface Ec2VpcEndpointServiceArgs {
    acceptanceRequired?: pulumi.Input<boolean>;
    contributorInsightsEnabled?: pulumi.Input<boolean>;
    gatewayLoadBalancerArns?: pulumi.Input<pulumi.Input<string>[]>;
    networkLoadBalancerArns?: pulumi.Input<pulumi.Input<string>[]>;
    payerResponsibility?: pulumi.Input<string>;
}
