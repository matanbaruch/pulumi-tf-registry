// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Elasticloadbalancingv2TrustStore extends pulumi.CustomResource {
    /**
     * Get an existing Elasticloadbalancingv2TrustStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Elasticloadbalancingv2TrustStoreState, opts?: pulumi.CustomResourceOptions): Elasticloadbalancingv2TrustStore {
        return new Elasticloadbalancingv2TrustStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/elasticloadbalancingv2TrustStore:Elasticloadbalancingv2TrustStore';

    /**
     * Returns true if the given object is an instance of Elasticloadbalancingv2TrustStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Elasticloadbalancingv2TrustStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Elasticloadbalancingv2TrustStore.__pulumiType;
    }

    /**
     * The name of the S3 bucket to fetch the CA certificate bundle from.
     */
    public readonly caCertificatesBundleS3Bucket!: pulumi.Output<string>;
    /**
     * The name of the S3 object to fetch the CA certificate bundle from.
     */
    public readonly caCertificatesBundleS3Key!: pulumi.Output<string>;
    /**
     * The version of the S3 bucket that contains the CA certificate bundle.
     */
    public readonly caCertificatesBundleS3ObjectVersion!: pulumi.Output<string>;
    /**
     * The name of the trust store.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of certificates associated with the trust store.
     */
    public /*out*/ readonly numberOfCaCertificates!: pulumi.Output<number>;
    /**
     * The status of the trust store, could be either of ACTIVE or CREATING.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The tags to assign to the trust store.
     */
    public readonly tags!: pulumi.Output<outputs.Elasticloadbalancingv2TrustStoreTag[]>;
    /**
     * The Amazon Resource Name (ARN) of the trust store.
     */
    public /*out*/ readonly trustStoreArn!: pulumi.Output<string>;

    /**
     * Create a Elasticloadbalancingv2TrustStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Elasticloadbalancingv2TrustStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Elasticloadbalancingv2TrustStoreArgs | Elasticloadbalancingv2TrustStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Elasticloadbalancingv2TrustStoreState | undefined;
            resourceInputs["caCertificatesBundleS3Bucket"] = state ? state.caCertificatesBundleS3Bucket : undefined;
            resourceInputs["caCertificatesBundleS3Key"] = state ? state.caCertificatesBundleS3Key : undefined;
            resourceInputs["caCertificatesBundleS3ObjectVersion"] = state ? state.caCertificatesBundleS3ObjectVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfCaCertificates"] = state ? state.numberOfCaCertificates : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trustStoreArn"] = state ? state.trustStoreArn : undefined;
        } else {
            const args = argsOrState as Elasticloadbalancingv2TrustStoreArgs | undefined;
            resourceInputs["caCertificatesBundleS3Bucket"] = args ? args.caCertificatesBundleS3Bucket : undefined;
            resourceInputs["caCertificatesBundleS3Key"] = args ? args.caCertificatesBundleS3Key : undefined;
            resourceInputs["caCertificatesBundleS3ObjectVersion"] = args ? args.caCertificatesBundleS3ObjectVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["numberOfCaCertificates"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["trustStoreArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Elasticloadbalancingv2TrustStore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Elasticloadbalancingv2TrustStore resources.
 */
export interface Elasticloadbalancingv2TrustStoreState {
    /**
     * The name of the S3 bucket to fetch the CA certificate bundle from.
     */
    caCertificatesBundleS3Bucket?: pulumi.Input<string>;
    /**
     * The name of the S3 object to fetch the CA certificate bundle from.
     */
    caCertificatesBundleS3Key?: pulumi.Input<string>;
    /**
     * The version of the S3 bucket that contains the CA certificate bundle.
     */
    caCertificatesBundleS3ObjectVersion?: pulumi.Input<string>;
    /**
     * The name of the trust store.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of certificates associated with the trust store.
     */
    numberOfCaCertificates?: pulumi.Input<number>;
    /**
     * The status of the trust store, could be either of ACTIVE or CREATING.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags to assign to the trust store.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Elasticloadbalancingv2TrustStoreTag>[]>;
    /**
     * The Amazon Resource Name (ARN) of the trust store.
     */
    trustStoreArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Elasticloadbalancingv2TrustStore resource.
 */
export interface Elasticloadbalancingv2TrustStoreArgs {
    /**
     * The name of the S3 bucket to fetch the CA certificate bundle from.
     */
    caCertificatesBundleS3Bucket?: pulumi.Input<string>;
    /**
     * The name of the S3 object to fetch the CA certificate bundle from.
     */
    caCertificatesBundleS3Key?: pulumi.Input<string>;
    /**
     * The version of the S3 bucket that contains the CA certificate bundle.
     */
    caCertificatesBundleS3ObjectVersion?: pulumi.Input<string>;
    /**
     * The name of the trust store.
     */
    name?: pulumi.Input<string>;
    /**
     * The tags to assign to the trust store.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Elasticloadbalancingv2TrustStoreTag>[]>;
}
