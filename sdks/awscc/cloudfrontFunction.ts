// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudfrontFunction extends pulumi.CustomResource {
    /**
     * Get an existing CloudfrontFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudfrontFunctionState, opts?: pulumi.CustomResourceOptions): CloudfrontFunction {
        return new CloudfrontFunction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/cloudfrontFunction:CloudfrontFunction';

    /**
     * Returns true if the given object is an instance of CloudfrontFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudfrontFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudfrontFunction.__pulumiType;
    }

    public readonly autoPublish!: pulumi.Output<boolean>;
    public /*out*/ readonly functionArn!: pulumi.Output<string>;
    public readonly functionCode!: pulumi.Output<string>;
    public readonly functionConfig!: pulumi.Output<outputs.CloudfrontFunctionFunctionConfig>;
    public readonly functionMetadata!: pulumi.Output<outputs.CloudfrontFunctionFunctionMetadata>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly stage!: pulumi.Output<string>;

    /**
     * Create a CloudfrontFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudfrontFunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudfrontFunctionArgs | CloudfrontFunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudfrontFunctionState | undefined;
            resourceInputs["autoPublish"] = state ? state.autoPublish : undefined;
            resourceInputs["functionArn"] = state ? state.functionArn : undefined;
            resourceInputs["functionCode"] = state ? state.functionCode : undefined;
            resourceInputs["functionConfig"] = state ? state.functionConfig : undefined;
            resourceInputs["functionMetadata"] = state ? state.functionMetadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["stage"] = state ? state.stage : undefined;
        } else {
            const args = argsOrState as CloudfrontFunctionArgs | undefined;
            if ((!args || args.functionCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionCode'");
            }
            if ((!args || args.functionConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionConfig'");
            }
            resourceInputs["autoPublish"] = args ? args.autoPublish : undefined;
            resourceInputs["functionCode"] = args ? args.functionCode : undefined;
            resourceInputs["functionConfig"] = args ? args.functionConfig : undefined;
            resourceInputs["functionMetadata"] = args ? args.functionMetadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["functionArn"] = undefined /*out*/;
            resourceInputs["stage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudfrontFunction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudfrontFunction resources.
 */
export interface CloudfrontFunctionState {
    autoPublish?: pulumi.Input<boolean>;
    functionArn?: pulumi.Input<string>;
    functionCode?: pulumi.Input<string>;
    functionConfig?: pulumi.Input<inputs.CloudfrontFunctionFunctionConfig>;
    functionMetadata?: pulumi.Input<inputs.CloudfrontFunctionFunctionMetadata>;
    name?: pulumi.Input<string>;
    stage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudfrontFunction resource.
 */
export interface CloudfrontFunctionArgs {
    autoPublish?: pulumi.Input<boolean>;
    functionCode: pulumi.Input<string>;
    functionConfig: pulumi.Input<inputs.CloudfrontFunctionFunctionConfig>;
    functionMetadata?: pulumi.Input<inputs.CloudfrontFunctionFunctionMetadata>;
    name?: pulumi.Input<string>;
}
