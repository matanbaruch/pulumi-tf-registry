// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LambdaLayerVersionPermission extends pulumi.CustomResource {
    /**
     * Get an existing LambdaLayerVersionPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LambdaLayerVersionPermissionState, opts?: pulumi.CustomResourceOptions): LambdaLayerVersionPermission {
        return new LambdaLayerVersionPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lambdaLayerVersionPermission:LambdaLayerVersionPermission';

    /**
     * Returns true if the given object is an instance of LambdaLayerVersionPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LambdaLayerVersionPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LambdaLayerVersionPermission.__pulumiType;
    }

    /**
     * The API action that grants access to the layer.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The name or Amazon Resource Name (ARN) of the layer.
     */
    public readonly layerVersionArn!: pulumi.Output<string>;
    /**
     * ID generated by service
     */
    public /*out*/ readonly layerVersionPermissionId!: pulumi.Output<string>;
    /**
     * With the principal set to *, grant permission to all accounts in the specified organization.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * An account ID, or * to grant layer usage permission to all accounts in an organization, or all AWS accounts (if
     * organizationId is not specified).
     */
    public readonly principal!: pulumi.Output<string>;

    /**
     * Create a LambdaLayerVersionPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LambdaLayerVersionPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LambdaLayerVersionPermissionArgs | LambdaLayerVersionPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LambdaLayerVersionPermissionState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["layerVersionArn"] = state ? state.layerVersionArn : undefined;
            resourceInputs["layerVersionPermissionId"] = state ? state.layerVersionPermissionId : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
        } else {
            const args = argsOrState as LambdaLayerVersionPermissionArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.layerVersionArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layerVersionArn'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["layerVersionArn"] = args ? args.layerVersionArn : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["layerVersionPermissionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LambdaLayerVersionPermission.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LambdaLayerVersionPermission resources.
 */
export interface LambdaLayerVersionPermissionState {
    /**
     * The API action that grants access to the layer.
     */
    action?: pulumi.Input<string>;
    /**
     * The name or Amazon Resource Name (ARN) of the layer.
     */
    layerVersionArn?: pulumi.Input<string>;
    /**
     * ID generated by service
     */
    layerVersionPermissionId?: pulumi.Input<string>;
    /**
     * With the principal set to *, grant permission to all accounts in the specified organization.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * An account ID, or * to grant layer usage permission to all accounts in an organization, or all AWS accounts (if
     * organizationId is not specified).
     */
    principal?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LambdaLayerVersionPermission resource.
 */
export interface LambdaLayerVersionPermissionArgs {
    /**
     * The API action that grants access to the layer.
     */
    action: pulumi.Input<string>;
    /**
     * The name or Amazon Resource Name (ARN) of the layer.
     */
    layerVersionArn: pulumi.Input<string>;
    /**
     * With the principal set to *, grant permission to all accounts in the specified organization.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * An account ID, or * to grant layer usage permission to all accounts in an organization, or all AWS accounts (if
     * organizationId is not specified).
     */
    principal: pulumi.Input<string>;
}
