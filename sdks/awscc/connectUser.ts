// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectUser extends pulumi.CustomResource {
    /**
     * Get an existing ConnectUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectUserState, opts?: pulumi.CustomResourceOptions): ConnectUser {
        return new ConnectUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/connectUser:ConnectUser';

    /**
     * Returns true if the given object is an instance of ConnectUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectUser.__pulumiType;
    }

    /**
     * The identifier of the user account in the directory used for identity management.
     */
    public readonly directoryUserId!: pulumi.Output<string>;
    /**
     * The identifier of the hierarchy group for the user.
     */
    public readonly hierarchyGroupArn!: pulumi.Output<string>;
    /**
     * The information about the identity of the user.
     */
    public readonly identityInfo!: pulumi.Output<outputs.ConnectUserIdentityInfo>;
    /**
     * The identifier of the Amazon Connect instance.
     */
    public readonly instanceArn!: pulumi.Output<string>;
    /**
     * The password for the user account. A password is required if you are using Amazon Connect for identity management.
     * Otherwise, it is an error to include a password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * The phone settings for the user.
     */
    public readonly phoneConfig!: pulumi.Output<outputs.ConnectUserPhoneConfig>;
    /**
     * The identifier of the routing profile for the user.
     */
    public readonly routingProfileArn!: pulumi.Output<string>;
    /**
     * One or more security profile arns for the user
     */
    public readonly securityProfileArns!: pulumi.Output<string[]>;
    /**
     * One or more tags.
     */
    public readonly tags!: pulumi.Output<outputs.ConnectUserTag[]>;
    /**
     * The Amazon Resource Name (ARN) for the user.
     */
    public /*out*/ readonly userArn!: pulumi.Output<string>;
    /**
     * One or more predefined attributes assigned to a user, with a level that indicates how skilled they are.
     */
    public readonly userProficiencies!: pulumi.Output<outputs.ConnectUserUserProficiency[]>;
    /**
     * The user name for the account.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ConnectUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectUserArgs | ConnectUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectUserState | undefined;
            resourceInputs["directoryUserId"] = state ? state.directoryUserId : undefined;
            resourceInputs["hierarchyGroupArn"] = state ? state.hierarchyGroupArn : undefined;
            resourceInputs["identityInfo"] = state ? state.identityInfo : undefined;
            resourceInputs["instanceArn"] = state ? state.instanceArn : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["phoneConfig"] = state ? state.phoneConfig : undefined;
            resourceInputs["routingProfileArn"] = state ? state.routingProfileArn : undefined;
            resourceInputs["securityProfileArns"] = state ? state.securityProfileArns : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userArn"] = state ? state.userArn : undefined;
            resourceInputs["userProficiencies"] = state ? state.userProficiencies : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ConnectUserArgs | undefined;
            if ((!args || args.instanceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceArn'");
            }
            if ((!args || args.phoneConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phoneConfig'");
            }
            if ((!args || args.routingProfileArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routingProfileArn'");
            }
            if ((!args || args.securityProfileArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityProfileArns'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["directoryUserId"] = args ? args.directoryUserId : undefined;
            resourceInputs["hierarchyGroupArn"] = args ? args.hierarchyGroupArn : undefined;
            resourceInputs["identityInfo"] = args ? args.identityInfo : undefined;
            resourceInputs["instanceArn"] = args ? args.instanceArn : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["phoneConfig"] = args ? args.phoneConfig : undefined;
            resourceInputs["routingProfileArn"] = args ? args.routingProfileArn : undefined;
            resourceInputs["securityProfileArns"] = args ? args.securityProfileArns : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userProficiencies"] = args ? args.userProficiencies : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["userArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectUser resources.
 */
export interface ConnectUserState {
    /**
     * The identifier of the user account in the directory used for identity management.
     */
    directoryUserId?: pulumi.Input<string>;
    /**
     * The identifier of the hierarchy group for the user.
     */
    hierarchyGroupArn?: pulumi.Input<string>;
    /**
     * The information about the identity of the user.
     */
    identityInfo?: pulumi.Input<inputs.ConnectUserIdentityInfo>;
    /**
     * The identifier of the Amazon Connect instance.
     */
    instanceArn?: pulumi.Input<string>;
    /**
     * The password for the user account. A password is required if you are using Amazon Connect for identity management.
     * Otherwise, it is an error to include a password.
     */
    password?: pulumi.Input<string>;
    /**
     * The phone settings for the user.
     */
    phoneConfig?: pulumi.Input<inputs.ConnectUserPhoneConfig>;
    /**
     * The identifier of the routing profile for the user.
     */
    routingProfileArn?: pulumi.Input<string>;
    /**
     * One or more security profile arns for the user
     */
    securityProfileArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ConnectUserTag>[]>;
    /**
     * The Amazon Resource Name (ARN) for the user.
     */
    userArn?: pulumi.Input<string>;
    /**
     * One or more predefined attributes assigned to a user, with a level that indicates how skilled they are.
     */
    userProficiencies?: pulumi.Input<pulumi.Input<inputs.ConnectUserUserProficiency>[]>;
    /**
     * The user name for the account.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectUser resource.
 */
export interface ConnectUserArgs {
    /**
     * The identifier of the user account in the directory used for identity management.
     */
    directoryUserId?: pulumi.Input<string>;
    /**
     * The identifier of the hierarchy group for the user.
     */
    hierarchyGroupArn?: pulumi.Input<string>;
    /**
     * The information about the identity of the user.
     */
    identityInfo?: pulumi.Input<inputs.ConnectUserIdentityInfo>;
    /**
     * The identifier of the Amazon Connect instance.
     */
    instanceArn: pulumi.Input<string>;
    /**
     * The password for the user account. A password is required if you are using Amazon Connect for identity management.
     * Otherwise, it is an error to include a password.
     */
    password?: pulumi.Input<string>;
    /**
     * The phone settings for the user.
     */
    phoneConfig: pulumi.Input<inputs.ConnectUserPhoneConfig>;
    /**
     * The identifier of the routing profile for the user.
     */
    routingProfileArn: pulumi.Input<string>;
    /**
     * One or more security profile arns for the user
     */
    securityProfileArns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ConnectUserTag>[]>;
    /**
     * One or more predefined attributes assigned to a user, with a level that indicates how skilled they are.
     */
    userProficiencies?: pulumi.Input<pulumi.Input<inputs.ConnectUserUserProficiency>[]>;
    /**
     * The user name for the account.
     */
    username: pulumi.Input<string>;
}
