// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApigatewayAuthorizer extends pulumi.CustomResource {
    /**
     * Get an existing ApigatewayAuthorizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApigatewayAuthorizerState, opts?: pulumi.CustomResourceOptions): ApigatewayAuthorizer {
        return new ApigatewayAuthorizer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/apigatewayAuthorizer:ApigatewayAuthorizer';

    /**
     * Returns true if the given object is an instance of ApigatewayAuthorizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApigatewayAuthorizer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApigatewayAuthorizer.__pulumiType;
    }

    /**
     * Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
     */
    public readonly authType!: pulumi.Output<string>;
    /**
     * Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for
     * API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda
     * function, specify null.
     */
    public readonly authorizerCredentials!: pulumi.Output<string>;
    public /*out*/ readonly authorizerId!: pulumi.Output<string>;
    /**
     * The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater
     * than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum
     * value is 3600, or 1 hour.
     */
    public readonly authorizerResultTtlInSeconds!: pulumi.Output<number>;
    /**
     * Specifies the authorizer's Uniform Resource Identifier (URI). For ``TOKEN`` or ``REQUEST`` authorizers, this must be a
     * well-formed Lambda function URI, for example,
     * ``arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations``.
     * In general, the URI has this form ``arn:aws:apigateway:{region}:lambda:path/{service_api}``, where ``{region}`` is the
     * same as the region hosting the Lambda function, ``path`` indicates that the remaining substring in the URI should be
     * treated as the path to the resource, including the initial ``/``. For Lambda functions, this is usually of the form
     * ``/2015-03-31/functions/[FunctionARN]/invocations``.
     */
    public readonly authorizerUri!: pulumi.Output<string>;
    /**
     * The identity source for which authorization is requested. For a ``TOKEN`` or ``COGNITO_USER_POOLS`` authorizer, this is
     * required and specifies the request header mapping expression for the custom header holding the authorization token
     * submitted by the client. For example, if the token header name is ``Auth``, the header mapping expression is
     * ``method.request.header.Auth``. For the ``REQUEST`` authorizer, this is required when authorization caching is enabled.
     * The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For
     * example, if an ``Auth`` header, a ``Name`` query string parameter are defined as identity sources, this value is
     * ``method.request.header.Auth, method.request.querystring.Name``. These parameters will be used to derive the
     * authorization caching key and to perform runtime validation of the ``REQUEST`` authorizer by verifying all of the
     * identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer
     * invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda
     * function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When
     * the authorization caching is not enabled, this property is optional.
     */
    public readonly identitySource!: pulumi.Output<string>;
    /**
     * A validation expression for the incoming identity token. For ``TOKEN`` authorizers, this value is a regular expression.
     * For ``COGNITO_USER_POOLS`` authorizers, API Gateway will match the ``aud`` field of the incoming token from the client
     * against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match.
     * Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression
     * does not apply to the ``REQUEST`` authorizer.
     */
    public readonly identityValidationExpression!: pulumi.Output<string>;
    /**
     * The name of the authorizer.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of the Amazon Cognito user pool ARNs for the ``COGNITO_USER_POOLS`` authorizer. Each element is of this format:
     * ``arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}``. For a ``TOKEN`` or ``REQUEST`` authorizer, this
     * is not defined.
     */
    public readonly providerArNs!: pulumi.Output<string[]>;
    /**
     * The string identifier of the associated RestApi.
     */
    public readonly restApiId!: pulumi.Output<string>;
    /**
     * The authorizer type. Valid values are ``TOKEN`` for a Lambda function using a single authorization token submitted in a
     * custom header, ``REQUEST`` for a Lambda function using incoming request parameters, and ``COGNITO_USER_POOLS`` for using
     * an Amazon Cognito user pool.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ApigatewayAuthorizer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApigatewayAuthorizerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApigatewayAuthorizerArgs | ApigatewayAuthorizerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApigatewayAuthorizerState | undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["authorizerCredentials"] = state ? state.authorizerCredentials : undefined;
            resourceInputs["authorizerId"] = state ? state.authorizerId : undefined;
            resourceInputs["authorizerResultTtlInSeconds"] = state ? state.authorizerResultTtlInSeconds : undefined;
            resourceInputs["authorizerUri"] = state ? state.authorizerUri : undefined;
            resourceInputs["identitySource"] = state ? state.identitySource : undefined;
            resourceInputs["identityValidationExpression"] = state ? state.identityValidationExpression : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["providerArNs"] = state ? state.providerArNs : undefined;
            resourceInputs["restApiId"] = state ? state.restApiId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ApigatewayAuthorizerArgs | undefined;
            if ((!args || args.restApiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restApiId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["authorizerCredentials"] = args ? args.authorizerCredentials : undefined;
            resourceInputs["authorizerResultTtlInSeconds"] = args ? args.authorizerResultTtlInSeconds : undefined;
            resourceInputs["authorizerUri"] = args ? args.authorizerUri : undefined;
            resourceInputs["identitySource"] = args ? args.identitySource : undefined;
            resourceInputs["identityValidationExpression"] = args ? args.identityValidationExpression : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["providerArNs"] = args ? args.providerArNs : undefined;
            resourceInputs["restApiId"] = args ? args.restApiId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["authorizerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApigatewayAuthorizer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApigatewayAuthorizer resources.
 */
export interface ApigatewayAuthorizerState {
    /**
     * Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
     */
    authType?: pulumi.Input<string>;
    /**
     * Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for
     * API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda
     * function, specify null.
     */
    authorizerCredentials?: pulumi.Input<string>;
    authorizerId?: pulumi.Input<string>;
    /**
     * The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater
     * than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum
     * value is 3600, or 1 hour.
     */
    authorizerResultTtlInSeconds?: pulumi.Input<number>;
    /**
     * Specifies the authorizer's Uniform Resource Identifier (URI). For ``TOKEN`` or ``REQUEST`` authorizers, this must be a
     * well-formed Lambda function URI, for example,
     * ``arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations``.
     * In general, the URI has this form ``arn:aws:apigateway:{region}:lambda:path/{service_api}``, where ``{region}`` is the
     * same as the region hosting the Lambda function, ``path`` indicates that the remaining substring in the URI should be
     * treated as the path to the resource, including the initial ``/``. For Lambda functions, this is usually of the form
     * ``/2015-03-31/functions/[FunctionARN]/invocations``.
     */
    authorizerUri?: pulumi.Input<string>;
    /**
     * The identity source for which authorization is requested. For a ``TOKEN`` or ``COGNITO_USER_POOLS`` authorizer, this is
     * required and specifies the request header mapping expression for the custom header holding the authorization token
     * submitted by the client. For example, if the token header name is ``Auth``, the header mapping expression is
     * ``method.request.header.Auth``. For the ``REQUEST`` authorizer, this is required when authorization caching is enabled.
     * The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For
     * example, if an ``Auth`` header, a ``Name`` query string parameter are defined as identity sources, this value is
     * ``method.request.header.Auth, method.request.querystring.Name``. These parameters will be used to derive the
     * authorization caching key and to perform runtime validation of the ``REQUEST`` authorizer by verifying all of the
     * identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer
     * invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda
     * function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When
     * the authorization caching is not enabled, this property is optional.
     */
    identitySource?: pulumi.Input<string>;
    /**
     * A validation expression for the incoming identity token. For ``TOKEN`` authorizers, this value is a regular expression.
     * For ``COGNITO_USER_POOLS`` authorizers, API Gateway will match the ``aud`` field of the incoming token from the client
     * against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match.
     * Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression
     * does not apply to the ``REQUEST`` authorizer.
     */
    identityValidationExpression?: pulumi.Input<string>;
    /**
     * The name of the authorizer.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of the Amazon Cognito user pool ARNs for the ``COGNITO_USER_POOLS`` authorizer. Each element is of this format:
     * ``arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}``. For a ``TOKEN`` or ``REQUEST`` authorizer, this
     * is not defined.
     */
    providerArNs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The string identifier of the associated RestApi.
     */
    restApiId?: pulumi.Input<string>;
    /**
     * The authorizer type. Valid values are ``TOKEN`` for a Lambda function using a single authorization token submitted in a
     * custom header, ``REQUEST`` for a Lambda function using incoming request parameters, and ``COGNITO_USER_POOLS`` for using
     * an Amazon Cognito user pool.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApigatewayAuthorizer resource.
 */
export interface ApigatewayAuthorizerArgs {
    /**
     * Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
     */
    authType?: pulumi.Input<string>;
    /**
     * Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for
     * API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda
     * function, specify null.
     */
    authorizerCredentials?: pulumi.Input<string>;
    /**
     * The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater
     * than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum
     * value is 3600, or 1 hour.
     */
    authorizerResultTtlInSeconds?: pulumi.Input<number>;
    /**
     * Specifies the authorizer's Uniform Resource Identifier (URI). For ``TOKEN`` or ``REQUEST`` authorizers, this must be a
     * well-formed Lambda function URI, for example,
     * ``arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations``.
     * In general, the URI has this form ``arn:aws:apigateway:{region}:lambda:path/{service_api}``, where ``{region}`` is the
     * same as the region hosting the Lambda function, ``path`` indicates that the remaining substring in the URI should be
     * treated as the path to the resource, including the initial ``/``. For Lambda functions, this is usually of the form
     * ``/2015-03-31/functions/[FunctionARN]/invocations``.
     */
    authorizerUri?: pulumi.Input<string>;
    /**
     * The identity source for which authorization is requested. For a ``TOKEN`` or ``COGNITO_USER_POOLS`` authorizer, this is
     * required and specifies the request header mapping expression for the custom header holding the authorization token
     * submitted by the client. For example, if the token header name is ``Auth``, the header mapping expression is
     * ``method.request.header.Auth``. For the ``REQUEST`` authorizer, this is required when authorization caching is enabled.
     * The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For
     * example, if an ``Auth`` header, a ``Name`` query string parameter are defined as identity sources, this value is
     * ``method.request.header.Auth, method.request.querystring.Name``. These parameters will be used to derive the
     * authorization caching key and to perform runtime validation of the ``REQUEST`` authorizer by verifying all of the
     * identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer
     * invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda
     * function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When
     * the authorization caching is not enabled, this property is optional.
     */
    identitySource?: pulumi.Input<string>;
    /**
     * A validation expression for the incoming identity token. For ``TOKEN`` authorizers, this value is a regular expression.
     * For ``COGNITO_USER_POOLS`` authorizers, API Gateway will match the ``aud`` field of the incoming token from the client
     * against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match.
     * Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression
     * does not apply to the ``REQUEST`` authorizer.
     */
    identityValidationExpression?: pulumi.Input<string>;
    /**
     * The name of the authorizer.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of the Amazon Cognito user pool ARNs for the ``COGNITO_USER_POOLS`` authorizer. Each element is of this format:
     * ``arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}``. For a ``TOKEN`` or ``REQUEST`` authorizer, this
     * is not defined.
     */
    providerArNs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The string identifier of the associated RestApi.
     */
    restApiId: pulumi.Input<string>;
    /**
     * The authorizer type. Valid values are ``TOKEN`` for a Lambda function using a single authorization token submitted in a
     * custom header, ``REQUEST`` for a Lambda function using incoming request parameters, and ``COGNITO_USER_POOLS`` for using
     * an Amazon Cognito user pool.
     */
    type: pulumi.Input<string>;
}
