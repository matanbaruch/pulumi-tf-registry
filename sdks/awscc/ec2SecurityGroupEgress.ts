// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ec2SecurityGroupEgress extends pulumi.CustomResource {
    /**
     * Get an existing Ec2SecurityGroupEgress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2SecurityGroupEgressState, opts?: pulumi.CustomResourceOptions): Ec2SecurityGroupEgress {
        return new Ec2SecurityGroupEgress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2SecurityGroupEgress:Ec2SecurityGroupEgress';

    /**
     * Returns true if the given object is an instance of Ec2SecurityGroupEgress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2SecurityGroupEgress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2SecurityGroupEgress.__pulumiType;
    }

    /**
     * The IPv4 address range, in CIDR format. You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``,
     * ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``. For examples of rules that you can add to security
     * groups for specific access scenarios, see [Security group rules for different use
     * cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *User Guide*.
     */
    public readonly cidrIp!: pulumi.Output<string>;
    /**
     * The IPv6 address range, in CIDR format. You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``,
     * ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``. For examples of rules that you can add to security
     * groups for specific access scenarios, see [Security group rules for different use
     * cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *User Guide*.
     */
    public readonly cidrIpv6!: pulumi.Output<string>;
    /**
     * The description of an egress (outbound) security group rule. Constraints: Up to 255 characters in length. Allowed
     * characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The prefix list IDs for an AWS service. This is the AWS service to access through a VPC endpoint from instances
     * associated with the security group. You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``,
     * ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
     */
    public readonly destinationPrefixListId!: pulumi.Output<string>;
    /**
     * The ID of the security group. You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``,
     * ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
     */
    public readonly destinationSecurityGroupId!: pulumi.Output<string>;
    /**
     * If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP
     * type or -1 (all ICMP types).
     */
    public readonly fromPort!: pulumi.Output<number>;
    /**
     * The ID of the security group. You must specify either the security group ID or the security group name in the request.
     * For security groups in a nondefault VPC, you must specify the security group ID.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * The IP protocol name (``tcp``, ``udp``, ``icmp``, ``icmpv6``) or number (see [Protocol
     * Numbers](https://docs.aws.amazon.com/http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)). Use
     * ``-1`` to specify all protocols. When authorizing security group rules, specifying ``-1`` or a protocol number other
     * than ``tcp``, ``udp``, ``icmp``, or ``icmpv6`` allows traffic on all ports, regardless of any port range you specify.
     * For ``tcp``, ``udp``, and ``icmp``, you must specify a port range. For ``icmpv6``, the port range is optional; if you
     * omit the port range, traffic for all types and codes is allowed.
     */
    public readonly ipProtocol!: pulumi.Output<string>;
    public /*out*/ readonly securityGroupEgressId!: pulumi.Output<string>;
    /**
     * If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP
     * code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).
     */
    public readonly toPort!: pulumi.Output<number>;

    /**
     * Create a Ec2SecurityGroupEgress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2SecurityGroupEgressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2SecurityGroupEgressArgs | Ec2SecurityGroupEgressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2SecurityGroupEgressState | undefined;
            resourceInputs["cidrIp"] = state ? state.cidrIp : undefined;
            resourceInputs["cidrIpv6"] = state ? state.cidrIpv6 : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationPrefixListId"] = state ? state.destinationPrefixListId : undefined;
            resourceInputs["destinationSecurityGroupId"] = state ? state.destinationSecurityGroupId : undefined;
            resourceInputs["fromPort"] = state ? state.fromPort : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["securityGroupEgressId"] = state ? state.securityGroupEgressId : undefined;
            resourceInputs["toPort"] = state ? state.toPort : undefined;
        } else {
            const args = argsOrState as Ec2SecurityGroupEgressArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.ipProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipProtocol'");
            }
            resourceInputs["cidrIp"] = args ? args.cidrIp : undefined;
            resourceInputs["cidrIpv6"] = args ? args.cidrIpv6 : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationPrefixListId"] = args ? args.destinationPrefixListId : undefined;
            resourceInputs["destinationSecurityGroupId"] = args ? args.destinationSecurityGroupId : undefined;
            resourceInputs["fromPort"] = args ? args.fromPort : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["toPort"] = args ? args.toPort : undefined;
            resourceInputs["securityGroupEgressId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2SecurityGroupEgress.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2SecurityGroupEgress resources.
 */
export interface Ec2SecurityGroupEgressState {
    /**
     * The IPv4 address range, in CIDR format. You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``,
     * ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``. For examples of rules that you can add to security
     * groups for specific access scenarios, see [Security group rules for different use
     * cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *User Guide*.
     */
    cidrIp?: pulumi.Input<string>;
    /**
     * The IPv6 address range, in CIDR format. You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``,
     * ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``. For examples of rules that you can add to security
     * groups for specific access scenarios, see [Security group rules for different use
     * cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *User Guide*.
     */
    cidrIpv6?: pulumi.Input<string>;
    /**
     * The description of an egress (outbound) security group rule. Constraints: Up to 255 characters in length. Allowed
     * characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
     */
    description?: pulumi.Input<string>;
    /**
     * The prefix list IDs for an AWS service. This is the AWS service to access through a VPC endpoint from instances
     * associated with the security group. You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``,
     * ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
     */
    destinationPrefixListId?: pulumi.Input<string>;
    /**
     * The ID of the security group. You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``,
     * ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
     */
    destinationSecurityGroupId?: pulumi.Input<string>;
    /**
     * If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP
     * type or -1 (all ICMP types).
     */
    fromPort?: pulumi.Input<number>;
    /**
     * The ID of the security group. You must specify either the security group ID or the security group name in the request.
     * For security groups in a nondefault VPC, you must specify the security group ID.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The IP protocol name (``tcp``, ``udp``, ``icmp``, ``icmpv6``) or number (see [Protocol
     * Numbers](https://docs.aws.amazon.com/http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)). Use
     * ``-1`` to specify all protocols. When authorizing security group rules, specifying ``-1`` or a protocol number other
     * than ``tcp``, ``udp``, ``icmp``, or ``icmpv6`` allows traffic on all ports, regardless of any port range you specify.
     * For ``tcp``, ``udp``, and ``icmp``, you must specify a port range. For ``icmpv6``, the port range is optional; if you
     * omit the port range, traffic for all types and codes is allowed.
     */
    ipProtocol?: pulumi.Input<string>;
    securityGroupEgressId?: pulumi.Input<string>;
    /**
     * If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP
     * code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).
     */
    toPort?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Ec2SecurityGroupEgress resource.
 */
export interface Ec2SecurityGroupEgressArgs {
    /**
     * The IPv4 address range, in CIDR format. You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``,
     * ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``. For examples of rules that you can add to security
     * groups for specific access scenarios, see [Security group rules for different use
     * cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *User Guide*.
     */
    cidrIp?: pulumi.Input<string>;
    /**
     * The IPv6 address range, in CIDR format. You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``,
     * ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``. For examples of rules that you can add to security
     * groups for specific access scenarios, see [Security group rules for different use
     * cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *User Guide*.
     */
    cidrIpv6?: pulumi.Input<string>;
    /**
     * The description of an egress (outbound) security group rule. Constraints: Up to 255 characters in length. Allowed
     * characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
     */
    description?: pulumi.Input<string>;
    /**
     * The prefix list IDs for an AWS service. This is the AWS service to access through a VPC endpoint from instances
     * associated with the security group. You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``,
     * ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
     */
    destinationPrefixListId?: pulumi.Input<string>;
    /**
     * The ID of the security group. You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``,
     * ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
     */
    destinationSecurityGroupId?: pulumi.Input<string>;
    /**
     * If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP
     * type or -1 (all ICMP types).
     */
    fromPort?: pulumi.Input<number>;
    /**
     * The ID of the security group. You must specify either the security group ID or the security group name in the request.
     * For security groups in a nondefault VPC, you must specify the security group ID.
     */
    groupId: pulumi.Input<string>;
    /**
     * The IP protocol name (``tcp``, ``udp``, ``icmp``, ``icmpv6``) or number (see [Protocol
     * Numbers](https://docs.aws.amazon.com/http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)). Use
     * ``-1`` to specify all protocols. When authorizing security group rules, specifying ``-1`` or a protocol number other
     * than ``tcp``, ``udp``, ``icmp``, or ``icmpv6`` allows traffic on all ports, regardless of any port range you specify.
     * For ``tcp``, ``udp``, and ``icmp``, you must specify a port range. For ``icmpv6``, the port range is optional; if you
     * omit the port range, traffic for all types and codes is allowed.
     */
    ipProtocol: pulumi.Input<string>;
    /**
     * If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP
     * code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).
     */
    toPort?: pulumi.Input<number>;
}
