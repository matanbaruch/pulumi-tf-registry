// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLambdaPermission(args: GetLambdaPermissionArgs, opts?: pulumi.InvokeOptions): Promise<GetLambdaPermissionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getLambdaPermission:getLambdaPermission", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLambdaPermission.
 */
export interface GetLambdaPermissionArgs {
    id: string;
}

/**
 * A collection of values returned by getLambdaPermission.
 */
export interface GetLambdaPermissionResult {
    readonly action: string;
    readonly eventSourceToken: string;
    readonly functionName: string;
    readonly functionUrlAuthType: string;
    readonly id: string;
    readonly permissionId: string;
    readonly principal: string;
    readonly principalOrgId: string;
    readonly sourceAccount: string;
    readonly sourceArn: string;
}
export function getLambdaPermissionOutput(args: GetLambdaPermissionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLambdaPermissionResult> {
    return pulumi.output(args).apply((a: any) => getLambdaPermission(a, opts))
}

/**
 * A collection of arguments for invoking getLambdaPermission.
 */
export interface GetLambdaPermissionOutputArgs {
    id: pulumi.Input<string>;
}
