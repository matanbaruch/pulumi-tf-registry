// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CodeconnectionsConnection extends pulumi.CustomResource {
    /**
     * Get an existing CodeconnectionsConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodeconnectionsConnectionState, opts?: pulumi.CustomResourceOptions): CodeconnectionsConnection {
        return new CodeconnectionsConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/codeconnectionsConnection:CodeconnectionsConnection';

    /**
     * Returns true if the given object is an instance of CodeconnectionsConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CodeconnectionsConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodeconnectionsConnection.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the connection. The ARN is used as the connection reference when the connection is
     * shared between AWS services.
     */
    public /*out*/ readonly connectionArn!: pulumi.Output<string>;
    /**
     * The name of the connection. Connection names must be unique in an AWS user account.
     */
    public readonly connectionName!: pulumi.Output<string>;
    /**
     * The current status of the connection.
     */
    public /*out*/ readonly connectionStatus!: pulumi.Output<string>;
    /**
     * The host arn configured to represent the infrastructure where your third-party provider is installed. You must specify
     * either a ProviderType or a HostArn.
     */
    public readonly hostArn!: pulumi.Output<string>;
    /**
     * The name of the external provider where your third-party code repository is configured. For Bitbucket, this is the
     * account ID of the owner of the Bitbucket repository.
     */
    public /*out*/ readonly ownerAccountId!: pulumi.Output<string>;
    /**
     * The name of the external provider where your third-party code repository is configured. You must specify either a
     * ProviderType or a HostArn.
     */
    public readonly providerType!: pulumi.Output<string>;
    /**
     * Specifies the tags applied to a connection.
     */
    public readonly tags!: pulumi.Output<outputs.CodeconnectionsConnectionTag[]>;

    /**
     * Create a CodeconnectionsConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodeconnectionsConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodeconnectionsConnectionArgs | CodeconnectionsConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodeconnectionsConnectionState | undefined;
            resourceInputs["connectionArn"] = state ? state.connectionArn : undefined;
            resourceInputs["connectionName"] = state ? state.connectionName : undefined;
            resourceInputs["connectionStatus"] = state ? state.connectionStatus : undefined;
            resourceInputs["hostArn"] = state ? state.hostArn : undefined;
            resourceInputs["ownerAccountId"] = state ? state.ownerAccountId : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CodeconnectionsConnectionArgs | undefined;
            if ((!args || args.connectionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionName'");
            }
            resourceInputs["connectionName"] = args ? args.connectionName : undefined;
            resourceInputs["hostArn"] = args ? args.hostArn : undefined;
            resourceInputs["providerType"] = args ? args.providerType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["connectionArn"] = undefined /*out*/;
            resourceInputs["connectionStatus"] = undefined /*out*/;
            resourceInputs["ownerAccountId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodeconnectionsConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CodeconnectionsConnection resources.
 */
export interface CodeconnectionsConnectionState {
    /**
     * The Amazon Resource Name (ARN) of the connection. The ARN is used as the connection reference when the connection is
     * shared between AWS services.
     */
    connectionArn?: pulumi.Input<string>;
    /**
     * The name of the connection. Connection names must be unique in an AWS user account.
     */
    connectionName?: pulumi.Input<string>;
    /**
     * The current status of the connection.
     */
    connectionStatus?: pulumi.Input<string>;
    /**
     * The host arn configured to represent the infrastructure where your third-party provider is installed. You must specify
     * either a ProviderType or a HostArn.
     */
    hostArn?: pulumi.Input<string>;
    /**
     * The name of the external provider where your third-party code repository is configured. For Bitbucket, this is the
     * account ID of the owner of the Bitbucket repository.
     */
    ownerAccountId?: pulumi.Input<string>;
    /**
     * The name of the external provider where your third-party code repository is configured. You must specify either a
     * ProviderType or a HostArn.
     */
    providerType?: pulumi.Input<string>;
    /**
     * Specifies the tags applied to a connection.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CodeconnectionsConnectionTag>[]>;
}

/**
 * The set of arguments for constructing a CodeconnectionsConnection resource.
 */
export interface CodeconnectionsConnectionArgs {
    /**
     * The name of the connection. Connection names must be unique in an AWS user account.
     */
    connectionName: pulumi.Input<string>;
    /**
     * The host arn configured to represent the infrastructure where your third-party provider is installed. You must specify
     * either a ProviderType or a HostArn.
     */
    hostArn?: pulumi.Input<string>;
    /**
     * The name of the external provider where your third-party code repository is configured. You must specify either a
     * ProviderType or a HostArn.
     */
    providerType?: pulumi.Input<string>;
    /**
     * Specifies the tags applied to a connection.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CodeconnectionsConnectionTag>[]>;
}
