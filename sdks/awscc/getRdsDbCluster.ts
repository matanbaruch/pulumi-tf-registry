// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRdsDbCluster(args: GetRdsDbClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetRdsDbClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getRdsDbCluster:getRdsDbCluster", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRdsDbCluster.
 */
export interface GetRdsDbClusterArgs {
    id: string;
}

/**
 * A collection of values returned by getRdsDbCluster.
 */
export interface GetRdsDbClusterResult {
    readonly allocatedStorage: number;
    readonly associatedRoles: outputs.GetRdsDbClusterAssociatedRole[];
    readonly autoMinorVersionUpgrade: boolean;
    readonly availabilityZones: string[];
    readonly backtrackWindow: number;
    readonly backupRetentionPeriod: number;
    readonly copyTagsToSnapshot: boolean;
    readonly databaseName: string;
    readonly dbClusterArn: string;
    readonly dbClusterIdentifier: string;
    readonly dbClusterInstanceClass: string;
    readonly dbClusterParameterGroupName: string;
    readonly dbClusterResourceId: string;
    readonly dbInstanceParameterGroupName: string;
    readonly dbSubnetGroupName: string;
    readonly dbSystemId: string;
    readonly deletionProtection: boolean;
    readonly domain: string;
    readonly domainIamRoleName: string;
    readonly enableCloudwatchLogsExports: string[];
    readonly enableGlobalWriteForwarding: boolean;
    readonly enableHttpEndpoint: boolean;
    readonly enableIamDatabaseAuthentication: boolean;
    readonly enableLocalWriteForwarding: boolean;
    readonly endpoint: outputs.GetRdsDbClusterEndpoint;
    readonly engine: string;
    readonly engineLifecycleSupport: string;
    readonly engineMode: string;
    readonly engineVersion: string;
    readonly globalClusterIdentifier: string;
    readonly id: string;
    readonly iops: number;
    readonly kmsKeyId: string;
    readonly manageMasterUserPassword: boolean;
    readonly masterUserPassword: string;
    readonly masterUserSecret: outputs.GetRdsDbClusterMasterUserSecret;
    readonly masterUsername: string;
    readonly monitoringInterval: number;
    readonly monitoringRoleArn: string;
    readonly networkType: string;
    readonly performanceInsightsEnabled: boolean;
    readonly performanceInsightsKmsKeyId: string;
    readonly performanceInsightsRetentionPeriod: number;
    readonly port: number;
    readonly preferredBackupWindow: string;
    readonly preferredMaintenanceWindow: string;
    readonly publiclyAccessible: boolean;
    readonly readEndpoint: outputs.GetRdsDbClusterReadEndpoint;
    readonly replicationSourceIdentifier: string;
    readonly restoreToTime: string;
    readonly restoreType: string;
    readonly scalingConfiguration: outputs.GetRdsDbClusterScalingConfiguration;
    readonly serverlessV2ScalingConfiguration: outputs.GetRdsDbClusterServerlessV2ScalingConfiguration;
    readonly snapshotIdentifier: string;
    readonly sourceDbClusterIdentifier: string;
    readonly sourceRegion: string;
    readonly storageEncrypted: boolean;
    readonly storageThroughput: number;
    readonly storageType: string;
    readonly tags: outputs.GetRdsDbClusterTag[];
    readonly useLatestRestorableTime: boolean;
    readonly vpcSecurityGroupIds: string[];
}
export function getRdsDbClusterOutput(args: GetRdsDbClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRdsDbClusterResult> {
    return pulumi.output(args).apply((a: any) => getRdsDbCluster(a, opts))
}

/**
 * A collection of arguments for invoking getRdsDbCluster.
 */
export interface GetRdsDbClusterOutputArgs {
    id: pulumi.Input<string>;
}
