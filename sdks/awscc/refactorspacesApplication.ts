// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RefactorspacesApplication extends pulumi.CustomResource {
    /**
     * Get an existing RefactorspacesApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RefactorspacesApplicationState, opts?: pulumi.CustomResourceOptions): RefactorspacesApplication {
        return new RefactorspacesApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/refactorspacesApplication:RefactorspacesApplication';

    /**
     * Returns true if the given object is an instance of RefactorspacesApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RefactorspacesApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RefactorspacesApplication.__pulumiType;
    }

    public /*out*/ readonly apiGatewayId!: pulumi.Output<string>;
    public readonly apiGatewayProxy!: pulumi.Output<outputs.RefactorspacesApplicationApiGatewayProxy>;
    public /*out*/ readonly applicationIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly environmentIdentifier!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly nlbArn!: pulumi.Output<string>;
    public /*out*/ readonly nlbName!: pulumi.Output<string>;
    public readonly proxyType!: pulumi.Output<string>;
    public /*out*/ readonly proxyUrl!: pulumi.Output<string>;
    public /*out*/ readonly stageName!: pulumi.Output<string>;
    /**
     * Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     */
    public readonly tags!: pulumi.Output<outputs.RefactorspacesApplicationTag[]>;
    public readonly vpcId!: pulumi.Output<string>;
    public /*out*/ readonly vpcLinkId!: pulumi.Output<string>;

    /**
     * Create a RefactorspacesApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RefactorspacesApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RefactorspacesApplicationArgs | RefactorspacesApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RefactorspacesApplicationState | undefined;
            resourceInputs["apiGatewayId"] = state ? state.apiGatewayId : undefined;
            resourceInputs["apiGatewayProxy"] = state ? state.apiGatewayProxy : undefined;
            resourceInputs["applicationIdentifier"] = state ? state.applicationIdentifier : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["environmentIdentifier"] = state ? state.environmentIdentifier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nlbArn"] = state ? state.nlbArn : undefined;
            resourceInputs["nlbName"] = state ? state.nlbName : undefined;
            resourceInputs["proxyType"] = state ? state.proxyType : undefined;
            resourceInputs["proxyUrl"] = state ? state.proxyUrl : undefined;
            resourceInputs["stageName"] = state ? state.stageName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpcLinkId"] = state ? state.vpcLinkId : undefined;
        } else {
            const args = argsOrState as RefactorspacesApplicationArgs | undefined;
            if ((!args || args.environmentIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentIdentifier'");
            }
            if ((!args || args.proxyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proxyType'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["apiGatewayProxy"] = args ? args.apiGatewayProxy : undefined;
            resourceInputs["environmentIdentifier"] = args ? args.environmentIdentifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["proxyType"] = args ? args.proxyType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["apiGatewayId"] = undefined /*out*/;
            resourceInputs["applicationIdentifier"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["nlbArn"] = undefined /*out*/;
            resourceInputs["nlbName"] = undefined /*out*/;
            resourceInputs["proxyUrl"] = undefined /*out*/;
            resourceInputs["stageName"] = undefined /*out*/;
            resourceInputs["vpcLinkId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RefactorspacesApplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RefactorspacesApplication resources.
 */
export interface RefactorspacesApplicationState {
    apiGatewayId?: pulumi.Input<string>;
    apiGatewayProxy?: pulumi.Input<inputs.RefactorspacesApplicationApiGatewayProxy>;
    applicationIdentifier?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    environmentIdentifier?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nlbArn?: pulumi.Input<string>;
    nlbName?: pulumi.Input<string>;
    proxyType?: pulumi.Input<string>;
    proxyUrl?: pulumi.Input<string>;
    stageName?: pulumi.Input<string>;
    /**
     * Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RefactorspacesApplicationTag>[]>;
    vpcId?: pulumi.Input<string>;
    vpcLinkId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RefactorspacesApplication resource.
 */
export interface RefactorspacesApplicationArgs {
    apiGatewayProxy?: pulumi.Input<inputs.RefactorspacesApplicationApiGatewayProxy>;
    environmentIdentifier: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    proxyType: pulumi.Input<string>;
    /**
     * Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RefactorspacesApplicationTag>[]>;
    vpcId: pulumi.Input<string>;
}
