// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class QuicksightDataSet extends pulumi.CustomResource {
    /**
     * Get an existing QuicksightDataSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuicksightDataSetState, opts?: pulumi.CustomResourceOptions): QuicksightDataSet {
        return new QuicksightDataSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/quicksightDataSet:QuicksightDataSet';

    /**
     * Returns true if the given object is an instance of QuicksightDataSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QuicksightDataSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QuicksightDataSet.__pulumiType;
    }

    /**
     * <p>The Amazon Resource Name (ARN) of the resource.</p>
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly awsAccountId!: pulumi.Output<string>;
    /**
     * <p>Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is
     * supported.</p>
     */
    public readonly columnGroups!: pulumi.Output<outputs.QuicksightDataSetColumnGroup[]>;
    public readonly columnLevelPermissionRules!: pulumi.Output<outputs.QuicksightDataSetColumnLevelPermissionRule[]>;
    /**
     * <p>The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn't imported into SPICE.</p>
     */
    public /*out*/ readonly consumedSpiceCapacityInBytes!: pulumi.Output<number>;
    /**
     * <p>The time that this dataset was created.</p>
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    public readonly dataSetId!: pulumi.Output<string>;
    /**
     * <p>The dataset usage configuration for the dataset.</p>
     */
    public readonly dataSetUsageConfiguration!: pulumi.Output<outputs.QuicksightDataSetDataSetUsageConfiguration>;
    public readonly fieldFolders!: pulumi.Output<{[key: string]: outputs.QuicksightDataSetFieldFolders}>;
    public readonly importMode!: pulumi.Output<string>;
    /**
     * <p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of
     * 36 hours.</p>
     */
    public readonly ingestionWaitPolicy!: pulumi.Output<outputs.QuicksightDataSetIngestionWaitPolicy>;
    /**
     * <p>The last time that this dataset was updated.</p>
     */
    public /*out*/ readonly lastUpdatedTime!: pulumi.Output<string>;
    public readonly logicalTableMap!: pulumi.Output<{[key: string]: outputs.QuicksightDataSetLogicalTableMap}>;
    /**
     * <p>The display name for the dataset.</p>
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * <p>The list of columns after all transforms. These columns are available in templates, analyses, and dashboards.</p>
     */
    public /*out*/ readonly outputColumns!: pulumi.Output<outputs.QuicksightDataSetOutputColumn[]>;
    /**
     * <p>A list of resource permissions on the dataset.</p>
     */
    public readonly permissions!: pulumi.Output<outputs.QuicksightDataSetPermission[]>;
    public readonly physicalTableMap!: pulumi.Output<{[key: string]: outputs.QuicksightDataSetPhysicalTableMap}>;
    /**
     * <p>The row-level security configuration for the dataset.</p>
     */
    public readonly rowLevelPermissionDataSet!: pulumi.Output<outputs.QuicksightDataSetRowLevelPermissionDataSet>;
    /**
     * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
     */
    public readonly tags!: pulumi.Output<outputs.QuicksightDataSetTag[]>;

    /**
     * Create a QuicksightDataSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: QuicksightDataSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuicksightDataSetArgs | QuicksightDataSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuicksightDataSetState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["columnGroups"] = state ? state.columnGroups : undefined;
            resourceInputs["columnLevelPermissionRules"] = state ? state.columnLevelPermissionRules : undefined;
            resourceInputs["consumedSpiceCapacityInBytes"] = state ? state.consumedSpiceCapacityInBytes : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["dataSetId"] = state ? state.dataSetId : undefined;
            resourceInputs["dataSetUsageConfiguration"] = state ? state.dataSetUsageConfiguration : undefined;
            resourceInputs["fieldFolders"] = state ? state.fieldFolders : undefined;
            resourceInputs["importMode"] = state ? state.importMode : undefined;
            resourceInputs["ingestionWaitPolicy"] = state ? state.ingestionWaitPolicy : undefined;
            resourceInputs["lastUpdatedTime"] = state ? state.lastUpdatedTime : undefined;
            resourceInputs["logicalTableMap"] = state ? state.logicalTableMap : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputColumns"] = state ? state.outputColumns : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["physicalTableMap"] = state ? state.physicalTableMap : undefined;
            resourceInputs["rowLevelPermissionDataSet"] = state ? state.rowLevelPermissionDataSet : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as QuicksightDataSetArgs | undefined;
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["columnGroups"] = args ? args.columnGroups : undefined;
            resourceInputs["columnLevelPermissionRules"] = args ? args.columnLevelPermissionRules : undefined;
            resourceInputs["dataSetId"] = args ? args.dataSetId : undefined;
            resourceInputs["dataSetUsageConfiguration"] = args ? args.dataSetUsageConfiguration : undefined;
            resourceInputs["fieldFolders"] = args ? args.fieldFolders : undefined;
            resourceInputs["importMode"] = args ? args.importMode : undefined;
            resourceInputs["ingestionWaitPolicy"] = args ? args.ingestionWaitPolicy : undefined;
            resourceInputs["logicalTableMap"] = args ? args.logicalTableMap : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["physicalTableMap"] = args ? args.physicalTableMap : undefined;
            resourceInputs["rowLevelPermissionDataSet"] = args ? args.rowLevelPermissionDataSet : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["consumedSpiceCapacityInBytes"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["outputColumns"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QuicksightDataSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering QuicksightDataSet resources.
 */
export interface QuicksightDataSetState {
    /**
     * <p>The Amazon Resource Name (ARN) of the resource.</p>
     */
    arn?: pulumi.Input<string>;
    awsAccountId?: pulumi.Input<string>;
    /**
     * <p>Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is
     * supported.</p>
     */
    columnGroups?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetColumnGroup>[]>;
    columnLevelPermissionRules?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetColumnLevelPermissionRule>[]>;
    /**
     * <p>The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn't imported into SPICE.</p>
     */
    consumedSpiceCapacityInBytes?: pulumi.Input<number>;
    /**
     * <p>The time that this dataset was created.</p>
     */
    createdTime?: pulumi.Input<string>;
    dataSetId?: pulumi.Input<string>;
    /**
     * <p>The dataset usage configuration for the dataset.</p>
     */
    dataSetUsageConfiguration?: pulumi.Input<inputs.QuicksightDataSetDataSetUsageConfiguration>;
    fieldFolders?: pulumi.Input<{[key: string]: pulumi.Input<inputs.QuicksightDataSetFieldFolders>}>;
    importMode?: pulumi.Input<string>;
    /**
     * <p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of
     * 36 hours.</p>
     */
    ingestionWaitPolicy?: pulumi.Input<inputs.QuicksightDataSetIngestionWaitPolicy>;
    /**
     * <p>The last time that this dataset was updated.</p>
     */
    lastUpdatedTime?: pulumi.Input<string>;
    logicalTableMap?: pulumi.Input<{[key: string]: pulumi.Input<inputs.QuicksightDataSetLogicalTableMap>}>;
    /**
     * <p>The display name for the dataset.</p>
     */
    name?: pulumi.Input<string>;
    /**
     * <p>The list of columns after all transforms. These columns are available in templates, analyses, and dashboards.</p>
     */
    outputColumns?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetOutputColumn>[]>;
    /**
     * <p>A list of resource permissions on the dataset.</p>
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetPermission>[]>;
    physicalTableMap?: pulumi.Input<{[key: string]: pulumi.Input<inputs.QuicksightDataSetPhysicalTableMap>}>;
    /**
     * <p>The row-level security configuration for the dataset.</p>
     */
    rowLevelPermissionDataSet?: pulumi.Input<inputs.QuicksightDataSetRowLevelPermissionDataSet>;
    /**
     * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
     */
    tags?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetTag>[]>;
}

/**
 * The set of arguments for constructing a QuicksightDataSet resource.
 */
export interface QuicksightDataSetArgs {
    awsAccountId?: pulumi.Input<string>;
    /**
     * <p>Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is
     * supported.</p>
     */
    columnGroups?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetColumnGroup>[]>;
    columnLevelPermissionRules?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetColumnLevelPermissionRule>[]>;
    dataSetId?: pulumi.Input<string>;
    /**
     * <p>The dataset usage configuration for the dataset.</p>
     */
    dataSetUsageConfiguration?: pulumi.Input<inputs.QuicksightDataSetDataSetUsageConfiguration>;
    fieldFolders?: pulumi.Input<{[key: string]: pulumi.Input<inputs.QuicksightDataSetFieldFolders>}>;
    importMode?: pulumi.Input<string>;
    /**
     * <p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of
     * 36 hours.</p>
     */
    ingestionWaitPolicy?: pulumi.Input<inputs.QuicksightDataSetIngestionWaitPolicy>;
    logicalTableMap?: pulumi.Input<{[key: string]: pulumi.Input<inputs.QuicksightDataSetLogicalTableMap>}>;
    /**
     * <p>The display name for the dataset.</p>
     */
    name?: pulumi.Input<string>;
    /**
     * <p>A list of resource permissions on the dataset.</p>
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetPermission>[]>;
    physicalTableMap?: pulumi.Input<{[key: string]: pulumi.Input<inputs.QuicksightDataSetPhysicalTableMap>}>;
    /**
     * <p>The row-level security configuration for the dataset.</p>
     */
    rowLevelPermissionDataSet?: pulumi.Input<inputs.QuicksightDataSetRowLevelPermissionDataSet>;
    /**
     * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
     */
    tags?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetTag>[]>;
}
