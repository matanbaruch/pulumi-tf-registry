// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CleanroomsIdMappingTable extends pulumi.CustomResource {
    /**
     * Get an existing CleanroomsIdMappingTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CleanroomsIdMappingTableState, opts?: pulumi.CustomResourceOptions): CleanroomsIdMappingTable {
        return new CleanroomsIdMappingTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/cleanroomsIdMappingTable:CleanroomsIdMappingTable';

    /**
     * Returns true if the given object is an instance of CleanroomsIdMappingTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CleanroomsIdMappingTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CleanroomsIdMappingTable.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly collaborationArn!: pulumi.Output<string>;
    public /*out*/ readonly collaborationIdentifier!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly idMappingTableIdentifier!: pulumi.Output<string>;
    public readonly inputReferenceConfig!: pulumi.Output<outputs.CleanroomsIdMappingTableInputReferenceConfig>;
    public /*out*/ readonly inputReferenceProperties!: pulumi.Output<outputs.CleanroomsIdMappingTableInputReferenceProperties>;
    public readonly kmsKeyArn!: pulumi.Output<string>;
    public /*out*/ readonly membershipArn!: pulumi.Output<string>;
    public readonly membershipIdentifier!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.CleanroomsIdMappingTableTag[]>;

    /**
     * Create a CleanroomsIdMappingTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CleanroomsIdMappingTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CleanroomsIdMappingTableArgs | CleanroomsIdMappingTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CleanroomsIdMappingTableState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["collaborationArn"] = state ? state.collaborationArn : undefined;
            resourceInputs["collaborationIdentifier"] = state ? state.collaborationIdentifier : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["idMappingTableIdentifier"] = state ? state.idMappingTableIdentifier : undefined;
            resourceInputs["inputReferenceConfig"] = state ? state.inputReferenceConfig : undefined;
            resourceInputs["inputReferenceProperties"] = state ? state.inputReferenceProperties : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["membershipArn"] = state ? state.membershipArn : undefined;
            resourceInputs["membershipIdentifier"] = state ? state.membershipIdentifier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CleanroomsIdMappingTableArgs | undefined;
            if ((!args || args.inputReferenceConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputReferenceConfig'");
            }
            if ((!args || args.membershipIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'membershipIdentifier'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inputReferenceConfig"] = args ? args.inputReferenceConfig : undefined;
            resourceInputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            resourceInputs["membershipIdentifier"] = args ? args.membershipIdentifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["collaborationArn"] = undefined /*out*/;
            resourceInputs["collaborationIdentifier"] = undefined /*out*/;
            resourceInputs["idMappingTableIdentifier"] = undefined /*out*/;
            resourceInputs["inputReferenceProperties"] = undefined /*out*/;
            resourceInputs["membershipArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CleanroomsIdMappingTable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CleanroomsIdMappingTable resources.
 */
export interface CleanroomsIdMappingTableState {
    arn?: pulumi.Input<string>;
    collaborationArn?: pulumi.Input<string>;
    collaborationIdentifier?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    idMappingTableIdentifier?: pulumi.Input<string>;
    inputReferenceConfig?: pulumi.Input<inputs.CleanroomsIdMappingTableInputReferenceConfig>;
    inputReferenceProperties?: pulumi.Input<inputs.CleanroomsIdMappingTableInputReferenceProperties>;
    kmsKeyArn?: pulumi.Input<string>;
    membershipArn?: pulumi.Input<string>;
    membershipIdentifier?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.CleanroomsIdMappingTableTag>[]>;
}

/**
 * The set of arguments for constructing a CleanroomsIdMappingTable resource.
 */
export interface CleanroomsIdMappingTableArgs {
    description?: pulumi.Input<string>;
    inputReferenceConfig: pulumi.Input<inputs.CleanroomsIdMappingTableInputReferenceConfig>;
    kmsKeyArn?: pulumi.Input<string>;
    membershipIdentifier: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.CleanroomsIdMappingTableTag>[]>;
}
