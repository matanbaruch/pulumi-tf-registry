// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2Ipam extends pulumi.CustomResource {
    /**
     * Get an existing Ec2Ipam resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2IpamState, opts?: pulumi.CustomResourceOptions): Ec2Ipam {
        return new Ec2Ipam(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2Ipam:Ec2Ipam';

    /**
     * Returns true if the given object is an instance of Ec2Ipam.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2Ipam {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2Ipam.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the IPAM.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The Id of the default association to the default resource discovery, created with this IPAM.
     */
    public /*out*/ readonly defaultResourceDiscoveryAssociationId!: pulumi.Output<string>;
    /**
     * The Id of the default resource discovery, created with this IPAM.
     */
    public /*out*/ readonly defaultResourceDiscoveryId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    /**
     * Enable provisioning of GUA space in private pools.
     */
    public readonly enablePrivateGua!: pulumi.Output<boolean>;
    /**
     * Id of the IPAM.
     */
    public /*out*/ readonly ipamId!: pulumi.Output<string>;
    /**
     * The regions IPAM is enabled for. Allows pools to be created in these regions, as well as enabling monitoring
     */
    public readonly operatingRegions!: pulumi.Output<outputs.Ec2IpamOperatingRegion[]>;
    /**
     * The Id of the default scope for publicly routable IP space, created with this IPAM.
     */
    public /*out*/ readonly privateDefaultScopeId!: pulumi.Output<string>;
    /**
     * The Id of the default scope for publicly routable IP space, created with this IPAM.
     */
    public /*out*/ readonly publicDefaultScopeId!: pulumi.Output<string>;
    /**
     * The count of resource discoveries associated with this IPAM.
     */
    public /*out*/ readonly resourceDiscoveryAssociationCount!: pulumi.Output<number>;
    /**
     * The number of scopes that currently exist in this IPAM.
     */
    public /*out*/ readonly scopeCount!: pulumi.Output<number>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2IpamTag[]>;
    /**
     * The tier of the IPAM.
     */
    public readonly tier!: pulumi.Output<string>;

    /**
     * Create a Ec2Ipam resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Ec2IpamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2IpamArgs | Ec2IpamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2IpamState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["defaultResourceDiscoveryAssociationId"] = state ? state.defaultResourceDiscoveryAssociationId : undefined;
            resourceInputs["defaultResourceDiscoveryId"] = state ? state.defaultResourceDiscoveryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enablePrivateGua"] = state ? state.enablePrivateGua : undefined;
            resourceInputs["ipamId"] = state ? state.ipamId : undefined;
            resourceInputs["operatingRegions"] = state ? state.operatingRegions : undefined;
            resourceInputs["privateDefaultScopeId"] = state ? state.privateDefaultScopeId : undefined;
            resourceInputs["publicDefaultScopeId"] = state ? state.publicDefaultScopeId : undefined;
            resourceInputs["resourceDiscoveryAssociationCount"] = state ? state.resourceDiscoveryAssociationCount : undefined;
            resourceInputs["scopeCount"] = state ? state.scopeCount : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
        } else {
            const args = argsOrState as Ec2IpamArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enablePrivateGua"] = args ? args.enablePrivateGua : undefined;
            resourceInputs["operatingRegions"] = args ? args.operatingRegions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["defaultResourceDiscoveryAssociationId"] = undefined /*out*/;
            resourceInputs["defaultResourceDiscoveryId"] = undefined /*out*/;
            resourceInputs["ipamId"] = undefined /*out*/;
            resourceInputs["privateDefaultScopeId"] = undefined /*out*/;
            resourceInputs["publicDefaultScopeId"] = undefined /*out*/;
            resourceInputs["resourceDiscoveryAssociationCount"] = undefined /*out*/;
            resourceInputs["scopeCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2Ipam.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2Ipam resources.
 */
export interface Ec2IpamState {
    /**
     * The Amazon Resource Name (ARN) of the IPAM.
     */
    arn?: pulumi.Input<string>;
    /**
     * The Id of the default association to the default resource discovery, created with this IPAM.
     */
    defaultResourceDiscoveryAssociationId?: pulumi.Input<string>;
    /**
     * The Id of the default resource discovery, created with this IPAM.
     */
    defaultResourceDiscoveryId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Enable provisioning of GUA space in private pools.
     */
    enablePrivateGua?: pulumi.Input<boolean>;
    /**
     * Id of the IPAM.
     */
    ipamId?: pulumi.Input<string>;
    /**
     * The regions IPAM is enabled for. Allows pools to be created in these regions, as well as enabling monitoring
     */
    operatingRegions?: pulumi.Input<pulumi.Input<inputs.Ec2IpamOperatingRegion>[]>;
    /**
     * The Id of the default scope for publicly routable IP space, created with this IPAM.
     */
    privateDefaultScopeId?: pulumi.Input<string>;
    /**
     * The Id of the default scope for publicly routable IP space, created with this IPAM.
     */
    publicDefaultScopeId?: pulumi.Input<string>;
    /**
     * The count of resource discoveries associated with this IPAM.
     */
    resourceDiscoveryAssociationCount?: pulumi.Input<number>;
    /**
     * The number of scopes that currently exist in this IPAM.
     */
    scopeCount?: pulumi.Input<number>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2IpamTag>[]>;
    /**
     * The tier of the IPAM.
     */
    tier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2Ipam resource.
 */
export interface Ec2IpamArgs {
    description?: pulumi.Input<string>;
    /**
     * Enable provisioning of GUA space in private pools.
     */
    enablePrivateGua?: pulumi.Input<boolean>;
    /**
     * The regions IPAM is enabled for. Allows pools to be created in these regions, as well as enabling monitoring
     */
    operatingRegions?: pulumi.Input<pulumi.Input<inputs.Ec2IpamOperatingRegion>[]>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2IpamTag>[]>;
    /**
     * The tier of the IPAM.
     */
    tier?: pulumi.Input<string>;
}
