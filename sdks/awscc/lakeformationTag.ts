// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LakeformationTag extends pulumi.CustomResource {
    /**
     * Get an existing LakeformationTag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LakeformationTagState, opts?: pulumi.CustomResourceOptions): LakeformationTag {
        return new LakeformationTag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lakeformationTag:LakeformationTag';

    /**
     * Returns true if the given object is an instance of LakeformationTag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LakeformationTag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LakeformationTag.__pulumiType;
    }

    /**
     * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It
     * contains database definitions, table definitions, and other control information to manage your Lake Formation
     * environment.
     */
    public readonly catalogId!: pulumi.Output<string>;
    /**
     * The key-name for the LF-tag.
     */
    public readonly tagKey!: pulumi.Output<string>;
    /**
     * A list of possible values an attribute can take.
     */
    public readonly tagValues!: pulumi.Output<string[]>;

    /**
     * Create a LakeformationTag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LakeformationTagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LakeformationTagArgs | LakeformationTagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LakeformationTagState | undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["tagKey"] = state ? state.tagKey : undefined;
            resourceInputs["tagValues"] = state ? state.tagValues : undefined;
        } else {
            const args = argsOrState as LakeformationTagArgs | undefined;
            if ((!args || args.tagKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tagKey'");
            }
            if ((!args || args.tagValues === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tagValues'");
            }
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["tagKey"] = args ? args.tagKey : undefined;
            resourceInputs["tagValues"] = args ? args.tagValues : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LakeformationTag.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LakeformationTag resources.
 */
export interface LakeformationTagState {
    /**
     * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It
     * contains database definitions, table definitions, and other control information to manage your Lake Formation
     * environment.
     */
    catalogId?: pulumi.Input<string>;
    /**
     * The key-name for the LF-tag.
     */
    tagKey?: pulumi.Input<string>;
    /**
     * A list of possible values an attribute can take.
     */
    tagValues?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LakeformationTag resource.
 */
export interface LakeformationTagArgs {
    /**
     * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It
     * contains database definitions, table definitions, and other control information to manage your Lake Formation
     * environment.
     */
    catalogId?: pulumi.Input<string>;
    /**
     * The key-name for the LF-tag.
     */
    tagKey: pulumi.Input<string>;
    /**
     * A list of possible values an attribute can take.
     */
    tagValues: pulumi.Input<pulumi.Input<string>[]>;
}
