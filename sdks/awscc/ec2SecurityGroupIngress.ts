// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ec2SecurityGroupIngress extends pulumi.CustomResource {
    /**
     * Get an existing Ec2SecurityGroupIngress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2SecurityGroupIngressState, opts?: pulumi.CustomResourceOptions): Ec2SecurityGroupIngress {
        return new Ec2SecurityGroupIngress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2SecurityGroupIngress:Ec2SecurityGroupIngress';

    /**
     * Returns true if the given object is an instance of Ec2SecurityGroupIngress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2SecurityGroupIngress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2SecurityGroupIngress.__pulumiType;
    }

    /**
     * The IPv4 ranges
     */
    public readonly cidrIp!: pulumi.Output<string>;
    /**
     * [VPC only] The IPv6 ranges
     */
    public readonly cidrIpv6!: pulumi.Output<string>;
    /**
     * Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a
     * description to a rule that did not have one previously
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all
     * ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes. Use this for ICMP and any protocol
     * that uses ports.
     */
    public readonly fromPort!: pulumi.Output<number>;
    /**
     * The ID of the security group. You must specify either the security group ID or the security group name in the request.
     * For security groups in a nondefault VPC, you must specify the security group ID. You must specify the GroupName property
     * or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * The name of the security group.
     */
    public readonly groupName!: pulumi.Output<string>;
    /**
     * The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers). [VPC only] Use -1 to specify all
     * protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or
     * icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a
     * port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is
     * allowed.
     */
    public readonly ipProtocol!: pulumi.Output<string>;
    /**
     * The Security Group Rule Id
     */
    public /*out*/ readonly securityGroupIngressId!: pulumi.Output<string>;
    /**
     * [EC2-VPC only] The ID of a prefix list.
     */
    public readonly sourcePrefixListId!: pulumi.Output<string>;
    /**
     * The ID of the security group. You must specify either the security group ID or the security group name. For security
     * groups in a nondefault VPC, you must specify the security group ID.
     */
    public readonly sourceSecurityGroupId!: pulumi.Output<string>;
    /**
     * [EC2-Classic, default VPC] The name of the source security group. You must specify the GroupName property or the GroupId
     * property. For security groups that are in a VPC, you must use the GroupId property.
     */
    public readonly sourceSecurityGroupName!: pulumi.Output<string>;
    /**
     * [nondefault VPC] The AWS account ID that owns the source security group. You can't specify this property with an IP
     * address range. If you specify SourceSecurityGroupName or SourceSecurityGroupId and that security group is owned by a
     * different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this
     * property is optional.
     */
    public readonly sourceSecurityGroupOwnerId!: pulumi.Output<string>;
    /**
     * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6
     * codes for the specified ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all codes. Use this for ICMP
     * and any protocol that uses ports.
     */
    public readonly toPort!: pulumi.Output<number>;

    /**
     * Create a Ec2SecurityGroupIngress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2SecurityGroupIngressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2SecurityGroupIngressArgs | Ec2SecurityGroupIngressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2SecurityGroupIngressState | undefined;
            resourceInputs["cidrIp"] = state ? state.cidrIp : undefined;
            resourceInputs["cidrIpv6"] = state ? state.cidrIpv6 : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fromPort"] = state ? state.fromPort : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["securityGroupIngressId"] = state ? state.securityGroupIngressId : undefined;
            resourceInputs["sourcePrefixListId"] = state ? state.sourcePrefixListId : undefined;
            resourceInputs["sourceSecurityGroupId"] = state ? state.sourceSecurityGroupId : undefined;
            resourceInputs["sourceSecurityGroupName"] = state ? state.sourceSecurityGroupName : undefined;
            resourceInputs["sourceSecurityGroupOwnerId"] = state ? state.sourceSecurityGroupOwnerId : undefined;
            resourceInputs["toPort"] = state ? state.toPort : undefined;
        } else {
            const args = argsOrState as Ec2SecurityGroupIngressArgs | undefined;
            if ((!args || args.ipProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipProtocol'");
            }
            resourceInputs["cidrIp"] = args ? args.cidrIp : undefined;
            resourceInputs["cidrIpv6"] = args ? args.cidrIpv6 : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fromPort"] = args ? args.fromPort : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["sourcePrefixListId"] = args ? args.sourcePrefixListId : undefined;
            resourceInputs["sourceSecurityGroupId"] = args ? args.sourceSecurityGroupId : undefined;
            resourceInputs["sourceSecurityGroupName"] = args ? args.sourceSecurityGroupName : undefined;
            resourceInputs["sourceSecurityGroupOwnerId"] = args ? args.sourceSecurityGroupOwnerId : undefined;
            resourceInputs["toPort"] = args ? args.toPort : undefined;
            resourceInputs["securityGroupIngressId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2SecurityGroupIngress.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2SecurityGroupIngress resources.
 */
export interface Ec2SecurityGroupIngressState {
    /**
     * The IPv4 ranges
     */
    cidrIp?: pulumi.Input<string>;
    /**
     * [VPC only] The IPv6 ranges
     */
    cidrIpv6?: pulumi.Input<string>;
    /**
     * Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a
     * description to a rule that did not have one previously
     */
    description?: pulumi.Input<string>;
    /**
     * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all
     * ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes. Use this for ICMP and any protocol
     * that uses ports.
     */
    fromPort?: pulumi.Input<number>;
    /**
     * The ID of the security group. You must specify either the security group ID or the security group name in the request.
     * For security groups in a nondefault VPC, you must specify the security group ID. You must specify the GroupName property
     * or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The name of the security group.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers). [VPC only] Use -1 to specify all
     * protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or
     * icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a
     * port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is
     * allowed.
     */
    ipProtocol?: pulumi.Input<string>;
    /**
     * The Security Group Rule Id
     */
    securityGroupIngressId?: pulumi.Input<string>;
    /**
     * [EC2-VPC only] The ID of a prefix list.
     */
    sourcePrefixListId?: pulumi.Input<string>;
    /**
     * The ID of the security group. You must specify either the security group ID or the security group name. For security
     * groups in a nondefault VPC, you must specify the security group ID.
     */
    sourceSecurityGroupId?: pulumi.Input<string>;
    /**
     * [EC2-Classic, default VPC] The name of the source security group. You must specify the GroupName property or the GroupId
     * property. For security groups that are in a VPC, you must use the GroupId property.
     */
    sourceSecurityGroupName?: pulumi.Input<string>;
    /**
     * [nondefault VPC] The AWS account ID that owns the source security group. You can't specify this property with an IP
     * address range. If you specify SourceSecurityGroupName or SourceSecurityGroupId and that security group is owned by a
     * different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this
     * property is optional.
     */
    sourceSecurityGroupOwnerId?: pulumi.Input<string>;
    /**
     * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6
     * codes for the specified ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all codes. Use this for ICMP
     * and any protocol that uses ports.
     */
    toPort?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Ec2SecurityGroupIngress resource.
 */
export interface Ec2SecurityGroupIngressArgs {
    /**
     * The IPv4 ranges
     */
    cidrIp?: pulumi.Input<string>;
    /**
     * [VPC only] The IPv6 ranges
     */
    cidrIpv6?: pulumi.Input<string>;
    /**
     * Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a
     * description to a rule that did not have one previously
     */
    description?: pulumi.Input<string>;
    /**
     * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all
     * ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes. Use this for ICMP and any protocol
     * that uses ports.
     */
    fromPort?: pulumi.Input<number>;
    /**
     * The ID of the security group. You must specify either the security group ID or the security group name in the request.
     * For security groups in a nondefault VPC, you must specify the security group ID. You must specify the GroupName property
     * or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The name of the security group.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers). [VPC only] Use -1 to specify all
     * protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or
     * icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a
     * port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is
     * allowed.
     */
    ipProtocol: pulumi.Input<string>;
    /**
     * [EC2-VPC only] The ID of a prefix list.
     */
    sourcePrefixListId?: pulumi.Input<string>;
    /**
     * The ID of the security group. You must specify either the security group ID or the security group name. For security
     * groups in a nondefault VPC, you must specify the security group ID.
     */
    sourceSecurityGroupId?: pulumi.Input<string>;
    /**
     * [EC2-Classic, default VPC] The name of the source security group. You must specify the GroupName property or the GroupId
     * property. For security groups that are in a VPC, you must use the GroupId property.
     */
    sourceSecurityGroupName?: pulumi.Input<string>;
    /**
     * [nondefault VPC] The AWS account ID that owns the source security group. You can't specify this property with an IP
     * address range. If you specify SourceSecurityGroupName or SourceSecurityGroupId and that security group is owned by a
     * different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this
     * property is optional.
     */
    sourceSecurityGroupOwnerId?: pulumi.Input<string>;
    /**
     * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6
     * codes for the specified ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all codes. Use this for ICMP
     * and any protocol that uses ports.
     */
    toPort?: pulumi.Input<number>;
}
