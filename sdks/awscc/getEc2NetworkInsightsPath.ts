// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEc2NetworkInsightsPath(args: GetEc2NetworkInsightsPathArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2NetworkInsightsPathResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEc2NetworkInsightsPath:getEc2NetworkInsightsPath", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2NetworkInsightsPath.
 */
export interface GetEc2NetworkInsightsPathArgs {
    id: string;
}

/**
 * A collection of values returned by getEc2NetworkInsightsPath.
 */
export interface GetEc2NetworkInsightsPathResult {
    readonly createdDate: string;
    readonly destination: string;
    readonly destinationArn: string;
    readonly destinationIp: string;
    readonly destinationPort: number;
    readonly filterAtDestination: outputs.GetEc2NetworkInsightsPathFilterAtDestination;
    readonly filterAtSource: outputs.GetEc2NetworkInsightsPathFilterAtSource;
    readonly id: string;
    readonly networkInsightsPathArn: string;
    readonly networkInsightsPathId: string;
    readonly protocol: string;
    readonly source: string;
    readonly sourceArn: string;
    readonly sourceIp: string;
    readonly tags: outputs.GetEc2NetworkInsightsPathTag[];
}
export function getEc2NetworkInsightsPathOutput(args: GetEc2NetworkInsightsPathOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2NetworkInsightsPathResult> {
    return pulumi.output(args).apply((a: any) => getEc2NetworkInsightsPath(a, opts))
}

/**
 * A collection of arguments for invoking getEc2NetworkInsightsPath.
 */
export interface GetEc2NetworkInsightsPathOutputArgs {
    id: pulumi.Input<string>;
}
