// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getEc2TransitGatewayMulticastGroupMember(args: GetEc2TransitGatewayMulticastGroupMemberArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2TransitGatewayMulticastGroupMemberResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEc2TransitGatewayMulticastGroupMember:getEc2TransitGatewayMulticastGroupMember", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2TransitGatewayMulticastGroupMember.
 */
export interface GetEc2TransitGatewayMulticastGroupMemberArgs {
    id: string;
}

/**
 * A collection of values returned by getEc2TransitGatewayMulticastGroupMember.
 */
export interface GetEc2TransitGatewayMulticastGroupMemberResult {
    readonly groupIpAddress: string;
    readonly groupMember: boolean;
    readonly groupSource: boolean;
    readonly id: string;
    readonly memberType: string;
    readonly networkInterfaceId: string;
    readonly resourceId: string;
    readonly resourceType: string;
    readonly subnetId: string;
    readonly transitGatewayAttachmentId: string;
    readonly transitGatewayMulticastDomainId: string;
}
export function getEc2TransitGatewayMulticastGroupMemberOutput(args: GetEc2TransitGatewayMulticastGroupMemberOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2TransitGatewayMulticastGroupMemberResult> {
    return pulumi.output(args).apply((a: any) => getEc2TransitGatewayMulticastGroupMember(a, opts))
}

/**
 * A collection of arguments for invoking getEc2TransitGatewayMulticastGroupMember.
 */
export interface GetEc2TransitGatewayMulticastGroupMemberOutputArgs {
    id: pulumi.Input<string>;
}
