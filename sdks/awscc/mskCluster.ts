// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MskCluster extends pulumi.CustomResource {
    /**
     * Get an existing MskCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MskClusterState, opts?: pulumi.CustomResourceOptions): MskCluster {
        return new MskCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/mskCluster:MskCluster';

    /**
     * Returns true if the given object is an instance of MskCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MskCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MskCluster.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly brokerNodeGroupInfo!: pulumi.Output<outputs.MskClusterBrokerNodeGroupInfo>;
    public readonly clientAuthentication!: pulumi.Output<outputs.MskClusterClientAuthentication>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly configurationInfo!: pulumi.Output<outputs.MskClusterConfigurationInfo>;
    /**
     * The current version of the MSK cluster
     */
    public readonly currentVersion!: pulumi.Output<string>;
    public readonly encryptionInfo!: pulumi.Output<outputs.MskClusterEncryptionInfo>;
    public readonly enhancedMonitoring!: pulumi.Output<string>;
    public readonly kafkaVersion!: pulumi.Output<string>;
    public readonly loggingInfo!: pulumi.Output<outputs.MskClusterLoggingInfo>;
    public readonly numberOfBrokerNodes!: pulumi.Output<number>;
    public readonly openMonitoring!: pulumi.Output<outputs.MskClusterOpenMonitoring>;
    public readonly storageMode!: pulumi.Output<string>;
    /**
     * A key-value pair to associate with a resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a MskCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MskClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MskClusterArgs | MskClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MskClusterState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["brokerNodeGroupInfo"] = state ? state.brokerNodeGroupInfo : undefined;
            resourceInputs["clientAuthentication"] = state ? state.clientAuthentication : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["configurationInfo"] = state ? state.configurationInfo : undefined;
            resourceInputs["currentVersion"] = state ? state.currentVersion : undefined;
            resourceInputs["encryptionInfo"] = state ? state.encryptionInfo : undefined;
            resourceInputs["enhancedMonitoring"] = state ? state.enhancedMonitoring : undefined;
            resourceInputs["kafkaVersion"] = state ? state.kafkaVersion : undefined;
            resourceInputs["loggingInfo"] = state ? state.loggingInfo : undefined;
            resourceInputs["numberOfBrokerNodes"] = state ? state.numberOfBrokerNodes : undefined;
            resourceInputs["openMonitoring"] = state ? state.openMonitoring : undefined;
            resourceInputs["storageMode"] = state ? state.storageMode : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as MskClusterArgs | undefined;
            if ((!args || args.brokerNodeGroupInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'brokerNodeGroupInfo'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.kafkaVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaVersion'");
            }
            if ((!args || args.numberOfBrokerNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numberOfBrokerNodes'");
            }
            resourceInputs["brokerNodeGroupInfo"] = args ? args.brokerNodeGroupInfo : undefined;
            resourceInputs["clientAuthentication"] = args ? args.clientAuthentication : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["configurationInfo"] = args ? args.configurationInfo : undefined;
            resourceInputs["currentVersion"] = args ? args.currentVersion : undefined;
            resourceInputs["encryptionInfo"] = args ? args.encryptionInfo : undefined;
            resourceInputs["enhancedMonitoring"] = args ? args.enhancedMonitoring : undefined;
            resourceInputs["kafkaVersion"] = args ? args.kafkaVersion : undefined;
            resourceInputs["loggingInfo"] = args ? args.loggingInfo : undefined;
            resourceInputs["numberOfBrokerNodes"] = args ? args.numberOfBrokerNodes : undefined;
            resourceInputs["openMonitoring"] = args ? args.openMonitoring : undefined;
            resourceInputs["storageMode"] = args ? args.storageMode : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MskCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MskCluster resources.
 */
export interface MskClusterState {
    arn?: pulumi.Input<string>;
    brokerNodeGroupInfo?: pulumi.Input<inputs.MskClusterBrokerNodeGroupInfo>;
    clientAuthentication?: pulumi.Input<inputs.MskClusterClientAuthentication>;
    clusterName?: pulumi.Input<string>;
    configurationInfo?: pulumi.Input<inputs.MskClusterConfigurationInfo>;
    /**
     * The current version of the MSK cluster
     */
    currentVersion?: pulumi.Input<string>;
    encryptionInfo?: pulumi.Input<inputs.MskClusterEncryptionInfo>;
    enhancedMonitoring?: pulumi.Input<string>;
    kafkaVersion?: pulumi.Input<string>;
    loggingInfo?: pulumi.Input<inputs.MskClusterLoggingInfo>;
    numberOfBrokerNodes?: pulumi.Input<number>;
    openMonitoring?: pulumi.Input<inputs.MskClusterOpenMonitoring>;
    storageMode?: pulumi.Input<string>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a MskCluster resource.
 */
export interface MskClusterArgs {
    brokerNodeGroupInfo: pulumi.Input<inputs.MskClusterBrokerNodeGroupInfo>;
    clientAuthentication?: pulumi.Input<inputs.MskClusterClientAuthentication>;
    clusterName: pulumi.Input<string>;
    configurationInfo?: pulumi.Input<inputs.MskClusterConfigurationInfo>;
    /**
     * The current version of the MSK cluster
     */
    currentVersion?: pulumi.Input<string>;
    encryptionInfo?: pulumi.Input<inputs.MskClusterEncryptionInfo>;
    enhancedMonitoring?: pulumi.Input<string>;
    kafkaVersion: pulumi.Input<string>;
    loggingInfo?: pulumi.Input<inputs.MskClusterLoggingInfo>;
    numberOfBrokerNodes: pulumi.Input<number>;
    openMonitoring?: pulumi.Input<inputs.MskClusterOpenMonitoring>;
    storageMode?: pulumi.Input<string>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
