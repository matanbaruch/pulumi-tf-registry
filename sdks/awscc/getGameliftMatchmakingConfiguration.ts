// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getGameliftMatchmakingConfiguration(args: GetGameliftMatchmakingConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetGameliftMatchmakingConfigurationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getGameliftMatchmakingConfiguration:getGameliftMatchmakingConfiguration", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGameliftMatchmakingConfiguration.
 */
export interface GetGameliftMatchmakingConfigurationArgs {
    id: string;
}

/**
 * A collection of values returned by getGameliftMatchmakingConfiguration.
 */
export interface GetGameliftMatchmakingConfigurationResult {
    readonly acceptanceRequired: boolean;
    readonly acceptanceTimeoutSeconds: number;
    readonly additionalPlayerCount: number;
    readonly arn: string;
    readonly backfillMode: string;
    readonly creationTime: string;
    readonly customEventData: string;
    readonly description: string;
    readonly flexMatchMode: string;
    readonly gameProperties: outputs.GetGameliftMatchmakingConfigurationGameProperty[];
    readonly gameSessionData: string;
    readonly gameSessionQueueArns: string[];
    readonly id: string;
    readonly name: string;
    readonly notificationTarget: string;
    readonly requestTimeoutSeconds: number;
    readonly ruleSetArn: string;
    readonly ruleSetName: string;
    readonly tags: outputs.GetGameliftMatchmakingConfigurationTag[];
}
export function getGameliftMatchmakingConfigurationOutput(args: GetGameliftMatchmakingConfigurationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGameliftMatchmakingConfigurationResult> {
    return pulumi.output(args).apply((a: any) => getGameliftMatchmakingConfiguration(a, opts))
}

/**
 * A collection of arguments for invoking getGameliftMatchmakingConfiguration.
 */
export interface GetGameliftMatchmakingConfigurationOutputArgs {
    id: pulumi.Input<string>;
}
