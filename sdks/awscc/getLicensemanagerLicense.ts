// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLicensemanagerLicense(args: GetLicensemanagerLicenseArgs, opts?: pulumi.InvokeOptions): Promise<GetLicensemanagerLicenseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getLicensemanagerLicense:getLicensemanagerLicense", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLicensemanagerLicense.
 */
export interface GetLicensemanagerLicenseArgs {
    id: string;
}

/**
 * A collection of values returned by getLicensemanagerLicense.
 */
export interface GetLicensemanagerLicenseResult {
    readonly beneficiary: string;
    readonly consumptionConfiguration: outputs.GetLicensemanagerLicenseConsumptionConfiguration;
    readonly entitlements: outputs.GetLicensemanagerLicenseEntitlement[];
    readonly homeRegion: string;
    readonly id: string;
    readonly issuer: outputs.GetLicensemanagerLicenseIssuer;
    readonly licenseArn: string;
    readonly licenseMetadatas: outputs.GetLicensemanagerLicenseLicenseMetadata[];
    readonly licenseName: string;
    readonly productName: string;
    readonly productSku: string;
    readonly status: string;
    readonly validity: outputs.GetLicensemanagerLicenseValidity;
    readonly version: string;
}
export function getLicensemanagerLicenseOutput(args: GetLicensemanagerLicenseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLicensemanagerLicenseResult> {
    return pulumi.output(args).apply((a: any) => getLicensemanagerLicense(a, opts))
}

/**
 * A collection of arguments for invoking getLicensemanagerLicense.
 */
export interface GetLicensemanagerLicenseOutputArgs {
    id: pulumi.Input<string>;
}
