// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GlueTrigger extends pulumi.CustomResource {
    /**
     * Get an existing GlueTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlueTriggerState, opts?: pulumi.CustomResourceOptions): GlueTrigger {
        return new GlueTrigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/glueTrigger:GlueTrigger';

    /**
     * Returns true if the given object is an instance of GlueTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlueTrigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlueTrigger.__pulumiType;
    }

    /**
     * The actions initiated by this trigger.
     */
    public readonly actions!: pulumi.Output<outputs.GlueTriggerAction[]>;
    /**
     * A description of this trigger.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge
     * event trigger fires.
     */
    public readonly eventBatchingCondition!: pulumi.Output<outputs.GlueTriggerEventBatchingCondition>;
    /**
     * The name of the trigger.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The predicate of this trigger, which defines when it will fire.
     */
    public readonly predicate!: pulumi.Output<outputs.GlueTriggerPredicate>;
    /**
     * A cron expression used to specify the schedule.
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
     */
    public readonly startOnCreation!: pulumi.Output<boolean>;
    /**
     * The tags to use with this trigger.
     */
    public readonly tags!: pulumi.Output<string>;
    /**
     * The type of trigger that this is.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The name of the workflow associated with the trigger.
     */
    public readonly workflowName!: pulumi.Output<string>;

    /**
     * Create a GlueTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlueTriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlueTriggerArgs | GlueTriggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlueTriggerState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventBatchingCondition"] = state ? state.eventBatchingCondition : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["predicate"] = state ? state.predicate : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["startOnCreation"] = state ? state.startOnCreation : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["workflowName"] = state ? state.workflowName : undefined;
        } else {
            const args = argsOrState as GlueTriggerArgs | undefined;
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventBatchingCondition"] = args ? args.eventBatchingCondition : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["predicate"] = args ? args.predicate : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["startOnCreation"] = args ? args.startOnCreation : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["workflowName"] = args ? args.workflowName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlueTrigger.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlueTrigger resources.
 */
export interface GlueTriggerState {
    /**
     * The actions initiated by this trigger.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.GlueTriggerAction>[]>;
    /**
     * A description of this trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge
     * event trigger fires.
     */
    eventBatchingCondition?: pulumi.Input<inputs.GlueTriggerEventBatchingCondition>;
    /**
     * The name of the trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * The predicate of this trigger, which defines when it will fire.
     */
    predicate?: pulumi.Input<inputs.GlueTriggerPredicate>;
    /**
     * A cron expression used to specify the schedule.
     */
    schedule?: pulumi.Input<string>;
    /**
     * Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
     */
    startOnCreation?: pulumi.Input<boolean>;
    /**
     * The tags to use with this trigger.
     */
    tags?: pulumi.Input<string>;
    /**
     * The type of trigger that this is.
     */
    type?: pulumi.Input<string>;
    /**
     * The name of the workflow associated with the trigger.
     */
    workflowName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GlueTrigger resource.
 */
export interface GlueTriggerArgs {
    /**
     * The actions initiated by this trigger.
     */
    actions: pulumi.Input<pulumi.Input<inputs.GlueTriggerAction>[]>;
    /**
     * A description of this trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge
     * event trigger fires.
     */
    eventBatchingCondition?: pulumi.Input<inputs.GlueTriggerEventBatchingCondition>;
    /**
     * The name of the trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * The predicate of this trigger, which defines when it will fire.
     */
    predicate?: pulumi.Input<inputs.GlueTriggerPredicate>;
    /**
     * A cron expression used to specify the schedule.
     */
    schedule?: pulumi.Input<string>;
    /**
     * Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
     */
    startOnCreation?: pulumi.Input<boolean>;
    /**
     * The tags to use with this trigger.
     */
    tags?: pulumi.Input<string>;
    /**
     * The type of trigger that this is.
     */
    type: pulumi.Input<string>;
    /**
     * The name of the workflow associated with the trigger.
     */
    workflowName?: pulumi.Input<string>;
}
