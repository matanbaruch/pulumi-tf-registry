// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SignerSigningProfile extends pulumi.CustomResource {
    /**
     * Get an existing SignerSigningProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SignerSigningProfileState, opts?: pulumi.CustomResourceOptions): SignerSigningProfile {
        return new SignerSigningProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/signerSigningProfile:SignerSigningProfile';

    /**
     * Returns true if the given object is an instance of SignerSigningProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SignerSigningProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SignerSigningProfile.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the specified signing profile.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The ID of the target signing platform.
     */
    public readonly platformId!: pulumi.Output<string>;
    /**
     * A name for the signing profile. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses
     * that ID for the signing profile name.
     */
    public /*out*/ readonly profileName!: pulumi.Output<string>;
    /**
     * A version for the signing profile. AWS Signer generates a unique version for each profile of the same profile name.
     */
    public /*out*/ readonly profileVersion!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the specified signing profile version.
     */
    public /*out*/ readonly profileVersionArn!: pulumi.Output<string>;
    /**
     * Signature validity period of the profile.
     */
    public readonly signatureValidityPeriod!: pulumi.Output<outputs.SignerSigningProfileSignatureValidityPeriod>;
    /**
     * A list of tags associated with the signing profile.
     */
    public readonly tags!: pulumi.Output<outputs.SignerSigningProfileTag[]>;

    /**
     * Create a SignerSigningProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SignerSigningProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SignerSigningProfileArgs | SignerSigningProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SignerSigningProfileState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["platformId"] = state ? state.platformId : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
            resourceInputs["profileVersion"] = state ? state.profileVersion : undefined;
            resourceInputs["profileVersionArn"] = state ? state.profileVersionArn : undefined;
            resourceInputs["signatureValidityPeriod"] = state ? state.signatureValidityPeriod : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SignerSigningProfileArgs | undefined;
            if ((!args || args.platformId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'platformId'");
            }
            resourceInputs["platformId"] = args ? args.platformId : undefined;
            resourceInputs["signatureValidityPeriod"] = args ? args.signatureValidityPeriod : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["profileName"] = undefined /*out*/;
            resourceInputs["profileVersion"] = undefined /*out*/;
            resourceInputs["profileVersionArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SignerSigningProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SignerSigningProfile resources.
 */
export interface SignerSigningProfileState {
    /**
     * The Amazon Resource Name (ARN) of the specified signing profile.
     */
    arn?: pulumi.Input<string>;
    /**
     * The ID of the target signing platform.
     */
    platformId?: pulumi.Input<string>;
    /**
     * A name for the signing profile. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses
     * that ID for the signing profile name.
     */
    profileName?: pulumi.Input<string>;
    /**
     * A version for the signing profile. AWS Signer generates a unique version for each profile of the same profile name.
     */
    profileVersion?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the specified signing profile version.
     */
    profileVersionArn?: pulumi.Input<string>;
    /**
     * Signature validity period of the profile.
     */
    signatureValidityPeriod?: pulumi.Input<inputs.SignerSigningProfileSignatureValidityPeriod>;
    /**
     * A list of tags associated with the signing profile.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SignerSigningProfileTag>[]>;
}

/**
 * The set of arguments for constructing a SignerSigningProfile resource.
 */
export interface SignerSigningProfileArgs {
    /**
     * The ID of the target signing platform.
     */
    platformId: pulumi.Input<string>;
    /**
     * Signature validity period of the profile.
     */
    signatureValidityPeriod?: pulumi.Input<inputs.SignerSigningProfileSignatureValidityPeriod>;
    /**
     * A list of tags associated with the signing profile.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SignerSigningProfileTag>[]>;
}
