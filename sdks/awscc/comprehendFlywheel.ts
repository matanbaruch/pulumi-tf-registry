// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComprehendFlywheel extends pulumi.CustomResource {
    /**
     * Get an existing ComprehendFlywheel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComprehendFlywheelState, opts?: pulumi.CustomResourceOptions): ComprehendFlywheel {
        return new ComprehendFlywheel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/comprehendFlywheel:ComprehendFlywheel';

    /**
     * Returns true if the given object is an instance of ComprehendFlywheel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComprehendFlywheel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComprehendFlywheel.__pulumiType;
    }

    public readonly activeModelArn!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly dataAccessRoleArn!: pulumi.Output<string>;
    public readonly dataLakeS3Uri!: pulumi.Output<string>;
    public readonly dataSecurityConfig!: pulumi.Output<outputs.ComprehendFlywheelDataSecurityConfig>;
    public readonly flywheelName!: pulumi.Output<string>;
    public readonly modelType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.ComprehendFlywheelTag[]>;
    public readonly taskConfig!: pulumi.Output<outputs.ComprehendFlywheelTaskConfig>;

    /**
     * Create a ComprehendFlywheel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComprehendFlywheelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComprehendFlywheelArgs | ComprehendFlywheelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComprehendFlywheelState | undefined;
            resourceInputs["activeModelArn"] = state ? state.activeModelArn : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["dataAccessRoleArn"] = state ? state.dataAccessRoleArn : undefined;
            resourceInputs["dataLakeS3Uri"] = state ? state.dataLakeS3Uri : undefined;
            resourceInputs["dataSecurityConfig"] = state ? state.dataSecurityConfig : undefined;
            resourceInputs["flywheelName"] = state ? state.flywheelName : undefined;
            resourceInputs["modelType"] = state ? state.modelType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taskConfig"] = state ? state.taskConfig : undefined;
        } else {
            const args = argsOrState as ComprehendFlywheelArgs | undefined;
            if ((!args || args.dataAccessRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataAccessRoleArn'");
            }
            if ((!args || args.dataLakeS3Uri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataLakeS3Uri'");
            }
            if ((!args || args.flywheelName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flywheelName'");
            }
            resourceInputs["activeModelArn"] = args ? args.activeModelArn : undefined;
            resourceInputs["dataAccessRoleArn"] = args ? args.dataAccessRoleArn : undefined;
            resourceInputs["dataLakeS3Uri"] = args ? args.dataLakeS3Uri : undefined;
            resourceInputs["dataSecurityConfig"] = args ? args.dataSecurityConfig : undefined;
            resourceInputs["flywheelName"] = args ? args.flywheelName : undefined;
            resourceInputs["modelType"] = args ? args.modelType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taskConfig"] = args ? args.taskConfig : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComprehendFlywheel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComprehendFlywheel resources.
 */
export interface ComprehendFlywheelState {
    activeModelArn?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    dataAccessRoleArn?: pulumi.Input<string>;
    dataLakeS3Uri?: pulumi.Input<string>;
    dataSecurityConfig?: pulumi.Input<inputs.ComprehendFlywheelDataSecurityConfig>;
    flywheelName?: pulumi.Input<string>;
    modelType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ComprehendFlywheelTag>[]>;
    taskConfig?: pulumi.Input<inputs.ComprehendFlywheelTaskConfig>;
}

/**
 * The set of arguments for constructing a ComprehendFlywheel resource.
 */
export interface ComprehendFlywheelArgs {
    activeModelArn?: pulumi.Input<string>;
    dataAccessRoleArn: pulumi.Input<string>;
    dataLakeS3Uri: pulumi.Input<string>;
    dataSecurityConfig?: pulumi.Input<inputs.ComprehendFlywheelDataSecurityConfig>;
    flywheelName: pulumi.Input<string>;
    modelType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ComprehendFlywheelTag>[]>;
    taskConfig?: pulumi.Input<inputs.ComprehendFlywheelTaskConfig>;
}
