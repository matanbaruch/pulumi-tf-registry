// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEcsTaskDefinition(args: GetEcsTaskDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetEcsTaskDefinitionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEcsTaskDefinition:getEcsTaskDefinition", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEcsTaskDefinition.
 */
export interface GetEcsTaskDefinitionArgs {
    id: string;
}

/**
 * A collection of values returned by getEcsTaskDefinition.
 */
export interface GetEcsTaskDefinitionResult {
    readonly containerDefinitions: outputs.GetEcsTaskDefinitionContainerDefinition[];
    readonly cpu: string;
    readonly ephemeralStorage: outputs.GetEcsTaskDefinitionEphemeralStorage;
    readonly executionRoleArn: string;
    readonly family: string;
    readonly id: string;
    readonly inferenceAccelerators: outputs.GetEcsTaskDefinitionInferenceAccelerator[];
    readonly ipcMode: string;
    readonly memory: string;
    readonly networkMode: string;
    readonly pidMode: string;
    readonly placementConstraints: outputs.GetEcsTaskDefinitionPlacementConstraint[];
    readonly proxyConfiguration: outputs.GetEcsTaskDefinitionProxyConfiguration;
    readonly requiresCompatibilities: string[];
    readonly runtimePlatform: outputs.GetEcsTaskDefinitionRuntimePlatform;
    readonly tags: outputs.GetEcsTaskDefinitionTag[];
    readonly taskDefinitionArn: string;
    readonly taskRoleArn: string;
    readonly volumes: outputs.GetEcsTaskDefinitionVolume[];
}
export function getEcsTaskDefinitionOutput(args: GetEcsTaskDefinitionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEcsTaskDefinitionResult> {
    return pulumi.output(args).apply((a: any) => getEcsTaskDefinition(a, opts))
}

/**
 * A collection of arguments for invoking getEcsTaskDefinition.
 */
export interface GetEcsTaskDefinitionOutputArgs {
    id: pulumi.Input<string>;
}
