// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AcmpcaCertificate extends pulumi.CustomResource {
    /**
     * Get an existing AcmpcaCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AcmpcaCertificateState, opts?: pulumi.CustomResourceOptions): AcmpcaCertificate {
        return new AcmpcaCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/acmpcaCertificate:AcmpcaCertificate';

    /**
     * Returns true if the given object is an instance of AcmpcaCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AcmpcaCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AcmpcaCertificate.__pulumiType;
    }

    /**
     * Specifies X.509 certificate information to be included in the issued certificate. An ``APIPassthrough`` or
     * ``APICSRPassthrough`` template variant must be selected, or else this parameter is ignored.
     */
    public readonly apiPassthrough!: pulumi.Output<outputs.AcmpcaCertificateApiPassthrough>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) for the private CA issues the certificate.
     */
    public readonly certificateAuthorityArn!: pulumi.Output<string>;
    /**
     * The certificate signing request (CSR) for the certificate.
     */
    public readonly certificateSigningRequest!: pulumi.Output<string>;
    /**
     * The name of the algorithm that will be used to sign the certificate to be issued. This parameter should not be confused
     * with the ``SigningAlgorithm`` parameter used to sign a CSR in the ``CreateCertificateAuthority`` action. The specified
     * signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key.
     */
    public readonly signingAlgorithm!: pulumi.Output<string>;
    /**
     * Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, PCAshort
     * defaults to the ``EndEntityCertificate/V1`` template. For more information about PCAshort templates, see [Using
     * Templates](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html).
     */
    public readonly templateArn!: pulumi.Output<string>;
    /**
     * The period of time during which the certificate will be valid.
     */
    public readonly validity!: pulumi.Output<outputs.AcmpcaCertificateValidity>;
    /**
     * Information describing the start of the validity period of the certificate. This parameter sets the ?Not Before" date
     * for the certificate. By default, when issuing a certificate, PCAshort sets the "Not Before" date to the issuance time
     * minus 60 minutes. This compensates for clock inconsistencies across computer systems. The ``ValidityNotBefore``
     * parameter can be used to customize the ?Not Before? value. Unlike the ``Validity`` parameter, the ``ValidityNotBefore``
     * parameter is optional. The ``ValidityNotBefore`` value is expressed as an explicit date and time, using the ``Validity``
     * type value ``ABSOLUTE``.
     */
    public readonly validityNotBefore!: pulumi.Output<outputs.AcmpcaCertificateValidityNotBefore>;

    /**
     * Create a AcmpcaCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AcmpcaCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AcmpcaCertificateArgs | AcmpcaCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AcmpcaCertificateState | undefined;
            resourceInputs["apiPassthrough"] = state ? state.apiPassthrough : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["certificateAuthorityArn"] = state ? state.certificateAuthorityArn : undefined;
            resourceInputs["certificateSigningRequest"] = state ? state.certificateSigningRequest : undefined;
            resourceInputs["signingAlgorithm"] = state ? state.signingAlgorithm : undefined;
            resourceInputs["templateArn"] = state ? state.templateArn : undefined;
            resourceInputs["validity"] = state ? state.validity : undefined;
            resourceInputs["validityNotBefore"] = state ? state.validityNotBefore : undefined;
        } else {
            const args = argsOrState as AcmpcaCertificateArgs | undefined;
            if ((!args || args.certificateAuthorityArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthorityArn'");
            }
            if ((!args || args.certificateSigningRequest === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateSigningRequest'");
            }
            if ((!args || args.signingAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signingAlgorithm'");
            }
            if ((!args || args.validity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'validity'");
            }
            resourceInputs["apiPassthrough"] = args ? args.apiPassthrough : undefined;
            resourceInputs["certificateAuthorityArn"] = args ? args.certificateAuthorityArn : undefined;
            resourceInputs["certificateSigningRequest"] = args ? args.certificateSigningRequest : undefined;
            resourceInputs["signingAlgorithm"] = args ? args.signingAlgorithm : undefined;
            resourceInputs["templateArn"] = args ? args.templateArn : undefined;
            resourceInputs["validity"] = args ? args.validity : undefined;
            resourceInputs["validityNotBefore"] = args ? args.validityNotBefore : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["certificate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AcmpcaCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AcmpcaCertificate resources.
 */
export interface AcmpcaCertificateState {
    /**
     * Specifies X.509 certificate information to be included in the issued certificate. An ``APIPassthrough`` or
     * ``APICSRPassthrough`` template variant must be selected, or else this parameter is ignored.
     */
    apiPassthrough?: pulumi.Input<inputs.AcmpcaCertificateApiPassthrough>;
    arn?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) for the private CA issues the certificate.
     */
    certificateAuthorityArn?: pulumi.Input<string>;
    /**
     * The certificate signing request (CSR) for the certificate.
     */
    certificateSigningRequest?: pulumi.Input<string>;
    /**
     * The name of the algorithm that will be used to sign the certificate to be issued. This parameter should not be confused
     * with the ``SigningAlgorithm`` parameter used to sign a CSR in the ``CreateCertificateAuthority`` action. The specified
     * signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key.
     */
    signingAlgorithm?: pulumi.Input<string>;
    /**
     * Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, PCAshort
     * defaults to the ``EndEntityCertificate/V1`` template. For more information about PCAshort templates, see [Using
     * Templates](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html).
     */
    templateArn?: pulumi.Input<string>;
    /**
     * The period of time during which the certificate will be valid.
     */
    validity?: pulumi.Input<inputs.AcmpcaCertificateValidity>;
    /**
     * Information describing the start of the validity period of the certificate. This parameter sets the ?Not Before" date
     * for the certificate. By default, when issuing a certificate, PCAshort sets the "Not Before" date to the issuance time
     * minus 60 minutes. This compensates for clock inconsistencies across computer systems. The ``ValidityNotBefore``
     * parameter can be used to customize the ?Not Before? value. Unlike the ``Validity`` parameter, the ``ValidityNotBefore``
     * parameter is optional. The ``ValidityNotBefore`` value is expressed as an explicit date and time, using the ``Validity``
     * type value ``ABSOLUTE``.
     */
    validityNotBefore?: pulumi.Input<inputs.AcmpcaCertificateValidityNotBefore>;
}

/**
 * The set of arguments for constructing a AcmpcaCertificate resource.
 */
export interface AcmpcaCertificateArgs {
    /**
     * Specifies X.509 certificate information to be included in the issued certificate. An ``APIPassthrough`` or
     * ``APICSRPassthrough`` template variant must be selected, or else this parameter is ignored.
     */
    apiPassthrough?: pulumi.Input<inputs.AcmpcaCertificateApiPassthrough>;
    /**
     * The Amazon Resource Name (ARN) for the private CA issues the certificate.
     */
    certificateAuthorityArn: pulumi.Input<string>;
    /**
     * The certificate signing request (CSR) for the certificate.
     */
    certificateSigningRequest: pulumi.Input<string>;
    /**
     * The name of the algorithm that will be used to sign the certificate to be issued. This parameter should not be confused
     * with the ``SigningAlgorithm`` parameter used to sign a CSR in the ``CreateCertificateAuthority`` action. The specified
     * signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key.
     */
    signingAlgorithm: pulumi.Input<string>;
    /**
     * Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, PCAshort
     * defaults to the ``EndEntityCertificate/V1`` template. For more information about PCAshort templates, see [Using
     * Templates](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html).
     */
    templateArn?: pulumi.Input<string>;
    /**
     * The period of time during which the certificate will be valid.
     */
    validity: pulumi.Input<inputs.AcmpcaCertificateValidity>;
    /**
     * Information describing the start of the validity period of the certificate. This parameter sets the ?Not Before" date
     * for the certificate. By default, when issuing a certificate, PCAshort sets the "Not Before" date to the issuance time
     * minus 60 minutes. This compensates for clock inconsistencies across computer systems. The ``ValidityNotBefore``
     * parameter can be used to customize the ?Not Before? value. Unlike the ``Validity`` parameter, the ``ValidityNotBefore``
     * parameter is optional. The ``ValidityNotBefore`` value is expressed as an explicit date and time, using the ``Validity``
     * type value ``ABSOLUTE``.
     */
    validityNotBefore?: pulumi.Input<inputs.AcmpcaCertificateValidityNotBefore>;
}
