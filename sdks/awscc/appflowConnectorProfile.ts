// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppflowConnectorProfile extends pulumi.CustomResource {
    /**
     * Get an existing AppflowConnectorProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppflowConnectorProfileState, opts?: pulumi.CustomResourceOptions): AppflowConnectorProfile {
        return new AppflowConnectorProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/appflowConnectorProfile:AppflowConnectorProfile';

    /**
     * Returns true if the given object is an instance of AppflowConnectorProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppflowConnectorProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppflowConnectorProfile.__pulumiType;
    }

    /**
     * Mode in which data transfer should be enabled. Private connection mode is currently enabled for Salesforce, Snowflake,
     * Trendmicro and Singular
     */
    public readonly connectionMode!: pulumi.Output<string>;
    /**
     * The label of the connector. The label is unique for each ConnectorRegistration in your AWS account. Only needed if
     * calling for CUSTOMCONNECTOR connector type/.
     */
    public readonly connectorLabel!: pulumi.Output<string>;
    /**
     * Unique identifier for connector profile resources
     */
    public /*out*/ readonly connectorProfileArn!: pulumi.Output<string>;
    /**
     * Connector specific configurations needed to create connector profile
     */
    public readonly connectorProfileConfig!: pulumi.Output<outputs.AppflowConnectorProfileConnectorProfileConfig>;
    /**
     * The maximum number of items to retrieve in a single batch.
     */
    public readonly connectorProfileName!: pulumi.Output<string>;
    /**
     * List of Saas providers that need connector profile to be created
     */
    public readonly connectorType!: pulumi.Output<string>;
    /**
     * A unique Arn for Connector-Profile resource
     */
    public /*out*/ readonly credentialsArn!: pulumi.Output<string>;
    /**
     * The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If
     * it's not provided, AWS Lambda uses a default service key.
     */
    public readonly kmsArn!: pulumi.Output<string>;

    /**
     * Create a AppflowConnectorProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppflowConnectorProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppflowConnectorProfileArgs | AppflowConnectorProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppflowConnectorProfileState | undefined;
            resourceInputs["connectionMode"] = state ? state.connectionMode : undefined;
            resourceInputs["connectorLabel"] = state ? state.connectorLabel : undefined;
            resourceInputs["connectorProfileArn"] = state ? state.connectorProfileArn : undefined;
            resourceInputs["connectorProfileConfig"] = state ? state.connectorProfileConfig : undefined;
            resourceInputs["connectorProfileName"] = state ? state.connectorProfileName : undefined;
            resourceInputs["connectorType"] = state ? state.connectorType : undefined;
            resourceInputs["credentialsArn"] = state ? state.credentialsArn : undefined;
            resourceInputs["kmsArn"] = state ? state.kmsArn : undefined;
        } else {
            const args = argsOrState as AppflowConnectorProfileArgs | undefined;
            if ((!args || args.connectionMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionMode'");
            }
            if ((!args || args.connectorProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorProfileName'");
            }
            if ((!args || args.connectorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorType'");
            }
            resourceInputs["connectionMode"] = args ? args.connectionMode : undefined;
            resourceInputs["connectorLabel"] = args ? args.connectorLabel : undefined;
            resourceInputs["connectorProfileConfig"] = args ? args.connectorProfileConfig : undefined;
            resourceInputs["connectorProfileName"] = args ? args.connectorProfileName : undefined;
            resourceInputs["connectorType"] = args ? args.connectorType : undefined;
            resourceInputs["kmsArn"] = args ? args.kmsArn : undefined;
            resourceInputs["connectorProfileArn"] = undefined /*out*/;
            resourceInputs["credentialsArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppflowConnectorProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppflowConnectorProfile resources.
 */
export interface AppflowConnectorProfileState {
    /**
     * Mode in which data transfer should be enabled. Private connection mode is currently enabled for Salesforce, Snowflake,
     * Trendmicro and Singular
     */
    connectionMode?: pulumi.Input<string>;
    /**
     * The label of the connector. The label is unique for each ConnectorRegistration in your AWS account. Only needed if
     * calling for CUSTOMCONNECTOR connector type/.
     */
    connectorLabel?: pulumi.Input<string>;
    /**
     * Unique identifier for connector profile resources
     */
    connectorProfileArn?: pulumi.Input<string>;
    /**
     * Connector specific configurations needed to create connector profile
     */
    connectorProfileConfig?: pulumi.Input<inputs.AppflowConnectorProfileConnectorProfileConfig>;
    /**
     * The maximum number of items to retrieve in a single batch.
     */
    connectorProfileName?: pulumi.Input<string>;
    /**
     * List of Saas providers that need connector profile to be created
     */
    connectorType?: pulumi.Input<string>;
    /**
     * A unique Arn for Connector-Profile resource
     */
    credentialsArn?: pulumi.Input<string>;
    /**
     * The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If
     * it's not provided, AWS Lambda uses a default service key.
     */
    kmsArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppflowConnectorProfile resource.
 */
export interface AppflowConnectorProfileArgs {
    /**
     * Mode in which data transfer should be enabled. Private connection mode is currently enabled for Salesforce, Snowflake,
     * Trendmicro and Singular
     */
    connectionMode: pulumi.Input<string>;
    /**
     * The label of the connector. The label is unique for each ConnectorRegistration in your AWS account. Only needed if
     * calling for CUSTOMCONNECTOR connector type/.
     */
    connectorLabel?: pulumi.Input<string>;
    /**
     * Connector specific configurations needed to create connector profile
     */
    connectorProfileConfig?: pulumi.Input<inputs.AppflowConnectorProfileConnectorProfileConfig>;
    /**
     * The maximum number of items to retrieve in a single batch.
     */
    connectorProfileName: pulumi.Input<string>;
    /**
     * List of Saas providers that need connector profile to be created
     */
    connectorType: pulumi.Input<string>;
    /**
     * The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If
     * it's not provided, AWS Lambda uses a default service key.
     */
    kmsArn?: pulumi.Input<string>;
}
