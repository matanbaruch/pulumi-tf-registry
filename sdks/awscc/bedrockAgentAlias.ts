// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BedrockAgentAlias extends pulumi.CustomResource {
    /**
     * Get an existing BedrockAgentAlias resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BedrockAgentAliasState, opts?: pulumi.CustomResourceOptions): BedrockAgentAlias {
        return new BedrockAgentAlias(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/bedrockAgentAlias:BedrockAgentAlias';

    /**
     * Returns true if the given object is an instance of BedrockAgentAlias.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BedrockAgentAlias {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BedrockAgentAlias.__pulumiType;
    }

    /**
     * Arn representation of the Agent Alias.
     */
    public /*out*/ readonly agentAliasArn!: pulumi.Output<string>;
    /**
     * The list of history events for an alias for an Agent.
     */
    public /*out*/ readonly agentAliasHistoryEvents!: pulumi.Output<outputs.BedrockAgentAliasAgentAliasHistoryEvent[]>;
    /**
     * Id for an Agent Alias generated at the server side.
     */
    public /*out*/ readonly agentAliasId!: pulumi.Output<string>;
    /**
     * Name for a resource.
     */
    public readonly agentAliasName!: pulumi.Output<string>;
    /**
     * The statuses an Agent Alias can be in.
     */
    public /*out*/ readonly agentAliasStatus!: pulumi.Output<string>;
    /**
     * Identifier for a resource.
     */
    public readonly agentId!: pulumi.Output<string>;
    /**
     * Time Stamp.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description of the Resource.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Routing configuration for an Agent alias.
     */
    public readonly routingConfigurations!: pulumi.Output<outputs.BedrockAgentAliasRoutingConfiguration[]>;
    /**
     * A map of tag keys and values
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * Time Stamp.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a BedrockAgentAlias resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BedrockAgentAliasArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BedrockAgentAliasArgs | BedrockAgentAliasState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BedrockAgentAliasState | undefined;
            resourceInputs["agentAliasArn"] = state ? state.agentAliasArn : undefined;
            resourceInputs["agentAliasHistoryEvents"] = state ? state.agentAliasHistoryEvents : undefined;
            resourceInputs["agentAliasId"] = state ? state.agentAliasId : undefined;
            resourceInputs["agentAliasName"] = state ? state.agentAliasName : undefined;
            resourceInputs["agentAliasStatus"] = state ? state.agentAliasStatus : undefined;
            resourceInputs["agentId"] = state ? state.agentId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["routingConfigurations"] = state ? state.routingConfigurations : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as BedrockAgentAliasArgs | undefined;
            if ((!args || args.agentAliasName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentAliasName'");
            }
            if ((!args || args.agentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentId'");
            }
            resourceInputs["agentAliasName"] = args ? args.agentAliasName : undefined;
            resourceInputs["agentId"] = args ? args.agentId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["routingConfigurations"] = args ? args.routingConfigurations : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["agentAliasArn"] = undefined /*out*/;
            resourceInputs["agentAliasHistoryEvents"] = undefined /*out*/;
            resourceInputs["agentAliasId"] = undefined /*out*/;
            resourceInputs["agentAliasStatus"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BedrockAgentAlias.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BedrockAgentAlias resources.
 */
export interface BedrockAgentAliasState {
    /**
     * Arn representation of the Agent Alias.
     */
    agentAliasArn?: pulumi.Input<string>;
    /**
     * The list of history events for an alias for an Agent.
     */
    agentAliasHistoryEvents?: pulumi.Input<pulumi.Input<inputs.BedrockAgentAliasAgentAliasHistoryEvent>[]>;
    /**
     * Id for an Agent Alias generated at the server side.
     */
    agentAliasId?: pulumi.Input<string>;
    /**
     * Name for a resource.
     */
    agentAliasName?: pulumi.Input<string>;
    /**
     * The statuses an Agent Alias can be in.
     */
    agentAliasStatus?: pulumi.Input<string>;
    /**
     * Identifier for a resource.
     */
    agentId?: pulumi.Input<string>;
    /**
     * Time Stamp.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the Resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Routing configuration for an Agent alias.
     */
    routingConfigurations?: pulumi.Input<pulumi.Input<inputs.BedrockAgentAliasRoutingConfiguration>[]>;
    /**
     * A map of tag keys and values
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Time Stamp.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BedrockAgentAlias resource.
 */
export interface BedrockAgentAliasArgs {
    /**
     * Name for a resource.
     */
    agentAliasName: pulumi.Input<string>;
    /**
     * Identifier for a resource.
     */
    agentId: pulumi.Input<string>;
    /**
     * Description of the Resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Routing configuration for an Agent alias.
     */
    routingConfigurations?: pulumi.Input<pulumi.Input<inputs.BedrockAgentAliasRoutingConfiguration>[]>;
    /**
     * A map of tag keys and values
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
