// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpclatticeAccessLogSubscription extends pulumi.CustomResource {
    /**
     * Get an existing VpclatticeAccessLogSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpclatticeAccessLogSubscriptionState, opts?: pulumi.CustomResourceOptions): VpclatticeAccessLogSubscription {
        return new VpclatticeAccessLogSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/vpclatticeAccessLogSubscription:VpclatticeAccessLogSubscription';

    /**
     * Returns true if the given object is an instance of VpclatticeAccessLogSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpclatticeAccessLogSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpclatticeAccessLogSubscription.__pulumiType;
    }

    public /*out*/ readonly accessLogSubscriptionId!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly destinationArn!: pulumi.Output<string>;
    public /*out*/ readonly resourceArn!: pulumi.Output<string>;
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    public readonly resourceIdentifier!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.VpclatticeAccessLogSubscriptionTag[]>;

    /**
     * Create a VpclatticeAccessLogSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpclatticeAccessLogSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpclatticeAccessLogSubscriptionArgs | VpclatticeAccessLogSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpclatticeAccessLogSubscriptionState | undefined;
            resourceInputs["accessLogSubscriptionId"] = state ? state.accessLogSubscriptionId : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["destinationArn"] = state ? state.destinationArn : undefined;
            resourceInputs["resourceArn"] = state ? state.resourceArn : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceIdentifier"] = state ? state.resourceIdentifier : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as VpclatticeAccessLogSubscriptionArgs | undefined;
            if ((!args || args.destinationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationArn'");
            }
            resourceInputs["destinationArn"] = args ? args.destinationArn : undefined;
            resourceInputs["resourceIdentifier"] = args ? args.resourceIdentifier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["accessLogSubscriptionId"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["resourceArn"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpclatticeAccessLogSubscription.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpclatticeAccessLogSubscription resources.
 */
export interface VpclatticeAccessLogSubscriptionState {
    accessLogSubscriptionId?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    destinationArn?: pulumi.Input<string>;
    resourceArn?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    resourceIdentifier?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VpclatticeAccessLogSubscriptionTag>[]>;
}

/**
 * The set of arguments for constructing a VpclatticeAccessLogSubscription resource.
 */
export interface VpclatticeAccessLogSubscriptionArgs {
    destinationArn: pulumi.Input<string>;
    resourceIdentifier?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VpclatticeAccessLogSubscriptionTag>[]>;
}
