// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SagemakerModelPackage extends pulumi.CustomResource {
    /**
     * Get an existing SagemakerModelPackage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SagemakerModelPackageState, opts?: pulumi.CustomResourceOptions): SagemakerModelPackage {
        return new SagemakerModelPackage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/sagemakerModelPackage:SagemakerModelPackage';

    /**
     * Returns true if the given object is an instance of SagemakerModelPackage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SagemakerModelPackage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SagemakerModelPackage.__pulumiType;
    }

    /**
     * An array of additional Inference Specification objects.
     */
    public readonly additionalInferenceSpecifications!: pulumi.Output<outputs.SagemakerModelPackageAdditionalInferenceSpecification[]>;
    /**
     * An array of additional Inference Specification objects.
     */
    public readonly additionalInferenceSpecificationsToAdds!: pulumi.Output<outputs.SagemakerModelPackageAdditionalInferenceSpecificationsToAdd[]>;
    /**
     * A description provided for the model approval.
     */
    public readonly approvalDescription!: pulumi.Output<string>;
    /**
     * Whether to certify the model package for listing on AWS Marketplace.
     */
    public readonly certifyForMarketplace!: pulumi.Output<boolean>;
    /**
     * A unique token that guarantees that the call to this API is idempotent.
     */
    public readonly clientToken!: pulumi.Output<string>;
    /**
     * The time at which the model package was created.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The metadata properties associated with the model package versions.
     */
    public readonly customerMetadataProperties!: pulumi.Output<{[key: string]: string}>;
    /**
     * The machine learning domain of the model package you specified.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Represents the drift check baselines that can be used when the model monitor is set using the model package.
     */
    public readonly driftCheckBaselines!: pulumi.Output<outputs.SagemakerModelPackageDriftCheckBaselines>;
    /**
     * Details about inference jobs that can be run with models based on this model package.
     */
    public readonly inferenceSpecification!: pulumi.Output<outputs.SagemakerModelPackageInferenceSpecification>;
    /**
     * The time at which the model package was last modified.
     */
    public readonly lastModifiedTime!: pulumi.Output<string>;
    /**
     * Metadata properties of the tracking entity, trial, or trial component.
     */
    public readonly metadataProperties!: pulumi.Output<outputs.SagemakerModelPackageMetadataProperties>;
    /**
     * The approval status of the model package.
     */
    public readonly modelApprovalStatus!: pulumi.Output<string>;
    /**
     * The model card associated with the model package.
     */
    public readonly modelCard!: pulumi.Output<outputs.SagemakerModelPackageModelCard>;
    /**
     * A structure that contains model metrics reports.
     */
    public readonly modelMetrics!: pulumi.Output<outputs.SagemakerModelPackageModelMetrics>;
    /**
     * The Amazon Resource Name (ARN) of the model package group.
     */
    public /*out*/ readonly modelPackageArn!: pulumi.Output<string>;
    /**
     * The description of the model package.
     */
    public readonly modelPackageDescription!: pulumi.Output<string>;
    /**
     * The name of the model package group.
     */
    public readonly modelPackageGroupName!: pulumi.Output<string>;
    /**
     * The name or arn of the model package.
     */
    public readonly modelPackageName!: pulumi.Output<string>;
    /**
     * The current status of the model package.
     */
    public /*out*/ readonly modelPackageStatus!: pulumi.Output<string>;
    /**
     * Details about the current status of the model package.
     */
    public readonly modelPackageStatusDetails!: pulumi.Output<outputs.SagemakerModelPackageModelPackageStatusDetails>;
    /**
     * The version of the model package.
     */
    public readonly modelPackageVersion!: pulumi.Output<number>;
    /**
     * The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored pointing to single gzip
     * compressed tar archive.
     */
    public readonly samplePayloadUrl!: pulumi.Output<string>;
    /**
     * An optional AWS Key Management Service key to encrypt, decrypt, and re-encrypt model package information for regulated
     * workloads with highly sensitive data.
     */
    public readonly securityConfig!: pulumi.Output<outputs.SagemakerModelPackageSecurityConfig>;
    /**
     * Indicates if you want to skip model validation.
     */
    public readonly skipModelValidation!: pulumi.Output<string>;
    /**
     * Details about the algorithm that was used to create the model package.
     */
    public readonly sourceAlgorithmSpecification!: pulumi.Output<outputs.SagemakerModelPackageSourceAlgorithmSpecification>;
    /**
     * The URI of the source for the model package.
     */
    public readonly sourceUri!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.SagemakerModelPackageTag[]>;
    /**
     * The machine learning task your model package accomplishes.
     */
    public readonly task!: pulumi.Output<string>;
    /**
     * Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
     */
    public readonly validationSpecification!: pulumi.Output<outputs.SagemakerModelPackageValidationSpecification>;

    /**
     * Create a SagemakerModelPackage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SagemakerModelPackageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SagemakerModelPackageArgs | SagemakerModelPackageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SagemakerModelPackageState | undefined;
            resourceInputs["additionalInferenceSpecifications"] = state ? state.additionalInferenceSpecifications : undefined;
            resourceInputs["additionalInferenceSpecificationsToAdds"] = state ? state.additionalInferenceSpecificationsToAdds : undefined;
            resourceInputs["approvalDescription"] = state ? state.approvalDescription : undefined;
            resourceInputs["certifyForMarketplace"] = state ? state.certifyForMarketplace : undefined;
            resourceInputs["clientToken"] = state ? state.clientToken : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["customerMetadataProperties"] = state ? state.customerMetadataProperties : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["driftCheckBaselines"] = state ? state.driftCheckBaselines : undefined;
            resourceInputs["inferenceSpecification"] = state ? state.inferenceSpecification : undefined;
            resourceInputs["lastModifiedTime"] = state ? state.lastModifiedTime : undefined;
            resourceInputs["metadataProperties"] = state ? state.metadataProperties : undefined;
            resourceInputs["modelApprovalStatus"] = state ? state.modelApprovalStatus : undefined;
            resourceInputs["modelCard"] = state ? state.modelCard : undefined;
            resourceInputs["modelMetrics"] = state ? state.modelMetrics : undefined;
            resourceInputs["modelPackageArn"] = state ? state.modelPackageArn : undefined;
            resourceInputs["modelPackageDescription"] = state ? state.modelPackageDescription : undefined;
            resourceInputs["modelPackageGroupName"] = state ? state.modelPackageGroupName : undefined;
            resourceInputs["modelPackageName"] = state ? state.modelPackageName : undefined;
            resourceInputs["modelPackageStatus"] = state ? state.modelPackageStatus : undefined;
            resourceInputs["modelPackageStatusDetails"] = state ? state.modelPackageStatusDetails : undefined;
            resourceInputs["modelPackageVersion"] = state ? state.modelPackageVersion : undefined;
            resourceInputs["samplePayloadUrl"] = state ? state.samplePayloadUrl : undefined;
            resourceInputs["securityConfig"] = state ? state.securityConfig : undefined;
            resourceInputs["skipModelValidation"] = state ? state.skipModelValidation : undefined;
            resourceInputs["sourceAlgorithmSpecification"] = state ? state.sourceAlgorithmSpecification : undefined;
            resourceInputs["sourceUri"] = state ? state.sourceUri : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["task"] = state ? state.task : undefined;
            resourceInputs["validationSpecification"] = state ? state.validationSpecification : undefined;
        } else {
            const args = argsOrState as SagemakerModelPackageArgs | undefined;
            resourceInputs["additionalInferenceSpecifications"] = args ? args.additionalInferenceSpecifications : undefined;
            resourceInputs["additionalInferenceSpecificationsToAdds"] = args ? args.additionalInferenceSpecificationsToAdds : undefined;
            resourceInputs["approvalDescription"] = args ? args.approvalDescription : undefined;
            resourceInputs["certifyForMarketplace"] = args ? args.certifyForMarketplace : undefined;
            resourceInputs["clientToken"] = args ? args.clientToken : undefined;
            resourceInputs["customerMetadataProperties"] = args ? args.customerMetadataProperties : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["driftCheckBaselines"] = args ? args.driftCheckBaselines : undefined;
            resourceInputs["inferenceSpecification"] = args ? args.inferenceSpecification : undefined;
            resourceInputs["lastModifiedTime"] = args ? args.lastModifiedTime : undefined;
            resourceInputs["metadataProperties"] = args ? args.metadataProperties : undefined;
            resourceInputs["modelApprovalStatus"] = args ? args.modelApprovalStatus : undefined;
            resourceInputs["modelCard"] = args ? args.modelCard : undefined;
            resourceInputs["modelMetrics"] = args ? args.modelMetrics : undefined;
            resourceInputs["modelPackageDescription"] = args ? args.modelPackageDescription : undefined;
            resourceInputs["modelPackageGroupName"] = args ? args.modelPackageGroupName : undefined;
            resourceInputs["modelPackageName"] = args ? args.modelPackageName : undefined;
            resourceInputs["modelPackageStatusDetails"] = args ? args.modelPackageStatusDetails : undefined;
            resourceInputs["modelPackageVersion"] = args ? args.modelPackageVersion : undefined;
            resourceInputs["samplePayloadUrl"] = args ? args.samplePayloadUrl : undefined;
            resourceInputs["securityConfig"] = args ? args.securityConfig : undefined;
            resourceInputs["skipModelValidation"] = args ? args.skipModelValidation : undefined;
            resourceInputs["sourceAlgorithmSpecification"] = args ? args.sourceAlgorithmSpecification : undefined;
            resourceInputs["sourceUri"] = args ? args.sourceUri : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["task"] = args ? args.task : undefined;
            resourceInputs["validationSpecification"] = args ? args.validationSpecification : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["modelPackageArn"] = undefined /*out*/;
            resourceInputs["modelPackageStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SagemakerModelPackage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SagemakerModelPackage resources.
 */
export interface SagemakerModelPackageState {
    /**
     * An array of additional Inference Specification objects.
     */
    additionalInferenceSpecifications?: pulumi.Input<pulumi.Input<inputs.SagemakerModelPackageAdditionalInferenceSpecification>[]>;
    /**
     * An array of additional Inference Specification objects.
     */
    additionalInferenceSpecificationsToAdds?: pulumi.Input<pulumi.Input<inputs.SagemakerModelPackageAdditionalInferenceSpecificationsToAdd>[]>;
    /**
     * A description provided for the model approval.
     */
    approvalDescription?: pulumi.Input<string>;
    /**
     * Whether to certify the model package for listing on AWS Marketplace.
     */
    certifyForMarketplace?: pulumi.Input<boolean>;
    /**
     * A unique token that guarantees that the call to this API is idempotent.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * The time at which the model package was created.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The metadata properties associated with the model package versions.
     */
    customerMetadataProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The machine learning domain of the model package you specified.
     */
    domain?: pulumi.Input<string>;
    /**
     * Represents the drift check baselines that can be used when the model monitor is set using the model package.
     */
    driftCheckBaselines?: pulumi.Input<inputs.SagemakerModelPackageDriftCheckBaselines>;
    /**
     * Details about inference jobs that can be run with models based on this model package.
     */
    inferenceSpecification?: pulumi.Input<inputs.SagemakerModelPackageInferenceSpecification>;
    /**
     * The time at which the model package was last modified.
     */
    lastModifiedTime?: pulumi.Input<string>;
    /**
     * Metadata properties of the tracking entity, trial, or trial component.
     */
    metadataProperties?: pulumi.Input<inputs.SagemakerModelPackageMetadataProperties>;
    /**
     * The approval status of the model package.
     */
    modelApprovalStatus?: pulumi.Input<string>;
    /**
     * The model card associated with the model package.
     */
    modelCard?: pulumi.Input<inputs.SagemakerModelPackageModelCard>;
    /**
     * A structure that contains model metrics reports.
     */
    modelMetrics?: pulumi.Input<inputs.SagemakerModelPackageModelMetrics>;
    /**
     * The Amazon Resource Name (ARN) of the model package group.
     */
    modelPackageArn?: pulumi.Input<string>;
    /**
     * The description of the model package.
     */
    modelPackageDescription?: pulumi.Input<string>;
    /**
     * The name of the model package group.
     */
    modelPackageGroupName?: pulumi.Input<string>;
    /**
     * The name or arn of the model package.
     */
    modelPackageName?: pulumi.Input<string>;
    /**
     * The current status of the model package.
     */
    modelPackageStatus?: pulumi.Input<string>;
    /**
     * Details about the current status of the model package.
     */
    modelPackageStatusDetails?: pulumi.Input<inputs.SagemakerModelPackageModelPackageStatusDetails>;
    /**
     * The version of the model package.
     */
    modelPackageVersion?: pulumi.Input<number>;
    /**
     * The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored pointing to single gzip
     * compressed tar archive.
     */
    samplePayloadUrl?: pulumi.Input<string>;
    /**
     * An optional AWS Key Management Service key to encrypt, decrypt, and re-encrypt model package information for regulated
     * workloads with highly sensitive data.
     */
    securityConfig?: pulumi.Input<inputs.SagemakerModelPackageSecurityConfig>;
    /**
     * Indicates if you want to skip model validation.
     */
    skipModelValidation?: pulumi.Input<string>;
    /**
     * Details about the algorithm that was used to create the model package.
     */
    sourceAlgorithmSpecification?: pulumi.Input<inputs.SagemakerModelPackageSourceAlgorithmSpecification>;
    /**
     * The URI of the source for the model package.
     */
    sourceUri?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerModelPackageTag>[]>;
    /**
     * The machine learning task your model package accomplishes.
     */
    task?: pulumi.Input<string>;
    /**
     * Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
     */
    validationSpecification?: pulumi.Input<inputs.SagemakerModelPackageValidationSpecification>;
}

/**
 * The set of arguments for constructing a SagemakerModelPackage resource.
 */
export interface SagemakerModelPackageArgs {
    /**
     * An array of additional Inference Specification objects.
     */
    additionalInferenceSpecifications?: pulumi.Input<pulumi.Input<inputs.SagemakerModelPackageAdditionalInferenceSpecification>[]>;
    /**
     * An array of additional Inference Specification objects.
     */
    additionalInferenceSpecificationsToAdds?: pulumi.Input<pulumi.Input<inputs.SagemakerModelPackageAdditionalInferenceSpecificationsToAdd>[]>;
    /**
     * A description provided for the model approval.
     */
    approvalDescription?: pulumi.Input<string>;
    /**
     * Whether to certify the model package for listing on AWS Marketplace.
     */
    certifyForMarketplace?: pulumi.Input<boolean>;
    /**
     * A unique token that guarantees that the call to this API is idempotent.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * The metadata properties associated with the model package versions.
     */
    customerMetadataProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The machine learning domain of the model package you specified.
     */
    domain?: pulumi.Input<string>;
    /**
     * Represents the drift check baselines that can be used when the model monitor is set using the model package.
     */
    driftCheckBaselines?: pulumi.Input<inputs.SagemakerModelPackageDriftCheckBaselines>;
    /**
     * Details about inference jobs that can be run with models based on this model package.
     */
    inferenceSpecification?: pulumi.Input<inputs.SagemakerModelPackageInferenceSpecification>;
    /**
     * The time at which the model package was last modified.
     */
    lastModifiedTime?: pulumi.Input<string>;
    /**
     * Metadata properties of the tracking entity, trial, or trial component.
     */
    metadataProperties?: pulumi.Input<inputs.SagemakerModelPackageMetadataProperties>;
    /**
     * The approval status of the model package.
     */
    modelApprovalStatus?: pulumi.Input<string>;
    /**
     * The model card associated with the model package.
     */
    modelCard?: pulumi.Input<inputs.SagemakerModelPackageModelCard>;
    /**
     * A structure that contains model metrics reports.
     */
    modelMetrics?: pulumi.Input<inputs.SagemakerModelPackageModelMetrics>;
    /**
     * The description of the model package.
     */
    modelPackageDescription?: pulumi.Input<string>;
    /**
     * The name of the model package group.
     */
    modelPackageGroupName?: pulumi.Input<string>;
    /**
     * The name or arn of the model package.
     */
    modelPackageName?: pulumi.Input<string>;
    /**
     * Details about the current status of the model package.
     */
    modelPackageStatusDetails?: pulumi.Input<inputs.SagemakerModelPackageModelPackageStatusDetails>;
    /**
     * The version of the model package.
     */
    modelPackageVersion?: pulumi.Input<number>;
    /**
     * The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored pointing to single gzip
     * compressed tar archive.
     */
    samplePayloadUrl?: pulumi.Input<string>;
    /**
     * An optional AWS Key Management Service key to encrypt, decrypt, and re-encrypt model package information for regulated
     * workloads with highly sensitive data.
     */
    securityConfig?: pulumi.Input<inputs.SagemakerModelPackageSecurityConfig>;
    /**
     * Indicates if you want to skip model validation.
     */
    skipModelValidation?: pulumi.Input<string>;
    /**
     * Details about the algorithm that was used to create the model package.
     */
    sourceAlgorithmSpecification?: pulumi.Input<inputs.SagemakerModelPackageSourceAlgorithmSpecification>;
    /**
     * The URI of the source for the model package.
     */
    sourceUri?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerModelPackageTag>[]>;
    /**
     * The machine learning task your model package accomplishes.
     */
    task?: pulumi.Input<string>;
    /**
     * Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
     */
    validationSpecification?: pulumi.Input<inputs.SagemakerModelPackageValidationSpecification>;
}
