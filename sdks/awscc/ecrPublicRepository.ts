// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcrPublicRepository extends pulumi.CustomResource {
    /**
     * Get an existing EcrPublicRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcrPublicRepositoryState, opts?: pulumi.CustomResourceOptions): EcrPublicRepository {
        return new EcrPublicRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ecrPublicRepository:EcrPublicRepository';

    /**
     * Returns true if the given object is an instance of EcrPublicRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcrPublicRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcrPublicRepository.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The CatalogData property type specifies Catalog data for ECR Public Repository. For information about Catalog Data, see
     * <link>
     */
    public readonly repositoryCatalogData!: pulumi.Output<outputs.EcrPublicRepositoryRepositoryCatalogData>;
    /**
     * The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be
     * prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don't
     * specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more
     * information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
     */
    public readonly repositoryName!: pulumi.Output<string>;
    /**
     * The JSON repository policy text to apply to the repository. For more information, see
     * https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container
     * Registry User Guide.
     */
    public readonly repositoryPolicyText!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.EcrPublicRepositoryTag[]>;

    /**
     * Create a EcrPublicRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EcrPublicRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcrPublicRepositoryArgs | EcrPublicRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcrPublicRepositoryState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["repositoryCatalogData"] = state ? state.repositoryCatalogData : undefined;
            resourceInputs["repositoryName"] = state ? state.repositoryName : undefined;
            resourceInputs["repositoryPolicyText"] = state ? state.repositoryPolicyText : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as EcrPublicRepositoryArgs | undefined;
            resourceInputs["repositoryCatalogData"] = args ? args.repositoryCatalogData : undefined;
            resourceInputs["repositoryName"] = args ? args.repositoryName : undefined;
            resourceInputs["repositoryPolicyText"] = args ? args.repositoryPolicyText : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcrPublicRepository.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcrPublicRepository resources.
 */
export interface EcrPublicRepositoryState {
    arn?: pulumi.Input<string>;
    /**
     * The CatalogData property type specifies Catalog data for ECR Public Repository. For information about Catalog Data, see
     * <link>
     */
    repositoryCatalogData?: pulumi.Input<inputs.EcrPublicRepositoryRepositoryCatalogData>;
    /**
     * The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be
     * prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don't
     * specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more
     * information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
     */
    repositoryName?: pulumi.Input<string>;
    /**
     * The JSON repository policy text to apply to the repository. For more information, see
     * https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container
     * Registry User Guide.
     */
    repositoryPolicyText?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EcrPublicRepositoryTag>[]>;
}

/**
 * The set of arguments for constructing a EcrPublicRepository resource.
 */
export interface EcrPublicRepositoryArgs {
    /**
     * The CatalogData property type specifies Catalog data for ECR Public Repository. For information about Catalog Data, see
     * <link>
     */
    repositoryCatalogData?: pulumi.Input<inputs.EcrPublicRepositoryRepositoryCatalogData>;
    /**
     * The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be
     * prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don't
     * specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more
     * information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
     */
    repositoryName?: pulumi.Input<string>;
    /**
     * The JSON repository policy text to apply to the repository. For more information, see
     * https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container
     * Registry User Guide.
     */
    repositoryPolicyText?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EcrPublicRepositoryTag>[]>;
}
