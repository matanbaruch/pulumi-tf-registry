// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IottwinmakerScene extends pulumi.CustomResource {
    /**
     * Get an existing IottwinmakerScene resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IottwinmakerSceneState, opts?: pulumi.CustomResourceOptions): IottwinmakerScene {
        return new IottwinmakerScene(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/iottwinmakerScene:IottwinmakerScene';

    /**
     * Returns true if the given object is an instance of IottwinmakerScene.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IottwinmakerScene {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IottwinmakerScene.__pulumiType;
    }

    /**
     * The ARN of the scene.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A list of capabilities that the scene uses to render.
     */
    public readonly capabilities!: pulumi.Output<string[]>;
    /**
     * The relative path that specifies the location of the content definition file.
     */
    public readonly contentLocation!: pulumi.Output<string>;
    /**
     * The date and time when the scene was created.
     */
    public /*out*/ readonly creationDateTime!: pulumi.Output<string>;
    /**
     * The description of the scene.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * A key-value pair of generated scene metadata for the scene.
     */
    public /*out*/ readonly generatedSceneMetadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * The ID of the scene.
     */
    public readonly sceneId!: pulumi.Output<string>;
    /**
     * A key-value pair of scene metadata for the scene.
     */
    public readonly sceneMetadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * A key-value pair to associate with a resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * The date and time of the current update.
     */
    public /*out*/ readonly updateDateTime!: pulumi.Output<string>;
    /**
     * The ID of the scene.
     */
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a IottwinmakerScene resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IottwinmakerSceneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IottwinmakerSceneArgs | IottwinmakerSceneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IottwinmakerSceneState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["contentLocation"] = state ? state.contentLocation : undefined;
            resourceInputs["creationDateTime"] = state ? state.creationDateTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["generatedSceneMetadata"] = state ? state.generatedSceneMetadata : undefined;
            resourceInputs["sceneId"] = state ? state.sceneId : undefined;
            resourceInputs["sceneMetadata"] = state ? state.sceneMetadata : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updateDateTime"] = state ? state.updateDateTime : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as IottwinmakerSceneArgs | undefined;
            if ((!args || args.contentLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentLocation'");
            }
            if ((!args || args.sceneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sceneId'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["contentLocation"] = args ? args.contentLocation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["sceneId"] = args ? args.sceneId : undefined;
            resourceInputs["sceneMetadata"] = args ? args.sceneMetadata : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationDateTime"] = undefined /*out*/;
            resourceInputs["generatedSceneMetadata"] = undefined /*out*/;
            resourceInputs["updateDateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IottwinmakerScene.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IottwinmakerScene resources.
 */
export interface IottwinmakerSceneState {
    /**
     * The ARN of the scene.
     */
    arn?: pulumi.Input<string>;
    /**
     * A list of capabilities that the scene uses to render.
     */
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The relative path that specifies the location of the content definition file.
     */
    contentLocation?: pulumi.Input<string>;
    /**
     * The date and time when the scene was created.
     */
    creationDateTime?: pulumi.Input<string>;
    /**
     * The description of the scene.
     */
    description?: pulumi.Input<string>;
    /**
     * A key-value pair of generated scene metadata for the scene.
     */
    generatedSceneMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the scene.
     */
    sceneId?: pulumi.Input<string>;
    /**
     * A key-value pair of scene metadata for the scene.
     */
    sceneMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The date and time of the current update.
     */
    updateDateTime?: pulumi.Input<string>;
    /**
     * The ID of the scene.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IottwinmakerScene resource.
 */
export interface IottwinmakerSceneArgs {
    /**
     * A list of capabilities that the scene uses to render.
     */
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The relative path that specifies the location of the content definition file.
     */
    contentLocation: pulumi.Input<string>;
    /**
     * The description of the scene.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the scene.
     */
    sceneId: pulumi.Input<string>;
    /**
     * A key-value pair of scene metadata for the scene.
     */
    sceneMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the scene.
     */
    workspaceId: pulumi.Input<string>;
}
