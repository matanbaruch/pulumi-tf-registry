// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedshiftScheduledAction extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftScheduledAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftScheduledActionState, opts?: pulumi.CustomResourceOptions): RedshiftScheduledAction {
        return new RedshiftScheduledAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/redshiftScheduledAction:RedshiftScheduledAction';

    /**
     * Returns true if the given object is an instance of RedshiftScheduledAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftScheduledAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftScheduledAction.__pulumiType;
    }

    /**
     * If true, the schedule is enabled. If false, the scheduled action does not trigger.
     */
    public readonly enable!: pulumi.Output<boolean>;
    /**
     * The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger.
     */
    public readonly endTime!: pulumi.Output<string>;
    /**
     * The IAM role to assume to run the target action.
     */
    public readonly iamRole!: pulumi.Output<string>;
    /**
     * List of times when the scheduled action will run.
     */
    public /*out*/ readonly nextInvocations!: pulumi.Output<string[]>;
    /**
     * The schedule in `at( )` or `cron( )` format.
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * The description of the scheduled action.
     */
    public readonly scheduledActionDescription!: pulumi.Output<string>;
    /**
     * The name of the scheduled action. The name must be unique within an account.
     */
    public readonly scheduledActionName!: pulumi.Output<string>;
    /**
     * The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger.
     */
    public readonly startTime!: pulumi.Output<string>;
    /**
     * The state of the scheduled action.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * A JSON format string of the Amazon Redshift API operation with input parameters.
     */
    public readonly targetAction!: pulumi.Output<outputs.RedshiftScheduledActionTargetAction>;

    /**
     * Create a RedshiftScheduledAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftScheduledActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftScheduledActionArgs | RedshiftScheduledActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftScheduledActionState | undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["iamRole"] = state ? state.iamRole : undefined;
            resourceInputs["nextInvocations"] = state ? state.nextInvocations : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scheduledActionDescription"] = state ? state.scheduledActionDescription : undefined;
            resourceInputs["scheduledActionName"] = state ? state.scheduledActionName : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targetAction"] = state ? state.targetAction : undefined;
        } else {
            const args = argsOrState as RedshiftScheduledActionArgs | undefined;
            if ((!args || args.scheduledActionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduledActionName'");
            }
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["iamRole"] = args ? args.iamRole : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scheduledActionDescription"] = args ? args.scheduledActionDescription : undefined;
            resourceInputs["scheduledActionName"] = args ? args.scheduledActionName : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["targetAction"] = args ? args.targetAction : undefined;
            resourceInputs["nextInvocations"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedshiftScheduledAction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftScheduledAction resources.
 */
export interface RedshiftScheduledActionState {
    /**
     * If true, the schedule is enabled. If false, the scheduled action does not trigger.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger.
     */
    endTime?: pulumi.Input<string>;
    /**
     * The IAM role to assume to run the target action.
     */
    iamRole?: pulumi.Input<string>;
    /**
     * List of times when the scheduled action will run.
     */
    nextInvocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The schedule in `at( )` or `cron( )` format.
     */
    schedule?: pulumi.Input<string>;
    /**
     * The description of the scheduled action.
     */
    scheduledActionDescription?: pulumi.Input<string>;
    /**
     * The name of the scheduled action. The name must be unique within an account.
     */
    scheduledActionName?: pulumi.Input<string>;
    /**
     * The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger.
     */
    startTime?: pulumi.Input<string>;
    /**
     * The state of the scheduled action.
     */
    state?: pulumi.Input<string>;
    /**
     * A JSON format string of the Amazon Redshift API operation with input parameters.
     */
    targetAction?: pulumi.Input<inputs.RedshiftScheduledActionTargetAction>;
}

/**
 * The set of arguments for constructing a RedshiftScheduledAction resource.
 */
export interface RedshiftScheduledActionArgs {
    /**
     * If true, the schedule is enabled. If false, the scheduled action does not trigger.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger.
     */
    endTime?: pulumi.Input<string>;
    /**
     * The IAM role to assume to run the target action.
     */
    iamRole?: pulumi.Input<string>;
    /**
     * The schedule in `at( )` or `cron( )` format.
     */
    schedule?: pulumi.Input<string>;
    /**
     * The description of the scheduled action.
     */
    scheduledActionDescription?: pulumi.Input<string>;
    /**
     * The name of the scheduled action. The name must be unique within an account.
     */
    scheduledActionName: pulumi.Input<string>;
    /**
     * The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger.
     */
    startTime?: pulumi.Input<string>;
    /**
     * A JSON format string of the Amazon Redshift API operation with input parameters.
     */
    targetAction?: pulumi.Input<inputs.RedshiftScheduledActionTargetAction>;
}
