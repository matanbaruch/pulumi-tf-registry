// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MemorydbUser extends pulumi.CustomResource {
    /**
     * Get an existing MemorydbUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MemorydbUserState, opts?: pulumi.CustomResourceOptions): MemorydbUser {
        return new MemorydbUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/memorydbUser:MemorydbUser';

    /**
     * Returns true if the given object is an instance of MemorydbUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MemorydbUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MemorydbUser.__pulumiType;
    }

    /**
     * Access permissions string used for this user account.
     */
    public readonly accessString!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the user account.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authenticationMode!: pulumi.Output<outputs.MemorydbUserAuthenticationMode>;
    /**
     * Indicates the user status. Can be "active", "modifying" or "deleting".
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this user.
     */
    public readonly tags!: pulumi.Output<outputs.MemorydbUserTag[]>;
    /**
     * The name of the user.
     */
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a MemorydbUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MemorydbUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MemorydbUserArgs | MemorydbUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MemorydbUserState | undefined;
            resourceInputs["accessString"] = state ? state.accessString : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authenticationMode"] = state ? state.authenticationMode : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as MemorydbUserArgs | undefined;
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["accessString"] = args ? args.accessString : undefined;
            resourceInputs["authenticationMode"] = args ? args.authenticationMode : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MemorydbUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MemorydbUser resources.
 */
export interface MemorydbUserState {
    /**
     * Access permissions string used for this user account.
     */
    accessString?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the user account.
     */
    arn?: pulumi.Input<string>;
    authenticationMode?: pulumi.Input<inputs.MemorydbUserAuthenticationMode>;
    /**
     * Indicates the user status. Can be "active", "modifying" or "deleting".
     */
    status?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this user.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.MemorydbUserTag>[]>;
    /**
     * The name of the user.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MemorydbUser resource.
 */
export interface MemorydbUserArgs {
    /**
     * Access permissions string used for this user account.
     */
    accessString?: pulumi.Input<string>;
    authenticationMode?: pulumi.Input<inputs.MemorydbUserAuthenticationMode>;
    /**
     * An array of key-value pairs to apply to this user.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.MemorydbUserTag>[]>;
    /**
     * The name of the user.
     */
    userName: pulumi.Input<string>;
}
