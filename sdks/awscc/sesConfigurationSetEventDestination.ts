// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SesConfigurationSetEventDestination extends pulumi.CustomResource {
    /**
     * Get an existing SesConfigurationSetEventDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SesConfigurationSetEventDestinationState, opts?: pulumi.CustomResourceOptions): SesConfigurationSetEventDestination {
        return new SesConfigurationSetEventDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/sesConfigurationSetEventDestination:SesConfigurationSetEventDestination';

    /**
     * Returns true if the given object is an instance of SesConfigurationSetEventDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SesConfigurationSetEventDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SesConfigurationSetEventDestination.__pulumiType;
    }

    public /*out*/ readonly configurationSetEventDestinationId!: pulumi.Output<string>;
    /**
     * The name of the configuration set that contains the event destination.
     */
    public readonly configurationSetName!: pulumi.Output<string>;
    /**
     * The event destination object.
     */
    public readonly eventDestination!: pulumi.Output<outputs.SesConfigurationSetEventDestinationEventDestination>;

    /**
     * Create a SesConfigurationSetEventDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SesConfigurationSetEventDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SesConfigurationSetEventDestinationArgs | SesConfigurationSetEventDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SesConfigurationSetEventDestinationState | undefined;
            resourceInputs["configurationSetEventDestinationId"] = state ? state.configurationSetEventDestinationId : undefined;
            resourceInputs["configurationSetName"] = state ? state.configurationSetName : undefined;
            resourceInputs["eventDestination"] = state ? state.eventDestination : undefined;
        } else {
            const args = argsOrState as SesConfigurationSetEventDestinationArgs | undefined;
            if ((!args || args.configurationSetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationSetName'");
            }
            if ((!args || args.eventDestination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventDestination'");
            }
            resourceInputs["configurationSetName"] = args ? args.configurationSetName : undefined;
            resourceInputs["eventDestination"] = args ? args.eventDestination : undefined;
            resourceInputs["configurationSetEventDestinationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SesConfigurationSetEventDestination.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SesConfigurationSetEventDestination resources.
 */
export interface SesConfigurationSetEventDestinationState {
    configurationSetEventDestinationId?: pulumi.Input<string>;
    /**
     * The name of the configuration set that contains the event destination.
     */
    configurationSetName?: pulumi.Input<string>;
    /**
     * The event destination object.
     */
    eventDestination?: pulumi.Input<inputs.SesConfigurationSetEventDestinationEventDestination>;
}

/**
 * The set of arguments for constructing a SesConfigurationSetEventDestination resource.
 */
export interface SesConfigurationSetEventDestinationArgs {
    /**
     * The name of the configuration set that contains the event destination.
     */
    configurationSetName: pulumi.Input<string>;
    /**
     * The event destination object.
     */
    eventDestination: pulumi.Input<inputs.SesConfigurationSetEventDestinationEventDestination>;
}
