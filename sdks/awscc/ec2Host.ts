// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ec2Host extends pulumi.CustomResource {
    /**
     * Get an existing Ec2Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2HostState, opts?: pulumi.CustomResourceOptions): Ec2Host {
        return new Ec2Host(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2Host:Ec2Host';

    /**
     * Returns true if the given object is an instance of Ec2Host.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2Host {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2Host.__pulumiType;
    }

    /**
     * The ID of the Outpost hardware asset.
     */
    public readonly assetId!: pulumi.Output<string>;
    /**
     * Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it
     * only accepts Host tenancy instance launches that specify its unique host ID.
     */
    public readonly autoPlacement!: pulumi.Output<string>;
    /**
     * The Availability Zone in which to allocate the Dedicated Host.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * ID of the host created.
     */
    public /*out*/ readonly hostId!: pulumi.Output<string>;
    /**
     * Automatically allocates a new dedicated host and moves your instances on to it if a degradation is detected on your
     * current host.
     */
    public readonly hostMaintenance!: pulumi.Output<string>;
    /**
     * Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
     */
    public readonly hostRecovery!: pulumi.Output<string>;
    /**
     * Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated
     * Hosts support multiple instance types within that instance family.
     */
    public readonly instanceFamily!: pulumi.Output<string>;
    /**
     * Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts
     * support instances of the specified instance type only.
     */
    public readonly instanceType!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon Web Services Outpost on which to allocate the Dedicated Host.
     */
    public readonly outpostArn!: pulumi.Output<string>;

    /**
     * Create a Ec2Host resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2HostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2HostArgs | Ec2HostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2HostState | undefined;
            resourceInputs["assetId"] = state ? state.assetId : undefined;
            resourceInputs["autoPlacement"] = state ? state.autoPlacement : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["hostId"] = state ? state.hostId : undefined;
            resourceInputs["hostMaintenance"] = state ? state.hostMaintenance : undefined;
            resourceInputs["hostRecovery"] = state ? state.hostRecovery : undefined;
            resourceInputs["instanceFamily"] = state ? state.instanceFamily : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["outpostArn"] = state ? state.outpostArn : undefined;
        } else {
            const args = argsOrState as Ec2HostArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            resourceInputs["assetId"] = args ? args.assetId : undefined;
            resourceInputs["autoPlacement"] = args ? args.autoPlacement : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["hostMaintenance"] = args ? args.hostMaintenance : undefined;
            resourceInputs["hostRecovery"] = args ? args.hostRecovery : undefined;
            resourceInputs["instanceFamily"] = args ? args.instanceFamily : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["outpostArn"] = args ? args.outpostArn : undefined;
            resourceInputs["hostId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2Host.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2Host resources.
 */
export interface Ec2HostState {
    /**
     * The ID of the Outpost hardware asset.
     */
    assetId?: pulumi.Input<string>;
    /**
     * Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it
     * only accepts Host tenancy instance launches that specify its unique host ID.
     */
    autoPlacement?: pulumi.Input<string>;
    /**
     * The Availability Zone in which to allocate the Dedicated Host.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * ID of the host created.
     */
    hostId?: pulumi.Input<string>;
    /**
     * Automatically allocates a new dedicated host and moves your instances on to it if a degradation is detected on your
     * current host.
     */
    hostMaintenance?: pulumi.Input<string>;
    /**
     * Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
     */
    hostRecovery?: pulumi.Input<string>;
    /**
     * Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated
     * Hosts support multiple instance types within that instance family.
     */
    instanceFamily?: pulumi.Input<string>;
    /**
     * Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts
     * support instances of the specified instance type only.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon Web Services Outpost on which to allocate the Dedicated Host.
     */
    outpostArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2Host resource.
 */
export interface Ec2HostArgs {
    /**
     * The ID of the Outpost hardware asset.
     */
    assetId?: pulumi.Input<string>;
    /**
     * Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it
     * only accepts Host tenancy instance launches that specify its unique host ID.
     */
    autoPlacement?: pulumi.Input<string>;
    /**
     * The Availability Zone in which to allocate the Dedicated Host.
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * Automatically allocates a new dedicated host and moves your instances on to it if a degradation is detected on your
     * current host.
     */
    hostMaintenance?: pulumi.Input<string>;
    /**
     * Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
     */
    hostRecovery?: pulumi.Input<string>;
    /**
     * Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated
     * Hosts support multiple instance types within that instance family.
     */
    instanceFamily?: pulumi.Input<string>;
    /**
     * Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts
     * support instances of the specified instance type only.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon Web Services Outpost on which to allocate the Dedicated Host.
     */
    outpostArn?: pulumi.Input<string>;
}
