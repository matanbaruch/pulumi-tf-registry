// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KendraDataSource extends pulumi.CustomResource {
    /**
     * Get an existing KendraDataSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KendraDataSourceState, opts?: pulumi.CustomResourceOptions): KendraDataSource {
        return new KendraDataSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/kendraDataSource:KendraDataSource';

    /**
     * Returns true if the given object is an instance of KendraDataSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KendraDataSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KendraDataSource.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly customDocumentEnrichmentConfiguration!: pulumi.Output<outputs.KendraDataSourceCustomDocumentEnrichmentConfiguration>;
    public readonly dataSourceConfiguration!: pulumi.Output<outputs.KendraDataSourceDataSourceConfiguration>;
    /**
     * ID of data source
     */
    public /*out*/ readonly dataSourceId!: pulumi.Output<string>;
    /**
     * Description of data source
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * ID of Index
     */
    public readonly indexId!: pulumi.Output<string>;
    /**
     * The code for a language.
     */
    public readonly languageCode!: pulumi.Output<string>;
    /**
     * Name of data source
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Role ARN
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * Schedule
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * Tags for labeling the data source
     */
    public readonly tags!: pulumi.Output<outputs.KendraDataSourceTag[]>;
    /**
     * Data source type
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a KendraDataSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KendraDataSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KendraDataSourceArgs | KendraDataSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KendraDataSourceState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["customDocumentEnrichmentConfiguration"] = state ? state.customDocumentEnrichmentConfiguration : undefined;
            resourceInputs["dataSourceConfiguration"] = state ? state.dataSourceConfiguration : undefined;
            resourceInputs["dataSourceId"] = state ? state.dataSourceId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["indexId"] = state ? state.indexId : undefined;
            resourceInputs["languageCode"] = state ? state.languageCode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as KendraDataSourceArgs | undefined;
            if ((!args || args.indexId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["customDocumentEnrichmentConfiguration"] = args ? args.customDocumentEnrichmentConfiguration : undefined;
            resourceInputs["dataSourceConfiguration"] = args ? args.dataSourceConfiguration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["indexId"] = args ? args.indexId : undefined;
            resourceInputs["languageCode"] = args ? args.languageCode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dataSourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KendraDataSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KendraDataSource resources.
 */
export interface KendraDataSourceState {
    arn?: pulumi.Input<string>;
    customDocumentEnrichmentConfiguration?: pulumi.Input<inputs.KendraDataSourceCustomDocumentEnrichmentConfiguration>;
    dataSourceConfiguration?: pulumi.Input<inputs.KendraDataSourceDataSourceConfiguration>;
    /**
     * ID of data source
     */
    dataSourceId?: pulumi.Input<string>;
    /**
     * Description of data source
     */
    description?: pulumi.Input<string>;
    /**
     * ID of Index
     */
    indexId?: pulumi.Input<string>;
    /**
     * The code for a language.
     */
    languageCode?: pulumi.Input<string>;
    /**
     * Name of data source
     */
    name?: pulumi.Input<string>;
    /**
     * Role ARN
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Schedule
     */
    schedule?: pulumi.Input<string>;
    /**
     * Tags for labeling the data source
     */
    tags?: pulumi.Input<pulumi.Input<inputs.KendraDataSourceTag>[]>;
    /**
     * Data source type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KendraDataSource resource.
 */
export interface KendraDataSourceArgs {
    customDocumentEnrichmentConfiguration?: pulumi.Input<inputs.KendraDataSourceCustomDocumentEnrichmentConfiguration>;
    dataSourceConfiguration?: pulumi.Input<inputs.KendraDataSourceDataSourceConfiguration>;
    /**
     * Description of data source
     */
    description?: pulumi.Input<string>;
    /**
     * ID of Index
     */
    indexId: pulumi.Input<string>;
    /**
     * The code for a language.
     */
    languageCode?: pulumi.Input<string>;
    /**
     * Name of data source
     */
    name?: pulumi.Input<string>;
    /**
     * Role ARN
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Schedule
     */
    schedule?: pulumi.Input<string>;
    /**
     * Tags for labeling the data source
     */
    tags?: pulumi.Input<pulumi.Input<inputs.KendraDataSourceTag>[]>;
    /**
     * Data source type
     */
    type: pulumi.Input<string>;
}
