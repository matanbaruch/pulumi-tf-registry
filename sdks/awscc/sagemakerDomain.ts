// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SagemakerDomain extends pulumi.CustomResource {
    /**
     * Get an existing SagemakerDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SagemakerDomainState, opts?: pulumi.CustomResourceOptions): SagemakerDomain {
        return new SagemakerDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/sagemakerDomain:SagemakerDomain';

    /**
     * Returns true if the given object is an instance of SagemakerDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SagemakerDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SagemakerDomain.__pulumiType;
    }

    /**
     * Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
     */
    public readonly appNetworkAccessType!: pulumi.Output<string>;
    /**
     * The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Required
     * when CreateDomain.AppNetworkAccessType is VPCOnly and
     * DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is provided.
     */
    public readonly appSecurityGroupManagement!: pulumi.Output<string>;
    /**
     * The mode of authentication that members use to access the domain.
     */
    public readonly authMode!: pulumi.Output<string>;
    /**
     * The default space settings.
     */
    public readonly defaultSpaceSettings!: pulumi.Output<outputs.SagemakerDomainDefaultSpaceSettings>;
    /**
     * The default user settings.
     */
    public readonly defaultUserSettings!: pulumi.Output<outputs.SagemakerDomainDefaultUserSettings>;
    /**
     * The Amazon Resource Name (ARN) of the created domain.
     */
    public /*out*/ readonly domainArn!: pulumi.Output<string>;
    /**
     * The domain name.
     */
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    /**
     * A name for the domain.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * A collection of Domain settings.
     */
    public readonly domainSettings!: pulumi.Output<outputs.SagemakerDomainDomainSettings>;
    /**
     * The ID of the Amazon Elastic File System (EFS) managed by this Domain.
     */
    public /*out*/ readonly homeEfsFileSystemId!: pulumi.Output<string>;
    /**
     * SageMaker uses AWS KMS to encrypt the EFS volume attached to the domain with an AWS managed customer master key (CMK) by
     * default.
     */
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * The ID of the security group that authorizes traffic between the RSessionGateway apps and the RStudioServerPro app.
     */
    public /*out*/ readonly securityGroupIdForDomainBoundary!: pulumi.Output<string>;
    /**
     * The ARN of the application managed by SageMaker in IAM Identity Center. This value is only returned for domains created
     * after October 1, 2023.
     */
    public /*out*/ readonly singleSignOnApplicationArn!: pulumi.Output<string>;
    /**
     * The SSO managed application instance ID.
     */
    public /*out*/ readonly singleSignOnManagedApplicationInstanceId!: pulumi.Output<string>;
    /**
     * The VPC subnets that Studio uses for communication.
     */
    public readonly subnetIds!: pulumi.Output<string[]>;
    /**
     * A list of tags to apply to the user profile.
     */
    public readonly tags!: pulumi.Output<outputs.SagemakerDomainTag[]>;
    /**
     * The URL to the created domain.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a SagemakerDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SagemakerDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SagemakerDomainArgs | SagemakerDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SagemakerDomainState | undefined;
            resourceInputs["appNetworkAccessType"] = state ? state.appNetworkAccessType : undefined;
            resourceInputs["appSecurityGroupManagement"] = state ? state.appSecurityGroupManagement : undefined;
            resourceInputs["authMode"] = state ? state.authMode : undefined;
            resourceInputs["defaultSpaceSettings"] = state ? state.defaultSpaceSettings : undefined;
            resourceInputs["defaultUserSettings"] = state ? state.defaultUserSettings : undefined;
            resourceInputs["domainArn"] = state ? state.domainArn : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainSettings"] = state ? state.domainSettings : undefined;
            resourceInputs["homeEfsFileSystemId"] = state ? state.homeEfsFileSystemId : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["securityGroupIdForDomainBoundary"] = state ? state.securityGroupIdForDomainBoundary : undefined;
            resourceInputs["singleSignOnApplicationArn"] = state ? state.singleSignOnApplicationArn : undefined;
            resourceInputs["singleSignOnManagedApplicationInstanceId"] = state ? state.singleSignOnManagedApplicationInstanceId : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as SagemakerDomainArgs | undefined;
            if ((!args || args.authMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authMode'");
            }
            if ((!args || args.defaultUserSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultUserSettings'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["appNetworkAccessType"] = args ? args.appNetworkAccessType : undefined;
            resourceInputs["appSecurityGroupManagement"] = args ? args.appSecurityGroupManagement : undefined;
            resourceInputs["authMode"] = args ? args.authMode : undefined;
            resourceInputs["defaultSpaceSettings"] = args ? args.defaultSpaceSettings : undefined;
            resourceInputs["defaultUserSettings"] = args ? args.defaultUserSettings : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainSettings"] = args ? args.domainSettings : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["domainArn"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["homeEfsFileSystemId"] = undefined /*out*/;
            resourceInputs["securityGroupIdForDomainBoundary"] = undefined /*out*/;
            resourceInputs["singleSignOnApplicationArn"] = undefined /*out*/;
            resourceInputs["singleSignOnManagedApplicationInstanceId"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SagemakerDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SagemakerDomain resources.
 */
export interface SagemakerDomainState {
    /**
     * Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
     */
    appNetworkAccessType?: pulumi.Input<string>;
    /**
     * The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Required
     * when CreateDomain.AppNetworkAccessType is VPCOnly and
     * DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is provided.
     */
    appSecurityGroupManagement?: pulumi.Input<string>;
    /**
     * The mode of authentication that members use to access the domain.
     */
    authMode?: pulumi.Input<string>;
    /**
     * The default space settings.
     */
    defaultSpaceSettings?: pulumi.Input<inputs.SagemakerDomainDefaultSpaceSettings>;
    /**
     * The default user settings.
     */
    defaultUserSettings?: pulumi.Input<inputs.SagemakerDomainDefaultUserSettings>;
    /**
     * The Amazon Resource Name (ARN) of the created domain.
     */
    domainArn?: pulumi.Input<string>;
    /**
     * The domain name.
     */
    domainId?: pulumi.Input<string>;
    /**
     * A name for the domain.
     */
    domainName?: pulumi.Input<string>;
    /**
     * A collection of Domain settings.
     */
    domainSettings?: pulumi.Input<inputs.SagemakerDomainDomainSettings>;
    /**
     * The ID of the Amazon Elastic File System (EFS) managed by this Domain.
     */
    homeEfsFileSystemId?: pulumi.Input<string>;
    /**
     * SageMaker uses AWS KMS to encrypt the EFS volume attached to the domain with an AWS managed customer master key (CMK) by
     * default.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The ID of the security group that authorizes traffic between the RSessionGateway apps and the RStudioServerPro app.
     */
    securityGroupIdForDomainBoundary?: pulumi.Input<string>;
    /**
     * The ARN of the application managed by SageMaker in IAM Identity Center. This value is only returned for domains created
     * after October 1, 2023.
     */
    singleSignOnApplicationArn?: pulumi.Input<string>;
    /**
     * The SSO managed application instance ID.
     */
    singleSignOnManagedApplicationInstanceId?: pulumi.Input<string>;
    /**
     * The VPC subnets that Studio uses for communication.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tags to apply to the user profile.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerDomainTag>[]>;
    /**
     * The URL to the created domain.
     */
    url?: pulumi.Input<string>;
    /**
     * The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SagemakerDomain resource.
 */
export interface SagemakerDomainArgs {
    /**
     * Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
     */
    appNetworkAccessType?: pulumi.Input<string>;
    /**
     * The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Required
     * when CreateDomain.AppNetworkAccessType is VPCOnly and
     * DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is provided.
     */
    appSecurityGroupManagement?: pulumi.Input<string>;
    /**
     * The mode of authentication that members use to access the domain.
     */
    authMode: pulumi.Input<string>;
    /**
     * The default space settings.
     */
    defaultSpaceSettings?: pulumi.Input<inputs.SagemakerDomainDefaultSpaceSettings>;
    /**
     * The default user settings.
     */
    defaultUserSettings: pulumi.Input<inputs.SagemakerDomainDefaultUserSettings>;
    /**
     * A name for the domain.
     */
    domainName: pulumi.Input<string>;
    /**
     * A collection of Domain settings.
     */
    domainSettings?: pulumi.Input<inputs.SagemakerDomainDomainSettings>;
    /**
     * SageMaker uses AWS KMS to encrypt the EFS volume attached to the domain with an AWS managed customer master key (CMK) by
     * default.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The VPC subnets that Studio uses for communication.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tags to apply to the user profile.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerDomainTag>[]>;
    /**
     * The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
     */
    vpcId: pulumi.Input<string>;
}
