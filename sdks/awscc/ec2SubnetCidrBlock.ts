// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ec2SubnetCidrBlock extends pulumi.CustomResource {
    /**
     * Get an existing Ec2SubnetCidrBlock resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2SubnetCidrBlockState, opts?: pulumi.CustomResourceOptions): Ec2SubnetCidrBlock {
        return new Ec2SubnetCidrBlock(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2SubnetCidrBlock:Ec2SubnetCidrBlock';

    /**
     * Returns true if the given object is an instance of Ec2SubnetCidrBlock.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2SubnetCidrBlock {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2SubnetCidrBlock.__pulumiType;
    }

    /**
     * The IP Source of an IPv6 Subnet CIDR Block.
     */
    public /*out*/ readonly ipSource!: pulumi.Output<string>;
    /**
     * The value denoting whether an IPv6 Subnet CIDR Block is public or private.
     */
    public /*out*/ readonly ipv6AddressAttribute!: pulumi.Output<string>;
    /**
     * The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length
     */
    public readonly ipv6CidrBlock!: pulumi.Output<string>;
    /**
     * The ID of an IPv6 Amazon VPC IP Address Manager (IPAM) pool from which to allocate, to get the subnet's CIDR
     */
    public readonly ipv6IpamPoolId!: pulumi.Output<string>;
    /**
     * The netmask length of the IPv6 CIDR to allocate to the subnet from an IPAM pool
     */
    public readonly ipv6NetmaskLength!: pulumi.Output<number>;
    /**
     * Information about the IPv6 association.
     */
    public /*out*/ readonly subnetCidrBlockId!: pulumi.Output<string>;
    /**
     * The ID of the subnet
     */
    public readonly subnetId!: pulumi.Output<string>;

    /**
     * Create a Ec2SubnetCidrBlock resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2SubnetCidrBlockArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2SubnetCidrBlockArgs | Ec2SubnetCidrBlockState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2SubnetCidrBlockState | undefined;
            resourceInputs["ipSource"] = state ? state.ipSource : undefined;
            resourceInputs["ipv6AddressAttribute"] = state ? state.ipv6AddressAttribute : undefined;
            resourceInputs["ipv6CidrBlock"] = state ? state.ipv6CidrBlock : undefined;
            resourceInputs["ipv6IpamPoolId"] = state ? state.ipv6IpamPoolId : undefined;
            resourceInputs["ipv6NetmaskLength"] = state ? state.ipv6NetmaskLength : undefined;
            resourceInputs["subnetCidrBlockId"] = state ? state.subnetCidrBlockId : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
        } else {
            const args = argsOrState as Ec2SubnetCidrBlockArgs | undefined;
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["ipv6CidrBlock"] = args ? args.ipv6CidrBlock : undefined;
            resourceInputs["ipv6IpamPoolId"] = args ? args.ipv6IpamPoolId : undefined;
            resourceInputs["ipv6NetmaskLength"] = args ? args.ipv6NetmaskLength : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["ipSource"] = undefined /*out*/;
            resourceInputs["ipv6AddressAttribute"] = undefined /*out*/;
            resourceInputs["subnetCidrBlockId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2SubnetCidrBlock.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2SubnetCidrBlock resources.
 */
export interface Ec2SubnetCidrBlockState {
    /**
     * The IP Source of an IPv6 Subnet CIDR Block.
     */
    ipSource?: pulumi.Input<string>;
    /**
     * The value denoting whether an IPv6 Subnet CIDR Block is public or private.
     */
    ipv6AddressAttribute?: pulumi.Input<string>;
    /**
     * The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    /**
     * The ID of an IPv6 Amazon VPC IP Address Manager (IPAM) pool from which to allocate, to get the subnet's CIDR
     */
    ipv6IpamPoolId?: pulumi.Input<string>;
    /**
     * The netmask length of the IPv6 CIDR to allocate to the subnet from an IPAM pool
     */
    ipv6NetmaskLength?: pulumi.Input<number>;
    /**
     * Information about the IPv6 association.
     */
    subnetCidrBlockId?: pulumi.Input<string>;
    /**
     * The ID of the subnet
     */
    subnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2SubnetCidrBlock resource.
 */
export interface Ec2SubnetCidrBlockArgs {
    /**
     * The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    /**
     * The ID of an IPv6 Amazon VPC IP Address Manager (IPAM) pool from which to allocate, to get the subnet's CIDR
     */
    ipv6IpamPoolId?: pulumi.Input<string>;
    /**
     * The netmask length of the IPv6 CIDR to allocate to the subnet from an IPAM pool
     */
    ipv6NetmaskLength?: pulumi.Input<number>;
    /**
     * The ID of the subnet
     */
    subnetId: pulumi.Input<string>;
}
