// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MediatailorLiveSource extends pulumi.CustomResource {
    /**
     * Get an existing MediatailorLiveSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MediatailorLiveSourceState, opts?: pulumi.CustomResourceOptions): MediatailorLiveSource {
        return new MediatailorLiveSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/mediatailorLiveSource:MediatailorLiveSource';

    /**
     * Returns true if the given object is an instance of MediatailorLiveSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MediatailorLiveSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MediatailorLiveSource.__pulumiType;
    }

    /**
     * <p>The ARN of the live source.</p>
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * <p>A list of HTTP package configuration parameters for this live source.</p>
     */
    public readonly httpPackageConfigurations!: pulumi.Output<outputs.MediatailorLiveSourceHttpPackageConfiguration[]>;
    public readonly liveSourceName!: pulumi.Output<string>;
    public readonly sourceLocationName!: pulumi.Output<string>;
    /**
     * The tags to assign to the live source.
     */
    public readonly tags!: pulumi.Output<outputs.MediatailorLiveSourceTag[]>;

    /**
     * Create a MediatailorLiveSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MediatailorLiveSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MediatailorLiveSourceArgs | MediatailorLiveSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MediatailorLiveSourceState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["httpPackageConfigurations"] = state ? state.httpPackageConfigurations : undefined;
            resourceInputs["liveSourceName"] = state ? state.liveSourceName : undefined;
            resourceInputs["sourceLocationName"] = state ? state.sourceLocationName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as MediatailorLiveSourceArgs | undefined;
            if ((!args || args.httpPackageConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpPackageConfigurations'");
            }
            if ((!args || args.liveSourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'liveSourceName'");
            }
            if ((!args || args.sourceLocationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceLocationName'");
            }
            resourceInputs["httpPackageConfigurations"] = args ? args.httpPackageConfigurations : undefined;
            resourceInputs["liveSourceName"] = args ? args.liveSourceName : undefined;
            resourceInputs["sourceLocationName"] = args ? args.sourceLocationName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MediatailorLiveSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MediatailorLiveSource resources.
 */
export interface MediatailorLiveSourceState {
    /**
     * <p>The ARN of the live source.</p>
     */
    arn?: pulumi.Input<string>;
    /**
     * <p>A list of HTTP package configuration parameters for this live source.</p>
     */
    httpPackageConfigurations?: pulumi.Input<pulumi.Input<inputs.MediatailorLiveSourceHttpPackageConfiguration>[]>;
    liveSourceName?: pulumi.Input<string>;
    sourceLocationName?: pulumi.Input<string>;
    /**
     * The tags to assign to the live source.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.MediatailorLiveSourceTag>[]>;
}

/**
 * The set of arguments for constructing a MediatailorLiveSource resource.
 */
export interface MediatailorLiveSourceArgs {
    /**
     * <p>A list of HTTP package configuration parameters for this live source.</p>
     */
    httpPackageConfigurations: pulumi.Input<pulumi.Input<inputs.MediatailorLiveSourceHttpPackageConfiguration>[]>;
    liveSourceName: pulumi.Input<string>;
    sourceLocationName: pulumi.Input<string>;
    /**
     * The tags to assign to the live source.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.MediatailorLiveSourceTag>[]>;
}
