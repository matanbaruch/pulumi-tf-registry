// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EventschemasDiscoverer extends pulumi.CustomResource {
    /**
     * Get an existing EventschemasDiscoverer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventschemasDiscovererState, opts?: pulumi.CustomResourceOptions): EventschemasDiscoverer {
        return new EventschemasDiscoverer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/eventschemasDiscoverer:EventschemasDiscoverer';

    /**
     * Returns true if the given object is an instance of EventschemasDiscoverer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventschemasDiscoverer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventschemasDiscoverer.__pulumiType;
    }

    /**
     * Defines whether event schemas from other accounts are discovered. Default is True.
     */
    public readonly crossAccount!: pulumi.Output<boolean>;
    /**
     * A description for the discoverer.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The ARN of the discoverer.
     */
    public /*out*/ readonly discovererArn!: pulumi.Output<string>;
    /**
     * The Id of the discoverer.
     */
    public /*out*/ readonly discovererId!: pulumi.Output<string>;
    /**
     * The ARN of the event bus.
     */
    public readonly sourceArn!: pulumi.Output<string>;
    /**
     * Defines the current state of the discoverer.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Tags associated with the resource.
     */
    public readonly tags!: pulumi.Output<outputs.EventschemasDiscovererTag[]>;

    /**
     * Create a EventschemasDiscoverer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventschemasDiscovererArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventschemasDiscovererArgs | EventschemasDiscovererState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventschemasDiscovererState | undefined;
            resourceInputs["crossAccount"] = state ? state.crossAccount : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["discovererArn"] = state ? state.discovererArn : undefined;
            resourceInputs["discovererId"] = state ? state.discovererId : undefined;
            resourceInputs["sourceArn"] = state ? state.sourceArn : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as EventschemasDiscovererArgs | undefined;
            if ((!args || args.sourceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceArn'");
            }
            resourceInputs["crossAccount"] = args ? args.crossAccount : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["sourceArn"] = args ? args.sourceArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["discovererArn"] = undefined /*out*/;
            resourceInputs["discovererId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventschemasDiscoverer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventschemasDiscoverer resources.
 */
export interface EventschemasDiscovererState {
    /**
     * Defines whether event schemas from other accounts are discovered. Default is True.
     */
    crossAccount?: pulumi.Input<boolean>;
    /**
     * A description for the discoverer.
     */
    description?: pulumi.Input<string>;
    /**
     * The ARN of the discoverer.
     */
    discovererArn?: pulumi.Input<string>;
    /**
     * The Id of the discoverer.
     */
    discovererId?: pulumi.Input<string>;
    /**
     * The ARN of the event bus.
     */
    sourceArn?: pulumi.Input<string>;
    /**
     * Defines the current state of the discoverer.
     */
    state?: pulumi.Input<string>;
    /**
     * Tags associated with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EventschemasDiscovererTag>[]>;
}

/**
 * The set of arguments for constructing a EventschemasDiscoverer resource.
 */
export interface EventschemasDiscovererArgs {
    /**
     * Defines whether event schemas from other accounts are discovered. Default is True.
     */
    crossAccount?: pulumi.Input<boolean>;
    /**
     * A description for the discoverer.
     */
    description?: pulumi.Input<string>;
    /**
     * The ARN of the event bus.
     */
    sourceArn: pulumi.Input<string>;
    /**
     * Tags associated with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EventschemasDiscovererTag>[]>;
}
