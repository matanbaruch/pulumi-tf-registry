// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EventsRule extends pulumi.CustomResource {
    /**
     * Get an existing EventsRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventsRuleState, opts?: pulumi.CustomResourceOptions): EventsRule {
        return new EventsRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/eventsRule:EventsRule';

    /**
     * Returns true if the given object is an instance of EventsRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventsRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventsRule.__pulumiType;
    }

    /**
     * The ARN of the rule, such as arn:aws:events:us-east-2:123456789012:rule/example.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The description of the rule.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
     */
    public readonly eventBusName!: pulumi.Output<string>;
    /**
     * The event pattern of the rule. For more information, see Events and Event Patterns in the Amazon EventBridge User Guide.
     */
    public readonly eventPattern!: pulumi.Output<string>;
    /**
     * The name of the rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the role that is used for target invocation.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see Creating an
     * Amazon EventBridge rule that runs on a schedule.
     */
    public readonly scheduleExpression!: pulumi.Output<string>;
    /**
     * The state of the rule.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule.
     * Targets are the resources that are invoked when a rule is triggered.
     */
    public readonly targets!: pulumi.Output<outputs.EventsRuleTarget[]>;

    /**
     * Create a EventsRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EventsRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventsRuleArgs | EventsRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventsRuleState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventBusName"] = state ? state.eventBusName : undefined;
            resourceInputs["eventPattern"] = state ? state.eventPattern : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["scheduleExpression"] = state ? state.scheduleExpression : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
        } else {
            const args = argsOrState as EventsRuleArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventBusName"] = args ? args.eventBusName : undefined;
            resourceInputs["eventPattern"] = args ? args.eventPattern : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["scheduleExpression"] = args ? args.scheduleExpression : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventsRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventsRule resources.
 */
export interface EventsRuleState {
    /**
     * The ARN of the rule, such as arn:aws:events:us-east-2:123456789012:rule/example.
     */
    arn?: pulumi.Input<string>;
    /**
     * The description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
     */
    eventBusName?: pulumi.Input<string>;
    /**
     * The event pattern of the rule. For more information, see Events and Event Patterns in the Amazon EventBridge User Guide.
     */
    eventPattern?: pulumi.Input<string>;
    /**
     * The name of the rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the role that is used for target invocation.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see Creating an
     * Amazon EventBridge rule that runs on a schedule.
     */
    scheduleExpression?: pulumi.Input<string>;
    /**
     * The state of the rule.
     */
    state?: pulumi.Input<string>;
    /**
     * Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule.
     * Targets are the resources that are invoked when a rule is triggered.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.EventsRuleTarget>[]>;
}

/**
 * The set of arguments for constructing a EventsRule resource.
 */
export interface EventsRuleArgs {
    /**
     * The description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
     */
    eventBusName?: pulumi.Input<string>;
    /**
     * The event pattern of the rule. For more information, see Events and Event Patterns in the Amazon EventBridge User Guide.
     */
    eventPattern?: pulumi.Input<string>;
    /**
     * The name of the rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the role that is used for target invocation.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see Creating an
     * Amazon EventBridge rule that runs on a schedule.
     */
    scheduleExpression?: pulumi.Input<string>;
    /**
     * The state of the rule.
     */
    state?: pulumi.Input<string>;
    /**
     * Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule.
     * Targets are the resources that are invoked when a rule is triggered.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.EventsRuleTarget>[]>;
}
