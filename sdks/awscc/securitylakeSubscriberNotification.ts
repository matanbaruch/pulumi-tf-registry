// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecuritylakeSubscriberNotification extends pulumi.CustomResource {
    /**
     * Get an existing SecuritylakeSubscriberNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecuritylakeSubscriberNotificationState, opts?: pulumi.CustomResourceOptions): SecuritylakeSubscriberNotification {
        return new SecuritylakeSubscriberNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/securitylakeSubscriberNotification:SecuritylakeSubscriberNotification';

    /**
     * Returns true if the given object is an instance of SecuritylakeSubscriberNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecuritylakeSubscriberNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecuritylakeSubscriberNotification.__pulumiType;
    }

    public readonly notificationConfiguration!: pulumi.Output<outputs.SecuritylakeSubscriberNotificationNotificationConfiguration>;
    /**
     * The ARN for the subscriber
     */
    public readonly subscriberArn!: pulumi.Output<string>;
    /**
     * The endpoint the subscriber should listen to for notifications
     */
    public /*out*/ readonly subscriberEndpoint!: pulumi.Output<string>;

    /**
     * Create a SecuritylakeSubscriberNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecuritylakeSubscriberNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecuritylakeSubscriberNotificationArgs | SecuritylakeSubscriberNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecuritylakeSubscriberNotificationState | undefined;
            resourceInputs["notificationConfiguration"] = state ? state.notificationConfiguration : undefined;
            resourceInputs["subscriberArn"] = state ? state.subscriberArn : undefined;
            resourceInputs["subscriberEndpoint"] = state ? state.subscriberEndpoint : undefined;
        } else {
            const args = argsOrState as SecuritylakeSubscriberNotificationArgs | undefined;
            if ((!args || args.notificationConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationConfiguration'");
            }
            if ((!args || args.subscriberArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriberArn'");
            }
            resourceInputs["notificationConfiguration"] = args ? args.notificationConfiguration : undefined;
            resourceInputs["subscriberArn"] = args ? args.subscriberArn : undefined;
            resourceInputs["subscriberEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecuritylakeSubscriberNotification.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecuritylakeSubscriberNotification resources.
 */
export interface SecuritylakeSubscriberNotificationState {
    notificationConfiguration?: pulumi.Input<inputs.SecuritylakeSubscriberNotificationNotificationConfiguration>;
    /**
     * The ARN for the subscriber
     */
    subscriberArn?: pulumi.Input<string>;
    /**
     * The endpoint the subscriber should listen to for notifications
     */
    subscriberEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecuritylakeSubscriberNotification resource.
 */
export interface SecuritylakeSubscriberNotificationArgs {
    notificationConfiguration: pulumi.Input<inputs.SecuritylakeSubscriberNotificationNotificationConfiguration>;
    /**
     * The ARN for the subscriber
     */
    subscriberArn: pulumi.Input<string>;
}
