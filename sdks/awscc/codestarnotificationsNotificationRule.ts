// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CodestarnotificationsNotificationRule extends pulumi.CustomResource {
    /**
     * Get an existing CodestarnotificationsNotificationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodestarnotificationsNotificationRuleState, opts?: pulumi.CustomResourceOptions): CodestarnotificationsNotificationRule {
        return new CodestarnotificationsNotificationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/codestarnotificationsNotificationRule:CodestarnotificationsNotificationRule';

    /**
     * Returns true if the given object is an instance of CodestarnotificationsNotificationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CodestarnotificationsNotificationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodestarnotificationsNotificationRule.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly createdBy!: pulumi.Output<string>;
    public readonly detailType!: pulumi.Output<string>;
    public readonly eventTypeId!: pulumi.Output<string>;
    public readonly eventTypeIds!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly resource!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    public readonly targetAddress!: pulumi.Output<string>;
    public readonly targets!: pulumi.Output<outputs.CodestarnotificationsNotificationRuleTarget[]>;

    /**
     * Create a CodestarnotificationsNotificationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodestarnotificationsNotificationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodestarnotificationsNotificationRuleArgs | CodestarnotificationsNotificationRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodestarnotificationsNotificationRuleState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["detailType"] = state ? state.detailType : undefined;
            resourceInputs["eventTypeId"] = state ? state.eventTypeId : undefined;
            resourceInputs["eventTypeIds"] = state ? state.eventTypeIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resource"] = state ? state.resource : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetAddress"] = state ? state.targetAddress : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
        } else {
            const args = argsOrState as CodestarnotificationsNotificationRuleArgs | undefined;
            if ((!args || args.detailType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'detailType'");
            }
            if ((!args || args.eventTypeIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventTypeIds'");
            }
            if ((!args || args.resource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resource'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["detailType"] = args ? args.detailType : undefined;
            resourceInputs["eventTypeId"] = args ? args.eventTypeId : undefined;
            resourceInputs["eventTypeIds"] = args ? args.eventTypeIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resource"] = args ? args.resource : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetAddress"] = args ? args.targetAddress : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodestarnotificationsNotificationRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CodestarnotificationsNotificationRule resources.
 */
export interface CodestarnotificationsNotificationRuleState {
    arn?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    detailType?: pulumi.Input<string>;
    eventTypeId?: pulumi.Input<string>;
    eventTypeIds?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    resource?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetAddress?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<inputs.CodestarnotificationsNotificationRuleTarget>[]>;
}

/**
 * The set of arguments for constructing a CodestarnotificationsNotificationRule resource.
 */
export interface CodestarnotificationsNotificationRuleArgs {
    createdBy?: pulumi.Input<string>;
    detailType: pulumi.Input<string>;
    eventTypeId?: pulumi.Input<string>;
    eventTypeIds: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    resource: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetAddress?: pulumi.Input<string>;
    targets: pulumi.Input<pulumi.Input<inputs.CodestarnotificationsNotificationRuleTarget>[]>;
}
