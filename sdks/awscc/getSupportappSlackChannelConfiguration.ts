// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSupportappSlackChannelConfiguration(args: GetSupportappSlackChannelConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetSupportappSlackChannelConfigurationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getSupportappSlackChannelConfiguration:getSupportappSlackChannelConfiguration", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSupportappSlackChannelConfiguration.
 */
export interface GetSupportappSlackChannelConfigurationArgs {
    id: string;
}

/**
 * A collection of values returned by getSupportappSlackChannelConfiguration.
 */
export interface GetSupportappSlackChannelConfigurationResult {
    readonly channelId: string;
    readonly channelName: string;
    readonly channelRoleArn: string;
    readonly id: string;
    readonly notifyOnAddCorrespondenceToCase: boolean;
    readonly notifyOnCaseSeverity: string;
    readonly notifyOnCreateOrReopenCase: boolean;
    readonly notifyOnResolveCase: boolean;
    readonly teamId: string;
}
export function getSupportappSlackChannelConfigurationOutput(args: GetSupportappSlackChannelConfigurationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSupportappSlackChannelConfigurationResult> {
    return pulumi.output(args).apply((a: any) => getSupportappSlackChannelConfiguration(a, opts))
}

/**
 * A collection of arguments for invoking getSupportappSlackChannelConfiguration.
 */
export interface GetSupportappSlackChannelConfigurationOutputArgs {
    id: pulumi.Input<string>;
}
