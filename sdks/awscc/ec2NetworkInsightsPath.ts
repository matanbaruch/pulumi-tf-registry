// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2NetworkInsightsPath extends pulumi.CustomResource {
    /**
     * Get an existing Ec2NetworkInsightsPath resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2NetworkInsightsPathState, opts?: pulumi.CustomResourceOptions): Ec2NetworkInsightsPath {
        return new Ec2NetworkInsightsPath(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2NetworkInsightsPath:Ec2NetworkInsightsPath';

    /**
     * Returns true if the given object is an instance of Ec2NetworkInsightsPath.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2NetworkInsightsPath {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2NetworkInsightsPath.__pulumiType;
    }

    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    public readonly destination!: pulumi.Output<string>;
    public /*out*/ readonly destinationArn!: pulumi.Output<string>;
    public readonly destinationIp!: pulumi.Output<string>;
    public readonly destinationPort!: pulumi.Output<number>;
    public readonly filterAtDestination!: pulumi.Output<outputs.Ec2NetworkInsightsPathFilterAtDestination>;
    public readonly filterAtSource!: pulumi.Output<outputs.Ec2NetworkInsightsPathFilterAtSource>;
    public /*out*/ readonly networkInsightsPathArn!: pulumi.Output<string>;
    public /*out*/ readonly networkInsightsPathId!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<string>;
    public /*out*/ readonly sourceArn!: pulumi.Output<string>;
    public readonly sourceIp!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.Ec2NetworkInsightsPathTag[]>;

    /**
     * Create a Ec2NetworkInsightsPath resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2NetworkInsightsPathArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2NetworkInsightsPathArgs | Ec2NetworkInsightsPathState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2NetworkInsightsPathState | undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["destinationArn"] = state ? state.destinationArn : undefined;
            resourceInputs["destinationIp"] = state ? state.destinationIp : undefined;
            resourceInputs["destinationPort"] = state ? state.destinationPort : undefined;
            resourceInputs["filterAtDestination"] = state ? state.filterAtDestination : undefined;
            resourceInputs["filterAtSource"] = state ? state.filterAtSource : undefined;
            resourceInputs["networkInsightsPathArn"] = state ? state.networkInsightsPathArn : undefined;
            resourceInputs["networkInsightsPathId"] = state ? state.networkInsightsPathId : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceArn"] = state ? state.sourceArn : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as Ec2NetworkInsightsPathArgs | undefined;
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["destinationIp"] = args ? args.destinationIp : undefined;
            resourceInputs["destinationPort"] = args ? args.destinationPort : undefined;
            resourceInputs["filterAtDestination"] = args ? args.filterAtDestination : undefined;
            resourceInputs["filterAtSource"] = args ? args.filterAtSource : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["destinationArn"] = undefined /*out*/;
            resourceInputs["networkInsightsPathArn"] = undefined /*out*/;
            resourceInputs["networkInsightsPathId"] = undefined /*out*/;
            resourceInputs["sourceArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2NetworkInsightsPath.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2NetworkInsightsPath resources.
 */
export interface Ec2NetworkInsightsPathState {
    createdDate?: pulumi.Input<string>;
    destination?: pulumi.Input<string>;
    destinationArn?: pulumi.Input<string>;
    destinationIp?: pulumi.Input<string>;
    destinationPort?: pulumi.Input<number>;
    filterAtDestination?: pulumi.Input<inputs.Ec2NetworkInsightsPathFilterAtDestination>;
    filterAtSource?: pulumi.Input<inputs.Ec2NetworkInsightsPathFilterAtSource>;
    networkInsightsPathArn?: pulumi.Input<string>;
    networkInsightsPathId?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceArn?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInsightsPathTag>[]>;
}

/**
 * The set of arguments for constructing a Ec2NetworkInsightsPath resource.
 */
export interface Ec2NetworkInsightsPathArgs {
    destination?: pulumi.Input<string>;
    destinationIp?: pulumi.Input<string>;
    destinationPort?: pulumi.Input<number>;
    filterAtDestination?: pulumi.Input<inputs.Ec2NetworkInsightsPathFilterAtDestination>;
    filterAtSource?: pulumi.Input<inputs.Ec2NetworkInsightsPathFilterAtSource>;
    protocol: pulumi.Input<string>;
    source: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2NetworkInsightsPathTag>[]>;
}
