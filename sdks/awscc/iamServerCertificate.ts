// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IamServerCertificate extends pulumi.CustomResource {
    /**
     * Get an existing IamServerCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamServerCertificateState, opts?: pulumi.CustomResourceOptions): IamServerCertificate {
        return new IamServerCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/iamServerCertificate:IamServerCertificate';

    /**
     * Returns true if the given object is an instance of IamServerCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamServerCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamServerCertificate.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the server certificate
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly certificateBody!: pulumi.Output<string>;
    public readonly certificateChain!: pulumi.Output<string>;
    public readonly path!: pulumi.Output<string>;
    public readonly privateKey!: pulumi.Output<string>;
    public readonly serverCertificateName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.IamServerCertificateTag[]>;

    /**
     * Create a IamServerCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IamServerCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamServerCertificateArgs | IamServerCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamServerCertificateState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["certificateBody"] = state ? state.certificateBody : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["serverCertificateName"] = state ? state.serverCertificateName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as IamServerCertificateArgs | undefined;
            resourceInputs["certificateBody"] = args ? args.certificateBody : undefined;
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["serverCertificateName"] = args ? args.serverCertificateName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamServerCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IamServerCertificate resources.
 */
export interface IamServerCertificateState {
    /**
     * Amazon Resource Name (ARN) of the server certificate
     */
    arn?: pulumi.Input<string>;
    certificateBody?: pulumi.Input<string>;
    certificateChain?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    serverCertificateName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IamServerCertificateTag>[]>;
}

/**
 * The set of arguments for constructing a IamServerCertificate resource.
 */
export interface IamServerCertificateArgs {
    certificateBody?: pulumi.Input<string>;
    certificateChain?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    serverCertificateName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IamServerCertificateTag>[]>;
}
