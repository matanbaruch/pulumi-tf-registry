// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2CustomerGateway extends pulumi.CustomResource {
    /**
     * Get an existing Ec2CustomerGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2CustomerGatewayState, opts?: pulumi.CustomResourceOptions): Ec2CustomerGateway {
        return new Ec2CustomerGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2CustomerGateway:Ec2CustomerGateway';

    /**
     * Returns true if the given object is an instance of Ec2CustomerGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2CustomerGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2CustomerGateway.__pulumiType;
    }

    /**
     * For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or
     * ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use
     * ``BgpAsnExtended``. Default: 65000 Valid values: ``1`` to ``2,147,483,647``
     */
    public readonly bgpAsn!: pulumi.Output<number>;
    /**
     * For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or
     * ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use
     * ``BgpAsnExtended``. Valid values: ``2,147,483,648`` to ``4,294,967,295``
     */
    public readonly bgpAsnExtended!: pulumi.Output<number>;
    /**
     * The Amazon Resource Name (ARN) for the customer gateway certificate.
     */
    public readonly certificateArn!: pulumi.Output<string>;
    public /*out*/ readonly customerGatewayId!: pulumi.Output<string>;
    /**
     * The name of customer gateway device.
     */
    public readonly deviceName!: pulumi.Output<string>;
    /**
     * IPv4 address for the customer gateway device's outside interface. The address must be static. If
     * ``OutsideIpAddressType`` in your VPN connection options is set to ``PrivateIpv4``, you can use an RFC6598 or RFC1918
     * private IPv4 address. If ``OutsideIpAddressType`` is set to ``PublicIpv4``, you can use a public IPv4 address.
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * One or more tags for the customer gateway.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2CustomerGatewayTag[]>;
    /**
     * The type of VPN connection that this customer gateway supports (``ipsec.1``).
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Ec2CustomerGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2CustomerGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2CustomerGatewayArgs | Ec2CustomerGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2CustomerGatewayState | undefined;
            resourceInputs["bgpAsn"] = state ? state.bgpAsn : undefined;
            resourceInputs["bgpAsnExtended"] = state ? state.bgpAsnExtended : undefined;
            resourceInputs["certificateArn"] = state ? state.certificateArn : undefined;
            resourceInputs["customerGatewayId"] = state ? state.customerGatewayId : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as Ec2CustomerGatewayArgs | undefined;
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bgpAsn"] = args ? args.bgpAsn : undefined;
            resourceInputs["bgpAsnExtended"] = args ? args.bgpAsnExtended : undefined;
            resourceInputs["certificateArn"] = args ? args.certificateArn : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["customerGatewayId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2CustomerGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2CustomerGateway resources.
 */
export interface Ec2CustomerGatewayState {
    /**
     * For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or
     * ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use
     * ``BgpAsnExtended``. Default: 65000 Valid values: ``1`` to ``2,147,483,647``
     */
    bgpAsn?: pulumi.Input<number>;
    /**
     * For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or
     * ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use
     * ``BgpAsnExtended``. Valid values: ``2,147,483,648`` to ``4,294,967,295``
     */
    bgpAsnExtended?: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) for the customer gateway certificate.
     */
    certificateArn?: pulumi.Input<string>;
    customerGatewayId?: pulumi.Input<string>;
    /**
     * The name of customer gateway device.
     */
    deviceName?: pulumi.Input<string>;
    /**
     * IPv4 address for the customer gateway device's outside interface. The address must be static. If
     * ``OutsideIpAddressType`` in your VPN connection options is set to ``PrivateIpv4``, you can use an RFC6598 or RFC1918
     * private IPv4 address. If ``OutsideIpAddressType`` is set to ``PublicIpv4``, you can use a public IPv4 address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * One or more tags for the customer gateway.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2CustomerGatewayTag>[]>;
    /**
     * The type of VPN connection that this customer gateway supports (``ipsec.1``).
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2CustomerGateway resource.
 */
export interface Ec2CustomerGatewayArgs {
    /**
     * For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or
     * ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use
     * ``BgpAsnExtended``. Default: 65000 Valid values: ``1`` to ``2,147,483,647``
     */
    bgpAsn?: pulumi.Input<number>;
    /**
     * For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or
     * ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use
     * ``BgpAsnExtended``. Valid values: ``2,147,483,648`` to ``4,294,967,295``
     */
    bgpAsnExtended?: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) for the customer gateway certificate.
     */
    certificateArn?: pulumi.Input<string>;
    /**
     * The name of customer gateway device.
     */
    deviceName?: pulumi.Input<string>;
    /**
     * IPv4 address for the customer gateway device's outside interface. The address must be static. If
     * ``OutsideIpAddressType`` in your VPN connection options is set to ``PrivateIpv4``, you can use an RFC6598 or RFC1918
     * private IPv4 address. If ``OutsideIpAddressType`` is set to ``PublicIpv4``, you can use a public IPv4 address.
     */
    ipAddress: pulumi.Input<string>;
    /**
     * One or more tags for the customer gateway.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2CustomerGatewayTag>[]>;
    /**
     * The type of VPN connection that this customer gateway supports (``ipsec.1``).
     */
    type: pulumi.Input<string>;
}
