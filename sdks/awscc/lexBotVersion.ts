// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LexBotVersion extends pulumi.CustomResource {
    /**
     * Get an existing LexBotVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LexBotVersionState, opts?: pulumi.CustomResourceOptions): LexBotVersion {
        return new LexBotVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lexBotVersion:LexBotVersion';

    /**
     * Returns true if the given object is an instance of LexBotVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LexBotVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LexBotVersion.__pulumiType;
    }

    /**
     * Unique ID of resource
     */
    public readonly botId!: pulumi.Output<string>;
    /**
     * The version of a bot.
     */
    public /*out*/ readonly botVersion!: pulumi.Output<string>;
    /**
     * Specifies the locales that Amazon Lex adds to this version. You can choose the Draft version or any other previously
     * published version for each locale.
     */
    public readonly botVersionLocaleSpecifications!: pulumi.Output<outputs.LexBotVersionBotVersionLocaleSpecification[]>;
    /**
     * A description of the version. Use the description to help identify the version in lists.
     */
    public readonly description!: pulumi.Output<string>;

    /**
     * Create a LexBotVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LexBotVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LexBotVersionArgs | LexBotVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LexBotVersionState | undefined;
            resourceInputs["botId"] = state ? state.botId : undefined;
            resourceInputs["botVersion"] = state ? state.botVersion : undefined;
            resourceInputs["botVersionLocaleSpecifications"] = state ? state.botVersionLocaleSpecifications : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
        } else {
            const args = argsOrState as LexBotVersionArgs | undefined;
            if ((!args || args.botId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'botId'");
            }
            if ((!args || args.botVersionLocaleSpecifications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'botVersionLocaleSpecifications'");
            }
            resourceInputs["botId"] = args ? args.botId : undefined;
            resourceInputs["botVersionLocaleSpecifications"] = args ? args.botVersionLocaleSpecifications : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["botVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LexBotVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LexBotVersion resources.
 */
export interface LexBotVersionState {
    /**
     * Unique ID of resource
     */
    botId?: pulumi.Input<string>;
    /**
     * The version of a bot.
     */
    botVersion?: pulumi.Input<string>;
    /**
     * Specifies the locales that Amazon Lex adds to this version. You can choose the Draft version or any other previously
     * published version for each locale.
     */
    botVersionLocaleSpecifications?: pulumi.Input<pulumi.Input<inputs.LexBotVersionBotVersionLocaleSpecification>[]>;
    /**
     * A description of the version. Use the description to help identify the version in lists.
     */
    description?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LexBotVersion resource.
 */
export interface LexBotVersionArgs {
    /**
     * Unique ID of resource
     */
    botId: pulumi.Input<string>;
    /**
     * Specifies the locales that Amazon Lex adds to this version. You can choose the Draft version or any other previously
     * published version for each locale.
     */
    botVersionLocaleSpecifications: pulumi.Input<pulumi.Input<inputs.LexBotVersionBotVersionLocaleSpecification>[]>;
    /**
     * A description of the version. Use the description to help identify the version in lists.
     */
    description?: pulumi.Input<string>;
}
