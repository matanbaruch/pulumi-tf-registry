// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CleanroomsAnalysisTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CleanroomsAnalysisTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CleanroomsAnalysisTemplateState, opts?: pulumi.CustomResourceOptions): CleanroomsAnalysisTemplate {
        return new CleanroomsAnalysisTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/cleanroomsAnalysisTemplate:CleanroomsAnalysisTemplate';

    /**
     * Returns true if the given object is an instance of CleanroomsAnalysisTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CleanroomsAnalysisTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CleanroomsAnalysisTemplate.__pulumiType;
    }

    /**
     * The member who can query can provide this placeholder for a literal data value in an analysis template
     */
    public readonly analysisParameters!: pulumi.Output<outputs.CleanroomsAnalysisTemplateAnalysisParameter[]>;
    public /*out*/ readonly analysisTemplateIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly collaborationArn!: pulumi.Output<string>;
    public /*out*/ readonly collaborationIdentifier!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly format!: pulumi.Output<string>;
    public /*out*/ readonly membershipArn!: pulumi.Output<string>;
    public readonly membershipIdentifier!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly schema!: pulumi.Output<outputs.CleanroomsAnalysisTemplateSchema>;
    public readonly source!: pulumi.Output<outputs.CleanroomsAnalysisTemplateSource>;
    /**
     * An arbitrary set of tags (key-value pairs) for this cleanrooms analysis template.
     */
    public readonly tags!: pulumi.Output<outputs.CleanroomsAnalysisTemplateTag[]>;

    /**
     * Create a CleanroomsAnalysisTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CleanroomsAnalysisTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CleanroomsAnalysisTemplateArgs | CleanroomsAnalysisTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CleanroomsAnalysisTemplateState | undefined;
            resourceInputs["analysisParameters"] = state ? state.analysisParameters : undefined;
            resourceInputs["analysisTemplateIdentifier"] = state ? state.analysisTemplateIdentifier : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["collaborationArn"] = state ? state.collaborationArn : undefined;
            resourceInputs["collaborationIdentifier"] = state ? state.collaborationIdentifier : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["membershipArn"] = state ? state.membershipArn : undefined;
            resourceInputs["membershipIdentifier"] = state ? state.membershipIdentifier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CleanroomsAnalysisTemplateArgs | undefined;
            if ((!args || args.format === undefined) && !opts.urn) {
                throw new Error("Missing required property 'format'");
            }
            if ((!args || args.membershipIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'membershipIdentifier'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["analysisParameters"] = args ? args.analysisParameters : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["membershipIdentifier"] = args ? args.membershipIdentifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["analysisTemplateIdentifier"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["collaborationArn"] = undefined /*out*/;
            resourceInputs["collaborationIdentifier"] = undefined /*out*/;
            resourceInputs["membershipArn"] = undefined /*out*/;
            resourceInputs["schema"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CleanroomsAnalysisTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CleanroomsAnalysisTemplate resources.
 */
export interface CleanroomsAnalysisTemplateState {
    /**
     * The member who can query can provide this placeholder for a literal data value in an analysis template
     */
    analysisParameters?: pulumi.Input<pulumi.Input<inputs.CleanroomsAnalysisTemplateAnalysisParameter>[]>;
    analysisTemplateIdentifier?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    collaborationArn?: pulumi.Input<string>;
    collaborationIdentifier?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    membershipArn?: pulumi.Input<string>;
    membershipIdentifier?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    schema?: pulumi.Input<inputs.CleanroomsAnalysisTemplateSchema>;
    source?: pulumi.Input<inputs.CleanroomsAnalysisTemplateSource>;
    /**
     * An arbitrary set of tags (key-value pairs) for this cleanrooms analysis template.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CleanroomsAnalysisTemplateTag>[]>;
}

/**
 * The set of arguments for constructing a CleanroomsAnalysisTemplate resource.
 */
export interface CleanroomsAnalysisTemplateArgs {
    /**
     * The member who can query can provide this placeholder for a literal data value in an analysis template
     */
    analysisParameters?: pulumi.Input<pulumi.Input<inputs.CleanroomsAnalysisTemplateAnalysisParameter>[]>;
    description?: pulumi.Input<string>;
    format: pulumi.Input<string>;
    membershipIdentifier: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    source: pulumi.Input<inputs.CleanroomsAnalysisTemplateSource>;
    /**
     * An arbitrary set of tags (key-value pairs) for this cleanrooms analysis template.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CleanroomsAnalysisTemplateTag>[]>;
}
