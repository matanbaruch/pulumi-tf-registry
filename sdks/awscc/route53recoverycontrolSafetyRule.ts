// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Route53recoverycontrolSafetyRule extends pulumi.CustomResource {
    /**
     * Get an existing Route53recoverycontrolSafetyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Route53recoverycontrolSafetyRuleState, opts?: pulumi.CustomResourceOptions): Route53recoverycontrolSafetyRule {
        return new Route53recoverycontrolSafetyRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/route53recoverycontrolSafetyRule:Route53recoverycontrolSafetyRule';

    /**
     * Returns true if the given object is an instance of Route53recoverycontrolSafetyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route53recoverycontrolSafetyRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route53recoverycontrolSafetyRule.__pulumiType;
    }

    /**
     * An assertion rule enforces that, when a routing control state is changed, that the criteria set by the rule
     * configuration is met. Otherwise, the change to the routing control is not accepted.
     */
    public readonly assertionRule!: pulumi.Output<outputs.Route53recoverycontrolSafetyRuleAssertionRule>;
    /**
     * The Amazon Resource Name (ARN) of the control panel.
     */
    public readonly controlPanelArn!: pulumi.Output<string>;
    /**
     * A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify.
     * If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control
     * state changes to run and complete against the set of target controls.
     */
    public readonly gatingRule!: pulumi.Output<outputs.Route53recoverycontrolSafetyRuleGatingRule>;
    /**
     * The name for the safety rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The rule configuration for an assertion rule or gating rule. This is the criteria that you set for specific assertion
     * controls (routing controls) or gating controls. This configuration specifies how many controls must be enabled after a
     * transaction completes.
     */
    public readonly ruleConfig!: pulumi.Output<outputs.Route53recoverycontrolSafetyRuleRuleConfig>;
    /**
     * The Amazon Resource Name (ARN) of the safety rule.
     */
    public /*out*/ readonly safetyRuleArn!: pulumi.Output<string>;
    /**
     * The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A collection of tags associated with a resource
     */
    public readonly tags!: pulumi.Output<outputs.Route53recoverycontrolSafetyRuleTag[]>;

    /**
     * Create a Route53recoverycontrolSafetyRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Route53recoverycontrolSafetyRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Route53recoverycontrolSafetyRuleArgs | Route53recoverycontrolSafetyRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Route53recoverycontrolSafetyRuleState | undefined;
            resourceInputs["assertionRule"] = state ? state.assertionRule : undefined;
            resourceInputs["controlPanelArn"] = state ? state.controlPanelArn : undefined;
            resourceInputs["gatingRule"] = state ? state.gatingRule : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ruleConfig"] = state ? state.ruleConfig : undefined;
            resourceInputs["safetyRuleArn"] = state ? state.safetyRuleArn : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as Route53recoverycontrolSafetyRuleArgs | undefined;
            resourceInputs["assertionRule"] = args ? args.assertionRule : undefined;
            resourceInputs["controlPanelArn"] = args ? args.controlPanelArn : undefined;
            resourceInputs["gatingRule"] = args ? args.gatingRule : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ruleConfig"] = args ? args.ruleConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["safetyRuleArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route53recoverycontrolSafetyRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Route53recoverycontrolSafetyRule resources.
 */
export interface Route53recoverycontrolSafetyRuleState {
    /**
     * An assertion rule enforces that, when a routing control state is changed, that the criteria set by the rule
     * configuration is met. Otherwise, the change to the routing control is not accepted.
     */
    assertionRule?: pulumi.Input<inputs.Route53recoverycontrolSafetyRuleAssertionRule>;
    /**
     * The Amazon Resource Name (ARN) of the control panel.
     */
    controlPanelArn?: pulumi.Input<string>;
    /**
     * A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify.
     * If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control
     * state changes to run and complete against the set of target controls.
     */
    gatingRule?: pulumi.Input<inputs.Route53recoverycontrolSafetyRuleGatingRule>;
    /**
     * The name for the safety rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The rule configuration for an assertion rule or gating rule. This is the criteria that you set for specific assertion
     * controls (routing controls) or gating controls. This configuration specifies how many controls must be enabled after a
     * transaction completes.
     */
    ruleConfig?: pulumi.Input<inputs.Route53recoverycontrolSafetyRuleRuleConfig>;
    /**
     * The Amazon Resource Name (ARN) of the safety rule.
     */
    safetyRuleArn?: pulumi.Input<string>;
    /**
     * The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
     */
    status?: pulumi.Input<string>;
    /**
     * A collection of tags associated with a resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Route53recoverycontrolSafetyRuleTag>[]>;
}

/**
 * The set of arguments for constructing a Route53recoverycontrolSafetyRule resource.
 */
export interface Route53recoverycontrolSafetyRuleArgs {
    /**
     * An assertion rule enforces that, when a routing control state is changed, that the criteria set by the rule
     * configuration is met. Otherwise, the change to the routing control is not accepted.
     */
    assertionRule?: pulumi.Input<inputs.Route53recoverycontrolSafetyRuleAssertionRule>;
    /**
     * The Amazon Resource Name (ARN) of the control panel.
     */
    controlPanelArn?: pulumi.Input<string>;
    /**
     * A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify.
     * If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control
     * state changes to run and complete against the set of target controls.
     */
    gatingRule?: pulumi.Input<inputs.Route53recoverycontrolSafetyRuleGatingRule>;
    /**
     * The name for the safety rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The rule configuration for an assertion rule or gating rule. This is the criteria that you set for specific assertion
     * controls (routing controls) or gating controls. This configuration specifies how many controls must be enabled after a
     * transaction completes.
     */
    ruleConfig?: pulumi.Input<inputs.Route53recoverycontrolSafetyRuleRuleConfig>;
    /**
     * A collection of tags associated with a resource
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Route53recoverycontrolSafetyRuleTag>[]>;
}
