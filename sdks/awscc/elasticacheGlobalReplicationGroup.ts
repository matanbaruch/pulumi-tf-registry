// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElasticacheGlobalReplicationGroup extends pulumi.CustomResource {
    /**
     * Get an existing ElasticacheGlobalReplicationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticacheGlobalReplicationGroupState, opts?: pulumi.CustomResourceOptions): ElasticacheGlobalReplicationGroup {
        return new ElasticacheGlobalReplicationGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/elasticacheGlobalReplicationGroup:ElasticacheGlobalReplicationGroup';

    /**
     * Returns true if the given object is an instance of ElasticacheGlobalReplicationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticacheGlobalReplicationGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticacheGlobalReplicationGroup.__pulumiType;
    }

    /**
     * AutomaticFailoverEnabled
     */
    public readonly automaticFailoverEnabled!: pulumi.Output<boolean>;
    /**
     * The cache node type of the Global Datastore
     */
    public readonly cacheNodeType!: pulumi.Output<string>;
    /**
     * Cache parameter group name to use for the new engine version. This parameter cannot be modified independently.
     */
    public readonly cacheParameterGroupName!: pulumi.Output<string>;
    /**
     * The engine version of the Global Datastore.
     */
    public readonly engineVersion!: pulumi.Output<string>;
    /**
     * Indicates the number of node groups in the Global Datastore.
     */
    public readonly globalNodeGroupCount!: pulumi.Output<number>;
    /**
     * The optional description of the Global Datastore
     */
    public readonly globalReplicationGroupDescription!: pulumi.Output<string>;
    /**
     * The name of the Global Datastore, it is generated by ElastiCache adding a prefix to GlobalReplicationGroupIdSuffix.
     */
    public /*out*/ readonly globalReplicationGroupId!: pulumi.Output<string>;
    /**
     * The suffix name of a Global Datastore. Amazon ElastiCache automatically applies a prefix to the Global Datastore ID when
     * it is created. Each AWS Region has its own prefix.
     */
    public readonly globalReplicationGroupIdSuffix!: pulumi.Output<string>;
    /**
     * The replication groups that comprise the Global Datastore.
     */
    public readonly members!: pulumi.Output<outputs.ElasticacheGlobalReplicationGroupMember[]>;
    /**
     * Describes the replication group IDs, the AWS regions where they are stored and the shard configuration for each that
     * comprise the Global Datastore
     */
    public readonly regionalConfigurations!: pulumi.Output<outputs.ElasticacheGlobalReplicationGroupRegionalConfiguration[]>;
    /**
     * The status of the Global Datastore
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a ElasticacheGlobalReplicationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticacheGlobalReplicationGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticacheGlobalReplicationGroupArgs | ElasticacheGlobalReplicationGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticacheGlobalReplicationGroupState | undefined;
            resourceInputs["automaticFailoverEnabled"] = state ? state.automaticFailoverEnabled : undefined;
            resourceInputs["cacheNodeType"] = state ? state.cacheNodeType : undefined;
            resourceInputs["cacheParameterGroupName"] = state ? state.cacheParameterGroupName : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["globalNodeGroupCount"] = state ? state.globalNodeGroupCount : undefined;
            resourceInputs["globalReplicationGroupDescription"] = state ? state.globalReplicationGroupDescription : undefined;
            resourceInputs["globalReplicationGroupId"] = state ? state.globalReplicationGroupId : undefined;
            resourceInputs["globalReplicationGroupIdSuffix"] = state ? state.globalReplicationGroupIdSuffix : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["regionalConfigurations"] = state ? state.regionalConfigurations : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ElasticacheGlobalReplicationGroupArgs | undefined;
            if ((!args || args.members === undefined) && !opts.urn) {
                throw new Error("Missing required property 'members'");
            }
            resourceInputs["automaticFailoverEnabled"] = args ? args.automaticFailoverEnabled : undefined;
            resourceInputs["cacheNodeType"] = args ? args.cacheNodeType : undefined;
            resourceInputs["cacheParameterGroupName"] = args ? args.cacheParameterGroupName : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["globalNodeGroupCount"] = args ? args.globalNodeGroupCount : undefined;
            resourceInputs["globalReplicationGroupDescription"] = args ? args.globalReplicationGroupDescription : undefined;
            resourceInputs["globalReplicationGroupIdSuffix"] = args ? args.globalReplicationGroupIdSuffix : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["regionalConfigurations"] = args ? args.regionalConfigurations : undefined;
            resourceInputs["globalReplicationGroupId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElasticacheGlobalReplicationGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticacheGlobalReplicationGroup resources.
 */
export interface ElasticacheGlobalReplicationGroupState {
    /**
     * AutomaticFailoverEnabled
     */
    automaticFailoverEnabled?: pulumi.Input<boolean>;
    /**
     * The cache node type of the Global Datastore
     */
    cacheNodeType?: pulumi.Input<string>;
    /**
     * Cache parameter group name to use for the new engine version. This parameter cannot be modified independently.
     */
    cacheParameterGroupName?: pulumi.Input<string>;
    /**
     * The engine version of the Global Datastore.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * Indicates the number of node groups in the Global Datastore.
     */
    globalNodeGroupCount?: pulumi.Input<number>;
    /**
     * The optional description of the Global Datastore
     */
    globalReplicationGroupDescription?: pulumi.Input<string>;
    /**
     * The name of the Global Datastore, it is generated by ElastiCache adding a prefix to GlobalReplicationGroupIdSuffix.
     */
    globalReplicationGroupId?: pulumi.Input<string>;
    /**
     * The suffix name of a Global Datastore. Amazon ElastiCache automatically applies a prefix to the Global Datastore ID when
     * it is created. Each AWS Region has its own prefix.
     */
    globalReplicationGroupIdSuffix?: pulumi.Input<string>;
    /**
     * The replication groups that comprise the Global Datastore.
     */
    members?: pulumi.Input<pulumi.Input<inputs.ElasticacheGlobalReplicationGroupMember>[]>;
    /**
     * Describes the replication group IDs, the AWS regions where they are stored and the shard configuration for each that
     * comprise the Global Datastore
     */
    regionalConfigurations?: pulumi.Input<pulumi.Input<inputs.ElasticacheGlobalReplicationGroupRegionalConfiguration>[]>;
    /**
     * The status of the Global Datastore
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElasticacheGlobalReplicationGroup resource.
 */
export interface ElasticacheGlobalReplicationGroupArgs {
    /**
     * AutomaticFailoverEnabled
     */
    automaticFailoverEnabled?: pulumi.Input<boolean>;
    /**
     * The cache node type of the Global Datastore
     */
    cacheNodeType?: pulumi.Input<string>;
    /**
     * Cache parameter group name to use for the new engine version. This parameter cannot be modified independently.
     */
    cacheParameterGroupName?: pulumi.Input<string>;
    /**
     * The engine version of the Global Datastore.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * Indicates the number of node groups in the Global Datastore.
     */
    globalNodeGroupCount?: pulumi.Input<number>;
    /**
     * The optional description of the Global Datastore
     */
    globalReplicationGroupDescription?: pulumi.Input<string>;
    /**
     * The suffix name of a Global Datastore. Amazon ElastiCache automatically applies a prefix to the Global Datastore ID when
     * it is created. Each AWS Region has its own prefix.
     */
    globalReplicationGroupIdSuffix?: pulumi.Input<string>;
    /**
     * The replication groups that comprise the Global Datastore.
     */
    members: pulumi.Input<pulumi.Input<inputs.ElasticacheGlobalReplicationGroupMember>[]>;
    /**
     * Describes the replication group IDs, the AWS regions where they are stored and the shard configuration for each that
     * comprise the Global Datastore
     */
    regionalConfigurations?: pulumi.Input<pulumi.Input<inputs.ElasticacheGlobalReplicationGroupRegionalConfiguration>[]>;
}
