// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ImagebuilderLifecyclePolicy extends pulumi.CustomResource {
    /**
     * Get an existing ImagebuilderLifecyclePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImagebuilderLifecyclePolicyState, opts?: pulumi.CustomResourceOptions): ImagebuilderLifecyclePolicy {
        return new ImagebuilderLifecyclePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/imagebuilderLifecyclePolicy:ImagebuilderLifecyclePolicy';

    /**
     * Returns true if the given object is an instance of ImagebuilderLifecyclePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImagebuilderLifecyclePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImagebuilderLifecyclePolicy.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the lifecycle policy.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The description of the lifecycle policy.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The execution role of the lifecycle policy.
     */
    public readonly executionRole!: pulumi.Output<string>;
    /**
     * The name of the lifecycle policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The policy details of the lifecycle policy.
     */
    public readonly policyDetails!: pulumi.Output<outputs.ImagebuilderLifecyclePolicyPolicyDetail[]>;
    /**
     * The resource selection of the lifecycle policy.
     */
    public readonly resourceSelection!: pulumi.Output<outputs.ImagebuilderLifecyclePolicyResourceSelection>;
    /**
     * The resource type of the lifecycle policy.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * The status of the lifecycle policy.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The tags associated with the lifecycle policy.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a ImagebuilderLifecyclePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImagebuilderLifecyclePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImagebuilderLifecyclePolicyArgs | ImagebuilderLifecyclePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImagebuilderLifecyclePolicyState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["executionRole"] = state ? state.executionRole : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyDetails"] = state ? state.policyDetails : undefined;
            resourceInputs["resourceSelection"] = state ? state.resourceSelection : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ImagebuilderLifecyclePolicyArgs | undefined;
            if ((!args || args.executionRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executionRole'");
            }
            if ((!args || args.policyDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyDetails'");
            }
            if ((!args || args.resourceSelection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceSelection'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executionRole"] = args ? args.executionRole : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyDetails"] = args ? args.policyDetails : undefined;
            resourceInputs["resourceSelection"] = args ? args.resourceSelection : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImagebuilderLifecyclePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ImagebuilderLifecyclePolicy resources.
 */
export interface ImagebuilderLifecyclePolicyState {
    /**
     * The Amazon Resource Name (ARN) of the lifecycle policy.
     */
    arn?: pulumi.Input<string>;
    /**
     * The description of the lifecycle policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The execution role of the lifecycle policy.
     */
    executionRole?: pulumi.Input<string>;
    /**
     * The name of the lifecycle policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy details of the lifecycle policy.
     */
    policyDetails?: pulumi.Input<pulumi.Input<inputs.ImagebuilderLifecyclePolicyPolicyDetail>[]>;
    /**
     * The resource selection of the lifecycle policy.
     */
    resourceSelection?: pulumi.Input<inputs.ImagebuilderLifecyclePolicyResourceSelection>;
    /**
     * The resource type of the lifecycle policy.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The status of the lifecycle policy.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags associated with the lifecycle policy.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ImagebuilderLifecyclePolicy resource.
 */
export interface ImagebuilderLifecyclePolicyArgs {
    /**
     * The description of the lifecycle policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The execution role of the lifecycle policy.
     */
    executionRole: pulumi.Input<string>;
    /**
     * The name of the lifecycle policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy details of the lifecycle policy.
     */
    policyDetails: pulumi.Input<pulumi.Input<inputs.ImagebuilderLifecyclePolicyPolicyDetail>[]>;
    /**
     * The resource selection of the lifecycle policy.
     */
    resourceSelection: pulumi.Input<inputs.ImagebuilderLifecyclePolicyResourceSelection>;
    /**
     * The resource type of the lifecycle policy.
     */
    resourceType: pulumi.Input<string>;
    /**
     * The status of the lifecycle policy.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags associated with the lifecycle policy.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
