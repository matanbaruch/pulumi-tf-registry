// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LightsailInstance extends pulumi.CustomResource {
    /**
     * Get an existing LightsailInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LightsailInstanceState, opts?: pulumi.CustomResourceOptions): LightsailInstance {
        return new LightsailInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lightsailInstance:LightsailInstance';

    /**
     * Returns true if the given object is an instance of LightsailInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LightsailInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LightsailInstance.__pulumiType;
    }

    /**
     * An array of objects representing the add-ons to enable for the new instance.
     */
    public readonly addOns!: pulumi.Output<outputs.LightsailInstanceAddOn[]>;
    /**
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure
     * to add the include Availability Zones parameter to your request.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0 ). Use the get blueprints operation
     * to return a list of available images (or blueprints ).
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * The bundle of specification information for your virtual private server (or instance ), including the pricing plan
     * (e.g., micro_1_0 ).
     */
    public readonly bundleId!: pulumi.Output<string>;
    /**
     * Hardware of the Instance.
     */
    public readonly hardware!: pulumi.Output<outputs.LightsailInstanceHardware>;
    public /*out*/ readonly instanceArn!: pulumi.Output<string>;
    /**
     * The names to use for your new Lightsail instance.
     */
    public readonly instanceName!: pulumi.Output<string>;
    /**
     * IPv6 addresses of the instance
     */
    public /*out*/ readonly ipv6Addresses!: pulumi.Output<string[]>;
    /**
     * Is the IP Address of the Instance is the static IP
     */
    public /*out*/ readonly isStaticIp!: pulumi.Output<boolean>;
    /**
     * The name of your key pair.
     */
    public readonly keyPairName!: pulumi.Output<string>;
    /**
     * Location of a resource.
     */
    public readonly location!: pulumi.Output<outputs.LightsailInstanceLocation>;
    /**
     * Networking of the Instance.
     */
    public readonly networking!: pulumi.Output<outputs.LightsailInstanceNetworking>;
    /**
     * Private IP Address of the Instance
     */
    public /*out*/ readonly privateIpAddress!: pulumi.Output<string>;
    /**
     * Public IP Address of the Instance
     */
    public /*out*/ readonly publicIpAddress!: pulumi.Output<string>;
    /**
     * Resource type of Lightsail instance.
     */
    public /*out*/ readonly resourceType!: pulumi.Output<string>;
    /**
     * SSH Key Name of the Lightsail instance.
     */
    public /*out*/ readonly sshKeyName!: pulumi.Output<string>;
    /**
     * Current State of the Instance.
     */
    public readonly state!: pulumi.Output<outputs.LightsailInstanceState>;
    /**
     * Support code to help identify any issues
     */
    public /*out*/ readonly supportCode!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.LightsailInstanceTag[]>;
    /**
     * A launch script you can create that configures a server with additional user data. For example, you might want to run
     * apt-get -y update.
     */
    public readonly userData!: pulumi.Output<string>;
    /**
     * Username of the Lightsail instance.
     */
    public /*out*/ readonly userName!: pulumi.Output<string>;

    /**
     * Create a LightsailInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LightsailInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LightsailInstanceArgs | LightsailInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LightsailInstanceState | undefined;
            resourceInputs["addOns"] = state ? state.addOns : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["bundleId"] = state ? state.bundleId : undefined;
            resourceInputs["hardware"] = state ? state.hardware : undefined;
            resourceInputs["instanceArn"] = state ? state.instanceArn : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["ipv6Addresses"] = state ? state.ipv6Addresses : undefined;
            resourceInputs["isStaticIp"] = state ? state.isStaticIp : undefined;
            resourceInputs["keyPairName"] = state ? state.keyPairName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["networking"] = state ? state.networking : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["publicIpAddress"] = state ? state.publicIpAddress : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["sshKeyName"] = state ? state.sshKeyName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["supportCode"] = state ? state.supportCode : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as LightsailInstanceArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.bundleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bundleId'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            resourceInputs["addOns"] = args ? args.addOns : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["bundleId"] = args ? args.bundleId : undefined;
            resourceInputs["hardware"] = args ? args.hardware : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["keyPairName"] = args ? args.keyPairName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["networking"] = args ? args.networking : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["instanceArn"] = undefined /*out*/;
            resourceInputs["ipv6Addresses"] = undefined /*out*/;
            resourceInputs["isStaticIp"] = undefined /*out*/;
            resourceInputs["privateIpAddress"] = undefined /*out*/;
            resourceInputs["publicIpAddress"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["sshKeyName"] = undefined /*out*/;
            resourceInputs["supportCode"] = undefined /*out*/;
            resourceInputs["userName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LightsailInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LightsailInstance resources.
 */
export interface LightsailInstanceState {
    /**
     * An array of objects representing the add-ons to enable for the new instance.
     */
    addOns?: pulumi.Input<pulumi.Input<inputs.LightsailInstanceAddOn>[]>;
    /**
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure
     * to add the include Availability Zones parameter to your request.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0 ). Use the get blueprints operation
     * to return a list of available images (or blueprints ).
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * The bundle of specification information for your virtual private server (or instance ), including the pricing plan
     * (e.g., micro_1_0 ).
     */
    bundleId?: pulumi.Input<string>;
    /**
     * Hardware of the Instance.
     */
    hardware?: pulumi.Input<inputs.LightsailInstanceHardware>;
    instanceArn?: pulumi.Input<string>;
    /**
     * The names to use for your new Lightsail instance.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * IPv6 addresses of the instance
     */
    ipv6Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Is the IP Address of the Instance is the static IP
     */
    isStaticIp?: pulumi.Input<boolean>;
    /**
     * The name of your key pair.
     */
    keyPairName?: pulumi.Input<string>;
    /**
     * Location of a resource.
     */
    location?: pulumi.Input<inputs.LightsailInstanceLocation>;
    /**
     * Networking of the Instance.
     */
    networking?: pulumi.Input<inputs.LightsailInstanceNetworking>;
    /**
     * Private IP Address of the Instance
     */
    privateIpAddress?: pulumi.Input<string>;
    /**
     * Public IP Address of the Instance
     */
    publicIpAddress?: pulumi.Input<string>;
    /**
     * Resource type of Lightsail instance.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * SSH Key Name of the Lightsail instance.
     */
    sshKeyName?: pulumi.Input<string>;
    /**
     * Current State of the Instance.
     */
    state?: pulumi.Input<inputs.LightsailInstanceState>;
    /**
     * Support code to help identify any issues
     */
    supportCode?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LightsailInstanceTag>[]>;
    /**
     * A launch script you can create that configures a server with additional user data. For example, you might want to run
     * apt-get -y update.
     */
    userData?: pulumi.Input<string>;
    /**
     * Username of the Lightsail instance.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LightsailInstance resource.
 */
export interface LightsailInstanceArgs {
    /**
     * An array of objects representing the add-ons to enable for the new instance.
     */
    addOns?: pulumi.Input<pulumi.Input<inputs.LightsailInstanceAddOn>[]>;
    /**
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure
     * to add the include Availability Zones parameter to your request.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0 ). Use the get blueprints operation
     * to return a list of available images (or blueprints ).
     */
    blueprintId: pulumi.Input<string>;
    /**
     * The bundle of specification information for your virtual private server (or instance ), including the pricing plan
     * (e.g., micro_1_0 ).
     */
    bundleId: pulumi.Input<string>;
    /**
     * Hardware of the Instance.
     */
    hardware?: pulumi.Input<inputs.LightsailInstanceHardware>;
    /**
     * The names to use for your new Lightsail instance.
     */
    instanceName: pulumi.Input<string>;
    /**
     * The name of your key pair.
     */
    keyPairName?: pulumi.Input<string>;
    /**
     * Location of a resource.
     */
    location?: pulumi.Input<inputs.LightsailInstanceLocation>;
    /**
     * Networking of the Instance.
     */
    networking?: pulumi.Input<inputs.LightsailInstanceNetworking>;
    /**
     * Current State of the Instance.
     */
    state?: pulumi.Input<inputs.LightsailInstanceState>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LightsailInstanceTag>[]>;
    /**
     * A launch script you can create that configures a server with additional user data. For example, you might want to run
     * apt-get -y update.
     */
    userData?: pulumi.Input<string>;
}
