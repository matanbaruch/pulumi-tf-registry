// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MedialiveMultiplex extends pulumi.CustomResource {
    /**
     * Get an existing MedialiveMultiplex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MedialiveMultiplexState, opts?: pulumi.CustomResourceOptions): MedialiveMultiplex {
        return new MedialiveMultiplex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/medialiveMultiplex:MedialiveMultiplex';

    /**
     * Returns true if the given object is an instance of MedialiveMultiplex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MedialiveMultiplex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MedialiveMultiplex.__pulumiType;
    }

    /**
     * The unique arn of the multiplex.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A list of availability zones for the multiplex.
     */
    public readonly availabilityZones!: pulumi.Output<string[]>;
    /**
     * A list of the multiplex output destinations.
     */
    public readonly destinations!: pulumi.Output<outputs.MedialiveMultiplexDestination[]>;
    /**
     * The unique id of the multiplex.
     */
    public /*out*/ readonly multiplexId!: pulumi.Output<string>;
    /**
     * Configuration for a multiplex event.
     */
    public readonly multiplexSettings!: pulumi.Output<outputs.MedialiveMultiplexMultiplexSettings>;
    /**
     * Name of multiplex.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of currently healthy pipelines.
     */
    public /*out*/ readonly pipelinesRunningCount!: pulumi.Output<number>;
    /**
     * The number of programs in the multiplex.
     */
    public /*out*/ readonly programCount!: pulumi.Output<number>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * A collection of key-value pairs.
     */
    public readonly tags!: pulumi.Output<outputs.MedialiveMultiplexTag[]>;

    /**
     * Create a MedialiveMultiplex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MedialiveMultiplexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MedialiveMultiplexArgs | MedialiveMultiplexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MedialiveMultiplexState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["destinations"] = state ? state.destinations : undefined;
            resourceInputs["multiplexId"] = state ? state.multiplexId : undefined;
            resourceInputs["multiplexSettings"] = state ? state.multiplexSettings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pipelinesRunningCount"] = state ? state.pipelinesRunningCount : undefined;
            resourceInputs["programCount"] = state ? state.programCount : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as MedialiveMultiplexArgs | undefined;
            if ((!args || args.availabilityZones === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZones'");
            }
            if ((!args || args.multiplexSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'multiplexSettings'");
            }
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["destinations"] = args ? args.destinations : undefined;
            resourceInputs["multiplexSettings"] = args ? args.multiplexSettings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["multiplexId"] = undefined /*out*/;
            resourceInputs["pipelinesRunningCount"] = undefined /*out*/;
            resourceInputs["programCount"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MedialiveMultiplex.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MedialiveMultiplex resources.
 */
export interface MedialiveMultiplexState {
    /**
     * The unique arn of the multiplex.
     */
    arn?: pulumi.Input<string>;
    /**
     * A list of availability zones for the multiplex.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of the multiplex output destinations.
     */
    destinations?: pulumi.Input<pulumi.Input<inputs.MedialiveMultiplexDestination>[]>;
    /**
     * The unique id of the multiplex.
     */
    multiplexId?: pulumi.Input<string>;
    /**
     * Configuration for a multiplex event.
     */
    multiplexSettings?: pulumi.Input<inputs.MedialiveMultiplexMultiplexSettings>;
    /**
     * Name of multiplex.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of currently healthy pipelines.
     */
    pipelinesRunningCount?: pulumi.Input<number>;
    /**
     * The number of programs in the multiplex.
     */
    programCount?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    /**
     * A collection of key-value pairs.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.MedialiveMultiplexTag>[]>;
}

/**
 * The set of arguments for constructing a MedialiveMultiplex resource.
 */
export interface MedialiveMultiplexArgs {
    /**
     * A list of availability zones for the multiplex.
     */
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of the multiplex output destinations.
     */
    destinations?: pulumi.Input<pulumi.Input<inputs.MedialiveMultiplexDestination>[]>;
    /**
     * Configuration for a multiplex event.
     */
    multiplexSettings: pulumi.Input<inputs.MedialiveMultiplexMultiplexSettings>;
    /**
     * Name of multiplex.
     */
    name?: pulumi.Input<string>;
    /**
     * A collection of key-value pairs.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.MedialiveMultiplexTag>[]>;
}
