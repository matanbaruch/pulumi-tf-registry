// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getEc2EnclaveCertificateIamRoleAssociation(args: GetEc2EnclaveCertificateIamRoleAssociationArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2EnclaveCertificateIamRoleAssociationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEc2EnclaveCertificateIamRoleAssociation:getEc2EnclaveCertificateIamRoleAssociation", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2EnclaveCertificateIamRoleAssociation.
 */
export interface GetEc2EnclaveCertificateIamRoleAssociationArgs {
    id: string;
}

/**
 * A collection of values returned by getEc2EnclaveCertificateIamRoleAssociation.
 */
export interface GetEc2EnclaveCertificateIamRoleAssociationResult {
    readonly certificateArn: string;
    readonly certificateS3BucketName: string;
    readonly certificateS3ObjectKey: string;
    readonly encryptionKmsKeyId: string;
    readonly id: string;
    readonly roleArn: string;
}
export function getEc2EnclaveCertificateIamRoleAssociationOutput(args: GetEc2EnclaveCertificateIamRoleAssociationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2EnclaveCertificateIamRoleAssociationResult> {
    return pulumi.output(args).apply((a: any) => getEc2EnclaveCertificateIamRoleAssociation(a, opts))
}

/**
 * A collection of arguments for invoking getEc2EnclaveCertificateIamRoleAssociation.
 */
export interface GetEc2EnclaveCertificateIamRoleAssociationOutputArgs {
    id: pulumi.Input<string>;
}
