// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SsoPermissionSet extends pulumi.CustomResource {
    /**
     * Get an existing SsoPermissionSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SsoPermissionSetState, opts?: pulumi.CustomResourceOptions): SsoPermissionSet {
        return new SsoPermissionSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ssoPermissionSet:SsoPermissionSet';

    /**
     * Returns true if the given object is an instance of SsoPermissionSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SsoPermissionSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SsoPermissionSet.__pulumiType;
    }

    public readonly customerManagedPolicyReferences!: pulumi.Output<outputs.SsoPermissionSetCustomerManagedPolicyReference[]>;
    /**
     * The permission set description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The inline policy to put in permission set.
     */
    public readonly inlinePolicy!: pulumi.Output<string>;
    /**
     * The sso instance arn that the permission set is owned.
     */
    public readonly instanceArn!: pulumi.Output<string>;
    public readonly managedPolicies!: pulumi.Output<string[]>;
    /**
     * The name you want to assign to this permission set.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The permission set that the policy will be attached to
     */
    public /*out*/ readonly permissionSetArn!: pulumi.Output<string>;
    public readonly permissionsBoundary!: pulumi.Output<outputs.SsoPermissionSetPermissionsBoundary>;
    /**
     * The relay state URL that redirect links to any service in the AWS Management Console.
     */
    public readonly relayStateType!: pulumi.Output<string>;
    /**
     * The length of time that a user can be signed in to an AWS account.
     */
    public readonly sessionDuration!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.SsoPermissionSetTag[]>;

    /**
     * Create a SsoPermissionSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SsoPermissionSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SsoPermissionSetArgs | SsoPermissionSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SsoPermissionSetState | undefined;
            resourceInputs["customerManagedPolicyReferences"] = state ? state.customerManagedPolicyReferences : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["inlinePolicy"] = state ? state.inlinePolicy : undefined;
            resourceInputs["instanceArn"] = state ? state.instanceArn : undefined;
            resourceInputs["managedPolicies"] = state ? state.managedPolicies : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissionSetArn"] = state ? state.permissionSetArn : undefined;
            resourceInputs["permissionsBoundary"] = state ? state.permissionsBoundary : undefined;
            resourceInputs["relayStateType"] = state ? state.relayStateType : undefined;
            resourceInputs["sessionDuration"] = state ? state.sessionDuration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SsoPermissionSetArgs | undefined;
            if ((!args || args.instanceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceArn'");
            }
            resourceInputs["customerManagedPolicyReferences"] = args ? args.customerManagedPolicyReferences : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inlinePolicy"] = args ? args.inlinePolicy : undefined;
            resourceInputs["instanceArn"] = args ? args.instanceArn : undefined;
            resourceInputs["managedPolicies"] = args ? args.managedPolicies : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissionsBoundary"] = args ? args.permissionsBoundary : undefined;
            resourceInputs["relayStateType"] = args ? args.relayStateType : undefined;
            resourceInputs["sessionDuration"] = args ? args.sessionDuration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["permissionSetArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SsoPermissionSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SsoPermissionSet resources.
 */
export interface SsoPermissionSetState {
    customerManagedPolicyReferences?: pulumi.Input<pulumi.Input<inputs.SsoPermissionSetCustomerManagedPolicyReference>[]>;
    /**
     * The permission set description.
     */
    description?: pulumi.Input<string>;
    /**
     * The inline policy to put in permission set.
     */
    inlinePolicy?: pulumi.Input<string>;
    /**
     * The sso instance arn that the permission set is owned.
     */
    instanceArn?: pulumi.Input<string>;
    managedPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name you want to assign to this permission set.
     */
    name?: pulumi.Input<string>;
    /**
     * The permission set that the policy will be attached to
     */
    permissionSetArn?: pulumi.Input<string>;
    permissionsBoundary?: pulumi.Input<inputs.SsoPermissionSetPermissionsBoundary>;
    /**
     * The relay state URL that redirect links to any service in the AWS Management Console.
     */
    relayStateType?: pulumi.Input<string>;
    /**
     * The length of time that a user can be signed in to an AWS account.
     */
    sessionDuration?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SsoPermissionSetTag>[]>;
}

/**
 * The set of arguments for constructing a SsoPermissionSet resource.
 */
export interface SsoPermissionSetArgs {
    customerManagedPolicyReferences?: pulumi.Input<pulumi.Input<inputs.SsoPermissionSetCustomerManagedPolicyReference>[]>;
    /**
     * The permission set description.
     */
    description?: pulumi.Input<string>;
    /**
     * The inline policy to put in permission set.
     */
    inlinePolicy?: pulumi.Input<string>;
    /**
     * The sso instance arn that the permission set is owned.
     */
    instanceArn: pulumi.Input<string>;
    managedPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name you want to assign to this permission set.
     */
    name?: pulumi.Input<string>;
    permissionsBoundary?: pulumi.Input<inputs.SsoPermissionSetPermissionsBoundary>;
    /**
     * The relay state URL that redirect links to any service in the AWS Management Console.
     */
    relayStateType?: pulumi.Input<string>;
    /**
     * The length of time that a user can be signed in to an AWS account.
     */
    sessionDuration?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SsoPermissionSetTag>[]>;
}
