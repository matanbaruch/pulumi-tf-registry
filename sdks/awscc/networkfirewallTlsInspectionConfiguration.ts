// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkfirewallTlsInspectionConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing NetworkfirewallTlsInspectionConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkfirewallTlsInspectionConfigurationState, opts?: pulumi.CustomResourceOptions): NetworkfirewallTlsInspectionConfiguration {
        return new NetworkfirewallTlsInspectionConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/networkfirewallTlsInspectionConfiguration:NetworkfirewallTlsInspectionConfiguration';

    /**
     * Returns true if the given object is an instance of NetworkfirewallTlsInspectionConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkfirewallTlsInspectionConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkfirewallTlsInspectionConfiguration.__pulumiType;
    }

    public readonly description!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.NetworkfirewallTlsInspectionConfigurationTag[]>;
    public readonly tlsInspectionConfiguration!: pulumi.Output<outputs.NetworkfirewallTlsInspectionConfigurationTlsInspectionConfiguration>;
    /**
     * A resource ARN.
     */
    public /*out*/ readonly tlsInspectionConfigurationArn!: pulumi.Output<string>;
    public /*out*/ readonly tlsInspectionConfigurationId!: pulumi.Output<string>;
    public readonly tlsInspectionConfigurationName!: pulumi.Output<string>;

    /**
     * Create a NetworkfirewallTlsInspectionConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkfirewallTlsInspectionConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkfirewallTlsInspectionConfigurationArgs | NetworkfirewallTlsInspectionConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkfirewallTlsInspectionConfigurationState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tlsInspectionConfiguration"] = state ? state.tlsInspectionConfiguration : undefined;
            resourceInputs["tlsInspectionConfigurationArn"] = state ? state.tlsInspectionConfigurationArn : undefined;
            resourceInputs["tlsInspectionConfigurationId"] = state ? state.tlsInspectionConfigurationId : undefined;
            resourceInputs["tlsInspectionConfigurationName"] = state ? state.tlsInspectionConfigurationName : undefined;
        } else {
            const args = argsOrState as NetworkfirewallTlsInspectionConfigurationArgs | undefined;
            if ((!args || args.tlsInspectionConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tlsInspectionConfiguration'");
            }
            if ((!args || args.tlsInspectionConfigurationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tlsInspectionConfigurationName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tlsInspectionConfiguration"] = args ? args.tlsInspectionConfiguration : undefined;
            resourceInputs["tlsInspectionConfigurationName"] = args ? args.tlsInspectionConfigurationName : undefined;
            resourceInputs["tlsInspectionConfigurationArn"] = undefined /*out*/;
            resourceInputs["tlsInspectionConfigurationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkfirewallTlsInspectionConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkfirewallTlsInspectionConfiguration resources.
 */
export interface NetworkfirewallTlsInspectionConfigurationState {
    description?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallTlsInspectionConfigurationTag>[]>;
    tlsInspectionConfiguration?: pulumi.Input<inputs.NetworkfirewallTlsInspectionConfigurationTlsInspectionConfiguration>;
    /**
     * A resource ARN.
     */
    tlsInspectionConfigurationArn?: pulumi.Input<string>;
    tlsInspectionConfigurationId?: pulumi.Input<string>;
    tlsInspectionConfigurationName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkfirewallTlsInspectionConfiguration resource.
 */
export interface NetworkfirewallTlsInspectionConfigurationArgs {
    description?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallTlsInspectionConfigurationTag>[]>;
    tlsInspectionConfiguration: pulumi.Input<inputs.NetworkfirewallTlsInspectionConfigurationTlsInspectionConfiguration>;
    tlsInspectionConfigurationName: pulumi.Input<string>;
}
