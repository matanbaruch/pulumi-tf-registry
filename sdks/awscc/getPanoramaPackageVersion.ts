// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getPanoramaPackageVersion(args: GetPanoramaPackageVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetPanoramaPackageVersionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getPanoramaPackageVersion:getPanoramaPackageVersion", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPanoramaPackageVersion.
 */
export interface GetPanoramaPackageVersionArgs {
    id: string;
}

/**
 * A collection of values returned by getPanoramaPackageVersion.
 */
export interface GetPanoramaPackageVersionResult {
    readonly id: string;
    readonly isLatestPatch: boolean;
    readonly markLatest: boolean;
    readonly ownerAccount: string;
    readonly packageArn: string;
    readonly packageId: string;
    readonly packageName: string;
    readonly packageVersion: string;
    readonly patchVersion: string;
    readonly registeredTime: number;
    readonly status: string;
    readonly statusDescription: string;
    readonly updatedLatestPatchVersion: string;
}
export function getPanoramaPackageVersionOutput(args: GetPanoramaPackageVersionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPanoramaPackageVersionResult> {
    return pulumi.output(args).apply((a: any) => getPanoramaPackageVersion(a, opts))
}

/**
 * A collection of arguments for invoking getPanoramaPackageVersion.
 */
export interface GetPanoramaPackageVersionOutputArgs {
    id: pulumi.Input<string>;
}
