// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudformationHookTypeConfig extends pulumi.CustomResource {
    /**
     * Get an existing CloudformationHookTypeConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudformationHookTypeConfigState, opts?: pulumi.CustomResourceOptions): CloudformationHookTypeConfig {
        return new CloudformationHookTypeConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/cloudformationHookTypeConfig:CloudformationHookTypeConfig';

    /**
     * Returns true if the given object is an instance of CloudformationHookTypeConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudformationHookTypeConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudformationHookTypeConfig.__pulumiType;
    }

    /**
     * The configuration data for the extension, in this account and region.
     */
    public readonly configuration!: pulumi.Output<string>;
    /**
     * An alias by which to refer to this extension configuration data.
     */
    public readonly configurationAlias!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) for the configuration data, in this account and region.
     */
    public /*out*/ readonly configurationArn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the type without version number.
     */
    public readonly typeArn!: pulumi.Output<string>;
    /**
     * The name of the type being registered. We recommend that type names adhere to the following pattern:
     * company_or_organization::service::type.
     */
    public readonly typeName!: pulumi.Output<string>;

    /**
     * Create a CloudformationHookTypeConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CloudformationHookTypeConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudformationHookTypeConfigArgs | CloudformationHookTypeConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudformationHookTypeConfigState | undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["configurationAlias"] = state ? state.configurationAlias : undefined;
            resourceInputs["configurationArn"] = state ? state.configurationArn : undefined;
            resourceInputs["typeArn"] = state ? state.typeArn : undefined;
            resourceInputs["typeName"] = state ? state.typeName : undefined;
        } else {
            const args = argsOrState as CloudformationHookTypeConfigArgs | undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["configurationAlias"] = args ? args.configurationAlias : undefined;
            resourceInputs["typeArn"] = args ? args.typeArn : undefined;
            resourceInputs["typeName"] = args ? args.typeName : undefined;
            resourceInputs["configurationArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudformationHookTypeConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudformationHookTypeConfig resources.
 */
export interface CloudformationHookTypeConfigState {
    /**
     * The configuration data for the extension, in this account and region.
     */
    configuration?: pulumi.Input<string>;
    /**
     * An alias by which to refer to this extension configuration data.
     */
    configurationAlias?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) for the configuration data, in this account and region.
     */
    configurationArn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the type without version number.
     */
    typeArn?: pulumi.Input<string>;
    /**
     * The name of the type being registered. We recommend that type names adhere to the following pattern:
     * company_or_organization::service::type.
     */
    typeName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudformationHookTypeConfig resource.
 */
export interface CloudformationHookTypeConfigArgs {
    /**
     * The configuration data for the extension, in this account and region.
     */
    configuration?: pulumi.Input<string>;
    /**
     * An alias by which to refer to this extension configuration data.
     */
    configurationAlias?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the type without version number.
     */
    typeArn?: pulumi.Input<string>;
    /**
     * The name of the type being registered. We recommend that type names adhere to the following pattern:
     * company_or_organization::service::type.
     */
    typeName?: pulumi.Input<string>;
}
