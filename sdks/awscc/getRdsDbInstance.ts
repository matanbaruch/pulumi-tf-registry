// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRdsDbInstance(args: GetRdsDbInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetRdsDbInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getRdsDbInstance:getRdsDbInstance", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRdsDbInstance.
 */
export interface GetRdsDbInstanceArgs {
    id: string;
}

/**
 * A collection of values returned by getRdsDbInstance.
 */
export interface GetRdsDbInstanceResult {
    readonly allocatedStorage: string;
    readonly allowMajorVersionUpgrade: boolean;
    readonly associatedRoles: outputs.GetRdsDbInstanceAssociatedRole[];
    readonly autoMinorVersionUpgrade: boolean;
    readonly automaticBackupReplicationKmsKeyId: string;
    readonly automaticBackupReplicationRegion: string;
    readonly availabilityZone: string;
    readonly backupRetentionPeriod: number;
    readonly caCertificateIdentifier: string;
    readonly certificateDetails: outputs.GetRdsDbInstanceCertificateDetails;
    readonly certificateRotationRestart: boolean;
    readonly characterSetName: string;
    readonly copyTagsToSnapshot: boolean;
    readonly customIamInstanceProfile: string;
    readonly dbClusterIdentifier: string;
    readonly dbClusterSnapshotIdentifier: string;
    readonly dbInstanceArn: string;
    readonly dbInstanceClass: string;
    readonly dbInstanceIdentifier: string;
    readonly dbName: string;
    readonly dbParameterGroupName: string;
    readonly dbSecurityGroups: string[];
    readonly dbSnapshotIdentifier: string;
    readonly dbSubnetGroupName: string;
    readonly dbSystemId: string;
    readonly dbiResourceId: string;
    readonly dedicatedLogVolume: boolean;
    readonly deleteAutomatedBackups: boolean;
    readonly deletionProtection: boolean;
    readonly domain: string;
    readonly domainAuthSecretArn: string;
    readonly domainDnsIps: string[];
    readonly domainFqdn: string;
    readonly domainIamRoleName: string;
    readonly domainOu: string;
    readonly enableCloudwatchLogsExports: string[];
    readonly enableIamDatabaseAuthentication: boolean;
    readonly enablePerformanceInsights: boolean;
    readonly endpoint: outputs.GetRdsDbInstanceEndpoint;
    readonly engine: string;
    readonly engineLifecycleSupport: string;
    readonly engineVersion: string;
    readonly id: string;
    readonly iops: number;
    readonly kmsKeyId: string;
    readonly licenseModel: string;
    readonly manageMasterUserPassword: boolean;
    readonly masterUserPassword: string;
    readonly masterUserSecret: outputs.GetRdsDbInstanceMasterUserSecret;
    readonly masterUsername: string;
    readonly maxAllocatedStorage: number;
    readonly monitoringInterval: number;
    readonly monitoringRoleArn: string;
    readonly multiAz: boolean;
    readonly ncharCharacterSetName: string;
    readonly networkType: string;
    readonly optionGroupName: string;
    readonly performanceInsightsKmsKeyId: string;
    readonly performanceInsightsRetentionPeriod: number;
    readonly port: string;
    readonly preferredBackupWindow: string;
    readonly preferredMaintenanceWindow: string;
    readonly processorFeatures: outputs.GetRdsDbInstanceProcessorFeature[];
    readonly promotionTier: number;
    readonly publiclyAccessible: boolean;
    readonly replicaMode: string;
    readonly restoreTime: string;
    readonly sourceDbClusterIdentifier: string;
    readonly sourceDbInstanceAutomatedBackupsArn: string;
    readonly sourceDbInstanceIdentifier: string;
    readonly sourceDbiResourceId: string;
    readonly sourceRegion: string;
    readonly storageEncrypted: boolean;
    readonly storageThroughput: number;
    readonly storageType: string;
    readonly tags: outputs.GetRdsDbInstanceTag[];
    readonly tdeCredentialArn: string;
    readonly tdeCredentialPassword: string;
    readonly timezone: string;
    readonly useDefaultProcessorFeatures: boolean;
    readonly useLatestRestorableTime: boolean;
    readonly vpcSecurityGroups: string[];
}
export function getRdsDbInstanceOutput(args: GetRdsDbInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRdsDbInstanceResult> {
    return pulumi.output(args).apply((a: any) => getRdsDbInstance(a, opts))
}

/**
 * A collection of arguments for invoking getRdsDbInstance.
 */
export interface GetRdsDbInstanceOutputArgs {
    id: pulumi.Input<string>;
}
