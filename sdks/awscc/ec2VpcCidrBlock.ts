// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ec2VpcCidrBlock extends pulumi.CustomResource {
    /**
     * Get an existing Ec2VpcCidrBlock resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2VpcCidrBlockState, opts?: pulumi.CustomResourceOptions): Ec2VpcCidrBlock {
        return new Ec2VpcCidrBlock(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2VpcCidrBlock:Ec2VpcCidrBlock';

    /**
     * Returns true if the given object is an instance of Ec2VpcCidrBlock.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2VpcCidrBlock {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2VpcCidrBlock.__pulumiType;
    }

    /**
     * Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6
     * addresses, or the size of the CIDR block.
     */
    public readonly amazonProvidedIpv6CidrBlock!: pulumi.Output<boolean>;
    /**
     * An IPv4 CIDR block to associate with the VPC.
     */
    public readonly cidrBlock!: pulumi.Output<string>;
    /**
     * The IP Source of an IPv6 VPC CIDR Block.
     */
    public /*out*/ readonly ipSource!: pulumi.Output<string>;
    /**
     * The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.
     */
    public readonly ipv4IpamPoolId!: pulumi.Output<string>;
    /**
     * The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
     */
    public readonly ipv4NetmaskLength!: pulumi.Output<number>;
    /**
     * The value denoting whether an IPv6 VPC CIDR Block is public or private.
     */
    public /*out*/ readonly ipv6AddressAttribute!: pulumi.Output<string>;
    /**
     * An IPv6 CIDR block from the IPv6 address pool.
     */
    public readonly ipv6CidrBlock!: pulumi.Output<string>;
    /**
     * The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.
     */
    public readonly ipv6IpamPoolId!: pulumi.Output<string>;
    /**
     * The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
     */
    public readonly ipv6NetmaskLength!: pulumi.Output<number>;
    /**
     * The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
     */
    public readonly ipv6Pool!: pulumi.Output<string>;
    /**
     * The Id of the VPC associated CIDR Block.
     */
    public /*out*/ readonly vpcCidrBlockId!: pulumi.Output<string>;
    /**
     * The ID of the VPC.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Ec2VpcCidrBlock resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2VpcCidrBlockArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2VpcCidrBlockArgs | Ec2VpcCidrBlockState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2VpcCidrBlockState | undefined;
            resourceInputs["amazonProvidedIpv6CidrBlock"] = state ? state.amazonProvidedIpv6CidrBlock : undefined;
            resourceInputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            resourceInputs["ipSource"] = state ? state.ipSource : undefined;
            resourceInputs["ipv4IpamPoolId"] = state ? state.ipv4IpamPoolId : undefined;
            resourceInputs["ipv4NetmaskLength"] = state ? state.ipv4NetmaskLength : undefined;
            resourceInputs["ipv6AddressAttribute"] = state ? state.ipv6AddressAttribute : undefined;
            resourceInputs["ipv6CidrBlock"] = state ? state.ipv6CidrBlock : undefined;
            resourceInputs["ipv6IpamPoolId"] = state ? state.ipv6IpamPoolId : undefined;
            resourceInputs["ipv6NetmaskLength"] = state ? state.ipv6NetmaskLength : undefined;
            resourceInputs["ipv6Pool"] = state ? state.ipv6Pool : undefined;
            resourceInputs["vpcCidrBlockId"] = state ? state.vpcCidrBlockId : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as Ec2VpcCidrBlockArgs | undefined;
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["amazonProvidedIpv6CidrBlock"] = args ? args.amazonProvidedIpv6CidrBlock : undefined;
            resourceInputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            resourceInputs["ipv4IpamPoolId"] = args ? args.ipv4IpamPoolId : undefined;
            resourceInputs["ipv4NetmaskLength"] = args ? args.ipv4NetmaskLength : undefined;
            resourceInputs["ipv6CidrBlock"] = args ? args.ipv6CidrBlock : undefined;
            resourceInputs["ipv6IpamPoolId"] = args ? args.ipv6IpamPoolId : undefined;
            resourceInputs["ipv6NetmaskLength"] = args ? args.ipv6NetmaskLength : undefined;
            resourceInputs["ipv6Pool"] = args ? args.ipv6Pool : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["ipSource"] = undefined /*out*/;
            resourceInputs["ipv6AddressAttribute"] = undefined /*out*/;
            resourceInputs["vpcCidrBlockId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2VpcCidrBlock.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2VpcCidrBlock resources.
 */
export interface Ec2VpcCidrBlockState {
    /**
     * Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6
     * addresses, or the size of the CIDR block.
     */
    amazonProvidedIpv6CidrBlock?: pulumi.Input<boolean>;
    /**
     * An IPv4 CIDR block to associate with the VPC.
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * The IP Source of an IPv6 VPC CIDR Block.
     */
    ipSource?: pulumi.Input<string>;
    /**
     * The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.
     */
    ipv4IpamPoolId?: pulumi.Input<string>;
    /**
     * The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
     */
    ipv4NetmaskLength?: pulumi.Input<number>;
    /**
     * The value denoting whether an IPv6 VPC CIDR Block is public or private.
     */
    ipv6AddressAttribute?: pulumi.Input<string>;
    /**
     * An IPv6 CIDR block from the IPv6 address pool.
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    /**
     * The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.
     */
    ipv6IpamPoolId?: pulumi.Input<string>;
    /**
     * The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
     */
    ipv6NetmaskLength?: pulumi.Input<number>;
    /**
     * The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
     */
    ipv6Pool?: pulumi.Input<string>;
    /**
     * The Id of the VPC associated CIDR Block.
     */
    vpcCidrBlockId?: pulumi.Input<string>;
    /**
     * The ID of the VPC.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2VpcCidrBlock resource.
 */
export interface Ec2VpcCidrBlockArgs {
    /**
     * Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6
     * addresses, or the size of the CIDR block.
     */
    amazonProvidedIpv6CidrBlock?: pulumi.Input<boolean>;
    /**
     * An IPv4 CIDR block to associate with the VPC.
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.
     */
    ipv4IpamPoolId?: pulumi.Input<string>;
    /**
     * The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
     */
    ipv4NetmaskLength?: pulumi.Input<number>;
    /**
     * An IPv6 CIDR block from the IPv6 address pool.
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    /**
     * The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.
     */
    ipv6IpamPoolId?: pulumi.Input<string>;
    /**
     * The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
     */
    ipv6NetmaskLength?: pulumi.Input<number>;
    /**
     * The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
     */
    ipv6Pool?: pulumi.Input<string>;
    /**
     * The ID of the VPC.
     */
    vpcId: pulumi.Input<string>;
}
