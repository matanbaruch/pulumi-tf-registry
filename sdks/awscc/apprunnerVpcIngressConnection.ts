// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApprunnerVpcIngressConnection extends pulumi.CustomResource {
    /**
     * Get an existing ApprunnerVpcIngressConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApprunnerVpcIngressConnectionState, opts?: pulumi.CustomResourceOptions): ApprunnerVpcIngressConnection {
        return new ApprunnerVpcIngressConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/apprunnerVpcIngressConnection:ApprunnerVpcIngressConnection';

    /**
     * Returns true if the given object is an instance of ApprunnerVpcIngressConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApprunnerVpcIngressConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApprunnerVpcIngressConnection.__pulumiType;
    }

    /**
     * The Domain name associated with the VPC Ingress Connection.
     */
    public /*out*/ readonly domainName!: pulumi.Output<string>;
    /**
     * The configuration of customer?s VPC and related VPC endpoint
     */
    public readonly ingressVpcConfiguration!: pulumi.Output<outputs.ApprunnerVpcIngressConnectionIngressVpcConfiguration>;
    /**
     * The Amazon Resource Name (ARN) of the service.
     */
    public readonly serviceArn!: pulumi.Output<string>;
    /**
     * The current status of the VpcIngressConnection.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.ApprunnerVpcIngressConnectionTag[]>;
    /**
     * The Amazon Resource Name (ARN) of the VpcIngressConnection.
     */
    public /*out*/ readonly vpcIngressConnectionArn!: pulumi.Output<string>;
    /**
     * The customer-provided Vpc Ingress Connection name.
     */
    public readonly vpcIngressConnectionName!: pulumi.Output<string>;

    /**
     * Create a ApprunnerVpcIngressConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApprunnerVpcIngressConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApprunnerVpcIngressConnectionArgs | ApprunnerVpcIngressConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApprunnerVpcIngressConnectionState | undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["ingressVpcConfiguration"] = state ? state.ingressVpcConfiguration : undefined;
            resourceInputs["serviceArn"] = state ? state.serviceArn : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcIngressConnectionArn"] = state ? state.vpcIngressConnectionArn : undefined;
            resourceInputs["vpcIngressConnectionName"] = state ? state.vpcIngressConnectionName : undefined;
        } else {
            const args = argsOrState as ApprunnerVpcIngressConnectionArgs | undefined;
            if ((!args || args.ingressVpcConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ingressVpcConfiguration'");
            }
            if ((!args || args.serviceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceArn'");
            }
            resourceInputs["ingressVpcConfiguration"] = args ? args.ingressVpcConfiguration : undefined;
            resourceInputs["serviceArn"] = args ? args.serviceArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcIngressConnectionName"] = args ? args.vpcIngressConnectionName : undefined;
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vpcIngressConnectionArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApprunnerVpcIngressConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApprunnerVpcIngressConnection resources.
 */
export interface ApprunnerVpcIngressConnectionState {
    /**
     * The Domain name associated with the VPC Ingress Connection.
     */
    domainName?: pulumi.Input<string>;
    /**
     * The configuration of customer?s VPC and related VPC endpoint
     */
    ingressVpcConfiguration?: pulumi.Input<inputs.ApprunnerVpcIngressConnectionIngressVpcConfiguration>;
    /**
     * The Amazon Resource Name (ARN) of the service.
     */
    serviceArn?: pulumi.Input<string>;
    /**
     * The current status of the VpcIngressConnection.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ApprunnerVpcIngressConnectionTag>[]>;
    /**
     * The Amazon Resource Name (ARN) of the VpcIngressConnection.
     */
    vpcIngressConnectionArn?: pulumi.Input<string>;
    /**
     * The customer-provided Vpc Ingress Connection name.
     */
    vpcIngressConnectionName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApprunnerVpcIngressConnection resource.
 */
export interface ApprunnerVpcIngressConnectionArgs {
    /**
     * The configuration of customer?s VPC and related VPC endpoint
     */
    ingressVpcConfiguration: pulumi.Input<inputs.ApprunnerVpcIngressConnectionIngressVpcConfiguration>;
    /**
     * The Amazon Resource Name (ARN) of the service.
     */
    serviceArn: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ApprunnerVpcIngressConnectionTag>[]>;
    /**
     * The customer-provided Vpc Ingress Connection name.
     */
    vpcIngressConnectionName?: pulumi.Input<string>;
}
