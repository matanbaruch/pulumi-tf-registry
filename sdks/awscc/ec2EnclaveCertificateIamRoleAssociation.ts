// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ec2EnclaveCertificateIamRoleAssociation extends pulumi.CustomResource {
    /**
     * Get an existing Ec2EnclaveCertificateIamRoleAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2EnclaveCertificateIamRoleAssociationState, opts?: pulumi.CustomResourceOptions): Ec2EnclaveCertificateIamRoleAssociation {
        return new Ec2EnclaveCertificateIamRoleAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2EnclaveCertificateIamRoleAssociation:Ec2EnclaveCertificateIamRoleAssociation';

    /**
     * Returns true if the given object is an instance of Ec2EnclaveCertificateIamRoleAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2EnclaveCertificateIamRoleAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2EnclaveCertificateIamRoleAssociation.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the ACM certificate with which to associate the IAM role.
     */
    public readonly certificateArn!: pulumi.Output<string>;
    /**
     * The name of the Amazon S3 bucket to which the certificate was uploaded.
     */
    public /*out*/ readonly certificateS3BucketName!: pulumi.Output<string>;
    /**
     * The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored.
     */
    public /*out*/ readonly certificateS3ObjectKey!: pulumi.Output<string>;
    /**
     * The ID of the AWS KMS CMK used to encrypt the private key of the certificate.
     */
    public /*out*/ readonly encryptionKmsKeyId!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM
     * roles with an ACM certificate.
     */
    public readonly roleArn!: pulumi.Output<string>;

    /**
     * Create a Ec2EnclaveCertificateIamRoleAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2EnclaveCertificateIamRoleAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2EnclaveCertificateIamRoleAssociationArgs | Ec2EnclaveCertificateIamRoleAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2EnclaveCertificateIamRoleAssociationState | undefined;
            resourceInputs["certificateArn"] = state ? state.certificateArn : undefined;
            resourceInputs["certificateS3BucketName"] = state ? state.certificateS3BucketName : undefined;
            resourceInputs["certificateS3ObjectKey"] = state ? state.certificateS3ObjectKey : undefined;
            resourceInputs["encryptionKmsKeyId"] = state ? state.encryptionKmsKeyId : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
        } else {
            const args = argsOrState as Ec2EnclaveCertificateIamRoleAssociationArgs | undefined;
            if ((!args || args.certificateArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateArn'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["certificateArn"] = args ? args.certificateArn : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["certificateS3BucketName"] = undefined /*out*/;
            resourceInputs["certificateS3ObjectKey"] = undefined /*out*/;
            resourceInputs["encryptionKmsKeyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2EnclaveCertificateIamRoleAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2EnclaveCertificateIamRoleAssociation resources.
 */
export interface Ec2EnclaveCertificateIamRoleAssociationState {
    /**
     * The Amazon Resource Name (ARN) of the ACM certificate with which to associate the IAM role.
     */
    certificateArn?: pulumi.Input<string>;
    /**
     * The name of the Amazon S3 bucket to which the certificate was uploaded.
     */
    certificateS3BucketName?: pulumi.Input<string>;
    /**
     * The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored.
     */
    certificateS3ObjectKey?: pulumi.Input<string>;
    /**
     * The ID of the AWS KMS CMK used to encrypt the private key of the certificate.
     */
    encryptionKmsKeyId?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM
     * roles with an ACM certificate.
     */
    roleArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2EnclaveCertificateIamRoleAssociation resource.
 */
export interface Ec2EnclaveCertificateIamRoleAssociationArgs {
    /**
     * The Amazon Resource Name (ARN) of the ACM certificate with which to associate the IAM role.
     */
    certificateArn: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM
     * roles with an ACM certificate.
     */
    roleArn: pulumi.Input<string>;
}
