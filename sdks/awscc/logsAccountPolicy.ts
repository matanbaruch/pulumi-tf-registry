// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogsAccountPolicy extends pulumi.CustomResource {
    /**
     * Get an existing LogsAccountPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogsAccountPolicyState, opts?: pulumi.CustomResourceOptions): LogsAccountPolicy {
        return new LogsAccountPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/logsAccountPolicy:LogsAccountPolicy';

    /**
     * Returns true if the given object is an instance of LogsAccountPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogsAccountPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogsAccountPolicy.__pulumiType;
    }

    /**
     * User account id
     */
    public /*out*/ readonly accountId!: pulumi.Output<string>;
    /**
     * The body of the policy document you want to use for this topic. You can only add one policy per PolicyType. The policy
     * must be in JSON string format. Length Constraints: Maximum length of 30720
     */
    public readonly policyDocument!: pulumi.Output<string>;
    /**
     * The name of the account policy
     */
    public readonly policyName!: pulumi.Output<string>;
    /**
     * Type of the policy.
     */
    public readonly policyType!: pulumi.Output<string>;
    /**
     * Scope for policy application
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * Log group selection criteria to apply policy only to a subset of log groups. SelectionCriteria string can be up to 25KB
     * and cloudwatchlogs determines the length of selectionCriteria by using its UTF-8 bytes
     */
    public readonly selectionCriteria!: pulumi.Output<string>;

    /**
     * Create a LogsAccountPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogsAccountPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogsAccountPolicyArgs | LogsAccountPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogsAccountPolicyState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["policyDocument"] = state ? state.policyDocument : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["selectionCriteria"] = state ? state.selectionCriteria : undefined;
        } else {
            const args = argsOrState as LogsAccountPolicyArgs | undefined;
            if ((!args || args.policyDocument === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyDocument'");
            }
            if ((!args || args.policyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            if ((!args || args.policyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyType'");
            }
            resourceInputs["policyDocument"] = args ? args.policyDocument : undefined;
            resourceInputs["policyName"] = args ? args.policyName : undefined;
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["selectionCriteria"] = args ? args.selectionCriteria : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogsAccountPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogsAccountPolicy resources.
 */
export interface LogsAccountPolicyState {
    /**
     * User account id
     */
    accountId?: pulumi.Input<string>;
    /**
     * The body of the policy document you want to use for this topic. You can only add one policy per PolicyType. The policy
     * must be in JSON string format. Length Constraints: Maximum length of 30720
     */
    policyDocument?: pulumi.Input<string>;
    /**
     * The name of the account policy
     */
    policyName?: pulumi.Input<string>;
    /**
     * Type of the policy.
     */
    policyType?: pulumi.Input<string>;
    /**
     * Scope for policy application
     */
    scope?: pulumi.Input<string>;
    /**
     * Log group selection criteria to apply policy only to a subset of log groups. SelectionCriteria string can be up to 25KB
     * and cloudwatchlogs determines the length of selectionCriteria by using its UTF-8 bytes
     */
    selectionCriteria?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogsAccountPolicy resource.
 */
export interface LogsAccountPolicyArgs {
    /**
     * The body of the policy document you want to use for this topic. You can only add one policy per PolicyType. The policy
     * must be in JSON string format. Length Constraints: Maximum length of 30720
     */
    policyDocument: pulumi.Input<string>;
    /**
     * The name of the account policy
     */
    policyName: pulumi.Input<string>;
    /**
     * Type of the policy.
     */
    policyType: pulumi.Input<string>;
    /**
     * Scope for policy application
     */
    scope?: pulumi.Input<string>;
    /**
     * Log group selection criteria to apply policy only to a subset of log groups. SelectionCriteria string can be up to 25KB
     * and cloudwatchlogs determines the length of selectionCriteria by using its UTF-8 bytes
     */
    selectionCriteria?: pulumi.Input<string>;
}
