// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ResourcegroupsGroup extends pulumi.CustomResource {
    /**
     * Get an existing ResourcegroupsGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourcegroupsGroupState, opts?: pulumi.CustomResourceOptions): ResourcegroupsGroup {
        return new ResourcegroupsGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/resourcegroupsGroup:ResourcegroupsGroup';

    /**
     * Returns true if the given object is an instance of ResourcegroupsGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourcegroupsGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourcegroupsGroup.__pulumiType;
    }

    /**
     * The Resource Group ARN.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly configurations!: pulumi.Output<outputs.ResourcegroupsGroupConfiguration[]>;
    /**
     * The description of the resource group
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name of the resource group
     */
    public readonly name!: pulumi.Output<string>;
    public readonly resourceQuery!: pulumi.Output<outputs.ResourcegroupsGroupResourceQuery>;
    public readonly resources!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<outputs.ResourcegroupsGroupTag[]>;

    /**
     * Create a ResourcegroupsGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ResourcegroupsGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourcegroupsGroupArgs | ResourcegroupsGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourcegroupsGroupState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceQuery"] = state ? state.resourceQuery : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ResourcegroupsGroupArgs | undefined;
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceQuery"] = args ? args.resourceQuery : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourcegroupsGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResourcegroupsGroup resources.
 */
export interface ResourcegroupsGroupState {
    /**
     * The Resource Group ARN.
     */
    arn?: pulumi.Input<string>;
    configurations?: pulumi.Input<pulumi.Input<inputs.ResourcegroupsGroupConfiguration>[]>;
    /**
     * The description of the resource group
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the resource group
     */
    name?: pulumi.Input<string>;
    resourceQuery?: pulumi.Input<inputs.ResourcegroupsGroupResourceQuery>;
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.ResourcegroupsGroupTag>[]>;
}

/**
 * The set of arguments for constructing a ResourcegroupsGroup resource.
 */
export interface ResourcegroupsGroupArgs {
    configurations?: pulumi.Input<pulumi.Input<inputs.ResourcegroupsGroupConfiguration>[]>;
    /**
     * The description of the resource group
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the resource group
     */
    name?: pulumi.Input<string>;
    resourceQuery?: pulumi.Input<inputs.ResourcegroupsGroupResourceQuery>;
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.ResourcegroupsGroupTag>[]>;
}
