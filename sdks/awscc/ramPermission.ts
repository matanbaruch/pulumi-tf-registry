// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RamPermission extends pulumi.CustomResource {
    /**
     * Get an existing RamPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RamPermissionState, opts?: pulumi.CustomResourceOptions): RamPermission {
        return new RamPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ramPermission:RamPermission';

    /**
     * Returns true if the given object is an instance of RamPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RamPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RamPermission.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Set to true to use this as the default permission.
     */
    public /*out*/ readonly isResourceTypeDefault!: pulumi.Output<boolean>;
    /**
     * The name of the permission.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly permissionType!: pulumi.Output<string>;
    /**
     * Policy template for the permission.
     */
    public readonly policyTemplate!: pulumi.Output<string>;
    /**
     * The resource type this permission can be used with.
     */
    public readonly resourceType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.RamPermissionTag[]>;
    /**
     * Version of the permission.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a RamPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RamPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RamPermissionArgs | RamPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RamPermissionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["isResourceTypeDefault"] = state ? state.isResourceTypeDefault : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissionType"] = state ? state.permissionType : undefined;
            resourceInputs["policyTemplate"] = state ? state.policyTemplate : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as RamPermissionArgs | undefined;
            if ((!args || args.policyTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyTemplate'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyTemplate"] = args ? args.policyTemplate : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["isResourceTypeDefault"] = undefined /*out*/;
            resourceInputs["permissionType"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RamPermission.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RamPermission resources.
 */
export interface RamPermissionState {
    arn?: pulumi.Input<string>;
    /**
     * Set to true to use this as the default permission.
     */
    isResourceTypeDefault?: pulumi.Input<boolean>;
    /**
     * The name of the permission.
     */
    name?: pulumi.Input<string>;
    permissionType?: pulumi.Input<string>;
    /**
     * Policy template for the permission.
     */
    policyTemplate?: pulumi.Input<string>;
    /**
     * The resource type this permission can be used with.
     */
    resourceType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.RamPermissionTag>[]>;
    /**
     * Version of the permission.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RamPermission resource.
 */
export interface RamPermissionArgs {
    /**
     * The name of the permission.
     */
    name?: pulumi.Input<string>;
    /**
     * Policy template for the permission.
     */
    policyTemplate: pulumi.Input<string>;
    /**
     * The resource type this permission can be used with.
     */
    resourceType: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.RamPermissionTag>[]>;
}
