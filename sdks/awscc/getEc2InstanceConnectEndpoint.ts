// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEc2InstanceConnectEndpoint(args: GetEc2InstanceConnectEndpointArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2InstanceConnectEndpointResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEc2InstanceConnectEndpoint:getEc2InstanceConnectEndpoint", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2InstanceConnectEndpoint.
 */
export interface GetEc2InstanceConnectEndpointArgs {
    id: string;
}

/**
 * A collection of values returned by getEc2InstanceConnectEndpoint.
 */
export interface GetEc2InstanceConnectEndpointResult {
    readonly clientToken: string;
    readonly id: string;
    readonly instanceConnectEndpointId: string;
    readonly preserveClientIp: boolean;
    readonly securityGroupIds: string[];
    readonly subnetId: string;
    readonly tags: outputs.GetEc2InstanceConnectEndpointTag[];
}
export function getEc2InstanceConnectEndpointOutput(args: GetEc2InstanceConnectEndpointOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2InstanceConnectEndpointResult> {
    return pulumi.output(args).apply((a: any) => getEc2InstanceConnectEndpoint(a, opts))
}

/**
 * A collection of arguments for invoking getEc2InstanceConnectEndpoint.
 */
export interface GetEc2InstanceConnectEndpointOutputArgs {
    id: pulumi.Input<string>;
}
