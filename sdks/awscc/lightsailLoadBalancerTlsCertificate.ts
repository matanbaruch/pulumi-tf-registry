// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LightsailLoadBalancerTlsCertificate extends pulumi.CustomResource {
    /**
     * Get an existing LightsailLoadBalancerTlsCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LightsailLoadBalancerTlsCertificateState, opts?: pulumi.CustomResourceOptions): LightsailLoadBalancerTlsCertificate {
        return new LightsailLoadBalancerTlsCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lightsailLoadBalancerTlsCertificate:LightsailLoadBalancerTlsCertificate';

    /**
     * Returns true if the given object is an instance of LightsailLoadBalancerTlsCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LightsailLoadBalancerTlsCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LightsailLoadBalancerTlsCertificate.__pulumiType;
    }

    /**
     * An array of strings listing alternative domains and subdomains for your SSL/TLS certificate.
     */
    public readonly certificateAlternativeNames!: pulumi.Output<string[]>;
    /**
     * The domain name (e.g., example.com ) for your SSL/TLS certificate.
     */
    public readonly certificateDomainName!: pulumi.Output<string>;
    /**
     * The SSL/TLS certificate name.
     */
    public readonly certificateName!: pulumi.Output<string>;
    /**
     * A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
     */
    public readonly httpsRedirectionEnabled!: pulumi.Output<boolean>;
    /**
     * When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
     */
    public readonly isAttached!: pulumi.Output<boolean>;
    /**
     * The name of your load balancer.
     */
    public readonly loadBalancerName!: pulumi.Output<string>;
    public /*out*/ readonly loadBalancerTlsCertificateArn!: pulumi.Output<string>;
    /**
     * The validation status of the SSL/TLS certificate.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a LightsailLoadBalancerTlsCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LightsailLoadBalancerTlsCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LightsailLoadBalancerTlsCertificateArgs | LightsailLoadBalancerTlsCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LightsailLoadBalancerTlsCertificateState | undefined;
            resourceInputs["certificateAlternativeNames"] = state ? state.certificateAlternativeNames : undefined;
            resourceInputs["certificateDomainName"] = state ? state.certificateDomainName : undefined;
            resourceInputs["certificateName"] = state ? state.certificateName : undefined;
            resourceInputs["httpsRedirectionEnabled"] = state ? state.httpsRedirectionEnabled : undefined;
            resourceInputs["isAttached"] = state ? state.isAttached : undefined;
            resourceInputs["loadBalancerName"] = state ? state.loadBalancerName : undefined;
            resourceInputs["loadBalancerTlsCertificateArn"] = state ? state.loadBalancerTlsCertificateArn : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as LightsailLoadBalancerTlsCertificateArgs | undefined;
            if ((!args || args.certificateDomainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateDomainName'");
            }
            if ((!args || args.certificateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateName'");
            }
            if ((!args || args.loadBalancerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerName'");
            }
            resourceInputs["certificateAlternativeNames"] = args ? args.certificateAlternativeNames : undefined;
            resourceInputs["certificateDomainName"] = args ? args.certificateDomainName : undefined;
            resourceInputs["certificateName"] = args ? args.certificateName : undefined;
            resourceInputs["httpsRedirectionEnabled"] = args ? args.httpsRedirectionEnabled : undefined;
            resourceInputs["isAttached"] = args ? args.isAttached : undefined;
            resourceInputs["loadBalancerName"] = args ? args.loadBalancerName : undefined;
            resourceInputs["loadBalancerTlsCertificateArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LightsailLoadBalancerTlsCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LightsailLoadBalancerTlsCertificate resources.
 */
export interface LightsailLoadBalancerTlsCertificateState {
    /**
     * An array of strings listing alternative domains and subdomains for your SSL/TLS certificate.
     */
    certificateAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The domain name (e.g., example.com ) for your SSL/TLS certificate.
     */
    certificateDomainName?: pulumi.Input<string>;
    /**
     * The SSL/TLS certificate name.
     */
    certificateName?: pulumi.Input<string>;
    /**
     * A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
     */
    httpsRedirectionEnabled?: pulumi.Input<boolean>;
    /**
     * When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
     */
    isAttached?: pulumi.Input<boolean>;
    /**
     * The name of your load balancer.
     */
    loadBalancerName?: pulumi.Input<string>;
    loadBalancerTlsCertificateArn?: pulumi.Input<string>;
    /**
     * The validation status of the SSL/TLS certificate.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LightsailLoadBalancerTlsCertificate resource.
 */
export interface LightsailLoadBalancerTlsCertificateArgs {
    /**
     * An array of strings listing alternative domains and subdomains for your SSL/TLS certificate.
     */
    certificateAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The domain name (e.g., example.com ) for your SSL/TLS certificate.
     */
    certificateDomainName: pulumi.Input<string>;
    /**
     * The SSL/TLS certificate name.
     */
    certificateName: pulumi.Input<string>;
    /**
     * A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
     */
    httpsRedirectionEnabled?: pulumi.Input<boolean>;
    /**
     * When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
     */
    isAttached?: pulumi.Input<boolean>;
    /**
     * The name of your load balancer.
     */
    loadBalancerName: pulumi.Input<string>;
}
