// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AccessanalyzerAnalyzer extends pulumi.CustomResource {
    /**
     * Get an existing AccessanalyzerAnalyzer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessanalyzerAnalyzerState, opts?: pulumi.CustomResourceOptions): AccessanalyzerAnalyzer {
        return new AccessanalyzerAnalyzer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/accessanalyzerAnalyzer:AccessanalyzerAnalyzer';

    /**
     * Returns true if the given object is an instance of AccessanalyzerAnalyzer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessanalyzerAnalyzer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessanalyzerAnalyzer.__pulumiType;
    }

    /**
     * The configuration for the analyzer
     */
    public readonly analyzerConfiguration!: pulumi.Output<outputs.AccessanalyzerAnalyzerAnalyzerConfiguration>;
    /**
     * Analyzer name
     */
    public readonly analyzerName!: pulumi.Output<string>;
    public readonly archiveRules!: pulumi.Output<outputs.AccessanalyzerAnalyzerArchiveRule[]>;
    /**
     * Amazon Resource Name (ARN) of the analyzer
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.AccessanalyzerAnalyzerTag[]>;
    /**
     * The type of the analyzer, must be one of ACCOUNT, ORGANIZATION, ACCOUNT_UNUSED_ACCESS or ORGANIZATION_UNUSED_ACCESS
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a AccessanalyzerAnalyzer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessanalyzerAnalyzerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessanalyzerAnalyzerArgs | AccessanalyzerAnalyzerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessanalyzerAnalyzerState | undefined;
            resourceInputs["analyzerConfiguration"] = state ? state.analyzerConfiguration : undefined;
            resourceInputs["analyzerName"] = state ? state.analyzerName : undefined;
            resourceInputs["archiveRules"] = state ? state.archiveRules : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AccessanalyzerAnalyzerArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["analyzerConfiguration"] = args ? args.analyzerConfiguration : undefined;
            resourceInputs["analyzerName"] = args ? args.analyzerName : undefined;
            resourceInputs["archiveRules"] = args ? args.archiveRules : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessanalyzerAnalyzer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AccessanalyzerAnalyzer resources.
 */
export interface AccessanalyzerAnalyzerState {
    /**
     * The configuration for the analyzer
     */
    analyzerConfiguration?: pulumi.Input<inputs.AccessanalyzerAnalyzerAnalyzerConfiguration>;
    /**
     * Analyzer name
     */
    analyzerName?: pulumi.Input<string>;
    archiveRules?: pulumi.Input<pulumi.Input<inputs.AccessanalyzerAnalyzerArchiveRule>[]>;
    /**
     * Amazon Resource Name (ARN) of the analyzer
     */
    arn?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AccessanalyzerAnalyzerTag>[]>;
    /**
     * The type of the analyzer, must be one of ACCOUNT, ORGANIZATION, ACCOUNT_UNUSED_ACCESS or ORGANIZATION_UNUSED_ACCESS
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessanalyzerAnalyzer resource.
 */
export interface AccessanalyzerAnalyzerArgs {
    /**
     * The configuration for the analyzer
     */
    analyzerConfiguration?: pulumi.Input<inputs.AccessanalyzerAnalyzerAnalyzerConfiguration>;
    /**
     * Analyzer name
     */
    analyzerName?: pulumi.Input<string>;
    archiveRules?: pulumi.Input<pulumi.Input<inputs.AccessanalyzerAnalyzerArchiveRule>[]>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AccessanalyzerAnalyzerTag>[]>;
    /**
     * The type of the analyzer, must be one of ACCOUNT, ORGANIZATION, ACCOUNT_UNUSED_ACCESS or ORGANIZATION_UNUSED_ACCESS
     */
    type: pulumi.Input<string>;
}
