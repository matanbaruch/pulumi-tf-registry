// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getElasticloadbalancingv2TargetGroup(args: GetElasticloadbalancingv2TargetGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetElasticloadbalancingv2TargetGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getElasticloadbalancingv2TargetGroup:getElasticloadbalancingv2TargetGroup", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getElasticloadbalancingv2TargetGroup.
 */
export interface GetElasticloadbalancingv2TargetGroupArgs {
    id: string;
}

/**
 * A collection of values returned by getElasticloadbalancingv2TargetGroup.
 */
export interface GetElasticloadbalancingv2TargetGroupResult {
    readonly healthCheckEnabled: boolean;
    readonly healthCheckIntervalSeconds: number;
    readonly healthCheckPath: string;
    readonly healthCheckPort: string;
    readonly healthCheckProtocol: string;
    readonly healthCheckTimeoutSeconds: number;
    readonly healthyThresholdCount: number;
    readonly id: string;
    readonly ipAddressType: string;
    readonly loadBalancerArns: string[];
    readonly matcher: outputs.GetElasticloadbalancingv2TargetGroupMatcher;
    readonly name: string;
    readonly port: number;
    readonly protocol: string;
    readonly protocolVersion: string;
    readonly tags: outputs.GetElasticloadbalancingv2TargetGroupTag[];
    readonly targetGroupArn: string;
    readonly targetGroupAttributes: outputs.GetElasticloadbalancingv2TargetGroupTargetGroupAttribute[];
    readonly targetGroupFullName: string;
    readonly targetGroupName: string;
    readonly targetType: string;
    readonly targets: outputs.GetElasticloadbalancingv2TargetGroupTarget[];
    readonly unhealthyThresholdCount: number;
    readonly vpcId: string;
}
export function getElasticloadbalancingv2TargetGroupOutput(args: GetElasticloadbalancingv2TargetGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetElasticloadbalancingv2TargetGroupResult> {
    return pulumi.output(args).apply((a: any) => getElasticloadbalancingv2TargetGroup(a, opts))
}

/**
 * A collection of arguments for invoking getElasticloadbalancingv2TargetGroup.
 */
export interface GetElasticloadbalancingv2TargetGroupOutputArgs {
    id: pulumi.Input<string>;
}
