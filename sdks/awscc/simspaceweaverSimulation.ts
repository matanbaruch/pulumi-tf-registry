// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SimspaceweaverSimulation extends pulumi.CustomResource {
    /**
     * Get an existing SimspaceweaverSimulation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SimspaceweaverSimulationState, opts?: pulumi.CustomResourceOptions): SimspaceweaverSimulation {
        return new SimspaceweaverSimulation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/simspaceweaverSimulation:SimspaceweaverSimulation';

    /**
     * Returns true if the given object is an instance of SimspaceweaverSimulation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SimspaceweaverSimulation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SimspaceweaverSimulation.__pulumiType;
    }

    /**
     * Json object with all simulation details
     */
    public /*out*/ readonly describePayload!: pulumi.Output<string>;
    /**
     * The maximum running time of the simulation.
     */
    public readonly maximumDuration!: pulumi.Output<string>;
    /**
     * The name of the simulation.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Role ARN.
     */
    public readonly roleArn!: pulumi.Output<string>;
    public readonly schemaS3Location!: pulumi.Output<outputs.SimspaceweaverSimulationSchemaS3Location>;
    public readonly snapshotS3Location!: pulumi.Output<outputs.SimspaceweaverSimulationSnapshotS3Location>;

    /**
     * Create a SimspaceweaverSimulation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SimspaceweaverSimulationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SimspaceweaverSimulationArgs | SimspaceweaverSimulationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SimspaceweaverSimulationState | undefined;
            resourceInputs["describePayload"] = state ? state.describePayload : undefined;
            resourceInputs["maximumDuration"] = state ? state.maximumDuration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["schemaS3Location"] = state ? state.schemaS3Location : undefined;
            resourceInputs["snapshotS3Location"] = state ? state.snapshotS3Location : undefined;
        } else {
            const args = argsOrState as SimspaceweaverSimulationArgs | undefined;
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["maximumDuration"] = args ? args.maximumDuration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["schemaS3Location"] = args ? args.schemaS3Location : undefined;
            resourceInputs["snapshotS3Location"] = args ? args.snapshotS3Location : undefined;
            resourceInputs["describePayload"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SimspaceweaverSimulation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SimspaceweaverSimulation resources.
 */
export interface SimspaceweaverSimulationState {
    /**
     * Json object with all simulation details
     */
    describePayload?: pulumi.Input<string>;
    /**
     * The maximum running time of the simulation.
     */
    maximumDuration?: pulumi.Input<string>;
    /**
     * The name of the simulation.
     */
    name?: pulumi.Input<string>;
    /**
     * Role ARN.
     */
    roleArn?: pulumi.Input<string>;
    schemaS3Location?: pulumi.Input<inputs.SimspaceweaverSimulationSchemaS3Location>;
    snapshotS3Location?: pulumi.Input<inputs.SimspaceweaverSimulationSnapshotS3Location>;
}

/**
 * The set of arguments for constructing a SimspaceweaverSimulation resource.
 */
export interface SimspaceweaverSimulationArgs {
    /**
     * The maximum running time of the simulation.
     */
    maximumDuration?: pulumi.Input<string>;
    /**
     * The name of the simulation.
     */
    name?: pulumi.Input<string>;
    /**
     * Role ARN.
     */
    roleArn: pulumi.Input<string>;
    schemaS3Location?: pulumi.Input<inputs.SimspaceweaverSimulationSchemaS3Location>;
    snapshotS3Location?: pulumi.Input<inputs.SimspaceweaverSimulationSnapshotS3Location>;
}
