// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppflowFlow extends pulumi.CustomResource {
    /**
     * Get an existing AppflowFlow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppflowFlowState, opts?: pulumi.CustomResourceOptions): AppflowFlow {
        return new AppflowFlow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/appflowFlow:AppflowFlow';

    /**
     * Returns true if the given object is an instance of AppflowFlow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppflowFlow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppflowFlow.__pulumiType;
    }

    /**
     * Description of the flow.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * List of Destination connectors of the flow.
     */
    public readonly destinationFlowConfigLists!: pulumi.Output<outputs.AppflowFlowDestinationFlowConfigList[]>;
    /**
     * ARN identifier of the flow.
     */
    public /*out*/ readonly flowArn!: pulumi.Output<string>;
    /**
     * Name of the flow.
     */
    public readonly flowName!: pulumi.Output<string>;
    /**
     * Flow activation status for Scheduled- and Event-triggered flows
     */
    public readonly flowStatus!: pulumi.Output<string>;
    /**
     * The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If
     * it's not provided, AWS Lambda uses a default service key.
     */
    public readonly kmsArn!: pulumi.Output<string>;
    /**
     * Configurations of metadata catalog of the flow.
     */
    public readonly metadataCatalogConfig!: pulumi.Output<outputs.AppflowFlowMetadataCatalogConfig>;
    /**
     * Configurations of Source connector of the flow.
     */
    public readonly sourceFlowConfig!: pulumi.Output<outputs.AppflowFlowSourceFlowConfig>;
    /**
     * List of Tags.
     */
    public readonly tags!: pulumi.Output<outputs.AppflowFlowTag[]>;
    /**
     * List of tasks for the flow.
     */
    public readonly tasks!: pulumi.Output<outputs.AppflowFlowTask[]>;
    /**
     * Trigger settings of the flow.
     */
    public readonly triggerConfig!: pulumi.Output<outputs.AppflowFlowTriggerConfig>;

    /**
     * Create a AppflowFlow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppflowFlowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppflowFlowArgs | AppflowFlowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppflowFlowState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationFlowConfigLists"] = state ? state.destinationFlowConfigLists : undefined;
            resourceInputs["flowArn"] = state ? state.flowArn : undefined;
            resourceInputs["flowName"] = state ? state.flowName : undefined;
            resourceInputs["flowStatus"] = state ? state.flowStatus : undefined;
            resourceInputs["kmsArn"] = state ? state.kmsArn : undefined;
            resourceInputs["metadataCatalogConfig"] = state ? state.metadataCatalogConfig : undefined;
            resourceInputs["sourceFlowConfig"] = state ? state.sourceFlowConfig : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tasks"] = state ? state.tasks : undefined;
            resourceInputs["triggerConfig"] = state ? state.triggerConfig : undefined;
        } else {
            const args = argsOrState as AppflowFlowArgs | undefined;
            if ((!args || args.destinationFlowConfigLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationFlowConfigLists'");
            }
            if ((!args || args.flowName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowName'");
            }
            if ((!args || args.sourceFlowConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceFlowConfig'");
            }
            if ((!args || args.tasks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tasks'");
            }
            if ((!args || args.triggerConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerConfig'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationFlowConfigLists"] = args ? args.destinationFlowConfigLists : undefined;
            resourceInputs["flowName"] = args ? args.flowName : undefined;
            resourceInputs["flowStatus"] = args ? args.flowStatus : undefined;
            resourceInputs["kmsArn"] = args ? args.kmsArn : undefined;
            resourceInputs["metadataCatalogConfig"] = args ? args.metadataCatalogConfig : undefined;
            resourceInputs["sourceFlowConfig"] = args ? args.sourceFlowConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tasks"] = args ? args.tasks : undefined;
            resourceInputs["triggerConfig"] = args ? args.triggerConfig : undefined;
            resourceInputs["flowArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppflowFlow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppflowFlow resources.
 */
export interface AppflowFlowState {
    /**
     * Description of the flow.
     */
    description?: pulumi.Input<string>;
    /**
     * List of Destination connectors of the flow.
     */
    destinationFlowConfigLists?: pulumi.Input<pulumi.Input<inputs.AppflowFlowDestinationFlowConfigList>[]>;
    /**
     * ARN identifier of the flow.
     */
    flowArn?: pulumi.Input<string>;
    /**
     * Name of the flow.
     */
    flowName?: pulumi.Input<string>;
    /**
     * Flow activation status for Scheduled- and Event-triggered flows
     */
    flowStatus?: pulumi.Input<string>;
    /**
     * The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If
     * it's not provided, AWS Lambda uses a default service key.
     */
    kmsArn?: pulumi.Input<string>;
    /**
     * Configurations of metadata catalog of the flow.
     */
    metadataCatalogConfig?: pulumi.Input<inputs.AppflowFlowMetadataCatalogConfig>;
    /**
     * Configurations of Source connector of the flow.
     */
    sourceFlowConfig?: pulumi.Input<inputs.AppflowFlowSourceFlowConfig>;
    /**
     * List of Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AppflowFlowTag>[]>;
    /**
     * List of tasks for the flow.
     */
    tasks?: pulumi.Input<pulumi.Input<inputs.AppflowFlowTask>[]>;
    /**
     * Trigger settings of the flow.
     */
    triggerConfig?: pulumi.Input<inputs.AppflowFlowTriggerConfig>;
}

/**
 * The set of arguments for constructing a AppflowFlow resource.
 */
export interface AppflowFlowArgs {
    /**
     * Description of the flow.
     */
    description?: pulumi.Input<string>;
    /**
     * List of Destination connectors of the flow.
     */
    destinationFlowConfigLists: pulumi.Input<pulumi.Input<inputs.AppflowFlowDestinationFlowConfigList>[]>;
    /**
     * Name of the flow.
     */
    flowName: pulumi.Input<string>;
    /**
     * Flow activation status for Scheduled- and Event-triggered flows
     */
    flowStatus?: pulumi.Input<string>;
    /**
     * The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If
     * it's not provided, AWS Lambda uses a default service key.
     */
    kmsArn?: pulumi.Input<string>;
    /**
     * Configurations of metadata catalog of the flow.
     */
    metadataCatalogConfig?: pulumi.Input<inputs.AppflowFlowMetadataCatalogConfig>;
    /**
     * Configurations of Source connector of the flow.
     */
    sourceFlowConfig: pulumi.Input<inputs.AppflowFlowSourceFlowConfig>;
    /**
     * List of Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AppflowFlowTag>[]>;
    /**
     * List of tasks for the flow.
     */
    tasks: pulumi.Input<pulumi.Input<inputs.AppflowFlowTask>[]>;
    /**
     * Trigger settings of the flow.
     */
    triggerConfig: pulumi.Input<inputs.AppflowFlowTriggerConfig>;
}
