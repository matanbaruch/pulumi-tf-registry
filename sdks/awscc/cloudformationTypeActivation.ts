// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudformationTypeActivation extends pulumi.CustomResource {
    /**
     * Get an existing CloudformationTypeActivation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudformationTypeActivationState, opts?: pulumi.CustomResourceOptions): CloudformationTypeActivation {
        return new CloudformationTypeActivation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/cloudformationTypeActivation:CloudformationTypeActivation';

    /**
     * Returns true if the given object is an instance of CloudformationTypeActivation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudformationTypeActivation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudformationTypeActivation.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the extension.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Whether to automatically update the extension in this account and region when a new minor version is published by the
     * extension publisher. Major versions released by the publisher must be manually updated.
     */
    public readonly autoUpdate!: pulumi.Output<boolean>;
    /**
     * The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS
     * APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those
     * AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide
     * your resource type with the appropriate credentials.
     */
    public readonly executionRoleArn!: pulumi.Output<string>;
    /**
     * Specifies logging configuration information for a type.
     */
    public readonly loggingConfig!: pulumi.Output<outputs.CloudformationTypeActivationLoggingConfig>;
    /**
     * The Major Version of the type you want to enable
     */
    public readonly majorVersion!: pulumi.Output<string>;
    /**
     * The Amazon Resource Number (ARN) assigned to the public extension upon publication
     */
    public readonly publicTypeArn!: pulumi.Output<string>;
    /**
     * The publisher id assigned by CloudFormation for publishing in this region.
     */
    public readonly publisherId!: pulumi.Output<string>;
    /**
     * The kind of extension
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The name of the type being registered. We recommend that type names adhere to the following pattern:
     * company_or_organization::service::type.
     */
    public readonly typeName!: pulumi.Output<string>;
    /**
     * An alias to assign to the public extension in this account and region. If you specify an alias for the extension, you
     * must then use the alias to refer to the extension in your templates.
     */
    public readonly typeNameAlias!: pulumi.Output<string>;
    /**
     * Manually updates a previously-enabled type to a new major or minor version, if available. You can also use this
     * parameter to update the value of AutoUpdateEnabled
     */
    public readonly versionBump!: pulumi.Output<string>;

    /**
     * Create a CloudformationTypeActivation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CloudformationTypeActivationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudformationTypeActivationArgs | CloudformationTypeActivationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudformationTypeActivationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoUpdate"] = state ? state.autoUpdate : undefined;
            resourceInputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            resourceInputs["loggingConfig"] = state ? state.loggingConfig : undefined;
            resourceInputs["majorVersion"] = state ? state.majorVersion : undefined;
            resourceInputs["publicTypeArn"] = state ? state.publicTypeArn : undefined;
            resourceInputs["publisherId"] = state ? state.publisherId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["typeName"] = state ? state.typeName : undefined;
            resourceInputs["typeNameAlias"] = state ? state.typeNameAlias : undefined;
            resourceInputs["versionBump"] = state ? state.versionBump : undefined;
        } else {
            const args = argsOrState as CloudformationTypeActivationArgs | undefined;
            resourceInputs["autoUpdate"] = args ? args.autoUpdate : undefined;
            resourceInputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            resourceInputs["loggingConfig"] = args ? args.loggingConfig : undefined;
            resourceInputs["majorVersion"] = args ? args.majorVersion : undefined;
            resourceInputs["publicTypeArn"] = args ? args.publicTypeArn : undefined;
            resourceInputs["publisherId"] = args ? args.publisherId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["typeName"] = args ? args.typeName : undefined;
            resourceInputs["typeNameAlias"] = args ? args.typeNameAlias : undefined;
            resourceInputs["versionBump"] = args ? args.versionBump : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudformationTypeActivation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudformationTypeActivation resources.
 */
export interface CloudformationTypeActivationState {
    /**
     * The Amazon Resource Name (ARN) of the extension.
     */
    arn?: pulumi.Input<string>;
    /**
     * Whether to automatically update the extension in this account and region when a new minor version is published by the
     * extension publisher. Major versions released by the publisher must be manually updated.
     */
    autoUpdate?: pulumi.Input<boolean>;
    /**
     * The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS
     * APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those
     * AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide
     * your resource type with the appropriate credentials.
     */
    executionRoleArn?: pulumi.Input<string>;
    /**
     * Specifies logging configuration information for a type.
     */
    loggingConfig?: pulumi.Input<inputs.CloudformationTypeActivationLoggingConfig>;
    /**
     * The Major Version of the type you want to enable
     */
    majorVersion?: pulumi.Input<string>;
    /**
     * The Amazon Resource Number (ARN) assigned to the public extension upon publication
     */
    publicTypeArn?: pulumi.Input<string>;
    /**
     * The publisher id assigned by CloudFormation for publishing in this region.
     */
    publisherId?: pulumi.Input<string>;
    /**
     * The kind of extension
     */
    type?: pulumi.Input<string>;
    /**
     * The name of the type being registered. We recommend that type names adhere to the following pattern:
     * company_or_organization::service::type.
     */
    typeName?: pulumi.Input<string>;
    /**
     * An alias to assign to the public extension in this account and region. If you specify an alias for the extension, you
     * must then use the alias to refer to the extension in your templates.
     */
    typeNameAlias?: pulumi.Input<string>;
    /**
     * Manually updates a previously-enabled type to a new major or minor version, if available. You can also use this
     * parameter to update the value of AutoUpdateEnabled
     */
    versionBump?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudformationTypeActivation resource.
 */
export interface CloudformationTypeActivationArgs {
    /**
     * Whether to automatically update the extension in this account and region when a new minor version is published by the
     * extension publisher. Major versions released by the publisher must be manually updated.
     */
    autoUpdate?: pulumi.Input<boolean>;
    /**
     * The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS
     * APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those
     * AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide
     * your resource type with the appropriate credentials.
     */
    executionRoleArn?: pulumi.Input<string>;
    /**
     * Specifies logging configuration information for a type.
     */
    loggingConfig?: pulumi.Input<inputs.CloudformationTypeActivationLoggingConfig>;
    /**
     * The Major Version of the type you want to enable
     */
    majorVersion?: pulumi.Input<string>;
    /**
     * The Amazon Resource Number (ARN) assigned to the public extension upon publication
     */
    publicTypeArn?: pulumi.Input<string>;
    /**
     * The publisher id assigned by CloudFormation for publishing in this region.
     */
    publisherId?: pulumi.Input<string>;
    /**
     * The kind of extension
     */
    type?: pulumi.Input<string>;
    /**
     * The name of the type being registered. We recommend that type names adhere to the following pattern:
     * company_or_organization::service::type.
     */
    typeName?: pulumi.Input<string>;
    /**
     * An alias to assign to the public extension in this account and region. If you specify an alias for the extension, you
     * must then use the alias to refer to the extension in your templates.
     */
    typeNameAlias?: pulumi.Input<string>;
    /**
     * Manually updates a previously-enabled type to a new major or minor version, if available. You can also use this
     * parameter to update the value of AutoUpdateEnabled
     */
    versionBump?: pulumi.Input<string>;
}
