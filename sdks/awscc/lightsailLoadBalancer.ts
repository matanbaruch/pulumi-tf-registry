// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LightsailLoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LightsailLoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LightsailLoadBalancerState, opts?: pulumi.CustomResourceOptions): LightsailLoadBalancer {
        return new LightsailLoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lightsailLoadBalancer:LightsailLoadBalancer';

    /**
     * Returns true if the given object is an instance of LightsailLoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LightsailLoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LightsailLoadBalancer.__pulumiType;
    }

    /**
     * The names of the instances attached to the load balancer.
     */
    public readonly attachedInstances!: pulumi.Output<string[]>;
    /**
     * The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail
     * uses the root path of your website (e.g., "/").
     */
    public readonly healthCheckPath!: pulumi.Output<string>;
    /**
     * The instance port where you're creating your load balancer.
     */
    public readonly instancePort!: pulumi.Output<number>;
    /**
     * The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6.
     * The default value is dualstack.
     */
    public readonly ipAddressType!: pulumi.Output<string>;
    public /*out*/ readonly loadBalancerArn!: pulumi.Output<string>;
    /**
     * The name of your load balancer.
     */
    public readonly loadBalancerName!: pulumi.Output<string>;
    /**
     * Configuration option to enable session stickiness.
     */
    public readonly sessionStickinessEnabled!: pulumi.Output<boolean>;
    /**
     * Configuration option to adjust session stickiness cookie duration parameter.
     */
    public readonly sessionStickinessLbCookieDurationSeconds!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.LightsailLoadBalancerTag[]>;
    /**
     * The name of the TLS policy to apply to the load balancer.
     */
    public readonly tlsPolicyName!: pulumi.Output<string>;

    /**
     * Create a LightsailLoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LightsailLoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LightsailLoadBalancerArgs | LightsailLoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LightsailLoadBalancerState | undefined;
            resourceInputs["attachedInstances"] = state ? state.attachedInstances : undefined;
            resourceInputs["healthCheckPath"] = state ? state.healthCheckPath : undefined;
            resourceInputs["instancePort"] = state ? state.instancePort : undefined;
            resourceInputs["ipAddressType"] = state ? state.ipAddressType : undefined;
            resourceInputs["loadBalancerArn"] = state ? state.loadBalancerArn : undefined;
            resourceInputs["loadBalancerName"] = state ? state.loadBalancerName : undefined;
            resourceInputs["sessionStickinessEnabled"] = state ? state.sessionStickinessEnabled : undefined;
            resourceInputs["sessionStickinessLbCookieDurationSeconds"] = state ? state.sessionStickinessLbCookieDurationSeconds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tlsPolicyName"] = state ? state.tlsPolicyName : undefined;
        } else {
            const args = argsOrState as LightsailLoadBalancerArgs | undefined;
            if ((!args || args.instancePort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instancePort'");
            }
            if ((!args || args.loadBalancerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerName'");
            }
            resourceInputs["attachedInstances"] = args ? args.attachedInstances : undefined;
            resourceInputs["healthCheckPath"] = args ? args.healthCheckPath : undefined;
            resourceInputs["instancePort"] = args ? args.instancePort : undefined;
            resourceInputs["ipAddressType"] = args ? args.ipAddressType : undefined;
            resourceInputs["loadBalancerName"] = args ? args.loadBalancerName : undefined;
            resourceInputs["sessionStickinessEnabled"] = args ? args.sessionStickinessEnabled : undefined;
            resourceInputs["sessionStickinessLbCookieDurationSeconds"] = args ? args.sessionStickinessLbCookieDurationSeconds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tlsPolicyName"] = args ? args.tlsPolicyName : undefined;
            resourceInputs["loadBalancerArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LightsailLoadBalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LightsailLoadBalancer resources.
 */
export interface LightsailLoadBalancerState {
    /**
     * The names of the instances attached to the load balancer.
     */
    attachedInstances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail
     * uses the root path of your website (e.g., "/").
     */
    healthCheckPath?: pulumi.Input<string>;
    /**
     * The instance port where you're creating your load balancer.
     */
    instancePort?: pulumi.Input<number>;
    /**
     * The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6.
     * The default value is dualstack.
     */
    ipAddressType?: pulumi.Input<string>;
    loadBalancerArn?: pulumi.Input<string>;
    /**
     * The name of your load balancer.
     */
    loadBalancerName?: pulumi.Input<string>;
    /**
     * Configuration option to enable session stickiness.
     */
    sessionStickinessEnabled?: pulumi.Input<boolean>;
    /**
     * Configuration option to adjust session stickiness cookie duration parameter.
     */
    sessionStickinessLbCookieDurationSeconds?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LightsailLoadBalancerTag>[]>;
    /**
     * The name of the TLS policy to apply to the load balancer.
     */
    tlsPolicyName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LightsailLoadBalancer resource.
 */
export interface LightsailLoadBalancerArgs {
    /**
     * The names of the instances attached to the load balancer.
     */
    attachedInstances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail
     * uses the root path of your website (e.g., "/").
     */
    healthCheckPath?: pulumi.Input<string>;
    /**
     * The instance port where you're creating your load balancer.
     */
    instancePort: pulumi.Input<number>;
    /**
     * The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6.
     * The default value is dualstack.
     */
    ipAddressType?: pulumi.Input<string>;
    /**
     * The name of your load balancer.
     */
    loadBalancerName: pulumi.Input<string>;
    /**
     * Configuration option to enable session stickiness.
     */
    sessionStickinessEnabled?: pulumi.Input<boolean>;
    /**
     * Configuration option to adjust session stickiness cookie duration parameter.
     */
    sessionStickinessLbCookieDurationSeconds?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LightsailLoadBalancerTag>[]>;
    /**
     * The name of the TLS policy to apply to the load balancer.
     */
    tlsPolicyName?: pulumi.Input<string>;
}
