// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Mediapackagev2ChannelGroup extends pulumi.CustomResource {
    /**
     * Get an existing Mediapackagev2ChannelGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Mediapackagev2ChannelGroupState, opts?: pulumi.CustomResourceOptions): Mediapackagev2ChannelGroup {
        return new Mediapackagev2ChannelGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/mediapackagev2ChannelGroup:Mediapackagev2ChannelGroup';

    /**
     * Returns true if the given object is an instance of Mediapackagev2ChannelGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Mediapackagev2ChannelGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Mediapackagev2ChannelGroup.__pulumiType;
    }

    /**
     * <p>The Amazon Resource Name (ARN) associated with the resource.</p>
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly channelGroupName!: pulumi.Output<string>;
    /**
     * <p>The date and time the channel group was created.</p>
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * <p>Enter any descriptive text that helps you to identify the channel group.</p>
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * <p>The output domain where the source stream should be sent. Integrate the domain with a downstream CDN (such as Amazon
     * CloudFront) or playback device.</p>
     */
    public /*out*/ readonly egressDomain!: pulumi.Output<string>;
    /**
     * <p>The date and time the channel group was modified.</p>
     */
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.Mediapackagev2ChannelGroupTag[]>;

    /**
     * Create a Mediapackagev2ChannelGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Mediapackagev2ChannelGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Mediapackagev2ChannelGroupArgs | Mediapackagev2ChannelGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Mediapackagev2ChannelGroupState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["channelGroupName"] = state ? state.channelGroupName : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["egressDomain"] = state ? state.egressDomain : undefined;
            resourceInputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as Mediapackagev2ChannelGroupArgs | undefined;
            if ((!args || args.channelGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelGroupName'");
            }
            resourceInputs["channelGroupName"] = args ? args.channelGroupName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["egressDomain"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Mediapackagev2ChannelGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Mediapackagev2ChannelGroup resources.
 */
export interface Mediapackagev2ChannelGroupState {
    /**
     * <p>The Amazon Resource Name (ARN) associated with the resource.</p>
     */
    arn?: pulumi.Input<string>;
    channelGroupName?: pulumi.Input<string>;
    /**
     * <p>The date and time the channel group was created.</p>
     */
    createdAt?: pulumi.Input<string>;
    /**
     * <p>Enter any descriptive text that helps you to identify the channel group.</p>
     */
    description?: pulumi.Input<string>;
    /**
     * <p>The output domain where the source stream should be sent. Integrate the domain with a downstream CDN (such as Amazon
     * CloudFront) or playback device.</p>
     */
    egressDomain?: pulumi.Input<string>;
    /**
     * <p>The date and time the channel group was modified.</p>
     */
    modifiedAt?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.Mediapackagev2ChannelGroupTag>[]>;
}

/**
 * The set of arguments for constructing a Mediapackagev2ChannelGroup resource.
 */
export interface Mediapackagev2ChannelGroupArgs {
    channelGroupName: pulumi.Input<string>;
    /**
     * <p>Enter any descriptive text that helps you to identify the channel group.</p>
     */
    description?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.Mediapackagev2ChannelGroupTag>[]>;
}
