// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SsmincidentsResponsePlan extends pulumi.CustomResource {
    /**
     * Get an existing SsmincidentsResponsePlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SsmincidentsResponsePlanState, opts?: pulumi.CustomResourceOptions): SsmincidentsResponsePlan {
        return new SsmincidentsResponsePlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ssmincidentsResponsePlan:SsmincidentsResponsePlan';

    /**
     * Returns true if the given object is an instance of SsmincidentsResponsePlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SsmincidentsResponsePlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SsmincidentsResponsePlan.__pulumiType;
    }

    /**
     * The list of actions.
     */
    public readonly actions!: pulumi.Output<outputs.SsmincidentsResponsePlanAction[]>;
    /**
     * The ARN of the response plan.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The chat channel configuration.
     */
    public readonly chatChannel!: pulumi.Output<outputs.SsmincidentsResponsePlanChatChannel>;
    /**
     * The display name of the response plan.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The list of engagements to use.
     */
    public readonly engagements!: pulumi.Output<string[]>;
    /**
     * The incident template configuration.
     */
    public readonly incidentTemplate!: pulumi.Output<outputs.SsmincidentsResponsePlanIncidentTemplate>;
    /**
     * The list of integrations.
     */
    public readonly integrations!: pulumi.Output<outputs.SsmincidentsResponsePlanIntegration[]>;
    /**
     * The name of the response plan.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The tags to apply to the response plan.
     */
    public readonly tags!: pulumi.Output<outputs.SsmincidentsResponsePlanTag[]>;

    /**
     * Create a SsmincidentsResponsePlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SsmincidentsResponsePlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SsmincidentsResponsePlanArgs | SsmincidentsResponsePlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SsmincidentsResponsePlanState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["chatChannel"] = state ? state.chatChannel : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["engagements"] = state ? state.engagements : undefined;
            resourceInputs["incidentTemplate"] = state ? state.incidentTemplate : undefined;
            resourceInputs["integrations"] = state ? state.integrations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SsmincidentsResponsePlanArgs | undefined;
            if ((!args || args.incidentTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'incidentTemplate'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["chatChannel"] = args ? args.chatChannel : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["engagements"] = args ? args.engagements : undefined;
            resourceInputs["incidentTemplate"] = args ? args.incidentTemplate : undefined;
            resourceInputs["integrations"] = args ? args.integrations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SsmincidentsResponsePlan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SsmincidentsResponsePlan resources.
 */
export interface SsmincidentsResponsePlanState {
    /**
     * The list of actions.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.SsmincidentsResponsePlanAction>[]>;
    /**
     * The ARN of the response plan.
     */
    arn?: pulumi.Input<string>;
    /**
     * The chat channel configuration.
     */
    chatChannel?: pulumi.Input<inputs.SsmincidentsResponsePlanChatChannel>;
    /**
     * The display name of the response plan.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The list of engagements to use.
     */
    engagements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The incident template configuration.
     */
    incidentTemplate?: pulumi.Input<inputs.SsmincidentsResponsePlanIncidentTemplate>;
    /**
     * The list of integrations.
     */
    integrations?: pulumi.Input<pulumi.Input<inputs.SsmincidentsResponsePlanIntegration>[]>;
    /**
     * The name of the response plan.
     */
    name?: pulumi.Input<string>;
    /**
     * The tags to apply to the response plan.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SsmincidentsResponsePlanTag>[]>;
}

/**
 * The set of arguments for constructing a SsmincidentsResponsePlan resource.
 */
export interface SsmincidentsResponsePlanArgs {
    /**
     * The list of actions.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.SsmincidentsResponsePlanAction>[]>;
    /**
     * The chat channel configuration.
     */
    chatChannel?: pulumi.Input<inputs.SsmincidentsResponsePlanChatChannel>;
    /**
     * The display name of the response plan.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The list of engagements to use.
     */
    engagements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The incident template configuration.
     */
    incidentTemplate: pulumi.Input<inputs.SsmincidentsResponsePlanIncidentTemplate>;
    /**
     * The list of integrations.
     */
    integrations?: pulumi.Input<pulumi.Input<inputs.SsmincidentsResponsePlanIntegration>[]>;
    /**
     * The name of the response plan.
     */
    name?: pulumi.Input<string>;
    /**
     * The tags to apply to the response plan.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SsmincidentsResponsePlanTag>[]>;
}
