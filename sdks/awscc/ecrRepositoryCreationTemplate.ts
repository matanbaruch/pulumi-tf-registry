// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcrRepositoryCreationTemplate extends pulumi.CustomResource {
    /**
     * Get an existing EcrRepositoryCreationTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcrRepositoryCreationTemplateState, opts?: pulumi.CustomResourceOptions): EcrRepositoryCreationTemplate {
        return new EcrRepositoryCreationTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ecrRepositoryCreationTemplate:EcrRepositoryCreationTemplate';

    /**
     * Returns true if the given object is an instance of EcrRepositoryCreationTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcrRepositoryCreationTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcrRepositoryCreationTemplate.__pulumiType;
    }

    /**
     * A list of enumerable Strings representing the repository creation scenarios that the template will apply towards.
     */
    public readonly appliedFors!: pulumi.Output<string[]>;
    /**
     * Create timestamp of the template.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The ARN of the role to be assumed by ECR. This role must be in the same account as the registry that you are
     * configuring.
     */
    public readonly customRoleArn!: pulumi.Output<string>;
    /**
     * The description of the template.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The encryption configuration for the repository. This determines how the contents of your repository are encrypted at
     * rest. By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses
     * server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256
     * encryption algorithm. This does not require any action on your part. For more information, see
     * https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html
     */
    public readonly encryptionConfiguration!: pulumi.Output<outputs.EcrRepositoryCreationTemplateEncryptionConfiguration>;
    /**
     * The image tag mutability setting for the repository.
     */
    public readonly imageTagMutability!: pulumi.Output<string>;
    /**
     * The JSON lifecycle policy text to apply to the repository. For information about lifecycle policy syntax, see
     * https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
     */
    public readonly lifecyclePolicy!: pulumi.Output<string>;
    /**
     * The prefix use to match the repository name and apply the template.
     */
    public readonly prefix!: pulumi.Output<string>;
    /**
     * The JSON repository policy text to apply to the repository. For more information, see
     * https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html
     */
    public readonly repositoryPolicy!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly resourceTags!: pulumi.Output<outputs.EcrRepositoryCreationTemplateResourceTag[]>;
    /**
     * Update timestamp of the template.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a EcrRepositoryCreationTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcrRepositoryCreationTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcrRepositoryCreationTemplateArgs | EcrRepositoryCreationTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcrRepositoryCreationTemplateState | undefined;
            resourceInputs["appliedFors"] = state ? state.appliedFors : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customRoleArn"] = state ? state.customRoleArn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptionConfiguration"] = state ? state.encryptionConfiguration : undefined;
            resourceInputs["imageTagMutability"] = state ? state.imageTagMutability : undefined;
            resourceInputs["lifecyclePolicy"] = state ? state.lifecyclePolicy : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["repositoryPolicy"] = state ? state.repositoryPolicy : undefined;
            resourceInputs["resourceTags"] = state ? state.resourceTags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as EcrRepositoryCreationTemplateArgs | undefined;
            if ((!args || args.appliedFors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appliedFors'");
            }
            if ((!args || args.prefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            resourceInputs["appliedFors"] = args ? args.appliedFors : undefined;
            resourceInputs["customRoleArn"] = args ? args.customRoleArn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionConfiguration"] = args ? args.encryptionConfiguration : undefined;
            resourceInputs["imageTagMutability"] = args ? args.imageTagMutability : undefined;
            resourceInputs["lifecyclePolicy"] = args ? args.lifecyclePolicy : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["repositoryPolicy"] = args ? args.repositoryPolicy : undefined;
            resourceInputs["resourceTags"] = args ? args.resourceTags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcrRepositoryCreationTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcrRepositoryCreationTemplate resources.
 */
export interface EcrRepositoryCreationTemplateState {
    /**
     * A list of enumerable Strings representing the repository creation scenarios that the template will apply towards.
     */
    appliedFors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Create timestamp of the template.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The ARN of the role to be assumed by ECR. This role must be in the same account as the registry that you are
     * configuring.
     */
    customRoleArn?: pulumi.Input<string>;
    /**
     * The description of the template.
     */
    description?: pulumi.Input<string>;
    /**
     * The encryption configuration for the repository. This determines how the contents of your repository are encrypted at
     * rest. By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses
     * server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256
     * encryption algorithm. This does not require any action on your part. For more information, see
     * https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html
     */
    encryptionConfiguration?: pulumi.Input<inputs.EcrRepositoryCreationTemplateEncryptionConfiguration>;
    /**
     * The image tag mutability setting for the repository.
     */
    imageTagMutability?: pulumi.Input<string>;
    /**
     * The JSON lifecycle policy text to apply to the repository. For information about lifecycle policy syntax, see
     * https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
     */
    lifecyclePolicy?: pulumi.Input<string>;
    /**
     * The prefix use to match the repository name and apply the template.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The JSON repository policy text to apply to the repository. For more information, see
     * https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html
     */
    repositoryPolicy?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    resourceTags?: pulumi.Input<pulumi.Input<inputs.EcrRepositoryCreationTemplateResourceTag>[]>;
    /**
     * Update timestamp of the template.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcrRepositoryCreationTemplate resource.
 */
export interface EcrRepositoryCreationTemplateArgs {
    /**
     * A list of enumerable Strings representing the repository creation scenarios that the template will apply towards.
     */
    appliedFors: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the role to be assumed by ECR. This role must be in the same account as the registry that you are
     * configuring.
     */
    customRoleArn?: pulumi.Input<string>;
    /**
     * The description of the template.
     */
    description?: pulumi.Input<string>;
    /**
     * The encryption configuration for the repository. This determines how the contents of your repository are encrypted at
     * rest. By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses
     * server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256
     * encryption algorithm. This does not require any action on your part. For more information, see
     * https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html
     */
    encryptionConfiguration?: pulumi.Input<inputs.EcrRepositoryCreationTemplateEncryptionConfiguration>;
    /**
     * The image tag mutability setting for the repository.
     */
    imageTagMutability?: pulumi.Input<string>;
    /**
     * The JSON lifecycle policy text to apply to the repository. For information about lifecycle policy syntax, see
     * https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
     */
    lifecyclePolicy?: pulumi.Input<string>;
    /**
     * The prefix use to match the repository name and apply the template.
     */
    prefix: pulumi.Input<string>;
    /**
     * The JSON repository policy text to apply to the repository. For more information, see
     * https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html
     */
    repositoryPolicy?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    resourceTags?: pulumi.Input<pulumi.Input<inputs.EcrRepositoryCreationTemplateResourceTag>[]>;
}
