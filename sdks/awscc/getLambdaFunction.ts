// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLambdaFunction(args: GetLambdaFunctionArgs, opts?: pulumi.InvokeOptions): Promise<GetLambdaFunctionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getLambdaFunction:getLambdaFunction", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLambdaFunction.
 */
export interface GetLambdaFunctionArgs {
    id: string;
}

/**
 * A collection of values returned by getLambdaFunction.
 */
export interface GetLambdaFunctionResult {
    readonly architectures: string[];
    readonly arn: string;
    readonly code: outputs.GetLambdaFunctionCode;
    readonly codeSigningConfigArn: string;
    readonly deadLetterConfig: outputs.GetLambdaFunctionDeadLetterConfig;
    readonly description: string;
    readonly environment: outputs.GetLambdaFunctionEnvironment;
    readonly ephemeralStorage: outputs.GetLambdaFunctionEphemeralStorage;
    readonly fileSystemConfigs: outputs.GetLambdaFunctionFileSystemConfig[];
    readonly functionName: string;
    readonly handler: string;
    readonly id: string;
    readonly imageConfig: outputs.GetLambdaFunctionImageConfig;
    readonly kmsKeyArn: string;
    readonly layers: string[];
    readonly loggingConfig: outputs.GetLambdaFunctionLoggingConfig;
    readonly memorySize: number;
    readonly packageType: string;
    readonly recursiveLoop: string;
    readonly reservedConcurrentExecutions: number;
    readonly role: string;
    readonly runtime: string;
    readonly runtimeManagementConfig: outputs.GetLambdaFunctionRuntimeManagementConfig;
    readonly snapStart: outputs.GetLambdaFunctionSnapStart;
    readonly snapStartResponse: outputs.GetLambdaFunctionSnapStartResponse;
    readonly tags: outputs.GetLambdaFunctionTag[];
    readonly timeout: number;
    readonly tracingConfig: outputs.GetLambdaFunctionTracingConfig;
    readonly vpcConfig: outputs.GetLambdaFunctionVpcConfig;
}
export function getLambdaFunctionOutput(args: GetLambdaFunctionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLambdaFunctionResult> {
    return pulumi.output(args).apply((a: any) => getLambdaFunction(a, opts))
}

/**
 * A collection of arguments for invoking getLambdaFunction.
 */
export interface GetLambdaFunctionOutputArgs {
    id: pulumi.Input<string>;
}
