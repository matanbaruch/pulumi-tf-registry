// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SagemakerPipeline extends pulumi.CustomResource {
    /**
     * Get an existing SagemakerPipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SagemakerPipelineState, opts?: pulumi.CustomResourceOptions): SagemakerPipeline {
        return new SagemakerPipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/sagemakerPipeline:SagemakerPipeline';

    /**
     * Returns true if the given object is an instance of SagemakerPipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SagemakerPipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SagemakerPipeline.__pulumiType;
    }

    public readonly parallelismConfiguration!: pulumi.Output<outputs.SagemakerPipelineParallelismConfiguration>;
    public readonly pipelineDefinition!: pulumi.Output<outputs.SagemakerPipelinePipelineDefinition>;
    /**
     * The description of the Pipeline.
     */
    public readonly pipelineDescription!: pulumi.Output<string>;
    /**
     * The display name of the Pipeline.
     */
    public readonly pipelineDisplayName!: pulumi.Output<string>;
    /**
     * The name of the Pipeline.
     */
    public readonly pipelineName!: pulumi.Output<string>;
    /**
     * Role Arn
     */
    public readonly roleArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.SagemakerPipelineTag[]>;

    /**
     * Create a SagemakerPipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SagemakerPipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SagemakerPipelineArgs | SagemakerPipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SagemakerPipelineState | undefined;
            resourceInputs["parallelismConfiguration"] = state ? state.parallelismConfiguration : undefined;
            resourceInputs["pipelineDefinition"] = state ? state.pipelineDefinition : undefined;
            resourceInputs["pipelineDescription"] = state ? state.pipelineDescription : undefined;
            resourceInputs["pipelineDisplayName"] = state ? state.pipelineDisplayName : undefined;
            resourceInputs["pipelineName"] = state ? state.pipelineName : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SagemakerPipelineArgs | undefined;
            if ((!args || args.pipelineDefinition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineDefinition'");
            }
            if ((!args || args.pipelineName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineName'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["parallelismConfiguration"] = args ? args.parallelismConfiguration : undefined;
            resourceInputs["pipelineDefinition"] = args ? args.pipelineDefinition : undefined;
            resourceInputs["pipelineDescription"] = args ? args.pipelineDescription : undefined;
            resourceInputs["pipelineDisplayName"] = args ? args.pipelineDisplayName : undefined;
            resourceInputs["pipelineName"] = args ? args.pipelineName : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SagemakerPipeline.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SagemakerPipeline resources.
 */
export interface SagemakerPipelineState {
    parallelismConfiguration?: pulumi.Input<inputs.SagemakerPipelineParallelismConfiguration>;
    pipelineDefinition?: pulumi.Input<inputs.SagemakerPipelinePipelineDefinition>;
    /**
     * The description of the Pipeline.
     */
    pipelineDescription?: pulumi.Input<string>;
    /**
     * The display name of the Pipeline.
     */
    pipelineDisplayName?: pulumi.Input<string>;
    /**
     * The name of the Pipeline.
     */
    pipelineName?: pulumi.Input<string>;
    /**
     * Role Arn
     */
    roleArn?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerPipelineTag>[]>;
}

/**
 * The set of arguments for constructing a SagemakerPipeline resource.
 */
export interface SagemakerPipelineArgs {
    parallelismConfiguration?: pulumi.Input<inputs.SagemakerPipelineParallelismConfiguration>;
    pipelineDefinition: pulumi.Input<inputs.SagemakerPipelinePipelineDefinition>;
    /**
     * The description of the Pipeline.
     */
    pipelineDescription?: pulumi.Input<string>;
    /**
     * The display name of the Pipeline.
     */
    pipelineDisplayName?: pulumi.Input<string>;
    /**
     * The name of the Pipeline.
     */
    pipelineName: pulumi.Input<string>;
    /**
     * Role Arn
     */
    roleArn: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SagemakerPipelineTag>[]>;
}
