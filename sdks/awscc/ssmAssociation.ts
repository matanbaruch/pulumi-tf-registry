// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SsmAssociation extends pulumi.CustomResource {
    /**
     * Get an existing SsmAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SsmAssociationState, opts?: pulumi.CustomResourceOptions): SsmAssociation {
        return new SsmAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ssmAssociation:SsmAssociation';

    /**
     * Returns true if the given object is an instance of SsmAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SsmAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SsmAssociation.__pulumiType;
    }

    public readonly applyOnlyAtCronInterval!: pulumi.Output<boolean>;
    /**
     * Unique identifier of the association.
     */
    public /*out*/ readonly associationId!: pulumi.Output<string>;
    /**
     * The name of the association.
     */
    public readonly associationName!: pulumi.Output<string>;
    public readonly automationTargetParameterName!: pulumi.Output<string>;
    public readonly calendarNames!: pulumi.Output<string[]>;
    public readonly complianceSeverity!: pulumi.Output<string>;
    /**
     * The version of the SSM document to associate with the target.
     */
    public readonly documentVersion!: pulumi.Output<string>;
    /**
     * The ID of the instance that the SSM document is associated with.
     */
    public readonly instanceId!: pulumi.Output<string>;
    public readonly maxConcurrency!: pulumi.Output<string>;
    public readonly maxErrors!: pulumi.Output<string>;
    /**
     * The name of the SSM document.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly outputLocation!: pulumi.Output<outputs.SsmAssociationOutputLocation>;
    /**
     * Parameter values that the SSM document uses at runtime.
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string[]}>;
    /**
     * A Cron or Rate expression that specifies when the association is applied to the target.
     */
    public readonly scheduleExpression!: pulumi.Output<string>;
    public readonly scheduleOffset!: pulumi.Output<number>;
    public readonly syncCompliance!: pulumi.Output<string>;
    /**
     * The targets that the SSM document sends commands to.
     */
    public readonly targets!: pulumi.Output<outputs.SsmAssociationTarget[]>;
    public readonly waitForSuccessTimeoutSeconds!: pulumi.Output<number>;

    /**
     * Create a SsmAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SsmAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SsmAssociationArgs | SsmAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SsmAssociationState | undefined;
            resourceInputs["applyOnlyAtCronInterval"] = state ? state.applyOnlyAtCronInterval : undefined;
            resourceInputs["associationId"] = state ? state.associationId : undefined;
            resourceInputs["associationName"] = state ? state.associationName : undefined;
            resourceInputs["automationTargetParameterName"] = state ? state.automationTargetParameterName : undefined;
            resourceInputs["calendarNames"] = state ? state.calendarNames : undefined;
            resourceInputs["complianceSeverity"] = state ? state.complianceSeverity : undefined;
            resourceInputs["documentVersion"] = state ? state.documentVersion : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["maxConcurrency"] = state ? state.maxConcurrency : undefined;
            resourceInputs["maxErrors"] = state ? state.maxErrors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputLocation"] = state ? state.outputLocation : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["scheduleExpression"] = state ? state.scheduleExpression : undefined;
            resourceInputs["scheduleOffset"] = state ? state.scheduleOffset : undefined;
            resourceInputs["syncCompliance"] = state ? state.syncCompliance : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["waitForSuccessTimeoutSeconds"] = state ? state.waitForSuccessTimeoutSeconds : undefined;
        } else {
            const args = argsOrState as SsmAssociationArgs | undefined;
            resourceInputs["applyOnlyAtCronInterval"] = args ? args.applyOnlyAtCronInterval : undefined;
            resourceInputs["associationName"] = args ? args.associationName : undefined;
            resourceInputs["automationTargetParameterName"] = args ? args.automationTargetParameterName : undefined;
            resourceInputs["calendarNames"] = args ? args.calendarNames : undefined;
            resourceInputs["complianceSeverity"] = args ? args.complianceSeverity : undefined;
            resourceInputs["documentVersion"] = args ? args.documentVersion : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["maxConcurrency"] = args ? args.maxConcurrency : undefined;
            resourceInputs["maxErrors"] = args ? args.maxErrors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outputLocation"] = args ? args.outputLocation : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["scheduleExpression"] = args ? args.scheduleExpression : undefined;
            resourceInputs["scheduleOffset"] = args ? args.scheduleOffset : undefined;
            resourceInputs["syncCompliance"] = args ? args.syncCompliance : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["waitForSuccessTimeoutSeconds"] = args ? args.waitForSuccessTimeoutSeconds : undefined;
            resourceInputs["associationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SsmAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SsmAssociation resources.
 */
export interface SsmAssociationState {
    applyOnlyAtCronInterval?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the association.
     */
    associationId?: pulumi.Input<string>;
    /**
     * The name of the association.
     */
    associationName?: pulumi.Input<string>;
    automationTargetParameterName?: pulumi.Input<string>;
    calendarNames?: pulumi.Input<pulumi.Input<string>[]>;
    complianceSeverity?: pulumi.Input<string>;
    /**
     * The version of the SSM document to associate with the target.
     */
    documentVersion?: pulumi.Input<string>;
    /**
     * The ID of the instance that the SSM document is associated with.
     */
    instanceId?: pulumi.Input<string>;
    maxConcurrency?: pulumi.Input<string>;
    maxErrors?: pulumi.Input<string>;
    /**
     * The name of the SSM document.
     */
    name?: pulumi.Input<string>;
    outputLocation?: pulumi.Input<inputs.SsmAssociationOutputLocation>;
    /**
     * Parameter values that the SSM document uses at runtime.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * A Cron or Rate expression that specifies when the association is applied to the target.
     */
    scheduleExpression?: pulumi.Input<string>;
    scheduleOffset?: pulumi.Input<number>;
    syncCompliance?: pulumi.Input<string>;
    /**
     * The targets that the SSM document sends commands to.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.SsmAssociationTarget>[]>;
    waitForSuccessTimeoutSeconds?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SsmAssociation resource.
 */
export interface SsmAssociationArgs {
    applyOnlyAtCronInterval?: pulumi.Input<boolean>;
    /**
     * The name of the association.
     */
    associationName?: pulumi.Input<string>;
    automationTargetParameterName?: pulumi.Input<string>;
    calendarNames?: pulumi.Input<pulumi.Input<string>[]>;
    complianceSeverity?: pulumi.Input<string>;
    /**
     * The version of the SSM document to associate with the target.
     */
    documentVersion?: pulumi.Input<string>;
    /**
     * The ID of the instance that the SSM document is associated with.
     */
    instanceId?: pulumi.Input<string>;
    maxConcurrency?: pulumi.Input<string>;
    maxErrors?: pulumi.Input<string>;
    /**
     * The name of the SSM document.
     */
    name?: pulumi.Input<string>;
    outputLocation?: pulumi.Input<inputs.SsmAssociationOutputLocation>;
    /**
     * Parameter values that the SSM document uses at runtime.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * A Cron or Rate expression that specifies when the association is applied to the target.
     */
    scheduleExpression?: pulumi.Input<string>;
    scheduleOffset?: pulumi.Input<number>;
    syncCompliance?: pulumi.Input<string>;
    /**
     * The targets that the SSM document sends commands to.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.SsmAssociationTarget>[]>;
    waitForSuccessTimeoutSeconds?: pulumi.Input<number>;
}
