// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RdsOptionGroup extends pulumi.CustomResource {
    /**
     * Get an existing RdsOptionGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsOptionGroupState, opts?: pulumi.CustomResourceOptions): RdsOptionGroup {
        return new RdsOptionGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/rdsOptionGroup:RdsOptionGroup';

    /**
     * Returns true if the given object is an instance of RdsOptionGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsOptionGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsOptionGroup.__pulumiType;
    }

    /**
     * Specifies the name of the engine that this option group should be associated with. Valid Values: + ``mariadb`` +
     * ``mysql`` + ``oracle-ee`` + ``oracle-ee-cdb`` + ``oracle-se2`` + ``oracle-se2-cdb`` + ``postgres`` + ``sqlserver-ee`` +
     * ``sqlserver-se`` + ``sqlserver-ex`` + ``sqlserver-web``
     */
    public readonly engineName!: pulumi.Output<string>;
    /**
     * Specifies the major version of the engine that this option group should be associated with.
     */
    public readonly majorEngineVersion!: pulumi.Output<string>;
    /**
     * A list of all available options for an option group.
     */
    public readonly optionConfigurations!: pulumi.Output<outputs.RdsOptionGroupOptionConfiguration[]>;
    /**
     * The description of the option group.
     */
    public readonly optionGroupDescription!: pulumi.Output<string>;
    /**
     * The name of the option group to be created. Constraints: + Must be 1 to 255 letters, numbers, or hyphens + First
     * character must be a letter + Can't end with a hyphen or contain two consecutive hyphens Example: ``myoptiongroup`` If
     * you don't specify a value for ``OptionGroupName`` property, a name is automatically created for the option group. This
     * value is stored as a lowercase string.
     */
    public readonly optionGroupName!: pulumi.Output<string>;
    /**
     * Tags to assign to the option group.
     */
    public readonly tags!: pulumi.Output<outputs.RdsOptionGroupTag[]>;

    /**
     * Create a RdsOptionGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsOptionGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsOptionGroupArgs | RdsOptionGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsOptionGroupState | undefined;
            resourceInputs["engineName"] = state ? state.engineName : undefined;
            resourceInputs["majorEngineVersion"] = state ? state.majorEngineVersion : undefined;
            resourceInputs["optionConfigurations"] = state ? state.optionConfigurations : undefined;
            resourceInputs["optionGroupDescription"] = state ? state.optionGroupDescription : undefined;
            resourceInputs["optionGroupName"] = state ? state.optionGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as RdsOptionGroupArgs | undefined;
            if ((!args || args.engineName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineName'");
            }
            if ((!args || args.majorEngineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'majorEngineVersion'");
            }
            if ((!args || args.optionGroupDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'optionGroupDescription'");
            }
            resourceInputs["engineName"] = args ? args.engineName : undefined;
            resourceInputs["majorEngineVersion"] = args ? args.majorEngineVersion : undefined;
            resourceInputs["optionConfigurations"] = args ? args.optionConfigurations : undefined;
            resourceInputs["optionGroupDescription"] = args ? args.optionGroupDescription : undefined;
            resourceInputs["optionGroupName"] = args ? args.optionGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdsOptionGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RdsOptionGroup resources.
 */
export interface RdsOptionGroupState {
    /**
     * Specifies the name of the engine that this option group should be associated with. Valid Values: + ``mariadb`` +
     * ``mysql`` + ``oracle-ee`` + ``oracle-ee-cdb`` + ``oracle-se2`` + ``oracle-se2-cdb`` + ``postgres`` + ``sqlserver-ee`` +
     * ``sqlserver-se`` + ``sqlserver-ex`` + ``sqlserver-web``
     */
    engineName?: pulumi.Input<string>;
    /**
     * Specifies the major version of the engine that this option group should be associated with.
     */
    majorEngineVersion?: pulumi.Input<string>;
    /**
     * A list of all available options for an option group.
     */
    optionConfigurations?: pulumi.Input<pulumi.Input<inputs.RdsOptionGroupOptionConfiguration>[]>;
    /**
     * The description of the option group.
     */
    optionGroupDescription?: pulumi.Input<string>;
    /**
     * The name of the option group to be created. Constraints: + Must be 1 to 255 letters, numbers, or hyphens + First
     * character must be a letter + Can't end with a hyphen or contain two consecutive hyphens Example: ``myoptiongroup`` If
     * you don't specify a value for ``OptionGroupName`` property, a name is automatically created for the option group. This
     * value is stored as a lowercase string.
     */
    optionGroupName?: pulumi.Input<string>;
    /**
     * Tags to assign to the option group.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RdsOptionGroupTag>[]>;
}

/**
 * The set of arguments for constructing a RdsOptionGroup resource.
 */
export interface RdsOptionGroupArgs {
    /**
     * Specifies the name of the engine that this option group should be associated with. Valid Values: + ``mariadb`` +
     * ``mysql`` + ``oracle-ee`` + ``oracle-ee-cdb`` + ``oracle-se2`` + ``oracle-se2-cdb`` + ``postgres`` + ``sqlserver-ee`` +
     * ``sqlserver-se`` + ``sqlserver-ex`` + ``sqlserver-web``
     */
    engineName: pulumi.Input<string>;
    /**
     * Specifies the major version of the engine that this option group should be associated with.
     */
    majorEngineVersion: pulumi.Input<string>;
    /**
     * A list of all available options for an option group.
     */
    optionConfigurations?: pulumi.Input<pulumi.Input<inputs.RdsOptionGroupOptionConfiguration>[]>;
    /**
     * The description of the option group.
     */
    optionGroupDescription: pulumi.Input<string>;
    /**
     * The name of the option group to be created. Constraints: + Must be 1 to 255 letters, numbers, or hyphens + First
     * character must be a letter + Can't end with a hyphen or contain two consecutive hyphens Example: ``myoptiongroup`` If
     * you don't specify a value for ``OptionGroupName`` property, a name is automatically created for the option group. This
     * value is stored as a lowercase string.
     */
    optionGroupName?: pulumi.Input<string>;
    /**
     * Tags to assign to the option group.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RdsOptionGroupTag>[]>;
}
