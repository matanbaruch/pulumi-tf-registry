// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Route53profilesProfileAssociation extends pulumi.CustomResource {
    /**
     * Get an existing Route53profilesProfileAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Route53profilesProfileAssociationState, opts?: pulumi.CustomResourceOptions): Route53profilesProfileAssociation {
        return new Route53profilesProfileAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/route53profilesProfileAssociation:Route53profilesProfileAssociation';

    /**
     * Returns true if the given object is an instance of Route53profilesProfileAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route53profilesProfileAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route53profilesProfileAssociation.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the profile association.
     */
    public readonly arn!: pulumi.Output<string>;
    /**
     * The name of an association between a Profile and a VPC.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Primary Identifier for Profile Association
     */
    public /*out*/ readonly profileAssociationId!: pulumi.Output<string>;
    /**
     * The ID of the profile that you associated with the resource that is specified by ResourceId.
     */
    public readonly profileId!: pulumi.Output<string>;
    /**
     * The resource that you associated the profile with.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Route53profilesProfileAssociationTag[]>;

    /**
     * Create a Route53profilesProfileAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Route53profilesProfileAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Route53profilesProfileAssociationArgs | Route53profilesProfileAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Route53profilesProfileAssociationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["profileAssociationId"] = state ? state.profileAssociationId : undefined;
            resourceInputs["profileId"] = state ? state.profileId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as Route53profilesProfileAssociationArgs | undefined;
            if ((!args || args.profileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["arn"] = args ? args.arn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["profileId"] = args ? args.profileId : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["profileAssociationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route53profilesProfileAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Route53profilesProfileAssociation resources.
 */
export interface Route53profilesProfileAssociationState {
    /**
     * The Amazon Resource Name (ARN) of the profile association.
     */
    arn?: pulumi.Input<string>;
    /**
     * The name of an association between a Profile and a VPC.
     */
    name?: pulumi.Input<string>;
    /**
     * Primary Identifier for Profile Association
     */
    profileAssociationId?: pulumi.Input<string>;
    /**
     * The ID of the profile that you associated with the resource that is specified by ResourceId.
     */
    profileId?: pulumi.Input<string>;
    /**
     * The resource that you associated the profile with.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Route53profilesProfileAssociationTag>[]>;
}

/**
 * The set of arguments for constructing a Route53profilesProfileAssociation resource.
 */
export interface Route53profilesProfileAssociationArgs {
    /**
     * The Amazon Resource Name (ARN) of the profile association.
     */
    arn?: pulumi.Input<string>;
    /**
     * The name of an association between a Profile and a VPC.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the profile that you associated with the resource that is specified by ResourceId.
     */
    profileId: pulumi.Input<string>;
    /**
     * The resource that you associated the profile with.
     */
    resourceId: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Route53profilesProfileAssociationTag>[]>;
}
