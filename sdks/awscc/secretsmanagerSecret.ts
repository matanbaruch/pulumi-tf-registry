// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecretsmanagerSecret extends pulumi.CustomResource {
    /**
     * Get an existing SecretsmanagerSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretsmanagerSecretState, opts?: pulumi.CustomResourceOptions): SecretsmanagerSecret {
        return new SecretsmanagerSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/secretsmanagerSecret:SecretsmanagerSecret';

    /**
     * Returns true if the given object is an instance of SecretsmanagerSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretsmanagerSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretsmanagerSecret.__pulumiType;
    }

    /**
     * The description of the secret.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * A structure that specifies how to generate a password to encrypt and store in the secret. To include a specific string
     * in the secret, use ``SecretString`` instead. If you omit both ``GenerateSecretString`` and ``SecretString``, you create
     * an empty secret. When you make a change to this property, a new secret version is created. We recommend that you specify
     * the maximum length and include every character type that the system you are generating a password for can support.
     */
    public readonly generateSecretString!: pulumi.Output<outputs.SecretsmanagerSecretGenerateSecretString>;
    /**
     * The ARN, key ID, or alias of the KMS key that Secrets Manager uses to encrypt the secret value in the secret. An alias
     * is always prefixed by ``alias/``, for example ``alias/aws/secretsmanager``. For more information, see [About
     * aliases](https://docs.aws.amazon.com/kms/latest/developerguide/alias-about.html). To use a KMS key in a different
     * account, use the key ARN or the alias ARN. If you don't specify this value, then Secrets Manager uses the key
     * ``aws/secretsmanager``. If that key doesn't yet exist, then Secrets Manager creates it for you automatically the first
     * time it encrypts the secret value. If the secret is in a different AWS account from the credentials calling the API,
     * then you can't use ``aws/secretsmanager`` to encrypt the secret, and you must create and use a customer managed KMS key.
     */
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * The name of the new secret. The secret name can contain ASCII letters, numbers, and the following characters: /_+=.@- Do
     * not end your secret name with a hyphen followed by six characters. If you do so, you risk confusion and unexpected
     * results when searching for a secret by partial ARN. Secrets Manager automatically adds a hyphen and six random
     * characters after the secret name at the end of the ARN.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A custom type that specifies a ``Region`` and the ``KmsKeyId`` for a replica secret.
     */
    public readonly replicaRegions!: pulumi.Output<outputs.SecretsmanagerSecretReplicaRegion[]>;
    public /*out*/ readonly secretId!: pulumi.Output<string>;
    /**
     * The text to encrypt and store in the secret. We recommend you use a JSON structure of key/value pairs for your secret
     * value. To generate a random password, use ``GenerateSecretString`` instead. If you omit both ``GenerateSecretString``
     * and ``SecretString``, you create an empty secret. When you make a change to this property, a new secret version is
     * created.
     */
    public readonly secretString!: pulumi.Output<string>;
    /**
     * A list of tags to attach to the secret. Each tag is a key and value pair of strings in a JSON text string, for example:
     * ``[{"Key":"CostCenter","Value":"12345"},{"Key":"environment","Value":"production"}]`` Secrets Manager tag key names are
     * case sensitive. A tag with the key "ABC" is a different tag from one with key "abc". Stack-level tags, tags you apply to
     * the CloudFormation stack, are also attached to the secret. If you check tags in permissions policies as part of your
     * security strategy, then adding or removing a tag can change permissions. If the completion of this operation would
     * result in you losing your permissions for this secret, then Secrets Manager blocks the operation and returns an ``Access
     * Denied`` error. For more information, see [Control access to secrets using
     * tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#tag-secrets-abac) and
     * [Limit access to identities with tags that match secrets'
     * tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#auth-and-access_tags2).
     * For information about how to format a JSON parameter for the various command line tool environments, see [Using JSON for
     * Parameters](https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json). If your
     * command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion
     * with the double quotes required in the JSON text. The following restrictions apply to tags: + Maximum number of tags per
     * secret: 50 + Maximum key length: 127 Unicode characters in UTF-8 + Maximum value length: 255 Unicode characters in UTF-8
     * + Tag keys and values are case sensitive. + Do not use the ``aws:`` prefix in your tag names or values because AWS
     * reserves it for AWS use. You can't edit or delete tag names or values with this prefix. Tags with this prefix do not
     * count against your tags per secret limit. + If you use your tagging schema across multiple services and resources, other
     * services might have restrictions on allowed characters. Generally allowed characters: letters, spaces, and numbers
     * representable in UTF-8, plus the following special characters: + - = . _ : / @.
     */
    public readonly tags!: pulumi.Output<outputs.SecretsmanagerSecretTag[]>;

    /**
     * Create a SecretsmanagerSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecretsmanagerSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretsmanagerSecretArgs | SecretsmanagerSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretsmanagerSecretState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["generateSecretString"] = state ? state.generateSecretString : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["replicaRegions"] = state ? state.replicaRegions : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["secretString"] = state ? state.secretString : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SecretsmanagerSecretArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["generateSecretString"] = args ? args.generateSecretString : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["replicaRegions"] = args ? args.replicaRegions : undefined;
            resourceInputs["secretString"] = args ? args.secretString : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["secretId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretsmanagerSecret.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecretsmanagerSecret resources.
 */
export interface SecretsmanagerSecretState {
    /**
     * The description of the secret.
     */
    description?: pulumi.Input<string>;
    /**
     * A structure that specifies how to generate a password to encrypt and store in the secret. To include a specific string
     * in the secret, use ``SecretString`` instead. If you omit both ``GenerateSecretString`` and ``SecretString``, you create
     * an empty secret. When you make a change to this property, a new secret version is created. We recommend that you specify
     * the maximum length and include every character type that the system you are generating a password for can support.
     */
    generateSecretString?: pulumi.Input<inputs.SecretsmanagerSecretGenerateSecretString>;
    /**
     * The ARN, key ID, or alias of the KMS key that Secrets Manager uses to encrypt the secret value in the secret. An alias
     * is always prefixed by ``alias/``, for example ``alias/aws/secretsmanager``. For more information, see [About
     * aliases](https://docs.aws.amazon.com/kms/latest/developerguide/alias-about.html). To use a KMS key in a different
     * account, use the key ARN or the alias ARN. If you don't specify this value, then Secrets Manager uses the key
     * ``aws/secretsmanager``. If that key doesn't yet exist, then Secrets Manager creates it for you automatically the first
     * time it encrypts the secret value. If the secret is in a different AWS account from the credentials calling the API,
     * then you can't use ``aws/secretsmanager`` to encrypt the secret, and you must create and use a customer managed KMS key.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The name of the new secret. The secret name can contain ASCII letters, numbers, and the following characters: /_+=.@- Do
     * not end your secret name with a hyphen followed by six characters. If you do so, you risk confusion and unexpected
     * results when searching for a secret by partial ARN. Secrets Manager automatically adds a hyphen and six random
     * characters after the secret name at the end of the ARN.
     */
    name?: pulumi.Input<string>;
    /**
     * A custom type that specifies a ``Region`` and the ``KmsKeyId`` for a replica secret.
     */
    replicaRegions?: pulumi.Input<pulumi.Input<inputs.SecretsmanagerSecretReplicaRegion>[]>;
    secretId?: pulumi.Input<string>;
    /**
     * The text to encrypt and store in the secret. We recommend you use a JSON structure of key/value pairs for your secret
     * value. To generate a random password, use ``GenerateSecretString`` instead. If you omit both ``GenerateSecretString``
     * and ``SecretString``, you create an empty secret. When you make a change to this property, a new secret version is
     * created.
     */
    secretString?: pulumi.Input<string>;
    /**
     * A list of tags to attach to the secret. Each tag is a key and value pair of strings in a JSON text string, for example:
     * ``[{"Key":"CostCenter","Value":"12345"},{"Key":"environment","Value":"production"}]`` Secrets Manager tag key names are
     * case sensitive. A tag with the key "ABC" is a different tag from one with key "abc". Stack-level tags, tags you apply to
     * the CloudFormation stack, are also attached to the secret. If you check tags in permissions policies as part of your
     * security strategy, then adding or removing a tag can change permissions. If the completion of this operation would
     * result in you losing your permissions for this secret, then Secrets Manager blocks the operation and returns an ``Access
     * Denied`` error. For more information, see [Control access to secrets using
     * tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#tag-secrets-abac) and
     * [Limit access to identities with tags that match secrets'
     * tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#auth-and-access_tags2).
     * For information about how to format a JSON parameter for the various command line tool environments, see [Using JSON for
     * Parameters](https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json). If your
     * command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion
     * with the double quotes required in the JSON text. The following restrictions apply to tags: + Maximum number of tags per
     * secret: 50 + Maximum key length: 127 Unicode characters in UTF-8 + Maximum value length: 255 Unicode characters in UTF-8
     * + Tag keys and values are case sensitive. + Do not use the ``aws:`` prefix in your tag names or values because AWS
     * reserves it for AWS use. You can't edit or delete tag names or values with this prefix. Tags with this prefix do not
     * count against your tags per secret limit. + If you use your tagging schema across multiple services and resources, other
     * services might have restrictions on allowed characters. Generally allowed characters: letters, spaces, and numbers
     * representable in UTF-8, plus the following special characters: + - = . _ : / @.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SecretsmanagerSecretTag>[]>;
}

/**
 * The set of arguments for constructing a SecretsmanagerSecret resource.
 */
export interface SecretsmanagerSecretArgs {
    /**
     * The description of the secret.
     */
    description?: pulumi.Input<string>;
    /**
     * A structure that specifies how to generate a password to encrypt and store in the secret. To include a specific string
     * in the secret, use ``SecretString`` instead. If you omit both ``GenerateSecretString`` and ``SecretString``, you create
     * an empty secret. When you make a change to this property, a new secret version is created. We recommend that you specify
     * the maximum length and include every character type that the system you are generating a password for can support.
     */
    generateSecretString?: pulumi.Input<inputs.SecretsmanagerSecretGenerateSecretString>;
    /**
     * The ARN, key ID, or alias of the KMS key that Secrets Manager uses to encrypt the secret value in the secret. An alias
     * is always prefixed by ``alias/``, for example ``alias/aws/secretsmanager``. For more information, see [About
     * aliases](https://docs.aws.amazon.com/kms/latest/developerguide/alias-about.html). To use a KMS key in a different
     * account, use the key ARN or the alias ARN. If you don't specify this value, then Secrets Manager uses the key
     * ``aws/secretsmanager``. If that key doesn't yet exist, then Secrets Manager creates it for you automatically the first
     * time it encrypts the secret value. If the secret is in a different AWS account from the credentials calling the API,
     * then you can't use ``aws/secretsmanager`` to encrypt the secret, and you must create and use a customer managed KMS key.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The name of the new secret. The secret name can contain ASCII letters, numbers, and the following characters: /_+=.@- Do
     * not end your secret name with a hyphen followed by six characters. If you do so, you risk confusion and unexpected
     * results when searching for a secret by partial ARN. Secrets Manager automatically adds a hyphen and six random
     * characters after the secret name at the end of the ARN.
     */
    name?: pulumi.Input<string>;
    /**
     * A custom type that specifies a ``Region`` and the ``KmsKeyId`` for a replica secret.
     */
    replicaRegions?: pulumi.Input<pulumi.Input<inputs.SecretsmanagerSecretReplicaRegion>[]>;
    /**
     * The text to encrypt and store in the secret. We recommend you use a JSON structure of key/value pairs for your secret
     * value. To generate a random password, use ``GenerateSecretString`` instead. If you omit both ``GenerateSecretString``
     * and ``SecretString``, you create an empty secret. When you make a change to this property, a new secret version is
     * created.
     */
    secretString?: pulumi.Input<string>;
    /**
     * A list of tags to attach to the secret. Each tag is a key and value pair of strings in a JSON text string, for example:
     * ``[{"Key":"CostCenter","Value":"12345"},{"Key":"environment","Value":"production"}]`` Secrets Manager tag key names are
     * case sensitive. A tag with the key "ABC" is a different tag from one with key "abc". Stack-level tags, tags you apply to
     * the CloudFormation stack, are also attached to the secret. If you check tags in permissions policies as part of your
     * security strategy, then adding or removing a tag can change permissions. If the completion of this operation would
     * result in you losing your permissions for this secret, then Secrets Manager blocks the operation and returns an ``Access
     * Denied`` error. For more information, see [Control access to secrets using
     * tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#tag-secrets-abac) and
     * [Limit access to identities with tags that match secrets'
     * tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#auth-and-access_tags2).
     * For information about how to format a JSON parameter for the various command line tool environments, see [Using JSON for
     * Parameters](https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json). If your
     * command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion
     * with the double quotes required in the JSON text. The following restrictions apply to tags: + Maximum number of tags per
     * secret: 50 + Maximum key length: 127 Unicode characters in UTF-8 + Maximum value length: 255 Unicode characters in UTF-8
     * + Tag keys and values are case sensitive. + Do not use the ``aws:`` prefix in your tag names or values because AWS
     * reserves it for AWS use. You can't edit or delete tag names or values with this prefix. Tags with this prefix do not
     * count against your tags per secret limit. + If you use your tagging schema across multiple services and resources, other
     * services might have restrictions on allowed characters. Generally allowed characters: letters, spaces, and numbers
     * representable in UTF-8, plus the following special characters: + - = . _ : / @.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.SecretsmanagerSecretTag>[]>;
}
