// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2VpnGateway extends pulumi.CustomResource {
    /**
     * Get an existing Ec2VpnGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2VpnGatewayState, opts?: pulumi.CustomResourceOptions): Ec2VpnGateway {
        return new Ec2VpnGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2VpnGateway:Ec2VpnGateway';

    /**
     * Returns true if the given object is an instance of Ec2VpnGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2VpnGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2VpnGateway.__pulumiType;
    }

    /**
     * The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
     */
    public readonly amazonSideAsn!: pulumi.Output<number>;
    /**
     * Any tags assigned to the virtual private gateway.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2VpnGatewayTag[]>;
    /**
     * The type of VPN connection the virtual private gateway supports.
     */
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly vpnGatewayId!: pulumi.Output<string>;

    /**
     * Create a Ec2VpnGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2VpnGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2VpnGatewayArgs | Ec2VpnGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2VpnGatewayState | undefined;
            resourceInputs["amazonSideAsn"] = state ? state.amazonSideAsn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        } else {
            const args = argsOrState as Ec2VpnGatewayArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["amazonSideAsn"] = args ? args.amazonSideAsn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vpnGatewayId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2VpnGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2VpnGateway resources.
 */
export interface Ec2VpnGatewayState {
    /**
     * The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
     */
    amazonSideAsn?: pulumi.Input<number>;
    /**
     * Any tags assigned to the virtual private gateway.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2VpnGatewayTag>[]>;
    /**
     * The type of VPN connection the virtual private gateway supports.
     */
    type?: pulumi.Input<string>;
    vpnGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2VpnGateway resource.
 */
export interface Ec2VpnGatewayArgs {
    /**
     * The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
     */
    amazonSideAsn?: pulumi.Input<number>;
    /**
     * Any tags assigned to the virtual private gateway.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2VpnGatewayTag>[]>;
    /**
     * The type of VPN connection the virtual private gateway supports.
     */
    type: pulumi.Input<string>;
}
