// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LambdaVersion extends pulumi.CustomResource {
    /**
     * Get an existing LambdaVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LambdaVersionState, opts?: pulumi.CustomResourceOptions): LambdaVersion {
        return new LambdaVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lambdaVersion:LambdaVersion';

    /**
     * Returns true if the given object is an instance of LambdaVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LambdaVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LambdaVersion.__pulumiType;
    }

    /**
     * Only publish a version if the hash value matches the value that's specified. Use this option to avoid publishing a
     * version if the function code has changed since you last updated it. Updates are not supported for this property.
     */
    public readonly codeSha256!: pulumi.Output<string>;
    /**
     * A description for the version to override the description in the function configuration. Updates are not supported for
     * this property.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The ARN of the version.
     */
    public /*out*/ readonly functionArn!: pulumi.Output<string>;
    /**
     * The name of the Lambda function.
     */
    public readonly functionName!: pulumi.Output<string>;
    /**
     * The resource policy of your function
     */
    public readonly policy!: pulumi.Output<string>;
    /**
     * Specifies a provisioned concurrency configuration for a function's version. Updates are not supported for this property.
     */
    public readonly provisionedConcurrencyConfig!: pulumi.Output<outputs.LambdaVersionProvisionedConcurrencyConfig>;
    /**
     * Specifies the runtime management configuration of a function. Displays runtimeVersionArn only for Manual.
     */
    public readonly runtimePolicy!: pulumi.Output<outputs.LambdaVersionRuntimePolicy>;
    /**
     * The version number.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a LambdaVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LambdaVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LambdaVersionArgs | LambdaVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LambdaVersionState | undefined;
            resourceInputs["codeSha256"] = state ? state.codeSha256 : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["functionArn"] = state ? state.functionArn : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["provisionedConcurrencyConfig"] = state ? state.provisionedConcurrencyConfig : undefined;
            resourceInputs["runtimePolicy"] = state ? state.runtimePolicy : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as LambdaVersionArgs | undefined;
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            resourceInputs["codeSha256"] = args ? args.codeSha256 : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["provisionedConcurrencyConfig"] = args ? args.provisionedConcurrencyConfig : undefined;
            resourceInputs["runtimePolicy"] = args ? args.runtimePolicy : undefined;
            resourceInputs["functionArn"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LambdaVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LambdaVersion resources.
 */
export interface LambdaVersionState {
    /**
     * Only publish a version if the hash value matches the value that's specified. Use this option to avoid publishing a
     * version if the function code has changed since you last updated it. Updates are not supported for this property.
     */
    codeSha256?: pulumi.Input<string>;
    /**
     * A description for the version to override the description in the function configuration. Updates are not supported for
     * this property.
     */
    description?: pulumi.Input<string>;
    /**
     * The ARN of the version.
     */
    functionArn?: pulumi.Input<string>;
    /**
     * The name of the Lambda function.
     */
    functionName?: pulumi.Input<string>;
    /**
     * The resource policy of your function
     */
    policy?: pulumi.Input<string>;
    /**
     * Specifies a provisioned concurrency configuration for a function's version. Updates are not supported for this property.
     */
    provisionedConcurrencyConfig?: pulumi.Input<inputs.LambdaVersionProvisionedConcurrencyConfig>;
    /**
     * Specifies the runtime management configuration of a function. Displays runtimeVersionArn only for Manual.
     */
    runtimePolicy?: pulumi.Input<inputs.LambdaVersionRuntimePolicy>;
    /**
     * The version number.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LambdaVersion resource.
 */
export interface LambdaVersionArgs {
    /**
     * Only publish a version if the hash value matches the value that's specified. Use this option to avoid publishing a
     * version if the function code has changed since you last updated it. Updates are not supported for this property.
     */
    codeSha256?: pulumi.Input<string>;
    /**
     * A description for the version to override the description in the function configuration. Updates are not supported for
     * this property.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Lambda function.
     */
    functionName: pulumi.Input<string>;
    /**
     * The resource policy of your function
     */
    policy?: pulumi.Input<string>;
    /**
     * Specifies a provisioned concurrency configuration for a function's version. Updates are not supported for this property.
     */
    provisionedConcurrencyConfig?: pulumi.Input<inputs.LambdaVersionProvisionedConcurrencyConfig>;
    /**
     * Specifies the runtime management configuration of a function. Displays runtimeVersionArn only for Manual.
     */
    runtimePolicy?: pulumi.Input<inputs.LambdaVersionRuntimePolicy>;
}
