// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GameliftGameServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing GameliftGameServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GameliftGameServerGroupState, opts?: pulumi.CustomResourceOptions): GameliftGameServerGroup {
        return new GameliftGameServerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/gameliftGameServerGroup:GameliftGameServerGroup';

    /**
     * Returns true if the given object is an instance of GameliftGameServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GameliftGameServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GameliftGameServerGroup.__pulumiType;
    }

    /**
     * A generated unique ID for the EC2 Auto Scaling group that is associated with this game server group.
     */
    public /*out*/ readonly autoScalingGroupArn!: pulumi.Output<string>;
    /**
     * Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting.
     * Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the
     * EC2 Auto Scaling group directly after creating the resource.
     */
    public readonly autoScalingPolicy!: pulumi.Output<outputs.GameliftGameServerGroupAutoScalingPolicy>;
    /**
     * The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are
     * not viable for game hosting.
     */
    public readonly balancingStrategy!: pulumi.Output<string>;
    /**
     * The type of delete to perform.
     */
    public readonly deleteOption!: pulumi.Output<string>;
    /**
     * A generated unique ID for the game server group.
     */
    public /*out*/ readonly gameServerGroupArn!: pulumi.Output<string>;
    /**
     * An identifier for the new game server group.
     */
    public readonly gameServerGroupName!: pulumi.Output<string>;
    /**
     * A flag that indicates whether instances in the game server group are protected from early termination.
     */
    public readonly gameServerProtectionPolicy!: pulumi.Output<string>;
    /**
     * A set of EC2 instance types to use when creating instances in the group.
     */
    public readonly instanceDefinitions!: pulumi.Output<outputs.GameliftGameServerGroupInstanceDefinition[]>;
    /**
     * The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the
     * game server group. Updating this game server group property will not take effect for the created EC2 Auto Scaling group,
     * please update the EC2 Auto Scaling group directly after creating the resource.
     */
    public readonly launchTemplate!: pulumi.Output<outputs.GameliftGameServerGroupLaunchTemplate>;
    /**
     * The maximum number of instances allowed in the EC2 Auto Scaling group. Updating this game server group property will not
     * take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the
     * resource.
     */
    public readonly maxSize!: pulumi.Output<number>;
    /**
     * The minimum number of instances allowed in the EC2 Auto Scaling group. Updating this game server group property will not
     * take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the
     * resource.
     */
    public readonly minSize!: pulumi.Output<number>;
    /**
     * The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * A list of labels to assign to the new game server group resource. Updating game server group tags with CloudFormation
     * will not take effect. Please update this property using AWS GameLift APIs instead.
     */
    public readonly tags!: pulumi.Output<outputs.GameliftGameServerGroupTag[]>;
    /**
     * A list of virtual private cloud (VPC) subnets to use with instances in the game server group. Updating this game server
     * group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group
     * directly after creating the resource.
     */
    public readonly vpcSubnets!: pulumi.Output<string[]>;

    /**
     * Create a GameliftGameServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GameliftGameServerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GameliftGameServerGroupArgs | GameliftGameServerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GameliftGameServerGroupState | undefined;
            resourceInputs["autoScalingGroupArn"] = state ? state.autoScalingGroupArn : undefined;
            resourceInputs["autoScalingPolicy"] = state ? state.autoScalingPolicy : undefined;
            resourceInputs["balancingStrategy"] = state ? state.balancingStrategy : undefined;
            resourceInputs["deleteOption"] = state ? state.deleteOption : undefined;
            resourceInputs["gameServerGroupArn"] = state ? state.gameServerGroupArn : undefined;
            resourceInputs["gameServerGroupName"] = state ? state.gameServerGroupName : undefined;
            resourceInputs["gameServerProtectionPolicy"] = state ? state.gameServerProtectionPolicy : undefined;
            resourceInputs["instanceDefinitions"] = state ? state.instanceDefinitions : undefined;
            resourceInputs["launchTemplate"] = state ? state.launchTemplate : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcSubnets"] = state ? state.vpcSubnets : undefined;
        } else {
            const args = argsOrState as GameliftGameServerGroupArgs | undefined;
            if ((!args || args.gameServerGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gameServerGroupName'");
            }
            if ((!args || args.instanceDefinitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceDefinitions'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["autoScalingPolicy"] = args ? args.autoScalingPolicy : undefined;
            resourceInputs["balancingStrategy"] = args ? args.balancingStrategy : undefined;
            resourceInputs["deleteOption"] = args ? args.deleteOption : undefined;
            resourceInputs["gameServerGroupName"] = args ? args.gameServerGroupName : undefined;
            resourceInputs["gameServerProtectionPolicy"] = args ? args.gameServerProtectionPolicy : undefined;
            resourceInputs["instanceDefinitions"] = args ? args.instanceDefinitions : undefined;
            resourceInputs["launchTemplate"] = args ? args.launchTemplate : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcSubnets"] = args ? args.vpcSubnets : undefined;
            resourceInputs["autoScalingGroupArn"] = undefined /*out*/;
            resourceInputs["gameServerGroupArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GameliftGameServerGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GameliftGameServerGroup resources.
 */
export interface GameliftGameServerGroupState {
    /**
     * A generated unique ID for the EC2 Auto Scaling group that is associated with this game server group.
     */
    autoScalingGroupArn?: pulumi.Input<string>;
    /**
     * Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting.
     * Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the
     * EC2 Auto Scaling group directly after creating the resource.
     */
    autoScalingPolicy?: pulumi.Input<inputs.GameliftGameServerGroupAutoScalingPolicy>;
    /**
     * The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are
     * not viable for game hosting.
     */
    balancingStrategy?: pulumi.Input<string>;
    /**
     * The type of delete to perform.
     */
    deleteOption?: pulumi.Input<string>;
    /**
     * A generated unique ID for the game server group.
     */
    gameServerGroupArn?: pulumi.Input<string>;
    /**
     * An identifier for the new game server group.
     */
    gameServerGroupName?: pulumi.Input<string>;
    /**
     * A flag that indicates whether instances in the game server group are protected from early termination.
     */
    gameServerProtectionPolicy?: pulumi.Input<string>;
    /**
     * A set of EC2 instance types to use when creating instances in the group.
     */
    instanceDefinitions?: pulumi.Input<pulumi.Input<inputs.GameliftGameServerGroupInstanceDefinition>[]>;
    /**
     * The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the
     * game server group. Updating this game server group property will not take effect for the created EC2 Auto Scaling group,
     * please update the EC2 Auto Scaling group directly after creating the resource.
     */
    launchTemplate?: pulumi.Input<inputs.GameliftGameServerGroupLaunchTemplate>;
    /**
     * The maximum number of instances allowed in the EC2 Auto Scaling group. Updating this game server group property will not
     * take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the
     * resource.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The minimum number of instances allowed in the EC2 Auto Scaling group. Updating this game server group property will not
     * take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the
     * resource.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * A list of labels to assign to the new game server group resource. Updating game server group tags with CloudFormation
     * will not take effect. Please update this property using AWS GameLift APIs instead.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.GameliftGameServerGroupTag>[]>;
    /**
     * A list of virtual private cloud (VPC) subnets to use with instances in the game server group. Updating this game server
     * group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group
     * directly after creating the resource.
     */
    vpcSubnets?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a GameliftGameServerGroup resource.
 */
export interface GameliftGameServerGroupArgs {
    /**
     * Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting.
     * Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the
     * EC2 Auto Scaling group directly after creating the resource.
     */
    autoScalingPolicy?: pulumi.Input<inputs.GameliftGameServerGroupAutoScalingPolicy>;
    /**
     * The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are
     * not viable for game hosting.
     */
    balancingStrategy?: pulumi.Input<string>;
    /**
     * The type of delete to perform.
     */
    deleteOption?: pulumi.Input<string>;
    /**
     * An identifier for the new game server group.
     */
    gameServerGroupName: pulumi.Input<string>;
    /**
     * A flag that indicates whether instances in the game server group are protected from early termination.
     */
    gameServerProtectionPolicy?: pulumi.Input<string>;
    /**
     * A set of EC2 instance types to use when creating instances in the group.
     */
    instanceDefinitions: pulumi.Input<pulumi.Input<inputs.GameliftGameServerGroupInstanceDefinition>[]>;
    /**
     * The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the
     * game server group. Updating this game server group property will not take effect for the created EC2 Auto Scaling group,
     * please update the EC2 Auto Scaling group directly after creating the resource.
     */
    launchTemplate?: pulumi.Input<inputs.GameliftGameServerGroupLaunchTemplate>;
    /**
     * The maximum number of instances allowed in the EC2 Auto Scaling group. Updating this game server group property will not
     * take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the
     * resource.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The minimum number of instances allowed in the EC2 Auto Scaling group. Updating this game server group property will not
     * take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the
     * resource.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
     */
    roleArn: pulumi.Input<string>;
    /**
     * A list of labels to assign to the new game server group resource. Updating game server group tags with CloudFormation
     * will not take effect. Please update this property using AWS GameLift APIs instead.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.GameliftGameServerGroupTag>[]>;
    /**
     * A list of virtual private cloud (VPC) subnets to use with instances in the game server group. Updating this game server
     * group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group
     * directly after creating the resource.
     */
    vpcSubnets?: pulumi.Input<pulumi.Input<string>[]>;
}
