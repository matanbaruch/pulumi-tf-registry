// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CustomerprofilesCalculatedAttributeDefinition extends pulumi.CustomResource {
    /**
     * Get an existing CustomerprofilesCalculatedAttributeDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomerprofilesCalculatedAttributeDefinitionState, opts?: pulumi.CustomResourceOptions): CustomerprofilesCalculatedAttributeDefinition {
        return new CustomerprofilesCalculatedAttributeDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/customerprofilesCalculatedAttributeDefinition:CustomerprofilesCalculatedAttributeDefinition';

    /**
     * Returns true if the given object is an instance of CustomerprofilesCalculatedAttributeDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomerprofilesCalculatedAttributeDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomerprofilesCalculatedAttributeDefinition.__pulumiType;
    }

    /**
     * Mathematical expression and a list of attribute items specified in that expression.
     */
    public readonly attributeDetails!: pulumi.Output<outputs.CustomerprofilesCalculatedAttributeDefinitionAttributeDetails>;
    /**
     * The unique name of the calculated attribute.
     */
    public readonly calculatedAttributeName!: pulumi.Output<string>;
    /**
     * The conditions including range, object count, and threshold for the calculated attribute.
     */
    public readonly conditions!: pulumi.Output<outputs.CustomerprofilesCalculatedAttributeDefinitionConditions>;
    /**
     * The timestamp of when the calculated attribute definition was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the calculated attribute.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The display name of the calculated attribute.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The unique name of the domain.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * The timestamp of when the calculated attribute definition was most recently edited.
     */
    public /*out*/ readonly lastUpdatedAt!: pulumi.Output<string>;
    /**
     * The aggregation operation to perform for the calculated attribute.
     */
    public readonly statistic!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.CustomerprofilesCalculatedAttributeDefinitionTag[]>;

    /**
     * Create a CustomerprofilesCalculatedAttributeDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomerprofilesCalculatedAttributeDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomerprofilesCalculatedAttributeDefinitionArgs | CustomerprofilesCalculatedAttributeDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomerprofilesCalculatedAttributeDefinitionState | undefined;
            resourceInputs["attributeDetails"] = state ? state.attributeDetails : undefined;
            resourceInputs["calculatedAttributeName"] = state ? state.calculatedAttributeName : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["lastUpdatedAt"] = state ? state.lastUpdatedAt : undefined;
            resourceInputs["statistic"] = state ? state.statistic : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CustomerprofilesCalculatedAttributeDefinitionArgs | undefined;
            if ((!args || args.attributeDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attributeDetails'");
            }
            if ((!args || args.calculatedAttributeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'calculatedAttributeName'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.statistic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statistic'");
            }
            resourceInputs["attributeDetails"] = args ? args.attributeDetails : undefined;
            resourceInputs["calculatedAttributeName"] = args ? args.calculatedAttributeName : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["statistic"] = args ? args.statistic : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["lastUpdatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomerprofilesCalculatedAttributeDefinition.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CustomerprofilesCalculatedAttributeDefinition resources.
 */
export interface CustomerprofilesCalculatedAttributeDefinitionState {
    /**
     * Mathematical expression and a list of attribute items specified in that expression.
     */
    attributeDetails?: pulumi.Input<inputs.CustomerprofilesCalculatedAttributeDefinitionAttributeDetails>;
    /**
     * The unique name of the calculated attribute.
     */
    calculatedAttributeName?: pulumi.Input<string>;
    /**
     * The conditions including range, object count, and threshold for the calculated attribute.
     */
    conditions?: pulumi.Input<inputs.CustomerprofilesCalculatedAttributeDefinitionConditions>;
    /**
     * The timestamp of when the calculated attribute definition was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the calculated attribute.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the calculated attribute.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The unique name of the domain.
     */
    domainName?: pulumi.Input<string>;
    /**
     * The timestamp of when the calculated attribute definition was most recently edited.
     */
    lastUpdatedAt?: pulumi.Input<string>;
    /**
     * The aggregation operation to perform for the calculated attribute.
     */
    statistic?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CustomerprofilesCalculatedAttributeDefinitionTag>[]>;
}

/**
 * The set of arguments for constructing a CustomerprofilesCalculatedAttributeDefinition resource.
 */
export interface CustomerprofilesCalculatedAttributeDefinitionArgs {
    /**
     * Mathematical expression and a list of attribute items specified in that expression.
     */
    attributeDetails: pulumi.Input<inputs.CustomerprofilesCalculatedAttributeDefinitionAttributeDetails>;
    /**
     * The unique name of the calculated attribute.
     */
    calculatedAttributeName: pulumi.Input<string>;
    /**
     * The conditions including range, object count, and threshold for the calculated attribute.
     */
    conditions?: pulumi.Input<inputs.CustomerprofilesCalculatedAttributeDefinitionConditions>;
    /**
     * The description of the calculated attribute.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the calculated attribute.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The unique name of the domain.
     */
    domainName: pulumi.Input<string>;
    /**
     * The aggregation operation to perform for the calculated attribute.
     */
    statistic: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CustomerprofilesCalculatedAttributeDefinitionTag>[]>;
}
