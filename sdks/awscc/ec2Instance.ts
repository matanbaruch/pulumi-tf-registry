// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2Instance extends pulumi.CustomResource {
    /**
     * Get an existing Ec2Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2InstanceState, opts?: pulumi.CustomResourceOptions): Ec2Instance {
        return new Ec2Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2Instance:Ec2Instance';

    /**
     * Returns true if the given object is an instance of Ec2Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2Instance.__pulumiType;
    }

    /**
     * This property is reserved for internal use. If you use it, the stack fails with this error: Bad property set: [Testing
     * this property] (Service: AmazonEC2; Status Code: 400; Error Code: InvalidParameterCombination; Request ID:
     * 0XXXXXX-49c7-4b40-8bcc-76885dcXXXXX).
     */
    public readonly additionalInfo!: pulumi.Output<string>;
    /**
     * Indicates whether the instance is associated with a dedicated host. If you want the instance to always restart on the
     * same host on which it was launched, specify host. If you want the instance to restart on any available host, but try to
     * launch onto the last host it ran on (on a best-effort basis), specify default.
     */
    public readonly affinity!: pulumi.Output<string>;
    /**
     * The Availability Zone of the instance.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * The block device mapping entries that defines the block devices to attach to the instance at launch.
     */
    public readonly blockDeviceMappings!: pulumi.Output<outputs.Ec2InstanceBlockDeviceMapping[]>;
    /**
     * The CPU options for the instance.
     */
    public readonly cpuOptions!: pulumi.Output<outputs.Ec2InstanceCpuOptions>;
    /**
     * The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited.
     */
    public readonly creditSpecification!: pulumi.Output<outputs.Ec2InstanceCreditSpecification>;
    /**
     * If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API;
     * otherwise, you can.
     */
    public readonly disableApiTermination!: pulumi.Output<boolean>;
    /**
     * Indicates whether the instance is optimized for Amazon EBS I/O.
     */
    public readonly ebsOptimized!: pulumi.Output<boolean>;
    /**
     * An elastic GPU to associate with the instance.
     */
    public readonly elasticGpuSpecifications!: pulumi.Output<outputs.Ec2InstanceElasticGpuSpecification[]>;
    /**
     * An elastic inference accelerator to associate with the instance.
     */
    public readonly elasticInferenceAccelerators!: pulumi.Output<outputs.Ec2InstanceElasticInferenceAccelerator[]>;
    /**
     * Indicates whether the instance is enabled for AWS Nitro Enclaves.
     */
    public readonly enclaveOptions!: pulumi.Output<outputs.Ec2InstanceEnclaveOptions>;
    /**
     * Indicates whether an instance is enabled for hibernation.
     */
    public readonly hibernationOptions!: pulumi.Output<outputs.Ec2InstanceHibernationOptions>;
    /**
     * If you specify host for the Affinity property, the ID of a dedicated host that the instance is associated with. If you
     * don't specify an ID, Amazon EC2 launches the instance onto any available, compatible dedicated host in your account.
     */
    public readonly hostId!: pulumi.Output<string>;
    /**
     * The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the
     * Tenancy parameter or set it to host.
     */
    public readonly hostResourceGroupArn!: pulumi.Output<string>;
    /**
     * The IAM instance profile.
     */
    public readonly iamInstanceProfile!: pulumi.Output<string>;
    /**
     * The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * The EC2 Instance ID.
     */
    public /*out*/ readonly instanceId!: pulumi.Output<string>;
    /**
     * Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating
     * system command for system shutdown).
     */
    public readonly instanceInitiatedShutdownBehavior!: pulumi.Output<string>;
    /**
     * The instance type.
     */
    public readonly instanceType!: pulumi.Output<string>;
    /**
     * [EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6
     * addresses from the range of your subnet.
     */
    public readonly ipv6AddressCount!: pulumi.Output<number>;
    /**
     * [EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface.
     */
    public readonly ipv6Addresses!: pulumi.Output<outputs.Ec2InstanceIpv6Address[]>;
    /**
     * The ID of the kernel.
     */
    public readonly kernelId!: pulumi.Output<string>;
    /**
     * The name of the key pair.
     */
    public readonly keyName!: pulumi.Output<string>;
    /**
     * The launch template to use to launch the instances.
     */
    public readonly launchTemplate!: pulumi.Output<outputs.Ec2InstanceLaunchTemplate>;
    /**
     * The license configurations.
     */
    public readonly licenseSpecifications!: pulumi.Output<outputs.Ec2InstanceLicenseSpecification[]>;
    /**
     * Specifies whether detailed monitoring is enabled for the instance.
     */
    public readonly monitoring!: pulumi.Output<boolean>;
    /**
     * The network interfaces to associate with the instance.
     */
    public readonly networkInterfaces!: pulumi.Output<outputs.Ec2InstanceNetworkInterface[]>;
    /**
     * The name of an existing placement group that you want to launch the instance into (cluster | partition | spread).
     */
    public readonly placementGroupName!: pulumi.Output<string>;
    /**
     * The private DNS name of the specified instance. For example: ip-10-24-34-0.ec2.internal.
     */
    public /*out*/ readonly privateDnsName!: pulumi.Output<string>;
    /**
     * The options for the instance hostname.
     */
    public readonly privateDnsNameOptions!: pulumi.Output<outputs.Ec2InstancePrivateDnsNameOptions>;
    /**
     * The private IP address of the specified instance. For example: 10.24.34.0.
     */
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    /**
     * [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.
     */
    public readonly privateIpAddress!: pulumi.Output<string>;
    /**
     * Indicates whether to assign the tags from the instance to all of the volumes attached to the instance at launch. If you
     * specify true and you assign tags to the instance, those tags are automatically assigned to all of the volumes that you
     * attach to the instance at launch. If you specify false, those tags are not assigned to the attached volumes.
     */
    public readonly propagateTagsToVolumeOnCreation!: pulumi.Output<boolean>;
    /**
     * The public DNS name of the specified instance. For example: ec2-107-20-50-45.compute-1.amazonaws.com.
     */
    public /*out*/ readonly publicDnsName!: pulumi.Output<string>;
    /**
     * The public IP address of the specified instance. For example: 192.0.2.0.
     */
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * The ID of the RAM disk to select.
     */
    public readonly ramdiskId!: pulumi.Output<string>;
    /**
     * The IDs of the security groups.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * the names of the security groups. For a nondefault VPC, you must use security group IDs instead.
     */
    public readonly securityGroups!: pulumi.Output<string[]>;
    /**
     * Specifies whether to enable an instance launched in a VPC to perform NAT.
     */
    public readonly sourceDestCheck!: pulumi.Output<boolean>;
    /**
     * The SSM document and parameter values in AWS Systems Manager to associate with this instance.
     */
    public readonly ssmAssociations!: pulumi.Output<outputs.Ec2InstanceSsmAssociation[]>;
    /**
     * The current state of the instance.
     */
    public /*out*/ readonly state!: pulumi.Output<outputs.Ec2InstanceState>;
    /**
     * [EC2-VPC] The ID of the subnet to launch the instance into.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * The tags to add to the instance.
     */
    public readonly tags!: pulumi.Output<outputs.Ec2InstanceTag[]>;
    /**
     * The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on
     * single-tenant hardware.
     */
    public readonly tenancy!: pulumi.Output<string>;
    /**
     * The user data to make available to the instance.
     */
    public readonly userData!: pulumi.Output<string>;
    /**
     * The volumes to attach to the instance.
     */
    public readonly volumes!: pulumi.Output<outputs.Ec2InstanceVolume[]>;
    /**
     * The ID of the VPC that the instance is running in.
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Ec2Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Ec2InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2InstanceArgs | Ec2InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2InstanceState | undefined;
            resourceInputs["additionalInfo"] = state ? state.additionalInfo : undefined;
            resourceInputs["affinity"] = state ? state.affinity : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["blockDeviceMappings"] = state ? state.blockDeviceMappings : undefined;
            resourceInputs["cpuOptions"] = state ? state.cpuOptions : undefined;
            resourceInputs["creditSpecification"] = state ? state.creditSpecification : undefined;
            resourceInputs["disableApiTermination"] = state ? state.disableApiTermination : undefined;
            resourceInputs["ebsOptimized"] = state ? state.ebsOptimized : undefined;
            resourceInputs["elasticGpuSpecifications"] = state ? state.elasticGpuSpecifications : undefined;
            resourceInputs["elasticInferenceAccelerators"] = state ? state.elasticInferenceAccelerators : undefined;
            resourceInputs["enclaveOptions"] = state ? state.enclaveOptions : undefined;
            resourceInputs["hibernationOptions"] = state ? state.hibernationOptions : undefined;
            resourceInputs["hostId"] = state ? state.hostId : undefined;
            resourceInputs["hostResourceGroupArn"] = state ? state.hostResourceGroupArn : undefined;
            resourceInputs["iamInstanceProfile"] = state ? state.iamInstanceProfile : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceInitiatedShutdownBehavior"] = state ? state.instanceInitiatedShutdownBehavior : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["ipv6AddressCount"] = state ? state.ipv6AddressCount : undefined;
            resourceInputs["ipv6Addresses"] = state ? state.ipv6Addresses : undefined;
            resourceInputs["kernelId"] = state ? state.kernelId : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["launchTemplate"] = state ? state.launchTemplate : undefined;
            resourceInputs["licenseSpecifications"] = state ? state.licenseSpecifications : undefined;
            resourceInputs["monitoring"] = state ? state.monitoring : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["placementGroupName"] = state ? state.placementGroupName : undefined;
            resourceInputs["privateDnsName"] = state ? state.privateDnsName : undefined;
            resourceInputs["privateDnsNameOptions"] = state ? state.privateDnsNameOptions : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["propagateTagsToVolumeOnCreation"] = state ? state.propagateTagsToVolumeOnCreation : undefined;
            resourceInputs["publicDnsName"] = state ? state.publicDnsName : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["ramdiskId"] = state ? state.ramdiskId : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["sourceDestCheck"] = state ? state.sourceDestCheck : undefined;
            resourceInputs["ssmAssociations"] = state ? state.ssmAssociations : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenancy"] = state ? state.tenancy : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as Ec2InstanceArgs | undefined;
            resourceInputs["additionalInfo"] = args ? args.additionalInfo : undefined;
            resourceInputs["affinity"] = args ? args.affinity : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["blockDeviceMappings"] = args ? args.blockDeviceMappings : undefined;
            resourceInputs["cpuOptions"] = args ? args.cpuOptions : undefined;
            resourceInputs["creditSpecification"] = args ? args.creditSpecification : undefined;
            resourceInputs["disableApiTermination"] = args ? args.disableApiTermination : undefined;
            resourceInputs["ebsOptimized"] = args ? args.ebsOptimized : undefined;
            resourceInputs["elasticGpuSpecifications"] = args ? args.elasticGpuSpecifications : undefined;
            resourceInputs["elasticInferenceAccelerators"] = args ? args.elasticInferenceAccelerators : undefined;
            resourceInputs["enclaveOptions"] = args ? args.enclaveOptions : undefined;
            resourceInputs["hibernationOptions"] = args ? args.hibernationOptions : undefined;
            resourceInputs["hostId"] = args ? args.hostId : undefined;
            resourceInputs["hostResourceGroupArn"] = args ? args.hostResourceGroupArn : undefined;
            resourceInputs["iamInstanceProfile"] = args ? args.iamInstanceProfile : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["instanceInitiatedShutdownBehavior"] = args ? args.instanceInitiatedShutdownBehavior : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["ipv6AddressCount"] = args ? args.ipv6AddressCount : undefined;
            resourceInputs["ipv6Addresses"] = args ? args.ipv6Addresses : undefined;
            resourceInputs["kernelId"] = args ? args.kernelId : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["launchTemplate"] = args ? args.launchTemplate : undefined;
            resourceInputs["licenseSpecifications"] = args ? args.licenseSpecifications : undefined;
            resourceInputs["monitoring"] = args ? args.monitoring : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["placementGroupName"] = args ? args.placementGroupName : undefined;
            resourceInputs["privateDnsNameOptions"] = args ? args.privateDnsNameOptions : undefined;
            resourceInputs["privateIpAddress"] = args ? args.privateIpAddress : undefined;
            resourceInputs["propagateTagsToVolumeOnCreation"] = args ? args.propagateTagsToVolumeOnCreation : undefined;
            resourceInputs["ramdiskId"] = args ? args.ramdiskId : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["sourceDestCheck"] = args ? args.sourceDestCheck : undefined;
            resourceInputs["ssmAssociations"] = args ? args.ssmAssociations : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenancy"] = args ? args.tenancy : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["privateDnsName"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicDnsName"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2Instance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2Instance resources.
 */
export interface Ec2InstanceState {
    /**
     * This property is reserved for internal use. If you use it, the stack fails with this error: Bad property set: [Testing
     * this property] (Service: AmazonEC2; Status Code: 400; Error Code: InvalidParameterCombination; Request ID:
     * 0XXXXXX-49c7-4b40-8bcc-76885dcXXXXX).
     */
    additionalInfo?: pulumi.Input<string>;
    /**
     * Indicates whether the instance is associated with a dedicated host. If you want the instance to always restart on the
     * same host on which it was launched, specify host. If you want the instance to restart on any available host, but try to
     * launch onto the last host it ran on (on a best-effort basis), specify default.
     */
    affinity?: pulumi.Input<string>;
    /**
     * The Availability Zone of the instance.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The block device mapping entries that defines the block devices to attach to the instance at launch.
     */
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceBlockDeviceMapping>[]>;
    /**
     * The CPU options for the instance.
     */
    cpuOptions?: pulumi.Input<inputs.Ec2InstanceCpuOptions>;
    /**
     * The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited.
     */
    creditSpecification?: pulumi.Input<inputs.Ec2InstanceCreditSpecification>;
    /**
     * If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API;
     * otherwise, you can.
     */
    disableApiTermination?: pulumi.Input<boolean>;
    /**
     * Indicates whether the instance is optimized for Amazon EBS I/O.
     */
    ebsOptimized?: pulumi.Input<boolean>;
    /**
     * An elastic GPU to associate with the instance.
     */
    elasticGpuSpecifications?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceElasticGpuSpecification>[]>;
    /**
     * An elastic inference accelerator to associate with the instance.
     */
    elasticInferenceAccelerators?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceElasticInferenceAccelerator>[]>;
    /**
     * Indicates whether the instance is enabled for AWS Nitro Enclaves.
     */
    enclaveOptions?: pulumi.Input<inputs.Ec2InstanceEnclaveOptions>;
    /**
     * Indicates whether an instance is enabled for hibernation.
     */
    hibernationOptions?: pulumi.Input<inputs.Ec2InstanceHibernationOptions>;
    /**
     * If you specify host for the Affinity property, the ID of a dedicated host that the instance is associated with. If you
     * don't specify an ID, Amazon EC2 launches the instance onto any available, compatible dedicated host in your account.
     */
    hostId?: pulumi.Input<string>;
    /**
     * The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the
     * Tenancy parameter or set it to host.
     */
    hostResourceGroupArn?: pulumi.Input<string>;
    /**
     * The IAM instance profile.
     */
    iamInstanceProfile?: pulumi.Input<string>;
    /**
     * The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The EC2 Instance ID.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating
     * system command for system shutdown).
     */
    instanceInitiatedShutdownBehavior?: pulumi.Input<string>;
    /**
     * The instance type.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * [EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6
     * addresses from the range of your subnet.
     */
    ipv6AddressCount?: pulumi.Input<number>;
    /**
     * [EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface.
     */
    ipv6Addresses?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceIpv6Address>[]>;
    /**
     * The ID of the kernel.
     */
    kernelId?: pulumi.Input<string>;
    /**
     * The name of the key pair.
     */
    keyName?: pulumi.Input<string>;
    /**
     * The launch template to use to launch the instances.
     */
    launchTemplate?: pulumi.Input<inputs.Ec2InstanceLaunchTemplate>;
    /**
     * The license configurations.
     */
    licenseSpecifications?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceLicenseSpecification>[]>;
    /**
     * Specifies whether detailed monitoring is enabled for the instance.
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * The network interfaces to associate with the instance.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceNetworkInterface>[]>;
    /**
     * The name of an existing placement group that you want to launch the instance into (cluster | partition | spread).
     */
    placementGroupName?: pulumi.Input<string>;
    /**
     * The private DNS name of the specified instance. For example: ip-10-24-34-0.ec2.internal.
     */
    privateDnsName?: pulumi.Input<string>;
    /**
     * The options for the instance hostname.
     */
    privateDnsNameOptions?: pulumi.Input<inputs.Ec2InstancePrivateDnsNameOptions>;
    /**
     * The private IP address of the specified instance. For example: 10.24.34.0.
     */
    privateIp?: pulumi.Input<string>;
    /**
     * [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.
     */
    privateIpAddress?: pulumi.Input<string>;
    /**
     * Indicates whether to assign the tags from the instance to all of the volumes attached to the instance at launch. If you
     * specify true and you assign tags to the instance, those tags are automatically assigned to all of the volumes that you
     * attach to the instance at launch. If you specify false, those tags are not assigned to the attached volumes.
     */
    propagateTagsToVolumeOnCreation?: pulumi.Input<boolean>;
    /**
     * The public DNS name of the specified instance. For example: ec2-107-20-50-45.compute-1.amazonaws.com.
     */
    publicDnsName?: pulumi.Input<string>;
    /**
     * The public IP address of the specified instance. For example: 192.0.2.0.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * The ID of the RAM disk to select.
     */
    ramdiskId?: pulumi.Input<string>;
    /**
     * The IDs of the security groups.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * the names of the security groups. For a nondefault VPC, you must use security group IDs instead.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether to enable an instance launched in a VPC to perform NAT.
     */
    sourceDestCheck?: pulumi.Input<boolean>;
    /**
     * The SSM document and parameter values in AWS Systems Manager to associate with this instance.
     */
    ssmAssociations?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceSsmAssociation>[]>;
    /**
     * The current state of the instance.
     */
    state?: pulumi.Input<inputs.Ec2InstanceState>;
    /**
     * [EC2-VPC] The ID of the subnet to launch the instance into.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The tags to add to the instance.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceTag>[]>;
    /**
     * The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on
     * single-tenant hardware.
     */
    tenancy?: pulumi.Input<string>;
    /**
     * The user data to make available to the instance.
     */
    userData?: pulumi.Input<string>;
    /**
     * The volumes to attach to the instance.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceVolume>[]>;
    /**
     * The ID of the VPC that the instance is running in.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2Instance resource.
 */
export interface Ec2InstanceArgs {
    /**
     * This property is reserved for internal use. If you use it, the stack fails with this error: Bad property set: [Testing
     * this property] (Service: AmazonEC2; Status Code: 400; Error Code: InvalidParameterCombination; Request ID:
     * 0XXXXXX-49c7-4b40-8bcc-76885dcXXXXX).
     */
    additionalInfo?: pulumi.Input<string>;
    /**
     * Indicates whether the instance is associated with a dedicated host. If you want the instance to always restart on the
     * same host on which it was launched, specify host. If you want the instance to restart on any available host, but try to
     * launch onto the last host it ran on (on a best-effort basis), specify default.
     */
    affinity?: pulumi.Input<string>;
    /**
     * The Availability Zone of the instance.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The block device mapping entries that defines the block devices to attach to the instance at launch.
     */
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceBlockDeviceMapping>[]>;
    /**
     * The CPU options for the instance.
     */
    cpuOptions?: pulumi.Input<inputs.Ec2InstanceCpuOptions>;
    /**
     * The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited.
     */
    creditSpecification?: pulumi.Input<inputs.Ec2InstanceCreditSpecification>;
    /**
     * If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API;
     * otherwise, you can.
     */
    disableApiTermination?: pulumi.Input<boolean>;
    /**
     * Indicates whether the instance is optimized for Amazon EBS I/O.
     */
    ebsOptimized?: pulumi.Input<boolean>;
    /**
     * An elastic GPU to associate with the instance.
     */
    elasticGpuSpecifications?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceElasticGpuSpecification>[]>;
    /**
     * An elastic inference accelerator to associate with the instance.
     */
    elasticInferenceAccelerators?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceElasticInferenceAccelerator>[]>;
    /**
     * Indicates whether the instance is enabled for AWS Nitro Enclaves.
     */
    enclaveOptions?: pulumi.Input<inputs.Ec2InstanceEnclaveOptions>;
    /**
     * Indicates whether an instance is enabled for hibernation.
     */
    hibernationOptions?: pulumi.Input<inputs.Ec2InstanceHibernationOptions>;
    /**
     * If you specify host for the Affinity property, the ID of a dedicated host that the instance is associated with. If you
     * don't specify an ID, Amazon EC2 launches the instance onto any available, compatible dedicated host in your account.
     */
    hostId?: pulumi.Input<string>;
    /**
     * The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the
     * Tenancy parameter or set it to host.
     */
    hostResourceGroupArn?: pulumi.Input<string>;
    /**
     * The IAM instance profile.
     */
    iamInstanceProfile?: pulumi.Input<string>;
    /**
     * The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating
     * system command for system shutdown).
     */
    instanceInitiatedShutdownBehavior?: pulumi.Input<string>;
    /**
     * The instance type.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * [EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6
     * addresses from the range of your subnet.
     */
    ipv6AddressCount?: pulumi.Input<number>;
    /**
     * [EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface.
     */
    ipv6Addresses?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceIpv6Address>[]>;
    /**
     * The ID of the kernel.
     */
    kernelId?: pulumi.Input<string>;
    /**
     * The name of the key pair.
     */
    keyName?: pulumi.Input<string>;
    /**
     * The launch template to use to launch the instances.
     */
    launchTemplate?: pulumi.Input<inputs.Ec2InstanceLaunchTemplate>;
    /**
     * The license configurations.
     */
    licenseSpecifications?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceLicenseSpecification>[]>;
    /**
     * Specifies whether detailed monitoring is enabled for the instance.
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * The network interfaces to associate with the instance.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceNetworkInterface>[]>;
    /**
     * The name of an existing placement group that you want to launch the instance into (cluster | partition | spread).
     */
    placementGroupName?: pulumi.Input<string>;
    /**
     * The options for the instance hostname.
     */
    privateDnsNameOptions?: pulumi.Input<inputs.Ec2InstancePrivateDnsNameOptions>;
    /**
     * [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.
     */
    privateIpAddress?: pulumi.Input<string>;
    /**
     * Indicates whether to assign the tags from the instance to all of the volumes attached to the instance at launch. If you
     * specify true and you assign tags to the instance, those tags are automatically assigned to all of the volumes that you
     * attach to the instance at launch. If you specify false, those tags are not assigned to the attached volumes.
     */
    propagateTagsToVolumeOnCreation?: pulumi.Input<boolean>;
    /**
     * The ID of the RAM disk to select.
     */
    ramdiskId?: pulumi.Input<string>;
    /**
     * The IDs of the security groups.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * the names of the security groups. For a nondefault VPC, you must use security group IDs instead.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether to enable an instance launched in a VPC to perform NAT.
     */
    sourceDestCheck?: pulumi.Input<boolean>;
    /**
     * The SSM document and parameter values in AWS Systems Manager to associate with this instance.
     */
    ssmAssociations?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceSsmAssociation>[]>;
    /**
     * [EC2-VPC] The ID of the subnet to launch the instance into.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The tags to add to the instance.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceTag>[]>;
    /**
     * The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on
     * single-tenant hardware.
     */
    tenancy?: pulumi.Input<string>;
    /**
     * The user data to make available to the instance.
     */
    userData?: pulumi.Input<string>;
    /**
     * The volumes to attach to the instance.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.Ec2InstanceVolume>[]>;
}
