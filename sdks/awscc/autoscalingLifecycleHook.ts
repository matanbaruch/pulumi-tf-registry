// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AutoscalingLifecycleHook extends pulumi.CustomResource {
    /**
     * Get an existing AutoscalingLifecycleHook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoscalingLifecycleHookState, opts?: pulumi.CustomResourceOptions): AutoscalingLifecycleHook {
        return new AutoscalingLifecycleHook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/autoscalingLifecycleHook:AutoscalingLifecycleHook';

    /**
     * Returns true if the given object is an instance of AutoscalingLifecycleHook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoscalingLifecycleHook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoscalingLifecycleHook.__pulumiType;
    }

    /**
     * The name of the Auto Scaling group for the lifecycle hook.
     */
    public readonly autoScalingGroupName!: pulumi.Output<string>;
    /**
     * The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The
     * valid values are CONTINUE and ABANDON (default).
     */
    public readonly defaultResult!: pulumi.Output<string>;
    /**
     * The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds.
     * The default value is 3600 seconds (1 hour). If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action
     * that you specified in the DefaultResult property.
     */
    public readonly heartbeatTimeout!: pulumi.Output<number>;
    /**
     * The name of the lifecycle hook.
     */
    public readonly lifecycleHookName!: pulumi.Output<string>;
    /**
     * The instance state to which you want to attach the lifecycle hook.
     */
    public readonly lifecycleTransition!: pulumi.Output<string>;
    /**
     * Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.
     */
    public readonly notificationMetadata!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an
     * instance is in the transition state for the lifecycle hook. You can specify an Amazon SQS queue or an Amazon SNS topic.
     * The notification message includes the following information: lifecycle action token, user account ID, Auto Scaling group
     * name, lifecycle hook name, instance ID, lifecycle transition, and notification metadata.
     */
    public readonly notificationTargetArn!: pulumi.Output<string>;
    /**
     * The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example,
     * an Amazon SNS topic or an Amazon SQS queue.
     */
    public readonly roleArn!: pulumi.Output<string>;

    /**
     * Create a AutoscalingLifecycleHook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoscalingLifecycleHookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoscalingLifecycleHookArgs | AutoscalingLifecycleHookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoscalingLifecycleHookState | undefined;
            resourceInputs["autoScalingGroupName"] = state ? state.autoScalingGroupName : undefined;
            resourceInputs["defaultResult"] = state ? state.defaultResult : undefined;
            resourceInputs["heartbeatTimeout"] = state ? state.heartbeatTimeout : undefined;
            resourceInputs["lifecycleHookName"] = state ? state.lifecycleHookName : undefined;
            resourceInputs["lifecycleTransition"] = state ? state.lifecycleTransition : undefined;
            resourceInputs["notificationMetadata"] = state ? state.notificationMetadata : undefined;
            resourceInputs["notificationTargetArn"] = state ? state.notificationTargetArn : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
        } else {
            const args = argsOrState as AutoscalingLifecycleHookArgs | undefined;
            if ((!args || args.autoScalingGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoScalingGroupName'");
            }
            if ((!args || args.lifecycleTransition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lifecycleTransition'");
            }
            resourceInputs["autoScalingGroupName"] = args ? args.autoScalingGroupName : undefined;
            resourceInputs["defaultResult"] = args ? args.defaultResult : undefined;
            resourceInputs["heartbeatTimeout"] = args ? args.heartbeatTimeout : undefined;
            resourceInputs["lifecycleHookName"] = args ? args.lifecycleHookName : undefined;
            resourceInputs["lifecycleTransition"] = args ? args.lifecycleTransition : undefined;
            resourceInputs["notificationMetadata"] = args ? args.notificationMetadata : undefined;
            resourceInputs["notificationTargetArn"] = args ? args.notificationTargetArn : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoscalingLifecycleHook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutoscalingLifecycleHook resources.
 */
export interface AutoscalingLifecycleHookState {
    /**
     * The name of the Auto Scaling group for the lifecycle hook.
     */
    autoScalingGroupName?: pulumi.Input<string>;
    /**
     * The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The
     * valid values are CONTINUE and ABANDON (default).
     */
    defaultResult?: pulumi.Input<string>;
    /**
     * The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds.
     * The default value is 3600 seconds (1 hour). If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action
     * that you specified in the DefaultResult property.
     */
    heartbeatTimeout?: pulumi.Input<number>;
    /**
     * The name of the lifecycle hook.
     */
    lifecycleHookName?: pulumi.Input<string>;
    /**
     * The instance state to which you want to attach the lifecycle hook.
     */
    lifecycleTransition?: pulumi.Input<string>;
    /**
     * Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.
     */
    notificationMetadata?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an
     * instance is in the transition state for the lifecycle hook. You can specify an Amazon SQS queue or an Amazon SNS topic.
     * The notification message includes the following information: lifecycle action token, user account ID, Auto Scaling group
     * name, lifecycle hook name, instance ID, lifecycle transition, and notification metadata.
     */
    notificationTargetArn?: pulumi.Input<string>;
    /**
     * The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example,
     * an Amazon SNS topic or an Amazon SQS queue.
     */
    roleArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutoscalingLifecycleHook resource.
 */
export interface AutoscalingLifecycleHookArgs {
    /**
     * The name of the Auto Scaling group for the lifecycle hook.
     */
    autoScalingGroupName: pulumi.Input<string>;
    /**
     * The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The
     * valid values are CONTINUE and ABANDON (default).
     */
    defaultResult?: pulumi.Input<string>;
    /**
     * The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds.
     * The default value is 3600 seconds (1 hour). If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action
     * that you specified in the DefaultResult property.
     */
    heartbeatTimeout?: pulumi.Input<number>;
    /**
     * The name of the lifecycle hook.
     */
    lifecycleHookName?: pulumi.Input<string>;
    /**
     * The instance state to which you want to attach the lifecycle hook.
     */
    lifecycleTransition: pulumi.Input<string>;
    /**
     * Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.
     */
    notificationMetadata?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an
     * instance is in the transition state for the lifecycle hook. You can specify an Amazon SQS queue or an Amazon SNS topic.
     * The notification message includes the following information: lifecycle action token, user account ID, Auto Scaling group
     * name, lifecycle hook name, instance ID, lifecycle transition, and notification metadata.
     */
    notificationTargetArn?: pulumi.Input<string>;
    /**
     * The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example,
     * an Amazon SNS topic or an Amazon SQS queue.
     */
    roleArn?: pulumi.Input<string>;
}
