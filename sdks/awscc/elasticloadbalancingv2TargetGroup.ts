// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Elasticloadbalancingv2TargetGroup extends pulumi.CustomResource {
    /**
     * Get an existing Elasticloadbalancingv2TargetGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Elasticloadbalancingv2TargetGroupState, opts?: pulumi.CustomResourceOptions): Elasticloadbalancingv2TargetGroup {
        return new Elasticloadbalancingv2TargetGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/elasticloadbalancingv2TargetGroup:Elasticloadbalancingv2TargetGroup';

    /**
     * Returns true if the given object is an instance of Elasticloadbalancingv2TargetGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Elasticloadbalancingv2TargetGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Elasticloadbalancingv2TargetGroup.__pulumiType;
    }

    /**
     * Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can
     * be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
     */
    public readonly healthCheckEnabled!: pulumi.Output<boolean>;
    /**
     * The approximate amount of time, in seconds, between health checks of an individual target.
     */
    public readonly healthCheckIntervalSeconds!: pulumi.Output<number>;
    /**
     * [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping
     * path. The default is /. [GRPC protocol version] The path of a custom health check method with the format
     * /package.service/method. The default is /AWS.ALB/healthcheck.
     */
    public readonly healthCheckPath!: pulumi.Output<string>;
    /**
     * The port the load balancer uses when performing health checks on targets.
     */
    public readonly healthCheckPort!: pulumi.Output<string>;
    /**
     * The protocol the load balancer uses when performing health checks on targets.
     */
    public readonly healthCheckProtocol!: pulumi.Output<string>;
    /**
     * The amount of time, in seconds, during which no response from a target means a failed health check.
     */
    public readonly healthCheckTimeoutSeconds!: pulumi.Output<number>;
    /**
     * The number of consecutive health checks successes required before considering an unhealthy target healthy.
     */
    public readonly healthyThresholdCount!: pulumi.Output<number>;
    /**
     * The type of IP address used for this target group. The possible values are ipv4 and ipv6.
     */
    public readonly ipAddressType!: pulumi.Output<string>;
    /**
     * The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.
     */
    public /*out*/ readonly loadBalancerArns!: pulumi.Output<string[]>;
    /**
     * [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.
     */
    public readonly matcher!: pulumi.Output<outputs.Elasticloadbalancingv2TargetGroupMatcher>;
    /**
     * The name of the target group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The port on which the targets receive traffic. This port is used unless you specify a port override when registering the
     * target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port
     * is 6081.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The protocol to use for routing traffic to the targets.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
     */
    public readonly protocolVersion!: pulumi.Output<string>;
    /**
     * The tags.
     */
    public readonly tags!: pulumi.Output<outputs.Elasticloadbalancingv2TargetGroupTag[]>;
    /**
     * The ARN of the Target Group
     */
    public /*out*/ readonly targetGroupArn!: pulumi.Output<string>;
    /**
     * The attributes.
     */
    public readonly targetGroupAttributes!: pulumi.Output<outputs.Elasticloadbalancingv2TargetGroupTargetGroupAttribute[]>;
    /**
     * The full name of the target group.
     */
    public /*out*/ readonly targetGroupFullName!: pulumi.Output<string>;
    /**
     * The name of the target group.
     */
    public /*out*/ readonly targetGroupName!: pulumi.Output<string>;
    /**
     * The type of target that you must specify when registering targets with this target group. You can't specify targets for
     * a target group using more than one target type.
     */
    public readonly targetType!: pulumi.Output<string>;
    /**
     * The targets.
     */
    public readonly targets!: pulumi.Output<outputs.Elasticloadbalancingv2TargetGroupTarget[]>;
    /**
     * The number of consecutive health check failures required before considering a target unhealthy.
     */
    public readonly unhealthyThresholdCount!: pulumi.Output<number>;
    /**
     * The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Elasticloadbalancingv2TargetGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Elasticloadbalancingv2TargetGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Elasticloadbalancingv2TargetGroupArgs | Elasticloadbalancingv2TargetGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Elasticloadbalancingv2TargetGroupState | undefined;
            resourceInputs["healthCheckEnabled"] = state ? state.healthCheckEnabled : undefined;
            resourceInputs["healthCheckIntervalSeconds"] = state ? state.healthCheckIntervalSeconds : undefined;
            resourceInputs["healthCheckPath"] = state ? state.healthCheckPath : undefined;
            resourceInputs["healthCheckPort"] = state ? state.healthCheckPort : undefined;
            resourceInputs["healthCheckProtocol"] = state ? state.healthCheckProtocol : undefined;
            resourceInputs["healthCheckTimeoutSeconds"] = state ? state.healthCheckTimeoutSeconds : undefined;
            resourceInputs["healthyThresholdCount"] = state ? state.healthyThresholdCount : undefined;
            resourceInputs["ipAddressType"] = state ? state.ipAddressType : undefined;
            resourceInputs["loadBalancerArns"] = state ? state.loadBalancerArns : undefined;
            resourceInputs["matcher"] = state ? state.matcher : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["protocolVersion"] = state ? state.protocolVersion : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetGroupArn"] = state ? state.targetGroupArn : undefined;
            resourceInputs["targetGroupAttributes"] = state ? state.targetGroupAttributes : undefined;
            resourceInputs["targetGroupFullName"] = state ? state.targetGroupFullName : undefined;
            resourceInputs["targetGroupName"] = state ? state.targetGroupName : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["unhealthyThresholdCount"] = state ? state.unhealthyThresholdCount : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as Elasticloadbalancingv2TargetGroupArgs | undefined;
            resourceInputs["healthCheckEnabled"] = args ? args.healthCheckEnabled : undefined;
            resourceInputs["healthCheckIntervalSeconds"] = args ? args.healthCheckIntervalSeconds : undefined;
            resourceInputs["healthCheckPath"] = args ? args.healthCheckPath : undefined;
            resourceInputs["healthCheckPort"] = args ? args.healthCheckPort : undefined;
            resourceInputs["healthCheckProtocol"] = args ? args.healthCheckProtocol : undefined;
            resourceInputs["healthCheckTimeoutSeconds"] = args ? args.healthCheckTimeoutSeconds : undefined;
            resourceInputs["healthyThresholdCount"] = args ? args.healthyThresholdCount : undefined;
            resourceInputs["ipAddressType"] = args ? args.ipAddressType : undefined;
            resourceInputs["matcher"] = args ? args.matcher : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["protocolVersion"] = args ? args.protocolVersion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetGroupAttributes"] = args ? args.targetGroupAttributes : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["unhealthyThresholdCount"] = args ? args.unhealthyThresholdCount : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["loadBalancerArns"] = undefined /*out*/;
            resourceInputs["targetGroupArn"] = undefined /*out*/;
            resourceInputs["targetGroupFullName"] = undefined /*out*/;
            resourceInputs["targetGroupName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Elasticloadbalancingv2TargetGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Elasticloadbalancingv2TargetGroup resources.
 */
export interface Elasticloadbalancingv2TargetGroupState {
    /**
     * Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can
     * be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
     */
    healthCheckEnabled?: pulumi.Input<boolean>;
    /**
     * The approximate amount of time, in seconds, between health checks of an individual target.
     */
    healthCheckIntervalSeconds?: pulumi.Input<number>;
    /**
     * [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping
     * path. The default is /. [GRPC protocol version] The path of a custom health check method with the format
     * /package.service/method. The default is /AWS.ALB/healthcheck.
     */
    healthCheckPath?: pulumi.Input<string>;
    /**
     * The port the load balancer uses when performing health checks on targets.
     */
    healthCheckPort?: pulumi.Input<string>;
    /**
     * The protocol the load balancer uses when performing health checks on targets.
     */
    healthCheckProtocol?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, during which no response from a target means a failed health check.
     */
    healthCheckTimeoutSeconds?: pulumi.Input<number>;
    /**
     * The number of consecutive health checks successes required before considering an unhealthy target healthy.
     */
    healthyThresholdCount?: pulumi.Input<number>;
    /**
     * The type of IP address used for this target group. The possible values are ipv4 and ipv6.
     */
    ipAddressType?: pulumi.Input<string>;
    /**
     * The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.
     */
    loadBalancerArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.
     */
    matcher?: pulumi.Input<inputs.Elasticloadbalancingv2TargetGroupMatcher>;
    /**
     * The name of the target group.
     */
    name?: pulumi.Input<string>;
    /**
     * The port on which the targets receive traffic. This port is used unless you specify a port override when registering the
     * target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port
     * is 6081.
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol to use for routing traffic to the targets.
     */
    protocol?: pulumi.Input<string>;
    /**
     * [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
     */
    protocolVersion?: pulumi.Input<string>;
    /**
     * The tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Elasticloadbalancingv2TargetGroupTag>[]>;
    /**
     * The ARN of the Target Group
     */
    targetGroupArn?: pulumi.Input<string>;
    /**
     * The attributes.
     */
    targetGroupAttributes?: pulumi.Input<pulumi.Input<inputs.Elasticloadbalancingv2TargetGroupTargetGroupAttribute>[]>;
    /**
     * The full name of the target group.
     */
    targetGroupFullName?: pulumi.Input<string>;
    /**
     * The name of the target group.
     */
    targetGroupName?: pulumi.Input<string>;
    /**
     * The type of target that you must specify when registering targets with this target group. You can't specify targets for
     * a target group using more than one target type.
     */
    targetType?: pulumi.Input<string>;
    /**
     * The targets.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.Elasticloadbalancingv2TargetGroupTarget>[]>;
    /**
     * The number of consecutive health check failures required before considering a target unhealthy.
     */
    unhealthyThresholdCount?: pulumi.Input<number>;
    /**
     * The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Elasticloadbalancingv2TargetGroup resource.
 */
export interface Elasticloadbalancingv2TargetGroupArgs {
    /**
     * Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can
     * be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
     */
    healthCheckEnabled?: pulumi.Input<boolean>;
    /**
     * The approximate amount of time, in seconds, between health checks of an individual target.
     */
    healthCheckIntervalSeconds?: pulumi.Input<number>;
    /**
     * [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping
     * path. The default is /. [GRPC protocol version] The path of a custom health check method with the format
     * /package.service/method. The default is /AWS.ALB/healthcheck.
     */
    healthCheckPath?: pulumi.Input<string>;
    /**
     * The port the load balancer uses when performing health checks on targets.
     */
    healthCheckPort?: pulumi.Input<string>;
    /**
     * The protocol the load balancer uses when performing health checks on targets.
     */
    healthCheckProtocol?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, during which no response from a target means a failed health check.
     */
    healthCheckTimeoutSeconds?: pulumi.Input<number>;
    /**
     * The number of consecutive health checks successes required before considering an unhealthy target healthy.
     */
    healthyThresholdCount?: pulumi.Input<number>;
    /**
     * The type of IP address used for this target group. The possible values are ipv4 and ipv6.
     */
    ipAddressType?: pulumi.Input<string>;
    /**
     * [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.
     */
    matcher?: pulumi.Input<inputs.Elasticloadbalancingv2TargetGroupMatcher>;
    /**
     * The name of the target group.
     */
    name?: pulumi.Input<string>;
    /**
     * The port on which the targets receive traffic. This port is used unless you specify a port override when registering the
     * target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port
     * is 6081.
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol to use for routing traffic to the targets.
     */
    protocol?: pulumi.Input<string>;
    /**
     * [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
     */
    protocolVersion?: pulumi.Input<string>;
    /**
     * The tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Elasticloadbalancingv2TargetGroupTag>[]>;
    /**
     * The attributes.
     */
    targetGroupAttributes?: pulumi.Input<pulumi.Input<inputs.Elasticloadbalancingv2TargetGroupTargetGroupAttribute>[]>;
    /**
     * The type of target that you must specify when registering targets with this target group. You can't specify targets for
     * a target group using more than one target type.
     */
    targetType?: pulumi.Input<string>;
    /**
     * The targets.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.Elasticloadbalancingv2TargetGroupTarget>[]>;
    /**
     * The number of consecutive health check failures required before considering a target unhealthy.
     */
    unhealthyThresholdCount?: pulumi.Input<number>;
    /**
     * The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
     */
    vpcId?: pulumi.Input<string>;
}
