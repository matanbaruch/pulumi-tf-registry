// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRedshiftCluster(args: GetRedshiftClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetRedshiftClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getRedshiftCluster:getRedshiftCluster", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRedshiftCluster.
 */
export interface GetRedshiftClusterArgs {
    id: string;
}

/**
 * A collection of values returned by getRedshiftCluster.
 */
export interface GetRedshiftClusterResult {
    readonly allowVersionUpgrade: boolean;
    readonly aquaConfigurationStatus: string;
    readonly automatedSnapshotRetentionPeriod: number;
    readonly availabilityZone: string;
    readonly availabilityZoneRelocation: boolean;
    readonly availabilityZoneRelocationStatus: string;
    readonly classic: boolean;
    readonly clusterIdentifier: string;
    readonly clusterNamespaceArn: string;
    readonly clusterParameterGroupName: string;
    readonly clusterSecurityGroups: string[];
    readonly clusterSubnetGroupName: string;
    readonly clusterType: string;
    readonly clusterVersion: string;
    readonly dbName: string;
    readonly deferMaintenance: boolean;
    readonly deferMaintenanceDuration: number;
    readonly deferMaintenanceEndTime: string;
    readonly deferMaintenanceIdentifier: string;
    readonly deferMaintenanceStartTime: string;
    readonly destinationRegion: string;
    readonly elasticIp: string;
    readonly encrypted: boolean;
    readonly endpoint: outputs.GetRedshiftClusterEndpoint;
    readonly enhancedVpcRouting: boolean;
    readonly hsmClientCertificateIdentifier: string;
    readonly hsmConfigurationIdentifier: string;
    readonly iamRoles: string[];
    readonly id: string;
    readonly kmsKeyId: string;
    readonly loggingProperties: outputs.GetRedshiftClusterLoggingProperties;
    readonly maintenanceTrackName: string;
    readonly manageMasterPassword: boolean;
    readonly manualSnapshotRetentionPeriod: number;
    readonly masterPasswordSecretArn: string;
    readonly masterPasswordSecretKmsKeyId: string;
    readonly masterUserPassword: string;
    readonly masterUsername: string;
    readonly multiAz: boolean;
    readonly namespaceResourcePolicy: string;
    readonly nodeType: string;
    readonly numberOfNodes: number;
    readonly ownerAccount: string;
    readonly port: number;
    readonly preferredMaintenanceWindow: string;
    readonly publiclyAccessible: boolean;
    readonly resourceAction: string;
    readonly revisionTarget: string;
    readonly rotateEncryptionKey: boolean;
    readonly snapshotClusterIdentifier: string;
    readonly snapshotCopyGrantName: string;
    readonly snapshotCopyManual: boolean;
    readonly snapshotCopyRetentionPeriod: number;
    readonly snapshotIdentifier: string;
    readonly tags: outputs.GetRedshiftClusterTag[];
    readonly vpcSecurityGroupIds: string[];
}
export function getRedshiftClusterOutput(args: GetRedshiftClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRedshiftClusterResult> {
    return pulumi.output(args).apply((a: any) => getRedshiftCluster(a, opts))
}

/**
 * A collection of arguments for invoking getRedshiftCluster.
 */
export interface GetRedshiftClusterOutputArgs {
    id: pulumi.Input<string>;
}
