// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GuarddutyIpSet extends pulumi.CustomResource {
    /**
     * Get an existing GuarddutyIpSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GuarddutyIpSetState, opts?: pulumi.CustomResourceOptions): GuarddutyIpSet {
        return new GuarddutyIpSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/guarddutyIpSet:GuarddutyIpSet';

    /**
     * Returns true if the given object is an instance of GuarddutyIpSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GuarddutyIpSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GuarddutyIpSet.__pulumiType;
    }

    public readonly activate!: pulumi.Output<boolean>;
    public readonly detectorId!: pulumi.Output<string>;
    public readonly format!: pulumi.Output<string>;
    public /*out*/ readonly ipSetId!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.GuarddutyIpSetTag[]>;

    /**
     * Create a GuarddutyIpSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GuarddutyIpSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GuarddutyIpSetArgs | GuarddutyIpSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GuarddutyIpSetState | undefined;
            resourceInputs["activate"] = state ? state.activate : undefined;
            resourceInputs["detectorId"] = state ? state.detectorId : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["ipSetId"] = state ? state.ipSetId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as GuarddutyIpSetArgs | undefined;
            if ((!args || args.format === undefined) && !opts.urn) {
                throw new Error("Missing required property 'format'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["activate"] = args ? args.activate : undefined;
            resourceInputs["detectorId"] = args ? args.detectorId : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["ipSetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GuarddutyIpSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GuarddutyIpSet resources.
 */
export interface GuarddutyIpSetState {
    activate?: pulumi.Input<boolean>;
    detectorId?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    ipSetId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GuarddutyIpSetTag>[]>;
}

/**
 * The set of arguments for constructing a GuarddutyIpSet resource.
 */
export interface GuarddutyIpSetArgs {
    activate?: pulumi.Input<boolean>;
    detectorId?: pulumi.Input<string>;
    format: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GuarddutyIpSetTag>[]>;
}
