// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IotanalyticsDatastore extends pulumi.CustomResource {
    /**
     * Get an existing IotanalyticsDatastore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotanalyticsDatastoreState, opts?: pulumi.CustomResourceOptions): IotanalyticsDatastore {
        return new IotanalyticsDatastore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/iotanalyticsDatastore:IotanalyticsDatastore';

    /**
     * Returns true if the given object is an instance of IotanalyticsDatastore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotanalyticsDatastore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotanalyticsDatastore.__pulumiType;
    }

    public /*out*/ readonly datastoreId!: pulumi.Output<string>;
    public readonly datastoreName!: pulumi.Output<string>;
    public readonly datastorePartitions!: pulumi.Output<outputs.IotanalyticsDatastoreDatastorePartitions>;
    public readonly datastoreStorage!: pulumi.Output<outputs.IotanalyticsDatastoreDatastoreStorage>;
    public readonly fileFormatConfiguration!: pulumi.Output<outputs.IotanalyticsDatastoreFileFormatConfiguration>;
    public readonly retentionPeriod!: pulumi.Output<outputs.IotanalyticsDatastoreRetentionPeriod>;
    public readonly tags!: pulumi.Output<outputs.IotanalyticsDatastoreTag[]>;

    /**
     * Create a IotanalyticsDatastore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IotanalyticsDatastoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotanalyticsDatastoreArgs | IotanalyticsDatastoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotanalyticsDatastoreState | undefined;
            resourceInputs["datastoreId"] = state ? state.datastoreId : undefined;
            resourceInputs["datastoreName"] = state ? state.datastoreName : undefined;
            resourceInputs["datastorePartitions"] = state ? state.datastorePartitions : undefined;
            resourceInputs["datastoreStorage"] = state ? state.datastoreStorage : undefined;
            resourceInputs["fileFormatConfiguration"] = state ? state.fileFormatConfiguration : undefined;
            resourceInputs["retentionPeriod"] = state ? state.retentionPeriod : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as IotanalyticsDatastoreArgs | undefined;
            resourceInputs["datastoreName"] = args ? args.datastoreName : undefined;
            resourceInputs["datastorePartitions"] = args ? args.datastorePartitions : undefined;
            resourceInputs["datastoreStorage"] = args ? args.datastoreStorage : undefined;
            resourceInputs["fileFormatConfiguration"] = args ? args.fileFormatConfiguration : undefined;
            resourceInputs["retentionPeriod"] = args ? args.retentionPeriod : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["datastoreId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IotanalyticsDatastore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IotanalyticsDatastore resources.
 */
export interface IotanalyticsDatastoreState {
    datastoreId?: pulumi.Input<string>;
    datastoreName?: pulumi.Input<string>;
    datastorePartitions?: pulumi.Input<inputs.IotanalyticsDatastoreDatastorePartitions>;
    datastoreStorage?: pulumi.Input<inputs.IotanalyticsDatastoreDatastoreStorage>;
    fileFormatConfiguration?: pulumi.Input<inputs.IotanalyticsDatastoreFileFormatConfiguration>;
    retentionPeriod?: pulumi.Input<inputs.IotanalyticsDatastoreRetentionPeriod>;
    tags?: pulumi.Input<pulumi.Input<inputs.IotanalyticsDatastoreTag>[]>;
}

/**
 * The set of arguments for constructing a IotanalyticsDatastore resource.
 */
export interface IotanalyticsDatastoreArgs {
    datastoreName?: pulumi.Input<string>;
    datastorePartitions?: pulumi.Input<inputs.IotanalyticsDatastoreDatastorePartitions>;
    datastoreStorage?: pulumi.Input<inputs.IotanalyticsDatastoreDatastoreStorage>;
    fileFormatConfiguration?: pulumi.Input<inputs.IotanalyticsDatastoreFileFormatConfiguration>;
    retentionPeriod?: pulumi.Input<inputs.IotanalyticsDatastoreRetentionPeriod>;
    tags?: pulumi.Input<pulumi.Input<inputs.IotanalyticsDatastoreTag>[]>;
}
