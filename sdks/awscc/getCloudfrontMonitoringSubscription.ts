// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudfrontMonitoringSubscription(args: GetCloudfrontMonitoringSubscriptionArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudfrontMonitoringSubscriptionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getCloudfrontMonitoringSubscription:getCloudfrontMonitoringSubscription", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudfrontMonitoringSubscription.
 */
export interface GetCloudfrontMonitoringSubscriptionArgs {
    id: string;
}

/**
 * A collection of values returned by getCloudfrontMonitoringSubscription.
 */
export interface GetCloudfrontMonitoringSubscriptionResult {
    readonly distributionId: string;
    readonly id: string;
    readonly monitoringSubscription: outputs.GetCloudfrontMonitoringSubscriptionMonitoringSubscription;
}
export function getCloudfrontMonitoringSubscriptionOutput(args: GetCloudfrontMonitoringSubscriptionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudfrontMonitoringSubscriptionResult> {
    return pulumi.output(args).apply((a: any) => getCloudfrontMonitoringSubscription(a, opts))
}

/**
 * A collection of arguments for invoking getCloudfrontMonitoringSubscription.
 */
export interface GetCloudfrontMonitoringSubscriptionOutputArgs {
    id: pulumi.Input<string>;
}
