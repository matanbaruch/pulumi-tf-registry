// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatasyncStorageSystem extends pulumi.CustomResource {
    /**
     * Get an existing DatasyncStorageSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasyncStorageSystemState, opts?: pulumi.CustomResourceOptions): DatasyncStorageSystem {
        return new DatasyncStorageSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/datasyncStorageSystem:DatasyncStorageSystem';

    /**
     * Returns true if the given object is an instance of DatasyncStorageSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasyncStorageSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasyncStorageSystem.__pulumiType;
    }

    /**
     * The ARN of the DataSync agent that connects to and reads from the on-premises storage system's management interface.
     */
    public readonly agentArns!: pulumi.Output<string[]>;
    /**
     * The ARN of the Amazon CloudWatch log group used to monitor and log discovery job events.
     */
    public readonly cloudwatchLogGroupArn!: pulumi.Output<string>;
    /**
     * Indicates whether the DataSync agent can access the on-premises storage system.
     */
    public /*out*/ readonly connectivityStatus!: pulumi.Output<string>;
    /**
     * A familiar name for the on-premises storage system.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ARN of a secret stored by AWS Secrets Manager.
     */
    public /*out*/ readonly secretsManagerArn!: pulumi.Output<string>;
    /**
     * The server name and network port required to connect with the management interface of the on-premises storage system.
     */
    public readonly serverConfiguration!: pulumi.Output<outputs.DatasyncStorageSystemServerConfiguration>;
    /**
     * The username and password for accessing your on-premises storage system's management interface.
     */
    public readonly serverCredentials!: pulumi.Output<outputs.DatasyncStorageSystemServerCredentials>;
    /**
     * The ARN of the on-premises storage system added to DataSync Discovery.
     */
    public /*out*/ readonly storageSystemArn!: pulumi.Output<string>;
    /**
     * The type of on-premises storage system that DataSync Discovery will analyze.
     */
    public readonly systemType!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.DatasyncStorageSystemTag[]>;

    /**
     * Create a DatasyncStorageSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasyncStorageSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasyncStorageSystemArgs | DatasyncStorageSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasyncStorageSystemState | undefined;
            resourceInputs["agentArns"] = state ? state.agentArns : undefined;
            resourceInputs["cloudwatchLogGroupArn"] = state ? state.cloudwatchLogGroupArn : undefined;
            resourceInputs["connectivityStatus"] = state ? state.connectivityStatus : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secretsManagerArn"] = state ? state.secretsManagerArn : undefined;
            resourceInputs["serverConfiguration"] = state ? state.serverConfiguration : undefined;
            resourceInputs["serverCredentials"] = state ? state.serverCredentials : undefined;
            resourceInputs["storageSystemArn"] = state ? state.storageSystemArn : undefined;
            resourceInputs["systemType"] = state ? state.systemType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DatasyncStorageSystemArgs | undefined;
            if ((!args || args.agentArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentArns'");
            }
            if ((!args || args.serverConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverConfiguration'");
            }
            if ((!args || args.systemType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'systemType'");
            }
            resourceInputs["agentArns"] = args ? args.agentArns : undefined;
            resourceInputs["cloudwatchLogGroupArn"] = args ? args.cloudwatchLogGroupArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverConfiguration"] = args ? args.serverConfiguration : undefined;
            resourceInputs["serverCredentials"] = args ? args.serverCredentials : undefined;
            resourceInputs["systemType"] = args ? args.systemType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["connectivityStatus"] = undefined /*out*/;
            resourceInputs["secretsManagerArn"] = undefined /*out*/;
            resourceInputs["storageSystemArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasyncStorageSystem.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatasyncStorageSystem resources.
 */
export interface DatasyncStorageSystemState {
    /**
     * The ARN of the DataSync agent that connects to and reads from the on-premises storage system's management interface.
     */
    agentArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the Amazon CloudWatch log group used to monitor and log discovery job events.
     */
    cloudwatchLogGroupArn?: pulumi.Input<string>;
    /**
     * Indicates whether the DataSync agent can access the on-premises storage system.
     */
    connectivityStatus?: pulumi.Input<string>;
    /**
     * A familiar name for the on-premises storage system.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of a secret stored by AWS Secrets Manager.
     */
    secretsManagerArn?: pulumi.Input<string>;
    /**
     * The server name and network port required to connect with the management interface of the on-premises storage system.
     */
    serverConfiguration?: pulumi.Input<inputs.DatasyncStorageSystemServerConfiguration>;
    /**
     * The username and password for accessing your on-premises storage system's management interface.
     */
    serverCredentials?: pulumi.Input<inputs.DatasyncStorageSystemServerCredentials>;
    /**
     * The ARN of the on-premises storage system added to DataSync Discovery.
     */
    storageSystemArn?: pulumi.Input<string>;
    /**
     * The type of on-premises storage system that DataSync Discovery will analyze.
     */
    systemType?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DatasyncStorageSystemTag>[]>;
}

/**
 * The set of arguments for constructing a DatasyncStorageSystem resource.
 */
export interface DatasyncStorageSystemArgs {
    /**
     * The ARN of the DataSync agent that connects to and reads from the on-premises storage system's management interface.
     */
    agentArns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the Amazon CloudWatch log group used to monitor and log discovery job events.
     */
    cloudwatchLogGroupArn?: pulumi.Input<string>;
    /**
     * A familiar name for the on-premises storage system.
     */
    name?: pulumi.Input<string>;
    /**
     * The server name and network port required to connect with the management interface of the on-premises storage system.
     */
    serverConfiguration: pulumi.Input<inputs.DatasyncStorageSystemServerConfiguration>;
    /**
     * The username and password for accessing your on-premises storage system's management interface.
     */
    serverCredentials?: pulumi.Input<inputs.DatasyncStorageSystemServerCredentials>;
    /**
     * The type of on-premises storage system that DataSync Discovery will analyze.
     */
    systemType: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DatasyncStorageSystemTag>[]>;
}
