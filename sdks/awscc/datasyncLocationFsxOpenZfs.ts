// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatasyncLocationFsxOpenZfs extends pulumi.CustomResource {
    /**
     * Get an existing DatasyncLocationFsxOpenZfs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasyncLocationFsxOpenZfsState, opts?: pulumi.CustomResourceOptions): DatasyncLocationFsxOpenZfs {
        return new DatasyncLocationFsxOpenZfs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/datasyncLocationFsxOpenZfs:DatasyncLocationFsxOpenZfs';

    /**
     * Returns true if the given object is an instance of DatasyncLocationFsxOpenZfs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasyncLocationFsxOpenZfs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasyncLocationFsxOpenZfs.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) for the FSx OpenZFS file system.
     */
    public readonly fsxFilesystemArn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon FSx OpenZFS file system location that is created.
     */
    public /*out*/ readonly locationArn!: pulumi.Output<string>;
    /**
     * The URL of the FSx OpenZFS that was described.
     */
    public /*out*/ readonly locationUri!: pulumi.Output<string>;
    /**
     * Configuration settings for an NFS or SMB protocol, currently only support NFS
     */
    public readonly protocol!: pulumi.Output<outputs.DatasyncLocationFsxOpenZfsProtocol>;
    /**
     * The ARNs of the security groups that are to use to configure the FSx OpenZFS file system.
     */
    public readonly securityGroupArns!: pulumi.Output<string[]>;
    /**
     * A subdirectory in the location's path.
     */
    public readonly subdirectory!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.DatasyncLocationFsxOpenZfsTag[]>;

    /**
     * Create a DatasyncLocationFsxOpenZfs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasyncLocationFsxOpenZfsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasyncLocationFsxOpenZfsArgs | DatasyncLocationFsxOpenZfsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasyncLocationFsxOpenZfsState | undefined;
            resourceInputs["fsxFilesystemArn"] = state ? state.fsxFilesystemArn : undefined;
            resourceInputs["locationArn"] = state ? state.locationArn : undefined;
            resourceInputs["locationUri"] = state ? state.locationUri : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["securityGroupArns"] = state ? state.securityGroupArns : undefined;
            resourceInputs["subdirectory"] = state ? state.subdirectory : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DatasyncLocationFsxOpenZfsArgs | undefined;
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.securityGroupArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupArns'");
            }
            resourceInputs["fsxFilesystemArn"] = args ? args.fsxFilesystemArn : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["securityGroupArns"] = args ? args.securityGroupArns : undefined;
            resourceInputs["subdirectory"] = args ? args.subdirectory : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["locationArn"] = undefined /*out*/;
            resourceInputs["locationUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasyncLocationFsxOpenZfs.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatasyncLocationFsxOpenZfs resources.
 */
export interface DatasyncLocationFsxOpenZfsState {
    /**
     * The Amazon Resource Name (ARN) for the FSx OpenZFS file system.
     */
    fsxFilesystemArn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon FSx OpenZFS file system location that is created.
     */
    locationArn?: pulumi.Input<string>;
    /**
     * The URL of the FSx OpenZFS that was described.
     */
    locationUri?: pulumi.Input<string>;
    /**
     * Configuration settings for an NFS or SMB protocol, currently only support NFS
     */
    protocol?: pulumi.Input<inputs.DatasyncLocationFsxOpenZfsProtocol>;
    /**
     * The ARNs of the security groups that are to use to configure the FSx OpenZFS file system.
     */
    securityGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A subdirectory in the location's path.
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DatasyncLocationFsxOpenZfsTag>[]>;
}

/**
 * The set of arguments for constructing a DatasyncLocationFsxOpenZfs resource.
 */
export interface DatasyncLocationFsxOpenZfsArgs {
    /**
     * The Amazon Resource Name (ARN) for the FSx OpenZFS file system.
     */
    fsxFilesystemArn?: pulumi.Input<string>;
    /**
     * Configuration settings for an NFS or SMB protocol, currently only support NFS
     */
    protocol: pulumi.Input<inputs.DatasyncLocationFsxOpenZfsProtocol>;
    /**
     * The ARNs of the security groups that are to use to configure the FSx OpenZFS file system.
     */
    securityGroupArns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A subdirectory in the location's path.
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DatasyncLocationFsxOpenZfsTag>[]>;
}
