// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MediaconnectFlowEntitlement extends pulumi.CustomResource {
    /**
     * Get an existing MediaconnectFlowEntitlement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MediaconnectFlowEntitlementState, opts?: pulumi.CustomResourceOptions): MediaconnectFlowEntitlement {
        return new MediaconnectFlowEntitlement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/mediaconnectFlowEntitlement:MediaconnectFlowEntitlement';

    /**
     * Returns true if the given object is an instance of MediaconnectFlowEntitlement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MediaconnectFlowEntitlement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MediaconnectFlowEntitlement.__pulumiType;
    }

    /**
     * Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
     */
    public readonly dataTransferSubscriberFeePercent!: pulumi.Output<number>;
    /**
     * A description of the entitlement.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The type of encryption that will be used on the output that is associated with this entitlement.
     */
    public readonly encryption!: pulumi.Output<outputs.MediaconnectFlowEntitlementEncryption>;
    /**
     * The ARN of the entitlement.
     */
    public /*out*/ readonly entitlementArn!: pulumi.Output<string>;
    /**
     * An indication of whether the entitlement is enabled.
     */
    public readonly entitlementStatus!: pulumi.Output<string>;
    /**
     * The ARN of the flow.
     */
    public readonly flowArn!: pulumi.Output<string>;
    /**
     * The name of the entitlement.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to
     * create their own flow using your content as the source.
     */
    public readonly subscribers!: pulumi.Output<string[]>;

    /**
     * Create a MediaconnectFlowEntitlement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MediaconnectFlowEntitlementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MediaconnectFlowEntitlementArgs | MediaconnectFlowEntitlementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MediaconnectFlowEntitlementState | undefined;
            resourceInputs["dataTransferSubscriberFeePercent"] = state ? state.dataTransferSubscriberFeePercent : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["entitlementArn"] = state ? state.entitlementArn : undefined;
            resourceInputs["entitlementStatus"] = state ? state.entitlementStatus : undefined;
            resourceInputs["flowArn"] = state ? state.flowArn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["subscribers"] = state ? state.subscribers : undefined;
        } else {
            const args = argsOrState as MediaconnectFlowEntitlementArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.flowArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowArn'");
            }
            if ((!args || args.subscribers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscribers'");
            }
            resourceInputs["dataTransferSubscriberFeePercent"] = args ? args.dataTransferSubscriberFeePercent : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["entitlementStatus"] = args ? args.entitlementStatus : undefined;
            resourceInputs["flowArn"] = args ? args.flowArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["subscribers"] = args ? args.subscribers : undefined;
            resourceInputs["entitlementArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MediaconnectFlowEntitlement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MediaconnectFlowEntitlement resources.
 */
export interface MediaconnectFlowEntitlementState {
    /**
     * Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
     */
    dataTransferSubscriberFeePercent?: pulumi.Input<number>;
    /**
     * A description of the entitlement.
     */
    description?: pulumi.Input<string>;
    /**
     * The type of encryption that will be used on the output that is associated with this entitlement.
     */
    encryption?: pulumi.Input<inputs.MediaconnectFlowEntitlementEncryption>;
    /**
     * The ARN of the entitlement.
     */
    entitlementArn?: pulumi.Input<string>;
    /**
     * An indication of whether the entitlement is enabled.
     */
    entitlementStatus?: pulumi.Input<string>;
    /**
     * The ARN of the flow.
     */
    flowArn?: pulumi.Input<string>;
    /**
     * The name of the entitlement.
     */
    name?: pulumi.Input<string>;
    /**
     * The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to
     * create their own flow using your content as the source.
     */
    subscribers?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a MediaconnectFlowEntitlement resource.
 */
export interface MediaconnectFlowEntitlementArgs {
    /**
     * Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
     */
    dataTransferSubscriberFeePercent?: pulumi.Input<number>;
    /**
     * A description of the entitlement.
     */
    description: pulumi.Input<string>;
    /**
     * The type of encryption that will be used on the output that is associated with this entitlement.
     */
    encryption?: pulumi.Input<inputs.MediaconnectFlowEntitlementEncryption>;
    /**
     * An indication of whether the entitlement is enabled.
     */
    entitlementStatus?: pulumi.Input<string>;
    /**
     * The ARN of the flow.
     */
    flowArn: pulumi.Input<string>;
    /**
     * The name of the entitlement.
     */
    name?: pulumi.Input<string>;
    /**
     * The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to
     * create their own flow using your content as the source.
     */
    subscribers: pulumi.Input<pulumi.Input<string>[]>;
}
