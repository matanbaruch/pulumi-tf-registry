// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Mediapackagev2ChannelPolicy extends pulumi.CustomResource {
    /**
     * Get an existing Mediapackagev2ChannelPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Mediapackagev2ChannelPolicyState, opts?: pulumi.CustomResourceOptions): Mediapackagev2ChannelPolicy {
        return new Mediapackagev2ChannelPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/mediapackagev2ChannelPolicy:Mediapackagev2ChannelPolicy';

    /**
     * Returns true if the given object is an instance of Mediapackagev2ChannelPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Mediapackagev2ChannelPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Mediapackagev2ChannelPolicy.__pulumiType;
    }

    public readonly channelGroupName!: pulumi.Output<string>;
    public readonly channelName!: pulumi.Output<string>;
    public readonly policy!: pulumi.Output<string>;

    /**
     * Create a Mediapackagev2ChannelPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Mediapackagev2ChannelPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Mediapackagev2ChannelPolicyArgs | Mediapackagev2ChannelPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Mediapackagev2ChannelPolicyState | undefined;
            resourceInputs["channelGroupName"] = state ? state.channelGroupName : undefined;
            resourceInputs["channelName"] = state ? state.channelName : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
        } else {
            const args = argsOrState as Mediapackagev2ChannelPolicyArgs | undefined;
            if ((!args || args.channelGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelGroupName'");
            }
            if ((!args || args.channelName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelName'");
            }
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            resourceInputs["channelGroupName"] = args ? args.channelGroupName : undefined;
            resourceInputs["channelName"] = args ? args.channelName : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Mediapackagev2ChannelPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Mediapackagev2ChannelPolicy resources.
 */
export interface Mediapackagev2ChannelPolicyState {
    channelGroupName?: pulumi.Input<string>;
    channelName?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Mediapackagev2ChannelPolicy resource.
 */
export interface Mediapackagev2ChannelPolicyArgs {
    channelGroupName: pulumi.Input<string>;
    channelName: pulumi.Input<string>;
    policy: pulumi.Input<string>;
}
