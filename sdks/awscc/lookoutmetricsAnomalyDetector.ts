// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LookoutmetricsAnomalyDetector extends pulumi.CustomResource {
    /**
     * Get an existing LookoutmetricsAnomalyDetector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LookoutmetricsAnomalyDetectorState, opts?: pulumi.CustomResourceOptions): LookoutmetricsAnomalyDetector {
        return new LookoutmetricsAnomalyDetector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lookoutmetricsAnomalyDetector:LookoutmetricsAnomalyDetector';

    /**
     * Returns true if the given object is an instance of LookoutmetricsAnomalyDetector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LookoutmetricsAnomalyDetector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LookoutmetricsAnomalyDetector.__pulumiType;
    }

    /**
     * Configuration options for the AnomalyDetector
     */
    public readonly anomalyDetectorConfig!: pulumi.Output<outputs.LookoutmetricsAnomalyDetectorAnomalyDetectorConfig>;
    /**
     * A description for the AnomalyDetector.
     */
    public readonly anomalyDetectorDescription!: pulumi.Output<string>;
    /**
     * Name for the Amazon Lookout for Metrics Anomaly Detector
     */
    public readonly anomalyDetectorName!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * KMS key used to encrypt the AnomalyDetector data
     */
    public readonly kmsKeyArn!: pulumi.Output<string>;
    /**
     * List of metric sets for anomaly detection
     */
    public readonly metricSetLists!: pulumi.Output<outputs.LookoutmetricsAnomalyDetectorMetricSetList[]>;

    /**
     * Create a LookoutmetricsAnomalyDetector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LookoutmetricsAnomalyDetectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LookoutmetricsAnomalyDetectorArgs | LookoutmetricsAnomalyDetectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LookoutmetricsAnomalyDetectorState | undefined;
            resourceInputs["anomalyDetectorConfig"] = state ? state.anomalyDetectorConfig : undefined;
            resourceInputs["anomalyDetectorDescription"] = state ? state.anomalyDetectorDescription : undefined;
            resourceInputs["anomalyDetectorName"] = state ? state.anomalyDetectorName : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["metricSetLists"] = state ? state.metricSetLists : undefined;
        } else {
            const args = argsOrState as LookoutmetricsAnomalyDetectorArgs | undefined;
            if ((!args || args.anomalyDetectorConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'anomalyDetectorConfig'");
            }
            if ((!args || args.metricSetLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricSetLists'");
            }
            resourceInputs["anomalyDetectorConfig"] = args ? args.anomalyDetectorConfig : undefined;
            resourceInputs["anomalyDetectorDescription"] = args ? args.anomalyDetectorDescription : undefined;
            resourceInputs["anomalyDetectorName"] = args ? args.anomalyDetectorName : undefined;
            resourceInputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            resourceInputs["metricSetLists"] = args ? args.metricSetLists : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LookoutmetricsAnomalyDetector.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LookoutmetricsAnomalyDetector resources.
 */
export interface LookoutmetricsAnomalyDetectorState {
    /**
     * Configuration options for the AnomalyDetector
     */
    anomalyDetectorConfig?: pulumi.Input<inputs.LookoutmetricsAnomalyDetectorAnomalyDetectorConfig>;
    /**
     * A description for the AnomalyDetector.
     */
    anomalyDetectorDescription?: pulumi.Input<string>;
    /**
     * Name for the Amazon Lookout for Metrics Anomaly Detector
     */
    anomalyDetectorName?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    /**
     * KMS key used to encrypt the AnomalyDetector data
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * List of metric sets for anomaly detection
     */
    metricSetLists?: pulumi.Input<pulumi.Input<inputs.LookoutmetricsAnomalyDetectorMetricSetList>[]>;
}

/**
 * The set of arguments for constructing a LookoutmetricsAnomalyDetector resource.
 */
export interface LookoutmetricsAnomalyDetectorArgs {
    /**
     * Configuration options for the AnomalyDetector
     */
    anomalyDetectorConfig: pulumi.Input<inputs.LookoutmetricsAnomalyDetectorAnomalyDetectorConfig>;
    /**
     * A description for the AnomalyDetector.
     */
    anomalyDetectorDescription?: pulumi.Input<string>;
    /**
     * Name for the Amazon Lookout for Metrics Anomaly Detector
     */
    anomalyDetectorName?: pulumi.Input<string>;
    /**
     * KMS key used to encrypt the AnomalyDetector data
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * List of metric sets for anomaly detection
     */
    metricSetLists: pulumi.Input<pulumi.Input<inputs.LookoutmetricsAnomalyDetectorMetricSetList>[]>;
}
