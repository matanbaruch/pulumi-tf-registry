// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CodedeployApplication extends pulumi.CustomResource {
    /**
     * Get an existing CodedeployApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodedeployApplicationState, opts?: pulumi.CustomResourceOptions): CodedeployApplication {
        return new CodedeployApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/codedeployApplication:CodedeployApplication';

    /**
     * Returns true if the given object is an instance of CodedeployApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CodedeployApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodedeployApplication.__pulumiType;
    }

    /**
     * A name for the application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that
     * ID for the application name.
     */
    public readonly applicationName!: pulumi.Output<string>;
    /**
     * The compute platform that CodeDeploy deploys the application to.
     */
    public readonly computePlatform!: pulumi.Output<string>;
    /**
     * The metadata that you apply to CodeDeploy applications to help you organize and categorize them. Each tag consists of a
     * key and an optional value, both of which you define.
     */
    public readonly tags!: pulumi.Output<outputs.CodedeployApplicationTag[]>;

    /**
     * Create a CodedeployApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CodedeployApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodedeployApplicationArgs | CodedeployApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodedeployApplicationState | undefined;
            resourceInputs["applicationName"] = state ? state.applicationName : undefined;
            resourceInputs["computePlatform"] = state ? state.computePlatform : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CodedeployApplicationArgs | undefined;
            resourceInputs["applicationName"] = args ? args.applicationName : undefined;
            resourceInputs["computePlatform"] = args ? args.computePlatform : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodedeployApplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CodedeployApplication resources.
 */
export interface CodedeployApplicationState {
    /**
     * A name for the application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that
     * ID for the application name.
     */
    applicationName?: pulumi.Input<string>;
    /**
     * The compute platform that CodeDeploy deploys the application to.
     */
    computePlatform?: pulumi.Input<string>;
    /**
     * The metadata that you apply to CodeDeploy applications to help you organize and categorize them. Each tag consists of a
     * key and an optional value, both of which you define.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CodedeployApplicationTag>[]>;
}

/**
 * The set of arguments for constructing a CodedeployApplication resource.
 */
export interface CodedeployApplicationArgs {
    /**
     * A name for the application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that
     * ID for the application name.
     */
    applicationName?: pulumi.Input<string>;
    /**
     * The compute platform that CodeDeploy deploys the application to.
     */
    computePlatform?: pulumi.Input<string>;
    /**
     * The metadata that you apply to CodeDeploy applications to help you organize and categorize them. Each tag consists of a
     * key and an optional value, both of which you define.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CodedeployApplicationTag>[]>;
}
