// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IotsitewiseProject extends pulumi.CustomResource {
    /**
     * Get an existing IotsitewiseProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotsitewiseProjectState, opts?: pulumi.CustomResourceOptions): IotsitewiseProject {
        return new IotsitewiseProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/iotsitewiseProject:IotsitewiseProject';

    /**
     * Returns true if the given object is an instance of IotsitewiseProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotsitewiseProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotsitewiseProject.__pulumiType;
    }

    /**
     * The IDs of the assets to be associated to the project.
     */
    public readonly assetIds!: pulumi.Output<string[]>;
    /**
     * The ID of the portal in which to create the project.
     */
    public readonly portalId!: pulumi.Output<string>;
    /**
     * The ARN of the project.
     */
    public /*out*/ readonly projectArn!: pulumi.Output<string>;
    /**
     * A description for the project.
     */
    public readonly projectDescription!: pulumi.Output<string>;
    /**
     * The ID of the project.
     */
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    /**
     * A friendly name for the project.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * A list of key-value pairs that contain metadata for the project.
     */
    public readonly tags!: pulumi.Output<outputs.IotsitewiseProjectTag[]>;

    /**
     * Create a IotsitewiseProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IotsitewiseProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotsitewiseProjectArgs | IotsitewiseProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotsitewiseProjectState | undefined;
            resourceInputs["assetIds"] = state ? state.assetIds : undefined;
            resourceInputs["portalId"] = state ? state.portalId : undefined;
            resourceInputs["projectArn"] = state ? state.projectArn : undefined;
            resourceInputs["projectDescription"] = state ? state.projectDescription : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as IotsitewiseProjectArgs | undefined;
            if ((!args || args.portalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portalId'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            resourceInputs["assetIds"] = args ? args.assetIds : undefined;
            resourceInputs["portalId"] = args ? args.portalId : undefined;
            resourceInputs["projectDescription"] = args ? args.projectDescription : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["projectArn"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IotsitewiseProject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IotsitewiseProject resources.
 */
export interface IotsitewiseProjectState {
    /**
     * The IDs of the assets to be associated to the project.
     */
    assetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the portal in which to create the project.
     */
    portalId?: pulumi.Input<string>;
    /**
     * The ARN of the project.
     */
    projectArn?: pulumi.Input<string>;
    /**
     * A description for the project.
     */
    projectDescription?: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * A friendly name for the project.
     */
    projectName?: pulumi.Input<string>;
    /**
     * A list of key-value pairs that contain metadata for the project.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.IotsitewiseProjectTag>[]>;
}

/**
 * The set of arguments for constructing a IotsitewiseProject resource.
 */
export interface IotsitewiseProjectArgs {
    /**
     * The IDs of the assets to be associated to the project.
     */
    assetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the portal in which to create the project.
     */
    portalId: pulumi.Input<string>;
    /**
     * A description for the project.
     */
    projectDescription?: pulumi.Input<string>;
    /**
     * A friendly name for the project.
     */
    projectName: pulumi.Input<string>;
    /**
     * A list of key-value pairs that contain metadata for the project.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.IotsitewiseProjectTag>[]>;
}
