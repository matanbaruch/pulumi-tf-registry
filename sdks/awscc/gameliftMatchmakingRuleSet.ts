// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GameliftMatchmakingRuleSet extends pulumi.CustomResource {
    /**
     * Get an existing GameliftMatchmakingRuleSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GameliftMatchmakingRuleSetState, opts?: pulumi.CustomResourceOptions): GameliftMatchmakingRuleSet {
        return new GameliftMatchmakingRuleSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/gameliftMatchmakingRuleSet:GameliftMatchmakingRuleSet';

    /**
     * Returns true if the given object is an instance of GameliftMatchmakingRuleSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GameliftMatchmakingRuleSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GameliftMatchmakingRuleSet.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift matchmaking rule set resource and uniquely
     * identifies it.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * A unique identifier for the matchmaking rule set.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A collection of matchmaking rules, formatted as a JSON string.
     */
    public readonly ruleSetBody!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.GameliftMatchmakingRuleSetTag[]>;

    /**
     * Create a GameliftMatchmakingRuleSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GameliftMatchmakingRuleSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GameliftMatchmakingRuleSetArgs | GameliftMatchmakingRuleSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GameliftMatchmakingRuleSetState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ruleSetBody"] = state ? state.ruleSetBody : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as GameliftMatchmakingRuleSetArgs | undefined;
            if ((!args || args.ruleSetBody === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleSetBody'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ruleSetBody"] = args ? args.ruleSetBody : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GameliftMatchmakingRuleSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GameliftMatchmakingRuleSet resources.
 */
export interface GameliftMatchmakingRuleSetState {
    /**
     * The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift matchmaking rule set resource and uniquely
     * identifies it.
     */
    arn?: pulumi.Input<string>;
    /**
     * A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * A unique identifier for the matchmaking rule set.
     */
    name?: pulumi.Input<string>;
    /**
     * A collection of matchmaking rules, formatted as a JSON string.
     */
    ruleSetBody?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.GameliftMatchmakingRuleSetTag>[]>;
}

/**
 * The set of arguments for constructing a GameliftMatchmakingRuleSet resource.
 */
export interface GameliftMatchmakingRuleSetArgs {
    /**
     * A unique identifier for the matchmaking rule set.
     */
    name?: pulumi.Input<string>;
    /**
     * A collection of matchmaking rules, formatted as a JSON string.
     */
    ruleSetBody: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.GameliftMatchmakingRuleSetTag>[]>;
}
