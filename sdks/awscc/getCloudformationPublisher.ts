// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCloudformationPublisher(args: GetCloudformationPublisherArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudformationPublisherResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getCloudformationPublisher:getCloudformationPublisher", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudformationPublisher.
 */
export interface GetCloudformationPublisherArgs {
    id: string;
}

/**
 * A collection of values returned by getCloudformationPublisher.
 */
export interface GetCloudformationPublisherResult {
    readonly acceptTermsAndConditions: boolean;
    readonly connectionArn: string;
    readonly id: string;
    readonly identityProvider: string;
    readonly publisherId: string;
    readonly publisherProfile: string;
    readonly publisherStatus: string;
}
export function getCloudformationPublisherOutput(args: GetCloudformationPublisherOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudformationPublisherResult> {
    return pulumi.output(args).apply((a: any) => getCloudformationPublisher(a, opts))
}

/**
 * A collection of arguments for invoking getCloudformationPublisher.
 */
export interface GetCloudformationPublisherOutputArgs {
    id: pulumi.Input<string>;
}
