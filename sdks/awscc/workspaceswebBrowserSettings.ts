// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WorkspaceswebBrowserSettings extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceswebBrowserSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceswebBrowserSettingsState, opts?: pulumi.CustomResourceOptions): WorkspaceswebBrowserSettings {
        return new WorkspaceswebBrowserSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/workspaceswebBrowserSettings:WorkspaceswebBrowserSettings';

    /**
     * Returns true if the given object is an instance of WorkspaceswebBrowserSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspaceswebBrowserSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceswebBrowserSettings.__pulumiType;
    }

    public readonly additionalEncryptionContext!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly associatedPortalArns!: pulumi.Output<string[]>;
    public readonly browserPolicy!: pulumi.Output<string>;
    public /*out*/ readonly browserSettingsArn!: pulumi.Output<string>;
    public readonly customerManagedKey!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.WorkspaceswebBrowserSettingsTag[]>;

    /**
     * Create a WorkspaceswebBrowserSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkspaceswebBrowserSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceswebBrowserSettingsArgs | WorkspaceswebBrowserSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceswebBrowserSettingsState | undefined;
            resourceInputs["additionalEncryptionContext"] = state ? state.additionalEncryptionContext : undefined;
            resourceInputs["associatedPortalArns"] = state ? state.associatedPortalArns : undefined;
            resourceInputs["browserPolicy"] = state ? state.browserPolicy : undefined;
            resourceInputs["browserSettingsArn"] = state ? state.browserSettingsArn : undefined;
            resourceInputs["customerManagedKey"] = state ? state.customerManagedKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as WorkspaceswebBrowserSettingsArgs | undefined;
            resourceInputs["additionalEncryptionContext"] = args ? args.additionalEncryptionContext : undefined;
            resourceInputs["browserPolicy"] = args ? args.browserPolicy : undefined;
            resourceInputs["customerManagedKey"] = args ? args.customerManagedKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["associatedPortalArns"] = undefined /*out*/;
            resourceInputs["browserSettingsArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkspaceswebBrowserSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkspaceswebBrowserSettings resources.
 */
export interface WorkspaceswebBrowserSettingsState {
    additionalEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    associatedPortalArns?: pulumi.Input<pulumi.Input<string>[]>;
    browserPolicy?: pulumi.Input<string>;
    browserSettingsArn?: pulumi.Input<string>;
    customerManagedKey?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.WorkspaceswebBrowserSettingsTag>[]>;
}

/**
 * The set of arguments for constructing a WorkspaceswebBrowserSettings resource.
 */
export interface WorkspaceswebBrowserSettingsArgs {
    additionalEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    browserPolicy?: pulumi.Input<string>;
    customerManagedKey?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.WorkspaceswebBrowserSettingsTag>[]>;
}
