// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class B2biTransformer extends pulumi.CustomResource {
    /**
     * Get an existing B2biTransformer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: B2biTransformerState, opts?: pulumi.CustomResourceOptions): B2biTransformer {
        return new B2biTransformer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/b2biTransformer:B2biTransformer';

    /**
     * Returns true if the given object is an instance of B2biTransformer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is B2biTransformer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === B2biTransformer.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly ediType!: pulumi.Output<outputs.B2biTransformerEdiType>;
    public readonly fileFormat!: pulumi.Output<string>;
    public readonly mappingTemplate!: pulumi.Output<string>;
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly sampleDocument!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.B2biTransformerTag[]>;
    public /*out*/ readonly transformerArn!: pulumi.Output<string>;
    public /*out*/ readonly transformerId!: pulumi.Output<string>;

    /**
     * Create a B2biTransformer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: B2biTransformerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: B2biTransformerArgs | B2biTransformerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as B2biTransformerState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["ediType"] = state ? state.ediType : undefined;
            resourceInputs["fileFormat"] = state ? state.fileFormat : undefined;
            resourceInputs["mappingTemplate"] = state ? state.mappingTemplate : undefined;
            resourceInputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sampleDocument"] = state ? state.sampleDocument : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["transformerArn"] = state ? state.transformerArn : undefined;
            resourceInputs["transformerId"] = state ? state.transformerId : undefined;
        } else {
            const args = argsOrState as B2biTransformerArgs | undefined;
            if ((!args || args.ediType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ediType'");
            }
            if ((!args || args.fileFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileFormat'");
            }
            if ((!args || args.mappingTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mappingTemplate'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            resourceInputs["ediType"] = args ? args.ediType : undefined;
            resourceInputs["fileFormat"] = args ? args.fileFormat : undefined;
            resourceInputs["mappingTemplate"] = args ? args.mappingTemplate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sampleDocument"] = args ? args.sampleDocument : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["transformerArn"] = undefined /*out*/;
            resourceInputs["transformerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(B2biTransformer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering B2biTransformer resources.
 */
export interface B2biTransformerState {
    createdAt?: pulumi.Input<string>;
    ediType?: pulumi.Input<inputs.B2biTransformerEdiType>;
    fileFormat?: pulumi.Input<string>;
    mappingTemplate?: pulumi.Input<string>;
    modifiedAt?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    sampleDocument?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.B2biTransformerTag>[]>;
    transformerArn?: pulumi.Input<string>;
    transformerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a B2biTransformer resource.
 */
export interface B2biTransformerArgs {
    ediType: pulumi.Input<inputs.B2biTransformerEdiType>;
    fileFormat: pulumi.Input<string>;
    mappingTemplate: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    sampleDocument?: pulumi.Input<string>;
    status: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.B2biTransformerTag>[]>;
}
