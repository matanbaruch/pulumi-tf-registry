// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DeadlineMonitor extends pulumi.CustomResource {
    /**
     * Get an existing DeadlineMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeadlineMonitorState, opts?: pulumi.CustomResourceOptions): DeadlineMonitor {
        return new DeadlineMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/deadlineMonitor:DeadlineMonitor';

    /**
     * Returns true if the given object is an instance of DeadlineMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeadlineMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeadlineMonitor.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly identityCenterApplicationArn!: pulumi.Output<string>;
    public readonly identityCenterInstanceArn!: pulumi.Output<string>;
    public /*out*/ readonly monitorId!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly subdomain!: pulumi.Output<string>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a DeadlineMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeadlineMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeadlineMonitorArgs | DeadlineMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeadlineMonitorState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["identityCenterApplicationArn"] = state ? state.identityCenterApplicationArn : undefined;
            resourceInputs["identityCenterInstanceArn"] = state ? state.identityCenterInstanceArn : undefined;
            resourceInputs["monitorId"] = state ? state.monitorId : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["subdomain"] = state ? state.subdomain : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as DeadlineMonitorArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.identityCenterInstanceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityCenterInstanceArn'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.subdomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subdomain'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["identityCenterInstanceArn"] = args ? args.identityCenterInstanceArn : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["subdomain"] = args ? args.subdomain : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["identityCenterApplicationArn"] = undefined /*out*/;
            resourceInputs["monitorId"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeadlineMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DeadlineMonitor resources.
 */
export interface DeadlineMonitorState {
    arn?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    identityCenterApplicationArn?: pulumi.Input<string>;
    identityCenterInstanceArn?: pulumi.Input<string>;
    monitorId?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    subdomain?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeadlineMonitor resource.
 */
export interface DeadlineMonitorArgs {
    displayName: pulumi.Input<string>;
    identityCenterInstanceArn: pulumi.Input<string>;
    roleArn: pulumi.Input<string>;
    subdomain: pulumi.Input<string>;
}
