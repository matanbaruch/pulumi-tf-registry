// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FsxDataRepositoryAssociation extends pulumi.CustomResource {
    /**
     * Get an existing FsxDataRepositoryAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FsxDataRepositoryAssociationState, opts?: pulumi.CustomResourceOptions): FsxDataRepositoryAssociation {
        return new FsxDataRepositoryAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/fsxDataRepositoryAssociation:FsxDataRepositoryAssociation';

    /**
     * Returns true if the given object is an instance of FsxDataRepositoryAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FsxDataRepositoryAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FsxDataRepositoryAssociation.__pulumiType;
    }

    public /*out*/ readonly associationId!: pulumi.Output<string>;
    /**
     * A boolean flag indicating whether an import data repository task to import metadata should run after the data repository
     * association is created. The task runs if this flag is set to ``true``.
     */
    public readonly batchImportMetaDataOnCreate!: pulumi.Output<boolean>;
    /**
     * The path to the Amazon S3 data repository that will be linked to the file system. The path can be an S3 bucket or prefix
     * in the format ``s3://myBucket/myPrefix/``. This path specifies where in the S3 data repository files will be imported
     * from or exported to.
     */
    public readonly dataRepositoryPath!: pulumi.Output<string>;
    /**
     * The ID of the file system on which the data repository association is configured.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * A path on the Amazon FSx for Lustre file system that points to a high-level directory (such as ``/ns1/``) or
     * subdirectory (such as ``/ns1/subdir/``) that will be mapped 1-1 with ``DataRepositoryPath``. The leading forward slash
     * in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a
     * data repository is associated with file system path ``/ns1/``, then you cannot link another data repository with file
     * system path ``/ns1/ns2``. This path specifies where in your file system files will be exported from or imported to. This
     * file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
     * If you specify only a forward slash (``/``) as the file system path, you can link only one data repository to the file
     * system. You can only specify "/" as the file system path for the first data repository associated with a file system.
     */
    public readonly fileSystemPath!: pulumi.Output<string>;
    /**
     * For files imported from a data repository, this value determines the stripe count and maximum amount of data per file
     * (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is
     * limited by the total number of disks that make up the file system or cache. The default chunk size is 1,024 MiB (1 GiB)
     * and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
     */
    public readonly importedFileChunkSize!: pulumi.Output<number>;
    public /*out*/ readonly resourceArn!: pulumi.Output<string>;
    /**
     * The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository
     * association. The configuration defines which file events (new, changed, or deleted files or directories) are
     * automatically imported from the linked data repository to the file system or automatically exported from the file system
     * to the data repository.
     */
    public readonly s3!: pulumi.Output<outputs.FsxDataRepositoryAssociationS3>;
    /**
     * An array of key-value pairs to apply to this resource. For more information, see
     * [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
     */
    public readonly tags!: pulumi.Output<outputs.FsxDataRepositoryAssociationTag[]>;

    /**
     * Create a FsxDataRepositoryAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FsxDataRepositoryAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FsxDataRepositoryAssociationArgs | FsxDataRepositoryAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FsxDataRepositoryAssociationState | undefined;
            resourceInputs["associationId"] = state ? state.associationId : undefined;
            resourceInputs["batchImportMetaDataOnCreate"] = state ? state.batchImportMetaDataOnCreate : undefined;
            resourceInputs["dataRepositoryPath"] = state ? state.dataRepositoryPath : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["fileSystemPath"] = state ? state.fileSystemPath : undefined;
            resourceInputs["importedFileChunkSize"] = state ? state.importedFileChunkSize : undefined;
            resourceInputs["resourceArn"] = state ? state.resourceArn : undefined;
            resourceInputs["s3"] = state ? state.s3 : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as FsxDataRepositoryAssociationArgs | undefined;
            if ((!args || args.dataRepositoryPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataRepositoryPath'");
            }
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.fileSystemPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemPath'");
            }
            resourceInputs["batchImportMetaDataOnCreate"] = args ? args.batchImportMetaDataOnCreate : undefined;
            resourceInputs["dataRepositoryPath"] = args ? args.dataRepositoryPath : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["fileSystemPath"] = args ? args.fileSystemPath : undefined;
            resourceInputs["importedFileChunkSize"] = args ? args.importedFileChunkSize : undefined;
            resourceInputs["s3"] = args ? args.s3 : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["associationId"] = undefined /*out*/;
            resourceInputs["resourceArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FsxDataRepositoryAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FsxDataRepositoryAssociation resources.
 */
export interface FsxDataRepositoryAssociationState {
    associationId?: pulumi.Input<string>;
    /**
     * A boolean flag indicating whether an import data repository task to import metadata should run after the data repository
     * association is created. The task runs if this flag is set to ``true``.
     */
    batchImportMetaDataOnCreate?: pulumi.Input<boolean>;
    /**
     * The path to the Amazon S3 data repository that will be linked to the file system. The path can be an S3 bucket or prefix
     * in the format ``s3://myBucket/myPrefix/``. This path specifies where in the S3 data repository files will be imported
     * from or exported to.
     */
    dataRepositoryPath?: pulumi.Input<string>;
    /**
     * The ID of the file system on which the data repository association is configured.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * A path on the Amazon FSx for Lustre file system that points to a high-level directory (such as ``/ns1/``) or
     * subdirectory (such as ``/ns1/subdir/``) that will be mapped 1-1 with ``DataRepositoryPath``. The leading forward slash
     * in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a
     * data repository is associated with file system path ``/ns1/``, then you cannot link another data repository with file
     * system path ``/ns1/ns2``. This path specifies where in your file system files will be exported from or imported to. This
     * file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
     * If you specify only a forward slash (``/``) as the file system path, you can link only one data repository to the file
     * system. You can only specify "/" as the file system path for the first data repository associated with a file system.
     */
    fileSystemPath?: pulumi.Input<string>;
    /**
     * For files imported from a data repository, this value determines the stripe count and maximum amount of data per file
     * (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is
     * limited by the total number of disks that make up the file system or cache. The default chunk size is 1,024 MiB (1 GiB)
     * and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
     */
    importedFileChunkSize?: pulumi.Input<number>;
    resourceArn?: pulumi.Input<string>;
    /**
     * The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository
     * association. The configuration defines which file events (new, changed, or deleted files or directories) are
     * automatically imported from the linked data repository to the file system or automatically exported from the file system
     * to the data repository.
     */
    s3?: pulumi.Input<inputs.FsxDataRepositoryAssociationS3>;
    /**
     * An array of key-value pairs to apply to this resource. For more information, see
     * [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
     */
    tags?: pulumi.Input<pulumi.Input<inputs.FsxDataRepositoryAssociationTag>[]>;
}

/**
 * The set of arguments for constructing a FsxDataRepositoryAssociation resource.
 */
export interface FsxDataRepositoryAssociationArgs {
    /**
     * A boolean flag indicating whether an import data repository task to import metadata should run after the data repository
     * association is created. The task runs if this flag is set to ``true``.
     */
    batchImportMetaDataOnCreate?: pulumi.Input<boolean>;
    /**
     * The path to the Amazon S3 data repository that will be linked to the file system. The path can be an S3 bucket or prefix
     * in the format ``s3://myBucket/myPrefix/``. This path specifies where in the S3 data repository files will be imported
     * from or exported to.
     */
    dataRepositoryPath: pulumi.Input<string>;
    /**
     * The ID of the file system on which the data repository association is configured.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * A path on the Amazon FSx for Lustre file system that points to a high-level directory (such as ``/ns1/``) or
     * subdirectory (such as ``/ns1/subdir/``) that will be mapped 1-1 with ``DataRepositoryPath``. The leading forward slash
     * in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a
     * data repository is associated with file system path ``/ns1/``, then you cannot link another data repository with file
     * system path ``/ns1/ns2``. This path specifies where in your file system files will be exported from or imported to. This
     * file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
     * If you specify only a forward slash (``/``) as the file system path, you can link only one data repository to the file
     * system. You can only specify "/" as the file system path for the first data repository associated with a file system.
     */
    fileSystemPath: pulumi.Input<string>;
    /**
     * For files imported from a data repository, this value determines the stripe count and maximum amount of data per file
     * (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is
     * limited by the total number of disks that make up the file system or cache. The default chunk size is 1,024 MiB (1 GiB)
     * and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
     */
    importedFileChunkSize?: pulumi.Input<number>;
    /**
     * The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository
     * association. The configuration defines which file events (new, changed, or deleted files or directories) are
     * automatically imported from the linked data repository to the file system or automatically exported from the file system
     * to the data repository.
     */
    s3?: pulumi.Input<inputs.FsxDataRepositoryAssociationS3>;
    /**
     * An array of key-value pairs to apply to this resource. For more information, see
     * [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
     */
    tags?: pulumi.Input<pulumi.Input<inputs.FsxDataRepositoryAssociationTag>[]>;
}
