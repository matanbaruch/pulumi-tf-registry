// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConfigConfigurationAggregator extends pulumi.CustomResource {
    /**
     * Get an existing ConfigConfigurationAggregator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigConfigurationAggregatorState, opts?: pulumi.CustomResourceOptions): ConfigConfigurationAggregator {
        return new ConfigConfigurationAggregator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/configConfigurationAggregator:ConfigConfigurationAggregator';

    /**
     * Returns true if the given object is an instance of ConfigConfigurationAggregator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigConfigurationAggregator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigConfigurationAggregator.__pulumiType;
    }

    public readonly accountAggregationSources!: pulumi.Output<outputs.ConfigConfigurationAggregatorAccountAggregationSource[]>;
    /**
     * The Amazon Resource Name (ARN) of the aggregator.
     */
    public /*out*/ readonly configurationAggregatorArn!: pulumi.Output<string>;
    /**
     * The name of the aggregator.
     */
    public readonly configurationAggregatorName!: pulumi.Output<string>;
    public readonly organizationAggregationSource!: pulumi.Output<outputs.ConfigConfigurationAggregatorOrganizationAggregationSource>;
    /**
     * The tags for the configuration aggregator.
     */
    public readonly tags!: pulumi.Output<outputs.ConfigConfigurationAggregatorTag[]>;

    /**
     * Create a ConfigConfigurationAggregator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ConfigConfigurationAggregatorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigConfigurationAggregatorArgs | ConfigConfigurationAggregatorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigConfigurationAggregatorState | undefined;
            resourceInputs["accountAggregationSources"] = state ? state.accountAggregationSources : undefined;
            resourceInputs["configurationAggregatorArn"] = state ? state.configurationAggregatorArn : undefined;
            resourceInputs["configurationAggregatorName"] = state ? state.configurationAggregatorName : undefined;
            resourceInputs["organizationAggregationSource"] = state ? state.organizationAggregationSource : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ConfigConfigurationAggregatorArgs | undefined;
            resourceInputs["accountAggregationSources"] = args ? args.accountAggregationSources : undefined;
            resourceInputs["configurationAggregatorName"] = args ? args.configurationAggregatorName : undefined;
            resourceInputs["organizationAggregationSource"] = args ? args.organizationAggregationSource : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["configurationAggregatorArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigConfigurationAggregator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigConfigurationAggregator resources.
 */
export interface ConfigConfigurationAggregatorState {
    accountAggregationSources?: pulumi.Input<pulumi.Input<inputs.ConfigConfigurationAggregatorAccountAggregationSource>[]>;
    /**
     * The Amazon Resource Name (ARN) of the aggregator.
     */
    configurationAggregatorArn?: pulumi.Input<string>;
    /**
     * The name of the aggregator.
     */
    configurationAggregatorName?: pulumi.Input<string>;
    organizationAggregationSource?: pulumi.Input<inputs.ConfigConfigurationAggregatorOrganizationAggregationSource>;
    /**
     * The tags for the configuration aggregator.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ConfigConfigurationAggregatorTag>[]>;
}

/**
 * The set of arguments for constructing a ConfigConfigurationAggregator resource.
 */
export interface ConfigConfigurationAggregatorArgs {
    accountAggregationSources?: pulumi.Input<pulumi.Input<inputs.ConfigConfigurationAggregatorAccountAggregationSource>[]>;
    /**
     * The name of the aggregator.
     */
    configurationAggregatorName?: pulumi.Input<string>;
    organizationAggregationSource?: pulumi.Input<inputs.ConfigConfigurationAggregatorOrganizationAggregationSource>;
    /**
     * The tags for the configuration aggregator.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ConfigConfigurationAggregatorTag>[]>;
}
