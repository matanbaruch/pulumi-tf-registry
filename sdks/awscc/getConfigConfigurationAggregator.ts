// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getConfigConfigurationAggregator(args: GetConfigConfigurationAggregatorArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigConfigurationAggregatorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getConfigConfigurationAggregator:getConfigConfigurationAggregator", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getConfigConfigurationAggregator.
 */
export interface GetConfigConfigurationAggregatorArgs {
    id: string;
}

/**
 * A collection of values returned by getConfigConfigurationAggregator.
 */
export interface GetConfigConfigurationAggregatorResult {
    readonly accountAggregationSources: outputs.GetConfigConfigurationAggregatorAccountAggregationSource[];
    readonly configurationAggregatorArn: string;
    readonly configurationAggregatorName: string;
    readonly id: string;
    readonly organizationAggregationSource: outputs.GetConfigConfigurationAggregatorOrganizationAggregationSource;
    readonly tags: outputs.GetConfigConfigurationAggregatorTag[];
}
export function getConfigConfigurationAggregatorOutput(args: GetConfigConfigurationAggregatorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConfigConfigurationAggregatorResult> {
    return pulumi.output(args).apply((a: any) => getConfigConfigurationAggregator(a, opts))
}

/**
 * A collection of arguments for invoking getConfigConfigurationAggregator.
 */
export interface GetConfigConfigurationAggregatorOutputArgs {
    id: pulumi.Input<string>;
}
