// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2CapacityReservationFleet extends pulumi.CustomResource {
    /**
     * Get an existing Ec2CapacityReservationFleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2CapacityReservationFleetState, opts?: pulumi.CustomResourceOptions): Ec2CapacityReservationFleet {
        return new Ec2CapacityReservationFleet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/ec2CapacityReservationFleet:Ec2CapacityReservationFleet';

    /**
     * Returns true if the given object is an instance of Ec2CapacityReservationFleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2CapacityReservationFleet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2CapacityReservationFleet.__pulumiType;
    }

    public readonly allocationStrategy!: pulumi.Output<string>;
    public /*out*/ readonly capacityReservationFleetId!: pulumi.Output<string>;
    public readonly endDate!: pulumi.Output<string>;
    public readonly instanceMatchCriteria!: pulumi.Output<string>;
    public readonly instanceTypeSpecifications!: pulumi.Output<outputs.Ec2CapacityReservationFleetInstanceTypeSpecification[]>;
    public readonly noRemoveEndDate!: pulumi.Output<boolean>;
    public readonly removeEndDate!: pulumi.Output<boolean>;
    public readonly tagSpecifications!: pulumi.Output<outputs.Ec2CapacityReservationFleetTagSpecification[]>;
    public readonly tenancy!: pulumi.Output<string>;
    public readonly totalTargetCapacity!: pulumi.Output<number>;

    /**
     * Create a Ec2CapacityReservationFleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Ec2CapacityReservationFleetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2CapacityReservationFleetArgs | Ec2CapacityReservationFleetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2CapacityReservationFleetState | undefined;
            resourceInputs["allocationStrategy"] = state ? state.allocationStrategy : undefined;
            resourceInputs["capacityReservationFleetId"] = state ? state.capacityReservationFleetId : undefined;
            resourceInputs["endDate"] = state ? state.endDate : undefined;
            resourceInputs["instanceMatchCriteria"] = state ? state.instanceMatchCriteria : undefined;
            resourceInputs["instanceTypeSpecifications"] = state ? state.instanceTypeSpecifications : undefined;
            resourceInputs["noRemoveEndDate"] = state ? state.noRemoveEndDate : undefined;
            resourceInputs["removeEndDate"] = state ? state.removeEndDate : undefined;
            resourceInputs["tagSpecifications"] = state ? state.tagSpecifications : undefined;
            resourceInputs["tenancy"] = state ? state.tenancy : undefined;
            resourceInputs["totalTargetCapacity"] = state ? state.totalTargetCapacity : undefined;
        } else {
            const args = argsOrState as Ec2CapacityReservationFleetArgs | undefined;
            resourceInputs["allocationStrategy"] = args ? args.allocationStrategy : undefined;
            resourceInputs["endDate"] = args ? args.endDate : undefined;
            resourceInputs["instanceMatchCriteria"] = args ? args.instanceMatchCriteria : undefined;
            resourceInputs["instanceTypeSpecifications"] = args ? args.instanceTypeSpecifications : undefined;
            resourceInputs["noRemoveEndDate"] = args ? args.noRemoveEndDate : undefined;
            resourceInputs["removeEndDate"] = args ? args.removeEndDate : undefined;
            resourceInputs["tagSpecifications"] = args ? args.tagSpecifications : undefined;
            resourceInputs["tenancy"] = args ? args.tenancy : undefined;
            resourceInputs["totalTargetCapacity"] = args ? args.totalTargetCapacity : undefined;
            resourceInputs["capacityReservationFleetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2CapacityReservationFleet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2CapacityReservationFleet resources.
 */
export interface Ec2CapacityReservationFleetState {
    allocationStrategy?: pulumi.Input<string>;
    capacityReservationFleetId?: pulumi.Input<string>;
    endDate?: pulumi.Input<string>;
    instanceMatchCriteria?: pulumi.Input<string>;
    instanceTypeSpecifications?: pulumi.Input<pulumi.Input<inputs.Ec2CapacityReservationFleetInstanceTypeSpecification>[]>;
    noRemoveEndDate?: pulumi.Input<boolean>;
    removeEndDate?: pulumi.Input<boolean>;
    tagSpecifications?: pulumi.Input<pulumi.Input<inputs.Ec2CapacityReservationFleetTagSpecification>[]>;
    tenancy?: pulumi.Input<string>;
    totalTargetCapacity?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Ec2CapacityReservationFleet resource.
 */
export interface Ec2CapacityReservationFleetArgs {
    allocationStrategy?: pulumi.Input<string>;
    endDate?: pulumi.Input<string>;
    instanceMatchCriteria?: pulumi.Input<string>;
    instanceTypeSpecifications?: pulumi.Input<pulumi.Input<inputs.Ec2CapacityReservationFleetInstanceTypeSpecification>[]>;
    noRemoveEndDate?: pulumi.Input<boolean>;
    removeEndDate?: pulumi.Input<boolean>;
    tagSpecifications?: pulumi.Input<pulumi.Input<inputs.Ec2CapacityReservationFleetTagSpecification>[]>;
    tenancy?: pulumi.Input<string>;
    totalTargetCapacity?: pulumi.Input<number>;
}
