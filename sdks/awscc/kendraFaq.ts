// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KendraFaq extends pulumi.CustomResource {
    /**
     * Get an existing KendraFaq resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KendraFaqState, opts?: pulumi.CustomResourceOptions): KendraFaq {
        return new KendraFaq(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/kendraFaq:KendraFaq';

    /**
     * Returns true if the given object is an instance of KendraFaq.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KendraFaq {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KendraFaq.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * FAQ description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Unique ID of the FAQ
     */
    public /*out*/ readonly faqId!: pulumi.Output<string>;
    /**
     * FAQ file format
     */
    public readonly fileFormat!: pulumi.Output<string>;
    /**
     * Index ID
     */
    public readonly indexId!: pulumi.Output<string>;
    /**
     * The code for a language.
     */
    public readonly languageCode!: pulumi.Output<string>;
    /**
     * FAQ name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * FAQ role ARN
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * FAQ S3 path
     */
    public readonly s3Path!: pulumi.Output<outputs.KendraFaqS3Path>;
    /**
     * Tags for labeling the FAQ
     */
    public readonly tags!: pulumi.Output<outputs.KendraFaqTag[]>;

    /**
     * Create a KendraFaq resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KendraFaqArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KendraFaqArgs | KendraFaqState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KendraFaqState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["faqId"] = state ? state.faqId : undefined;
            resourceInputs["fileFormat"] = state ? state.fileFormat : undefined;
            resourceInputs["indexId"] = state ? state.indexId : undefined;
            resourceInputs["languageCode"] = state ? state.languageCode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["s3Path"] = state ? state.s3Path : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as KendraFaqArgs | undefined;
            if ((!args || args.indexId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexId'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.s3Path === undefined) && !opts.urn) {
                throw new Error("Missing required property 's3Path'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fileFormat"] = args ? args.fileFormat : undefined;
            resourceInputs["indexId"] = args ? args.indexId : undefined;
            resourceInputs["languageCode"] = args ? args.languageCode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["s3Path"] = args ? args.s3Path : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["faqId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KendraFaq.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KendraFaq resources.
 */
export interface KendraFaqState {
    arn?: pulumi.Input<string>;
    /**
     * FAQ description
     */
    description?: pulumi.Input<string>;
    /**
     * Unique ID of the FAQ
     */
    faqId?: pulumi.Input<string>;
    /**
     * FAQ file format
     */
    fileFormat?: pulumi.Input<string>;
    /**
     * Index ID
     */
    indexId?: pulumi.Input<string>;
    /**
     * The code for a language.
     */
    languageCode?: pulumi.Input<string>;
    /**
     * FAQ name
     */
    name?: pulumi.Input<string>;
    /**
     * FAQ role ARN
     */
    roleArn?: pulumi.Input<string>;
    /**
     * FAQ S3 path
     */
    s3Path?: pulumi.Input<inputs.KendraFaqS3Path>;
    /**
     * Tags for labeling the FAQ
     */
    tags?: pulumi.Input<pulumi.Input<inputs.KendraFaqTag>[]>;
}

/**
 * The set of arguments for constructing a KendraFaq resource.
 */
export interface KendraFaqArgs {
    /**
     * FAQ description
     */
    description?: pulumi.Input<string>;
    /**
     * FAQ file format
     */
    fileFormat?: pulumi.Input<string>;
    /**
     * Index ID
     */
    indexId: pulumi.Input<string>;
    /**
     * The code for a language.
     */
    languageCode?: pulumi.Input<string>;
    /**
     * FAQ name
     */
    name?: pulumi.Input<string>;
    /**
     * FAQ role ARN
     */
    roleArn: pulumi.Input<string>;
    /**
     * FAQ S3 path
     */
    s3Path: pulumi.Input<inputs.KendraFaqS3Path>;
    /**
     * Tags for labeling the FAQ
     */
    tags?: pulumi.Input<pulumi.Input<inputs.KendraFaqTag>[]>;
}
