// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkfirewallFirewall extends pulumi.CustomResource {
    /**
     * Get an existing NetworkfirewallFirewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkfirewallFirewallState, opts?: pulumi.CustomResourceOptions): NetworkfirewallFirewall {
        return new NetworkfirewallFirewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/networkfirewallFirewall:NetworkfirewallFirewall';

    /**
     * Returns true if the given object is an instance of NetworkfirewallFirewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkfirewallFirewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkfirewallFirewall.__pulumiType;
    }

    public readonly deleteProtection!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly endpointIds!: pulumi.Output<string[]>;
    /**
     * A resource ARN.
     */
    public /*out*/ readonly firewallArn!: pulumi.Output<string>;
    public /*out*/ readonly firewallId!: pulumi.Output<string>;
    public readonly firewallName!: pulumi.Output<string>;
    /**
     * A resource ARN.
     */
    public readonly firewallPolicyArn!: pulumi.Output<string>;
    public readonly firewallPolicyChangeProtection!: pulumi.Output<boolean>;
    public readonly subnetChangeProtection!: pulumi.Output<boolean>;
    public readonly subnetMappings!: pulumi.Output<outputs.NetworkfirewallFirewallSubnetMapping[]>;
    public readonly tags!: pulumi.Output<outputs.NetworkfirewallFirewallTag[]>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a NetworkfirewallFirewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkfirewallFirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkfirewallFirewallArgs | NetworkfirewallFirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkfirewallFirewallState | undefined;
            resourceInputs["deleteProtection"] = state ? state.deleteProtection : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endpointIds"] = state ? state.endpointIds : undefined;
            resourceInputs["firewallArn"] = state ? state.firewallArn : undefined;
            resourceInputs["firewallId"] = state ? state.firewallId : undefined;
            resourceInputs["firewallName"] = state ? state.firewallName : undefined;
            resourceInputs["firewallPolicyArn"] = state ? state.firewallPolicyArn : undefined;
            resourceInputs["firewallPolicyChangeProtection"] = state ? state.firewallPolicyChangeProtection : undefined;
            resourceInputs["subnetChangeProtection"] = state ? state.subnetChangeProtection : undefined;
            resourceInputs["subnetMappings"] = state ? state.subnetMappings : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as NetworkfirewallFirewallArgs | undefined;
            if ((!args || args.firewallName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallName'");
            }
            if ((!args || args.firewallPolicyArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallPolicyArn'");
            }
            if ((!args || args.subnetMappings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetMappings'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["deleteProtection"] = args ? args.deleteProtection : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["firewallName"] = args ? args.firewallName : undefined;
            resourceInputs["firewallPolicyArn"] = args ? args.firewallPolicyArn : undefined;
            resourceInputs["firewallPolicyChangeProtection"] = args ? args.firewallPolicyChangeProtection : undefined;
            resourceInputs["subnetChangeProtection"] = args ? args.subnetChangeProtection : undefined;
            resourceInputs["subnetMappings"] = args ? args.subnetMappings : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["endpointIds"] = undefined /*out*/;
            resourceInputs["firewallArn"] = undefined /*out*/;
            resourceInputs["firewallId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkfirewallFirewall.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkfirewallFirewall resources.
 */
export interface NetworkfirewallFirewallState {
    deleteProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    endpointIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A resource ARN.
     */
    firewallArn?: pulumi.Input<string>;
    firewallId?: pulumi.Input<string>;
    firewallName?: pulumi.Input<string>;
    /**
     * A resource ARN.
     */
    firewallPolicyArn?: pulumi.Input<string>;
    firewallPolicyChangeProtection?: pulumi.Input<boolean>;
    subnetChangeProtection?: pulumi.Input<boolean>;
    subnetMappings?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallFirewallSubnetMapping>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallFirewallTag>[]>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkfirewallFirewall resource.
 */
export interface NetworkfirewallFirewallArgs {
    deleteProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    firewallName: pulumi.Input<string>;
    /**
     * A resource ARN.
     */
    firewallPolicyArn: pulumi.Input<string>;
    firewallPolicyChangeProtection?: pulumi.Input<boolean>;
    subnetChangeProtection?: pulumi.Input<boolean>;
    subnetMappings: pulumi.Input<pulumi.Input<inputs.NetworkfirewallFirewallSubnetMapping>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallFirewallTag>[]>;
    vpcId: pulumi.Input<string>;
}
