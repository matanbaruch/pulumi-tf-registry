// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEc2Ipam(args: GetEc2IpamArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2IpamResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEc2Ipam:getEc2Ipam", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2Ipam.
 */
export interface GetEc2IpamArgs {
    id: string;
}

/**
 * A collection of values returned by getEc2Ipam.
 */
export interface GetEc2IpamResult {
    readonly arn: string;
    readonly defaultResourceDiscoveryAssociationId: string;
    readonly defaultResourceDiscoveryId: string;
    readonly description: string;
    readonly enablePrivateGua: boolean;
    readonly id: string;
    readonly ipamId: string;
    readonly operatingRegions: outputs.GetEc2IpamOperatingRegion[];
    readonly privateDefaultScopeId: string;
    readonly publicDefaultScopeId: string;
    readonly resourceDiscoveryAssociationCount: number;
    readonly scopeCount: number;
    readonly tags: outputs.GetEc2IpamTag[];
    readonly tier: string;
}
export function getEc2IpamOutput(args: GetEc2IpamOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2IpamResult> {
    return pulumi.output(args).apply((a: any) => getEc2Ipam(a, opts))
}

/**
 * A collection of arguments for invoking getEc2Ipam.
 */
export interface GetEc2IpamOutputArgs {
    id: pulumi.Input<string>;
}
