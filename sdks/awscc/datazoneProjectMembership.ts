// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatazoneProjectMembership extends pulumi.CustomResource {
    /**
     * Get an existing DatazoneProjectMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatazoneProjectMembershipState, opts?: pulumi.CustomResourceOptions): DatazoneProjectMembership {
        return new DatazoneProjectMembership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/datazoneProjectMembership:DatazoneProjectMembership';

    /**
     * Returns true if the given object is an instance of DatazoneProjectMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatazoneProjectMembership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatazoneProjectMembership.__pulumiType;
    }

    public readonly designation!: pulumi.Output<string>;
    public readonly domainIdentifier!: pulumi.Output<string>;
    public readonly member!: pulumi.Output<outputs.DatazoneProjectMembershipMember>;
    public readonly projectIdentifier!: pulumi.Output<string>;

    /**
     * Create a DatazoneProjectMembership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatazoneProjectMembershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatazoneProjectMembershipArgs | DatazoneProjectMembershipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatazoneProjectMembershipState | undefined;
            resourceInputs["designation"] = state ? state.designation : undefined;
            resourceInputs["domainIdentifier"] = state ? state.domainIdentifier : undefined;
            resourceInputs["member"] = state ? state.member : undefined;
            resourceInputs["projectIdentifier"] = state ? state.projectIdentifier : undefined;
        } else {
            const args = argsOrState as DatazoneProjectMembershipArgs | undefined;
            if ((!args || args.designation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'designation'");
            }
            if ((!args || args.domainIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if ((!args || args.member === undefined) && !opts.urn) {
                throw new Error("Missing required property 'member'");
            }
            if ((!args || args.projectIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectIdentifier'");
            }
            resourceInputs["designation"] = args ? args.designation : undefined;
            resourceInputs["domainIdentifier"] = args ? args.domainIdentifier : undefined;
            resourceInputs["member"] = args ? args.member : undefined;
            resourceInputs["projectIdentifier"] = args ? args.projectIdentifier : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatazoneProjectMembership.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatazoneProjectMembership resources.
 */
export interface DatazoneProjectMembershipState {
    designation?: pulumi.Input<string>;
    domainIdentifier?: pulumi.Input<string>;
    member?: pulumi.Input<inputs.DatazoneProjectMembershipMember>;
    projectIdentifier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatazoneProjectMembership resource.
 */
export interface DatazoneProjectMembershipArgs {
    designation: pulumi.Input<string>;
    domainIdentifier: pulumi.Input<string>;
    member: pulumi.Input<inputs.DatazoneProjectMembershipMember>;
    projectIdentifier: pulumi.Input<string>;
}
