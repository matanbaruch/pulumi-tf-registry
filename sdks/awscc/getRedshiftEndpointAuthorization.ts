// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getRedshiftEndpointAuthorization(args: GetRedshiftEndpointAuthorizationArgs, opts?: pulumi.InvokeOptions): Promise<GetRedshiftEndpointAuthorizationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getRedshiftEndpointAuthorization:getRedshiftEndpointAuthorization", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRedshiftEndpointAuthorization.
 */
export interface GetRedshiftEndpointAuthorizationArgs {
    id: string;
}

/**
 * A collection of values returned by getRedshiftEndpointAuthorization.
 */
export interface GetRedshiftEndpointAuthorizationResult {
    readonly account: string;
    readonly allowedAllVpCs: boolean;
    readonly allowedVpCs: string[];
    readonly authorizeTime: string;
    readonly clusterIdentifier: string;
    readonly clusterStatus: string;
    readonly endpointCount: number;
    readonly force: boolean;
    readonly grantee: string;
    readonly grantor: string;
    readonly id: string;
    readonly status: string;
    readonly vpcIds: string[];
}
export function getRedshiftEndpointAuthorizationOutput(args: GetRedshiftEndpointAuthorizationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRedshiftEndpointAuthorizationResult> {
    return pulumi.output(args).apply((a: any) => getRedshiftEndpointAuthorization(a, opts))
}

/**
 * A collection of arguments for invoking getRedshiftEndpointAuthorization.
 */
export interface GetRedshiftEndpointAuthorizationOutputArgs {
    id: pulumi.Input<string>;
}
