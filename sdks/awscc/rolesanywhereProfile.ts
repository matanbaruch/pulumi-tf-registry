// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RolesanywhereProfile extends pulumi.CustomResource {
    /**
     * Get an existing RolesanywhereProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RolesanywhereProfileState, opts?: pulumi.CustomResourceOptions): RolesanywhereProfile {
        return new RolesanywhereProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/rolesanywhereProfile:RolesanywhereProfile';

    /**
     * Returns true if the given object is an instance of RolesanywhereProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RolesanywhereProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RolesanywhereProfile.__pulumiType;
    }

    public readonly acceptRoleSessionName!: pulumi.Output<boolean>;
    public readonly attributeMappings!: pulumi.Output<outputs.RolesanywhereProfileAttributeMapping[]>;
    public readonly durationSeconds!: pulumi.Output<number>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly managedPolicyArns!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly profileArn!: pulumi.Output<string>;
    public /*out*/ readonly profileId!: pulumi.Output<string>;
    public readonly requireInstanceProperties!: pulumi.Output<boolean>;
    public readonly roleArns!: pulumi.Output<string[]>;
    public readonly sessionPolicy!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.RolesanywhereProfileTag[]>;

    /**
     * Create a RolesanywhereProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RolesanywhereProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RolesanywhereProfileArgs | RolesanywhereProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RolesanywhereProfileState | undefined;
            resourceInputs["acceptRoleSessionName"] = state ? state.acceptRoleSessionName : undefined;
            resourceInputs["attributeMappings"] = state ? state.attributeMappings : undefined;
            resourceInputs["durationSeconds"] = state ? state.durationSeconds : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["managedPolicyArns"] = state ? state.managedPolicyArns : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["profileArn"] = state ? state.profileArn : undefined;
            resourceInputs["profileId"] = state ? state.profileId : undefined;
            resourceInputs["requireInstanceProperties"] = state ? state.requireInstanceProperties : undefined;
            resourceInputs["roleArns"] = state ? state.roleArns : undefined;
            resourceInputs["sessionPolicy"] = state ? state.sessionPolicy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as RolesanywhereProfileArgs | undefined;
            if ((!args || args.roleArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArns'");
            }
            resourceInputs["acceptRoleSessionName"] = args ? args.acceptRoleSessionName : undefined;
            resourceInputs["attributeMappings"] = args ? args.attributeMappings : undefined;
            resourceInputs["durationSeconds"] = args ? args.durationSeconds : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["managedPolicyArns"] = args ? args.managedPolicyArns : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requireInstanceProperties"] = args ? args.requireInstanceProperties : undefined;
            resourceInputs["roleArns"] = args ? args.roleArns : undefined;
            resourceInputs["sessionPolicy"] = args ? args.sessionPolicy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["profileArn"] = undefined /*out*/;
            resourceInputs["profileId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RolesanywhereProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RolesanywhereProfile resources.
 */
export interface RolesanywhereProfileState {
    acceptRoleSessionName?: pulumi.Input<boolean>;
    attributeMappings?: pulumi.Input<pulumi.Input<inputs.RolesanywhereProfileAttributeMapping>[]>;
    durationSeconds?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    managedPolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    profileArn?: pulumi.Input<string>;
    profileId?: pulumi.Input<string>;
    requireInstanceProperties?: pulumi.Input<boolean>;
    roleArns?: pulumi.Input<pulumi.Input<string>[]>;
    sessionPolicy?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.RolesanywhereProfileTag>[]>;
}

/**
 * The set of arguments for constructing a RolesanywhereProfile resource.
 */
export interface RolesanywhereProfileArgs {
    acceptRoleSessionName?: pulumi.Input<boolean>;
    attributeMappings?: pulumi.Input<pulumi.Input<inputs.RolesanywhereProfileAttributeMapping>[]>;
    durationSeconds?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    managedPolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    requireInstanceProperties?: pulumi.Input<boolean>;
    roleArns: pulumi.Input<pulumi.Input<string>[]>;
    sessionPolicy?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.RolesanywhereProfileTag>[]>;
}
