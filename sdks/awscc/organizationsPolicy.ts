// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OrganizationsPolicy extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationsPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationsPolicyState, opts?: pulumi.CustomResourceOptions): OrganizationsPolicy {
        return new OrganizationsPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/organizationsPolicy:OrganizationsPolicy';

    /**
     * Returns true if the given object is an instance of OrganizationsPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationsPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationsPolicy.__pulumiType;
    }

    /**
     * ARN of the Policy
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A boolean value that indicates whether the specified policy is an AWS managed policy. If true, then you can attach the
     * policy to roots, OUs, or accounts, but you cannot edit it.
     */
    public /*out*/ readonly awsManaged!: pulumi.Output<boolean>;
    /**
     * The Policy text content. For AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML
     * format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * Human readable description of the policy
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Name of the Policy
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Id of the Policy
     */
    public /*out*/ readonly policyId!: pulumi.Output<string>;
    /**
     * A list of tags that you want to attach to the newly created policy. For each tag in the list, you must specify both a
     * tag key and a value. You can set the value to an empty string, but you can't set it to null.
     */
    public readonly tags!: pulumi.Output<outputs.OrganizationsPolicyTag[]>;
    /**
     * List of unique identifiers (IDs) of the root, OU, or account that you want to attach the policy to
     */
    public readonly targetIds!: pulumi.Output<string[]>;
    /**
     * The type of policy to create. You can specify one of the following values: AISERVICES_OPT_OUT_POLICY, BACKUP_POLICY,
     * SERVICE_CONTROL_POLICY, TAG_POLICY
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a OrganizationsPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationsPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationsPolicyArgs | OrganizationsPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationsPolicyState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["awsManaged"] = state ? state.awsManaged : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetIds"] = state ? state.targetIds : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as OrganizationsPolicyArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetIds"] = args ? args.targetIds : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsManaged"] = undefined /*out*/;
            resourceInputs["policyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationsPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrganizationsPolicy resources.
 */
export interface OrganizationsPolicyState {
    /**
     * ARN of the Policy
     */
    arn?: pulumi.Input<string>;
    /**
     * A boolean value that indicates whether the specified policy is an AWS managed policy. If true, then you can attach the
     * policy to roots, OUs, or accounts, but you cannot edit it.
     */
    awsManaged?: pulumi.Input<boolean>;
    /**
     * The Policy text content. For AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML
     * format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it.
     */
    content?: pulumi.Input<string>;
    /**
     * Human readable description of the policy
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the Policy
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the Policy
     */
    policyId?: pulumi.Input<string>;
    /**
     * A list of tags that you want to attach to the newly created policy. For each tag in the list, you must specify both a
     * tag key and a value. You can set the value to an empty string, but you can't set it to null.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.OrganizationsPolicyTag>[]>;
    /**
     * List of unique identifiers (IDs) of the root, OU, or account that you want to attach the policy to
     */
    targetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of policy to create. You can specify one of the following values: AISERVICES_OPT_OUT_POLICY, BACKUP_POLICY,
     * SERVICE_CONTROL_POLICY, TAG_POLICY
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrganizationsPolicy resource.
 */
export interface OrganizationsPolicyArgs {
    /**
     * The Policy text content. For AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML
     * format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it.
     */
    content: pulumi.Input<string>;
    /**
     * Human readable description of the policy
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the Policy
     */
    name?: pulumi.Input<string>;
    /**
     * A list of tags that you want to attach to the newly created policy. For each tag in the list, you must specify both a
     * tag key and a value. You can set the value to an empty string, but you can't set it to null.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.OrganizationsPolicyTag>[]>;
    /**
     * List of unique identifiers (IDs) of the root, OU, or account that you want to attach the policy to
     */
    targetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of policy to create. You can specify one of the following values: AISERVICES_OPT_OUT_POLICY, BACKUP_POLICY,
     * SERVICE_CONTROL_POLICY, TAG_POLICY
     */
    type: pulumi.Input<string>;
}
