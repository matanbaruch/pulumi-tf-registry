// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getQuicksightDataSet(args: GetQuicksightDataSetArgs, opts?: pulumi.InvokeOptions): Promise<GetQuicksightDataSetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getQuicksightDataSet:getQuicksightDataSet", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getQuicksightDataSet.
 */
export interface GetQuicksightDataSetArgs {
    id: string;
}

/**
 * A collection of values returned by getQuicksightDataSet.
 */
export interface GetQuicksightDataSetResult {
    readonly arn: string;
    readonly awsAccountId: string;
    readonly columnGroups: outputs.GetQuicksightDataSetColumnGroup[];
    readonly columnLevelPermissionRules: outputs.GetQuicksightDataSetColumnLevelPermissionRule[];
    readonly consumedSpiceCapacityInBytes: number;
    readonly createdTime: string;
    readonly dataSetId: string;
    readonly dataSetUsageConfiguration: outputs.GetQuicksightDataSetDataSetUsageConfiguration;
    readonly fieldFolders: {[key: string]: outputs.GetQuicksightDataSetFieldFolders};
    readonly id: string;
    readonly importMode: string;
    readonly ingestionWaitPolicy: outputs.GetQuicksightDataSetIngestionWaitPolicy;
    readonly lastUpdatedTime: string;
    readonly logicalTableMap: {[key: string]: outputs.GetQuicksightDataSetLogicalTableMap};
    readonly name: string;
    readonly outputColumns: outputs.GetQuicksightDataSetOutputColumn[];
    readonly permissions: outputs.GetQuicksightDataSetPermission[];
    readonly physicalTableMap: {[key: string]: outputs.GetQuicksightDataSetPhysicalTableMap};
    readonly rowLevelPermissionDataSet: outputs.GetQuicksightDataSetRowLevelPermissionDataSet;
    readonly tags: outputs.GetQuicksightDataSetTag[];
}
export function getQuicksightDataSetOutput(args: GetQuicksightDataSetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetQuicksightDataSetResult> {
    return pulumi.output(args).apply((a: any) => getQuicksightDataSet(a, opts))
}

/**
 * A collection of arguments for invoking getQuicksightDataSet.
 */
export interface GetQuicksightDataSetOutputArgs {
    id: pulumi.Input<string>;
}
