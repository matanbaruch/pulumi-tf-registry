// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEc2NetworkInterface(args: GetEc2NetworkInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2NetworkInterfaceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEc2NetworkInterface:getEc2NetworkInterface", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2NetworkInterface.
 */
export interface GetEc2NetworkInterfaceArgs {
    id: string;
}

/**
 * A collection of values returned by getEc2NetworkInterface.
 */
export interface GetEc2NetworkInterfaceResult {
    readonly connectionTrackingSpecification: outputs.GetEc2NetworkInterfaceConnectionTrackingSpecification;
    readonly description: string;
    readonly enablePrimaryIpv6: boolean;
    readonly groupSets: string[];
    readonly id: string;
    readonly interfaceType: string;
    readonly ipv4PrefixCount: number;
    readonly ipv4Prefixes: outputs.GetEc2NetworkInterfaceIpv4Prefix[];
    readonly ipv6AddressCount: number;
    readonly ipv6Addresses: outputs.GetEc2NetworkInterfaceIpv6Address[];
    readonly ipv6PrefixCount: number;
    readonly ipv6Prefixes: outputs.GetEc2NetworkInterfaceIpv6Prefix[];
    readonly networkInterfaceId: string;
    readonly primaryIpv6Address: string;
    readonly primaryPrivateIpAddress: string;
    readonly privateIpAddress: string;
    readonly privateIpAddresses: outputs.GetEc2NetworkInterfacePrivateIpAddress[];
    readonly secondaryPrivateIpAddressCount: number;
    readonly secondaryPrivateIpAddresses: string[];
    readonly sourceDestCheck: boolean;
    readonly subnetId: string;
    readonly tags: outputs.GetEc2NetworkInterfaceTag[];
    readonly vpcId: string;
}
export function getEc2NetworkInterfaceOutput(args: GetEc2NetworkInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2NetworkInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getEc2NetworkInterface(a, opts))
}

/**
 * A collection of arguments for invoking getEc2NetworkInterface.
 */
export interface GetEc2NetworkInterfaceOutputArgs {
    id: pulumi.Input<string>;
}
