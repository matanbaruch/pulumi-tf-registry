// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppstreamApplication extends pulumi.CustomResource {
    /**
     * Get an existing AppstreamApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppstreamApplicationState, opts?: pulumi.CustomResourceOptions): AppstreamApplication {
        return new AppstreamApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/appstreamApplication:AppstreamApplication';

    /**
     * Returns true if the given object is an instance of AppstreamApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppstreamApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppstreamApplication.__pulumiType;
    }

    public readonly appBlockArn!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly attributesToDeletes!: pulumi.Output<string[]>;
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly iconS3Location!: pulumi.Output<outputs.AppstreamApplicationIconS3Location>;
    public readonly instanceFamilies!: pulumi.Output<string[]>;
    public readonly launchParameters!: pulumi.Output<string>;
    public readonly launchPath!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly platforms!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<outputs.AppstreamApplicationTag[]>;
    public readonly workingDirectory!: pulumi.Output<string>;

    /**
     * Create a AppstreamApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppstreamApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppstreamApplicationArgs | AppstreamApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppstreamApplicationState | undefined;
            resourceInputs["appBlockArn"] = state ? state.appBlockArn : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["attributesToDeletes"] = state ? state.attributesToDeletes : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["iconS3Location"] = state ? state.iconS3Location : undefined;
            resourceInputs["instanceFamilies"] = state ? state.instanceFamilies : undefined;
            resourceInputs["launchParameters"] = state ? state.launchParameters : undefined;
            resourceInputs["launchPath"] = state ? state.launchPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platforms"] = state ? state.platforms : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workingDirectory"] = state ? state.workingDirectory : undefined;
        } else {
            const args = argsOrState as AppstreamApplicationArgs | undefined;
            if ((!args || args.appBlockArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appBlockArn'");
            }
            if ((!args || args.iconS3Location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iconS3Location'");
            }
            if ((!args || args.instanceFamilies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceFamilies'");
            }
            if ((!args || args.launchPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchPath'");
            }
            if ((!args || args.platforms === undefined) && !opts.urn) {
                throw new Error("Missing required property 'platforms'");
            }
            resourceInputs["appBlockArn"] = args ? args.appBlockArn : undefined;
            resourceInputs["attributesToDeletes"] = args ? args.attributesToDeletes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["iconS3Location"] = args ? args.iconS3Location : undefined;
            resourceInputs["instanceFamilies"] = args ? args.instanceFamilies : undefined;
            resourceInputs["launchParameters"] = args ? args.launchParameters : undefined;
            resourceInputs["launchPath"] = args ? args.launchPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platforms"] = args ? args.platforms : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workingDirectory"] = args ? args.workingDirectory : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppstreamApplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppstreamApplication resources.
 */
export interface AppstreamApplicationState {
    appBlockArn?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    attributesToDeletes?: pulumi.Input<pulumi.Input<string>[]>;
    createdTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    iconS3Location?: pulumi.Input<inputs.AppstreamApplicationIconS3Location>;
    instanceFamilies?: pulumi.Input<pulumi.Input<string>[]>;
    launchParameters?: pulumi.Input<string>;
    launchPath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    platforms?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.AppstreamApplicationTag>[]>;
    workingDirectory?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppstreamApplication resource.
 */
export interface AppstreamApplicationArgs {
    appBlockArn: pulumi.Input<string>;
    attributesToDeletes?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    iconS3Location: pulumi.Input<inputs.AppstreamApplicationIconS3Location>;
    instanceFamilies: pulumi.Input<pulumi.Input<string>[]>;
    launchParameters?: pulumi.Input<string>;
    launchPath: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    platforms: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.AppstreamApplicationTag>[]>;
    workingDirectory?: pulumi.Input<string>;
}
