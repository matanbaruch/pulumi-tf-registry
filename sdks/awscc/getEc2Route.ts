// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getEc2Route(args: GetEc2RouteArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2RouteResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEc2Route:getEc2Route", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2Route.
 */
export interface GetEc2RouteArgs {
    id: string;
}

/**
 * A collection of values returned by getEc2Route.
 */
export interface GetEc2RouteResult {
    readonly carrierGatewayId: string;
    readonly cidrBlock: string;
    readonly coreNetworkArn: string;
    readonly destinationCidrBlock: string;
    readonly destinationIpv6CidrBlock: string;
    readonly destinationPrefixListId: string;
    readonly egressOnlyInternetGatewayId: string;
    readonly gatewayId: string;
    readonly id: string;
    readonly instanceId: string;
    readonly localGatewayId: string;
    readonly natGatewayId: string;
    readonly networkInterfaceId: string;
    readonly routeTableId: string;
    readonly transitGatewayId: string;
    readonly vpcEndpointId: string;
    readonly vpcPeeringConnectionId: string;
}
export function getEc2RouteOutput(args: GetEc2RouteOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2RouteResult> {
    return pulumi.output(args).apply((a: any) => getEc2Route(a, opts))
}

/**
 * A collection of arguments for invoking getEc2Route.
 */
export interface GetEc2RouteOutputArgs {
    id: pulumi.Input<string>;
}
