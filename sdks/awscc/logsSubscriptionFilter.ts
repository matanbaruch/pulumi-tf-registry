// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogsSubscriptionFilter extends pulumi.CustomResource {
    /**
     * Get an existing LogsSubscriptionFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogsSubscriptionFilterState, opts?: pulumi.CustomResourceOptions): LogsSubscriptionFilter {
        return new LogsSubscriptionFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/logsSubscriptionFilter:LogsSubscriptionFilter';

    /**
     * Returns true if the given object is an instance of LogsSubscriptionFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogsSubscriptionFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogsSubscriptionFilter.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the destination.
     */
    public readonly destinationArn!: pulumi.Output<string>;
    /**
     * The method used to distribute log data to the destination, which can be either random or grouped by log stream.
     */
    public readonly distribution!: pulumi.Output<string>;
    /**
     * The name of the subscription filter.
     */
    public readonly filterName!: pulumi.Output<string>;
    /**
     * The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about
     * the filter pattern syntax, see [Filter and Pattern
     * Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    public readonly filterPattern!: pulumi.Output<string>;
    /**
     * The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered
     * and delivered to the specified AWS resource if the filter pattern matches the log events.
     */
    public readonly logGroupName!: pulumi.Output<string>;
    /**
     * The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't
     * need to provide the ARN when you are working with a logical destination for cross-account delivery.
     */
    public readonly roleArn!: pulumi.Output<string>;

    /**
     * Create a LogsSubscriptionFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogsSubscriptionFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogsSubscriptionFilterArgs | LogsSubscriptionFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogsSubscriptionFilterState | undefined;
            resourceInputs["destinationArn"] = state ? state.destinationArn : undefined;
            resourceInputs["distribution"] = state ? state.distribution : undefined;
            resourceInputs["filterName"] = state ? state.filterName : undefined;
            resourceInputs["filterPattern"] = state ? state.filterPattern : undefined;
            resourceInputs["logGroupName"] = state ? state.logGroupName : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
        } else {
            const args = argsOrState as LogsSubscriptionFilterArgs | undefined;
            if ((!args || args.destinationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationArn'");
            }
            if ((!args || args.filterPattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterPattern'");
            }
            if ((!args || args.logGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logGroupName'");
            }
            resourceInputs["destinationArn"] = args ? args.destinationArn : undefined;
            resourceInputs["distribution"] = args ? args.distribution : undefined;
            resourceInputs["filterName"] = args ? args.filterName : undefined;
            resourceInputs["filterPattern"] = args ? args.filterPattern : undefined;
            resourceInputs["logGroupName"] = args ? args.logGroupName : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogsSubscriptionFilter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogsSubscriptionFilter resources.
 */
export interface LogsSubscriptionFilterState {
    /**
     * The Amazon Resource Name (ARN) of the destination.
     */
    destinationArn?: pulumi.Input<string>;
    /**
     * The method used to distribute log data to the destination, which can be either random or grouped by log stream.
     */
    distribution?: pulumi.Input<string>;
    /**
     * The name of the subscription filter.
     */
    filterName?: pulumi.Input<string>;
    /**
     * The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about
     * the filter pattern syntax, see [Filter and Pattern
     * Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    filterPattern?: pulumi.Input<string>;
    /**
     * The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered
     * and delivered to the specified AWS resource if the filter pattern matches the log events.
     */
    logGroupName?: pulumi.Input<string>;
    /**
     * The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't
     * need to provide the ARN when you are working with a logical destination for cross-account delivery.
     */
    roleArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogsSubscriptionFilter resource.
 */
export interface LogsSubscriptionFilterArgs {
    /**
     * The Amazon Resource Name (ARN) of the destination.
     */
    destinationArn: pulumi.Input<string>;
    /**
     * The method used to distribute log data to the destination, which can be either random or grouped by log stream.
     */
    distribution?: pulumi.Input<string>;
    /**
     * The name of the subscription filter.
     */
    filterName?: pulumi.Input<string>;
    /**
     * The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about
     * the filter pattern syntax, see [Filter and Pattern
     * Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    filterPattern: pulumi.Input<string>;
    /**
     * The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered
     * and delivered to the specified AWS resource if the filter pattern matches the log events.
     */
    logGroupName: pulumi.Input<string>;
    /**
     * The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't
     * need to provide the ARN when you are working with a logical destination for cross-account delivery.
     */
    roleArn?: pulumi.Input<string>;
}
