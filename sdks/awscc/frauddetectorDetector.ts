// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FrauddetectorDetector extends pulumi.CustomResource {
    /**
     * Get an existing FrauddetectorDetector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrauddetectorDetectorState, opts?: pulumi.CustomResourceOptions): FrauddetectorDetector {
        return new FrauddetectorDetector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/frauddetectorDetector:FrauddetectorDetector';

    /**
     * Returns true if the given object is an instance of FrauddetectorDetector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FrauddetectorDetector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FrauddetectorDetector.__pulumiType;
    }

    /**
     * The ARN of the detector.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The models to associate with this detector.
     */
    public readonly associatedModels!: pulumi.Output<outputs.FrauddetectorDetectorAssociatedModel[]>;
    /**
     * The time when the detector was created.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * The description of the detector.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The ID of the detector
     */
    public readonly detectorId!: pulumi.Output<string>;
    /**
     * The active version ID of the detector
     */
    public /*out*/ readonly detectorVersionId!: pulumi.Output<string>;
    /**
     * The desired detector version status for the detector
     */
    public readonly detectorVersionStatus!: pulumi.Output<string>;
    /**
     * The event type to associate this detector with.
     */
    public readonly eventType!: pulumi.Output<outputs.FrauddetectorDetectorEventType>;
    /**
     * The time when the detector was last updated.
     */
    public /*out*/ readonly lastUpdatedTime!: pulumi.Output<string>;
    public readonly ruleExecutionMode!: pulumi.Output<string>;
    public readonly rules!: pulumi.Output<outputs.FrauddetectorDetectorRule[]>;
    /**
     * Tags associated with this detector.
     */
    public readonly tags!: pulumi.Output<outputs.FrauddetectorDetectorTag[]>;

    /**
     * Create a FrauddetectorDetector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrauddetectorDetectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrauddetectorDetectorArgs | FrauddetectorDetectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrauddetectorDetectorState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["associatedModels"] = state ? state.associatedModels : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectorId"] = state ? state.detectorId : undefined;
            resourceInputs["detectorVersionId"] = state ? state.detectorVersionId : undefined;
            resourceInputs["detectorVersionStatus"] = state ? state.detectorVersionStatus : undefined;
            resourceInputs["eventType"] = state ? state.eventType : undefined;
            resourceInputs["lastUpdatedTime"] = state ? state.lastUpdatedTime : undefined;
            resourceInputs["ruleExecutionMode"] = state ? state.ruleExecutionMode : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as FrauddetectorDetectorArgs | undefined;
            if ((!args || args.detectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'detectorId'");
            }
            if ((!args || args.eventType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventType'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["associatedModels"] = args ? args.associatedModels : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectorId"] = args ? args.detectorId : undefined;
            resourceInputs["detectorVersionStatus"] = args ? args.detectorVersionStatus : undefined;
            resourceInputs["eventType"] = args ? args.eventType : undefined;
            resourceInputs["ruleExecutionMode"] = args ? args.ruleExecutionMode : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["detectorVersionId"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FrauddetectorDetector.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FrauddetectorDetector resources.
 */
export interface FrauddetectorDetectorState {
    /**
     * The ARN of the detector.
     */
    arn?: pulumi.Input<string>;
    /**
     * The models to associate with this detector.
     */
    associatedModels?: pulumi.Input<pulumi.Input<inputs.FrauddetectorDetectorAssociatedModel>[]>;
    /**
     * The time when the detector was created.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * The description of the detector.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the detector
     */
    detectorId?: pulumi.Input<string>;
    /**
     * The active version ID of the detector
     */
    detectorVersionId?: pulumi.Input<string>;
    /**
     * The desired detector version status for the detector
     */
    detectorVersionStatus?: pulumi.Input<string>;
    /**
     * The event type to associate this detector with.
     */
    eventType?: pulumi.Input<inputs.FrauddetectorDetectorEventType>;
    /**
     * The time when the detector was last updated.
     */
    lastUpdatedTime?: pulumi.Input<string>;
    ruleExecutionMode?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.FrauddetectorDetectorRule>[]>;
    /**
     * Tags associated with this detector.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.FrauddetectorDetectorTag>[]>;
}

/**
 * The set of arguments for constructing a FrauddetectorDetector resource.
 */
export interface FrauddetectorDetectorArgs {
    /**
     * The models to associate with this detector.
     */
    associatedModels?: pulumi.Input<pulumi.Input<inputs.FrauddetectorDetectorAssociatedModel>[]>;
    /**
     * The description of the detector.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the detector
     */
    detectorId: pulumi.Input<string>;
    /**
     * The desired detector version status for the detector
     */
    detectorVersionStatus?: pulumi.Input<string>;
    /**
     * The event type to associate this detector with.
     */
    eventType: pulumi.Input<inputs.FrauddetectorDetectorEventType>;
    ruleExecutionMode?: pulumi.Input<string>;
    rules: pulumi.Input<pulumi.Input<inputs.FrauddetectorDetectorRule>[]>;
    /**
     * Tags associated with this detector.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.FrauddetectorDetectorTag>[]>;
}
