// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NimblestudioStudioComponent extends pulumi.CustomResource {
    /**
     * Get an existing NimblestudioStudioComponent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NimblestudioStudioComponentState, opts?: pulumi.CustomResourceOptions): NimblestudioStudioComponent {
        return new NimblestudioStudioComponent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/nimblestudioStudioComponent:NimblestudioStudioComponent';

    /**
     * Returns true if the given object is an instance of NimblestudioStudioComponent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NimblestudioStudioComponent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NimblestudioStudioComponent.__pulumiType;
    }

    /**
     * <p>The configuration of the studio component, based on component type.</p>
     */
    public readonly configuration!: pulumi.Output<outputs.NimblestudioStudioComponentConfiguration>;
    /**
     * <p>The description.</p>
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * <p>The EC2 security groups that control access to the studio component.</p>
     */
    public readonly ec2SecurityGroupIds!: pulumi.Output<string[]>;
    /**
     * <p>Initialization scripts for studio components.</p>
     */
    public readonly initializationScripts!: pulumi.Output<outputs.NimblestudioStudioComponentInitializationScript[]>;
    /**
     * <p>The name for the studio component.</p>
     */
    public readonly name!: pulumi.Output<string>;
    public readonly runtimeRoleArn!: pulumi.Output<string>;
    /**
     * <p>Parameters for the studio component scripts.</p>
     */
    public readonly scriptParameters!: pulumi.Output<outputs.NimblestudioStudioComponentScriptParameter[]>;
    public readonly secureInitializationRoleArn!: pulumi.Output<string>;
    public /*out*/ readonly studioComponentId!: pulumi.Output<string>;
    /**
     * <p>The studio ID. </p>
     */
    public readonly studioId!: pulumi.Output<string>;
    public readonly subtype!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a NimblestudioStudioComponent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NimblestudioStudioComponentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NimblestudioStudioComponentArgs | NimblestudioStudioComponentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NimblestudioStudioComponentState | undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ec2SecurityGroupIds"] = state ? state.ec2SecurityGroupIds : undefined;
            resourceInputs["initializationScripts"] = state ? state.initializationScripts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["runtimeRoleArn"] = state ? state.runtimeRoleArn : undefined;
            resourceInputs["scriptParameters"] = state ? state.scriptParameters : undefined;
            resourceInputs["secureInitializationRoleArn"] = state ? state.secureInitializationRoleArn : undefined;
            resourceInputs["studioComponentId"] = state ? state.studioComponentId : undefined;
            resourceInputs["studioId"] = state ? state.studioId : undefined;
            resourceInputs["subtype"] = state ? state.subtype : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NimblestudioStudioComponentArgs | undefined;
            if ((!args || args.studioId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'studioId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ec2SecurityGroupIds"] = args ? args.ec2SecurityGroupIds : undefined;
            resourceInputs["initializationScripts"] = args ? args.initializationScripts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["runtimeRoleArn"] = args ? args.runtimeRoleArn : undefined;
            resourceInputs["scriptParameters"] = args ? args.scriptParameters : undefined;
            resourceInputs["secureInitializationRoleArn"] = args ? args.secureInitializationRoleArn : undefined;
            resourceInputs["studioId"] = args ? args.studioId : undefined;
            resourceInputs["subtype"] = args ? args.subtype : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["studioComponentId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NimblestudioStudioComponent.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NimblestudioStudioComponent resources.
 */
export interface NimblestudioStudioComponentState {
    /**
     * <p>The configuration of the studio component, based on component type.</p>
     */
    configuration?: pulumi.Input<inputs.NimblestudioStudioComponentConfiguration>;
    /**
     * <p>The description.</p>
     */
    description?: pulumi.Input<string>;
    /**
     * <p>The EC2 security groups that control access to the studio component.</p>
     */
    ec2SecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * <p>Initialization scripts for studio components.</p>
     */
    initializationScripts?: pulumi.Input<pulumi.Input<inputs.NimblestudioStudioComponentInitializationScript>[]>;
    /**
     * <p>The name for the studio component.</p>
     */
    name?: pulumi.Input<string>;
    runtimeRoleArn?: pulumi.Input<string>;
    /**
     * <p>Parameters for the studio component scripts.</p>
     */
    scriptParameters?: pulumi.Input<pulumi.Input<inputs.NimblestudioStudioComponentScriptParameter>[]>;
    secureInitializationRoleArn?: pulumi.Input<string>;
    studioComponentId?: pulumi.Input<string>;
    /**
     * <p>The studio ID. </p>
     */
    studioId?: pulumi.Input<string>;
    subtype?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NimblestudioStudioComponent resource.
 */
export interface NimblestudioStudioComponentArgs {
    /**
     * <p>The configuration of the studio component, based on component type.</p>
     */
    configuration?: pulumi.Input<inputs.NimblestudioStudioComponentConfiguration>;
    /**
     * <p>The description.</p>
     */
    description?: pulumi.Input<string>;
    /**
     * <p>The EC2 security groups that control access to the studio component.</p>
     */
    ec2SecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * <p>Initialization scripts for studio components.</p>
     */
    initializationScripts?: pulumi.Input<pulumi.Input<inputs.NimblestudioStudioComponentInitializationScript>[]>;
    /**
     * <p>The name for the studio component.</p>
     */
    name?: pulumi.Input<string>;
    runtimeRoleArn?: pulumi.Input<string>;
    /**
     * <p>Parameters for the studio component scripts.</p>
     */
    scriptParameters?: pulumi.Input<pulumi.Input<inputs.NimblestudioStudioComponentScriptParameter>[]>;
    secureInitializationRoleArn?: pulumi.Input<string>;
    /**
     * <p>The studio ID. </p>
     */
    studioId: pulumi.Input<string>;
    subtype?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type: pulumi.Input<string>;
}
