// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EntityresolutionSchemaMapping extends pulumi.CustomResource {
    /**
     * Get an existing EntityresolutionSchemaMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntityresolutionSchemaMappingState, opts?: pulumi.CustomResourceOptions): EntityresolutionSchemaMapping {
        return new EntityresolutionSchemaMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/entityresolutionSchemaMapping:EntityresolutionSchemaMapping';

    /**
     * Returns true if the given object is an instance of EntityresolutionSchemaMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EntityresolutionSchemaMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EntityresolutionSchemaMapping.__pulumiType;
    }

    /**
     * The time of this SchemaMapping got created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the SchemaMapping
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The boolean value that indicates whether or not a SchemaMapping has MatchingWorkflows that are associated with
     */
    public /*out*/ readonly hasWorkflows!: pulumi.Output<boolean>;
    /**
     * The SchemaMapping attributes input
     */
    public readonly mappedInputFields!: pulumi.Output<outputs.EntityresolutionSchemaMappingMappedInputField[]>;
    /**
     * The SchemaMapping arn associated with the Schema
     */
    public /*out*/ readonly schemaArn!: pulumi.Output<string>;
    /**
     * The name of the SchemaMapping
     */
    public readonly schemaName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.EntityresolutionSchemaMappingTag[]>;
    /**
     * The time of this SchemaMapping got last updated at
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a EntityresolutionSchemaMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EntityresolutionSchemaMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntityresolutionSchemaMappingArgs | EntityresolutionSchemaMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntityresolutionSchemaMappingState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hasWorkflows"] = state ? state.hasWorkflows : undefined;
            resourceInputs["mappedInputFields"] = state ? state.mappedInputFields : undefined;
            resourceInputs["schemaArn"] = state ? state.schemaArn : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as EntityresolutionSchemaMappingArgs | undefined;
            if ((!args || args.mappedInputFields === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mappedInputFields'");
            }
            if ((!args || args.schemaName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["mappedInputFields"] = args ? args.mappedInputFields : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["hasWorkflows"] = undefined /*out*/;
            resourceInputs["schemaArn"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EntityresolutionSchemaMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EntityresolutionSchemaMapping resources.
 */
export interface EntityresolutionSchemaMappingState {
    /**
     * The time of this SchemaMapping got created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the SchemaMapping
     */
    description?: pulumi.Input<string>;
    /**
     * The boolean value that indicates whether or not a SchemaMapping has MatchingWorkflows that are associated with
     */
    hasWorkflows?: pulumi.Input<boolean>;
    /**
     * The SchemaMapping attributes input
     */
    mappedInputFields?: pulumi.Input<pulumi.Input<inputs.EntityresolutionSchemaMappingMappedInputField>[]>;
    /**
     * The SchemaMapping arn associated with the Schema
     */
    schemaArn?: pulumi.Input<string>;
    /**
     * The name of the SchemaMapping
     */
    schemaName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.EntityresolutionSchemaMappingTag>[]>;
    /**
     * The time of this SchemaMapping got last updated at
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EntityresolutionSchemaMapping resource.
 */
export interface EntityresolutionSchemaMappingArgs {
    /**
     * The description of the SchemaMapping
     */
    description?: pulumi.Input<string>;
    /**
     * The SchemaMapping attributes input
     */
    mappedInputFields: pulumi.Input<pulumi.Input<inputs.EntityresolutionSchemaMappingMappedInputField>[]>;
    /**
     * The name of the SchemaMapping
     */
    schemaName: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.EntityresolutionSchemaMappingTag>[]>;
}
