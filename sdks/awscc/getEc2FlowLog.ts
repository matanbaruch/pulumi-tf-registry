// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEc2FlowLog(args: GetEc2FlowLogArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2FlowLogResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getEc2FlowLog:getEc2FlowLog", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2FlowLog.
 */
export interface GetEc2FlowLogArgs {
    id: string;
}

/**
 * A collection of values returned by getEc2FlowLog.
 */
export interface GetEc2FlowLogResult {
    readonly deliverCrossAccountRole: string;
    readonly deliverLogsPermissionArn: string;
    readonly destinationOptions: outputs.GetEc2FlowLogDestinationOptions;
    readonly flowLogId: string;
    readonly id: string;
    readonly logDestination: string;
    readonly logDestinationType: string;
    readonly logFormat: string;
    readonly logGroupName: string;
    readonly maxAggregationInterval: number;
    readonly resourceId: string;
    readonly resourceType: string;
    readonly tags: outputs.GetEc2FlowLogTag[];
    readonly trafficType: string;
}
export function getEc2FlowLogOutput(args: GetEc2FlowLogOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2FlowLogResult> {
    return pulumi.output(args).apply((a: any) => getEc2FlowLog(a, opts))
}

/**
 * A collection of arguments for invoking getEc2FlowLog.
 */
export interface GetEc2FlowLogOutputArgs {
    id: pulumi.Input<string>;
}
