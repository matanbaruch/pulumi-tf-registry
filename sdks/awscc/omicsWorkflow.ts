// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OmicsWorkflow extends pulumi.CustomResource {
    /**
     * Get an existing OmicsWorkflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OmicsWorkflowState, opts?: pulumi.CustomResourceOptions): OmicsWorkflow {
        return new OmicsWorkflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/omicsWorkflow:OmicsWorkflow';

    /**
     * Returns true if the given object is an instance of OmicsWorkflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OmicsWorkflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OmicsWorkflow.__pulumiType;
    }

    public readonly accelerators!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    public readonly definitionUri!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly engine!: pulumi.Output<string>;
    public readonly main!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly parameterTemplate!: pulumi.Output<{[key: string]: outputs.OmicsWorkflowParameterTemplate}>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storageCapacity!: pulumi.Output<number>;
    /**
     * A map of resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public /*out*/ readonly workflowId!: pulumi.Output<string>;

    /**
     * Create a OmicsWorkflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OmicsWorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OmicsWorkflowArgs | OmicsWorkflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OmicsWorkflowState | undefined;
            resourceInputs["accelerators"] = state ? state.accelerators : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["definitionUri"] = state ? state.definitionUri : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["main"] = state ? state.main : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameterTemplate"] = state ? state.parameterTemplate : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageCapacity"] = state ? state.storageCapacity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["workflowId"] = state ? state.workflowId : undefined;
        } else {
            const args = argsOrState as OmicsWorkflowArgs | undefined;
            resourceInputs["accelerators"] = args ? args.accelerators : undefined;
            resourceInputs["definitionUri"] = args ? args.definitionUri : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["main"] = args ? args.main : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameterTemplate"] = args ? args.parameterTemplate : undefined;
            resourceInputs["storageCapacity"] = args ? args.storageCapacity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["workflowId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OmicsWorkflow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OmicsWorkflow resources.
 */
export interface OmicsWorkflowState {
    accelerators?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    creationTime?: pulumi.Input<string>;
    definitionUri?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    main?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameterTemplate?: pulumi.Input<{[key: string]: pulumi.Input<inputs.OmicsWorkflowParameterTemplate>}>;
    status?: pulumi.Input<string>;
    storageCapacity?: pulumi.Input<number>;
    /**
     * A map of resource tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    workflowId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OmicsWorkflow resource.
 */
export interface OmicsWorkflowArgs {
    accelerators?: pulumi.Input<string>;
    definitionUri?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    main?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameterTemplate?: pulumi.Input<{[key: string]: pulumi.Input<inputs.OmicsWorkflowParameterTemplate>}>;
    storageCapacity?: pulumi.Input<number>;
    /**
     * A map of resource tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
