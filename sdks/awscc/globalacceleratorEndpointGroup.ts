// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GlobalacceleratorEndpointGroup extends pulumi.CustomResource {
    /**
     * Get an existing GlobalacceleratorEndpointGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalacceleratorEndpointGroupState, opts?: pulumi.CustomResourceOptions): GlobalacceleratorEndpointGroup {
        return new GlobalacceleratorEndpointGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/globalacceleratorEndpointGroup:GlobalacceleratorEndpointGroup';

    /**
     * Returns true if the given object is an instance of GlobalacceleratorEndpointGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalacceleratorEndpointGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalacceleratorEndpointGroup.__pulumiType;
    }

    /**
     * The list of endpoint objects.
     */
    public readonly endpointConfigurations!: pulumi.Output<outputs.GlobalacceleratorEndpointGroupEndpointConfiguration[]>;
    /**
     * The Amazon Resource Name (ARN) of the endpoint group
     */
    public /*out*/ readonly endpointGroupArn!: pulumi.Output<string>;
    /**
     * The name of the AWS Region where the endpoint group is located
     */
    public readonly endpointGroupRegion!: pulumi.Output<string>;
    /**
     * The time in seconds between each health check for an endpoint. Must be a value of 10 or 30
     */
    public readonly healthCheckIntervalSeconds!: pulumi.Output<number>;
    public readonly healthCheckPath!: pulumi.Output<string>;
    /**
     * The port that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     */
    public readonly healthCheckPort!: pulumi.Output<number>;
    /**
     * The protocol that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     */
    public readonly healthCheckProtocol!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the listener
     */
    public readonly listenerArn!: pulumi.Output<string>;
    public readonly portOverrides!: pulumi.Output<outputs.GlobalacceleratorEndpointGroupPortOverride[]>;
    /**
     * The number of consecutive health checks required to set the state of the endpoint to unhealthy.
     */
    public readonly thresholdCount!: pulumi.Output<number>;
    /**
     * The percentage of traffic to sent to an AWS Region
     */
    public readonly trafficDialPercentage!: pulumi.Output<number>;

    /**
     * Create a GlobalacceleratorEndpointGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalacceleratorEndpointGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalacceleratorEndpointGroupArgs | GlobalacceleratorEndpointGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalacceleratorEndpointGroupState | undefined;
            resourceInputs["endpointConfigurations"] = state ? state.endpointConfigurations : undefined;
            resourceInputs["endpointGroupArn"] = state ? state.endpointGroupArn : undefined;
            resourceInputs["endpointGroupRegion"] = state ? state.endpointGroupRegion : undefined;
            resourceInputs["healthCheckIntervalSeconds"] = state ? state.healthCheckIntervalSeconds : undefined;
            resourceInputs["healthCheckPath"] = state ? state.healthCheckPath : undefined;
            resourceInputs["healthCheckPort"] = state ? state.healthCheckPort : undefined;
            resourceInputs["healthCheckProtocol"] = state ? state.healthCheckProtocol : undefined;
            resourceInputs["listenerArn"] = state ? state.listenerArn : undefined;
            resourceInputs["portOverrides"] = state ? state.portOverrides : undefined;
            resourceInputs["thresholdCount"] = state ? state.thresholdCount : undefined;
            resourceInputs["trafficDialPercentage"] = state ? state.trafficDialPercentage : undefined;
        } else {
            const args = argsOrState as GlobalacceleratorEndpointGroupArgs | undefined;
            if ((!args || args.endpointGroupRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointGroupRegion'");
            }
            if ((!args || args.listenerArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerArn'");
            }
            resourceInputs["endpointConfigurations"] = args ? args.endpointConfigurations : undefined;
            resourceInputs["endpointGroupRegion"] = args ? args.endpointGroupRegion : undefined;
            resourceInputs["healthCheckIntervalSeconds"] = args ? args.healthCheckIntervalSeconds : undefined;
            resourceInputs["healthCheckPath"] = args ? args.healthCheckPath : undefined;
            resourceInputs["healthCheckPort"] = args ? args.healthCheckPort : undefined;
            resourceInputs["healthCheckProtocol"] = args ? args.healthCheckProtocol : undefined;
            resourceInputs["listenerArn"] = args ? args.listenerArn : undefined;
            resourceInputs["portOverrides"] = args ? args.portOverrides : undefined;
            resourceInputs["thresholdCount"] = args ? args.thresholdCount : undefined;
            resourceInputs["trafficDialPercentage"] = args ? args.trafficDialPercentage : undefined;
            resourceInputs["endpointGroupArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalacceleratorEndpointGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlobalacceleratorEndpointGroup resources.
 */
export interface GlobalacceleratorEndpointGroupState {
    /**
     * The list of endpoint objects.
     */
    endpointConfigurations?: pulumi.Input<pulumi.Input<inputs.GlobalacceleratorEndpointGroupEndpointConfiguration>[]>;
    /**
     * The Amazon Resource Name (ARN) of the endpoint group
     */
    endpointGroupArn?: pulumi.Input<string>;
    /**
     * The name of the AWS Region where the endpoint group is located
     */
    endpointGroupRegion?: pulumi.Input<string>;
    /**
     * The time in seconds between each health check for an endpoint. Must be a value of 10 or 30
     */
    healthCheckIntervalSeconds?: pulumi.Input<number>;
    healthCheckPath?: pulumi.Input<string>;
    /**
     * The port that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     */
    healthCheckPort?: pulumi.Input<number>;
    /**
     * The protocol that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     */
    healthCheckProtocol?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the listener
     */
    listenerArn?: pulumi.Input<string>;
    portOverrides?: pulumi.Input<pulumi.Input<inputs.GlobalacceleratorEndpointGroupPortOverride>[]>;
    /**
     * The number of consecutive health checks required to set the state of the endpoint to unhealthy.
     */
    thresholdCount?: pulumi.Input<number>;
    /**
     * The percentage of traffic to sent to an AWS Region
     */
    trafficDialPercentage?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GlobalacceleratorEndpointGroup resource.
 */
export interface GlobalacceleratorEndpointGroupArgs {
    /**
     * The list of endpoint objects.
     */
    endpointConfigurations?: pulumi.Input<pulumi.Input<inputs.GlobalacceleratorEndpointGroupEndpointConfiguration>[]>;
    /**
     * The name of the AWS Region where the endpoint group is located
     */
    endpointGroupRegion: pulumi.Input<string>;
    /**
     * The time in seconds between each health check for an endpoint. Must be a value of 10 or 30
     */
    healthCheckIntervalSeconds?: pulumi.Input<number>;
    healthCheckPath?: pulumi.Input<string>;
    /**
     * The port that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     */
    healthCheckPort?: pulumi.Input<number>;
    /**
     * The protocol that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     */
    healthCheckProtocol?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the listener
     */
    listenerArn: pulumi.Input<string>;
    portOverrides?: pulumi.Input<pulumi.Input<inputs.GlobalacceleratorEndpointGroupPortOverride>[]>;
    /**
     * The number of consecutive health checks required to set the state of the endpoint to unhealthy.
     */
    thresholdCount?: pulumi.Input<number>;
    /**
     * The percentage of traffic to sent to an AWS Region
     */
    trafficDialPercentage?: pulumi.Input<number>;
}
