// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PcaconnectoradTemplate extends pulumi.CustomResource {
    /**
     * Get an existing PcaconnectoradTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PcaconnectoradTemplateState, opts?: pulumi.CustomResourceOptions): PcaconnectoradTemplate {
        return new PcaconnectoradTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/pcaconnectoradTemplate:PcaconnectoradTemplate';

    /**
     * Returns true if the given object is an instance of PcaconnectoradTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PcaconnectoradTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PcaconnectoradTemplate.__pulumiType;
    }

    public readonly connectorArn!: pulumi.Output<string>;
    public readonly definition!: pulumi.Output<outputs.PcaconnectoradTemplateDefinition>;
    public readonly name!: pulumi.Output<string>;
    public readonly reenrollAllCertificateHolders!: pulumi.Output<boolean>;
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly templateArn!: pulumi.Output<string>;

    /**
     * Create a PcaconnectoradTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PcaconnectoradTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PcaconnectoradTemplateArgs | PcaconnectoradTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PcaconnectoradTemplateState | undefined;
            resourceInputs["connectorArn"] = state ? state.connectorArn : undefined;
            resourceInputs["definition"] = state ? state.definition : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reenrollAllCertificateHolders"] = state ? state.reenrollAllCertificateHolders : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateArn"] = state ? state.templateArn : undefined;
        } else {
            const args = argsOrState as PcaconnectoradTemplateArgs | undefined;
            if ((!args || args.connectorArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorArn'");
            }
            if ((!args || args.definition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'definition'");
            }
            resourceInputs["connectorArn"] = args ? args.connectorArn : undefined;
            resourceInputs["definition"] = args ? args.definition : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reenrollAllCertificateHolders"] = args ? args.reenrollAllCertificateHolders : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PcaconnectoradTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PcaconnectoradTemplate resources.
 */
export interface PcaconnectoradTemplateState {
    connectorArn?: pulumi.Input<string>;
    definition?: pulumi.Input<inputs.PcaconnectoradTemplateDefinition>;
    name?: pulumi.Input<string>;
    reenrollAllCertificateHolders?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    templateArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PcaconnectoradTemplate resource.
 */
export interface PcaconnectoradTemplateArgs {
    connectorArn: pulumi.Input<string>;
    definition: pulumi.Input<inputs.PcaconnectoradTemplateDefinition>;
    name?: pulumi.Input<string>;
    reenrollAllCertificateHolders?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
