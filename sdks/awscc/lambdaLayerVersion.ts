// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LambdaLayerVersion extends pulumi.CustomResource {
    /**
     * Get an existing LambdaLayerVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LambdaLayerVersionState, opts?: pulumi.CustomResourceOptions): LambdaLayerVersion {
        return new LambdaLayerVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lambdaLayerVersion:LambdaLayerVersion';

    /**
     * Returns true if the given object is an instance of LambdaLayerVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LambdaLayerVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LambdaLayerVersion.__pulumiType;
    }

    /**
     * A list of compatible instruction set architectures.
     */
    public readonly compatibleArchitectures!: pulumi.Output<string[]>;
    /**
     * A list of compatible function runtimes. Used for filtering with ListLayers and ListLayerVersions.
     */
    public readonly compatibleRuntimes!: pulumi.Output<string[]>;
    /**
     * The function layer archive.
     */
    public readonly content!: pulumi.Output<outputs.LambdaLayerVersionContent>;
    /**
     * The description of the version.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name or Amazon Resource Name (ARN) of the layer.
     */
    public readonly layerName!: pulumi.Output<string>;
    public /*out*/ readonly layerVersionArn!: pulumi.Output<string>;
    /**
     * The layer's software license.
     */
    public readonly licenseInfo!: pulumi.Output<string>;

    /**
     * Create a LambdaLayerVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LambdaLayerVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LambdaLayerVersionArgs | LambdaLayerVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LambdaLayerVersionState | undefined;
            resourceInputs["compatibleArchitectures"] = state ? state.compatibleArchitectures : undefined;
            resourceInputs["compatibleRuntimes"] = state ? state.compatibleRuntimes : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["layerName"] = state ? state.layerName : undefined;
            resourceInputs["layerVersionArn"] = state ? state.layerVersionArn : undefined;
            resourceInputs["licenseInfo"] = state ? state.licenseInfo : undefined;
        } else {
            const args = argsOrState as LambdaLayerVersionArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            resourceInputs["compatibleArchitectures"] = args ? args.compatibleArchitectures : undefined;
            resourceInputs["compatibleRuntimes"] = args ? args.compatibleRuntimes : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["layerName"] = args ? args.layerName : undefined;
            resourceInputs["licenseInfo"] = args ? args.licenseInfo : undefined;
            resourceInputs["layerVersionArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LambdaLayerVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LambdaLayerVersion resources.
 */
export interface LambdaLayerVersionState {
    /**
     * A list of compatible instruction set architectures.
     */
    compatibleArchitectures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of compatible function runtimes. Used for filtering with ListLayers and ListLayerVersions.
     */
    compatibleRuntimes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The function layer archive.
     */
    content?: pulumi.Input<inputs.LambdaLayerVersionContent>;
    /**
     * The description of the version.
     */
    description?: pulumi.Input<string>;
    /**
     * The name or Amazon Resource Name (ARN) of the layer.
     */
    layerName?: pulumi.Input<string>;
    layerVersionArn?: pulumi.Input<string>;
    /**
     * The layer's software license.
     */
    licenseInfo?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LambdaLayerVersion resource.
 */
export interface LambdaLayerVersionArgs {
    /**
     * A list of compatible instruction set architectures.
     */
    compatibleArchitectures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of compatible function runtimes. Used for filtering with ListLayers and ListLayerVersions.
     */
    compatibleRuntimes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The function layer archive.
     */
    content: pulumi.Input<inputs.LambdaLayerVersionContent>;
    /**
     * The description of the version.
     */
    description?: pulumi.Input<string>;
    /**
     * The name or Amazon Resource Name (ARN) of the layer.
     */
    layerName?: pulumi.Input<string>;
    /**
     * The layer's software license.
     */
    licenseInfo?: pulumi.Input<string>;
}
