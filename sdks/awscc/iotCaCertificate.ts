// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IotCaCertificate extends pulumi.CustomResource {
    /**
     * Get an existing IotCaCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotCaCertificateState, opts?: pulumi.CustomResourceOptions): IotCaCertificate {
        return new IotCaCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/iotCaCertificate:IotCaCertificate';

    /**
     * Returns true if the given object is an instance of IotCaCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotCaCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotCaCertificate.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoRegistrationStatus!: pulumi.Output<string>;
    public /*out*/ readonly caCertificateId!: pulumi.Output<string>;
    public readonly caCertificatePem!: pulumi.Output<string>;
    public readonly certificateMode!: pulumi.Output<string>;
    public readonly registrationConfig!: pulumi.Output<outputs.IotCaCertificateRegistrationConfig>;
    public readonly removeAutoRegistration!: pulumi.Output<boolean>;
    public readonly status!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.IotCaCertificateTag[]>;
    /**
     * The private key verification certificate.
     */
    public readonly verificationCertificatePem!: pulumi.Output<string>;

    /**
     * Create a IotCaCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IotCaCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotCaCertificateArgs | IotCaCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotCaCertificateState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoRegistrationStatus"] = state ? state.autoRegistrationStatus : undefined;
            resourceInputs["caCertificateId"] = state ? state.caCertificateId : undefined;
            resourceInputs["caCertificatePem"] = state ? state.caCertificatePem : undefined;
            resourceInputs["certificateMode"] = state ? state.certificateMode : undefined;
            resourceInputs["registrationConfig"] = state ? state.registrationConfig : undefined;
            resourceInputs["removeAutoRegistration"] = state ? state.removeAutoRegistration : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["verificationCertificatePem"] = state ? state.verificationCertificatePem : undefined;
        } else {
            const args = argsOrState as IotCaCertificateArgs | undefined;
            if ((!args || args.caCertificatePem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caCertificatePem'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            resourceInputs["autoRegistrationStatus"] = args ? args.autoRegistrationStatus : undefined;
            resourceInputs["caCertificatePem"] = args ? args.caCertificatePem : undefined;
            resourceInputs["certificateMode"] = args ? args.certificateMode : undefined;
            resourceInputs["registrationConfig"] = args ? args.registrationConfig : undefined;
            resourceInputs["removeAutoRegistration"] = args ? args.removeAutoRegistration : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["verificationCertificatePem"] = args ? args.verificationCertificatePem : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["caCertificateId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IotCaCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IotCaCertificate resources.
 */
export interface IotCaCertificateState {
    arn?: pulumi.Input<string>;
    autoRegistrationStatus?: pulumi.Input<string>;
    caCertificateId?: pulumi.Input<string>;
    caCertificatePem?: pulumi.Input<string>;
    certificateMode?: pulumi.Input<string>;
    registrationConfig?: pulumi.Input<inputs.IotCaCertificateRegistrationConfig>;
    removeAutoRegistration?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.IotCaCertificateTag>[]>;
    /**
     * The private key verification certificate.
     */
    verificationCertificatePem?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IotCaCertificate resource.
 */
export interface IotCaCertificateArgs {
    autoRegistrationStatus?: pulumi.Input<string>;
    caCertificatePem: pulumi.Input<string>;
    certificateMode?: pulumi.Input<string>;
    registrationConfig?: pulumi.Input<inputs.IotCaCertificateRegistrationConfig>;
    removeAutoRegistration?: pulumi.Input<boolean>;
    status: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.IotCaCertificateTag>[]>;
    /**
     * The private key verification certificate.
     */
    verificationCertificatePem?: pulumi.Input<string>;
}
