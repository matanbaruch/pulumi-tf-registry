// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EmrserverlessApplication extends pulumi.CustomResource {
    /**
     * Get an existing EmrserverlessApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmrserverlessApplicationState, opts?: pulumi.CustomResourceOptions): EmrserverlessApplication {
        return new EmrserverlessApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/emrserverlessApplication:EmrserverlessApplication';

    /**
     * Returns true if the given object is an instance of EmrserverlessApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EmrserverlessApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmrserverlessApplication.__pulumiType;
    }

    /**
     * The ID of the EMR Serverless Application.
     */
    public /*out*/ readonly applicationId!: pulumi.Output<string>;
    /**
     * The cpu architecture of an application.
     */
    public readonly architecture!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the EMR Serverless Application.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Configuration for Auto Start of Application.
     */
    public readonly autoStartConfiguration!: pulumi.Output<outputs.EmrserverlessApplicationAutoStartConfiguration>;
    /**
     * Configuration for Auto Stop of Application.
     */
    public readonly autoStopConfiguration!: pulumi.Output<outputs.EmrserverlessApplicationAutoStopConfiguration>;
    /**
     * The image configuration.
     */
    public readonly imageConfiguration!: pulumi.Output<outputs.EmrserverlessApplicationImageConfiguration>;
    /**
     * Initial capacity initialized when an Application is started.
     */
    public readonly initialCapacities!: pulumi.Output<outputs.EmrserverlessApplicationInitialCapacity[]>;
    /**
     * Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
     */
    public readonly maximumCapacity!: pulumi.Output<outputs.EmrserverlessApplicationMaximumCapacity>;
    /**
     * User friendly Application name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network Configuration for customer VPC connectivity.
     */
    public readonly networkConfiguration!: pulumi.Output<outputs.EmrserverlessApplicationNetworkConfiguration>;
    /**
     * EMR release label.
     */
    public readonly releaseLabel!: pulumi.Output<string>;
    /**
     * Tag map with key and value
     */
    public readonly tags!: pulumi.Output<outputs.EmrserverlessApplicationTag[]>;
    /**
     * The type of the application
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The key-value pairs that specify worker type to WorkerTypeSpecificationInput. This parameter must contain all valid
     * worker types for a Spark or Hive application. Valid worker types include Driver and Executor for Spark applications and
     * HiveDriver and TezTask for Hive applications. You can either set image details in this parameter for each worker type,
     * or in imageConfiguration for all worker types.
     */
    public readonly workerTypeSpecifications!: pulumi.Output<{[key: string]: outputs.EmrserverlessApplicationWorkerTypeSpecifications}>;

    /**
     * Create a EmrserverlessApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmrserverlessApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmrserverlessApplicationArgs | EmrserverlessApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmrserverlessApplicationState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoStartConfiguration"] = state ? state.autoStartConfiguration : undefined;
            resourceInputs["autoStopConfiguration"] = state ? state.autoStopConfiguration : undefined;
            resourceInputs["imageConfiguration"] = state ? state.imageConfiguration : undefined;
            resourceInputs["initialCapacities"] = state ? state.initialCapacities : undefined;
            resourceInputs["maximumCapacity"] = state ? state.maximumCapacity : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConfiguration"] = state ? state.networkConfiguration : undefined;
            resourceInputs["releaseLabel"] = state ? state.releaseLabel : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["workerTypeSpecifications"] = state ? state.workerTypeSpecifications : undefined;
        } else {
            const args = argsOrState as EmrserverlessApplicationArgs | undefined;
            if ((!args || args.releaseLabel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'releaseLabel'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["autoStartConfiguration"] = args ? args.autoStartConfiguration : undefined;
            resourceInputs["autoStopConfiguration"] = args ? args.autoStopConfiguration : undefined;
            resourceInputs["imageConfiguration"] = args ? args.imageConfiguration : undefined;
            resourceInputs["initialCapacities"] = args ? args.initialCapacities : undefined;
            resourceInputs["maximumCapacity"] = args ? args.maximumCapacity : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            resourceInputs["releaseLabel"] = args ? args.releaseLabel : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["workerTypeSpecifications"] = args ? args.workerTypeSpecifications : undefined;
            resourceInputs["applicationId"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EmrserverlessApplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EmrserverlessApplication resources.
 */
export interface EmrserverlessApplicationState {
    /**
     * The ID of the EMR Serverless Application.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * The cpu architecture of an application.
     */
    architecture?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the EMR Serverless Application.
     */
    arn?: pulumi.Input<string>;
    /**
     * Configuration for Auto Start of Application.
     */
    autoStartConfiguration?: pulumi.Input<inputs.EmrserverlessApplicationAutoStartConfiguration>;
    /**
     * Configuration for Auto Stop of Application.
     */
    autoStopConfiguration?: pulumi.Input<inputs.EmrserverlessApplicationAutoStopConfiguration>;
    /**
     * The image configuration.
     */
    imageConfiguration?: pulumi.Input<inputs.EmrserverlessApplicationImageConfiguration>;
    /**
     * Initial capacity initialized when an Application is started.
     */
    initialCapacities?: pulumi.Input<pulumi.Input<inputs.EmrserverlessApplicationInitialCapacity>[]>;
    /**
     * Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
     */
    maximumCapacity?: pulumi.Input<inputs.EmrserverlessApplicationMaximumCapacity>;
    /**
     * User friendly Application name.
     */
    name?: pulumi.Input<string>;
    /**
     * Network Configuration for customer VPC connectivity.
     */
    networkConfiguration?: pulumi.Input<inputs.EmrserverlessApplicationNetworkConfiguration>;
    /**
     * EMR release label.
     */
    releaseLabel?: pulumi.Input<string>;
    /**
     * Tag map with key and value
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EmrserverlessApplicationTag>[]>;
    /**
     * The type of the application
     */
    type?: pulumi.Input<string>;
    /**
     * The key-value pairs that specify worker type to WorkerTypeSpecificationInput. This parameter must contain all valid
     * worker types for a Spark or Hive application. Valid worker types include Driver and Executor for Spark applications and
     * HiveDriver and TezTask for Hive applications. You can either set image details in this parameter for each worker type,
     * or in imageConfiguration for all worker types.
     */
    workerTypeSpecifications?: pulumi.Input<{[key: string]: pulumi.Input<inputs.EmrserverlessApplicationWorkerTypeSpecifications>}>;
}

/**
 * The set of arguments for constructing a EmrserverlessApplication resource.
 */
export interface EmrserverlessApplicationArgs {
    /**
     * The cpu architecture of an application.
     */
    architecture?: pulumi.Input<string>;
    /**
     * Configuration for Auto Start of Application.
     */
    autoStartConfiguration?: pulumi.Input<inputs.EmrserverlessApplicationAutoStartConfiguration>;
    /**
     * Configuration for Auto Stop of Application.
     */
    autoStopConfiguration?: pulumi.Input<inputs.EmrserverlessApplicationAutoStopConfiguration>;
    /**
     * The image configuration.
     */
    imageConfiguration?: pulumi.Input<inputs.EmrserverlessApplicationImageConfiguration>;
    /**
     * Initial capacity initialized when an Application is started.
     */
    initialCapacities?: pulumi.Input<pulumi.Input<inputs.EmrserverlessApplicationInitialCapacity>[]>;
    /**
     * Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
     */
    maximumCapacity?: pulumi.Input<inputs.EmrserverlessApplicationMaximumCapacity>;
    /**
     * User friendly Application name.
     */
    name?: pulumi.Input<string>;
    /**
     * Network Configuration for customer VPC connectivity.
     */
    networkConfiguration?: pulumi.Input<inputs.EmrserverlessApplicationNetworkConfiguration>;
    /**
     * EMR release label.
     */
    releaseLabel: pulumi.Input<string>;
    /**
     * Tag map with key and value
     */
    tags?: pulumi.Input<pulumi.Input<inputs.EmrserverlessApplicationTag>[]>;
    /**
     * The type of the application
     */
    type: pulumi.Input<string>;
    /**
     * The key-value pairs that specify worker type to WorkerTypeSpecificationInput. This parameter must contain all valid
     * worker types for a Spark or Hive application. Valid worker types include Driver and Executor for Spark applications and
     * HiveDriver and TezTask for Hive applications. You can either set image details in this parameter for each worker type,
     * or in imageConfiguration for all worker types.
     */
    workerTypeSpecifications?: pulumi.Input<{[key: string]: pulumi.Input<inputs.EmrserverlessApplicationWorkerTypeSpecifications>}>;
}
