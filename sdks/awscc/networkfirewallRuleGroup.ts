// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkfirewallRuleGroup extends pulumi.CustomResource {
    /**
     * Get an existing NetworkfirewallRuleGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkfirewallRuleGroupState, opts?: pulumi.CustomResourceOptions): NetworkfirewallRuleGroup {
        return new NetworkfirewallRuleGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/networkfirewallRuleGroup:NetworkfirewallRuleGroup';

    /**
     * Returns true if the given object is an instance of NetworkfirewallRuleGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkfirewallRuleGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkfirewallRuleGroup.__pulumiType;
    }

    public readonly capacity!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string>;
    public readonly ruleGroup!: pulumi.Output<outputs.NetworkfirewallRuleGroupRuleGroup>;
    /**
     * A resource ARN.
     */
    public /*out*/ readonly ruleGroupArn!: pulumi.Output<string>;
    public /*out*/ readonly ruleGroupId!: pulumi.Output<string>;
    public readonly ruleGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.NetworkfirewallRuleGroupTag[]>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a NetworkfirewallRuleGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkfirewallRuleGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkfirewallRuleGroupArgs | NetworkfirewallRuleGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkfirewallRuleGroupState | undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ruleGroup"] = state ? state.ruleGroup : undefined;
            resourceInputs["ruleGroupArn"] = state ? state.ruleGroupArn : undefined;
            resourceInputs["ruleGroupId"] = state ? state.ruleGroupId : undefined;
            resourceInputs["ruleGroupName"] = state ? state.ruleGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NetworkfirewallRuleGroupArgs | undefined;
            if ((!args || args.capacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if ((!args || args.ruleGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleGroupName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ruleGroup"] = args ? args.ruleGroup : undefined;
            resourceInputs["ruleGroupName"] = args ? args.ruleGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["ruleGroupArn"] = undefined /*out*/;
            resourceInputs["ruleGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkfirewallRuleGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkfirewallRuleGroup resources.
 */
export interface NetworkfirewallRuleGroupState {
    capacity?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    ruleGroup?: pulumi.Input<inputs.NetworkfirewallRuleGroupRuleGroup>;
    /**
     * A resource ARN.
     */
    ruleGroupArn?: pulumi.Input<string>;
    ruleGroupId?: pulumi.Input<string>;
    ruleGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallRuleGroupTag>[]>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkfirewallRuleGroup resource.
 */
export interface NetworkfirewallRuleGroupArgs {
    capacity: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    ruleGroup?: pulumi.Input<inputs.NetworkfirewallRuleGroupRuleGroup>;
    ruleGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallRuleGroupTag>[]>;
    type: pulumi.Input<string>;
}
