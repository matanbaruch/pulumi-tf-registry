// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GameliftMatchmakingConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing GameliftMatchmakingConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GameliftMatchmakingConfigurationState, opts?: pulumi.CustomResourceOptions): GameliftMatchmakingConfiguration {
        return new GameliftMatchmakingConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/gameliftMatchmakingConfiguration:GameliftMatchmakingConfiguration';

    /**
     * Returns true if the given object is an instance of GameliftMatchmakingConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GameliftMatchmakingConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GameliftMatchmakingConfiguration.__pulumiType;
    }

    /**
     * A flag that indicates whether a match that was created with this configuration must be accepted by the matched players
     */
    public readonly acceptanceRequired!: pulumi.Output<boolean>;
    /**
     * The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
     */
    public readonly acceptanceTimeoutSeconds!: pulumi.Output<number>;
    /**
     * The number of player slots in a match to keep open for future players.
     */
    public readonly additionalPlayerCount!: pulumi.Output<number>;
    /**
     * The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift matchmaking configuration resource and uniquely
     * identifies it.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The method used to backfill game sessions created with this matchmaking configuration.
     */
    public readonly backfillMode!: pulumi.Output<string>;
    /**
     * A time stamp indicating when this data object was created.
     */
    public readonly creationTime!: pulumi.Output<string>;
    /**
     * Information to attach to all events related to the matchmaking configuration.
     */
    public readonly customEventData!: pulumi.Output<string>;
    /**
     * A descriptive label that is associated with matchmaking configuration.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone
     * matchmaking solution.
     */
    public readonly flexMatchMode!: pulumi.Output<string>;
    /**
     * A set of custom properties for a game session, formatted as key:value pairs.
     */
    public readonly gameProperties!: pulumi.Output<outputs.GameliftMatchmakingConfigurationGameProperty[]>;
    /**
     * A set of custom game session properties, formatted as a single string value.
     */
    public readonly gameSessionData!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies
     * it.
     */
    public readonly gameSessionQueueArns!: pulumi.Output<string[]>;
    /**
     * A unique identifier for the matchmaking configuration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An SNS topic ARN that is set up to receive matchmaking notifications.
     */
    public readonly notificationTarget!: pulumi.Output<string>;
    /**
     * The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
     */
    public readonly requestTimeoutSeconds!: pulumi.Output<number>;
    /**
     * The Amazon Resource Name (ARN) associated with the GameLift matchmaking rule set resource that this configuration uses.
     */
    public readonly ruleSetArn!: pulumi.Output<string>;
    /**
     * A unique identifier for the matchmaking rule set to use with this configuration.
     */
    public readonly ruleSetName!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.GameliftMatchmakingConfigurationTag[]>;

    /**
     * Create a GameliftMatchmakingConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GameliftMatchmakingConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GameliftMatchmakingConfigurationArgs | GameliftMatchmakingConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GameliftMatchmakingConfigurationState | undefined;
            resourceInputs["acceptanceRequired"] = state ? state.acceptanceRequired : undefined;
            resourceInputs["acceptanceTimeoutSeconds"] = state ? state.acceptanceTimeoutSeconds : undefined;
            resourceInputs["additionalPlayerCount"] = state ? state.additionalPlayerCount : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["backfillMode"] = state ? state.backfillMode : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["customEventData"] = state ? state.customEventData : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["flexMatchMode"] = state ? state.flexMatchMode : undefined;
            resourceInputs["gameProperties"] = state ? state.gameProperties : undefined;
            resourceInputs["gameSessionData"] = state ? state.gameSessionData : undefined;
            resourceInputs["gameSessionQueueArns"] = state ? state.gameSessionQueueArns : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationTarget"] = state ? state.notificationTarget : undefined;
            resourceInputs["requestTimeoutSeconds"] = state ? state.requestTimeoutSeconds : undefined;
            resourceInputs["ruleSetArn"] = state ? state.ruleSetArn : undefined;
            resourceInputs["ruleSetName"] = state ? state.ruleSetName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as GameliftMatchmakingConfigurationArgs | undefined;
            if ((!args || args.acceptanceRequired === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceptanceRequired'");
            }
            if ((!args || args.requestTimeoutSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requestTimeoutSeconds'");
            }
            if ((!args || args.ruleSetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleSetName'");
            }
            resourceInputs["acceptanceRequired"] = args ? args.acceptanceRequired : undefined;
            resourceInputs["acceptanceTimeoutSeconds"] = args ? args.acceptanceTimeoutSeconds : undefined;
            resourceInputs["additionalPlayerCount"] = args ? args.additionalPlayerCount : undefined;
            resourceInputs["backfillMode"] = args ? args.backfillMode : undefined;
            resourceInputs["creationTime"] = args ? args.creationTime : undefined;
            resourceInputs["customEventData"] = args ? args.customEventData : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["flexMatchMode"] = args ? args.flexMatchMode : undefined;
            resourceInputs["gameProperties"] = args ? args.gameProperties : undefined;
            resourceInputs["gameSessionData"] = args ? args.gameSessionData : undefined;
            resourceInputs["gameSessionQueueArns"] = args ? args.gameSessionQueueArns : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationTarget"] = args ? args.notificationTarget : undefined;
            resourceInputs["requestTimeoutSeconds"] = args ? args.requestTimeoutSeconds : undefined;
            resourceInputs["ruleSetArn"] = args ? args.ruleSetArn : undefined;
            resourceInputs["ruleSetName"] = args ? args.ruleSetName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GameliftMatchmakingConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GameliftMatchmakingConfiguration resources.
 */
export interface GameliftMatchmakingConfigurationState {
    /**
     * A flag that indicates whether a match that was created with this configuration must be accepted by the matched players
     */
    acceptanceRequired?: pulumi.Input<boolean>;
    /**
     * The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
     */
    acceptanceTimeoutSeconds?: pulumi.Input<number>;
    /**
     * The number of player slots in a match to keep open for future players.
     */
    additionalPlayerCount?: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift matchmaking configuration resource and uniquely
     * identifies it.
     */
    arn?: pulumi.Input<string>;
    /**
     * The method used to backfill game sessions created with this matchmaking configuration.
     */
    backfillMode?: pulumi.Input<string>;
    /**
     * A time stamp indicating when this data object was created.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * Information to attach to all events related to the matchmaking configuration.
     */
    customEventData?: pulumi.Input<string>;
    /**
     * A descriptive label that is associated with matchmaking configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone
     * matchmaking solution.
     */
    flexMatchMode?: pulumi.Input<string>;
    /**
     * A set of custom properties for a game session, formatted as key:value pairs.
     */
    gameProperties?: pulumi.Input<pulumi.Input<inputs.GameliftMatchmakingConfigurationGameProperty>[]>;
    /**
     * A set of custom game session properties, formatted as a single string value.
     */
    gameSessionData?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies
     * it.
     */
    gameSessionQueueArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A unique identifier for the matchmaking configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * An SNS topic ARN that is set up to receive matchmaking notifications.
     */
    notificationTarget?: pulumi.Input<string>;
    /**
     * The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
     */
    requestTimeoutSeconds?: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) associated with the GameLift matchmaking rule set resource that this configuration uses.
     */
    ruleSetArn?: pulumi.Input<string>;
    /**
     * A unique identifier for the matchmaking rule set to use with this configuration.
     */
    ruleSetName?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.GameliftMatchmakingConfigurationTag>[]>;
}

/**
 * The set of arguments for constructing a GameliftMatchmakingConfiguration resource.
 */
export interface GameliftMatchmakingConfigurationArgs {
    /**
     * A flag that indicates whether a match that was created with this configuration must be accepted by the matched players
     */
    acceptanceRequired: pulumi.Input<boolean>;
    /**
     * The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
     */
    acceptanceTimeoutSeconds?: pulumi.Input<number>;
    /**
     * The number of player slots in a match to keep open for future players.
     */
    additionalPlayerCount?: pulumi.Input<number>;
    /**
     * The method used to backfill game sessions created with this matchmaking configuration.
     */
    backfillMode?: pulumi.Input<string>;
    /**
     * A time stamp indicating when this data object was created.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * Information to attach to all events related to the matchmaking configuration.
     */
    customEventData?: pulumi.Input<string>;
    /**
     * A descriptive label that is associated with matchmaking configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone
     * matchmaking solution.
     */
    flexMatchMode?: pulumi.Input<string>;
    /**
     * A set of custom properties for a game session, formatted as key:value pairs.
     */
    gameProperties?: pulumi.Input<pulumi.Input<inputs.GameliftMatchmakingConfigurationGameProperty>[]>;
    /**
     * A set of custom game session properties, formatted as a single string value.
     */
    gameSessionData?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies
     * it.
     */
    gameSessionQueueArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A unique identifier for the matchmaking configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * An SNS topic ARN that is set up to receive matchmaking notifications.
     */
    notificationTarget?: pulumi.Input<string>;
    /**
     * The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
     */
    requestTimeoutSeconds: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) associated with the GameLift matchmaking rule set resource that this configuration uses.
     */
    ruleSetArn?: pulumi.Input<string>;
    /**
     * A unique identifier for the matchmaking rule set to use with this configuration.
     */
    ruleSetName: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.GameliftMatchmakingConfigurationTag>[]>;
}
