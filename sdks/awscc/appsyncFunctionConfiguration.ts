// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppsyncFunctionConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing AppsyncFunctionConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppsyncFunctionConfigurationState, opts?: pulumi.CustomResourceOptions): AppsyncFunctionConfiguration {
        return new AppsyncFunctionConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/appsyncFunctionConfiguration:AppsyncFunctionConfiguration';

    /**
     * Returns true if the given object is an instance of AppsyncFunctionConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppsyncFunctionConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppsyncFunctionConfiguration.__pulumiType;
    }

    /**
     * The AWS AppSync GraphQL API that you want to attach using this function.
     */
    public readonly apiId!: pulumi.Output<string>;
    /**
     * The resolver code that contains the request and response functions. When code is used, the runtime is required. The
     * runtime value must be APPSYNC_JS.
     */
    public readonly code!: pulumi.Output<string>;
    /**
     * The Amazon S3 endpoint (where the code is located??).
     */
    public readonly codeS3Location!: pulumi.Output<string>;
    /**
     * The name of data source this function will attach.
     */
    public readonly dataSourceName!: pulumi.Output<string>;
    /**
     * The function description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The ARN for the function generated by the service
     */
    public /*out*/ readonly functionArn!: pulumi.Output<string>;
    /**
     * The unique identifier for the function generated by the service
     */
    public /*out*/ readonly functionId!: pulumi.Output<string>;
    /**
     * The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
     */
    public readonly functionVersion!: pulumi.Output<string>;
    /**
     * The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke
     * operation.
     */
    public readonly maxBatchSize!: pulumi.Output<number>;
    /**
     * The name of the function.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
     */
    public readonly requestMappingTemplate!: pulumi.Output<string>;
    /**
     * Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution
     * strategy, should be performed when the resolver is invoked.
     */
    public readonly requestMappingTemplateS3Location!: pulumi.Output<string>;
    /**
     * The Function response mapping template.
     */
    public readonly responseMappingTemplate!: pulumi.Output<string>;
    /**
     * The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template
     * file in Amazon S3 rather than embedding it in your CloudFormation template.
     */
    public readonly responseMappingTemplateS3Location!: pulumi.Output<string>;
    /**
     * Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of
     * the runtime to use. Note that if a runtime is specified, code must also be specified.
     */
    public readonly runtime!: pulumi.Output<outputs.AppsyncFunctionConfigurationRuntime>;
    /**
     * Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to
     * use when the resolver is invoked.
     */
    public readonly syncConfig!: pulumi.Output<outputs.AppsyncFunctionConfigurationSyncConfig>;

    /**
     * Create a AppsyncFunctionConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppsyncFunctionConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppsyncFunctionConfigurationArgs | AppsyncFunctionConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppsyncFunctionConfigurationState | undefined;
            resourceInputs["apiId"] = state ? state.apiId : undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["codeS3Location"] = state ? state.codeS3Location : undefined;
            resourceInputs["dataSourceName"] = state ? state.dataSourceName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["functionArn"] = state ? state.functionArn : undefined;
            resourceInputs["functionId"] = state ? state.functionId : undefined;
            resourceInputs["functionVersion"] = state ? state.functionVersion : undefined;
            resourceInputs["maxBatchSize"] = state ? state.maxBatchSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["requestMappingTemplate"] = state ? state.requestMappingTemplate : undefined;
            resourceInputs["requestMappingTemplateS3Location"] = state ? state.requestMappingTemplateS3Location : undefined;
            resourceInputs["responseMappingTemplate"] = state ? state.responseMappingTemplate : undefined;
            resourceInputs["responseMappingTemplateS3Location"] = state ? state.responseMappingTemplateS3Location : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["syncConfig"] = state ? state.syncConfig : undefined;
        } else {
            const args = argsOrState as AppsyncFunctionConfigurationArgs | undefined;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.dataSourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceName'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["codeS3Location"] = args ? args.codeS3Location : undefined;
            resourceInputs["dataSourceName"] = args ? args.dataSourceName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["functionVersion"] = args ? args.functionVersion : undefined;
            resourceInputs["maxBatchSize"] = args ? args.maxBatchSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requestMappingTemplate"] = args ? args.requestMappingTemplate : undefined;
            resourceInputs["requestMappingTemplateS3Location"] = args ? args.requestMappingTemplateS3Location : undefined;
            resourceInputs["responseMappingTemplate"] = args ? args.responseMappingTemplate : undefined;
            resourceInputs["responseMappingTemplateS3Location"] = args ? args.responseMappingTemplateS3Location : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["syncConfig"] = args ? args.syncConfig : undefined;
            resourceInputs["functionArn"] = undefined /*out*/;
            resourceInputs["functionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppsyncFunctionConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppsyncFunctionConfiguration resources.
 */
export interface AppsyncFunctionConfigurationState {
    /**
     * The AWS AppSync GraphQL API that you want to attach using this function.
     */
    apiId?: pulumi.Input<string>;
    /**
     * The resolver code that contains the request and response functions. When code is used, the runtime is required. The
     * runtime value must be APPSYNC_JS.
     */
    code?: pulumi.Input<string>;
    /**
     * The Amazon S3 endpoint (where the code is located??).
     */
    codeS3Location?: pulumi.Input<string>;
    /**
     * The name of data source this function will attach.
     */
    dataSourceName?: pulumi.Input<string>;
    /**
     * The function description.
     */
    description?: pulumi.Input<string>;
    /**
     * The ARN for the function generated by the service
     */
    functionArn?: pulumi.Input<string>;
    /**
     * The unique identifier for the function generated by the service
     */
    functionId?: pulumi.Input<string>;
    /**
     * The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
     */
    functionVersion?: pulumi.Input<string>;
    /**
     * The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke
     * operation.
     */
    maxBatchSize?: pulumi.Input<number>;
    /**
     * The name of the function.
     */
    name?: pulumi.Input<string>;
    /**
     * The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
     */
    requestMappingTemplate?: pulumi.Input<string>;
    /**
     * Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution
     * strategy, should be performed when the resolver is invoked.
     */
    requestMappingTemplateS3Location?: pulumi.Input<string>;
    /**
     * The Function response mapping template.
     */
    responseMappingTemplate?: pulumi.Input<string>;
    /**
     * The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template
     * file in Amazon S3 rather than embedding it in your CloudFormation template.
     */
    responseMappingTemplateS3Location?: pulumi.Input<string>;
    /**
     * Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of
     * the runtime to use. Note that if a runtime is specified, code must also be specified.
     */
    runtime?: pulumi.Input<inputs.AppsyncFunctionConfigurationRuntime>;
    /**
     * Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to
     * use when the resolver is invoked.
     */
    syncConfig?: pulumi.Input<inputs.AppsyncFunctionConfigurationSyncConfig>;
}

/**
 * The set of arguments for constructing a AppsyncFunctionConfiguration resource.
 */
export interface AppsyncFunctionConfigurationArgs {
    /**
     * The AWS AppSync GraphQL API that you want to attach using this function.
     */
    apiId: pulumi.Input<string>;
    /**
     * The resolver code that contains the request and response functions. When code is used, the runtime is required. The
     * runtime value must be APPSYNC_JS.
     */
    code?: pulumi.Input<string>;
    /**
     * The Amazon S3 endpoint (where the code is located??).
     */
    codeS3Location?: pulumi.Input<string>;
    /**
     * The name of data source this function will attach.
     */
    dataSourceName: pulumi.Input<string>;
    /**
     * The function description.
     */
    description?: pulumi.Input<string>;
    /**
     * The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
     */
    functionVersion?: pulumi.Input<string>;
    /**
     * The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke
     * operation.
     */
    maxBatchSize?: pulumi.Input<number>;
    /**
     * The name of the function.
     */
    name?: pulumi.Input<string>;
    /**
     * The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
     */
    requestMappingTemplate?: pulumi.Input<string>;
    /**
     * Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution
     * strategy, should be performed when the resolver is invoked.
     */
    requestMappingTemplateS3Location?: pulumi.Input<string>;
    /**
     * The Function response mapping template.
     */
    responseMappingTemplate?: pulumi.Input<string>;
    /**
     * The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template
     * file in Amazon S3 rather than embedding it in your CloudFormation template.
     */
    responseMappingTemplateS3Location?: pulumi.Input<string>;
    /**
     * Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of
     * the runtime to use. Note that if a runtime is specified, code must also be specified.
     */
    runtime?: pulumi.Input<inputs.AppsyncFunctionConfigurationRuntime>;
    /**
     * Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to
     * use when the resolver is invoked.
     */
    syncConfig?: pulumi.Input<inputs.AppsyncFunctionConfigurationSyncConfig>;
}
