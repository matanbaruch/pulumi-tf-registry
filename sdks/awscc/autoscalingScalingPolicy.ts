// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutoscalingScalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AutoscalingScalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoscalingScalingPolicyState, opts?: pulumi.CustomResourceOptions): AutoscalingScalingPolicy {
        return new AutoscalingScalingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/autoscalingScalingPolicy:AutoscalingScalingPolicy';

    /**
     * Returns true if the given object is an instance of AutoscalingScalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoscalingScalingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoscalingScalingPolicy.__pulumiType;
    }

    /**
     * Specifies how the scaling adjustment is interpreted. The valid values are ChangeInCapacity, ExactCapacity, and
     * PercentChangeInCapacity.
     */
    public readonly adjustmentType!: pulumi.Output<string>;
    /**
     * The ARN of the AutoScaling scaling policy
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The name of the Auto Scaling group.
     */
    public readonly autoScalingGroupName!: pulumi.Output<string>;
    /**
     * The duration of the policy's cooldown period, in seconds. When a cooldown period is specified here, it overrides the
     * default cooldown period defined for the Auto Scaling group.
     */
    public readonly cooldown!: pulumi.Output<string>;
    /**
     * The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. If not
     * provided, the default is to use the value from the default cooldown period for the Auto Scaling group. Valid only if the
     * policy type is TargetTrackingScaling or StepScaling.
     */
    public readonly estimatedInstanceWarmup!: pulumi.Output<number>;
    /**
     * The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average. If the aggregation
     * type is null, the value is treated as Average. Valid only if the policy type is StepScaling.
     */
    public readonly metricAggregationType!: pulumi.Output<string>;
    /**
     * The minimum value to scale by when the adjustment type is PercentChangeInCapacity. For example, suppose that you create
     * a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a MinAdjustmentMagnitude of 2. If
     * the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a
     * MinAdjustmentMagnitude of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.
     */
    public readonly minAdjustmentMagnitude!: pulumi.Output<number>;
    public /*out*/ readonly policyName!: pulumi.Output<string>;
    /**
     * One of the following policy types: TargetTrackingScaling, StepScaling, SimpleScaling (default), PredictiveScaling
     */
    public readonly policyType!: pulumi.Output<string>;
    /**
     * A predictive scaling policy. Includes support for predefined metrics only.
     */
    public readonly predictiveScalingConfiguration!: pulumi.Output<outputs.AutoscalingScalingPolicyPredictiveScalingConfiguration>;
    /**
     * The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity
     * while a negative number removes from the current capacity. For exact capacity, you must specify a positive value.
     * Required if the policy type is SimpleScaling. (Not used with any other policy type.)
     */
    public readonly scalingAdjustment!: pulumi.Output<number>;
    /**
     * A set of adjustments that enable you to scale based on the size of the alarm breach. Required if the policy type is
     * StepScaling. (Not used with any other policy type.)
     */
    public readonly stepAdjustments!: pulumi.Output<outputs.AutoscalingScalingPolicyStepAdjustment[]>;
    /**
     * A target tracking scaling policy. Includes support for predefined or customized metrics.
     */
    public readonly targetTrackingConfiguration!: pulumi.Output<outputs.AutoscalingScalingPolicyTargetTrackingConfiguration>;

    /**
     * Create a AutoscalingScalingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoscalingScalingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoscalingScalingPolicyArgs | AutoscalingScalingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoscalingScalingPolicyState | undefined;
            resourceInputs["adjustmentType"] = state ? state.adjustmentType : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoScalingGroupName"] = state ? state.autoScalingGroupName : undefined;
            resourceInputs["cooldown"] = state ? state.cooldown : undefined;
            resourceInputs["estimatedInstanceWarmup"] = state ? state.estimatedInstanceWarmup : undefined;
            resourceInputs["metricAggregationType"] = state ? state.metricAggregationType : undefined;
            resourceInputs["minAdjustmentMagnitude"] = state ? state.minAdjustmentMagnitude : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["predictiveScalingConfiguration"] = state ? state.predictiveScalingConfiguration : undefined;
            resourceInputs["scalingAdjustment"] = state ? state.scalingAdjustment : undefined;
            resourceInputs["stepAdjustments"] = state ? state.stepAdjustments : undefined;
            resourceInputs["targetTrackingConfiguration"] = state ? state.targetTrackingConfiguration : undefined;
        } else {
            const args = argsOrState as AutoscalingScalingPolicyArgs | undefined;
            if ((!args || args.autoScalingGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoScalingGroupName'");
            }
            resourceInputs["adjustmentType"] = args ? args.adjustmentType : undefined;
            resourceInputs["autoScalingGroupName"] = args ? args.autoScalingGroupName : undefined;
            resourceInputs["cooldown"] = args ? args.cooldown : undefined;
            resourceInputs["estimatedInstanceWarmup"] = args ? args.estimatedInstanceWarmup : undefined;
            resourceInputs["metricAggregationType"] = args ? args.metricAggregationType : undefined;
            resourceInputs["minAdjustmentMagnitude"] = args ? args.minAdjustmentMagnitude : undefined;
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["predictiveScalingConfiguration"] = args ? args.predictiveScalingConfiguration : undefined;
            resourceInputs["scalingAdjustment"] = args ? args.scalingAdjustment : undefined;
            resourceInputs["stepAdjustments"] = args ? args.stepAdjustments : undefined;
            resourceInputs["targetTrackingConfiguration"] = args ? args.targetTrackingConfiguration : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["policyName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoscalingScalingPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutoscalingScalingPolicy resources.
 */
export interface AutoscalingScalingPolicyState {
    /**
     * Specifies how the scaling adjustment is interpreted. The valid values are ChangeInCapacity, ExactCapacity, and
     * PercentChangeInCapacity.
     */
    adjustmentType?: pulumi.Input<string>;
    /**
     * The ARN of the AutoScaling scaling policy
     */
    arn?: pulumi.Input<string>;
    /**
     * The name of the Auto Scaling group.
     */
    autoScalingGroupName?: pulumi.Input<string>;
    /**
     * The duration of the policy's cooldown period, in seconds. When a cooldown period is specified here, it overrides the
     * default cooldown period defined for the Auto Scaling group.
     */
    cooldown?: pulumi.Input<string>;
    /**
     * The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. If not
     * provided, the default is to use the value from the default cooldown period for the Auto Scaling group. Valid only if the
     * policy type is TargetTrackingScaling or StepScaling.
     */
    estimatedInstanceWarmup?: pulumi.Input<number>;
    /**
     * The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average. If the aggregation
     * type is null, the value is treated as Average. Valid only if the policy type is StepScaling.
     */
    metricAggregationType?: pulumi.Input<string>;
    /**
     * The minimum value to scale by when the adjustment type is PercentChangeInCapacity. For example, suppose that you create
     * a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a MinAdjustmentMagnitude of 2. If
     * the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a
     * MinAdjustmentMagnitude of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.
     */
    minAdjustmentMagnitude?: pulumi.Input<number>;
    policyName?: pulumi.Input<string>;
    /**
     * One of the following policy types: TargetTrackingScaling, StepScaling, SimpleScaling (default), PredictiveScaling
     */
    policyType?: pulumi.Input<string>;
    /**
     * A predictive scaling policy. Includes support for predefined metrics only.
     */
    predictiveScalingConfiguration?: pulumi.Input<inputs.AutoscalingScalingPolicyPredictiveScalingConfiguration>;
    /**
     * The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity
     * while a negative number removes from the current capacity. For exact capacity, you must specify a positive value.
     * Required if the policy type is SimpleScaling. (Not used with any other policy type.)
     */
    scalingAdjustment?: pulumi.Input<number>;
    /**
     * A set of adjustments that enable you to scale based on the size of the alarm breach. Required if the policy type is
     * StepScaling. (Not used with any other policy type.)
     */
    stepAdjustments?: pulumi.Input<pulumi.Input<inputs.AutoscalingScalingPolicyStepAdjustment>[]>;
    /**
     * A target tracking scaling policy. Includes support for predefined or customized metrics.
     */
    targetTrackingConfiguration?: pulumi.Input<inputs.AutoscalingScalingPolicyTargetTrackingConfiguration>;
}

/**
 * The set of arguments for constructing a AutoscalingScalingPolicy resource.
 */
export interface AutoscalingScalingPolicyArgs {
    /**
     * Specifies how the scaling adjustment is interpreted. The valid values are ChangeInCapacity, ExactCapacity, and
     * PercentChangeInCapacity.
     */
    adjustmentType?: pulumi.Input<string>;
    /**
     * The name of the Auto Scaling group.
     */
    autoScalingGroupName: pulumi.Input<string>;
    /**
     * The duration of the policy's cooldown period, in seconds. When a cooldown period is specified here, it overrides the
     * default cooldown period defined for the Auto Scaling group.
     */
    cooldown?: pulumi.Input<string>;
    /**
     * The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. If not
     * provided, the default is to use the value from the default cooldown period for the Auto Scaling group. Valid only if the
     * policy type is TargetTrackingScaling or StepScaling.
     */
    estimatedInstanceWarmup?: pulumi.Input<number>;
    /**
     * The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average. If the aggregation
     * type is null, the value is treated as Average. Valid only if the policy type is StepScaling.
     */
    metricAggregationType?: pulumi.Input<string>;
    /**
     * The minimum value to scale by when the adjustment type is PercentChangeInCapacity. For example, suppose that you create
     * a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a MinAdjustmentMagnitude of 2. If
     * the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a
     * MinAdjustmentMagnitude of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.
     */
    minAdjustmentMagnitude?: pulumi.Input<number>;
    /**
     * One of the following policy types: TargetTrackingScaling, StepScaling, SimpleScaling (default), PredictiveScaling
     */
    policyType?: pulumi.Input<string>;
    /**
     * A predictive scaling policy. Includes support for predefined metrics only.
     */
    predictiveScalingConfiguration?: pulumi.Input<inputs.AutoscalingScalingPolicyPredictiveScalingConfiguration>;
    /**
     * The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity
     * while a negative number removes from the current capacity. For exact capacity, you must specify a positive value.
     * Required if the policy type is SimpleScaling. (Not used with any other policy type.)
     */
    scalingAdjustment?: pulumi.Input<number>;
    /**
     * A set of adjustments that enable you to scale based on the size of the alarm breach. Required if the policy type is
     * StepScaling. (Not used with any other policy type.)
     */
    stepAdjustments?: pulumi.Input<pulumi.Input<inputs.AutoscalingScalingPolicyStepAdjustment>[]>;
    /**
     * A target tracking scaling policy. Includes support for predefined or customized metrics.
     */
    targetTrackingConfiguration?: pulumi.Input<inputs.AutoscalingScalingPolicyTargetTrackingConfiguration>;
}
