// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IotsitewiseDashboard extends pulumi.CustomResource {
    /**
     * Get an existing IotsitewiseDashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotsitewiseDashboardState, opts?: pulumi.CustomResourceOptions): IotsitewiseDashboard {
        return new IotsitewiseDashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/iotsitewiseDashboard:IotsitewiseDashboard';

    /**
     * Returns true if the given object is an instance of IotsitewiseDashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotsitewiseDashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotsitewiseDashboard.__pulumiType;
    }

    /**
     * The ARN of the dashboard.
     */
    public /*out*/ readonly dashboardArn!: pulumi.Output<string>;
    /**
     * The dashboard definition specified in a JSON literal.
     */
    public readonly dashboardDefinition!: pulumi.Output<string>;
    /**
     * A description for the dashboard.
     */
    public readonly dashboardDescription!: pulumi.Output<string>;
    /**
     * The ID of the dashboard.
     */
    public /*out*/ readonly dashboardId!: pulumi.Output<string>;
    /**
     * A friendly name for the dashboard.
     */
    public readonly dashboardName!: pulumi.Output<string>;
    /**
     * The ID of the project in which to create the dashboard.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * A list of key-value pairs that contain metadata for the dashboard.
     */
    public readonly tags!: pulumi.Output<outputs.IotsitewiseDashboardTag[]>;

    /**
     * Create a IotsitewiseDashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IotsitewiseDashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotsitewiseDashboardArgs | IotsitewiseDashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotsitewiseDashboardState | undefined;
            resourceInputs["dashboardArn"] = state ? state.dashboardArn : undefined;
            resourceInputs["dashboardDefinition"] = state ? state.dashboardDefinition : undefined;
            resourceInputs["dashboardDescription"] = state ? state.dashboardDescription : undefined;
            resourceInputs["dashboardId"] = state ? state.dashboardId : undefined;
            resourceInputs["dashboardName"] = state ? state.dashboardName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as IotsitewiseDashboardArgs | undefined;
            if ((!args || args.dashboardDefinition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dashboardDefinition'");
            }
            if ((!args || args.dashboardDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dashboardDescription'");
            }
            if ((!args || args.dashboardName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dashboardName'");
            }
            resourceInputs["dashboardDefinition"] = args ? args.dashboardDefinition : undefined;
            resourceInputs["dashboardDescription"] = args ? args.dashboardDescription : undefined;
            resourceInputs["dashboardName"] = args ? args.dashboardName : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["dashboardArn"] = undefined /*out*/;
            resourceInputs["dashboardId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IotsitewiseDashboard.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IotsitewiseDashboard resources.
 */
export interface IotsitewiseDashboardState {
    /**
     * The ARN of the dashboard.
     */
    dashboardArn?: pulumi.Input<string>;
    /**
     * The dashboard definition specified in a JSON literal.
     */
    dashboardDefinition?: pulumi.Input<string>;
    /**
     * A description for the dashboard.
     */
    dashboardDescription?: pulumi.Input<string>;
    /**
     * The ID of the dashboard.
     */
    dashboardId?: pulumi.Input<string>;
    /**
     * A friendly name for the dashboard.
     */
    dashboardName?: pulumi.Input<string>;
    /**
     * The ID of the project in which to create the dashboard.
     */
    projectId?: pulumi.Input<string>;
    /**
     * A list of key-value pairs that contain metadata for the dashboard.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.IotsitewiseDashboardTag>[]>;
}

/**
 * The set of arguments for constructing a IotsitewiseDashboard resource.
 */
export interface IotsitewiseDashboardArgs {
    /**
     * The dashboard definition specified in a JSON literal.
     */
    dashboardDefinition: pulumi.Input<string>;
    /**
     * A description for the dashboard.
     */
    dashboardDescription: pulumi.Input<string>;
    /**
     * A friendly name for the dashboard.
     */
    dashboardName: pulumi.Input<string>;
    /**
     * The ID of the project in which to create the dashboard.
     */
    projectId?: pulumi.Input<string>;
    /**
     * A list of key-value pairs that contain metadata for the dashboard.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.IotsitewiseDashboardTag>[]>;
}
