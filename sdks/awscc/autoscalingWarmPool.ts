// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutoscalingWarmPool extends pulumi.CustomResource {
    /**
     * Get an existing AutoscalingWarmPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoscalingWarmPoolState, opts?: pulumi.CustomResourceOptions): AutoscalingWarmPool {
        return new AutoscalingWarmPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/autoscalingWarmPool:AutoscalingWarmPool';

    /**
     * Returns true if the given object is an instance of AutoscalingWarmPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoscalingWarmPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoscalingWarmPool.__pulumiType;
    }

    public readonly autoScalingGroupName!: pulumi.Output<string>;
    public readonly instanceReusePolicy!: pulumi.Output<outputs.AutoscalingWarmPoolInstanceReusePolicy>;
    public readonly maxGroupPreparedCapacity!: pulumi.Output<number>;
    public readonly minSize!: pulumi.Output<number>;
    public readonly poolState!: pulumi.Output<string>;

    /**
     * Create a AutoscalingWarmPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoscalingWarmPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoscalingWarmPoolArgs | AutoscalingWarmPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoscalingWarmPoolState | undefined;
            resourceInputs["autoScalingGroupName"] = state ? state.autoScalingGroupName : undefined;
            resourceInputs["instanceReusePolicy"] = state ? state.instanceReusePolicy : undefined;
            resourceInputs["maxGroupPreparedCapacity"] = state ? state.maxGroupPreparedCapacity : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["poolState"] = state ? state.poolState : undefined;
        } else {
            const args = argsOrState as AutoscalingWarmPoolArgs | undefined;
            if ((!args || args.autoScalingGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoScalingGroupName'");
            }
            resourceInputs["autoScalingGroupName"] = args ? args.autoScalingGroupName : undefined;
            resourceInputs["instanceReusePolicy"] = args ? args.instanceReusePolicy : undefined;
            resourceInputs["maxGroupPreparedCapacity"] = args ? args.maxGroupPreparedCapacity : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["poolState"] = args ? args.poolState : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoscalingWarmPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutoscalingWarmPool resources.
 */
export interface AutoscalingWarmPoolState {
    autoScalingGroupName?: pulumi.Input<string>;
    instanceReusePolicy?: pulumi.Input<inputs.AutoscalingWarmPoolInstanceReusePolicy>;
    maxGroupPreparedCapacity?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    poolState?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutoscalingWarmPool resource.
 */
export interface AutoscalingWarmPoolArgs {
    autoScalingGroupName: pulumi.Input<string>;
    instanceReusePolicy?: pulumi.Input<inputs.AutoscalingWarmPoolInstanceReusePolicy>;
    maxGroupPreparedCapacity?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    poolState?: pulumi.Input<string>;
}
