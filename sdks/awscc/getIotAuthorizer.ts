// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIotAuthorizer(args: GetIotAuthorizerArgs, opts?: pulumi.InvokeOptions): Promise<GetIotAuthorizerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("awscc:index/getIotAuthorizer:getIotAuthorizer", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIotAuthorizer.
 */
export interface GetIotAuthorizerArgs {
    id: string;
}

/**
 * A collection of values returned by getIotAuthorizer.
 */
export interface GetIotAuthorizerResult {
    readonly arn: string;
    readonly authorizerFunctionArn: string;
    readonly authorizerName: string;
    readonly enableCachingForHttp: boolean;
    readonly id: string;
    readonly signingDisabled: boolean;
    readonly status: string;
    readonly tags: outputs.GetIotAuthorizerTag[];
    readonly tokenKeyName: string;
    readonly tokenSigningPublicKeys: {[key: string]: string};
}
export function getIotAuthorizerOutput(args: GetIotAuthorizerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIotAuthorizerResult> {
    return pulumi.output(args).apply((a: any) => getIotAuthorizer(a, opts))
}

/**
 * A collection of arguments for invoking getIotAuthorizer.
 */
export interface GetIotAuthorizerOutputArgs {
    id: pulumi.Input<string>;
}
