// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LightsailStaticIp extends pulumi.CustomResource {
    /**
     * Get an existing LightsailStaticIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LightsailStaticIpState, opts?: pulumi.CustomResourceOptions): LightsailStaticIp {
        return new LightsailStaticIp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'awscc:index/lightsailStaticIp:LightsailStaticIp';

    /**
     * Returns true if the given object is an instance of LightsailStaticIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LightsailStaticIp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LightsailStaticIp.__pulumiType;
    }

    /**
     * The instance where the static IP is attached.
     */
    public readonly attachedTo!: pulumi.Output<string>;
    /**
     * The static IP address.
     */
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    /**
     * A Boolean value indicating whether the static IP is attached.
     */
    public /*out*/ readonly isAttached!: pulumi.Output<boolean>;
    public /*out*/ readonly staticIpArn!: pulumi.Output<string>;
    /**
     * The name of the static IP address.
     */
    public readonly staticIpName!: pulumi.Output<string>;

    /**
     * Create a LightsailStaticIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LightsailStaticIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LightsailStaticIpArgs | LightsailStaticIpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LightsailStaticIpState | undefined;
            resourceInputs["attachedTo"] = state ? state.attachedTo : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["isAttached"] = state ? state.isAttached : undefined;
            resourceInputs["staticIpArn"] = state ? state.staticIpArn : undefined;
            resourceInputs["staticIpName"] = state ? state.staticIpName : undefined;
        } else {
            const args = argsOrState as LightsailStaticIpArgs | undefined;
            if ((!args || args.staticIpName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'staticIpName'");
            }
            resourceInputs["attachedTo"] = args ? args.attachedTo : undefined;
            resourceInputs["staticIpName"] = args ? args.staticIpName : undefined;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["isAttached"] = undefined /*out*/;
            resourceInputs["staticIpArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LightsailStaticIp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LightsailStaticIp resources.
 */
export interface LightsailStaticIpState {
    /**
     * The instance where the static IP is attached.
     */
    attachedTo?: pulumi.Input<string>;
    /**
     * The static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * A Boolean value indicating whether the static IP is attached.
     */
    isAttached?: pulumi.Input<boolean>;
    staticIpArn?: pulumi.Input<string>;
    /**
     * The name of the static IP address.
     */
    staticIpName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LightsailStaticIp resource.
 */
export interface LightsailStaticIpArgs {
    /**
     * The instance where the static IP is attached.
     */
    attachedTo?: pulumi.Input<string>;
    /**
     * The name of the static IP address.
     */
    staticIpName: pulumi.Input<string>;
}
