// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVpcRouter(args?: GetVpcRouterArgs, opts?: pulumi.InvokeOptions): Promise<GetVpcRouterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sakuracloud:index/getVpcRouter:getVpcRouter", {
        "filter": args.filter,
        "id": args.id,
        "zone": args.zone,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVpcRouter.
 */
export interface GetVpcRouterArgs {
    filter?: inputs.GetVpcRouterFilter;
    id?: string;
    zone?: string;
}

/**
 * A collection of values returned by getVpcRouter.
 */
export interface GetVpcRouterResult {
    readonly description: string;
    readonly dhcpServers: outputs.GetVpcRouterDhcpServer[];
    readonly dhcpStaticMappings: outputs.GetVpcRouterDhcpStaticMapping[];
    readonly dnsForwardings: outputs.GetVpcRouterDnsForwarding[];
    readonly filter?: outputs.GetVpcRouterFilter;
    readonly firewalls: outputs.GetVpcRouterFirewall[];
    readonly iconId: string;
    readonly id: string;
    readonly internetConnection: boolean;
    readonly l2tps: outputs.GetVpcRouterL2tp[];
    readonly name: string;
    readonly plan: string;
    readonly portForwardings: outputs.GetVpcRouterPortForwarding[];
    readonly pptps: outputs.GetVpcRouterPptp[];
    readonly privateNetworkInterfaces: outputs.GetVpcRouterPrivateNetworkInterface[];
    readonly publicIp: string;
    readonly publicNetmask: number;
    readonly publicNetworkInterfaces: outputs.GetVpcRouterPublicNetworkInterface[];
    readonly scheduledMaintenances: outputs.GetVpcRouterScheduledMaintenance[];
    readonly siteToSiteVpnParameters: outputs.GetVpcRouterSiteToSiteVpnParameter[];
    readonly siteToSiteVpns: outputs.GetVpcRouterSiteToSiteVpn[];
    readonly staticNats: outputs.GetVpcRouterStaticNat[];
    readonly staticRoutes: outputs.GetVpcRouterStaticRoute[];
    readonly syslogHost: string;
    readonly tags: string[];
    readonly users: outputs.GetVpcRouterUser[];
    readonly version: number;
    readonly wireGuards: outputs.GetVpcRouterWireGuard[];
    readonly zone: string;
}
export function getVpcRouterOutput(args?: GetVpcRouterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpcRouterResult> {
    return pulumi.output(args).apply((a: any) => getVpcRouter(a, opts))
}

/**
 * A collection of arguments for invoking getVpcRouter.
 */
export interface GetVpcRouterOutputArgs {
    filter?: pulumi.Input<inputs.GetVpcRouterFilterArgs>;
    id?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
