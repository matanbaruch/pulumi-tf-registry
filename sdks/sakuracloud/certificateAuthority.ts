// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CertificateAuthority extends pulumi.CustomResource {
    /**
     * Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateAuthorityState, opts?: pulumi.CustomResourceOptions): CertificateAuthority {
        return new CertificateAuthority(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/certificateAuthority:CertificateAuthority';

    /**
     * Returns true if the given object is an instance of CertificateAuthority.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateAuthority {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateAuthority.__pulumiType;
    }

    /**
     * The body of the CA's certificate in PEM format
     */
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    public readonly clients!: pulumi.Output<outputs.CertificateAuthorityClient[] | undefined>;
    /**
     * The URL of the CRL
     */
    public /*out*/ readonly crlUrl!: pulumi.Output<string>;
    /**
     * The description of the Certificate Authority. The length of this value must be in the range [`1`-`512`]
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The icon id to attach to the Certificate Authority
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The name of the Certificate Authority. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The date on which the certificate validity period ends, in RFC3339 format
     */
    public /*out*/ readonly notAfter!: pulumi.Output<string>;
    /**
     * The date on which the certificate validity period begins, in RFC3339 format
     */
    public /*out*/ readonly notBefore!: pulumi.Output<string>;
    /**
     * The body of the CA's certificate in PEM format
     */
    public /*out*/ readonly serialNumber!: pulumi.Output<string>;
    public readonly servers!: pulumi.Output<outputs.CertificateAuthorityServer[] | undefined>;
    public readonly subject!: pulumi.Output<outputs.CertificateAuthoritySubject>;
    /**
     * Any tags to assign to the Certificate Authority
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CertificateAuthorityTimeouts | undefined>;
    /**
     * The number of hours after initial issuing that the certificate will become invalid
     */
    public readonly validityPeriodHours!: pulumi.Output<number>;

    /**
     * Create a CertificateAuthority resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateAuthorityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateAuthorityArgs | CertificateAuthorityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateAuthorityState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["clients"] = state ? state.clients : undefined;
            resourceInputs["crlUrl"] = state ? state.crlUrl : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["iconId"] = state ? state.iconId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notAfter"] = state ? state.notAfter : undefined;
            resourceInputs["notBefore"] = state ? state.notBefore : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["validityPeriodHours"] = state ? state.validityPeriodHours : undefined;
        } else {
            const args = argsOrState as CertificateAuthorityArgs | undefined;
            if ((!args || args.subject === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subject'");
            }
            if ((!args || args.validityPeriodHours === undefined) && !opts.urn) {
                throw new Error("Missing required property 'validityPeriodHours'");
            }
            resourceInputs["clients"] = args ? args.clients : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["iconId"] = args ? args.iconId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["subject"] = args ? args.subject : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["validityPeriodHours"] = args ? args.validityPeriodHours : undefined;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["crlUrl"] = undefined /*out*/;
            resourceInputs["notAfter"] = undefined /*out*/;
            resourceInputs["notBefore"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificateAuthority.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CertificateAuthority resources.
 */
export interface CertificateAuthorityState {
    /**
     * The body of the CA's certificate in PEM format
     */
    certificate?: pulumi.Input<string>;
    clients?: pulumi.Input<pulumi.Input<inputs.CertificateAuthorityClient>[]>;
    /**
     * The URL of the CRL
     */
    crlUrl?: pulumi.Input<string>;
    /**
     * The description of the Certificate Authority. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * The icon id to attach to the Certificate Authority
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the Certificate Authority. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    /**
     * The date on which the certificate validity period ends, in RFC3339 format
     */
    notAfter?: pulumi.Input<string>;
    /**
     * The date on which the certificate validity period begins, in RFC3339 format
     */
    notBefore?: pulumi.Input<string>;
    /**
     * The body of the CA's certificate in PEM format
     */
    serialNumber?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.CertificateAuthorityServer>[]>;
    subject?: pulumi.Input<inputs.CertificateAuthoritySubject>;
    /**
     * Any tags to assign to the Certificate Authority
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.CertificateAuthorityTimeouts>;
    /**
     * The number of hours after initial issuing that the certificate will become invalid
     */
    validityPeriodHours?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CertificateAuthority resource.
 */
export interface CertificateAuthorityArgs {
    clients?: pulumi.Input<pulumi.Input<inputs.CertificateAuthorityClient>[]>;
    /**
     * The description of the Certificate Authority. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * The icon id to attach to the Certificate Authority
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the Certificate Authority. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.CertificateAuthorityServer>[]>;
    subject: pulumi.Input<inputs.CertificateAuthoritySubject>;
    /**
     * Any tags to assign to the Certificate Authority
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.CertificateAuthorityTimeouts>;
    /**
     * The number of hours after initial issuing that the certificate will become invalid
     */
    validityPeriodHours: pulumi.Input<number>;
}
