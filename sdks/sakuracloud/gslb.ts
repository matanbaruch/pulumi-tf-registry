// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Gslb extends pulumi.CustomResource {
    /**
     * Get an existing Gslb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GslbState, opts?: pulumi.CustomResourceOptions): Gslb {
        return new Gslb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/gslb:Gslb';

    /**
     * Returns true if the given object is an instance of Gslb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gslb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gslb.__pulumiType;
    }

    /**
     * The description of the GSLB. The length of this value must be in the range [`1`-`512`]
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The FQDN for accessing to the GSLB. This is typically used as value of CNAME record
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public readonly healthCheck!: pulumi.Output<outputs.GslbHealthCheck>;
    /**
     * The icon id to attach to the GSLB
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The name of the GSLB. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    public readonly servers!: pulumi.Output<outputs.GslbServer[] | undefined>;
    /**
     * The IP address of the SorryServer. This will be used when all servers are down
     */
    public readonly sorryServer!: pulumi.Output<string | undefined>;
    /**
     * Any tags to assign to the GSLB
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.GslbTimeouts | undefined>;
    /**
     * The flag to enable weighted load-balancing
     */
    public readonly weighted!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Gslb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GslbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GslbArgs | GslbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GslbState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["iconId"] = state ? state.iconId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["sorryServer"] = state ? state.sorryServer : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["weighted"] = state ? state.weighted : undefined;
        } else {
            const args = argsOrState as GslbArgs | undefined;
            if ((!args || args.healthCheck === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthCheck'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["iconId"] = args ? args.iconId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["sorryServer"] = args ? args.sorryServer : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["weighted"] = args ? args.weighted : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gslb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Gslb resources.
 */
export interface GslbState {
    /**
     * The description of the GSLB. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * The FQDN for accessing to the GSLB. This is typically used as value of CNAME record
     */
    fqdn?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<inputs.GslbHealthCheck>;
    /**
     * The icon id to attach to the GSLB
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the GSLB. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.GslbServer>[]>;
    /**
     * The IP address of the SorryServer. This will be used when all servers are down
     */
    sorryServer?: pulumi.Input<string>;
    /**
     * Any tags to assign to the GSLB
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.GslbTimeouts>;
    /**
     * The flag to enable weighted load-balancing
     */
    weighted?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Gslb resource.
 */
export interface GslbArgs {
    /**
     * The description of the GSLB. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    healthCheck: pulumi.Input<inputs.GslbHealthCheck>;
    /**
     * The icon id to attach to the GSLB
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the GSLB. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.GslbServer>[]>;
    /**
     * The IP address of the SorryServer. This will be used when all servers are down
     */
    sorryServer?: pulumi.Input<string>;
    /**
     * Any tags to assign to the GSLB
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.GslbTimeouts>;
    /**
     * The flag to enable weighted load-balancing
     */
    weighted?: pulumi.Input<boolean>;
}
