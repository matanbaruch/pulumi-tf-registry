// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ipv4Ptr extends pulumi.CustomResource {
    /**
     * Get an existing Ipv4Ptr resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ipv4PtrState, opts?: pulumi.CustomResourceOptions): Ipv4Ptr {
        return new Ipv4Ptr(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/ipv4Ptr:Ipv4Ptr';

    /**
     * Returns true if the given object is an instance of Ipv4Ptr.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ipv4Ptr {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ipv4Ptr.__pulumiType;
    }

    /**
     * The value of the PTR record. This must be FQDN
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * The IP address to which the PTR record is set
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * The wait interval(in seconds) for retrying API call used when SakuraCloud API returns any errors
     */
    public readonly retryInterval!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of API call retries used when SakuraCloud API returns any errors
     */
    public readonly retryMax!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.Ipv4PtrTimeouts | undefined>;
    /**
     * The name of zone that the IPv4 PTR will be created (e.g. `is1a`, `tk1a`)
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Ipv4Ptr resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ipv4PtrArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ipv4PtrArgs | Ipv4PtrState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ipv4PtrState | undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["retryInterval"] = state ? state.retryInterval : undefined;
            resourceInputs["retryMax"] = state ? state.retryMax : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as Ipv4PtrArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["retryInterval"] = args ? args.retryInterval : undefined;
            resourceInputs["retryMax"] = args ? args.retryMax : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ipv4Ptr.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ipv4Ptr resources.
 */
export interface Ipv4PtrState {
    /**
     * The value of the PTR record. This must be FQDN
     */
    hostname?: pulumi.Input<string>;
    /**
     * The IP address to which the PTR record is set
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The wait interval(in seconds) for retrying API call used when SakuraCloud API returns any errors
     */
    retryInterval?: pulumi.Input<number>;
    /**
     * The maximum number of API call retries used when SakuraCloud API returns any errors
     */
    retryMax?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.Ipv4PtrTimeouts>;
    /**
     * The name of zone that the IPv4 PTR will be created (e.g. `is1a`, `tk1a`)
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ipv4Ptr resource.
 */
export interface Ipv4PtrArgs {
    /**
     * The value of the PTR record. This must be FQDN
     */
    hostname: pulumi.Input<string>;
    /**
     * The IP address to which the PTR record is set
     */
    ipAddress: pulumi.Input<string>;
    /**
     * The wait interval(in seconds) for retrying API call used when SakuraCloud API returns any errors
     */
    retryInterval?: pulumi.Input<number>;
    /**
     * The maximum number of API call retries used when SakuraCloud API returns any errors
     */
    retryMax?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.Ipv4PtrTimeouts>;
    /**
     * The name of zone that the IPv4 PTR will be created (e.g. `is1a`, `tk1a`)
     */
    zone?: pulumi.Input<string>;
}
