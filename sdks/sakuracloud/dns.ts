// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Dns extends pulumi.CustomResource {
    /**
     * Get an existing Dns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsState, opts?: pulumi.CustomResourceOptions): Dns {
        return new Dns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/dns:Dns';

    /**
     * Returns true if the given object is an instance of Dns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dns.__pulumiType;
    }

    /**
     * The description of the DNS. The length of this value must be in the range [`1`-`512`]
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A list of IP address of DNS server that manage this zone
     */
    public /*out*/ readonly dnsServers!: pulumi.Output<string[]>;
    /**
     * The icon id to attach to the DNS
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    public readonly records!: pulumi.Output<outputs.DnsRecord[] | undefined>;
    /**
     * Any tags to assign to the DNS
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DnsTimeouts | undefined>;
    /**
     * The target zone. (e.g. `example.com`)
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Dns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsArgs | DnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["iconId"] = state ? state.iconId : undefined;
            resourceInputs["records"] = state ? state.records : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as DnsArgs | undefined;
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["iconId"] = args ? args.iconId : undefined;
            resourceInputs["records"] = args ? args.records : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["dnsServers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Dns resources.
 */
export interface DnsState {
    /**
     * The description of the DNS. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * A list of IP address of DNS server that manage this zone
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The icon id to attach to the DNS
     */
    iconId?: pulumi.Input<string>;
    records?: pulumi.Input<pulumi.Input<inputs.DnsRecord>[]>;
    /**
     * Any tags to assign to the DNS
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.DnsTimeouts>;
    /**
     * The target zone. (e.g. `example.com`)
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dns resource.
 */
export interface DnsArgs {
    /**
     * The description of the DNS. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * The icon id to attach to the DNS
     */
    iconId?: pulumi.Input<string>;
    records?: pulumi.Input<pulumi.Input<inputs.DnsRecord>[]>;
    /**
     * Any tags to assign to the DNS
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.DnsTimeouts>;
    /**
     * The target zone. (e.g. `example.com`)
     */
    zone: pulumi.Input<string>;
}
