// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcRouter extends pulumi.CustomResource {
    /**
     * Get an existing VpcRouter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcRouterState, opts?: pulumi.CustomResourceOptions): VpcRouter {
        return new VpcRouter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/vpcRouter:VpcRouter';

    /**
     * Returns true if the given object is an instance of VpcRouter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcRouter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcRouter.__pulumiType;
    }

    /**
     * The description of the VPCRouter. The length of this value must be in the range [`1`-`512`]
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dhcpServers!: pulumi.Output<outputs.VpcRouterDhcpServer[] | undefined>;
    public readonly dhcpStaticMappings!: pulumi.Output<outputs.VpcRouterDhcpStaticMapping[] | undefined>;
    public readonly dnsForwarding!: pulumi.Output<outputs.VpcRouterDnsForwarding | undefined>;
    public readonly firewalls!: pulumi.Output<outputs.VpcRouterFirewall[] | undefined>;
    /**
     * The icon id to attach to the VPCRouter
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The flag to enable connecting to the Internet from the VPC Router
     */
    public readonly internetConnection!: pulumi.Output<boolean | undefined>;
    public readonly l2tp!: pulumi.Output<outputs.VpcRouterL2tp | undefined>;
    /**
     * The name of the VPCRouter. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]
     */
    public readonly plan!: pulumi.Output<string | undefined>;
    public readonly portForwardings!: pulumi.Output<outputs.VpcRouterPortForwarding[] | undefined>;
    public readonly pptp!: pulumi.Output<outputs.VpcRouterPptp | undefined>;
    /**
     * A list of additional network interface setting. This doesn't include primary network interface setting
     */
    public readonly privateNetworkInterfaces!: pulumi.Output<outputs.VpcRouterPrivateNetworkInterface[] | undefined>;
    /**
     * The public ip address of the VPC Router
     */
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * The bit length of the subnet to assign to the public network interface
     */
    public /*out*/ readonly publicNetmask!: pulumi.Output<number>;
    public readonly publicNetworkInterface!: pulumi.Output<outputs.VpcRouterPublicNetworkInterface | undefined>;
    public readonly scheduledMaintenance!: pulumi.Output<outputs.VpcRouterScheduledMaintenance | undefined>;
    public readonly siteToSiteVpnParameter!: pulumi.Output<outputs.VpcRouterSiteToSiteVpnParameter | undefined>;
    public readonly siteToSiteVpns!: pulumi.Output<outputs.VpcRouterSiteToSiteVpn[] | undefined>;
    public readonly staticNats!: pulumi.Output<outputs.VpcRouterStaticNat[] | undefined>;
    public readonly staticRoutes!: pulumi.Output<outputs.VpcRouterStaticRoute[] | undefined>;
    /**
     * The ip address of the syslog host to which the VPC Router sends logs
     */
    public readonly syslogHost!: pulumi.Output<string | undefined>;
    /**
     * Any tags to assign to the VPCRouter
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VpcRouterTimeouts | undefined>;
    public readonly users!: pulumi.Output<outputs.VpcRouterUser[] | undefined>;
    /**
     * The version of the VPC Router
     */
    public readonly version!: pulumi.Output<number | undefined>;
    public readonly wireGuard!: pulumi.Output<outputs.VpcRouterWireGuard | undefined>;
    /**
     * The name of zone that the VPCRouter will be created (e.g. `is1a`, `tk1a`)
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a VpcRouter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpcRouterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcRouterArgs | VpcRouterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcRouterState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcpServers"] = state ? state.dhcpServers : undefined;
            resourceInputs["dhcpStaticMappings"] = state ? state.dhcpStaticMappings : undefined;
            resourceInputs["dnsForwarding"] = state ? state.dnsForwarding : undefined;
            resourceInputs["firewalls"] = state ? state.firewalls : undefined;
            resourceInputs["iconId"] = state ? state.iconId : undefined;
            resourceInputs["internetConnection"] = state ? state.internetConnection : undefined;
            resourceInputs["l2tp"] = state ? state.l2tp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["portForwardings"] = state ? state.portForwardings : undefined;
            resourceInputs["pptp"] = state ? state.pptp : undefined;
            resourceInputs["privateNetworkInterfaces"] = state ? state.privateNetworkInterfaces : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["publicNetmask"] = state ? state.publicNetmask : undefined;
            resourceInputs["publicNetworkInterface"] = state ? state.publicNetworkInterface : undefined;
            resourceInputs["scheduledMaintenance"] = state ? state.scheduledMaintenance : undefined;
            resourceInputs["siteToSiteVpnParameter"] = state ? state.siteToSiteVpnParameter : undefined;
            resourceInputs["siteToSiteVpns"] = state ? state.siteToSiteVpns : undefined;
            resourceInputs["staticNats"] = state ? state.staticNats : undefined;
            resourceInputs["staticRoutes"] = state ? state.staticRoutes : undefined;
            resourceInputs["syslogHost"] = state ? state.syslogHost : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["wireGuard"] = state ? state.wireGuard : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as VpcRouterArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcpServers"] = args ? args.dhcpServers : undefined;
            resourceInputs["dhcpStaticMappings"] = args ? args.dhcpStaticMappings : undefined;
            resourceInputs["dnsForwarding"] = args ? args.dnsForwarding : undefined;
            resourceInputs["firewalls"] = args ? args.firewalls : undefined;
            resourceInputs["iconId"] = args ? args.iconId : undefined;
            resourceInputs["internetConnection"] = args ? args.internetConnection : undefined;
            resourceInputs["l2tp"] = args ? args.l2tp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["portForwardings"] = args ? args.portForwardings : undefined;
            resourceInputs["pptp"] = args ? args.pptp : undefined;
            resourceInputs["privateNetworkInterfaces"] = args ? args.privateNetworkInterfaces : undefined;
            resourceInputs["publicNetworkInterface"] = args ? args.publicNetworkInterface : undefined;
            resourceInputs["scheduledMaintenance"] = args ? args.scheduledMaintenance : undefined;
            resourceInputs["siteToSiteVpnParameter"] = args ? args.siteToSiteVpnParameter : undefined;
            resourceInputs["siteToSiteVpns"] = args ? args.siteToSiteVpns : undefined;
            resourceInputs["staticNats"] = args ? args.staticNats : undefined;
            resourceInputs["staticRoutes"] = args ? args.staticRoutes : undefined;
            resourceInputs["syslogHost"] = args ? args.syslogHost : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["wireGuard"] = args ? args.wireGuard : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["publicNetmask"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcRouter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcRouter resources.
 */
export interface VpcRouterState {
    /**
     * The description of the VPCRouter. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    dhcpServers?: pulumi.Input<pulumi.Input<inputs.VpcRouterDhcpServer>[]>;
    dhcpStaticMappings?: pulumi.Input<pulumi.Input<inputs.VpcRouterDhcpStaticMapping>[]>;
    dnsForwarding?: pulumi.Input<inputs.VpcRouterDnsForwarding>;
    firewalls?: pulumi.Input<pulumi.Input<inputs.VpcRouterFirewall>[]>;
    /**
     * The icon id to attach to the VPCRouter
     */
    iconId?: pulumi.Input<string>;
    /**
     * The flag to enable connecting to the Internet from the VPC Router
     */
    internetConnection?: pulumi.Input<boolean>;
    l2tp?: pulumi.Input<inputs.VpcRouterL2tp>;
    /**
     * The name of the VPCRouter. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    /**
     * The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]
     */
    plan?: pulumi.Input<string>;
    portForwardings?: pulumi.Input<pulumi.Input<inputs.VpcRouterPortForwarding>[]>;
    pptp?: pulumi.Input<inputs.VpcRouterPptp>;
    /**
     * A list of additional network interface setting. This doesn't include primary network interface setting
     */
    privateNetworkInterfaces?: pulumi.Input<pulumi.Input<inputs.VpcRouterPrivateNetworkInterface>[]>;
    /**
     * The public ip address of the VPC Router
     */
    publicIp?: pulumi.Input<string>;
    /**
     * The bit length of the subnet to assign to the public network interface
     */
    publicNetmask?: pulumi.Input<number>;
    publicNetworkInterface?: pulumi.Input<inputs.VpcRouterPublicNetworkInterface>;
    scheduledMaintenance?: pulumi.Input<inputs.VpcRouterScheduledMaintenance>;
    siteToSiteVpnParameter?: pulumi.Input<inputs.VpcRouterSiteToSiteVpnParameter>;
    siteToSiteVpns?: pulumi.Input<pulumi.Input<inputs.VpcRouterSiteToSiteVpn>[]>;
    staticNats?: pulumi.Input<pulumi.Input<inputs.VpcRouterStaticNat>[]>;
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.VpcRouterStaticRoute>[]>;
    /**
     * The ip address of the syslog host to which the VPC Router sends logs
     */
    syslogHost?: pulumi.Input<string>;
    /**
     * Any tags to assign to the VPCRouter
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.VpcRouterTimeouts>;
    users?: pulumi.Input<pulumi.Input<inputs.VpcRouterUser>[]>;
    /**
     * The version of the VPC Router
     */
    version?: pulumi.Input<number>;
    wireGuard?: pulumi.Input<inputs.VpcRouterWireGuard>;
    /**
     * The name of zone that the VPCRouter will be created (e.g. `is1a`, `tk1a`)
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcRouter resource.
 */
export interface VpcRouterArgs {
    /**
     * The description of the VPCRouter. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    dhcpServers?: pulumi.Input<pulumi.Input<inputs.VpcRouterDhcpServer>[]>;
    dhcpStaticMappings?: pulumi.Input<pulumi.Input<inputs.VpcRouterDhcpStaticMapping>[]>;
    dnsForwarding?: pulumi.Input<inputs.VpcRouterDnsForwarding>;
    firewalls?: pulumi.Input<pulumi.Input<inputs.VpcRouterFirewall>[]>;
    /**
     * The icon id to attach to the VPCRouter
     */
    iconId?: pulumi.Input<string>;
    /**
     * The flag to enable connecting to the Internet from the VPC Router
     */
    internetConnection?: pulumi.Input<boolean>;
    l2tp?: pulumi.Input<inputs.VpcRouterL2tp>;
    /**
     * The name of the VPCRouter. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    /**
     * The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]
     */
    plan?: pulumi.Input<string>;
    portForwardings?: pulumi.Input<pulumi.Input<inputs.VpcRouterPortForwarding>[]>;
    pptp?: pulumi.Input<inputs.VpcRouterPptp>;
    /**
     * A list of additional network interface setting. This doesn't include primary network interface setting
     */
    privateNetworkInterfaces?: pulumi.Input<pulumi.Input<inputs.VpcRouterPrivateNetworkInterface>[]>;
    publicNetworkInterface?: pulumi.Input<inputs.VpcRouterPublicNetworkInterface>;
    scheduledMaintenance?: pulumi.Input<inputs.VpcRouterScheduledMaintenance>;
    siteToSiteVpnParameter?: pulumi.Input<inputs.VpcRouterSiteToSiteVpnParameter>;
    siteToSiteVpns?: pulumi.Input<pulumi.Input<inputs.VpcRouterSiteToSiteVpn>[]>;
    staticNats?: pulumi.Input<pulumi.Input<inputs.VpcRouterStaticNat>[]>;
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.VpcRouterStaticRoute>[]>;
    /**
     * The ip address of the syslog host to which the VPC Router sends logs
     */
    syslogHost?: pulumi.Input<string>;
    /**
     * Any tags to assign to the VPCRouter
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.VpcRouterTimeouts>;
    users?: pulumi.Input<pulumi.Input<inputs.VpcRouterUser>[]>;
    /**
     * The version of the VPC Router
     */
    version?: pulumi.Input<number>;
    wireGuard?: pulumi.Input<inputs.VpcRouterWireGuard>;
    /**
     * The name of zone that the VPCRouter will be created (e.g. `is1a`, `tk1a`)
     */
    zone?: pulumi.Input<string>;
}
