// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutoScale extends pulumi.CustomResource {
    /**
     * Get an existing AutoScale resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoScaleState, opts?: pulumi.CustomResourceOptions): AutoScale {
        return new AutoScale(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/autoScale:AutoScale';

    /**
     * Returns true if the given object is an instance of AutoScale.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoScale {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoScale.__pulumiType;
    }

    /**
     * The id of the API key
     */
    public readonly apiKeyId!: pulumi.Output<string>;
    /**
     * The configuration file for sacloud/autoscaler
     */
    public readonly config!: pulumi.Output<string>;
    public readonly cpuThresholdScaling!: pulumi.Output<outputs.AutoScaleCpuThresholdScaling | undefined>;
    /**
     * The description of the AutoScale. The length of this value must be in the range [`1`-`512`]
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The flag to stop trigger
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * The icon id to attach to the AutoScale
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The name of the AutoScale. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    public readonly routerThresholdScaling!: pulumi.Output<outputs.AutoScaleRouterThresholdScaling | undefined>;
    public readonly scheduleScalings!: pulumi.Output<outputs.AutoScaleScheduleScaling[] | undefined>;
    /**
     * Any tags to assign to the AutoScale
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AutoScaleTimeouts | undefined>;
    /**
     * This must be one of [`cpu`/`router`/`schedule`]
     */
    public readonly triggerType!: pulumi.Output<string>;
    /**
     * List of zone names where monitored resources are located
     */
    public readonly zones!: pulumi.Output<string[]>;

    /**
     * Create a AutoScale resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoScaleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoScaleArgs | AutoScaleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoScaleState | undefined;
            resourceInputs["apiKeyId"] = state ? state.apiKeyId : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["cpuThresholdScaling"] = state ? state.cpuThresholdScaling : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["iconId"] = state ? state.iconId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["routerThresholdScaling"] = state ? state.routerThresholdScaling : undefined;
            resourceInputs["scheduleScalings"] = state ? state.scheduleScalings : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["triggerType"] = state ? state.triggerType : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as AutoScaleArgs | undefined;
            if ((!args || args.apiKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiKeyId'");
            }
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.zones === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zones'");
            }
            resourceInputs["apiKeyId"] = args ? args.apiKeyId : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["cpuThresholdScaling"] = args ? args.cpuThresholdScaling : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["iconId"] = args ? args.iconId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["routerThresholdScaling"] = args ? args.routerThresholdScaling : undefined;
            resourceInputs["scheduleScalings"] = args ? args.scheduleScalings : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["triggerType"] = args ? args.triggerType : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoScale.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutoScale resources.
 */
export interface AutoScaleState {
    /**
     * The id of the API key
     */
    apiKeyId?: pulumi.Input<string>;
    /**
     * The configuration file for sacloud/autoscaler
     */
    config?: pulumi.Input<string>;
    cpuThresholdScaling?: pulumi.Input<inputs.AutoScaleCpuThresholdScaling>;
    /**
     * The description of the AutoScale. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * The flag to stop trigger
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The icon id to attach to the AutoScale
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the AutoScale. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    routerThresholdScaling?: pulumi.Input<inputs.AutoScaleRouterThresholdScaling>;
    scheduleScalings?: pulumi.Input<pulumi.Input<inputs.AutoScaleScheduleScaling>[]>;
    /**
     * Any tags to assign to the AutoScale
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.AutoScaleTimeouts>;
    /**
     * This must be one of [`cpu`/`router`/`schedule`]
     */
    triggerType?: pulumi.Input<string>;
    /**
     * List of zone names where monitored resources are located
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AutoScale resource.
 */
export interface AutoScaleArgs {
    /**
     * The id of the API key
     */
    apiKeyId: pulumi.Input<string>;
    /**
     * The configuration file for sacloud/autoscaler
     */
    config: pulumi.Input<string>;
    cpuThresholdScaling?: pulumi.Input<inputs.AutoScaleCpuThresholdScaling>;
    /**
     * The description of the AutoScale. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * The flag to stop trigger
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The icon id to attach to the AutoScale
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the AutoScale. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    routerThresholdScaling?: pulumi.Input<inputs.AutoScaleRouterThresholdScaling>;
    scheduleScalings?: pulumi.Input<pulumi.Input<inputs.AutoScaleScheduleScaling>[]>;
    /**
     * Any tags to assign to the AutoScale
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.AutoScaleTimeouts>;
    /**
     * This must be one of [`cpu`/`router`/`schedule`]
     */
    triggerType?: pulumi.Input<string>;
    /**
     * List of zone names where monitored resources are located
     */
    zones: pulumi.Input<pulumi.Input<string>[]>;
}
