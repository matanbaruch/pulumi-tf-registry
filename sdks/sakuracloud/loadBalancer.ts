// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState, opts?: pulumi.CustomResourceOptions): LoadBalancer {
        return new LoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/loadBalancer:LoadBalancer';

    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }

    /**
     * The description of the LoadBalancer. The length of this value must be in the range [`1`-`512`]
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The icon id to attach to the LoadBalancer
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterface!: pulumi.Output<outputs.LoadBalancerNetworkInterface>;
    /**
     * The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]
     */
    public readonly plan!: pulumi.Output<string | undefined>;
    /**
     * Any tags to assign to the LoadBalancer
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LoadBalancerTimeouts | undefined>;
    public readonly vips!: pulumi.Output<outputs.LoadBalancerVip[] | undefined>;
    /**
     * The name of zone that the LoadBalancer will be created (e.g. `is1a`, `tk1a`)
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerArgs | LoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["iconId"] = state ? state.iconId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterface"] = state ? state.networkInterface : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vips"] = state ? state.vips : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as LoadBalancerArgs | undefined;
            if ((!args || args.networkInterface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterface'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["iconId"] = args ? args.iconId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterface"] = args ? args.networkInterface : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vips"] = args ? args.vips : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    /**
     * The description of the LoadBalancer. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * The icon id to attach to the LoadBalancer
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    networkInterface?: pulumi.Input<inputs.LoadBalancerNetworkInterface>;
    /**
     * The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]
     */
    plan?: pulumi.Input<string>;
    /**
     * Any tags to assign to the LoadBalancer
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.LoadBalancerTimeouts>;
    vips?: pulumi.Input<pulumi.Input<inputs.LoadBalancerVip>[]>;
    /**
     * The name of zone that the LoadBalancer will be created (e.g. `is1a`, `tk1a`)
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    /**
     * The description of the LoadBalancer. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * The icon id to attach to the LoadBalancer
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    networkInterface: pulumi.Input<inputs.LoadBalancerNetworkInterface>;
    /**
     * The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]
     */
    plan?: pulumi.Input<string>;
    /**
     * Any tags to assign to the LoadBalancer
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.LoadBalancerTimeouts>;
    vips?: pulumi.Input<pulumi.Input<inputs.LoadBalancerVip>[]>;
    /**
     * The name of zone that the LoadBalancer will be created (e.g. `is1a`, `tk1a`)
     */
    zone?: pulumi.Input<string>;
}
