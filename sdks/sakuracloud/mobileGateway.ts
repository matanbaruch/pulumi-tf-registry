// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MobileGateway extends pulumi.CustomResource {
    /**
     * Get an existing MobileGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MobileGatewayState, opts?: pulumi.CustomResourceOptions): MobileGateway {
        return new MobileGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/mobileGateway:MobileGateway';

    /**
     * Returns true if the given object is an instance of MobileGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MobileGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MobileGateway.__pulumiType;
    }

    /**
     * The description of the MobileGateway. The length of this value must be in the range [`1`-`512`]
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A list of IP address used by each connected devices
     */
    public readonly dnsServers!: pulumi.Output<string[]>;
    /**
     * The icon id to attach to the MobileGateway
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The flag to allow communication between each connected devices
     */
    public readonly interDeviceCommunication!: pulumi.Output<boolean | undefined>;
    /**
     * The flag to enable connect to the Internet
     */
    public readonly internetConnection!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the MobileGateway. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    public readonly privateNetworkInterface!: pulumi.Output<outputs.MobileGatewayPrivateNetworkInterface | undefined>;
    /**
     * The public IP address assigned to the MobileGateway
     */
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * The bit length of the subnet assigned to the MobileGateway
     */
    public /*out*/ readonly publicNetmask!: pulumi.Output<number>;
    public readonly simRoutes!: pulumi.Output<outputs.MobileGatewaySimRoute[] | undefined>;
    public readonly sims!: pulumi.Output<outputs.MobileGatewaySim[] | undefined>;
    public readonly staticRoutes!: pulumi.Output<outputs.MobileGatewayStaticRoute[] | undefined>;
    /**
     * Any tags to assign to the MobileGateway
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MobileGatewayTimeouts | undefined>;
    public readonly trafficControl!: pulumi.Output<outputs.MobileGatewayTrafficControl | undefined>;
    /**
     * The name of zone that the MobileGateway will be created (e.g. `is1a`, `tk1a`)
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a MobileGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MobileGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MobileGatewayArgs | MobileGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MobileGatewayState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["iconId"] = state ? state.iconId : undefined;
            resourceInputs["interDeviceCommunication"] = state ? state.interDeviceCommunication : undefined;
            resourceInputs["internetConnection"] = state ? state.internetConnection : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateNetworkInterface"] = state ? state.privateNetworkInterface : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["publicNetmask"] = state ? state.publicNetmask : undefined;
            resourceInputs["simRoutes"] = state ? state.simRoutes : undefined;
            resourceInputs["sims"] = state ? state.sims : undefined;
            resourceInputs["staticRoutes"] = state ? state.staticRoutes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trafficControl"] = state ? state.trafficControl : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as MobileGatewayArgs | undefined;
            if ((!args || args.dnsServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsServers'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["iconId"] = args ? args.iconId : undefined;
            resourceInputs["interDeviceCommunication"] = args ? args.interDeviceCommunication : undefined;
            resourceInputs["internetConnection"] = args ? args.internetConnection : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateNetworkInterface"] = args ? args.privateNetworkInterface : undefined;
            resourceInputs["simRoutes"] = args ? args.simRoutes : undefined;
            resourceInputs["sims"] = args ? args.sims : undefined;
            resourceInputs["staticRoutes"] = args ? args.staticRoutes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trafficControl"] = args ? args.trafficControl : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["publicNetmask"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MobileGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MobileGateway resources.
 */
export interface MobileGatewayState {
    /**
     * The description of the MobileGateway. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * A list of IP address used by each connected devices
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The icon id to attach to the MobileGateway
     */
    iconId?: pulumi.Input<string>;
    /**
     * The flag to allow communication between each connected devices
     */
    interDeviceCommunication?: pulumi.Input<boolean>;
    /**
     * The flag to enable connect to the Internet
     */
    internetConnection?: pulumi.Input<boolean>;
    /**
     * The name of the MobileGateway. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    privateNetworkInterface?: pulumi.Input<inputs.MobileGatewayPrivateNetworkInterface>;
    /**
     * The public IP address assigned to the MobileGateway
     */
    publicIp?: pulumi.Input<string>;
    /**
     * The bit length of the subnet assigned to the MobileGateway
     */
    publicNetmask?: pulumi.Input<number>;
    simRoutes?: pulumi.Input<pulumi.Input<inputs.MobileGatewaySimRoute>[]>;
    sims?: pulumi.Input<pulumi.Input<inputs.MobileGatewaySim>[]>;
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.MobileGatewayStaticRoute>[]>;
    /**
     * Any tags to assign to the MobileGateway
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.MobileGatewayTimeouts>;
    trafficControl?: pulumi.Input<inputs.MobileGatewayTrafficControl>;
    /**
     * The name of zone that the MobileGateway will be created (e.g. `is1a`, `tk1a`)
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MobileGateway resource.
 */
export interface MobileGatewayArgs {
    /**
     * The description of the MobileGateway. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * A list of IP address used by each connected devices
     */
    dnsServers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The icon id to attach to the MobileGateway
     */
    iconId?: pulumi.Input<string>;
    /**
     * The flag to allow communication between each connected devices
     */
    interDeviceCommunication?: pulumi.Input<boolean>;
    /**
     * The flag to enable connect to the Internet
     */
    internetConnection?: pulumi.Input<boolean>;
    /**
     * The name of the MobileGateway. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    privateNetworkInterface?: pulumi.Input<inputs.MobileGatewayPrivateNetworkInterface>;
    simRoutes?: pulumi.Input<pulumi.Input<inputs.MobileGatewaySimRoute>[]>;
    sims?: pulumi.Input<pulumi.Input<inputs.MobileGatewaySim>[]>;
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.MobileGatewayStaticRoute>[]>;
    /**
     * Any tags to assign to the MobileGateway
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.MobileGatewayTimeouts>;
    trafficControl?: pulumi.Input<inputs.MobileGatewayTrafficControl>;
    /**
     * The name of zone that the MobileGateway will be created (e.g. `is1a`, `tk1a`)
     */
    zone?: pulumi.Input<string>;
}
