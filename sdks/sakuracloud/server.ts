// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * The id of the CD-ROM to attach to the Server
     */
    public readonly cdromId!: pulumi.Output<string | undefined>;
    /**
     * The policy of how to allocate virtual CPUs to the server. This must be one of [`standard`/`dedicatedcpu`]
     */
    public readonly commitment!: pulumi.Output<string | undefined>;
    /**
     * The number of virtual CPUs
     */
    public readonly core!: pulumi.Output<number | undefined>;
    /**
     * The model of cpu
     */
    public readonly cpuModel!: pulumi.Output<string>;
    /**
     * The description of the Server. The length of this value must be in the range [`1`-`512`]
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly diskEditParameter!: pulumi.Output<outputs.ServerDiskEditParameter | undefined>;
    /**
     * A list of disk id connected to the server
     */
    public readonly disks!: pulumi.Output<string[] | undefined>;
    /**
     * A list of IP address of DNS server in the zone
     */
    public /*out*/ readonly dnsServers!: pulumi.Output<string[]>;
    /**
     * The flag to use force shutdown when need to reboot/shutdown while applying
     */
    public readonly forceShutdown!: pulumi.Output<boolean | undefined>;
    /**
     * The IP address of the gateway used by Server
     */
    public /*out*/ readonly gateway!: pulumi.Output<string>;
    /**
     * The number of GPUs
     */
    public readonly gpu!: pulumi.Output<number | undefined>;
    /**
     * The hostname of the Server
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * The icon id to attach to the Server
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The driver name of network interface. This must be one of [`virtio`/`e1000`]
     */
    public readonly interfaceDriver!: pulumi.Output<string | undefined>;
    /**
     * The IP address assigned to the Server
     */
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    /**
     * The size of memory in GiB
     */
    public readonly memory!: pulumi.Output<number | undefined>;
    /**
     * The name of the Server. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The bit length of the subnet assigned to the Server
     */
    public /*out*/ readonly netmask!: pulumi.Output<number>;
    /**
     * The network address which the `ip_address` belongs
     */
    public /*out*/ readonly networkAddress!: pulumi.Output<string>;
    public readonly networkInterfaces!: pulumi.Output<outputs.ServerNetworkInterface[] | undefined>;
    /**
     * The id of the PrivateHost which the Server is assigned
     */
    public readonly privateHostId!: pulumi.Output<string | undefined>;
    /**
     * The id of the PrivateHost which the Server is assigned
     */
    public /*out*/ readonly privateHostName!: pulumi.Output<string>;
    /**
     * Any tags to assign to the Server
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ServerTimeouts | undefined>;
    /**
     * A string representing the user data used by cloud-init. This conflicts with [`disk_edit_parameter`]
     */
    public readonly userData!: pulumi.Output<string | undefined>;
    /**
     * The name of zone that the Server will be created (e.g. `is1a`, `tk1a`)
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["cdromId"] = state ? state.cdromId : undefined;
            resourceInputs["commitment"] = state ? state.commitment : undefined;
            resourceInputs["core"] = state ? state.core : undefined;
            resourceInputs["cpuModel"] = state ? state.cpuModel : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskEditParameter"] = state ? state.diskEditParameter : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["forceShutdown"] = state ? state.forceShutdown : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["gpu"] = state ? state.gpu : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["iconId"] = state ? state.iconId : undefined;
            resourceInputs["interfaceDriver"] = state ? state.interfaceDriver : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["networkAddress"] = state ? state.networkAddress : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["privateHostId"] = state ? state.privateHostId : undefined;
            resourceInputs["privateHostName"] = state ? state.privateHostName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            resourceInputs["cdromId"] = args ? args.cdromId : undefined;
            resourceInputs["commitment"] = args ? args.commitment : undefined;
            resourceInputs["core"] = args ? args.core : undefined;
            resourceInputs["cpuModel"] = args ? args.cpuModel : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskEditParameter"] = args ? args.diskEditParameter : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["forceShutdown"] = args ? args.forceShutdown : undefined;
            resourceInputs["gpu"] = args ? args.gpu : undefined;
            resourceInputs["iconId"] = args ? args.iconId : undefined;
            resourceInputs["interfaceDriver"] = args ? args.interfaceDriver : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["privateHostId"] = args ? args.privateHostId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["dnsServers"] = undefined /*out*/;
            resourceInputs["gateway"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["netmask"] = undefined /*out*/;
            resourceInputs["networkAddress"] = undefined /*out*/;
            resourceInputs["privateHostName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * The id of the CD-ROM to attach to the Server
     */
    cdromId?: pulumi.Input<string>;
    /**
     * The policy of how to allocate virtual CPUs to the server. This must be one of [`standard`/`dedicatedcpu`]
     */
    commitment?: pulumi.Input<string>;
    /**
     * The number of virtual CPUs
     */
    core?: pulumi.Input<number>;
    /**
     * The model of cpu
     */
    cpuModel?: pulumi.Input<string>;
    /**
     * The description of the Server. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    diskEditParameter?: pulumi.Input<inputs.ServerDiskEditParameter>;
    /**
     * A list of disk id connected to the server
     */
    disks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of IP address of DNS server in the zone
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The flag to use force shutdown when need to reboot/shutdown while applying
     */
    forceShutdown?: pulumi.Input<boolean>;
    /**
     * The IP address of the gateway used by Server
     */
    gateway?: pulumi.Input<string>;
    /**
     * The number of GPUs
     */
    gpu?: pulumi.Input<number>;
    /**
     * The hostname of the Server
     */
    hostname?: pulumi.Input<string>;
    /**
     * The icon id to attach to the Server
     */
    iconId?: pulumi.Input<string>;
    /**
     * The driver name of network interface. This must be one of [`virtio`/`e1000`]
     */
    interfaceDriver?: pulumi.Input<string>;
    /**
     * The IP address assigned to the Server
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The size of memory in GiB
     */
    memory?: pulumi.Input<number>;
    /**
     * The name of the Server. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    /**
     * The bit length of the subnet assigned to the Server
     */
    netmask?: pulumi.Input<number>;
    /**
     * The network address which the `ip_address` belongs
     */
    networkAddress?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ServerNetworkInterface>[]>;
    /**
     * The id of the PrivateHost which the Server is assigned
     */
    privateHostId?: pulumi.Input<string>;
    /**
     * The id of the PrivateHost which the Server is assigned
     */
    privateHostName?: pulumi.Input<string>;
    /**
     * Any tags to assign to the Server
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    /**
     * A string representing the user data used by cloud-init. This conflicts with [`disk_edit_parameter`]
     */
    userData?: pulumi.Input<string>;
    /**
     * The name of zone that the Server will be created (e.g. `is1a`, `tk1a`)
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * The id of the CD-ROM to attach to the Server
     */
    cdromId?: pulumi.Input<string>;
    /**
     * The policy of how to allocate virtual CPUs to the server. This must be one of [`standard`/`dedicatedcpu`]
     */
    commitment?: pulumi.Input<string>;
    /**
     * The number of virtual CPUs
     */
    core?: pulumi.Input<number>;
    /**
     * The model of cpu
     */
    cpuModel?: pulumi.Input<string>;
    /**
     * The description of the Server. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    diskEditParameter?: pulumi.Input<inputs.ServerDiskEditParameter>;
    /**
     * A list of disk id connected to the server
     */
    disks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The flag to use force shutdown when need to reboot/shutdown while applying
     */
    forceShutdown?: pulumi.Input<boolean>;
    /**
     * The number of GPUs
     */
    gpu?: pulumi.Input<number>;
    /**
     * The icon id to attach to the Server
     */
    iconId?: pulumi.Input<string>;
    /**
     * The driver name of network interface. This must be one of [`virtio`/`e1000`]
     */
    interfaceDriver?: pulumi.Input<string>;
    /**
     * The size of memory in GiB
     */
    memory?: pulumi.Input<number>;
    /**
     * The name of the Server. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ServerNetworkInterface>[]>;
    /**
     * The id of the PrivateHost which the Server is assigned
     */
    privateHostId?: pulumi.Input<string>;
    /**
     * Any tags to assign to the Server
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    /**
     * A string representing the user data used by cloud-init. This conflicts with [`disk_edit_parameter`]
     */
    userData?: pulumi.Input<string>;
    /**
     * The name of zone that the Server will be created (e.g. `is1a`, `tk1a`)
     */
    zone?: pulumi.Input<string>;
}
