// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Icon extends pulumi.CustomResource {
    /**
     * Get an existing Icon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IconState, opts?: pulumi.CustomResourceOptions): Icon {
        return new Icon(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/icon:Icon';

    /**
     * Returns true if the given object is an instance of Icon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Icon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Icon.__pulumiType;
    }

    /**
     * The base64 encoded content to upload to as the Icon. This conflicts with [`source`]
     */
    public readonly base64content!: pulumi.Output<string | undefined>;
    /**
     * The name of the Icon. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The file path to upload to as the Icon. This conflicts with [`base64content`]
     */
    public readonly source!: pulumi.Output<string | undefined>;
    /**
     * Any tags to assign to the Icon
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.IconTimeouts | undefined>;
    /**
     * The URL for getting the icon's raw data
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a Icon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IconArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IconArgs | IconState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IconState | undefined;
            resourceInputs["base64content"] = state ? state.base64content : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as IconArgs | undefined;
            resourceInputs["base64content"] = args ? args.base64content : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Icon.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Icon resources.
 */
export interface IconState {
    /**
     * The base64 encoded content to upload to as the Icon. This conflicts with [`source`]
     */
    base64content?: pulumi.Input<string>;
    /**
     * The name of the Icon. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    /**
     * The file path to upload to as the Icon. This conflicts with [`base64content`]
     */
    source?: pulumi.Input<string>;
    /**
     * Any tags to assign to the Icon
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.IconTimeouts>;
    /**
     * The URL for getting the icon's raw data
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Icon resource.
 */
export interface IconArgs {
    /**
     * The base64 encoded content to upload to as the Icon. This conflicts with [`source`]
     */
    base64content?: pulumi.Input<string>;
    /**
     * The name of the Icon. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    /**
     * The file path to upload to as the Icon. This conflicts with [`base64content`]
     */
    source?: pulumi.Input<string>;
    /**
     * Any tags to assign to the Icon
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.IconTimeouts>;
}
