// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProxylbAcme extends pulumi.CustomResource {
    /**
     * Get an existing ProxylbAcme resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProxylbAcmeState, opts?: pulumi.CustomResourceOptions): ProxylbAcme {
        return new ProxylbAcme(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/proxylbAcme:ProxylbAcme';

    /**
     * Returns true if the given object is an instance of ProxylbAcme.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProxylbAcme {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProxylbAcme.__pulumiType;
    }

    /**
     * The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be
     * set `true` explicitly
     */
    public readonly acceptTos!: pulumi.Output<boolean>;
    public /*out*/ readonly certificates!: pulumi.Output<outputs.ProxylbAcmeCertificate[]>;
    /**
     * The FQDN used by ACME. This must set resolvable value
     */
    public readonly commonName!: pulumi.Output<string>;
    /**
     * The timeout in seconds for the certificate acquisition to complete
     */
    public readonly getCertificatesTimeoutSec!: pulumi.Output<number | undefined>;
    /**
     * The id of the ProxyLB that set ACME settings to
     */
    public readonly proxylbId!: pulumi.Output<string>;
    /**
     * The Subject alternative names used by ACME
     */
    public readonly subjectAltNames!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ProxylbAcmeTimeouts | undefined>;
    /**
     * The wait time in seconds. This typically used for waiting for a DNS propagation
     */
    public readonly updateDelaySec!: pulumi.Output<number | undefined>;

    /**
     * Create a ProxylbAcme resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProxylbAcmeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProxylbAcmeArgs | ProxylbAcmeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProxylbAcmeState | undefined;
            resourceInputs["acceptTos"] = state ? state.acceptTos : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["getCertificatesTimeoutSec"] = state ? state.getCertificatesTimeoutSec : undefined;
            resourceInputs["proxylbId"] = state ? state.proxylbId : undefined;
            resourceInputs["subjectAltNames"] = state ? state.subjectAltNames : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateDelaySec"] = state ? state.updateDelaySec : undefined;
        } else {
            const args = argsOrState as ProxylbAcmeArgs | undefined;
            if ((!args || args.acceptTos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceptTos'");
            }
            if ((!args || args.commonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if ((!args || args.proxylbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proxylbId'");
            }
            resourceInputs["acceptTos"] = args ? args.acceptTos : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["getCertificatesTimeoutSec"] = args ? args.getCertificatesTimeoutSec : undefined;
            resourceInputs["proxylbId"] = args ? args.proxylbId : undefined;
            resourceInputs["subjectAltNames"] = args ? args.subjectAltNames : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["updateDelaySec"] = args ? args.updateDelaySec : undefined;
            resourceInputs["certificates"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProxylbAcme.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProxylbAcme resources.
 */
export interface ProxylbAcmeState {
    /**
     * The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be
     * set `true` explicitly
     */
    acceptTos?: pulumi.Input<boolean>;
    certificates?: pulumi.Input<pulumi.Input<inputs.ProxylbAcmeCertificate>[]>;
    /**
     * The FQDN used by ACME. This must set resolvable value
     */
    commonName?: pulumi.Input<string>;
    /**
     * The timeout in seconds for the certificate acquisition to complete
     */
    getCertificatesTimeoutSec?: pulumi.Input<number>;
    /**
     * The id of the ProxyLB that set ACME settings to
     */
    proxylbId?: pulumi.Input<string>;
    /**
     * The Subject alternative names used by ACME
     */
    subjectAltNames?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ProxylbAcmeTimeouts>;
    /**
     * The wait time in seconds. This typically used for waiting for a DNS propagation
     */
    updateDelaySec?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ProxylbAcme resource.
 */
export interface ProxylbAcmeArgs {
    /**
     * The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be
     * set `true` explicitly
     */
    acceptTos: pulumi.Input<boolean>;
    /**
     * The FQDN used by ACME. This must set resolvable value
     */
    commonName: pulumi.Input<string>;
    /**
     * The timeout in seconds for the certificate acquisition to complete
     */
    getCertificatesTimeoutSec?: pulumi.Input<number>;
    /**
     * The id of the ProxyLB that set ACME settings to
     */
    proxylbId: pulumi.Input<string>;
    /**
     * The Subject alternative names used by ACME
     */
    subjectAltNames?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ProxylbAcmeTimeouts>;
    /**
     * The wait time in seconds. This typically used for waiting for a DNS propagation
     */
    updateDelaySec?: pulumi.Input<number>;
}
