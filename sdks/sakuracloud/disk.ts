// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Disk extends pulumi.CustomResource {
    /**
     * Get an existing Disk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiskState, opts?: pulumi.CustomResourceOptions): Disk {
        return new Disk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/disk:Disk';

    /**
     * Returns true if the given object is an instance of Disk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Disk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Disk.__pulumiType;
    }

    /**
     * The name of the disk connector. This must be one of [`virtio`/`ide`]
     */
    public readonly connector!: pulumi.Output<string | undefined>;
    /**
     * The description of the disk. The length of this value must be in the range [`1`-`512`]
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A list of disk id. The disk will be located to different storage from these disks
     */
    public readonly distantFroms!: pulumi.Output<string[] | undefined>;
    /**
     * The disk encryption algorithm. This must be one of [`none`/`aes256_xts`]
     */
    public readonly encryptionAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * The icon id to attach to the disk
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The name of the disk. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The plan name of the disk. This must be one of [`ssd`/`hdd`]
     */
    public readonly plan!: pulumi.Output<string | undefined>;
    /**
     * The id of the Server connected to the disk
     */
    public /*out*/ readonly serverId!: pulumi.Output<string>;
    /**
     * The size of disk in GiB
     */
    public readonly size!: pulumi.Output<number | undefined>;
    /**
     * The id of the source archive. This conflicts with [`source_disk_id`]
     */
    public readonly sourceArchiveId!: pulumi.Output<string | undefined>;
    /**
     * The id of the source disk. This conflicts with [`source_archive_id`]
     */
    public readonly sourceDiskId!: pulumi.Output<string | undefined>;
    /**
     * Any tags to assign to the disk
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DiskTimeouts | undefined>;
    /**
     * The name of zone that the disk will be created (e.g. `is1a`, `tk1a`)
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Disk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiskArgs | DiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiskState | undefined;
            resourceInputs["connector"] = state ? state.connector : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["distantFroms"] = state ? state.distantFroms : undefined;
            resourceInputs["encryptionAlgorithm"] = state ? state.encryptionAlgorithm : undefined;
            resourceInputs["iconId"] = state ? state.iconId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sourceArchiveId"] = state ? state.sourceArchiveId : undefined;
            resourceInputs["sourceDiskId"] = state ? state.sourceDiskId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as DiskArgs | undefined;
            resourceInputs["connector"] = args ? args.connector : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["distantFroms"] = args ? args.distantFroms : undefined;
            resourceInputs["encryptionAlgorithm"] = args ? args.encryptionAlgorithm : undefined;
            resourceInputs["iconId"] = args ? args.iconId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sourceArchiveId"] = args ? args.sourceArchiveId : undefined;
            resourceInputs["sourceDiskId"] = args ? args.sourceDiskId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["serverId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Disk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Disk resources.
 */
export interface DiskState {
    /**
     * The name of the disk connector. This must be one of [`virtio`/`ide`]
     */
    connector?: pulumi.Input<string>;
    /**
     * The description of the disk. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * A list of disk id. The disk will be located to different storage from these disks
     */
    distantFroms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The disk encryption algorithm. This must be one of [`none`/`aes256_xts`]
     */
    encryptionAlgorithm?: pulumi.Input<string>;
    /**
     * The icon id to attach to the disk
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the disk. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    /**
     * The plan name of the disk. This must be one of [`ssd`/`hdd`]
     */
    plan?: pulumi.Input<string>;
    /**
     * The id of the Server connected to the disk
     */
    serverId?: pulumi.Input<string>;
    /**
     * The size of disk in GiB
     */
    size?: pulumi.Input<number>;
    /**
     * The id of the source archive. This conflicts with [`source_disk_id`]
     */
    sourceArchiveId?: pulumi.Input<string>;
    /**
     * The id of the source disk. This conflicts with [`source_archive_id`]
     */
    sourceDiskId?: pulumi.Input<string>;
    /**
     * Any tags to assign to the disk
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.DiskTimeouts>;
    /**
     * The name of zone that the disk will be created (e.g. `is1a`, `tk1a`)
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Disk resource.
 */
export interface DiskArgs {
    /**
     * The name of the disk connector. This must be one of [`virtio`/`ide`]
     */
    connector?: pulumi.Input<string>;
    /**
     * The description of the disk. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * A list of disk id. The disk will be located to different storage from these disks
     */
    distantFroms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The disk encryption algorithm. This must be one of [`none`/`aes256_xts`]
     */
    encryptionAlgorithm?: pulumi.Input<string>;
    /**
     * The icon id to attach to the disk
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the disk. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    /**
     * The plan name of the disk. This must be one of [`ssd`/`hdd`]
     */
    plan?: pulumi.Input<string>;
    /**
     * The size of disk in GiB
     */
    size?: pulumi.Input<number>;
    /**
     * The id of the source archive. This conflicts with [`source_disk_id`]
     */
    sourceArchiveId?: pulumi.Input<string>;
    /**
     * The id of the source disk. This conflicts with [`source_archive_id`]
     */
    sourceDiskId?: pulumi.Input<string>;
    /**
     * Any tags to assign to the disk
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.DiskTimeouts>;
    /**
     * The name of zone that the disk will be created (e.g. `is1a`, `tk1a`)
     */
    zone?: pulumi.Input<string>;
}
