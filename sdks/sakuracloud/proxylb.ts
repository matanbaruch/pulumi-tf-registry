// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Proxylb extends pulumi.CustomResource {
    /**
     * Get an existing Proxylb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProxylbState, opts?: pulumi.CustomResourceOptions): Proxylb {
        return new Proxylb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/proxylb:Proxylb';

    /**
     * Returns true if the given object is an instance of Proxylb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Proxylb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Proxylb.__pulumiType;
    }

    /**
     * Mode of http keep-alive with backend. This must be one of [`safe`/`aggressive`]
     */
    public readonly backendHttpKeepAlive!: pulumi.Output<string | undefined>;
    public readonly bindPorts!: pulumi.Output<outputs.ProxylbBindPort[]>;
    public readonly certificate!: pulumi.Output<outputs.ProxylbCertificate | undefined>;
    /**
     * The description of the ProxyLB. The length of this value must be in the range [`1`-`512`]
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The FQDN for accessing to the ProxyLB. This is typically used as value of CNAME record
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * The flag to enable gzip compression
     */
    public readonly gzip!: pulumi.Output<boolean | undefined>;
    public readonly healthCheck!: pulumi.Output<outputs.ProxylbHealthCheck>;
    /**
     * The icon id to attach to the ProxyLB
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The name of the ProxyLB. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`/`400000`]
     */
    public readonly plan!: pulumi.Output<number | undefined>;
    /**
     * A list of CIDR block used by the ProxyLB to access the server
     */
    public /*out*/ readonly proxyNetworks!: pulumi.Output<string[]>;
    /**
     * The flag to enable proxy protocol v2
     */
    public readonly proxyProtocol!: pulumi.Output<boolean | undefined>;
    /**
     * The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`/`anycast`]
     */
    public readonly region!: pulumi.Output<string | undefined>;
    public readonly rules!: pulumi.Output<outputs.ProxylbRule[] | undefined>;
    public readonly servers!: pulumi.Output<outputs.ProxylbServer[] | undefined>;
    public readonly sorryServer!: pulumi.Output<outputs.ProxylbSorryServer | undefined>;
    /**
     * The flag to enable sticky session
     */
    public readonly stickySession!: pulumi.Output<boolean | undefined>;
    public readonly syslog!: pulumi.Output<outputs.ProxylbSyslog | undefined>;
    /**
     * Any tags to assign to the ProxyLB
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The timeout duration in seconds
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ProxylbTimeouts | undefined>;
    /**
     * The virtual IP address assigned to the ProxyLB
     */
    public /*out*/ readonly vip!: pulumi.Output<string>;
    /**
     * The flag to enable VIP fail-over
     */
    public readonly vipFailover!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Proxylb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProxylbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProxylbArgs | ProxylbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProxylbState | undefined;
            resourceInputs["backendHttpKeepAlive"] = state ? state.backendHttpKeepAlive : undefined;
            resourceInputs["bindPorts"] = state ? state.bindPorts : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["gzip"] = state ? state.gzip : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["iconId"] = state ? state.iconId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["proxyNetworks"] = state ? state.proxyNetworks : undefined;
            resourceInputs["proxyProtocol"] = state ? state.proxyProtocol : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["sorryServer"] = state ? state.sorryServer : undefined;
            resourceInputs["stickySession"] = state ? state.stickySession : undefined;
            resourceInputs["syslog"] = state ? state.syslog : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vip"] = state ? state.vip : undefined;
            resourceInputs["vipFailover"] = state ? state.vipFailover : undefined;
        } else {
            const args = argsOrState as ProxylbArgs | undefined;
            if ((!args || args.bindPorts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindPorts'");
            }
            if ((!args || args.healthCheck === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthCheck'");
            }
            resourceInputs["backendHttpKeepAlive"] = args ? args.backendHttpKeepAlive : undefined;
            resourceInputs["bindPorts"] = args ? args.bindPorts : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gzip"] = args ? args.gzip : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["iconId"] = args ? args.iconId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["proxyProtocol"] = args ? args.proxyProtocol : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["sorryServer"] = args ? args.sorryServer : undefined;
            resourceInputs["stickySession"] = args ? args.stickySession : undefined;
            resourceInputs["syslog"] = args ? args.syslog : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vipFailover"] = args ? args.vipFailover : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["proxyNetworks"] = undefined /*out*/;
            resourceInputs["vip"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Proxylb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Proxylb resources.
 */
export interface ProxylbState {
    /**
     * Mode of http keep-alive with backend. This must be one of [`safe`/`aggressive`]
     */
    backendHttpKeepAlive?: pulumi.Input<string>;
    bindPorts?: pulumi.Input<pulumi.Input<inputs.ProxylbBindPort>[]>;
    certificate?: pulumi.Input<inputs.ProxylbCertificate>;
    /**
     * The description of the ProxyLB. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * The FQDN for accessing to the ProxyLB. This is typically used as value of CNAME record
     */
    fqdn?: pulumi.Input<string>;
    /**
     * The flag to enable gzip compression
     */
    gzip?: pulumi.Input<boolean>;
    healthCheck?: pulumi.Input<inputs.ProxylbHealthCheck>;
    /**
     * The icon id to attach to the ProxyLB
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the ProxyLB. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    /**
     * The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`/`400000`]
     */
    plan?: pulumi.Input<number>;
    /**
     * A list of CIDR block used by the ProxyLB to access the server
     */
    proxyNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The flag to enable proxy protocol v2
     */
    proxyProtocol?: pulumi.Input<boolean>;
    /**
     * The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`/`anycast`]
     */
    region?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.ProxylbRule>[]>;
    servers?: pulumi.Input<pulumi.Input<inputs.ProxylbServer>[]>;
    sorryServer?: pulumi.Input<inputs.ProxylbSorryServer>;
    /**
     * The flag to enable sticky session
     */
    stickySession?: pulumi.Input<boolean>;
    syslog?: pulumi.Input<inputs.ProxylbSyslog>;
    /**
     * Any tags to assign to the ProxyLB
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The timeout duration in seconds
     */
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ProxylbTimeouts>;
    /**
     * The virtual IP address assigned to the ProxyLB
     */
    vip?: pulumi.Input<string>;
    /**
     * The flag to enable VIP fail-over
     */
    vipFailover?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Proxylb resource.
 */
export interface ProxylbArgs {
    /**
     * Mode of http keep-alive with backend. This must be one of [`safe`/`aggressive`]
     */
    backendHttpKeepAlive?: pulumi.Input<string>;
    bindPorts: pulumi.Input<pulumi.Input<inputs.ProxylbBindPort>[]>;
    certificate?: pulumi.Input<inputs.ProxylbCertificate>;
    /**
     * The description of the ProxyLB. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * The flag to enable gzip compression
     */
    gzip?: pulumi.Input<boolean>;
    healthCheck: pulumi.Input<inputs.ProxylbHealthCheck>;
    /**
     * The icon id to attach to the ProxyLB
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the ProxyLB. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    /**
     * The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`/`400000`]
     */
    plan?: pulumi.Input<number>;
    /**
     * The flag to enable proxy protocol v2
     */
    proxyProtocol?: pulumi.Input<boolean>;
    /**
     * The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`/`anycast`]
     */
    region?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.ProxylbRule>[]>;
    servers?: pulumi.Input<pulumi.Input<inputs.ProxylbServer>[]>;
    sorryServer?: pulumi.Input<inputs.ProxylbSorryServer>;
    /**
     * The flag to enable sticky session
     */
    stickySession?: pulumi.Input<boolean>;
    syslog?: pulumi.Input<inputs.ProxylbSyslog>;
    /**
     * Any tags to assign to the ProxyLB
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The timeout duration in seconds
     */
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ProxylbTimeouts>;
    /**
     * The flag to enable VIP fail-over
     */
    vipFailover?: pulumi.Input<boolean>;
}
