// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordState, opts?: pulumi.CustomResourceOptions): DnsRecord {
        return new DnsRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/dnsRecord:DnsRecord';

    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }

    /**
     * The id of the DNS resource
     */
    public readonly dnsId!: pulumi.Output<string>;
    /**
     * The name of the DNS Record resource
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of port. This must be in the range [`1`-`65535`]
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * The priority of target DNS Record. This must be in the range [`0`-`65535`]
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DnsRecordTimeouts | undefined>;
    /**
     * The number of the TTL
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * The type of DNS Record. This must be one of
     * [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`HTTPS`/`SVCB`/`PTR`]
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The value of the DNS Record
     */
    public readonly value!: pulumi.Output<string>;
    /**
     * The weight of target DNS Record. This must be in the range [`0`-`65535`]
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a DnsRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordArgs | DnsRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRecordState | undefined;
            resourceInputs["dnsId"] = state ? state.dnsId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as DnsRecordArgs | undefined;
            if ((!args || args.dnsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["dnsId"] = args ? args.dnsId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsRecord resources.
 */
export interface DnsRecordState {
    /**
     * The id of the DNS resource
     */
    dnsId?: pulumi.Input<string>;
    /**
     * The name of the DNS Record resource
     */
    name?: pulumi.Input<string>;
    /**
     * The number of port. This must be in the range [`1`-`65535`]
     */
    port?: pulumi.Input<number>;
    /**
     * The priority of target DNS Record. This must be in the range [`0`-`65535`]
     */
    priority?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.DnsRecordTimeouts>;
    /**
     * The number of the TTL
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of DNS Record. This must be one of
     * [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`HTTPS`/`SVCB`/`PTR`]
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the DNS Record
     */
    value?: pulumi.Input<string>;
    /**
     * The weight of target DNS Record. This must be in the range [`0`-`65535`]
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DnsRecord resource.
 */
export interface DnsRecordArgs {
    /**
     * The id of the DNS resource
     */
    dnsId: pulumi.Input<string>;
    /**
     * The name of the DNS Record resource
     */
    name?: pulumi.Input<string>;
    /**
     * The number of port. This must be in the range [`1`-`65535`]
     */
    port?: pulumi.Input<number>;
    /**
     * The priority of target DNS Record. This must be in the range [`0`-`65535`]
     */
    priority?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.DnsRecordTimeouts>;
    /**
     * The number of the TTL
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of DNS Record. This must be one of
     * [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`HTTPS`/`SVCB`/`PTR`]
     */
    type: pulumi.Input<string>;
    /**
     * The value of the DNS Record
     */
    value: pulumi.Input<string>;
    /**
     * The weight of target DNS Record. This must be in the range [`0`-`65535`]
     */
    weight?: pulumi.Input<number>;
}
