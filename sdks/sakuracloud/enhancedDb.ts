// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EnhancedDb extends pulumi.CustomResource {
    /**
     * Get an existing EnhancedDb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnhancedDbState, opts?: pulumi.CustomResourceOptions): EnhancedDb {
        return new EnhancedDb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/enhancedDb:EnhancedDb';

    /**
     * Returns true if the given object is an instance of EnhancedDb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnhancedDb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnhancedDb.__pulumiType;
    }

    /**
     * A list of CIDR blocks allowed to connect
     */
    public readonly allowedNetworks!: pulumi.Output<string[] | undefined>;
    /**
     * The name of database
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * The type of database. This must be one of [`tidb`/`mariadb`]
     */
    public readonly databaseType!: pulumi.Output<string>;
    /**
     * The description of the Enhanced Database. The length of this value must be in the range [`1`-`512`]
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of database host. This will be built from `database_name` + `tidb-is1.db.sakurausercontent.com`
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * The icon id to attach to the Enhanced Database
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The value of max connections setting
     */
    public /*out*/ readonly maxConnections!: pulumi.Output<number>;
    /**
     * The name of the Enhanced Database. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password of database
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * The name of region that the database is in. This must be one of [`is1`/`tk1`]
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Any tags to assign to the Enhanced Database
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EnhancedDbTimeouts | undefined>;

    /**
     * Create a EnhancedDb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnhancedDbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnhancedDbArgs | EnhancedDbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnhancedDbState | undefined;
            resourceInputs["allowedNetworks"] = state ? state.allowedNetworks : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["databaseType"] = state ? state.databaseType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["iconId"] = state ? state.iconId : undefined;
            resourceInputs["maxConnections"] = state ? state.maxConnections : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EnhancedDbArgs | undefined;
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.databaseType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseType'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["allowedNetworks"] = args ? args.allowedNetworks : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["databaseType"] = args ? args.databaseType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["iconId"] = args ? args.iconId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["maxConnections"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EnhancedDb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EnhancedDb resources.
 */
export interface EnhancedDbState {
    /**
     * A list of CIDR blocks allowed to connect
     */
    allowedNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of database
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The type of database. This must be one of [`tidb`/`mariadb`]
     */
    databaseType?: pulumi.Input<string>;
    /**
     * The description of the Enhanced Database. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * The name of database host. This will be built from `database_name` + `tidb-is1.db.sakurausercontent.com`
     */
    hostname?: pulumi.Input<string>;
    /**
     * The icon id to attach to the Enhanced Database
     */
    iconId?: pulumi.Input<string>;
    /**
     * The value of max connections setting
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * The name of the Enhanced Database. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    /**
     * The password of database
     */
    password?: pulumi.Input<string>;
    /**
     * The name of region that the database is in. This must be one of [`is1`/`tk1`]
     */
    region?: pulumi.Input<string>;
    /**
     * Any tags to assign to the Enhanced Database
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.EnhancedDbTimeouts>;
}

/**
 * The set of arguments for constructing a EnhancedDb resource.
 */
export interface EnhancedDbArgs {
    /**
     * A list of CIDR blocks allowed to connect
     */
    allowedNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of database
     */
    databaseName: pulumi.Input<string>;
    /**
     * The type of database. This must be one of [`tidb`/`mariadb`]
     */
    databaseType: pulumi.Input<string>;
    /**
     * The description of the Enhanced Database. The length of this value must be in the range [`1`-`512`]
     */
    description?: pulumi.Input<string>;
    /**
     * The icon id to attach to the Enhanced Database
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the Enhanced Database. The length of this value must be in the range [`1`-`64`]
     */
    name?: pulumi.Input<string>;
    /**
     * The password of database
     */
    password: pulumi.Input<string>;
    /**
     * The name of region that the database is in. This must be one of [`is1`/`tk1`]
     */
    region: pulumi.Input<string>;
    /**
     * Any tags to assign to the Enhanced Database
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.EnhancedDbTimeouts>;
}
