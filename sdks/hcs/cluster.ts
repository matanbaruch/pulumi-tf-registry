// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcs:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The url of the Azure blob storage container to write audit logs to if `audit_logging_enabled` is `true`.
     */
    public readonly auditLogStorageContainerUrl!: pulumi.Output<string | undefined>;
    /**
     * Enables Consul audit logging for the cluster resource. Defaults to `false`.
     */
    public readonly auditLoggingEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Blob Container in which cluster data is persisted.
     */
    public /*out*/ readonly blobContainerName!: pulumi.Output<string>;
    /**
     * The mode of the cluster ('Development' or 'Production'). Development clusters only have a single Consul server.
     * Production clusters are fully supported, full featured, and deploy with a minimum of three hosts.
     */
    public readonly clusterMode!: pulumi.Output<string>;
    /**
     * The name of the cluster Managed Resource. If not specified, it is defaulted to the value of `managed_application_name`.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Denotes that automatic Consul upgrades are enabled.
     */
    public /*out*/ readonly consulAutomaticUpgrades!: pulumi.Output<boolean>;
    /**
     * The cluster CA file encoded as a Base64 string.
     */
    public /*out*/ readonly consulCaFile!: pulumi.Output<string>;
    /**
     * The cluster ID.
     */
    public /*out*/ readonly consulClusterId!: pulumi.Output<string>;
    /**
     * The cluster config encoded as a Base64 string.
     */
    public /*out*/ readonly consulConfigFile!: pulumi.Output<string>;
    /**
     * Denotes that Consul connect is enabled.
     */
    public /*out*/ readonly consulConnect!: pulumi.Output<boolean>;
    /**
     * The Consul data center name of the cluster. If not specified, it is defaulted to the value of
     * `managed_application_name`.
     */
    public readonly consulDatacenter!: pulumi.Output<string>;
    /**
     * Denotes that the cluster has an external endpoint for the Consul UI. Defaults to `false`.
     */
    public readonly consulExternalEndpoint!: pulumi.Output<boolean | undefined>;
    /**
     * The public URL for the Consul UI. This will be empty if `consul_external_endpoint` is `true`.
     */
    public /*out*/ readonly consulExternalEndpointUrl!: pulumi.Output<string>;
    /**
     * The token used to join a federation of Consul clusters. If the cluster is not part of a federation, this field will be
     * empty.
     */
    public readonly consulFederationToken!: pulumi.Output<string | undefined>;
    /**
     * The private URL for the Consul UI.
     */
    public /*out*/ readonly consulPrivateEndpointUrl!: pulumi.Output<string>;
    /**
     * The accessor ID of the root ACL token that is generated upon cluster creation. If a new root token is generated using
     * the `hcs.ClusterRootToken` resource, this field is no longer valid.
     */
    public /*out*/ readonly consulRootTokenAccessorId!: pulumi.Output<string>;
    /**
     * The secret ID of the root ACL token that is generated upon cluster creation. If a new root token is generated using the
     * `hcs.ClusterRootToken` resource, this field is no longer valid.
     */
    public /*out*/ readonly consulRootTokenSecretId!: pulumi.Output<string>;
    /**
     * The Consul snapshot interval.
     */
    public /*out*/ readonly consulSnapshotInterval!: pulumi.Output<string>;
    /**
     * The retention policy for Consul snapshots.
     */
    public /*out*/ readonly consulSnapshotRetention!: pulumi.Output<string>;
    /**
     * The Consul version of the cluster.
     */
    public /*out*/ readonly consulVersion!: pulumi.Output<string>;
    /**
     * The contact email for the primary owner of the cluster.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * The Azure region that the cluster is deployed to. If not specified, it is defaulted to the region of the Resource Group
     * the Managed Application belongs to.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The ID of the Managed Application.
     */
    public /*out*/ readonly managedApplicationId!: pulumi.Output<string>;
    /**
     * The name of the HCS Azure Managed Application.
     */
    public readonly managedApplicationName!: pulumi.Output<string>;
    /**
     * The name of the managed identity used for writing audit logs if `audit_logging_enable` is `true`.
     */
    public /*out*/ readonly managedIdentityName!: pulumi.Output<string>;
    /**
     * The name of the Managed Resource Group in which the cluster resources belong. If not specified, it is defaulted to the
     * value of `managed_application_name` with 'mrg-' prepended.
     */
    public readonly managedResourceGroupName!: pulumi.Output<string>;
    /**
     * The minimum Consul version of the cluster. If not specified, it is defaulted to the version that is currently
     * recommended by HCS.
     */
    public readonly minConsulVersion!: pulumi.Output<string | undefined>;
    /**
     * The name of the Azure Marketplace HCS plan for the cluster. If not specified, it will default to the current HCS default
     * plan (see the `hcs.getPlanDefaults` data source).
     */
    public readonly planName!: pulumi.Output<string>;
    /**
     * The name of the Resource Group in which the HCS Azure Managed Application belongs.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * The state of the cluster.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The name of the Storage Account in which cluster data is persisted.
     */
    public /*out*/ readonly storageAccountName!: pulumi.Output<string>;
    /**
     * The name of the Storage Account's Resource Group.
     */
    public /*out*/ readonly storageAccountResourceGroup!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the HCS Azure Managed Application resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ClusterTimeouts | undefined>;
    /**
     * The VNET CIDR range of the Consul cluster. Defaults to `172.25.16.0/24`.
     */
    public readonly vnetCidr!: pulumi.Output<string | undefined>;
    /**
     * The ID of the cluster's managed VNet.
     */
    public /*out*/ readonly vnetId!: pulumi.Output<string>;
    /**
     * The name of the cluster's managed VNet.
     */
    public /*out*/ readonly vnetName!: pulumi.Output<string>;
    /**
     * The resource group that the cluster's managed VNet belongs to. This will be the same value as
     * `managed_resource_group_name`.
     */
    public /*out*/ readonly vnetResourceGroupName!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["auditLogStorageContainerUrl"] = state ? state.auditLogStorageContainerUrl : undefined;
            resourceInputs["auditLoggingEnabled"] = state ? state.auditLoggingEnabled : undefined;
            resourceInputs["blobContainerName"] = state ? state.blobContainerName : undefined;
            resourceInputs["clusterMode"] = state ? state.clusterMode : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["consulAutomaticUpgrades"] = state ? state.consulAutomaticUpgrades : undefined;
            resourceInputs["consulCaFile"] = state ? state.consulCaFile : undefined;
            resourceInputs["consulClusterId"] = state ? state.consulClusterId : undefined;
            resourceInputs["consulConfigFile"] = state ? state.consulConfigFile : undefined;
            resourceInputs["consulConnect"] = state ? state.consulConnect : undefined;
            resourceInputs["consulDatacenter"] = state ? state.consulDatacenter : undefined;
            resourceInputs["consulExternalEndpoint"] = state ? state.consulExternalEndpoint : undefined;
            resourceInputs["consulExternalEndpointUrl"] = state ? state.consulExternalEndpointUrl : undefined;
            resourceInputs["consulFederationToken"] = state ? state.consulFederationToken : undefined;
            resourceInputs["consulPrivateEndpointUrl"] = state ? state.consulPrivateEndpointUrl : undefined;
            resourceInputs["consulRootTokenAccessorId"] = state ? state.consulRootTokenAccessorId : undefined;
            resourceInputs["consulRootTokenSecretId"] = state ? state.consulRootTokenSecretId : undefined;
            resourceInputs["consulSnapshotInterval"] = state ? state.consulSnapshotInterval : undefined;
            resourceInputs["consulSnapshotRetention"] = state ? state.consulSnapshotRetention : undefined;
            resourceInputs["consulVersion"] = state ? state.consulVersion : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedApplicationId"] = state ? state.managedApplicationId : undefined;
            resourceInputs["managedApplicationName"] = state ? state.managedApplicationName : undefined;
            resourceInputs["managedIdentityName"] = state ? state.managedIdentityName : undefined;
            resourceInputs["managedResourceGroupName"] = state ? state.managedResourceGroupName : undefined;
            resourceInputs["minConsulVersion"] = state ? state.minConsulVersion : undefined;
            resourceInputs["planName"] = state ? state.planName : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storageAccountName"] = state ? state.storageAccountName : undefined;
            resourceInputs["storageAccountResourceGroup"] = state ? state.storageAccountResourceGroup : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vnetCidr"] = state ? state.vnetCidr : undefined;
            resourceInputs["vnetId"] = state ? state.vnetId : undefined;
            resourceInputs["vnetName"] = state ? state.vnetName : undefined;
            resourceInputs["vnetResourceGroupName"] = state ? state.vnetResourceGroupName : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.clusterMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterMode'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.managedApplicationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedApplicationName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["auditLogStorageContainerUrl"] = args ? args.auditLogStorageContainerUrl : undefined;
            resourceInputs["auditLoggingEnabled"] = args ? args.auditLoggingEnabled : undefined;
            resourceInputs["clusterMode"] = args ? args.clusterMode : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["consulDatacenter"] = args ? args.consulDatacenter : undefined;
            resourceInputs["consulExternalEndpoint"] = args ? args.consulExternalEndpoint : undefined;
            resourceInputs["consulFederationToken"] = args ? args.consulFederationToken : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedApplicationName"] = args ? args.managedApplicationName : undefined;
            resourceInputs["managedResourceGroupName"] = args ? args.managedResourceGroupName : undefined;
            resourceInputs["minConsulVersion"] = args ? args.minConsulVersion : undefined;
            resourceInputs["planName"] = args ? args.planName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vnetCidr"] = args ? args.vnetCidr : undefined;
            resourceInputs["blobContainerName"] = undefined /*out*/;
            resourceInputs["consulAutomaticUpgrades"] = undefined /*out*/;
            resourceInputs["consulCaFile"] = undefined /*out*/;
            resourceInputs["consulClusterId"] = undefined /*out*/;
            resourceInputs["consulConfigFile"] = undefined /*out*/;
            resourceInputs["consulConnect"] = undefined /*out*/;
            resourceInputs["consulExternalEndpointUrl"] = undefined /*out*/;
            resourceInputs["consulPrivateEndpointUrl"] = undefined /*out*/;
            resourceInputs["consulRootTokenAccessorId"] = undefined /*out*/;
            resourceInputs["consulRootTokenSecretId"] = undefined /*out*/;
            resourceInputs["consulSnapshotInterval"] = undefined /*out*/;
            resourceInputs["consulSnapshotRetention"] = undefined /*out*/;
            resourceInputs["consulVersion"] = undefined /*out*/;
            resourceInputs["managedApplicationId"] = undefined /*out*/;
            resourceInputs["managedIdentityName"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["storageAccountName"] = undefined /*out*/;
            resourceInputs["storageAccountResourceGroup"] = undefined /*out*/;
            resourceInputs["vnetId"] = undefined /*out*/;
            resourceInputs["vnetName"] = undefined /*out*/;
            resourceInputs["vnetResourceGroupName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["consulRootTokenSecretId"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * The url of the Azure blob storage container to write audit logs to if `audit_logging_enabled` is `true`.
     */
    auditLogStorageContainerUrl?: pulumi.Input<string>;
    /**
     * Enables Consul audit logging for the cluster resource. Defaults to `false`.
     */
    auditLoggingEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Blob Container in which cluster data is persisted.
     */
    blobContainerName?: pulumi.Input<string>;
    /**
     * The mode of the cluster ('Development' or 'Production'). Development clusters only have a single Consul server.
     * Production clusters are fully supported, full featured, and deploy with a minimum of three hosts.
     */
    clusterMode?: pulumi.Input<string>;
    /**
     * The name of the cluster Managed Resource. If not specified, it is defaulted to the value of `managed_application_name`.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Denotes that automatic Consul upgrades are enabled.
     */
    consulAutomaticUpgrades?: pulumi.Input<boolean>;
    /**
     * The cluster CA file encoded as a Base64 string.
     */
    consulCaFile?: pulumi.Input<string>;
    /**
     * The cluster ID.
     */
    consulClusterId?: pulumi.Input<string>;
    /**
     * The cluster config encoded as a Base64 string.
     */
    consulConfigFile?: pulumi.Input<string>;
    /**
     * Denotes that Consul connect is enabled.
     */
    consulConnect?: pulumi.Input<boolean>;
    /**
     * The Consul data center name of the cluster. If not specified, it is defaulted to the value of
     * `managed_application_name`.
     */
    consulDatacenter?: pulumi.Input<string>;
    /**
     * Denotes that the cluster has an external endpoint for the Consul UI. Defaults to `false`.
     */
    consulExternalEndpoint?: pulumi.Input<boolean>;
    /**
     * The public URL for the Consul UI. This will be empty if `consul_external_endpoint` is `true`.
     */
    consulExternalEndpointUrl?: pulumi.Input<string>;
    /**
     * The token used to join a federation of Consul clusters. If the cluster is not part of a federation, this field will be
     * empty.
     */
    consulFederationToken?: pulumi.Input<string>;
    /**
     * The private URL for the Consul UI.
     */
    consulPrivateEndpointUrl?: pulumi.Input<string>;
    /**
     * The accessor ID of the root ACL token that is generated upon cluster creation. If a new root token is generated using
     * the `hcs.ClusterRootToken` resource, this field is no longer valid.
     */
    consulRootTokenAccessorId?: pulumi.Input<string>;
    /**
     * The secret ID of the root ACL token that is generated upon cluster creation. If a new root token is generated using the
     * `hcs.ClusterRootToken` resource, this field is no longer valid.
     */
    consulRootTokenSecretId?: pulumi.Input<string>;
    /**
     * The Consul snapshot interval.
     */
    consulSnapshotInterval?: pulumi.Input<string>;
    /**
     * The retention policy for Consul snapshots.
     */
    consulSnapshotRetention?: pulumi.Input<string>;
    /**
     * The Consul version of the cluster.
     */
    consulVersion?: pulumi.Input<string>;
    /**
     * The contact email for the primary owner of the cluster.
     */
    email?: pulumi.Input<string>;
    /**
     * The Azure region that the cluster is deployed to. If not specified, it is defaulted to the region of the Resource Group
     * the Managed Application belongs to.
     */
    location?: pulumi.Input<string>;
    /**
     * The ID of the Managed Application.
     */
    managedApplicationId?: pulumi.Input<string>;
    /**
     * The name of the HCS Azure Managed Application.
     */
    managedApplicationName?: pulumi.Input<string>;
    /**
     * The name of the managed identity used for writing audit logs if `audit_logging_enable` is `true`.
     */
    managedIdentityName?: pulumi.Input<string>;
    /**
     * The name of the Managed Resource Group in which the cluster resources belong. If not specified, it is defaulted to the
     * value of `managed_application_name` with 'mrg-' prepended.
     */
    managedResourceGroupName?: pulumi.Input<string>;
    /**
     * The minimum Consul version of the cluster. If not specified, it is defaulted to the version that is currently
     * recommended by HCS.
     */
    minConsulVersion?: pulumi.Input<string>;
    /**
     * The name of the Azure Marketplace HCS plan for the cluster. If not specified, it will default to the current HCS default
     * plan (see the `hcs.getPlanDefaults` data source).
     */
    planName?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the HCS Azure Managed Application belongs.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The state of the cluster.
     */
    state?: pulumi.Input<string>;
    /**
     * The name of the Storage Account in which cluster data is persisted.
     */
    storageAccountName?: pulumi.Input<string>;
    /**
     * The name of the Storage Account's Resource Group.
     */
    storageAccountResourceGroup?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the HCS Azure Managed Application resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ClusterTimeouts>;
    /**
     * The VNET CIDR range of the Consul cluster. Defaults to `172.25.16.0/24`.
     */
    vnetCidr?: pulumi.Input<string>;
    /**
     * The ID of the cluster's managed VNet.
     */
    vnetId?: pulumi.Input<string>;
    /**
     * The name of the cluster's managed VNet.
     */
    vnetName?: pulumi.Input<string>;
    /**
     * The resource group that the cluster's managed VNet belongs to. This will be the same value as
     * `managed_resource_group_name`.
     */
    vnetResourceGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The url of the Azure blob storage container to write audit logs to if `audit_logging_enabled` is `true`.
     */
    auditLogStorageContainerUrl?: pulumi.Input<string>;
    /**
     * Enables Consul audit logging for the cluster resource. Defaults to `false`.
     */
    auditLoggingEnabled?: pulumi.Input<boolean>;
    /**
     * The mode of the cluster ('Development' or 'Production'). Development clusters only have a single Consul server.
     * Production clusters are fully supported, full featured, and deploy with a minimum of three hosts.
     */
    clusterMode: pulumi.Input<string>;
    /**
     * The name of the cluster Managed Resource. If not specified, it is defaulted to the value of `managed_application_name`.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The Consul data center name of the cluster. If not specified, it is defaulted to the value of
     * `managed_application_name`.
     */
    consulDatacenter?: pulumi.Input<string>;
    /**
     * Denotes that the cluster has an external endpoint for the Consul UI. Defaults to `false`.
     */
    consulExternalEndpoint?: pulumi.Input<boolean>;
    /**
     * The token used to join a federation of Consul clusters. If the cluster is not part of a federation, this field will be
     * empty.
     */
    consulFederationToken?: pulumi.Input<string>;
    /**
     * The contact email for the primary owner of the cluster.
     */
    email: pulumi.Input<string>;
    /**
     * The Azure region that the cluster is deployed to. If not specified, it is defaulted to the region of the Resource Group
     * the Managed Application belongs to.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the HCS Azure Managed Application.
     */
    managedApplicationName: pulumi.Input<string>;
    /**
     * The name of the Managed Resource Group in which the cluster resources belong. If not specified, it is defaulted to the
     * value of `managed_application_name` with 'mrg-' prepended.
     */
    managedResourceGroupName?: pulumi.Input<string>;
    /**
     * The minimum Consul version of the cluster. If not specified, it is defaulted to the version that is currently
     * recommended by HCS.
     */
    minConsulVersion?: pulumi.Input<string>;
    /**
     * The name of the Azure Marketplace HCS plan for the cluster. If not specified, it will default to the current HCS default
     * plan (see the `hcs.getPlanDefaults` data source).
     */
    planName?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the HCS Azure Managed Application belongs.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the HCS Azure Managed Application resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ClusterTimeouts>;
    /**
     * The VNET CIDR range of the Consul cluster. Defaults to `172.25.16.0/24`.
     */
    vnetCidr?: pulumi.Input<string>;
}
