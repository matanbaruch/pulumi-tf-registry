// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("hcs:index/getCluster:getCluster", {
        "clusterName": args.clusterName,
        "id": args.id,
        "managedApplicationName": args.managedApplicationName,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    clusterName?: string;
    id?: string;
    managedApplicationName: string;
    resourceGroupName: string;
    timeouts?: inputs.GetClusterTimeouts;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    readonly blobContainerName: string;
    readonly clusterMode: string;
    readonly clusterName: string;
    readonly consulAutomaticUpgrades: boolean;
    readonly consulCaFile: string;
    readonly consulClusterId: string;
    readonly consulConfigFile: string;
    readonly consulConnect: boolean;
    readonly consulDatacenter: string;
    readonly consulExternalEndpoint: boolean;
    readonly consulExternalEndpointUrl: string;
    readonly consulFederationToken: string;
    readonly consulPrivateEndpointUrl: string;
    readonly consulSnapshotInterval: string;
    readonly consulSnapshotRetention: string;
    readonly consulVersion: string;
    readonly email: string;
    readonly id: string;
    readonly location: string;
    readonly managedApplicationId: string;
    readonly managedApplicationName: string;
    readonly managedResourceGroupName: string;
    readonly planName: string;
    readonly resourceGroupName: string;
    readonly state: string;
    readonly storageAccountName: string;
    readonly storageAccountResourceGroup: string;
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetClusterTimeouts;
    readonly vnetCidr: string;
    readonly vnetId: string;
    readonly vnetName: string;
    readonly vnetResourceGroupName: string;
}
export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    return pulumi.output(args).apply((a: any) => getCluster(a, opts))
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    clusterName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    managedApplicationName: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetClusterTimeoutsArgs>;
}
