// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterRootTokenArgs, ClusterRootTokenState } from "./clusterRootToken";
export type ClusterRootToken = import("./clusterRootToken").ClusterRootToken;
export const ClusterRootToken: typeof import("./clusterRootToken").ClusterRootToken = null as any;
utilities.lazyLoad(exports, ["ClusterRootToken"], () => require("./clusterRootToken"));

export { GetAgentHelmConfigArgs, GetAgentHelmConfigResult, GetAgentHelmConfigOutputArgs } from "./getAgentHelmConfig";
export const getAgentHelmConfig: typeof import("./getAgentHelmConfig").getAgentHelmConfig = null as any;
export const getAgentHelmConfigOutput: typeof import("./getAgentHelmConfig").getAgentHelmConfigOutput = null as any;
utilities.lazyLoad(exports, ["getAgentHelmConfig","getAgentHelmConfigOutput"], () => require("./getAgentHelmConfig"));

export { GetAgentKubernetesSecretArgs, GetAgentKubernetesSecretResult, GetAgentKubernetesSecretOutputArgs } from "./getAgentKubernetesSecret";
export const getAgentKubernetesSecret: typeof import("./getAgentKubernetesSecret").getAgentKubernetesSecret = null as any;
export const getAgentKubernetesSecretOutput: typeof import("./getAgentKubernetesSecret").getAgentKubernetesSecretOutput = null as any;
utilities.lazyLoad(exports, ["getAgentKubernetesSecret","getAgentKubernetesSecretOutput"], () => require("./getAgentKubernetesSecret"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetConsulVersionsArgs, GetConsulVersionsResult, GetConsulVersionsOutputArgs } from "./getConsulVersions";
export const getConsulVersions: typeof import("./getConsulVersions").getConsulVersions = null as any;
export const getConsulVersionsOutput: typeof import("./getConsulVersions").getConsulVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getConsulVersions","getConsulVersionsOutput"], () => require("./getConsulVersions"));

export { GetFederationTokenArgs, GetFederationTokenResult, GetFederationTokenOutputArgs } from "./getFederationToken";
export const getFederationToken: typeof import("./getFederationToken").getFederationToken = null as any;
export const getFederationTokenOutput: typeof import("./getFederationToken").getFederationTokenOutput = null as any;
utilities.lazyLoad(exports, ["getFederationToken","getFederationTokenOutput"], () => require("./getFederationToken"));

export { GetPlanDefaultsArgs, GetPlanDefaultsResult, GetPlanDefaultsOutputArgs } from "./getPlanDefaults";
export const getPlanDefaults: typeof import("./getPlanDefaults").getPlanDefaults = null as any;
export const getPlanDefaultsOutput: typeof import("./getPlanDefaults").getPlanDefaultsOutput = null as any;
utilities.lazyLoad(exports, ["getPlanDefaults","getPlanDefaultsOutput"], () => require("./getPlanDefaults"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "hcs:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "hcs:index/clusterRootToken:ClusterRootToken":
                return new ClusterRootToken(name, <any>undefined, { urn })
            case "hcs:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("hcs", "index/cluster", _module)
pulumi.runtime.registerResourceModule("hcs", "index/clusterRootToken", _module)
pulumi.runtime.registerResourceModule("hcs", "index/snapshot", _module)
pulumi.runtime.registerResourcePackage("hcs", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:hcs") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
