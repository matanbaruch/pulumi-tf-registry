// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getClusterstatus(args: GetClusterstatusArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterstatusResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("crunchybridge:index/getClusterstatus:getClusterstatus", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getClusterstatus.
 */
export interface GetClusterstatusArgs {
    id: string;
}

/**
 * A collection of values returned by getClusterstatus.
 */
export interface GetClusterstatusResult {
    readonly diskAvailableMb: number;
    readonly diskTotalSizeMb: number;
    readonly diskUsedMb: number;
    readonly id: string;
    readonly oldestBackup: string;
    readonly operations: outputs.GetClusterstatusOperation[];
    readonly state: string;
}
export function getClusterstatusOutput(args: GetClusterstatusOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterstatusResult> {
    return pulumi.output(args).apply((a: any) => getClusterstatus(a, opts))
}

/**
 * A collection of arguments for invoking getClusterstatus.
 */
export interface GetClusterstatusOutputArgs {
    id: pulumi.Input<string>;
}
