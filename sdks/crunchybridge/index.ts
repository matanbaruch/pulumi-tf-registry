// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { GetAccountResult } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetCloudproviderArgs, GetCloudproviderResult, GetCloudproviderOutputArgs } from "./getCloudprovider";
export const getCloudprovider: typeof import("./getCloudprovider").getCloudprovider = null as any;
export const getCloudproviderOutput: typeof import("./getCloudprovider").getCloudproviderOutput = null as any;
utilities.lazyLoad(exports, ["getCloudprovider","getCloudproviderOutput"], () => require("./getCloudprovider"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetClusteridsArgs, GetClusteridsResult, GetClusteridsOutputArgs } from "./getClusterids";
export const getClusterids: typeof import("./getClusterids").getClusterids = null as any;
export const getClusteridsOutput: typeof import("./getClusterids").getClusteridsOutput = null as any;
utilities.lazyLoad(exports, ["getClusterids","getClusteridsOutput"], () => require("./getClusterids"));

export { GetClusterrolesArgs, GetClusterrolesResult, GetClusterrolesOutputArgs } from "./getClusterroles";
export const getClusterroles: typeof import("./getClusterroles").getClusterroles = null as any;
export const getClusterrolesOutput: typeof import("./getClusterroles").getClusterrolesOutput = null as any;
utilities.lazyLoad(exports, ["getClusterroles","getClusterrolesOutput"], () => require("./getClusterroles"));

export { GetClusterstatusArgs, GetClusterstatusResult, GetClusterstatusOutputArgs } from "./getClusterstatus";
export const getClusterstatus: typeof import("./getClusterstatus").getClusterstatus = null as any;
export const getClusterstatusOutput: typeof import("./getClusterstatus").getClusterstatusOutput = null as any;
utilities.lazyLoad(exports, ["getClusterstatus","getClusterstatusOutput"], () => require("./getClusterstatus"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "crunchybridge:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("crunchybridge", "index/cluster", _module)
pulumi.runtime.registerResourcePackage("crunchybridge", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:crunchybridge") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
