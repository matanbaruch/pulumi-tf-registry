// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OsManagementHubManagedInstance extends pulumi.CustomResource {
    /**
     * Get an existing OsManagementHubManagedInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsManagementHubManagedInstanceState, opts?: pulumi.CustomResourceOptions): OsManagementHubManagedInstance {
        return new OsManagementHubManagedInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/osManagementHubManagedInstance:OsManagementHubManagedInstance';

    /**
     * Returns true if the given object is an instance of OsManagementHubManagedInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsManagementHubManagedInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsManagementHubManagedInstance.__pulumiType;
    }

    public /*out*/ readonly architecture!: pulumi.Output<string>;
    public readonly autonomousSettings!: pulumi.Output<outputs.OsManagementHubManagedInstanceAutonomousSettings | undefined>;
    public /*out*/ readonly bugUpdatesAvailable!: pulumi.Output<number>;
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly enhancementUpdatesAvailable!: pulumi.Output<number>;
    public /*out*/ readonly installedPackages!: pulumi.Output<number>;
    public /*out*/ readonly installedWindowsUpdates!: pulumi.Output<number>;
    public /*out*/ readonly isManagedByAutonomousLinux!: pulumi.Output<boolean>;
    public /*out*/ readonly isManagementStation!: pulumi.Output<boolean>;
    public /*out*/ readonly isRebootRequired!: pulumi.Output<boolean>;
    public /*out*/ readonly kspliceEffectiveKernelVersion!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleEnvironments!: pulumi.Output<outputs.OsManagementHubManagedInstanceLifecycleEnvironment[]>;
    public /*out*/ readonly lifecycleStages!: pulumi.Output<outputs.OsManagementHubManagedInstanceLifecycleStage[]>;
    public /*out*/ readonly location!: pulumi.Output<string>;
    public /*out*/ readonly managedInstanceGroups!: pulumi.Output<outputs.OsManagementHubManagedInstanceManagedInstanceGroup[]>;
    public readonly managedInstanceId!: pulumi.Output<string>;
    public readonly notificationTopicId!: pulumi.Output<string>;
    public /*out*/ readonly osFamily!: pulumi.Output<string>;
    public /*out*/ readonly osKernelVersion!: pulumi.Output<string>;
    public /*out*/ readonly osName!: pulumi.Output<string>;
    public /*out*/ readonly osVersion!: pulumi.Output<string>;
    public /*out*/ readonly otherUpdatesAvailable!: pulumi.Output<number>;
    public readonly primaryManagementStationId!: pulumi.Output<string>;
    public /*out*/ readonly profile!: pulumi.Output<string>;
    public /*out*/ readonly scheduledJobCount!: pulumi.Output<number>;
    public readonly secondaryManagementStationId!: pulumi.Output<string>;
    public /*out*/ readonly securityUpdatesAvailable!: pulumi.Output<number>;
    public /*out*/ readonly softwareSources!: pulumi.Output<outputs.OsManagementHubManagedInstanceSoftwareSource[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly tenancyId!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeLastBoot!: pulumi.Output<string>;
    public /*out*/ readonly timeLastCheckin!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OsManagementHubManagedInstanceTimeouts | undefined>;
    public /*out*/ readonly updatesAvailable!: pulumi.Output<number>;
    public /*out*/ readonly workRequestCount!: pulumi.Output<number>;

    /**
     * Create a OsManagementHubManagedInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsManagementHubManagedInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsManagementHubManagedInstanceArgs | OsManagementHubManagedInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsManagementHubManagedInstanceState | undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["autonomousSettings"] = state ? state.autonomousSettings : undefined;
            resourceInputs["bugUpdatesAvailable"] = state ? state.bugUpdatesAvailable : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enhancementUpdatesAvailable"] = state ? state.enhancementUpdatesAvailable : undefined;
            resourceInputs["installedPackages"] = state ? state.installedPackages : undefined;
            resourceInputs["installedWindowsUpdates"] = state ? state.installedWindowsUpdates : undefined;
            resourceInputs["isManagedByAutonomousLinux"] = state ? state.isManagedByAutonomousLinux : undefined;
            resourceInputs["isManagementStation"] = state ? state.isManagementStation : undefined;
            resourceInputs["isRebootRequired"] = state ? state.isRebootRequired : undefined;
            resourceInputs["kspliceEffectiveKernelVersion"] = state ? state.kspliceEffectiveKernelVersion : undefined;
            resourceInputs["lifecycleEnvironments"] = state ? state.lifecycleEnvironments : undefined;
            resourceInputs["lifecycleStages"] = state ? state.lifecycleStages : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedInstanceGroups"] = state ? state.managedInstanceGroups : undefined;
            resourceInputs["managedInstanceId"] = state ? state.managedInstanceId : undefined;
            resourceInputs["notificationTopicId"] = state ? state.notificationTopicId : undefined;
            resourceInputs["osFamily"] = state ? state.osFamily : undefined;
            resourceInputs["osKernelVersion"] = state ? state.osKernelVersion : undefined;
            resourceInputs["osName"] = state ? state.osName : undefined;
            resourceInputs["osVersion"] = state ? state.osVersion : undefined;
            resourceInputs["otherUpdatesAvailable"] = state ? state.otherUpdatesAvailable : undefined;
            resourceInputs["primaryManagementStationId"] = state ? state.primaryManagementStationId : undefined;
            resourceInputs["profile"] = state ? state.profile : undefined;
            resourceInputs["scheduledJobCount"] = state ? state.scheduledJobCount : undefined;
            resourceInputs["secondaryManagementStationId"] = state ? state.secondaryManagementStationId : undefined;
            resourceInputs["securityUpdatesAvailable"] = state ? state.securityUpdatesAvailable : undefined;
            resourceInputs["softwareSources"] = state ? state.softwareSources : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tenancyId"] = state ? state.tenancyId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeLastBoot"] = state ? state.timeLastBoot : undefined;
            resourceInputs["timeLastCheckin"] = state ? state.timeLastCheckin : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatesAvailable"] = state ? state.updatesAvailable : undefined;
            resourceInputs["workRequestCount"] = state ? state.workRequestCount : undefined;
        } else {
            const args = argsOrState as OsManagementHubManagedInstanceArgs | undefined;
            if ((!args || args.managedInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedInstanceId'");
            }
            resourceInputs["autonomousSettings"] = args ? args.autonomousSettings : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["managedInstanceId"] = args ? args.managedInstanceId : undefined;
            resourceInputs["notificationTopicId"] = args ? args.notificationTopicId : undefined;
            resourceInputs["primaryManagementStationId"] = args ? args.primaryManagementStationId : undefined;
            resourceInputs["secondaryManagementStationId"] = args ? args.secondaryManagementStationId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["architecture"] = undefined /*out*/;
            resourceInputs["bugUpdatesAvailable"] = undefined /*out*/;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["enhancementUpdatesAvailable"] = undefined /*out*/;
            resourceInputs["installedPackages"] = undefined /*out*/;
            resourceInputs["installedWindowsUpdates"] = undefined /*out*/;
            resourceInputs["isManagedByAutonomousLinux"] = undefined /*out*/;
            resourceInputs["isManagementStation"] = undefined /*out*/;
            resourceInputs["isRebootRequired"] = undefined /*out*/;
            resourceInputs["kspliceEffectiveKernelVersion"] = undefined /*out*/;
            resourceInputs["lifecycleEnvironments"] = undefined /*out*/;
            resourceInputs["lifecycleStages"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["managedInstanceGroups"] = undefined /*out*/;
            resourceInputs["osFamily"] = undefined /*out*/;
            resourceInputs["osKernelVersion"] = undefined /*out*/;
            resourceInputs["osName"] = undefined /*out*/;
            resourceInputs["osVersion"] = undefined /*out*/;
            resourceInputs["otherUpdatesAvailable"] = undefined /*out*/;
            resourceInputs["profile"] = undefined /*out*/;
            resourceInputs["scheduledJobCount"] = undefined /*out*/;
            resourceInputs["securityUpdatesAvailable"] = undefined /*out*/;
            resourceInputs["softwareSources"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tenancyId"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeLastBoot"] = undefined /*out*/;
            resourceInputs["timeLastCheckin"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["updatesAvailable"] = undefined /*out*/;
            resourceInputs["workRequestCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsManagementHubManagedInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsManagementHubManagedInstance resources.
 */
export interface OsManagementHubManagedInstanceState {
    architecture?: pulumi.Input<string>;
    autonomousSettings?: pulumi.Input<inputs.OsManagementHubManagedInstanceAutonomousSettings>;
    bugUpdatesAvailable?: pulumi.Input<number>;
    compartmentId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enhancementUpdatesAvailable?: pulumi.Input<number>;
    installedPackages?: pulumi.Input<number>;
    installedWindowsUpdates?: pulumi.Input<number>;
    isManagedByAutonomousLinux?: pulumi.Input<boolean>;
    isManagementStation?: pulumi.Input<boolean>;
    isRebootRequired?: pulumi.Input<boolean>;
    kspliceEffectiveKernelVersion?: pulumi.Input<string>;
    lifecycleEnvironments?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceLifecycleEnvironment>[]>;
    lifecycleStages?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceLifecycleStage>[]>;
    location?: pulumi.Input<string>;
    managedInstanceGroups?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceManagedInstanceGroup>[]>;
    managedInstanceId?: pulumi.Input<string>;
    notificationTopicId?: pulumi.Input<string>;
    osFamily?: pulumi.Input<string>;
    osKernelVersion?: pulumi.Input<string>;
    osName?: pulumi.Input<string>;
    osVersion?: pulumi.Input<string>;
    otherUpdatesAvailable?: pulumi.Input<number>;
    primaryManagementStationId?: pulumi.Input<string>;
    profile?: pulumi.Input<string>;
    scheduledJobCount?: pulumi.Input<number>;
    secondaryManagementStationId?: pulumi.Input<string>;
    securityUpdatesAvailable?: pulumi.Input<number>;
    softwareSources?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceSoftwareSource>[]>;
    status?: pulumi.Input<string>;
    tenancyId?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeLastBoot?: pulumi.Input<string>;
    timeLastCheckin?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsManagementHubManagedInstanceTimeouts>;
    updatesAvailable?: pulumi.Input<number>;
    workRequestCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OsManagementHubManagedInstance resource.
 */
export interface OsManagementHubManagedInstanceArgs {
    autonomousSettings?: pulumi.Input<inputs.OsManagementHubManagedInstanceAutonomousSettings>;
    description?: pulumi.Input<string>;
    managedInstanceId: pulumi.Input<string>;
    notificationTopicId?: pulumi.Input<string>;
    primaryManagementStationId?: pulumi.Input<string>;
    secondaryManagementStationId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsManagementHubManagedInstanceTimeouts>;
}
