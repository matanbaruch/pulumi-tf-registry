// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsKmsiSetting(args: GetIdentityDomainsKmsiSettingArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsKmsiSettingResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsKmsiSetting:getIdentityDomainsKmsiSetting", {
        "attributeSets": args.attributeSets,
        "attributes": args.attributes,
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "kmsiSettingId": args.kmsiSettingId,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsKmsiSetting.
 */
export interface GetIdentityDomainsKmsiSettingArgs {
    attributeSets?: string[];
    attributes?: string;
    authorization?: string;
    idcsEndpoint: string;
    kmsiSettingId: string;
    resourceTypeSchemaVersion?: string;
}

/**
 * A collection of values returned by getIdentityDomainsKmsiSetting.
 */
export interface GetIdentityDomainsKmsiSettingResult {
    readonly attributeSets?: string[];
    readonly attributes?: string;
    readonly authorization?: string;
    readonly compartmentOcid: string;
    readonly deleteInProgress: boolean;
    readonly domainOcid: string;
    readonly externalId: string;
    readonly id: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsKmsiSettingIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsKmsiSettingIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly kmsiFeatureEnabled: boolean;
    readonly kmsiPromptEnabled: boolean;
    readonly kmsiSettingId: string;
    readonly lastEnabledOn: string;
    readonly lastUsedValidityInDays: number;
    readonly maxAllowedSessions: number;
    readonly metas: outputs.GetIdentityDomainsKmsiSettingMeta[];
    readonly ocid: string;
    readonly resourceTypeSchemaVersion?: string;
    readonly schemas: string[];
    readonly tags: outputs.GetIdentityDomainsKmsiSettingTag[];
    readonly tenancyOcid: string;
    readonly tokenValidityInDays: number;
    readonly touPromptDisabled: boolean;
}
export function getIdentityDomainsKmsiSettingOutput(args: GetIdentityDomainsKmsiSettingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsKmsiSettingResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsKmsiSetting(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsKmsiSetting.
 */
export interface GetIdentityDomainsKmsiSettingOutputArgs {
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    kmsiSettingId: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
}
