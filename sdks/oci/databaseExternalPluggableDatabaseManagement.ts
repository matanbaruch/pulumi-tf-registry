// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseExternalPluggableDatabaseManagement extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseExternalPluggableDatabaseManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseExternalPluggableDatabaseManagementState, opts?: pulumi.CustomResourceOptions): DatabaseExternalPluggableDatabaseManagement {
        return new DatabaseExternalPluggableDatabaseManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseExternalPluggableDatabaseManagement:DatabaseExternalPluggableDatabaseManagement';

    /**
     * Returns true if the given object is an instance of DatabaseExternalPluggableDatabaseManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseExternalPluggableDatabaseManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseExternalPluggableDatabaseManagement.__pulumiType;
    }

    public readonly enableManagement!: pulumi.Output<boolean>;
    public readonly externalDatabaseConnectorId!: pulumi.Output<string>;
    public readonly externalPluggableDatabaseId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseExternalPluggableDatabaseManagementTimeouts | undefined>;

    /**
     * Create a DatabaseExternalPluggableDatabaseManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseExternalPluggableDatabaseManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseExternalPluggableDatabaseManagementArgs | DatabaseExternalPluggableDatabaseManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseExternalPluggableDatabaseManagementState | undefined;
            resourceInputs["enableManagement"] = state ? state.enableManagement : undefined;
            resourceInputs["externalDatabaseConnectorId"] = state ? state.externalDatabaseConnectorId : undefined;
            resourceInputs["externalPluggableDatabaseId"] = state ? state.externalPluggableDatabaseId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabaseExternalPluggableDatabaseManagementArgs | undefined;
            if ((!args || args.enableManagement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableManagement'");
            }
            if ((!args || args.externalDatabaseConnectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalDatabaseConnectorId'");
            }
            if ((!args || args.externalPluggableDatabaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalPluggableDatabaseId'");
            }
            resourceInputs["enableManagement"] = args ? args.enableManagement : undefined;
            resourceInputs["externalDatabaseConnectorId"] = args ? args.externalDatabaseConnectorId : undefined;
            resourceInputs["externalPluggableDatabaseId"] = args ? args.externalPluggableDatabaseId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseExternalPluggableDatabaseManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseExternalPluggableDatabaseManagement resources.
 */
export interface DatabaseExternalPluggableDatabaseManagementState {
    enableManagement?: pulumi.Input<boolean>;
    externalDatabaseConnectorId?: pulumi.Input<string>;
    externalPluggableDatabaseId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseExternalPluggableDatabaseManagementTimeouts>;
}

/**
 * The set of arguments for constructing a DatabaseExternalPluggableDatabaseManagement resource.
 */
export interface DatabaseExternalPluggableDatabaseManagementArgs {
    enableManagement: pulumi.Input<boolean>;
    externalDatabaseConnectorId: pulumi.Input<string>;
    externalPluggableDatabaseId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseExternalPluggableDatabaseManagementTimeouts>;
}
