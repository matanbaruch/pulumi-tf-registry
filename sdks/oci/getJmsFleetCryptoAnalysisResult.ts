// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getJmsFleetCryptoAnalysisResult(args: GetJmsFleetCryptoAnalysisResultArgs, opts?: pulumi.InvokeOptions): Promise<GetJmsFleetCryptoAnalysisResultResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getJmsFleetCryptoAnalysisResult:getJmsFleetCryptoAnalysisResult", {
        "cryptoAnalysisResultId": args.cryptoAnalysisResultId,
        "fleetId": args.fleetId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getJmsFleetCryptoAnalysisResult.
 */
export interface GetJmsFleetCryptoAnalysisResultArgs {
    cryptoAnalysisResultId: string;
    fleetId: string;
    id?: string;
}

/**
 * A collection of values returned by getJmsFleetCryptoAnalysisResult.
 */
export interface GetJmsFleetCryptoAnalysisResultResult {
    readonly aggregationMode: string;
    readonly bucket: string;
    readonly cryptoAnalysisResultId: string;
    readonly cryptoRoadmapVersion: string;
    readonly findingCount: number;
    readonly fleetId: string;
    readonly hostName: string;
    readonly id: string;
    readonly managedInstanceId: string;
    readonly namespace: string;
    readonly nonCompliantFindingCount: number;
    readonly object: string;
    readonly summarizedEventCount: number;
    readonly timeCreated: string;
    readonly timeFinished: string;
    readonly timeFirstEvent: string;
    readonly timeLastEvent: string;
    readonly timeStarted: string;
    readonly totalEventCount: number;
    readonly workRequestId: string;
}
export function getJmsFleetCryptoAnalysisResultOutput(args: GetJmsFleetCryptoAnalysisResultOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetJmsFleetCryptoAnalysisResultResult> {
    return pulumi.output(args).apply((a: any) => getJmsFleetCryptoAnalysisResult(a, opts))
}

/**
 * A collection of arguments for invoking getJmsFleetCryptoAnalysisResult.
 */
export interface GetJmsFleetCryptoAnalysisResultOutputArgs {
    cryptoAnalysisResultId: pulumi.Input<string>;
    fleetId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
