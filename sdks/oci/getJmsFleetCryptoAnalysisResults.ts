// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getJmsFleetCryptoAnalysisResults(args: GetJmsFleetCryptoAnalysisResultsArgs, opts?: pulumi.InvokeOptions): Promise<GetJmsFleetCryptoAnalysisResultsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getJmsFleetCryptoAnalysisResults:getJmsFleetCryptoAnalysisResults", {
        "aggregationMode": args.aggregationMode,
        "filters": args.filters,
        "findingCount": args.findingCount,
        "findingCountGreaterThan": args.findingCountGreaterThan,
        "fleetId": args.fleetId,
        "hostName": args.hostName,
        "id": args.id,
        "managedInstanceId": args.managedInstanceId,
        "nonCompliantFindingCount": args.nonCompliantFindingCount,
        "nonCompliantFindingCountGreaterThan": args.nonCompliantFindingCountGreaterThan,
        "timeEnd": args.timeEnd,
        "timeStart": args.timeStart,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getJmsFleetCryptoAnalysisResults.
 */
export interface GetJmsFleetCryptoAnalysisResultsArgs {
    aggregationMode?: string;
    filters?: inputs.GetJmsFleetCryptoAnalysisResultsFilter[];
    findingCount?: number;
    findingCountGreaterThan?: number;
    fleetId: string;
    hostName?: string;
    id?: string;
    managedInstanceId?: string;
    nonCompliantFindingCount?: number;
    nonCompliantFindingCountGreaterThan?: number;
    timeEnd?: string;
    timeStart?: string;
}

/**
 * A collection of values returned by getJmsFleetCryptoAnalysisResults.
 */
export interface GetJmsFleetCryptoAnalysisResultsResult {
    readonly aggregationMode?: string;
    readonly cryptoAnalysisResultCollections: outputs.GetJmsFleetCryptoAnalysisResultsCryptoAnalysisResultCollection[];
    readonly filters?: outputs.GetJmsFleetCryptoAnalysisResultsFilter[];
    readonly findingCount?: number;
    readonly findingCountGreaterThan?: number;
    readonly fleetId: string;
    readonly hostName?: string;
    readonly id: string;
    readonly managedInstanceId?: string;
    readonly nonCompliantFindingCount?: number;
    readonly nonCompliantFindingCountGreaterThan?: number;
    readonly timeEnd?: string;
    readonly timeStart?: string;
}
export function getJmsFleetCryptoAnalysisResultsOutput(args: GetJmsFleetCryptoAnalysisResultsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetJmsFleetCryptoAnalysisResultsResult> {
    return pulumi.output(args).apply((a: any) => getJmsFleetCryptoAnalysisResults(a, opts))
}

/**
 * A collection of arguments for invoking getJmsFleetCryptoAnalysisResults.
 */
export interface GetJmsFleetCryptoAnalysisResultsOutputArgs {
    aggregationMode?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetJmsFleetCryptoAnalysisResultsFilterArgs>[]>;
    findingCount?: pulumi.Input<number>;
    findingCountGreaterThan?: pulumi.Input<number>;
    fleetId: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    managedInstanceId?: pulumi.Input<string>;
    nonCompliantFindingCount?: pulumi.Input<number>;
    nonCompliantFindingCountGreaterThan?: pulumi.Input<number>;
    timeEnd?: pulumi.Input<string>;
    timeStart?: pulumi.Input<string>;
}
