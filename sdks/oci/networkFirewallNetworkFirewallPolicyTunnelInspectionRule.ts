// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule extends pulumi.CustomResource {
    /**
     * Get an existing NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleState, opts?: pulumi.CustomResourceOptions): NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule {
        return new NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/networkFirewallNetworkFirewallPolicyTunnelInspectionRule:NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule';

    /**
     * Returns true if the given object is an instance of NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly condition!: pulumi.Output<outputs.NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleCondition>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkFirewallPolicyId!: pulumi.Output<string>;
    public /*out*/ readonly parentResourceId!: pulumi.Output<string>;
    public readonly position!: pulumi.Output<outputs.NetworkFirewallNetworkFirewallPolicyTunnelInspectionRulePosition | undefined>;
    public /*out*/ readonly priorityOrder!: pulumi.Output<string>;
    public readonly profile!: pulumi.Output<outputs.NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleProfile | undefined>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleTimeouts | undefined>;

    /**
     * Create a NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleArgs | NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkFirewallPolicyId"] = state ? state.networkFirewallPolicyId : undefined;
            resourceInputs["parentResourceId"] = state ? state.parentResourceId : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["priorityOrder"] = state ? state.priorityOrder : undefined;
            resourceInputs["profile"] = state ? state.profile : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleArgs | undefined;
            if ((!args || args.condition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            if ((!args || args.networkFirewallPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkFirewallPolicyId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkFirewallPolicyId"] = args ? args.networkFirewallPolicyId : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["profile"] = args ? args.profile : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["parentResourceId"] = undefined /*out*/;
            resourceInputs["priorityOrder"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule resources.
 */
export interface NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleState {
    action?: pulumi.Input<string>;
    condition?: pulumi.Input<inputs.NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleCondition>;
    name?: pulumi.Input<string>;
    networkFirewallPolicyId?: pulumi.Input<string>;
    parentResourceId?: pulumi.Input<string>;
    position?: pulumi.Input<inputs.NetworkFirewallNetworkFirewallPolicyTunnelInspectionRulePosition>;
    priorityOrder?: pulumi.Input<string>;
    profile?: pulumi.Input<inputs.NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleProfile>;
    protocol?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleTimeouts>;
}

/**
 * The set of arguments for constructing a NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule resource.
 */
export interface NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleArgs {
    action?: pulumi.Input<string>;
    condition: pulumi.Input<inputs.NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleCondition>;
    name?: pulumi.Input<string>;
    networkFirewallPolicyId: pulumi.Input<string>;
    position?: pulumi.Input<inputs.NetworkFirewallNetworkFirewallPolicyTunnelInspectionRulePosition>;
    profile?: pulumi.Input<inputs.NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleProfile>;
    protocol: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleTimeouts>;
}
