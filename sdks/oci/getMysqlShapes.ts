// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMysqlShapes(args: GetMysqlShapesArgs, opts?: pulumi.InvokeOptions): Promise<GetMysqlShapesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMysqlShapes:getMysqlShapes", {
        "availabilityDomain": args.availabilityDomain,
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
        "isSupportedFors": args.isSupportedFors,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMysqlShapes.
 */
export interface GetMysqlShapesArgs {
    availabilityDomain?: string;
    compartmentId: string;
    filters?: inputs.GetMysqlShapesFilter[];
    id?: string;
    isSupportedFors?: string[];
    name?: string;
}

/**
 * A collection of values returned by getMysqlShapes.
 */
export interface GetMysqlShapesResult {
    readonly availabilityDomain?: string;
    readonly compartmentId: string;
    readonly filters?: outputs.GetMysqlShapesFilter[];
    readonly id: string;
    readonly isSupportedFors?: string[];
    readonly name?: string;
    readonly shapes: outputs.GetMysqlShapesShape[];
}
export function getMysqlShapesOutput(args: GetMysqlShapesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMysqlShapesResult> {
    return pulumi.output(args).apply((a: any) => getMysqlShapes(a, opts))
}

/**
 * A collection of arguments for invoking getMysqlShapes.
 */
export interface GetMysqlShapesOutputArgs {
    availabilityDomain?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetMysqlShapesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    isSupportedFors?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
}
