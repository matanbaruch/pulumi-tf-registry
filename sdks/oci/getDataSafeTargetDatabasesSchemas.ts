// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDataSafeTargetDatabasesSchemas(args: GetDataSafeTargetDatabasesSchemasArgs, opts?: pulumi.InvokeOptions): Promise<GetDataSafeTargetDatabasesSchemasResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDataSafeTargetDatabasesSchemas:getDataSafeTargetDatabasesSchemas", {
        "filters": args.filters,
        "id": args.id,
        "isOracleMaintained": args.isOracleMaintained,
        "schemaNameContains": args.schemaNameContains,
        "schemaNames": args.schemaNames,
        "targetDatabaseId": args.targetDatabaseId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDataSafeTargetDatabasesSchemas.
 */
export interface GetDataSafeTargetDatabasesSchemasArgs {
    filters?: inputs.GetDataSafeTargetDatabasesSchemasFilter[];
    id?: string;
    isOracleMaintained?: boolean;
    schemaNameContains?: string;
    schemaNames?: string[];
    targetDatabaseId: string;
}

/**
 * A collection of values returned by getDataSafeTargetDatabasesSchemas.
 */
export interface GetDataSafeTargetDatabasesSchemasResult {
    readonly filters?: outputs.GetDataSafeTargetDatabasesSchemasFilter[];
    readonly id: string;
    readonly isOracleMaintained?: boolean;
    readonly schemaNameContains?: string;
    readonly schemaNames?: string[];
    readonly schemas: outputs.GetDataSafeTargetDatabasesSchemasSchema[];
    readonly targetDatabaseId: string;
}
export function getDataSafeTargetDatabasesSchemasOutput(args: GetDataSafeTargetDatabasesSchemasOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataSafeTargetDatabasesSchemasResult> {
    return pulumi.output(args).apply((a: any) => getDataSafeTargetDatabasesSchemas(a, opts))
}

/**
 * A collection of arguments for invoking getDataSafeTargetDatabasesSchemas.
 */
export interface GetDataSafeTargetDatabasesSchemasOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetDataSafeTargetDatabasesSchemasFilterArgs>[]>;
    id?: pulumi.Input<string>;
    isOracleMaintained?: pulumi.Input<boolean>;
    schemaNameContains?: pulumi.Input<string>;
    schemaNames?: pulumi.Input<pulumi.Input<string>[]>;
    targetDatabaseId: pulumi.Input<string>;
}
