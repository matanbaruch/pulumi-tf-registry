// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsResolverEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing DnsResolverEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsResolverEndpointState, opts?: pulumi.CustomResourceOptions): DnsResolverEndpoint {
        return new DnsResolverEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/dnsResolverEndpoint:DnsResolverEndpoint';

    /**
     * Returns true if the given object is an instance of DnsResolverEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsResolverEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsResolverEndpoint.__pulumiType;
    }

    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public readonly endpointType!: pulumi.Output<string>;
    public readonly forwardingAddress!: pulumi.Output<string>;
    public readonly isForwarding!: pulumi.Output<boolean>;
    public readonly isListening!: pulumi.Output<boolean>;
    public readonly listeningAddress!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nsgIds!: pulumi.Output<string[] | undefined>;
    public readonly resolverId!: pulumi.Output<string>;
    public readonly scope!: pulumi.Output<string | undefined>;
    public /*out*/ readonly self!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DnsResolverEndpointTimeouts | undefined>;

    /**
     * Create a DnsResolverEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsResolverEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsResolverEndpointArgs | DnsResolverEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsResolverEndpointState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["endpointType"] = state ? state.endpointType : undefined;
            resourceInputs["forwardingAddress"] = state ? state.forwardingAddress : undefined;
            resourceInputs["isForwarding"] = state ? state.isForwarding : undefined;
            resourceInputs["isListening"] = state ? state.isListening : undefined;
            resourceInputs["listeningAddress"] = state ? state.listeningAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nsgIds"] = state ? state.nsgIds : undefined;
            resourceInputs["resolverId"] = state ? state.resolverId : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["self"] = state ? state.self : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DnsResolverEndpointArgs | undefined;
            if ((!args || args.isForwarding === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isForwarding'");
            }
            if ((!args || args.isListening === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isListening'");
            }
            if ((!args || args.resolverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resolverId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["endpointType"] = args ? args.endpointType : undefined;
            resourceInputs["forwardingAddress"] = args ? args.forwardingAddress : undefined;
            resourceInputs["isForwarding"] = args ? args.isForwarding : undefined;
            resourceInputs["isListening"] = args ? args.isListening : undefined;
            resourceInputs["listeningAddress"] = args ? args.listeningAddress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nsgIds"] = args ? args.nsgIds : undefined;
            resourceInputs["resolverId"] = args ? args.resolverId : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["self"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsResolverEndpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsResolverEndpoint resources.
 */
export interface DnsResolverEndpointState {
    compartmentId?: pulumi.Input<string>;
    endpointType?: pulumi.Input<string>;
    forwardingAddress?: pulumi.Input<string>;
    isForwarding?: pulumi.Input<boolean>;
    isListening?: pulumi.Input<boolean>;
    listeningAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    resolverId?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    self?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DnsResolverEndpointTimeouts>;
}

/**
 * The set of arguments for constructing a DnsResolverEndpoint resource.
 */
export interface DnsResolverEndpointArgs {
    endpointType?: pulumi.Input<string>;
    forwardingAddress?: pulumi.Input<string>;
    isForwarding: pulumi.Input<boolean>;
    isListening: pulumi.Input<boolean>;
    listeningAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    resolverId: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DnsResolverEndpointTimeouts>;
}
