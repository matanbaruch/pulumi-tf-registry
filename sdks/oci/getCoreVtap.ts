// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCoreVtap(args: GetCoreVtapArgs, opts?: pulumi.InvokeOptions): Promise<GetCoreVtapResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCoreVtap:getCoreVtap", {
        "vtapId": args.vtapId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCoreVtap.
 */
export interface GetCoreVtapArgs {
    vtapId: string;
}

/**
 * A collection of values returned by getCoreVtap.
 */
export interface GetCoreVtapResult {
    readonly captureFilterId: string;
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly encapsulationProtocol: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly isVtapEnabled: boolean;
    readonly lifecycleStateDetails: string;
    readonly maxPacketSize: number;
    readonly sourceId: string;
    readonly sourcePrivateEndpointIp: string;
    readonly sourcePrivateEndpointSubnetId: string;
    readonly sourceType: string;
    readonly state: string;
    readonly targetId: string;
    readonly targetIp: string;
    readonly targetType: string;
    readonly timeCreated: string;
    readonly trafficMode: string;
    readonly vcnId: string;
    readonly vtapId: string;
    readonly vxlanNetworkIdentifier: string;
}
export function getCoreVtapOutput(args: GetCoreVtapOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCoreVtapResult> {
    return pulumi.output(args).apply((a: any) => getCoreVtap(a, opts))
}

/**
 * A collection of arguments for invoking getCoreVtap.
 */
export interface GetCoreVtapOutputArgs {
    vtapId: pulumi.Input<string>;
}
