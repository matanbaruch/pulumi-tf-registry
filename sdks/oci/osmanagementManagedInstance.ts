// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OsmanagementManagedInstance extends pulumi.CustomResource {
    /**
     * Get an existing OsmanagementManagedInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsmanagementManagedInstanceState, opts?: pulumi.CustomResourceOptions): OsmanagementManagedInstance {
        return new OsmanagementManagedInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/osmanagementManagedInstance:OsmanagementManagedInstance';

    /**
     * Returns true if the given object is an instance of OsmanagementManagedInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsmanagementManagedInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsmanagementManagedInstance.__pulumiType;
    }

    public /*out*/ readonly autonomouses!: pulumi.Output<outputs.OsmanagementManagedInstanceAutonomouse[]>;
    public /*out*/ readonly bugUpdatesAvailable!: pulumi.Output<number>;
    public /*out*/ readonly childSoftwareSources!: pulumi.Output<outputs.OsmanagementManagedInstanceChildSoftwareSource[]>;
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly description!: pulumi.Output<string>;
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly enhancementUpdatesAvailable!: pulumi.Output<number>;
    public readonly isDataCollectionAuthorized!: pulumi.Output<boolean>;
    public /*out*/ readonly isRebootRequired!: pulumi.Output<boolean>;
    public /*out*/ readonly kspliceEffectiveKernelVersion!: pulumi.Output<string>;
    public /*out*/ readonly lastBoot!: pulumi.Output<string>;
    public /*out*/ readonly lastCheckin!: pulumi.Output<string>;
    public /*out*/ readonly managedInstanceGroups!: pulumi.Output<outputs.OsmanagementManagedInstanceManagedInstanceGroup[]>;
    public readonly managedInstanceId!: pulumi.Output<string>;
    public readonly notificationTopicId!: pulumi.Output<string>;
    public /*out*/ readonly osFamily!: pulumi.Output<string>;
    public /*out*/ readonly osKernelVersion!: pulumi.Output<string>;
    public /*out*/ readonly osName!: pulumi.Output<string>;
    public /*out*/ readonly osVersion!: pulumi.Output<string>;
    public /*out*/ readonly otherUpdatesAvailable!: pulumi.Output<number>;
    public /*out*/ readonly parentSoftwareSources!: pulumi.Output<outputs.OsmanagementManagedInstanceParentSoftwareSource[]>;
    public /*out*/ readonly scheduledJobCount!: pulumi.Output<number>;
    public /*out*/ readonly securityUpdatesAvailable!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OsmanagementManagedInstanceTimeouts | undefined>;
    public /*out*/ readonly updatesAvailable!: pulumi.Output<number>;
    public /*out*/ readonly workRequestCount!: pulumi.Output<number>;

    /**
     * Create a OsmanagementManagedInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsmanagementManagedInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsmanagementManagedInstanceArgs | OsmanagementManagedInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsmanagementManagedInstanceState | undefined;
            resourceInputs["autonomouses"] = state ? state.autonomouses : undefined;
            resourceInputs["bugUpdatesAvailable"] = state ? state.bugUpdatesAvailable : undefined;
            resourceInputs["childSoftwareSources"] = state ? state.childSoftwareSources : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enhancementUpdatesAvailable"] = state ? state.enhancementUpdatesAvailable : undefined;
            resourceInputs["isDataCollectionAuthorized"] = state ? state.isDataCollectionAuthorized : undefined;
            resourceInputs["isRebootRequired"] = state ? state.isRebootRequired : undefined;
            resourceInputs["kspliceEffectiveKernelVersion"] = state ? state.kspliceEffectiveKernelVersion : undefined;
            resourceInputs["lastBoot"] = state ? state.lastBoot : undefined;
            resourceInputs["lastCheckin"] = state ? state.lastCheckin : undefined;
            resourceInputs["managedInstanceGroups"] = state ? state.managedInstanceGroups : undefined;
            resourceInputs["managedInstanceId"] = state ? state.managedInstanceId : undefined;
            resourceInputs["notificationTopicId"] = state ? state.notificationTopicId : undefined;
            resourceInputs["osFamily"] = state ? state.osFamily : undefined;
            resourceInputs["osKernelVersion"] = state ? state.osKernelVersion : undefined;
            resourceInputs["osName"] = state ? state.osName : undefined;
            resourceInputs["osVersion"] = state ? state.osVersion : undefined;
            resourceInputs["otherUpdatesAvailable"] = state ? state.otherUpdatesAvailable : undefined;
            resourceInputs["parentSoftwareSources"] = state ? state.parentSoftwareSources : undefined;
            resourceInputs["scheduledJobCount"] = state ? state.scheduledJobCount : undefined;
            resourceInputs["securityUpdatesAvailable"] = state ? state.securityUpdatesAvailable : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatesAvailable"] = state ? state.updatesAvailable : undefined;
            resourceInputs["workRequestCount"] = state ? state.workRequestCount : undefined;
        } else {
            const args = argsOrState as OsmanagementManagedInstanceArgs | undefined;
            if ((!args || args.managedInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedInstanceId'");
            }
            resourceInputs["isDataCollectionAuthorized"] = args ? args.isDataCollectionAuthorized : undefined;
            resourceInputs["managedInstanceId"] = args ? args.managedInstanceId : undefined;
            resourceInputs["notificationTopicId"] = args ? args.notificationTopicId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["autonomouses"] = undefined /*out*/;
            resourceInputs["bugUpdatesAvailable"] = undefined /*out*/;
            resourceInputs["childSoftwareSources"] = undefined /*out*/;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["enhancementUpdatesAvailable"] = undefined /*out*/;
            resourceInputs["isRebootRequired"] = undefined /*out*/;
            resourceInputs["kspliceEffectiveKernelVersion"] = undefined /*out*/;
            resourceInputs["lastBoot"] = undefined /*out*/;
            resourceInputs["lastCheckin"] = undefined /*out*/;
            resourceInputs["managedInstanceGroups"] = undefined /*out*/;
            resourceInputs["osFamily"] = undefined /*out*/;
            resourceInputs["osKernelVersion"] = undefined /*out*/;
            resourceInputs["osName"] = undefined /*out*/;
            resourceInputs["osVersion"] = undefined /*out*/;
            resourceInputs["otherUpdatesAvailable"] = undefined /*out*/;
            resourceInputs["parentSoftwareSources"] = undefined /*out*/;
            resourceInputs["scheduledJobCount"] = undefined /*out*/;
            resourceInputs["securityUpdatesAvailable"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatesAvailable"] = undefined /*out*/;
            resourceInputs["workRequestCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsmanagementManagedInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsmanagementManagedInstance resources.
 */
export interface OsmanagementManagedInstanceState {
    autonomouses?: pulumi.Input<pulumi.Input<inputs.OsmanagementManagedInstanceAutonomouse>[]>;
    bugUpdatesAvailable?: pulumi.Input<number>;
    childSoftwareSources?: pulumi.Input<pulumi.Input<inputs.OsmanagementManagedInstanceChildSoftwareSource>[]>;
    compartmentId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enhancementUpdatesAvailable?: pulumi.Input<number>;
    isDataCollectionAuthorized?: pulumi.Input<boolean>;
    isRebootRequired?: pulumi.Input<boolean>;
    kspliceEffectiveKernelVersion?: pulumi.Input<string>;
    lastBoot?: pulumi.Input<string>;
    lastCheckin?: pulumi.Input<string>;
    managedInstanceGroups?: pulumi.Input<pulumi.Input<inputs.OsmanagementManagedInstanceManagedInstanceGroup>[]>;
    managedInstanceId?: pulumi.Input<string>;
    notificationTopicId?: pulumi.Input<string>;
    osFamily?: pulumi.Input<string>;
    osKernelVersion?: pulumi.Input<string>;
    osName?: pulumi.Input<string>;
    osVersion?: pulumi.Input<string>;
    otherUpdatesAvailable?: pulumi.Input<number>;
    parentSoftwareSources?: pulumi.Input<pulumi.Input<inputs.OsmanagementManagedInstanceParentSoftwareSource>[]>;
    scheduledJobCount?: pulumi.Input<number>;
    securityUpdatesAvailable?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsmanagementManagedInstanceTimeouts>;
    updatesAvailable?: pulumi.Input<number>;
    workRequestCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OsmanagementManagedInstance resource.
 */
export interface OsmanagementManagedInstanceArgs {
    isDataCollectionAuthorized?: pulumi.Input<boolean>;
    managedInstanceId: pulumi.Input<string>;
    notificationTopicId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsmanagementManagedInstanceTimeouts>;
}
