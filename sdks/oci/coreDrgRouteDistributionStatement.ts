// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CoreDrgRouteDistributionStatement extends pulumi.CustomResource {
    /**
     * Get an existing CoreDrgRouteDistributionStatement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CoreDrgRouteDistributionStatementState, opts?: pulumi.CustomResourceOptions): CoreDrgRouteDistributionStatement {
        return new CoreDrgRouteDistributionStatement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/coreDrgRouteDistributionStatement:CoreDrgRouteDistributionStatement';

    /**
     * Returns true if the given object is an instance of CoreDrgRouteDistributionStatement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CoreDrgRouteDistributionStatement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CoreDrgRouteDistributionStatement.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly drgRouteDistributionId!: pulumi.Output<string>;
    public readonly matchCriteria!: pulumi.Output<outputs.CoreDrgRouteDistributionStatementMatchCriteria>;
    public readonly priority!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.CoreDrgRouteDistributionStatementTimeouts | undefined>;

    /**
     * Create a CoreDrgRouteDistributionStatement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CoreDrgRouteDistributionStatementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CoreDrgRouteDistributionStatementArgs | CoreDrgRouteDistributionStatementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CoreDrgRouteDistributionStatementState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["drgRouteDistributionId"] = state ? state.drgRouteDistributionId : undefined;
            resourceInputs["matchCriteria"] = state ? state.matchCriteria : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CoreDrgRouteDistributionStatementArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.drgRouteDistributionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'drgRouteDistributionId'");
            }
            if ((!args || args.matchCriteria === undefined) && !opts.urn) {
                throw new Error("Missing required property 'matchCriteria'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["drgRouteDistributionId"] = args ? args.drgRouteDistributionId : undefined;
            resourceInputs["matchCriteria"] = args ? args.matchCriteria : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CoreDrgRouteDistributionStatement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CoreDrgRouteDistributionStatement resources.
 */
export interface CoreDrgRouteDistributionStatementState {
    action?: pulumi.Input<string>;
    drgRouteDistributionId?: pulumi.Input<string>;
    matchCriteria?: pulumi.Input<inputs.CoreDrgRouteDistributionStatementMatchCriteria>;
    priority?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CoreDrgRouteDistributionStatementTimeouts>;
}

/**
 * The set of arguments for constructing a CoreDrgRouteDistributionStatement resource.
 */
export interface CoreDrgRouteDistributionStatementArgs {
    action: pulumi.Input<string>;
    drgRouteDistributionId: pulumi.Input<string>;
    matchCriteria: pulumi.Input<inputs.CoreDrgRouteDistributionStatementMatchCriteria>;
    priority: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CoreDrgRouteDistributionStatementTimeouts>;
}
