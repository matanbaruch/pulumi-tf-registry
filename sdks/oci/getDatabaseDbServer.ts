// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseDbServer(args: GetDatabaseDbServerArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseDbServerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseDbServer:getDatabaseDbServer", {
        "dbServerId": args.dbServerId,
        "exadataInfrastructureId": args.exadataInfrastructureId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseDbServer.
 */
export interface GetDatabaseDbServerArgs {
    dbServerId: string;
    exadataInfrastructureId: string;
    id?: string;
}

/**
 * A collection of values returned by getDatabaseDbServer.
 */
export interface GetDatabaseDbServerResult {
    readonly autonomousVirtualMachineIds: string[];
    readonly autonomousVmClusterIds: string[];
    readonly compartmentId: string;
    readonly cpuCoreCount: number;
    readonly dbNodeIds: string[];
    readonly dbNodeStorageSizeInGbs: number;
    readonly dbServerId: string;
    readonly dbServerPatchingDetails: outputs.GetDatabaseDbServerDbServerPatchingDetail[];
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly exadataInfrastructureId: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly lifecycleDetails: string;
    readonly maxCpuCount: number;
    readonly maxDbNodeStorageInGbs: number;
    readonly maxMemoryInGbs: number;
    readonly memorySizeInGbs: number;
    readonly shape: string;
    readonly state: string;
    readonly timeCreated: string;
    readonly vmClusterIds: string[];
}
export function getDatabaseDbServerOutput(args: GetDatabaseDbServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseDbServerResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseDbServer(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseDbServer.
 */
export interface GetDatabaseDbServerOutputArgs {
    dbServerId: pulumi.Input<string>;
    exadataInfrastructureId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
