// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLoggingLog(args: GetLoggingLogArgs, opts?: pulumi.InvokeOptions): Promise<GetLoggingLogResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getLoggingLog:getLoggingLog", {
        "logGroupId": args.logGroupId,
        "logId": args.logId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoggingLog.
 */
export interface GetLoggingLogArgs {
    logGroupId: string;
    logId: string;
}

/**
 * A collection of values returned by getLoggingLog.
 */
export interface GetLoggingLogResult {
    readonly compartmentId: string;
    readonly configurations: outputs.GetLoggingLogConfiguration[];
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly isEnabled: boolean;
    readonly logGroupId: string;
    readonly logId: string;
    readonly logType: string;
    readonly retentionDuration: number;
    readonly state: string;
    readonly tenancyId: string;
    readonly timeCreated: string;
    readonly timeLastModified: string;
}
export function getLoggingLogOutput(args: GetLoggingLogOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoggingLogResult> {
    return pulumi.output(args).apply((a: any) => getLoggingLog(a, opts))
}

/**
 * A collection of arguments for invoking getLoggingLog.
 */
export interface GetLoggingLogOutputArgs {
    logGroupId: pulumi.Input<string>;
    logId: pulumi.Input<string>;
}
