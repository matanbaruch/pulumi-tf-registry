// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsApprovalWorkflowAssignment(args: GetIdentityDomainsApprovalWorkflowAssignmentArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsApprovalWorkflowAssignmentResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsApprovalWorkflowAssignment:getIdentityDomainsApprovalWorkflowAssignment", {
        "approvalWorkflowAssignmentId": args.approvalWorkflowAssignmentId,
        "attributeSets": args.attributeSets,
        "attributes": args.attributes,
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsApprovalWorkflowAssignment.
 */
export interface GetIdentityDomainsApprovalWorkflowAssignmentArgs {
    approvalWorkflowAssignmentId: string;
    attributeSets?: string[];
    attributes?: string;
    authorization?: string;
    idcsEndpoint: string;
    resourceTypeSchemaVersion?: string;
}

/**
 * A collection of values returned by getIdentityDomainsApprovalWorkflowAssignment.
 */
export interface GetIdentityDomainsApprovalWorkflowAssignmentResult {
    readonly approvalWorkflowAssignmentId: string;
    readonly approvalWorkflows: outputs.GetIdentityDomainsApprovalWorkflowAssignmentApprovalWorkflow[];
    readonly assignedTos: outputs.GetIdentityDomainsApprovalWorkflowAssignmentAssignedTo[];
    readonly assignmentType: string;
    readonly attributeSets?: string[];
    readonly attributes?: string;
    readonly authorization?: string;
    readonly compartmentOcid: string;
    readonly deleteInProgress: boolean;
    readonly domainOcid: string;
    readonly id: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsApprovalWorkflowAssignmentIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsApprovalWorkflowAssignmentIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly metas: outputs.GetIdentityDomainsApprovalWorkflowAssignmentMeta[];
    readonly ocid: string;
    readonly resourceTypeSchemaVersion?: string;
    readonly schemas: string[];
    readonly tags: outputs.GetIdentityDomainsApprovalWorkflowAssignmentTag[];
    readonly tenancyOcid: string;
}
export function getIdentityDomainsApprovalWorkflowAssignmentOutput(args: GetIdentityDomainsApprovalWorkflowAssignmentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsApprovalWorkflowAssignmentResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsApprovalWorkflowAssignment(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsApprovalWorkflowAssignment.
 */
export interface GetIdentityDomainsApprovalWorkflowAssignmentOutputArgs {
    approvalWorkflowAssignmentId: pulumi.Input<string>;
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
}
