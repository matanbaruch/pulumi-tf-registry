// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementState, opts?: pulumi.CustomResourceOptions): DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement {
        return new DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement:DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement';

    /**
     * Returns true if the given object is an instance of DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement.__pulumiType;
    }

    public readonly enablePluggableDatabaseDbmFeature!: pulumi.Output<boolean>;
    public readonly featureDetails!: pulumi.Output<outputs.DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementFeatureDetails | undefined>;
    public readonly modifyPluggableDatabaseDbmFeature!: pulumi.Output<boolean | undefined>;
    public readonly pluggableDatabaseId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementTimeouts | undefined>;

    /**
     * Create a DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementArgs | DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementState | undefined;
            resourceInputs["enablePluggableDatabaseDbmFeature"] = state ? state.enablePluggableDatabaseDbmFeature : undefined;
            resourceInputs["featureDetails"] = state ? state.featureDetails : undefined;
            resourceInputs["modifyPluggableDatabaseDbmFeature"] = state ? state.modifyPluggableDatabaseDbmFeature : undefined;
            resourceInputs["pluggableDatabaseId"] = state ? state.pluggableDatabaseId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementArgs | undefined;
            if ((!args || args.enablePluggableDatabaseDbmFeature === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enablePluggableDatabaseDbmFeature'");
            }
            if ((!args || args.pluggableDatabaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pluggableDatabaseId'");
            }
            resourceInputs["enablePluggableDatabaseDbmFeature"] = args ? args.enablePluggableDatabaseDbmFeature : undefined;
            resourceInputs["featureDetails"] = args ? args.featureDetails : undefined;
            resourceInputs["modifyPluggableDatabaseDbmFeature"] = args ? args.modifyPluggableDatabaseDbmFeature : undefined;
            resourceInputs["pluggableDatabaseId"] = args ? args.pluggableDatabaseId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement resources.
 */
export interface DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementState {
    enablePluggableDatabaseDbmFeature?: pulumi.Input<boolean>;
    featureDetails?: pulumi.Input<inputs.DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementFeatureDetails>;
    modifyPluggableDatabaseDbmFeature?: pulumi.Input<boolean>;
    pluggableDatabaseId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementTimeouts>;
}

/**
 * The set of arguments for constructing a DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement resource.
 */
export interface DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementArgs {
    enablePluggableDatabaseDbmFeature: pulumi.Input<boolean>;
    featureDetails?: pulumi.Input<inputs.DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementFeatureDetails>;
    modifyPluggableDatabaseDbmFeature?: pulumi.Input<boolean>;
    pluggableDatabaseId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementTimeouts>;
}
