// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CoreDrgRouteTableRouteRule extends pulumi.CustomResource {
    /**
     * Get an existing CoreDrgRouteTableRouteRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CoreDrgRouteTableRouteRuleState, opts?: pulumi.CustomResourceOptions): CoreDrgRouteTableRouteRule {
        return new CoreDrgRouteTableRouteRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/coreDrgRouteTableRouteRule:CoreDrgRouteTableRouteRule';

    /**
     * Returns true if the given object is an instance of CoreDrgRouteTableRouteRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CoreDrgRouteTableRouteRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CoreDrgRouteTableRouteRule.__pulumiType;
    }

    public /*out*/ readonly attributes!: pulumi.Output<{[key: string]: string}>;
    public readonly destination!: pulumi.Output<string>;
    public readonly destinationType!: pulumi.Output<string>;
    public readonly drgRouteTableId!: pulumi.Output<string>;
    public /*out*/ readonly isBlackhole!: pulumi.Output<boolean>;
    public /*out*/ readonly isConflict!: pulumi.Output<boolean>;
    public readonly nextHopDrgAttachmentId!: pulumi.Output<string>;
    public /*out*/ readonly routeProvenance!: pulumi.Output<string>;
    public /*out*/ readonly routeType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CoreDrgRouteTableRouteRuleTimeouts | undefined>;

    /**
     * Create a CoreDrgRouteTableRouteRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CoreDrgRouteTableRouteRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CoreDrgRouteTableRouteRuleArgs | CoreDrgRouteTableRouteRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CoreDrgRouteTableRouteRuleState | undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["destinationType"] = state ? state.destinationType : undefined;
            resourceInputs["drgRouteTableId"] = state ? state.drgRouteTableId : undefined;
            resourceInputs["isBlackhole"] = state ? state.isBlackhole : undefined;
            resourceInputs["isConflict"] = state ? state.isConflict : undefined;
            resourceInputs["nextHopDrgAttachmentId"] = state ? state.nextHopDrgAttachmentId : undefined;
            resourceInputs["routeProvenance"] = state ? state.routeProvenance : undefined;
            resourceInputs["routeType"] = state ? state.routeType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CoreDrgRouteTableRouteRuleArgs | undefined;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.destinationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationType'");
            }
            if ((!args || args.drgRouteTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'drgRouteTableId'");
            }
            if ((!args || args.nextHopDrgAttachmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHopDrgAttachmentId'");
            }
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["destinationType"] = args ? args.destinationType : undefined;
            resourceInputs["drgRouteTableId"] = args ? args.drgRouteTableId : undefined;
            resourceInputs["nextHopDrgAttachmentId"] = args ? args.nextHopDrgAttachmentId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["attributes"] = undefined /*out*/;
            resourceInputs["isBlackhole"] = undefined /*out*/;
            resourceInputs["isConflict"] = undefined /*out*/;
            resourceInputs["routeProvenance"] = undefined /*out*/;
            resourceInputs["routeType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CoreDrgRouteTableRouteRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CoreDrgRouteTableRouteRule resources.
 */
export interface CoreDrgRouteTableRouteRuleState {
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    destination?: pulumi.Input<string>;
    destinationType?: pulumi.Input<string>;
    drgRouteTableId?: pulumi.Input<string>;
    isBlackhole?: pulumi.Input<boolean>;
    isConflict?: pulumi.Input<boolean>;
    nextHopDrgAttachmentId?: pulumi.Input<string>;
    routeProvenance?: pulumi.Input<string>;
    routeType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreDrgRouteTableRouteRuleTimeouts>;
}

/**
 * The set of arguments for constructing a CoreDrgRouteTableRouteRule resource.
 */
export interface CoreDrgRouteTableRouteRuleArgs {
    destination: pulumi.Input<string>;
    destinationType: pulumi.Input<string>;
    drgRouteTableId: pulumi.Input<string>;
    nextHopDrgAttachmentId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreDrgRouteTableRouteRuleTimeouts>;
}
