// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMonitoringMetrics(args: GetMonitoringMetricsArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitoringMetricsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMonitoringMetrics:getMonitoringMetrics", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "dimensionFilters": args.dimensionFilters,
        "filters": args.filters,
        "groupBies": args.groupBies,
        "id": args.id,
        "name": args.name,
        "namespace": args.namespace,
        "resourceGroup": args.resourceGroup,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitoringMetrics.
 */
export interface GetMonitoringMetricsArgs {
    compartmentId: string;
    compartmentIdInSubtree?: boolean;
    dimensionFilters?: {[key: string]: string};
    filters?: inputs.GetMonitoringMetricsFilter[];
    groupBies?: string[];
    id?: string;
    name?: string;
    namespace?: string;
    resourceGroup?: string;
}

/**
 * A collection of values returned by getMonitoringMetrics.
 */
export interface GetMonitoringMetricsResult {
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly dimensionFilters?: {[key: string]: string};
    readonly filters?: outputs.GetMonitoringMetricsFilter[];
    readonly groupBies?: string[];
    readonly id: string;
    readonly metrics: outputs.GetMonitoringMetricsMetric[];
    readonly name?: string;
    readonly namespace?: string;
    readonly resourceGroup?: string;
}
export function getMonitoringMetricsOutput(args: GetMonitoringMetricsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitoringMetricsResult> {
    return pulumi.output(args).apply((a: any) => getMonitoringMetrics(a, opts))
}

/**
 * A collection of arguments for invoking getMonitoringMetrics.
 */
export interface GetMonitoringMetricsOutputArgs {
    compartmentId: pulumi.Input<string>;
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    dimensionFilters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetMonitoringMetricsFilterArgs>[]>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
}
