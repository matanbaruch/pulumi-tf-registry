// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VnMonitoringPathAnalysi extends pulumi.CustomResource {
    /**
     * Get an existing VnMonitoringPathAnalysi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VnMonitoringPathAnalysiState, opts?: pulumi.CustomResourceOptions): VnMonitoringPathAnalysi {
        return new VnMonitoringPathAnalysi(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/vnMonitoringPathAnalysi:VnMonitoringPathAnalysi';

    /**
     * Returns true if the given object is an instance of VnMonitoringPathAnalysi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VnMonitoringPathAnalysi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VnMonitoringPathAnalysi.__pulumiType;
    }

    public readonly cacheControl!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly destinationEndpoint!: pulumi.Output<outputs.VnMonitoringPathAnalysiDestinationEndpoint | undefined>;
    public readonly pathAnalyzerTestId!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<number>;
    public readonly protocolParameters!: pulumi.Output<outputs.VnMonitoringPathAnalysiProtocolParameters | undefined>;
    public readonly queryOptions!: pulumi.Output<outputs.VnMonitoringPathAnalysiQueryOptions | undefined>;
    public readonly sourceEndpoint!: pulumi.Output<outputs.VnMonitoringPathAnalysiSourceEndpoint | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VnMonitoringPathAnalysiTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a VnMonitoringPathAnalysi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VnMonitoringPathAnalysiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VnMonitoringPathAnalysiArgs | VnMonitoringPathAnalysiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VnMonitoringPathAnalysiState | undefined;
            resourceInputs["cacheControl"] = state ? state.cacheControl : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["destinationEndpoint"] = state ? state.destinationEndpoint : undefined;
            resourceInputs["pathAnalyzerTestId"] = state ? state.pathAnalyzerTestId : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["protocolParameters"] = state ? state.protocolParameters : undefined;
            resourceInputs["queryOptions"] = state ? state.queryOptions : undefined;
            resourceInputs["sourceEndpoint"] = state ? state.sourceEndpoint : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as VnMonitoringPathAnalysiArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["cacheControl"] = args ? args.cacheControl : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["destinationEndpoint"] = args ? args.destinationEndpoint : undefined;
            resourceInputs["pathAnalyzerTestId"] = args ? args.pathAnalyzerTestId : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["protocolParameters"] = args ? args.protocolParameters : undefined;
            resourceInputs["queryOptions"] = args ? args.queryOptions : undefined;
            resourceInputs["sourceEndpoint"] = args ? args.sourceEndpoint : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VnMonitoringPathAnalysi.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VnMonitoringPathAnalysi resources.
 */
export interface VnMonitoringPathAnalysiState {
    cacheControl?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    destinationEndpoint?: pulumi.Input<inputs.VnMonitoringPathAnalysiDestinationEndpoint>;
    pathAnalyzerTestId?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    protocolParameters?: pulumi.Input<inputs.VnMonitoringPathAnalysiProtocolParameters>;
    queryOptions?: pulumi.Input<inputs.VnMonitoringPathAnalysiQueryOptions>;
    sourceEndpoint?: pulumi.Input<inputs.VnMonitoringPathAnalysiSourceEndpoint>;
    timeouts?: pulumi.Input<inputs.VnMonitoringPathAnalysiTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VnMonitoringPathAnalysi resource.
 */
export interface VnMonitoringPathAnalysiArgs {
    cacheControl?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    destinationEndpoint?: pulumi.Input<inputs.VnMonitoringPathAnalysiDestinationEndpoint>;
    pathAnalyzerTestId?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    protocolParameters?: pulumi.Input<inputs.VnMonitoringPathAnalysiProtocolParameters>;
    queryOptions?: pulumi.Input<inputs.VnMonitoringPathAnalysiQueryOptions>;
    sourceEndpoint?: pulumi.Input<inputs.VnMonitoringPathAnalysiSourceEndpoint>;
    timeouts?: pulumi.Input<inputs.VnMonitoringPathAnalysiTimeouts>;
    type: pulumi.Input<string>;
}
