// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseDataGuardAssociation(args: GetDatabaseDataGuardAssociationArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseDataGuardAssociationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseDataGuardAssociation:getDatabaseDataGuardAssociation", {
        "dataGuardAssociationId": args.dataGuardAssociationId,
        "databaseId": args.databaseId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseDataGuardAssociation.
 */
export interface GetDatabaseDataGuardAssociationArgs {
    dataGuardAssociationId: string;
    databaseId: string;
}

/**
 * A collection of values returned by getDatabaseDataGuardAssociation.
 */
export interface GetDatabaseDataGuardAssociationResult {
    readonly applyLag: string;
    readonly applyRate: string;
    readonly availabilityDomain: string;
    readonly backupNetworkNsgIds: string[];
    readonly cpuCoreCount: number;
    readonly createAsync: boolean;
    readonly creationType: string;
    readonly dataCollectionOptions: outputs.GetDatabaseDataGuardAssociationDataCollectionOption[];
    readonly dataGuardAssociationId: string;
    readonly databaseAdminPassword: string;
    readonly databaseDefinedTags: {[key: string]: string};
    readonly databaseFreeformTags: {[key: string]: string};
    readonly databaseId: string;
    readonly databaseSoftwareImageId: string;
    readonly dbSystemDefinedTags: {[key: string]: string};
    readonly dbSystemFreeformTags: {[key: string]: string};
    readonly deleteStandbyDbHomeOnDelete: string;
    readonly displayName: string;
    readonly domain: string;
    readonly faultDomains: string[];
    readonly hostname: string;
    readonly id: string;
    readonly isActiveDataGuardEnabled: boolean;
    readonly licenseModel: string;
    readonly lifecycleDetails: string;
    readonly nodeCount: number;
    readonly nsgIds: string[];
    readonly peerDataGuardAssociationId: string;
    readonly peerDatabaseId: string;
    readonly peerDbHomeId: string;
    readonly peerDbSystemId: string;
    readonly peerDbUniqueName: string;
    readonly peerRole: string;
    readonly peerSidPrefix: string;
    readonly peerVmClusterId: string;
    readonly privateIp: string;
    readonly protectionMode: string;
    readonly role: string;
    readonly shape: string;
    readonly state: string;
    readonly storageVolumePerformanceMode: string;
    readonly subnetId: string;
    readonly timeCreated: string;
    readonly timeZone: string;
    readonly transportType: string;
}
export function getDatabaseDataGuardAssociationOutput(args: GetDatabaseDataGuardAssociationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseDataGuardAssociationResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseDataGuardAssociation(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseDataGuardAssociation.
 */
export interface GetDatabaseDataGuardAssociationOutputArgs {
    dataGuardAssociationId: pulumi.Input<string>;
    databaseId: pulumi.Input<string>;
}
