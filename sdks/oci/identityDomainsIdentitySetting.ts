// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdentityDomainsIdentitySetting extends pulumi.CustomResource {
    /**
     * Get an existing IdentityDomainsIdentitySetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityDomainsIdentitySettingState, opts?: pulumi.CustomResourceOptions): IdentityDomainsIdentitySetting {
        return new IdentityDomainsIdentitySetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/identityDomainsIdentitySetting:IdentityDomainsIdentitySetting';

    /**
     * Returns true if the given object is an instance of IdentityDomainsIdentitySetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityDomainsIdentitySetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityDomainsIdentitySetting.__pulumiType;
    }

    public readonly attributeSets!: pulumi.Output<string[] | undefined>;
    public readonly attributes!: pulumi.Output<string | undefined>;
    public readonly authorization!: pulumi.Output<string | undefined>;
    public /*out*/ readonly compartmentOcid!: pulumi.Output<string>;
    public /*out*/ readonly deleteInProgress!: pulumi.Output<boolean>;
    public /*out*/ readonly domainOcid!: pulumi.Output<string>;
    public readonly emitLockedMessageWhenUserIsLocked!: pulumi.Output<boolean>;
    public readonly externalId!: pulumi.Output<string>;
    public /*out*/ readonly idcsCreatedBies!: pulumi.Output<outputs.IdentityDomainsIdentitySettingIdcsCreatedBy[]>;
    public readonly idcsEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly idcsLastModifiedBies!: pulumi.Output<outputs.IdentityDomainsIdentitySettingIdcsLastModifiedBy[]>;
    public /*out*/ readonly idcsLastUpgradedInRelease!: pulumi.Output<string>;
    public /*out*/ readonly idcsPreventedOperations!: pulumi.Output<string[]>;
    public readonly identitySettingId!: pulumi.Output<string>;
    public /*out*/ readonly metas!: pulumi.Output<outputs.IdentityDomainsIdentitySettingMeta[]>;
    public readonly myProfile!: pulumi.Output<outputs.IdentityDomainsIdentitySettingMyProfile | undefined>;
    public readonly ocid!: pulumi.Output<string>;
    public readonly posixGid!: pulumi.Output<outputs.IdentityDomainsIdentitySettingPosixGid | undefined>;
    public readonly posixUid!: pulumi.Output<outputs.IdentityDomainsIdentitySettingPosixUid | undefined>;
    public readonly primaryEmailRequired!: pulumi.Output<boolean>;
    public /*out*/ readonly removeInvalidEmails!: pulumi.Output<boolean>;
    public readonly resourceTypeSchemaVersion!: pulumi.Output<string | undefined>;
    public readonly returnInactiveOverLockedMessage!: pulumi.Output<boolean>;
    public readonly schemas!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<outputs.IdentityDomainsIdentitySettingTag[] | undefined>;
    public /*out*/ readonly tenancyOcid!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.IdentityDomainsIdentitySettingTimeouts | undefined>;
    public readonly tokens!: pulumi.Output<outputs.IdentityDomainsIdentitySettingToken[] | undefined>;
    public readonly userAllowedToSetRecoveryEmail!: pulumi.Output<boolean>;

    /**
     * Create a IdentityDomainsIdentitySetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityDomainsIdentitySettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityDomainsIdentitySettingArgs | IdentityDomainsIdentitySettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityDomainsIdentitySettingState | undefined;
            resourceInputs["attributeSets"] = state ? state.attributeSets : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["compartmentOcid"] = state ? state.compartmentOcid : undefined;
            resourceInputs["deleteInProgress"] = state ? state.deleteInProgress : undefined;
            resourceInputs["domainOcid"] = state ? state.domainOcid : undefined;
            resourceInputs["emitLockedMessageWhenUserIsLocked"] = state ? state.emitLockedMessageWhenUserIsLocked : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["idcsCreatedBies"] = state ? state.idcsCreatedBies : undefined;
            resourceInputs["idcsEndpoint"] = state ? state.idcsEndpoint : undefined;
            resourceInputs["idcsLastModifiedBies"] = state ? state.idcsLastModifiedBies : undefined;
            resourceInputs["idcsLastUpgradedInRelease"] = state ? state.idcsLastUpgradedInRelease : undefined;
            resourceInputs["idcsPreventedOperations"] = state ? state.idcsPreventedOperations : undefined;
            resourceInputs["identitySettingId"] = state ? state.identitySettingId : undefined;
            resourceInputs["metas"] = state ? state.metas : undefined;
            resourceInputs["myProfile"] = state ? state.myProfile : undefined;
            resourceInputs["ocid"] = state ? state.ocid : undefined;
            resourceInputs["posixGid"] = state ? state.posixGid : undefined;
            resourceInputs["posixUid"] = state ? state.posixUid : undefined;
            resourceInputs["primaryEmailRequired"] = state ? state.primaryEmailRequired : undefined;
            resourceInputs["removeInvalidEmails"] = state ? state.removeInvalidEmails : undefined;
            resourceInputs["resourceTypeSchemaVersion"] = state ? state.resourceTypeSchemaVersion : undefined;
            resourceInputs["returnInactiveOverLockedMessage"] = state ? state.returnInactiveOverLockedMessage : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenancyOcid"] = state ? state.tenancyOcid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tokens"] = state ? state.tokens : undefined;
            resourceInputs["userAllowedToSetRecoveryEmail"] = state ? state.userAllowedToSetRecoveryEmail : undefined;
        } else {
            const args = argsOrState as IdentityDomainsIdentitySettingArgs | undefined;
            if ((!args || args.idcsEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idcsEndpoint'");
            }
            if ((!args || args.identitySettingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identitySettingId'");
            }
            if ((!args || args.schemas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemas'");
            }
            resourceInputs["attributeSets"] = args ? args.attributeSets : undefined;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["emitLockedMessageWhenUserIsLocked"] = args ? args.emitLockedMessageWhenUserIsLocked : undefined;
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["idcsEndpoint"] = args ? args.idcsEndpoint : undefined;
            resourceInputs["identitySettingId"] = args ? args.identitySettingId : undefined;
            resourceInputs["myProfile"] = args ? args.myProfile : undefined;
            resourceInputs["ocid"] = args ? args.ocid : undefined;
            resourceInputs["posixGid"] = args ? args.posixGid : undefined;
            resourceInputs["posixUid"] = args ? args.posixUid : undefined;
            resourceInputs["primaryEmailRequired"] = args ? args.primaryEmailRequired : undefined;
            resourceInputs["resourceTypeSchemaVersion"] = args ? args.resourceTypeSchemaVersion : undefined;
            resourceInputs["returnInactiveOverLockedMessage"] = args ? args.returnInactiveOverLockedMessage : undefined;
            resourceInputs["schemas"] = args ? args.schemas : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tokens"] = args ? args.tokens : undefined;
            resourceInputs["userAllowedToSetRecoveryEmail"] = args ? args.userAllowedToSetRecoveryEmail : undefined;
            resourceInputs["compartmentOcid"] = undefined /*out*/;
            resourceInputs["deleteInProgress"] = undefined /*out*/;
            resourceInputs["domainOcid"] = undefined /*out*/;
            resourceInputs["idcsCreatedBies"] = undefined /*out*/;
            resourceInputs["idcsLastModifiedBies"] = undefined /*out*/;
            resourceInputs["idcsLastUpgradedInRelease"] = undefined /*out*/;
            resourceInputs["idcsPreventedOperations"] = undefined /*out*/;
            resourceInputs["metas"] = undefined /*out*/;
            resourceInputs["removeInvalidEmails"] = undefined /*out*/;
            resourceInputs["tenancyOcid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityDomainsIdentitySetting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityDomainsIdentitySetting resources.
 */
export interface IdentityDomainsIdentitySettingState {
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    compartmentOcid?: pulumi.Input<string>;
    deleteInProgress?: pulumi.Input<boolean>;
    domainOcid?: pulumi.Input<string>;
    emitLockedMessageWhenUserIsLocked?: pulumi.Input<boolean>;
    externalId?: pulumi.Input<string>;
    idcsCreatedBies?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentitySettingIdcsCreatedBy>[]>;
    idcsEndpoint?: pulumi.Input<string>;
    idcsLastModifiedBies?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentitySettingIdcsLastModifiedBy>[]>;
    idcsLastUpgradedInRelease?: pulumi.Input<string>;
    idcsPreventedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    identitySettingId?: pulumi.Input<string>;
    metas?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentitySettingMeta>[]>;
    myProfile?: pulumi.Input<inputs.IdentityDomainsIdentitySettingMyProfile>;
    ocid?: pulumi.Input<string>;
    posixGid?: pulumi.Input<inputs.IdentityDomainsIdentitySettingPosixGid>;
    posixUid?: pulumi.Input<inputs.IdentityDomainsIdentitySettingPosixUid>;
    primaryEmailRequired?: pulumi.Input<boolean>;
    removeInvalidEmails?: pulumi.Input<boolean>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    returnInactiveOverLockedMessage?: pulumi.Input<boolean>;
    schemas?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentitySettingTag>[]>;
    tenancyOcid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IdentityDomainsIdentitySettingTimeouts>;
    tokens?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentitySettingToken>[]>;
    userAllowedToSetRecoveryEmail?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IdentityDomainsIdentitySetting resource.
 */
export interface IdentityDomainsIdentitySettingArgs {
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    emitLockedMessageWhenUserIsLocked?: pulumi.Input<boolean>;
    externalId?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    identitySettingId: pulumi.Input<string>;
    myProfile?: pulumi.Input<inputs.IdentityDomainsIdentitySettingMyProfile>;
    ocid?: pulumi.Input<string>;
    posixGid?: pulumi.Input<inputs.IdentityDomainsIdentitySettingPosixGid>;
    posixUid?: pulumi.Input<inputs.IdentityDomainsIdentitySettingPosixUid>;
    primaryEmailRequired?: pulumi.Input<boolean>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    returnInactiveOverLockedMessage?: pulumi.Input<boolean>;
    schemas: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentitySettingTag>[]>;
    timeouts?: pulumi.Input<inputs.IdentityDomainsIdentitySettingTimeouts>;
    tokens?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentitySettingToken>[]>;
    userAllowedToSetRecoveryEmail?: pulumi.Input<boolean>;
}
