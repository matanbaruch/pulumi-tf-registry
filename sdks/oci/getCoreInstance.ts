// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCoreInstance(args: GetCoreInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetCoreInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCoreInstance:getCoreInstance", {
        "instanceId": args.instanceId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCoreInstance.
 */
export interface GetCoreInstanceArgs {
    instanceId: string;
}

/**
 * A collection of values returned by getCoreInstance.
 */
export interface GetCoreInstanceResult {
    readonly agentConfigs: outputs.GetCoreInstanceAgentConfig[];
    readonly async: boolean;
    readonly availabilityConfigs: outputs.GetCoreInstanceAvailabilityConfig[];
    readonly availabilityDomain: string;
    readonly bootVolumeId: string;
    readonly capacityReservationId: string;
    readonly clusterPlacementGroupId: string;
    readonly compartmentId: string;
    readonly computeClusterId: string;
    readonly createVnicDetails: outputs.GetCoreInstanceCreateVnicDetail[];
    readonly dedicatedVmHostId: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly extendedMetadata: {[key: string]: string};
    readonly faultDomain: string;
    readonly freeformTags: {[key: string]: string};
    /**
     * @deprecated Deprecated
     */
    readonly hostnameLabel: string;
    readonly id: string;
    /**
     * @deprecated Deprecated
     */
    readonly image: string;
    readonly instanceConfigurationId: string;
    readonly instanceId: string;
    readonly instanceOptions: outputs.GetCoreInstanceInstanceOption[];
    readonly ipxeScript: string;
    readonly isCrossNumaNode: boolean;
    readonly isPvEncryptionInTransitEnabled: boolean;
    readonly launchMode: string;
    readonly launchOptions: outputs.GetCoreInstanceLaunchOption[];
    readonly launchVolumeAttachments: outputs.GetCoreInstanceLaunchVolumeAttachment[];
    readonly metadata: {[key: string]: string};
    readonly platformConfigs: outputs.GetCoreInstancePlatformConfig[];
    readonly preemptibleInstanceConfigs: outputs.GetCoreInstancePreemptibleInstanceConfig[];
    readonly preserveBootVolume: boolean;
    readonly preserveDataVolumesCreatedAtLaunch: boolean;
    readonly privateIp: string;
    readonly publicIp: string;
    readonly region: string;
    readonly shape: string;
    readonly shapeConfigs: outputs.GetCoreInstanceShapeConfig[];
    readonly sourceDetails: outputs.GetCoreInstanceSourceDetail[];
    readonly state: string;
    /**
     * @deprecated Deprecated
     */
    readonly subnetId: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeMaintenanceRebootDue: string;
    readonly updateOperationConstraint: string;
}
export function getCoreInstanceOutput(args: GetCoreInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCoreInstanceResult> {
    return pulumi.output(args).apply((a: any) => getCoreInstance(a, opts))
}

/**
 * A collection of arguments for invoking getCoreInstance.
 */
export interface GetCoreInstanceOutputArgs {
    instanceId: pulumi.Input<string>;
}
