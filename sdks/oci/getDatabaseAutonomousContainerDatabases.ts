// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseAutonomousContainerDatabases(args: GetDatabaseAutonomousContainerDatabasesArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseAutonomousContainerDatabasesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseAutonomousContainerDatabases:getDatabaseAutonomousContainerDatabases", {
        "autonomousExadataInfrastructureId": args.autonomousExadataInfrastructureId,
        "autonomousVmClusterId": args.autonomousVmClusterId,
        "availabilityDomain": args.availabilityDomain,
        "cloudAutonomousVmClusterId": args.cloudAutonomousVmClusterId,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "infrastructureType": args.infrastructureType,
        "serviceLevelAgreementType": args.serviceLevelAgreementType,
        "state": args.state,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseAutonomousContainerDatabases.
 */
export interface GetDatabaseAutonomousContainerDatabasesArgs {
    autonomousExadataInfrastructureId?: string;
    autonomousVmClusterId?: string;
    availabilityDomain?: string;
    cloudAutonomousVmClusterId?: string;
    compartmentId: string;
    displayName?: string;
    filters?: inputs.GetDatabaseAutonomousContainerDatabasesFilter[];
    id?: string;
    infrastructureType?: string;
    serviceLevelAgreementType?: string;
    state?: string;
}

/**
 * A collection of values returned by getDatabaseAutonomousContainerDatabases.
 */
export interface GetDatabaseAutonomousContainerDatabasesResult {
    readonly autonomousContainerDatabases: outputs.GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabase[];
    readonly autonomousExadataInfrastructureId?: string;
    readonly autonomousVmClusterId?: string;
    readonly availabilityDomain?: string;
    readonly cloudAutonomousVmClusterId?: string;
    readonly compartmentId: string;
    readonly displayName?: string;
    readonly filters?: outputs.GetDatabaseAutonomousContainerDatabasesFilter[];
    readonly id: string;
    readonly infrastructureType?: string;
    readonly serviceLevelAgreementType?: string;
    readonly state?: string;
}
export function getDatabaseAutonomousContainerDatabasesOutput(args: GetDatabaseAutonomousContainerDatabasesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseAutonomousContainerDatabasesResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseAutonomousContainerDatabases(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseAutonomousContainerDatabases.
 */
export interface GetDatabaseAutonomousContainerDatabasesOutputArgs {
    autonomousExadataInfrastructureId?: pulumi.Input<string>;
    autonomousVmClusterId?: pulumi.Input<string>;
    availabilityDomain?: pulumi.Input<string>;
    cloudAutonomousVmClusterId?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetDatabaseAutonomousContainerDatabasesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    infrastructureType?: pulumi.Input<string>;
    serviceLevelAgreementType?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}
