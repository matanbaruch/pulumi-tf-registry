// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BdsBdsInstanceOperationCertificateManagementsManagement extends pulumi.CustomResource {
    /**
     * Get an existing BdsBdsInstanceOperationCertificateManagementsManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BdsBdsInstanceOperationCertificateManagementsManagementState, opts?: pulumi.CustomResourceOptions): BdsBdsInstanceOperationCertificateManagementsManagement {
        return new BdsBdsInstanceOperationCertificateManagementsManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/bdsBdsInstanceOperationCertificateManagementsManagement:BdsBdsInstanceOperationCertificateManagementsManagement';

    /**
     * Returns true if the given object is an instance of BdsBdsInstanceOperationCertificateManagementsManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BdsBdsInstanceOperationCertificateManagementsManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BdsBdsInstanceOperationCertificateManagementsManagement.__pulumiType;
    }

    public readonly bdsInstanceId!: pulumi.Output<string>;
    public readonly clusterAdminPassword!: pulumi.Output<string>;
    public readonly enableOperationCertificateManagement!: pulumi.Output<boolean>;
    public readonly hostCertDetails!: pulumi.Output<outputs.BdsBdsInstanceOperationCertificateManagementsManagementHostCertDetail[] | undefined>;
    public readonly renewOperationCertificateManagement!: pulumi.Output<boolean>;
    public readonly rootCertificate!: pulumi.Output<string>;
    public readonly serverKeyPassword!: pulumi.Output<string>;
    public readonly services!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.BdsBdsInstanceOperationCertificateManagementsManagementTimeouts | undefined>;

    /**
     * Create a BdsBdsInstanceOperationCertificateManagementsManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BdsBdsInstanceOperationCertificateManagementsManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BdsBdsInstanceOperationCertificateManagementsManagementArgs | BdsBdsInstanceOperationCertificateManagementsManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BdsBdsInstanceOperationCertificateManagementsManagementState | undefined;
            resourceInputs["bdsInstanceId"] = state ? state.bdsInstanceId : undefined;
            resourceInputs["clusterAdminPassword"] = state ? state.clusterAdminPassword : undefined;
            resourceInputs["enableOperationCertificateManagement"] = state ? state.enableOperationCertificateManagement : undefined;
            resourceInputs["hostCertDetails"] = state ? state.hostCertDetails : undefined;
            resourceInputs["renewOperationCertificateManagement"] = state ? state.renewOperationCertificateManagement : undefined;
            resourceInputs["rootCertificate"] = state ? state.rootCertificate : undefined;
            resourceInputs["serverKeyPassword"] = state ? state.serverKeyPassword : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BdsBdsInstanceOperationCertificateManagementsManagementArgs | undefined;
            if ((!args || args.bdsInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bdsInstanceId'");
            }
            if ((!args || args.clusterAdminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterAdminPassword'");
            }
            if ((!args || args.enableOperationCertificateManagement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableOperationCertificateManagement'");
            }
            if ((!args || args.renewOperationCertificateManagement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'renewOperationCertificateManagement'");
            }
            if ((!args || args.services === undefined) && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            resourceInputs["bdsInstanceId"] = args ? args.bdsInstanceId : undefined;
            resourceInputs["clusterAdminPassword"] = args?.clusterAdminPassword ? pulumi.secret(args.clusterAdminPassword) : undefined;
            resourceInputs["enableOperationCertificateManagement"] = args ? args.enableOperationCertificateManagement : undefined;
            resourceInputs["hostCertDetails"] = args ? args.hostCertDetails : undefined;
            resourceInputs["renewOperationCertificateManagement"] = args ? args.renewOperationCertificateManagement : undefined;
            resourceInputs["rootCertificate"] = args ? args.rootCertificate : undefined;
            resourceInputs["serverKeyPassword"] = args?.serverKeyPassword ? pulumi.secret(args.serverKeyPassword) : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clusterAdminPassword", "serverKeyPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BdsBdsInstanceOperationCertificateManagementsManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BdsBdsInstanceOperationCertificateManagementsManagement resources.
 */
export interface BdsBdsInstanceOperationCertificateManagementsManagementState {
    bdsInstanceId?: pulumi.Input<string>;
    clusterAdminPassword?: pulumi.Input<string>;
    enableOperationCertificateManagement?: pulumi.Input<boolean>;
    hostCertDetails?: pulumi.Input<pulumi.Input<inputs.BdsBdsInstanceOperationCertificateManagementsManagementHostCertDetail>[]>;
    renewOperationCertificateManagement?: pulumi.Input<boolean>;
    rootCertificate?: pulumi.Input<string>;
    serverKeyPassword?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.BdsBdsInstanceOperationCertificateManagementsManagementTimeouts>;
}

/**
 * The set of arguments for constructing a BdsBdsInstanceOperationCertificateManagementsManagement resource.
 */
export interface BdsBdsInstanceOperationCertificateManagementsManagementArgs {
    bdsInstanceId: pulumi.Input<string>;
    clusterAdminPassword: pulumi.Input<string>;
    enableOperationCertificateManagement: pulumi.Input<boolean>;
    hostCertDetails?: pulumi.Input<pulumi.Input<inputs.BdsBdsInstanceOperationCertificateManagementsManagementHostCertDetail>[]>;
    renewOperationCertificateManagement: pulumi.Input<boolean>;
    rootCertificate?: pulumi.Input<string>;
    serverKeyPassword?: pulumi.Input<string>;
    services: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.BdsBdsInstanceOperationCertificateManagementsManagementTimeouts>;
}
