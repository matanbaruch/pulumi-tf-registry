// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudGuardDataSourceEvent(args: GetCloudGuardDataSourceEventArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudGuardDataSourceEventResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCloudGuardDataSourceEvent:getCloudGuardDataSourceEvent", {
        "dataSourceId": args.dataSourceId,
        "id": args.id,
        "region": args.region,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudGuardDataSourceEvent.
 */
export interface GetCloudGuardDataSourceEventArgs {
    dataSourceId: string;
    id?: string;
    region?: string;
}

/**
 * A collection of values returned by getCloudGuardDataSourceEvent.
 */
export interface GetCloudGuardDataSourceEventResult {
    readonly dataSourceId: string;
    readonly id: string;
    readonly items: outputs.GetCloudGuardDataSourceEventItem[];
    readonly region?: string;
}
export function getCloudGuardDataSourceEventOutput(args: GetCloudGuardDataSourceEventOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudGuardDataSourceEventResult> {
    return pulumi.output(args).apply((a: any) => getCloudGuardDataSourceEvent(a, opts))
}

/**
 * A collection of arguments for invoking getCloudGuardDataSourceEvent.
 */
export interface GetCloudGuardDataSourceEventOutputArgs {
    dataSourceId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}
