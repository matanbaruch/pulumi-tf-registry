// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MediaServicesMediaWorkflowJob extends pulumi.CustomResource {
    /**
     * Get an existing MediaServicesMediaWorkflowJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MediaServicesMediaWorkflowJobState, opts?: pulumi.CustomResourceOptions): MediaServicesMediaWorkflowJob {
        return new MediaServicesMediaWorkflowJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/mediaServicesMediaWorkflowJob:MediaServicesMediaWorkflowJob';

    /**
     * Returns true if the given object is an instance of MediaServicesMediaWorkflowJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MediaServicesMediaWorkflowJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MediaServicesMediaWorkflowJob.__pulumiType;
    }

    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly isLockOverride!: pulumi.Output<boolean>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly locks!: pulumi.Output<outputs.MediaServicesMediaWorkflowJobLock[] | undefined>;
    public readonly mediaWorkflowConfigurationIds!: pulumi.Output<string[]>;
    public readonly mediaWorkflowId!: pulumi.Output<string>;
    public readonly mediaWorkflowName!: pulumi.Output<string>;
    public /*out*/ readonly outputs!: pulumi.Output<outputs.MediaServicesMediaWorkflowJobOutput[]>;
    public readonly parameters!: pulumi.Output<string>;
    public /*out*/ readonly runnable!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly taskLifecycleStates!: pulumi.Output<outputs.MediaServicesMediaWorkflowJobTaskLifecycleState[]>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeEnded!: pulumi.Output<string>;
    public /*out*/ readonly timeStarted!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MediaServicesMediaWorkflowJobTimeouts | undefined>;
    public readonly workflowIdentifierType!: pulumi.Output<string>;

    /**
     * Create a MediaServicesMediaWorkflowJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MediaServicesMediaWorkflowJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MediaServicesMediaWorkflowJobArgs | MediaServicesMediaWorkflowJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MediaServicesMediaWorkflowJobState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isLockOverride"] = state ? state.isLockOverride : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["locks"] = state ? state.locks : undefined;
            resourceInputs["mediaWorkflowConfigurationIds"] = state ? state.mediaWorkflowConfigurationIds : undefined;
            resourceInputs["mediaWorkflowId"] = state ? state.mediaWorkflowId : undefined;
            resourceInputs["mediaWorkflowName"] = state ? state.mediaWorkflowName : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["runnable"] = state ? state.runnable : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["taskLifecycleStates"] = state ? state.taskLifecycleStates : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeEnded"] = state ? state.timeEnded : undefined;
            resourceInputs["timeStarted"] = state ? state.timeStarted : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workflowIdentifierType"] = state ? state.workflowIdentifierType : undefined;
        } else {
            const args = argsOrState as MediaServicesMediaWorkflowJobArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.workflowIdentifierType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workflowIdentifierType'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isLockOverride"] = args ? args.isLockOverride : undefined;
            resourceInputs["locks"] = args ? args.locks : undefined;
            resourceInputs["mediaWorkflowConfigurationIds"] = args ? args.mediaWorkflowConfigurationIds : undefined;
            resourceInputs["mediaWorkflowId"] = args ? args.mediaWorkflowId : undefined;
            resourceInputs["mediaWorkflowName"] = args ? args.mediaWorkflowName : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workflowIdentifierType"] = args ? args.workflowIdentifierType : undefined;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["outputs"] = undefined /*out*/;
            resourceInputs["runnable"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["taskLifecycleStates"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeEnded"] = undefined /*out*/;
            resourceInputs["timeStarted"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MediaServicesMediaWorkflowJob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MediaServicesMediaWorkflowJob resources.
 */
export interface MediaServicesMediaWorkflowJobState {
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isLockOverride?: pulumi.Input<boolean>;
    lifecycleDetails?: pulumi.Input<string>;
    locks?: pulumi.Input<pulumi.Input<inputs.MediaServicesMediaWorkflowJobLock>[]>;
    mediaWorkflowConfigurationIds?: pulumi.Input<pulumi.Input<string>[]>;
    mediaWorkflowId?: pulumi.Input<string>;
    mediaWorkflowName?: pulumi.Input<string>;
    outputs?: pulumi.Input<pulumi.Input<inputs.MediaServicesMediaWorkflowJobOutput>[]>;
    parameters?: pulumi.Input<string>;
    runnable?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taskLifecycleStates?: pulumi.Input<pulumi.Input<inputs.MediaServicesMediaWorkflowJobTaskLifecycleState>[]>;
    timeCreated?: pulumi.Input<string>;
    timeEnded?: pulumi.Input<string>;
    timeStarted?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MediaServicesMediaWorkflowJobTimeouts>;
    workflowIdentifierType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MediaServicesMediaWorkflowJob resource.
 */
export interface MediaServicesMediaWorkflowJobArgs {
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isLockOverride?: pulumi.Input<boolean>;
    locks?: pulumi.Input<pulumi.Input<inputs.MediaServicesMediaWorkflowJobLock>[]>;
    mediaWorkflowConfigurationIds?: pulumi.Input<pulumi.Input<string>[]>;
    mediaWorkflowId?: pulumi.Input<string>;
    mediaWorkflowName?: pulumi.Input<string>;
    parameters?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MediaServicesMediaWorkflowJobTimeouts>;
    workflowIdentifierType: pulumi.Input<string>;
}
