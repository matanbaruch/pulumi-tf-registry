// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AnalyticsAnalyticsInstancePrivateAccessChannel extends pulumi.CustomResource {
    /**
     * Get an existing AnalyticsAnalyticsInstancePrivateAccessChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AnalyticsAnalyticsInstancePrivateAccessChannelState, opts?: pulumi.CustomResourceOptions): AnalyticsAnalyticsInstancePrivateAccessChannel {
        return new AnalyticsAnalyticsInstancePrivateAccessChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/analyticsAnalyticsInstancePrivateAccessChannel:AnalyticsAnalyticsInstancePrivateAccessChannel';

    /**
     * Returns true if the given object is an instance of AnalyticsAnalyticsInstancePrivateAccessChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AnalyticsAnalyticsInstancePrivateAccessChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AnalyticsAnalyticsInstancePrivateAccessChannel.__pulumiType;
    }

    public readonly analyticsInstanceId!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly egressSourceIpAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    public /*out*/ readonly key!: pulumi.Output<string>;
    public readonly networkSecurityGroupIds!: pulumi.Output<string[]>;
    public readonly privateSourceDnsZones!: pulumi.Output<outputs.AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone[]>;
    public readonly privateSourceScanHosts!: pulumi.Output<outputs.AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceScanHost[] | undefined>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.AnalyticsAnalyticsInstancePrivateAccessChannelTimeouts | undefined>;
    public readonly vcnId!: pulumi.Output<string>;

    /**
     * Create a AnalyticsAnalyticsInstancePrivateAccessChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AnalyticsAnalyticsInstancePrivateAccessChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AnalyticsAnalyticsInstancePrivateAccessChannelArgs | AnalyticsAnalyticsInstancePrivateAccessChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AnalyticsAnalyticsInstancePrivateAccessChannelState | undefined;
            resourceInputs["analyticsInstanceId"] = state ? state.analyticsInstanceId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["egressSourceIpAddresses"] = state ? state.egressSourceIpAddresses : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["networkSecurityGroupIds"] = state ? state.networkSecurityGroupIds : undefined;
            resourceInputs["privateSourceDnsZones"] = state ? state.privateSourceDnsZones : undefined;
            resourceInputs["privateSourceScanHosts"] = state ? state.privateSourceScanHosts : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vcnId"] = state ? state.vcnId : undefined;
        } else {
            const args = argsOrState as AnalyticsAnalyticsInstancePrivateAccessChannelArgs | undefined;
            if ((!args || args.analyticsInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'analyticsInstanceId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.privateSourceDnsZones === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateSourceDnsZones'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vcnId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcnId'");
            }
            resourceInputs["analyticsInstanceId"] = args ? args.analyticsInstanceId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["networkSecurityGroupIds"] = args ? args.networkSecurityGroupIds : undefined;
            resourceInputs["privateSourceDnsZones"] = args ? args.privateSourceDnsZones : undefined;
            resourceInputs["privateSourceScanHosts"] = args ? args.privateSourceScanHosts : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vcnId"] = args ? args.vcnId : undefined;
            resourceInputs["egressSourceIpAddresses"] = undefined /*out*/;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AnalyticsAnalyticsInstancePrivateAccessChannel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AnalyticsAnalyticsInstancePrivateAccessChannel resources.
 */
export interface AnalyticsAnalyticsInstancePrivateAccessChannelState {
    analyticsInstanceId?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    egressSourceIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    ipAddress?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    networkSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    privateSourceDnsZones?: pulumi.Input<pulumi.Input<inputs.AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone>[]>;
    privateSourceScanHosts?: pulumi.Input<pulumi.Input<inputs.AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceScanHost>[]>;
    subnetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AnalyticsAnalyticsInstancePrivateAccessChannelTimeouts>;
    vcnId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AnalyticsAnalyticsInstancePrivateAccessChannel resource.
 */
export interface AnalyticsAnalyticsInstancePrivateAccessChannelArgs {
    analyticsInstanceId: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    networkSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    privateSourceDnsZones: pulumi.Input<pulumi.Input<inputs.AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone>[]>;
    privateSourceScanHosts?: pulumi.Input<pulumi.Input<inputs.AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceScanHost>[]>;
    subnetId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AnalyticsAnalyticsInstancePrivateAccessChannelTimeouts>;
    vcnId: pulumi.Input<string>;
}
