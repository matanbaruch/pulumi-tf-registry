// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOnesubscriptionAggregatedComputedUsages(args: GetOnesubscriptionAggregatedComputedUsagesArgs, opts?: pulumi.InvokeOptions): Promise<GetOnesubscriptionAggregatedComputedUsagesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getOnesubscriptionAggregatedComputedUsages:getOnesubscriptionAggregatedComputedUsages", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "grouping": args.grouping,
        "id": args.id,
        "parentProduct": args.parentProduct,
        "subscriptionId": args.subscriptionId,
        "timeFrom": args.timeFrom,
        "timeTo": args.timeTo,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOnesubscriptionAggregatedComputedUsages.
 */
export interface GetOnesubscriptionAggregatedComputedUsagesArgs {
    compartmentId: string;
    filters?: inputs.GetOnesubscriptionAggregatedComputedUsagesFilter[];
    grouping?: string;
    id?: string;
    parentProduct?: string;
    subscriptionId: string;
    timeFrom: string;
    timeTo: string;
}

/**
 * A collection of values returned by getOnesubscriptionAggregatedComputedUsages.
 */
export interface GetOnesubscriptionAggregatedComputedUsagesResult {
    readonly aggregatedComputedUsages: outputs.GetOnesubscriptionAggregatedComputedUsagesAggregatedComputedUsage[];
    readonly compartmentId: string;
    readonly filters?: outputs.GetOnesubscriptionAggregatedComputedUsagesFilter[];
    readonly grouping?: string;
    readonly id: string;
    readonly parentProduct?: string;
    readonly subscriptionId: string;
    readonly timeFrom: string;
    readonly timeTo: string;
}
export function getOnesubscriptionAggregatedComputedUsagesOutput(args: GetOnesubscriptionAggregatedComputedUsagesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOnesubscriptionAggregatedComputedUsagesResult> {
    return pulumi.output(args).apply((a: any) => getOnesubscriptionAggregatedComputedUsages(a, opts))
}

/**
 * A collection of arguments for invoking getOnesubscriptionAggregatedComputedUsages.
 */
export interface GetOnesubscriptionAggregatedComputedUsagesOutputArgs {
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetOnesubscriptionAggregatedComputedUsagesFilterArgs>[]>;
    grouping?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    parentProduct?: pulumi.Input<string>;
    subscriptionId: pulumi.Input<string>;
    timeFrom: pulumi.Input<string>;
    timeTo: pulumi.Input<string>;
}
