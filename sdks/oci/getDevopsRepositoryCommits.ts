// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDevopsRepositoryCommits(args: GetDevopsRepositoryCommitsArgs, opts?: pulumi.InvokeOptions): Promise<GetDevopsRepositoryCommitsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDevopsRepositoryCommits:getDevopsRepositoryCommits", {
        "authorName": args.authorName,
        "commitMessage": args.commitMessage,
        "excludeRefName": args.excludeRefName,
        "filePath": args.filePath,
        "filters": args.filters,
        "id": args.id,
        "refName": args.refName,
        "repositoryId": args.repositoryId,
        "timestampGreaterThanOrEqualTo": args.timestampGreaterThanOrEqualTo,
        "timestampLessThanOrEqualTo": args.timestampLessThanOrEqualTo,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDevopsRepositoryCommits.
 */
export interface GetDevopsRepositoryCommitsArgs {
    authorName?: string;
    commitMessage?: string;
    excludeRefName?: string;
    filePath?: string;
    filters?: inputs.GetDevopsRepositoryCommitsFilter[];
    id?: string;
    refName?: string;
    repositoryId: string;
    timestampGreaterThanOrEqualTo?: string;
    timestampLessThanOrEqualTo?: string;
}

/**
 * A collection of values returned by getDevopsRepositoryCommits.
 */
export interface GetDevopsRepositoryCommitsResult {
    readonly authorName?: string;
    readonly commitMessage?: string;
    readonly excludeRefName?: string;
    readonly filePath?: string;
    readonly filters?: outputs.GetDevopsRepositoryCommitsFilter[];
    readonly id: string;
    readonly refName?: string;
    readonly repositoryCommitCollections: outputs.GetDevopsRepositoryCommitsRepositoryCommitCollection[];
    readonly repositoryId: string;
    readonly timestampGreaterThanOrEqualTo?: string;
    readonly timestampLessThanOrEqualTo?: string;
}
export function getDevopsRepositoryCommitsOutput(args: GetDevopsRepositoryCommitsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDevopsRepositoryCommitsResult> {
    return pulumi.output(args).apply((a: any) => getDevopsRepositoryCommits(a, opts))
}

/**
 * A collection of arguments for invoking getDevopsRepositoryCommits.
 */
export interface GetDevopsRepositoryCommitsOutputArgs {
    authorName?: pulumi.Input<string>;
    commitMessage?: pulumi.Input<string>;
    excludeRefName?: pulumi.Input<string>;
    filePath?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetDevopsRepositoryCommitsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    refName?: pulumi.Input<string>;
    repositoryId: pulumi.Input<string>;
    timestampGreaterThanOrEqualTo?: pulumi.Input<string>;
    timestampLessThanOrEqualTo?: pulumi.Input<string>;
}
