// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getExecTest(args: GetExecTestArgs, opts?: pulumi.InvokeOptions): Promise<GetExecTestResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getExecTest:getExecTest", {
        "digest": args.digest,
        "envs": args.envs,
        "script": args.script,
        "timeoutSeconds": args.timeoutSeconds,
        "workingDir": args.workingDir,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getExecTest.
 */
export interface GetExecTestArgs {
    digest: string;
    envs?: inputs.GetExecTestEnv[];
    script: string;
    timeoutSeconds?: number;
    workingDir?: string;
}

/**
 * A collection of values returned by getExecTest.
 */
export interface GetExecTestResult {
    readonly digest: string;
    readonly envs?: outputs.GetExecTestEnv[];
    readonly exitCode: number;
    readonly id: string;
    /**
     * @deprecated Deprecated
     */
    readonly output: string;
    readonly script: string;
    readonly testedRef: string;
    readonly timeoutSeconds?: number;
    readonly workingDir?: string;
}
export function getExecTestOutput(args: GetExecTestOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetExecTestResult> {
    return pulumi.output(args).apply((a: any) => getExecTest(a, opts))
}

/**
 * A collection of arguments for invoking getExecTest.
 */
export interface GetExecTestOutputArgs {
    digest: pulumi.Input<string>;
    envs?: pulumi.Input<pulumi.Input<inputs.GetExecTestEnvArgs>[]>;
    script: pulumi.Input<string>;
    timeoutSeconds?: pulumi.Input<number>;
    workingDir?: pulumi.Input<string>;
}
