// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CertificatesManagementCertificate extends pulumi.CustomResource {
    /**
     * Get an existing CertificatesManagementCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificatesManagementCertificateState, opts?: pulumi.CustomResourceOptions): CertificatesManagementCertificate {
        return new CertificatesManagementCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/certificatesManagementCertificate:CertificatesManagementCertificate';

    /**
     * Returns true if the given object is an instance of CertificatesManagementCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificatesManagementCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificatesManagementCertificate.__pulumiType;
    }

    public readonly certificateConfig!: pulumi.Output<outputs.CertificatesManagementCertificateCertificateConfig>;
    public /*out*/ readonly certificateProfileType!: pulumi.Output<string>;
    public /*out*/ readonly certificateRevocationListDetails!: pulumi.Output<outputs.CertificatesManagementCertificateCertificateRevocationListDetail[]>;
    public readonly certificateRules!: pulumi.Output<outputs.CertificatesManagementCertificateCertificateRule[] | undefined>;
    public readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly configType!: pulumi.Output<string>;
    public /*out*/ readonly currentVersions!: pulumi.Output<outputs.CertificatesManagementCertificateCurrentVersion[]>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly issuerCertificateAuthorityId!: pulumi.Output<string>;
    public /*out*/ readonly keyAlgorithm!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly signatureAlgorithm!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly subjects!: pulumi.Output<outputs.CertificatesManagementCertificateSubject[]>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeOfDeletion!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CertificatesManagementCertificateTimeouts | undefined>;

    /**
     * Create a CertificatesManagementCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificatesManagementCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificatesManagementCertificateArgs | CertificatesManagementCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificatesManagementCertificateState | undefined;
            resourceInputs["certificateConfig"] = state ? state.certificateConfig : undefined;
            resourceInputs["certificateProfileType"] = state ? state.certificateProfileType : undefined;
            resourceInputs["certificateRevocationListDetails"] = state ? state.certificateRevocationListDetails : undefined;
            resourceInputs["certificateRules"] = state ? state.certificateRules : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["configType"] = state ? state.configType : undefined;
            resourceInputs["currentVersions"] = state ? state.currentVersions : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["issuerCertificateAuthorityId"] = state ? state.issuerCertificateAuthorityId : undefined;
            resourceInputs["keyAlgorithm"] = state ? state.keyAlgorithm : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subjects"] = state ? state.subjects : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeOfDeletion"] = state ? state.timeOfDeletion : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CertificatesManagementCertificateArgs | undefined;
            if ((!args || args.certificateConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateConfig'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            resourceInputs["certificateConfig"] = args ? args.certificateConfig : undefined;
            resourceInputs["certificateRules"] = args ? args.certificateRules : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["certificateProfileType"] = undefined /*out*/;
            resourceInputs["certificateRevocationListDetails"] = undefined /*out*/;
            resourceInputs["configType"] = undefined /*out*/;
            resourceInputs["currentVersions"] = undefined /*out*/;
            resourceInputs["issuerCertificateAuthorityId"] = undefined /*out*/;
            resourceInputs["keyAlgorithm"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["signatureAlgorithm"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["subjects"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeOfDeletion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificatesManagementCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CertificatesManagementCertificate resources.
 */
export interface CertificatesManagementCertificateState {
    certificateConfig?: pulumi.Input<inputs.CertificatesManagementCertificateCertificateConfig>;
    certificateProfileType?: pulumi.Input<string>;
    certificateRevocationListDetails?: pulumi.Input<pulumi.Input<inputs.CertificatesManagementCertificateCertificateRevocationListDetail>[]>;
    certificateRules?: pulumi.Input<pulumi.Input<inputs.CertificatesManagementCertificateCertificateRule>[]>;
    compartmentId?: pulumi.Input<string>;
    configType?: pulumi.Input<string>;
    currentVersions?: pulumi.Input<pulumi.Input<inputs.CertificatesManagementCertificateCurrentVersion>[]>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    issuerCertificateAuthorityId?: pulumi.Input<string>;
    keyAlgorithm?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    signatureAlgorithm?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subjects?: pulumi.Input<pulumi.Input<inputs.CertificatesManagementCertificateSubject>[]>;
    timeCreated?: pulumi.Input<string>;
    timeOfDeletion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CertificatesManagementCertificateTimeouts>;
}

/**
 * The set of arguments for constructing a CertificatesManagementCertificate resource.
 */
export interface CertificatesManagementCertificateArgs {
    certificateConfig: pulumi.Input<inputs.CertificatesManagementCertificateCertificateConfig>;
    certificateRules?: pulumi.Input<pulumi.Input<inputs.CertificatesManagementCertificateCertificateRule>[]>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CertificatesManagementCertificateTimeouts>;
}
