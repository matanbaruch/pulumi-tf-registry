// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDatacatalogCatalogType(args: GetDatacatalogCatalogTypeArgs, opts?: pulumi.InvokeOptions): Promise<GetDatacatalogCatalogTypeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatacatalogCatalogType:getDatacatalogCatalogType", {
        "catalogId": args.catalogId,
        "fields": args.fields,
        "id": args.id,
        "typeKey": args.typeKey,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatacatalogCatalogType.
 */
export interface GetDatacatalogCatalogTypeArgs {
    catalogId: string;
    fields?: string[];
    id?: string;
    typeKey: string;
}

/**
 * A collection of values returned by getDatacatalogCatalogType.
 */
export interface GetDatacatalogCatalogTypeResult {
    readonly catalogId: string;
    readonly description: string;
    readonly externalTypeName: string;
    readonly fields?: string[];
    readonly id: string;
    readonly isApproved: boolean;
    readonly isInternal: boolean;
    readonly isTag: boolean;
    readonly key: string;
    readonly name: string;
    readonly properties: {[key: string]: string};
    readonly state: string;
    readonly typeCategory: string;
    readonly typeKey: string;
    readonly uri: string;
}
export function getDatacatalogCatalogTypeOutput(args: GetDatacatalogCatalogTypeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatacatalogCatalogTypeResult> {
    return pulumi.output(args).apply((a: any) => getDatacatalogCatalogType(a, opts))
}

/**
 * A collection of arguments for invoking getDatacatalogCatalogType.
 */
export interface GetDatacatalogCatalogTypeOutputArgs {
    catalogId: pulumi.Input<string>;
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<string>;
    typeKey: pulumi.Input<string>;
}
