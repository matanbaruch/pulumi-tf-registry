// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseCloudVmClusterIormConfig extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseCloudVmClusterIormConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseCloudVmClusterIormConfigState, opts?: pulumi.CustomResourceOptions): DatabaseCloudVmClusterIormConfig {
        return new DatabaseCloudVmClusterIormConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseCloudVmClusterIormConfig:DatabaseCloudVmClusterIormConfig';

    /**
     * Returns true if the given object is an instance of DatabaseCloudVmClusterIormConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseCloudVmClusterIormConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseCloudVmClusterIormConfig.__pulumiType;
    }

    public readonly cloudVmClusterId!: pulumi.Output<string>;
    public readonly dbPlans!: pulumi.Output<outputs.DatabaseCloudVmClusterIormConfigDbPlan[]>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly objective!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseCloudVmClusterIormConfigTimeouts | undefined>;

    /**
     * Create a DatabaseCloudVmClusterIormConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseCloudVmClusterIormConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseCloudVmClusterIormConfigArgs | DatabaseCloudVmClusterIormConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseCloudVmClusterIormConfigState | undefined;
            resourceInputs["cloudVmClusterId"] = state ? state.cloudVmClusterId : undefined;
            resourceInputs["dbPlans"] = state ? state.dbPlans : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["objective"] = state ? state.objective : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabaseCloudVmClusterIormConfigArgs | undefined;
            if ((!args || args.cloudVmClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudVmClusterId'");
            }
            if ((!args || args.dbPlans === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbPlans'");
            }
            resourceInputs["cloudVmClusterId"] = args ? args.cloudVmClusterId : undefined;
            resourceInputs["dbPlans"] = args ? args.dbPlans : undefined;
            resourceInputs["objective"] = args ? args.objective : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseCloudVmClusterIormConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseCloudVmClusterIormConfig resources.
 */
export interface DatabaseCloudVmClusterIormConfigState {
    cloudVmClusterId?: pulumi.Input<string>;
    dbPlans?: pulumi.Input<pulumi.Input<inputs.DatabaseCloudVmClusterIormConfigDbPlan>[]>;
    lifecycleDetails?: pulumi.Input<string>;
    objective?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseCloudVmClusterIormConfigTimeouts>;
}

/**
 * The set of arguments for constructing a DatabaseCloudVmClusterIormConfig resource.
 */
export interface DatabaseCloudVmClusterIormConfigArgs {
    cloudVmClusterId: pulumi.Input<string>;
    dbPlans: pulumi.Input<pulumi.Input<inputs.DatabaseCloudVmClusterIormConfigDbPlan>[]>;
    objective?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseCloudVmClusterIormConfigTimeouts>;
}
