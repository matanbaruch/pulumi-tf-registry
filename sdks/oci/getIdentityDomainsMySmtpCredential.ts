// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsMySmtpCredential(args: GetIdentityDomainsMySmtpCredentialArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsMySmtpCredentialResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsMySmtpCredential:getIdentityDomainsMySmtpCredential", {
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "mySmtpCredentialId": args.mySmtpCredentialId,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsMySmtpCredential.
 */
export interface GetIdentityDomainsMySmtpCredentialArgs {
    authorization?: string;
    idcsEndpoint: string;
    mySmtpCredentialId: string;
    resourceTypeSchemaVersion?: string;
}

/**
 * A collection of values returned by getIdentityDomainsMySmtpCredential.
 */
export interface GetIdentityDomainsMySmtpCredentialResult {
    readonly authorization?: string;
    readonly compartmentOcid: string;
    readonly deleteInProgress: boolean;
    readonly description: string;
    readonly domainOcid: string;
    readonly expiresOn: string;
    readonly id: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsMySmtpCredentialIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsMySmtpCredentialIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly metas: outputs.GetIdentityDomainsMySmtpCredentialMeta[];
    readonly mySmtpCredentialId: string;
    readonly ocid: string;
    readonly resourceTypeSchemaVersion?: string;
    readonly schemas: string[];
    readonly status: string;
    readonly tags: outputs.GetIdentityDomainsMySmtpCredentialTag[];
    readonly tenancyOcid: string;
    readonly userName: string;
    readonly users: outputs.GetIdentityDomainsMySmtpCredentialUser[];
}
export function getIdentityDomainsMySmtpCredentialOutput(args: GetIdentityDomainsMySmtpCredentialOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsMySmtpCredentialResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsMySmtpCredential(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsMySmtpCredential.
 */
export interface GetIdentityDomainsMySmtpCredentialOutputArgs {
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    mySmtpCredentialId: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
}
