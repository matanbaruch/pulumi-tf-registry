// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getBlockchainPeer(args: GetBlockchainPeerArgs, opts?: pulumi.InvokeOptions): Promise<GetBlockchainPeerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getBlockchainPeer:getBlockchainPeer", {
        "blockchainPlatformId": args.blockchainPlatformId,
        "peerId": args.peerId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBlockchainPeer.
 */
export interface GetBlockchainPeerArgs {
    blockchainPlatformId: string;
    peerId: string;
}

/**
 * A collection of values returned by getBlockchainPeer.
 */
export interface GetBlockchainPeerResult {
    readonly ad: string;
    readonly alias: string;
    readonly blockchainPlatformId: string;
    readonly host: string;
    readonly id: string;
    readonly ocpuAllocationParams: outputs.GetBlockchainPeerOcpuAllocationParam[];
    readonly peerId: string;
    readonly peerKey: string;
    readonly role: string;
    readonly state: string;
}
export function getBlockchainPeerOutput(args: GetBlockchainPeerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBlockchainPeerResult> {
    return pulumi.output(args).apply((a: any) => getBlockchainPeer(a, opts))
}

/**
 * A collection of arguments for invoking getBlockchainPeer.
 */
export interface GetBlockchainPeerOutputArgs {
    blockchainPlatformId: pulumi.Input<string>;
    peerId: pulumi.Input<string>;
}
