// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVnMonitoringPathAnalyzerTest(args: GetVnMonitoringPathAnalyzerTestArgs, opts?: pulumi.InvokeOptions): Promise<GetVnMonitoringPathAnalyzerTestResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getVnMonitoringPathAnalyzerTest:getVnMonitoringPathAnalyzerTest", {
        "pathAnalyzerTestId": args.pathAnalyzerTestId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVnMonitoringPathAnalyzerTest.
 */
export interface GetVnMonitoringPathAnalyzerTestArgs {
    pathAnalyzerTestId: string;
}

/**
 * A collection of values returned by getVnMonitoringPathAnalyzerTest.
 */
export interface GetVnMonitoringPathAnalyzerTestResult {
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly destinationEndpoints: outputs.GetVnMonitoringPathAnalyzerTestDestinationEndpoint[];
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly pathAnalyzerTestId: string;
    readonly protocol: number;
    readonly protocolParameters: outputs.GetVnMonitoringPathAnalyzerTestProtocolParameter[];
    readonly queryOptions: outputs.GetVnMonitoringPathAnalyzerTestQueryOption[];
    readonly sourceEndpoints: outputs.GetVnMonitoringPathAnalyzerTestSourceEndpoint[];
    readonly state: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getVnMonitoringPathAnalyzerTestOutput(args: GetVnMonitoringPathAnalyzerTestOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVnMonitoringPathAnalyzerTestResult> {
    return pulumi.output(args).apply((a: any) => getVnMonitoringPathAnalyzerTest(a, opts))
}

/**
 * A collection of arguments for invoking getVnMonitoringPathAnalyzerTest.
 */
export interface GetVnMonitoringPathAnalyzerTestOutputArgs {
    pathAnalyzerTestId: pulumi.Input<string>;
}
