// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseCloudDatabaseManagement extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseCloudDatabaseManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseCloudDatabaseManagementState, opts?: pulumi.CustomResourceOptions): DatabaseCloudDatabaseManagement {
        return new DatabaseCloudDatabaseManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseCloudDatabaseManagement:DatabaseCloudDatabaseManagement';

    /**
     * Returns true if the given object is an instance of DatabaseCloudDatabaseManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseCloudDatabaseManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseCloudDatabaseManagement.__pulumiType;
    }

    public readonly credentialdetails!: pulumi.Output<outputs.DatabaseCloudDatabaseManagementCredentialdetails>;
    public readonly databaseId!: pulumi.Output<string>;
    public readonly enableManagement!: pulumi.Output<boolean>;
    public readonly managementType!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly privateEndPointId!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string | undefined>;
    public readonly role!: pulumi.Output<string | undefined>;
    public readonly serviceName!: pulumi.Output<string>;
    public readonly sslSecretId!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseCloudDatabaseManagementTimeouts | undefined>;

    /**
     * Create a DatabaseCloudDatabaseManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseCloudDatabaseManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseCloudDatabaseManagementArgs | DatabaseCloudDatabaseManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseCloudDatabaseManagementState | undefined;
            resourceInputs["credentialdetails"] = state ? state.credentialdetails : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["enableManagement"] = state ? state.enableManagement : undefined;
            resourceInputs["managementType"] = state ? state.managementType : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateEndPointId"] = state ? state.privateEndPointId : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["sslSecretId"] = state ? state.sslSecretId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabaseCloudDatabaseManagementArgs | undefined;
            if ((!args || args.credentialdetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialdetails'");
            }
            if ((!args || args.databaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseId'");
            }
            if ((!args || args.enableManagement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableManagement'");
            }
            if ((!args || args.managementType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementType'");
            }
            if ((!args || args.privateEndPointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateEndPointId'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["credentialdetails"] = args ? args.credentialdetails : undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["enableManagement"] = args ? args.enableManagement : undefined;
            resourceInputs["managementType"] = args ? args.managementType : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["privateEndPointId"] = args ? args.privateEndPointId : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["sslSecretId"] = args ? args.sslSecretId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseCloudDatabaseManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseCloudDatabaseManagement resources.
 */
export interface DatabaseCloudDatabaseManagementState {
    credentialdetails?: pulumi.Input<inputs.DatabaseCloudDatabaseManagementCredentialdetails>;
    databaseId?: pulumi.Input<string>;
    enableManagement?: pulumi.Input<boolean>;
    managementType?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    privateEndPointId?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    sslSecretId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseCloudDatabaseManagementTimeouts>;
}

/**
 * The set of arguments for constructing a DatabaseCloudDatabaseManagement resource.
 */
export interface DatabaseCloudDatabaseManagementArgs {
    credentialdetails: pulumi.Input<inputs.DatabaseCloudDatabaseManagementCredentialdetails>;
    databaseId: pulumi.Input<string>;
    enableManagement: pulumi.Input<boolean>;
    managementType: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    privateEndPointId: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    sslSecretId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseCloudDatabaseManagementTimeouts>;
}
