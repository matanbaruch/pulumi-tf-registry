// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabasePluggableDatabasesLocalClone extends pulumi.CustomResource {
    /**
     * Get an existing DatabasePluggableDatabasesLocalClone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabasePluggableDatabasesLocalCloneState, opts?: pulumi.CustomResourceOptions): DatabasePluggableDatabasesLocalClone {
        return new DatabasePluggableDatabasesLocalClone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databasePluggableDatabasesLocalClone:DatabasePluggableDatabasesLocalClone';

    /**
     * Returns true if the given object is an instance of DatabasePluggableDatabasesLocalClone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabasePluggableDatabasesLocalClone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabasePluggableDatabasesLocalClone.__pulumiType;
    }

    public readonly clonedPdbName!: pulumi.Output<string>;
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly connectionStrings!: pulumi.Output<outputs.DatabasePluggableDatabasesLocalCloneConnectionString[]>;
    public /*out*/ readonly containerDatabaseId!: pulumi.Output<string>;
    public /*out*/ readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly isRestricted!: pulumi.Output<boolean>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly openMode!: pulumi.Output<string>;
    public readonly pdbAdminPassword!: pulumi.Output<string>;
    public /*out*/ readonly pdbName!: pulumi.Output<string>;
    public /*out*/ readonly pdbNodeLevelDetails!: pulumi.Output<outputs.DatabasePluggableDatabasesLocalClonePdbNodeLevelDetail[]>;
    public readonly pluggableDatabaseId!: pulumi.Output<string>;
    public /*out*/ readonly pluggableDatabaseManagementConfigs!: pulumi.Output<outputs.DatabasePluggableDatabasesLocalClonePluggableDatabaseManagementConfig[]>;
    public /*out*/ readonly refreshableCloneConfigs!: pulumi.Output<outputs.DatabasePluggableDatabasesLocalCloneRefreshableCloneConfig[]>;
    public readonly shouldPdbAdminAccountBeLocked!: pulumi.Output<boolean>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly targetTdeWalletPassword!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabasePluggableDatabasesLocalCloneTimeouts | undefined>;

    /**
     * Create a DatabasePluggableDatabasesLocalClone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabasePluggableDatabasesLocalCloneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabasePluggableDatabasesLocalCloneArgs | DatabasePluggableDatabasesLocalCloneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabasePluggableDatabasesLocalCloneState | undefined;
            resourceInputs["clonedPdbName"] = state ? state.clonedPdbName : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["connectionStrings"] = state ? state.connectionStrings : undefined;
            resourceInputs["containerDatabaseId"] = state ? state.containerDatabaseId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isRestricted"] = state ? state.isRestricted : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["openMode"] = state ? state.openMode : undefined;
            resourceInputs["pdbAdminPassword"] = state ? state.pdbAdminPassword : undefined;
            resourceInputs["pdbName"] = state ? state.pdbName : undefined;
            resourceInputs["pdbNodeLevelDetails"] = state ? state.pdbNodeLevelDetails : undefined;
            resourceInputs["pluggableDatabaseId"] = state ? state.pluggableDatabaseId : undefined;
            resourceInputs["pluggableDatabaseManagementConfigs"] = state ? state.pluggableDatabaseManagementConfigs : undefined;
            resourceInputs["refreshableCloneConfigs"] = state ? state.refreshableCloneConfigs : undefined;
            resourceInputs["shouldPdbAdminAccountBeLocked"] = state ? state.shouldPdbAdminAccountBeLocked : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targetTdeWalletPassword"] = state ? state.targetTdeWalletPassword : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabasePluggableDatabasesLocalCloneArgs | undefined;
            if ((!args || args.clonedPdbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clonedPdbName'");
            }
            if ((!args || args.pluggableDatabaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pluggableDatabaseId'");
            }
            resourceInputs["clonedPdbName"] = args ? args.clonedPdbName : undefined;
            resourceInputs["pdbAdminPassword"] = args?.pdbAdminPassword ? pulumi.secret(args.pdbAdminPassword) : undefined;
            resourceInputs["pluggableDatabaseId"] = args ? args.pluggableDatabaseId : undefined;
            resourceInputs["shouldPdbAdminAccountBeLocked"] = args ? args.shouldPdbAdminAccountBeLocked : undefined;
            resourceInputs["targetTdeWalletPassword"] = args?.targetTdeWalletPassword ? pulumi.secret(args.targetTdeWalletPassword) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["connectionStrings"] = undefined /*out*/;
            resourceInputs["containerDatabaseId"] = undefined /*out*/;
            resourceInputs["definedTags"] = undefined /*out*/;
            resourceInputs["freeformTags"] = undefined /*out*/;
            resourceInputs["isRestricted"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["openMode"] = undefined /*out*/;
            resourceInputs["pdbName"] = undefined /*out*/;
            resourceInputs["pdbNodeLevelDetails"] = undefined /*out*/;
            resourceInputs["pluggableDatabaseManagementConfigs"] = undefined /*out*/;
            resourceInputs["refreshableCloneConfigs"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["pdbAdminPassword", "targetTdeWalletPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabasePluggableDatabasesLocalClone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabasePluggableDatabasesLocalClone resources.
 */
export interface DatabasePluggableDatabasesLocalCloneState {
    clonedPdbName?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.DatabasePluggableDatabasesLocalCloneConnectionString>[]>;
    containerDatabaseId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isRestricted?: pulumi.Input<boolean>;
    lifecycleDetails?: pulumi.Input<string>;
    openMode?: pulumi.Input<string>;
    pdbAdminPassword?: pulumi.Input<string>;
    pdbName?: pulumi.Input<string>;
    pdbNodeLevelDetails?: pulumi.Input<pulumi.Input<inputs.DatabasePluggableDatabasesLocalClonePdbNodeLevelDetail>[]>;
    pluggableDatabaseId?: pulumi.Input<string>;
    pluggableDatabaseManagementConfigs?: pulumi.Input<pulumi.Input<inputs.DatabasePluggableDatabasesLocalClonePluggableDatabaseManagementConfig>[]>;
    refreshableCloneConfigs?: pulumi.Input<pulumi.Input<inputs.DatabasePluggableDatabasesLocalCloneRefreshableCloneConfig>[]>;
    shouldPdbAdminAccountBeLocked?: pulumi.Input<boolean>;
    state?: pulumi.Input<string>;
    targetTdeWalletPassword?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabasePluggableDatabasesLocalCloneTimeouts>;
}

/**
 * The set of arguments for constructing a DatabasePluggableDatabasesLocalClone resource.
 */
export interface DatabasePluggableDatabasesLocalCloneArgs {
    clonedPdbName: pulumi.Input<string>;
    pdbAdminPassword?: pulumi.Input<string>;
    pluggableDatabaseId: pulumi.Input<string>;
    shouldPdbAdminAccountBeLocked?: pulumi.Input<boolean>;
    targetTdeWalletPassword?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabasePluggableDatabasesLocalCloneTimeouts>;
}
