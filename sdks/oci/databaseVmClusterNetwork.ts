// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseVmClusterNetwork extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseVmClusterNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseVmClusterNetworkState, opts?: pulumi.CustomResourceOptions): DatabaseVmClusterNetwork {
        return new DatabaseVmClusterNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseVmClusterNetwork:DatabaseVmClusterNetwork';

    /**
     * Returns true if the given object is an instance of DatabaseVmClusterNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseVmClusterNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseVmClusterNetwork.__pulumiType;
    }

    public readonly action!: pulumi.Output<string | undefined>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly dns!: pulumi.Output<string[]>;
    public readonly drScans!: pulumi.Output<outputs.DatabaseVmClusterNetworkDrScan[] | undefined>;
    public readonly exadataInfrastructureId!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly ntps!: pulumi.Output<string[]>;
    public readonly scans!: pulumi.Output<outputs.DatabaseVmClusterNetworkScan[]>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseVmClusterNetworkTimeouts | undefined>;
    public readonly validateVmClusterNetwork!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly vmClusterId!: pulumi.Output<string>;
    public readonly vmNetworks!: pulumi.Output<outputs.DatabaseVmClusterNetworkVmNetwork[]>;

    /**
     * Create a DatabaseVmClusterNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseVmClusterNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseVmClusterNetworkArgs | DatabaseVmClusterNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseVmClusterNetworkState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["drScans"] = state ? state.drScans : undefined;
            resourceInputs["exadataInfrastructureId"] = state ? state.exadataInfrastructureId : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["ntps"] = state ? state.ntps : undefined;
            resourceInputs["scans"] = state ? state.scans : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["validateVmClusterNetwork"] = state ? state.validateVmClusterNetwork : undefined;
            resourceInputs["vmClusterId"] = state ? state.vmClusterId : undefined;
            resourceInputs["vmNetworks"] = state ? state.vmNetworks : undefined;
        } else {
            const args = argsOrState as DatabaseVmClusterNetworkArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.exadataInfrastructureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exadataInfrastructureId'");
            }
            if ((!args || args.scans === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scans'");
            }
            if ((!args || args.vmNetworks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmNetworks'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["drScans"] = args ? args.drScans : undefined;
            resourceInputs["exadataInfrastructureId"] = args ? args.exadataInfrastructureId : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["ntps"] = args ? args.ntps : undefined;
            resourceInputs["scans"] = args ? args.scans : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["validateVmClusterNetwork"] = args ? args.validateVmClusterNetwork : undefined;
            resourceInputs["vmNetworks"] = args ? args.vmNetworks : undefined;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["vmClusterId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseVmClusterNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseVmClusterNetwork resources.
 */
export interface DatabaseVmClusterNetworkState {
    action?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    dns?: pulumi.Input<pulumi.Input<string>[]>;
    drScans?: pulumi.Input<pulumi.Input<inputs.DatabaseVmClusterNetworkDrScan>[]>;
    exadataInfrastructureId?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lifecycleDetails?: pulumi.Input<string>;
    ntps?: pulumi.Input<pulumi.Input<string>[]>;
    scans?: pulumi.Input<pulumi.Input<inputs.DatabaseVmClusterNetworkScan>[]>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseVmClusterNetworkTimeouts>;
    validateVmClusterNetwork?: pulumi.Input<boolean>;
    vmClusterId?: pulumi.Input<string>;
    vmNetworks?: pulumi.Input<pulumi.Input<inputs.DatabaseVmClusterNetworkVmNetwork>[]>;
}

/**
 * The set of arguments for constructing a DatabaseVmClusterNetwork resource.
 */
export interface DatabaseVmClusterNetworkArgs {
    action?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    dns?: pulumi.Input<pulumi.Input<string>[]>;
    drScans?: pulumi.Input<pulumi.Input<inputs.DatabaseVmClusterNetworkDrScan>[]>;
    exadataInfrastructureId: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ntps?: pulumi.Input<pulumi.Input<string>[]>;
    scans: pulumi.Input<pulumi.Input<inputs.DatabaseVmClusterNetworkScan>[]>;
    timeouts?: pulumi.Input<inputs.DatabaseVmClusterNetworkTimeouts>;
    validateVmClusterNetwork?: pulumi.Input<boolean>;
    vmNetworks: pulumi.Input<pulumi.Input<inputs.DatabaseVmClusterNetworkVmNetwork>[]>;
}
