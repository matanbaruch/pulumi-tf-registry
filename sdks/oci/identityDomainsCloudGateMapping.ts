// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdentityDomainsCloudGateMapping extends pulumi.CustomResource {
    /**
     * Get an existing IdentityDomainsCloudGateMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityDomainsCloudGateMappingState, opts?: pulumi.CustomResourceOptions): IdentityDomainsCloudGateMapping {
        return new IdentityDomainsCloudGateMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/identityDomainsCloudGateMapping:IdentityDomainsCloudGateMapping';

    /**
     * Returns true if the given object is an instance of IdentityDomainsCloudGateMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityDomainsCloudGateMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityDomainsCloudGateMapping.__pulumiType;
    }

    public readonly attributeSets!: pulumi.Output<string[] | undefined>;
    public readonly attributes!: pulumi.Output<string | undefined>;
    public readonly authorization!: pulumi.Output<string | undefined>;
    public readonly cloudGate!: pulumi.Output<outputs.IdentityDomainsCloudGateMappingCloudGate>;
    public /*out*/ readonly compartmentOcid!: pulumi.Output<string>;
    public /*out*/ readonly deleteInProgress!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly domainOcid!: pulumi.Output<string>;
    public readonly gatewayApp!: pulumi.Output<outputs.IdentityDomainsCloudGateMappingGatewayApp>;
    public /*out*/ readonly idcsCreatedBies!: pulumi.Output<outputs.IdentityDomainsCloudGateMappingIdcsCreatedBy[]>;
    public readonly idcsEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly idcsLastModifiedBies!: pulumi.Output<outputs.IdentityDomainsCloudGateMappingIdcsLastModifiedBy[]>;
    public /*out*/ readonly idcsLastUpgradedInRelease!: pulumi.Output<string>;
    public /*out*/ readonly idcsPreventedOperations!: pulumi.Output<string[]>;
    public /*out*/ readonly isOpcService!: pulumi.Output<boolean>;
    public /*out*/ readonly metas!: pulumi.Output<outputs.IdentityDomainsCloudGateMappingMeta[]>;
    public readonly nginxSettings!: pulumi.Output<string>;
    public readonly ocid!: pulumi.Output<string>;
    public readonly policyName!: pulumi.Output<string>;
    public readonly proxyPass!: pulumi.Output<string>;
    public readonly resourcePrefix!: pulumi.Output<string>;
    public readonly resourceTypeSchemaVersion!: pulumi.Output<string | undefined>;
    public readonly schemas!: pulumi.Output<string[]>;
    public readonly server!: pulumi.Output<outputs.IdentityDomainsCloudGateMappingServer>;
    public readonly tags!: pulumi.Output<outputs.IdentityDomainsCloudGateMappingTag[] | undefined>;
    public /*out*/ readonly tenancyOcid!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.IdentityDomainsCloudGateMappingTimeouts | undefined>;
    public readonly upstreamServerGroup!: pulumi.Output<outputs.IdentityDomainsCloudGateMappingUpstreamServerGroup | undefined>;

    /**
     * Create a IdentityDomainsCloudGateMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityDomainsCloudGateMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityDomainsCloudGateMappingArgs | IdentityDomainsCloudGateMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityDomainsCloudGateMappingState | undefined;
            resourceInputs["attributeSets"] = state ? state.attributeSets : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["cloudGate"] = state ? state.cloudGate : undefined;
            resourceInputs["compartmentOcid"] = state ? state.compartmentOcid : undefined;
            resourceInputs["deleteInProgress"] = state ? state.deleteInProgress : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainOcid"] = state ? state.domainOcid : undefined;
            resourceInputs["gatewayApp"] = state ? state.gatewayApp : undefined;
            resourceInputs["idcsCreatedBies"] = state ? state.idcsCreatedBies : undefined;
            resourceInputs["idcsEndpoint"] = state ? state.idcsEndpoint : undefined;
            resourceInputs["idcsLastModifiedBies"] = state ? state.idcsLastModifiedBies : undefined;
            resourceInputs["idcsLastUpgradedInRelease"] = state ? state.idcsLastUpgradedInRelease : undefined;
            resourceInputs["idcsPreventedOperations"] = state ? state.idcsPreventedOperations : undefined;
            resourceInputs["isOpcService"] = state ? state.isOpcService : undefined;
            resourceInputs["metas"] = state ? state.metas : undefined;
            resourceInputs["nginxSettings"] = state ? state.nginxSettings : undefined;
            resourceInputs["ocid"] = state ? state.ocid : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["proxyPass"] = state ? state.proxyPass : undefined;
            resourceInputs["resourcePrefix"] = state ? state.resourcePrefix : undefined;
            resourceInputs["resourceTypeSchemaVersion"] = state ? state.resourceTypeSchemaVersion : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenancyOcid"] = state ? state.tenancyOcid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["upstreamServerGroup"] = state ? state.upstreamServerGroup : undefined;
        } else {
            const args = argsOrState as IdentityDomainsCloudGateMappingArgs | undefined;
            if ((!args || args.cloudGate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudGate'");
            }
            if ((!args || args.gatewayApp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayApp'");
            }
            if ((!args || args.idcsEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idcsEndpoint'");
            }
            if ((!args || args.policyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            if ((!args || args.resourcePrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourcePrefix'");
            }
            if ((!args || args.schemas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemas'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            resourceInputs["attributeSets"] = args ? args.attributeSets : undefined;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["cloudGate"] = args ? args.cloudGate : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gatewayApp"] = args ? args.gatewayApp : undefined;
            resourceInputs["idcsEndpoint"] = args ? args.idcsEndpoint : undefined;
            resourceInputs["nginxSettings"] = args ? args.nginxSettings : undefined;
            resourceInputs["ocid"] = args ? args.ocid : undefined;
            resourceInputs["policyName"] = args ? args.policyName : undefined;
            resourceInputs["proxyPass"] = args ? args.proxyPass : undefined;
            resourceInputs["resourcePrefix"] = args ? args.resourcePrefix : undefined;
            resourceInputs["resourceTypeSchemaVersion"] = args ? args.resourceTypeSchemaVersion : undefined;
            resourceInputs["schemas"] = args ? args.schemas : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["upstreamServerGroup"] = args ? args.upstreamServerGroup : undefined;
            resourceInputs["compartmentOcid"] = undefined /*out*/;
            resourceInputs["deleteInProgress"] = undefined /*out*/;
            resourceInputs["domainOcid"] = undefined /*out*/;
            resourceInputs["idcsCreatedBies"] = undefined /*out*/;
            resourceInputs["idcsLastModifiedBies"] = undefined /*out*/;
            resourceInputs["idcsLastUpgradedInRelease"] = undefined /*out*/;
            resourceInputs["idcsPreventedOperations"] = undefined /*out*/;
            resourceInputs["isOpcService"] = undefined /*out*/;
            resourceInputs["metas"] = undefined /*out*/;
            resourceInputs["tenancyOcid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityDomainsCloudGateMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityDomainsCloudGateMapping resources.
 */
export interface IdentityDomainsCloudGateMappingState {
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    cloudGate?: pulumi.Input<inputs.IdentityDomainsCloudGateMappingCloudGate>;
    compartmentOcid?: pulumi.Input<string>;
    deleteInProgress?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    domainOcid?: pulumi.Input<string>;
    gatewayApp?: pulumi.Input<inputs.IdentityDomainsCloudGateMappingGatewayApp>;
    idcsCreatedBies?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsCloudGateMappingIdcsCreatedBy>[]>;
    idcsEndpoint?: pulumi.Input<string>;
    idcsLastModifiedBies?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsCloudGateMappingIdcsLastModifiedBy>[]>;
    idcsLastUpgradedInRelease?: pulumi.Input<string>;
    idcsPreventedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    isOpcService?: pulumi.Input<boolean>;
    metas?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsCloudGateMappingMeta>[]>;
    nginxSettings?: pulumi.Input<string>;
    ocid?: pulumi.Input<string>;
    policyName?: pulumi.Input<string>;
    proxyPass?: pulumi.Input<string>;
    resourcePrefix?: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    schemas?: pulumi.Input<pulumi.Input<string>[]>;
    server?: pulumi.Input<inputs.IdentityDomainsCloudGateMappingServer>;
    tags?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsCloudGateMappingTag>[]>;
    tenancyOcid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IdentityDomainsCloudGateMappingTimeouts>;
    upstreamServerGroup?: pulumi.Input<inputs.IdentityDomainsCloudGateMappingUpstreamServerGroup>;
}

/**
 * The set of arguments for constructing a IdentityDomainsCloudGateMapping resource.
 */
export interface IdentityDomainsCloudGateMappingArgs {
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    cloudGate: pulumi.Input<inputs.IdentityDomainsCloudGateMappingCloudGate>;
    description?: pulumi.Input<string>;
    gatewayApp: pulumi.Input<inputs.IdentityDomainsCloudGateMappingGatewayApp>;
    idcsEndpoint: pulumi.Input<string>;
    nginxSettings?: pulumi.Input<string>;
    ocid?: pulumi.Input<string>;
    policyName: pulumi.Input<string>;
    proxyPass?: pulumi.Input<string>;
    resourcePrefix: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    schemas: pulumi.Input<pulumi.Input<string>[]>;
    server: pulumi.Input<inputs.IdentityDomainsCloudGateMappingServer>;
    tags?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsCloudGateMappingTag>[]>;
    timeouts?: pulumi.Input<inputs.IdentityDomainsCloudGateMappingTimeouts>;
    upstreamServerGroup?: pulumi.Input<inputs.IdentityDomainsCloudGateMappingUpstreamServerGroup>;
}
