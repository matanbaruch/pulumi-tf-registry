// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOnesubscriptionSubscriptions(args: GetOnesubscriptionSubscriptionsArgs, opts?: pulumi.InvokeOptions): Promise<GetOnesubscriptionSubscriptionsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getOnesubscriptionSubscriptions:getOnesubscriptionSubscriptions", {
        "buyerEmail": args.buyerEmail,
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
        "isCommitInfoRequired": args.isCommitInfoRequired,
        "planNumber": args.planNumber,
        "subscriptionId": args.subscriptionId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOnesubscriptionSubscriptions.
 */
export interface GetOnesubscriptionSubscriptionsArgs {
    buyerEmail?: string;
    compartmentId: string;
    filters?: inputs.GetOnesubscriptionSubscriptionsFilter[];
    id?: string;
    isCommitInfoRequired?: boolean;
    planNumber?: string;
    subscriptionId?: string;
}

/**
 * A collection of values returned by getOnesubscriptionSubscriptions.
 */
export interface GetOnesubscriptionSubscriptionsResult {
    readonly buyerEmail?: string;
    readonly compartmentId: string;
    readonly filters?: outputs.GetOnesubscriptionSubscriptionsFilter[];
    readonly id: string;
    readonly isCommitInfoRequired?: boolean;
    readonly planNumber?: string;
    readonly subscriptionId?: string;
    readonly subscriptions: outputs.GetOnesubscriptionSubscriptionsSubscription[];
}
export function getOnesubscriptionSubscriptionsOutput(args: GetOnesubscriptionSubscriptionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOnesubscriptionSubscriptionsResult> {
    return pulumi.output(args).apply((a: any) => getOnesubscriptionSubscriptions(a, opts))
}

/**
 * A collection of arguments for invoking getOnesubscriptionSubscriptions.
 */
export interface GetOnesubscriptionSubscriptionsOutputArgs {
    buyerEmail?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetOnesubscriptionSubscriptionsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    isCommitInfoRequired?: pulumi.Input<boolean>;
    planNumber?: pulumi.Input<string>;
    subscriptionId?: pulumi.Input<string>;
}
