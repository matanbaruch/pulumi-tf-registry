// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOcvpCluster(args: GetOcvpClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetOcvpClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getOcvpCluster:getOcvpCluster", {
        "clusterId": args.clusterId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOcvpCluster.
 */
export interface GetOcvpClusterArgs {
    clusterId: string;
}

/**
 * A collection of values returned by getOcvpCluster.
 */
export interface GetOcvpClusterResult {
    readonly actualEsxiHostsCount: number;
    readonly capacityReservationId: string;
    readonly clusterId: string;
    readonly compartmentId: string;
    readonly computeAvailabilityDomain: string;
    readonly datastores: outputs.GetOcvpClusterDatastore[];
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly esxiHostsCount: number;
    readonly esxiSoftwareVersion: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly initialCommitment: string;
    readonly initialHostOcpuCount: number;
    readonly initialHostShapeName: string;
    readonly instanceDisplayNamePrefix: string;
    readonly isShieldedInstanceEnabled: boolean;
    readonly networkConfigurations: outputs.GetOcvpClusterNetworkConfiguration[];
    readonly sddcId: string;
    readonly state: string;
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly upgradeLicenses: outputs.GetOcvpClusterUpgradeLicense[];
    readonly vmwareSoftwareVersion: string;
    readonly vsphereType: string;
    readonly vsphereUpgradeObjects: outputs.GetOcvpClusterVsphereUpgradeObject[];
    readonly workloadNetworkCidr: string;
}
export function getOcvpClusterOutput(args: GetOcvpClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOcvpClusterResult> {
    return pulumi.output(args).apply((a: any) => getOcvpCluster(a, opts))
}

/**
 * A collection of arguments for invoking getOcvpCluster.
 */
export interface GetOcvpClusterOutputArgs {
    clusterId: pulumi.Input<string>;
}
