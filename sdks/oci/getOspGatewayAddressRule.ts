// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOspGatewayAddressRule(args: GetOspGatewayAddressRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetOspGatewayAddressRuleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getOspGatewayAddressRule:getOspGatewayAddressRule", {
        "compartmentId": args.compartmentId,
        "countryCode": args.countryCode,
        "id": args.id,
        "ospHomeRegion": args.ospHomeRegion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOspGatewayAddressRule.
 */
export interface GetOspGatewayAddressRuleArgs {
    compartmentId: string;
    countryCode: string;
    id?: string;
    ospHomeRegion: string;
}

/**
 * A collection of values returned by getOspGatewayAddressRule.
 */
export interface GetOspGatewayAddressRuleResult {
    readonly addresses: outputs.GetOspGatewayAddressRuleAddress[];
    readonly compartmentId: string;
    readonly contacts: outputs.GetOspGatewayAddressRuleContact[];
    readonly countryCode: string;
    readonly id: string;
    readonly ospHomeRegion: string;
    readonly taxes: outputs.GetOspGatewayAddressRuleTax[];
}
export function getOspGatewayAddressRuleOutput(args: GetOspGatewayAddressRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOspGatewayAddressRuleResult> {
    return pulumi.output(args).apply((a: any) => getOspGatewayAddressRule(a, opts))
}

/**
 * A collection of arguments for invoking getOspGatewayAddressRule.
 */
export interface GetOspGatewayAddressRuleOutputArgs {
    compartmentId: pulumi.Input<string>;
    countryCode: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ospHomeRegion: pulumi.Input<string>;
}
