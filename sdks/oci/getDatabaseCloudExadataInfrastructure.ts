// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseCloudExadataInfrastructure(args: GetDatabaseCloudExadataInfrastructureArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseCloudExadataInfrastructureResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseCloudExadataInfrastructure:getDatabaseCloudExadataInfrastructure", {
        "cloudExadataInfrastructureId": args.cloudExadataInfrastructureId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseCloudExadataInfrastructure.
 */
export interface GetDatabaseCloudExadataInfrastructureArgs {
    cloudExadataInfrastructureId: string;
}

/**
 * A collection of values returned by getDatabaseCloudExadataInfrastructure.
 */
export interface GetDatabaseCloudExadataInfrastructureResult {
    readonly activatedStorageCount: number;
    readonly additionalStorageCount: number;
    readonly availabilityDomain: string;
    readonly availableStorageSizeInGbs: number;
    readonly cloudExadataInfrastructureId: string;
    readonly clusterPlacementGroupId: string;
    readonly compartmentId: string;
    readonly computeCount: number;
    readonly cpuCount: number;
    readonly customerContacts: outputs.GetDatabaseCloudExadataInfrastructureCustomerContact[];
    readonly dataStorageSizeInTbs: number;
    readonly dbNodeStorageSizeInGbs: number;
    readonly dbServerVersion: string;
    readonly definedFileSystemConfigurations: outputs.GetDatabaseCloudExadataInfrastructureDefinedFileSystemConfiguration[];
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly lastMaintenanceRunId: string;
    readonly lifecycleDetails: string;
    readonly maintenanceWindows: outputs.GetDatabaseCloudExadataInfrastructureMaintenanceWindow[];
    readonly maxCpuCount: number;
    readonly maxDataStorageInTbs: number;
    readonly maxDbNodeStorageInGbs: number;
    readonly maxMemoryInGbs: number;
    readonly memorySizeInGbs: number;
    readonly monthlyDbServerVersion: string;
    readonly monthlyStorageServerVersion: string;
    readonly nextMaintenanceRunId: string;
    readonly shape: string;
    readonly state: string;
    readonly storageCount: number;
    readonly storageServerVersion: string;
    readonly subscriptionId: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly totalStorageSizeInGbs: number;
}
export function getDatabaseCloudExadataInfrastructureOutput(args: GetDatabaseCloudExadataInfrastructureOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseCloudExadataInfrastructureResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseCloudExadataInfrastructure(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseCloudExadataInfrastructure.
 */
export interface GetDatabaseCloudExadataInfrastructureOutputArgs {
    cloudExadataInfrastructureId: pulumi.Input<string>;
}
