// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOcvpSddc(args: GetOcvpSddcArgs, opts?: pulumi.InvokeOptions): Promise<GetOcvpSddcResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getOcvpSddc:getOcvpSddc", {
        "sddcId": args.sddcId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOcvpSddc.
 */
export interface GetOcvpSddcArgs {
    sddcId: string;
}

/**
 * A collection of values returned by getOcvpSddc.
 */
export interface GetOcvpSddcResult {
    /**
     * @deprecated Deprecated
     */
    readonly actualEsxiHostsCount: number;
    /**
     * @deprecated Deprecated
     */
    readonly capacityReservationId: string;
    readonly clustersCount: number;
    readonly compartmentId: string;
    /**
     * @deprecated Deprecated
     */
    readonly computeAvailabilityDomain: string;
    /**
     * @deprecated Deprecated
     */
    readonly datastores: outputs.GetOcvpSddcDatastore[];
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    /**
     * @deprecated Deprecated
     */
    readonly esxiHostsCount: number;
    readonly esxiSoftwareVersion: string;
    readonly freeformTags: {[key: string]: string};
    readonly hcxAction: string;
    readonly hcxFqdn: string;
    /**
     * @deprecated Deprecated
     */
    readonly hcxInitialPassword: string;
    readonly hcxMode: string;
    /**
     * @deprecated Deprecated
     */
    readonly hcxOnPremKey: string;
    readonly hcxOnPremLicenses: outputs.GetOcvpSddcHcxOnPremLicense[];
    readonly hcxPrivateIpId: string;
    /**
     * @deprecated Deprecated
     */
    readonly hcxVlanId: string;
    readonly id: string;
    readonly initialConfigurations: outputs.GetOcvpSddcInitialConfiguration[];
    /**
     * @deprecated Deprecated
     */
    readonly initialHostOcpuCount: number;
    /**
     * @deprecated Deprecated
     */
    readonly initialHostShapeName: string;
    /**
     * @deprecated Deprecated
     */
    readonly initialSku: string;
    /**
     * @deprecated Deprecated
     */
    readonly instanceDisplayNamePrefix: string;
    readonly isHcxEnabled: boolean;
    /**
     * @deprecated Deprecated
     */
    readonly isHcxEnterpriseEnabled: boolean;
    readonly isHcxPendingDowngrade: boolean;
    /**
     * @deprecated Deprecated
     */
    readonly isShieldedInstanceEnabled: boolean;
    readonly isSingleHostSddc: boolean;
    /**
     * @deprecated Deprecated
     */
    readonly nsxEdgeUplink1vlanId: string;
    /**
     * @deprecated Deprecated
     */
    readonly nsxEdgeUplink2vlanId: string;
    readonly nsxEdgeUplinkIpId: string;
    /**
     * @deprecated Deprecated
     */
    readonly nsxEdgeVtepVlanId: string;
    readonly nsxManagerFqdn: string;
    /**
     * @deprecated Deprecated
     */
    readonly nsxManagerInitialPassword: string;
    readonly nsxManagerPrivateIpId: string;
    readonly nsxManagerUsername: string;
    /**
     * @deprecated Deprecated
     */
    readonly nsxOverlaySegmentName: string;
    /**
     * @deprecated Deprecated
     */
    readonly nsxVtepVlanId: string;
    /**
     * @deprecated Deprecated
     */
    readonly provisioningSubnetId: string;
    /**
     * @deprecated Deprecated
     */
    readonly provisioningVlanId: string;
    readonly refreshHcxLicenseStatus: boolean;
    /**
     * @deprecated Deprecated
     */
    readonly replicationVlanId: string;
    readonly reservingHcxOnPremiseLicenseKeys: string[];
    readonly sddcId: string;
    readonly sshAuthorizedKeys: string;
    readonly state: string;
    readonly timeCreated: string;
    readonly timeHcxBillingCycleEnd: string;
    readonly timeHcxLicenseStatusUpdated: string;
    readonly timeUpdated: string;
    /**
     * @deprecated Deprecated
     */
    readonly upgradeLicenses: outputs.GetOcvpSddcUpgradeLicense[];
    readonly vcenterFqdn: string;
    /**
     * @deprecated Deprecated
     */
    readonly vcenterInitialPassword: string;
    readonly vcenterPrivateIpId: string;
    readonly vcenterUsername: string;
    /**
     * @deprecated Deprecated
     */
    readonly vmotionVlanId: string;
    readonly vmwareSoftwareVersion: string;
    /**
     * @deprecated Deprecated
     */
    readonly vsanVlanId: string;
    /**
     * @deprecated Deprecated
     */
    readonly vsphereUpgradeGuide: string;
    /**
     * @deprecated Deprecated
     */
    readonly vsphereUpgradeObjects: outputs.GetOcvpSddcVsphereUpgradeObject[];
    /**
     * @deprecated Deprecated
     */
    readonly vsphereVlanId: string;
    /**
     * @deprecated Deprecated
     */
    readonly workloadNetworkCidr: string;
}
export function getOcvpSddcOutput(args: GetOcvpSddcOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOcvpSddcResult> {
    return pulumi.output(args).apply((a: any) => getOcvpSddc(a, opts))
}

/**
 * A collection of arguments for invoking getOcvpSddc.
 */
export interface GetOcvpSddcOutputArgs {
    sddcId: pulumi.Input<string>;
}
