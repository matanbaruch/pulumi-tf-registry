// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOnesubscriptionComputedUsage(args: GetOnesubscriptionComputedUsageArgs, opts?: pulumi.InvokeOptions): Promise<GetOnesubscriptionComputedUsageResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getOnesubscriptionComputedUsage:getOnesubscriptionComputedUsage", {
        "compartmentId": args.compartmentId,
        "computedUsageId": args.computedUsageId,
        "fields": args.fields,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOnesubscriptionComputedUsage.
 */
export interface GetOnesubscriptionComputedUsageArgs {
    compartmentId: string;
    computedUsageId: string;
    fields?: string[];
    id?: string;
}

/**
 * A collection of values returned by getOnesubscriptionComputedUsage.
 */
export interface GetOnesubscriptionComputedUsageResult {
    readonly commitmentServiceId: string;
    readonly compartmentId: string;
    readonly computeSource: string;
    readonly computedUsageId: string;
    readonly cost: string;
    readonly costRounded: string;
    readonly currencyCode: string;
    readonly dataCenter: string;
    readonly fields?: string[];
    readonly id: string;
    readonly isInvoiced: boolean;
    readonly mqsMessageId: string;
    readonly netUnitPrice: string;
    readonly originalUsageNumber: string;
    readonly parentProducts: outputs.GetOnesubscriptionComputedUsageParentProduct[];
    readonly parentSubscribedServiceId: string;
    readonly planNumber: string;
    readonly products: outputs.GetOnesubscriptionComputedUsageProduct[];
    readonly quantity: string;
    readonly rateCardId: string;
    readonly rateCardTierdId: string;
    readonly timeCreated: string;
    readonly timeMeteredOn: string;
    readonly timeOfArrival: string;
    readonly timeUpdated: string;
    readonly type: string;
    readonly unitOfMeasure: string;
    readonly usageNumber: string;
}
export function getOnesubscriptionComputedUsageOutput(args: GetOnesubscriptionComputedUsageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOnesubscriptionComputedUsageResult> {
    return pulumi.output(args).apply((a: any) => getOnesubscriptionComputedUsage(a, opts))
}

/**
 * A collection of arguments for invoking getOnesubscriptionComputedUsage.
 */
export interface GetOnesubscriptionComputedUsageOutputArgs {
    compartmentId: pulumi.Input<string>;
    computedUsageId: pulumi.Input<string>;
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<string>;
}
