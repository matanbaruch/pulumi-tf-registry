// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStackMonitoringMonitoredResourceTypes(args: GetStackMonitoringMonitoredResourceTypesArgs, opts?: pulumi.InvokeOptions): Promise<GetStackMonitoringMonitoredResourceTypesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getStackMonitoringMonitoredResourceTypes:getStackMonitoringMonitoredResourceTypes", {
        "compartmentId": args.compartmentId,
        "excludeFields": args.excludeFields,
        "fields": args.fields,
        "filters": args.filters,
        "id": args.id,
        "isExcludeSystemTypes": args.isExcludeSystemTypes,
        "metricNamespace": args.metricNamespace,
        "name": args.name,
        "status": args.status,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStackMonitoringMonitoredResourceTypes.
 */
export interface GetStackMonitoringMonitoredResourceTypesArgs {
    compartmentId: string;
    excludeFields?: string[];
    fields?: string[];
    filters?: inputs.GetStackMonitoringMonitoredResourceTypesFilter[];
    id?: string;
    isExcludeSystemTypes?: boolean;
    metricNamespace?: string;
    name?: string;
    status?: string;
}

/**
 * A collection of values returned by getStackMonitoringMonitoredResourceTypes.
 */
export interface GetStackMonitoringMonitoredResourceTypesResult {
    readonly compartmentId: string;
    readonly excludeFields?: string[];
    readonly fields?: string[];
    readonly filters?: outputs.GetStackMonitoringMonitoredResourceTypesFilter[];
    readonly id: string;
    readonly isExcludeSystemTypes?: boolean;
    readonly metricNamespace?: string;
    readonly monitoredResourceTypesCollections: outputs.GetStackMonitoringMonitoredResourceTypesMonitoredResourceTypesCollection[];
    readonly name?: string;
    readonly status?: string;
}
export function getStackMonitoringMonitoredResourceTypesOutput(args: GetStackMonitoringMonitoredResourceTypesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStackMonitoringMonitoredResourceTypesResult> {
    return pulumi.output(args).apply((a: any) => getStackMonitoringMonitoredResourceTypes(a, opts))
}

/**
 * A collection of arguments for invoking getStackMonitoringMonitoredResourceTypes.
 */
export interface GetStackMonitoringMonitoredResourceTypesOutputArgs {
    compartmentId: pulumi.Input<string>;
    excludeFields?: pulumi.Input<pulumi.Input<string>[]>;
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetStackMonitoringMonitoredResourceTypesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    isExcludeSystemTypes?: pulumi.Input<boolean>;
    metricNamespace?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
