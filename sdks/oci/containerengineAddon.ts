// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerengineAddon extends pulumi.CustomResource {
    /**
     * Get an existing ContainerengineAddon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerengineAddonState, opts?: pulumi.CustomResourceOptions): ContainerengineAddon {
        return new ContainerengineAddon(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/containerengineAddon:ContainerengineAddon';

    /**
     * Returns true if the given object is an instance of ContainerengineAddon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerengineAddon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerengineAddon.__pulumiType;
    }

    public /*out*/ readonly addonErrors!: pulumi.Output<outputs.ContainerengineAddonAddonError[]>;
    public readonly addonName!: pulumi.Output<string>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly configurations!: pulumi.Output<outputs.ContainerengineAddonConfiguration[] | undefined>;
    public /*out*/ readonly currentInstalledVersion!: pulumi.Output<string>;
    public readonly removeAddonResourcesOnDelete!: pulumi.Output<boolean>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerengineAddonTimeouts | undefined>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a ContainerengineAddon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerengineAddonArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerengineAddonArgs | ContainerengineAddonState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerengineAddonState | undefined;
            resourceInputs["addonErrors"] = state ? state.addonErrors : undefined;
            resourceInputs["addonName"] = state ? state.addonName : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["currentInstalledVersion"] = state ? state.currentInstalledVersion : undefined;
            resourceInputs["removeAddonResourcesOnDelete"] = state ? state.removeAddonResourcesOnDelete : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ContainerengineAddonArgs | undefined;
            if ((!args || args.addonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addonName'");
            }
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.removeAddonResourcesOnDelete === undefined) && !opts.urn) {
                throw new Error("Missing required property 'removeAddonResourcesOnDelete'");
            }
            resourceInputs["addonName"] = args ? args.addonName : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["removeAddonResourcesOnDelete"] = args ? args.removeAddonResourcesOnDelete : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["addonErrors"] = undefined /*out*/;
            resourceInputs["currentInstalledVersion"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerengineAddon.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerengineAddon resources.
 */
export interface ContainerengineAddonState {
    addonErrors?: pulumi.Input<pulumi.Input<inputs.ContainerengineAddonAddonError>[]>;
    addonName?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    configurations?: pulumi.Input<pulumi.Input<inputs.ContainerengineAddonConfiguration>[]>;
    currentInstalledVersion?: pulumi.Input<string>;
    removeAddonResourcesOnDelete?: pulumi.Input<boolean>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerengineAddonTimeouts>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerengineAddon resource.
 */
export interface ContainerengineAddonArgs {
    addonName: pulumi.Input<string>;
    clusterId: pulumi.Input<string>;
    configurations?: pulumi.Input<pulumi.Input<inputs.ContainerengineAddonConfiguration>[]>;
    removeAddonResourcesOnDelete: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.ContainerengineAddonTimeouts>;
    version?: pulumi.Input<string>;
}
