// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudGuardProblemEntities(args: GetCloudGuardProblemEntitiesArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudGuardProblemEntitiesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCloudGuardProblemEntities:getCloudGuardProblemEntities", {
        "filters": args.filters,
        "id": args.id,
        "problemId": args.problemId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudGuardProblemEntities.
 */
export interface GetCloudGuardProblemEntitiesArgs {
    filters?: inputs.GetCloudGuardProblemEntitiesFilter[];
    id?: string;
    problemId: string;
}

/**
 * A collection of values returned by getCloudGuardProblemEntities.
 */
export interface GetCloudGuardProblemEntitiesResult {
    readonly filters?: outputs.GetCloudGuardProblemEntitiesFilter[];
    readonly id: string;
    readonly problemEntityCollections: outputs.GetCloudGuardProblemEntitiesProblemEntityCollection[];
    readonly problemId: string;
}
export function getCloudGuardProblemEntitiesOutput(args: GetCloudGuardProblemEntitiesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudGuardProblemEntitiesResult> {
    return pulumi.output(args).apply((a: any) => getCloudGuardProblemEntities(a, opts))
}

/**
 * A collection of arguments for invoking getCloudGuardProblemEntities.
 */
export interface GetCloudGuardProblemEntitiesOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetCloudGuardProblemEntitiesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    problemId: pulumi.Input<string>;
}
