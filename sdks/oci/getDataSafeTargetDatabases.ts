// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDataSafeTargetDatabases(args: GetDataSafeTargetDatabasesArgs, opts?: pulumi.InvokeOptions): Promise<GetDataSafeTargetDatabasesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDataSafeTargetDatabases:getDataSafeTargetDatabases", {
        "accessLevel": args.accessLevel,
        "associatedResourceId": args.associatedResourceId,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "databaseType": args.databaseType,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "infrastructureType": args.infrastructureType,
        "state": args.state,
        "targetDatabaseId": args.targetDatabaseId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDataSafeTargetDatabases.
 */
export interface GetDataSafeTargetDatabasesArgs {
    accessLevel?: string;
    associatedResourceId?: string;
    compartmentId: string;
    compartmentIdInSubtree?: boolean;
    databaseType?: string;
    displayName?: string;
    filters?: inputs.GetDataSafeTargetDatabasesFilter[];
    id?: string;
    infrastructureType?: string;
    state?: string;
    targetDatabaseId?: string;
}

/**
 * A collection of values returned by getDataSafeTargetDatabases.
 */
export interface GetDataSafeTargetDatabasesResult {
    readonly accessLevel?: string;
    readonly associatedResourceId?: string;
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly databaseType?: string;
    readonly displayName?: string;
    readonly filters?: outputs.GetDataSafeTargetDatabasesFilter[];
    readonly id: string;
    readonly infrastructureType?: string;
    readonly state?: string;
    readonly targetDatabaseId?: string;
    readonly targetDatabases: outputs.GetDataSafeTargetDatabasesTargetDatabase[];
}
export function getDataSafeTargetDatabasesOutput(args: GetDataSafeTargetDatabasesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataSafeTargetDatabasesResult> {
    return pulumi.output(args).apply((a: any) => getDataSafeTargetDatabases(a, opts))
}

/**
 * A collection of arguments for invoking getDataSafeTargetDatabases.
 */
export interface GetDataSafeTargetDatabasesOutputArgs {
    accessLevel?: pulumi.Input<string>;
    associatedResourceId?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    databaseType?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetDataSafeTargetDatabasesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    infrastructureType?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    targetDatabaseId?: pulumi.Input<string>;
}
