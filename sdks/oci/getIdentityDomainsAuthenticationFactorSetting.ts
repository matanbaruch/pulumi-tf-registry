// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsAuthenticationFactorSetting(args: GetIdentityDomainsAuthenticationFactorSettingArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsAuthenticationFactorSettingResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsAuthenticationFactorSetting:getIdentityDomainsAuthenticationFactorSetting", {
        "attributeSets": args.attributeSets,
        "attributes": args.attributes,
        "authenticationFactorSettingId": args.authenticationFactorSettingId,
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsAuthenticationFactorSetting.
 */
export interface GetIdentityDomainsAuthenticationFactorSettingArgs {
    attributeSets?: string[];
    attributes?: string;
    authenticationFactorSettingId?: string;
    authorization?: string;
    idcsEndpoint: string;
    resourceTypeSchemaVersion?: string;
}

/**
 * A collection of values returned by getIdentityDomainsAuthenticationFactorSetting.
 */
export interface GetIdentityDomainsAuthenticationFactorSettingResult {
    readonly attributeSets?: string[];
    readonly attributes?: string;
    readonly authenticationFactorSettingId?: string;
    readonly authorization?: string;
    readonly autoEnrollEmailFactorDisabled: boolean;
    readonly bypassCodeEnabled: boolean;
    readonly bypassCodeSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingBypassCodeSetting[];
    readonly clientAppSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingClientAppSetting[];
    readonly compartmentOcid: string;
    readonly compliancePolicies: outputs.GetIdentityDomainsAuthenticationFactorSettingCompliancePolicy[];
    readonly deleteInProgress: boolean;
    readonly domainOcid: string;
    readonly emailEnabled: boolean;
    readonly emailSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingEmailSetting[];
    readonly endpointRestrictions: outputs.GetIdentityDomainsAuthenticationFactorSettingEndpointRestriction[];
    readonly fidoAuthenticatorEnabled: boolean;
    readonly hideBackupFactorEnabled: boolean;
    readonly id: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsAuthenticationFactorSettingIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsAuthenticationFactorSettingIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly identityStoreSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingIdentityStoreSetting[];
    readonly metas: outputs.GetIdentityDomainsAuthenticationFactorSettingMeta[];
    readonly mfaEnabledCategory: string;
    readonly mfaEnrollmentType: string;
    readonly notificationSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingNotificationSetting[];
    readonly ocid: string;
    readonly phoneCallEnabled: boolean;
    readonly pushEnabled: boolean;
    readonly resourceTypeSchemaVersion?: string;
    readonly schemas: string[];
    readonly securityQuestionsEnabled: boolean;
    readonly smsEnabled: boolean;
    readonly tags: outputs.GetIdentityDomainsAuthenticationFactorSettingTag[];
    readonly tenancyOcid: string;
    readonly thirdPartyFactors: outputs.GetIdentityDomainsAuthenticationFactorSettingThirdPartyFactor[];
    readonly totpEnabled: boolean;
    readonly totpSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingTotpSetting[];
    readonly urnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSetting[];
    readonly urnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSetting[];
    readonly userEnrollmentDisabledFactors: string[];
    readonly yubicoOtpEnabled: boolean;
}
export function getIdentityDomainsAuthenticationFactorSettingOutput(args: GetIdentityDomainsAuthenticationFactorSettingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsAuthenticationFactorSettingResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsAuthenticationFactorSetting(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsAuthenticationFactorSetting.
 */
export interface GetIdentityDomainsAuthenticationFactorSettingOutputArgs {
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authenticationFactorSettingId?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
}
