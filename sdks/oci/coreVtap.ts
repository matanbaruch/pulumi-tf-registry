// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CoreVtap extends pulumi.CustomResource {
    /**
     * Get an existing CoreVtap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CoreVtapState, opts?: pulumi.CustomResourceOptions): CoreVtap {
        return new CoreVtap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/coreVtap:CoreVtap';

    /**
     * Returns true if the given object is an instance of CoreVtap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CoreVtap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CoreVtap.__pulumiType;
    }

    public readonly captureFilterId!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly encapsulationProtocol!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly isVtapEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly lifecycleStateDetails!: pulumi.Output<string>;
    public readonly maxPacketSize!: pulumi.Output<number>;
    public readonly sourceId!: pulumi.Output<string>;
    public readonly sourcePrivateEndpointIp!: pulumi.Output<string>;
    public readonly sourcePrivateEndpointSubnetId!: pulumi.Output<string>;
    public readonly sourceType!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly targetId!: pulumi.Output<string>;
    public readonly targetIp!: pulumi.Output<string>;
    public readonly targetType!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CoreVtapTimeouts | undefined>;
    public readonly trafficMode!: pulumi.Output<string>;
    public readonly vcnId!: pulumi.Output<string>;
    public readonly vxlanNetworkIdentifier!: pulumi.Output<string>;

    /**
     * Create a CoreVtap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CoreVtapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CoreVtapArgs | CoreVtapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CoreVtapState | undefined;
            resourceInputs["captureFilterId"] = state ? state.captureFilterId : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["encapsulationProtocol"] = state ? state.encapsulationProtocol : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isVtapEnabled"] = state ? state.isVtapEnabled : undefined;
            resourceInputs["lifecycleStateDetails"] = state ? state.lifecycleStateDetails : undefined;
            resourceInputs["maxPacketSize"] = state ? state.maxPacketSize : undefined;
            resourceInputs["sourceId"] = state ? state.sourceId : undefined;
            resourceInputs["sourcePrivateEndpointIp"] = state ? state.sourcePrivateEndpointIp : undefined;
            resourceInputs["sourcePrivateEndpointSubnetId"] = state ? state.sourcePrivateEndpointSubnetId : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
            resourceInputs["targetIp"] = state ? state.targetIp : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trafficMode"] = state ? state.trafficMode : undefined;
            resourceInputs["vcnId"] = state ? state.vcnId : undefined;
            resourceInputs["vxlanNetworkIdentifier"] = state ? state.vxlanNetworkIdentifier : undefined;
        } else {
            const args = argsOrState as CoreVtapArgs | undefined;
            if ((!args || args.captureFilterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'captureFilterId'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.sourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceId'");
            }
            if ((!args || args.vcnId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcnId'");
            }
            resourceInputs["captureFilterId"] = args ? args.captureFilterId : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["encapsulationProtocol"] = args ? args.encapsulationProtocol : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isVtapEnabled"] = args ? args.isVtapEnabled : undefined;
            resourceInputs["maxPacketSize"] = args ? args.maxPacketSize : undefined;
            resourceInputs["sourceId"] = args ? args.sourceId : undefined;
            resourceInputs["sourcePrivateEndpointIp"] = args ? args.sourcePrivateEndpointIp : undefined;
            resourceInputs["sourcePrivateEndpointSubnetId"] = args ? args.sourcePrivateEndpointSubnetId : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
            resourceInputs["targetIp"] = args ? args.targetIp : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trafficMode"] = args ? args.trafficMode : undefined;
            resourceInputs["vcnId"] = args ? args.vcnId : undefined;
            resourceInputs["vxlanNetworkIdentifier"] = args ? args.vxlanNetworkIdentifier : undefined;
            resourceInputs["lifecycleStateDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CoreVtap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CoreVtap resources.
 */
export interface CoreVtapState {
    captureFilterId?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    encapsulationProtocol?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isVtapEnabled?: pulumi.Input<boolean>;
    lifecycleStateDetails?: pulumi.Input<string>;
    maxPacketSize?: pulumi.Input<number>;
    sourceId?: pulumi.Input<string>;
    sourcePrivateEndpointIp?: pulumi.Input<string>;
    sourcePrivateEndpointSubnetId?: pulumi.Input<string>;
    sourceType?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    targetId?: pulumi.Input<string>;
    targetIp?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreVtapTimeouts>;
    trafficMode?: pulumi.Input<string>;
    vcnId?: pulumi.Input<string>;
    vxlanNetworkIdentifier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CoreVtap resource.
 */
export interface CoreVtapArgs {
    captureFilterId: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    encapsulationProtocol?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isVtapEnabled?: pulumi.Input<boolean>;
    maxPacketSize?: pulumi.Input<number>;
    sourceId: pulumi.Input<string>;
    sourcePrivateEndpointIp?: pulumi.Input<string>;
    sourcePrivateEndpointSubnetId?: pulumi.Input<string>;
    sourceType?: pulumi.Input<string>;
    targetId?: pulumi.Input<string>;
    targetIp?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreVtapTimeouts>;
    trafficMode?: pulumi.Input<string>;
    vcnId: pulumi.Input<string>;
    vxlanNetworkIdentifier?: pulumi.Input<string>;
}
