// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GoldenGateDeploymentCertificate extends pulumi.CustomResource {
    /**
     * Get an existing GoldenGateDeploymentCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GoldenGateDeploymentCertificateState, opts?: pulumi.CustomResourceOptions): GoldenGateDeploymentCertificate {
        return new GoldenGateDeploymentCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/goldenGateDeploymentCertificate:GoldenGateDeploymentCertificate';

    /**
     * Returns true if the given object is an instance of GoldenGateDeploymentCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GoldenGateDeploymentCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GoldenGateDeploymentCertificate.__pulumiType;
    }

    public /*out*/ readonly authorityKeyId!: pulumi.Output<string>;
    public readonly certificateContent!: pulumi.Output<string>;
    public readonly deploymentId!: pulumi.Output<string>;
    public /*out*/ readonly isCa!: pulumi.Output<boolean>;
    public readonly isLockOverride!: pulumi.Output<boolean>;
    public /*out*/ readonly isSelfSigned!: pulumi.Output<boolean>;
    public /*out*/ readonly issuer!: pulumi.Output<string>;
    public readonly key!: pulumi.Output<string>;
    public /*out*/ readonly md5hash!: pulumi.Output<string>;
    public /*out*/ readonly publicKey!: pulumi.Output<string>;
    public /*out*/ readonly publicKeyAlgorithm!: pulumi.Output<string>;
    public /*out*/ readonly publicKeySize!: pulumi.Output<string>;
    public /*out*/ readonly serial!: pulumi.Output<string>;
    public /*out*/ readonly sha1hash!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly subject!: pulumi.Output<string>;
    public /*out*/ readonly subjectKeyId!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeValidFrom!: pulumi.Output<string>;
    public /*out*/ readonly timeValidTo!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GoldenGateDeploymentCertificateTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a GoldenGateDeploymentCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GoldenGateDeploymentCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GoldenGateDeploymentCertificateArgs | GoldenGateDeploymentCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GoldenGateDeploymentCertificateState | undefined;
            resourceInputs["authorityKeyId"] = state ? state.authorityKeyId : undefined;
            resourceInputs["certificateContent"] = state ? state.certificateContent : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["isCa"] = state ? state.isCa : undefined;
            resourceInputs["isLockOverride"] = state ? state.isLockOverride : undefined;
            resourceInputs["isSelfSigned"] = state ? state.isSelfSigned : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["md5hash"] = state ? state.md5hash : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["publicKeyAlgorithm"] = state ? state.publicKeyAlgorithm : undefined;
            resourceInputs["publicKeySize"] = state ? state.publicKeySize : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["sha1hash"] = state ? state.sha1hash : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["subjectKeyId"] = state ? state.subjectKeyId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeValidFrom"] = state ? state.timeValidFrom : undefined;
            resourceInputs["timeValidTo"] = state ? state.timeValidTo : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as GoldenGateDeploymentCertificateArgs | undefined;
            if ((!args || args.certificateContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateContent'");
            }
            if ((!args || args.deploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentId'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["certificateContent"] = args ? args.certificateContent : undefined;
            resourceInputs["deploymentId"] = args ? args.deploymentId : undefined;
            resourceInputs["isLockOverride"] = args ? args.isLockOverride : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["authorityKeyId"] = undefined /*out*/;
            resourceInputs["isCa"] = undefined /*out*/;
            resourceInputs["isSelfSigned"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["md5hash"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
            resourceInputs["publicKeyAlgorithm"] = undefined /*out*/;
            resourceInputs["publicKeySize"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
            resourceInputs["sha1hash"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["subject"] = undefined /*out*/;
            resourceInputs["subjectKeyId"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeValidFrom"] = undefined /*out*/;
            resourceInputs["timeValidTo"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GoldenGateDeploymentCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GoldenGateDeploymentCertificate resources.
 */
export interface GoldenGateDeploymentCertificateState {
    authorityKeyId?: pulumi.Input<string>;
    certificateContent?: pulumi.Input<string>;
    deploymentId?: pulumi.Input<string>;
    isCa?: pulumi.Input<boolean>;
    isLockOverride?: pulumi.Input<boolean>;
    isSelfSigned?: pulumi.Input<boolean>;
    issuer?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    md5hash?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    publicKeyAlgorithm?: pulumi.Input<string>;
    publicKeySize?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sha1hash?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subject?: pulumi.Input<string>;
    subjectKeyId?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeValidFrom?: pulumi.Input<string>;
    timeValidTo?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GoldenGateDeploymentCertificateTimeouts>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GoldenGateDeploymentCertificate resource.
 */
export interface GoldenGateDeploymentCertificateArgs {
    certificateContent: pulumi.Input<string>;
    deploymentId: pulumi.Input<string>;
    isLockOverride?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GoldenGateDeploymentCertificateTimeouts>;
}
