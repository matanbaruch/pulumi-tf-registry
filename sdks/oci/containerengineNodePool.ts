// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerengineNodePool extends pulumi.CustomResource {
    /**
     * Get an existing ContainerengineNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerengineNodePoolState, opts?: pulumi.CustomResourceOptions): ContainerengineNodePool {
        return new ContainerengineNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/containerengineNodePool:ContainerengineNodePool';

    /**
     * Returns true if the given object is an instance of ContainerengineNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerengineNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerengineNodePool.__pulumiType;
    }

    public readonly clusterId!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly initialNodeLabels!: pulumi.Output<outputs.ContainerengineNodePoolInitialNodeLabel[] | undefined>;
    public readonly kubernetesVersion!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeConfigDetails!: pulumi.Output<outputs.ContainerengineNodePoolNodeConfigDetails | undefined>;
    public readonly nodeEvictionNodePoolSettings!: pulumi.Output<outputs.ContainerengineNodePoolNodeEvictionNodePoolSettings | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly nodeImageId!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly nodeImageName!: pulumi.Output<string>;
    public readonly nodeMetadata!: pulumi.Output<{[key: string]: string}>;
    public readonly nodePoolCyclingDetails!: pulumi.Output<outputs.ContainerengineNodePoolNodePoolCyclingDetails | undefined>;
    public readonly nodeShape!: pulumi.Output<string>;
    public readonly nodeShapeConfig!: pulumi.Output<outputs.ContainerengineNodePoolNodeShapeConfig | undefined>;
    public readonly nodeSourceDetails!: pulumi.Output<outputs.ContainerengineNodePoolNodeSourceDetails | undefined>;
    public /*out*/ readonly nodeSources!: pulumi.Output<outputs.ContainerengineNodePoolNodeSource[]>;
    public /*out*/ readonly nodes!: pulumi.Output<outputs.ContainerengineNodePoolNode[]>;
    public readonly quantityPerSubnet!: pulumi.Output<number>;
    public readonly sshPublicKey!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerengineNodePoolTimeouts | undefined>;

    /**
     * Create a ContainerengineNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerengineNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerengineNodePoolArgs | ContainerengineNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerengineNodePoolState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["initialNodeLabels"] = state ? state.initialNodeLabels : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeConfigDetails"] = state ? state.nodeConfigDetails : undefined;
            resourceInputs["nodeEvictionNodePoolSettings"] = state ? state.nodeEvictionNodePoolSettings : undefined;
            resourceInputs["nodeImageId"] = state ? state.nodeImageId : undefined;
            resourceInputs["nodeImageName"] = state ? state.nodeImageName : undefined;
            resourceInputs["nodeMetadata"] = state ? state.nodeMetadata : undefined;
            resourceInputs["nodePoolCyclingDetails"] = state ? state.nodePoolCyclingDetails : undefined;
            resourceInputs["nodeShape"] = state ? state.nodeShape : undefined;
            resourceInputs["nodeShapeConfig"] = state ? state.nodeShapeConfig : undefined;
            resourceInputs["nodeSourceDetails"] = state ? state.nodeSourceDetails : undefined;
            resourceInputs["nodeSources"] = state ? state.nodeSources : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["quantityPerSubnet"] = state ? state.quantityPerSubnet : undefined;
            resourceInputs["sshPublicKey"] = state ? state.sshPublicKey : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ContainerengineNodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.nodeShape === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeShape'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["initialNodeLabels"] = args ? args.initialNodeLabels : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeConfigDetails"] = args ? args.nodeConfigDetails : undefined;
            resourceInputs["nodeEvictionNodePoolSettings"] = args ? args.nodeEvictionNodePoolSettings : undefined;
            resourceInputs["nodeImageId"] = args ? args.nodeImageId : undefined;
            resourceInputs["nodeImageName"] = args ? args.nodeImageName : undefined;
            resourceInputs["nodeMetadata"] = args ? args.nodeMetadata : undefined;
            resourceInputs["nodePoolCyclingDetails"] = args ? args.nodePoolCyclingDetails : undefined;
            resourceInputs["nodeShape"] = args ? args.nodeShape : undefined;
            resourceInputs["nodeShapeConfig"] = args ? args.nodeShapeConfig : undefined;
            resourceInputs["nodeSourceDetails"] = args ? args.nodeSourceDetails : undefined;
            resourceInputs["quantityPerSubnet"] = args ? args.quantityPerSubnet : undefined;
            resourceInputs["sshPublicKey"] = args ? args.sshPublicKey : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["nodeSources"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerengineNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerengineNodePool resources.
 */
export interface ContainerengineNodePoolState {
    clusterId?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    initialNodeLabels?: pulumi.Input<pulumi.Input<inputs.ContainerengineNodePoolInitialNodeLabel>[]>;
    kubernetesVersion?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeConfigDetails?: pulumi.Input<inputs.ContainerengineNodePoolNodeConfigDetails>;
    nodeEvictionNodePoolSettings?: pulumi.Input<inputs.ContainerengineNodePoolNodeEvictionNodePoolSettings>;
    /**
     * @deprecated Deprecated
     */
    nodeImageId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nodeImageName?: pulumi.Input<string>;
    nodeMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodePoolCyclingDetails?: pulumi.Input<inputs.ContainerengineNodePoolNodePoolCyclingDetails>;
    nodeShape?: pulumi.Input<string>;
    nodeShapeConfig?: pulumi.Input<inputs.ContainerengineNodePoolNodeShapeConfig>;
    nodeSourceDetails?: pulumi.Input<inputs.ContainerengineNodePoolNodeSourceDetails>;
    nodeSources?: pulumi.Input<pulumi.Input<inputs.ContainerengineNodePoolNodeSource>[]>;
    nodes?: pulumi.Input<pulumi.Input<inputs.ContainerengineNodePoolNode>[]>;
    quantityPerSubnet?: pulumi.Input<number>;
    sshPublicKey?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ContainerengineNodePoolTimeouts>;
}

/**
 * The set of arguments for constructing a ContainerengineNodePool resource.
 */
export interface ContainerengineNodePoolArgs {
    clusterId: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    initialNodeLabels?: pulumi.Input<pulumi.Input<inputs.ContainerengineNodePoolInitialNodeLabel>[]>;
    kubernetesVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeConfigDetails?: pulumi.Input<inputs.ContainerengineNodePoolNodeConfigDetails>;
    nodeEvictionNodePoolSettings?: pulumi.Input<inputs.ContainerengineNodePoolNodeEvictionNodePoolSettings>;
    /**
     * @deprecated Deprecated
     */
    nodeImageId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nodeImageName?: pulumi.Input<string>;
    nodeMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodePoolCyclingDetails?: pulumi.Input<inputs.ContainerengineNodePoolNodePoolCyclingDetails>;
    nodeShape: pulumi.Input<string>;
    nodeShapeConfig?: pulumi.Input<inputs.ContainerengineNodePoolNodeShapeConfig>;
    nodeSourceDetails?: pulumi.Input<inputs.ContainerengineNodePoolNodeSourceDetails>;
    quantityPerSubnet?: pulumi.Input<number>;
    sshPublicKey?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ContainerengineNodePoolTimeouts>;
}
