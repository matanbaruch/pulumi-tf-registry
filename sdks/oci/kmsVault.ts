// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KmsVault extends pulumi.CustomResource {
    /**
     * Get an existing KmsVault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsVaultState, opts?: pulumi.CustomResourceOptions): KmsVault {
        return new KmsVault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/kmsVault:KmsVault';

    /**
     * Returns true if the given object is an instance of KmsVault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsVault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsVault.__pulumiType;
    }

    public readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly cryptoEndpoint!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly externalKeyManagerMetadata!: pulumi.Output<outputs.KmsVaultExternalKeyManagerMetadata | undefined>;
    public /*out*/ readonly externalKeyManagerMetadataSummaries!: pulumi.Output<outputs.KmsVaultExternalKeyManagerMetadataSummary[]>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly isPrimary!: pulumi.Output<boolean>;
    public /*out*/ readonly isVaultReplicable!: pulumi.Output<boolean>;
    public /*out*/ readonly managementEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly replicaDetails!: pulumi.Output<outputs.KmsVaultReplicaDetail[]>;
    public readonly restoreFromFile!: pulumi.Output<outputs.KmsVaultRestoreFromFile | undefined>;
    public readonly restoreFromObjectStore!: pulumi.Output<outputs.KmsVaultRestoreFromObjectStore | undefined>;
    public readonly restoreTrigger!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly restoredFromVaultId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeOfDeletion!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KmsVaultTimeouts | undefined>;
    public readonly vaultType!: pulumi.Output<string>;

    /**
     * Create a KmsVault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsVaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsVaultArgs | KmsVaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsVaultState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["cryptoEndpoint"] = state ? state.cryptoEndpoint : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["externalKeyManagerMetadata"] = state ? state.externalKeyManagerMetadata : undefined;
            resourceInputs["externalKeyManagerMetadataSummaries"] = state ? state.externalKeyManagerMetadataSummaries : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isPrimary"] = state ? state.isPrimary : undefined;
            resourceInputs["isVaultReplicable"] = state ? state.isVaultReplicable : undefined;
            resourceInputs["managementEndpoint"] = state ? state.managementEndpoint : undefined;
            resourceInputs["replicaDetails"] = state ? state.replicaDetails : undefined;
            resourceInputs["restoreFromFile"] = state ? state.restoreFromFile : undefined;
            resourceInputs["restoreFromObjectStore"] = state ? state.restoreFromObjectStore : undefined;
            resourceInputs["restoreTrigger"] = state ? state.restoreTrigger : undefined;
            resourceInputs["restoredFromVaultId"] = state ? state.restoredFromVaultId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeOfDeletion"] = state ? state.timeOfDeletion : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vaultType"] = state ? state.vaultType : undefined;
        } else {
            const args = argsOrState as KmsVaultArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.vaultType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultType'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["externalKeyManagerMetadata"] = args ? args.externalKeyManagerMetadata : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["restoreFromFile"] = args ? args.restoreFromFile : undefined;
            resourceInputs["restoreFromObjectStore"] = args ? args.restoreFromObjectStore : undefined;
            resourceInputs["restoreTrigger"] = args ? args.restoreTrigger : undefined;
            resourceInputs["timeOfDeletion"] = args ? args.timeOfDeletion : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vaultType"] = args ? args.vaultType : undefined;
            resourceInputs["cryptoEndpoint"] = undefined /*out*/;
            resourceInputs["externalKeyManagerMetadataSummaries"] = undefined /*out*/;
            resourceInputs["isPrimary"] = undefined /*out*/;
            resourceInputs["isVaultReplicable"] = undefined /*out*/;
            resourceInputs["managementEndpoint"] = undefined /*out*/;
            resourceInputs["replicaDetails"] = undefined /*out*/;
            resourceInputs["restoredFromVaultId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KmsVault.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KmsVault resources.
 */
export interface KmsVaultState {
    compartmentId?: pulumi.Input<string>;
    cryptoEndpoint?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    externalKeyManagerMetadata?: pulumi.Input<inputs.KmsVaultExternalKeyManagerMetadata>;
    externalKeyManagerMetadataSummaries?: pulumi.Input<pulumi.Input<inputs.KmsVaultExternalKeyManagerMetadataSummary>[]>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isPrimary?: pulumi.Input<boolean>;
    isVaultReplicable?: pulumi.Input<boolean>;
    managementEndpoint?: pulumi.Input<string>;
    replicaDetails?: pulumi.Input<pulumi.Input<inputs.KmsVaultReplicaDetail>[]>;
    restoreFromFile?: pulumi.Input<inputs.KmsVaultRestoreFromFile>;
    restoreFromObjectStore?: pulumi.Input<inputs.KmsVaultRestoreFromObjectStore>;
    restoreTrigger?: pulumi.Input<boolean>;
    restoredFromVaultId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeOfDeletion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsVaultTimeouts>;
    vaultType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KmsVault resource.
 */
export interface KmsVaultArgs {
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    externalKeyManagerMetadata?: pulumi.Input<inputs.KmsVaultExternalKeyManagerMetadata>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    restoreFromFile?: pulumi.Input<inputs.KmsVaultRestoreFromFile>;
    restoreFromObjectStore?: pulumi.Input<inputs.KmsVaultRestoreFromObjectStore>;
    restoreTrigger?: pulumi.Input<boolean>;
    timeOfDeletion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsVaultTimeouts>;
    vaultType: pulumi.Input<string>;
}
