// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getApigatewayCertificate(args: GetApigatewayCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetApigatewayCertificateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getApigatewayCertificate:getApigatewayCertificate", {
        "certificateId": args.certificateId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApigatewayCertificate.
 */
export interface GetApigatewayCertificateArgs {
    certificateId: string;
}

/**
 * A collection of values returned by getApigatewayCertificate.
 */
export interface GetApigatewayCertificateResult {
    readonly certificate: string;
    readonly certificateId: string;
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly intermediateCertificates: string;
    readonly lifecycleDetails: string;
    readonly privateKey: string;
    readonly state: string;
    readonly subjectNames: string[];
    readonly timeCreated: string;
    readonly timeNotValidAfter: string;
    readonly timeUpdated: string;
}
export function getApigatewayCertificateOutput(args: GetApigatewayCertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApigatewayCertificateResult> {
    return pulumi.output(args).apply((a: any) => getApigatewayCertificate(a, opts))
}

/**
 * A collection of arguments for invoking getApigatewayCertificate.
 */
export interface GetApigatewayCertificateOutputArgs {
    certificateId: pulumi.Input<string>;
}
