// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDevopsRepositoryPaths(args: GetDevopsRepositoryPathsArgs, opts?: pulumi.InvokeOptions): Promise<GetDevopsRepositoryPathsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDevopsRepositoryPaths:getDevopsRepositoryPaths", {
        "displayName": args.displayName,
        "filters": args.filters,
        "folderPath": args.folderPath,
        "id": args.id,
        "pathsInSubtree": args.pathsInSubtree,
        "ref": args.ref,
        "repositoryId": args.repositoryId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDevopsRepositoryPaths.
 */
export interface GetDevopsRepositoryPathsArgs {
    displayName?: string;
    filters?: inputs.GetDevopsRepositoryPathsFilter[];
    folderPath?: string;
    id?: string;
    pathsInSubtree?: boolean;
    ref?: string;
    repositoryId: string;
}

/**
 * A collection of values returned by getDevopsRepositoryPaths.
 */
export interface GetDevopsRepositoryPathsResult {
    readonly displayName?: string;
    readonly filters?: outputs.GetDevopsRepositoryPathsFilter[];
    readonly folderPath?: string;
    readonly id: string;
    readonly pathsInSubtree?: boolean;
    readonly ref?: string;
    readonly repositoryId: string;
    readonly repositoryPathCollections: outputs.GetDevopsRepositoryPathsRepositoryPathCollection[];
}
export function getDevopsRepositoryPathsOutput(args: GetDevopsRepositoryPathsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDevopsRepositoryPathsResult> {
    return pulumi.output(args).apply((a: any) => getDevopsRepositoryPaths(a, opts))
}

/**
 * A collection of arguments for invoking getDevopsRepositoryPaths.
 */
export interface GetDevopsRepositoryPathsOutputArgs {
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetDevopsRepositoryPathsFilterArgs>[]>;
    folderPath?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    pathsInSubtree?: pulumi.Input<boolean>;
    ref?: pulumi.Input<string>;
    repositoryId: pulumi.Input<string>;
}
