// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KmsKeyVersion extends pulumi.CustomResource {
    /**
     * Get an existing KmsKeyVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsKeyVersionState, opts?: pulumi.CustomResourceOptions): KmsKeyVersion {
        return new KmsKeyVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/kmsKeyVersion:KmsKeyVersion';

    /**
     * Returns true if the given object is an instance of KmsKeyVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsKeyVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsKeyVersion.__pulumiType;
    }

    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly externalKeyReferenceDetails!: pulumi.Output<outputs.KmsKeyVersionExternalKeyReferenceDetail[]>;
    public readonly externalKeyVersionId!: pulumi.Output<string>;
    public /*out*/ readonly isAutoRotated!: pulumi.Output<boolean>;
    public /*out*/ readonly isPrimary!: pulumi.Output<boolean>;
    public readonly keyId!: pulumi.Output<string>;
    public /*out*/ readonly keyVersionId!: pulumi.Output<string>;
    public readonly managementEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly publicKey!: pulumi.Output<string>;
    public /*out*/ readonly replicaDetails!: pulumi.Output<outputs.KmsKeyVersionReplicaDetail[]>;
    public /*out*/ readonly restoredFromKeyId!: pulumi.Output<string>;
    public /*out*/ readonly restoredFromKeyVersionId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeOfDeletion!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KmsKeyVersionTimeouts | undefined>;
    public /*out*/ readonly vaultId!: pulumi.Output<string>;

    /**
     * Create a KmsKeyVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsKeyVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsKeyVersionArgs | KmsKeyVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsKeyVersionState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["externalKeyReferenceDetails"] = state ? state.externalKeyReferenceDetails : undefined;
            resourceInputs["externalKeyVersionId"] = state ? state.externalKeyVersionId : undefined;
            resourceInputs["isAutoRotated"] = state ? state.isAutoRotated : undefined;
            resourceInputs["isPrimary"] = state ? state.isPrimary : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyVersionId"] = state ? state.keyVersionId : undefined;
            resourceInputs["managementEndpoint"] = state ? state.managementEndpoint : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["replicaDetails"] = state ? state.replicaDetails : undefined;
            resourceInputs["restoredFromKeyId"] = state ? state.restoredFromKeyId : undefined;
            resourceInputs["restoredFromKeyVersionId"] = state ? state.restoredFromKeyVersionId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeOfDeletion"] = state ? state.timeOfDeletion : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
        } else {
            const args = argsOrState as KmsKeyVersionArgs | undefined;
            if ((!args || args.keyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if ((!args || args.managementEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementEndpoint'");
            }
            resourceInputs["externalKeyVersionId"] = args ? args.externalKeyVersionId : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["managementEndpoint"] = args ? args.managementEndpoint : undefined;
            resourceInputs["timeOfDeletion"] = args ? args.timeOfDeletion : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["externalKeyReferenceDetails"] = undefined /*out*/;
            resourceInputs["isAutoRotated"] = undefined /*out*/;
            resourceInputs["isPrimary"] = undefined /*out*/;
            resourceInputs["keyVersionId"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
            resourceInputs["replicaDetails"] = undefined /*out*/;
            resourceInputs["restoredFromKeyId"] = undefined /*out*/;
            resourceInputs["restoredFromKeyVersionId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["vaultId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KmsKeyVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KmsKeyVersion resources.
 */
export interface KmsKeyVersionState {
    compartmentId?: pulumi.Input<string>;
    externalKeyReferenceDetails?: pulumi.Input<pulumi.Input<inputs.KmsKeyVersionExternalKeyReferenceDetail>[]>;
    externalKeyVersionId?: pulumi.Input<string>;
    isAutoRotated?: pulumi.Input<boolean>;
    isPrimary?: pulumi.Input<boolean>;
    keyId?: pulumi.Input<string>;
    keyVersionId?: pulumi.Input<string>;
    managementEndpoint?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    replicaDetails?: pulumi.Input<pulumi.Input<inputs.KmsKeyVersionReplicaDetail>[]>;
    restoredFromKeyId?: pulumi.Input<string>;
    restoredFromKeyVersionId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeOfDeletion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsKeyVersionTimeouts>;
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KmsKeyVersion resource.
 */
export interface KmsKeyVersionArgs {
    externalKeyVersionId?: pulumi.Input<string>;
    keyId: pulumi.Input<string>;
    managementEndpoint: pulumi.Input<string>;
    timeOfDeletion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsKeyVersionTimeouts>;
}
