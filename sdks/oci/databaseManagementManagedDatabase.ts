// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseManagementManagedDatabase extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseManagementManagedDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseManagementManagedDatabaseState, opts?: pulumi.CustomResourceOptions): DatabaseManagementManagedDatabase {
        return new DatabaseManagementManagedDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseManagementManagedDatabase:DatabaseManagementManagedDatabase';

    /**
     * Returns true if the given object is an instance of DatabaseManagementManagedDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseManagementManagedDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseManagementManagedDatabase.__pulumiType;
    }

    public /*out*/ readonly additionalDetails!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly databasePlatformName!: pulumi.Output<string>;
    public /*out*/ readonly databaseStatus!: pulumi.Output<string>;
    public /*out*/ readonly databaseSubType!: pulumi.Output<string>;
    public /*out*/ readonly databaseType!: pulumi.Output<string>;
    public /*out*/ readonly databaseVersion!: pulumi.Output<string>;
    public /*out*/ readonly dbSystemId!: pulumi.Output<string>;
    public /*out*/ readonly dbmgmtFeatureConfigs!: pulumi.Output<outputs.DatabaseManagementManagedDatabaseDbmgmtFeatureConfig[]>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly deploymentType!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly isCluster!: pulumi.Output<boolean>;
    public /*out*/ readonly managedDatabaseGroups!: pulumi.Output<outputs.DatabaseManagementManagedDatabaseManagedDatabaseGroup[]>;
    public readonly managedDatabaseId!: pulumi.Output<string>;
    public /*out*/ readonly managementOption!: pulumi.Output<string>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public /*out*/ readonly parentContainerId!: pulumi.Output<string>;
    public /*out*/ readonly storageSystemId!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseManagementManagedDatabaseTimeouts | undefined>;
    public /*out*/ readonly workloadType!: pulumi.Output<string>;

    /**
     * Create a DatabaseManagementManagedDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseManagementManagedDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseManagementManagedDatabaseArgs | DatabaseManagementManagedDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseManagementManagedDatabaseState | undefined;
            resourceInputs["additionalDetails"] = state ? state.additionalDetails : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["databasePlatformName"] = state ? state.databasePlatformName : undefined;
            resourceInputs["databaseStatus"] = state ? state.databaseStatus : undefined;
            resourceInputs["databaseSubType"] = state ? state.databaseSubType : undefined;
            resourceInputs["databaseType"] = state ? state.databaseType : undefined;
            resourceInputs["databaseVersion"] = state ? state.databaseVersion : undefined;
            resourceInputs["dbSystemId"] = state ? state.dbSystemId : undefined;
            resourceInputs["dbmgmtFeatureConfigs"] = state ? state.dbmgmtFeatureConfigs : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["deploymentType"] = state ? state.deploymentType : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isCluster"] = state ? state.isCluster : undefined;
            resourceInputs["managedDatabaseGroups"] = state ? state.managedDatabaseGroups : undefined;
            resourceInputs["managedDatabaseId"] = state ? state.managedDatabaseId : undefined;
            resourceInputs["managementOption"] = state ? state.managementOption : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentContainerId"] = state ? state.parentContainerId : undefined;
            resourceInputs["storageSystemId"] = state ? state.storageSystemId : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workloadType"] = state ? state.workloadType : undefined;
        } else {
            const args = argsOrState as DatabaseManagementManagedDatabaseArgs | undefined;
            if ((!args || args.managedDatabaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedDatabaseId'");
            }
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["managedDatabaseId"] = args ? args.managedDatabaseId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["additionalDetails"] = undefined /*out*/;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["databasePlatformName"] = undefined /*out*/;
            resourceInputs["databaseStatus"] = undefined /*out*/;
            resourceInputs["databaseSubType"] = undefined /*out*/;
            resourceInputs["databaseType"] = undefined /*out*/;
            resourceInputs["databaseVersion"] = undefined /*out*/;
            resourceInputs["dbSystemId"] = undefined /*out*/;
            resourceInputs["dbmgmtFeatureConfigs"] = undefined /*out*/;
            resourceInputs["deploymentType"] = undefined /*out*/;
            resourceInputs["isCluster"] = undefined /*out*/;
            resourceInputs["managedDatabaseGroups"] = undefined /*out*/;
            resourceInputs["managementOption"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parentContainerId"] = undefined /*out*/;
            resourceInputs["storageSystemId"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["workloadType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseManagementManagedDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseManagementManagedDatabase resources.
 */
export interface DatabaseManagementManagedDatabaseState {
    additionalDetails?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    compartmentId?: pulumi.Input<string>;
    databasePlatformName?: pulumi.Input<string>;
    databaseStatus?: pulumi.Input<string>;
    databaseSubType?: pulumi.Input<string>;
    databaseType?: pulumi.Input<string>;
    databaseVersion?: pulumi.Input<string>;
    dbSystemId?: pulumi.Input<string>;
    dbmgmtFeatureConfigs?: pulumi.Input<pulumi.Input<inputs.DatabaseManagementManagedDatabaseDbmgmtFeatureConfig>[]>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deploymentType?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isCluster?: pulumi.Input<boolean>;
    managedDatabaseGroups?: pulumi.Input<pulumi.Input<inputs.DatabaseManagementManagedDatabaseManagedDatabaseGroup>[]>;
    managedDatabaseId?: pulumi.Input<string>;
    managementOption?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parentContainerId?: pulumi.Input<string>;
    storageSystemId?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseManagementManagedDatabaseTimeouts>;
    workloadType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseManagementManagedDatabase resource.
 */
export interface DatabaseManagementManagedDatabaseArgs {
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    managedDatabaseId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseManagementManagedDatabaseTimeouts>;
}
