// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OsManagementHubProfile extends pulumi.CustomResource {
    /**
     * Get an existing OsManagementHubProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsManagementHubProfileState, opts?: pulumi.CustomResourceOptions): OsManagementHubProfile {
        return new OsManagementHubProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/osManagementHubProfile:OsManagementHubProfile';

    /**
     * Returns true if the given object is an instance of OsManagementHubProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsManagementHubProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsManagementHubProfile.__pulumiType;
    }

    public readonly archType!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly isDefaultProfile!: pulumi.Output<boolean>;
    public /*out*/ readonly isServiceProvidedProfile!: pulumi.Output<boolean>;
    public /*out*/ readonly lifecycleEnvironments!: pulumi.Output<outputs.OsManagementHubProfileLifecycleEnvironment[]>;
    public readonly lifecycleStageId!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleStages!: pulumi.Output<outputs.OsManagementHubProfileLifecycleStage[]>;
    public readonly managedInstanceGroupId!: pulumi.Output<string>;
    public /*out*/ readonly managedInstanceGroups!: pulumi.Output<outputs.OsManagementHubProfileManagedInstanceGroup[]>;
    public readonly managementStationId!: pulumi.Output<string>;
    public readonly osFamily!: pulumi.Output<string>;
    public readonly profileType!: pulumi.Output<string>;
    public readonly registrationType!: pulumi.Output<string>;
    public readonly softwareSourceIds!: pulumi.Output<string[]>;
    public /*out*/ readonly softwareSources!: pulumi.Output<outputs.OsManagementHubProfileSoftwareSource[]>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OsManagementHubProfileTimeouts | undefined>;
    public readonly vendorName!: pulumi.Output<string>;

    /**
     * Create a OsManagementHubProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsManagementHubProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsManagementHubProfileArgs | OsManagementHubProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsManagementHubProfileState | undefined;
            resourceInputs["archType"] = state ? state.archType : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isDefaultProfile"] = state ? state.isDefaultProfile : undefined;
            resourceInputs["isServiceProvidedProfile"] = state ? state.isServiceProvidedProfile : undefined;
            resourceInputs["lifecycleEnvironments"] = state ? state.lifecycleEnvironments : undefined;
            resourceInputs["lifecycleStageId"] = state ? state.lifecycleStageId : undefined;
            resourceInputs["lifecycleStages"] = state ? state.lifecycleStages : undefined;
            resourceInputs["managedInstanceGroupId"] = state ? state.managedInstanceGroupId : undefined;
            resourceInputs["managedInstanceGroups"] = state ? state.managedInstanceGroups : undefined;
            resourceInputs["managementStationId"] = state ? state.managementStationId : undefined;
            resourceInputs["osFamily"] = state ? state.osFamily : undefined;
            resourceInputs["profileType"] = state ? state.profileType : undefined;
            resourceInputs["registrationType"] = state ? state.registrationType : undefined;
            resourceInputs["softwareSourceIds"] = state ? state.softwareSourceIds : undefined;
            resourceInputs["softwareSources"] = state ? state.softwareSources : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vendorName"] = state ? state.vendorName : undefined;
        } else {
            const args = argsOrState as OsManagementHubProfileArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.profileType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileType'");
            }
            resourceInputs["archType"] = args ? args.archType : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isDefaultProfile"] = args ? args.isDefaultProfile : undefined;
            resourceInputs["lifecycleStageId"] = args ? args.lifecycleStageId : undefined;
            resourceInputs["managedInstanceGroupId"] = args ? args.managedInstanceGroupId : undefined;
            resourceInputs["managementStationId"] = args ? args.managementStationId : undefined;
            resourceInputs["osFamily"] = args ? args.osFamily : undefined;
            resourceInputs["profileType"] = args ? args.profileType : undefined;
            resourceInputs["registrationType"] = args ? args.registrationType : undefined;
            resourceInputs["softwareSourceIds"] = args ? args.softwareSourceIds : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vendorName"] = args ? args.vendorName : undefined;
            resourceInputs["isServiceProvidedProfile"] = undefined /*out*/;
            resourceInputs["lifecycleEnvironments"] = undefined /*out*/;
            resourceInputs["lifecycleStages"] = undefined /*out*/;
            resourceInputs["managedInstanceGroups"] = undefined /*out*/;
            resourceInputs["softwareSources"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsManagementHubProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsManagementHubProfile resources.
 */
export interface OsManagementHubProfileState {
    archType?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isDefaultProfile?: pulumi.Input<boolean>;
    isServiceProvidedProfile?: pulumi.Input<boolean>;
    lifecycleEnvironments?: pulumi.Input<pulumi.Input<inputs.OsManagementHubProfileLifecycleEnvironment>[]>;
    lifecycleStageId?: pulumi.Input<string>;
    lifecycleStages?: pulumi.Input<pulumi.Input<inputs.OsManagementHubProfileLifecycleStage>[]>;
    managedInstanceGroupId?: pulumi.Input<string>;
    managedInstanceGroups?: pulumi.Input<pulumi.Input<inputs.OsManagementHubProfileManagedInstanceGroup>[]>;
    managementStationId?: pulumi.Input<string>;
    osFamily?: pulumi.Input<string>;
    profileType?: pulumi.Input<string>;
    registrationType?: pulumi.Input<string>;
    softwareSourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    softwareSources?: pulumi.Input<pulumi.Input<inputs.OsManagementHubProfileSoftwareSource>[]>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsManagementHubProfileTimeouts>;
    vendorName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OsManagementHubProfile resource.
 */
export interface OsManagementHubProfileArgs {
    archType?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isDefaultProfile?: pulumi.Input<boolean>;
    lifecycleStageId?: pulumi.Input<string>;
    managedInstanceGroupId?: pulumi.Input<string>;
    managementStationId?: pulumi.Input<string>;
    osFamily?: pulumi.Input<string>;
    profileType: pulumi.Input<string>;
    registrationType?: pulumi.Input<string>;
    softwareSourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.OsManagementHubProfileTimeouts>;
    vendorName?: pulumi.Input<string>;
}
