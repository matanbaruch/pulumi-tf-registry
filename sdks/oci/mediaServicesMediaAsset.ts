// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MediaServicesMediaAsset extends pulumi.CustomResource {
    /**
     * Get an existing MediaServicesMediaAsset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MediaServicesMediaAssetState, opts?: pulumi.CustomResourceOptions): MediaServicesMediaAsset {
        return new MediaServicesMediaAsset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/mediaServicesMediaAsset:MediaServicesMediaAsset';

    /**
     * Returns true if the given object is an instance of MediaServicesMediaAsset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MediaServicesMediaAsset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MediaServicesMediaAsset.__pulumiType;
    }

    public readonly bucket!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly isLockOverride!: pulumi.Output<boolean>;
    public readonly locks!: pulumi.Output<outputs.MediaServicesMediaAssetLock[] | undefined>;
    public readonly masterMediaAssetId!: pulumi.Output<string>;
    public readonly mediaAssetTags!: pulumi.Output<outputs.MediaServicesMediaAssetMediaAssetTag[] | undefined>;
    public readonly mediaWorkflowJobId!: pulumi.Output<string>;
    public readonly metadatas!: pulumi.Output<outputs.MediaServicesMediaAssetMetadata[] | undefined>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly object!: pulumi.Output<string>;
    public readonly objectEtag!: pulumi.Output<string>;
    public readonly parentMediaAssetId!: pulumi.Output<string>;
    public readonly segmentRangeEndIndex!: pulumi.Output<string>;
    public readonly segmentRangeStartIndex!: pulumi.Output<string>;
    public readonly sourceMediaWorkflowId!: pulumi.Output<string>;
    public readonly sourceMediaWorkflowVersion!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MediaServicesMediaAssetTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a MediaServicesMediaAsset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MediaServicesMediaAssetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MediaServicesMediaAssetArgs | MediaServicesMediaAssetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MediaServicesMediaAssetState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isLockOverride"] = state ? state.isLockOverride : undefined;
            resourceInputs["locks"] = state ? state.locks : undefined;
            resourceInputs["masterMediaAssetId"] = state ? state.masterMediaAssetId : undefined;
            resourceInputs["mediaAssetTags"] = state ? state.mediaAssetTags : undefined;
            resourceInputs["mediaWorkflowJobId"] = state ? state.mediaWorkflowJobId : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["object"] = state ? state.object : undefined;
            resourceInputs["objectEtag"] = state ? state.objectEtag : undefined;
            resourceInputs["parentMediaAssetId"] = state ? state.parentMediaAssetId : undefined;
            resourceInputs["segmentRangeEndIndex"] = state ? state.segmentRangeEndIndex : undefined;
            resourceInputs["segmentRangeStartIndex"] = state ? state.segmentRangeStartIndex : undefined;
            resourceInputs["sourceMediaWorkflowId"] = state ? state.sourceMediaWorkflowId : undefined;
            resourceInputs["sourceMediaWorkflowVersion"] = state ? state.sourceMediaWorkflowVersion : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as MediaServicesMediaAssetArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isLockOverride"] = args ? args.isLockOverride : undefined;
            resourceInputs["locks"] = args ? args.locks : undefined;
            resourceInputs["masterMediaAssetId"] = args ? args.masterMediaAssetId : undefined;
            resourceInputs["mediaAssetTags"] = args ? args.mediaAssetTags : undefined;
            resourceInputs["mediaWorkflowJobId"] = args ? args.mediaWorkflowJobId : undefined;
            resourceInputs["metadatas"] = args ? args.metadatas : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["object"] = args ? args.object : undefined;
            resourceInputs["objectEtag"] = args ? args.objectEtag : undefined;
            resourceInputs["parentMediaAssetId"] = args ? args.parentMediaAssetId : undefined;
            resourceInputs["segmentRangeEndIndex"] = args ? args.segmentRangeEndIndex : undefined;
            resourceInputs["segmentRangeStartIndex"] = args ? args.segmentRangeStartIndex : undefined;
            resourceInputs["sourceMediaWorkflowId"] = args ? args.sourceMediaWorkflowId : undefined;
            resourceInputs["sourceMediaWorkflowVersion"] = args ? args.sourceMediaWorkflowVersion : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MediaServicesMediaAsset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MediaServicesMediaAsset resources.
 */
export interface MediaServicesMediaAssetState {
    bucket?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isLockOverride?: pulumi.Input<boolean>;
    locks?: pulumi.Input<pulumi.Input<inputs.MediaServicesMediaAssetLock>[]>;
    masterMediaAssetId?: pulumi.Input<string>;
    mediaAssetTags?: pulumi.Input<pulumi.Input<inputs.MediaServicesMediaAssetMediaAssetTag>[]>;
    mediaWorkflowJobId?: pulumi.Input<string>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.MediaServicesMediaAssetMetadata>[]>;
    namespace?: pulumi.Input<string>;
    object?: pulumi.Input<string>;
    objectEtag?: pulumi.Input<string>;
    parentMediaAssetId?: pulumi.Input<string>;
    segmentRangeEndIndex?: pulumi.Input<string>;
    segmentRangeStartIndex?: pulumi.Input<string>;
    sourceMediaWorkflowId?: pulumi.Input<string>;
    sourceMediaWorkflowVersion?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MediaServicesMediaAssetTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MediaServicesMediaAsset resource.
 */
export interface MediaServicesMediaAssetArgs {
    bucket?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isLockOverride?: pulumi.Input<boolean>;
    locks?: pulumi.Input<pulumi.Input<inputs.MediaServicesMediaAssetLock>[]>;
    masterMediaAssetId?: pulumi.Input<string>;
    mediaAssetTags?: pulumi.Input<pulumi.Input<inputs.MediaServicesMediaAssetMediaAssetTag>[]>;
    mediaWorkflowJobId?: pulumi.Input<string>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.MediaServicesMediaAssetMetadata>[]>;
    namespace?: pulumi.Input<string>;
    object?: pulumi.Input<string>;
    objectEtag?: pulumi.Input<string>;
    parentMediaAssetId?: pulumi.Input<string>;
    segmentRangeEndIndex?: pulumi.Input<string>;
    segmentRangeStartIndex?: pulumi.Input<string>;
    sourceMediaWorkflowId?: pulumi.Input<string>;
    sourceMediaWorkflowVersion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MediaServicesMediaAssetTimeouts>;
    type: pulumi.Input<string>;
}
