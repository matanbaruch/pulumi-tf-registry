// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDevopsRepository(args: GetDevopsRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<GetDevopsRepositoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDevopsRepository:getDevopsRepository", {
        "fields": args.fields,
        "repositoryId": args.repositoryId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDevopsRepository.
 */
export interface GetDevopsRepositoryArgs {
    fields?: string[];
    repositoryId: string;
}

/**
 * A collection of values returned by getDevopsRepository.
 */
export interface GetDevopsRepositoryResult {
    readonly branchCount: number;
    readonly commitCount: number;
    readonly compartmentId: string;
    readonly defaultBranch: string;
    readonly definedTags: {[key: string]: string};
    readonly description: string;
    readonly fields?: string[];
    readonly freeformTags: {[key: string]: string};
    readonly httpUrl: string;
    readonly id: string;
    readonly lifecyleDetails: string;
    readonly mirrorRepositoryConfigs: outputs.GetDevopsRepositoryMirrorRepositoryConfig[];
    readonly name: string;
    readonly namespace: string;
    readonly parentRepositoryId: string;
    readonly projectId: string;
    readonly projectName: string;
    readonly repositoryId: string;
    readonly repositoryType: string;
    readonly sizeInBytes: string;
    readonly sshUrl: string;
    readonly state: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly triggerBuildEvents: string[];
}
export function getDevopsRepositoryOutput(args: GetDevopsRepositoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDevopsRepositoryResult> {
    return pulumi.output(args).apply((a: any) => getDevopsRepository(a, opts))
}

/**
 * A collection of arguments for invoking getDevopsRepository.
 */
export interface GetDevopsRepositoryOutputArgs {
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    repositoryId: pulumi.Input<string>;
}
