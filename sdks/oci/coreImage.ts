// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CoreImage extends pulumi.CustomResource {
    /**
     * Get an existing CoreImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CoreImageState, opts?: pulumi.CustomResourceOptions): CoreImage {
        return new CoreImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/coreImage:CoreImage';

    /**
     * Returns true if the given object is an instance of CoreImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CoreImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CoreImage.__pulumiType;
    }

    public /*out*/ readonly agentFeatures!: pulumi.Output<outputs.CoreImageAgentFeature[]>;
    public /*out*/ readonly baseImageId!: pulumi.Output<string>;
    public /*out*/ readonly billableSizeInGbs!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly createImageAllowed!: pulumi.Output<boolean>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly imageSourceDetails!: pulumi.Output<outputs.CoreImageImageSourceDetails | undefined>;
    public readonly instanceId!: pulumi.Output<string | undefined>;
    public readonly launchMode!: pulumi.Output<string>;
    public /*out*/ readonly launchOptions!: pulumi.Output<outputs.CoreImageLaunchOption[]>;
    public /*out*/ readonly listingType!: pulumi.Output<string>;
    public /*out*/ readonly operatingSystem!: pulumi.Output<string>;
    public /*out*/ readonly operatingSystemVersion!: pulumi.Output<string>;
    public /*out*/ readonly sizeInMbs!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CoreImageTimeouts | undefined>;

    /**
     * Create a CoreImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CoreImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CoreImageArgs | CoreImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CoreImageState | undefined;
            resourceInputs["agentFeatures"] = state ? state.agentFeatures : undefined;
            resourceInputs["baseImageId"] = state ? state.baseImageId : undefined;
            resourceInputs["billableSizeInGbs"] = state ? state.billableSizeInGbs : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["createImageAllowed"] = state ? state.createImageAllowed : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["imageSourceDetails"] = state ? state.imageSourceDetails : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["launchMode"] = state ? state.launchMode : undefined;
            resourceInputs["launchOptions"] = state ? state.launchOptions : undefined;
            resourceInputs["listingType"] = state ? state.listingType : undefined;
            resourceInputs["operatingSystem"] = state ? state.operatingSystem : undefined;
            resourceInputs["operatingSystemVersion"] = state ? state.operatingSystemVersion : undefined;
            resourceInputs["sizeInMbs"] = state ? state.sizeInMbs : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CoreImageArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["imageSourceDetails"] = args ? args.imageSourceDetails : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["launchMode"] = args ? args.launchMode : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["agentFeatures"] = undefined /*out*/;
            resourceInputs["baseImageId"] = undefined /*out*/;
            resourceInputs["billableSizeInGbs"] = undefined /*out*/;
            resourceInputs["createImageAllowed"] = undefined /*out*/;
            resourceInputs["launchOptions"] = undefined /*out*/;
            resourceInputs["listingType"] = undefined /*out*/;
            resourceInputs["operatingSystem"] = undefined /*out*/;
            resourceInputs["operatingSystemVersion"] = undefined /*out*/;
            resourceInputs["sizeInMbs"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CoreImage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CoreImage resources.
 */
export interface CoreImageState {
    agentFeatures?: pulumi.Input<pulumi.Input<inputs.CoreImageAgentFeature>[]>;
    baseImageId?: pulumi.Input<string>;
    billableSizeInGbs?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    createImageAllowed?: pulumi.Input<boolean>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    imageSourceDetails?: pulumi.Input<inputs.CoreImageImageSourceDetails>;
    instanceId?: pulumi.Input<string>;
    launchMode?: pulumi.Input<string>;
    launchOptions?: pulumi.Input<pulumi.Input<inputs.CoreImageLaunchOption>[]>;
    listingType?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    operatingSystemVersion?: pulumi.Input<string>;
    sizeInMbs?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreImageTimeouts>;
}

/**
 * The set of arguments for constructing a CoreImage resource.
 */
export interface CoreImageArgs {
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    imageSourceDetails?: pulumi.Input<inputs.CoreImageImageSourceDetails>;
    instanceId?: pulumi.Input<string>;
    launchMode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreImageTimeouts>;
}
