// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsApprovalWorkflow(args: GetIdentityDomainsApprovalWorkflowArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsApprovalWorkflowResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsApprovalWorkflow:getIdentityDomainsApprovalWorkflow", {
        "approvalWorkflowId": args.approvalWorkflowId,
        "attributeSets": args.attributeSets,
        "attributes": args.attributes,
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsApprovalWorkflow.
 */
export interface GetIdentityDomainsApprovalWorkflowArgs {
    approvalWorkflowId: string;
    attributeSets?: string[];
    attributes?: string;
    authorization?: string;
    idcsEndpoint: string;
    resourceTypeSchemaVersion?: string;
}

/**
 * A collection of values returned by getIdentityDomainsApprovalWorkflow.
 */
export interface GetIdentityDomainsApprovalWorkflowResult {
    readonly approvalWorkflowId: string;
    readonly approvalWorkflowSteps: outputs.GetIdentityDomainsApprovalWorkflowApprovalWorkflowStep[];
    readonly attributeSets?: string[];
    readonly attributes?: string;
    readonly authorization?: string;
    readonly compartmentOcid: string;
    readonly deleteInProgress: boolean;
    readonly description: string;
    readonly domainOcid: string;
    readonly id: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsApprovalWorkflowIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsApprovalWorkflowIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly maxDurations: outputs.GetIdentityDomainsApprovalWorkflowMaxDuration[];
    readonly metas: outputs.GetIdentityDomainsApprovalWorkflowMeta[];
    readonly name: string;
    readonly ocid: string;
    readonly resourceTypeSchemaVersion?: string;
    readonly schemas: string[];
    readonly tags: outputs.GetIdentityDomainsApprovalWorkflowTag[];
    readonly tenancyOcid: string;
}
export function getIdentityDomainsApprovalWorkflowOutput(args: GetIdentityDomainsApprovalWorkflowOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsApprovalWorkflowResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsApprovalWorkflow(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsApprovalWorkflow.
 */
export interface GetIdentityDomainsApprovalWorkflowOutputArgs {
    approvalWorkflowId: pulumi.Input<string>;
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
}
