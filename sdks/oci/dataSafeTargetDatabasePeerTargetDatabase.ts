// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataSafeTargetDatabasePeerTargetDatabase extends pulumi.CustomResource {
    /**
     * Get an existing DataSafeTargetDatabasePeerTargetDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataSafeTargetDatabasePeerTargetDatabaseState, opts?: pulumi.CustomResourceOptions): DataSafeTargetDatabasePeerTargetDatabase {
        return new DataSafeTargetDatabasePeerTargetDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/dataSafeTargetDatabasePeerTargetDatabase:DataSafeTargetDatabasePeerTargetDatabase';

    /**
     * Returns true if the given object is an instance of DataSafeTargetDatabasePeerTargetDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataSafeTargetDatabasePeerTargetDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataSafeTargetDatabasePeerTargetDatabase.__pulumiType;
    }

    public readonly databaseDetails!: pulumi.Output<outputs.DataSafeTargetDatabasePeerTargetDatabaseDatabaseDetails>;
    public /*out*/ readonly databaseUniqueName!: pulumi.Output<string>;
    public readonly dataguardAssociationId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly key!: pulumi.Output<number>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly role!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly targetDatabaseId!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DataSafeTargetDatabasePeerTargetDatabaseTimeouts | undefined>;
    public readonly tlsConfig!: pulumi.Output<outputs.DataSafeTargetDatabasePeerTargetDatabaseTlsConfig | undefined>;

    /**
     * Create a DataSafeTargetDatabasePeerTargetDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataSafeTargetDatabasePeerTargetDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataSafeTargetDatabasePeerTargetDatabaseArgs | DataSafeTargetDatabasePeerTargetDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataSafeTargetDatabasePeerTargetDatabaseState | undefined;
            resourceInputs["databaseDetails"] = state ? state.databaseDetails : undefined;
            resourceInputs["databaseUniqueName"] = state ? state.databaseUniqueName : undefined;
            resourceInputs["dataguardAssociationId"] = state ? state.dataguardAssociationId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targetDatabaseId"] = state ? state.targetDatabaseId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tlsConfig"] = state ? state.tlsConfig : undefined;
        } else {
            const args = argsOrState as DataSafeTargetDatabasePeerTargetDatabaseArgs | undefined;
            if ((!args || args.databaseDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseDetails'");
            }
            if ((!args || args.targetDatabaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetDatabaseId'");
            }
            resourceInputs["databaseDetails"] = args ? args.databaseDetails : undefined;
            resourceInputs["dataguardAssociationId"] = args ? args.dataguardAssociationId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["targetDatabaseId"] = args ? args.targetDatabaseId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tlsConfig"] = args ? args.tlsConfig : undefined;
            resourceInputs["databaseUniqueName"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataSafeTargetDatabasePeerTargetDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataSafeTargetDatabasePeerTargetDatabase resources.
 */
export interface DataSafeTargetDatabasePeerTargetDatabaseState {
    databaseDetails?: pulumi.Input<inputs.DataSafeTargetDatabasePeerTargetDatabaseDatabaseDetails>;
    databaseUniqueName?: pulumi.Input<string>;
    dataguardAssociationId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    key?: pulumi.Input<number>;
    lifecycleDetails?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    targetDatabaseId?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataSafeTargetDatabasePeerTargetDatabaseTimeouts>;
    tlsConfig?: pulumi.Input<inputs.DataSafeTargetDatabasePeerTargetDatabaseTlsConfig>;
}

/**
 * The set of arguments for constructing a DataSafeTargetDatabasePeerTargetDatabase resource.
 */
export interface DataSafeTargetDatabasePeerTargetDatabaseArgs {
    databaseDetails: pulumi.Input<inputs.DataSafeTargetDatabasePeerTargetDatabaseDatabaseDetails>;
    dataguardAssociationId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    targetDatabaseId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataSafeTargetDatabasePeerTargetDatabaseTimeouts>;
    tlsConfig?: pulumi.Input<inputs.DataSafeTargetDatabasePeerTargetDatabaseTlsConfig>;
}
