// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerengineVirtualNodePool extends pulumi.CustomResource {
    /**
     * Get an existing ContainerengineVirtualNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerengineVirtualNodePoolState, opts?: pulumi.CustomResourceOptions): ContainerengineVirtualNodePool {
        return new ContainerengineVirtualNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/containerengineVirtualNodePool:ContainerengineVirtualNodePool';

    /**
     * Returns true if the given object is an instance of ContainerengineVirtualNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerengineVirtualNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerengineVirtualNodePool.__pulumiType;
    }

    public readonly clusterId!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly initialVirtualNodeLabels!: pulumi.Output<outputs.ContainerengineVirtualNodePoolInitialVirtualNodeLabel[] | undefined>;
    public /*out*/ readonly kubernetesVersion!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly nsgIds!: pulumi.Output<string[]>;
    public readonly placementConfigurations!: pulumi.Output<outputs.ContainerengineVirtualNodePoolPlacementConfiguration[]>;
    public readonly podConfiguration!: pulumi.Output<outputs.ContainerengineVirtualNodePoolPodConfiguration>;
    public readonly size!: pulumi.Output<number>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public readonly taints!: pulumi.Output<outputs.ContainerengineVirtualNodePoolTaint[] | undefined>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerengineVirtualNodePoolTimeouts | undefined>;
    public readonly virtualNodeTags!: pulumi.Output<outputs.ContainerengineVirtualNodePoolVirtualNodeTags | undefined>;

    /**
     * Create a ContainerengineVirtualNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerengineVirtualNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerengineVirtualNodePoolArgs | ContainerengineVirtualNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerengineVirtualNodePoolState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["initialVirtualNodeLabels"] = state ? state.initialVirtualNodeLabels : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["nsgIds"] = state ? state.nsgIds : undefined;
            resourceInputs["placementConfigurations"] = state ? state.placementConfigurations : undefined;
            resourceInputs["podConfiguration"] = state ? state.podConfiguration : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualNodeTags"] = state ? state.virtualNodeTags : undefined;
        } else {
            const args = argsOrState as ContainerengineVirtualNodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.placementConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'placementConfigurations'");
            }
            if ((!args || args.podConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'podConfiguration'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["initialVirtualNodeLabels"] = args ? args.initialVirtualNodeLabels : undefined;
            resourceInputs["nsgIds"] = args ? args.nsgIds : undefined;
            resourceInputs["placementConfigurations"] = args ? args.placementConfigurations : undefined;
            resourceInputs["podConfiguration"] = args ? args.podConfiguration : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualNodeTags"] = args ? args.virtualNodeTags : undefined;
            resourceInputs["kubernetesVersion"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerengineVirtualNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerengineVirtualNodePool resources.
 */
export interface ContainerengineVirtualNodePoolState {
    clusterId?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    initialVirtualNodeLabels?: pulumi.Input<pulumi.Input<inputs.ContainerengineVirtualNodePoolInitialVirtualNodeLabel>[]>;
    kubernetesVersion?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    placementConfigurations?: pulumi.Input<pulumi.Input<inputs.ContainerengineVirtualNodePoolPlacementConfiguration>[]>;
    podConfiguration?: pulumi.Input<inputs.ContainerengineVirtualNodePoolPodConfiguration>;
    size?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.ContainerengineVirtualNodePoolTaint>[]>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerengineVirtualNodePoolTimeouts>;
    virtualNodeTags?: pulumi.Input<inputs.ContainerengineVirtualNodePoolVirtualNodeTags>;
}

/**
 * The set of arguments for constructing a ContainerengineVirtualNodePool resource.
 */
export interface ContainerengineVirtualNodePoolArgs {
    clusterId: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    initialVirtualNodeLabels?: pulumi.Input<pulumi.Input<inputs.ContainerengineVirtualNodePoolInitialVirtualNodeLabel>[]>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    placementConfigurations: pulumi.Input<pulumi.Input<inputs.ContainerengineVirtualNodePoolPlacementConfiguration>[]>;
    podConfiguration: pulumi.Input<inputs.ContainerengineVirtualNodePoolPodConfiguration>;
    size: pulumi.Input<number>;
    taints?: pulumi.Input<pulumi.Input<inputs.ContainerengineVirtualNodePoolTaint>[]>;
    timeouts?: pulumi.Input<inputs.ContainerengineVirtualNodePoolTimeouts>;
    virtualNodeTags?: pulumi.Input<inputs.ContainerengineVirtualNodePoolVirtualNodeTags>;
}
