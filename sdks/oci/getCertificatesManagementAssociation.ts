// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCertificatesManagementAssociation(args: GetCertificatesManagementAssociationArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificatesManagementAssociationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCertificatesManagementAssociation:getCertificatesManagementAssociation", {
        "associationId": args.associationId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCertificatesManagementAssociation.
 */
export interface GetCertificatesManagementAssociationArgs {
    associationId: string;
    id?: string;
}

/**
 * A collection of values returned by getCertificatesManagementAssociation.
 */
export interface GetCertificatesManagementAssociationResult {
    readonly associatedResourceId: string;
    readonly associationId: string;
    readonly associationType: string;
    readonly certificatesResourceId: string;
    readonly compartmentId: string;
    readonly id: string;
    readonly name: string;
    readonly state: string;
    readonly timeCreated: string;
}
export function getCertificatesManagementAssociationOutput(args: GetCertificatesManagementAssociationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificatesManagementAssociationResult> {
    return pulumi.output(args).apply((a: any) => getCertificatesManagementAssociation(a, opts))
}

/**
 * A collection of arguments for invoking getCertificatesManagementAssociation.
 */
export interface GetCertificatesManagementAssociationOutputArgs {
    associationId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
