// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StackMonitoringMetricExtensionsTestManagement extends pulumi.CustomResource {
    /**
     * Get an existing StackMonitoringMetricExtensionsTestManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackMonitoringMetricExtensionsTestManagementState, opts?: pulumi.CustomResourceOptions): StackMonitoringMetricExtensionsTestManagement {
        return new StackMonitoringMetricExtensionsTestManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/stackMonitoringMetricExtensionsTestManagement:StackMonitoringMetricExtensionsTestManagement';

    /**
     * Returns true if the given object is an instance of StackMonitoringMetricExtensionsTestManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StackMonitoringMetricExtensionsTestManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackMonitoringMetricExtensionsTestManagement.__pulumiType;
    }

    public readonly metricExtensionId!: pulumi.Output<string>;
    public readonly resourceIds!: pulumi.Output<string[]>;
    public /*out*/ readonly testRunId!: pulumi.Output<string>;
    public /*out*/ readonly testRunMetricSuffix!: pulumi.Output<string>;
    public /*out*/ readonly testRunNamespaceName!: pulumi.Output<string>;
    public /*out*/ readonly testRunResourceGroupName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StackMonitoringMetricExtensionsTestManagementTimeouts | undefined>;

    /**
     * Create a StackMonitoringMetricExtensionsTestManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackMonitoringMetricExtensionsTestManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackMonitoringMetricExtensionsTestManagementArgs | StackMonitoringMetricExtensionsTestManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StackMonitoringMetricExtensionsTestManagementState | undefined;
            resourceInputs["metricExtensionId"] = state ? state.metricExtensionId : undefined;
            resourceInputs["resourceIds"] = state ? state.resourceIds : undefined;
            resourceInputs["testRunId"] = state ? state.testRunId : undefined;
            resourceInputs["testRunMetricSuffix"] = state ? state.testRunMetricSuffix : undefined;
            resourceInputs["testRunNamespaceName"] = state ? state.testRunNamespaceName : undefined;
            resourceInputs["testRunResourceGroupName"] = state ? state.testRunResourceGroupName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as StackMonitoringMetricExtensionsTestManagementArgs | undefined;
            if ((!args || args.metricExtensionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricExtensionId'");
            }
            if ((!args || args.resourceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceIds'");
            }
            resourceInputs["metricExtensionId"] = args ? args.metricExtensionId : undefined;
            resourceInputs["resourceIds"] = args ? args.resourceIds : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["testRunId"] = undefined /*out*/;
            resourceInputs["testRunMetricSuffix"] = undefined /*out*/;
            resourceInputs["testRunNamespaceName"] = undefined /*out*/;
            resourceInputs["testRunResourceGroupName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StackMonitoringMetricExtensionsTestManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StackMonitoringMetricExtensionsTestManagement resources.
 */
export interface StackMonitoringMetricExtensionsTestManagementState {
    metricExtensionId?: pulumi.Input<string>;
    resourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    testRunId?: pulumi.Input<string>;
    testRunMetricSuffix?: pulumi.Input<string>;
    testRunNamespaceName?: pulumi.Input<string>;
    testRunResourceGroupName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StackMonitoringMetricExtensionsTestManagementTimeouts>;
}

/**
 * The set of arguments for constructing a StackMonitoringMetricExtensionsTestManagement resource.
 */
export interface StackMonitoringMetricExtensionsTestManagementArgs {
    metricExtensionId: pulumi.Input<string>;
    resourceIds: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.StackMonitoringMetricExtensionsTestManagementTimeouts>;
}
