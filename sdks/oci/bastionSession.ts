// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BastionSession extends pulumi.CustomResource {
    /**
     * Get an existing BastionSession resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BastionSessionState, opts?: pulumi.CustomResourceOptions): BastionSession {
        return new BastionSession(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/bastionSession:BastionSession';

    /**
     * Returns true if the given object is an instance of BastionSession.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BastionSession {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BastionSession.__pulumiType;
    }

    public readonly bastionId!: pulumi.Output<string>;
    public /*out*/ readonly bastionName!: pulumi.Output<string>;
    public /*out*/ readonly bastionPublicHostKeyInfo!: pulumi.Output<string>;
    public /*out*/ readonly bastionUserName!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly keyDetails!: pulumi.Output<outputs.BastionSessionKeyDetails>;
    public readonly keyType!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly sessionTtlInSeconds!: pulumi.Output<number>;
    public /*out*/ readonly sshMetadata!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly targetResourceDetails!: pulumi.Output<outputs.BastionSessionTargetResourceDetails>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BastionSessionTimeouts | undefined>;

    /**
     * Create a BastionSession resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BastionSessionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BastionSessionArgs | BastionSessionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BastionSessionState | undefined;
            resourceInputs["bastionId"] = state ? state.bastionId : undefined;
            resourceInputs["bastionName"] = state ? state.bastionName : undefined;
            resourceInputs["bastionPublicHostKeyInfo"] = state ? state.bastionPublicHostKeyInfo : undefined;
            resourceInputs["bastionUserName"] = state ? state.bastionUserName : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["keyDetails"] = state ? state.keyDetails : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["sessionTtlInSeconds"] = state ? state.sessionTtlInSeconds : undefined;
            resourceInputs["sshMetadata"] = state ? state.sshMetadata : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targetResourceDetails"] = state ? state.targetResourceDetails : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BastionSessionArgs | undefined;
            if ((!args || args.bastionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bastionId'");
            }
            if ((!args || args.keyDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyDetails'");
            }
            if ((!args || args.targetResourceDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceDetails'");
            }
            resourceInputs["bastionId"] = args ? args.bastionId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["keyDetails"] = args ? args.keyDetails : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["sessionTtlInSeconds"] = args ? args.sessionTtlInSeconds : undefined;
            resourceInputs["targetResourceDetails"] = args ? args.targetResourceDetails : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["bastionName"] = undefined /*out*/;
            resourceInputs["bastionPublicHostKeyInfo"] = undefined /*out*/;
            resourceInputs["bastionUserName"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["sshMetadata"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BastionSession.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BastionSession resources.
 */
export interface BastionSessionState {
    bastionId?: pulumi.Input<string>;
    bastionName?: pulumi.Input<string>;
    bastionPublicHostKeyInfo?: pulumi.Input<string>;
    bastionUserName?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    keyDetails?: pulumi.Input<inputs.BastionSessionKeyDetails>;
    keyType?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    sessionTtlInSeconds?: pulumi.Input<number>;
    sshMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    state?: pulumi.Input<string>;
    targetResourceDetails?: pulumi.Input<inputs.BastionSessionTargetResourceDetails>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BastionSessionTimeouts>;
}

/**
 * The set of arguments for constructing a BastionSession resource.
 */
export interface BastionSessionArgs {
    bastionId: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    keyDetails: pulumi.Input<inputs.BastionSessionKeyDetails>;
    keyType?: pulumi.Input<string>;
    sessionTtlInSeconds?: pulumi.Input<number>;
    targetResourceDetails: pulumi.Input<inputs.BastionSessionTargetResourceDetails>;
    timeouts?: pulumi.Input<inputs.BastionSessionTimeouts>;
}
