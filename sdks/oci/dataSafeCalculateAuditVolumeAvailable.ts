// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataSafeCalculateAuditVolumeAvailable extends pulumi.CustomResource {
    /**
     * Get an existing DataSafeCalculateAuditVolumeAvailable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataSafeCalculateAuditVolumeAvailableState, opts?: pulumi.CustomResourceOptions): DataSafeCalculateAuditVolumeAvailable {
        return new DataSafeCalculateAuditVolumeAvailable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/dataSafeCalculateAuditVolumeAvailable:DataSafeCalculateAuditVolumeAvailable';

    /**
     * Returns true if the given object is an instance of DataSafeCalculateAuditVolumeAvailable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataSafeCalculateAuditVolumeAvailable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataSafeCalculateAuditVolumeAvailable.__pulumiType;
    }

    public readonly auditCollectionStartTime!: pulumi.Output<string>;
    public readonly auditProfileId!: pulumi.Output<string>;
    public /*out*/ readonly availableAuditVolumes!: pulumi.Output<outputs.DataSafeCalculateAuditVolumeAvailableAvailableAuditVolume[]>;
    public readonly databaseUniqueName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DataSafeCalculateAuditVolumeAvailableTimeouts | undefined>;
    public readonly trailLocations!: pulumi.Output<string[]>;

    /**
     * Create a DataSafeCalculateAuditVolumeAvailable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataSafeCalculateAuditVolumeAvailableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataSafeCalculateAuditVolumeAvailableArgs | DataSafeCalculateAuditVolumeAvailableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataSafeCalculateAuditVolumeAvailableState | undefined;
            resourceInputs["auditCollectionStartTime"] = state ? state.auditCollectionStartTime : undefined;
            resourceInputs["auditProfileId"] = state ? state.auditProfileId : undefined;
            resourceInputs["availableAuditVolumes"] = state ? state.availableAuditVolumes : undefined;
            resourceInputs["databaseUniqueName"] = state ? state.databaseUniqueName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trailLocations"] = state ? state.trailLocations : undefined;
        } else {
            const args = argsOrState as DataSafeCalculateAuditVolumeAvailableArgs | undefined;
            if ((!args || args.auditProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'auditProfileId'");
            }
            resourceInputs["auditCollectionStartTime"] = args ? args.auditCollectionStartTime : undefined;
            resourceInputs["auditProfileId"] = args ? args.auditProfileId : undefined;
            resourceInputs["databaseUniqueName"] = args ? args.databaseUniqueName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trailLocations"] = args ? args.trailLocations : undefined;
            resourceInputs["availableAuditVolumes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataSafeCalculateAuditVolumeAvailable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataSafeCalculateAuditVolumeAvailable resources.
 */
export interface DataSafeCalculateAuditVolumeAvailableState {
    auditCollectionStartTime?: pulumi.Input<string>;
    auditProfileId?: pulumi.Input<string>;
    availableAuditVolumes?: pulumi.Input<pulumi.Input<inputs.DataSafeCalculateAuditVolumeAvailableAvailableAuditVolume>[]>;
    databaseUniqueName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataSafeCalculateAuditVolumeAvailableTimeouts>;
    trailLocations?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DataSafeCalculateAuditVolumeAvailable resource.
 */
export interface DataSafeCalculateAuditVolumeAvailableArgs {
    auditCollectionStartTime?: pulumi.Input<string>;
    auditProfileId: pulumi.Input<string>;
    databaseUniqueName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataSafeCalculateAuditVolumeAvailableTimeouts>;
    trailLocations?: pulumi.Input<pulumi.Input<string>[]>;
}
