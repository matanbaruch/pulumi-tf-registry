// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsSetting(args: GetIdentityDomainsSettingArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsSettingResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsSetting:getIdentityDomainsSetting", {
        "attributeSets": args.attributeSets,
        "attributes": args.attributes,
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
        "settingId": args.settingId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsSetting.
 */
export interface GetIdentityDomainsSettingArgs {
    attributeSets?: string[];
    attributes?: string;
    authorization?: string;
    idcsEndpoint: string;
    resourceTypeSchemaVersion?: string;
    settingId: string;
}

/**
 * A collection of values returned by getIdentityDomainsSetting.
 */
export interface GetIdentityDomainsSettingResult {
    readonly accountAlwaysTrustScope: boolean;
    readonly allowedDomains: string[];
    readonly allowedForgotPasswordFlowReturnUrls: string[];
    readonly allowedNotificationRedirectUrls: string[];
    readonly attributeSets?: string[];
    readonly attributes?: string;
    readonly auditEventRetentionPeriod: number;
    readonly authorization?: string;
    readonly certificateValidations: outputs.GetIdentityDomainsSettingCertificateValidation[];
    readonly cloudAccountName: string;
    readonly cloudGateCorsSettings: outputs.GetIdentityDomainsSettingCloudGateCorsSetting[];
    readonly cloudMigrationCustomUrl: string;
    readonly cloudMigrationUrlEnabled: boolean;
    readonly companyNames: outputs.GetIdentityDomainsSettingCompanyName[];
    readonly compartmentOcid: string;
    readonly contactEmails: string[];
    readonly csrAccess: string;
    readonly customBranding: boolean;
    readonly customCssLocation: string;
    readonly customHtmlLocation: string;
    readonly customTranslation: string;
    readonly defaultCompanyNames: outputs.GetIdentityDomainsSettingDefaultCompanyName[];
    readonly defaultImages: outputs.GetIdentityDomainsSettingDefaultImage[];
    readonly defaultLoginTexts: outputs.GetIdentityDomainsSettingDefaultLoginText[];
    readonly defaultTrustScope: string;
    readonly deleteInProgress: boolean;
    readonly diagnosticLevel: number;
    readonly diagnosticRecordForSearchIdentifiesReturnedResources: boolean;
    readonly diagnosticTracingUpto: string;
    readonly domainOcid: string;
    readonly enableTermsOfUse: boolean;
    readonly externalId: string;
    readonly iamUpstSessionExpiry: number;
    readonly id: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsSettingIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsSettingIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly images: outputs.GetIdentityDomainsSettingImage[];
    readonly isHostedPage: boolean;
    readonly issuer: string;
    readonly locale: string;
    readonly loginTexts: outputs.GetIdentityDomainsSettingLoginText[];
    readonly maxNoOfAppCmvaToReturn: number;
    readonly maxNoOfAppRoleMembersToReturn: number;
    readonly metas: outputs.GetIdentityDomainsSettingMeta[];
    readonly migrationStatus: string;
    readonly ocid: string;
    readonly onPremisesProvisioning: boolean;
    readonly preferredLanguage: string;
    readonly prevIssuer: string;
    readonly privacyPolicyUrl: string;
    readonly purgeConfigs: outputs.GetIdentityDomainsSettingPurgeConfig[];
    readonly reAuthFactors: string[];
    readonly reAuthWhenChangingMyAuthenticationFactors: boolean;
    readonly resourceTypeSchemaVersion?: string;
    readonly schemas: string[];
    readonly serviceAdminCannotListOtherUsers: boolean;
    readonly settingId: string;
    readonly signingCertPublicAccess: boolean;
    readonly subMappingAttr: string;
    readonly tags: outputs.GetIdentityDomainsSettingTag[];
    readonly tenancyOcid: string;
    readonly tenantCustomClaims: outputs.GetIdentityDomainsSettingTenantCustomClaim[];
    readonly termsOfUseUrl: string;
    readonly timezone: string;
}
export function getIdentityDomainsSettingOutput(args: GetIdentityDomainsSettingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsSettingResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsSetting(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsSetting.
 */
export interface GetIdentityDomainsSettingOutputArgs {
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    settingId: pulumi.Input<string>;
}
