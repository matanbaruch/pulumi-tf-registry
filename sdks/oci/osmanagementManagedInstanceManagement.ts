// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OsmanagementManagedInstanceManagement extends pulumi.CustomResource {
    /**
     * Get an existing OsmanagementManagedInstanceManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsmanagementManagedInstanceManagementState, opts?: pulumi.CustomResourceOptions): OsmanagementManagedInstanceManagement {
        return new OsmanagementManagedInstanceManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/osmanagementManagedInstanceManagement:OsmanagementManagedInstanceManagement';

    /**
     * Returns true if the given object is an instance of OsmanagementManagedInstanceManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsmanagementManagedInstanceManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsmanagementManagedInstanceManagement.__pulumiType;
    }

    public readonly childSoftwareSources!: pulumi.Output<outputs.OsmanagementManagedInstanceManagementChildSoftwareSource[] | undefined>;
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly description!: pulumi.Output<string>;
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly lastBoot!: pulumi.Output<string>;
    public /*out*/ readonly lastCheckin!: pulumi.Output<string>;
    public readonly managedInstanceGroups!: pulumi.Output<outputs.OsmanagementManagedInstanceManagementManagedInstanceGroup[] | undefined>;
    public readonly managedInstanceId!: pulumi.Output<string>;
    public /*out*/ readonly osKernelVersion!: pulumi.Output<string>;
    public /*out*/ readonly osName!: pulumi.Output<string>;
    public /*out*/ readonly osVersion!: pulumi.Output<string>;
    public readonly parentSoftwareSource!: pulumi.Output<outputs.OsmanagementManagedInstanceManagementParentSoftwareSource | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OsmanagementManagedInstanceManagementTimeouts | undefined>;
    public /*out*/ readonly updatesAvailable!: pulumi.Output<number>;

    /**
     * Create a OsmanagementManagedInstanceManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsmanagementManagedInstanceManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsmanagementManagedInstanceManagementArgs | OsmanagementManagedInstanceManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsmanagementManagedInstanceManagementState | undefined;
            resourceInputs["childSoftwareSources"] = state ? state.childSoftwareSources : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["lastBoot"] = state ? state.lastBoot : undefined;
            resourceInputs["lastCheckin"] = state ? state.lastCheckin : undefined;
            resourceInputs["managedInstanceGroups"] = state ? state.managedInstanceGroups : undefined;
            resourceInputs["managedInstanceId"] = state ? state.managedInstanceId : undefined;
            resourceInputs["osKernelVersion"] = state ? state.osKernelVersion : undefined;
            resourceInputs["osName"] = state ? state.osName : undefined;
            resourceInputs["osVersion"] = state ? state.osVersion : undefined;
            resourceInputs["parentSoftwareSource"] = state ? state.parentSoftwareSource : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatesAvailable"] = state ? state.updatesAvailable : undefined;
        } else {
            const args = argsOrState as OsmanagementManagedInstanceManagementArgs | undefined;
            if ((!args || args.managedInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedInstanceId'");
            }
            resourceInputs["childSoftwareSources"] = args ? args.childSoftwareSources : undefined;
            resourceInputs["managedInstanceGroups"] = args ? args.managedInstanceGroups : undefined;
            resourceInputs["managedInstanceId"] = args ? args.managedInstanceId : undefined;
            resourceInputs["parentSoftwareSource"] = args ? args.parentSoftwareSource : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["lastBoot"] = undefined /*out*/;
            resourceInputs["lastCheckin"] = undefined /*out*/;
            resourceInputs["osKernelVersion"] = undefined /*out*/;
            resourceInputs["osName"] = undefined /*out*/;
            resourceInputs["osVersion"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatesAvailable"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsmanagementManagedInstanceManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsmanagementManagedInstanceManagement resources.
 */
export interface OsmanagementManagedInstanceManagementState {
    childSoftwareSources?: pulumi.Input<pulumi.Input<inputs.OsmanagementManagedInstanceManagementChildSoftwareSource>[]>;
    compartmentId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    lastBoot?: pulumi.Input<string>;
    lastCheckin?: pulumi.Input<string>;
    managedInstanceGroups?: pulumi.Input<pulumi.Input<inputs.OsmanagementManagedInstanceManagementManagedInstanceGroup>[]>;
    managedInstanceId?: pulumi.Input<string>;
    osKernelVersion?: pulumi.Input<string>;
    osName?: pulumi.Input<string>;
    osVersion?: pulumi.Input<string>;
    parentSoftwareSource?: pulumi.Input<inputs.OsmanagementManagedInstanceManagementParentSoftwareSource>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsmanagementManagedInstanceManagementTimeouts>;
    updatesAvailable?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OsmanagementManagedInstanceManagement resource.
 */
export interface OsmanagementManagedInstanceManagementArgs {
    childSoftwareSources?: pulumi.Input<pulumi.Input<inputs.OsmanagementManagedInstanceManagementChildSoftwareSource>[]>;
    managedInstanceGroups?: pulumi.Input<pulumi.Input<inputs.OsmanagementManagedInstanceManagementManagedInstanceGroup>[]>;
    managedInstanceId: pulumi.Input<string>;
    parentSoftwareSource?: pulumi.Input<inputs.OsmanagementManagedInstanceManagementParentSoftwareSource>;
    timeouts?: pulumi.Input<inputs.OsmanagementManagedInstanceManagementTimeouts>;
}
