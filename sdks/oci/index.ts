// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppendArgs, AppendState } from "./append";
export type Append = import("./append").Append;
export const Append: typeof import("./append").Append = null as any;
utilities.lazyLoad(exports, ["Append"], () => require("./append"));

export { GetExecTestArgs, GetExecTestResult, GetExecTestOutputArgs } from "./getExecTest";
export const getExecTest: typeof import("./getExecTest").getExecTest = null as any;
export const getExecTestOutput: typeof import("./getExecTest").getExecTestOutput = null as any;
utilities.lazyLoad(exports, ["getExecTest","getExecTestOutput"], () => require("./getExecTest"));

export { GetStructureTestArgs, GetStructureTestResult, GetStructureTestOutputArgs } from "./getStructureTest";
export const getStructureTest: typeof import("./getStructureTest").getStructureTest = null as any;
export const getStructureTestOutput: typeof import("./getStructureTest").getStructureTestOutput = null as any;
utilities.lazyLoad(exports, ["getStructureTest","getStructureTestOutput"], () => require("./getStructureTest"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TagsArgs, TagsState } from "./tags";
export type Tags = import("./tags").Tags;
export const Tags: typeof import("./tags").Tags = null as any;
utilities.lazyLoad(exports, ["Tags"], () => require("./tags"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:index/append:Append":
                return new Append(name, <any>undefined, { urn })
            case "oci:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "oci:index/tags:Tags":
                return new Tags(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "index/append", _module)
pulumi.runtime.registerResourceModule("oci", "index/tag", _module)
pulumi.runtime.registerResourceModule("oci", "index/tags", _module)
pulumi.runtime.registerResourcePackage("oci", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:oci") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
